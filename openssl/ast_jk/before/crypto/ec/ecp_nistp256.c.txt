TranslationUnitDecl 0x2a7b2e41bd8 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x2a7b2e42470 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x2a7b2e42170 '__int128'
|-TypedefDecl 0x2a7b2e424e0 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x2a7b2e42190 'unsigned __int128'
|-TypedefDecl 0x2a7b2e42818 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x2a7b2e425d0 'struct __NSConstantString_tag'
|   `-Record 0x2a7b2e42538 '__NSConstantString_tag'
|-TypedefDecl 0x2a7b2e42888 <<invalid sloc>> <invalid sloc> implicit size_t 'unsigned long long'
| `-BuiltinType 0x2a7b2e41db0 'unsigned long long'
|-TypedefDecl 0x2a7b2e42920 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x2a7b2e428e0 'char *'
|   `-BuiltinType 0x2a7b2e41c70 'char'
|-TypedefDecl 0x2a7b2e42990 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x2a7b2e428e0 'char *'
|   `-BuiltinType 0x2a7b2e41c70 'char'
|-TypedefDecl 0x2a7b2e42a50 <D:\Microsoft Visual Studio 12.0\VC\include\vadefs.h:48:1, col:29> col:29 referenced uintptr_t 'unsigned long long'
| `-BuiltinType 0x2a7b2e41db0 'unsigned long long'
|-TypedefDecl 0x2a7b2e42ac0 <line:59:1, col:17> col:17 referenced va_list 'char *'
| `-PointerType 0x2a7b2e428e0 'char *'
|   `-BuiltinType 0x2a7b2e41c70 'char'
|-FunctionDecl 0x2a7b497f410 <line:119:21> col:21 implicit __va_start 'void (char **, ...)' extern
| |-ParmVarDecl 0x2a7b497f4b0 <<invalid sloc>> <invalid sloc> 'char **'
| `-NoThrowAttr 0x2a7b497f520 <col:21> Implicit
|-FunctionDecl 0x2a7b497f578 prev 0x2a7b497f410 <col:1, col:46> col:21 __va_start 'void (char **, ...)' extern
| |-ParmVarDecl 0x2a7b497f2a0 <col:32, col:40> col:41 'va_list *'
| `-NoThrowAttr 0x2a7b497f668 <col:21> Inherited Implicit
|-TypedefDecl 0x2a7b497f6a8 prev 0x2a7b2e42888 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:494:1, col:29> col:29 referenced size_t 'unsigned long long'
| `-BuiltinType 0x2a7b2e41db0 'unsigned long long'
|-TypedefDecl 0x2a7b497f750 <line:503:1, col:16> col:16 referenced rsize_t 'size_t':'unsigned long long'
| `-TypedefType 0x2a7b497f720 'size_t' sugar
|   |-Typedef 0x2a7b497f6a8 'size_t'
|   `-BuiltinType 0x2a7b2e41db0 'unsigned long long'
|-TypedefDecl 0x2a7b497f7c0 <line:510:1, col:29> col:29 intptr_t 'long long'
| `-BuiltinType 0x2a7b2e41d10 'long long'
|-TypedefDecl 0x2a7b497f830 <line:528:1, col:29> col:29 ptrdiff_t 'long long'
| `-BuiltinType 0x2a7b2e41d10 'long long'
|-TypedefDecl 0x2a7b497f8a0 <line:536:1, col:24> col:24 referenced wchar_t 'unsigned short'
| `-BuiltinType 0x2a7b2e41d50 'unsigned short'
|-TypedefDecl 0x2a7b497f910 <line:541:1, col:24> col:24 wint_t 'unsigned short'
| `-BuiltinType 0x2a7b2e41d50 'unsigned short'
|-TypedefDecl 0x2a7b497f980 <line:542:1, col:24> col:24 wctype_t 'unsigned short'
| `-BuiltinType 0x2a7b2e41d50 'unsigned short'
|-TypedefDecl 0x2a7b497f9f0 <line:563:1, col:13> col:13 referenced errno_t 'int'
| `-BuiltinType 0x2a7b2e41cd0 'int'
|-TypedefDecl 0x2a7b497fa60 <line:567:1, col:19> col:19 __time32_t 'long'
| `-BuiltinType 0x2a7b2e41cf0 'long'
|-TypedefDecl 0x2a7b497fad0 <line:572:1, col:17> col:17 referenced __time64_t 'long long'
| `-BuiltinType 0x2a7b2e41d10 'long long'
|-TypedefDecl 0x2a7b497fb60 <line:580:1, col:20> col:20 time_t '__time64_t':'long long'
| `-TypedefType 0x2a7b497fb30 '__time64_t' sugar
|   |-Typedef 0x2a7b497fad0 '__time64_t'
|   `-BuiltinType 0x2a7b2e41d10 'long long'
|-FunctionDecl 0x2a7b497fcd8 <line:637:10, col:53> col:23 _invalid_parameter_noinfo 'void (void) __attribute__((cdecl))':'void (void)'
|-FunctionDecl 0x2a7b497fef8 <line:638:10, col:83> col:44 _invalid_parameter_noinfo_noreturn 'void (void) __attribute__((noreturn)) __attribute__((cdecl))':'void (void) __attribute__((noreturn))'
|-FunctionDecl 0x2a7b49aa1d0 <line:641:9, line:642:136> col:14 _invoke_watson 'void (const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t) __attribute__((noreturn)) __attribute__((cdecl))':'void (const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t) __attribute__((noreturn))'
| |-ParmVarDecl 0x2a7b4980038 <col:40, col:54> col:55 'const wchar_t *'
| |-ParmVarDecl 0x2a7b49800b0 <col:68, col:82> col:83 'const wchar_t *'
| |-ParmVarDecl 0x2a7b4980128 <col:96, col:110> col:111 'const wchar_t *'
| |-ParmVarDecl 0x2a7b49801a8 <col:113, col:122> col:125 'unsigned int'
| `-ParmVarDecl 0x2a7b49a9f70 <col:127> col:136 'uintptr_t':'unsigned long long'
|-RecordDecl 0x2a7b49aa2b0 <line:2072:1, col:8> col:8 struct threadlocaleinfostruct
|-RecordDecl 0x2a7b49aa370 <line:2073:1, col:8> col:8 struct threadmbcinfostruct
|-TypedefDecl 0x2a7b49aa4e0 <line:2074:1, col:41> col:41 referenced pthreadlocinfo 'struct threadlocaleinfostruct *'
| `-PointerType 0x2a7b49aa490 'struct threadlocaleinfostruct *'
|   `-ElaboratedType 0x2a7b49aa430 'struct threadlocaleinfostruct' sugar
|     `-RecordType 0x2a7b49aa350 'struct threadlocaleinfostruct'
|       `-Record 0x2a7b49adfb0 'threadlocaleinfostruct'
|-TypedefDecl 0x2a7b49aa5f0 <line:2075:1, col:38> col:38 referenced pthreadmbcinfo 'struct threadmbcinfostruct *'
| `-PointerType 0x2a7b49aa5a0 'struct threadmbcinfostruct *'
|   `-ElaboratedType 0x2a7b49aa540 'struct threadmbcinfostruct' sugar
|     `-RecordType 0x2a7b49aa410 'struct threadmbcinfostruct'
|       `-Record 0x2a7b49aa370 'threadmbcinfostruct'
|-RecordDecl 0x2a7b49aa648 <line:2076:1, col:8> col:8 struct __lc_time_data
|-RecordDecl 0x2a7b49aa700 <line:2078:9, line:2082:1> line:2078:16 struct localeinfo_struct definition
| |-MaxFieldAlignmentAttr 0x2a7b49aa7c0 <<invalid sloc>> Implicit 64
| |-FieldDecl 0x2a7b49aa850 <line:2080:5, col:20> col:20 locinfo 'pthreadlocinfo':'struct threadlocaleinfostruct *'
| `-FieldDecl 0x2a7b49aa8e0 <line:2081:5, col:20> col:20 mbcinfo 'pthreadmbcinfo':'struct threadmbcinfostruct *'
|-TypedefDecl 0x2a7b49aa998 <line:2078:1, line:2082:3> col:3 _locale_tstruct 'struct localeinfo_struct':'struct localeinfo_struct'
| `-ElaboratedType 0x2a7b49aa940 'struct localeinfo_struct' sugar
|   `-RecordType 0x2a7b49aa7a0 'struct localeinfo_struct'
|     `-Record 0x2a7b49aa700 'localeinfo_struct'
|-TypedefDecl 0x2a7b49aaa70 <line:2078:1, line:2082:21> col:21 referenced _locale_t 'struct localeinfo_struct *'
| `-PointerType 0x2a7b49aaa20 'struct localeinfo_struct *'
|   `-ElaboratedType 0x2a7b49aa940 'struct localeinfo_struct' sugar
|     `-RecordType 0x2a7b49aa7a0 'struct localeinfo_struct'
|       `-Record 0x2a7b49aa700 'localeinfo_struct'
|-RecordDecl 0x2a7b49aaae8 <line:2085:9, line:2090:1> line:2085:16 struct localerefcount definition
| |-MaxFieldAlignmentAttr 0x2a7b49aaba0 <<invalid sloc>> Implicit 64
| |-FieldDecl 0x2a7b49aac18 <line:2086:9, col:15> col:15 locale 'char *'
| |-FieldDecl 0x2a7b49aacd8 <line:2087:9, col:18> col:18 wlocale 'wchar_t *'
| |-FieldDecl 0x2a7b49aad70 <line:2088:9, col:14> col:14 refcount 'int *'
| `-FieldDecl 0x2a7b49aade0 <line:2089:9, col:14> col:14 wrefcount 'int *'
|-TypedefDecl 0x2a7b49aae98 <line:2085:1, line:2090:3> col:3 referenced locrefcount 'struct localerefcount':'struct localerefcount'
| `-ElaboratedType 0x2a7b49aae40 'struct localerefcount' sugar
|   `-RecordType 0x2a7b49aab80 'struct localerefcount'
|     `-Record 0x2a7b49aaae8 'localerefcount'
|-RecordDecl 0x2a7b49adfb0 prev 0x2a7b49aa2b0 <line:2092:9, line:2111:1> line:2092:16 struct threadlocaleinfostruct definition
| |-MaxFieldAlignmentAttr 0x2a7b49ae030 <<invalid sloc>> Implicit 64
| |-FieldDecl 0x2a7b49ae0a8 <line:2093:9, col:13> col:13 refcount 'int'
| |-FieldDecl 0x2a7b49ae118 <line:2094:9, col:22> col:22 lc_codepage 'unsigned int'
| |-FieldDecl 0x2a7b49ae188 <line:2095:9, col:22> col:22 lc_collate_cp 'unsigned int'
| |-FieldDecl 0x2a7b49ae1f8 <line:2096:9, col:22> col:22 lc_time_cp 'unsigned int'
| |-FieldDecl 0x2a7b49ae3b8 <line:2097:9, col:34> col:21 lc_category 'locrefcount [6]'
| |-FieldDecl 0x2a7b49ae428 <line:2098:9, col:13> col:13 lc_clike 'int'
| |-FieldDecl 0x2a7b49ae498 <line:2099:9, col:13> col:13 mb_cur_max 'int'
| |-FieldDecl 0x2a7b49ae508 <line:2100:9, col:15> col:15 lconv_intl_refcount 'int *'
| |-FieldDecl 0x2a7b49ae578 <line:2101:9, col:15> col:15 lconv_num_refcount 'int *'
| |-FieldDecl 0x2a7b49ae5e8 <line:2102:9, col:15> col:15 lconv_mon_refcount 'int *'
| |-RecordDecl 0x2a7b49ae640 parent 0x2a7b2e41bd8 <line:2103:9, col:16> col:16 struct lconv
| |-FieldDecl 0x2a7b49ae7d0 <col:9, col:24> col:24 lconv 'struct lconv *'
| |-FieldDecl 0x2a7b49ae840 <line:2104:9, col:15> col:15 ctype1_refcount 'int *'
| |-FieldDecl 0x2a7b49ae8b0 <line:2105:9, col:26> col:26 ctype1 'unsigned short *'
| |-FieldDecl 0x2a7b49ae920 <line:2106:9, col:32> col:32 pctype 'const unsigned short *'
| |-FieldDecl 0x2a7b49ae9c0 <line:2107:9, col:31> col:31 pclmap 'const unsigned char *'
| |-FieldDecl 0x2a7b49aea30 <line:2108:9, col:31> col:31 pcumap 'const unsigned char *'
| |-FieldDecl 0x2a7b49aeb40 <line:2109:9, col:33> col:33 lc_time_curr 'struct __lc_time_data *'
| `-FieldDecl 0x2a7b49aec78 <line:2110:9, col:32> col:19 locale_name 'wchar_t *[6]'
|-TypedefDecl 0x2a7b49aed28 <line:2092:1, line:2111:3> col:3 threadlocinfo 'struct threadlocaleinfostruct':'struct threadlocaleinfostruct'
| `-ElaboratedType 0x2a7b49aecd0 'struct threadlocaleinfostruct' sugar
|   `-RecordType 0x2a7b49aa350 'struct threadlocaleinfostruct'
|     `-Record 0x2a7b49adfb0 'threadlocaleinfostruct'
|-TypedefDecl 0x2a7b49aedb0 <D:\Microsoft Visual Studio 12.0\VC\include\stdint.h:8:1, col:28> col:28 int8_t 'signed char'
| `-BuiltinType 0x2a7b2e41c90 'signed char'
|-TypedefDecl 0x2a7b49aee20 <line:9:1, col:28> col:28 int16_t 'short'
| `-BuiltinType 0x2a7b2e41cb0 'short'
|-TypedefDecl 0x2a7b49aee90 <line:10:1, col:28> col:28 referenced int32_t 'int'
| `-BuiltinType 0x2a7b2e41cd0 'int'
|-TypedefDecl 0x2a7b49aef00 <line:11:1, col:28> col:28 int64_t 'long long'
| `-BuiltinType 0x2a7b2e41d10 'long long'
|-TypedefDecl 0x2a7b49b6030 <line:12:1, col:28> col:28 referenced uint8_t 'unsigned char'
| `-BuiltinType 0x2a7b2e41d30 'unsigned char'
|-TypedefDecl 0x2a7b49b60a0 <line:13:1, col:28> col:28 uint16_t 'unsigned short'
| `-BuiltinType 0x2a7b2e41d50 'unsigned short'
|-TypedefDecl 0x2a7b49b6110 <line:14:1, col:28> col:28 referenced uint32_t 'unsigned int'
| `-BuiltinType 0x2a7b2e41d70 'unsigned int'
|-TypedefDecl 0x2a7b49b6180 <line:15:1, col:28> col:28 referenced uint64_t 'unsigned long long'
| `-BuiltinType 0x2a7b2e41db0 'unsigned long long'
|-TypedefDecl 0x2a7b49b61f0 <line:17:1, col:28> col:28 int_least8_t 'signed char'
| `-BuiltinType 0x2a7b2e41c90 'signed char'
|-TypedefDecl 0x2a7b49b6260 <line:18:1, col:28> col:28 int_least16_t 'short'
| `-BuiltinType 0x2a7b2e41cb0 'short'
|-TypedefDecl 0x2a7b49b62d0 <line:19:1, col:28> col:28 int_least32_t 'int'
| `-BuiltinType 0x2a7b2e41cd0 'int'
|-TypedefDecl 0x2a7b49b6340 <line:20:1, col:28> col:28 int_least64_t 'long long'
| `-BuiltinType 0x2a7b2e41d10 'long long'
|-TypedefDecl 0x2a7b49b63b0 <line:21:1, col:28> col:28 uint_least8_t 'unsigned char'
| `-BuiltinType 0x2a7b2e41d30 'unsigned char'
|-TypedefDecl 0x2a7b49b6420 <line:22:1, col:28> col:28 uint_least16_t 'unsigned short'
| `-BuiltinType 0x2a7b2e41d50 'unsigned short'
|-TypedefDecl 0x2a7b49b6490 <line:23:1, col:28> col:28 uint_least32_t 'unsigned int'
| `-BuiltinType 0x2a7b2e41d70 'unsigned int'
|-TypedefDecl 0x2a7b49b6500 <line:24:1, col:28> col:28 uint_least64_t 'unsigned long long'
| `-BuiltinType 0x2a7b2e41db0 'unsigned long long'
|-TypedefDecl 0x2a7b49b6570 <line:26:1, col:28> col:28 int_fast8_t 'signed char'
| `-BuiltinType 0x2a7b2e41c90 'signed char'
|-TypedefDecl 0x2a7b49b65e0 <line:27:1, col:28> col:28 int_fast16_t 'int'
| `-BuiltinType 0x2a7b2e41cd0 'int'
|-TypedefDecl 0x2a7b49b6650 <line:28:1, col:28> col:28 int_fast32_t 'int'
| `-BuiltinType 0x2a7b2e41cd0 'int'
|-TypedefDecl 0x2a7b49b66c0 <line:29:1, col:28> col:28 int_fast64_t 'long long'
| `-BuiltinType 0x2a7b2e41d10 'long long'
|-TypedefDecl 0x2a7b49b6730 <line:30:1, col:28> col:28 uint_fast8_t 'unsigned char'
| `-BuiltinType 0x2a7b2e41d30 'unsigned char'
|-TypedefDecl 0x2a7b49b67a0 <line:31:1, col:28> col:28 uint_fast16_t 'unsigned int'
| `-BuiltinType 0x2a7b2e41d70 'unsigned int'
|-TypedefDecl 0x2a7b49b6810 <line:32:1, col:28> col:28 uint_fast32_t 'unsigned int'
| `-BuiltinType 0x2a7b2e41d70 'unsigned int'
|-TypedefDecl 0x2a7b49b6880 <line:33:1, col:28> col:28 uint_fast64_t 'unsigned long long'
| `-BuiltinType 0x2a7b2e41db0 'unsigned long long'
|-TypedefDecl 0x2a7b49b68f0 <line:53:1, col:28> col:28 intmax_t 'long long'
| `-BuiltinType 0x2a7b2e41d10 'long long'
|-TypedefDecl 0x2a7b49b6960 <line:54:1, col:28> col:28 uintmax_t 'unsigned long long'
| `-BuiltinType 0x2a7b2e41db0 'unsigned long long'
|-FunctionDecl 0x2a7b49b6d80 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:47:9, col:142> col:25 _memccpy 'void *(void *, const void *, int, size_t) __attribute__((cdecl))':'void *(void *, const void *, int, size_t)'
| |-ParmVarDecl 0x2a7b49b69d0 <col:69, col:76> col:76 _Dst 'void *'
| |-ParmVarDecl 0x2a7b49b6a80 <col:87, col:100> col:100 _Src 'const void *'
| |-ParmVarDecl 0x2a7b49b6b00 <col:111, col:115> col:115 _Val 'int'
| `-ParmVarDecl 0x2a7b49b6b78 <col:126, col:133> col:133 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x2a7b49bf1e8 <line:48:54> col:54 implicit memchr 'void *(const void *, int, unsigned long long)' extern
| |-ParmVarDecl 0x2a7b49bf288 <<invalid sloc>> <invalid sloc> 'const void *'
| |-ParmVarDecl 0x2a7b49bf2f0 <<invalid sloc>> <invalid sloc> 'int'
| `-ParmVarDecl 0x2a7b49bf358 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x2a7b49bf3d8 prev 0x2a7b49bf1e8 <col:38, col:150> col:54 memchr 'void *(const void *, int, unsigned long long)'
| |-ParmVarDecl 0x2a7b49b6e70 <col:94, col:107> col:107 _Buf 'const void *'
| |-ParmVarDecl 0x2a7b49b6ef0 <col:119, col:123> col:123 _Val 'int'
| `-ParmVarDecl 0x2a7b49b6f68 <col:134, col:141> col:141 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x2a7b49bf798 <line:49:24, col:162> col:40 _memicmp 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
| |-ParmVarDecl 0x2a7b49bf4c0 <col:77, col:90> col:90 _Buf1 'const void *'
| |-ParmVarDecl 0x2a7b49bf540 <col:125, col:138> col:138 _Buf2 'const void *'
| `-ParmVarDecl 0x2a7b49bf5b8 <col:150, col:157> col:157 _Size 'size_t':'unsigned long long'
|-FunctionDecl 0x2a7b49bfc20 <line:50:24, col:192> col:40 _memicmp_l 'int (const void *, const void *, size_t, _locale_t) __attribute__((cdecl))':'int (const void *, const void *, size_t, _locale_t)'
| |-ParmVarDecl 0x2a7b49bf880 <col:79, col:92> col:92 _Buf1 'const void *'
| |-ParmVarDecl 0x2a7b49bf900 <col:127, col:140> col:140 _Buf2 'const void *'
| |-ParmVarDecl 0x2a7b49bf978 <col:152, col:159> col:159 _Size 'size_t':'unsigned long long'
| `-ParmVarDecl 0x2a7b49bfa10 <col:175, col:185> col:185 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2a7b49bff28 <line:51:32> col:32 implicit memcmp 'int (const void *, const void *, unsigned long long)' extern
| |-ParmVarDecl 0x2a7b49bffc8 <<invalid sloc>> <invalid sloc> 'const void *'
| |-ParmVarDecl 0x2a7b49c0030 <<invalid sloc>> <invalid sloc> 'const void *'
| `-ParmVarDecl 0x2a7b49b8050 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x2a7b49b80d0 prev 0x2a7b49bff28 <col:16, col:144> col:32 memcmp 'int (const void *, const void *, unsigned long long)'
| |-ParmVarDecl 0x2a7b49bfd10 <col:63, col:76> col:76 _Buf1 'const void *'
| |-ParmVarDecl 0x2a7b49bfd90 <col:107, col:120> col:120 _Buf2 'const void *'
| `-ParmVarDecl 0x2a7b49bfe08 <col:132, col:139> col:139 _Size 'size_t':'unsigned long long'
|-FunctionDecl 0x2a7b49b8488 <line:55:17> col:17 implicit used memcpy 'void *(void *, const void *, unsigned long long)' extern
| |-ParmVarDecl 0x2a7b49b8528 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x2a7b49b8590 <<invalid sloc>> <invalid sloc> 'const void *'
| `-ParmVarDecl 0x2a7b49b85f8 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x2a7b49b8678 prev 0x2a7b49b8488 <col:1, col:127> col:17 used memcpy 'void *(void *, const void *, unsigned long long)'
| |-ParmVarDecl 0x2a7b49b81b8 <col:54, col:61> col:61 _Dst 'void *'
| |-ParmVarDecl 0x2a7b49b8238 <col:91, col:104> col:104 _Src 'const void *'
| `-ParmVarDecl 0x2a7b49b82b0 <col:115, col:122> col:122 _Size 'size_t':'unsigned long long'
|-FunctionDecl 0x2a7b49b8b18 <line:57:9, col:191> col:26 memcpy_s 'errno_t (void *, rsize_t, const void *, rsize_t) __attribute__((cdecl))':'errno_t (void *, rsize_t, const void *, rsize_t)'
| |-ParmVarDecl 0x2a7b49b8788 <col:82, col:89> col:89 _Dst 'void *'
| |-ParmVarDecl 0x2a7b49b8820 <col:100, col:108> col:108 _DstSize 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x2a7b49b88a0 <col:150, col:163> col:163 _Src 'const void *'
| `-ParmVarDecl 0x2a7b49b8918 <col:174, col:182> col:182 _MaxCount 'rsize_t':'unsigned long long'
|-FunctionDecl 0x2a7b49b8ed8 <line:94:25> col:25 implicit used memset 'void *(void *, int, unsigned long long)' extern
| |-ParmVarDecl 0x2a7b49b8f78 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x2a7b49b8fe0 <<invalid sloc>> <invalid sloc> 'int'
| `-ParmVarDecl 0x2a7b49c00d0 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x2a7b49c0150 prev 0x2a7b49b8ed8 <col:9, col:107> col:25 used memset 'void *(void *, int, unsigned long long)'
| |-ParmVarDecl 0x2a7b49b8c08 <col:62, col:69> col:69 _Dst 'void *'
| |-ParmVarDecl 0x2a7b49b8c88 <col:80, col:84> col:84 _Val 'int'
| `-ParmVarDecl 0x2a7b49b8d00 <col:95, col:102> col:102 _Size 'size_t':'unsigned long long'
|-FunctionDecl 0x2a7b49c05c8 <line:98:57> col:57 implicit memccpy 'void *(void *, const void *, int, unsigned long long)' extern
| |-ParmVarDecl 0x2a7b49c0668 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x2a7b49c06d0 <<invalid sloc>> <invalid sloc> 'const void *'
| |-ParmVarDecl 0x2a7b49c0738 <<invalid sloc>> <invalid sloc> 'int'
| `-ParmVarDecl 0x2a7b49c07a0 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x2a7b49c0828 prev 0x2a7b49c05c8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:98:187> col:57 memccpy 'void *(void *, const void *, int, unsigned long long)'
| |-ParmVarDecl 0x2a7b49c0310 <col:95, col:102> col:102 _Dst 'void *'
| |-ParmVarDecl 0x2a7b49c0390 <col:136, col:149> col:149 _Src 'const void *'
| |-ParmVarDecl 0x2a7b49c0410 <col:160, col:164> col:164 _Val 'int'
| |-ParmVarDecl 0x2a7b49c0488 <col:175, col:182> col:182 _Size 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x2a7b49c08e8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _memccpy. See online help for details." ""
|-FunctionDecl 0x2a7b49c0cc8 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:99:190> col:69 memicmp 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
| |-ParmVarDecl 0x2a7b49c0ab0 <col:105, col:118> col:118 _Buf1 'const void *'
| |-ParmVarDecl 0x2a7b49c0b30 <col:153, col:166> col:166 _Buf2 'const void *'
| |-ParmVarDecl 0x2a7b49c0ba8 <col:178, col:185> col:185 _Size 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x2a7b49c0d80 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _memicmp. See online help for details." ""
|-FunctionDecl 0x2a7b49b9100 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:105:40, col:144> col:56 _strset_s 'errno_t (char *, size_t, int) __attribute__((cdecl))':'errno_t (char *, size_t, int)'
| |-ParmVarDecl 0x2a7b49c0ea8 <col:94, col:101> col:101 _Dst 'char *'
| |-ParmVarDecl 0x2a7b49c0f20 <col:112, col:119> col:119 _DstSize 'size_t':'unsigned long long'
| `-ParmVarDecl 0x2a7b49c0fa0 <col:134, col:138> col:138 _Value 'int'
|-FunctionDecl 0x2a7b49b94d0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:107:88 _strset 'char *(char *, int) __attribute__((cdecl))':'char *(char *, int)'
| |-ParmVarDecl 0x2a7b49b92e0 <col:108, col:114> col:114 _Dest 'char *'
| |-ParmVarDecl 0x2a7b49b9360 <col:126, col:131> col:131 _Value 'int'
| `-DeprecatedAttr 0x2a7b49b9580 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _strset_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2a7b49b9990 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:109:40, col:158> col:56 strcpy_s 'errno_t (char *, rsize_t, const char *) __attribute__((cdecl))':'errno_t (char *, rsize_t, const char *)'
| |-ParmVarDecl 0x2a7b49b96c8 <col:94, col:101> col:101 _Dst 'char *'
| |-ParmVarDecl 0x2a7b49b9740 <col:112, col:120> col:120 _SizeInBytes 'rsize_t':'unsigned long long'
| `-ParmVarDecl 0x2a7b49b97c0 <col:141, col:154> col:154 _Src 'const char *'
|-FunctionDecl 0x2a7b49b9d60 <line:112:88> col:88 implicit strcpy 'char *(char *, const char *)' extern
| |-ParmVarDecl 0x2a7b49b9e00 <<invalid sloc>> <invalid sloc> 'char *'
| `-ParmVarDecl 0x2a7b49b9e68 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x2a7b49b9ee0 prev 0x2a7b49b9d60 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:112:88 strcpy 'char *(char *, const char *)'
| |-ParmVarDecl 0x2a7b49b9b70 <col:142, col:148> col:148 _Dest 'char *'
| |-ParmVarDecl 0x2a7b49b9bf0 <col:162, col:176> col:176 _Source 'const char *'
| `-DeprecatedAttr 0x2a7b49b9f90 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using strcpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2a7b49c13f0 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:114:40, col:161> col:56 strcat_s 'errno_t (char *, rsize_t, const char *) __attribute__((cdecl))':'errno_t (char *, rsize_t, const char *)'
| |-ParmVarDecl 0x2a7b49c11e0 <col:97, col:104> col:104 _Dst 'char *'
| |-ParmVarDecl 0x2a7b49c1258 <col:115, col:123> col:123 _SizeInBytes 'rsize_t':'unsigned long long'
| `-ParmVarDecl 0x2a7b49c12d8 <col:144, col:157> col:157 _Src 'const char *'
|-FunctionDecl 0x2a7b49c1718 <line:118:88> col:88 implicit strcat 'char *(char *, const char *)' extern
| |-ParmVarDecl 0x2a7b49c17b8 <<invalid sloc>> <invalid sloc> 'char *'
| `-ParmVarDecl 0x2a7b49c1820 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x2a7b49c1898 prev 0x2a7b49c1718 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:118:88 strcat 'char *(char *, const char *)'
| |-ParmVarDecl 0x2a7b49c1598 <col:170, col:176> col:176 _Dest 'char *'
| |-ParmVarDecl 0x2a7b49c1618 <col:190, col:204> col:204 _Source 'const char *'
| `-DeprecatedAttr 0x2a7b49c1948 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using strcat_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2a7b49c1c80 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:120:32> col:32 implicit strcmp 'int (const char *, const char *)' extern
| |-ParmVarDecl 0x2a7b49c1d20 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x2a7b49c1d88 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x2a7b49c1e00 prev 0x2a7b49c1c80 <col:16, col:91> col:32 strcmp 'int (const char *, const char *)'
| |-ParmVarDecl 0x2a7b49c1a90 <col:46, col:59> col:59 _Str1 'const char *'
| `-ParmVarDecl 0x2a7b49c1b10 <col:73, col:86> col:86 _Str2 'const char *'
|-FunctionDecl 0x2a7b49c20f0 <line:121:32> col:32 implicit strlen 'unsigned long long (const char *)' extern
| `-ParmVarDecl 0x2a7b49c2190 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x2a7b49c2200 prev 0x2a7b49c20f0 <col:16, col:63> col:32 strlen 'unsigned long long (const char *)'
| `-ParmVarDecl 0x2a7b49c1ee0 <col:46, col:59> col:59 _Str 'const char *'
|-FunctionDecl 0x2a7b49c24f8 <line:125:1, col:92> col:17 used strnlen 'size_t (const char *, size_t) __attribute__((cdecl))':'size_t (const char *, size_t)'
| |-ParmVarDecl 0x2a7b49c22d8 <col:52, col:65> col:65 _Str 'const char *'
| `-ParmVarDecl 0x2a7b49c2350 <col:76, col:83> col:83 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x2a7b49c2748 <line:127:16, line:133:1> line:130:19 strnlen_s 'size_t (const char *, size_t) __attribute__((cdecl))':'size_t (const char *, size_t)' static inline
| |-ParmVarDecl 0x2a7b49c25d8 <col:56, col:69> col:69 used _Str 'const char *'
| |-ParmVarDecl 0x2a7b49c2650 <col:80, col:87> col:87 used _MaxCount 'size_t':'unsigned long long'
| `-CompoundStmt 0x2a7b49c2a78 <line:131:1, line:133:1>
|   `-ReturnStmt 0x2a7b49c2a68 <line:132:5, col:51>
|     `-ConditionalOperator 0x2a7b49c2a38 <col:12, col:51> 'unsigned long long'
|       |-ParenExpr 0x2a7b49c28a8 <col:12, col:20> 'int'
|       | `-BinaryOperator 0x2a7b49c2888 <col:13, col:19> 'int' '=='
|       |   |-ImplicitCastExpr 0x2a7b49c2858 <col:13> 'const char *' <LValueToRValue>
|       |   | `-DeclRefExpr 0x2a7b49c2810 <col:13> 'const char *' lvalue ParmVar 0x2a7b49c25d8 '_Str' 'const char *'
|       |   `-ImplicitCastExpr 0x2a7b49c2870 <col:19> 'const char *' <NullToPointer>
|       |     `-IntegerLiteral 0x2a7b49c2830 <col:19> 'int' 0
|       |-ImplicitCastExpr 0x2a7b49c2a20 <col:24> 'unsigned long long' <IntegralCast>
|       | `-IntegerLiteral 0x2a7b49c28c8 <col:24> 'int' 0
|       `-CallExpr 0x2a7b49c29c0 <col:28, col:51> 'size_t':'unsigned long long'
|         |-ImplicitCastExpr 0x2a7b49c29a8 <col:28> 'size_t (*)(const char *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x2a7b49c28f0 <col:28> 'size_t (const char *, size_t) __attribute__((cdecl))':'size_t (const char *, size_t)' Function 0x2a7b49c24f8 'strnlen' 'size_t (const char *, size_t) __attribute__((cdecl))':'size_t (const char *, size_t)'
|         |-ImplicitCastExpr 0x2a7b49c29f0 <col:36> 'const char *' <LValueToRValue>
|         | `-DeclRefExpr 0x2a7b49c2910 <col:36> 'const char *' lvalue ParmVar 0x2a7b49c25d8 '_Str' 'const char *'
|         `-ImplicitCastExpr 0x2a7b49c2a08 <col:42> 'size_t':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x2a7b49c2930 <col:42> 'size_t':'unsigned long long' lvalue ParmVar 0x2a7b49c2650 '_MaxCount' 'size_t':'unsigned long long'
|-FunctionDecl 0x2a7b49c2d50 <line:136:28, col:209> col:44 memmove_s 'errno_t (void *, rsize_t, const void *, rsize_t) __attribute__((cdecl))':'errno_t (void *, rsize_t, const void *, rsize_t)'
| |-ParmVarDecl 0x2a7b49c2aa8 <col:100, col:107> col:107 _Dst 'void *'
| |-ParmVarDecl 0x2a7b49c2b20 <col:118, col:126> col:126 _DstSize 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x2a7b49c2ba0 <col:168, col:181> col:181 _Src 'const void *'
| `-ParmVarDecl 0x2a7b49c2c18 <col:192, col:200> col:200 _MaxCount 'rsize_t':'unsigned long long'
|-FunctionDecl 0x2a7b49c3100 <line:139:67> col:67 implicit memmove 'void *(void *, const void *, unsigned long long)' extern
| |-ParmVarDecl 0x2a7b49c31a0 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x2a7b49c3208 <<invalid sloc>> <invalid sloc> 'const void *'
| `-ParmVarDecl 0x2a7b49c3270 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x2a7b49c32f0 prev 0x2a7b49c3100 <col:51, col:186> col:67 memmove 'void *(void *, const void *, unsigned long long)'
| |-ParmVarDecl 0x2a7b49c2e40 <col:109, col:116> col:116 _Dst 'void *'
| |-ParmVarDecl 0x2a7b49c2ec0 <col:150, col:163> col:163 _Src 'const void *'
| `-ParmVarDecl 0x2a7b49c2f38 <col:174, col:181> col:181 _Size 'size_t':'unsigned long long'
|-FunctionDecl 0x2a7b49c3528 <line:146:24, col:76> col:40 _strdup 'char *(const char *) __attribute__((cdecl))':'char *(const char *)'
| `-ParmVarDecl 0x2a7b49c33d8 <col:59, col:72> col:72 _Src 'const char *'
|-FunctionDecl 0x2a7b49c37f0 <line:152:54> col:54 implicit strchr 'char *(const char *, int)' extern
| |-ParmVarDecl 0x2a7b49c3890 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x2a7b49c38f8 <<invalid sloc>> <invalid sloc> 'int'
|-FunctionDecl 0x2a7b49c3970 prev 0x2a7b49c37f0 <col:38, col:100> col:54 strchr 'char *(const char *, int)'
| |-ParmVarDecl 0x2a7b49c3600 <col:68, col:81> col:81 _Str 'const char *'
| `-ParmVarDecl 0x2a7b49c3680 <col:92, col:96> col:96 _Val 'int'
|-FunctionDecl 0x2a7b49c3bd0 <line:153:24, col:103> col:40 _stricmp 'int (const char *, const char *) __attribute__((cdecl))':'int (const char *, const char *)'
| |-ParmVarDecl 0x2a7b49c3a50 <col:57, col:70> col:70 _Str1 'const char *'
| `-ParmVarDecl 0x2a7b49c3ad0 <col:85, col:98> col:98 _Str2 'const char *'
|-FunctionDecl 0x2a7b49c3e30 <line:154:24, col:103> col:40 _strcmpi 'int (const char *, const char *) __attribute__((cdecl))':'int (const char *, const char *)'
| |-ParmVarDecl 0x2a7b49c3cb0 <col:57, col:70> col:70 _Str1 'const char *'
| `-ParmVarDecl 0x2a7b49c3d30 <col:85, col:98> col:98 _Str2 'const char *'
|-FunctionDecl 0x2a7b49c41f8 <line:155:24, col:133> col:40 _stricmp_l 'int (const char *, const char *, _locale_t) __attribute__((cdecl))':'int (const char *, const char *, _locale_t)'
| |-ParmVarDecl 0x2a7b49c3f10 <col:59, col:72> col:72 _Str1 'const char *'
| |-ParmVarDecl 0x2a7b49c3f90 <col:87, col:100> col:100 _Str2 'const char *'
| `-ParmVarDecl 0x2a7b49c4008 <col:116, col:126> col:126 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2a7b49c4460 <line:156:24, col:103> col:40 strcoll 'int (const char *, const char *) __attribute__((cdecl))':'int (const char *, const char *)'
| |-ParmVarDecl 0x2a7b49c42e0 <col:56, col:69> col:69 _Str1 'const char *'
| `-ParmVarDecl 0x2a7b49c4360 <col:84, col:98> col:98 _Str2 'const char *'
|-FunctionDecl 0x2a7b49c4758 <line:157:24, col:133> col:40 _strcoll_l 'int (const char *, const char *, _locale_t) __attribute__((cdecl))':'int (const char *, const char *, _locale_t)'
| |-ParmVarDecl 0x2a7b49c4540 <col:59, col:72> col:72 _Str1 'const char *'
| |-ParmVarDecl 0x2a7b49c45c0 <col:87, col:100> col:100 _Str2 'const char *'
| `-ParmVarDecl 0x2a7b49c4638 <col:116, col:126> col:126 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2a7b49c49c0 <line:158:24, col:104> col:40 _stricoll 'int (const char *, const char *) __attribute__((cdecl))':'int (const char *, const char *)'
| |-ParmVarDecl 0x2a7b49c4840 <col:58, col:71> col:71 _Str1 'const char *'
| `-ParmVarDecl 0x2a7b49c48c0 <col:86, col:99> col:99 _Str2 'const char *'
|-FunctionDecl 0x2a7b49c4cb8 <line:159:24, col:134> col:40 _stricoll_l 'int (const char *, const char *, _locale_t) __attribute__((cdecl))':'int (const char *, const char *, _locale_t)'
| |-ParmVarDecl 0x2a7b49c4aa0 <col:60, col:73> col:73 _Str1 'const char *'
| |-ParmVarDecl 0x2a7b49c4b20 <col:88, col:101> col:101 _Str2 'const char *'
| `-ParmVarDecl 0x2a7b49c4b98 <col:117, col:127> col:127 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2a7b4a12fd0 <line:160:24, col:167> col:40 _strncoll 'int (const char *, const char *, size_t) __attribute__((cdecl))':'int (const char *, const char *, size_t)'
| |-ParmVarDecl 0x2a7b49c4da0 <col:79, col:92> col:92 _Str1 'const char *'
| |-ParmVarDecl 0x2a7b49c4e20 <col:126, col:139> col:139 _Str2 'const char *'
| `-ParmVarDecl 0x2a7b49c4e98 <col:151, col:158> col:158 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x2a7b4a13430 <line:161:24, col:195> col:40 _strncoll_l 'int (const char *, const char *, size_t, _locale_t) __attribute__((cdecl))':'int (const char *, const char *, size_t, _locale_t)'
| |-ParmVarDecl 0x2a7b4a130b8 <col:79, col:92> col:92 _Str1 'const char *'
| |-ParmVarDecl 0x2a7b4a13138 <col:126, col:139> col:139 _Str2 'const char *'
| |-ParmVarDecl 0x2a7b4a131b0 <col:151, col:158> col:158 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x2a7b4a13228 <col:178, col:188> col:188 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2a7b4a13738 <line:162:24, col:167> col:40 _strnicoll 'int (const char *, const char *, size_t) __attribute__((cdecl))':'int (const char *, const char *, size_t)'
| |-ParmVarDecl 0x2a7b4a13520 <col:79, col:92> col:92 _Str1 'const char *'
| |-ParmVarDecl 0x2a7b4a135a0 <col:126, col:139> col:139 _Str2 'const char *'
| `-ParmVarDecl 0x2a7b4a13618 <col:151, col:158> col:158 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x2a7b4a13ad0 <line:163:24, col:196> col:40 _strnicoll_l 'int (const char *, const char *, size_t, _locale_t) __attribute__((cdecl))':'int (const char *, const char *, size_t, _locale_t)'
| |-ParmVarDecl 0x2a7b4a13820 <col:80, col:93> col:93 _Str1 'const char *'
| |-ParmVarDecl 0x2a7b4a138a0 <col:127, col:140> col:140 _Str2 'const char *'
| |-ParmVarDecl 0x2a7b4a13918 <col:152, col:159> col:159 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x2a7b4a13990 <col:179, col:189> col:189 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2a7b4a13de8 <line:164:40> col:40 implicit strcspn 'unsigned long long (const char *, const char *)' extern
| |-ParmVarDecl 0x2a7b4a13e88 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x2a7b4a13ef0 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x2a7b4a0df80 prev 0x2a7b4a13de8 <col:24, col:104> col:40 strcspn 'unsigned long long (const char *, const char *)'
| |-ParmVarDecl 0x2a7b4a13bc0 <col:56, col:69> col:69 _Str 'const char *'
| `-ParmVarDecl 0x2a7b4a13c40 <col:83, col:96> col:96 _Control 'const char *'
|-FunctionDecl 0x2a7b4a0e240 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:165:118> col:77 _strerror 'char *(const char *) __attribute__((cdecl))':'char *(const char *)'
| |-ParmVarDecl 0x2a7b4a0e160 <col:98, col:111> col:111 _ErrMsg 'const char *'
| `-DeprecatedAttr 0x2a7b4a0e2e8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _strerror_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2a7b4a0e6c0 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:166:28, col:155> col:44 _strerror_s 'errno_t (char *, size_t, const char *) __attribute__((cdecl))':'errno_t (char *, size_t, const char *)'
| |-ParmVarDecl 0x2a7b4a0e430 <col:85, col:92> col:92 _Buf 'char *'
| |-ParmVarDecl 0x2a7b4a0e4a8 <col:103, col:110> col:110 _SizeInBytes 'size_t':'unsigned long long'
| `-ParmVarDecl 0x2a7b4a0e528 <col:135, col:148> col:148 _ErrMsg 'const char *'
|-FunctionDecl 0x2a7b4a0e9d8 <line:168:76> col:76 implicit strerror 'char *(int)' extern
| `-ParmVarDecl 0x2a7b4a0ea78 <<invalid sloc>> <invalid sloc> 'int'
|-FunctionDecl 0x2a7b4a0eae8 prev 0x2a7b4a0e9d8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:168:93> col:76 strerror 'char *(int)'
| |-ParmVarDecl 0x2a7b4a0e8a0 <col:90> col:93 'int'
| `-DeprecatedAttr 0x2a7b4a0eb90 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using strerror_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2a7b4a11fc0 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:170:28, col:139> col:44 strerror_s 'errno_t (char *, size_t, int) __attribute__((cdecl))':'errno_t (char *, size_t, int)'
| |-ParmVarDecl 0x2a7b4a0ecd8 <col:84, col:91> col:91 _Buf 'char *'
| |-ParmVarDecl 0x2a7b4a0ed50 <col:102, col:109> col:109 _SizeInBytes 'size_t':'unsigned long long'
| `-ParmVarDecl 0x2a7b4a0edd0 <col:128, col:132> col:132 _ErrNum 'int'
|-FunctionDecl 0x2a7b4a122c8 <line:173:28, col:109> col:44 _strlwr_s 'errno_t (char *, size_t) __attribute__((cdecl))':'errno_t (char *, size_t)'
| |-ParmVarDecl 0x2a7b4a120a8 <col:79, col:86> col:86 _Str 'char *'
| `-ParmVarDecl 0x2a7b4a12120 <col:97, col:104> col:104 _Size 'size_t':'unsigned long long'
|-FunctionDecl 0x2a7b4a125b8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1933:117> D:\Microsoft Visual Studio 12.0\VC\include\string.h:175:79 _strlwr 'char *(char *) __attribute__((cdecl))':'char *(char *)'
| |-ParmVarDecl 0x2a7b4a12468 <col:99, col:105> col:105 _String 'char *'
| `-DeprecatedAttr 0x2a7b4a12660 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _strlwr_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2a7b4a12a70 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:176:28, col:139> col:44 _strlwr_s_l 'errno_t (char *, size_t, _locale_t) __attribute__((cdecl))':'errno_t (char *, size_t, _locale_t)'
| |-ParmVarDecl 0x2a7b4a127a8 <col:81, col:88> col:88 _Str 'char *'
| |-ParmVarDecl 0x2a7b4a12820 <col:99, col:106> col:106 _Size 'size_t':'unsigned long long'
| `-ParmVarDecl 0x2a7b4a12898 <col:122, col:132> col:132 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2a7b4a12e40 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:178:82 _strlwr_l 'char *(char *, _locale_t) __attribute__((cdecl))':'char *(char *, _locale_t)'
| |-ParmVarDecl 0x2a7b4a12c18 <col:148, col:154> col:154 _String 'char *'
| |-ParmVarDecl 0x2a7b4a12c90 <col:172, col:183> col:183 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x2a7b4a12ef0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _strlwr_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2a7b4a14458 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:180:40, col:206> col:56 strncat_s 'errno_t (char *, rsize_t, const char *, rsize_t) __attribute__((cdecl))':'errno_t (char *, rsize_t, const char *, rsize_t)'
| |-ParmVarDecl 0x2a7b4a140e0 <col:98, col:105> col:105 _Dst 'char *'
| |-ParmVarDecl 0x2a7b4a14158 <col:116, col:124> col:124 _SizeInBytes 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x2a7b4a141d8 <col:165, col:178> col:178 _Src 'const char *'
| `-ParmVarDecl 0x2a7b4a14250 <col:189, col:197> col:197 _MaxCount 'rsize_t':'unsigned long long'
|-FunctionDecl 0x2a7b4a148d8 <line:186:83> col:83 implicit strncat 'char *(char *, const char *, unsigned long long)' extern
| |-ParmVarDecl 0x2a7b4a14978 <<invalid sloc>> <invalid sloc> 'char *'
| |-ParmVarDecl 0x2a7b4a149e0 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x2a7b4a14a48 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x2a7b4a14ac8 prev 0x2a7b4a148d8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1980:149> D:\Microsoft Visual Studio 12.0\VC\include\string.h:186:83 strncat 'char *(char *, const char *, unsigned long long)'
| |-ParmVarDecl 0x2a7b4a14608 <col:161, col:167> col:167 _Dest 'char *'
| |-ParmVarDecl 0x2a7b4a14688 <col:198, col:212> col:212 _Source 'const char *'
| |-ParmVarDecl 0x2a7b4a14700 <col:226, col:234> col:234 _Count 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x2a7b4a14b80 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using strncat_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2a7b4a14ee0 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:188:40> col:40 implicit strncmp 'int (const char *, const char *, unsigned long long)' extern
| |-ParmVarDecl 0x2a7b4a10fb0 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x2a7b4a11018 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x2a7b4a11080 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x2a7b4a11100 prev 0x2a7b4a14ee0 <col:24, col:163> col:40 strncmp 'int (const char *, const char *, unsigned long long)'
| |-ParmVarDecl 0x2a7b4a14cc8 <col:75, col:88> col:88 _Str1 'const char *'
| |-ParmVarDecl 0x2a7b4a14d48 <col:122, col:135> col:135 _Str2 'const char *'
| `-ParmVarDecl 0x2a7b4a14dc0 <col:147, col:154> col:154 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x2a7b4a11400 <line:189:24, col:165> col:40 _strnicmp 'int (const char *, const char *, size_t) __attribute__((cdecl))':'int (const char *, const char *, size_t)'
| |-ParmVarDecl 0x2a7b4a111e8 <col:77, col:90> col:90 _Str1 'const char *'
| |-ParmVarDecl 0x2a7b4a11268 <col:124, col:137> col:137 _Str2 'const char *'
| `-ParmVarDecl 0x2a7b4a112e0 <col:149, col:156> col:156 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x2a7b4a11798 <line:190:24, col:195> col:40 _strnicmp_l 'int (const char *, const char *, size_t, _locale_t) __attribute__((cdecl))':'int (const char *, const char *, size_t, _locale_t)'
| |-ParmVarDecl 0x2a7b4a114e8 <col:79, col:92> col:92 _Str1 'const char *'
| |-ParmVarDecl 0x2a7b4a11568 <col:126, col:139> col:139 _Str2 'const char *'
| |-ParmVarDecl 0x2a7b4a115e0 <col:151, col:158> col:158 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x2a7b4a11658 <col:178, col:188> col:188 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2a7b4a11b30 <line:192:40, col:203> col:56 strncpy_s 'errno_t (char *, rsize_t, const char *, rsize_t) __attribute__((cdecl))':'errno_t (char *, rsize_t, const char *, rsize_t)'
| |-ParmVarDecl 0x2a7b4a11888 <col:95, col:102> col:102 _Dst 'char *'
| |-ParmVarDecl 0x2a7b4a11900 <col:113, col:121> col:121 _SizeInBytes 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x2a7b4a11980 <col:162, col:175> col:175 _Src 'const char *'
| `-ParmVarDecl 0x2a7b4a119f8 <col:186, col:194> col:194 _MaxCount 'rsize_t':'unsigned long long'
|-FunctionDecl 0x2a7b4a11ef8 <line:195:83> col:83 implicit strncpy 'char *(char *, const char *, unsigned long long)' extern
| |-ParmVarDecl 0x2a7b4a0ef90 <<invalid sloc>> <invalid sloc> 'char *'
| |-ParmVarDecl 0x2a7b4a0eff8 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x2a7b4a0f060 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x2a7b4a0f0e0 prev 0x2a7b4a11ef8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1980:149> D:\Microsoft Visual Studio 12.0\VC\include\string.h:195:83 strncpy 'char *(char *, const char *, unsigned long long)'
| |-ParmVarDecl 0x2a7b4a11ce0 <col:167, col:173> col:173 _Dest 'char *'
| |-ParmVarDecl 0x2a7b4a11d60 <col:204, col:218> col:218 _Source 'const char *'
| |-ParmVarDecl 0x2a7b4a11dd8 <col:232, col:240> col:240 _Count 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x2a7b4a0f198 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using strncpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2a7b4a0f658 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:196:40, col:174> col:56 _strnset_s 'errno_t (char *, size_t, int, size_t) __attribute__((cdecl))':'errno_t (char *, size_t, int, size_t)'
| |-ParmVarDecl 0x2a7b4a0f2e0 <col:99, col:106> col:106 _Str 'char *'
| |-ParmVarDecl 0x2a7b4a0f358 <col:117, col:124> col:124 _SizeInBytes 'size_t':'unsigned long long'
| |-ParmVarDecl 0x2a7b4a0f3d8 <col:143, col:147> col:147 _Val 'int'
| `-ParmVarDecl 0x2a7b4a0f450 <col:158, col:165> col:165 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x2a7b4a0fad8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1980:149> D:\Microsoft Visual Studio 12.0\VC\include\string.h:198:83 _strnset 'char *(char *, int, size_t) __attribute__((cdecl))':'char *(char *, int, size_t)'
| |-ParmVarDecl 0x2a7b4a0f808 <col:163, col:169> col:169 _Dest 'char *'
| |-ParmVarDecl 0x2a7b4a0f888 <col:181, col:186> col:186 _Val 'int'
| |-ParmVarDecl 0x2a7b4a0f900 <col:197, col:205> col:205 _Count 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x2a7b4a0fb90 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _strnset_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2a7b4a0fec0 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:199:54> col:54 implicit strpbrk 'char *(const char *, const char *)' extern
| |-ParmVarDecl 0x2a7b4a14ff0 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x2a7b4a15058 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x2a7b4a150d0 prev 0x2a7b4a0fec0 <col:38, col:116> col:54 strpbrk 'char *(const char *, const char *)'
| |-ParmVarDecl 0x2a7b4a0fcd8 <col:69, col:82> col:82 _Str 'const char *'
| `-ParmVarDecl 0x2a7b4a0fd58 <col:95, col:108> col:108 _Control 'const char *'
|-FunctionDecl 0x2a7b4a15330 <line:200:54> col:54 implicit strrchr 'char *(const char *, int)' extern
| |-ParmVarDecl 0x2a7b4a153d0 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x2a7b4a15438 <<invalid sloc>> <invalid sloc> 'int'
|-FunctionDecl 0x2a7b4a154b0 prev 0x2a7b4a15330 <col:38, col:100> col:54 strrchr 'char *(const char *, int)'
| |-ParmVarDecl 0x2a7b4a151b0 <col:69, col:82> col:82 _Str 'const char *'
| `-ParmVarDecl 0x2a7b4a15230 <col:93, col:97> col:97 _Ch 'int'
|-FunctionDecl 0x2a7b4a15670 <line:201:9, col:54> col:25 _strrev 'char *(char *) __attribute__((cdecl))':'char *(char *)'
| `-ParmVarDecl 0x2a7b4a15590 <col:43, col:50> col:50 _Str 'char *'
|-FunctionDecl 0x2a7b4a158c0 <line:202:40> col:40 implicit strspn 'unsigned long long (const char *, const char *)' extern
| |-ParmVarDecl 0x2a7b4a15960 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x2a7b4a159c8 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x2a7b4a15a40 prev 0x2a7b4a158c0 <col:24, col:101> col:40 strspn 'unsigned long long (const char *, const char *)'
| |-ParmVarDecl 0x2a7b4a15748 <col:54, col:67> col:67 _Str 'const char *'
| `-ParmVarDecl 0x2a7b4a157c8 <col:80, col:93> col:93 _Control 'const char *'
|-FunctionDecl 0x2a7b4a15ca0 <line:203:70> col:70 implicit strstr 'char *(const char *, const char *)' extern
| |-ParmVarDecl 0x2a7b4a15d40 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x2a7b4a15da8 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x2a7b4a15e20 prev 0x2a7b4a15ca0 <col:54, col:130> col:70 strstr 'char *(const char *, const char *)'
| |-ParmVarDecl 0x2a7b4a15b20 <col:84, col:97> col:97 _Str 'const char *'
| `-ParmVarDecl 0x2a7b4a15ba0 <col:110, col:123> col:123 _SubStr 'const char *'
|-FunctionDecl 0x2a7b4a16180 <line:204:74> col:74 implicit strtok 'char *(char *, const char *)' extern
| |-ParmVarDecl 0x2a7b4a16220 <<invalid sloc>> <invalid sloc> 'char *'
| `-ParmVarDecl 0x2a7b4a16288 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x2a7b4a16300 prev 0x2a7b4a16180 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:204:134> col:74 strtok 'char *(char *, const char *)'
| |-ParmVarDecl 0x2a7b4a16000 <col:95, col:102> col:102 _Str 'char *'
| |-ParmVarDecl 0x2a7b4a16080 <col:115, col:128> col:128 _Delim 'const char *'
| `-DeprecatedAttr 0x2a7b4a163b0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using strtok_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2a7b4a16798 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:206:36, col:162> col:52 strtok_s 'char *(char *, const char *, char **) __attribute__((cdecl))':'char *(char *, const char *, char **)'
| |-ParmVarDecl 0x2a7b4a164f8 <col:75, col:82> col:82 _Str 'char *'
| |-ParmVarDecl 0x2a7b4a16578 <col:95, col:108> col:108 _Delim 'const char *'
| `-ParmVarDecl 0x2a7b4a165f8 <col:146, col:154> col:154 _Context 'char **'
|-FunctionDecl 0x2a7b4a169f0 <line:208:28, col:109> col:44 _strupr_s 'errno_t (char *, size_t) __attribute__((cdecl))':'errno_t (char *, size_t)'
| |-ParmVarDecl 0x2a7b4a16880 <col:79, col:86> col:86 _Str 'char *'
| `-ParmVarDecl 0x2a7b4a168f8 <col:97, col:104> col:104 _Size 'size_t':'unsigned long long'
|-FunctionDecl 0x2a7b4a16c70 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1933:117> D:\Microsoft Visual Studio 12.0\VC\include\string.h:210:79 _strupr 'char *(char *) __attribute__((cdecl))':'char *(char *)'
| |-ParmVarDecl 0x2a7b4a16b90 <col:99, col:105> col:105 _String 'char *'
| `-DeprecatedAttr 0x2a7b4a16d18 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _strupr_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2a7b4a17078 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:211:28, col:130> col:44 _strupr_s_l 'errno_t (char *, size_t, _locale_t) __attribute__((cdecl))':'errno_t (char *, size_t, _locale_t)'
| |-ParmVarDecl 0x2a7b4a16e60 <col:81, col:88> col:88 _Str 'char *'
| |-ParmVarDecl 0x2a7b4a16ed8 <col:99, col:106> col:106 _Size 'size_t':'unsigned long long'
| `-ParmVarDecl 0x2a7b4a16f50 <col:113, col:123> col:123 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2a7b4a17398 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:213:82 _strupr_l 'char *(char *, _locale_t) __attribute__((cdecl))':'char *(char *, _locale_t)'
| |-ParmVarDecl 0x2a7b4a17220 <col:148, col:154> col:154 _String 'char *'
| |-ParmVarDecl 0x2a7b4a17298 <col:172, col:183> col:183 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x2a7b4a17448 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _strupr_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2a7b4a17860 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:214:44> col:44 implicit strxfrm 'unsigned long long (char *, const char *, unsigned long long)' extern
| |-ParmVarDecl 0x2a7b4a17900 <<invalid sloc>> <invalid sloc> 'char *'
| |-ParmVarDecl 0x2a7b4a17968 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x2a7b4a179d0 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x2a7b4a17a50 prev 0x2a7b4a17860 <col:28, col:155> col:44 strxfrm 'unsigned long long (char *, const char *, unsigned long long)'
| |-ParmVarDecl 0x2a7b4a17590 <col:95, col:102> col:102 _Dst 'char *'
| |-ParmVarDecl 0x2a7b4a17610 <col:115, col:128> col:128 _Src 'const char *'
| `-ParmVarDecl 0x2a7b4a17688 <col:139, col:146> col:146 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x2a7b4a17ea8 <line:215:28, col:185> col:44 _strxfrm_l 'size_t (char *, const char *, size_t, _locale_t) __attribute__((cdecl))':'size_t (char *, const char *, size_t, _locale_t)'
| |-ParmVarDecl 0x2a7b4a17b38 <col:97, col:104> col:104 _Dst 'char *'
| |-ParmVarDecl 0x2a7b4a17bb8 <col:117, col:130> col:130 _Src 'const char *'
| |-ParmVarDecl 0x2a7b4a17c30 <col:141, col:148> col:148 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x2a7b4a17ca8 <col:168, col:178> col:178 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2a7b4a10138 <line:245:71> col:71 implicit strdup 'char *(const char *)' extern
| `-ParmVarDecl 0x2a7b4a101d8 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x2a7b4a10248 prev 0x2a7b4a10138 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:245:106> col:71 strdup 'char *(const char *)'
| |-ParmVarDecl 0x2a7b4a10058 <col:89, col:102> col:102 _Src 'const char *'
| `-DeprecatedAttr 0x2a7b4a102f0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strdup. See online help for details." ""
|-FunctionDecl 0x2a7b4a10638 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:252:129> col:69 strcmpi 'int (const char *, const char *) __attribute__((cdecl))':'int (const char *, const char *)'
| |-ParmVarDecl 0x2a7b4a104b8 <col:84, col:97> col:97 _Str1 'const char *'
| |-ParmVarDecl 0x2a7b4a10538 <col:111, col:124> col:124 _Str2 'const char *'
| `-DeprecatedAttr 0x2a7b4a106e8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strcmpi. See online help for details." ""
|-FunctionDecl 0x2a7b4a10a30 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:253:129> col:69 stricmp 'int (const char *, const char *) __attribute__((cdecl))':'int (const char *, const char *)'
| |-ParmVarDecl 0x2a7b4a108b0 <col:84, col:97> col:97 _Str1 'const char *'
| |-ParmVarDecl 0x2a7b4a10930 <col:111, col:124> col:124 _Str2 'const char *'
| `-DeprecatedAttr 0x2a7b4a10ae0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _stricmp. See online help for details." ""
|-FunctionDecl 0x2a7b4a10d88 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:254:84> col:56 strlwr 'char *(char *) __attribute__((cdecl))':'char *(char *)'
| |-ParmVarDecl 0x2a7b4a10ca8 <col:73, col:80> col:80 _Str 'char *'
| `-DeprecatedAttr 0x2a7b4a10e30 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strlwr. See online help for details." ""
|-FunctionDecl 0x2a7b4a1f360 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:255:193> col:70 strnicmp 'int (const char *, const char *, size_t) __attribute__((cdecl))':'int (const char *, const char *, size_t)'
| |-ParmVarDecl 0x2a7b4a1f148 <col:106, col:119> col:119 _Str1 'const char *'
| |-ParmVarDecl 0x2a7b4a1f1c8 <col:153, col:166> col:166 _Str 'const char *'
| |-ParmVarDecl 0x2a7b4a1f240 <col:177, col:184> col:184 _MaxCount 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x2a7b4a1f418 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strnicmp. See online help for details." ""
|-FunctionDecl 0x2a7b4a1f7f8 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:256:143> col:57 strnset 'char *(char *, int, size_t) __attribute__((cdecl))':'char *(char *, int, size_t)'
| |-ParmVarDecl 0x2a7b4a1f5e0 <col:94, col:101> col:101 _Str 'char *'
| |-ParmVarDecl 0x2a7b4a1f660 <col:112, col:116> col:116 _Val 'int'
| |-ParmVarDecl 0x2a7b4a1f6d8 <col:127, col:134> col:134 _MaxCount 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x2a7b4a1f8b0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strnset. See online help for details." ""
|-FunctionDecl 0x2a7b4a1fb58 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:257:84> col:56 strrev 'char *(char *) __attribute__((cdecl))':'char *(char *)'
| |-ParmVarDecl 0x2a7b4a1fa78 <col:73, col:80> col:80 _Str 'char *'
| `-DeprecatedAttr 0x2a7b4a1fc00 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strrev. See online help for details." ""
|-FunctionDecl 0x2a7b4a1ff48 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:258:99> col:56 strset 'char *(char *, int) __attribute__((cdecl))':'char *(char *, int)'
| |-ParmVarDecl 0x2a7b4a1fdc8 <col:73, col:80> col:80 _Str 'char *'
| |-ParmVarDecl 0x2a7b4a1fe48 <col:91, col:95> col:95 _Val 'int'
| `-DeprecatedAttr 0x2a7b4a1fff8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strset. See online help for details." ""
|-FunctionDecl 0x2a7b4a19290 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:259:84> col:56 strupr 'char *(char *) __attribute__((cdecl))':'char *(char *)'
| |-ParmVarDecl 0x2a7b4a191b0 <col:73, col:80> col:80 _Str 'char *'
| `-DeprecatedAttr 0x2a7b4a19338 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strupr. See online help for details." ""
|-FunctionDecl 0x2a7b4a195d0 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:273:24, col:77> col:42 _wcsdup 'wchar_t *(const wchar_t *) __attribute__((cdecl))':'wchar_t *(const wchar_t *)'
| `-ParmVarDecl 0x2a7b4a19458 <col:57, col:73> col:73 _Str 'const wchar_t *'
|-FunctionDecl 0x2a7b4a19960 <line:280:40, col:167> col:56 wcscat_s 'errno_t (wchar_t *, rsize_t, const wchar_t *) __attribute__((cdecl))':'errno_t (wchar_t *, rsize_t, const wchar_t *)'
| |-ParmVarDecl 0x2a7b4a196a0 <col:97, col:107> col:107 _Dst 'wchar_t *'
| |-ParmVarDecl 0x2a7b4a19718 <col:118, col:126> col:126 _SizeInWords 'rsize_t':'unsigned long long'
| `-ParmVarDecl 0x2a7b4a19790 <col:147, col:163> col:163 _Src 'const wchar_t *'
|-FunctionDecl 0x2a7b4a19d18 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:284:82 wcscat 'wchar_t *(wchar_t *, const wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x2a7b4a19b00 <col:164, col:173> col:173 _Dest 'wchar_t *'
| |-ParmVarDecl 0x2a7b4a19b78 <col:187, col:204> col:204 _Source 'const wchar_t *'
| `-DeprecatedAttr 0x2a7b4a19dc8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using wcscat_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2a7b4a201a8 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:288:41> col:41 implicit wcschr 'unsigned short *(const unsigned short *, unsigned short)' extern
| |-ParmVarDecl 0x2a7b4a20248 <<invalid sloc>> <invalid sloc> 'const unsigned short *'
| `-ParmVarDecl 0x2a7b4a202b0 <<invalid sloc>> <invalid sloc> 'unsigned short'
|-FunctionDecl 0x2a7b4a20328 prev 0x2a7b4a201a8 <col:23, col:88> col:41 wcschr 'unsigned short *(const unsigned short *, unsigned short)'
| |-ParmVarDecl 0x2a7b4a19f08 <col:55, col:71> col:71 _Str 'const wchar_t *'
| `-ParmVarDecl 0x2a7b4a19f80 <col:77, col:85> col:85 _Ch 'wchar_t':'unsigned short'
|-FunctionDecl 0x2a7b4a20620 <line:289:36> col:36 implicit wcscmp 'int (const unsigned short *, const unsigned short *)' extern
| |-ParmVarDecl 0x2a7b4a206c0 <<invalid sloc>> <invalid sloc> 'const unsigned short *'
| `-ParmVarDecl 0x2a7b4a20728 <<invalid sloc>> <invalid sloc> 'const unsigned short *'
|-FunctionDecl 0x2a7b4a207a0 prev 0x2a7b4a20620 <col:24, col:101> col:36 wcscmp 'int (const unsigned short *, const unsigned short *)'
| |-ParmVarDecl 0x2a7b4a20400 <col:50, col:66> col:66 _Str1 'const wchar_t *'
| `-ParmVarDecl 0x2a7b4a20478 <col:80, col:96> col:96 _Str2 'const wchar_t *'
|-FunctionDecl 0x2a7b4a20a80 <line:291:40, col:164> col:56 wcscpy_s 'errno_t (wchar_t *, rsize_t, const wchar_t *) __attribute__((cdecl))':'errno_t (wchar_t *, rsize_t, const wchar_t *)'
| |-ParmVarDecl 0x2a7b4a20878 <col:94, col:104> col:104 _Dst 'wchar_t *'
| |-ParmVarDecl 0x2a7b4a208f0 <col:115, col:123> col:123 _SizeInWords 'rsize_t':'unsigned long long'
| `-ParmVarDecl 0x2a7b4a20968 <col:144, col:160> col:160 _Src 'const wchar_t *'
|-FunctionDecl 0x2a7b4a20d90 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:294:82 wcscpy 'wchar_t *(wchar_t *, const wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x2a7b4a20c20 <col:136, col:145> col:145 _Dest 'wchar_t *'
| |-ParmVarDecl 0x2a7b4a20c98 <col:159, col:176> col:176 _Source 'const wchar_t *'
| `-DeprecatedAttr 0x2a7b4a20e40 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using wcscpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2a7b4a211b8 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:295:24, col:107> col:39 wcscspn 'size_t (const wchar_t *, const wchar_t *) __attribute__((cdecl))':'size_t (const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x2a7b4a20f80 <col:54, col:70> col:70 _Str 'const wchar_t *'
| `-ParmVarDecl 0x2a7b4a20ff8 <col:83, col:99> col:99 _Control 'const wchar_t *'
|-FunctionDecl 0x2a7b4a21400 <line:296:39> col:39 implicit wcslen 'unsigned long long (const unsigned short *)' extern
| `-ParmVarDecl 0x2a7b4a214a0 <<invalid sloc>> <invalid sloc> 'const unsigned short *'
|-FunctionDecl 0x2a7b4a21510 prev 0x2a7b4a21400 <col:24, col:73> col:39 wcslen 'unsigned long long (const unsigned short *)'
| `-ParmVarDecl 0x2a7b4a21290 <col:53, col:69> col:69 _Str 'const wchar_t *'
|-FunctionDecl 0x2a7b4a217f8 <line:300:1, col:94> col:16 used wcsnlen 'size_t (const wchar_t *, size_t) __attribute__((cdecl))':'size_t (const wchar_t *, size_t)'
| |-ParmVarDecl 0x2a7b4a215e0 <col:51, col:67> col:67 _Src 'const wchar_t *'
| `-ParmVarDecl 0x2a7b4a21658 <col:78, col:85> col:85 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x2a7b4a21a40 <line:302:16, line:308:1> line:305:18 wcsnlen_s 'size_t (const wchar_t *, size_t) __attribute__((cdecl))':'size_t (const wchar_t *, size_t)' static inline
| |-ParmVarDecl 0x2a7b4a218d0 <col:55, col:71> col:71 used _Src 'const wchar_t *'
| |-ParmVarDecl 0x2a7b4a21948 <col:82, col:89> col:89 used _MaxCount 'size_t':'unsigned long long'
| `-CompoundStmt 0x2a7b4a21dd8 <line:306:1, line:308:1>
|   `-ReturnStmt 0x2a7b4a21dc8 <line:307:5, col:56>
|     `-ConditionalOperator 0x2a7b4a21d98 <col:12, col:56> 'unsigned long long'
|       |-ParenExpr 0x2a7b4a21c00 <col:12, col:25> 'int'
|       | `-BinaryOperator 0x2a7b4a21be0 <col:13, line:36:27> 'int' '=='
|       |   |-ImplicitCastExpr 0x2a7b4a21bb0 <line:307:13> 'const wchar_t *' <LValueToRValue>
|       |   | `-DeclRefExpr 0x2a7b4a21b08 <col:13> 'const wchar_t *' lvalue ParmVar 0x2a7b4a218d0 '_Src' 'const wchar_t *'
|       |   `-ImplicitCastExpr 0x2a7b4a21bc8 <line:36:17, col:27> 'const wchar_t *' <BitCast>
|       |     `-ParenExpr 0x2a7b4a21b90 <col:17, col:27> 'void *'
|       |       `-CStyleCastExpr 0x2a7b4a21b68 <col:18, col:26> 'void *' <NullToPointer>
|       |         `-IntegerLiteral 0x2a7b4a21b28 <col:26> 'int' 0
|       |-ImplicitCastExpr 0x2a7b4a21d80 <line:307:29> 'unsigned long long' <IntegralCast>
|       | `-IntegerLiteral 0x2a7b4a21c20 <col:29> 'int' 0
|       `-CallExpr 0x2a7b4a21d20 <col:33, col:56> 'size_t':'unsigned long long'
|         |-ImplicitCastExpr 0x2a7b4a21d08 <col:33> 'size_t (*)(const wchar_t *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x2a7b4a21c48 <col:33> 'size_t (const wchar_t *, size_t) __attribute__((cdecl))':'size_t (const wchar_t *, size_t)' Function 0x2a7b4a217f8 'wcsnlen' 'size_t (const wchar_t *, size_t) __attribute__((cdecl))':'size_t (const wchar_t *, size_t)'
|         |-ImplicitCastExpr 0x2a7b4a21d50 <col:41> 'const wchar_t *' <LValueToRValue>
|         | `-DeclRefExpr 0x2a7b4a21c68 <col:41> 'const wchar_t *' lvalue ParmVar 0x2a7b4a218d0 '_Src' 'const wchar_t *'
|         `-ImplicitCastExpr 0x2a7b4a21d68 <col:47> 'size_t':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x2a7b4a21c88 <col:47> 'size_t':'unsigned long long' lvalue ParmVar 0x2a7b4a21948 '_MaxCount' 'size_t':'unsigned long long'
|-FunctionDecl 0x2a7b4a221a8 <line:311:40, col:212> col:56 wcsncat_s 'errno_t (wchar_t *, rsize_t, const wchar_t *, rsize_t) __attribute__((cdecl))':'errno_t (wchar_t *, rsize_t, const wchar_t *, rsize_t)'
| |-ParmVarDecl 0x2a7b4a21e00 <col:98, col:108> col:108 _Dst 'wchar_t *'
| |-ParmVarDecl 0x2a7b4a21e78 <col:119, col:127> col:127 _SizeInWords 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x2a7b4a21ef0 <col:168, col:184> col:184 _Src 'const wchar_t *'
| `-ParmVarDecl 0x2a7b4a21f68 <col:195, col:203> col:203 _MaxCount 'rsize_t':'unsigned long long'
|-FunctionDecl 0x2a7b4a22610 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1980:149> D:\Microsoft Visual Studio 12.0\VC\include\string.h:316:86 wcsncat 'wchar_t *(wchar_t *, const wchar_t *, size_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, const wchar_t *, size_t)'
| |-ParmVarDecl 0x2a7b4a22350 <col:167, col:176> col:176 _Dest 'wchar_t *'
| |-ParmVarDecl 0x2a7b4a223c8 <col:207, col:224> col:224 _Source 'const wchar_t *'
| |-ParmVarDecl 0x2a7b4a22440 <col:238, col:246> col:246 _Count 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x2a7b4a226c8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using wcsncat_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2a7b4a22ad8 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:318:36> col:36 implicit wcsncmp 'int (const unsigned short *, const unsigned short *, unsigned long long)' extern
| |-ParmVarDecl 0x2a7b4a22b78 <<invalid sloc>> <invalid sloc> 'const unsigned short *'
| |-ParmVarDecl 0x2a7b4a22be0 <<invalid sloc>> <invalid sloc> 'const unsigned short *'
| `-ParmVarDecl 0x2a7b4a22c48 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x2a7b4a22cc8 prev 0x2a7b4a22ad8 <col:24, col:165> col:36 wcsncmp 'int (const unsigned short *, const unsigned short *, unsigned long long)'
| |-ParmVarDecl 0x2a7b4a22808 <col:71, col:87> col:87 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x2a7b4a22880 <col:121, col:137> col:137 _Str2 'const wchar_t *'
| `-ParmVarDecl 0x2a7b4a228f8 <col:149, col:156> col:156 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x2a7b4a1b050 <line:320:40, col:209> col:56 wcsncpy_s 'errno_t (wchar_t *, rsize_t, const wchar_t *, rsize_t) __attribute__((cdecl))':'errno_t (wchar_t *, rsize_t, const wchar_t *, rsize_t)'
| |-ParmVarDecl 0x2a7b4a22da8 <col:95, col:105> col:105 _Dst 'wchar_t *'
| |-ParmVarDecl 0x2a7b4a22e20 <col:116, col:124> col:124 _SizeInWords 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x2a7b4a22e98 <col:165, col:181> col:181 _Src 'const wchar_t *'
| `-ParmVarDecl 0x2a7b4a22f10 <col:192, col:200> col:200 _MaxCount 'rsize_t':'unsigned long long'
|-FunctionDecl 0x2a7b4a1b400 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1980:149> D:\Microsoft Visual Studio 12.0\VC\include\string.h:323:86 wcsncpy 'wchar_t *(wchar_t *, const wchar_t *, size_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, const wchar_t *, size_t)'
| |-ParmVarDecl 0x2a7b4a1b1f8 <col:179, col:188> col:188 _Dest 'wchar_t *'
| |-ParmVarDecl 0x2a7b4a1b270 <col:219, col:236> col:236 _Source 'const wchar_t *'
| |-ParmVarDecl 0x2a7b4a1b2e8 <col:250, col:258> col:258 _Count 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x2a7b4a1b4b8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using wcsncpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2a7b4a1b818 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:324:38, col:124> col:56 wcspbrk 'wchar_t *(const wchar_t *, const wchar_t *) __attribute__((cdecl))':'wchar_t *(const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x2a7b4a1b5f8 <col:71, col:87> col:87 _Str 'const wchar_t *'
| `-ParmVarDecl 0x2a7b4a1b670 <col:100, col:116> col:116 _Control 'const wchar_t *'
|-FunctionDecl 0x2a7b4a1ba60 <line:325:38, col:109> col:56 wcsrchr 'wchar_t *(const wchar_t *, wchar_t) __attribute__((cdecl))':'wchar_t *(const wchar_t *, wchar_t)'
| |-ParmVarDecl 0x2a7b4a1b8f0 <col:71, col:87> col:87 _Str 'const wchar_t *'
| `-ParmVarDecl 0x2a7b4a1b968 <col:98, col:106> col:106 _Ch 'wchar_t':'unsigned short'
|-FunctionDecl 0x2a7b4a1bca8 <line:326:24, col:106> col:39 wcsspn 'size_t (const wchar_t *, const wchar_t *) __attribute__((cdecl))':'size_t (const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x2a7b4a1bb38 <col:53, col:69> col:69 _Str 'const wchar_t *'
| `-ParmVarDecl 0x2a7b4a1bbb0 <col:82, col:98> col:98 _Control 'const wchar_t *'
|-FunctionDecl 0x2a7b4a1bef0 <line:329:23, col:107> col:41 wcsstr 'wchar_t *(const wchar_t *, const wchar_t *) __attribute__((cdecl))':'wchar_t *(const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x2a7b4a1bd80 <col:55, col:71> col:71 _Str 'const wchar_t *'
| `-ParmVarDecl 0x2a7b4a1bdf8 <col:84, col:100> col:100 _SubStr 'const wchar_t *'
|-FunctionDecl 0x2a7b4a1e2c0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:330:142> col:76 wcstok 'wchar_t *(wchar_t *, const wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x2a7b4a1e150 <col:97, col:107> col:107 _Str 'wchar_t *'
| |-ParmVarDecl 0x2a7b4a1e1c8 <col:120, col:136> col:136 _Delim 'const wchar_t *'
| `-DeprecatedAttr 0x2a7b4a1e370 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using wcstok_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2a7b4a1e7d0 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:332:36, col:173> col:54 wcstok_s 'wchar_t *(wchar_t *, const wchar_t *, wchar_t **) __attribute__((cdecl))':'wchar_t *(wchar_t *, const wchar_t *, wchar_t **)'
| |-ParmVarDecl 0x2a7b4a1e4b0 <col:77, col:87> col:87 _Str 'wchar_t *'
| |-ParmVarDecl 0x2a7b4a1e528 <col:100, col:116> col:116 _Delim 'const wchar_t *'
| `-ParmVarDecl 0x2a7b4a1e600 <col:154, col:165> col:165 _Context 'wchar_t **'
|-FunctionDecl 0x2a7b4a1eaf0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:334:105> col:79 _wcserror 'wchar_t *(int) __attribute__((cdecl))':'wchar_t *(int)'
| |-ParmVarDecl 0x2a7b4a1e978 <col:94, col:98> col:98 _ErrNum 'int'
| `-DeprecatedAttr 0x2a7b4a1eb98 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wcserror_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2a7b4a1efa0 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:335:28, col:147> col:44 _wcserror_s 'errno_t (wchar_t *, size_t, int) __attribute__((cdecl))':'errno_t (wchar_t *, size_t, int)'
| |-ParmVarDecl 0x2a7b4a1ecd8 <col:89, col:99> col:99 _Buf 'wchar_t *'
| |-ParmVarDecl 0x2a7b4a1ed50 <col:110, col:117> col:117 _SizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x2a7b4a1edd0 <col:136, col:140> col:140 _ErrNum 'int'
|-FunctionDecl 0x2a7b4a232b0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:337:122> col:80 __wcserror 'wchar_t *(const wchar_t *) __attribute__((cdecl))':'wchar_t *(const wchar_t *)'
| |-ParmVarDecl 0x2a7b4a231d8 <col:102, col:118> col:118 _Str 'const wchar_t *'
| `-DeprecatedAttr 0x2a7b4a23358 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using __wcserror_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2a7b4a23720 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:338:28, col:165> col:44 __wcserror_s 'errno_t (wchar_t *, size_t, const wchar_t *) __attribute__((cdecl))':'errno_t (wchar_t *, size_t, const wchar_t *)'
| |-ParmVarDecl 0x2a7b4a23498 <col:90, col:100> col:100 _Buffer 'wchar_t *'
| |-ParmVarDecl 0x2a7b4a23510 <col:114, col:121> col:121 _SizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x2a7b4a23588 <col:142, col:158> col:158 _ErrMsg 'const wchar_t *'
|-FunctionDecl 0x2a7b4a23978 <line:341:24, col:103> col:36 _wcsicmp 'int (const wchar_t *, const wchar_t *) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x2a7b4a23800 <col:52, col:68> col:68 _Str1 'const wchar_t *'
| `-ParmVarDecl 0x2a7b4a23878 <col:82, col:98> col:98 _Str2 'const wchar_t *'
|-FunctionDecl 0x2a7b4a23d18 <line:342:24, col:133> col:36 _wcsicmp_l 'int (const wchar_t *, const wchar_t *, _locale_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, _locale_t)'
| |-ParmVarDecl 0x2a7b4a23a50 <col:54, col:70> col:70 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x2a7b4a23ac8 <col:84, col:100> col:100 _Str2 'const wchar_t *'
| `-ParmVarDecl 0x2a7b4a23b40 <col:116, col:126> col:126 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2a7b4a24008 <line:343:24, col:167> col:36 _wcsnicmp 'int (const wchar_t *, const wchar_t *, size_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, size_t)'
| |-ParmVarDecl 0x2a7b4a23df8 <col:73, col:89> col:89 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x2a7b4a23e70 <col:123, col:139> col:139 _Str2 'const wchar_t *'
| `-ParmVarDecl 0x2a7b4a23ee8 <col:151, col:158> col:158 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x2a7b4a1c400 <line:344:24, col:197> col:36 _wcsnicmp_l 'int (const wchar_t *, const wchar_t *, size_t, _locale_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, size_t, _locale_t)'
| |-ParmVarDecl 0x2a7b4a1c088 <col:75, col:91> col:91 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x2a7b4a1c100 <col:125, col:141> col:141 _Str2 'const wchar_t *'
| |-ParmVarDecl 0x2a7b4a1c178 <col:153, col:160> col:160 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x2a7b4a1c1f0 <col:180, col:190> col:190 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2a7b4a1c858 <line:345:40, col:181> col:56 _wcsnset_s 'errno_t (wchar_t *, size_t, wchar_t, size_t) __attribute__((cdecl))':'errno_t (wchar_t *, size_t, wchar_t, size_t)'
| |-ParmVarDecl 0x2a7b4a1c4e8 <col:99, col:109> col:109 _Dst 'wchar_t *'
| |-ParmVarDecl 0x2a7b4a1c560 <col:120, col:127> col:127 _SizeInWords 'size_t':'unsigned long long'
| |-ParmVarDecl 0x2a7b4a1c5d8 <col:146, col:154> col:154 _Val 'wchar_t':'unsigned short'
| `-ParmVarDecl 0x2a7b4a1c650 <col:165, col:172> col:172 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x2a7b4a1ccc0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1980:149> D:\Microsoft Visual Studio 12.0\VC\include\string.h:347:86 _wcsnset 'wchar_t *(wchar_t *, wchar_t, size_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, wchar_t, size_t)'
| |-ParmVarDecl 0x2a7b4a1ca00 <col:172, col:181> col:181 _Str 'wchar_t *'
| |-ParmVarDecl 0x2a7b4a1ca78 <col:187, col:196> col:196 _Val 'wchar_t':'unsigned short'
| |-ParmVarDecl 0x2a7b4a1caf0 <col:207, col:215> col:215 _MaxCount 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x2a7b4a1cd78 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wcsnset_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2a7b4a240e0 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:348:9, col:59> col:27 _wcsrev 'wchar_t *(wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *)'
| `-ParmVarDecl 0x2a7b4a1ceb8 <col:45, col:55> col:55 _Str 'wchar_t *'
|-FunctionDecl 0x2a7b4a24470 <line:349:40, col:159> col:56 _wcsset_s 'errno_t (wchar_t *, size_t, wchar_t) __attribute__((cdecl))':'errno_t (wchar_t *, size_t, wchar_t)'
| |-ParmVarDecl 0x2a7b4a241b0 <col:98, col:108> col:108 _Dst 'wchar_t *'
| |-ParmVarDecl 0x2a7b4a24228 <col:119, col:126> col:126 _SizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x2a7b4a242a0 <col:145, col:153> col:153 _Value 'wchar_t':'unsigned short'
|-FunctionDecl 0x2a7b4a24828 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:351:85 _wcsset 'wchar_t *(wchar_t *, wchar_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, wchar_t)'
| |-ParmVarDecl 0x2a7b4a24610 <col:150, col:159> col:159 _Str 'wchar_t *'
| |-ParmVarDecl 0x2a7b4a24688 <col:165, col:174> col:174 _Val 'wchar_t':'unsigned short'
| `-DeprecatedAttr 0x2a7b4a248d8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wcsset_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2a7b4a24c38 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:353:28, col:126> col:44 _wcslwr_s 'errno_t (wchar_t *, size_t) __attribute__((cdecl))':'errno_t (wchar_t *, size_t)'
| |-ParmVarDecl 0x2a7b4a24a18 <col:86, col:96> col:96 _Str 'wchar_t *'
| `-ParmVarDecl 0x2a7b4a24a90 <col:107, col:114> col:114 _SizeInWords 'size_t':'unsigned long long'
|-FunctionDecl 0x2a7b4a24ea8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1933:117> D:\Microsoft Visual Studio 12.0\VC\include\string.h:355:82 _wcslwr 'wchar_t *(wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *)'
| |-ParmVarDecl 0x2a7b4a24dd0 <col:102, col:111> col:111 _String 'wchar_t *'
| `-DeprecatedAttr 0x2a7b4a24f50 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wcslwr_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2a7b4a1d330 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:356:28, col:156> col:44 _wcslwr_s_l 'errno_t (wchar_t *, size_t, _locale_t) __attribute__((cdecl))':'errno_t (wchar_t *, size_t, _locale_t)'
| |-ParmVarDecl 0x2a7b4a1d070 <col:88, col:98> col:98 _Str 'wchar_t *'
| |-ParmVarDecl 0x2a7b4a1d0e8 <col:109, col:116> col:116 _SizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x2a7b4a1d160 <col:139, col:149> col:149 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2a7b4a1d6e8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:358:85 _wcslwr_l 'wchar_t *(wchar_t *, _locale_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, _locale_t)'
| |-ParmVarDecl 0x2a7b4a1d4d0 <col:154, col:163> col:163 _String 'wchar_t *'
| |-ParmVarDecl 0x2a7b4a1d548 <col:181, col:192> col:192 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x2a7b4a1d798 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wcslwr_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2a7b4a1da48 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:359:28, col:112> col:44 _wcsupr_s 'errno_t (wchar_t *, size_t) __attribute__((cdecl))':'errno_t (wchar_t *, size_t)'
| |-ParmVarDecl 0x2a7b4a1d8d8 <col:79, col:89> col:89 _Str 'wchar_t *'
| `-ParmVarDecl 0x2a7b4a1d950 <col:100, col:107> col:107 _Size 'size_t':'unsigned long long'
|-FunctionDecl 0x2a7b4a1dcb8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1933:117> D:\Microsoft Visual Studio 12.0\VC\include\string.h:361:82 _wcsupr 'wchar_t *(wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *)'
| |-ParmVarDecl 0x2a7b4a1dbe0 <col:102, col:111> col:111 _String 'wchar_t *'
| `-DeprecatedAttr 0x2a7b4a1dd60 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wcsupr_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2a7b4a2c1a0 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:362:28, col:142> col:44 _wcsupr_s_l 'errno_t (wchar_t *, size_t, _locale_t) __attribute__((cdecl))':'errno_t (wchar_t *, size_t, _locale_t)'
| |-ParmVarDecl 0x2a7b4a1dea0 <col:81, col:91> col:91 _Str 'wchar_t *'
| |-ParmVarDecl 0x2a7b4a1df18 <col:102, col:109> col:109 _Size 'size_t':'unsigned long long'
| `-ParmVarDecl 0x2a7b4a1df90 <col:125, col:135> col:135 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2a7b4a2c4b0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:364:85 _wcsupr_l 'wchar_t *(wchar_t *, _locale_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, _locale_t)'
| |-ParmVarDecl 0x2a7b4a2c340 <col:154, col:163> col:163 _String 'wchar_t *'
| |-ParmVarDecl 0x2a7b4a2c3b8 <col:181, col:192> col:192 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x2a7b4a2c560 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wcsupr_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2a7b4a2c960 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:365:28, col:159> col:43 wcsxfrm 'size_t (wchar_t *, const wchar_t *, size_t) __attribute__((cdecl))':'size_t (wchar_t *, const wchar_t *, size_t)'
| |-ParmVarDecl 0x2a7b4a2c6a0 <col:93, col:103> col:103 _Dst 'wchar_t *'
| |-ParmVarDecl 0x2a7b4a2c718 <col:116, col:132> col:132 _Src 'const wchar_t *'
| `-ParmVarDecl 0x2a7b4a2c790 <col:143, col:150> col:150 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x2a7b4a2cda8 <line:366:28, col:189> col:43 _wcsxfrm_l 'size_t (wchar_t *, const wchar_t *, size_t, _locale_t) __attribute__((cdecl))':'size_t (wchar_t *, const wchar_t *, size_t, _locale_t)'
| |-ParmVarDecl 0x2a7b4a2ca40 <col:96, col:106> col:106 _Dst 'wchar_t *'
| |-ParmVarDecl 0x2a7b4a2cab8 <col:119, col:134> col:134 _Src 'const wchar_t *'
| |-ParmVarDecl 0x2a7b4a2cb30 <col:145, col:152> col:152 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x2a7b4a2cba8 <col:172, col:182> col:182 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2a7b4a2d008 <line:367:24, col:102> col:36 wcscoll 'int (const wchar_t *, const wchar_t *) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x2a7b4a2ce90 <col:51, col:67> col:67 _Str1 'const wchar_t *'
| `-ParmVarDecl 0x2a7b4a2cf08 <col:81, col:97> col:97 _Str2 'const wchar_t *'
|-FunctionDecl 0x2a7b4a25288 <line:368:24, col:133> col:36 _wcscoll_l 'int (const wchar_t *, const wchar_t *, _locale_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, _locale_t)'
| |-ParmVarDecl 0x2a7b4a2d0e0 <col:54, col:70> col:70 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x2a7b4a250f0 <col:84, col:100> col:100 _Str2 'const wchar_t *'
| `-ParmVarDecl 0x2a7b4a25168 <col:116, col:126> col:126 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2a7b4a254e0 <line:369:24, col:104> col:36 _wcsicoll 'int (const wchar_t *, const wchar_t *) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x2a7b4a25368 <col:53, col:69> col:69 _Str1 'const wchar_t *'
| `-ParmVarDecl 0x2a7b4a253e0 <col:83, col:99> col:99 _Str2 'const wchar_t *'
|-FunctionDecl 0x2a7b4a257c8 <line:370:24, col:133> col:36 _wcsicoll_l 'int (const wchar_t *, const wchar_t *, _locale_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, _locale_t)'
| |-ParmVarDecl 0x2a7b4a255b8 <col:55, col:71> col:71 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x2a7b4a25630 <col:85, col:100> col:100 _Str2 'const wchar_t *'
| `-ParmVarDecl 0x2a7b4a256a8 <col:116, col:126> col:126 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2a7b4a25ab8 <line:371:24, col:167> col:36 _wcsncoll 'int (const wchar_t *, const wchar_t *, size_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, size_t)'
| |-ParmVarDecl 0x2a7b4a258a8 <col:73, col:89> col:89 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x2a7b4a25920 <col:123, col:139> col:139 _Str2 'const wchar_t *'
| `-ParmVarDecl 0x2a7b4a25998 <col:151, col:158> col:158 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x2a7b4a25e40 <line:372:24, col:197> col:36 _wcsncoll_l 'int (const wchar_t *, const wchar_t *, size_t, _locale_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, size_t, _locale_t)'
| |-ParmVarDecl 0x2a7b4a25b98 <col:75, col:91> col:91 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x2a7b4a25c10 <col:125, col:141> col:141 _Str2 'const wchar_t *'
| |-ParmVarDecl 0x2a7b4a25c88 <col:153, col:160> col:160 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x2a7b4a25d00 <col:180, col:190> col:190 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2a7b4a26148 <line:373:24, col:168> col:36 _wcsnicoll 'int (const wchar_t *, const wchar_t *, size_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, size_t)'
| |-ParmVarDecl 0x2a7b4a25f28 <col:74, col:90> col:90 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x2a7b4a25fa0 <col:124, col:140> col:140 _Str2 'const wchar_t *'
| `-ParmVarDecl 0x2a7b4a26018 <col:152, col:159> col:159 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x2a7b4a264d0 <line:374:24, col:198> col:36 _wcsnicoll_l 'int (const wchar_t *, const wchar_t *, size_t, _locale_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, size_t, _locale_t)'
| |-ParmVarDecl 0x2a7b4a26228 <col:76, col:92> col:92 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x2a7b4a262a0 <col:126, col:142> col:142 _Str2 'const wchar_t *'
| |-ParmVarDecl 0x2a7b4a26318 <col:154, col:161> col:161 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x2a7b4a26390 <col:181, col:191> col:191 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2a7b4a26730 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:403:108> col:74 wcsdup 'wchar_t *(const wchar_t *) __attribute__((cdecl))':'wchar_t *(const wchar_t *)'
| |-ParmVarDecl 0x2a7b4a26658 <col:88, col:104> col:104 _Str 'const wchar_t *'
| `-DeprecatedAttr 0x2a7b4a267d8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsdup. See online help for details." ""
|-FunctionDecl 0x2a7b4a26b10 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:413:135> col:69 wcsicmp 'int (const wchar_t *, const wchar_t *) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x2a7b4a26998 <col:84, col:100> col:100 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x2a7b4a26a10 <col:114, col:130> col:130 _Str2 'const wchar_t *'
| `-DeprecatedAttr 0x2a7b4a26bc0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsicmp. See online help for details." ""
|-FunctionDecl 0x2a7b4a26f90 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:414:200> col:70 wcsnicmp 'int (const wchar_t *, const wchar_t *, size_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, size_t)'
| |-ParmVarDecl 0x2a7b4a26d80 <col:106, col:122> col:122 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x2a7b4a26df8 <col:156, col:172> col:172 _Str2 'const wchar_t *'
| |-ParmVarDecl 0x2a7b4a26e70 <col:184, col:191> col:191 _MaxCount 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x2a7b4a27048 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsnicmp. See online help for details." ""
|-FunctionDecl 0x2a7b4a27490 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:415:153> col:60 wcsnset 'wchar_t *(wchar_t *, wchar_t, size_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, wchar_t, size_t)'
| |-ParmVarDecl 0x2a7b4a27288 <col:97, col:107> col:107 _Str 'wchar_t *'
| |-ParmVarDecl 0x2a7b4a27300 <col:118, col:126> col:126 _Val 'wchar_t':'unsigned short'
| |-ParmVarDecl 0x2a7b4a27378 <col:137, col:144> col:144 _MaxCount 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x2a7b4a27548 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsnset. See online help for details." ""
|-FunctionDecl 0x2a7b4a277e0 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:416:90> col:59 wcsrev 'wchar_t *(wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *)'
| |-ParmVarDecl 0x2a7b4a27708 <col:76, col:86> col:86 _Str 'wchar_t *'
| `-DeprecatedAttr 0x2a7b4a27888 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsrev. See online help for details." ""
|-FunctionDecl 0x2a7b4a27bb8 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:417:104> col:59 wcsset 'wchar_t *(wchar_t *, wchar_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, wchar_t)'
| |-ParmVarDecl 0x2a7b4a27a48 <col:76, col:86> col:86 _Str 'wchar_t *'
| |-ParmVarDecl 0x2a7b4a27ac0 <col:92, col:100> col:100 _Val 'wchar_t':'unsigned short'
| `-DeprecatedAttr 0x2a7b4a27c68 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsset. See online help for details." ""
|-FunctionDecl 0x2a7b4a27f00 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:418:90> col:59 wcslwr 'wchar_t *(wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *)'
| |-ParmVarDecl 0x2a7b4a27e28 <col:76, col:86> col:86 _Str 'wchar_t *'
| `-DeprecatedAttr 0x2a7b4a27fa8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcslwr. See online help for details." ""
|-FunctionDecl 0x2a7b4a282a8 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:419:90> col:59 wcsupr 'wchar_t *(wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *)'
| |-ParmVarDecl 0x2a7b4a281d0 <col:76, col:86> col:86 _Str 'wchar_t *'
| `-DeprecatedAttr 0x2a7b4a28350 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsupr. See online help for details." ""
|-FunctionDecl 0x2a7b4a28688 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:420:137> col:70 wcsicoll 'int (const wchar_t *, const wchar_t *) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x2a7b4a28510 <col:86, col:102> col:102 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x2a7b4a28588 <col:116, col:132> col:132 _Str2 'const wchar_t *'
| `-DeprecatedAttr 0x2a7b4a28738 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsicoll. See online help for details." ""
|-TypedefDecl 0x2a7b4a28a38 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:52:1, col:24> col:24 referenced _onexit_t 'int (*)(void) __attribute__((cdecl))'
| `-PointerType 0x2a7b4a289d0 'int (*)(void) __attribute__((cdecl))'
|   `-AttributedType 0x2a7b4a28970 'int (void) __attribute__((cdecl))' sugar
|     |-ParenType 0x2a7b4a28920 'int (void)' sugar
|     | `-FunctionProtoType 0x2a7b4a288f0 'int (void)' cdecl
|     |   `-BuiltinType 0x2a7b2e41cd0 'int'
|     `-ParenType 0x2a7b4a28920 'int (void)' sugar
|       `-FunctionProtoType 0x2a7b4a288f0 'int (void)' cdecl
|         `-BuiltinType 0x2a7b2e41cd0 'int'
|-RecordDecl 0x2a7b4a28a90 <line:75:9, line:78:1> line:75:16 struct _div_t definition
| |-MaxFieldAlignmentAttr 0x2a7b4a28b50 <<invalid sloc>> Implicit 64
| |-FieldDecl 0x2a7b4a28bc8 <line:76:9, col:13> col:13 quot 'int'
| `-FieldDecl 0x2a7b4a28c38 <line:77:9, col:13> col:13 rem 'int'
|-TypedefDecl 0x2a7b4a28ce8 <line:75:1, line:78:3> col:3 referenced div_t 'struct _div_t':'struct _div_t'
| `-ElaboratedType 0x2a7b4a28c90 'struct _div_t' sugar
|   `-RecordType 0x2a7b4a28b30 'struct _div_t'
|     `-Record 0x2a7b4a28a90 '_div_t'
|-RecordDecl 0x2a7b4a28d58 <line:80:9, line:83:1> line:80:16 struct _ldiv_t definition
| |-MaxFieldAlignmentAttr 0x2a7b4a28e10 <<invalid sloc>> Implicit 64
| |-FieldDecl 0x2a7b4a28e88 <line:81:9, col:14> col:14 quot 'long'
| `-FieldDecl 0x2a7b4a28ef8 <line:82:9, col:14> col:14 rem 'long'
|-TypedefDecl 0x2a7b4a28fa8 <line:80:1, line:83:3> col:3 referenced ldiv_t 'struct _ldiv_t':'struct _ldiv_t'
| `-ElaboratedType 0x2a7b4a28f50 'struct _ldiv_t' sugar
|   `-RecordType 0x2a7b4a28df0 'struct _ldiv_t'
|     `-Record 0x2a7b4a28d58 '_ldiv_t'
|-RecordDecl 0x2a7b4a29018 <line:85:9, line:88:1> line:85:16 struct _lldiv_t definition
| |-MaxFieldAlignmentAttr 0x2a7b4a290d0 <<invalid sloc>> Implicit 64
| |-FieldDecl 0x2a7b4a35058 <line:86:9, col:19> col:19 quot 'long long'
| `-FieldDecl 0x2a7b4a350c8 <line:87:9, col:19> col:19 rem 'long long'
|-TypedefDecl 0x2a7b4a35178 <line:85:1, line:88:3> col:3 referenced lldiv_t 'struct _lldiv_t':'struct _lldiv_t'
| `-ElaboratedType 0x2a7b4a35120 'struct _lldiv_t' sugar
|   `-RecordType 0x2a7b4a290b0 'struct _lldiv_t'
|     `-Record 0x2a7b4a29018 '_lldiv_t'
|-RecordDecl 0x2a7b4a35210 <line:103:9, line:105:1> line:103:9 struct definition
| |-MaxFieldAlignmentAttr 0x2a7b4a352d0 <<invalid sloc>> Implicit 32
| `-FieldDecl 0x2a7b4a353d0 <line:104:5, col:24> col:19 ld 'unsigned char [10]'
|-TypedefDecl 0x2a7b4a35488 <line:103:1, line:105:3> col:3 referenced _LDOUBLE 'struct _LDOUBLE':'_LDOUBLE'
| `-ElaboratedType 0x2a7b4a35430 'struct _LDOUBLE' sugar
|   `-RecordType 0x2a7b4a352b0 '_LDOUBLE'
|     `-Record 0x2a7b4a35210 ''
|-RecordDecl 0x2a7b4a354f8 <line:122:9, line:124:1> line:122:9 struct definition
| `-FieldDecl 0x2a7b4a355c8 <line:123:9, col:16> col:16 x 'double'
|-TypedefDecl 0x2a7b4a35678 <line:122:1, line:124:3> col:3 referenced _CRT_DOUBLE 'struct _CRT_DOUBLE':'_CRT_DOUBLE'
| `-ElaboratedType 0x2a7b4a35620 'struct _CRT_DOUBLE' sugar
|   `-RecordType 0x2a7b4a35590 '_CRT_DOUBLE'
|     `-Record 0x2a7b4a354f8 ''
|-RecordDecl 0x2a7b4a356e8 <line:126:9, line:128:1> line:126:9 struct definition
| `-FieldDecl 0x2a7b4a357b8 <line:127:5, col:11> col:11 f 'float'
|-TypedefDecl 0x2a7b4a35868 <line:126:1, line:128:3> col:3 referenced _CRT_FLOAT 'struct _CRT_FLOAT':'_CRT_FLOAT'
| `-ElaboratedType 0x2a7b4a35810 'struct _CRT_FLOAT' sugar
|   `-RecordType 0x2a7b4a35780 '_CRT_FLOAT'
|     `-Record 0x2a7b4a356e8 ''
|-RecordDecl 0x2a7b4a358d8 <line:134:9, line:139:1> line:134:9 struct definition
| `-FieldDecl 0x2a7b4a359a8 <line:138:9, col:21> col:21 x 'long double'
|-TypedefDecl 0x2a7b4a35a58 <line:134:1, line:139:3> col:3 _LONGDOUBLE 'struct _LONGDOUBLE':'_LONGDOUBLE'
| `-ElaboratedType 0x2a7b4a35a00 'struct _LONGDOUBLE' sugar
|   `-RecordType 0x2a7b4a35970 '_LONGDOUBLE'
|     `-Record 0x2a7b4a358d8 ''
|-RecordDecl 0x2a7b4a35af0 <line:144:9, line:146:1> line:144:9 struct definition
| |-MaxFieldAlignmentAttr 0x2a7b4a35bb0 <<invalid sloc>> Implicit 32
| `-FieldDecl 0x2a7b4a35cb0 <line:145:5, col:26> col:19 ld12 'unsigned char [12]'
|-TypedefDecl 0x2a7b4a35d68 <line:144:1, line:146:3> col:3 _LDBL12 'struct _LDBL12':'_LDBL12'
| `-ElaboratedType 0x2a7b4a35d10 'struct _LDBL12' sugar
|   `-RecordType 0x2a7b4a35b90 '_LDBL12'
|     `-Record 0x2a7b4a35af0 ''
|-VarDecl 0x2a7b4a35df0 <line:170:9, col:20> col:20 __mb_cur_max 'int' extern
|-FunctionDecl 0x2a7b4a35f70 <line:175:9, col:44> col:21 ___mb_cur_max_func 'int (void) __attribute__((cdecl))':'int (void)'
|-FunctionDecl 0x2a7b4a361a8 <line:176:9, col:51> col:21 ___mb_cur_max_l_func 'int (_locale_t) __attribute__((cdecl))':'int (_locale_t)'
| `-ParmVarDecl 0x2a7b4a36048 <col:42> col:51 '_locale_t':'struct localeinfo_struct *'
|-TypedefDecl 0x2a7b4a363f0 <line:215:1, col:24> col:24 referenced _purecall_handler 'void (*)(void) __attribute__((cdecl))'
| `-PointerType 0x2a7b4a36390 'void (*)(void) __attribute__((cdecl))'
|   `-AttributedType 0x2a7b4a36330 'void (void) __attribute__((cdecl))' sugar
|     |-ParenType 0x2a7b4a362e0 'void (void)' sugar
|     | `-FunctionProtoType 0x2a7b497fc30 'void (void)' cdecl
|     |   `-BuiltinType 0x2a7b2e41c30 'void'
|     `-ParenType 0x2a7b4a362e0 'void (void)' sugar
|       `-FunctionProtoType 0x2a7b497fc30 'void (void)' cdecl
|         `-BuiltinType 0x2a7b2e41c30 'void'
|-FunctionDecl 0x2a7b4a365f0 <line:218:9, col:92> col:35 _set_purecall_handler '_purecall_handler (_purecall_handler) __attribute__((cdecl))':'_purecall_handler (_purecall_handler)'
| `-ParmVarDecl 0x2a7b4a36480 <col:66, col:84> col:84 _Handler '_purecall_handler':'void (*)(void) __attribute__((cdecl))'
|-FunctionDecl 0x2a7b4a36808 <line:219:9, col:61> col:35 _get_purecall_handler '_purecall_handler (void) __attribute__((cdecl))':'_purecall_handler (void)'
|-TypedefDecl 0x2a7b4a36c58 <line:235:1, col:24> col:24 referenced _invalid_parameter_handler 'void (*)(const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t) __attribute__((cdecl))'
| `-PointerType 0x2a7b4a36bd0 'void (*)(const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t) __attribute__((cdecl))'
|   `-AttributedType 0x2a7b4a36b70 'void (const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t) __attribute__((cdecl))' sugar
|     |-ParenType 0x2a7b4a36b20 'void (const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t)' sugar
|     | `-FunctionProtoType 0x2a7b49aa030 'void (const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t)' cdecl
|     |   |-BuiltinType 0x2a7b2e41c30 'void'
|     |   |-PointerType 0x2a7b4980000 'const wchar_t *'
|     |   | `-QualType 0x2a7b497ffb1 'const wchar_t' const
|     |   |   `-TypedefType 0x2a7b497ffb0 'wchar_t' sugar
|     |   |     |-Typedef 0x2a7b497f8a0 'wchar_t'
|     |   |     `-BuiltinType 0x2a7b2e41d50 'unsigned short'
|     |   |-PointerType 0x2a7b4980000 'const wchar_t *'
|     |   | `-QualType 0x2a7b497ffb1 'const wchar_t' const
|     |   |   `-TypedefType 0x2a7b497ffb0 'wchar_t' sugar
|     |   |     |-Typedef 0x2a7b497f8a0 'wchar_t'
|     |   |     `-BuiltinType 0x2a7b2e41d50 'unsigned short'
|     |   |-PointerType 0x2a7b4980000 'const wchar_t *'
|     |   | `-QualType 0x2a7b497ffb1 'const wchar_t' const
|     |   |   `-TypedefType 0x2a7b497ffb0 'wchar_t' sugar
|     |   |     |-Typedef 0x2a7b497f8a0 'wchar_t'
|     |   |     `-BuiltinType 0x2a7b2e41d50 'unsigned short'
|     |   |-BuiltinType 0x2a7b2e41d70 'unsigned int'
|     |   `-TypedefType 0x2a7b4980210 'uintptr_t' sugar
|     |     |-Typedef 0x2a7b2e42a50 'uintptr_t'
|     |     `-BuiltinType 0x2a7b2e41db0 'unsigned long long'
|     `-ParenType 0x2a7b4a36b20 'void (const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t)' sugar
|       `-FunctionProtoType 0x2a7b49aa030 'void (const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t)' cdecl
|         |-BuiltinType 0x2a7b2e41c30 'void'
|         |-PointerType 0x2a7b4980000 'const wchar_t *'
|         | `-QualType 0x2a7b497ffb1 'const wchar_t' const
|         |   `-TypedefType 0x2a7b497ffb0 'wchar_t' sugar
|         |     |-Typedef 0x2a7b497f8a0 'wchar_t'
|         |     `-BuiltinType 0x2a7b2e41d50 'unsigned short'
|         |-PointerType 0x2a7b4980000 'const wchar_t *'
|         | `-QualType 0x2a7b497ffb1 'const wchar_t' const
|         |   `-TypedefType 0x2a7b497ffb0 'wchar_t' sugar
|         |     |-Typedef 0x2a7b497f8a0 'wchar_t'
|         |     `-BuiltinType 0x2a7b2e41d50 'unsigned short'
|         |-PointerType 0x2a7b4980000 'const wchar_t *'
|         | `-QualType 0x2a7b497ffb1 'const wchar_t' const
|         |   `-TypedefType 0x2a7b497ffb0 'wchar_t' sugar
|         |     |-Typedef 0x2a7b497f8a0 'wchar_t'
|         |     `-BuiltinType 0x2a7b2e41d50 'unsigned short'
|         |-BuiltinType 0x2a7b2e41d70 'unsigned int'
|         `-TypedefType 0x2a7b4980210 'uintptr_t' sugar
|           |-Typedef 0x2a7b2e42a50 'uintptr_t'
|           `-BuiltinType 0x2a7b2e41db0 'unsigned long long'
|-FunctionDecl 0x2a7b4a36e50 <line:238:9, col:119> col:44 _set_invalid_parameter_handler '_invalid_parameter_handler (_invalid_parameter_handler) __attribute__((cdecl))':'_invalid_parameter_handler (_invalid_parameter_handler)'
| `-ParmVarDecl 0x2a7b4a36ce0 <col:84, col:111> col:111 _Handler '_invalid_parameter_handler':'void (*)(const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t) __attribute__((cdecl))'
|-FunctionDecl 0x2a7b4a38098 <line:239:9, col:79> col:44 _get_invalid_parameter_handler '_invalid_parameter_handler (void) __attribute__((cdecl))':'_invalid_parameter_handler (void)'
|-FunctionDecl 0x2a7b4a38280 <line:245:9, col:41> col:30 _errno 'int *(void) __attribute__((cdecl))':'int *(void)' extern
|-FunctionDecl 0x2a7b4a384c0 <line:248:1, col:43> col:17 _set_errno 'errno_t (int) __attribute__((cdecl))':'errno_t (int)'
| `-ParmVarDecl 0x2a7b4a38350 <col:33, col:37> col:37 _Value 'int'
|-FunctionDecl 0x2a7b4a38710 <line:249:1, col:46> col:17 _get_errno 'errno_t (int *) __attribute__((cdecl))':'errno_t (int *)'
| `-ParmVarDecl 0x2a7b4a38598 <col:34, col:40> col:40 _Value 'int *'
|-FunctionDecl 0x2a7b4a38930 <line:252:9, col:48> col:33 __doserrno 'unsigned long *(void) __attribute__((cdecl))':'unsigned long *(void)'
|-FunctionDecl 0x2a7b4a38b70 <line:255:1, col:56> col:17 _set_doserrno 'errno_t (unsigned long) __attribute__((cdecl))':'errno_t (unsigned long)'
| `-ParmVarDecl 0x2a7b4a38a00 <col:36, col:50> col:50 _Value 'unsigned long'
|-FunctionDecl 0x2a7b4a38dc0 <line:256:1, col:59> col:17 _get_doserrno 'errno_t (unsigned long *) __attribute__((cdecl))':'errno_t (unsigned long *)'
| `-ParmVarDecl 0x2a7b4a38c48 <col:37, col:53> col:53 _Value 'unsigned long *'
|-FunctionDecl 0x2a7b4a3f0e0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:259:77> col:59 __sys_errlist 'char **(void) __attribute__((cdecl))':'char **(void)'
| `-DeprecatedAttr 0x2a7b4a3f180 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using strerror instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2a7b4a3f440 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:262:72> col:57 __sys_nerr 'int *(void) __attribute__((cdecl))':'int *(void)'
| `-DeprecatedAttr 0x2a7b4a3f4e0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using strerror instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-VarDecl 0x2a7b4a3f628 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:288:9, col:20> col:20 __argc 'int' extern
|-VarDecl 0x2a7b4a3f6c0 <line:289:9, col:24> col:24 __argv 'char **' extern
|-VarDecl 0x2a7b4a3f758 <line:290:9, col:27> col:27 __wargv 'wchar_t **' extern
|-VarDecl 0x2a7b4a3f7f0 <line:306:9, col:24> col:24 _environ 'char **' extern
|-VarDecl 0x2a7b4a3f888 <line:307:9, col:27> col:27 _wenviron 'wchar_t **' extern
|-VarDecl 0x2a7b4a3f9e0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:311:68> col:68 _pgmptr 'char *' extern
| `-DeprecatedAttr 0x2a7b4a3fa48 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _get_pgmptr instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-VarDecl 0x2a7b4a3fc48 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:312:72> col:72 _wpgmptr 'wchar_t *' extern
| `-DeprecatedAttr 0x2a7b4a3fcb0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _get_wpgmptr instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2a7b4a3ff70 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:339:1, col:61> col:17 _get_pgmptr 'errno_t (char **) __attribute__((cdecl))':'errno_t (char **)'
| `-ParmVarDecl 0x2a7b4a3fdf8 <col:47, col:55> col:55 _Value 'char **'
|-FunctionDecl 0x2a7b4a3d1a0 <line:340:1, col:65> col:17 _get_wpgmptr 'errno_t (wchar_t **) __attribute__((cdecl))':'errno_t (wchar_t **)'
| `-ParmVarDecl 0x2a7b4a40048 <col:48, col:59> col:59 _Value 'wchar_t **'
|-VarDecl 0x2a7b4a3d338 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:346:64> col:64 _fmode 'int' extern
| `-DeprecatedAttr 0x2a7b4a3d3a0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _get_fmode instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2a7b4a3d5c0 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:353:9, col:50> col:25 _set_fmode 'errno_t (int) __attribute__((cdecl))':'errno_t (int)'
| `-ParmVarDecl 0x2a7b4a3d4e8 <col:41, col:45> col:45 _Mode 'int'
|-FunctionDecl 0x2a7b4a3d770 <line:354:9, col:54> col:25 _get_fmode 'errno_t (int *) __attribute__((cdecl))':'errno_t (int *)'
| `-ParmVarDecl 0x2a7b4a3d698 <col:42, col:48> col:48 _PMode 'int *'
|-FunctionDecl 0x2a7b4a3d9c0 <line:376:43> col:43 implicit exit 'void (int) __attribute__((noreturn))' extern
| `-ParmVarDecl 0x2a7b4a3da60 <<invalid sloc>> <invalid sloc> 'int'
|-FunctionDecl 0x2a7b4a3dad0 prev 0x2a7b4a3d9c0 <col:9, col:62> col:43 exit 'void (int) __attribute__((noreturn))'
| `-ParmVarDecl 0x2a7b4a3d848 <col:53, col:57> col:57 _Code 'int'
|-FunctionDecl 0x2a7b4a3dc80 <line:378:43> col:43 implicit _exit 'void (int) __attribute__((noreturn))' extern
| `-ParmVarDecl 0x2a7b4a3dd20 <<invalid sloc>> <invalid sloc> 'int'
|-FunctionDecl 0x2a7b4a3dd90 prev 0x2a7b4a3dc80 <col:9, col:63> col:43 _exit 'void (int) __attribute__((noreturn))'
| `-ParmVarDecl 0x2a7b4a3dba8 <col:54, col:58> col:58 _Code 'int'
|-FunctionDecl 0x2a7b4a3df18 <line:379:43> col:43 implicit abort 'void (void) __attribute__((noreturn))' extern
|-FunctionDecl 0x2a7b4a3dfb8 prev 0x2a7b4a3df18 <col:9, col:53> col:43 abort 'void (void) __attribute__((noreturn))'
|-FunctionDecl 0x2a7b4a3c270 <line:382:9, col:99> col:30 _set_abort_behavior 'unsigned int (unsigned int, unsigned int) __attribute__((cdecl))':'unsigned int (unsigned int, unsigned int)'
| |-ParmVarDecl 0x2a7b4a3c080 <col:55, col:68> col:68 _Flags 'unsigned int'
| `-ParmVarDecl 0x2a7b4a3c100 <col:81, col:94> col:94 _Mask 'unsigned int'
|-FunctionDecl 0x2a7b4a3c468 <line:384:19> col:19 implicit abs 'int (int)' extern
| |-ParmVarDecl 0x2a7b4a3c508 <<invalid sloc>> <invalid sloc> 'int'
| |-NoThrowAttr 0x2a7b4a3c578 <col:19> Implicit
| `-ConstAttr 0x2a7b4a3c5d0 <col:19> Implicit
|-FunctionDecl 0x2a7b4a3c5f8 prev 0x2a7b4a3c468 <col:1, col:34> col:19 abs 'int (int)'
| |-ParmVarDecl 0x2a7b4a3c350 <col:28, col:32> col:32 _X 'int'
| |-NoThrowAttr 0x2a7b4a3c6e8 <col:19> Inherited Implicit
| `-ConstAttr 0x2a7b4a3c710 <col:19> Inherited Implicit
|-FunctionDecl 0x2a7b4a3c898 <line:385:19> col:19 implicit labs 'long (long)' extern
| |-ParmVarDecl 0x2a7b4a3c938 <<invalid sloc>> <invalid sloc> 'long'
| |-NoThrowAttr 0x2a7b4a3c9a8 <col:19> Implicit
| `-ConstAttr 0x2a7b4a3ca00 <col:19> Implicit
|-FunctionDecl 0x2a7b4a3ca28 prev 0x2a7b4a3c898 <col:1, col:36> col:19 labs 'long (long)'
| |-ParmVarDecl 0x2a7b4a3c750 <col:29, col:34> col:34 _X 'long'
| |-NoThrowAttr 0x2a7b4a3cb18 <col:19> Inherited Implicit
| `-ConstAttr 0x2a7b4a3cb40 <col:19> Inherited Implicit
|-FunctionDecl 0x2a7b4a3ccc8 <line:386:19> col:19 implicit llabs 'long long (long long)' extern
| |-ParmVarDecl 0x2a7b4a3cd68 <<invalid sloc>> <invalid sloc> 'long long'
| |-NoThrowAttr 0x2a7b4a3cdd8 <col:19> Implicit
| `-ConstAttr 0x2a7b4a3ce30 <col:19> Implicit
|-FunctionDecl 0x2a7b4a3ce58 prev 0x2a7b4a3ccc8 <col:1, col:42> col:19 llabs 'long long (long long)'
| |-ParmVarDecl 0x2a7b4a3cb80 <col:30, col:40> col:40 _X 'long long'
| |-NoThrowAttr 0x2a7b4a3cf48 <col:19> Inherited Implicit
| `-ConstAttr 0x2a7b4a3cf70 <col:19> Inherited Implicit
|-FunctionDecl 0x2a7b4a3b070 <line:388:9, col:42> col:28 _abs64 'long long (long long) __attribute__((cdecl))':'long long (long long)'
| `-ParmVarDecl 0x2a7b4a3cfb0 <col:35> col:42 'long long'
|-FunctionDecl 0x2a7b4a3b368 <line:426:9, col:53> col:24 atexit 'int (void (*)(void) __attribute__((cdecl))) __attribute__((cdecl))':'int (void (*)(void) __attribute__((cdecl)))'
| `-ParmVarDecl 0x2a7b4a3b208 <col:31, col:45> col:46 'void (*)(void) __attribute__((cdecl))'
|-FunctionDecl 0x2a7b4a3b588 <line:428:24, col:71> col:40 atof 'double (const char *) __attribute__((cdecl))':'double (const char *)'
| `-ParmVarDecl 0x2a7b4a3b440 <col:52, col:64> col:64 _String 'const char *'
|-FunctionDecl 0x2a7b4a3b880 <line:429:24, col:102> col:40 _atof_l 'double (const char *, _locale_t) __attribute__((cdecl))':'double (const char *, _locale_t)'
| |-ParmVarDecl 0x2a7b4a3b660 <col:55, col:67> col:67 _String 'const char *'
| `-ParmVarDecl 0x2a7b4a3b6d8 <col:85, col:95> col:95 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2a7b4a3baa8 <line:430:43, col:86> col:58 atoi 'int (const char *) __attribute__((cdecl))':'int (const char *)'
| `-ParmVarDecl 0x2a7b4a3b960 <col:70, col:82> col:82 _Str 'const char *'
|-FunctionDecl 0x2a7b4a3bda0 <line:431:24, col:98> col:39 _atoi_l 'int (const char *, _locale_t) __attribute__((cdecl))':'int (const char *, _locale_t)'
| |-ParmVarDecl 0x2a7b4a3bb80 <col:54, col:66> col:66 _Str 'const char *'
| `-ParmVarDecl 0x2a7b4a3bbf8 <col:81, col:91> col:91 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2a7b4a3bfc8 <line:432:24, col:67> col:39 atol 'long (const char *) __attribute__((cdecl))':'long (const char *)'
| `-ParmVarDecl 0x2a7b4a3be80 <col:51, col:63> col:63 _Str 'const char *'
|-FunctionDecl 0x2a7b4a3e2f0 <line:433:24, col:98> col:39 _atol_l 'long (const char *, _locale_t) __attribute__((cdecl))':'long (const char *, _locale_t)'
| |-ParmVarDecl 0x2a7b4a3e0d0 <col:54, col:66> col:66 _Str 'const char *'
| `-ParmVarDecl 0x2a7b4a3e148 <col:81, col:91> col:91 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2a7b4a3e518 <line:434:24, col:71> col:42 atoll 'long long (const char *) __attribute__((cdecl))':'long long (const char *)'
| `-ParmVarDecl 0x2a7b4a3e3d0 <col:55, col:67> col:67 _Str 'const char *'
|-FunctionDecl 0x2a7b4a3e810 <line:435:24, col:102> col:42 _atoll_l 'long long (const char *, _locale_t) __attribute__((cdecl))':'long long (const char *, _locale_t)'
| |-ParmVarDecl 0x2a7b4a3e5f0 <col:58, col:70> col:70 _Str 'const char *'
| `-ParmVarDecl 0x2a7b4a3e668 <col:85, col:95> col:95 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2a7b4a40120 <line:439:24, line:441:97> line:439:39 bsearch_s 'void *(const void *, const void *, rsize_t, rsize_t, int (*)(void *, const void *, const void *) __attribute__((cdecl)), void *) __attribute__((cdecl))':'void *(const void *, const void *, rsize_t, rsize_t, int (*)(void *, const void *, const void *) __attribute__((cdecl)), void *)'
| |-ParmVarDecl 0x2a7b4a3e8f0 <col:54, col:67> col:67 _Key 'const void *'
| |-ParmVarDecl 0x2a7b4a3e970 <col:124, col:137> col:137 _Base 'const void *'
| |-ParmVarDecl 0x2a7b4a3e9e8 <line:440:14, col:22> col:22 _NumOfElements 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x2a7b4a3ea60 <col:43, col:51> col:51 _SizeOfElements 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x2a7b4a3edc0 <line:441:14, col:29> col:29 _PtFuncCompare 'int (*)(void *, const void *, const void *) __attribute__((cdecl))'
| `-ParmVarDecl 0x2a7b4a3ee40 <col:82, col:89> col:89 _Context 'void *'
|-FunctionDecl 0x2a7b4a408a8 <line:443:24, line:445:72> line:443:39 bsearch 'void *(const void *, const void *, size_t, size_t, int (*)(const void *, const void *) __attribute__((cdecl))) __attribute__((cdecl))':'void *(const void *, const void *, size_t, size_t, int (*)(const void *, const void *) __attribute__((cdecl)))'
| |-ParmVarDecl 0x2a7b4a40220 <col:52, col:65> col:65 _Key 'const void *'
| |-ParmVarDecl 0x2a7b4a402a0 <col:122, col:135> col:135 _Base 'const void *'
| |-ParmVarDecl 0x2a7b4a40318 <line:444:14, col:21> col:21 _NumOfElements 'size_t':'unsigned long long'
| |-ParmVarDecl 0x2a7b4a40390 <col:42, col:49> col:49 _SizeOfElements 'size_t':'unsigned long long'
| `-ParmVarDecl 0x2a7b4a40668 <line:445:14, col:29> col:29 _PtFuncCompare 'int (*)(const void *, const void *) __attribute__((cdecl))'
|-FunctionDecl 0x2a7b4a40fb0 <line:448:9, line:450:96> line:448:22 qsort_s 'void (void *, rsize_t, rsize_t, int (*)(void *, const void *, const void *) __attribute__((cdecl)), void *) __attribute__((cdecl))':'void (void *, rsize_t, rsize_t, int (*)(void *, const void *, const void *) __attribute__((cdecl)), void *)'
| |-ParmVarDecl 0x2a7b4a409a0 <col:85, col:92> col:92 _Base 'void *'
| |-ParmVarDecl 0x2a7b4a40a18 <line:449:14, col:22> col:22 _NumOfElements 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x2a7b4a40a90 <col:43, col:51> col:51 _SizeOfElements 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x2a7b4a40cf8 <line:450:14, col:29> col:29 _PtFuncCompare 'int (*)(void *, const void *, const void *) __attribute__((cdecl))'
| `-ParmVarDecl 0x2a7b4a40d78 <col:82, col:88> col:88 _Context 'void *'
|-FunctionDecl 0x2a7b4a39528 <line:452:9, line:454:72> line:452:22 qsort 'void (void *, size_t, size_t, int (*)(const void *, const void *) __attribute__((cdecl))) __attribute__((cdecl))':'void (void *, size_t, size_t, int (*)(const void *, const void *) __attribute__((cdecl)))'
| |-ParmVarDecl 0x2a7b4a39050 <col:84, col:91> col:91 _Base 'void *'
| |-ParmVarDecl 0x2a7b4a390c8 <line:453:14, col:21> col:21 _NumOfElements 'size_t':'unsigned long long'
| |-ParmVarDecl 0x2a7b4a39140 <col:42, col:49> col:49 _SizeOfElements 'size_t':'unsigned long long'
| `-ParmVarDecl 0x2a7b4a39320 <line:454:14, col:29> col:29 _PtFuncCompare 'int (*)(const void *, const void *) __attribute__((cdecl))'
|-FunctionDecl 0x2a7b4a39768 <line:456:47> col:47 implicit _byteswap_ushort 'unsigned short (unsigned short)' extern
| |-ParmVarDecl 0x2a7b4a39808 <<invalid sloc>> <invalid sloc> 'unsigned short'
| |-NoThrowAttr 0x2a7b4a39878 <col:47> Implicit
| `-ConstAttr 0x2a7b4a398d0 <col:47> Implicit
|-FunctionDecl 0x2a7b4a398f8 prev 0x2a7b4a39768 <col:24, col:90> col:47 _byteswap_ushort 'unsigned short (unsigned short)'
| |-ParmVarDecl 0x2a7b4a39618 <col:69, col:84> col:84 _Short 'unsigned short'
| |-NoThrowAttr 0x2a7b4a399e8 <col:47> Inherited Implicit
| `-ConstAttr 0x2a7b4a39a10 <col:47> Inherited Implicit
|-FunctionDecl 0x2a7b4a39b98 <line:457:47> col:47 implicit _byteswap_ulong 'unsigned long (unsigned long)' extern
| |-ParmVarDecl 0x2a7b4a39c38 <<invalid sloc>> <invalid sloc> 'unsigned long'
| |-NoThrowAttr 0x2a7b4a39ca8 <col:47> Implicit
| `-ConstAttr 0x2a7b4a39d00 <col:47> Implicit
|-FunctionDecl 0x2a7b4a39d28 prev 0x2a7b4a39b98 <col:24, col:88> col:47 _byteswap_ulong 'unsigned long (unsigned long)'
| |-ParmVarDecl 0x2a7b4a39a50 <col:69, col:83> col:83 _Long 'unsigned long'
| |-NoThrowAttr 0x2a7b4a39e18 <col:47> Inherited Implicit
| `-ConstAttr 0x2a7b4a39e40 <col:47> Inherited Implicit
|-FunctionDecl 0x2a7b4a410d0 <line:458:49> col:49 implicit _byteswap_uint64 'unsigned long long (unsigned long long)' extern
| |-ParmVarDecl 0x2a7b4a41170 <<invalid sloc>> <invalid sloc> 'unsigned long long'
| |-NoThrowAttr 0x2a7b4a411e0 <col:49> Implicit
| `-ConstAttr 0x2a7b4a41238 <col:49> Implicit
|-FunctionDecl 0x2a7b4a41260 prev 0x2a7b4a410d0 <col:24, col:94> col:49 _byteswap_uint64 'unsigned long long (unsigned long long)'
| |-ParmVarDecl 0x2a7b4a39e80 <col:71, col:88> col:88 _Int64 'unsigned long long'
| |-NoThrowAttr 0x2a7b4a41350 <col:49> Inherited Implicit
| `-ConstAttr 0x2a7b4a41378 <col:49> Inherited Implicit
|-FunctionDecl 0x2a7b4a415f8 <line:459:24, col:85> col:39 div 'div_t (int, int) __attribute__((cdecl))':'div_t (int, int)'
| |-ParmVarDecl 0x2a7b4a413d8 <col:48, col:52> col:52 _Numerator 'int'
| `-ParmVarDecl 0x2a7b4a41458 <col:69, col:73> col:73 _Denominator 'int'
|-FunctionDecl 0x2a7b4a41878 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:462:109> col:74 getenv 'char *(const char *) __attribute__((cdecl))':'char *(const char *)'
| |-ParmVarDecl 0x2a7b4a41798 <col:88, col:101> col:101 _VarName 'const char *'
| `-DeprecatedAttr 0x2a7b4a41920 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _dupenv_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2a7b4a41e38 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:464:28, col:177> col:44 getenv_s 'errno_t (size_t *, char *, rsize_t, const char *) __attribute__((cdecl))':'errno_t (size_t *, char *, rsize_t, const char *)'
| |-ParmVarDecl 0x2a7b4a41ab8 <col:59, col:68> col:68 _ReturnSize 'size_t *'
| |-ParmVarDecl 0x2a7b4a41b38 <col:110, col:117> col:117 _DstBuf 'char *'
| |-ParmVarDecl 0x2a7b4a41bb0 <col:131, col:139> col:139 _DstSize 'rsize_t':'unsigned long long'
| `-ParmVarDecl 0x2a7b4a41c30 <col:156, col:169> col:169 _VarName 'const char *'
|-FunctionDecl 0x2a7b4a42200 <line:472:28, col:212> col:44 _dupenv_s 'errno_t (char **, size_t *, const char *) __attribute__((cdecl))':'errno_t (char **, size_t *, const char *)'
| |-ParmVarDecl 0x2a7b4a41f28 <col:127, col:134> col:134 _PBuffer 'char **'
| |-ParmVarDecl 0x2a7b4a41fa0 <col:154, col:163> col:163 _PBufferSizeInBytes 'size_t *'
| `-ParmVarDecl 0x2a7b4a42020 <col:191, col:204> col:204 _VarName 'const char *'
|-FunctionDecl 0x2a7b4a42668 <line:479:28, col:141> col:44 _itoa_s 'errno_t (int, char *, size_t, int) __attribute__((cdecl))':'errno_t (int, char *, size_t, int)'
| |-ParmVarDecl 0x2a7b4a422e8 <col:57, col:61> col:61 _Value 'int'
| |-ParmVarDecl 0x2a7b4a42368 <col:91, col:98> col:98 _DstBuf 'char *'
| |-ParmVarDecl 0x2a7b4a423e0 <col:112, col:119> col:119 _Size 'size_t':'unsigned long long'
| `-ParmVarDecl 0x2a7b4a42460 <col:131, col:135> col:135 _Radix 'int'
|-FunctionDecl 0x2a7b4a42ae8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1951:149> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:481:79 _itoa 'char *(int, char *, int) __attribute__((cdecl))':'char *(int, char *, int)'
| |-ParmVarDecl 0x2a7b4a42850 <col:91, col:96> col:96 _Value 'int'
| |-ParmVarDecl 0x2a7b4a428d0 <col:128, col:134> col:134 _Dest 'char *'
| |-ParmVarDecl 0x2a7b4a42950 <col:146, col:151> col:151 _Radix 'int'
| `-DeprecatedAttr 0x2a7b4a42ba0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _itoa_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2a7b4a48140 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:482:28, col:145> col:44 _i64toa_s 'errno_t (long long, char *, size_t, int) __attribute__((cdecl))':'errno_t (long long, char *, size_t, int)'
| |-ParmVarDecl 0x2a7b4a42ce8 <col:59, col:67> col:67 _Val 'long long'
| |-ParmVarDecl 0x2a7b4a42d68 <col:95, col:102> col:102 _DstBuf 'char *'
| |-ParmVarDecl 0x2a7b4a42de0 <col:116, col:123> col:123 _Size 'size_t':'unsigned long long'
| `-ParmVarDecl 0x2a7b4a42e60 <col:135, col:139> col:139 _Radix 'int'
|-FunctionDecl 0x2a7b4a48588 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:483:140> col:59 _i64toa 'char *(long long, char *, int) __attribute__((cdecl))':'char *(long long, char *, int)'
| |-ParmVarDecl 0x2a7b4a482f0 <col:72, col:80> col:80 _Val 'long long'
| |-ParmVarDecl 0x2a7b4a48370 <col:109, col:116> col:116 _DstBuf 'char *'
| |-ParmVarDecl 0x2a7b4a483f0 <col:130, col:134> col:134 _Radix 'int'
| `-DeprecatedAttr 0x2a7b4a48640 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _i64toa_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2a7b4a48b08 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:484:28, col:155> col:44 _ui64toa_s 'errno_t (unsigned long long, char *, size_t, int) __attribute__((cdecl))':'errno_t (unsigned long long, char *, size_t, int)'
| |-ParmVarDecl 0x2a7b4a48788 <col:60, col:77> col:77 _Val 'unsigned long long'
| |-ParmVarDecl 0x2a7b4a48808 <col:105, col:112> col:112 _DstBuf 'char *'
| |-ParmVarDecl 0x2a7b4a48880 <col:126, col:133> col:133 _Size 'size_t':'unsigned long long'
| `-ParmVarDecl 0x2a7b4a48900 <col:145, col:149> col:149 _Radix 'int'
|-FunctionDecl 0x2a7b4a48f58 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:485:151> col:60 _ui64toa 'char *(unsigned long long, char *, int) __attribute__((cdecl))':'char *(unsigned long long, char *, int)'
| |-ParmVarDecl 0x2a7b4a48cb8 <col:74, col:91> col:91 _Val 'unsigned long long'
| |-ParmVarDecl 0x2a7b4a48d38 <col:120, col:127> col:127 _DstBuf 'char *'
| |-ParmVarDecl 0x2a7b4a48db8 <col:141, col:145> col:145 _Radix 'int'
| `-DeprecatedAttr 0x2a7b4a49010 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _ui64toa_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2a7b4a49248 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:486:24, col:75> col:40 _atoi64 'long long (const char *) __attribute__((cdecl))':'long long (const char *)'
| `-ParmVarDecl 0x2a7b4a49168 <col:55, col:68> col:68 _String 'const char *'
|-FunctionDecl 0x2a7b4a49498 <line:487:24, col:105> col:40 _atoi64_l 'long long (const char *, _locale_t) __attribute__((cdecl))':'long long (const char *, _locale_t)'
| |-ParmVarDecl 0x2a7b4a49320 <col:57, col:70> col:70 _String 'const char *'
| `-ParmVarDecl 0x2a7b4a49398 <col:88, col:98> col:98 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2a7b4a49818 <line:488:24, col:136> col:40 _strtoi64 'long long (const char *, char **, int) __attribute__((cdecl))':'long long (const char *, char **, int)'
| |-ParmVarDecl 0x2a7b4a49578 <col:57, col:70> col:70 _String 'const char *'
| |-ParmVarDecl 0x2a7b4a495f8 <col:104, col:112> col:112 _EndPtr 'char **'
| `-ParmVarDecl 0x2a7b4a49678 <col:126, col:130> col:130 _Radix 'int'
|-FunctionDecl 0x2a7b4a49c80 <line:489:24, col:166> col:40 _strtoi64_l 'long long (const char *, char **, int, _locale_t) __attribute__((cdecl))':'long long (const char *, char **, int, _locale_t)'
| |-ParmVarDecl 0x2a7b4a49900 <col:59, col:72> col:72 _String 'const char *'
| |-ParmVarDecl 0x2a7b4a49980 <col:106, col:114> col:114 _EndPtr 'char **'
| |-ParmVarDecl 0x2a7b4a49a00 <col:128, col:132> col:132 _Radix 'int'
| `-ParmVarDecl 0x2a7b4a49a78 <col:149, col:159> col:159 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2a7b4a4a008 <line:490:24, col:146> col:49 _strtoui64 'unsigned long long (const char *, char **, int) __attribute__((cdecl))':'unsigned long long (const char *, char **, int)'
| |-ParmVarDecl 0x2a7b4a49d70 <col:67, col:80> col:80 _String 'const char *'
| |-ParmVarDecl 0x2a7b4a49df0 <col:114, col:122> col:122 _EndPtr 'char **'
| `-ParmVarDecl 0x2a7b4a49e70 <col:136, col:140> col:140 _Radix 'int'
|-FunctionDecl 0x2a7b4a44480 <line:491:24, col:177> col:49 _strtoui64_l 'unsigned long long (const char *, char **, int, _locale_t) __attribute__((cdecl))':'unsigned long long (const char *, char **, int, _locale_t)'
| |-ParmVarDecl 0x2a7b4a44100 <col:69, col:82> col:82 _String 'const char *'
| |-ParmVarDecl 0x2a7b4a44180 <col:116, col:124> col:124 _EndPtr 'char **'
| |-ParmVarDecl 0x2a7b4a44200 <col:138, col:143> col:143 _Radix 'int'
| `-ParmVarDecl 0x2a7b4a44278 <col:160, col:170> col:170 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2a7b4a447b8 <line:492:24, col:88> col:39 ldiv 'ldiv_t (long, long) __attribute__((cdecl))':'ldiv_t (long, long)'
| |-ParmVarDecl 0x2a7b4a44598 <col:49, col:54> col:54 _Numerator 'long'
| `-ParmVarDecl 0x2a7b4a44618 <col:71, col:76> col:76 _Denominator 'long'
|-FunctionDecl 0x2a7b4a44ad8 <line:493:24, col:100> col:40 lldiv 'lldiv_t (long long, long long) __attribute__((cdecl))':'lldiv_t (long long, long long)'
| |-ParmVarDecl 0x2a7b4a448b8 <col:51, col:61> col:61 _Numerator 'long long'
| `-ParmVarDecl 0x2a7b4a44938 <col:78, col:88> col:88 _Denominator 'long long'
|-FunctionDecl 0x2a7b4a44f38 <line:515:28, col:140> col:44 _ltoa_s 'errno_t (long, char *, size_t, int) __attribute__((cdecl))':'errno_t (long, char *, size_t, int)'
| |-ParmVarDecl 0x2a7b4a44bb8 <col:57, col:62> col:62 _Val 'long'
| |-ParmVarDecl 0x2a7b4a44c38 <col:90, col:97> col:97 _DstBuf 'char *'
| |-ParmVarDecl 0x2a7b4a44cb0 <col:111, col:118> col:118 _Size 'size_t':'unsigned long long'
| `-ParmVarDecl 0x2a7b4a44d30 <col:130, col:134> col:134 _Radix 'int'
|-FunctionDecl 0x2a7b4a463b8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1951:149> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:517:79 _ltoa 'char *(long, char *, int) __attribute__((cdecl))':'char *(long, char *, int)'
| |-ParmVarDecl 0x2a7b4a46120 <col:91, col:97> col:97 _Value 'long'
| |-ParmVarDecl 0x2a7b4a461a0 <col:129, col:135> col:135 _Dest 'char *'
| |-ParmVarDecl 0x2a7b4a46220 <col:147, col:152> col:152 _Radix 'int'
| `-DeprecatedAttr 0x2a7b4a46470 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _ltoa_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2a7b4a467e0 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:518:24, col:128> col:39 mblen 'int (const char *, size_t) __attribute__((cdecl))':'int (const char *, size_t)'
| |-ParmVarDecl 0x2a7b4a465b8 <col:89, col:102> col:102 _Ch 'const char *'
| `-ParmVarDecl 0x2a7b4a46630 <col:112, col:119> col:119 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x2a7b4a46b88 <line:519:24, col:159> col:39 _mblen_l 'int (const char *, size_t, _locale_t) __attribute__((cdecl))':'int (const char *, size_t, _locale_t)'
| |-ParmVarDecl 0x2a7b4a468c0 <col:92, col:105> col:105 _Ch 'const char *'
| |-ParmVarDecl 0x2a7b4a46938 <col:115, col:122> col:122 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x2a7b4a469b0 <col:142, col:152> col:152 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2a7b4a46d48 <line:520:24, col:73> col:39 _mbstrlen 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)'
| `-ParmVarDecl 0x2a7b4a46c70 <col:56, col:69> col:69 _Str 'const char *'
|-FunctionDecl 0x2a7b4a47038 <line:521:24, col:102> col:39 _mbstrlen_l 'size_t (const char *, _locale_t) __attribute__((cdecl))':'size_t (const char *, _locale_t)'
| |-ParmVarDecl 0x2a7b4a46e20 <col:58, col:70> col:70 _Str 'const char *'
| `-ParmVarDecl 0x2a7b4a46e98 <col:85, col:95> col:95 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2a7b4a4a2d0 <line:522:24, col:96> col:39 _mbstrnlen 'size_t (const char *, size_t) __attribute__((cdecl))':'size_t (const char *, size_t)'
| |-ParmVarDecl 0x2a7b4a4a160 <col:57, col:69> col:69 _Str 'const char *'
| `-ParmVarDecl 0x2a7b4a4a1d8 <col:80, col:87> col:87 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x2a7b4a4a670 <line:523:24, col:126> col:39 _mbstrnlen_l 'size_t (const char *, size_t, _locale_t) __attribute__((cdecl))':'size_t (const char *, size_t, _locale_t)'
| |-ParmVarDecl 0x2a7b4a4a3b0 <col:59, col:71> col:71 _Str 'const char *'
| |-ParmVarDecl 0x2a7b4a4a428 <col:82, col:89> col:89 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x2a7b4a4a4a0 <col:109, col:119> col:119 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2a7b4a4aa28 <line:524:9, col:170> col:24 mbtowc 'int (wchar_t *, const char *, size_t) __attribute__((cdecl))':'int (wchar_t *, const char *, size_t)'
| |-ParmVarDecl 0x2a7b4a4a750 <col:54, col:64> col:64 _DstCh 'wchar_t *'
| |-ParmVarDecl 0x2a7b4a4a7d0 <col:122, col:135> col:135 _SrcCh 'const char *'
| `-ParmVarDecl 0x2a7b4a4a848 <col:148, col:155> col:155 _SrcSizeInBytes 'size_t':'unsigned long long'
|-FunctionDecl 0x2a7b4a4ae80 <line:525:9, col:201> col:24 _mbtowc_l 'int (wchar_t *, const char *, size_t, _locale_t) __attribute__((cdecl))':'int (wchar_t *, const char *, size_t, _locale_t)'
| |-ParmVarDecl 0x2a7b4a4ab08 <col:57, col:67> col:67 _DstCh 'wchar_t *'
| |-ParmVarDecl 0x2a7b4a4ab88 <col:125, col:138> col:138 _SrcCh 'const char *'
| |-ParmVarDecl 0x2a7b4a4ac00 <col:151, col:158> col:158 _SrcSizeInBytes 'size_t':'unsigned long long'
| `-ParmVarDecl 0x2a7b4a4ac78 <col:184, col:194> col:194 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2a7b4a43320 <line:526:28, col:271> col:44 mbstowcs_s 'errno_t (size_t *, wchar_t *, size_t, const char *, size_t) __attribute__((cdecl))':'errno_t (size_t *, wchar_t *, size_t, const char *, size_t)'
| |-ParmVarDecl 0x2a7b4a4af68 <col:65, col:74> col:74 _PtNumOfCharConverted 'size_t *'
| |-ParmVarDecl 0x2a7b4a4afe0 <col:155, col:165> col:165 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x2a7b4a4b058 <col:179, col:186> col:186 _SizeInWords 'size_t':'unsigned long long'
| |-ParmVarDecl 0x2a7b4a4b0d8 <col:227, col:240> col:240 _SrcBuf 'const char *'
| `-ParmVarDecl 0x2a7b4a430f0 <col:254, col:261> col:261 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x2a7b4a437a0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:2007:144> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:528:56 mbstowcs 'size_t (wchar_t *, const char *, size_t) __attribute__((cdecl))':'size_t (wchar_t *, const char *, size_t)'
| |-ParmVarDecl 0x2a7b4a434d0 <col:97, col:106> col:106 _Dest 'wchar_t *'
| |-ParmVarDecl 0x2a7b4a43550 <col:120, col:134> col:134 _Source 'const char *'
| |-ParmVarDecl 0x2a7b4a435c8 <col:148, col:156> col:156 _MaxCount 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x2a7b4a43858 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using mbstowcs_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2a7b4a43e58 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:530:28, col:301> col:44 _mbstowcs_s_l 'errno_t (size_t *, wchar_t *, size_t, const char *, size_t, _locale_t) __attribute__((cdecl))':'errno_t (size_t *, wchar_t *, size_t, const char *, size_t, _locale_t)'
| |-ParmVarDecl 0x2a7b4a43998 <col:68, col:77> col:77 _PtNumOfCharConverted 'size_t *'
| |-ParmVarDecl 0x2a7b4a43a10 <col:158, col:168> col:168 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x2a7b4a43a88 <col:182, col:189> col:189 _SizeInWords 'size_t':'unsigned long long'
| |-ParmVarDecl 0x2a7b4a43b08 <col:230, col:243> col:243 _SrcBuf 'const char *'
| |-ParmVarDecl 0x2a7b4a43b80 <col:257, col:264> col:264 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x2a7b4a43bf8 <col:284, col:294> col:294 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2a7b4a4c478 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:2010:160> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:532:59 _mbstowcs_l 'size_t (wchar_t *, const char *, size_t, _locale_t) __attribute__((cdecl))':'size_t (wchar_t *, const char *, size_t, _locale_t)'
| |-ParmVarDecl 0x2a7b4a44048 <col:149, col:158> col:158 _Dest 'wchar_t *'
| |-ParmVarDecl 0x2a7b4a4c180 <col:172, col:186> col:186 _Source 'const char *'
| |-ParmVarDecl 0x2a7b4a4c1f8 <col:200, col:208> col:208 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x2a7b4a4c270 <col:228, col:239> col:239 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x2a7b4a4c538 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _mbstowcs_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2a7b4a4c738 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:534:24, col:48> col:39 rand 'int (void) __attribute__((cdecl))':'int (void)'
|-FunctionDecl 0x2a7b4a4c8e8 <line:539:28, col:73> col:43 _set_error_mode 'int (int) __attribute__((cdecl))':'int (int)'
| `-ParmVarDecl 0x2a7b4a4c808 <col:64, col:68> col:68 _Mode 'int'
|-FunctionDecl 0x2a7b4a4cb00 <line:541:9, col:53> col:24 srand 'void (unsigned int) __attribute__((cdecl))':'void (unsigned int)'
| `-ParmVarDecl 0x2a7b4a4c9c0 <col:35, col:48> col:48 _Seed 'unsigned int'
|-FunctionDecl 0x2a7b4a4cdc0 <line:542:39> col:39 implicit strtod 'double (const char *, char **)' extern
| |-ParmVarDecl 0x2a7b4a4ce60 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x2a7b4a4cec8 <<invalid sloc>> <invalid sloc> 'char **'
|-FunctionDecl 0x2a7b4a4cf40 prev 0x2a7b4a4cdc0 <col:24, col:112> col:39 strtod 'double (const char *, char **)'
| |-ParmVarDecl 0x2a7b4a4cbd8 <col:53, col:66> col:66 _Str 'const char *'
| `-ParmVarDecl 0x2a7b4a4cc58 <col:97, col:105> col:105 _EndPtr 'char **'
|-FunctionDecl 0x2a7b4a45288 <line:543:24, col:143> col:39 _strtod_l 'double (const char *, char **, _locale_t) __attribute__((cdecl))':'double (const char *, char **, _locale_t)'
| |-ParmVarDecl 0x2a7b4a4d020 <col:56, col:69> col:69 _Str 'const char *'
| |-ParmVarDecl 0x2a7b4a4d0a0 <col:100, col:108> col:108 _EndPtr 'char **'
| `-ParmVarDecl 0x2a7b4a4d118 <col:126, col:136> col:136 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2a7b4a45608 <line:544:39> col:39 implicit strtol 'long (const char *, char **, int)' extern
| |-ParmVarDecl 0x2a7b4a456a8 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x2a7b4a45710 <<invalid sloc>> <invalid sloc> 'char **'
| `-ParmVarDecl 0x2a7b4a45778 <<invalid sloc>> <invalid sloc> 'int'
|-FunctionDecl 0x2a7b4a457f8 prev 0x2a7b4a45608 <col:24, col:130> col:39 strtol 'long (const char *, char **, int)'
| |-ParmVarDecl 0x2a7b4a45370 <col:53, col:66> col:66 _Str 'const char *'
| |-ParmVarDecl 0x2a7b4a453f0 <col:97, col:105> col:105 _EndPtr 'char **'
| `-ParmVarDecl 0x2a7b4a45470 <col:119, col:123> col:123 _Radix 'int'
|-FunctionDecl 0x2a7b4a45c60 <line:545:24, col:158> col:39 _strtol_l 'long (const char *, char **, int, _locale_t) __attribute__((cdecl))':'long (const char *, char **, int, _locale_t)'
| |-ParmVarDecl 0x2a7b4a458e0 <col:56, col:68> col:68 _Str 'const char *'
| |-ParmVarDecl 0x2a7b4a45960 <col:99, col:106> col:106 _EndPtr 'char **'
| |-ParmVarDecl 0x2a7b4a459e0 <col:120, col:124> col:124 _Radix 'int'
| `-ParmVarDecl 0x2a7b4a45a58 <col:141, col:151> col:151 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2a7b4a45f70 <line:546:43> col:43 implicit strtoll 'long long (const char *, char **, int)' extern
| |-ParmVarDecl 0x2a7b4a46010 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x2a7b4a46078 <<invalid sloc>> <invalid sloc> 'char **'
| `-ParmVarDecl 0x2a7b4a47130 <<invalid sloc>> <invalid sloc> 'int'
|-FunctionDecl 0x2a7b4a471b0 prev 0x2a7b4a45f70 <col:24, col:135> col:43 strtoll 'long long (const char *, char **, int)'
| |-ParmVarDecl 0x2a7b4a45d50 <col:58, col:71> col:71 _Str 'const char *'
| |-ParmVarDecl 0x2a7b4a45dd0 <col:102, col:110> col:110 _EndPtr 'char **'
| `-ParmVarDecl 0x2a7b4a45e50 <col:124, col:128> col:128 _Radix 'int'
|-FunctionDecl 0x2a7b4a47550 <line:547:24, col:166> col:43 _strtoll_l 'long long (const char *, char **, int, _locale_t) __attribute__((cdecl))':'long long (const char *, char **, int, _locale_t)'
| |-ParmVarDecl 0x2a7b4a47298 <col:61, col:74> col:74 _Str 'const char *'
| |-ParmVarDecl 0x2a7b4a47318 <col:105, col:113> col:113 _EndPtr 'char **'
| |-ParmVarDecl 0x2a7b4a47398 <col:127, col:131> col:131 _Radix 'int'
| `-ParmVarDecl 0x2a7b4a47410 <col:148, col:158> col:158 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2a7b4a478d8 <line:548:46> col:46 implicit strtoul 'unsigned long (const char *, char **, int)' extern
| |-ParmVarDecl 0x2a7b4a47978 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x2a7b4a479e0 <<invalid sloc>> <invalid sloc> 'char **'
| `-ParmVarDecl 0x2a7b4a47a48 <<invalid sloc>> <invalid sloc> 'int'
|-FunctionDecl 0x2a7b4a47ac8 prev 0x2a7b4a478d8 <col:24, col:137> col:46 strtoul 'unsigned long (const char *, char **, int)'
| |-ParmVarDecl 0x2a7b4a47640 <col:61, col:74> col:74 _Str 'const char *'
| |-ParmVarDecl 0x2a7b4a476c0 <col:105, col:113> col:113 _EndPtr 'char **'
| `-ParmVarDecl 0x2a7b4a47740 <col:127, col:131> col:131 _Radix 'int'
|-FunctionDecl 0x2a7b4a47f30 <line:549:24, col:160> col:46 _strtoul_l 'unsigned long (const char *, char **, int, _locale_t) __attribute__((cdecl))':'unsigned long (const char *, char **, int, _locale_t)'
| |-ParmVarDecl 0x2a7b4a47bb0 <col:57, col:70> col:70 _Str 'const char *'
| |-ParmVarDecl 0x2a7b4a47c30 <col:101, col:108> col:108 _EndPtr 'char **'
| |-ParmVarDecl 0x2a7b4a47cb0 <col:122, col:126> col:126 _Radix 'int'
| `-ParmVarDecl 0x2a7b4a47d28 <col:143, col:153> col:153 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2a7b4a4b290 <line:550:51> col:51 implicit strtoull 'unsigned long long (const char *, char **, int)' extern
| |-ParmVarDecl 0x2a7b4a4b330 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x2a7b4a4b398 <<invalid sloc>> <invalid sloc> 'char **'
| `-ParmVarDecl 0x2a7b4a4b400 <<invalid sloc>> <invalid sloc> 'int'
|-FunctionDecl 0x2a7b4a4b480 prev 0x2a7b4a4b290 <col:24, col:143> col:51 strtoull 'unsigned long long (const char *, char **, int)'
| |-ParmVarDecl 0x2a7b4a48020 <col:67, col:80> col:80 _Str 'const char *'
| |-ParmVarDecl 0x2a7b4a480a0 <col:111, col:119> col:119 _EndPtr 'char **'
| `-ParmVarDecl 0x2a7b4a4b170 <col:133, col:137> col:137 _Radix 'int'
|-FunctionDecl 0x2a7b4a4b820 <line:551:24, col:174> col:51 _strtoull_l 'unsigned long long (const char *, char **, int, _locale_t) __attribute__((cdecl))':'unsigned long long (const char *, char **, int, _locale_t)'
| |-ParmVarDecl 0x2a7b4a4b568 <col:70, col:83> col:83 _Str 'const char *'
| |-ParmVarDecl 0x2a7b4a4b5e8 <col:114, col:122> col:122 _EndPtr 'char **'
| |-ParmVarDecl 0x2a7b4a4b668 <col:136, col:140> col:140 _Radix 'int'
| `-ParmVarDecl 0x2a7b4a4b6e0 <col:157, col:167> col:167 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2a7b4a4bb00 <line:552:44> col:44 implicit strtold 'long double (const char *, char **)' extern
| |-ParmVarDecl 0x2a7b4a4bba0 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x2a7b4a4bc08 <<invalid sloc>> <invalid sloc> 'char **'
|-FunctionDecl 0x2a7b4a4bc80 prev 0x2a7b4a4bb00 <col:24, col:118> col:44 strtold 'long double (const char *, char **)'
| |-ParmVarDecl 0x2a7b4a4b910 <col:59, col:72> col:72 _Str 'const char *'
| `-ParmVarDecl 0x2a7b4a4b990 <col:103, col:111> col:111 _EndPtr 'char **'
|-FunctionDecl 0x2a7b4a4c038 <line:553:24, col:149> col:44 _strtold_l 'long double (const char *, char **, _locale_t) __attribute__((cdecl))':'long double (const char *, char **, _locale_t)'
| |-ParmVarDecl 0x2a7b4a4bd60 <col:62, col:75> col:75 _Str 'const char *'
| |-ParmVarDecl 0x2a7b4a4bde0 <col:106, col:114> col:114 _EndPtr 'char **'
| `-ParmVarDecl 0x2a7b4a4be58 <col:132, col:142> col:142 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2a7b4a4d380 <line:554:38> col:38 implicit strtof 'float (const char *, char **)' extern
| |-ParmVarDecl 0x2a7b4a4d420 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x2a7b4a4d488 <<invalid sloc>> <invalid sloc> 'char **'
|-FunctionDecl 0x2a7b4a4d500 prev 0x2a7b4a4d380 <col:24, col:111> col:38 strtof 'float (const char *, char **)'
| |-ParmVarDecl 0x2a7b4a4d190 <col:52, col:65> col:65 _Str 'const char *'
| `-ParmVarDecl 0x2a7b4a4d210 <col:96, col:104> col:104 _EndPtr 'char **'
|-FunctionDecl 0x2a7b4a4d8b8 <line:555:24, col:142> col:38 _strtof_l 'float (const char *, char **, _locale_t) __attribute__((cdecl))':'float (const char *, char **, _locale_t)'
| |-ParmVarDecl 0x2a7b4a4d5e0 <col:55, col:68> col:68 _Str 'const char *'
| |-ParmVarDecl 0x2a7b4a4d660 <col:99, col:107> col:107 _EndPtr 'char **'
| `-ParmVarDecl 0x2a7b4a4d6d8 <col:125, col:135> col:135 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2a7b4a4da80 <line:560:9, col:60> col:21 system 'int (const char *) __attribute__((cdecl))':'int (const char *)'
| `-ParmVarDecl 0x2a7b4a4d9a0 <col:39, col:52> col:52 _Command 'const char *'
|-FunctionDecl 0x2a7b4a4ded8 <line:564:28, col:150> col:44 _ultoa_s 'errno_t (unsigned long, char *, size_t, int) __attribute__((cdecl))':'errno_t (unsigned long, char *, size_t, int)'
| |-ParmVarDecl 0x2a7b4a4db58 <col:58, col:72> col:72 _Val 'unsigned long'
| |-ParmVarDecl 0x2a7b4a4dbd8 <col:100, col:107> col:107 _DstBuf 'char *'
| |-ParmVarDecl 0x2a7b4a4dc50 <col:121, col:128> col:128 _Size 'size_t':'unsigned long long'
| `-ParmVarDecl 0x2a7b4a4dcd0 <col:140, col:144> col:144 _Radix 'int'
|-FunctionDecl 0x2a7b4a57c38 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1951:149> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:566:79 _ultoa 'char *(unsigned long, char *, int) __attribute__((cdecl))':'char *(unsigned long, char *, int)'
| |-ParmVarDecl 0x2a7b4a4e088 <col:92, col:107> col:107 _Value 'unsigned long'
| |-ParmVarDecl 0x2a7b4a4e108 <col:139, col:145> col:145 _Dest 'char *'
| |-ParmVarDecl 0x2a7b4a57aa0 <col:157, col:162> col:162 _Radix 'int'
| `-DeprecatedAttr 0x2a7b4a57cf0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _ultoa_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2a7b4a58120 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:567:127> col:58 wctomb 'int (char *, wchar_t) __attribute__((cdecl))':'int (char *, wchar_t)'
| |-ParmVarDecl 0x2a7b4a57ef8 <col:96, col:103> col:103 _MbCh 'char *'
| |-ParmVarDecl 0x2a7b4a57f70 <col:115, col:123> col:123 _WCh 'wchar_t':'unsigned short'
| `-DeprecatedAttr 0x2a7b4a581d0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using wctomb_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2a7b4a586a8 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:568:155> col:61 _wctomb_l 'int (char *, wchar_t, _locale_t) __attribute__((cdecl))':'int (char *, wchar_t, _locale_t)'
| |-ParmVarDecl 0x2a7b4a583d8 <col:96, col:103> col:103 _MbCh 'char *'
| |-ParmVarDecl 0x2a7b4a58450 <col:115, col:123> col:123 _WCh 'wchar_t':'unsigned short'
| |-ParmVarDecl 0x2a7b4a584c8 <col:138, col:148> col:148 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x2a7b4a58760 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wctomb_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2a7b4a52bd8 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:570:28, col:200> col:44 wctomb_s 'errno_t (int *, char *, rsize_t, wchar_t) __attribute__((cdecl))':'errno_t (int *, char *, rsize_t, wchar_t)'
| |-ParmVarDecl 0x2a7b4a588a8 <col:63, col:69> col:69 _SizeConverted 'int *'
| |-ParmVarDecl 0x2a7b4a58928 <col:142, col:149> col:149 _MbCh 'char *'
| |-ParmVarDecl 0x2a7b4a589a0 <col:161, col:169> col:169 _SizeInBytes 'rsize_t':'unsigned long long'
| `-ParmVarDecl 0x2a7b4a58a18 <col:188, col:196> col:196 _WCh 'wchar_t':'unsigned short'
|-FunctionDecl 0x2a7b4a530e0 <line:572:28, col:206> col:44 _wctomb_s_l 'errno_t (int *, char *, size_t, wchar_t, _locale_t) __attribute__((cdecl))':'errno_t (int *, char *, size_t, wchar_t, _locale_t)'
| |-ParmVarDecl 0x2a7b4a52cc8 <col:66, col:72> col:72 _SizeConverted 'int *'
| |-ParmVarDecl 0x2a7b4a52d48 <col:121, col:128> col:128 _MbCh 'char *'
| |-ParmVarDecl 0x2a7b4a52dc0 <col:140, col:147> col:147 _SizeInBytes 'size_t':'unsigned long long'
| |-ParmVarDecl 0x2a7b4a52e38 <col:166, col:174> col:174 _WCh 'wchar_t':'unsigned short'
| `-ParmVarDecl 0x2a7b4a52eb0 <col:189, col:199> col:199 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2a7b4a535f0 <line:573:28, col:263> col:44 wcstombs_s 'errno_t (size_t *, char *, size_t, const wchar_t *, size_t) __attribute__((cdecl))':'errno_t (size_t *, char *, size_t, const wchar_t *, size_t)'
| |-ParmVarDecl 0x2a7b4a531d0 <col:65, col:74> col:74 _PtNumOfCharConverted 'size_t *'
| |-ParmVarDecl 0x2a7b4a53250 <col:164, col:171> col:171 _Dst 'char *'
| |-ParmVarDecl 0x2a7b4a532c8 <col:182, col:189> col:189 _DstSizeInBytes 'size_t':'unsigned long long'
| |-ParmVarDecl 0x2a7b4a53340 <col:213, col:229> col:229 _Src 'const wchar_t *'
| `-ParmVarDecl 0x2a7b4a533b8 <col:240, col:247> col:247 _MaxCountInBytes 'size_t':'unsigned long long'
|-FunctionDecl 0x2a7b4a55ac0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:2007:144> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:575:56 wcstombs 'size_t (char *, const wchar_t *, size_t) __attribute__((cdecl))':'size_t (char *, const wchar_t *, size_t)'
| |-ParmVarDecl 0x2a7b4a537a8 <col:97, col:103> col:103 _Dest 'char *'
| |-ParmVarDecl 0x2a7b4a53820 <col:117, col:134> col:134 _Source 'const wchar_t *'
| |-ParmVarDecl 0x2a7b4a53898 <col:148, col:156> col:156 _MaxCount 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x2a7b4a55b78 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using wcstombs_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2a7b4a56178 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:576:28, col:294> col:44 _wcstombs_s_l 'errno_t (size_t *, char *, size_t, const wchar_t *, size_t, _locale_t) __attribute__((cdecl))':'errno_t (size_t *, char *, size_t, const wchar_t *, size_t, _locale_t)'
| |-ParmVarDecl 0x2a7b4a55cb8 <col:68, col:77> col:77 _PtNumOfCharConverted 'size_t *'
| |-ParmVarDecl 0x2a7b4a55d38 <col:167, col:174> col:174 _Dst 'char *'
| |-ParmVarDecl 0x2a7b4a55db0 <col:185, col:192> col:192 _DstSizeInBytes 'size_t':'unsigned long long'
| |-ParmVarDecl 0x2a7b4a55e28 <col:216, col:232> col:232 _Src 'const wchar_t *'
| |-ParmVarDecl 0x2a7b4a55ea0 <col:243, col:250> col:250 _MaxCountInBytes 'size_t':'unsigned long long'
| `-ParmVarDecl 0x2a7b4a55f18 <col:277, col:287> col:287 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2a7b4a566a8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:2010:160> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:578:59 _wcstombs_l 'size_t (char *, const wchar_t *, size_t, _locale_t) __attribute__((cdecl))':'size_t (char *, const wchar_t *, size_t, _locale_t)'
| |-ParmVarDecl 0x2a7b4a56338 <col:146, col:152> col:152 _Dest 'char *'
| |-ParmVarDecl 0x2a7b4a563b0 <col:166, col:183> col:183 _Source 'const wchar_t *'
| |-ParmVarDecl 0x2a7b4a56428 <col:197, col:205> col:205 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x2a7b4a564a0 <col:225, col:236> col:236 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x2a7b4a56768 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wcstombs_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2a7b4a56b00 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:640:142> col:142 implicit calloc 'void *(unsigned long long, unsigned long long)' extern
| |-ParmVarDecl 0x2a7b4a56ba0 <<invalid sloc>> <invalid sloc> 'unsigned long long'
| `-ParmVarDecl 0x2a7b4a56c08 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x2a7b4a56c80 prev 0x2a7b4a56b00 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:21, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:640:224> col:142 calloc 'void *(unsigned long long, unsigned long long)'
| |-ParmVarDecl 0x2a7b4a568a8 <col:173, col:180> col:180 _Count 'size_t':'unsigned long long'
| |-ParmVarDecl 0x2a7b4a56920 <col:212, col:219> col:219 _Size 'size_t':'unsigned long long'
| |-NoAliasAttr 0x2a7b4a56d30 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:32>
| `-RestrictAttr 0x2a7b4a56d88 <line:615:33> restrict
|-FunctionDecl 0x2a7b4a56f20 <line:611:21, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:641:182> col:132 free 'void (void *) __attribute__((cdecl))':'void (void *)'
| |-ParmVarDecl 0x2a7b4a56de0 <col:168, col:175> col:175 _Memory 'void *'
| `-NoAliasAttr 0x2a7b4a56fc8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:32>
|-FunctionDecl 0x2a7b4a571c8 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:642:161> col:161 implicit malloc 'void *(unsigned long long)' extern
| `-ParmVarDecl 0x2a7b4a57268 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x2a7b4a572d8 prev 0x2a7b4a571c8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:21, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:642:204> col:161 malloc 'void *(unsigned long long)'
| |-ParmVarDecl 0x2a7b4a57048 <col:192, col:199> col:199 _Size 'size_t':'unsigned long long'
| |-NoAliasAttr 0x2a7b4a57380 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:32>
| `-RestrictAttr 0x2a7b4a573d8 <line:615:33> restrict
|-FunctionDecl 0x2a7b4a57650 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:644:142> col:142 implicit realloc 'void *(void *, unsigned long long)' extern
| |-ParmVarDecl 0x2a7b4a576f0 <<invalid sloc>> <invalid sloc> 'void *'
| `-ParmVarDecl 0x2a7b4a57758 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x2a7b4a577d0 prev 0x2a7b4a57650 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:21, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:644:236> col:142 realloc 'void *(void *, unsigned long long)'
| |-ParmVarDecl 0x2a7b4a57430 <col:181, col:188> col:188 _Memory 'void *'
| |-ParmVarDecl 0x2a7b4a574a8 <col:221, col:228> col:228 _NewSize 'size_t':'unsigned long long'
| |-NoAliasAttr 0x2a7b4a57880 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:32>
| `-RestrictAttr 0x2a7b4a578d8 <line:615:33> restrict
|-FunctionDecl 0x2a7b4a58c28 <line:611:21, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:646:274> col:142 _recalloc 'void *(void *, size_t, size_t) __attribute__((cdecl))':'void *(void *, size_t, size_t)'
| |-ParmVarDecl 0x2a7b4a57930 <col:183, col:190> col:190 _Memory 'void *'
| |-ParmVarDecl 0x2a7b4a579a8 <col:223, col:230> col:230 _Count 'size_t':'unsigned long long'
| |-ParmVarDecl 0x2a7b4a57a20 <col:262, col:269> col:269 _Size 'size_t':'unsigned long long'
| |-NoAliasAttr 0x2a7b4a58ce0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:32>
| `-RestrictAttr 0x2a7b4a58d38 <line:615:33> restrict
|-FunctionDecl 0x2a7b4a58e68 <line:611:21, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:647:191> col:132 _aligned_free 'void (void *) __attribute__((cdecl))':'void (void *)'
| |-ParmVarDecl 0x2a7b4a58d90 <col:177, col:184> col:184 _Memory 'void *'
| `-NoAliasAttr 0x2a7b4a58f10 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:32>
|-FunctionDecl 0x2a7b4a59108 <col:21, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:648:218> col:142 _aligned_malloc 'void *(size_t, size_t) __attribute__((cdecl))':'void *(size_t, size_t)'
| |-ParmVarDecl 0x2a7b4a58f90 <col:182, col:189> col:189 _Size 'size_t':'unsigned long long'
| |-ParmVarDecl 0x2a7b4a59008 <col:201, col:208> col:208 _Alignment 'size_t':'unsigned long long'
| |-NoAliasAttr 0x2a7b4a591b8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:32>
| `-RestrictAttr 0x2a7b4a59210 <line:615:33> restrict
|-FunctionDecl 0x2a7b4a59528 <line:611:21, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:649:246> col:142 _aligned_offset_malloc 'void *(size_t, size_t, size_t) __attribute__((cdecl))':'void *(size_t, size_t, size_t)'
| |-ParmVarDecl 0x2a7b4a59260 <col:189, col:196> col:196 _Size 'size_t':'unsigned long long'
| |-ParmVarDecl 0x2a7b4a592d8 <col:208, col:215> col:215 _Alignment 'size_t':'unsigned long long'
| |-ParmVarDecl 0x2a7b4a59350 <col:232, col:239> col:239 _Offset 'size_t':'unsigned long long'
| |-NoAliasAttr 0x2a7b4a595e0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:32>
| `-RestrictAttr 0x2a7b4a59638 <line:615:33> restrict
|-FunctionDecl 0x2a7b4a598a0 <line:611:21, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:651:272> col:145 _aligned_realloc 'void *(void *, size_t, size_t) __attribute__((cdecl))':'void *(void *, size_t, size_t)'
| |-ParmVarDecl 0x2a7b4a59690 <col:193, col:200> col:200 _Memory 'void *'
| |-ParmVarDecl 0x2a7b4a59708 <col:233, col:240> col:240 _NewSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x2a7b4a59780 <col:255, col:262> col:262 _Alignment 'size_t':'unsigned long long'
| |-NoAliasAttr 0x2a7b4a59958 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:32>
| `-RestrictAttr 0x2a7b4a599b0 <line:615:33> restrict
|-FunctionDecl 0x2a7b4a5add0 <line:611:21, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:653:306> col:142 _aligned_recalloc 'void *(void *, size_t, size_t, size_t) __attribute__((cdecl))':'void *(void *, size_t, size_t, size_t)'
| |-ParmVarDecl 0x2a7b4a59a08 <col:191, col:198> col:198 _Memory 'void *'
| |-ParmVarDecl 0x2a7b4a5aad0 <col:231, col:238> col:238 _Count 'size_t':'unsigned long long'
| |-ParmVarDecl 0x2a7b4a5ab48 <col:270, col:277> col:277 _Size 'size_t':'unsigned long long'
| |-ParmVarDecl 0x2a7b4a5abc0 <col:289, col:296> col:296 _Alignment 'size_t':'unsigned long long'
| |-NoAliasAttr 0x2a7b4a5ae90 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:32>
| `-RestrictAttr 0x2a7b4a5aee8 <line:615:33> restrict
|-FunctionDecl 0x2a7b4a5b1e8 <line:611:21, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:655:300> col:145 _aligned_offset_realloc 'void *(void *, size_t, size_t, size_t) __attribute__((cdecl))':'void *(void *, size_t, size_t, size_t)'
| |-ParmVarDecl 0x2a7b4a5af40 <col:200, col:207> col:207 _Memory 'void *'
| |-ParmVarDecl 0x2a7b4a5afb8 <col:240, col:247> col:247 _NewSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x2a7b4a5b030 <col:262, col:269> col:269 _Alignment 'size_t':'unsigned long long'
| |-ParmVarDecl 0x2a7b4a5b0a8 <col:286, col:293> col:293 _Offset 'size_t':'unsigned long long'
| |-NoAliasAttr 0x2a7b4a5b2a8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:32>
| `-RestrictAttr 0x2a7b4a5b300 <line:615:33> restrict
|-FunctionDecl 0x2a7b4a5b778 <line:611:21, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:657:334> col:142 _aligned_offset_recalloc 'void *(void *, size_t, size_t, size_t, size_t) __attribute__((cdecl))':'void *(void *, size_t, size_t, size_t, size_t)'
| |-ParmVarDecl 0x2a7b4a5b358 <col:198, col:205> col:205 _Memory 'void *'
| |-ParmVarDecl 0x2a7b4a5b3d0 <col:238, col:245> col:245 _Count 'size_t':'unsigned long long'
| |-ParmVarDecl 0x2a7b4a5b448 <col:277, col:284> col:284 _Size 'size_t':'unsigned long long'
| |-ParmVarDecl 0x2a7b4a5b4c0 <col:296, col:303> col:303 _Alignment 'size_t':'unsigned long long'
| |-ParmVarDecl 0x2a7b4a5b538 <col:320, col:327> col:327 _Offset 'size_t':'unsigned long long'
| |-NoAliasAttr 0x2a7b4a5b840 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:32>
| `-RestrictAttr 0x2a7b4a5b898 <line:615:33> restrict
|-FunctionDecl 0x2a7b4a53b40 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:658:73, col:176> col:88 _aligned_msize 'size_t (void *, size_t, size_t) __attribute__((cdecl))':'size_t (void *, size_t, size_t)'
| |-ParmVarDecl 0x2a7b4a5b8f0 <col:117, col:124> col:124 _Memory 'void *'
| |-ParmVarDecl 0x2a7b4a5b968 <col:138, col:145> col:145 _Alignment 'size_t':'unsigned long long'
| `-ParmVarDecl 0x2a7b4a5b9e0 <col:162, col:169> col:169 _Offset 'size_t':'unsigned long long'
|-FunctionDecl 0x2a7b4a53f98 <line:685:28, col:157> col:44 _itow_s 'errno_t (int, wchar_t *, size_t, int) __attribute__((cdecl))':'errno_t (int, wchar_t *, size_t, int)'
| |-ParmVarDecl 0x2a7b4a53c28 <col:58, col:62> col:62 _Val 'int'
| |-ParmVarDecl 0x2a7b4a53ca0 <col:97, col:107> col:107 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x2a7b4a53d18 <col:121, col:128> col:128 _SizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x2a7b4a53d98 <col:147, col:151> col:151 _Radix 'int'
|-FunctionDecl 0x2a7b4a54410 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1951:149> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:687:82 _itow 'wchar_t *(int, wchar_t *, int) __attribute__((cdecl))':'wchar_t *(int, wchar_t *, int)'
| |-ParmVarDecl 0x2a7b4a54148 <col:94, col:99> col:99 _Value 'int'
| |-ParmVarDecl 0x2a7b4a541c0 <col:131, col:140> col:140 _Dest 'wchar_t *'
| |-ParmVarDecl 0x2a7b4a54240 <col:152, col:157> col:157 _Radix 'int'
| `-DeprecatedAttr 0x2a7b4a544c8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _itow_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2a7b4a54988 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:688:28, col:158> col:44 _ltow_s 'errno_t (long, wchar_t *, size_t, int) __attribute__((cdecl))':'errno_t (long, wchar_t *, size_t, int)'
| |-ParmVarDecl 0x2a7b4a54610 <col:58, col:63> col:63 _Val 'long'
| |-ParmVarDecl 0x2a7b4a54688 <col:98, col:108> col:108 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x2a7b4a54700 <col:122, col:129> col:129 _SizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x2a7b4a54780 <col:148, col:152> col:152 _Radix 'int'
|-FunctionDecl 0x2a7b4a5ce90 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1951:149> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:690:82 _ltow 'wchar_t *(long, wchar_t *, int) __attribute__((cdecl))':'wchar_t *(long, wchar_t *, int)'
| |-ParmVarDecl 0x2a7b4a5cbc8 <col:94, col:100> col:100 _Value 'long'
| |-ParmVarDecl 0x2a7b4a5cc40 <col:132, col:141> col:141 _Dest 'wchar_t *'
| |-ParmVarDecl 0x2a7b4a5ccc0 <col:153, col:158> col:158 _Radix 'int'
| `-DeprecatedAttr 0x2a7b4a5cf48 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _ltow_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2a7b4a5d408 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:691:28, col:168> col:44 _ultow_s 'errno_t (unsigned long, wchar_t *, size_t, int) __attribute__((cdecl))':'errno_t (unsigned long, wchar_t *, size_t, int)'
| |-ParmVarDecl 0x2a7b4a5d090 <col:59, col:73> col:73 _Val 'unsigned long'
| |-ParmVarDecl 0x2a7b4a5d108 <col:108, col:118> col:118 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x2a7b4a5d180 <col:132, col:139> col:139 _SizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x2a7b4a5d200 <col:158, col:162> col:162 _Radix 'int'
|-FunctionDecl 0x2a7b4a5d880 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1951:149> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:693:82 _ultow 'wchar_t *(unsigned long, wchar_t *, int) __attribute__((cdecl))':'wchar_t *(unsigned long, wchar_t *, int)'
| |-ParmVarDecl 0x2a7b4a5d5b8 <col:95, col:110> col:110 _Value 'unsigned long'
| |-ParmVarDecl 0x2a7b4a5d630 <col:142, col:151> col:151 _Dest 'wchar_t *'
| |-ParmVarDecl 0x2a7b4a5d6b0 <col:163, col:168> col:168 _Radix 'int'
| `-DeprecatedAttr 0x2a7b4a5d938 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _ultow_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2a7b4a62d10 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:694:24, col:118> col:39 wcstod 'double (const wchar_t *, wchar_t **) __attribute__((cdecl))':'double (const wchar_t *, wchar_t **)'
| |-ParmVarDecl 0x2a7b4a5da78 <col:53, col:69> col:69 _Str 'const wchar_t *'
| `-ParmVarDecl 0x2a7b4a62b68 <col:100, col:111> col:111 _EndPtr 'wchar_t **'
|-FunctionDecl 0x2a7b4a630b8 <line:695:24, col:148> col:39 _wcstod_l 'double (const wchar_t *, wchar_t **, _locale_t) __attribute__((cdecl))':'double (const wchar_t *, wchar_t **, _locale_t)'
| |-ParmVarDecl 0x2a7b4a62de8 <col:56, col:71> col:71 _Str 'const wchar_t *'
| |-ParmVarDecl 0x2a7b4a62e68 <col:102, col:113> col:113 _EndPtr 'wchar_t **'
| `-ParmVarDecl 0x2a7b4a62ee0 <col:131, col:141> col:141 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2a7b4a63478 <line:696:24, col:129> col:39 wcstol 'long (const wchar_t *, wchar_t **, int) __attribute__((cdecl))':'long (const wchar_t *, wchar_t **, int)'
| |-ParmVarDecl 0x2a7b4a63198 <col:53, col:68> col:68 _Str 'const wchar_t *'
| |-ParmVarDecl 0x2a7b4a63218 <col:99, col:110> col:110 _EndPtr 'wchar_t **'
| `-ParmVarDecl 0x2a7b4a63298 <col:119, col:123> col:123 _Radix 'int'
|-FunctionDecl 0x2a7b4a638e0 <line:697:24, col:159> col:39 _wcstol_l 'long (const wchar_t *, wchar_t **, int, _locale_t) __attribute__((cdecl))':'long (const wchar_t *, wchar_t **, int, _locale_t)'
| |-ParmVarDecl 0x2a7b4a63558 <col:56, col:71> col:71 _Str 'const wchar_t *'
| |-ParmVarDecl 0x2a7b4a635d8 <col:102, col:112> col:112 _EndPtr 'wchar_t **'
| |-ParmVarDecl 0x2a7b4a63658 <col:121, col:125> col:125 _Radix 'int'
| `-ParmVarDecl 0x2a7b4a636d0 <col:142, col:152> col:152 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2a7b4a5ec68 <line:698:24, col:133> col:43 wcstoll 'long long (const wchar_t *, wchar_t **, int) __attribute__((cdecl))':'long long (const wchar_t *, wchar_t **, int)'
| |-ParmVarDecl 0x2a7b4a639c8 <col:58, col:73> col:73 _Str 'const wchar_t *'
| |-ParmVarDecl 0x2a7b4a63a48 <col:104, col:114> col:114 _EndPtr 'wchar_t **'
| `-ParmVarDecl 0x2a7b4a63ac8 <col:123, col:127> col:127 _Radix 'int'
|-FunctionDecl 0x2a7b4a5f0d0 <line:699:24, col:164> col:43 _wcstoll_l 'long long (const wchar_t *, wchar_t **, int, _locale_t) __attribute__((cdecl))':'long long (const wchar_t *, wchar_t **, int, _locale_t)'
| |-ParmVarDecl 0x2a7b4a5ed48 <col:61, col:76> col:76 _Str 'const wchar_t *'
| |-ParmVarDecl 0x2a7b4a5edc8 <col:107, col:117> col:117 _EndPtr 'wchar_t **'
| |-ParmVarDecl 0x2a7b4a5ee48 <col:126, col:130> col:130 _Radix 'int'
| `-ParmVarDecl 0x2a7b4a5eec0 <col:147, col:157> col:157 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2a7b4a5f498 <line:700:24, col:137> col:46 wcstoul 'unsigned long (const wchar_t *, wchar_t **, int) __attribute__((cdecl))':'unsigned long (const wchar_t *, wchar_t **, int)'
| |-ParmVarDecl 0x2a7b4a5f1b8 <col:61, col:76> col:76 _Str 'const wchar_t *'
| |-ParmVarDecl 0x2a7b4a5f238 <col:107, col:118> col:118 _EndPtr 'wchar_t **'
| `-ParmVarDecl 0x2a7b4a5f2b8 <col:127, col:131> col:131 _Radix 'int'
|-FunctionDecl 0x2a7b4a5f900 <line:701:24, col:167> col:46 _wcstoul_l 'unsigned long (const wchar_t *, wchar_t **, int, _locale_t) __attribute__((cdecl))':'unsigned long (const wchar_t *, wchar_t **, int, _locale_t)'
| |-ParmVarDecl 0x2a7b4a5f578 <col:64, col:79> col:79 _Str 'const wchar_t *'
| |-ParmVarDecl 0x2a7b4a5f5f8 <col:110, col:120> col:120 _EndPtr 'wchar_t **'
| |-ParmVarDecl 0x2a7b4a5f678 <col:129, col:133> col:133 _Radix 'int'
| `-ParmVarDecl 0x2a7b4a5f6f0 <col:150, col:160> col:160 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2a7b4a5fcf8 <line:702:24, col:143> col:51 wcstoull 'unsigned long long (const wchar_t *, wchar_t **, int) __attribute__((cdecl))':'unsigned long long (const wchar_t *, wchar_t **, int)'
| |-ParmVarDecl 0x2a7b4a5f9e8 <col:67, col:82> col:82 _Str 'const wchar_t *'
| |-ParmVarDecl 0x2a7b4a5fa68 <col:113, col:124> col:124 _EndPtr 'wchar_t **'
| `-ParmVarDecl 0x2a7b4a5fb20 <col:133, col:137> col:137 _Radix 'int'
|-FunctionDecl 0x2a7b4a60160 <line:703:24, col:174> col:51 _wcstoull_l 'unsigned long long (const wchar_t *, wchar_t **, int, _locale_t) __attribute__((cdecl))':'unsigned long long (const wchar_t *, wchar_t **, int, _locale_t)'
| |-ParmVarDecl 0x2a7b4a5fdd8 <col:70, col:85> col:85 _Str 'const wchar_t *'
| |-ParmVarDecl 0x2a7b4a5fe58 <col:116, col:127> col:127 _EndPtr 'wchar_t **'
| |-ParmVarDecl 0x2a7b4a5fed8 <col:136, col:140> col:140 _Radix 'int'
| `-ParmVarDecl 0x2a7b4a5ff50 <col:157, col:167> col:167 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2a7b4a60470 <line:704:24, col:124> col:44 wcstold 'long double (const wchar_t *, wchar_t **) __attribute__((cdecl))':'long double (const wchar_t *, wchar_t **)'
| |-ParmVarDecl 0x2a7b4a60248 <col:59, col:75> col:75 _Str 'const wchar_t *'
| `-ParmVarDecl 0x2a7b4a602c8 <col:106, col:117> col:117 _EndPtr 'wchar_t **'
|-FunctionDecl 0x2a7b4a60818 <line:705:24, col:155> col:44 _wcstold_l 'long double (const wchar_t *, wchar_t **, _locale_t) __attribute__((cdecl))':'long double (const wchar_t *, wchar_t **, _locale_t)'
| |-ParmVarDecl 0x2a7b4a60548 <col:62, col:78> col:78 _Str 'const wchar_t *'
| |-ParmVarDecl 0x2a7b4a605c8 <col:109, col:120> col:120 _EndPtr 'wchar_t **'
| `-ParmVarDecl 0x2a7b4a60640 <col:138, col:148> col:148 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2a7b4a5db00 <line:706:24, col:117> col:38 wcstof 'float (const wchar_t *, wchar_t **) __attribute__((cdecl))':'float (const wchar_t *, wchar_t **)'
| |-ParmVarDecl 0x2a7b4a608f8 <col:52, col:68> col:68 _Str 'const wchar_t *'
| `-ParmVarDecl 0x2a7b4a60978 <col:99, col:110> col:110 _EndPtr 'wchar_t **'
|-FunctionDecl 0x2a7b4a5dea8 <line:707:24, col:148> col:38 _wcstof_l 'float (const wchar_t *, wchar_t **, _locale_t) __attribute__((cdecl))':'float (const wchar_t *, wchar_t **, _locale_t)'
| |-ParmVarDecl 0x2a7b4a5dbd8 <col:55, col:71> col:71 _Str 'const wchar_t *'
| |-ParmVarDecl 0x2a7b4a5dc58 <col:102, col:113> col:113 _EndPtr 'wchar_t **'
| `-ParmVarDecl 0x2a7b4a5dcd0 <col:131, col:141> col:141 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2a7b4a5e120 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:711:118> col:78 _wgetenv 'wchar_t *(const wchar_t *) __attribute__((cdecl))':'wchar_t *(const wchar_t *)'
| |-ParmVarDecl 0x2a7b4a5e048 <col:94, col:110> col:110 _VarName 'const wchar_t *'
| `-DeprecatedAttr 0x2a7b4a5e1c8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wdupenv_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2a7b4a5e678 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:712:28, col:198> col:44 _wgetenv_s 'errno_t (size_t *, wchar_t *, size_t, const wchar_t *) __attribute__((cdecl))':'errno_t (size_t *, wchar_t *, size_t, const wchar_t *)'
| |-ParmVarDecl 0x2a7b4a5e308 <col:61, col:70> col:70 _ReturnSize 'size_t *'
| |-ParmVarDecl 0x2a7b4a5e380 <col:119, col:129> col:129 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x2a7b4a5e3f8 <col:143, col:150> col:150 _DstSizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x2a7b4a5e470 <col:174, col:190> col:190 _VarName 'const wchar_t *'
|-FunctionDecl 0x2a7b4a5ea30 <line:720:28, col:214> col:44 _wdupenv_s 'errno_t (wchar_t **, size_t *, const wchar_t *) __attribute__((cdecl))':'errno_t (wchar_t **, size_t *, const wchar_t *)'
| |-ParmVarDecl 0x2a7b4a5e768 <col:127, col:137> col:137 _Buffer 'wchar_t **'
| |-ParmVarDecl 0x2a7b4a5e7e0 <col:156, col:164> col:164 _BufferSizeInWords 'size_t *'
| `-ParmVarDecl 0x2a7b4a5e858 <col:191, col:206> col:206 _VarName 'const wchar_t *'
|-FunctionDecl 0x2a7b4a61cc8 <line:728:9, col:65> col:21 _wsystem 'int (const wchar_t *) __attribute__((cdecl))':'int (const wchar_t *)'
| `-ParmVarDecl 0x2a7b4a61b50 <col:41, col:57> col:57 _Command 'const wchar_t *'
|-FunctionDecl 0x2a7b4a61f18 <line:733:24, col:71> col:39 _wtof 'double (const wchar_t *) __attribute__((cdecl))':'double (const wchar_t *)'
| `-ParmVarDecl 0x2a7b4a61d98 <col:52, col:67> col:67 _Str 'const wchar_t *'
|-FunctionDecl 0x2a7b4a62210 <line:734:24, col:101> col:39 _wtof_l 'double (const wchar_t *, _locale_t) __attribute__((cdecl))':'double (const wchar_t *, _locale_t)'
| |-ParmVarDecl 0x2a7b4a61fe8 <col:54, col:69> col:69 _Str 'const wchar_t *'
| `-ParmVarDecl 0x2a7b4a62060 <col:84, col:94> col:94 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2a7b4a623c8 <line:735:24, col:68> col:36 _wtoi 'int (const wchar_t *) __attribute__((cdecl))':'int (const wchar_t *)'
| `-ParmVarDecl 0x2a7b4a622e8 <col:49, col:64> col:64 _Str 'const wchar_t *'
|-FunctionDecl 0x2a7b4a626c0 <line:736:24, col:98> col:36 _wtoi_l 'int (const wchar_t *, _locale_t) __attribute__((cdecl))':'int (const wchar_t *, _locale_t)'
| |-ParmVarDecl 0x2a7b4a62498 <col:51, col:66> col:66 _Str 'const wchar_t *'
| `-ParmVarDecl 0x2a7b4a62510 <col:81, col:91> col:91 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2a7b4a62918 <line:737:24, col:69> col:37 _wtol 'long (const wchar_t *) __attribute__((cdecl))':'long (const wchar_t *)'
| `-ParmVarDecl 0x2a7b4a62798 <col:50, col:65> col:65 _Str 'const wchar_t *'
|-FunctionDecl 0x2a7b4a5bbb0 <line:738:24, col:99> col:37 _wtol_l 'long (const wchar_t *, _locale_t) __attribute__((cdecl))':'long (const wchar_t *, _locale_t)'
| |-ParmVarDecl 0x2a7b4a629e8 <col:52, col:67> col:67 _Str 'const wchar_t *'
| `-ParmVarDecl 0x2a7b4a62a60 <col:82, col:92> col:92 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2a7b4a5be08 <line:739:24, col:75> col:42 _wtoll 'long long (const wchar_t *) __attribute__((cdecl))':'long long (const wchar_t *)'
| `-ParmVarDecl 0x2a7b4a5bc88 <col:56, col:71> col:71 _Str 'const wchar_t *'
|-FunctionDecl 0x2a7b4a5c100 <line:740:24, col:105> col:42 _wtoll_l 'long long (const wchar_t *, _locale_t) __attribute__((cdecl))':'long long (const wchar_t *, _locale_t)'
| |-ParmVarDecl 0x2a7b4a5bed8 <col:58, col:73> col:73 _Str 'const wchar_t *'
| `-ParmVarDecl 0x2a7b4a5bf50 <col:88, col:98> col:98 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2a7b4a5c558 <line:742:28, col:162> col:44 _i64tow_s 'errno_t (long long, wchar_t *, size_t, int) __attribute__((cdecl))':'errno_t (long long, wchar_t *, size_t, int)'
| |-ParmVarDecl 0x2a7b4a5c1e0 <col:59, col:67> col:67 _Val 'long long'
| |-ParmVarDecl 0x2a7b4a5c258 <col:102, col:112> col:112 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x2a7b4a5c2d0 <col:126, col:133> col:133 _SizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x2a7b4a5c350 <col:152, col:156> col:156 _Radix 'int'
|-FunctionDecl 0x2a7b4a5c9d0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:743:146> col:62 _i64tow 'wchar_t *(long long, wchar_t *, int) __attribute__((cdecl))':'wchar_t *(long long, wchar_t *, int)'
| |-ParmVarDecl 0x2a7b4a5c708 <col:75, col:83> col:83 _Val 'long long'
| |-ParmVarDecl 0x2a7b4a5c780 <col:112, col:122> col:122 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x2a7b4a5c800 <col:136, col:140> col:140 _Radix 'int'
| `-DeprecatedAttr 0x2a7b4a5ca88 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _i64tow_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2a7b4a63fd8 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:744:28, col:172> col:44 _ui64tow_s 'errno_t (unsigned long long, wchar_t *, size_t, int) __attribute__((cdecl))':'errno_t (unsigned long long, wchar_t *, size_t, int)'
| |-ParmVarDecl 0x2a7b4a63c60 <col:60, col:77> col:77 _Val 'unsigned long long'
| |-ParmVarDecl 0x2a7b4a63cd8 <col:112, col:122> col:122 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x2a7b4a63d50 <col:136, col:143> col:143 _SizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x2a7b4a63dd0 <col:162, col:166> col:166 _Radix 'int'
|-FunctionDecl 0x2a7b4a64450 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:745:157> col:63 _ui64tow 'wchar_t *(unsigned long long, wchar_t *, int) __attribute__((cdecl))':'wchar_t *(unsigned long long, wchar_t *, int)'
| |-ParmVarDecl 0x2a7b4a64188 <col:77, col:94> col:94 _Val 'unsigned long long'
| |-ParmVarDecl 0x2a7b4a64200 <col:123, col:133> col:133 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x2a7b4a64280 <col:147, col:151> col:151 _Radix 'int'
| `-DeprecatedAttr 0x2a7b4a64508 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _ui64tow_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2a7b4a64728 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:746:24, col:76> col:42 _wtoi64 'long long (const wchar_t *) __attribute__((cdecl))':'long long (const wchar_t *)'
| `-ParmVarDecl 0x2a7b4a64648 <col:57, col:72> col:72 _Str 'const wchar_t *'
|-FunctionDecl 0x2a7b4a64970 <line:747:24, col:106> col:42 _wtoi64_l 'long long (const wchar_t *, _locale_t) __attribute__((cdecl))':'long long (const wchar_t *, _locale_t)'
| |-ParmVarDecl 0x2a7b4a647f8 <col:59, col:74> col:74 _Str 'const wchar_t *'
| `-ParmVarDecl 0x2a7b4a64870 <col:89, col:99> col:99 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2a7b4a64c90 <line:748:24, col:141> col:42 _wcstoi64 'long long (const wchar_t *, wchar_t **, int) __attribute__((cdecl))':'long long (const wchar_t *, wchar_t **, int)'
| |-ParmVarDecl 0x2a7b4a64a48 <col:59, col:75> col:75 _Str 'const wchar_t *'
| |-ParmVarDecl 0x2a7b4a64ac8 <col:106, col:117> col:117 _EndPtr 'wchar_t **'
| `-ParmVarDecl 0x2a7b4a64b70 <col:131, col:135> col:135 _Radix 'int'
|-FunctionDecl 0x2a7b4a65028 <line:749:24, col:171> col:42 _wcstoi64_l 'long long (const wchar_t *, wchar_t **, int, _locale_t) __attribute__((cdecl))':'long long (const wchar_t *, wchar_t **, int, _locale_t)'
| |-ParmVarDecl 0x2a7b4a64d70 <col:61, col:77> col:77 _Str 'const wchar_t *'
| |-ParmVarDecl 0x2a7b4a64df0 <col:108, col:119> col:119 _EndPtr 'wchar_t **'
| |-ParmVarDecl 0x2a7b4a64e70 <col:133, col:137> col:137 _Radix 'int'
| `-ParmVarDecl 0x2a7b4a64ee8 <col:154, col:164> col:164 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2a7b4a65330 <line:750:24, col:150> col:50 _wcstoui64 'unsigned long long (const wchar_t *, wchar_t **, int) __attribute__((cdecl))':'unsigned long long (const wchar_t *, wchar_t **, int)'
| |-ParmVarDecl 0x2a7b4a65110 <col:68, col:84> col:84 _Str 'const wchar_t *'
| |-ParmVarDecl 0x2a7b4a65190 <col:115, col:126> col:126 _EndPtr 'wchar_t **'
| `-ParmVarDecl 0x2a7b4a65210 <col:140, col:144> col:144 _Radix 'int'
|-FunctionDecl 0x2a7b4a656c8 <line:751:24, col:180> col:50 _wcstoui64_l 'unsigned long long (const wchar_t *, wchar_t **, int, _locale_t) __attribute__((cdecl))':'unsigned long long (const wchar_t *, wchar_t **, int, _locale_t)'
| |-ParmVarDecl 0x2a7b4a65410 <col:70, col:85> col:85 _Str 'const wchar_t *'
| |-ParmVarDecl 0x2a7b4a65490 <col:117, col:128> col:128 _EndPtr 'wchar_t **'
| |-ParmVarDecl 0x2a7b4a65510 <col:142, col:146> col:146 _Radix 'int'
| `-ParmVarDecl 0x2a7b4a65588 <col:163, col:173> col:173 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2a7b4a659d0 <line:770:24, col:151> col:39 _fullpath 'char *(char *, const char *, size_t) __attribute__((cdecl))':'char *(char *, const char *, size_t)'
| |-ParmVarDecl 0x2a7b4a657b8 <col:82, col:89> col:89 _FullPath 'char *'
| |-ParmVarDecl 0x2a7b4a65838 <col:107, col:120> col:120 _Path 'const char *'
| `-ParmVarDecl 0x2a7b4a658b0 <col:132, col:139> col:139 _SizeInBytes 'size_t':'unsigned long long'
|-FunctionDecl 0x2a7b4a65fe8 <line:778:28, col:189> col:44 _ecvt_s 'errno_t (char *, size_t, double, int, int *, int *) __attribute__((cdecl))':'errno_t (char *, size_t, double, int, int *, int *)'
| |-ParmVarDecl 0x2a7b4a65ab8 <col:74, col:81> col:81 _DstBuf 'char *'
| |-ParmVarDecl 0x2a7b4a65b80 <col:95, col:102> col:102 _Size 'size_t':'unsigned long long'
| |-ParmVarDecl 0x2a7b4a65c00 <col:114, col:121> col:121 _Val 'double'
| |-ParmVarDecl 0x2a7b4a65c80 <col:132, col:136> col:136 _NumOfDights 'int'
| |-ParmVarDecl 0x2a7b4a65d00 <col:156, col:162> col:162 _PtDec 'int *'
| `-ParmVarDecl 0x2a7b4a65d80 <col:176, col:182> col:182 _PtSign 'int *'
|-FunctionDecl 0x2a7b4a664e0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:780:158> col:72 _ecvt 'char *(double, int, int *, int *) __attribute__((cdecl))':'char *(double, int, int *, int *)'
| |-ParmVarDecl 0x2a7b4a661a8 <col:83, col:90> col:90 _Val 'double'
| |-ParmVarDecl 0x2a7b4a66228 <col:101, col:105> col:105 _NumOfDigits 'int'
| |-ParmVarDecl 0x2a7b4a662a8 <col:125, col:131> col:131 _PtDec 'int *'
| |-ParmVarDecl 0x2a7b4a66328 <col:145, col:151> col:151 _PtSign 'int *'
| `-DeprecatedAttr 0x2a7b4a665a0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _ecvt_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2a7b4a66ad8 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:781:28, col:186> col:44 _fcvt_s 'errno_t (char *, size_t, double, int, int *, int *) __attribute__((cdecl))':'errno_t (char *, size_t, double, int, int *, int *)'
| |-ParmVarDecl 0x2a7b4a666e8 <col:74, col:81> col:81 _DstBuf 'char *'
| |-ParmVarDecl 0x2a7b4a66760 <col:95, col:102> col:102 _Size 'size_t':'unsigned long long'
| |-ParmVarDecl 0x2a7b4a667e0 <col:114, col:121> col:121 _Val 'double'
| |-ParmVarDecl 0x2a7b4a66860 <col:132, col:136> col:136 _NumOfDec 'int'
| |-ParmVarDecl 0x2a7b4a668e0 <col:153, col:159> col:159 _PtDec 'int *'
| `-ParmVarDecl 0x2a7b4a66960 <col:173, col:179> col:179 _PtSign 'int *'
|-FunctionDecl 0x2a7b4a66f70 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:783:155> col:72 _fcvt 'char *(double, int, int *, int *) __attribute__((cdecl))':'char *(double, int, int *, int *)'
| |-ParmVarDecl 0x2a7b4a66cb0 <col:83, col:90> col:90 _Val 'double'
| |-ParmVarDecl 0x2a7b4a66d30 <col:101, col:105> col:105 _NumOfDec 'int'
| |-ParmVarDecl 0x2a7b4a66db0 <col:122, col:128> col:128 _PtDec 'int *'
| |-ParmVarDecl 0x2a7b4a66e30 <col:142, col:148> col:148 _PtSign 'int *'
| `-DeprecatedAttr 0x2a7b4a67030 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _fcvt_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2a7b4a674f8 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:784:9, col:129> col:25 _gcvt_s 'errno_t (char *, size_t, double, int) __attribute__((cdecl))':'errno_t (char *, size_t, double, int)'
| |-ParmVarDecl 0x2a7b4a67178 <col:55, col:62> col:62 _DstBuf 'char *'
| |-ParmVarDecl 0x2a7b4a671f0 <col:76, col:83> col:83 _Size 'size_t':'unsigned long long'
| |-ParmVarDecl 0x2a7b4a67270 <col:95, col:102> col:102 _Val 'double'
| `-ParmVarDecl 0x2a7b4a672f0 <col:113, col:117> col:117 _NumOfDigits 'int'
|-FunctionDecl 0x2a7b4a67948 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:786:141> col:57 _gcvt 'char *(double, int, char *) __attribute__((cdecl))':'char *(double, int, char *)'
| |-ParmVarDecl 0x2a7b4a676a8 <col:68, col:75> col:75 _Val 'double'
| |-ParmVarDecl 0x2a7b4a67728 <col:86, col:90> col:90 _NumOfDigits 'int'
| |-ParmVarDecl 0x2a7b4a677a8 <col:127, col:134> col:134 _DstBuf 'char *'
| `-DeprecatedAttr 0x2a7b4a67a00 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _gcvt_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2a7b4a60d90 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:788:24, col:91> col:36 _atodbl 'int (_CRT_DOUBLE *, char *) __attribute__((cdecl))':'int (_CRT_DOUBLE *, char *)'
| |-ParmVarDecl 0x2a7b4a60b68 <col:50, col:64> col:64 _Result '_CRT_DOUBLE *'
| `-ParmVarDecl 0x2a7b4a60be8 <col:80, col:87> col:87 _Str 'char *'
|-FunctionDecl 0x2a7b4a61110 <line:789:24, col:89> col:36 _atoldbl 'int (_LDOUBLE *, char *) __attribute__((cdecl))':'int (_LDOUBLE *, char *)'
| |-ParmVarDecl 0x2a7b4a60ee8 <col:51, col:62> col:62 _Result '_LDOUBLE *'
| `-ParmVarDecl 0x2a7b4a60f68 <col:78, col:85> col:85 _Str 'char *'
|-FunctionDecl 0x2a7b4a61490 <line:790:24, col:96> col:36 _atoflt 'int (_CRT_FLOAT *, const char *) __attribute__((cdecl))':'int (_CRT_FLOAT *, const char *)'
| |-ParmVarDecl 0x2a7b4a61268 <col:50, col:63> col:63 _Result '_CRT_FLOAT *'
| `-ParmVarDecl 0x2a7b4a612e8 <col:79, col:92> col:92 _Str 'const char *'
|-FunctionDecl 0x2a7b4a61838 <line:791:24, col:121> col:36 _atodbl_l 'int (_CRT_DOUBLE *, char *, _locale_t) __attribute__((cdecl))':'int (_CRT_DOUBLE *, char *, _locale_t)'
| |-ParmVarDecl 0x2a7b4a61568 <col:52, col:66> col:66 _Result '_CRT_DOUBLE *'
| |-ParmVarDecl 0x2a7b4a615e8 <col:82, col:89> col:89 _Str 'char *'
| `-ParmVarDecl 0x2a7b4a61660 <col:104, col:114> col:114 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2a7b4a69ca8 <line:792:24, col:119> col:36 _atoldbl_l 'int (_LDOUBLE *, char *, _locale_t) __attribute__((cdecl))':'int (_LDOUBLE *, char *, _locale_t)'
| |-ParmVarDecl 0x2a7b4a61918 <col:53, col:64> col:64 _Result '_LDOUBLE *'
| |-ParmVarDecl 0x2a7b4a61998 <col:80, col:87> col:87 _Str 'char *'
| `-ParmVarDecl 0x2a7b4a61a10 <col:102, col:112> col:112 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2a7b4a6a058 <line:793:24, col:126> col:36 _atoflt_l 'int (_CRT_FLOAT *, const char *, _locale_t) __attribute__((cdecl))':'int (_CRT_FLOAT *, const char *, _locale_t)'
| |-ParmVarDecl 0x2a7b4a69d88 <col:52, col:65> col:65 _Result '_CRT_FLOAT *'
| |-ParmVarDecl 0x2a7b4a69e08 <col:81, col:94> col:94 _Str 'const char *'
| `-ParmVarDecl 0x2a7b4a69e80 <col:109, col:119> col:119 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2a7b4a6a330 <line:794:46> col:46 implicit _lrotl 'unsigned long (unsigned long, int)' extern
| |-ParmVarDecl 0x2a7b4a6a3d0 <<invalid sloc>> <invalid sloc> 'unsigned long'
| |-ParmVarDecl 0x2a7b4a6a438 <<invalid sloc>> <invalid sloc> 'int'
| `-NoThrowAttr 0x2a7b4a6a4b0 <col:46> Implicit
|-FunctionDecl 0x2a7b4a6a508 prev 0x2a7b4a6a330 <col:24, col:93> col:46 _lrotl 'unsigned long (unsigned long, int)'
| |-ParmVarDecl 0x2a7b4a6a140 <col:58, col:72> col:72 _Val 'unsigned long'
| |-ParmVarDecl 0x2a7b4a6a1c0 <col:83, col:87> col:87 _Shift 'int'
| `-NoThrowAttr 0x2a7b4a6a600 <col:46> Inherited Implicit
|-FunctionDecl 0x2a7b4a6a7c0 <line:795:46> col:46 implicit _lrotr 'unsigned long (unsigned long, int)' extern
| |-ParmVarDecl 0x2a7b4a6a860 <<invalid sloc>> <invalid sloc> 'unsigned long'
| |-ParmVarDecl 0x2a7b4a6a8c8 <<invalid sloc>> <invalid sloc> 'int'
| `-NoThrowAttr 0x2a7b4a6a940 <col:46> Implicit
|-FunctionDecl 0x2a7b4a6a998 prev 0x2a7b4a6a7c0 <col:24, col:93> col:46 _lrotr 'unsigned long (unsigned long, int)'
| |-ParmVarDecl 0x2a7b4a6a640 <col:58, col:72> col:72 _Val 'unsigned long'
| |-ParmVarDecl 0x2a7b4a6a6c0 <col:83, col:87> col:87 _Shift 'int'
| `-NoThrowAttr 0x2a7b4a6aa90 <col:46> Inherited Implicit
|-FunctionDecl 0x2a7b4a6bfd8 <line:796:40, line:797:37> line:796:58 _makepath_s 'errno_t (char *, size_t, const char *, const char *, const char *, const char *) __attribute__((cdecl))':'errno_t (char *, size_t, const char *, const char *, const char *, const char *)'
| |-ParmVarDecl 0x2a7b4a6aad0 <col:99, col:106> col:106 _PathResult 'char *'
| |-ParmVarDecl 0x2a7b4a6ab48 <col:124, col:131> col:131 _SizeInWords 'size_t':'unsigned long long'
| |-ParmVarDecl 0x2a7b4a6bbf8 <col:156, col:169> col:169 _Drive 'const char *'
| |-ParmVarDecl 0x2a7b4a6bc78 <col:188, col:201> col:201 _Dir 'const char *'
| |-ParmVarDecl 0x2a7b4a6bcf8 <col:218, col:231> col:231 _Filename 'const char *'
| `-ParmVarDecl 0x2a7b4a6bd78 <line:797:20, col:33> col:33 _Ext 'const char *'
|-FunctionDecl 0x2a7b4a6c580 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1948:181> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:799:78 _makepath 'void (char *, const char *, const char *, const char *, const char *) __attribute__((cdecl))':'void (char *, const char *, const char *, const char *, const char *)'
| |-ParmVarDecl 0x2a7b4a6c198 <col:113, col:119> col:119 _Path 'char *'
| |-ParmVarDecl 0x2a7b4a6c218 <col:137, col:151> col:151 _Drive 'const char *'
| |-ParmVarDecl 0x2a7b4a6c298 <col:170, col:184> col:184 _Dir 'const char *'
| |-ParmVarDecl 0x2a7b4a6c318 <col:201, col:215> col:215 _Filename 'const char *'
| |-ParmVarDecl 0x2a7b4a6c398 <col:237, col:251> col:251 _Ext 'const char *'
| `-DeprecatedAttr 0x2a7b4a6c648 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _makepath_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2a7b4a6c920 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:826:9, col:59> col:27 _onexit '_onexit_t (_onexit_t) __attribute__((cdecl))':'_onexit_t (_onexit_t)'
| `-ParmVarDecl 0x2a7b4a6c7b0 <col:44, col:54> col:54 _Func '_onexit_t':'int (*)(void) __attribute__((cdecl))'
|-FunctionDecl 0x2a7b4a6cb40 <line:831:9, col:60> col:22 perror 'void (const char *) __attribute__((cdecl))':'void (const char *)'
| `-ParmVarDecl 0x2a7b4a6c9f8 <col:40, col:53> col:53 _ErrMsg 'const char *'
|-FunctionDecl 0x2a7b4a6cd08 <line:838:24, col:77> col:39 _putenv 'int (const char *) __attribute__((cdecl))':'int (const char *)'
| `-ParmVarDecl 0x2a7b4a6cc28 <col:54, col:67> col:67 _EnvString 'const char *'
|-FunctionDecl 0x2a7b4a6cfc8 <line:839:28, col:107> col:44 _putenv_s 'errno_t (const char *, const char *) __attribute__((cdecl))':'errno_t (const char *, const char *)'
| |-ParmVarDecl 0x2a7b4a6cde0 <col:61, col:74> col:74 _Name 'const char *'
| `-ParmVarDecl 0x2a7b4a6ce60 <col:88, col:101> col:101 _Value 'const char *'
|-FunctionDecl 0x2a7b4a6d290 <line:842:30> col:30 implicit _rotl 'unsigned int (unsigned int, int)' extern
| |-ParmVarDecl 0x2a7b4a6d330 <<invalid sloc>> <invalid sloc> 'unsigned int'
| |-ParmVarDecl 0x2a7b4a6d398 <<invalid sloc>> <invalid sloc> 'int'
| `-NoThrowAttr 0x2a7b4a6d410 <col:30> Implicit
|-FunctionDecl 0x2a7b4a6d468 prev 0x2a7b4a6d290 <col:9, col:75> col:30 _rotl 'unsigned int (unsigned int, int)'
| |-ParmVarDecl 0x2a7b4a6d0a8 <col:41, col:54> col:54 _Val 'unsigned int'
| |-ParmVarDecl 0x2a7b4a6d128 <col:65, col:69> col:69 _Shift 'int'
| `-NoThrowAttr 0x2a7b4a6d560 <col:30> Inherited Implicit
|-FunctionDecl 0x2a7b4a6d790 <line:843:34> col:34 implicit _rotl64 'unsigned long long (unsigned long long, int)' extern
| |-ParmVarDecl 0x2a7b4a6d830 <<invalid sloc>> <invalid sloc> 'unsigned long long'
| |-ParmVarDecl 0x2a7b4a6d898 <<invalid sloc>> <invalid sloc> 'int'
| `-NoThrowAttr 0x2a7b4a6d910 <col:34> Implicit
|-FunctionDecl 0x2a7b4a6d968 prev 0x2a7b4a6d790 <col:9, col:85> col:34 _rotl64 'unsigned long long (unsigned long long, int)'
| |-ParmVarDecl 0x2a7b4a6d5a0 <col:47, col:64> col:64 _Val 'unsigned long long'
| |-ParmVarDecl 0x2a7b4a6d620 <col:75, col:79> col:79 _Shift 'int'
| `-NoThrowAttr 0x2a7b4a6da60 <col:34> Inherited Implicit
|-FunctionDecl 0x2a7b4a6ec50 <line:844:30> col:30 implicit _rotr 'unsigned int (unsigned int, int)' extern
| |-ParmVarDecl 0x2a7b4a6ecf0 <<invalid sloc>> <invalid sloc> 'unsigned int'
| |-ParmVarDecl 0x2a7b4a6ed58 <<invalid sloc>> <invalid sloc> 'int'
| `-NoThrowAttr 0x2a7b4a6edd0 <col:30> Implicit
|-FunctionDecl 0x2a7b4a6ee28 prev 0x2a7b4a6ec50 <col:9, col:75> col:30 _rotr 'unsigned int (unsigned int, int)'
| |-ParmVarDecl 0x2a7b4a6daa0 <col:41, col:54> col:54 _Val 'unsigned int'
| |-ParmVarDecl 0x2a7b4a6db20 <col:65, col:69> col:69 _Shift 'int'
| `-NoThrowAttr 0x2a7b4a6ef20 <col:30> Inherited Implicit
|-FunctionDecl 0x2a7b4a6f0e0 <line:845:34> col:34 implicit _rotr64 'unsigned long long (unsigned long long, int)' extern
| |-ParmVarDecl 0x2a7b4a6f180 <<invalid sloc>> <invalid sloc> 'unsigned long long'
| |-ParmVarDecl 0x2a7b4a6f1e8 <<invalid sloc>> <invalid sloc> 'int'
| `-NoThrowAttr 0x2a7b4a6f260 <col:34> Implicit
|-FunctionDecl 0x2a7b4a6f2b8 prev 0x2a7b4a6f0e0 <col:9, col:85> col:34 _rotr64 'unsigned long long (unsigned long long, int)'
| |-ParmVarDecl 0x2a7b4a6ef60 <col:47, col:64> col:64 _Val 'unsigned long long'
| |-ParmVarDecl 0x2a7b4a6efe0 <col:75, col:79> col:79 _Shift 'int'
| `-NoThrowAttr 0x2a7b4a6f3b0 <col:34> Inherited Implicit
|-FunctionDecl 0x2a7b4a6f768 <line:849:9, col:171> col:25 _searchenv_s 'errno_t (const char *, const char *, char *, size_t) __attribute__((cdecl))':'errno_t (const char *, const char *, char *, size_t)'
| |-ParmVarDecl 0x2a7b4a6f3f0 <col:45, col:58> col:58 _Filename 'const char *'
| |-ParmVarDecl 0x2a7b4a6f470 <col:76, col:89> col:89 _EnvVar 'const char *'
| |-ParmVarDecl 0x2a7b4a6f4f0 <col:127, col:134> col:134 _ResultPath 'char *'
| `-ParmVarDecl 0x2a7b4a6f568 <col:152, col:159> col:159 _SizeInBytes 'size_t':'unsigned long long'
|-FunctionDecl 0x2a7b4a6dc00 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1954:149> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:851:78 _searchenv 'void (const char *, const char *, char *) __attribute__((cdecl))':'void (const char *, const char *, char *)'
| |-ParmVarDecl 0x2a7b4a6f918 <col:97, col:111> col:111 _Filename 'const char *'
| |-ParmVarDecl 0x2a7b4a6f998 <col:129, col:143> col:143 _EnvVar 'const char *'
| |-ParmVarDecl 0x2a7b4a6fa18 <col:176, col:182> col:182 _ResultPath 'char *'
| `-DeprecatedAttr 0x2a7b4a6dcb8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _searchenv_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2a7b4a6e2a0 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:854:261> col:62 _splitpath 'void (const char *, char *, char *, char *, char *) __attribute__((cdecl))':'void (const char *, char *, char *, char *, char *)'
| |-ParmVarDecl 0x2a7b4a6dec0 <col:80, col:93> col:93 _FullPath 'const char *'
| |-ParmVarDecl 0x2a7b4a6df40 <col:129, col:136> col:136 _Drive 'char *'
| |-ParmVarDecl 0x2a7b4a6dfc0 <col:169, col:176> col:176 _Dir 'char *'
| |-ParmVarDecl 0x2a7b4a6e040 <col:207, col:214> col:214 _Filename 'char *'
| |-ParmVarDecl 0x2a7b4a6e0c0 <col:250, col:257> col:257 _Ext 'char *'
| `-DeprecatedAttr 0x2a7b4a6e368 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _splitpath_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2a7b4a68bb0 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:855:40, line:859:79> line:855:57 _splitpath_s 'errno_t (const char *, char *, size_t, char *, size_t, char *, size_t, char *, size_t) __attribute__((cdecl))':'errno_t (const char *, char *, size_t, char *, size_t, char *, size_t, char *, size_t)'
| |-ParmVarDecl 0x2a7b4a6e4b0 <col:77, col:90> col:90 _FullPath 'const char *'
| |-ParmVarDecl 0x2a7b4a6e530 <line:856:48, col:55> col:55 _Drive 'char *'
| |-ParmVarDecl 0x2a7b4a6e5a8 <col:68, col:75> col:75 _DriveSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x2a7b4a6e628 <line:857:46, col:53> col:53 _Dir 'char *'
| |-ParmVarDecl 0x2a7b4a6e6a0 <col:64, col:71> col:71 _DirSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x2a7b4a6e720 <line:858:51, col:58> col:58 _Filename 'char *'
| |-ParmVarDecl 0x2a7b4a6e798 <col:74, col:81> col:81 _FilenameSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x2a7b4a6e818 <line:859:46, col:53> col:53 _Ext 'char *'
| `-ParmVarDecl 0x2a7b4a6e890 <col:64, col:71> col:71 _ExtSize 'size_t':'unsigned long long'
|-FunctionDecl 0x2a7b4a68f60 <line:862:9, col:204> col:24 _swab 'void (char *, char *, int) __attribute__((cdecl))':'void (char *, char *, int)'
| |-ParmVarDecl 0x2a7b4a68cc8 <col:95, col:102> col:102 _Buf1 'char *'
| |-ParmVarDecl 0x2a7b4a68d48 <col:174, col:181> col:181 _Buf2 'char *'
| `-ParmVarDecl 0x2a7b4a68dc8 <col:188, col:192> col:192 _SizeInBytes 'int'
|-FunctionDecl 0x2a7b4a69248 <line:873:24, col:161> col:42 _wfullpath 'wchar_t *(wchar_t *, const wchar_t *, size_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, const wchar_t *, size_t)'
| |-ParmVarDecl 0x2a7b4a69040 <col:86, col:96> col:96 _FullPath 'wchar_t *'
| |-ParmVarDecl 0x2a7b4a690b8 <col:114, col:130> col:130 _Path 'const wchar_t *'
| `-ParmVarDecl 0x2a7b4a69130 <col:142, col:149> col:149 _SizeInWords 'size_t':'unsigned long long'
|-FunctionDecl 0x2a7b4a697e8 <line:879:40, line:880:40> line:879:56 _wmakepath_s 'errno_t (wchar_t *, size_t, const wchar_t *, const wchar_t *, const wchar_t *, const wchar_t *) __attribute__((cdecl))':'errno_t (wchar_t *, size_t, const wchar_t *, const wchar_t *, const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x2a7b4a69328 <col:91, col:101> col:101 _PathResult 'wchar_t *'
| |-ParmVarDecl 0x2a7b4a693a0 <col:119, col:126> col:126 _SIZE 'size_t':'unsigned long long'
| |-ParmVarDecl 0x2a7b4a69418 <col:144, col:160> col:160 _Drive 'const wchar_t *'
| |-ParmVarDecl 0x2a7b4a69490 <col:179, col:195> col:195 _Dir 'const wchar_t *'
| |-ParmVarDecl 0x2a7b4a69508 <col:212, col:228> col:228 _Filename 'const wchar_t *'
| `-ParmVarDecl 0x2a7b4a69580 <line:880:20, col:36> col:36 _Ext 'const wchar_t *'
|-FunctionDecl 0x2a7b4a67dd0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1948:181> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:882:78 _wmakepath 'void (wchar_t *, const wchar_t *, const wchar_t *, const wchar_t *, const wchar_t *) __attribute__((cdecl))':'void (wchar_t *, const wchar_t *, const wchar_t *, const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x2a7b4a699a0 <col:114, col:123> col:123 _ResultPath 'wchar_t *'
| |-ParmVarDecl 0x2a7b4a69a18 <col:147, col:164> col:164 _Drive 'const wchar_t *'
| |-ParmVarDecl 0x2a7b4a69a90 <col:183, col:200> col:200 _Dir 'const wchar_t *'
| |-ParmVarDecl 0x2a7b4a69b08 <col:217, col:234> col:234 _Filename 'const wchar_t *'
| |-ParmVarDecl 0x2a7b4a67ba0 <col:256, col:273> col:273 _Ext 'const wchar_t *'
| `-DeprecatedAttr 0x2a7b4a67e98 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wmakepath_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2a7b4a68150 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:885:9, col:65> col:22 _wperror 'void (const wchar_t *) __attribute__((cdecl))':'void (const wchar_t *)'
| `-ParmVarDecl 0x2a7b4a67fd8 <col:42, col:58> col:58 _ErrMsg 'const wchar_t *'
|-FunctionDecl 0x2a7b4a68300 <line:889:24, col:81> col:39 _wputenv 'int (const wchar_t *) __attribute__((cdecl))':'int (const wchar_t *)'
| `-ParmVarDecl 0x2a7b4a68220 <col:55, col:71> col:71 _EnvString 'const wchar_t *'
|-FunctionDecl 0x2a7b4a685a8 <line:890:28, col:114> col:44 _wputenv_s 'errno_t (const wchar_t *, const wchar_t *) __attribute__((cdecl))':'errno_t (const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x2a7b4a683d0 <col:62, col:78> col:78 _Name 'const wchar_t *'
| `-ParmVarDecl 0x2a7b4a68448 <col:92, col:108> col:108 _Value 'const wchar_t *'
|-FunctionDecl 0x2a7b4a689e8 <line:891:9, col:181> col:25 _wsearchenv_s 'errno_t (const wchar_t *, const wchar_t *, wchar_t *, size_t) __attribute__((cdecl))':'errno_t (const wchar_t *, const wchar_t *, wchar_t *, size_t)'
| |-ParmVarDecl 0x2a7b4a68680 <col:46, col:62> col:62 _Filename 'const wchar_t *'
| |-ParmVarDecl 0x2a7b4a686f8 <col:80, col:96> col:96 _EnvVar 'const wchar_t *'
| |-ParmVarDecl 0x2a7b4a68770 <col:134, col:144> col:144 _ResultPath 'wchar_t *'
| `-ParmVarDecl 0x2a7b4a687e8 <col:162, col:169> col:169 _SizeInWords 'size_t':'unsigned long long'
|-FunctionDecl 0x2a7b4a73f20 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1954:149> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:893:78 _wsearchenv 'void (const wchar_t *, const wchar_t *, wchar_t *) __attribute__((cdecl))':'void (const wchar_t *, const wchar_t *, wchar_t *)'
| |-ParmVarDecl 0x2a7b4a73c60 <col:98, col:115> col:115 _Filename 'const wchar_t *'
| |-ParmVarDecl 0x2a7b4a73cd8 <col:133, col:150> col:150 _EnvVar 'const wchar_t *'
| |-ParmVarDecl 0x2a7b4a73d50 <col:183, col:192> col:192 _ResultPath 'wchar_t *'
| `-DeprecatedAttr 0x2a7b4a73fd8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wsearchenv_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2a7b4a745f0 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:896:278> col:63 _wsplitpath 'void (const wchar_t *, wchar_t *, wchar_t *, wchar_t *, wchar_t *) __attribute__((cdecl))':'void (const wchar_t *, wchar_t *, wchar_t *, wchar_t *, wchar_t *)'
| |-ParmVarDecl 0x2a7b4a741d8 <col:82, col:98> col:98 _FullPath 'const wchar_t *'
| |-ParmVarDecl 0x2a7b4a74250 <col:134, col:144> col:144 _Drive 'wchar_t *'
| |-ParmVarDecl 0x2a7b4a742c8 <col:177, col:187> col:187 _Dir 'wchar_t *'
| |-ParmVarDecl 0x2a7b4a74340 <col:218, col:228> col:228 _Filename 'wchar_t *'
| |-ParmVarDecl 0x2a7b4a743b8 <col:264, col:274> col:274 _Ext 'wchar_t *'
| `-DeprecatedAttr 0x2a7b4a746b8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wsplitpath_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2a7b4a74ed0 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:897:21, line:901:82> line:897:37 _wsplitpath_s 'errno_t (const wchar_t *, wchar_t *, size_t, wchar_t *, size_t, wchar_t *, size_t, wchar_t *, size_t) __attribute__((cdecl))':'errno_t (const wchar_t *, wchar_t *, size_t, wchar_t *, size_t, wchar_t *, size_t, wchar_t *, size_t)'
| |-ParmVarDecl 0x2a7b4a747f8 <col:58, col:74> col:74 _FullPath 'const wchar_t *'
| |-ParmVarDecl 0x2a7b4a74870 <line:898:48, col:58> col:58 _Drive 'wchar_t *'
| |-ParmVarDecl 0x2a7b4a748e8 <col:71, col:78> col:78 _DriveSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x2a7b4a74960 <line:899:46, col:56> col:56 _Dir 'wchar_t *'
| |-ParmVarDecl 0x2a7b4a749d8 <col:67, col:74> col:74 _DirSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x2a7b4a74a50 <line:900:51, col:61> col:61 _Filename 'wchar_t *'
| |-ParmVarDecl 0x2a7b4a74ac8 <col:77, col:84> col:84 _FilenameSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x2a7b4a74b40 <line:901:46, col:56> col:56 _Ext 'wchar_t *'
| `-ParmVarDecl 0x2a7b4a74bb8 <col:67, col:74> col:74 _ExtSize 'size_t':'unsigned long long'
|-FunctionDecl 0x2a7b4a751f0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:909:78> col:50 _seterrormode 'void (int) __attribute__((cdecl))':'void (int)'
| |-ParmVarDecl 0x2a7b4a750e8 <col:69, col:73> col:73 _Mode 'int'
| `-DeprecatedAttr 0x2a7b4a75298 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable has been superceded by newer library or operating system functionality. Consider using SetErrorMode instead. See online help for details." ""
|-FunctionDecl 0x2a7b4a75688 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:910:97> col:42 _beep 'void (unsigned int, unsigned int) __attribute__((cdecl))':'void (unsigned int, unsigned int)'
| |-ParmVarDecl 0x2a7b4a754a8 <col:53, col:62> col:62 _Frequency 'unsigned int'
| |-ParmVarDecl 0x2a7b4a75528 <col:79, col:88> col:88 _Duration 'unsigned int'
| `-DeprecatedAttr 0x2a7b4a75738 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable has been superceded by newer library or operating system functionality. Consider using Beep instead. See online help for details." ""
|-FunctionDecl 0x2a7b4a75a80 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:911:78> col:43 _sleep 'void (unsigned long) __attribute__((cdecl))':'void (unsigned long)'
| |-ParmVarDecl 0x2a7b4a75940 <col:55, col:69> col:69 _Duration 'unsigned long'
| `-DeprecatedAttr 0x2a7b4a75b28 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable has been superceded by newer library or operating system functionality. Consider using Sleep instead. See online help for details." ""
|-FunctionDecl 0x2a7b4a710a0 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:934:187> col:102 ecvt 'char *(double, int, int *, int *) __attribute__((cdecl))':'char *(double, int, int *, int *)'
| |-ParmVarDecl 0x2a7b4a70de0 <col:112, col:119> col:119 _Val 'double'
| |-ParmVarDecl 0x2a7b4a70e60 <col:130, col:134> col:134 _NumOfDigits 'int'
| |-ParmVarDecl 0x2a7b4a70ee0 <col:154, col:160> col:160 _PtDec 'int *'
| |-ParmVarDecl 0x2a7b4a70f60 <col:174, col:180> col:180 _PtSign 'int *'
| |-DeprecatedAttr 0x2a7b4a71160 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _ecvt. See online help for details." ""
| `-DeprecatedAttr 0x2a7b4a71258 <col:47, col:63> "This function or variable may be unsafe. Consider using _ecvt_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2a7b4a71790 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:935:184> col:102 fcvt 'char *(double, int, int *, int *) __attribute__((cdecl))':'char *(double, int, int *, int *)'
| |-ParmVarDecl 0x2a7b4a714d0 <col:112, col:119> col:119 _Val 'double'
| |-ParmVarDecl 0x2a7b4a71550 <col:130, col:134> col:134 _NumOfDec 'int'
| |-ParmVarDecl 0x2a7b4a715d0 <col:151, col:157> col:157 _PtDec 'int *'
| |-ParmVarDecl 0x2a7b4a71650 <col:171, col:177> col:177 _PtSign 'int *'
| |-DeprecatedAttr 0x2a7b4a71850 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _fcvt. See online help for details." ""
| `-DeprecatedAttr 0x2a7b4a71948 <col:47, col:63> "This function or variable may be unsafe. Consider using _fcvt_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2a7b4a6fdd8 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:936:179> col:96 gcvt 'char *(double, int, char *) __attribute__((cdecl))':'char *(double, int, char *)'
| |-ParmVarDecl 0x2a7b4a71bc0 <col:106, col:113> col:113 _Val 'double'
| |-ParmVarDecl 0x2a7b4a6fc38 <col:124, col:128> col:128 _NumOfDigits 'int'
| |-ParmVarDecl 0x2a7b4a6fcb8 <col:165, col:172> col:172 _DstBuf 'char *'
| |-DeprecatedAttr 0x2a7b4a6fe90 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _gcvt. See online help for details." ""
| `-DeprecatedAttr 0x2a7b4a6ff88 <col:47, col:63> "This function or variable may be unsafe. Consider using _fcvt_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2a7b4a70420 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:937:170> col:96 itoa 'char *(int, char *, int) __attribute__((cdecl))':'char *(int, char *, int)'
| |-ParmVarDecl 0x2a7b4a70200 <col:106, col:110> col:110 _Val 'int'
| |-ParmVarDecl 0x2a7b4a70280 <col:139, col:146> col:146 _DstBuf 'char *'
| |-ParmVarDecl 0x2a7b4a70300 <col:160, col:164> col:164 _Radix 'int'
| |-DeprecatedAttr 0x2a7b4a704d8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _itoa. See online help for details." ""
| `-DeprecatedAttr 0x2a7b4a705d0 <col:47, col:63> "This function or variable may be unsafe. Consider using _itoa_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2a7b4a70a68 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:938:171> col:96 ltoa 'char *(long, char *, int) __attribute__((cdecl))':'char *(long, char *, int)'
| |-ParmVarDecl 0x2a7b4a70848 <col:106, col:111> col:111 _Val 'long'
| |-ParmVarDecl 0x2a7b4a708c8 <col:140, col:147> col:147 _DstBuf 'char *'
| |-ParmVarDecl 0x2a7b4a70948 <col:161, col:165> col:165 _Radix 'int'
| |-DeprecatedAttr 0x2a7b4a70b20 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _ltoa. See online help for details." ""
| `-DeprecatedAttr 0x2a7b4a76c90 <col:47, col:63> "This function or variable may be unsafe. Consider using _ltoa_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2a7b4a76f28 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:941:108> col:71 putenv 'int (const char *) __attribute__((cdecl))':'int (const char *)'
| |-ParmVarDecl 0x2a7b4a76e48 <col:85, col:98> col:98 _EnvString 'const char *'
| `-DeprecatedAttr 0x2a7b4a76fd0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _putenv. See online help for details." ""
|-FunctionDecl 0x2a7b4a773b0 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:944:245> col:128 swab 'void (char *, char *, int) __attribute__((cdecl))':'void (char *, char *, int)'
| |-ParmVarDecl 0x2a7b4a77198 <col:165, col:172> col:172 _Buf1 'char *'
| |-ParmVarDecl 0x2a7b4a77218 <col:210, col:217> col:217 _Buf2 'char *'
| |-ParmVarDecl 0x2a7b4a77298 <col:229, col:233> col:233 _SizeInBytes 'int'
| `-DeprecatedAttr 0x2a7b4a77468 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _swab. See online help for details." ""
|-FunctionDecl 0x2a7b4a77950 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:945:181> col:96 ultoa 'char *(unsigned long, char *, int) __attribute__((cdecl))':'char *(unsigned long, char *, int)'
| |-ParmVarDecl 0x2a7b4a77730 <col:107, col:121> col:121 _Val 'unsigned long'
| |-ParmVarDecl 0x2a7b4a777b0 <col:150, col:157> col:157 _Dstbuf 'char *'
| |-ParmVarDecl 0x2a7b4a77830 <col:171, col:175> col:175 _Radix 'int'
| |-DeprecatedAttr 0x2a7b4a77a08 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _ultoa. See online help for details." ""
| `-DeprecatedAttr 0x2a7b4a77b00 <col:47, col:63> "This function or variable may be unsafe. Consider using _ultoa_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2a7b4a77cf8 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:64:18, line:947:48> col:18 onexit '_onexit_t (_onexit_t) __attribute__((cdecl))':'_onexit_t (_onexit_t)'
| `-ParmVarDecl 0x2a7b4a77c10 <line:64:18, line:947:43> col:43 _Func '_onexit_t':'int (*)(void) __attribute__((cdecl))'
|-RecordDecl 0x2a7b4a77db8 <.//openssl//file_jk/before\crypto\ec/ec_lcl.h:52:1, line:173:1> line:52:8 struct ec_method_st definition
| |-FieldDecl 0x2a7b4a77e88 <line:54:5, col:9> col:9 flags 'int'
| |-FieldDecl 0x2a7b4a77ef8 <line:56:5, col:9> col:9 field_type 'int'
| |-FieldDecl 0x2a7b4a78098 <line:61:5, col:34> col:11 group_init 'int (*)(int *)'
| |-FieldDecl 0x2a7b4a78260 <line:62:5, col:37> col:12 group_finish 'void (*)(int *)'
| |-FieldDecl 0x2a7b4a78370 <line:63:5, col:43> col:12 group_clear_finish 'void (*)(int *)'
| |-FieldDecl 0x2a7b4a785e0 <line:64:5, col:52> col:11 group_copy 'int (*)(int *, const int *)'
| |-FieldDecl 0x2a7b4a789f8 <line:67:5, line:68:54> line:67:11 group_set_curve 'int (*)(int *, const int *, const int *, const int *, int *)'
| |-FieldDecl 0x2a7b4a71de8 <line:69:5, line:70:37> line:69:11 group_get_curve 'int (*)(const int *, int *, int *, int *, int *)'
| |-FieldDecl 0x2a7b4a71fb8 <line:72:5, col:46> col:11 group_get_degree 'int (*)(const int *)'
| |-FieldDecl 0x2a7b4a720d0 <line:73:5, col:46> col:11 group_order_bits 'int (*)(const int *)'
| |-FieldDecl 0x2a7b4a72340 <line:75:5, col:64> col:11 group_check_discriminant 'int (*)(const int *, int *)'
| |-FieldDecl 0x2a7b4a72458 <line:80:5, col:34> col:11 point_init 'int (*)(int *)'
| |-FieldDecl 0x2a7b4a72568 <line:81:5, col:37> col:12 point_finish 'void (*)(int *)'
| |-FieldDecl 0x2a7b4a72678 <line:82:5, col:43> col:12 point_clear_finish 'void (*)(int *)'
| |-FieldDecl 0x2a7b4a72818 <line:83:5, col:52> col:11 point_copy 'int (*)(int *, const int *)'
| |-FieldDecl 0x2a7b4a729b8 <line:92:5, col:63> col:11 point_set_to_infinity 'int (*)(const int *, int *)'
| |-FieldDecl 0x2a7b4a72e90 <line:93:5, line:96:76> line:93:11 point_set_Jprojective_coordinates_GFp 'int (*)(const int *, int *, const int *, const int *, const int *, int *)'
| |-FieldDecl 0x2a7b4a73340 <line:97:5, line:100:59> line:97:11 point_get_Jprojective_coordinates_GFp 'int (*)(const int *, const int *, int *, int *, int *, int *)'
| |-FieldDecl 0x2a7b4a73758 <line:101:5, line:103:50> line:101:11 point_set_affine_coordinates 'int (*)(const int *, int *, const int *, const int *, int *)'
| |-FieldDecl 0x2a7b4a73b68 <line:104:5, line:105:72> line:104:11 point_get_affine_coordinates 'int (*)(const int *, const int *, int *, int *, int *)'
| |-FieldDecl 0x2a7b4a7b008 <line:106:5, line:108:54> line:106:11 point_set_compressed_coordinates 'int (*)(const int *, int *, const int *, int, int *)'
| |-FieldDecl 0x2a7b4a7b528 <line:110:5, line:112:46> line:110:14 point2oct 'size_t (*)(const int *, const int *, int, unsigned char *, size_t, int *)'
| |-FieldDecl 0x2a7b4a7b988 <line:113:5, line:114:43> line:113:11 oct2point 'int (*)(const int *, int *, const unsigned char *, size_t, int *)'
| |-FieldDecl 0x2a7b4a7bce0 <line:116:5, line:117:44> line:116:11 add 'int (*)(const int *, int *, const int *, const int *, int *)'
| |-FieldDecl 0x2a7b4a7c070 <line:118:5, col:75> col:11 dbl 'int (*)(const int *, int *, const int *, int *)'
| |-FieldDecl 0x2a7b4a7c368 <line:119:5, col:58> col:11 invert 'int (*)(const int *, int *, int *)'
| |-FieldDecl 0x2a7b4a7c5d0 <line:123:5, col:62> col:11 is_at_infinity 'int (*)(const int *, const int *)'
| |-FieldDecl 0x2a7b4a7c8c8 <line:124:5, col:69> col:11 is_on_curve 'int (*)(const int *, const int *, int *)'
| |-FieldDecl 0x2a7b4a7cc50 <line:125:5, line:126:31> line:125:11 point_cmp 'int (*)(const int *, const int *, const int *, int *)'
| |-FieldDecl 0x2a7b4a7eec8 <line:128:5, col:63> col:11 make_affine 'int (*)(const int *, int *, int *)'
| |-FieldDecl 0x2a7b4a7f340 <line:129:5, line:130:40> line:129:11 points_make_affine 'int (*)(const int *, size_t, int **, int *)'
| |-FieldDecl 0x2a7b4a7f978 <line:136:5, line:138:25> line:136:11 mul 'int (*)(const int *, int *, const int *, size_t, const int **, const int **, int *)'
| |-FieldDecl 0x2a7b4a7fbe0 <line:139:5, col:54> col:11 precompute_mult 'int (*)(int *, int *)'
| |-FieldDecl 0x2a7b4a7ccf0 <line:140:5, col:55> col:11 have_precompute_mult 'int (*)(const int *)'
| |-FieldDecl 0x2a7b4a7d028 <line:148:5, line:149:48> line:148:11 field_mul 'int (*)(const int *, int *, const int *, const int *, int *)'
| |-FieldDecl 0x2a7b4a7d2d8 <line:150:5, col:77> col:11 field_sqr 'int (*)(const int *, int *, const int *, int *)'
| |-FieldDecl 0x2a7b4a7d610 <line:151:5, line:152:48> line:151:11 field_div 'int (*)(const int *, int *, const int *, const int *, int *)'
| |-FieldDecl 0x2a7b4a7d8c0 <line:154:5, line:155:34> line:154:11 field_encode 'int (*)(const int *, int *, const int *, int *)'
| |-FieldDecl 0x2a7b4a7db70 <line:157:5, line:158:34> line:157:11 field_decode 'int (*)(const int *, int *, const int *, int *)'
| |-FieldDecl 0x2a7b4a7ddb8 <line:159:5, col:67> col:11 field_set_to_one 'int (*)(const int *, int *, int *)'
| |-FieldDecl 0x2a7b4a7e0e0 <line:161:5, col:75> col:14 priv2oct 'size_t (*)(const int *, unsigned char *, size_t)'
| |-FieldDecl 0x2a7b4a7e408 <line:162:5, col:72> col:11 oct2priv 'int (*)(int *, const unsigned char *, size_t)'
| |-FieldDecl 0x2a7b4a7e5a8 <line:163:5, col:61> col:11 set_private 'int (*)(int *, const int *)'
| |-FieldDecl 0x2a7b4a7e6c0 <line:164:5, col:32> col:11 keygen 'int (*)(int *)'
| |-FieldDecl 0x2a7b4a7e7d8 <line:165:5, col:40> col:11 keycheck 'int (*)(const int *)'
| |-FieldDecl 0x2a7b4a7e8f0 <line:166:5, col:35> col:11 keygenpub 'int (*)(int *)'
| |-FieldDecl 0x2a7b4a7ea90 <line:167:5, col:50> col:11 keycopy 'int (*)(int *, const int *)'
| |-FieldDecl 0x2a7b4a7eba0 <line:168:5, col:36> col:12 keyfinish 'void (*)(int *)'
| |-FieldDecl 0x2a7b4a80010 <line:170:5, line:171:72> line:170:11 ecdh_compute_key 'int (*)(unsigned char **, size_t *, const int *, const int *)'
| `-FieldDecl 0x2a7b4a80238 <line:172:5, col:77> col:11 blind_coordinates 'int (*)(const int *, int *, int *)'
|-RecordDecl 0x2a7b4a80290 <line:178:9, col:16> col:16 struct nistp224_pre_comp_st
|-TypedefDecl 0x2a7b4a803a8 <col:1, col:37> col:37 referenced NISTP224_PRE_COMP 'struct nistp224_pre_comp_st':'struct nistp224_pre_comp_st'
| `-ElaboratedType 0x2a7b4a80350 'struct nistp224_pre_comp_st' sugar
|   `-RecordType 0x2a7b4a80330 'struct nistp224_pre_comp_st'
|     `-Record 0x2a7b4a80290 'nistp224_pre_comp_st'
|-RecordDecl 0x2a7b4a80418 <line:179:9, col:16> col:16 struct nistp256_pre_comp_st
|-TypedefDecl 0x2a7b4a80528 <col:1, col:37> col:37 referenced NISTP256_PRE_COMP 'struct nistp256_pre_comp_st':'struct nistp256_pre_comp_st'
| `-ElaboratedType 0x2a7b4a804d0 'struct nistp256_pre_comp_st' sugar
|   `-RecordType 0x2a7b4a804b0 'struct nistp256_pre_comp_st'
|     `-Record 0x2a7b4c274e0 'nistp256_pre_comp_st'
|-RecordDecl 0x2a7b4a80598 <line:180:9, col:16> col:16 struct nistp521_pre_comp_st
|-TypedefDecl 0x2a7b4a806a8 <col:1, col:37> col:37 referenced NISTP521_PRE_COMP 'struct nistp521_pre_comp_st':'struct nistp521_pre_comp_st'
| `-ElaboratedType 0x2a7b4a80650 'struct nistp521_pre_comp_st' sugar
|   `-RecordType 0x2a7b4a80630 'struct nistp521_pre_comp_st'
|     `-Record 0x2a7b4a80598 'nistp521_pre_comp_st'
|-RecordDecl 0x2a7b4a80718 <line:181:9, col:16> col:16 struct nistz256_pre_comp_st
|-TypedefDecl 0x2a7b4a80828 <col:1, col:37> col:37 referenced NISTZ256_PRE_COMP 'struct nistz256_pre_comp_st':'struct nistz256_pre_comp_st'
| `-ElaboratedType 0x2a7b4a807d0 'struct nistz256_pre_comp_st' sugar
|   `-RecordType 0x2a7b4a807b0 'struct nistz256_pre_comp_st'
|     `-Record 0x2a7b4a80718 'nistz256_pre_comp_st'
|-RecordDecl 0x2a7b4a80898 <line:182:9, col:16> col:16 struct ec_pre_comp_st
|-TypedefDecl 0x2a7b4a809a8 <col:1, col:31> col:31 referenced EC_PRE_COMP 'struct ec_pre_comp_st':'struct ec_pre_comp_st'
| `-ElaboratedType 0x2a7b4a80950 'struct ec_pre_comp_st' sugar
|   `-RecordType 0x2a7b4a80930 'struct ec_pre_comp_st'
|     `-Record 0x2a7b4a80898 'ec_pre_comp_st'
|-RecordDecl 0x2a7b4a80a18 <line:184:1, line:249:1> line:184:8 invalid struct ec_group_st definition
| |-FieldDecl 0x2a7b4a80ae8 <line:185:5, col:22> col:22 invalid meth 'const int *'
| |-FieldDecl 0x2a7b4a80b58 <line:186:5, col:15> col:15 invalid generator 'int *'
| |-FieldDecl 0x2a7b4a80bc8 <line:187:5, col:13> col:13 invalid order 'int *'
| |-FieldDecl 0x2a7b4a80c38 <col:5, col:21> col:21 invalid cofactor 'int *'
| |-FieldDecl 0x2a7b4a80ca8 <line:188:5, col:9> col:9 curve_name 'int'
| |-FieldDecl 0x2a7b4a79cc0 <line:189:5, col:9> col:9 asn1_flag 'int'
| |-FieldDecl 0x2a7b4a79d30 <line:190:5, col:29> col:29 invalid asn1_form 'int'
| |-FieldDecl 0x2a7b4a79da0 <line:191:5, col:20> col:20 seed 'unsigned char *'
| |-FieldDecl 0x2a7b4a79e08 <line:193:5, col:12> col:12 seed_len 'size_t':'unsigned long long'
| |-FieldDecl 0x2a7b4a79e78 <line:203:5, col:13> col:13 invalid field 'int *'
| |-FieldDecl 0x2a7b4a79f70 <line:211:5, col:15> col:9 poly 'int [6]'
| |-FieldDecl 0x2a7b4a79fe0 <line:219:5, col:13> col:13 invalid a 'int *'
| |-FieldDecl 0x2a7b4a7a050 <col:5, col:17> col:17 invalid b 'int *'
| |-FieldDecl 0x2a7b4a7a0c0 <line:221:5, col:9> col:9 a_is_minus3 'int'
| |-FieldDecl 0x2a7b4a7a130 <line:223:5, col:11> col:11 field_data1 'void *'
| |-FieldDecl 0x2a7b4a7a1a0 <line:225:5, col:11> col:11 field_data2 'void *'
| |-FieldDecl 0x2a7b4a7a530 <line:227:5, line:228:36> line:227:11 field_mod_func 'int (*)(int *, const int *, const int *, int *)'
| |-FieldDecl 0x2a7b4a7a5a0 <line:230:5, col:18> col:18 invalid mont_data 'int *'
| |-EnumDecl 0x2a7b4a7a5f8 <line:237:5, line:241:5> line:237:5
| | |-EnumConstantDecl 0x2a7b4a7a6d0 <line:238:9> col:9 PCT_none 'int'
| | |-EnumConstantDecl 0x2a7b4a7a728 <line:239:9> col:9 PCT_nistp224 'int'
| | |-EnumConstantDecl 0x2a7b4a7a780 <col:23> col:23 referenced PCT_nistp256 'int'
| | |-EnumConstantDecl 0x2a7b4a7a7d8 <col:37> col:37 PCT_nistp521 'int'
| | |-EnumConstantDecl 0x2a7b4a7a830 <col:51> col:51 PCT_nistz256 'int'
| | `-EnumConstantDecl 0x2a7b4a7a888 <line:240:9> col:9 PCT_ec 'int'
| |-FieldDecl 0x2a7b4a7a938 <line:237:5, line:241:7> col:7 pre_comp_type 'enum (anonymous enum at .//openssl//file_jk/before\crypto\ec/ec_lcl.h:237:5)':'enum ec_group_st::(anonymous at .//openssl//file_jk/before\crypto\ec/ec_lcl.h:237:5)'
| |-RecordDecl 0x2a7b4a7a990 <line:242:5, line:248:5> line:242:5 union definition
| | |-FieldDecl 0x2a7b4a7aad8 <line:243:9, col:28> col:28 nistp224 'NISTP224_PRE_COMP *'
| | |-FieldDecl 0x2a7b4a7abb8 <line:244:9, col:28> col:28 nistp256 'NISTP256_PRE_COMP *'
| | |-FieldDecl 0x2a7b4a86d90 <line:245:9, col:28> col:28 nistp521 'NISTP521_PRE_COMP *'
| | |-FieldDecl 0x2a7b4a86e78 <line:246:9, col:28> col:28 nistz256 'NISTZ256_PRE_COMP *'
| | `-FieldDecl 0x2a7b4a86f58 <line:247:9, col:22> col:22 ec 'EC_PRE_COMP *'
| `-FieldDecl 0x2a7b4a87008 <line:242:5, line:248:7> col:7 pre_comp 'union (anonymous union at .//openssl//file_jk/before\crypto\ec/ec_lcl.h:242:5)':'union ec_group_st::(anonymous at .//openssl//file_jk/before\crypto\ec/ec_lcl.h:242:5)'
|-RecordDecl 0x2a7b4a87060 <line:256:1, line:269:1> line:256:8 invalid struct ec_key_st definition
| |-FieldDecl 0x2a7b4a87138 <line:257:5, col:26> col:26 invalid meth 'const int *'
| |-FieldDecl 0x2a7b4a871a8 <line:258:5, col:13> col:13 invalid engine 'int *'
| |-FieldDecl 0x2a7b4a87218 <line:259:5, col:9> col:9 version 'int'
| |-FieldDecl 0x2a7b4a87288 <line:260:5, col:15> col:15 invalid group 'int *'
| |-FieldDecl 0x2a7b4a872f8 <line:261:5, col:15> col:15 invalid pub_key 'int *'
| |-FieldDecl 0x2a7b4a87368 <line:262:5, col:13> col:13 invalid priv_key 'int *'
| |-FieldDecl 0x2a7b4a873d8 <line:263:5, col:18> col:18 enc_flag 'unsigned int'
| |-FieldDecl 0x2a7b4a87448 <line:264:5, col:29> col:29 invalid conv_form 'int'
| |-FieldDecl 0x2a7b4a874b8 <line:265:5, col:9> col:9 references 'int'
| |-FieldDecl 0x2a7b4a87528 <line:266:5, col:9> col:9 flags 'int'
| |-FieldDecl 0x2a7b4a87598 <line:267:5, col:20> col:20 invalid ex_data 'int'
| `-FieldDecl 0x2a7b4a87608 <line:268:5, col:20> col:20 invalid lock 'int *'
|-RecordDecl 0x2a7b4a87660 <line:271:1, line:285:1> line:271:8 invalid struct ec_point_st definition
| |-FieldDecl 0x2a7b4a87738 <line:272:5, col:22> col:22 invalid meth 'const int *'
| |-FieldDecl 0x2a7b4a877a8 <line:274:5, col:9> col:9 curve_name 'int'
| |-FieldDecl 0x2a7b4a87818 <line:279:5, col:13> col:13 invalid X 'int *'
| |-FieldDecl 0x2a7b4a87888 <line:280:5, col:13> col:13 invalid Y 'int *'
| |-FieldDecl 0x2a7b4a878f8 <line:281:5, col:13> col:13 invalid Z 'int *'
| `-FieldDecl 0x2a7b4a87968 <line:283:5, col:9> col:9 Z_is_one 'int'
|-FunctionDecl 0x2a7b4a87af8 <line:288:1, line:298:1> line:288:24 invalid ec_point_is_compat 'int (const int *, const int *)' static
| |-ParmVarDecl 0x2a7b4a879d8 <col:43, col:59> col:59 invalid point 'const int *'
| |-ParmVarDecl 0x2a7b4a87a58 <line:289:43, col:59> col:59 invalid group 'const int *'
| `-CompoundStmt 0x2a7b4a87cb0 <line:290:1, line:298:1>
|   |-IfStmt 0x2a7b4a87c60 <line:291:5, line:295:16>
|   | |-OpaqueValueExpr 0x2a7b4a87c48 <<invalid sloc>> '_Bool'
|   | `-ReturnStmt 0x2a7b4a87c38 <col:9, col:16>
|   |   `-IntegerLiteral 0x2a7b4a87c10 <col:16> 'int' 0
|   `-ReturnStmt 0x2a7b4a87ca0 <line:297:5, col:12>
|     `-IntegerLiteral 0x2a7b4a87c78 <col:12> 'int' 1
|-FunctionDecl 0x2a7b4a87df8 <line:301:1, col:64> col:20 EC_nistp224_pre_comp_dup 'NISTP224_PRE_COMP *(NISTP224_PRE_COMP *)'
| `-ParmVarDecl 0x2a7b4a87ce0 <col:45, col:63> col:64 'NISTP224_PRE_COMP *'
|-FunctionDecl 0x2a7b4a87fb8 <line:302:1, col:64> col:20 EC_nistp256_pre_comp_dup 'NISTP256_PRE_COMP *(NISTP256_PRE_COMP *)'
| `-ParmVarDecl 0x2a7b4a87ec8 <col:45, col:63> col:64 'NISTP256_PRE_COMP *'
|-FunctionDecl 0x2a7b4a88178 <line:303:1, col:64> col:20 EC_nistp521_pre_comp_dup 'NISTP521_PRE_COMP *(NISTP521_PRE_COMP *)'
| `-ParmVarDecl 0x2a7b4a88088 <col:45, col:63> col:64 'NISTP521_PRE_COMP *'
|-FunctionDecl 0x2a7b4a88338 <line:304:1, col:64> col:20 EC_nistz256_pre_comp_dup 'NISTZ256_PRE_COMP *(NISTZ256_PRE_COMP *)'
| `-ParmVarDecl 0x2a7b4a88248 <col:45, col:63> col:64 'NISTZ256_PRE_COMP *'
|-FunctionDecl 0x2a7b4a88498 prev 0x2a7b4a87fb8 <line:305:1, col:64> col:20 EC_nistp256_pre_comp_dup 'NISTP256_PRE_COMP *(NISTP256_PRE_COMP *)'
| `-ParmVarDecl 0x2a7b4a88408 <col:45, col:63> col:64 'NISTP256_PRE_COMP *'
|-FunctionDecl 0x2a7b4a88648 <line:306:1, col:46> col:14 EC_ec_pre_comp_dup 'EC_PRE_COMP *(EC_PRE_COMP *)'
| `-ParmVarDecl 0x2a7b4a88550 <col:33, col:45> col:46 'EC_PRE_COMP *'
|-FunctionDecl 0x2a7b4a887b0 <line:308:1, col:38> col:6 invalid EC_pre_comp_free 'void (int *)'
| `-ParmVarDecl 0x2a7b4a88720 <col:23, col:33> col:33 invalid group 'int *'
|-FunctionDecl 0x2a7b4a88958 <line:309:1, col:51> col:6 EC_nistp224_pre_comp_free 'void (NISTP224_PRE_COMP *)'
| `-ParmVarDecl 0x2a7b4a88868 <col:32, col:50> col:51 'NISTP224_PRE_COMP *'
|-FunctionDecl 0x2a7b4a88b18 <line:310:1, col:51> col:6 used EC_nistp256_pre_comp_free 'void (NISTP256_PRE_COMP *)'
| `-ParmVarDecl 0x2a7b4a88a28 <col:32, col:50> col:51 'NISTP256_PRE_COMP *'
|-FunctionDecl 0x2a7b4a88cd8 <line:311:1, col:51> col:6 EC_nistp521_pre_comp_free 'void (NISTP521_PRE_COMP *)'
| `-ParmVarDecl 0x2a7b4a88be8 <col:32, col:50> col:51 'NISTP521_PRE_COMP *'
|-FunctionDecl 0x2a7b4a82e58 <line:312:1, col:51> col:6 EC_nistz256_pre_comp_free 'void (NISTZ256_PRE_COMP *)'
| `-ParmVarDecl 0x2a7b4a82d60 <col:32, col:50> col:51 'NISTZ256_PRE_COMP *'
|-FunctionDecl 0x2a7b4a83018 <line:313:1, col:39> col:6 EC_ec_pre_comp_free 'void (EC_PRE_COMP *)'
| `-ParmVarDecl 0x2a7b4a82f28 <col:26, col:38> col:39 'EC_PRE_COMP *'
|-FunctionDecl 0x2a7b4a834d0 <line:319:1, line:321:25> line:319:5 invalid ec_wNAF_mul 'int (const int *, int *, const int *, size_t, const int **, const int **, int *)'
| |-ParmVarDecl 0x2a7b4a830f0 <col:17, col:33> col:33 invalid group 'const int *'
| |-ParmVarDecl 0x2a7b4a83170 <col:40, col:50> col:50 invalid r 'int *'
| |-ParmVarDecl 0x2a7b4a831f0 <col:53, col:67> col:67 invalid scalar 'const int *'
| |-ParmVarDecl 0x2a7b4a83268 <line:320:17, col:24> col:24 num 'size_t':'unsigned long long'
| |-ParmVarDecl 0x2a7b4a832f8 <col:29, <invalid sloc>> col:45 invalid points 'const int **':'const int **'
| |-ParmVarDecl 0x2a7b4a83388 <col:55, <invalid sloc>> col:69 invalid scalars 'const int **':'const int **'
| `-ParmVarDecl 0x2a7b4a83408 <line:321:17, <invalid sloc>> col:25 invalid 'int *'
|-FunctionDecl 0x2a7b4a836e0 <line:322:1, col:54> col:5 invalid ec_wNAF_precompute_mult 'int (int *, int *)'
| |-ParmVarDecl 0x2a7b4a835c0 <col:29, col:39> col:39 invalid group 'int *'
| `-ParmVarDecl 0x2a7b4a83640 <col:46, <invalid sloc>> col:54 invalid 'int *'
|-FunctionDecl 0x2a7b4a83840 <line:323:1, col:55> col:5 invalid ec_wNAF_have_precompute_mult 'int (const int *)'
| `-ParmVarDecl 0x2a7b4a837a8 <col:34, col:50> col:50 invalid group 'const int *'
|-FunctionDecl 0x2a7b4a83998 <line:326:1, col:40> col:5 invalid ec_GFp_simple_group_init 'int (int *)'
| `-ParmVarDecl 0x2a7b4a83900 <col:30, <invalid sloc>> col:40 invalid 'int *'
|-FunctionDecl 0x2a7b4a83ae8 <line:327:1, col:43> col:6 invalid ec_GFp_simple_group_finish 'void (int *)'
| `-ParmVarDecl 0x2a7b4a83a58 <col:33, <invalid sloc>> col:43 invalid 'int *'
|-FunctionDecl 0x2a7b4a83c38 <line:328:1, col:49> col:6 invalid ec_GFp_simple_group_clear_finish 'void (int *)'
| `-ParmVarDecl 0x2a7b4a83ba8 <col:39, <invalid sloc>> col:49 invalid 'int *'
|-FunctionDecl 0x2a7b4a85ea0 <line:329:1, col:58> col:5 invalid ec_GFp_simple_group_copy 'int (int *, const int *)'
| |-ParmVarDecl 0x2a7b4a85d80 <col:30, <invalid sloc>> col:40 invalid 'int *'
| `-ParmVarDecl 0x2a7b4a85e00 <col:42, <invalid sloc>> col:58 invalid 'const int *'
|-FunctionDecl 0x2a7b4a86220 <line:330:1, line:331:77> line:330:5 invalid ec_GFp_simple_group_set_curve 'int (int *, const int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x2a7b4a85f68 <col:35, <invalid sloc>> col:45 invalid 'int *'
| |-ParmVarDecl 0x2a7b4a85fe8 <col:47, col:61> col:61 invalid p 'const int *'
| |-ParmVarDecl 0x2a7b4a86068 <line:331:35, col:49> col:49 invalid a 'const int *'
| |-ParmVarDecl 0x2a7b4a860e8 <col:52, col:66> col:66 invalid b 'const int *'
| `-ParmVarDecl 0x2a7b4a86168 <col:69, <invalid sloc>> col:77 invalid 'int *'
|-FunctionDecl 0x2a7b4a865b8 <line:332:1, line:333:54> line:332:5 invalid ec_GFp_simple_group_get_curve 'int (const int *, int *, int *, int *, int *)'
| |-ParmVarDecl 0x2a7b4a86300 <col:35, <invalid sloc>> col:51 invalid 'const int *'
| |-ParmVarDecl 0x2a7b4a86380 <col:53, col:61> col:61 invalid p 'int *'
| |-ParmVarDecl 0x2a7b4a86400 <col:64, col:72> col:72 invalid a 'int *'
| |-ParmVarDecl 0x2a7b4a86480 <line:333:35, col:43> col:43 invalid b 'int *'
| `-ParmVarDecl 0x2a7b4a86500 <col:46, <invalid sloc>> col:54 invalid 'int *'
|-FunctionDecl 0x2a7b4a86730 <line:334:1, col:52> col:5 invalid ec_GFp_simple_group_get_degree 'int (const int *)'
| `-ParmVarDecl 0x2a7b4a86698 <col:36, <invalid sloc>> col:52 invalid 'const int *'
|-FunctionDecl 0x2a7b4a86910 <line:335:1, col:70> col:5 invalid ec_GFp_simple_group_check_discriminant 'int (const int *, int *)'
| |-ParmVarDecl 0x2a7b4a867f0 <col:44, <invalid sloc>> col:60 invalid 'const int *'
| `-ParmVarDecl 0x2a7b4a86870 <col:62, <invalid sloc>> col:70 invalid 'int *'
|-FunctionDecl 0x2a7b4a86a70 <line:336:1, col:40> col:5 invalid ec_GFp_simple_point_init 'int (int *)'
| `-ParmVarDecl 0x2a7b4a869d8 <col:30, <invalid sloc>> col:40 invalid 'int *'
|-FunctionDecl 0x2a7b4a86bc0 <line:337:1, col:43> col:6 invalid ec_GFp_simple_point_finish 'void (int *)'
| `-ParmVarDecl 0x2a7b4a86b30 <col:33, <invalid sloc>> col:43 invalid 'int *'
|-FunctionDecl 0x2a7b4a88db0 <line:338:1, col:49> col:6 invalid ec_GFp_simple_point_clear_finish 'void (int *)'
| `-ParmVarDecl 0x2a7b4a86c80 <col:39, <invalid sloc>> col:49 invalid 'int *'
|-FunctionDecl 0x2a7b4a88f90 <line:339:1, col:58> col:5 invalid ec_GFp_simple_point_copy 'int (int *, const int *)'
| |-ParmVarDecl 0x2a7b4a88e70 <col:30, <invalid sloc>> col:40 invalid 'int *'
| `-ParmVarDecl 0x2a7b4a88ef0 <col:42, <invalid sloc>> col:58 invalid 'const int *'
|-FunctionDecl 0x2a7b4a89178 <line:340:1, col:69> col:5 invalid ec_GFp_simple_point_set_to_infinity 'int (const int *, int *)'
| |-ParmVarDecl 0x2a7b4a89058 <col:41, <invalid sloc>> col:57 invalid 'const int *'
| `-ParmVarDecl 0x2a7b4a890d8 <col:59, <invalid sloc>> col:69 invalid 'int *'
|-FunctionDecl 0x2a7b4a89580 <line:341:1, line:344:76> line:341:5 invalid ec_GFp_simple_set_Jprojective_coordinates_GFp 'int (const int *, int *, const int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x2a7b4a89240 <col:51, <invalid sloc>> col:67 invalid 'const int *'
| |-ParmVarDecl 0x2a7b4a892c0 <line:342:51, <invalid sloc>> col:61 invalid 'int *'
| |-ParmVarDecl 0x2a7b4a89340 <col:63, col:77> col:77 invalid x 'const int *'
| |-ParmVarDecl 0x2a7b4a893c0 <line:343:51, col:65> col:65 invalid y 'const int *'
| |-ParmVarDecl 0x2a7b4a89440 <line:344:51, col:65> col:65 invalid z 'const int *'
| `-ParmVarDecl 0x2a7b4a894c0 <col:68, <invalid sloc>> col:76 invalid 'int *'
|-FunctionDecl 0x2a7b4a899a8 <line:345:1, line:348:59> line:345:5 invalid ec_GFp_simple_get_Jprojective_coordinates_GFp 'int (const int *, const int *, int *, int *, int *, int *)'
| |-ParmVarDecl 0x2a7b4a89668 <col:51, <invalid sloc>> col:67 invalid 'const int *'
| |-ParmVarDecl 0x2a7b4a896e8 <line:346:51, <invalid sloc>> col:67 invalid 'const int *'
| |-ParmVarDecl 0x2a7b4a89768 <col:69, col:77> col:77 invalid x 'int *'
| |-ParmVarDecl 0x2a7b4a897e8 <line:347:51, col:59> col:59 invalid y 'int *'
| |-ParmVarDecl 0x2a7b4a89868 <col:62, col:70> col:70 invalid z 'int *'
| `-ParmVarDecl 0x2a7b4a898e8 <line:348:51, <invalid sloc>> col:59 invalid 'int *'
|-FunctionDecl 0x2a7b4a81d40 <line:349:1, line:351:73> line:349:5 invalid ec_GFp_simple_point_set_affine_coordinates 'int (const int *, int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x2a7b4a89a90 <col:48, <invalid sloc>> col:64 invalid 'const int *'
| |-ParmVarDecl 0x2a7b4a89b10 <col:66, <invalid sloc>> col:76 invalid 'int *'
| |-ParmVarDecl 0x2a7b4a89b90 <line:350:48, col:62> col:62 invalid x 'const int *'
| |-ParmVarDecl 0x2a7b4a89c10 <line:351:48, col:62> col:62 invalid y 'const int *'
| `-ParmVarDecl 0x2a7b4a89c90 <col:65, <invalid sloc>> col:73 invalid 'int *'
|-FunctionDecl 0x2a7b4a820d8 <line:352:1, line:354:67> line:352:5 invalid ec_GFp_simple_point_get_affine_coordinates 'int (const int *, const int *, int *, int *, int *)'
| |-ParmVarDecl 0x2a7b4a81e20 <col:48, <invalid sloc>> col:64 invalid 'const int *'
| |-ParmVarDecl 0x2a7b4a81ea0 <line:353:48, <invalid sloc>> col:64 invalid 'const int *'
| |-ParmVarDecl 0x2a7b4a81f20 <col:66, col:74> col:74 invalid x 'int *'
| |-ParmVarDecl 0x2a7b4a81fa0 <line:354:48, col:56> col:56 invalid y 'int *'
| `-ParmVarDecl 0x2a7b4a82020 <col:59, <invalid sloc>> col:67 invalid 'int *'
|-FunctionDecl 0x2a7b4a82470 <line:355:1, line:357:54> line:355:5 invalid ec_GFp_simple_set_compressed_coordinates 'int (const int *, int *, const int *, int, int *)'
| |-ParmVarDecl 0x2a7b4a821b8 <col:46, <invalid sloc>> col:62 invalid 'const int *'
| |-ParmVarDecl 0x2a7b4a82238 <col:64, <invalid sloc>> col:74 invalid 'int *'
| |-ParmVarDecl 0x2a7b4a822b8 <line:356:46, col:60> col:60 invalid x 'const int *'
| |-ParmVarDecl 0x2a7b4a82338 <col:63, col:67> col:67 y_bit 'int'
| `-ParmVarDecl 0x2a7b4a823b8 <line:357:46, <invalid sloc>> col:54 invalid 'int *'
|-FunctionDecl 0x2a7b4a82880 <line:358:1, line:360:72> line:358:8 invalid ec_GFp_simple_point2oct 'size_t (const int *, const int *, int, unsigned char *, size_t, int *)'
| |-ParmVarDecl 0x2a7b4a82550 <col:32, <invalid sloc>> col:48 invalid 'const int *'
| |-ParmVarDecl 0x2a7b4a825d0 <col:50, <invalid sloc>> col:66 invalid 'const int *'
| |-ParmVarDecl 0x2a7b4a82650 <line:359:32, col:56> col:56 invalid form 'int'
| |-ParmVarDecl 0x2a7b4a826d0 <line:360:32, col:47> col:47 buf 'unsigned char *'
| |-ParmVarDecl 0x2a7b4a82748 <col:52, col:59> col:59 len 'size_t':'unsigned long long'
| `-ParmVarDecl 0x2a7b4a827c8 <col:64, <invalid sloc>> col:72 invalid 'int *'
|-FunctionDecl 0x2a7b4a82c18 <line:361:1, line:362:75> line:361:5 invalid ec_GFp_simple_oct2point 'int (const int *, int *, const unsigned char *, size_t, int *)'
| |-ParmVarDecl 0x2a7b4a82968 <col:29, <invalid sloc>> col:45 invalid 'const int *'
| |-ParmVarDecl 0x2a7b4a829e8 <col:47, <invalid sloc>> col:57 invalid 'int *'
| |-ParmVarDecl 0x2a7b4a82a68 <line:362:29, col:50> col:50 buf 'const unsigned char *'
| |-ParmVarDecl 0x2a7b4a82ae0 <col:55, col:62> col:62 len 'size_t':'unsigned long long'
| `-ParmVarDecl 0x2a7b4a82b60 <col:67, <invalid sloc>> col:75 invalid 'int *'
|-FunctionDecl 0x2a7b4a8a078 <line:363:1, line:364:50> line:363:5 invalid ec_GFp_simple_add 'int (const int *, int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x2a7b4a89dc0 <col:23, <invalid sloc>> col:39 invalid 'const int *'
| |-ParmVarDecl 0x2a7b4a89e40 <col:41, col:51> col:51 invalid r 'int *'
| |-ParmVarDecl 0x2a7b4a89ec0 <col:54, col:70> col:70 invalid a 'const int *'
| |-ParmVarDecl 0x2a7b4a89f40 <line:364:23, col:39> col:39 invalid b 'const int *'
| `-ParmVarDecl 0x2a7b4a89fc0 <col:42, <invalid sloc>> col:50 invalid 'int *'
|-FunctionDecl 0x2a7b4a8a388 <line:365:1, line:366:31> line:365:5 invalid ec_GFp_simple_dbl 'int (const int *, int *, const int *, int *)'
| |-ParmVarDecl 0x2a7b4a8a158 <col:23, <invalid sloc>> col:39 invalid 'const int *'
| |-ParmVarDecl 0x2a7b4a8a1d8 <col:41, col:51> col:51 invalid r 'int *'
| |-ParmVarDecl 0x2a7b4a8a258 <col:54, col:70> col:70 invalid a 'const int *'
| `-ParmVarDecl 0x2a7b4a8a2d8 <line:366:23, <invalid sloc>> col:31 invalid 'int *'
|-FunctionDecl 0x2a7b4a8a608 <line:367:1, col:64> col:5 invalid ec_GFp_simple_invert 'int (const int *, int *, int *)'
| |-ParmVarDecl 0x2a7b4a8a460 <col:26, <invalid sloc>> col:42 invalid 'const int *'
| |-ParmVarDecl 0x2a7b4a8a4e0 <col:44, <invalid sloc>> col:54 invalid 'int *'
| `-ParmVarDecl 0x2a7b4a8a560 <col:56, <invalid sloc>> col:64 invalid 'int *'
|-FunctionDecl 0x2a7b4a8a7f8 <line:368:1, col:68> col:5 invalid ec_GFp_simple_is_at_infinity 'int (const int *, const int *)'
| |-ParmVarDecl 0x2a7b4a8a6d8 <col:34, <invalid sloc>> col:50 invalid 'const int *'
| `-ParmVarDecl 0x2a7b4a8a758 <col:52, <invalid sloc>> col:68 invalid 'const int *'
|-FunctionDecl 0x2a7b4a8aa68 <line:369:1, col:75> col:5 invalid ec_GFp_simple_is_on_curve 'int (const int *, const int *, int *)'
| |-ParmVarDecl 0x2a7b4a8a8c0 <col:31, <invalid sloc>> col:47 invalid 'const int *'
| |-ParmVarDecl 0x2a7b4a8a940 <col:49, <invalid sloc>> col:65 invalid 'const int *'
| `-ParmVarDecl 0x2a7b4a8a9c0 <col:67, <invalid sloc>> col:75 invalid 'int *'
|-FunctionDecl 0x2a7b4a8add0 <line:370:1, line:371:31> line:370:5 invalid ec_GFp_simple_cmp 'int (const int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x2a7b4a8ab38 <col:23, <invalid sloc>> col:39 invalid 'const int *'
| |-ParmVarDecl 0x2a7b4a8abb8 <col:41, col:57> col:57 invalid a 'const int *'
| |-ParmVarDecl 0x2a7b4a8ac38 <col:60, col:76> col:76 invalid b 'const int *'
| `-ParmVarDecl 0x2a7b4a8acb8 <line:371:23, <invalid sloc>> col:31 invalid 'int *'
|-FunctionDecl 0x2a7b4a8b050 <line:372:1, col:69> col:5 invalid ec_GFp_simple_make_affine 'int (const int *, int *, int *)'
| |-ParmVarDecl 0x2a7b4a8aea8 <col:31, <invalid sloc>> col:47 invalid 'const int *'
| |-ParmVarDecl 0x2a7b4a8af28 <col:49, <invalid sloc>> col:59 invalid 'int *'
| `-ParmVarDecl 0x2a7b4a8afa8 <col:61, <invalid sloc>> col:69 invalid 'int *'
|-FunctionDecl 0x2a7b4a8b358 <line:373:1, line:374:60> line:373:5 invalid ec_GFp_simple_points_make_affine 'int (const int *, size_t, int **, int *)'
| |-ParmVarDecl 0x2a7b4a8b120 <col:38, <invalid sloc>> col:54 invalid 'const int *'
| |-ParmVarDecl 0x2a7b4a8b198 <col:56, col:63> col:63 num 'size_t':'unsigned long long'
| |-ParmVarDecl 0x2a7b4a8b228 <line:374:38, <invalid sloc>> col:48 invalid 'int **':'int **'
| `-ParmVarDecl 0x2a7b4a8b2a8 <col:52, <invalid sloc>> col:60 invalid 'int *'
|-FunctionDecl 0x2a7b4a8b6e8 <line:375:1, line:376:54> line:375:5 invalid ec_GFp_simple_field_mul 'int (const int *, int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x2a7b4a8b430 <col:29, <invalid sloc>> col:45 invalid 'const int *'
| |-ParmVarDecl 0x2a7b4a8b4b0 <col:47, col:55> col:55 invalid r 'int *'
| |-ParmVarDecl 0x2a7b4a8b530 <col:58, col:72> col:72 invalid a 'const int *'
| |-ParmVarDecl 0x2a7b4a8b5b0 <line:376:29, col:43> col:43 invalid b 'const int *'
| `-ParmVarDecl 0x2a7b4a8b630 <col:46, <invalid sloc>> col:54 invalid 'int *'
|-FunctionDecl 0x2a7b4a8b9f8 <line:377:1, line:378:37> line:377:5 invalid ec_GFp_simple_field_sqr 'int (const int *, int *, const int *, int *)'
| |-ParmVarDecl 0x2a7b4a8b7c8 <col:29, <invalid sloc>> col:45 invalid 'const int *'
| |-ParmVarDecl 0x2a7b4a8b848 <col:47, col:55> col:55 invalid r 'int *'
| |-ParmVarDecl 0x2a7b4a8b8c8 <col:58, col:72> col:72 invalid a 'const int *'
| `-ParmVarDecl 0x2a7b4a8b948 <line:378:29, <invalid sloc>> col:37 invalid 'int *'
|-FunctionDecl 0x2a7b4a8bc78 <line:379:1, line:380:48> line:379:5 invalid ec_GFp_simple_blind_coordinates 'int (const int *, int *, int *)'
| |-ParmVarDecl 0x2a7b4a8bad0 <col:37, col:53> col:53 invalid group 'const int *'
| |-ParmVarDecl 0x2a7b4a8bb50 <col:60, col:70> col:70 invalid p 'int *'
| `-ParmVarDecl 0x2a7b4a8bbd0 <line:380:37, col:45> col:45 invalid ctx 'int *'
|-FunctionDecl 0x2a7b4a83d90 <line:383:1, col:38> col:5 invalid ec_GFp_mont_group_init 'int (int *)'
| `-ParmVarDecl 0x2a7b4a8bd48 <col:28, <invalid sloc>> col:38 invalid 'int *'
|-FunctionDecl 0x2a7b4a84108 <line:384:1, line:385:58> line:384:5 invalid ec_GFp_mont_group_set_curve 'int (int *, const int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x2a7b4a83e50 <col:33, <invalid sloc>> col:43 invalid 'int *'
| |-ParmVarDecl 0x2a7b4a83ed0 <col:45, col:59> col:59 invalid p 'const int *'
| |-ParmVarDecl 0x2a7b4a83f50 <col:62, col:76> col:76 invalid a 'const int *'
| |-ParmVarDecl 0x2a7b4a83fd0 <line:385:33, col:47> col:47 invalid b 'const int *'
| `-ParmVarDecl 0x2a7b4a84050 <col:50, <invalid sloc>> col:58 invalid 'int *'
|-FunctionDecl 0x2a7b4a84278 <line:386:1, col:41> col:6 invalid ec_GFp_mont_group_finish 'void (int *)'
| `-ParmVarDecl 0x2a7b4a841e8 <col:31, <invalid sloc>> col:41 invalid 'int *'
|-FunctionDecl 0x2a7b4a843c8 <line:387:1, col:47> col:6 invalid ec_GFp_mont_group_clear_finish 'void (int *)'
| `-ParmVarDecl 0x2a7b4a84338 <col:37, <invalid sloc>> col:47 invalid 'int *'
|-FunctionDecl 0x2a7b4a845a8 <line:388:1, col:56> col:5 invalid ec_GFp_mont_group_copy 'int (int *, const int *)'
| |-ParmVarDecl 0x2a7b4a84488 <col:28, <invalid sloc>> col:38 invalid 'int *'
| `-ParmVarDecl 0x2a7b4a84508 <col:40, <invalid sloc>> col:56 invalid 'const int *'
|-FunctionDecl 0x2a7b4a84928 <line:389:1, line:390:52> line:389:5 invalid ec_GFp_mont_field_mul 'int (const int *, int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x2a7b4a84670 <col:27, <invalid sloc>> col:43 invalid 'const int *'
| |-ParmVarDecl 0x2a7b4a846f0 <col:45, col:53> col:53 invalid r 'int *'
| |-ParmVarDecl 0x2a7b4a84770 <col:56, col:70> col:70 invalid a 'const int *'
| |-ParmVarDecl 0x2a7b4a847f0 <line:390:27, col:41> col:41 invalid b 'const int *'
| `-ParmVarDecl 0x2a7b4a84870 <col:44, <invalid sloc>> col:52 invalid 'int *'
|-FunctionDecl 0x2a7b4a84c38 <line:391:1, line:392:35> line:391:5 invalid ec_GFp_mont_field_sqr 'int (const int *, int *, const int *, int *)'
| |-ParmVarDecl 0x2a7b4a84a08 <col:27, <invalid sloc>> col:43 invalid 'const int *'
| |-ParmVarDecl 0x2a7b4a84a88 <col:45, col:53> col:53 invalid r 'int *'
| |-ParmVarDecl 0x2a7b4a84b08 <col:56, col:70> col:70 invalid a 'const int *'
| `-ParmVarDecl 0x2a7b4a84b88 <line:392:27, <invalid sloc>> col:35 invalid 'int *'
|-FunctionDecl 0x2a7b4a8d020 <line:393:1, line:394:38> line:393:5 invalid ec_GFp_mont_field_encode 'int (const int *, int *, const int *, int *)'
| |-ParmVarDecl 0x2a7b4a8cdf0 <col:30, <invalid sloc>> col:46 invalid 'const int *'
| |-ParmVarDecl 0x2a7b4a8ce70 <col:48, col:56> col:56 invalid r 'int *'
| |-ParmVarDecl 0x2a7b4a8cef0 <col:59, col:73> col:73 invalid a 'const int *'
| `-ParmVarDecl 0x2a7b4a8cf70 <line:394:30, <invalid sloc>> col:38 invalid 'int *'
|-FunctionDecl 0x2a7b4a8d328 <line:395:1, line:396:38> line:395:5 invalid ec_GFp_mont_field_decode 'int (const int *, int *, const int *, int *)'
| |-ParmVarDecl 0x2a7b4a8d0f8 <col:30, <invalid sloc>> col:46 invalid 'const int *'
| |-ParmVarDecl 0x2a7b4a8d178 <col:48, col:56> col:56 invalid r 'int *'
| |-ParmVarDecl 0x2a7b4a8d1f8 <col:59, col:73> col:73 invalid a 'const int *'
| `-ParmVarDecl 0x2a7b4a8d278 <line:396:30, <invalid sloc>> col:38 invalid 'int *'
|-FunctionDecl 0x2a7b4a8d5a8 <line:397:1, col:71> col:5 invalid ec_GFp_mont_field_set_to_one 'int (const int *, int *, int *)'
| |-ParmVarDecl 0x2a7b4a8d400 <col:34, <invalid sloc>> col:50 invalid 'const int *'
| |-ParmVarDecl 0x2a7b4a8d480 <col:52, col:60> col:60 invalid r 'int *'
| `-ParmVarDecl 0x2a7b4a8d500 <col:63, <invalid sloc>> col:71 invalid 'int *'
|-FunctionDecl 0x2a7b4a8d798 <line:400:1, col:63> col:5 invalid ec_GFp_nist_group_copy 'int (int *, const int *)'
| |-ParmVarDecl 0x2a7b4a8d678 <col:28, col:38> col:38 invalid dest 'int *'
| `-ParmVarDecl 0x2a7b4a8d6f8 <col:44, col:60> col:60 invalid src 'const int *'
|-FunctionDecl 0x2a7b4a8db18 <line:401:1, line:402:58> line:401:5 invalid ec_GFp_nist_group_set_curve 'int (int *, const int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x2a7b4a8d860 <col:33, <invalid sloc>> col:43 invalid 'int *'
| |-ParmVarDecl 0x2a7b4a8d8e0 <col:45, col:59> col:59 invalid p 'const int *'
| |-ParmVarDecl 0x2a7b4a8d960 <col:62, col:76> col:76 invalid a 'const int *'
| |-ParmVarDecl 0x2a7b4a8d9e0 <line:402:33, col:47> col:47 invalid b 'const int *'
| `-ParmVarDecl 0x2a7b4a8da60 <col:50, <invalid sloc>> col:58 invalid 'int *'
|-FunctionDecl 0x2a7b4a91f10 <line:403:1, line:404:52> line:403:5 invalid ec_GFp_nist_field_mul 'int (const int *, int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x2a7b4a8dbf8 <col:27, <invalid sloc>> col:43 invalid 'const int *'
| |-ParmVarDecl 0x2a7b4a8dc78 <col:45, col:53> col:53 invalid r 'int *'
| |-ParmVarDecl 0x2a7b4a8dcf8 <col:56, col:70> col:70 invalid a 'const int *'
| |-ParmVarDecl 0x2a7b4a8dd78 <line:404:27, col:41> col:41 invalid b 'const int *'
| `-ParmVarDecl 0x2a7b4a91e58 <col:44, <invalid sloc>> col:52 invalid 'int *'
|-FunctionDecl 0x2a7b4a92220 <line:405:1, line:406:35> line:405:5 invalid ec_GFp_nist_field_sqr 'int (const int *, int *, const int *, int *)'
| |-ParmVarDecl 0x2a7b4a91ff0 <col:27, <invalid sloc>> col:43 invalid 'const int *'
| |-ParmVarDecl 0x2a7b4a92070 <col:45, col:53> col:53 invalid r 'int *'
| |-ParmVarDecl 0x2a7b4a920f0 <col:56, col:70> col:70 invalid a 'const int *'
| `-ParmVarDecl 0x2a7b4a92170 <line:406:27, <invalid sloc>> col:35 invalid 'int *'
|-FunctionDecl 0x2a7b4a92390 <line:409:1, col:41> col:5 invalid ec_GF2m_simple_group_init 'int (int *)'
| `-ParmVarDecl 0x2a7b4a922f8 <col:31, <invalid sloc>> col:41 invalid 'int *'
|-FunctionDecl 0x2a7b4a924e0 <line:410:1, col:44> col:6 invalid ec_GF2m_simple_group_finish 'void (int *)'
| `-ParmVarDecl 0x2a7b4a92450 <col:34, <invalid sloc>> col:44 invalid 'int *'
|-FunctionDecl 0x2a7b4a92630 <line:411:1, col:50> col:6 invalid ec_GF2m_simple_group_clear_finish 'void (int *)'
| `-ParmVarDecl 0x2a7b4a925a0 <col:40, <invalid sloc>> col:50 invalid 'int *'
|-FunctionDecl 0x2a7b4a92810 <line:412:1, col:59> col:5 invalid ec_GF2m_simple_group_copy 'int (int *, const int *)'
| |-ParmVarDecl 0x2a7b4a926f0 <col:31, <invalid sloc>> col:41 invalid 'int *'
| `-ParmVarDecl 0x2a7b4a92770 <col:43, <invalid sloc>> col:59 invalid 'const int *'
|-FunctionDecl 0x2a7b4a92b90 <line:413:1, line:415:44> line:413:5 invalid ec_GF2m_simple_group_set_curve 'int (int *, const int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x2a7b4a928d8 <col:36, <invalid sloc>> col:46 invalid 'int *'
| |-ParmVarDecl 0x2a7b4a92958 <col:48, col:62> col:62 invalid p 'const int *'
| |-ParmVarDecl 0x2a7b4a929d8 <line:414:36, col:50> col:50 invalid a 'const int *'
| |-ParmVarDecl 0x2a7b4a92a58 <col:53, col:67> col:67 invalid b 'const int *'
| `-ParmVarDecl 0x2a7b4a92ad8 <line:415:36, <invalid sloc>> col:44 invalid 'int *'
|-FunctionDecl 0x2a7b4a8bf18 <line:416:1, line:417:55> line:416:5 invalid ec_GF2m_simple_group_get_curve 'int (const int *, int *, int *, int *, int *)'
| |-ParmVarDecl 0x2a7b4a92c70 <col:36, <invalid sloc>> col:52 invalid 'const int *'
| |-ParmVarDecl 0x2a7b4a92cf0 <col:54, col:62> col:62 invalid p 'int *'
| |-ParmVarDecl 0x2a7b4a92d70 <col:65, col:73> col:73 invalid a 'int *'
| |-ParmVarDecl 0x2a7b4a8bde0 <line:417:36, col:44> col:44 invalid b 'int *'
| `-ParmVarDecl 0x2a7b4a8be60 <col:47, <invalid sloc>> col:55 invalid 'int *'
|-FunctionDecl 0x2a7b4a8c090 <line:418:1, col:53> col:5 invalid ec_GF2m_simple_group_get_degree 'int (const int *)'
| `-ParmVarDecl 0x2a7b4a8bff8 <col:37, <invalid sloc>> col:53 invalid 'const int *'
|-FunctionDecl 0x2a7b4a8c270 <line:419:1, col:71> col:5 invalid ec_GF2m_simple_group_check_discriminant 'int (const int *, int *)'
| |-ParmVarDecl 0x2a7b4a8c150 <col:45, <invalid sloc>> col:61 invalid 'const int *'
| `-ParmVarDecl 0x2a7b4a8c1d0 <col:63, <invalid sloc>> col:71 invalid 'int *'
|-FunctionDecl 0x2a7b4a8c3d0 <line:420:1, col:41> col:5 invalid ec_GF2m_simple_point_init 'int (int *)'
| `-ParmVarDecl 0x2a7b4a8c338 <col:31, <invalid sloc>> col:41 invalid 'int *'
|-FunctionDecl 0x2a7b4a8c520 <line:421:1, col:44> col:6 invalid ec_GF2m_simple_point_finish 'void (int *)'
| `-ParmVarDecl 0x2a7b4a8c490 <col:34, <invalid sloc>> col:44 invalid 'int *'
|-FunctionDecl 0x2a7b4a8c670 <line:422:1, col:50> col:6 invalid ec_GF2m_simple_point_clear_finish 'void (int *)'
| `-ParmVarDecl 0x2a7b4a8c5e0 <col:40, <invalid sloc>> col:50 invalid 'int *'
|-FunctionDecl 0x2a7b4a8c850 <line:423:1, col:59> col:5 invalid ec_GF2m_simple_point_copy 'int (int *, const int *)'
| |-ParmVarDecl 0x2a7b4a8c730 <col:31, <invalid sloc>> col:41 invalid 'int *'
| `-ParmVarDecl 0x2a7b4a8c7b0 <col:43, <invalid sloc>> col:59 invalid 'const int *'
|-FunctionDecl 0x2a7b4a8ca38 <line:424:1, col:70> col:5 invalid ec_GF2m_simple_point_set_to_infinity 'int (const int *, int *)'
| |-ParmVarDecl 0x2a7b4a8c918 <col:42, <invalid sloc>> col:58 invalid 'const int *'
| `-ParmVarDecl 0x2a7b4a8c998 <col:60, <invalid sloc>> col:70 invalid 'int *'
|-FunctionDecl 0x2a7b4a8de00 <line:425:1, line:427:74> line:425:5 invalid ec_GF2m_simple_point_set_affine_coordinates 'int (const int *, int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x2a7b4a8cb00 <col:49, <invalid sloc>> col:65 invalid 'const int *'
| |-ParmVarDecl 0x2a7b4a8cb80 <col:67, <invalid sloc>> col:77 invalid 'int *'
| |-ParmVarDecl 0x2a7b4a8cc00 <line:426:49, col:63> col:63 invalid x 'const int *'
| |-ParmVarDecl 0x2a7b4a8cc80 <line:427:49, col:63> col:63 invalid y 'const int *'
| `-ParmVarDecl 0x2a7b4a8cd00 <col:66, <invalid sloc>> col:74 invalid 'int *'
|-FunctionDecl 0x2a7b4a8e198 <line:428:1, line:430:68> line:428:5 invalid ec_GF2m_simple_point_get_affine_coordinates 'int (const int *, const int *, int *, int *, int *)'
| |-ParmVarDecl 0x2a7b4a8dee0 <col:49, <invalid sloc>> col:65 invalid 'const int *'
| |-ParmVarDecl 0x2a7b4a8df60 <line:429:49, <invalid sloc>> col:65 invalid 'const int *'
| |-ParmVarDecl 0x2a7b4a8dfe0 <col:67, col:75> col:75 invalid x 'int *'
| |-ParmVarDecl 0x2a7b4a8e060 <line:430:49, col:57> col:57 invalid y 'int *'
| `-ParmVarDecl 0x2a7b4a8e0e0 <col:60, <invalid sloc>> col:68 invalid 'int *'
|-FunctionDecl 0x2a7b4a8e530 <line:431:1, line:433:55> line:431:5 invalid ec_GF2m_simple_set_compressed_coordinates 'int (const int *, int *, const int *, int, int *)'
| |-ParmVarDecl 0x2a7b4a8e278 <col:47, <invalid sloc>> col:63 invalid 'const int *'
| |-ParmVarDecl 0x2a7b4a8e2f8 <col:65, <invalid sloc>> col:75 invalid 'int *'
| |-ParmVarDecl 0x2a7b4a8e378 <line:432:47, col:61> col:61 invalid x 'const int *'
| |-ParmVarDecl 0x2a7b4a8e3f8 <col:64, col:68> col:68 y_bit 'int'
| `-ParmVarDecl 0x2a7b4a8e478 <line:433:47, <invalid sloc>> col:55 invalid 'int *'
|-FunctionDecl 0x2a7b4a8e940 <line:434:1, line:436:73> line:434:8 invalid ec_GF2m_simple_point2oct 'size_t (const int *, const int *, int, unsigned char *, size_t, int *)'
| |-ParmVarDecl 0x2a7b4a8e610 <col:33, <invalid sloc>> col:49 invalid 'const int *'
| |-ParmVarDecl 0x2a7b4a8e690 <col:51, <invalid sloc>> col:67 invalid 'const int *'
| |-ParmVarDecl 0x2a7b4a8e710 <line:435:33, col:57> col:57 invalid form 'int'
| |-ParmVarDecl 0x2a7b4a8e790 <line:436:33, col:48> col:48 buf 'unsigned char *'
| |-ParmVarDecl 0x2a7b4a8e808 <col:53, col:60> col:60 len 'size_t':'unsigned long long'
| `-ParmVarDecl 0x2a7b4a8e888 <col:65, <invalid sloc>> col:73 invalid 'int *'
|-FunctionDecl 0x2a7b4a8ecd8 <line:437:1, line:438:76> line:437:5 invalid ec_GF2m_simple_oct2point 'int (const int *, int *, const unsigned char *, size_t, int *)'
| |-ParmVarDecl 0x2a7b4a8ea28 <col:30, <invalid sloc>> col:46 invalid 'const int *'
| |-ParmVarDecl 0x2a7b4a8eaa8 <col:48, <invalid sloc>> col:58 invalid 'int *'
| |-ParmVarDecl 0x2a7b4a8eb28 <line:438:30, col:51> col:51 buf 'const unsigned char *'
| |-ParmVarDecl 0x2a7b4a8eba0 <col:56, col:63> col:63 len 'size_t':'unsigned long long'
| `-ParmVarDecl 0x2a7b4a8ec20 <col:68, <invalid sloc>> col:76 invalid 'int *'
|-FunctionDecl 0x2a7b4a8f0c8 <line:439:1, line:440:51> line:439:5 invalid ec_GF2m_simple_add 'int (const int *, int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x2a7b4a8ee10 <col:24, <invalid sloc>> col:40 invalid 'const int *'
| |-ParmVarDecl 0x2a7b4a8ee90 <col:42, col:52> col:52 invalid r 'int *'
| |-ParmVarDecl 0x2a7b4a8ef10 <col:55, col:71> col:71 invalid a 'const int *'
| |-ParmVarDecl 0x2a7b4a8ef90 <line:440:24, col:40> col:40 invalid b 'const int *'
| `-ParmVarDecl 0x2a7b4a8f010 <col:43, <invalid sloc>> col:51 invalid 'int *'
|-FunctionDecl 0x2a7b4a8f3d8 <line:441:1, line:442:32> line:441:5 invalid ec_GF2m_simple_dbl 'int (const int *, int *, const int *, int *)'
| |-ParmVarDecl 0x2a7b4a8f1a8 <col:24, <invalid sloc>> col:40 invalid 'const int *'
| |-ParmVarDecl 0x2a7b4a8f228 <col:42, col:52> col:52 invalid r 'int *'
| |-ParmVarDecl 0x2a7b4a8f2a8 <col:55, col:71> col:71 invalid a 'const int *'
| `-ParmVarDecl 0x2a7b4a8f328 <line:442:24, <invalid sloc>> col:32 invalid 'int *'
|-FunctionDecl 0x2a7b4a8f658 <line:443:1, col:65> col:5 invalid ec_GF2m_simple_invert 'int (const int *, int *, int *)'
| |-ParmVarDecl 0x2a7b4a8f4b0 <col:27, <invalid sloc>> col:43 invalid 'const int *'
| |-ParmVarDecl 0x2a7b4a8f530 <col:45, <invalid sloc>> col:55 invalid 'int *'
| `-ParmVarDecl 0x2a7b4a8f5b0 <col:57, <invalid sloc>> col:65 invalid 'int *'
|-FunctionDecl 0x2a7b4a8f848 <line:444:1, col:69> col:5 invalid ec_GF2m_simple_is_at_infinity 'int (const int *, const int *)'
| |-ParmVarDecl 0x2a7b4a8f728 <col:35, <invalid sloc>> col:51 invalid 'const int *'
| `-ParmVarDecl 0x2a7b4a8f7a8 <col:53, <invalid sloc>> col:69 invalid 'const int *'
|-FunctionDecl 0x2a7b4a8fab8 <line:445:1, col:76> col:5 invalid ec_GF2m_simple_is_on_curve 'int (const int *, const int *, int *)'
| |-ParmVarDecl 0x2a7b4a8f910 <col:32, <invalid sloc>> col:48 invalid 'const int *'
| |-ParmVarDecl 0x2a7b4a8f990 <col:50, <invalid sloc>> col:66 invalid 'const int *'
| `-ParmVarDecl 0x2a7b4a8fa10 <col:68, <invalid sloc>> col:76 invalid 'int *'
|-FunctionDecl 0x2a7b4a90e30 <line:446:1, line:447:32> line:446:5 invalid ec_GF2m_simple_cmp 'int (const int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x2a7b4a8fb88 <col:24, <invalid sloc>> col:40 invalid 'const int *'
| |-ParmVarDecl 0x2a7b4a8fc08 <col:42, col:58> col:58 invalid a 'const int *'
| |-ParmVarDecl 0x2a7b4a8fc88 <col:61, col:77> col:77 invalid b 'const int *'
| `-ParmVarDecl 0x2a7b4a8fd08 <line:447:24, <invalid sloc>> col:32 invalid 'int *'
|-FunctionDecl 0x2a7b4a910b0 <line:448:1, col:70> col:5 invalid ec_GF2m_simple_make_affine 'int (const int *, int *, int *)'
| |-ParmVarDecl 0x2a7b4a90f08 <col:32, <invalid sloc>> col:48 invalid 'const int *'
| |-ParmVarDecl 0x2a7b4a90f88 <col:50, <invalid sloc>> col:60 invalid 'int *'
| `-ParmVarDecl 0x2a7b4a91008 <col:62, <invalid sloc>> col:70 invalid 'int *'
|-FunctionDecl 0x2a7b4a913b8 <line:449:1, line:450:61> line:449:5 invalid ec_GF2m_simple_points_make_affine 'int (const int *, size_t, int **, int *)'
| |-ParmVarDecl 0x2a7b4a91180 <col:39, <invalid sloc>> col:55 invalid 'const int *'
| |-ParmVarDecl 0x2a7b4a911f8 <col:57, col:64> col:64 num 'size_t':'unsigned long long'
| |-ParmVarDecl 0x2a7b4a91288 <line:450:39, <invalid sloc>> col:49 invalid 'int **':'int **'
| `-ParmVarDecl 0x2a7b4a91308 <col:53, <invalid sloc>> col:61 invalid 'int *'
|-FunctionDecl 0x2a7b4a91748 <line:451:1, line:452:55> line:451:5 invalid ec_GF2m_simple_field_mul 'int (const int *, int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x2a7b4a91490 <col:30, <invalid sloc>> col:46 invalid 'const int *'
| |-ParmVarDecl 0x2a7b4a91510 <col:48, col:56> col:56 invalid r 'int *'
| |-ParmVarDecl 0x2a7b4a91590 <col:59, col:73> col:73 invalid a 'const int *'
| |-ParmVarDecl 0x2a7b4a91610 <line:452:30, col:44> col:44 invalid b 'const int *'
| `-ParmVarDecl 0x2a7b4a91690 <col:47, <invalid sloc>> col:55 invalid 'int *'
|-FunctionDecl 0x2a7b4a91a58 <line:453:1, line:454:38> line:453:5 invalid ec_GF2m_simple_field_sqr 'int (const int *, int *, const int *, int *)'
| |-ParmVarDecl 0x2a7b4a91828 <col:30, <invalid sloc>> col:46 invalid 'const int *'
| |-ParmVarDecl 0x2a7b4a918a8 <col:48, col:56> col:56 invalid r 'int *'
| |-ParmVarDecl 0x2a7b4a91928 <col:59, col:73> col:73 invalid a 'const int *'
| `-ParmVarDecl 0x2a7b4a919a8 <line:454:30, <invalid sloc>> col:38 invalid 'int *'
|-FunctionDecl 0x2a7b4a2b150 <line:455:1, line:456:55> line:455:5 invalid ec_GF2m_simple_field_div 'int (const int *, int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x2a7b4a91b30 <col:30, <invalid sloc>> col:46 invalid 'const int *'
| |-ParmVarDecl 0x2a7b4a91bb0 <col:48, col:56> col:56 invalid r 'int *'
| |-ParmVarDecl 0x2a7b4a91c30 <col:59, col:73> col:73 invalid a 'const int *'
| |-ParmVarDecl 0x2a7b4a91cb0 <line:456:30, col:44> col:44 invalid b 'const int *'
| `-ParmVarDecl 0x2a7b4a91d30 <col:47, <invalid sloc>> col:55 invalid 'int *'
|-FunctionDecl 0x2a7b4a2b610 <line:459:1, line:462:32> line:459:5 invalid ec_GF2m_simple_mul 'int (const int *, int *, const int *, size_t, const int **, const int **, int *)'
| |-ParmVarDecl 0x2a7b4a2b230 <col:24, col:40> col:40 invalid group 'const int *'
| |-ParmVarDecl 0x2a7b4a2b2b0 <col:47, col:57> col:57 invalid r 'int *'
| |-ParmVarDecl 0x2a7b4a2b330 <line:460:24, col:38> col:38 invalid scalar 'const int *'
| |-ParmVarDecl 0x2a7b4a2b3a8 <col:46, col:53> col:53 num 'size_t':'unsigned long long'
| |-ParmVarDecl 0x2a7b4a2b438 <line:461:24, <invalid sloc>> col:40 invalid points 'const int **':'const int **'
| |-ParmVarDecl 0x2a7b4a2b4c8 <col:50, <invalid sloc>> col:64 invalid scalars 'const int **':'const int **'
| `-ParmVarDecl 0x2a7b4a2b548 <line:462:24, <invalid sloc>> col:32 invalid 'int *'
|-FunctionDecl 0x2a7b4a2b820 <line:463:1, col:57> col:5 invalid ec_GF2m_precompute_mult 'int (int *, int *)'
| |-ParmVarDecl 0x2a7b4a2b700 <col:29, col:39> col:39 invalid group 'int *'
| `-ParmVarDecl 0x2a7b4a2b780 <col:46, col:54> col:54 invalid ctx 'int *'
|-FunctionDecl 0x2a7b4a2b980 <line:464:1, col:55> col:5 invalid ec_GF2m_have_precompute_mult 'int (const int *)'
| `-ParmVarDecl 0x2a7b4a2b8e8 <col:34, col:50> col:50 invalid group 'const int *'
|-FunctionDecl 0x2a7b4a2bad8 <line:468:1, col:47> col:5 invalid ec_GFp_nistp224_group_init 'int (int *)'
| `-ParmVarDecl 0x2a7b4a2ba40 <col:32, col:42> col:42 invalid group 'int *'
|-FunctionDecl 0x2a7b4a2be50 <line:469:1, line:471:45> line:469:5 invalid ec_GFp_nistp224_group_set_curve 'int (int *, const int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x2a7b4a2bb98 <col:37, col:47> col:47 invalid group 'int *'
| |-ParmVarDecl 0x2a7b4a2bc18 <col:54, col:68> col:68 invalid p 'const int *'
| |-ParmVarDecl 0x2a7b4a2bc98 <line:470:37, col:51> col:51 invalid a 'const int *'
| |-ParmVarDecl 0x2a7b4a2bd18 <col:54, col:68> col:68 invalid n 'const int *'
| `-ParmVarDecl 0x2a7b4a2bd98 <line:471:37, <invalid sloc>> col:45 invalid 'int *'
|-FunctionDecl 0x2a7b4aa21d8 <line:472:1, line:475:61> line:472:5 invalid ec_GFp_nistp224_point_get_affine_coordinates 'int (const int *, const int *, int *, int *, int *)'
| |-ParmVarDecl 0x2a7b4a2bf30 <col:50, col:66> col:66 invalid group 'const int *'
| |-ParmVarDecl 0x2a7b4a2bfb0 <line:473:50, col:66> col:66 invalid point 'const int *'
| |-ParmVarDecl 0x2a7b4a2c030 <line:474:50, col:58> col:58 invalid x 'int *'
| |-ParmVarDecl 0x2a7b4a2c0b0 <col:61, col:69> col:69 invalid y 'int *'
| `-ParmVarDecl 0x2a7b4aa2120 <line:475:50, col:58> col:58 invalid ctx 'int *'
|-FunctionDecl 0x2a7b4aa2698 <line:476:1, line:479:33> line:476:5 invalid ec_GFp_nistp224_mul 'int (const int *, int *, const int *, size_t, const int **, const int **, int *)'
| |-ParmVarDecl 0x2a7b4aa22b8 <col:25, col:41> col:41 invalid group 'const int *'
| |-ParmVarDecl 0x2a7b4aa2338 <col:48, col:58> col:58 invalid r 'int *'
| |-ParmVarDecl 0x2a7b4aa23b8 <line:477:25, col:39> col:39 invalid scalar 'const int *'
| |-ParmVarDecl 0x2a7b4aa2430 <col:47, col:54> col:54 num 'size_t':'unsigned long long'
| |-ParmVarDecl 0x2a7b4aa24c0 <line:478:25, <invalid sloc>> col:41 invalid points 'const int **':'const int **'
| |-ParmVarDecl 0x2a7b4aa2550 <col:51, <invalid sloc>> col:65 invalid scalars 'const int **':'const int **'
| `-ParmVarDecl 0x2a7b4aa25d0 <line:479:25, <invalid sloc>> col:33 invalid 'int *'
|-FunctionDecl 0x2a7b4aa2b68 <line:480:1, line:483:68> line:480:5 invalid ec_GFp_nistp224_points_mul 'int (const int *, int *, const int *, size_t, const int **, const int **, int *)'
| |-ParmVarDecl 0x2a7b4aa2788 <col:32, col:48> col:48 invalid group 'const int *'
| |-ParmVarDecl 0x2a7b4aa2808 <col:55, col:65> col:65 invalid r 'int *'
| |-ParmVarDecl 0x2a7b4aa2888 <line:481:32, col:46> col:46 invalid scalar 'const int *'
| |-ParmVarDecl 0x2a7b4aa2900 <col:54, col:61> col:61 num 'size_t':'unsigned long long'
| |-ParmVarDecl 0x2a7b4aa2990 <line:482:32, <invalid sloc>> col:48 invalid points 'const int **':'const int **'
| |-ParmVarDecl 0x2a7b4aa2a20 <line:483:32, <invalid sloc>> col:46 invalid scalars 'const int **':'const int **'
| `-ParmVarDecl 0x2a7b4aa2aa0 <col:57, col:65> col:65 invalid ctx 'int *'
|-FunctionDecl 0x2a7b4aa2d78 <line:484:1, col:65> col:5 invalid ec_GFp_nistp224_precompute_mult 'int (int *, int *)'
| |-ParmVarDecl 0x2a7b4aa2c58 <col:37, col:47> col:47 invalid group 'int *'
| `-ParmVarDecl 0x2a7b4aa2cd8 <col:54, col:62> col:62 invalid ctx 'int *'
|-FunctionDecl 0x2a7b4aa2ed8 <line:485:1, col:63> col:5 invalid ec_GFp_nistp224_have_precompute_mult 'int (const int *)'
| `-ParmVarDecl 0x2a7b4aa2e40 <col:42, col:58> col:58 invalid group 'const int *'
|-FunctionDecl 0x2a7b4aa3030 <line:488:1, col:47> col:5 invalid ec_GFp_nistp256_group_init 'int (int *)'
| `-ParmVarDecl 0x2a7b4aa2f98 <col:32, col:42> col:42 invalid group 'int *'
|-FunctionDecl 0x2a7b4a9e398 <line:489:1, line:491:45> line:489:5 invalid ec_GFp_nistp256_group_set_curve 'int (int *, const int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x2a7b4a9e0e0 <col:37, col:47> col:47 invalid group 'int *'
| |-ParmVarDecl 0x2a7b4a9e160 <col:54, col:68> col:68 invalid p 'const int *'
| |-ParmVarDecl 0x2a7b4a9e1e0 <line:490:37, col:51> col:51 invalid a 'const int *'
| |-ParmVarDecl 0x2a7b4a9e260 <col:54, col:68> col:68 invalid n 'const int *'
| `-ParmVarDecl 0x2a7b4a9e2e0 <line:491:37, <invalid sloc>> col:45 invalid 'int *'
|-FunctionDecl 0x2a7b4a9e730 <line:492:1, line:495:61> line:492:5 invalid ec_GFp_nistp256_point_get_affine_coordinates 'int (const int *, const int *, int *, int *, int *)'
| |-ParmVarDecl 0x2a7b4a9e478 <col:50, col:66> col:66 invalid group 'const int *'
| |-ParmVarDecl 0x2a7b4a9e4f8 <line:493:50, col:66> col:66 invalid point 'const int *'
| |-ParmVarDecl 0x2a7b4a9e578 <line:494:50, col:58> col:58 invalid x 'int *'
| |-ParmVarDecl 0x2a7b4a9e5f8 <col:61, col:69> col:69 invalid y 'int *'
| `-ParmVarDecl 0x2a7b4a9e678 <line:495:50, col:58> col:58 invalid ctx 'int *'
|-FunctionDecl 0x2a7b4a9ebf0 <line:496:1, line:499:33> line:496:5 invalid ec_GFp_nistp256_mul 'int (const int *, int *, const int *, size_t, const int **, const int **, int *)'
| |-ParmVarDecl 0x2a7b4a9e810 <col:25, col:41> col:41 invalid group 'const int *'
| |-ParmVarDecl 0x2a7b4a9e890 <col:48, col:58> col:58 invalid r 'int *'
| |-ParmVarDecl 0x2a7b4a9e910 <line:497:25, col:39> col:39 invalid scalar 'const int *'
| |-ParmVarDecl 0x2a7b4a9e988 <col:47, col:54> col:54 num 'size_t':'unsigned long long'
| |-ParmVarDecl 0x2a7b4a9ea18 <line:498:25, <invalid sloc>> col:41 invalid points 'const int **':'const int **'
| |-ParmVarDecl 0x2a7b4a9eaa8 <col:51, <invalid sloc>> col:65 invalid scalars 'const int **':'const int **'
| `-ParmVarDecl 0x2a7b4a9eb28 <line:499:25, <invalid sloc>> col:33 invalid 'int *'
|-FunctionDecl 0x2a7b4a9d0d0 <line:500:1, line:503:68> line:500:5 invalid ec_GFp_nistp256_points_mul 'int (const int *, int *, const int *, size_t, const int **, const int **, int *)'
| |-ParmVarDecl 0x2a7b4a9ece0 <col:32, col:48> col:48 invalid group 'const int *'
| |-ParmVarDecl 0x2a7b4a9ed60 <col:55, col:65> col:65 invalid r 'int *'
| |-ParmVarDecl 0x2a7b4a9ede0 <line:501:32, col:46> col:46 invalid scalar 'const int *'
| |-ParmVarDecl 0x2a7b4a9ee58 <col:54, col:61> col:61 num 'size_t':'unsigned long long'
| |-ParmVarDecl 0x2a7b4a9eee8 <line:502:32, <invalid sloc>> col:48 invalid points 'const int **':'const int **'
| |-ParmVarDecl 0x2a7b4a9ef78 <line:503:32, <invalid sloc>> col:46 invalid scalars 'const int **':'const int **'
| `-ParmVarDecl 0x2a7b4a9eff8 <col:57, col:65> col:65 invalid ctx 'int *'
|-FunctionDecl 0x2a7b4a9d2e0 <line:504:1, col:65> col:5 invalid ec_GFp_nistp256_precompute_mult 'int (int *, int *)'
| |-ParmVarDecl 0x2a7b4a9d1c0 <col:37, col:47> col:47 invalid group 'int *'
| `-ParmVarDecl 0x2a7b4a9d240 <col:54, col:62> col:62 invalid ctx 'int *'
|-FunctionDecl 0x2a7b4a9d440 <line:505:1, col:63> col:5 invalid ec_GFp_nistp256_have_precompute_mult 'int (const int *)'
| `-ParmVarDecl 0x2a7b4a9d3a8 <col:42, col:58> col:58 invalid group 'const int *'
|-FunctionDecl 0x2a7b4a9d598 <line:508:1, col:47> col:5 invalid ec_GFp_nistp521_group_init 'int (int *)'
| `-ParmVarDecl 0x2a7b4a9d500 <col:32, col:42> col:42 invalid group 'int *'
|-FunctionDecl 0x2a7b4a9d910 <line:509:1, line:511:45> line:509:5 invalid ec_GFp_nistp521_group_set_curve 'int (int *, const int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x2a7b4a9d658 <col:37, col:47> col:47 invalid group 'int *'
| |-ParmVarDecl 0x2a7b4a9d6d8 <col:54, col:68> col:68 invalid p 'const int *'
| |-ParmVarDecl 0x2a7b4a9d758 <line:510:37, col:51> col:51 invalid a 'const int *'
| |-ParmVarDecl 0x2a7b4a9d7d8 <col:54, col:68> col:68 invalid n 'const int *'
| `-ParmVarDecl 0x2a7b4a9d858 <line:511:37, <invalid sloc>> col:45 invalid 'int *'
|-FunctionDecl 0x2a7b4a9dca8 <line:512:1, line:515:61> line:512:5 invalid ec_GFp_nistp521_point_get_affine_coordinates 'int (const int *, const int *, int *, int *, int *)'
| |-ParmVarDecl 0x2a7b4a9d9f0 <col:50, col:66> col:66 invalid group 'const int *'
| |-ParmVarDecl 0x2a7b4a9da70 <line:513:50, col:66> col:66 invalid point 'const int *'
| |-ParmVarDecl 0x2a7b4a9daf0 <line:514:50, col:58> col:58 invalid x 'int *'
| |-ParmVarDecl 0x2a7b4a9db70 <col:61, col:69> col:69 invalid y 'int *'
| `-ParmVarDecl 0x2a7b4a9dbf0 <line:515:50, col:58> col:58 invalid ctx 'int *'
|-FunctionDecl 0x2a7b4a9b178 <line:516:1, line:519:33> line:516:5 invalid ec_GFp_nistp521_mul 'int (const int *, int *, const int *, size_t, const int **, const int **, int *)'
| |-ParmVarDecl 0x2a7b4a9dd88 <col:25, col:41> col:41 invalid group 'const int *'
| |-ParmVarDecl 0x2a7b4a9de08 <col:48, col:58> col:58 invalid r 'int *'
| |-ParmVarDecl 0x2a7b4a9de88 <line:517:25, col:39> col:39 invalid scalar 'const int *'
| |-ParmVarDecl 0x2a7b4a9df00 <col:47, col:54> col:54 num 'size_t':'unsigned long long'
| |-ParmVarDecl 0x2a7b4a9df90 <line:518:25, <invalid sloc>> col:41 invalid points 'const int **':'const int **'
| |-ParmVarDecl 0x2a7b4a9e020 <col:51, <invalid sloc>> col:65 invalid scalars 'const int **':'const int **'
| `-ParmVarDecl 0x2a7b4a9b0b0 <line:519:25, <invalid sloc>> col:33 invalid 'int *'
|-FunctionDecl 0x2a7b4a9b648 <line:520:1, line:523:68> line:520:5 invalid ec_GFp_nistp521_points_mul 'int (const int *, int *, const int *, size_t, const int **, const int **, int *)'
| |-ParmVarDecl 0x2a7b4a9b268 <col:32, col:48> col:48 invalid group 'const int *'
| |-ParmVarDecl 0x2a7b4a9b2e8 <col:55, col:65> col:65 invalid r 'int *'
| |-ParmVarDecl 0x2a7b4a9b368 <line:521:32, col:46> col:46 invalid scalar 'const int *'
| |-ParmVarDecl 0x2a7b4a9b3e0 <col:54, col:61> col:61 num 'size_t':'unsigned long long'
| |-ParmVarDecl 0x2a7b4a9b470 <line:522:32, <invalid sloc>> col:48 invalid points 'const int **':'const int **'
| |-ParmVarDecl 0x2a7b4a9b500 <line:523:32, <invalid sloc>> col:46 invalid scalars 'const int **':'const int **'
| `-ParmVarDecl 0x2a7b4a9b580 <col:57, col:65> col:65 invalid ctx 'int *'
|-FunctionDecl 0x2a7b4a9b858 <line:524:1, col:65> col:5 invalid ec_GFp_nistp521_precompute_mult 'int (int *, int *)'
| |-ParmVarDecl 0x2a7b4a9b738 <col:37, col:47> col:47 invalid group 'int *'
| `-ParmVarDecl 0x2a7b4a9b7b8 <col:54, col:62> col:62 invalid ctx 'int *'
|-FunctionDecl 0x2a7b4a9b9b8 <line:525:1, col:63> col:5 invalid ec_GFp_nistp521_have_precompute_mult 'int (const int *)'
| `-ParmVarDecl 0x2a7b4a9b920 <col:42, col:58> col:58 invalid group 'const int *'
|-FunctionDecl 0x2a7b4aa0e58 <line:528:1, line:552:75> line:528:6 used ec_GFp_nistp_points_make_affine_internal 'void (size_t, void *, size_t, void *, void (*)(void *), int (*)(const void *), void (*)(void *, const void *), void (*)(void *, const void *), void (*)(void *, const void *, const void *), void (*)(void *, const void *), void (*)(void *, const void *))'
| |-ParmVarDecl 0x2a7b4a9ba70 <col:47, col:54> col:54 num 'size_t':'unsigned long long'
| |-ParmVarDecl 0x2a7b4a9baf0 <col:59, col:65> col:65 point_array 'void *'
| |-ParmVarDecl 0x2a7b4a9bb68 <line:529:47, col:54> col:54 felem_size 'size_t':'unsigned long long'
| |-ParmVarDecl 0x2a7b4a9bbe8 <line:530:47, col:53> col:53 tmp_felems 'void *'
| |-ParmVarDecl 0x2a7b4a9bdb0 <line:531:47, col:75> col:54 felem_one 'void (*)(void *)'
| |-ParmVarDecl 0x2a7b4a9bfa8 <line:532:47, line:533:72> line:532:53 felem_is_zero 'int (*)(const void *)'
| |-ParmVarDecl 0x2a7b4aa02a8 <line:534:47, line:536:72> line:534:54 felem_assign 'void (*)(void *, const void *)'
| |-ParmVarDecl 0x2a7b4aa0480 <line:537:47, line:539:72> line:537:54 felem_square 'void (*)(void *, const void *)'
| |-ParmVarDecl 0x2a7b4aa07c0 <line:540:47, line:544:70> line:540:54 felem_mul 'void (*)(void *, const void *, const void *)'
| |-ParmVarDecl 0x2a7b4aa0998 <line:545:47, line:547:69> line:545:54 felem_inv 'void (*)(void *, const void *)'
| `-ParmVarDecl 0x2a7b4aa0b70 <line:548:47, line:552:74> line:548:54 felem_contract 'void (*)(void *, const void *)'
|-FunctionDecl 0x2a7b4a9c168 <line:553:1, line:554:76> line:553:6 used ec_GFp_nistp_recode_scalar_bits 'void (unsigned char *, unsigned char *, unsigned char)'
| |-ParmVarDecl 0x2a7b4aa0f80 <col:38, col:53> col:53 sign 'unsigned char *'
| |-ParmVarDecl 0x2a7b4aa1000 <line:554:38, col:53> col:53 digit 'unsigned char *'
| `-ParmVarDecl 0x2a7b4aa1080 <col:60, col:74> col:74 in 'unsigned char'
|-FunctionDecl 0x2a7b4a9c2e8 <line:556:1, col:39> col:5 invalid ec_precompute_mont_data 'int (int *)'
| `-ParmVarDecl 0x2a7b4a9c250 <col:29, <invalid sloc>> col:39 invalid 'int *'
|-FunctionDecl 0x2a7b4a9c440 <line:557:1, col:53> col:5 invalid ec_group_simple_order_bits 'int (const int *)'
| `-ParmVarDecl 0x2a7b4a9c3a8 <col:32, col:48> col:48 invalid group 'const int *'
|-FunctionDecl 0x2a7b4a9c698 <line:567:1, line:568:61> line:567:8 invalid ec_key_simple_priv2oct 'size_t (const int *, unsigned char *, size_t)'
| |-ParmVarDecl 0x2a7b4a9c500 <col:31, col:45> col:45 invalid eckey 'const int *'
| |-ParmVarDecl 0x2a7b4a9c580 <line:568:31, col:46> col:46 buf 'unsigned char *'
| `-ParmVarDecl 0x2a7b4a9c5f8 <col:51, col:58> col:58 len 'size_t':'unsigned long long'
|-FunctionDecl 0x2a7b4a9c908 <line:569:1, col:79> col:5 invalid ec_key_simple_oct2priv 'int (int *, const unsigned char *, size_t)'
| |-ParmVarDecl 0x2a7b4a9c768 <col:28, col:36> col:36 invalid eckey 'int *'
| |-ParmVarDecl 0x2a7b4a9c7e8 <col:43, col:64> col:64 buf 'const unsigned char *'
| `-ParmVarDecl 0x2a7b4a9c860 <col:69, col:76> col:76 len 'size_t':'unsigned long long'
|-FunctionDecl 0x2a7b4a9ca70 <line:570:1, col:45> col:5 invalid ec_key_simple_generate_key 'int (int *)'
| `-ParmVarDecl 0x2a7b4a9c9d8 <col:32, col:40> col:40 invalid eckey 'int *'
|-FunctionDecl 0x2a7b4a9cbc8 <line:571:1, col:52> col:5 invalid ec_key_simple_generate_public_key 'int (int *)'
| `-ParmVarDecl 0x2a7b4a9cb30 <col:39, col:47> col:47 invalid eckey 'int *'
|-FunctionDecl 0x2a7b4a9cd20 <line:572:1, col:48> col:5 invalid ec_key_simple_check_key 'int (const int *)'
| `-ParmVarDecl 0x2a7b4a9cc88 <col:29, col:43> col:43 invalid eckey 'const int *'
|-RecordDecl 0x2a7b4a9cdc8 <line:576:1, line:601:1> line:576:8 invalid struct ec_key_method_st definition
| |-FieldDecl 0x2a7b4a9ce98 <line:577:5, col:17> col:17 name 'const char *'
| |-FieldDecl 0x2a7b4a9cf20 <line:578:5, col:13> col:13 flags 'int32_t':'int'
| |-FieldDecl 0x2a7b4a9d038 <line:579:5, col:28> col:11 init 'int (*)(int *)'
| |-FieldDecl 0x2a7b4aa11b0 <line:580:5, col:31> col:12 finish 'void (*)(int *)'
| |-FieldDecl 0x2a7b4aa1350 <line:581:5, col:48> col:11 copy 'int (*)(int *, const int *)'
| |-FieldDecl 0x2a7b4aa14f0 <line:582:5, col:54> col:11 set_group 'int (*)(int *, const int *)'
| |-FieldDecl 0x2a7b4aa1690 <line:583:5, col:59> col:11 set_private 'int (*)(int *, const int *)'
| |-FieldDecl 0x2a7b4aa1830 <line:584:5, col:59> col:11 set_public 'int (*)(int *, const int *)'
| |-FieldDecl 0x2a7b4aa1948 <line:585:5, col:30> col:11 keygen 'int (*)(int *)'
| |-FieldDecl 0x2a7b4aa1bf8 <line:586:5, line:587:67> line:586:11 compute_key 'int (*)(unsigned char **, size_t *, const int *, const int *)'
| |-FieldDecl 0x2a7b4aa4240 <line:588:5, line:590:47> line:588:11 sign 'int (*)(int, const unsigned char *, int, unsigned char *, unsigned int *, const int *, const int *, int *)'
| |-FieldDecl 0x2a7b4aa45e0 <line:591:5, line:592:34> line:591:11 sign_setup 'int (*)(int *, int *, int **, int **)'
| |-FieldDecl 0x2a7b4aa49f8 <line:593:5, <invalid sloc>> col:18 invalid sign_sig 'int *(*)(const unsigned char *, int, const int *, const int *, int *)'
| |-FieldDecl 0x2a7b4aa4ea0 <line:597:5, line:598:74> line:597:11 verify 'int (*)(int, const unsigned char *, int, const unsigned char *, int, int *)'
| `-FieldDecl 0x2a7b4aa6290 <line:599:5, line:600:58> line:599:11 verify_sig 'int (*)(const unsigned char *, int, const int *, int *)'
|-FunctionDecl 0x2a7b4aa6398 <line:605:1, col:34> col:5 invalid ossl_ec_key_gen 'int (int *)'
| `-ParmVarDecl 0x2a7b4aa6300 <col:21, col:29> col:29 invalid eckey 'int *'
|-FunctionDecl 0x2a7b4aa6688 <line:606:1, line:607:70> line:606:5 invalid ossl_ecdh_compute_key 'int (unsigned char **, size_t *, const int *, const int *)'
| |-ParmVarDecl 0x2a7b4aa6460 <col:27, col:43> col:43 pout 'unsigned char **'
| |-ParmVarDecl 0x2a7b4aa64d8 <col:49, col:57> col:57 poutlen 'size_t *'
| |-ParmVarDecl 0x2a7b4aa6558 <line:607:27, col:43> col:43 invalid pub_key 'const int *'
| `-ParmVarDecl 0x2a7b4aa65d8 <col:52, col:66> col:66 invalid ecdh 'const int *'
|-FunctionDecl 0x2a7b4aa6990 <line:608:1, line:609:72> line:608:5 invalid ecdh_simple_compute_key 'int (unsigned char **, size_t *, const int *, const int *)'
| |-ParmVarDecl 0x2a7b4aa6768 <col:29, col:45> col:45 pout 'unsigned char **'
| |-ParmVarDecl 0x2a7b4aa67e0 <col:51, col:59> col:59 poutlen 'size_t *'
| |-ParmVarDecl 0x2a7b4aa6860 <line:609:29, col:45> col:45 invalid pub_key 'const int *'
| `-ParmVarDecl 0x2a7b4aa68e0 <col:54, col:68> col:68 invalid ecdh 'const int *'
|-RecordDecl 0x2a7b4aa6a50 <line:611:1, line:614:1> line:611:8 invalid struct ECDSA_SIG_st definition
| |-FieldDecl 0x2a7b4aa6b28 <line:612:5, col:13> col:13 invalid r 'int *'
| `-FieldDecl 0x2a7b4aa6b98 <line:613:5, col:13> col:13 invalid s 'int *'
|-FunctionDecl 0x2a7b4aa6e48 <line:616:1, line:617:38> line:616:5 invalid ossl_ecdsa_sign_setup 'int (int *, int *, int **, int **)'
| |-ParmVarDecl 0x2a7b4aa6c08 <col:27, col:35> col:35 invalid eckey 'int *'
| |-ParmVarDecl 0x2a7b4aa6c88 <col:42, col:50> col:50 invalid ctx_in 'int *'
| |-ParmVarDecl 0x2a7b4aa6d10 <col:58, col:67> col:67 invalid kinvp 'int **'
| `-ParmVarDecl 0x2a7b4aa6d98 <line:617:27, col:36> col:36 invalid rp 'int **'
|-FunctionDecl 0x2a7b4ae1670 <line:618:1, line:620:71> line:618:5 invalid ossl_ecdsa_sign 'int (int, const unsigned char *, int, unsigned char *, unsigned int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x2a7b4aa6f20 <col:21, col:25> col:25 type 'int'
| |-ParmVarDecl 0x2a7b4aa6fa0 <col:31, col:52> col:52 dgst 'const unsigned char *'
| |-ParmVarDecl 0x2a7b4aa7020 <col:58, col:62> col:62 dlen 'int'
| |-ParmVarDecl 0x2a7b4aa70a0 <line:619:21, col:36> col:36 sig 'unsigned char *'
| |-ParmVarDecl 0x2a7b4ae1420 <col:41, col:55> col:55 siglen 'unsigned int *'
| |-ParmVarDecl 0x2a7b4ae14a0 <line:620:21, col:35> col:35 invalid kinv 'const int *'
| |-ParmVarDecl 0x2a7b4ae1520 <col:41, col:55> col:55 invalid r 'const int *'
| `-ParmVarDecl 0x2a7b4ae15a0 <col:58, col:66> col:66 invalid eckey 'int *'
|-FunctionDecl 0x2a7b4ae1a20 <line:621:1, line:623:45> line:621:12 invalid ossl_ecdsa_sign_sig 'int *(const unsigned char *, int, const int *, const int *, int *)'
| |-ParmVarDecl 0x2a7b4ae1768 <col:32, col:53> col:53 dgst 'const unsigned char *'
| |-ParmVarDecl 0x2a7b4ae17e8 <col:59, col:63> col:63 dgst_len 'int'
| |-ParmVarDecl 0x2a7b4ae1868 <line:622:32, col:46> col:46 invalid in_kinv 'const int *'
| |-ParmVarDecl 0x2a7b4ae18e8 <col:55, col:69> col:69 invalid in_r 'const int *'
| `-ParmVarDecl 0x2a7b4ae1968 <line:623:32, col:40> col:40 invalid eckey 'int *'
|-FunctionDecl 0x2a7b4ae1e40 <line:624:1, line:625:78> line:624:5 invalid ossl_ecdsa_verify 'int (int, const unsigned char *, int, const unsigned char *, int, int *)'
| |-ParmVarDecl 0x2a7b4ae1b00 <col:23, col:27> col:27 type 'int'
| |-ParmVarDecl 0x2a7b4ae1b80 <col:33, col:54> col:54 dgst 'const unsigned char *'
| |-ParmVarDecl 0x2a7b4ae1c00 <col:60, col:64> col:64 dgst_len 'int'
| |-ParmVarDecl 0x2a7b4ae1c80 <line:625:23, col:44> col:44 sigbuf 'const unsigned char *'
| |-ParmVarDecl 0x2a7b4ae1d00 <col:52, col:56> col:56 sig_len 'int'
| `-ParmVarDecl 0x2a7b4ae1d80 <col:65, col:73> col:73 invalid eckey 'int *'
|-FunctionDecl 0x2a7b4ae2158 <line:626:1, line:627:62> line:626:5 invalid ossl_ecdsa_verify_sig 'int (const unsigned char *, int, const int *, int *)'
| |-ParmVarDecl 0x2a7b4ae1f28 <col:27, col:48> col:48 dgst 'const unsigned char *'
| |-ParmVarDecl 0x2a7b4ae1fa8 <col:54, col:58> col:58 dgst_len 'int'
| |-ParmVarDecl 0x2a7b4ae2028 <line:627:27, col:44> col:44 invalid sig 'const int *'
| `-ParmVarDecl 0x2a7b4ae20a8 <col:49, col:57> col:57 invalid eckey 'int *'
|-FunctionDecl 0x2a7b4ae2730 <line:629:1, line:630:47> line:629:5 X25519 'int (uint8_t *, const uint8_t *, const uint8_t *)'
| |-ParmVarDecl 0x2a7b4ae2380 <col:12, col:37> col:20 out_shared_key 'uint8_t *':'uint8_t *'
| |-ParmVarDecl 0x2a7b4ae24f0 <col:40, col:68> col:54 private_key 'const uint8_t *':'const uint8_t *'
| `-ParmVarDecl 0x2a7b4ae25b8 <line:630:12, col:46> col:26 peer_public_value 'const uint8_t *':'const uint8_t *'
|-FunctionDecl 0x2a7b4ae2a68 <line:631:1, line:632:62> line:631:6 X25519_public_from_private 'void (uint8_t *, const uint8_t *)'
| |-ParmVarDecl 0x2a7b4ae2860 <col:33, col:60> col:41 out_public_value 'uint8_t *':'uint8_t *'
| `-ParmVarDecl 0x2a7b4ae2928 <line:632:33, col:61> col:47 private_key 'const uint8_t *':'const uint8_t *'
|-FunctionDecl 0x2a7b4ae2cf0 <line:634:1, col:79> col:5 invalid ec_point_blind_coordinates 'int (const int *, int *, int *)'
| |-ParmVarDecl 0x2a7b4ae2b48 <col:32, col:48> col:48 invalid group 'const int *'
| |-ParmVarDecl 0x2a7b4ae2bc8 <col:55, col:65> col:65 invalid p 'int *'
| `-ParmVarDecl 0x2a7b4ae2c48 <col:68, col:76> col:76 invalid ctx 'int *'
|-TypedefDecl 0x2a7b4ae2db8 <.//openssl//file_jk/before\crypto\ec\ecp_nistp256.c:53:1, col:17> col:17 referenced u8 'uint8_t':'unsigned char'
| `-TypedefType 0x2a7b4ae2220 'uint8_t' sugar
|   |-Typedef 0x2a7b49b6030 'uint8_t'
|   `-BuiltinType 0x2a7b2e41d30 'unsigned char'
|-TypedefDecl 0x2a7b4ae2e40 <line:54:1, col:18> col:18 u32 'uint32_t':'unsigned int'
| `-TypedefType 0x2a7b4ae2e10 'uint32_t' sugar
|   |-Typedef 0x2a7b49b6110 'uint32_t'
|   `-BuiltinType 0x2a7b2e41d70 'unsigned int'
|-TypedefDecl 0x2a7b4ae2ed0 <line:55:1, col:18> col:18 referenced u64 'uint64_t':'unsigned long long'
| `-TypedefType 0x2a7b4ae2ea0 'uint64_t' sugar
|   |-Typedef 0x2a7b49b6180 'uint64_t'
|   `-BuiltinType 0x2a7b2e41db0 'unsigned long long'
|-TypedefDecl 0x2a7b4ae2fe8 <line:63:1, col:30> col:12 referenced felem_bytearray 'u8 [32]'
| `-ConstantArrayType 0x2a7b4ae2f90 'u8 [32]' 32 
|   `-TypedefType 0x2a7b4ae2f30 'u8' sugar
|     |-Typedef 0x2a7b4ae2db8 'u8'
|     `-TypedefType 0x2a7b4ae2220 'uint8_t' sugar
|       |-Typedef 0x2a7b49b6030 'uint8_t'
|       `-BuiltinType 0x2a7b2e41d30 'unsigned char'
|-VarDecl 0x2a7b4ae3138 <line:69:1, line:90:1> line:69:30 used nistp256_curve_params 'const felem_bytearray [5]' static cinit
| `-InitListExpr 0x2a7b4ae51f8 <col:57, line:90:1> 'const felem_bytearray [5]'
|   |-InitListExpr 0x2a7b4ae5270 <line:70:5, line:73:52> 'const felem_bytearray':'u8 const[32]'
|   | |-ImplicitCastExpr 0x2a7b4ae53b0 <line:70:6> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae31a0 <col:6> 'int' 255
|   | |-ImplicitCastExpr 0x2a7b4ae53c8 <col:12> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae31c8 <col:12> 'int' 255
|   | |-ImplicitCastExpr 0x2a7b4ae53e0 <col:18> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae31f0 <col:18> 'int' 255
|   | |-ImplicitCastExpr 0x2a7b4ae53f8 <col:24> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae3218 <col:24> 'int' 255
|   | |-ImplicitCastExpr 0x2a7b4ae5410 <col:30> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae3240 <col:30> 'int' 0
|   | |-ImplicitCastExpr 0x2a7b4ae5440 <col:36> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae3268 <col:36> 'int' 0
|   | |-ImplicitCastExpr 0x2a7b4ae5458 <col:42> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae3290 <col:42> 'int' 0
|   | |-ImplicitCastExpr 0x2a7b4ae5470 <col:48> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae32b8 <col:48> 'int' 1
|   | |-ImplicitCastExpr 0x2a7b4ae5488 <line:71:6> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae32e0 <col:6> 'int' 0
|   | |-ImplicitCastExpr 0x2a7b4ae54a0 <col:12> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae3308 <col:12> 'int' 0
|   | |-ImplicitCastExpr 0x2a7b4ae54b8 <col:18> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae3330 <col:18> 'int' 0
|   | |-ImplicitCastExpr 0x2a7b4ae54d0 <col:24> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae3358 <col:24> 'int' 0
|   | |-ImplicitCastExpr 0x2a7b4ae54e8 <col:30> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae3380 <col:30> 'int' 0
|   | |-ImplicitCastExpr 0x2a7b4ae5500 <col:36> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae33a8 <col:36> 'int' 0
|   | |-ImplicitCastExpr 0x2a7b4ae5518 <col:42> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae33d0 <col:42> 'int' 0
|   | |-ImplicitCastExpr 0x2a7b4ae5530 <col:48> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae33f8 <col:48> 'int' 0
|   | |-ImplicitCastExpr 0x2a7b4ae5548 <line:72:6> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae3430 <col:6> 'int' 0
|   | |-ImplicitCastExpr 0x2a7b4ae5560 <col:12> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae3458 <col:12> 'int' 0
|   | |-ImplicitCastExpr 0x2a7b4ae5578 <col:18> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae3480 <col:18> 'int' 0
|   | |-ImplicitCastExpr 0x2a7b4ae5590 <col:24> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae34a8 <col:24> 'int' 0
|   | |-ImplicitCastExpr 0x2a7b4ae55a8 <col:30> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae34d0 <col:30> 'int' 255
|   | |-ImplicitCastExpr 0x2a7b4ae55c0 <col:36> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae34f8 <col:36> 'int' 255
|   | |-ImplicitCastExpr 0x2a7b4ae55d8 <col:42> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae3520 <col:42> 'int' 255
|   | |-ImplicitCastExpr 0x2a7b4ae55f0 <col:48> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae3548 <col:48> 'int' 255
|   | |-ImplicitCastExpr 0x2a7b4ae5608 <line:73:6> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae3570 <col:6> 'int' 255
|   | |-ImplicitCastExpr 0x2a7b4ae5620 <col:12> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae3598 <col:12> 'int' 255
|   | |-ImplicitCastExpr 0x2a7b4ae5638 <col:18> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae35c0 <col:18> 'int' 255
|   | |-ImplicitCastExpr 0x2a7b4ae5650 <col:24> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae35e8 <col:24> 'int' 255
|   | |-ImplicitCastExpr 0x2a7b4ae5668 <col:30> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae3610 <col:30> 'int' 255
|   | |-ImplicitCastExpr 0x2a7b4ae5680 <col:36> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae3638 <col:36> 'int' 255
|   | |-ImplicitCastExpr 0x2a7b4ae5698 <col:42> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae3660 <col:42> 'int' 255
|   | `-ImplicitCastExpr 0x2a7b4ae56b0 <col:48> 'u8':'unsigned char' <IntegralCast>
|   |   `-IntegerLiteral 0x2a7b4ae3688 <col:48> 'int' 255
|   |-InitListExpr 0x2a7b4ae56d8 <line:74:5, line:77:52> 'const felem_bytearray':'u8 const[32]'
|   | |-ImplicitCastExpr 0x2a7b4ae5818 <line:74:6> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae37f0 <col:6> 'int' 255
|   | |-ImplicitCastExpr 0x2a7b4ae5830 <col:12> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae3818 <col:12> 'int' 255
|   | |-ImplicitCastExpr 0x2a7b4ae5848 <col:18> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae3840 <col:18> 'int' 255
|   | |-ImplicitCastExpr 0x2a7b4ae5860 <col:24> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae3868 <col:24> 'int' 255
|   | |-ImplicitCastExpr 0x2a7b4ae5878 <col:30> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae3890 <col:30> 'int' 0
|   | |-ImplicitCastExpr 0x2a7b4ae5890 <col:36> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae38b8 <col:36> 'int' 0
|   | |-ImplicitCastExpr 0x2a7b4ae58a8 <col:42> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae38e0 <col:42> 'int' 0
|   | |-ImplicitCastExpr 0x2a7b4ae58c0 <col:48> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae3908 <col:48> 'int' 1
|   | |-ImplicitCastExpr 0x2a7b4ae58d8 <line:75:6> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae3930 <col:6> 'int' 0
|   | |-ImplicitCastExpr 0x2a7b4ae58f0 <col:12> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae3958 <col:12> 'int' 0
|   | |-ImplicitCastExpr 0x2a7b4ae5908 <col:18> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae3980 <col:18> 'int' 0
|   | |-ImplicitCastExpr 0x2a7b4ae5920 <col:24> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae39a8 <col:24> 'int' 0
|   | |-ImplicitCastExpr 0x2a7b4ae5938 <col:30> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae39d0 <col:30> 'int' 0
|   | |-ImplicitCastExpr 0x2a7b4ae5950 <col:36> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae39f8 <col:36> 'int' 0
|   | |-ImplicitCastExpr 0x2a7b4ae5968 <col:42> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae3a20 <col:42> 'int' 0
|   | |-ImplicitCastExpr 0x2a7b4ae5980 <col:48> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae3a48 <col:48> 'int' 0
|   | |-ImplicitCastExpr 0x2a7b4ae5998 <line:76:6> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae3a70 <col:6> 'int' 0
|   | |-ImplicitCastExpr 0x2a7b4ae59b0 <col:12> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae3a98 <col:12> 'int' 0
|   | |-ImplicitCastExpr 0x2a7b4ae59c8 <col:18> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae3ac0 <col:18> 'int' 0
|   | |-ImplicitCastExpr 0x2a7b4ae59e0 <col:24> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae3ae8 <col:24> 'int' 0
|   | |-ImplicitCastExpr 0x2a7b4ae59f8 <col:30> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae3b10 <col:30> 'int' 255
|   | |-ImplicitCastExpr 0x2a7b4ae5a10 <col:36> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae3b38 <col:36> 'int' 255
|   | |-ImplicitCastExpr 0x2a7b4ae5a28 <col:42> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae3b60 <col:42> 'int' 255
|   | |-ImplicitCastExpr 0x2a7b4ae5a40 <col:48> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae3b88 <col:48> 'int' 255
|   | |-ImplicitCastExpr 0x2a7b4ae5a58 <line:77:6> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae3bb0 <col:6> 'int' 255
|   | |-ImplicitCastExpr 0x2a7b4ae5a70 <col:12> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae3bd8 <col:12> 'int' 255
|   | |-ImplicitCastExpr 0x2a7b4ae5a88 <col:18> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae3c00 <col:18> 'int' 255
|   | |-ImplicitCastExpr 0x2a7b4ae5aa0 <col:24> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae3c28 <col:24> 'int' 255
|   | |-ImplicitCastExpr 0x2a7b4ae5ab8 <col:30> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae3c50 <col:30> 'int' 255
|   | |-ImplicitCastExpr 0x2a7b4ae5ad0 <col:36> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae3c78 <col:36> 'int' 255
|   | |-ImplicitCastExpr 0x2a7b4ae5ae8 <col:42> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae3ca0 <col:42> 'int' 255
|   | `-ImplicitCastExpr 0x2a7b4ae5b00 <col:48> 'u8':'unsigned char' <IntegralCast>
|   |   `-IntegerLiteral 0x2a7b4ae3cc8 <col:48> 'int' 252
|   |-InitListExpr 0x2a7b4ae5b28 <line:78:5, line:81:52> 'const felem_bytearray':'u8 const[32]'
|   | |-ImplicitCastExpr 0x2a7b4ae5c68 <line:78:6> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae3e30 <col:6> 'int' 90
|   | |-ImplicitCastExpr 0x2a7b4ae5c80 <col:12> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae3e58 <col:12> 'int' 198
|   | |-ImplicitCastExpr 0x2a7b4ae5c98 <col:18> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae3e80 <col:18> 'int' 53
|   | |-ImplicitCastExpr 0x2a7b4ae5cb0 <col:24> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae3ea8 <col:24> 'int' 216
|   | |-ImplicitCastExpr 0x2a7b4ae5cc8 <col:30> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae3ed0 <col:30> 'int' 170
|   | |-ImplicitCastExpr 0x2a7b4ae5ce0 <col:36> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae3ef8 <col:36> 'int' 58
|   | |-ImplicitCastExpr 0x2a7b4ae5cf8 <col:42> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae3f20 <col:42> 'int' 147
|   | |-ImplicitCastExpr 0x2a7b4ae5d10 <col:48> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae3f48 <col:48> 'int' 231
|   | |-ImplicitCastExpr 0x2a7b4ae5d28 <line:79:6> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae3f70 <col:6> 'int' 179
|   | |-ImplicitCastExpr 0x2a7b4ae5d40 <col:12> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae3f98 <col:12> 'int' 235
|   | |-ImplicitCastExpr 0x2a7b4ae5d58 <col:18> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae3fc0 <col:18> 'int' 189
|   | |-ImplicitCastExpr 0x2a7b4ae5d70 <col:24> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae3fe8 <col:24> 'int' 85
|   | |-ImplicitCastExpr 0x2a7b4ae5d88 <col:30> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae4010 <col:30> 'int' 118
|   | |-ImplicitCastExpr 0x2a7b4ae5da0 <col:36> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae4038 <col:36> 'int' 152
|   | |-ImplicitCastExpr 0x2a7b4ae5db8 <col:42> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae4060 <col:42> 'int' 134
|   | |-ImplicitCastExpr 0x2a7b4ae5dd0 <col:48> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae4088 <col:48> 'int' 188
|   | |-ImplicitCastExpr 0x2a7b4ae5de8 <line:80:6> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae40b0 <col:6> 'int' 101
|   | |-ImplicitCastExpr 0x2a7b4ae5e00 <col:12> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae40d8 <col:12> 'int' 29
|   | |-ImplicitCastExpr 0x2a7b4ae5e18 <col:18> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae4100 <col:18> 'int' 6
|   | |-ImplicitCastExpr 0x2a7b4ae5e30 <col:24> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae4128 <col:24> 'int' 176
|   | |-ImplicitCastExpr 0x2a7b4ae5e48 <col:30> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae4150 <col:30> 'int' 204
|   | |-ImplicitCastExpr 0x2a7b4ae5e60 <col:36> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae4178 <col:36> 'int' 83
|   | |-ImplicitCastExpr 0x2a7b4ae5e78 <col:42> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae41a0 <col:42> 'int' 176
|   | |-ImplicitCastExpr 0x2a7b4ae5e90 <col:48> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae41c8 <col:48> 'int' 246
|   | |-ImplicitCastExpr 0x2a7b4ae5ea8 <line:81:6> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae41f0 <col:6> 'int' 59
|   | |-ImplicitCastExpr 0x2a7b4ae5ec0 <col:12> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae4218 <col:12> 'int' 206
|   | |-ImplicitCastExpr 0x2a7b4ae5ed8 <col:18> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae4240 <col:18> 'int' 60
|   | |-ImplicitCastExpr 0x2a7b4ae5ef0 <col:24> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae4268 <col:24> 'int' 62
|   | |-ImplicitCastExpr 0x2a7b4ae5f08 <col:30> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae4290 <col:30> 'int' 39
|   | |-ImplicitCastExpr 0x2a7b4ae5f20 <col:36> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae42b8 <col:36> 'int' 210
|   | |-ImplicitCastExpr 0x2a7b4ae5f38 <col:42> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae42e0 <col:42> 'int' 96
|   | `-ImplicitCastExpr 0x2a7b4ae5f50 <col:48> 'u8':'unsigned char' <IntegralCast>
|   |   `-IntegerLiteral 0x2a7b4ae4308 <col:48> 'int' 75
|   |-InitListExpr 0x2a7b4ae5f78 <line:82:5, line:85:52> 'const felem_bytearray':'u8 const[32]'
|   | |-ImplicitCastExpr 0x2a7b4ae60b8 <line:82:6> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae4470 <col:6> 'int' 107
|   | |-ImplicitCastExpr 0x2a7b4ae60d0 <col:12> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae4498 <col:12> 'int' 23
|   | |-ImplicitCastExpr 0x2a7b4ae60e8 <col:18> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae44c0 <col:18> 'int' 209
|   | |-ImplicitCastExpr 0x2a7b4ae6100 <col:24> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae44e8 <col:24> 'int' 242
|   | |-ImplicitCastExpr 0x2a7b4ae6118 <col:30> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae4510 <col:30> 'int' 225
|   | |-ImplicitCastExpr 0x2a7b4ae6130 <col:36> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae4538 <col:36> 'int' 44
|   | |-ImplicitCastExpr 0x2a7b4ae6148 <col:42> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae4560 <col:42> 'int' 66
|   | |-ImplicitCastExpr 0x2a7b4ae6160 <col:48> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae4588 <col:48> 'int' 71
|   | |-ImplicitCastExpr 0x2a7b4ae6178 <line:83:6> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae45b0 <col:6> 'int' 248
|   | |-ImplicitCastExpr 0x2a7b4ae6190 <col:12> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae45d8 <col:12> 'int' 188
|   | |-ImplicitCastExpr 0x2a7b4ae61a8 <col:18> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae4600 <col:18> 'int' 230
|   | |-ImplicitCastExpr 0x2a7b4ae61c0 <col:24> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae4628 <col:24> 'int' 229
|   | |-ImplicitCastExpr 0x2a7b4ae61d8 <col:30> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae4650 <col:30> 'int' 99
|   | |-ImplicitCastExpr 0x2a7b4ae61f0 <col:36> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae4678 <col:36> 'int' 164
|   | |-ImplicitCastExpr 0x2a7b4ae6208 <col:42> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae46a0 <col:42> 'int' 64
|   | |-ImplicitCastExpr 0x2a7b4ae6220 <col:48> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae46c8 <col:48> 'int' 242
|   | |-ImplicitCastExpr 0x2a7b4ae6238 <line:84:6> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae46f0 <col:6> 'int' 119
|   | |-ImplicitCastExpr 0x2a7b4ae6250 <col:12> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae4718 <col:12> 'int' 3
|   | |-ImplicitCastExpr 0x2a7b4ae6268 <col:18> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae4740 <col:18> 'int' 125
|   | |-ImplicitCastExpr 0x2a7b4ae6280 <col:24> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae4768 <col:24> 'int' 129
|   | |-ImplicitCastExpr 0x2a7b4ae6298 <col:30> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae4790 <col:30> 'int' 45
|   | |-ImplicitCastExpr 0x2a7b4ae62b0 <col:36> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae47b8 <col:36> 'int' 235
|   | |-ImplicitCastExpr 0x2a7b4ae62c8 <col:42> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae47e0 <col:42> 'int' 51
|   | |-ImplicitCastExpr 0x2a7b4ae62e0 <col:48> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae4808 <col:48> 'int' 160
|   | |-ImplicitCastExpr 0x2a7b4ae62f8 <line:85:6> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae4830 <col:6> 'int' 244
|   | |-ImplicitCastExpr 0x2a7b4ae6310 <col:12> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae4858 <col:12> 'int' 161
|   | |-ImplicitCastExpr 0x2a7b4ae6328 <col:18> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae4880 <col:18> 'int' 57
|   | |-ImplicitCastExpr 0x2a7b4ae6340 <col:24> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae48a8 <col:24> 'int' 69
|   | |-ImplicitCastExpr 0x2a7b4ae6358 <col:30> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae48d0 <col:30> 'int' 216
|   | |-ImplicitCastExpr 0x2a7b4ae6370 <col:36> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae48f8 <col:36> 'int' 152
|   | |-ImplicitCastExpr 0x2a7b4ae6388 <col:42> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4ae4920 <col:42> 'int' 194
|   | `-ImplicitCastExpr 0x2a7b4ae63a0 <col:48> 'u8':'unsigned char' <IntegralCast>
|   |   `-IntegerLiteral 0x2a7b4ae4948 <col:48> 'int' 150
|   `-InitListExpr 0x2a7b4ae63c8 <line:86:5, line:89:52> 'const felem_bytearray':'u8 const[32]'
|     |-ImplicitCastExpr 0x2a7b4ae6508 <line:86:6> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x2a7b4ae4ab0 <col:6> 'int' 79
|     |-ImplicitCastExpr 0x2a7b4ae6520 <col:12> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x2a7b4ae4ad8 <col:12> 'int' 227
|     |-ImplicitCastExpr 0x2a7b4ae6538 <col:18> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x2a7b4ae4b00 <col:18> 'int' 66
|     |-ImplicitCastExpr 0x2a7b4ae6550 <col:24> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x2a7b4ae4b28 <col:24> 'int' 226
|     |-ImplicitCastExpr 0x2a7b4ae6568 <col:30> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x2a7b4ae4b50 <col:30> 'int' 254
|     |-ImplicitCastExpr 0x2a7b4ae6580 <col:36> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x2a7b4ae4b78 <col:36> 'int' 26
|     |-ImplicitCastExpr 0x2a7b4ae6598 <col:42> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x2a7b4ae4ba0 <col:42> 'int' 127
|     |-ImplicitCastExpr 0x2a7b4ae65b0 <col:48> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x2a7b4ae4bc8 <col:48> 'int' 155
|     |-ImplicitCastExpr 0x2a7b4ae65c8 <line:87:6> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x2a7b4ae4bf0 <col:6> 'int' 142
|     |-ImplicitCastExpr 0x2a7b4ae65e0 <col:12> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x2a7b4ae4c18 <col:12> 'int' 231
|     |-ImplicitCastExpr 0x2a7b4ae65f8 <col:18> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x2a7b4ae4c40 <col:18> 'int' 235
|     |-ImplicitCastExpr 0x2a7b4ae6610 <col:24> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x2a7b4ae4c68 <col:24> 'int' 74
|     |-ImplicitCastExpr 0x2a7b4ae6628 <col:30> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x2a7b4ae4c90 <col:30> 'int' 124
|     |-ImplicitCastExpr 0x2a7b4ae6640 <col:36> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x2a7b4ae4cb8 <col:36> 'int' 15
|     |-ImplicitCastExpr 0x2a7b4ae6658 <col:42> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x2a7b4ae4ce0 <col:42> 'int' 158
|     |-ImplicitCastExpr 0x2a7b4ae6670 <col:48> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x2a7b4ae4d08 <col:48> 'int' 22
|     |-ImplicitCastExpr 0x2a7b4ae6688 <line:88:6> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x2a7b4ae4d30 <col:6> 'int' 43
|     |-ImplicitCastExpr 0x2a7b4ae66a0 <col:12> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x2a7b4ae4d58 <col:12> 'int' 206
|     |-ImplicitCastExpr 0x2a7b4ae66b8 <col:18> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x2a7b4ae4d80 <col:18> 'int' 51
|     |-ImplicitCastExpr 0x2a7b4ae66d0 <col:24> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x2a7b4ae4da8 <col:24> 'int' 87
|     |-ImplicitCastExpr 0x2a7b4ae66e8 <col:30> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x2a7b4ae4dd0 <col:30> 'int' 107
|     |-ImplicitCastExpr 0x2a7b4ae6700 <col:36> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x2a7b4ae4df8 <col:36> 'int' 49
|     |-ImplicitCastExpr 0x2a7b4ae6718 <col:42> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x2a7b4ae4e20 <col:42> 'int' 94
|     |-ImplicitCastExpr 0x2a7b4ae6730 <col:48> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x2a7b4ae4e48 <col:48> 'int' 206
|     |-ImplicitCastExpr 0x2a7b4ae6748 <line:89:6> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x2a7b4ae4e70 <col:6> 'int' 203
|     |-ImplicitCastExpr 0x2a7b4ae6760 <col:12> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x2a7b4ae4e98 <col:12> 'int' 182
|     |-ImplicitCastExpr 0x2a7b4ae6778 <col:18> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x2a7b4ae4ec0 <col:18> 'int' 64
|     |-ImplicitCastExpr 0x2a7b4ae6790 <col:24> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x2a7b4ae4ee8 <col:24> 'int' 104
|     |-ImplicitCastExpr 0x2a7b4ae67a8 <col:30> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x2a7b4ae4f10 <col:30> 'int' 55
|     |-ImplicitCastExpr 0x2a7b4ae67c0 <col:36> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x2a7b4ae4f38 <col:36> 'int' 191
|     |-ImplicitCastExpr 0x2a7b4ae67d8 <col:42> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x2a7b4ae4f60 <col:42> 'int' 81
|     `-ImplicitCastExpr 0x2a7b4ae67f0 <col:48> 'u8':'unsigned char' <IntegralCast>
|       `-IntegerLiteral 0x2a7b4ae4f88 <col:48> 'int' 245
|-TypedefDecl 0x2a7b4ae6820 <line:115:1, col:19> col:19 referenced invalid limb 'int'
| `-BuiltinType 0x2a7b2e41cd0 'int'
|-TypedefDecl 0x2a7b4ae6978 <line:116:1, col:26> col:14 referenced felem 'limb [4]'
| `-ConstantArrayType 0x2a7b4ae6920 'limb [4]' 4 
|   `-TypedefType 0x2a7b4ae6880 'limb' sugar
|     |-Typedef 0x2a7b4ae6820 'limb'
|     `-BuiltinType 0x2a7b2e41cd0 'int'
|-TypedefDecl 0x2a7b4ae6af8 <line:117:1, col:34> col:14 referenced longfelem 'limb [8]'
| `-ConstantArrayType 0x2a7b4ae6aa0 'limb [8]' 8 
|   `-TypedefType 0x2a7b4ae6880 'limb' sugar
|     |-Typedef 0x2a7b4ae6820 'limb'
|     `-BuiltinType 0x2a7b2e41cd0 'int'
|-TypedefDecl 0x2a7b4ae6c48 <line:118:1, col:30> col:13 referenced smallfelem 'u64 [4]'
| `-ConstantArrayType 0x2a7b4ae6bf0 'u64 [4]' 4 
|   `-TypedefType 0x2a7b4ae6b50 'u64' sugar
|     |-Typedef 0x2a7b4ae2ed0 'u64'
|     `-TypedefType 0x2a7b4ae2ea0 'uint64_t' sugar
|       |-Typedef 0x2a7b49b6180 'uint64_t'
|       `-BuiltinType 0x2a7b2e41db0 'unsigned long long'
|-VarDecl 0x2a7b4ae6d38 <line:121:1, line:122:65> line:121:18 used kPrime 'const u64 [4]' static cinit
| `-InitListExpr 0x2a7b4ae6ec8 <line:122:5, col:65> 'const u64 [4]'
|   |-IntegerLiteral 0x2a7b4ae6da0 <col:7> 'unsigned long long' 18446744073709551615
|   |-ImplicitCastExpr 0x2a7b4ae6f28 <col:29> 'u64':'unsigned long long' <IntegralCast>
|   | `-IntegerLiteral 0x2a7b4ae6dc8 <col:29> 'unsigned int' 4294967295
|   |-ImplicitCastExpr 0x2a7b4ae6f40 <col:41> 'u64':'unsigned long long' <IntegralCast>
|   | `-IntegerLiteral 0x2a7b4ae6df0 <col:41> 'int' 0
|   `-IntegerLiteral 0x2a7b4ae6e18 <col:44> 'unsigned long long' 18446744069414584321
|-VarDecl 0x2a7b4ae6f68 <line:123:1, col:33> col:18 used bottom63bits 'const u64':'const unsigned long long' static cinit
| `-IntegerLiteral 0x2a7b4ae6fd0 <col:33> 'unsigned long long' 9223372036854775807
|-FunctionDecl 0x2a7b4ae7318 <line:129:1, line:135:1> line:129:13 used bin32_to_felem 'void (limb *, const u8 *)' static
| |-ParmVarDecl 0x2a7b4ae70a0 <col:28, col:34> col:34 used out 'limb *':'limb *'
| |-ParmVarDecl 0x2a7b4ae71d0 <col:39, col:53> col:48 used in 'const u8 *':'const u8 *'
| `-CompoundStmt 0x2a7b4ae7b80 <line:130:1, line:135:1>
|   |-BinaryOperator 0x2a7b4ae75d8 <line:131:5, col:29> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2a7b4ae7450 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b4ae7428 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b4ae73e0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b4ae70a0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b4ae7400 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x2a7b4ae75c0 <col:14, col:29> 'limb':'int' <IntegralCast>
|   |   `-ImplicitCastExpr 0x2a7b4ae75a8 <col:14, col:29> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-UnaryOperator 0x2a7b4ae7590 <col:14, col:29> 'u64':'unsigned long long' lvalue prefix '*' cannot overflow
|   |       `-ParenExpr 0x2a7b4ae7570 <col:15, col:29> 'u64 *'
|   |         `-CStyleCastExpr 0x2a7b4ae7548 <col:16, col:28> 'u64 *' <BitCast>
|   |           `-UnaryOperator 0x2a7b4ae74f0 <col:23, col:28> 'const u8 *' prefix '&' cannot overflow
|   |             `-ArraySubscriptExpr 0x2a7b4ae74d0 <col:24, col:28> 'const u8':'const unsigned char' lvalue
|   |               |-ImplicitCastExpr 0x2a7b4ae74b8 <col:24> 'const u8 *':'const u8 *' <LValueToRValue>
|   |               | `-DeclRefExpr 0x2a7b4ae7470 <col:24> 'const u8 *':'const u8 *' lvalue ParmVar 0x2a7b4ae71d0 'in' 'const u8 *':'const u8 *'
|   |               `-IntegerLiteral 0x2a7b4ae7490 <col:27> 'int' 0
|   |-BinaryOperator 0x2a7b4ae77b0 <line:132:5, col:29> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2a7b4ae7658 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b4ae7640 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b4ae75f8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b4ae70a0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b4ae7618 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x2a7b4ae7798 <col:14, col:29> 'limb':'int' <IntegralCast>
|   |   `-ImplicitCastExpr 0x2a7b4ae7780 <col:14, col:29> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-UnaryOperator 0x2a7b4ae7768 <col:14, col:29> 'u64':'unsigned long long' lvalue prefix '*' cannot overflow
|   |       `-ParenExpr 0x2a7b4ae7748 <col:15, col:29> 'u64 *'
|   |         `-CStyleCastExpr 0x2a7b4ae7720 <col:16, col:28> 'u64 *' <BitCast>
|   |           `-UnaryOperator 0x2a7b4ae76f8 <col:23, col:28> 'const u8 *' prefix '&' cannot overflow
|   |             `-ArraySubscriptExpr 0x2a7b4ae76d8 <col:24, col:28> 'const u8':'const unsigned char' lvalue
|   |               |-ImplicitCastExpr 0x2a7b4ae76c0 <col:24> 'const u8 *':'const u8 *' <LValueToRValue>
|   |               | `-DeclRefExpr 0x2a7b4ae7678 <col:24> 'const u8 *':'const u8 *' lvalue ParmVar 0x2a7b4ae71d0 'in' 'const u8 *':'const u8 *'
|   |               `-IntegerLiteral 0x2a7b4ae7698 <col:27> 'int' 8
|   |-BinaryOperator 0x2a7b4ae7988 <line:133:5, col:30> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2a7b4ae7830 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b4ae7818 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b4ae77d0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b4ae70a0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b4ae77f0 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x2a7b4ae7970 <col:14, col:30> 'limb':'int' <IntegralCast>
|   |   `-ImplicitCastExpr 0x2a7b4ae7958 <col:14, col:30> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-UnaryOperator 0x2a7b4ae7940 <col:14, col:30> 'u64':'unsigned long long' lvalue prefix '*' cannot overflow
|   |       `-ParenExpr 0x2a7b4ae7920 <col:15, col:30> 'u64 *'
|   |         `-CStyleCastExpr 0x2a7b4ae78f8 <col:16, col:29> 'u64 *' <BitCast>
|   |           `-UnaryOperator 0x2a7b4ae78d0 <col:23, col:29> 'const u8 *' prefix '&' cannot overflow
|   |             `-ArraySubscriptExpr 0x2a7b4ae78b0 <col:24, col:29> 'const u8':'const unsigned char' lvalue
|   |               |-ImplicitCastExpr 0x2a7b4ae7898 <col:24> 'const u8 *':'const u8 *' <LValueToRValue>
|   |               | `-DeclRefExpr 0x2a7b4ae7850 <col:24> 'const u8 *':'const u8 *' lvalue ParmVar 0x2a7b4ae71d0 'in' 'const u8 *':'const u8 *'
|   |               `-IntegerLiteral 0x2a7b4ae7870 <col:27> 'int' 16
|   `-BinaryOperator 0x2a7b4ae7b60 <line:134:5, col:30> 'limb':'int' '='
|     |-ArraySubscriptExpr 0x2a7b4ae7a08 <col:5, col:10> 'limb':'int' lvalue
|     | |-ImplicitCastExpr 0x2a7b4ae79f0 <col:5> 'limb *':'limb *' <LValueToRValue>
|     | | `-DeclRefExpr 0x2a7b4ae79a8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b4ae70a0 'out' 'limb *':'limb *'
|     | `-IntegerLiteral 0x2a7b4ae79c8 <col:9> 'int' 3
|     `-ImplicitCastExpr 0x2a7b4ae7b48 <col:14, col:30> 'limb':'int' <IntegralCast>
|       `-ImplicitCastExpr 0x2a7b4ae7b30 <col:14, col:30> 'u64':'unsigned long long' <LValueToRValue>
|         `-UnaryOperator 0x2a7b4ae7b18 <col:14, col:30> 'u64':'unsigned long long' lvalue prefix '*' cannot overflow
|           `-ParenExpr 0x2a7b4ae7af8 <col:15, col:30> 'u64 *'
|             `-CStyleCastExpr 0x2a7b4ae7ad0 <col:16, col:29> 'u64 *' <BitCast>
|               `-UnaryOperator 0x2a7b4ae7aa8 <col:23, col:29> 'const u8 *' prefix '&' cannot overflow
|                 `-ArraySubscriptExpr 0x2a7b4ae7a88 <col:24, col:29> 'const u8':'const unsigned char' lvalue
|                   |-ImplicitCastExpr 0x2a7b4ae7a70 <col:24> 'const u8 *':'const u8 *' <LValueToRValue>
|                   | `-DeclRefExpr 0x2a7b4ae7a28 <col:24> 'const u8 *':'const u8 *' lvalue ParmVar 0x2a7b4ae71d0 'in' 'const u8 *':'const u8 *'
|                   `-IntegerLiteral 0x2a7b4ae7a48 <col:27> 'int' 24
|-FunctionDecl 0x2a7b4ae7ee8 <line:141:1, line:147:1> line:141:13 used smallfelem_to_bin32 'void (u8 *, const u64 *)' static
| |-ParmVarDecl 0x2a7b4ae7c70 <col:33, col:42> col:36 used out 'u8 *':'u8 *'
| |-ParmVarDecl 0x2a7b4ae7da0 <col:45, col:62> col:62 used in 'const u64 *':'const u64 *'
| `-CompoundStmt 0x2a7b4ae86b0 <line:142:1, line:147:1>
|   |-BinaryOperator 0x2a7b4ae8150 <line:143:5, col:29> 'u64':'unsigned long long' '='
|   | |-UnaryOperator 0x2a7b4ae80a0 <col:5, col:21> 'u64':'unsigned long long' lvalue prefix '*' cannot overflow
|   | | `-ParenExpr 0x2a7b4ae8080 <col:6, col:21> 'u64 *'
|   | |   `-CStyleCastExpr 0x2a7b4ae8058 <col:7, col:20> 'u64 *' <BitCast>
|   | |     `-UnaryOperator 0x2a7b4ae8030 <col:14, col:20> 'u8 *' prefix '&' cannot overflow
|   | |       `-ArraySubscriptExpr 0x2a7b4ae8010 <col:15, col:20> 'u8':'unsigned char' lvalue
|   | |         |-ImplicitCastExpr 0x2a7b4ae7ff8 <col:15> 'u8 *':'u8 *' <LValueToRValue>
|   | |         | `-DeclRefExpr 0x2a7b4ae7fb0 <col:15> 'u8 *':'u8 *' lvalue ParmVar 0x2a7b4ae7c70 'out' 'u8 *':'u8 *'
|   | |         `-IntegerLiteral 0x2a7b4ae7fd0 <col:19> 'int' 0
|   | `-ImplicitCastExpr 0x2a7b4ae8138 <col:25, col:29> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x2a7b4ae8118 <col:25, col:29> 'const u64':'const unsigned long long' lvalue
|   |     |-ImplicitCastExpr 0x2a7b4ae8100 <col:25> 'const u64 *':'const u64 *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x2a7b4ae80b8 <col:25> 'const u64 *':'const u64 *' lvalue ParmVar 0x2a7b4ae7da0 'in' 'const u64 *':'const u64 *'
|   |     `-IntegerLiteral 0x2a7b4ae80d8 <col:28> 'int' 0
|   |-BinaryOperator 0x2a7b4ae8310 <line:144:5, col:29> 'u64':'unsigned long long' '='
|   | |-UnaryOperator 0x2a7b4ae8260 <col:5, col:21> 'u64':'unsigned long long' lvalue prefix '*' cannot overflow
|   | | `-ParenExpr 0x2a7b4ae8240 <col:6, col:21> 'u64 *'
|   | |   `-CStyleCastExpr 0x2a7b4ae8218 <col:7, col:20> 'u64 *' <BitCast>
|   | |     `-UnaryOperator 0x2a7b4ae81f0 <col:14, col:20> 'u8 *' prefix '&' cannot overflow
|   | |       `-ArraySubscriptExpr 0x2a7b4ae81d0 <col:15, col:20> 'u8':'unsigned char' lvalue
|   | |         |-ImplicitCastExpr 0x2a7b4ae81b8 <col:15> 'u8 *':'u8 *' <LValueToRValue>
|   | |         | `-DeclRefExpr 0x2a7b4ae8170 <col:15> 'u8 *':'u8 *' lvalue ParmVar 0x2a7b4ae7c70 'out' 'u8 *':'u8 *'
|   | |         `-IntegerLiteral 0x2a7b4ae8190 <col:19> 'int' 8
|   | `-ImplicitCastExpr 0x2a7b4ae82f8 <col:25, col:29> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x2a7b4ae82d8 <col:25, col:29> 'const u64':'const unsigned long long' lvalue
|   |     |-ImplicitCastExpr 0x2a7b4ae82c0 <col:25> 'const u64 *':'const u64 *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x2a7b4ae8278 <col:25> 'const u64 *':'const u64 *' lvalue ParmVar 0x2a7b4ae7da0 'in' 'const u64 *':'const u64 *'
|   |     `-IntegerLiteral 0x2a7b4ae8298 <col:28> 'int' 1
|   |-BinaryOperator 0x2a7b4ae84d0 <line:145:5, col:30> 'u64':'unsigned long long' '='
|   | |-UnaryOperator 0x2a7b4ae8420 <col:5, col:22> 'u64':'unsigned long long' lvalue prefix '*' cannot overflow
|   | | `-ParenExpr 0x2a7b4ae8400 <col:6, col:22> 'u64 *'
|   | |   `-CStyleCastExpr 0x2a7b4ae83d8 <col:7, col:21> 'u64 *' <BitCast>
|   | |     `-UnaryOperator 0x2a7b4ae83b0 <col:14, col:21> 'u8 *' prefix '&' cannot overflow
|   | |       `-ArraySubscriptExpr 0x2a7b4ae8390 <col:15, col:21> 'u8':'unsigned char' lvalue
|   | |         |-ImplicitCastExpr 0x2a7b4ae8378 <col:15> 'u8 *':'u8 *' <LValueToRValue>
|   | |         | `-DeclRefExpr 0x2a7b4ae8330 <col:15> 'u8 *':'u8 *' lvalue ParmVar 0x2a7b4ae7c70 'out' 'u8 *':'u8 *'
|   | |         `-IntegerLiteral 0x2a7b4ae8350 <col:19> 'int' 16
|   | `-ImplicitCastExpr 0x2a7b4ae84b8 <col:26, col:30> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x2a7b4ae8498 <col:26, col:30> 'const u64':'const unsigned long long' lvalue
|   |     |-ImplicitCastExpr 0x2a7b4ae8480 <col:26> 'const u64 *':'const u64 *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x2a7b4ae8438 <col:26> 'const u64 *':'const u64 *' lvalue ParmVar 0x2a7b4ae7da0 'in' 'const u64 *':'const u64 *'
|   |     `-IntegerLiteral 0x2a7b4ae8458 <col:29> 'int' 2
|   `-BinaryOperator 0x2a7b4ae8690 <line:146:5, col:30> 'u64':'unsigned long long' '='
|     |-UnaryOperator 0x2a7b4ae85e0 <col:5, col:22> 'u64':'unsigned long long' lvalue prefix '*' cannot overflow
|     | `-ParenExpr 0x2a7b4ae85c0 <col:6, col:22> 'u64 *'
|     |   `-CStyleCastExpr 0x2a7b4ae8598 <col:7, col:21> 'u64 *' <BitCast>
|     |     `-UnaryOperator 0x2a7b4ae8570 <col:14, col:21> 'u8 *' prefix '&' cannot overflow
|     |       `-ArraySubscriptExpr 0x2a7b4ae8550 <col:15, col:21> 'u8':'unsigned char' lvalue
|     |         |-ImplicitCastExpr 0x2a7b4ae8538 <col:15> 'u8 *':'u8 *' <LValueToRValue>
|     |         | `-DeclRefExpr 0x2a7b4ae84f0 <col:15> 'u8 *':'u8 *' lvalue ParmVar 0x2a7b4ae7c70 'out' 'u8 *':'u8 *'
|     |         `-IntegerLiteral 0x2a7b4ae8510 <col:19> 'int' 24
|     `-ImplicitCastExpr 0x2a7b4ae8678 <col:26, col:30> 'u64':'unsigned long long' <LValueToRValue>
|       `-ArraySubscriptExpr 0x2a7b4ae8658 <col:26, col:30> 'const u64':'const unsigned long long' lvalue
|         |-ImplicitCastExpr 0x2a7b4ae8640 <col:26> 'const u64 *':'const u64 *' <LValueToRValue>
|         | `-DeclRefExpr 0x2a7b4ae85f8 <col:26> 'const u64 *':'const u64 *' lvalue ParmVar 0x2a7b4ae7da0 'in' 'const u64 *':'const u64 *'
|         `-IntegerLiteral 0x2a7b4ae8618 <col:29> 'int' 3
|-FunctionDecl 0x2a7b4ae8958 <line:150:1, line:155:1> line:150:13 used flip_endian 'void (u8 *, const u8 *, unsigned int)' static
| |-ParmVarDecl 0x2a7b4ae86f0 <col:25, col:29> col:29 used out 'u8 *'
| |-ParmVarDecl 0x2a7b4ae8768 <col:34, col:44> col:44 used in 'const u8 *'
| |-ParmVarDecl 0x2a7b4ae87e8 <col:48, col:57> col:57 used len 'unsigned int'
| `-CompoundStmt 0x2a7b4ae8e68 <line:151:1, line:155:1>
|   |-DeclStmt 0x2a7b4ae8aa8 <line:152:5, col:15>
|   | `-VarDecl 0x2a7b4ae8a40 <col:5, col:14> col:14 used i 'unsigned int'
|   `-ForStmt 0x2a7b4ae8e30 <line:153:5, line:154:32>
|     |-BinaryOperator 0x2a7b4ae8b38 <line:153:10, col:14> 'unsigned int' '='
|     | |-DeclRefExpr 0x2a7b4ae8ac0 <col:10> 'unsigned int' lvalue Var 0x2a7b4ae8a40 'i' 'unsigned int'
|     | `-ImplicitCastExpr 0x2a7b4ae8b20 <col:14> 'unsigned int' <IntegralCast>
|     |   `-IntegerLiteral 0x2a7b4ae8af8 <col:14> 'int' 0
|     |-<<<NULL>>>
|     |-BinaryOperator 0x2a7b4ae8bc8 <col:17, col:21> 'int' '<'
|     | |-ImplicitCastExpr 0x2a7b4ae8b98 <col:17> 'unsigned int' <LValueToRValue>
|     | | `-DeclRefExpr 0x2a7b4ae8b58 <col:17> 'unsigned int' lvalue Var 0x2a7b4ae8a40 'i' 'unsigned int'
|     | `-ImplicitCastExpr 0x2a7b4ae8bb0 <col:21> 'unsigned int' <LValueToRValue>
|     |   `-DeclRefExpr 0x2a7b4ae8b78 <col:21> 'unsigned int' lvalue ParmVar 0x2a7b4ae87e8 'len' 'unsigned int'
|     |-UnaryOperator 0x2a7b4ae8c08 <col:26, col:28> 'unsigned int' prefix '++'
|     | `-DeclRefExpr 0x2a7b4ae8be8 <col:28> 'unsigned int' lvalue Var 0x2a7b4ae8a40 'i' 'unsigned int'
|     `-BinaryOperator 0x2a7b4ae8e10 <line:154:9, col:32> 'u8':'unsigned char' '='
|       |-ArraySubscriptExpr 0x2a7b4ae8c90 <col:9, col:14> 'u8':'unsigned char' lvalue
|       | |-ImplicitCastExpr 0x2a7b4ae8c60 <col:9> 'u8 *' <LValueToRValue>
|       | | `-DeclRefExpr 0x2a7b4ae8c20 <col:9> 'u8 *' lvalue ParmVar 0x2a7b4ae86f0 'out' 'u8 *'
|       | `-ImplicitCastExpr 0x2a7b4ae8c78 <col:13> 'unsigned int' <LValueToRValue>
|       |   `-DeclRefExpr 0x2a7b4ae8c40 <col:13> 'unsigned int' lvalue Var 0x2a7b4ae8a40 'i' 'unsigned int'
|       `-ImplicitCastExpr 0x2a7b4ae8df8 <col:18, col:32> 'u8':'unsigned char' <LValueToRValue>
|         `-ArraySubscriptExpr 0x2a7b4ae8dd8 <col:18, col:32> 'const u8':'const unsigned char' lvalue
|           |-ImplicitCastExpr 0x2a7b4ae8dc0 <col:18> 'const u8 *' <LValueToRValue>
|           | `-DeclRefExpr 0x2a7b4ae8cb0 <col:18> 'const u8 *' lvalue ParmVar 0x2a7b4ae8768 'in' 'const u8 *'
|           `-BinaryOperator 0x2a7b4ae8da0 <col:21, col:31> 'unsigned int' '-'
|             |-BinaryOperator 0x2a7b4ae8d48 <col:21, col:27> 'unsigned int' '-'
|             | |-ImplicitCastExpr 0x2a7b4ae8d18 <col:21> 'unsigned int' <LValueToRValue>
|             | | `-DeclRefExpr 0x2a7b4ae8cd0 <col:21> 'unsigned int' lvalue ParmVar 0x2a7b4ae87e8 'len' 'unsigned int'
|             | `-ImplicitCastExpr 0x2a7b4ae8d30 <col:27> 'unsigned int' <IntegralCast>
|             |   `-IntegerLiteral 0x2a7b4ae8cf0 <col:27> 'int' 1
|             `-ImplicitCastExpr 0x2a7b4ae8d88 <col:31> 'unsigned int' <LValueToRValue>
|               `-DeclRefExpr 0x2a7b4ae8d68 <col:31> 'unsigned int' lvalue Var 0x2a7b4ae8a40 'i' 'unsigned int'
|-FunctionDecl 0x2a7b4ae8ff0 <line:158:1, line:179:1> line:158:12 invalid BN_to_felem 'int (limb *, const int *)' static
| |-ParmVarDecl 0x2a7b4ae8e98 <col:24, col:30> col:30 used out 'limb *':'limb *'
| |-ParmVarDecl 0x2a7b4ae8f18 <col:35, col:49> col:49 invalid bn 'const int *'
| `-CompoundStmt 0x2a7b49f2790 <line:159:1, line:179:1>
|   |-DeclStmt 0x2a7b4ae9130 <line:160:5, col:25>
|   | `-VarDecl 0x2a7b4ae90c8 <col:5, col:21> col:21 used b_in 'felem_bytearray':'u8 [32]'
|   |-DeclStmt 0x2a7b4ae91c0 <line:161:5, col:26>
|   | `-VarDecl 0x2a7b4ae9158 <col:5, col:21> col:21 used b_out 'felem_bytearray':'u8 [32]'
|   |-DeclStmt 0x2a7b4ae9258 <line:162:5, col:23>
|   | `-VarDecl 0x2a7b4ae91f0 <col:5, col:14> col:14 used num_bytes 'unsigned int'
|   |-CallExpr 0x2a7b4ae93b0 <line:165:5, col:35> 'void *'
|   | |-ImplicitCastExpr 0x2a7b4ae9398 <col:5> 'void *(*)(void *, int, unsigned long long)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4ae9270 <col:5> 'void *(void *, int, unsigned long long)' Function 0x2a7b49c0150 'memset' 'void *(void *, int, unsigned long long)'
|   | |-ImplicitCastExpr 0x2a7b4ae9400 <col:12> 'void *' <BitCast>
|   | | `-ImplicitCastExpr 0x2a7b4ae93e8 <col:12> 'u8 *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x2a7b4ae9290 <col:12> 'felem_bytearray':'u8 [32]' lvalue Var 0x2a7b4ae9158 'b_out' 'felem_bytearray':'u8 [32]'
|   | |-IntegerLiteral 0x2a7b4ae92c8 <col:19> 'int' 0
|   | `-UnaryExprOrTypeTraitExpr 0x2a7b4ae9330 <col:22, col:34> 'unsigned long long' sizeof
|   |   `-ParenExpr 0x2a7b4ae9310 <col:28, col:34> 'felem_bytearray':'u8 [32]' lvalue
|   |     `-DeclRefExpr 0x2a7b4ae92f0 <col:29> 'felem_bytearray':'u8 [32]' lvalue Var 0x2a7b4ae9158 'b_out' 'felem_bytearray':'u8 [32]' non_odr_use_unevaluated
|   |-IfStmt 0x2a7b49f2138 <line:167:5, line:170:5>
|   | |-BinaryOperator 0x2a7b49f1fb8 <line:167:9, col:33> 'int' '>'
|   | | |-ImplicitCastExpr 0x2a7b49f1fa0 <col:9> 'unsigned long long' <IntegralCast>
|   | | | `-ImplicitCastExpr 0x2a7b49f1f88 <col:9> 'unsigned int' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x2a7b49f1f08 <col:9> 'unsigned int' lvalue Var 0x2a7b4ae91f0 'num_bytes' 'unsigned int'
|   | | `-UnaryExprOrTypeTraitExpr 0x2a7b49f1f68 <col:21, col:33> 'unsigned long long' sizeof
|   | |   `-ParenExpr 0x2a7b49f1f48 <col:27, col:33> 'felem_bytearray':'u8 [32]' lvalue
|   | |     `-DeclRefExpr 0x2a7b49f1f28 <col:28> 'felem_bytearray':'u8 [32]' lvalue Var 0x2a7b4ae9158 'b_out' 'felem_bytearray':'u8 [32]' non_odr_use_unevaluated
|   | `-CompoundStmt 0x2a7b49f2120 <col:36, line:170:5>
|   |   `-ReturnStmt 0x2a7b49f2110 <line:169:9, col:16>
|   |     `-IntegerLiteral 0x2a7b49f20e8 <col:16> 'int' 0
|   |-IfStmt 0x2a7b49f22e8 <line:171:5, line:174:5>
|   | |-OpaqueValueExpr 0x2a7b49f22d0 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x2a7b49f22b8 <line:171:29, line:174:5>
|   |   `-ReturnStmt 0x2a7b49f22a8 <line:173:9, col:16>
|   |     `-IntegerLiteral 0x2a7b49f2280 <col:16> 'int' 0
|   |-CallExpr 0x2a7b49f2560 <line:176:5, col:39> 'void'
|   | |-ImplicitCastExpr 0x2a7b49f2548 <col:5> 'void (*)(u8 *, const u8 *, unsigned int)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b49f2468 <col:5> 'void (u8 *, const u8 *, unsigned int)' Function 0x2a7b4ae8958 'flip_endian' 'void (u8 *, const u8 *, unsigned int)'
|   | |-ImplicitCastExpr 0x2a7b49f2598 <col:17> 'u8 *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b49f2488 <col:17> 'felem_bytearray':'u8 [32]' lvalue Var 0x2a7b4ae9158 'b_out' 'felem_bytearray':'u8 [32]'
|   | |-ImplicitCastExpr 0x2a7b49f25c8 <col:24> 'const u8 *' <NoOp>
|   | | `-ImplicitCastExpr 0x2a7b49f25b0 <col:24> 'u8 *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x2a7b49f24a8 <col:24> 'felem_bytearray':'u8 [32]' lvalue Var 0x2a7b4ae90c8 'b_in' 'felem_bytearray':'u8 [32]'
|   | `-ImplicitCastExpr 0x2a7b49f25e0 <col:30> 'unsigned int' <LValueToRValue>
|   |   `-DeclRefExpr 0x2a7b49f24c8 <col:30> 'unsigned int' lvalue Var 0x2a7b4ae91f0 'num_bytes' 'unsigned int'
|   |-CallExpr 0x2a7b49f26e0 <line:177:5, col:30> 'void'
|   | |-ImplicitCastExpr 0x2a7b49f26c8 <col:5> 'void (*)(limb *, const u8 *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b49f25f8 <col:5> 'void (limb *, const u8 *)' Function 0x2a7b4ae7318 'bin32_to_felem' 'void (limb *, const u8 *)'
|   | |-ImplicitCastExpr 0x2a7b49f2710 <col:20> 'limb *':'limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x2a7b49f2618 <col:20> 'limb *':'limb *' lvalue ParmVar 0x2a7b4ae8e98 'out' 'limb *':'limb *'
|   | `-ImplicitCastExpr 0x2a7b49f2740 <col:25> 'const u8 *':'const u8 *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b49f2728 <col:25> 'u8 *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b49f2650 <col:25> 'felem_bytearray':'u8 [32]' lvalue Var 0x2a7b4ae9158 'b_out' 'felem_bytearray':'u8 [32]'
|   `-ReturnStmt 0x2a7b49f2780 <line:178:5, col:12>
|     `-IntegerLiteral 0x2a7b49f2758 <col:12> 'int' 1
|-FunctionDecl 0x2a7b49f2990 <line:182:1, line:188:1> line:182:16 invalid smallfelem_to_BN 'int *(int *, const u64 *)' static
| |-ParmVarDecl 0x2a7b49f2800 <col:33, col:41> col:41 invalid out 'int *'
| |-ParmVarDecl 0x2a7b49f2878 <col:46, col:63> col:63 used in 'const u64 *':'const u64 *'
| `-CompoundStmt 0x2a7b49f2ff8 <line:183:1, line:188:1>
|   |-DeclStmt 0x2a7b49f2b60 <line:184:5, col:32>
|   | |-VarDecl 0x2a7b49f2a68 <col:5, col:21> col:21 used b_in 'felem_bytearray':'u8 [32]'
|   | `-VarDecl 0x2a7b49f2ae0 <col:5, col:27> col:27 used b_out 'felem_bytearray':'u8 [32]'
|   |-CallExpr 0x2a7b49f2c80 <line:185:5, col:33> 'void'
|   | |-ImplicitCastExpr 0x2a7b49f2c68 <col:5> 'void (*)(u8 *, const u64 *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b49f2b78 <col:5> 'void (u8 *, const u64 *)' Function 0x2a7b4ae7ee8 'smallfelem_to_bin32' 'void (u8 *, const u64 *)'
|   | |-ImplicitCastExpr 0x2a7b49f2cb0 <col:25> 'u8 *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b49f2b98 <col:25> 'felem_bytearray':'u8 [32]' lvalue Var 0x2a7b49f2a68 'b_in' 'felem_bytearray':'u8 [32]'
|   | `-ImplicitCastExpr 0x2a7b49f2cc8 <col:31> 'const u64 *':'const u64 *' <LValueToRValue>
|   |   `-DeclRefExpr 0x2a7b49f2bd0 <col:31> 'const u64 *':'const u64 *' lvalue ParmVar 0x2a7b49f2878 'in' 'const u64 *':'const u64 *'
|   `-CallExpr 0x2a7b49f2dd0 <line:186:5, col:43> 'void'
|     |-ImplicitCastExpr 0x2a7b49f2db8 <col:5> 'void (*)(u8 *, const u8 *, unsigned int)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x2a7b49f2ce0 <col:5> 'void (u8 *, const u8 *, unsigned int)' Function 0x2a7b4ae8958 'flip_endian' 'void (u8 *, const u8 *, unsigned int)'
|     |-ImplicitCastExpr 0x2a7b49f2e08 <col:17> 'u8 *' <ArrayToPointerDecay>
|     | `-DeclRefExpr 0x2a7b49f2d00 <col:17> 'felem_bytearray':'u8 [32]' lvalue Var 0x2a7b49f2ae0 'b_out' 'felem_bytearray':'u8 [32]'
|     |-ImplicitCastExpr 0x2a7b49f2e38 <col:24> 'const u8 *' <NoOp>
|     | `-ImplicitCastExpr 0x2a7b49f2e20 <col:24> 'u8 *' <ArrayToPointerDecay>
|     |   `-DeclRefExpr 0x2a7b49f2d38 <col:24> 'felem_bytearray':'u8 [32]' lvalue Var 0x2a7b49f2a68 'b_in' 'felem_bytearray':'u8 [32]'
|     `-ImplicitCastExpr 0x2a7b49f2e50 <col:30, col:42> 'unsigned int' <IntegralCast>
|       `-UnaryExprOrTypeTraitExpr 0x2a7b49f2d98 <col:30, col:42> 'unsigned long long' sizeof
|         `-ParenExpr 0x2a7b49f2d78 <col:36, col:42> 'felem_bytearray':'u8 [32]' lvalue
|           `-DeclRefExpr 0x2a7b49f2d58 <col:37> 'felem_bytearray':'u8 [32]' lvalue Var 0x2a7b49f2ae0 'b_out' 'felem_bytearray':'u8 [32]' non_odr_use_unevaluated
|-FunctionDecl 0x2a7b49f3168 <line:195:1, line:201:1> line:195:13 used smallfelem_one 'void (u64 *)' static
| |-ParmVarDecl 0x2a7b49f3060 <col:28, col:39> col:39 used out 'u64 *':'u64 *'
| `-CompoundStmt 0x2a7b49f35a8 <line:196:1, line:201:1>
|   |-BinaryOperator 0x2a7b49f32e8 <line:197:5, col:14> 'u64':'unsigned long long' '='
|   | |-ArraySubscriptExpr 0x2a7b49f3288 <col:5, col:10> 'u64':'unsigned long long' lvalue
|   | | |-ImplicitCastExpr 0x2a7b49f3270 <col:5> 'u64 *':'u64 *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b49f3228 <col:5> 'u64 *':'u64 *' lvalue ParmVar 0x2a7b49f3060 'out' 'u64 *':'u64 *'
|   | | `-IntegerLiteral 0x2a7b49f3248 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x2a7b49f32d0 <col:14> 'u64':'unsigned long long' <IntegralCast>
|   |   `-IntegerLiteral 0x2a7b49f32a8 <col:14> 'int' 1
|   |-BinaryOperator 0x2a7b49f33c8 <line:198:5, col:14> 'u64':'unsigned long long' '='
|   | |-ArraySubscriptExpr 0x2a7b49f3368 <col:5, col:10> 'u64':'unsigned long long' lvalue
|   | | |-ImplicitCastExpr 0x2a7b49f3350 <col:5> 'u64 *':'u64 *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b49f3308 <col:5> 'u64 *':'u64 *' lvalue ParmVar 0x2a7b49f3060 'out' 'u64 *':'u64 *'
|   | | `-IntegerLiteral 0x2a7b49f3328 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x2a7b49f33b0 <col:14> 'u64':'unsigned long long' <IntegralCast>
|   |   `-IntegerLiteral 0x2a7b49f3388 <col:14> 'int' 0
|   |-BinaryOperator 0x2a7b49f34a8 <line:199:5, col:14> 'u64':'unsigned long long' '='
|   | |-ArraySubscriptExpr 0x2a7b49f3448 <col:5, col:10> 'u64':'unsigned long long' lvalue
|   | | |-ImplicitCastExpr 0x2a7b49f3430 <col:5> 'u64 *':'u64 *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b49f33e8 <col:5> 'u64 *':'u64 *' lvalue ParmVar 0x2a7b49f3060 'out' 'u64 *':'u64 *'
|   | | `-IntegerLiteral 0x2a7b49f3408 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x2a7b49f3490 <col:14> 'u64':'unsigned long long' <IntegralCast>
|   |   `-IntegerLiteral 0x2a7b49f3468 <col:14> 'int' 0
|   `-BinaryOperator 0x2a7b49f3588 <line:200:5, col:14> 'u64':'unsigned long long' '='
|     |-ArraySubscriptExpr 0x2a7b49f3528 <col:5, col:10> 'u64':'unsigned long long' lvalue
|     | |-ImplicitCastExpr 0x2a7b49f3510 <col:5> 'u64 *':'u64 *' <LValueToRValue>
|     | | `-DeclRefExpr 0x2a7b49f34c8 <col:5> 'u64 *':'u64 *' lvalue ParmVar 0x2a7b49f3060 'out' 'u64 *':'u64 *'
|     | `-IntegerLiteral 0x2a7b49f34e8 <col:9> 'int' 3
|     `-ImplicitCastExpr 0x2a7b49f3570 <col:14> 'u64':'unsigned long long' <IntegralCast>
|       `-IntegerLiteral 0x2a7b49f3548 <col:14> 'int' 0
|-FunctionDecl 0x2a7b49f37a8 <line:203:1, line:209:1> line:203:13 used smallfelem_assign 'void (u64 *, const u64 *)' static
| |-ParmVarDecl 0x2a7b49f35e8 <col:31, col:42> col:42 used out 'u64 *':'u64 *'
| |-ParmVarDecl 0x2a7b49f3660 <col:47, col:64> col:64 used in 'const u64 *':'const u64 *'
| `-CompoundStmt 0x2a7b49f3d50 <line:204:1, line:209:1>
|   |-BinaryOperator 0x2a7b49f3988 <line:205:5, col:18> 'u64':'unsigned long long' '='
|   | |-ArraySubscriptExpr 0x2a7b49f38d0 <col:5, col:10> 'u64':'unsigned long long' lvalue
|   | | |-ImplicitCastExpr 0x2a7b49f38b8 <col:5> 'u64 *':'u64 *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b49f3870 <col:5> 'u64 *':'u64 *' lvalue ParmVar 0x2a7b49f35e8 'out' 'u64 *':'u64 *'
|   | | `-IntegerLiteral 0x2a7b49f3890 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x2a7b49f3970 <col:14, col:18> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x2a7b49f3950 <col:14, col:18> 'const u64':'const unsigned long long' lvalue
|   |     |-ImplicitCastExpr 0x2a7b49f3938 <col:14> 'const u64 *':'const u64 *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x2a7b49f38f0 <col:14> 'const u64 *':'const u64 *' lvalue ParmVar 0x2a7b49f3660 'in' 'const u64 *':'const u64 *'
|   |     `-IntegerLiteral 0x2a7b49f3910 <col:17> 'int' 0
|   |-BinaryOperator 0x2a7b49f3ac0 <line:206:5, col:18> 'u64':'unsigned long long' '='
|   | |-ArraySubscriptExpr 0x2a7b49f3a08 <col:5, col:10> 'u64':'unsigned long long' lvalue
|   | | |-ImplicitCastExpr 0x2a7b49f39f0 <col:5> 'u64 *':'u64 *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b49f39a8 <col:5> 'u64 *':'u64 *' lvalue ParmVar 0x2a7b49f35e8 'out' 'u64 *':'u64 *'
|   | | `-IntegerLiteral 0x2a7b49f39c8 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x2a7b49f3aa8 <col:14, col:18> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x2a7b49f3a88 <col:14, col:18> 'const u64':'const unsigned long long' lvalue
|   |     |-ImplicitCastExpr 0x2a7b49f3a70 <col:14> 'const u64 *':'const u64 *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x2a7b49f3a28 <col:14> 'const u64 *':'const u64 *' lvalue ParmVar 0x2a7b49f3660 'in' 'const u64 *':'const u64 *'
|   |     `-IntegerLiteral 0x2a7b49f3a48 <col:17> 'int' 1
|   |-BinaryOperator 0x2a7b49f3bf8 <line:207:5, col:18> 'u64':'unsigned long long' '='
|   | |-ArraySubscriptExpr 0x2a7b49f3b40 <col:5, col:10> 'u64':'unsigned long long' lvalue
|   | | |-ImplicitCastExpr 0x2a7b49f3b28 <col:5> 'u64 *':'u64 *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b49f3ae0 <col:5> 'u64 *':'u64 *' lvalue ParmVar 0x2a7b49f35e8 'out' 'u64 *':'u64 *'
|   | | `-IntegerLiteral 0x2a7b49f3b00 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x2a7b49f3be0 <col:14, col:18> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x2a7b49f3bc0 <col:14, col:18> 'const u64':'const unsigned long long' lvalue
|   |     |-ImplicitCastExpr 0x2a7b49f3ba8 <col:14> 'const u64 *':'const u64 *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x2a7b49f3b60 <col:14> 'const u64 *':'const u64 *' lvalue ParmVar 0x2a7b49f3660 'in' 'const u64 *':'const u64 *'
|   |     `-IntegerLiteral 0x2a7b49f3b80 <col:17> 'int' 2
|   `-BinaryOperator 0x2a7b49f3d30 <line:208:5, col:18> 'u64':'unsigned long long' '='
|     |-ArraySubscriptExpr 0x2a7b49f3c78 <col:5, col:10> 'u64':'unsigned long long' lvalue
|     | |-ImplicitCastExpr 0x2a7b49f3c60 <col:5> 'u64 *':'u64 *' <LValueToRValue>
|     | | `-DeclRefExpr 0x2a7b49f3c18 <col:5> 'u64 *':'u64 *' lvalue ParmVar 0x2a7b49f35e8 'out' 'u64 *':'u64 *'
|     | `-IntegerLiteral 0x2a7b49f3c38 <col:9> 'int' 3
|     `-ImplicitCastExpr 0x2a7b49f3d18 <col:14, col:18> 'u64':'unsigned long long' <LValueToRValue>
|       `-ArraySubscriptExpr 0x2a7b49f3cf8 <col:14, col:18> 'const u64':'const unsigned long long' lvalue
|         |-ImplicitCastExpr 0x2a7b49f3ce0 <col:14> 'const u64 *':'const u64 *' <LValueToRValue>
|         | `-DeclRefExpr 0x2a7b49f3c98 <col:14> 'const u64 *':'const u64 *' lvalue ParmVar 0x2a7b49f3660 'in' 'const u64 *':'const u64 *'
|         `-IntegerLiteral 0x2a7b49f3cb8 <col:17> 'int' 3
|-FunctionDecl 0x2a7b49f4048 <line:211:1, line:217:1> line:211:13 used felem_assign 'void (limb *, const limb *)' static
| |-ParmVarDecl 0x2a7b49f3de0 <col:26, col:32> col:32 used out 'limb *':'limb *'
| |-ParmVarDecl 0x2a7b49f3f00 <col:37, col:49> col:49 used in 'const limb *':'const limb *'
| `-CompoundStmt 0x2a7b49f45f0 <line:212:1, line:217:1>
|   |-BinaryOperator 0x2a7b49f4228 <line:213:5, col:18> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2a7b49f4170 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b49f4158 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b49f4110 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b49f3de0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b49f4130 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x2a7b49f4210 <col:14, col:18> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x2a7b49f41f0 <col:14, col:18> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x2a7b49f41d8 <col:14> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x2a7b49f4190 <col:14> 'const limb *':'const limb *' lvalue ParmVar 0x2a7b49f3f00 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x2a7b49f41b0 <col:17> 'int' 0
|   |-BinaryOperator 0x2a7b49f4360 <line:214:5, col:18> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2a7b49f42a8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b49f4290 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b49f4248 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b49f3de0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b49f4268 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x2a7b49f4348 <col:14, col:18> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x2a7b49f4328 <col:14, col:18> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x2a7b49f4310 <col:14> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x2a7b49f42c8 <col:14> 'const limb *':'const limb *' lvalue ParmVar 0x2a7b49f3f00 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x2a7b49f42e8 <col:17> 'int' 1
|   |-BinaryOperator 0x2a7b49f4498 <line:215:5, col:18> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2a7b49f43e0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b49f43c8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b49f4380 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b49f3de0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b49f43a0 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x2a7b49f4480 <col:14, col:18> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x2a7b49f4460 <col:14, col:18> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x2a7b49f4448 <col:14> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x2a7b49f4400 <col:14> 'const limb *':'const limb *' lvalue ParmVar 0x2a7b49f3f00 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x2a7b49f4420 <col:17> 'int' 2
|   `-BinaryOperator 0x2a7b49f45d0 <line:216:5, col:18> 'limb':'int' '='
|     |-ArraySubscriptExpr 0x2a7b49f4518 <col:5, col:10> 'limb':'int' lvalue
|     | |-ImplicitCastExpr 0x2a7b49f4500 <col:5> 'limb *':'limb *' <LValueToRValue>
|     | | `-DeclRefExpr 0x2a7b49f44b8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b49f3de0 'out' 'limb *':'limb *'
|     | `-IntegerLiteral 0x2a7b49f44d8 <col:9> 'int' 3
|     `-ImplicitCastExpr 0x2a7b49f45b8 <col:14, col:18> 'limb':'int' <LValueToRValue>
|       `-ArraySubscriptExpr 0x2a7b49f4598 <col:14, col:18> 'const limb':'const int' lvalue
|         |-ImplicitCastExpr 0x2a7b49f4580 <col:14> 'const limb *':'const limb *' <LValueToRValue>
|         | `-DeclRefExpr 0x2a7b49f4538 <col:14> 'const limb *':'const limb *' lvalue ParmVar 0x2a7b49f3f00 'in' 'const limb *':'const limb *'
|         `-IntegerLiteral 0x2a7b49f4558 <col:17> 'int' 3
|-FunctionDecl 0x2a7b49f4770 <line:220:1, line:226:1> line:220:13 used felem_sum 'void (limb *, const limb *)' static
| |-ParmVarDecl 0x2a7b49f4630 <col:23, col:29> col:29 used out 'limb *':'limb *'
| |-ParmVarDecl 0x2a7b49f46a8 <col:34, col:46> col:46 used in 'const limb *':'const limb *'
| `-CompoundStmt 0x2a7b49f4d58 <line:221:1, line:226:1>
|   |-CompoundAssignOperator 0x2a7b49f4950 <line:222:5, col:19> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2a7b49f4898 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b49f4880 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b49f4838 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b49f4630 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b49f4858 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x2a7b49f4938 <col:15, col:19> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x2a7b49f4918 <col:15, col:19> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x2a7b49f4900 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x2a7b49f48b8 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x2a7b49f46a8 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x2a7b49f48d8 <col:18> 'int' 0
|   |-CompoundAssignOperator 0x2a7b49f4a98 <line:223:5, col:19> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2a7b49f49e0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b49f49c8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b49f4980 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b49f4630 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b49f49a0 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x2a7b49f4a80 <col:15, col:19> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x2a7b49f4a60 <col:15, col:19> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x2a7b49f4a48 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x2a7b49f4a00 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x2a7b49f46a8 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x2a7b49f4a20 <col:18> 'int' 1
|   |-CompoundAssignOperator 0x2a7b49f4be0 <line:224:5, col:19> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2a7b49f4b28 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b49f4b10 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b49f4ac8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b49f4630 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b49f4ae8 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x2a7b49f4bc8 <col:15, col:19> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x2a7b49f4ba8 <col:15, col:19> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x2a7b49f4b90 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x2a7b49f4b48 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x2a7b49f46a8 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x2a7b49f4b68 <col:18> 'int' 2
|   `-CompoundAssignOperator 0x2a7b49f4d28 <line:225:5, col:19> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|     |-ArraySubscriptExpr 0x2a7b49f4c70 <col:5, col:10> 'limb':'int' lvalue
|     | |-ImplicitCastExpr 0x2a7b49f4c58 <col:5> 'limb *':'limb *' <LValueToRValue>
|     | | `-DeclRefExpr 0x2a7b49f4c10 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b49f4630 'out' 'limb *':'limb *'
|     | `-IntegerLiteral 0x2a7b49f4c30 <col:9> 'int' 3
|     `-ImplicitCastExpr 0x2a7b49f4d10 <col:15, col:19> 'limb':'int' <LValueToRValue>
|       `-ArraySubscriptExpr 0x2a7b49f4cf0 <col:15, col:19> 'const limb':'const int' lvalue
|         |-ImplicitCastExpr 0x2a7b49f4cd8 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|         | `-DeclRefExpr 0x2a7b49f4c90 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x2a7b49f46a8 'in' 'const limb *':'const limb *'
|         `-IntegerLiteral 0x2a7b49f4cb0 <col:18> 'int' 3
|-FunctionDecl 0x2a7b49f4f58 <line:229:1, line:235:1> line:229:13 used felem_small_sum 'void (limb *, const u64 *)' static
| |-ParmVarDecl 0x2a7b49f4d98 <col:29, col:35> col:35 used out 'limb *':'limb *'
| |-ParmVarDecl 0x2a7b49f4e10 <col:40, col:57> col:57 used in 'const u64 *':'const u64 *'
| `-CompoundStmt 0x2a7b49f5540 <line:230:1, line:235:1>
|   |-CompoundAssignOperator 0x2a7b49f5138 <line:231:5, col:19> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x2a7b49f5080 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b49f5068 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b49f5020 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b49f4d98 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b49f5040 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x2a7b49f5120 <col:15, col:19> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x2a7b49f5100 <col:15, col:19> 'const u64':'const unsigned long long' lvalue
|   |     |-ImplicitCastExpr 0x2a7b49f50e8 <col:15> 'const u64 *':'const u64 *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x2a7b49f50a0 <col:15> 'const u64 *':'const u64 *' lvalue ParmVar 0x2a7b49f4e10 'in' 'const u64 *':'const u64 *'
|   |     `-IntegerLiteral 0x2a7b49f50c0 <col:18> 'int' 0
|   |-CompoundAssignOperator 0x2a7b49f5280 <line:232:5, col:19> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x2a7b49f51c8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b49f51b0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b49f5168 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b49f4d98 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b49f5188 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x2a7b49f5268 <col:15, col:19> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x2a7b49f5248 <col:15, col:19> 'const u64':'const unsigned long long' lvalue
|   |     |-ImplicitCastExpr 0x2a7b49f5230 <col:15> 'const u64 *':'const u64 *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x2a7b49f51e8 <col:15> 'const u64 *':'const u64 *' lvalue ParmVar 0x2a7b49f4e10 'in' 'const u64 *':'const u64 *'
|   |     `-IntegerLiteral 0x2a7b49f5208 <col:18> 'int' 1
|   |-CompoundAssignOperator 0x2a7b49f53c8 <line:233:5, col:19> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x2a7b49f5310 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b49f52f8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b49f52b0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b49f4d98 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b49f52d0 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x2a7b49f53b0 <col:15, col:19> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x2a7b49f5390 <col:15, col:19> 'const u64':'const unsigned long long' lvalue
|   |     |-ImplicitCastExpr 0x2a7b49f5378 <col:15> 'const u64 *':'const u64 *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x2a7b49f5330 <col:15> 'const u64 *':'const u64 *' lvalue ParmVar 0x2a7b49f4e10 'in' 'const u64 *':'const u64 *'
|   |     `-IntegerLiteral 0x2a7b49f5350 <col:18> 'int' 2
|   `-CompoundAssignOperator 0x2a7b49f5510 <line:234:5, col:19> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|     |-ArraySubscriptExpr 0x2a7b49f5458 <col:5, col:10> 'limb':'int' lvalue
|     | |-ImplicitCastExpr 0x2a7b49f5440 <col:5> 'limb *':'limb *' <LValueToRValue>
|     | | `-DeclRefExpr 0x2a7b49f53f8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b49f4d98 'out' 'limb *':'limb *'
|     | `-IntegerLiteral 0x2a7b49f5418 <col:9> 'int' 3
|     `-ImplicitCastExpr 0x2a7b49f54f8 <col:15, col:19> 'u64':'unsigned long long' <LValueToRValue>
|       `-ArraySubscriptExpr 0x2a7b49f54d8 <col:15, col:19> 'const u64':'const unsigned long long' lvalue
|         |-ImplicitCastExpr 0x2a7b49f54c0 <col:15> 'const u64 *':'const u64 *' <LValueToRValue>
|         | `-DeclRefExpr 0x2a7b49f5478 <col:15> 'const u64 *':'const u64 *' lvalue ParmVar 0x2a7b49f4e10 'in' 'const u64 *':'const u64 *'
|         `-IntegerLiteral 0x2a7b49f5498 <col:18> 'int' 3
|-FunctionDecl 0x2a7b49f5738 <line:238:1, line:244:1> line:238:13 used felem_scalar 'void (limb *, const u64)' static
| |-ParmVarDecl 0x2a7b49f5580 <col:26, col:32> col:32 used out 'limb *':'limb *'
| |-ParmVarDecl 0x2a7b49f55f8 <col:37, col:47> col:47 used scalar 'const u64':'const unsigned long long'
| `-CompoundStmt 0x2a7b49f5ba0 <line:239:1, line:244:1>
|   |-CompoundAssignOperator 0x2a7b49f58b8 <line:240:5, col:15> 'limb':'int' '*=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x2a7b49f5860 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b49f5848 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b49f5800 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b49f5580 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b49f5820 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x2a7b49f58a0 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x2a7b49f5880 <col:15> 'const u64':'const unsigned long long' lvalue ParmVar 0x2a7b49f55f8 'scalar' 'const u64':'const unsigned long long'
|   |-CompoundAssignOperator 0x2a7b49f59a0 <line:241:5, col:15> 'limb':'int' '*=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x2a7b49f5948 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b49f5930 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b49f58e8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b49f5580 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b49f5908 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x2a7b49f5988 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x2a7b49f5968 <col:15> 'const u64':'const unsigned long long' lvalue ParmVar 0x2a7b49f55f8 'scalar' 'const u64':'const unsigned long long'
|   |-CompoundAssignOperator 0x2a7b49f5a88 <line:242:5, col:15> 'limb':'int' '*=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x2a7b49f5a30 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b49f5a18 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b49f59d0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b49f5580 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b49f59f0 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x2a7b49f5a70 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x2a7b49f5a50 <col:15> 'const u64':'const unsigned long long' lvalue ParmVar 0x2a7b49f55f8 'scalar' 'const u64':'const unsigned long long'
|   `-CompoundAssignOperator 0x2a7b49f5b70 <line:243:5, col:15> 'limb':'int' '*=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|     |-ArraySubscriptExpr 0x2a7b49f5b18 <col:5, col:10> 'limb':'int' lvalue
|     | |-ImplicitCastExpr 0x2a7b49f5b00 <col:5> 'limb *':'limb *' <LValueToRValue>
|     | | `-DeclRefExpr 0x2a7b49f5ab8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b49f5580 'out' 'limb *':'limb *'
|     | `-IntegerLiteral 0x2a7b49f5ad8 <col:9> 'int' 3
|     `-ImplicitCastExpr 0x2a7b49f5b58 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|       `-DeclRefExpr 0x2a7b49f5b38 <col:15> 'const u64':'const unsigned long long' lvalue ParmVar 0x2a7b49f55f8 'scalar' 'const u64':'const unsigned long long'
|-FunctionDecl 0x2a7b49f5df0 <line:247:1, line:257:1> line:247:13 used longfelem_scalar 'void (limb *, const u64)' static
| |-ParmVarDecl 0x2a7b49f5c30 <col:30, col:40> col:40 used out 'limb *':'limb *'
| |-ParmVarDecl 0x2a7b49f5ca8 <col:45, col:55> col:55 used scalar 'const u64':'const unsigned long long'
| `-CompoundStmt 0x2a7b49f65f8 <line:248:1, line:257:1>
|   |-CompoundAssignOperator 0x2a7b49f5f70 <line:249:5, col:15> 'limb':'int' '*=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x2a7b49f5f18 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b49f5f00 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b49f5eb8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b49f5c30 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b49f5ed8 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x2a7b49f5f58 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x2a7b49f5f38 <col:15> 'const u64':'const unsigned long long' lvalue ParmVar 0x2a7b49f5ca8 'scalar' 'const u64':'const unsigned long long'
|   |-CompoundAssignOperator 0x2a7b49f6058 <line:250:5, col:15> 'limb':'int' '*=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x2a7b49f6000 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b49f5fe8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b49f5fa0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b49f5c30 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b49f5fc0 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x2a7b49f6040 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x2a7b49f6020 <col:15> 'const u64':'const unsigned long long' lvalue ParmVar 0x2a7b49f5ca8 'scalar' 'const u64':'const unsigned long long'
|   |-CompoundAssignOperator 0x2a7b49f6140 <line:251:5, col:15> 'limb':'int' '*=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x2a7b49f60e8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b49f60d0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b49f6088 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b49f5c30 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b49f60a8 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x2a7b49f6128 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x2a7b49f6108 <col:15> 'const u64':'const unsigned long long' lvalue ParmVar 0x2a7b49f5ca8 'scalar' 'const u64':'const unsigned long long'
|   |-CompoundAssignOperator 0x2a7b49f6228 <line:252:5, col:15> 'limb':'int' '*=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x2a7b49f61d0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b49f61b8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b49f6170 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b49f5c30 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b49f6190 <col:9> 'int' 3
|   | `-ImplicitCastExpr 0x2a7b49f6210 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x2a7b49f61f0 <col:15> 'const u64':'const unsigned long long' lvalue ParmVar 0x2a7b49f5ca8 'scalar' 'const u64':'const unsigned long long'
|   |-CompoundAssignOperator 0x2a7b49f6310 <line:253:5, col:15> 'limb':'int' '*=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x2a7b49f62b8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b49f62a0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b49f6258 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b49f5c30 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b49f6278 <col:9> 'int' 4
|   | `-ImplicitCastExpr 0x2a7b49f62f8 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x2a7b49f62d8 <col:15> 'const u64':'const unsigned long long' lvalue ParmVar 0x2a7b49f5ca8 'scalar' 'const u64':'const unsigned long long'
|   |-CompoundAssignOperator 0x2a7b49f63f8 <line:254:5, col:15> 'limb':'int' '*=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x2a7b49f63a0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b49f6388 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b49f6340 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b49f5c30 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b49f6360 <col:9> 'int' 5
|   | `-ImplicitCastExpr 0x2a7b49f63e0 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x2a7b49f63c0 <col:15> 'const u64':'const unsigned long long' lvalue ParmVar 0x2a7b49f5ca8 'scalar' 'const u64':'const unsigned long long'
|   |-CompoundAssignOperator 0x2a7b49f64e0 <line:255:5, col:15> 'limb':'int' '*=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x2a7b49f6488 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b49f6470 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b49f6428 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b49f5c30 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b49f6448 <col:9> 'int' 6
|   | `-ImplicitCastExpr 0x2a7b49f64c8 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x2a7b49f64a8 <col:15> 'const u64':'const unsigned long long' lvalue ParmVar 0x2a7b49f5ca8 'scalar' 'const u64':'const unsigned long long'
|   `-CompoundAssignOperator 0x2a7b49f65c8 <line:256:5, col:15> 'limb':'int' '*=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|     |-ArraySubscriptExpr 0x2a7b49f6570 <col:5, col:10> 'limb':'int' lvalue
|     | |-ImplicitCastExpr 0x2a7b49f6558 <col:5> 'limb *':'limb *' <LValueToRValue>
|     | | `-DeclRefExpr 0x2a7b49f6510 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b49f5c30 'out' 'limb *':'limb *'
|     | `-IntegerLiteral 0x2a7b49f6530 <col:9> 'int' 7
|     `-ImplicitCastExpr 0x2a7b49f65b0 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|       `-DeclRefExpr 0x2a7b49f6590 <col:15> 'const u64':'const unsigned long long' lvalue ParmVar 0x2a7b49f5ca8 'scalar' 'const u64':'const unsigned long long'
|-VarDecl 0x2a7b49f6658 <line:264:1, line:265:53> line:264:20 used zero105 'const felem':'limb const[4]' static cinit
| `-InitListExpr 0x2a7b49f7118 <line:265:5, col:53> 'const felem':'limb const[4]'
|   |-BinaryOperator 0x2a7b49f6998 <line:259:22, col:78> 'int' '-'
|   | |-BinaryOperator 0x2a7b49f6890 <col:22, col:59> 'int' '-'
|   | | |-ParenExpr 0x2a7b49f6788 <col:22, col:39> 'limb':'int'
|   | | | `-BinaryOperator 0x2a7b49f6768 <col:23, col:36> 'limb':'int' '<<'
|   | | |   |-ParenExpr 0x2a7b49f6720 <col:23, col:31> 'limb':'int'
|   | | |   | `-CStyleCastExpr 0x2a7b49f66f8 <col:24, col:30> 'limb':'int' <NoOp>
|   | | |   |   `-IntegerLiteral 0x2a7b49f66c0 <col:30> 'int' 1
|   | | |   `-IntegerLiteral 0x2a7b49f6740 <col:36> 'int' 105
|   | | `-ParenExpr 0x2a7b49f6870 <col:43, col:59> 'limb':'int'
|   | |   `-BinaryOperator 0x2a7b49f6850 <col:44, col:57> 'limb':'int' '<<'
|   | |     |-ParenExpr 0x2a7b49f6808 <col:44, col:52> 'limb':'int'
|   | |     | `-CStyleCastExpr 0x2a7b49f67e0 <col:45, col:51> 'limb':'int' <NoOp>
|   | |     |   `-IntegerLiteral 0x2a7b49f67a8 <col:51> 'int' 1
|   | |     `-IntegerLiteral 0x2a7b49f6828 <col:57> 'int' 41
|   | `-ParenExpr 0x2a7b49f6978 <col:63, col:78> 'limb':'int'
|   |   `-BinaryOperator 0x2a7b49f6958 <col:64, col:77> 'limb':'int' '<<'
|   |     |-ParenExpr 0x2a7b49f6910 <col:64, col:72> 'limb':'int'
|   |     | `-CStyleCastExpr 0x2a7b49f68e8 <col:65, col:71> 'limb':'int' <NoOp>
|   |     |   `-IntegerLiteral 0x2a7b49f68b0 <col:71> 'int' 1
|   |     `-IntegerLiteral 0x2a7b49f6930 <col:77> 'int' 9
|   |-ParenExpr 0x2a7b49f6a80 <line:260:17, col:34> 'limb':'int'
|   | `-BinaryOperator 0x2a7b49f6a60 <col:18, col:31> 'limb':'int' '<<'
|   |   |-ParenExpr 0x2a7b49f6a18 <col:18, col:26> 'limb':'int'
|   |   | `-CStyleCastExpr 0x2a7b49f69f0 <col:19, col:25> 'limb':'int' <NoOp>
|   |   |   `-IntegerLiteral 0x2a7b49f69b8 <col:25> 'int' 1
|   |   `-IntegerLiteral 0x2a7b49f6a38 <col:31> 'int' 105
|   |-BinaryOperator 0x2a7b49f6d78 <line:261:22, col:78> 'int' '+'
|   | |-BinaryOperator 0x2a7b49f6c70 <col:22, col:59> 'int' '-'
|   | | |-ParenExpr 0x2a7b49f6b68 <col:22, col:39> 'limb':'int'
|   | | | `-BinaryOperator 0x2a7b49f6b48 <col:23, col:36> 'limb':'int' '<<'
|   | | |   |-ParenExpr 0x2a7b49f6b00 <col:23, col:31> 'limb':'int'
|   | | |   | `-CStyleCastExpr 0x2a7b49f6ad8 <col:24, col:30> 'limb':'int' <NoOp>
|   | | |   |   `-IntegerLiteral 0x2a7b49f6aa0 <col:30> 'int' 1
|   | | |   `-IntegerLiteral 0x2a7b49f6b20 <col:36> 'int' 105
|   | | `-ParenExpr 0x2a7b49f6c50 <col:43, col:59> 'limb':'int'
|   | |   `-BinaryOperator 0x2a7b49f6c30 <col:44, col:57> 'limb':'int' '<<'
|   | |     |-ParenExpr 0x2a7b49f6be8 <col:44, col:52> 'limb':'int'
|   | |     | `-CStyleCastExpr 0x2a7b49f6bc0 <col:45, col:51> 'limb':'int' <NoOp>
|   | |     |   `-IntegerLiteral 0x2a7b49f6b88 <col:51> 'int' 1
|   | |     `-IntegerLiteral 0x2a7b49f6c08 <col:57> 'int' 41
|   | `-ParenExpr 0x2a7b49f6d58 <col:63, col:78> 'limb':'int'
|   |   `-BinaryOperator 0x2a7b49f6d38 <col:64, col:77> 'limb':'int' '<<'
|   |     |-ParenExpr 0x2a7b49f6cf0 <col:64, col:72> 'limb':'int'
|   |     | `-CStyleCastExpr 0x2a7b49f6cc8 <col:65, col:71> 'limb':'int' <NoOp>
|   |     |   `-IntegerLiteral 0x2a7b49f6c90 <col:71> 'int' 1
|   |     `-IntegerLiteral 0x2a7b49f6d10 <col:77> 'int' 9
|   `-BinaryOperator 0x2a7b49f7070 <col:22, col:78> 'int' '+'
|     |-BinaryOperator 0x2a7b49f6f68 <col:22, col:59> 'int' '-'
|     | |-ParenExpr 0x2a7b49f6e60 <col:22, col:39> 'limb':'int'
|     | | `-BinaryOperator 0x2a7b49f6e40 <col:23, col:36> 'limb':'int' '<<'
|     | |   |-ParenExpr 0x2a7b49f6df8 <col:23, col:31> 'limb':'int'
|     | |   | `-CStyleCastExpr 0x2a7b49f6dd0 <col:24, col:30> 'limb':'int' <NoOp>
|     | |   |   `-IntegerLiteral 0x2a7b49f6d98 <col:30> 'int' 1
|     | |   `-IntegerLiteral 0x2a7b49f6e18 <col:36> 'int' 105
|     | `-ParenExpr 0x2a7b49f6f48 <col:43, col:59> 'limb':'int'
|     |   `-BinaryOperator 0x2a7b49f6f28 <col:44, col:57> 'limb':'int' '<<'
|     |     |-ParenExpr 0x2a7b49f6ee0 <col:44, col:52> 'limb':'int'
|     |     | `-CStyleCastExpr 0x2a7b49f6eb8 <col:45, col:51> 'limb':'int' <NoOp>
|     |     |   `-IntegerLiteral 0x2a7b49f6e80 <col:51> 'int' 1
|     |     `-IntegerLiteral 0x2a7b49f6f00 <col:57> 'int' 41
|     `-ParenExpr 0x2a7b49f7050 <col:63, col:78> 'limb':'int'
|       `-BinaryOperator 0x2a7b49f7030 <col:64, col:77> 'limb':'int' '<<'
|         |-ParenExpr 0x2a7b49f6fe8 <col:64, col:72> 'limb':'int'
|         | `-CStyleCastExpr 0x2a7b49f6fc0 <col:65, col:71> 'limb':'int' <NoOp>
|         |   `-IntegerLiteral 0x2a7b49f6f88 <col:71> 'int' 1
|         `-IntegerLiteral 0x2a7b49f7008 <col:77> 'int' 9
|-FunctionDecl 0x2a7b49f72c8 <line:272:1, line:279:1> line:272:13 used smallfelem_neg 'void (limb *, const u64 *)' static
| |-ParmVarDecl 0x2a7b49f7188 <col:28, col:34> col:34 used out 'limb *':'limb *'
| |-ParmVarDecl 0x2a7b49f7200 <col:39, col:56> col:56 used small 'const u64 *':'const u64 *'
| `-CompoundStmt 0x2a7b49f7c58 <line:273:1, line:279:1>
|   |-BinaryOperator 0x2a7b49f7590 <line:275:5, col:34> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2a7b49f73f0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b49f73d8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b49f7390 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b49f7188 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b49f73b0 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x2a7b49f7578 <col:14, col:34> 'limb':'int' <IntegralCast>
|   |   `-BinaryOperator 0x2a7b49f7558 <col:14, col:34> 'unsigned long long' '-'
|   |     |-ImplicitCastExpr 0x2a7b49f7540 <col:14, col:23> 'unsigned long long' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x2a7b49f7510 <col:14, col:23> 'limb':'int' <LValueToRValue>
|   |     |   `-ArraySubscriptExpr 0x2a7b49f7470 <col:14, col:23> 'const limb':'const int' lvalue
|   |     |     |-ImplicitCastExpr 0x2a7b49f7458 <col:14> 'const limb *' <ArrayToPointerDecay>
|   |     |     | `-DeclRefExpr 0x2a7b49f7410 <col:14> 'const felem':'limb const[4]' lvalue Var 0x2a7b49f6658 'zero105' 'const felem':'limb const[4]'
|   |     |     `-IntegerLiteral 0x2a7b49f7430 <col:22> 'int' 0
|   |     `-ImplicitCastExpr 0x2a7b49f7528 <col:27, col:34> 'u64':'unsigned long long' <LValueToRValue>
|   |       `-ArraySubscriptExpr 0x2a7b49f74f0 <col:27, col:34> 'const u64':'const unsigned long long' lvalue
|   |         |-ImplicitCastExpr 0x2a7b49f74d8 <col:27> 'const u64 *':'const u64 *' <LValueToRValue>
|   |         | `-DeclRefExpr 0x2a7b49f7490 <col:27> 'const u64 *':'const u64 *' lvalue ParmVar 0x2a7b49f7200 'small' 'const u64 *':'const u64 *'
|   |         `-IntegerLiteral 0x2a7b49f74b0 <col:33> 'int' 0
|   |-BinaryOperator 0x2a7b49f77f8 <line:276:5, col:34> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2a7b49f7658 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b49f7640 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b49f75f8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b49f7188 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b49f7618 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x2a7b49f77e0 <col:14, col:34> 'limb':'int' <IntegralCast>
|   |   `-BinaryOperator 0x2a7b49f77c0 <col:14, col:34> 'unsigned long long' '-'
|   |     |-ImplicitCastExpr 0x2a7b49f77a8 <col:14, col:23> 'unsigned long long' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x2a7b49f7778 <col:14, col:23> 'limb':'int' <LValueToRValue>
|   |     |   `-ArraySubscriptExpr 0x2a7b49f76d8 <col:14, col:23> 'const limb':'const int' lvalue
|   |     |     |-ImplicitCastExpr 0x2a7b49f76c0 <col:14> 'const limb *' <ArrayToPointerDecay>
|   |     |     | `-DeclRefExpr 0x2a7b49f7678 <col:14> 'const felem':'limb const[4]' lvalue Var 0x2a7b49f6658 'zero105' 'const felem':'limb const[4]'
|   |     |     `-IntegerLiteral 0x2a7b49f7698 <col:22> 'int' 1
|   |     `-ImplicitCastExpr 0x2a7b49f7790 <col:27, col:34> 'u64':'unsigned long long' <LValueToRValue>
|   |       `-ArraySubscriptExpr 0x2a7b49f7758 <col:27, col:34> 'const u64':'const unsigned long long' lvalue
|   |         |-ImplicitCastExpr 0x2a7b49f7740 <col:27> 'const u64 *':'const u64 *' <LValueToRValue>
|   |         | `-DeclRefExpr 0x2a7b49f76f8 <col:27> 'const u64 *':'const u64 *' lvalue ParmVar 0x2a7b49f7200 'small' 'const u64 *':'const u64 *'
|   |         `-IntegerLiteral 0x2a7b49f7718 <col:33> 'int' 1
|   |-BinaryOperator 0x2a7b49f7a18 <line:277:5, col:34> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2a7b49f7878 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b49f7860 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b49f7818 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b49f7188 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b49f7838 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x2a7b49f7a00 <col:14, col:34> 'limb':'int' <IntegralCast>
|   |   `-BinaryOperator 0x2a7b49f79e0 <col:14, col:34> 'unsigned long long' '-'
|   |     |-ImplicitCastExpr 0x2a7b49f79c8 <col:14, col:23> 'unsigned long long' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x2a7b49f7998 <col:14, col:23> 'limb':'int' <LValueToRValue>
|   |     |   `-ArraySubscriptExpr 0x2a7b49f78f8 <col:14, col:23> 'const limb':'const int' lvalue
|   |     |     |-ImplicitCastExpr 0x2a7b49f78e0 <col:14> 'const limb *' <ArrayToPointerDecay>
|   |     |     | `-DeclRefExpr 0x2a7b49f7898 <col:14> 'const felem':'limb const[4]' lvalue Var 0x2a7b49f6658 'zero105' 'const felem':'limb const[4]'
|   |     |     `-IntegerLiteral 0x2a7b49f78b8 <col:22> 'int' 2
|   |     `-ImplicitCastExpr 0x2a7b49f79b0 <col:27, col:34> 'u64':'unsigned long long' <LValueToRValue>
|   |       `-ArraySubscriptExpr 0x2a7b49f7978 <col:27, col:34> 'const u64':'const unsigned long long' lvalue
|   |         |-ImplicitCastExpr 0x2a7b49f7960 <col:27> 'const u64 *':'const u64 *' <LValueToRValue>
|   |         | `-DeclRefExpr 0x2a7b49f7918 <col:27> 'const u64 *':'const u64 *' lvalue ParmVar 0x2a7b49f7200 'small' 'const u64 *':'const u64 *'
|   |         `-IntegerLiteral 0x2a7b49f7938 <col:33> 'int' 2
|   `-BinaryOperator 0x2a7b49f7c38 <line:278:5, col:34> 'limb':'int' '='
|     |-ArraySubscriptExpr 0x2a7b49f7a98 <col:5, col:10> 'limb':'int' lvalue
|     | |-ImplicitCastExpr 0x2a7b49f7a80 <col:5> 'limb *':'limb *' <LValueToRValue>
|     | | `-DeclRefExpr 0x2a7b49f7a38 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b49f7188 'out' 'limb *':'limb *'
|     | `-IntegerLiteral 0x2a7b49f7a58 <col:9> 'int' 3
|     `-ImplicitCastExpr 0x2a7b49f7c20 <col:14, col:34> 'limb':'int' <IntegralCast>
|       `-BinaryOperator 0x2a7b49f7c00 <col:14, col:34> 'unsigned long long' '-'
|         |-ImplicitCastExpr 0x2a7b49f7be8 <col:14, col:23> 'unsigned long long' <IntegralCast>
|         | `-ImplicitCastExpr 0x2a7b49f7bb8 <col:14, col:23> 'limb':'int' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x2a7b49f7b18 <col:14, col:23> 'const limb':'const int' lvalue
|         |     |-ImplicitCastExpr 0x2a7b49f7b00 <col:14> 'const limb *' <ArrayToPointerDecay>
|         |     | `-DeclRefExpr 0x2a7b49f7ab8 <col:14> 'const felem':'limb const[4]' lvalue Var 0x2a7b49f6658 'zero105' 'const felem':'limb const[4]'
|         |     `-IntegerLiteral 0x2a7b49f7ad8 <col:22> 'int' 3
|         `-ImplicitCastExpr 0x2a7b49f7bd0 <col:27, col:34> 'u64':'unsigned long long' <LValueToRValue>
|           `-ArraySubscriptExpr 0x2a7b49f7b98 <col:27, col:34> 'const u64':'const unsigned long long' lvalue
|             |-ImplicitCastExpr 0x2a7b49f7b80 <col:27> 'const u64 *':'const u64 *' <LValueToRValue>
|             | `-DeclRefExpr 0x2a7b49f7b38 <col:27> 'const u64 *':'const u64 *' lvalue ParmVar 0x2a7b49f7200 'small' 'const u64 *':'const u64 *'
|             `-IntegerLiteral 0x2a7b49f7b58 <col:33> 'int' 3
|-FunctionDecl 0x2a7b49f7e00 <line:288:1, line:302:1> line:288:13 used felem_diff 'void (limb *, const limb *)' static
| |-ParmVarDecl 0x2a7b49f7c98 <col:24, col:30> col:30 used out 'limb *':'limb *'
| |-ParmVarDecl 0x2a7b49f7d10 <col:35, col:47> col:47 used in 'const limb *':'const limb *'
| `-CompoundStmt 0x2a7b49f8908 <line:289:1, line:302:1>
|   |-CompoundAssignOperator 0x2a7b49f7fe0 <line:293:5, col:24> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2a7b49f7f28 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b49f7f10 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b49f7ec8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b49f7c98 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b49f7ee8 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x2a7b49f7fc8 <col:15, col:24> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x2a7b49f7fa8 <col:15, col:24> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x2a7b49f7f90 <col:15> 'const limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x2a7b49f7f48 <col:15> 'const felem':'limb const[4]' lvalue Var 0x2a7b49f6658 'zero105' 'const felem':'limb const[4]'
|   |     `-IntegerLiteral 0x2a7b49f7f68 <col:23> 'int' 0
|   |-CompoundAssignOperator 0x2a7b49f8128 <line:294:5, col:24> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2a7b49f8070 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b49f8058 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b49f8010 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b49f7c98 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b49f8030 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x2a7b49f8110 <col:15, col:24> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x2a7b49f80f0 <col:15, col:24> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x2a7b49f80d8 <col:15> 'const limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x2a7b49f8090 <col:15> 'const felem':'limb const[4]' lvalue Var 0x2a7b49f6658 'zero105' 'const felem':'limb const[4]'
|   |     `-IntegerLiteral 0x2a7b49f80b0 <col:23> 'int' 1
|   |-CompoundAssignOperator 0x2a7b49f8270 <line:295:5, col:24> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2a7b49f81b8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b49f81a0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b49f8158 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b49f7c98 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b49f8178 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x2a7b49f8258 <col:15, col:24> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x2a7b49f8238 <col:15, col:24> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x2a7b49f8220 <col:15> 'const limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x2a7b49f81d8 <col:15> 'const felem':'limb const[4]' lvalue Var 0x2a7b49f6658 'zero105' 'const felem':'limb const[4]'
|   |     `-IntegerLiteral 0x2a7b49f81f8 <col:23> 'int' 2
|   |-CompoundAssignOperator 0x2a7b49f83b8 <line:296:5, col:24> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2a7b49f8300 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b49f82e8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b49f82a0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b49f7c98 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b49f82c0 <col:9> 'int' 3
|   | `-ImplicitCastExpr 0x2a7b49f83a0 <col:15, col:24> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x2a7b49f8380 <col:15, col:24> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x2a7b49f8368 <col:15> 'const limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x2a7b49f8320 <col:15> 'const felem':'limb const[4]' lvalue Var 0x2a7b49f6658 'zero105' 'const felem':'limb const[4]'
|   |     `-IntegerLiteral 0x2a7b49f8340 <col:23> 'int' 3
|   |-CompoundAssignOperator 0x2a7b49f8500 <line:298:5, col:19> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2a7b49f8448 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b49f8430 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b49f83e8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b49f7c98 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b49f8408 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x2a7b49f84e8 <col:15, col:19> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x2a7b49f84c8 <col:15, col:19> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x2a7b49f84b0 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x2a7b49f8468 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x2a7b49f7d10 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x2a7b49f8488 <col:18> 'int' 0
|   |-CompoundAssignOperator 0x2a7b49f8648 <line:299:5, col:19> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2a7b49f8590 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b49f8578 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b49f8530 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b49f7c98 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b49f8550 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x2a7b49f8630 <col:15, col:19> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x2a7b49f8610 <col:15, col:19> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x2a7b49f85f8 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x2a7b49f85b0 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x2a7b49f7d10 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x2a7b49f85d0 <col:18> 'int' 1
|   |-CompoundAssignOperator 0x2a7b49f8790 <line:300:5, col:19> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2a7b49f86d8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b49f86c0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b49f8678 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b49f7c98 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b49f8698 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x2a7b49f8778 <col:15, col:19> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x2a7b49f8758 <col:15, col:19> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x2a7b49f8740 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x2a7b49f86f8 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x2a7b49f7d10 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x2a7b49f8718 <col:18> 'int' 2
|   `-CompoundAssignOperator 0x2a7b49f88d8 <line:301:5, col:19> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|     |-ArraySubscriptExpr 0x2a7b49f8820 <col:5, col:10> 'limb':'int' lvalue
|     | |-ImplicitCastExpr 0x2a7b49f8808 <col:5> 'limb *':'limb *' <LValueToRValue>
|     | | `-DeclRefExpr 0x2a7b49f87c0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b49f7c98 'out' 'limb *':'limb *'
|     | `-IntegerLiteral 0x2a7b49f87e0 <col:9> 'int' 3
|     `-ImplicitCastExpr 0x2a7b49f88c0 <col:15, col:19> 'limb':'int' <LValueToRValue>
|       `-ArraySubscriptExpr 0x2a7b49f88a0 <col:15, col:19> 'const limb':'const int' lvalue
|         |-ImplicitCastExpr 0x2a7b49f8888 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|         | `-DeclRefExpr 0x2a7b49f8840 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x2a7b49f7d10 'in' 'const limb *':'const limb *'
|         `-IntegerLiteral 0x2a7b49f8860 <col:18> 'int' 3
|-VarDecl 0x2a7b49f8968 <line:309:1, line:310:56> line:309:20 used zero107 'const felem':'limb const[4]' static cinit
| `-InitListExpr 0x2a7b49f9428 <line:310:5, col:56> 'const felem':'limb const[4]'
|   |-BinaryOperator 0x2a7b49f8ca8 <line:304:23, col:80> 'int' '-'
|   | |-BinaryOperator 0x2a7b49f8ba0 <col:23, col:60> 'int' '-'
|   | | |-ParenExpr 0x2a7b49f8a98 <col:23, col:40> 'limb':'int'
|   | | | `-BinaryOperator 0x2a7b49f8a78 <col:24, col:37> 'limb':'int' '<<'
|   | | |   |-ParenExpr 0x2a7b49f8a30 <col:24, col:32> 'limb':'int'
|   | | |   | `-CStyleCastExpr 0x2a7b49f8a08 <col:25, col:31> 'limb':'int' <NoOp>
|   | | |   |   `-IntegerLiteral 0x2a7b49f89d0 <col:31> 'int' 1
|   | | |   `-IntegerLiteral 0x2a7b49f8a50 <col:37> 'int' 107
|   | | `-ParenExpr 0x2a7b49f8b80 <col:44, col:60> 'limb':'int'
|   | |   `-BinaryOperator 0x2a7b49f8b60 <col:45, col:58> 'limb':'int' '<<'
|   | |     |-ParenExpr 0x2a7b49f8b18 <col:45, col:53> 'limb':'int'
|   | |     | `-CStyleCastExpr 0x2a7b49f8af0 <col:46, col:52> 'limb':'int' <NoOp>
|   | |     |   `-IntegerLiteral 0x2a7b49f8ab8 <col:52> 'int' 1
|   | |     `-IntegerLiteral 0x2a7b49f8b38 <col:58> 'int' 43
|   | `-ParenExpr 0x2a7b49f8c88 <col:64, col:80> 'limb':'int'
|   |   `-BinaryOperator 0x2a7b49f8c68 <col:65, col:78> 'limb':'int' '<<'
|   |     |-ParenExpr 0x2a7b49f8c20 <col:65, col:73> 'limb':'int'
|   |     | `-CStyleCastExpr 0x2a7b49f8bf8 <col:66, col:72> 'limb':'int' <NoOp>
|   |     |   `-IntegerLiteral 0x2a7b49f8bc0 <col:72> 'int' 1
|   |     `-IntegerLiteral 0x2a7b49f8c40 <col:78> 'int' 11
|   |-ParenExpr 0x2a7b49f8d90 <line:305:17, col:34> 'limb':'int'
|   | `-BinaryOperator 0x2a7b49f8d70 <col:18, col:31> 'limb':'int' '<<'
|   |   |-ParenExpr 0x2a7b49f8d28 <col:18, col:26> 'limb':'int'
|   |   | `-CStyleCastExpr 0x2a7b49f8d00 <col:19, col:25> 'limb':'int' <NoOp>
|   |   |   `-IntegerLiteral 0x2a7b49f8cc8 <col:25> 'int' 1
|   |   `-IntegerLiteral 0x2a7b49f8d48 <col:31> 'int' 107
|   |-BinaryOperator 0x2a7b49f9088 <line:306:23, col:80> 'int' '+'
|   | |-BinaryOperator 0x2a7b49f8f80 <col:23, col:60> 'int' '-'
|   | | |-ParenExpr 0x2a7b49f8e78 <col:23, col:40> 'limb':'int'
|   | | | `-BinaryOperator 0x2a7b49f8e58 <col:24, col:37> 'limb':'int' '<<'
|   | | |   |-ParenExpr 0x2a7b49f8e10 <col:24, col:32> 'limb':'int'
|   | | |   | `-CStyleCastExpr 0x2a7b49f8de8 <col:25, col:31> 'limb':'int' <NoOp>
|   | | |   |   `-IntegerLiteral 0x2a7b49f8db0 <col:31> 'int' 1
|   | | |   `-IntegerLiteral 0x2a7b49f8e30 <col:37> 'int' 107
|   | | `-ParenExpr 0x2a7b49f8f60 <col:44, col:60> 'limb':'int'
|   | |   `-BinaryOperator 0x2a7b49f8f40 <col:45, col:58> 'limb':'int' '<<'
|   | |     |-ParenExpr 0x2a7b49f8ef8 <col:45, col:53> 'limb':'int'
|   | |     | `-CStyleCastExpr 0x2a7b49f8ed0 <col:46, col:52> 'limb':'int' <NoOp>
|   | |     |   `-IntegerLiteral 0x2a7b49f8e98 <col:52> 'int' 1
|   | |     `-IntegerLiteral 0x2a7b49f8f18 <col:58> 'int' 43
|   | `-ParenExpr 0x2a7b49f9068 <col:64, col:80> 'limb':'int'
|   |   `-BinaryOperator 0x2a7b49f9048 <col:65, col:78> 'limb':'int' '<<'
|   |     |-ParenExpr 0x2a7b49f9000 <col:65, col:73> 'limb':'int'
|   |     | `-CStyleCastExpr 0x2a7b49f8fd8 <col:66, col:72> 'limb':'int' <NoOp>
|   |     |   `-IntegerLiteral 0x2a7b49f8fa0 <col:72> 'int' 1
|   |     `-IntegerLiteral 0x2a7b49f9020 <col:78> 'int' 11
|   `-BinaryOperator 0x2a7b49f9380 <col:23, col:80> 'int' '+'
|     |-BinaryOperator 0x2a7b49f9278 <col:23, col:60> 'int' '-'
|     | |-ParenExpr 0x2a7b49f9170 <col:23, col:40> 'limb':'int'
|     | | `-BinaryOperator 0x2a7b49f9150 <col:24, col:37> 'limb':'int' '<<'
|     | |   |-ParenExpr 0x2a7b49f9108 <col:24, col:32> 'limb':'int'
|     | |   | `-CStyleCastExpr 0x2a7b49f90e0 <col:25, col:31> 'limb':'int' <NoOp>
|     | |   |   `-IntegerLiteral 0x2a7b49f90a8 <col:31> 'int' 1
|     | |   `-IntegerLiteral 0x2a7b49f9128 <col:37> 'int' 107
|     | `-ParenExpr 0x2a7b49f9258 <col:44, col:60> 'limb':'int'
|     |   `-BinaryOperator 0x2a7b49f9238 <col:45, col:58> 'limb':'int' '<<'
|     |     |-ParenExpr 0x2a7b49f91f0 <col:45, col:53> 'limb':'int'
|     |     | `-CStyleCastExpr 0x2a7b49f91c8 <col:46, col:52> 'limb':'int' <NoOp>
|     |     |   `-IntegerLiteral 0x2a7b49f9190 <col:52> 'int' 1
|     |     `-IntegerLiteral 0x2a7b49f9210 <col:58> 'int' 43
|     `-ParenExpr 0x2a7b49f9360 <col:64, col:80> 'limb':'int'
|       `-BinaryOperator 0x2a7b49f9340 <col:65, col:78> 'limb':'int' '<<'
|         |-ParenExpr 0x2a7b49f92f8 <col:65, col:73> 'limb':'int'
|         | `-CStyleCastExpr 0x2a7b49f92d0 <col:66, col:72> 'limb':'int' <NoOp>
|         |   `-IntegerLiteral 0x2a7b49f9298 <col:72> 'int' 1
|         `-IntegerLiteral 0x2a7b49f9318 <col:78> 'int' 11
|-FunctionDecl 0x2a7b49f95d8 <line:320:1, line:334:1> line:320:13 used felem_diff_zero107 'void (limb *, const limb *)' static
| |-ParmVarDecl 0x2a7b49f9498 <col:32, col:38> col:38 used out 'limb *':'limb *'
| |-ParmVarDecl 0x2a7b49f9510 <col:43, col:55> col:55 used in 'const limb *':'const limb *'
| `-CompoundStmt 0x2a7b49fa148 <line:321:1, line:334:1>
|   |-CompoundAssignOperator 0x2a7b49f97b8 <line:325:5, col:24> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2a7b49f9700 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b49f96e8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b49f96a0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b49f9498 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b49f96c0 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x2a7b49f97a0 <col:15, col:24> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x2a7b49f9780 <col:15, col:24> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x2a7b49f9768 <col:15> 'const limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x2a7b49f9720 <col:15> 'const felem':'limb const[4]' lvalue Var 0x2a7b49f8968 'zero107' 'const felem':'limb const[4]'
|   |     `-IntegerLiteral 0x2a7b49f9740 <col:23> 'int' 0
|   |-CompoundAssignOperator 0x2a7b49f9948 <line:326:5, col:24> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2a7b49f9890 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b49f9878 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b49f9830 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b49f9498 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b49f9850 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x2a7b49f9930 <col:15, col:24> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x2a7b49f9910 <col:15, col:24> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x2a7b49f98f8 <col:15> 'const limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x2a7b49f98b0 <col:15> 'const felem':'limb const[4]' lvalue Var 0x2a7b49f8968 'zero107' 'const felem':'limb const[4]'
|   |     `-IntegerLiteral 0x2a7b49f98d0 <col:23> 'int' 1
|   |-CompoundAssignOperator 0x2a7b49f9a90 <line:327:5, col:24> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2a7b49f99d8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b49f99c0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b49f9978 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b49f9498 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b49f9998 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x2a7b49f9a78 <col:15, col:24> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x2a7b49f9a58 <col:15, col:24> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x2a7b49f9a40 <col:15> 'const limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x2a7b49f99f8 <col:15> 'const felem':'limb const[4]' lvalue Var 0x2a7b49f8968 'zero107' 'const felem':'limb const[4]'
|   |     `-IntegerLiteral 0x2a7b49f9a18 <col:23> 'int' 2
|   |-CompoundAssignOperator 0x2a7b49f9bd8 <line:328:5, col:24> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2a7b49f9b20 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b49f9b08 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b49f9ac0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b49f9498 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b49f9ae0 <col:9> 'int' 3
|   | `-ImplicitCastExpr 0x2a7b49f9bc0 <col:15, col:24> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x2a7b49f9ba0 <col:15, col:24> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x2a7b49f9b88 <col:15> 'const limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x2a7b49f9b40 <col:15> 'const felem':'limb const[4]' lvalue Var 0x2a7b49f8968 'zero107' 'const felem':'limb const[4]'
|   |     `-IntegerLiteral 0x2a7b49f9b60 <col:23> 'int' 3
|   |-CompoundAssignOperator 0x2a7b49f9d20 <line:330:5, col:19> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2a7b49f9c68 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b49f9c50 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b49f9c08 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b49f9498 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b49f9c28 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x2a7b49f9d08 <col:15, col:19> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x2a7b49f9ce8 <col:15, col:19> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x2a7b49f9cd0 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x2a7b49f9c88 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x2a7b49f9510 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x2a7b49f9ca8 <col:18> 'int' 0
|   |-CompoundAssignOperator 0x2a7b49f9e88 <line:331:5, col:19> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2a7b49f9db0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b49f9d98 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b49f9d50 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b49f9498 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b49f9d70 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x2a7b49f9e70 <col:15, col:19> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x2a7b49f9e50 <col:15, col:19> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x2a7b49f9e38 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x2a7b49f9dd0 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x2a7b49f9510 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x2a7b49f9e10 <col:18> 'int' 1
|   |-CompoundAssignOperator 0x2a7b49f9fd0 <line:332:5, col:19> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2a7b49f9f18 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b49f9f00 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b49f9eb8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b49f9498 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b49f9ed8 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x2a7b49f9fb8 <col:15, col:19> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x2a7b49f9f98 <col:15, col:19> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x2a7b49f9f80 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x2a7b49f9f38 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x2a7b49f9510 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x2a7b49f9f58 <col:18> 'int' 2
|   `-CompoundAssignOperator 0x2a7b49fa118 <line:333:5, col:19> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|     |-ArraySubscriptExpr 0x2a7b49fa060 <col:5, col:10> 'limb':'int' lvalue
|     | |-ImplicitCastExpr 0x2a7b49fa048 <col:5> 'limb *':'limb *' <LValueToRValue>
|     | | `-DeclRefExpr 0x2a7b49fa000 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b49f9498 'out' 'limb *':'limb *'
|     | `-IntegerLiteral 0x2a7b49fa020 <col:9> 'int' 3
|     `-ImplicitCastExpr 0x2a7b49fa100 <col:15, col:19> 'limb':'int' <LValueToRValue>
|       `-ArraySubscriptExpr 0x2a7b49fa0e0 <col:15, col:19> 'const limb':'const int' lvalue
|         |-ImplicitCastExpr 0x2a7b49fa0c8 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|         | `-DeclRefExpr 0x2a7b49fa080 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x2a7b49f9510 'in' 'const limb *':'const limb *'
|         `-IntegerLiteral 0x2a7b49fa0a0 <col:18> 'int' 3
|-FunctionDecl 0x2a7b49fa398 <line:343:1, line:373:1> line:343:13 used longfelem_diff 'void (limb *, const limb *)' static
| |-ParmVarDecl 0x2a7b49fa1a8 <col:28, col:38> col:38 used out 'limb *':'limb *'
| |-ParmVarDecl 0x2a7b49fa290 <col:43, col:59> col:59 used in 'const limb *':'const limb *'
| `-CompoundStmt 0x2a7b49fc678 <line:344:1, line:373:1>
|   |-DeclStmt 0x2a7b49fa7d0 <line:345:5, line:346:67>
|   | `-VarDecl 0x2a7b49fa470 <line:345:5, line:346:66> line:345:23 used two70m8p6 'const limb':'const int' static cinit
|   |   `-BinaryOperator 0x2a7b49fa7b0 <line:346:9, col:66> 'int' '+'
|   |     |-BinaryOperator 0x2a7b49fa6a8 <col:9, col:46> 'int' '-'
|   |     | |-ParenExpr 0x2a7b49fa5a0 <col:9, col:26> 'limb':'int'
|   |     | | `-BinaryOperator 0x2a7b49fa580 <col:10, col:24> 'limb':'int' '<<'
|   |     | |   |-ParenExpr 0x2a7b49fa538 <col:10, col:19> 'limb':'int'
|   |     | |   | `-CStyleCastExpr 0x2a7b49fa510 <col:11, col:18> 'limb':'int' <NoOp>
|   |     | |   |   `-IntegerLiteral 0x2a7b49fa4d8 <col:18> 'int' 1
|   |     | |   `-IntegerLiteral 0x2a7b49fa558 <col:24> 'int' 70
|   |     | `-ParenExpr 0x2a7b49fa688 <col:30, col:46> 'limb':'int'
|   |     |   `-BinaryOperator 0x2a7b49fa668 <col:31, col:45> 'limb':'int' '<<'
|   |     |     |-ParenExpr 0x2a7b49fa620 <col:31, col:40> 'limb':'int'
|   |     |     | `-CStyleCastExpr 0x2a7b49fa5f8 <col:32, col:39> 'limb':'int' <NoOp>
|   |     |     |   `-IntegerLiteral 0x2a7b49fa5c0 <col:39> 'int' 1
|   |     |     `-IntegerLiteral 0x2a7b49fa640 <col:45> 'int' 8
|   |     `-ParenExpr 0x2a7b49fa790 <col:50, col:66> 'limb':'int'
|   |       `-BinaryOperator 0x2a7b49fa770 <col:51, col:65> 'limb':'int' '<<'
|   |         |-ParenExpr 0x2a7b49fa728 <col:51, col:60> 'limb':'int'
|   |         | `-CStyleCastExpr 0x2a7b49fa700 <col:52, col:59> 'limb':'int' <NoOp>
|   |         |   `-IntegerLiteral 0x2a7b49fa6c8 <col:59> 'int' 1
|   |         `-IntegerLiteral 0x2a7b49fa748 <col:65> 'int' 6
|   |-DeclStmt 0x2a7b49faa50 <line:347:5, col:73>
|   | `-VarDecl 0x2a7b49fa7f8 <col:5, col:72> col:23 used two70p40 'const limb':'const int' static cinit
|   |   `-BinaryOperator 0x2a7b49faa30 <col:34, col:72> 'int' '+'
|   |     |-ParenExpr 0x2a7b49fa928 <col:34, col:51> 'limb':'int'
|   |     | `-BinaryOperator 0x2a7b49fa908 <col:35, col:49> 'limb':'int' '<<'
|   |     |   |-ParenExpr 0x2a7b49fa8c0 <col:35, col:44> 'limb':'int'
|   |     |   | `-CStyleCastExpr 0x2a7b49fa898 <col:36, col:43> 'limb':'int' <NoOp>
|   |     |   |   `-IntegerLiteral 0x2a7b49fa860 <col:43> 'int' 1
|   |     |   `-IntegerLiteral 0x2a7b49fa8e0 <col:49> 'int' 70
|   |     `-ParenExpr 0x2a7b49faa10 <col:55, col:72> 'limb':'int'
|   |       `-BinaryOperator 0x2a7b49fa9f0 <col:56, col:70> 'limb':'int' '<<'
|   |         |-ParenExpr 0x2a7b49fa9a8 <col:56, col:65> 'limb':'int'
|   |         | `-CStyleCastExpr 0x2a7b49fa980 <col:57, col:64> 'limb':'int' <NoOp>
|   |         |   `-IntegerLiteral 0x2a7b49fa948 <col:64> 'int' 1
|   |         `-IntegerLiteral 0x2a7b49fa9c8 <col:70> 'int' 40
|   |-DeclStmt 0x2a7b49fabc8 <line:348:5, col:49>
|   | `-VarDecl 0x2a7b49faa78 <col:5, col:48> col:23 used two70 'const limb':'const int' static cinit
|   |   `-ParenExpr 0x2a7b49faba8 <col:31, col:48> 'limb':'int'
|   |     `-BinaryOperator 0x2a7b49fab88 <col:32, col:46> 'limb':'int' '<<'
|   |       |-ParenExpr 0x2a7b49fab40 <col:32, col:41> 'limb':'int'
|   |       | `-CStyleCastExpr 0x2a7b49fab18 <col:33, col:40> 'limb':'int' <NoOp>
|   |       |   `-IntegerLiteral 0x2a7b49faae0 <col:40> 'int' 1
|   |       `-IntegerLiteral 0x2a7b49fab60 <col:46> 'int' 70
|   |-DeclStmt 0x2a7b49fb058 <line:349:5, line:351:26>
|   | `-VarDecl 0x2a7b49fabf0 <line:349:5, line:351:25> line:349:23 used two70m40m38p6 'const limb':'const int' static cinit
|   |   `-BinaryOperator 0x2a7b49fb038 <line:350:9, line:351:25> 'int' '+'
|   |     |-BinaryOperator 0x2a7b49faf30 <line:350:9, col:68> 'int' '-'
|   |     | |-BinaryOperator 0x2a7b49fae28 <col:9, col:47> 'int' '-'
|   |     | | |-ParenExpr 0x2a7b49fad20 <col:9, col:26> 'limb':'int'
|   |     | | | `-BinaryOperator 0x2a7b49fad00 <col:10, col:24> 'limb':'int' '<<'
|   |     | | |   |-ParenExpr 0x2a7b49facb8 <col:10, col:19> 'limb':'int'
|   |     | | |   | `-CStyleCastExpr 0x2a7b49fac90 <col:11, col:18> 'limb':'int' <NoOp>
|   |     | | |   |   `-IntegerLiteral 0x2a7b49fac58 <col:18> 'int' 1
|   |     | | |   `-IntegerLiteral 0x2a7b49facd8 <col:24> 'int' 70
|   |     | | `-ParenExpr 0x2a7b49fae08 <col:30, col:47> 'limb':'int'
|   |     | |   `-BinaryOperator 0x2a7b49fade8 <col:31, col:45> 'limb':'int' '<<'
|   |     | |     |-ParenExpr 0x2a7b49fada0 <col:31, col:40> 'limb':'int'
|   |     | |     | `-CStyleCastExpr 0x2a7b49fad78 <col:32, col:39> 'limb':'int' <NoOp>
|   |     | |     |   `-IntegerLiteral 0x2a7b49fad40 <col:39> 'int' 1
|   |     | |     `-IntegerLiteral 0x2a7b49fadc0 <col:45> 'int' 40
|   |     | `-ParenExpr 0x2a7b49faf10 <col:51, col:68> 'limb':'int'
|   |     |   `-BinaryOperator 0x2a7b49faef0 <col:52, col:66> 'limb':'int' '<<'
|   |     |     |-ParenExpr 0x2a7b49faea8 <col:52, col:61> 'limb':'int'
|   |     |     | `-CStyleCastExpr 0x2a7b49fae80 <col:53, col:60> 'limb':'int' <NoOp>
|   |     |     |   `-IntegerLiteral 0x2a7b49fae48 <col:60> 'int' 1
|   |     |     `-IntegerLiteral 0x2a7b49faec8 <col:66> 'int' 38
|   |     `-ParenExpr 0x2a7b49fb018 <line:351:9, col:25> 'limb':'int'
|   |       `-BinaryOperator 0x2a7b49faff8 <col:10, col:24> 'limb':'int' '<<'
|   |         |-ParenExpr 0x2a7b49fafb0 <col:10, col:19> 'limb':'int'
|   |         | `-CStyleCastExpr 0x2a7b49faf88 <col:11, col:18> 'limb':'int' <NoOp>
|   |         |   `-IntegerLiteral 0x2a7b49faf50 <col:18> 'int' 1
|   |         `-IntegerLiteral 0x2a7b49fafd0 <col:24> 'int' 6
|   |-DeclStmt 0x2a7b49fb2d8 <line:352:5, col:71>
|   | `-VarDecl 0x2a7b49fb080 <col:5, col:70> col:23 used two70m6 'const limb':'const int' static cinit
|   |   `-BinaryOperator 0x2a7b49fb2b8 <col:33, col:70> 'int' '-'
|   |     |-ParenExpr 0x2a7b49fb1b0 <col:33, col:50> 'limb':'int'
|   |     | `-BinaryOperator 0x2a7b49fb190 <col:34, col:48> 'limb':'int' '<<'
|   |     |   |-ParenExpr 0x2a7b49fb148 <col:34, col:43> 'limb':'int'
|   |     |   | `-CStyleCastExpr 0x2a7b49fb120 <col:35, col:42> 'limb':'int' <NoOp>
|   |     |   |   `-IntegerLiteral 0x2a7b49fb0e8 <col:42> 'int' 1
|   |     |   `-IntegerLiteral 0x2a7b49fb168 <col:48> 'int' 70
|   |     `-ParenExpr 0x2a7b49fb298 <col:54, col:70> 'limb':'int'
|   |       `-BinaryOperator 0x2a7b49fb278 <col:55, col:69> 'limb':'int' '<<'
|   |         |-ParenExpr 0x2a7b49fb230 <col:55, col:64> 'limb':'int'
|   |         | `-CStyleCastExpr 0x2a7b49fb208 <col:56, col:63> 'limb':'int' <NoOp>
|   |         |   `-IntegerLiteral 0x2a7b49fb1d0 <col:63> 'int' 1
|   |         `-IntegerLiteral 0x2a7b49fb250 <col:69> 'int' 6
|   |-CompoundAssignOperator 0x2a7b49fb3c0 <line:355:5, col:15> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2a7b49fb350 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b49fb338 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b49fb2f0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b49fa1a8 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b49fb310 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x2a7b49fb3a8 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x2a7b49fb370 <col:15> 'const limb':'const int' lvalue Var 0x2a7b49fa470 'two70m8p6' 'const limb':'const int'
|   |-CompoundAssignOperator 0x2a7b49fb508 <line:356:5, col:15> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2a7b49fb498 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b49fb480 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b49fb438 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b49fa1a8 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b49fb458 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x2a7b49fb4f0 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x2a7b49fb4b8 <col:15> 'const limb':'const int' lvalue Var 0x2a7b49fa7f8 'two70p40' 'const limb':'const int'
|   |-CompoundAssignOperator 0x2a7b49fb650 <line:357:5, col:15> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2a7b49fb5e0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b49fb5c8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b49fb580 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b49fa1a8 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b49fb5a0 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x2a7b49fb638 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x2a7b49fb600 <col:15> 'const limb':'const int' lvalue Var 0x2a7b49faa78 'two70' 'const limb':'const int'
|   |-CompoundAssignOperator 0x2a7b49fb798 <line:358:5, col:15> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2a7b49fb728 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b49fb710 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b49fb6c8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b49fa1a8 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b49fb6e8 <col:9> 'int' 3
|   | `-ImplicitCastExpr 0x2a7b49fb780 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x2a7b49fb748 <col:15> 'const limb':'const int' lvalue Var 0x2a7b49fabf0 'two70m40m38p6' 'const limb':'const int'
|   |-CompoundAssignOperator 0x2a7b49fb8e0 <line:359:5, col:15> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2a7b49fb870 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b49fb858 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b49fb810 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b49fa1a8 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b49fb830 <col:9> 'int' 4
|   | `-ImplicitCastExpr 0x2a7b49fb8c8 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x2a7b49fb890 <col:15> 'const limb':'const int' lvalue Var 0x2a7b49fb080 'two70m6' 'const limb':'const int'
|   |-CompoundAssignOperator 0x2a7b49fba10 <line:360:5, col:15> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2a7b49fb9b8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b49fb9a0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b49fb958 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b49fa1a8 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b49fb978 <col:9> 'int' 5
|   | `-ImplicitCastExpr 0x2a7b49fb9f8 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x2a7b49fb9d8 <col:15> 'const limb':'const int' lvalue Var 0x2a7b49fb080 'two70m6' 'const limb':'const int'
|   |-CompoundAssignOperator 0x2a7b49fbaf8 <line:361:5, col:15> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2a7b49fbaa0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b49fba88 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b49fba40 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b49fa1a8 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b49fba60 <col:9> 'int' 6
|   | `-ImplicitCastExpr 0x2a7b49fbae0 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x2a7b49fbac0 <col:15> 'const limb':'const int' lvalue Var 0x2a7b49fb080 'two70m6' 'const limb':'const int'
|   |-CompoundAssignOperator 0x2a7b49fbbe0 <line:362:5, col:15> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2a7b49fbb88 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b49fbb70 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b49fbb28 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b49fa1a8 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b49fbb48 <col:9> 'int' 7
|   | `-ImplicitCastExpr 0x2a7b49fbbc8 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x2a7b49fbba8 <col:15> 'const limb':'const int' lvalue Var 0x2a7b49fb080 'two70m6' 'const limb':'const int'
|   |-CompoundAssignOperator 0x2a7b49fbd28 <line:365:5, col:19> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2a7b49fbc70 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b49fbc58 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b49fbc10 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b49fa1a8 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b49fbc30 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x2a7b49fbd10 <col:15, col:19> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x2a7b49fbcf0 <col:15, col:19> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x2a7b49fbcd8 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x2a7b49fbc90 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x2a7b49fa290 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x2a7b49fbcb0 <col:18> 'int' 0
|   |-CompoundAssignOperator 0x2a7b49fbe98 <line:366:5, col:19> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2a7b49fbdb8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b49fbda0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b49fbd58 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b49fa1a8 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b49fbd78 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x2a7b49fbe80 <col:15, col:19> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x2a7b49fbe60 <col:15, col:19> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x2a7b49fbe48 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x2a7b49fbdd8 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x2a7b49fa290 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x2a7b49fbe20 <col:18> 'int' 1
|   |-CompoundAssignOperator 0x2a7b49fbfe0 <line:367:5, col:19> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2a7b49fbf28 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b49fbf10 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b49fbec8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b49fa1a8 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b49fbee8 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x2a7b49fbfc8 <col:15, col:19> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x2a7b49fbfa8 <col:15, col:19> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x2a7b49fbf90 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x2a7b49fbf48 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x2a7b49fa290 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x2a7b49fbf68 <col:18> 'int' 2
|   |-CompoundAssignOperator 0x2a7b49fc128 <line:368:5, col:19> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2a7b49fc070 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b49fc058 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b49fc010 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b49fa1a8 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b49fc030 <col:9> 'int' 3
|   | `-ImplicitCastExpr 0x2a7b49fc110 <col:15, col:19> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x2a7b49fc0f0 <col:15, col:19> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x2a7b49fc0d8 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x2a7b49fc090 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x2a7b49fa290 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x2a7b49fc0b0 <col:18> 'int' 3
|   |-CompoundAssignOperator 0x2a7b49fc270 <line:369:5, col:19> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2a7b49fc1b8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b49fc1a0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b49fc158 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b49fa1a8 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b49fc178 <col:9> 'int' 4
|   | `-ImplicitCastExpr 0x2a7b49fc258 <col:15, col:19> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x2a7b49fc238 <col:15, col:19> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x2a7b49fc220 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x2a7b49fc1d8 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x2a7b49fa290 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x2a7b49fc1f8 <col:18> 'int' 4
|   |-CompoundAssignOperator 0x2a7b49fc3b8 <line:370:5, col:19> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2a7b49fc300 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b49fc2e8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b49fc2a0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b49fa1a8 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b49fc2c0 <col:9> 'int' 5
|   | `-ImplicitCastExpr 0x2a7b49fc3a0 <col:15, col:19> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x2a7b49fc380 <col:15, col:19> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x2a7b49fc368 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x2a7b49fc320 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x2a7b49fa290 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x2a7b49fc340 <col:18> 'int' 5
|   |-CompoundAssignOperator 0x2a7b49fc500 <line:371:5, col:19> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2a7b49fc448 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b49fc430 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b49fc3e8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b49fa1a8 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b49fc408 <col:9> 'int' 6
|   | `-ImplicitCastExpr 0x2a7b49fc4e8 <col:15, col:19> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x2a7b49fc4c8 <col:15, col:19> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x2a7b49fc4b0 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x2a7b49fc468 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x2a7b49fa290 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x2a7b49fc488 <col:18> 'int' 6
|   `-CompoundAssignOperator 0x2a7b49fc648 <line:372:5, col:19> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|     |-ArraySubscriptExpr 0x2a7b49fc590 <col:5, col:10> 'limb':'int' lvalue
|     | |-ImplicitCastExpr 0x2a7b49fc578 <col:5> 'limb *':'limb *' <LValueToRValue>
|     | | `-DeclRefExpr 0x2a7b49fc530 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b49fa1a8 'out' 'limb *':'limb *'
|     | `-IntegerLiteral 0x2a7b49fc550 <col:9> 'int' 7
|     `-ImplicitCastExpr 0x2a7b49fc630 <col:15, col:19> 'limb':'int' <LValueToRValue>
|       `-ArraySubscriptExpr 0x2a7b49fc610 <col:15, col:19> 'const limb':'const int' lvalue
|         |-ImplicitCastExpr 0x2a7b49fc5f8 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|         | `-DeclRefExpr 0x2a7b49fc5b0 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x2a7b49fa290 'in' 'const limb *':'const limb *'
|         `-IntegerLiteral 0x2a7b49fc5d0 <col:18> 'int' 7
|-VarDecl 0x2a7b49fc740 <line:381:1, col:73> col:20 used zero110 'const felem':'limb const[4]' static cinit
| `-InitListExpr 0x2a7b49fcf78 <col:30, col:73> 'const felem':'limb const[4]'
|   |-BinaryOperator 0x2a7b49fc8b8 <line:375:18, col:38> 'int' '-'
|   | |-ParenExpr 0x2a7b49fc870 <col:18, col:34> 'limb':'int'
|   | | `-BinaryOperator 0x2a7b49fc850 <col:19, col:32> 'limb':'int' '<<'
|   | |   |-ParenExpr 0x2a7b49fc808 <col:19, col:27> 'limb':'int'
|   | |   | `-CStyleCastExpr 0x2a7b49fc7e0 <col:20, col:26> 'limb':'int' <NoOp>
|   | |   |   `-IntegerLiteral 0x2a7b49fc7a8 <col:26> 'int' 1
|   | |   `-IntegerLiteral 0x2a7b49fc828 <col:32> 'int' 64
|   | `-IntegerLiteral 0x2a7b49fc890 <col:38> 'int' 1
|   |-BinaryOperator 0x2a7b49fcaf0 <line:376:22, col:63> 'int' '-'
|   | |-BinaryOperator 0x2a7b49fcaa8 <col:22, col:59> 'int' '+'
|   | | |-ParenExpr 0x2a7b49fc9a0 <col:22, col:39> 'limb':'int'
|   | | | `-BinaryOperator 0x2a7b49fc980 <col:23, col:36> 'limb':'int' '<<'
|   | | |   |-ParenExpr 0x2a7b49fc938 <col:23, col:31> 'limb':'int'
|   | | |   | `-CStyleCastExpr 0x2a7b49fc910 <col:24, col:30> 'limb':'int' <NoOp>
|   | | |   |   `-IntegerLiteral 0x2a7b49fc8d8 <col:30> 'int' 1
|   | | |   `-IntegerLiteral 0x2a7b49fc958 <col:36> 'int' 110
|   | | `-ParenExpr 0x2a7b49fca88 <col:43, col:59> 'limb':'int'
|   | |   `-BinaryOperator 0x2a7b49fca68 <col:44, col:57> 'limb':'int' '<<'
|   | |     |-ParenExpr 0x2a7b49fca20 <col:44, col:52> 'limb':'int'
|   | |     | `-CStyleCastExpr 0x2a7b49fc9f8 <col:45, col:51> 'limb':'int' <NoOp>
|   | |     |   `-IntegerLiteral 0x2a7b49fc9c0 <col:51> 'int' 1
|   | |     `-IntegerLiteral 0x2a7b49fca40 <col:57> 'int' 32
|   | `-IntegerLiteral 0x2a7b49fcac8 <col:63> 'int' 1
|   |-BinaryOperator 0x2a7b49fcce0 <line:377:19, col:55> 'int' '-'
|   | |-ParenExpr 0x2a7b49fcbd8 <col:19, col:35> 'limb':'int'
|   | | `-BinaryOperator 0x2a7b49fcbb8 <col:20, col:33> 'limb':'int' '<<'
|   | |   |-ParenExpr 0x2a7b49fcb70 <col:20, col:28> 'limb':'int'
|   | |   | `-CStyleCastExpr 0x2a7b49fcb48 <col:21, col:27> 'limb':'int' <NoOp>
|   | |   |   `-IntegerLiteral 0x2a7b49fcb10 <col:27> 'int' 1
|   | |   `-IntegerLiteral 0x2a7b49fcb90 <col:33> 'int' 64
|   | `-ParenExpr 0x2a7b49fccc0 <col:39, col:55> 'limb':'int'
|   |   `-BinaryOperator 0x2a7b49fcca0 <col:40, col:53> 'limb':'int' '<<'
|   |     |-ParenExpr 0x2a7b49fcc58 <col:40, col:48> 'limb':'int'
|   |     | `-CStyleCastExpr 0x2a7b49fcc30 <col:41, col:47> 'limb':'int' <NoOp>
|   |     |   `-IntegerLiteral 0x2a7b49fcbf8 <col:47> 'int' 1
|   |     `-IntegerLiteral 0x2a7b49fcc78 <col:53> 'int' 46
|   `-BinaryOperator 0x2a7b49fced0 <line:378:19, col:55> 'int' '-'
|     |-ParenExpr 0x2a7b49fcdc8 <col:19, col:35> 'limb':'int'
|     | `-BinaryOperator 0x2a7b49fcda8 <col:20, col:33> 'limb':'int' '<<'
|     |   |-ParenExpr 0x2a7b49fcd60 <col:20, col:28> 'limb':'int'
|     |   | `-CStyleCastExpr 0x2a7b49fcd38 <col:21, col:27> 'limb':'int' <NoOp>
|     |   |   `-IntegerLiteral 0x2a7b49fcd00 <col:27> 'int' 1
|     |   `-IntegerLiteral 0x2a7b49fcd80 <col:33> 'int' 64
|     `-ParenExpr 0x2a7b49fceb0 <col:39, col:55> 'limb':'int'
|       `-BinaryOperator 0x2a7b49fce90 <col:40, col:53> 'limb':'int' '<<'
|         |-ParenExpr 0x2a7b49fce48 <col:40, col:48> 'limb':'int'
|         | `-CStyleCastExpr 0x2a7b49fce20 <col:41, col:47> 'limb':'int' <NoOp>
|         |   `-IntegerLiteral 0x2a7b49fcde8 <col:47> 'int' 1
|         `-IntegerLiteral 0x2a7b49fce68 <col:53> 'int' 32
|-FunctionDecl 0x2a7b49fd1a8 <line:392:1, line:481:1> line:392:13 used felem_shrink 'void (u64 *, const limb *)' static
| |-ParmVarDecl 0x2a7b49fcfe8 <col:26, col:37> col:37 used out 'u64 *':'u64 *'
| |-ParmVarDecl 0x2a7b49fd060 <col:42, col:54> col:54 used in 'const limb *':'const limb *'
| `-CompoundStmt 0x2a7b4a00e70 <line:393:1, line:481:1>
|   |-DeclStmt 0x2a7b49fd2e8 <line:394:5, col:14>
|   | `-VarDecl 0x2a7b49fd280 <col:5, col:11> col:11 used tmp 'felem':'limb [4]'
|   |-DeclStmt 0x2a7b49fd488 <line:395:5, col:19>
|   | |-VarDecl 0x2a7b49fd310 <col:5, col:9> col:9 used a 'u64':'unsigned long long'
|   | |-VarDecl 0x2a7b49fd388 <col:5, col:12> col:12 used b 'u64':'unsigned long long'
|   | `-VarDecl 0x2a7b49fd400 <col:5, col:15> col:15 used mask 'u64':'unsigned long long'
|   |-DeclStmt 0x2a7b49fd5a8 <line:396:5, col:18>
|   | |-VarDecl 0x2a7b49fd4b0 <col:5, col:9> col:9 used high 'u64':'unsigned long long'
|   | `-VarDecl 0x2a7b49fd528 <col:5, col:15> col:15 used low 'u64':'unsigned long long'
|   |-DeclStmt 0x2a7b49fd660 <line:397:5, col:56>
|   | `-VarDecl 0x2a7b49fd5d0 <col:5, col:36> col:22 used kPrime3Test 'const u64':'const unsigned long long' static cinit
|   |   `-IntegerLiteral 0x2a7b49fd638 <col:36> 'unsigned long long' 9223372032559808513
|   |-BinaryOperator 0x2a7b49fda28 <line:400:5, col:54> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2a7b49fd6f0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b49fd6d8 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x2a7b49fd678 <col:5> 'felem':'limb [4]' lvalue Var 0x2a7b49fd280 'tmp' 'felem':'limb [4]'
|   | | `-IntegerLiteral 0x2a7b49fd6b0 <col:9> 'int' 3
|   | `-ImplicitCastExpr 0x2a7b49fda10 <col:14, col:54> 'limb':'int' <IntegralCast>
|   |   `-BinaryOperator 0x2a7b49fd9f0 <col:14, col:54> 'unsigned long long' '+'
|   |     |-ImplicitCastExpr 0x2a7b49fd9d8 <col:14, col:31> 'unsigned long long' <IntegralCast>
|   |     | `-BinaryOperator 0x2a7b49fd840 <col:14, col:31> 'int' '+'
|   |     |   |-ImplicitCastExpr 0x2a7b49fd810 <col:14, col:23> 'limb':'int' <LValueToRValue>
|   |     |   | `-ArraySubscriptExpr 0x2a7b49fd770 <col:14, col:23> 'const limb':'const int' lvalue
|   |     |   |   |-ImplicitCastExpr 0x2a7b49fd758 <col:14> 'const limb *' <ArrayToPointerDecay>
|   |     |   |   | `-DeclRefExpr 0x2a7b49fd710 <col:14> 'const felem':'limb const[4]' lvalue Var 0x2a7b49fc740 'zero110' 'const felem':'limb const[4]'
|   |     |   |   `-IntegerLiteral 0x2a7b49fd730 <col:22> 'int' 3
|   |     |   `-ImplicitCastExpr 0x2a7b49fd828 <col:27, col:31> 'limb':'int' <LValueToRValue>
|   |     |     `-ArraySubscriptExpr 0x2a7b49fd7f0 <col:27, col:31> 'const limb':'const int' lvalue
|   |     |       |-ImplicitCastExpr 0x2a7b49fd7d8 <col:27> 'const limb *':'const limb *' <LValueToRValue>
|   |     |       | `-DeclRefExpr 0x2a7b49fd790 <col:27> 'const limb *':'const limb *' lvalue ParmVar 0x2a7b49fd060 'in' 'const limb *':'const limb *'
|   |     |       `-IntegerLiteral 0x2a7b49fd7b0 <col:30> 'int' 3
|   |     `-ParenExpr 0x2a7b49fd9b8 <col:35, col:54> 'u64':'unsigned long long'
|   |       `-CStyleCastExpr 0x2a7b49fd990 <col:36, col:53> 'u64':'unsigned long long' <IntegralCast>
|   |         `-ParenExpr 0x2a7b49fd970 <col:41, col:53> 'limb':'int'
|   |           `-BinaryOperator 0x2a7b49fd920 <col:42, col:51> 'limb':'int' '>>'
|   |             |-ImplicitCastExpr 0x2a7b49fd908 <col:42, col:46> 'limb':'int' <LValueToRValue>
|   |             | `-ArraySubscriptExpr 0x2a7b49fd8c0 <col:42, col:46> 'const limb':'const int' lvalue
|   |             |   |-ImplicitCastExpr 0x2a7b49fd8a8 <col:42> 'const limb *':'const limb *' <LValueToRValue>
|   |             |   | `-DeclRefExpr 0x2a7b49fd860 <col:42> 'const limb *':'const limb *' lvalue ParmVar 0x2a7b49fd060 'in' 'const limb *':'const limb *'
|   |             |   `-IntegerLiteral 0x2a7b49fd880 <col:45> 'int' 2
|   |             `-IntegerLiteral 0x2a7b49fd8e0 <col:51> 'int' 64
|   |-BinaryOperator 0x2a7b49fdcc8 <line:403:5, col:36> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2a7b49fdaf0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b49fdad8 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x2a7b49fda90 <col:5> 'felem':'limb [4]' lvalue Var 0x2a7b49fd280 'tmp' 'felem':'limb [4]'
|   | | `-IntegerLiteral 0x2a7b49fdab0 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x2a7b49fdcb0 <col:14, col:36> 'limb':'int' <IntegralCast>
|   |   `-BinaryOperator 0x2a7b49fdc90 <col:14, col:36> 'unsigned long long' '+'
|   |     |-ImplicitCastExpr 0x2a7b49fdc78 <col:14, col:23> 'unsigned long long' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x2a7b49fdc60 <col:14, col:23> 'limb':'int' <LValueToRValue>
|   |     |   `-ArraySubscriptExpr 0x2a7b49fdb70 <col:14, col:23> 'const limb':'const int' lvalue
|   |     |     |-ImplicitCastExpr 0x2a7b49fdb58 <col:14> 'const limb *' <ArrayToPointerDecay>
|   |     |     | `-DeclRefExpr 0x2a7b49fdb10 <col:14> 'const felem':'limb const[4]' lvalue Var 0x2a7b49fc740 'zero110' 'const felem':'limb const[4]'
|   |     |     `-IntegerLiteral 0x2a7b49fdb30 <col:22> 'int' 2
|   |     `-CStyleCastExpr 0x2a7b49fdc38 <col:27, col:36> 'u64':'unsigned long long' <IntegralCast>
|   |       `-ImplicitCastExpr 0x2a7b49fdc20 <col:32, col:36> 'limb':'int' <LValueToRValue> part_of_explicit_cast
|   |         `-ArraySubscriptExpr 0x2a7b49fdbf0 <col:32, col:36> 'const limb':'const int' lvalue
|   |           |-ImplicitCastExpr 0x2a7b49fdbd8 <col:32> 'const limb *':'const limb *' <LValueToRValue>
|   |           | `-DeclRefExpr 0x2a7b49fdb90 <col:32> 'const limb *':'const limb *' lvalue ParmVar 0x2a7b49fd060 'in' 'const limb *':'const limb *'
|   |           `-IntegerLiteral 0x2a7b49fdbb0 <col:35> 'int' 2
|   |-BinaryOperator 0x2a7b49fdee0 <line:404:5, col:31> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2a7b49fdd48 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b49fdd30 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x2a7b49fdce8 <col:5> 'felem':'limb [4]' lvalue Var 0x2a7b49fd280 'tmp' 'felem':'limb [4]'
|   | | `-IntegerLiteral 0x2a7b49fdd08 <col:9> 'int' 0
|   | `-BinaryOperator 0x2a7b49fdec0 <col:14, col:31> 'int' '+'
|   |   |-ImplicitCastExpr 0x2a7b49fde90 <col:14, col:23> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x2a7b49fddc8 <col:14, col:23> 'const limb':'const int' lvalue
|   |   |   |-ImplicitCastExpr 0x2a7b49fddb0 <col:14> 'const limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x2a7b49fdd68 <col:14> 'const felem':'limb const[4]' lvalue Var 0x2a7b49fc740 'zero110' 'const felem':'limb const[4]'
|   |   |   `-IntegerLiteral 0x2a7b49fdd88 <col:22> 'int' 0
|   |   `-ImplicitCastExpr 0x2a7b49fdea8 <col:27, col:31> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x2a7b49fde70 <col:27, col:31> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x2a7b49fde58 <col:27> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x2a7b49fdde8 <col:27> 'const limb *':'const limb *' lvalue ParmVar 0x2a7b49fd060 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x2a7b49fde30 <col:30> 'int' 0
|   |-BinaryOperator 0x2a7b49fe0d0 <line:405:5, col:31> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2a7b49fdf60 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b49fdf48 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x2a7b49fdf00 <col:5> 'felem':'limb [4]' lvalue Var 0x2a7b49fd280 'tmp' 'felem':'limb [4]'
|   | | `-IntegerLiteral 0x2a7b49fdf20 <col:9> 'int' 1
|   | `-BinaryOperator 0x2a7b49fe0b0 <col:14, col:31> 'int' '+'
|   |   |-ImplicitCastExpr 0x2a7b49fe080 <col:14, col:23> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x2a7b49fdfe0 <col:14, col:23> 'const limb':'const int' lvalue
|   |   |   |-ImplicitCastExpr 0x2a7b49fdfc8 <col:14> 'const limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x2a7b49fdf80 <col:14> 'const felem':'limb const[4]' lvalue Var 0x2a7b49fc740 'zero110' 'const felem':'limb const[4]'
|   |   |   `-IntegerLiteral 0x2a7b49fdfa0 <col:22> 'int' 1
|   |   `-ImplicitCastExpr 0x2a7b49fe098 <col:27, col:31> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x2a7b49fe060 <col:27, col:31> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x2a7b49fe048 <col:27> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x2a7b49fe000 <col:27> 'const limb *':'const limb *' lvalue ParmVar 0x2a7b49fd060 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x2a7b49fe020 <col:30> 'int' 1
|   |-BinaryOperator 0x2a7b49fe220 <line:412:5, col:19> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x2a7b49fe0f0 <col:5> 'u64':'unsigned long long' lvalue Var 0x2a7b49fd310 'a' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x2a7b49fe208 <col:9, col:19> 'u64':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x2a7b49fe1e8 <col:9, col:19> 'limb':'int' '>>'
|   |     |-ImplicitCastExpr 0x2a7b49fe1d0 <col:9, col:14> 'limb':'int' <LValueToRValue>
|   |     | `-ArraySubscriptExpr 0x2a7b49fe188 <col:9, col:14> 'limb':'int' lvalue
|   |     |   |-ImplicitCastExpr 0x2a7b49fe170 <col:9> 'limb *' <ArrayToPointerDecay>
|   |     |   | `-DeclRefExpr 0x2a7b49fe128 <col:9> 'felem':'limb [4]' lvalue Var 0x2a7b49fd280 'tmp' 'felem':'limb [4]'
|   |     |   `-IntegerLiteral 0x2a7b49fe148 <col:13> 'int' 3
|   |     `-IntegerLiteral 0x2a7b49fe1a8 <col:19> 'int' 64
|   |-BinaryOperator 0x2a7b49fe3a8 <line:413:5, col:24> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2a7b49fe2a0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b49fe288 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x2a7b49fe240 <col:5> 'felem':'limb [4]' lvalue Var 0x2a7b49fd280 'tmp' 'felem':'limb [4]'
|   | | `-IntegerLiteral 0x2a7b49fe260 <col:9> 'int' 3
|   | `-ImplicitCastExpr 0x2a7b49fe390 <col:14, col:24> 'limb':'int' <IntegralCast>
|   |   `-CStyleCastExpr 0x2a7b49fe368 <col:14, col:24> 'u64':'unsigned long long' <IntegralCast>
|   |     `-ImplicitCastExpr 0x2a7b49fe350 <col:19, col:24> 'limb':'int' <LValueToRValue> part_of_explicit_cast
|   |       `-ArraySubscriptExpr 0x2a7b49fe320 <col:19, col:24> 'limb':'int' lvalue
|   |         |-ImplicitCastExpr 0x2a7b49fe308 <col:19> 'limb *' <ArrayToPointerDecay>
|   |         | `-DeclRefExpr 0x2a7b49fe2c0 <col:19> 'felem':'limb [4]' lvalue Var 0x2a7b49fd280 'tmp' 'felem':'limb [4]'
|   |         `-IntegerLiteral 0x2a7b49fe2e0 <col:23> 'int' 3
|   |-CompoundAssignOperator 0x2a7b49fe480 <line:414:5, col:15> 'limb':'int' '-=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x2a7b49fe428 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b49fe410 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x2a7b49fe3c8 <col:5> 'felem':'limb [4]' lvalue Var 0x2a7b49fd280 'tmp' 'felem':'limb [4]'
|   | | `-IntegerLiteral 0x2a7b49fe3e8 <col:9> 'int' 3
|   | `-ImplicitCastExpr 0x2a7b49fe468 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x2a7b49fe448 <col:15> 'u64':'unsigned long long' lvalue Var 0x2a7b49fd310 'a' 'u64':'unsigned long long'
|   |-CompoundAssignOperator 0x2a7b49fe608 <line:415:5, col:29> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2a7b49fe510 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b49fe4f8 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x2a7b49fe4b0 <col:5> 'felem':'limb [4]' lvalue Var 0x2a7b49fd280 'tmp' 'felem':'limb [4]'
|   | | `-IntegerLiteral 0x2a7b49fe4d0 <col:9> 'int' 3
|   | `-BinaryOperator 0x2a7b49fe5e8 <col:15, col:29> 'limb':'int' '<<'
|   |   |-ParenExpr 0x2a7b49fe5a0 <col:15, col:24> 'limb':'int'
|   |   | `-CStyleCastExpr 0x2a7b49fe578 <col:16, col:23> 'limb':'int' <IntegralCast>
|   |   |   `-ImplicitCastExpr 0x2a7b49fe560 <col:23> 'u64':'unsigned long long' <LValueToRValue> part_of_explicit_cast
|   |   |     `-DeclRefExpr 0x2a7b49fe530 <col:23> 'u64':'unsigned long long' lvalue Var 0x2a7b49fd310 'a' 'u64':'unsigned long long'
|   |   `-IntegerLiteral 0x2a7b49fe5c0 <col:29> 'int' 32
|   |-BinaryOperator 0x2a7b49fe6a8 <line:418:5, col:9> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x2a7b49fe638 <col:5> 'u64':'unsigned long long' lvalue Var 0x2a7b49fd388 'b' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x2a7b49fe690 <col:9> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x2a7b49fe670 <col:9> 'u64':'unsigned long long' lvalue Var 0x2a7b49fd310 'a' 'u64':'unsigned long long'
|   |-BinaryOperator 0x2a7b49fe7e0 <line:419:5, col:19> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x2a7b49fe6c8 <col:5> 'u64':'unsigned long long' lvalue Var 0x2a7b49fd310 'a' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x2a7b49fe7c8 <col:9, col:19> 'u64':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x2a7b49fe7a8 <col:9, col:19> 'limb':'int' '>>'
|   |     |-ImplicitCastExpr 0x2a7b49fe790 <col:9, col:14> 'limb':'int' <LValueToRValue>
|   |     | `-ArraySubscriptExpr 0x2a7b49fe748 <col:9, col:14> 'limb':'int' lvalue
|   |     |   |-ImplicitCastExpr 0x2a7b49fe730 <col:9> 'limb *' <ArrayToPointerDecay>
|   |     |   | `-DeclRefExpr 0x2a7b49fe6e8 <col:9> 'felem':'limb [4]' lvalue Var 0x2a7b49fd280 'tmp' 'felem':'limb [4]'
|   |     |   `-IntegerLiteral 0x2a7b49fe708 <col:13> 'int' 3
|   |     `-IntegerLiteral 0x2a7b49fe768 <col:19> 'int' 64
|   |-CompoundAssignOperator 0x2a7b49fe858 <line:420:5, col:10> 'u64':'unsigned long long' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-DeclRefExpr 0x2a7b49fe800 <col:5> 'u64':'unsigned long long' lvalue Var 0x2a7b49fd388 'b' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x2a7b49fe840 <col:10> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x2a7b49fe820 <col:10> 'u64':'unsigned long long' lvalue Var 0x2a7b49fd310 'a' 'u64':'unsigned long long'
|   |-BinaryOperator 0x2a7b49fe9f0 <line:421:5, col:24> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2a7b49fe8e8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b49fe8d0 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x2a7b49fe888 <col:5> 'felem':'limb [4]' lvalue Var 0x2a7b49fd280 'tmp' 'felem':'limb [4]'
|   | | `-IntegerLiteral 0x2a7b49fe8a8 <col:9> 'int' 3
|   | `-ImplicitCastExpr 0x2a7b49fe9d8 <col:14, col:24> 'limb':'int' <IntegralCast>
|   |   `-CStyleCastExpr 0x2a7b49fe9b0 <col:14, col:24> 'u64':'unsigned long long' <IntegralCast>
|   |     `-ImplicitCastExpr 0x2a7b49fe998 <col:19, col:24> 'limb':'int' <LValueToRValue> part_of_explicit_cast
|   |       `-ArraySubscriptExpr 0x2a7b49fe968 <col:19, col:24> 'limb':'int' lvalue
|   |         |-ImplicitCastExpr 0x2a7b49fe950 <col:19> 'limb *' <ArrayToPointerDecay>
|   |         | `-DeclRefExpr 0x2a7b49fe908 <col:19> 'felem':'limb [4]' lvalue Var 0x2a7b49fd280 'tmp' 'felem':'limb [4]'
|   |         `-IntegerLiteral 0x2a7b49fe928 <col:23> 'int' 3
|   |-CompoundAssignOperator 0x2a7b49feac8 <line:422:5, col:15> 'limb':'int' '-=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x2a7b49fea70 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b49fea58 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x2a7b49fea10 <col:5> 'felem':'limb [4]' lvalue Var 0x2a7b49fd280 'tmp' 'felem':'limb [4]'
|   | | `-IntegerLiteral 0x2a7b49fea30 <col:9> 'int' 3
|   | `-ImplicitCastExpr 0x2a7b49feab0 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x2a7b49fea90 <col:15> 'u64':'unsigned long long' lvalue Var 0x2a7b49fd310 'a' 'u64':'unsigned long long'
|   |-CompoundAssignOperator 0x2a7b49fec50 <line:423:5, col:29> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2a7b49feb58 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b49feb40 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x2a7b49feaf8 <col:5> 'felem':'limb [4]' lvalue Var 0x2a7b49fd280 'tmp' 'felem':'limb [4]'
|   | | `-IntegerLiteral 0x2a7b49feb18 <col:9> 'int' 3
|   | `-BinaryOperator 0x2a7b49fec30 <col:15, col:29> 'limb':'int' '<<'
|   |   |-ParenExpr 0x2a7b49febe8 <col:15, col:24> 'limb':'int'
|   |   | `-CStyleCastExpr 0x2a7b49febc0 <col:16, col:23> 'limb':'int' <IntegralCast>
|   |   |   `-ImplicitCastExpr 0x2a7b49feba8 <col:23> 'u64':'unsigned long long' <LValueToRValue> part_of_explicit_cast
|   |   |     `-DeclRefExpr 0x2a7b49feb78 <col:23> 'u64':'unsigned long long' lvalue Var 0x2a7b49fd310 'a' 'u64':'unsigned long long'
|   |   `-IntegerLiteral 0x2a7b49fec08 <col:29> 'int' 32
|   |-CompoundAssignOperator 0x2a7b49fed38 <line:430:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x2a7b49fece0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b49fecc8 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x2a7b49fec80 <col:5> 'felem':'limb [4]' lvalue Var 0x2a7b49fd280 'tmp' 'felem':'limb [4]'
|   | | `-IntegerLiteral 0x2a7b49feca0 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x2a7b49fed20 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x2a7b49fed00 <col:15> 'u64':'unsigned long long' lvalue Var 0x2a7b49fd388 'b' 'u64':'unsigned long long'
|   |-CompoundAssignOperator 0x2a7b49feee0 <line:431:5, col:32> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2a7b49fedc8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b49fedb0 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x2a7b49fed68 <col:5> 'felem':'limb [4]' lvalue Var 0x2a7b49fd280 'tmp' 'felem':'limb [4]'
|   | | `-IntegerLiteral 0x2a7b49fed88 <col:9> 'int' 1
|   | `-ParenExpr 0x2a7b49feec0 <col:15, col:32> 'limb':'int'
|   |   `-BinaryOperator 0x2a7b49feea0 <col:16, col:30> 'limb':'int' '<<'
|   |     |-ParenExpr 0x2a7b49fee58 <col:16, col:25> 'limb':'int'
|   |     | `-CStyleCastExpr 0x2a7b49fee30 <col:17, col:24> 'limb':'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x2a7b49fee18 <col:24> 'u64':'unsigned long long' <LValueToRValue> part_of_explicit_cast
|   |     |     `-DeclRefExpr 0x2a7b49fede8 <col:24> 'u64':'unsigned long long' lvalue Var 0x2a7b49fd388 'b' 'u64':'unsigned long long'
|   |     `-IntegerLiteral 0x2a7b49fee78 <col:30> 'int' 32
|   |-BinaryOperator 0x2a7b49ff0a0 <line:437:5, col:30> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x2a7b49fef10 <col:5> 'u64':'unsigned long long' lvalue Var 0x2a7b49fd4b0 'high' 'u64':'unsigned long long'
|   | `-CStyleCastExpr 0x2a7b49ff078 <col:12, col:30> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ParenExpr 0x2a7b49ff058 <col:17, col:30> 'limb':'int'
|   |     `-BinaryOperator 0x2a7b49ff008 <col:18, col:28> 'limb':'int' '>>'
|   |       |-ImplicitCastExpr 0x2a7b49feff0 <col:18, col:23> 'limb':'int' <LValueToRValue>
|   |       | `-ArraySubscriptExpr 0x2a7b49fefa8 <col:18, col:23> 'limb':'int' lvalue
|   |       |   |-ImplicitCastExpr 0x2a7b49fef90 <col:18> 'limb *' <ArrayToPointerDecay>
|   |       |   | `-DeclRefExpr 0x2a7b49fef48 <col:18> 'felem':'limb [4]' lvalue Var 0x2a7b49fd280 'tmp' 'felem':'limb [4]'
|   |       |   `-IntegerLiteral 0x2a7b49fef68 <col:22> 'int' 3
|   |       `-IntegerLiteral 0x2a7b49fefc8 <col:28> 'int' 64
|   |-BinaryOperator 0x2a7b49ff178 <line:439:5, col:16> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x2a7b49ff0c0 <col:5> 'u64':'unsigned long long' lvalue Var 0x2a7b49fd4b0 'high' 'u64':'unsigned long long'
|   | `-BinaryOperator 0x2a7b49ff158 <col:12, col:16> 'unsigned long long' '-'
|   |   |-ImplicitCastExpr 0x2a7b49ff140 <col:12> 'unsigned long long' <IntegralCast>
|   |   | `-IntegerLiteral 0x2a7b49ff0e0 <col:12> 'int' 0
|   |   `-ImplicitCastExpr 0x2a7b49ff128 <col:16> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-DeclRefExpr 0x2a7b49ff108 <col:16> 'u64':'unsigned long long' lvalue Var 0x2a7b49fd4b0 'high' 'u64':'unsigned long long'
|   |-BinaryOperator 0x2a7b49ff2a0 <line:445:5, col:21> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x2a7b49ff198 <col:5> 'u64':'unsigned long long' lvalue Var 0x2a7b49fd528 'low' 'u64':'unsigned long long'
|   | `-CStyleCastExpr 0x2a7b49ff278 <col:11, col:21> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x2a7b49ff260 <col:16, col:21> 'limb':'int' <LValueToRValue> part_of_explicit_cast
|   |     `-ArraySubscriptExpr 0x2a7b49ff230 <col:16, col:21> 'limb':'int' lvalue
|   |       |-ImplicitCastExpr 0x2a7b49ff218 <col:16> 'limb *' <ArrayToPointerDecay>
|   |       | `-DeclRefExpr 0x2a7b49ff1d0 <col:16> 'felem':'limb [4]' lvalue Var 0x2a7b49fd280 'tmp' 'felem':'limb [4]'
|   |       `-IntegerLiteral 0x2a7b49ff1f0 <col:20> 'int' 3
|   |-BinaryOperator 0x2a7b49ff3f8 <line:446:5, col:26> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x2a7b49ff2c0 <col:5> 'u64':'unsigned long long' lvalue Var 0x2a7b49fd400 'mask' 'u64':'unsigned long long'
|   | `-BinaryOperator 0x2a7b49ff3d8 <col:12, col:26> 'unsigned long long' '-'
|   |   |-ImplicitCastExpr 0x2a7b49ff3c0 <col:12> 'unsigned long long' <IntegralCast>
|   |   | `-IntegerLiteral 0x2a7b49ff2f8 <col:12> 'int' 0
|   |   `-ParenExpr 0x2a7b49ff3a0 <col:16, col:26> 'u64':'unsigned long long'
|   |     `-BinaryOperator 0x2a7b49ff380 <col:17, col:24> 'u64':'unsigned long long' '>>'
|   |       |-ImplicitCastExpr 0x2a7b49ff368 <col:17> 'u64':'unsigned long long' <LValueToRValue>
|   |       | `-DeclRefExpr 0x2a7b49ff320 <col:17> 'u64':'unsigned long long' lvalue Var 0x2a7b49fd528 'low' 'u64':'unsigned long long'
|   |       `-IntegerLiteral 0x2a7b49ff340 <col:24> 'int' 63
|   |-CompoundAssignOperator 0x2a7b49ff470 <line:452:5, col:12> 'u64':'unsigned long long' '&=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-DeclRefExpr 0x2a7b49ff418 <col:5> 'u64':'unsigned long long' lvalue Var 0x2a7b49fd528 'low' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x2a7b49ff458 <col:12> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x2a7b49ff438 <col:12> 'const u64':'const unsigned long long' lvalue Var 0x2a7b4ae6f68 'bottom63bits' 'const u64':'const unsigned long long'
|   |-CompoundAssignOperator 0x2a7b49ff558 <line:453:5, col:12> 'u64':'unsigned long long' '-=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-DeclRefExpr 0x2a7b49ff4e8 <col:5> 'u64':'unsigned long long' lvalue Var 0x2a7b49fd528 'low' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x2a7b49ff540 <col:12> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x2a7b49ff508 <col:12> 'const u64':'const unsigned long long' lvalue Var 0x2a7b49fd5d0 'kPrime3Test' 'const u64':'const unsigned long long'
|   |-BinaryOperator 0x2a7b49ff640 <line:455:5, col:12> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x2a7b49ff5d0 <col:5> 'u64':'unsigned long long' lvalue Var 0x2a7b49fd528 'low' 'u64':'unsigned long long'
|   | `-UnaryOperator 0x2a7b49ff628 <col:11, col:12> 'u64':'unsigned long long' prefix '~' cannot overflow
|   |   `-ImplicitCastExpr 0x2a7b49ff610 <col:12> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-DeclRefExpr 0x2a7b49ff5f0 <col:12> 'u64':'unsigned long long' lvalue Var 0x2a7b49fd528 'low' 'u64':'unsigned long long'
|   |-BinaryOperator 0x2a7b49ff780 <line:456:5, col:25> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x2a7b49ff660 <col:5> 'u64':'unsigned long long' lvalue Var 0x2a7b49fd528 'low' 'u64':'unsigned long long'
|   | `-BinaryOperator 0x2a7b49ff760 <col:11, col:25> 'unsigned long long' '-'
|   |   |-ImplicitCastExpr 0x2a7b49ff748 <col:11> 'unsigned long long' <IntegralCast>
|   |   | `-IntegerLiteral 0x2a7b49ff680 <col:11> 'int' 0
|   |   `-ParenExpr 0x2a7b49ff728 <col:15, col:25> 'u64':'unsigned long long'
|   |     `-BinaryOperator 0x2a7b49ff708 <col:16, col:23> 'u64':'unsigned long long' '>>'
|   |       |-ImplicitCastExpr 0x2a7b49ff6f0 <col:16> 'u64':'unsigned long long' <LValueToRValue>
|   |       | `-DeclRefExpr 0x2a7b49ff6a8 <col:16> 'u64':'unsigned long long' lvalue Var 0x2a7b49fd528 'low' 'u64':'unsigned long long'
|   |       `-IntegerLiteral 0x2a7b49ff6c8 <col:23> 'int' 63
|   |-BinaryOperator 0x2a7b49ff8c8 <line:462:5, col:27> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x2a7b49ff7a0 <col:5> 'u64':'unsigned long long' lvalue Var 0x2a7b49fd400 'mask' 'u64':'unsigned long long'
|   | `-BinaryOperator 0x2a7b49ff8a8 <col:12, col:27> 'unsigned long long' '|'
|   |   |-ParenExpr 0x2a7b49ff850 <col:12, col:23> 'unsigned long long'
|   |   | `-BinaryOperator 0x2a7b49ff830 <col:13, col:20> 'unsigned long long' '&'
|   |   |   |-ImplicitCastExpr 0x2a7b49ff800 <col:13> 'u64':'unsigned long long' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x2a7b49ff7c0 <col:13> 'u64':'unsigned long long' lvalue Var 0x2a7b49fd400 'mask' 'u64':'unsigned long long'
|   |   |   `-ImplicitCastExpr 0x2a7b49ff818 <col:20> 'u64':'unsigned long long' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x2a7b49ff7e0 <col:20> 'u64':'unsigned long long' lvalue Var 0x2a7b49fd528 'low' 'u64':'unsigned long long'
|   |   `-ImplicitCastExpr 0x2a7b49ff890 <col:27> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-DeclRefExpr 0x2a7b49ff870 <col:27> 'u64':'unsigned long long' lvalue Var 0x2a7b49fd4b0 'high' 'u64':'unsigned long long'
|   |-CompoundAssignOperator 0x2a7b49ffa58 <line:463:5, col:30> 'limb':'int' '-=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x2a7b49ff948 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b49ff930 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x2a7b49ff8e8 <col:5> 'felem':'limb [4]' lvalue Var 0x2a7b49fd280 'tmp' 'felem':'limb [4]'
|   | | `-IntegerLiteral 0x2a7b49ff908 <col:9> 'int' 0
|   | `-BinaryOperator 0x2a7b49ffa38 <col:15, col:30> 'unsigned long long' '&'
|   |   |-ImplicitCastExpr 0x2a7b49ffa08 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x2a7b49ff968 <col:15> 'u64':'unsigned long long' lvalue Var 0x2a7b49fd400 'mask' 'u64':'unsigned long long'
|   |   `-ImplicitCastExpr 0x2a7b49ffa20 <col:22, col:30> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x2a7b49ff9e8 <col:22, col:30> 'const u64':'const unsigned long long' lvalue
|   |       |-ImplicitCastExpr 0x2a7b49ff9d0 <col:22> 'const u64 *' <ArrayToPointerDecay>
|   |       | `-DeclRefExpr 0x2a7b49ff988 <col:22> 'const u64 [4]' lvalue Var 0x2a7b4ae6d38 'kPrime' 'const u64 [4]'
|   |       `-IntegerLiteral 0x2a7b49ff9a8 <col:29> 'int' 0
|   |-CompoundAssignOperator 0x2a7b49ffc40 <line:464:5, col:30> 'limb':'int' '-=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x2a7b49ffb30 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b49ffb18 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x2a7b49ffad0 <col:5> 'felem':'limb [4]' lvalue Var 0x2a7b49fd280 'tmp' 'felem':'limb [4]'
|   | | `-IntegerLiteral 0x2a7b49ffaf0 <col:9> 'int' 1
|   | `-BinaryOperator 0x2a7b49ffc20 <col:15, col:30> 'unsigned long long' '&'
|   |   |-ImplicitCastExpr 0x2a7b49ffbf0 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x2a7b49ffb50 <col:15> 'u64':'unsigned long long' lvalue Var 0x2a7b49fd400 'mask' 'u64':'unsigned long long'
|   |   `-ImplicitCastExpr 0x2a7b49ffc08 <col:22, col:30> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x2a7b49ffbd0 <col:22, col:30> 'const u64':'const unsigned long long' lvalue
|   |       |-ImplicitCastExpr 0x2a7b49ffbb8 <col:22> 'const u64 *' <ArrayToPointerDecay>
|   |       | `-DeclRefExpr 0x2a7b49ffb70 <col:22> 'const u64 [4]' lvalue Var 0x2a7b4ae6d38 'kPrime' 'const u64 [4]'
|   |       `-IntegerLiteral 0x2a7b49ffb90 <col:29> 'int' 1
|   |-CompoundAssignOperator 0x2a7b49ffde0 <line:466:5, col:30> 'limb':'int' '-=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x2a7b49ffcd0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b49ffcb8 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x2a7b49ffc70 <col:5> 'felem':'limb [4]' lvalue Var 0x2a7b49fd280 'tmp' 'felem':'limb [4]'
|   | | `-IntegerLiteral 0x2a7b49ffc90 <col:9> 'int' 3
|   | `-BinaryOperator 0x2a7b49ffdc0 <col:15, col:30> 'unsigned long long' '&'
|   |   |-ImplicitCastExpr 0x2a7b49ffd90 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x2a7b49ffcf0 <col:15> 'u64':'unsigned long long' lvalue Var 0x2a7b49fd400 'mask' 'u64':'unsigned long long'
|   |   `-ImplicitCastExpr 0x2a7b49ffda8 <col:22, col:30> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x2a7b49ffd70 <col:22, col:30> 'const u64':'const unsigned long long' lvalue
|   |       |-ImplicitCastExpr 0x2a7b49ffd58 <col:22> 'const u64 *' <ArrayToPointerDecay>
|   |       | `-DeclRefExpr 0x2a7b49ffd10 <col:22> 'const u64 [4]' lvalue Var 0x2a7b4ae6d38 'kPrime' 'const u64 [4]'
|   |       `-IntegerLiteral 0x2a7b49ffd30 <col:29> 'int' 3
|   |-CompoundAssignOperator 0x2a7b4a00018 <line:469:5, col:35> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x2a7b49ffe80 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b49ffe68 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x2a7b49ffe10 <col:5> 'felem':'limb [4]' lvalue Var 0x2a7b49fd280 'tmp' 'felem':'limb [4]'
|   | | `-IntegerLiteral 0x2a7b49ffe40 <col:9> 'int' 1
|   | `-ParenExpr 0x2a7b49ffff8 <col:15, col:35> 'u64':'unsigned long long'
|   |   `-CStyleCastExpr 0x2a7b49fffd0 <col:16, col:34> 'u64':'unsigned long long' <IntegralCast>
|   |     `-ParenExpr 0x2a7b49fffb0 <col:21, col:34> 'limb':'int'
|   |       `-BinaryOperator 0x2a7b49fff60 <col:22, col:32> 'limb':'int' '>>'
|   |         |-ImplicitCastExpr 0x2a7b49fff48 <col:22, col:27> 'limb':'int' <LValueToRValue>
|   |         | `-ArraySubscriptExpr 0x2a7b49fff00 <col:22, col:27> 'limb':'int' lvalue
|   |         |   |-ImplicitCastExpr 0x2a7b49ffee8 <col:22> 'limb *' <ArrayToPointerDecay>
|   |         |   | `-DeclRefExpr 0x2a7b49ffea0 <col:22> 'felem':'limb [4]' lvalue Var 0x2a7b49fd280 'tmp' 'felem':'limb [4]'
|   |         |   `-IntegerLiteral 0x2a7b49ffec0 <col:26> 'int' 0
|   |         `-IntegerLiteral 0x2a7b49fff20 <col:32> 'int' 64
|   |-BinaryOperator 0x2a7b4a001b0 <line:470:5, col:24> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2a7b4a000a8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b4a00090 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x2a7b4a00048 <col:5> 'felem':'limb [4]' lvalue Var 0x2a7b49fd280 'tmp' 'felem':'limb [4]'
|   | | `-IntegerLiteral 0x2a7b4a00068 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x2a7b4a00198 <col:14, col:24> 'limb':'int' <IntegralCast>
|   |   `-CStyleCastExpr 0x2a7b4a00170 <col:14, col:24> 'u64':'unsigned long long' <IntegralCast>
|   |     `-ImplicitCastExpr 0x2a7b4a00158 <col:19, col:24> 'limb':'int' <LValueToRValue> part_of_explicit_cast
|   |       `-ArraySubscriptExpr 0x2a7b4a00128 <col:19, col:24> 'limb':'int' lvalue
|   |         |-ImplicitCastExpr 0x2a7b4a00110 <col:19> 'limb *' <ArrayToPointerDecay>
|   |         | `-DeclRefExpr 0x2a7b4a000c8 <col:19> 'felem':'limb [4]' lvalue Var 0x2a7b49fd280 'tmp' 'felem':'limb [4]'
|   |         `-IntegerLiteral 0x2a7b4a000e8 <col:23> 'int' 0
|   |-CompoundAssignOperator 0x2a7b4a003c8 <line:471:5, col:35> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x2a7b4a00230 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b4a00218 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x2a7b4a001d0 <col:5> 'felem':'limb [4]' lvalue Var 0x2a7b49fd280 'tmp' 'felem':'limb [4]'
|   | | `-IntegerLiteral 0x2a7b4a001f0 <col:9> 'int' 2
|   | `-ParenExpr 0x2a7b4a003a8 <col:15, col:35> 'u64':'unsigned long long'
|   |   `-CStyleCastExpr 0x2a7b4a00380 <col:16, col:34> 'u64':'unsigned long long' <IntegralCast>
|   |     `-ParenExpr 0x2a7b4a00360 <col:21, col:34> 'limb':'int'
|   |       `-BinaryOperator 0x2a7b4a00310 <col:22, col:32> 'limb':'int' '>>'
|   |         |-ImplicitCastExpr 0x2a7b4a002f8 <col:22, col:27> 'limb':'int' <LValueToRValue>
|   |         | `-ArraySubscriptExpr 0x2a7b4a002b0 <col:22, col:27> 'limb':'int' lvalue
|   |         |   |-ImplicitCastExpr 0x2a7b4a00298 <col:22> 'limb *' <ArrayToPointerDecay>
|   |         |   | `-DeclRefExpr 0x2a7b4a00250 <col:22> 'felem':'limb [4]' lvalue Var 0x2a7b49fd280 'tmp' 'felem':'limb [4]'
|   |         |   `-IntegerLiteral 0x2a7b4a00270 <col:26> 'int' 1
|   |         `-IntegerLiteral 0x2a7b4a002d0 <col:32> 'int' 64
|   |-BinaryOperator 0x2a7b4a00560 <line:472:5, col:24> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2a7b4a00458 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b4a00440 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x2a7b4a003f8 <col:5> 'felem':'limb [4]' lvalue Var 0x2a7b49fd280 'tmp' 'felem':'limb [4]'
|   | | `-IntegerLiteral 0x2a7b4a00418 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x2a7b4a00548 <col:14, col:24> 'limb':'int' <IntegralCast>
|   |   `-CStyleCastExpr 0x2a7b4a00520 <col:14, col:24> 'u64':'unsigned long long' <IntegralCast>
|   |     `-ImplicitCastExpr 0x2a7b4a00508 <col:19, col:24> 'limb':'int' <LValueToRValue> part_of_explicit_cast
|   |       `-ArraySubscriptExpr 0x2a7b4a004d8 <col:19, col:24> 'limb':'int' lvalue
|   |         |-ImplicitCastExpr 0x2a7b4a004c0 <col:19> 'limb *' <ArrayToPointerDecay>
|   |         | `-DeclRefExpr 0x2a7b4a00478 <col:19> 'felem':'limb [4]' lvalue Var 0x2a7b49fd280 'tmp' 'felem':'limb [4]'
|   |         `-IntegerLiteral 0x2a7b4a00498 <col:23> 'int' 1
|   |-CompoundAssignOperator 0x2a7b4a00778 <line:473:5, col:35> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x2a7b4a005e0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b4a005c8 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x2a7b4a00580 <col:5> 'felem':'limb [4]' lvalue Var 0x2a7b49fd280 'tmp' 'felem':'limb [4]'
|   | | `-IntegerLiteral 0x2a7b4a005a0 <col:9> 'int' 3
|   | `-ParenExpr 0x2a7b4a00758 <col:15, col:35> 'u64':'unsigned long long'
|   |   `-CStyleCastExpr 0x2a7b4a00730 <col:16, col:34> 'u64':'unsigned long long' <IntegralCast>
|   |     `-ParenExpr 0x2a7b4a00710 <col:21, col:34> 'limb':'int'
|   |       `-BinaryOperator 0x2a7b4a006c0 <col:22, col:32> 'limb':'int' '>>'
|   |         |-ImplicitCastExpr 0x2a7b4a006a8 <col:22, col:27> 'limb':'int' <LValueToRValue>
|   |         | `-ArraySubscriptExpr 0x2a7b4a00660 <col:22, col:27> 'limb':'int' lvalue
|   |         |   |-ImplicitCastExpr 0x2a7b4a00648 <col:22> 'limb *' <ArrayToPointerDecay>
|   |         |   | `-DeclRefExpr 0x2a7b4a00600 <col:22> 'felem':'limb [4]' lvalue Var 0x2a7b49fd280 'tmp' 'felem':'limb [4]'
|   |         |   `-IntegerLiteral 0x2a7b4a00620 <col:26> 'int' 2
|   |         `-IntegerLiteral 0x2a7b4a00680 <col:32> 'int' 64
|   |-BinaryOperator 0x2a7b4a00910 <line:474:5, col:24> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2a7b4a00808 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b4a007f0 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x2a7b4a007a8 <col:5> 'felem':'limb [4]' lvalue Var 0x2a7b49fd280 'tmp' 'felem':'limb [4]'
|   | | `-IntegerLiteral 0x2a7b4a007c8 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x2a7b4a008f8 <col:14, col:24> 'limb':'int' <IntegralCast>
|   |   `-CStyleCastExpr 0x2a7b4a008d0 <col:14, col:24> 'u64':'unsigned long long' <IntegralCast>
|   |     `-ImplicitCastExpr 0x2a7b4a008b8 <col:19, col:24> 'limb':'int' <LValueToRValue> part_of_explicit_cast
|   |       `-ArraySubscriptExpr 0x2a7b4a00888 <col:19, col:24> 'limb':'int' lvalue
|   |         |-ImplicitCastExpr 0x2a7b4a00870 <col:19> 'limb *' <ArrayToPointerDecay>
|   |         | `-DeclRefExpr 0x2a7b4a00828 <col:19> 'felem':'limb [4]' lvalue Var 0x2a7b49fd280 'tmp' 'felem':'limb [4]'
|   |         `-IntegerLiteral 0x2a7b4a00848 <col:23> 'int' 2
|   |-BinaryOperator 0x2a7b4a00a60 <line:477:5, col:19> 'u64':'unsigned long long' '='
|   | |-ArraySubscriptExpr 0x2a7b4a00990 <col:5, col:10> 'u64':'unsigned long long' lvalue
|   | | |-ImplicitCastExpr 0x2a7b4a00978 <col:5> 'u64 *':'u64 *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b4a00930 <col:5> 'u64 *':'u64 *' lvalue ParmVar 0x2a7b49fcfe8 'out' 'u64 *':'u64 *'
|   | | `-IntegerLiteral 0x2a7b4a00950 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x2a7b4a00a48 <col:14, col:19> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x2a7b4a00a30 <col:14, col:19> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x2a7b4a00a10 <col:14, col:19> 'limb':'int' lvalue
|   |       |-ImplicitCastExpr 0x2a7b4a009f8 <col:14> 'limb *' <ArrayToPointerDecay>
|   |       | `-DeclRefExpr 0x2a7b4a009b0 <col:14> 'felem':'limb [4]' lvalue Var 0x2a7b49fd280 'tmp' 'felem':'limb [4]'
|   |       `-IntegerLiteral 0x2a7b4a009d0 <col:18> 'int' 0
|   |-BinaryOperator 0x2a7b4a00bb0 <line:478:5, col:19> 'u64':'unsigned long long' '='
|   | |-ArraySubscriptExpr 0x2a7b4a00ae0 <col:5, col:10> 'u64':'unsigned long long' lvalue
|   | | |-ImplicitCastExpr 0x2a7b4a00ac8 <col:5> 'u64 *':'u64 *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b4a00a80 <col:5> 'u64 *':'u64 *' lvalue ParmVar 0x2a7b49fcfe8 'out' 'u64 *':'u64 *'
|   | | `-IntegerLiteral 0x2a7b4a00aa0 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x2a7b4a00b98 <col:14, col:19> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x2a7b4a00b80 <col:14, col:19> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x2a7b4a00b60 <col:14, col:19> 'limb':'int' lvalue
|   |       |-ImplicitCastExpr 0x2a7b4a00b48 <col:14> 'limb *' <ArrayToPointerDecay>
|   |       | `-DeclRefExpr 0x2a7b4a00b00 <col:14> 'felem':'limb [4]' lvalue Var 0x2a7b49fd280 'tmp' 'felem':'limb [4]'
|   |       `-IntegerLiteral 0x2a7b4a00b20 <col:18> 'int' 1
|   |-BinaryOperator 0x2a7b4a00d00 <line:479:5, col:19> 'u64':'unsigned long long' '='
|   | |-ArraySubscriptExpr 0x2a7b4a00c30 <col:5, col:10> 'u64':'unsigned long long' lvalue
|   | | |-ImplicitCastExpr 0x2a7b4a00c18 <col:5> 'u64 *':'u64 *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b4a00bd0 <col:5> 'u64 *':'u64 *' lvalue ParmVar 0x2a7b49fcfe8 'out' 'u64 *':'u64 *'
|   | | `-IntegerLiteral 0x2a7b4a00bf0 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x2a7b4a00ce8 <col:14, col:19> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x2a7b4a00cd0 <col:14, col:19> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x2a7b4a00cb0 <col:14, col:19> 'limb':'int' lvalue
|   |       |-ImplicitCastExpr 0x2a7b4a00c98 <col:14> 'limb *' <ArrayToPointerDecay>
|   |       | `-DeclRefExpr 0x2a7b4a00c50 <col:14> 'felem':'limb [4]' lvalue Var 0x2a7b49fd280 'tmp' 'felem':'limb [4]'
|   |       `-IntegerLiteral 0x2a7b4a00c70 <col:18> 'int' 2
|   `-BinaryOperator 0x2a7b4a00e50 <line:480:5, col:19> 'u64':'unsigned long long' '='
|     |-ArraySubscriptExpr 0x2a7b4a00d80 <col:5, col:10> 'u64':'unsigned long long' lvalue
|     | |-ImplicitCastExpr 0x2a7b4a00d68 <col:5> 'u64 *':'u64 *' <LValueToRValue>
|     | | `-DeclRefExpr 0x2a7b4a00d20 <col:5> 'u64 *':'u64 *' lvalue ParmVar 0x2a7b49fcfe8 'out' 'u64 *':'u64 *'
|     | `-IntegerLiteral 0x2a7b4a00d40 <col:9> 'int' 3
|     `-ImplicitCastExpr 0x2a7b4a00e38 <col:14, col:19> 'u64':'unsigned long long' <IntegralCast>
|       `-ImplicitCastExpr 0x2a7b4a00e20 <col:14, col:19> 'limb':'int' <LValueToRValue>
|         `-ArraySubscriptExpr 0x2a7b4a00e00 <col:14, col:19> 'limb':'int' lvalue
|           |-ImplicitCastExpr 0x2a7b4a00de8 <col:14> 'limb *' <ArrayToPointerDecay>
|           | `-DeclRefExpr 0x2a7b4a00da0 <col:14> 'felem':'limb [4]' lvalue Var 0x2a7b49fd280 'tmp' 'felem':'limb [4]'
|           `-IntegerLiteral 0x2a7b4a00dc0 <col:18> 'int' 3
|-FunctionDecl 0x2a7b4a01120 <line:484:1, line:490:1> line:484:13 used smallfelem_expand 'void (limb *, const u64 *)' static
| |-ParmVarDecl 0x2a7b4a00fe0 <col:31, col:37> col:37 used out 'limb *':'limb *'
| |-ParmVarDecl 0x2a7b4a01058 <col:42, col:59> col:59 used in 'const u64 *':'const u64 *'
| `-CompoundStmt 0x2a7b4a01728 <line:485:1, line:490:1>
|   |-BinaryOperator 0x2a7b4a01318 <line:486:5, col:18> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2a7b4a01248 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b4a01230 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b4a011e8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b4a00fe0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b4a01208 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x2a7b4a01300 <col:14, col:18> 'limb':'int' <IntegralCast>
|   |   `-ImplicitCastExpr 0x2a7b4a012e8 <col:14, col:18> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x2a7b4a012c8 <col:14, col:18> 'const u64':'const unsigned long long' lvalue
|   |       |-ImplicitCastExpr 0x2a7b4a012b0 <col:14> 'const u64 *':'const u64 *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x2a7b4a01268 <col:14> 'const u64 *':'const u64 *' lvalue ParmVar 0x2a7b4a01058 'in' 'const u64 *':'const u64 *'
|   |       `-IntegerLiteral 0x2a7b4a01288 <col:17> 'int' 0
|   |-BinaryOperator 0x2a7b4a01468 <line:487:5, col:18> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2a7b4a01398 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b4a01380 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b4a01338 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b4a00fe0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b4a01358 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x2a7b4a01450 <col:14, col:18> 'limb':'int' <IntegralCast>
|   |   `-ImplicitCastExpr 0x2a7b4a01438 <col:14, col:18> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x2a7b4a01418 <col:14, col:18> 'const u64':'const unsigned long long' lvalue
|   |       |-ImplicitCastExpr 0x2a7b4a01400 <col:14> 'const u64 *':'const u64 *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x2a7b4a013b8 <col:14> 'const u64 *':'const u64 *' lvalue ParmVar 0x2a7b4a01058 'in' 'const u64 *':'const u64 *'
|   |       `-IntegerLiteral 0x2a7b4a013d8 <col:17> 'int' 1
|   |-BinaryOperator 0x2a7b4a015b8 <line:488:5, col:18> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2a7b4a014e8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b4a014d0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b4a01488 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b4a00fe0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b4a014a8 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x2a7b4a015a0 <col:14, col:18> 'limb':'int' <IntegralCast>
|   |   `-ImplicitCastExpr 0x2a7b4a01588 <col:14, col:18> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x2a7b4a01568 <col:14, col:18> 'const u64':'const unsigned long long' lvalue
|   |       |-ImplicitCastExpr 0x2a7b4a01550 <col:14> 'const u64 *':'const u64 *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x2a7b4a01508 <col:14> 'const u64 *':'const u64 *' lvalue ParmVar 0x2a7b4a01058 'in' 'const u64 *':'const u64 *'
|   |       `-IntegerLiteral 0x2a7b4a01528 <col:17> 'int' 2
|   `-BinaryOperator 0x2a7b4a01708 <line:489:5, col:18> 'limb':'int' '='
|     |-ArraySubscriptExpr 0x2a7b4a01638 <col:5, col:10> 'limb':'int' lvalue
|     | |-ImplicitCastExpr 0x2a7b4a01620 <col:5> 'limb *':'limb *' <LValueToRValue>
|     | | `-DeclRefExpr 0x2a7b4a015d8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b4a00fe0 'out' 'limb *':'limb *'
|     | `-IntegerLiteral 0x2a7b4a015f8 <col:9> 'int' 3
|     `-ImplicitCastExpr 0x2a7b4a016f0 <col:14, col:18> 'limb':'int' <IntegralCast>
|       `-ImplicitCastExpr 0x2a7b4a016d8 <col:14, col:18> 'u64':'unsigned long long' <LValueToRValue>
|         `-ArraySubscriptExpr 0x2a7b4a016b8 <col:14, col:18> 'const u64':'const unsigned long long' lvalue
|           |-ImplicitCastExpr 0x2a7b4a016a0 <col:14> 'const u64 *':'const u64 *' <LValueToRValue>
|           | `-DeclRefExpr 0x2a7b4a01658 <col:14> 'const u64 *':'const u64 *' lvalue ParmVar 0x2a7b4a01058 'in' 'const u64 *':'const u64 *'
|           `-IntegerLiteral 0x2a7b4a01678 <col:17> 'int' 3
|-FunctionDecl 0x2a7b4a018e8 <line:499:1, line:569:1> line:499:13 used smallfelem_square 'void (limb *, const u64 *)' static
| |-ParmVarDecl 0x2a7b4a01768 <col:31, col:41> col:41 used out 'limb *':'limb *'
| |-ParmVarDecl 0x2a7b4a017e0 <col:46, col:63> col:63 used small 'const u64 *':'const u64 *'
| `-CompoundStmt 0x2a7b4a047d0 <line:500:1, line:569:1>
|   |-DeclStmt 0x2a7b4a01a28 <line:501:5, col:11>
|   | `-VarDecl 0x2a7b4a019c0 <col:5, col:10> col:10 used a 'limb':'int'
|   |-DeclStmt 0x2a7b4a01b48 <line:502:5, col:18>
|   | |-VarDecl 0x2a7b4a01a50 <col:5, col:9> col:9 used high 'u64':'unsigned long long'
|   | `-VarDecl 0x2a7b4a01ac8 <col:5, col:15> col:15 used low 'u64':'unsigned long long'
|   |-BinaryOperator 0x2a7b4a01ca0 <line:505:5, col:11> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x2a7b4a01c18 <col:5> 'u64':'unsigned long long' lvalue Var 0x2a7b4a01ac8 'low' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x2a7b4a01c88 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x2a7b4a01c70 <col:11> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x2a7b4a01c50 <col:11> 'limb':'int' lvalue Var 0x2a7b4a019c0 'a' 'limb':'int'
|   |-BinaryOperator 0x2a7b4a01d90 <line:506:5, col:17> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x2a7b4a01cc0 <col:5> 'u64':'unsigned long long' lvalue Var 0x2a7b4a01a50 'high' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x2a7b4a01d78 <col:12, col:17> 'u64':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x2a7b4a01d58 <col:12, col:17> 'limb':'int' '>>'
|   |     |-ImplicitCastExpr 0x2a7b4a01d40 <col:12> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x2a7b4a01cf8 <col:12> 'limb':'int' lvalue Var 0x2a7b4a019c0 'a' 'limb':'int'
|   |     `-IntegerLiteral 0x2a7b4a01d18 <col:17> 'int' 64
|   |-BinaryOperator 0x2a7b4a01ea0 <line:507:5, col:14> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2a7b4a01e10 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b4a01df8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b4a01db0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b4a01768 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b4a01dd0 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x2a7b4a01e88 <col:14> 'limb':'int' <IntegralCast>
|   |   `-ImplicitCastExpr 0x2a7b4a01e70 <col:14> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-DeclRefExpr 0x2a7b4a01e50 <col:14> 'u64':'unsigned long long' lvalue Var 0x2a7b4a01ac8 'low' 'u64':'unsigned long long'
|   |-BinaryOperator 0x2a7b4a01f90 <line:508:5, col:14> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2a7b4a01f20 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b4a01f08 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b4a01ec0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b4a01768 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b4a01ee0 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x2a7b4a01f78 <col:14> 'limb':'int' <IntegralCast>
|   |   `-ImplicitCastExpr 0x2a7b4a01f60 <col:14> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-DeclRefExpr 0x2a7b4a01f40 <col:14> 'u64':'unsigned long long' lvalue Var 0x2a7b4a01a50 'high' 'u64':'unsigned long long'
|   |-BinaryOperator 0x2a7b4a020c0 <line:511:5, col:11> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x2a7b4a02050 <col:5> 'u64':'unsigned long long' lvalue Var 0x2a7b4a01ac8 'low' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x2a7b4a020a8 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x2a7b4a02090 <col:11> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x2a7b4a02070 <col:11> 'limb':'int' lvalue Var 0x2a7b4a019c0 'a' 'limb':'int'
|   |-BinaryOperator 0x2a7b4a02198 <line:512:5, col:17> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x2a7b4a020e0 <col:5> 'u64':'unsigned long long' lvalue Var 0x2a7b4a01a50 'high' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x2a7b4a02180 <col:12, col:17> 'u64':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x2a7b4a02160 <col:12, col:17> 'limb':'int' '>>'
|   |     |-ImplicitCastExpr 0x2a7b4a02148 <col:12> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x2a7b4a02100 <col:12> 'limb':'int' lvalue Var 0x2a7b4a019c0 'a' 'limb':'int'
|   |     `-IntegerLiteral 0x2a7b4a02120 <col:17> 'int' 64
|   |-CompoundAssignOperator 0x2a7b4a02270 <line:513:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x2a7b4a02218 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b4a02200 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b4a021b8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b4a01768 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b4a021d8 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x2a7b4a02258 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x2a7b4a02238 <col:15> 'u64':'unsigned long long' lvalue Var 0x2a7b4a01ac8 'low' 'u64':'unsigned long long'
|   |-CompoundAssignOperator 0x2a7b4a02358 <line:514:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x2a7b4a02300 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b4a022e8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b4a022a0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b4a01768 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b4a022c0 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x2a7b4a02340 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x2a7b4a02320 <col:15> 'u64':'unsigned long long' lvalue Var 0x2a7b4a01ac8 'low' 'u64':'unsigned long long'
|   |-BinaryOperator 0x2a7b4a02458 <line:515:5, col:14> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2a7b4a023e8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b4a023d0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b4a02388 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b4a01768 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b4a023a8 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x2a7b4a02440 <col:14> 'limb':'int' <IntegralCast>
|   |   `-ImplicitCastExpr 0x2a7b4a02428 <col:14> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-DeclRefExpr 0x2a7b4a02408 <col:14> 'u64':'unsigned long long' lvalue Var 0x2a7b4a01a50 'high' 'u64':'unsigned long long'
|   |-BinaryOperator 0x2a7b4a02588 <line:518:5, col:11> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x2a7b4a02518 <col:5> 'u64':'unsigned long long' lvalue Var 0x2a7b4a01ac8 'low' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x2a7b4a02570 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x2a7b4a02558 <col:11> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x2a7b4a02538 <col:11> 'limb':'int' lvalue Var 0x2a7b4a019c0 'a' 'limb':'int'
|   |-BinaryOperator 0x2a7b4a02660 <line:519:5, col:17> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x2a7b4a025a8 <col:5> 'u64':'unsigned long long' lvalue Var 0x2a7b4a01a50 'high' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x2a7b4a02648 <col:12, col:17> 'u64':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x2a7b4a02628 <col:12, col:17> 'limb':'int' '>>'
|   |     |-ImplicitCastExpr 0x2a7b4a02610 <col:12> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x2a7b4a025c8 <col:12> 'limb':'int' lvalue Var 0x2a7b4a019c0 'a' 'limb':'int'
|   |     `-IntegerLiteral 0x2a7b4a025e8 <col:17> 'int' 64
|   |-CompoundAssignOperator 0x2a7b4a02738 <line:520:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x2a7b4a026e0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b4a026c8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b4a02680 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b4a01768 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b4a026a0 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x2a7b4a02720 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x2a7b4a02700 <col:15> 'u64':'unsigned long long' lvalue Var 0x2a7b4a01ac8 'low' 'u64':'unsigned long long'
|   |-CompoundAssignOperator 0x2a7b4a02810 <line:521:5, col:15> 'limb':'int' '*=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2a7b4a027c8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b4a027b0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b4a02768 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b4a01768 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b4a02788 <col:9> 'int' 2
|   | `-IntegerLiteral 0x2a7b4a027e8 <col:15> 'int' 2
|   |-BinaryOperator 0x2a7b4a02910 <line:522:5, col:14> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2a7b4a028a0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b4a02888 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b4a02840 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b4a01768 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b4a02860 <col:9> 'int' 3
|   | `-ImplicitCastExpr 0x2a7b4a028f8 <col:14> 'limb':'int' <IntegralCast>
|   |   `-ImplicitCastExpr 0x2a7b4a028e0 <col:14> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-DeclRefExpr 0x2a7b4a028c0 <col:14> 'u64':'unsigned long long' lvalue Var 0x2a7b4a01a50 'high' 'u64':'unsigned long long'
|   |-BinaryOperator 0x2a7b4a02a40 <line:525:5, col:11> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x2a7b4a029d0 <col:5> 'u64':'unsigned long long' lvalue Var 0x2a7b4a01ac8 'low' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x2a7b4a02a28 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x2a7b4a02a10 <col:11> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x2a7b4a029f0 <col:11> 'limb':'int' lvalue Var 0x2a7b4a019c0 'a' 'limb':'int'
|   |-BinaryOperator 0x2a7b4a02b18 <line:526:5, col:17> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x2a7b4a02a60 <col:5> 'u64':'unsigned long long' lvalue Var 0x2a7b4a01a50 'high' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x2a7b4a02b00 <col:12, col:17> 'u64':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x2a7b4a02ae0 <col:12, col:17> 'limb':'int' '>>'
|   |     |-ImplicitCastExpr 0x2a7b4a02ac8 <col:12> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x2a7b4a02a80 <col:12> 'limb':'int' lvalue Var 0x2a7b4a019c0 'a' 'limb':'int'
|   |     `-IntegerLiteral 0x2a7b4a02aa0 <col:17> 'int' 64
|   |-CompoundAssignOperator 0x2a7b4a02bf0 <line:527:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x2a7b4a02b98 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b4a02b80 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b4a02b38 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b4a01768 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b4a02b58 <col:9> 'int' 3
|   | `-ImplicitCastExpr 0x2a7b4a02bd8 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x2a7b4a02bb8 <col:15> 'u64':'unsigned long long' lvalue Var 0x2a7b4a01ac8 'low' 'u64':'unsigned long long'
|   |-BinaryOperator 0x2a7b4a02cf0 <line:528:5, col:14> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2a7b4a02c80 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b4a02c68 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b4a02c20 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b4a01768 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b4a02c40 <col:9> 'int' 4
|   | `-ImplicitCastExpr 0x2a7b4a02cd8 <col:14> 'limb':'int' <IntegralCast>
|   |   `-ImplicitCastExpr 0x2a7b4a02cc0 <col:14> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-DeclRefExpr 0x2a7b4a02ca0 <col:14> 'u64':'unsigned long long' lvalue Var 0x2a7b4a01a50 'high' 'u64':'unsigned long long'
|   |-BinaryOperator 0x2a7b4a02e20 <line:531:5, col:11> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x2a7b4a02db0 <col:5> 'u64':'unsigned long long' lvalue Var 0x2a7b4a01ac8 'low' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x2a7b4a02e08 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x2a7b4a02df0 <col:11> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x2a7b4a02dd0 <col:11> 'limb':'int' lvalue Var 0x2a7b4a019c0 'a' 'limb':'int'
|   |-BinaryOperator 0x2a7b4a02ef8 <line:532:5, col:17> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x2a7b4a02e40 <col:5> 'u64':'unsigned long long' lvalue Var 0x2a7b4a01a50 'high' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x2a7b4a02ee0 <col:12, col:17> 'u64':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x2a7b4a02ec0 <col:12, col:17> 'limb':'int' '>>'
|   |     |-ImplicitCastExpr 0x2a7b4a02ea8 <col:12> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x2a7b4a02e60 <col:12> 'limb':'int' lvalue Var 0x2a7b4a019c0 'a' 'limb':'int'
|   |     `-IntegerLiteral 0x2a7b4a02e80 <col:17> 'int' 64
|   |-CompoundAssignOperator 0x2a7b4a02fd0 <line:533:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x2a7b4a02f78 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b4a02f60 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b4a02f18 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b4a01768 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b4a02f38 <col:9> 'int' 3
|   | `-ImplicitCastExpr 0x2a7b4a02fb8 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x2a7b4a02f98 <col:15> 'u64':'unsigned long long' lvalue Var 0x2a7b4a01ac8 'low' 'u64':'unsigned long long'
|   |-CompoundAssignOperator 0x2a7b4a030a8 <line:534:5, col:15> 'limb':'int' '*=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2a7b4a03060 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b4a03048 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b4a03000 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b4a01768 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b4a03020 <col:9> 'int' 3
|   | `-IntegerLiteral 0x2a7b4a03080 <col:15> 'int' 2
|   |-CompoundAssignOperator 0x2a7b4a03190 <line:535:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x2a7b4a03138 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b4a03120 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b4a030d8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b4a01768 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b4a030f8 <col:9> 'int' 4
|   | `-ImplicitCastExpr 0x2a7b4a03178 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x2a7b4a03158 <col:15> 'u64':'unsigned long long' lvalue Var 0x2a7b4a01a50 'high' 'u64':'unsigned long long'
|   |-BinaryOperator 0x2a7b4a032d0 <line:538:5, col:11> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x2a7b4a03260 <col:5> 'u64':'unsigned long long' lvalue Var 0x2a7b4a01ac8 'low' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x2a7b4a032b8 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x2a7b4a032a0 <col:11> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x2a7b4a03280 <col:11> 'limb':'int' lvalue Var 0x2a7b4a019c0 'a' 'limb':'int'
|   |-BinaryOperator 0x2a7b4a033a8 <line:539:5, col:17> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x2a7b4a032f0 <col:5> 'u64':'unsigned long long' lvalue Var 0x2a7b4a01a50 'high' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x2a7b4a03390 <col:12, col:17> 'u64':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x2a7b4a03370 <col:12, col:17> 'limb':'int' '>>'
|   |     |-ImplicitCastExpr 0x2a7b4a03358 <col:12> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x2a7b4a03310 <col:12> 'limb':'int' lvalue Var 0x2a7b4a019c0 'a' 'limb':'int'
|   |     `-IntegerLiteral 0x2a7b4a03330 <col:17> 'int' 64
|   |-CompoundAssignOperator 0x2a7b4a03480 <line:540:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x2a7b4a03428 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b4a03410 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b4a033c8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b4a01768 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b4a033e8 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x2a7b4a03468 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x2a7b4a03448 <col:15> 'u64':'unsigned long long' lvalue Var 0x2a7b4a01ac8 'low' 'u64':'unsigned long long'
|   |-CompoundAssignOperator 0x2a7b4a03568 <line:541:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x2a7b4a03510 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b4a034f8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b4a034b0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b4a01768 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b4a034d0 <col:9> 'int' 3
|   | `-ImplicitCastExpr 0x2a7b4a03550 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x2a7b4a03530 <col:15> 'u64':'unsigned long long' lvalue Var 0x2a7b4a01a50 'high' 'u64':'unsigned long long'
|   |-BinaryOperator 0x2a7b4a036a8 <line:544:5, col:11> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x2a7b4a03638 <col:5> 'u64':'unsigned long long' lvalue Var 0x2a7b4a01ac8 'low' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x2a7b4a03690 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x2a7b4a03678 <col:11> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x2a7b4a03658 <col:11> 'limb':'int' lvalue Var 0x2a7b4a019c0 'a' 'limb':'int'
|   |-BinaryOperator 0x2a7b4a03780 <line:545:5, col:17> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x2a7b4a036c8 <col:5> 'u64':'unsigned long long' lvalue Var 0x2a7b4a01a50 'high' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x2a7b4a03768 <col:12, col:17> 'u64':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x2a7b4a03748 <col:12, col:17> 'limb':'int' '>>'
|   |     |-ImplicitCastExpr 0x2a7b4a03730 <col:12> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x2a7b4a036e8 <col:12> 'limb':'int' lvalue Var 0x2a7b4a019c0 'a' 'limb':'int'
|   |     `-IntegerLiteral 0x2a7b4a03708 <col:17> 'int' 64
|   |-CompoundAssignOperator 0x2a7b4a03858 <line:546:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x2a7b4a03800 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b4a037e8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b4a037a0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b4a01768 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b4a037c0 <col:9> 'int' 4
|   | `-ImplicitCastExpr 0x2a7b4a03840 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x2a7b4a03820 <col:15> 'u64':'unsigned long long' lvalue Var 0x2a7b4a01ac8 'low' 'u64':'unsigned long long'
|   |-CompoundAssignOperator 0x2a7b4a03930 <line:547:5, col:15> 'limb':'int' '*=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2a7b4a038e8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b4a038d0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b4a03888 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b4a01768 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b4a038a8 <col:9> 'int' 4
|   | `-IntegerLiteral 0x2a7b4a03908 <col:15> 'int' 2
|   |-BinaryOperator 0x2a7b4a03a30 <line:548:5, col:14> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2a7b4a039c0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b4a039a8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b4a03960 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b4a01768 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b4a03980 <col:9> 'int' 5
|   | `-ImplicitCastExpr 0x2a7b4a03a18 <col:14> 'limb':'int' <IntegralCast>
|   |   `-ImplicitCastExpr 0x2a7b4a03a00 <col:14> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-DeclRefExpr 0x2a7b4a039e0 <col:14> 'u64':'unsigned long long' lvalue Var 0x2a7b4a01a50 'high' 'u64':'unsigned long long'
|   |-BinaryOperator 0x2a7b4a03b60 <line:551:5, col:11> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x2a7b4a03af0 <col:5> 'u64':'unsigned long long' lvalue Var 0x2a7b4a01ac8 'low' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x2a7b4a03b48 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x2a7b4a03b30 <col:11> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x2a7b4a03b10 <col:11> 'limb':'int' lvalue Var 0x2a7b4a019c0 'a' 'limb':'int'
|   |-BinaryOperator 0x2a7b4a03c38 <line:552:5, col:17> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x2a7b4a03b80 <col:5> 'u64':'unsigned long long' lvalue Var 0x2a7b4a01a50 'high' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x2a7b4a03c20 <col:12, col:17> 'u64':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x2a7b4a03c00 <col:12, col:17> 'limb':'int' '>>'
|   |     |-ImplicitCastExpr 0x2a7b4a03be8 <col:12> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x2a7b4a03ba0 <col:12> 'limb':'int' lvalue Var 0x2a7b4a019c0 'a' 'limb':'int'
|   |     `-IntegerLiteral 0x2a7b4a03bc0 <col:17> 'int' 64
|   |-CompoundAssignOperator 0x2a7b4a03d10 <line:553:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x2a7b4a03cb8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b4a03ca0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b4a03c58 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b4a01768 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b4a03c78 <col:9> 'int' 5
|   | `-ImplicitCastExpr 0x2a7b4a03cf8 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x2a7b4a03cd8 <col:15> 'u64':'unsigned long long' lvalue Var 0x2a7b4a01ac8 'low' 'u64':'unsigned long long'
|   |-CompoundAssignOperator 0x2a7b4a03de8 <line:554:5, col:15> 'limb':'int' '*=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2a7b4a03da0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b4a03d88 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b4a03d40 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b4a01768 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b4a03d60 <col:9> 'int' 5
|   | `-IntegerLiteral 0x2a7b4a03dc0 <col:15> 'int' 2
|   |-BinaryOperator 0x2a7b4a03f10 <line:555:5, col:14> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2a7b4a03ea0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b4a03e88 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b4a03e18 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b4a01768 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b4a03e60 <col:9> 'int' 6
|   | `-ImplicitCastExpr 0x2a7b4a03ef8 <col:14> 'limb':'int' <IntegralCast>
|   |   `-ImplicitCastExpr 0x2a7b4a03ee0 <col:14> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-DeclRefExpr 0x2a7b4a03ec0 <col:14> 'u64':'unsigned long long' lvalue Var 0x2a7b4a01a50 'high' 'u64':'unsigned long long'
|   |-CompoundAssignOperator 0x2a7b4a03fe8 <line:556:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x2a7b4a03f90 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b4a03f78 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b4a03f30 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b4a01768 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b4a03f50 <col:9> 'int' 6
|   | `-ImplicitCastExpr 0x2a7b4a03fd0 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x2a7b4a03fb0 <col:15> 'u64':'unsigned long long' lvalue Var 0x2a7b4a01a50 'high' 'u64':'unsigned long long'
|   |-BinaryOperator 0x2a7b4a04128 <line:559:5, col:11> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x2a7b4a040b8 <col:5> 'u64':'unsigned long long' lvalue Var 0x2a7b4a01ac8 'low' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x2a7b4a04110 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x2a7b4a040f8 <col:11> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x2a7b4a040d8 <col:11> 'limb':'int' lvalue Var 0x2a7b4a019c0 'a' 'limb':'int'
|   |-BinaryOperator 0x2a7b4a04200 <line:560:5, col:17> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x2a7b4a04148 <col:5> 'u64':'unsigned long long' lvalue Var 0x2a7b4a01a50 'high' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x2a7b4a041e8 <col:12, col:17> 'u64':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x2a7b4a041c8 <col:12, col:17> 'limb':'int' '>>'
|   |     |-ImplicitCastExpr 0x2a7b4a041b0 <col:12> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x2a7b4a04168 <col:12> 'limb':'int' lvalue Var 0x2a7b4a019c0 'a' 'limb':'int'
|   |     `-IntegerLiteral 0x2a7b4a04188 <col:17> 'int' 64
|   |-CompoundAssignOperator 0x2a7b4a042d8 <line:561:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x2a7b4a04280 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b4a04268 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b4a04220 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b4a01768 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b4a04240 <col:9> 'int' 4
|   | `-ImplicitCastExpr 0x2a7b4a042c0 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x2a7b4a042a0 <col:15> 'u64':'unsigned long long' lvalue Var 0x2a7b4a01ac8 'low' 'u64':'unsigned long long'
|   |-CompoundAssignOperator 0x2a7b4a043c0 <line:562:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x2a7b4a04368 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b4a04350 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b4a04308 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b4a01768 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b4a04328 <col:9> 'int' 5
|   | `-ImplicitCastExpr 0x2a7b4a043a8 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x2a7b4a04388 <col:15> 'u64':'unsigned long long' lvalue Var 0x2a7b4a01a50 'high' 'u64':'unsigned long long'
|   |-BinaryOperator 0x2a7b4a04500 <line:565:5, col:11> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x2a7b4a04490 <col:5> 'u64':'unsigned long long' lvalue Var 0x2a7b4a01ac8 'low' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x2a7b4a044e8 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x2a7b4a044d0 <col:11> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x2a7b4a044b0 <col:11> 'limb':'int' lvalue Var 0x2a7b4a019c0 'a' 'limb':'int'
|   |-BinaryOperator 0x2a7b4a045d8 <line:566:5, col:17> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x2a7b4a04520 <col:5> 'u64':'unsigned long long' lvalue Var 0x2a7b4a01a50 'high' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x2a7b4a045c0 <col:12, col:17> 'u64':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x2a7b4a045a0 <col:12, col:17> 'limb':'int' '>>'
|   |     |-ImplicitCastExpr 0x2a7b4a04588 <col:12> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x2a7b4a04540 <col:12> 'limb':'int' lvalue Var 0x2a7b4a019c0 'a' 'limb':'int'
|   |     `-IntegerLiteral 0x2a7b4a04560 <col:17> 'int' 64
|   |-CompoundAssignOperator 0x2a7b4a046b0 <line:567:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x2a7b4a04658 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b4a04640 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b4a045f8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b4a01768 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b4a04618 <col:9> 'int' 6
|   | `-ImplicitCastExpr 0x2a7b4a04698 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x2a7b4a04678 <col:15> 'u64':'unsigned long long' lvalue Var 0x2a7b4a01ac8 'low' 'u64':'unsigned long long'
|   `-BinaryOperator 0x2a7b4a047b0 <line:568:5, col:14> 'limb':'int' '='
|     |-ArraySubscriptExpr 0x2a7b4a04740 <col:5, col:10> 'limb':'int' lvalue
|     | |-ImplicitCastExpr 0x2a7b4a04728 <col:5> 'limb *':'limb *' <LValueToRValue>
|     | | `-DeclRefExpr 0x2a7b4a046e0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b4a01768 'out' 'limb *':'limb *'
|     | `-IntegerLiteral 0x2a7b4a04700 <col:9> 'int' 7
|     `-ImplicitCastExpr 0x2a7b4a04798 <col:14> 'limb':'int' <IntegralCast>
|       `-ImplicitCastExpr 0x2a7b4a04780 <col:14> 'u64':'unsigned long long' <LValueToRValue>
|         `-DeclRefExpr 0x2a7b4a04760 <col:14> 'u64':'unsigned long long' lvalue Var 0x2a7b4a01a50 'high' 'u64':'unsigned long long'
|-FunctionDecl 0x2a7b4a04ae8 <line:578:1, line:583:1> line:578:13 used felem_square 'void (limb *, const limb *)' static
| |-ParmVarDecl 0x2a7b4a04970 <col:26, col:36> col:36 used out 'limb *':'limb *'
| |-ParmVarDecl 0x2a7b4a049e8 <col:41, col:53> col:53 used in 'const limb *':'const limb *'
| `-CompoundStmt 0x2a7b4a04f28 <line:579:1, line:583:1>
|   |-DeclStmt 0x2a7b4a04c78 <line:580:5, col:17>
|   | `-VarDecl 0x2a7b4a04c10 <col:5, col:16> col:9 used small 'u64 [4]'
|   |-CallExpr 0x2a7b4a04d80 <line:581:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x2a7b4a04d68 <col:5> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4a04c90 <col:5> 'void (u64 *, const limb *)' Function 0x2a7b49fd1a8 'felem_shrink' 'void (u64 *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4a04db0 <col:18> 'u64 *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4a04cb0 <col:18> 'u64 [4]' lvalue Var 0x2a7b4a04c10 'small' 'u64 [4]'
|   | `-ImplicitCastExpr 0x2a7b4a04dc8 <col:25> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x2a7b4a04ce8 <col:25> 'const limb *':'const limb *' lvalue ParmVar 0x2a7b4a049e8 'in' 'const limb *':'const limb *'
|   `-CallExpr 0x2a7b4a04eb0 <line:582:5, col:33> 'void'
|     |-ImplicitCastExpr 0x2a7b4a04e98 <col:5> 'void (*)(limb *, const u64 *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x2a7b4a04de0 <col:5> 'void (limb *, const u64 *)' Function 0x2a7b4a018e8 'smallfelem_square' 'void (limb *, const u64 *)'
|     |-ImplicitCastExpr 0x2a7b4a04ee0 <col:23> 'limb *':'limb *' <LValueToRValue>
|     | `-DeclRefExpr 0x2a7b4a04e00 <col:23> 'limb *':'limb *' lvalue ParmVar 0x2a7b4a04970 'out' 'limb *':'limb *'
|     `-ImplicitCastExpr 0x2a7b4a04f10 <col:28> 'const u64 *':'const u64 *' <NoOp>
|       `-ImplicitCastExpr 0x2a7b4a04ef8 <col:28> 'u64 *' <ArrayToPointerDecay>
|         `-DeclRefExpr 0x2a7b4a04e20 <col:28> 'u64 [4]' lvalue Var 0x2a7b4a04c10 'small' 'u64 [4]'
|-FunctionDecl 0x2a7b4a051b8 <line:593:1, line:694:1> line:593:13 used smallfelem_mul 'void (limb *, const u64 *, const u64 *)' static
| |-ParmVarDecl 0x2a7b4a04f60 <col:28, col:38> col:38 used out 'limb *':'limb *'
| |-ParmVarDecl 0x2a7b4a04fd8 <col:43, col:60> col:60 small1 'const u64 *':'const u64 *'
| |-ParmVarDecl 0x2a7b4a05050 <line:594:28, col:45> col:45 used small2 'const u64 *':'const u64 *'
| `-CompoundStmt 0x2a7b4a09270 <line:595:1, line:694:1>
|   |-DeclStmt 0x2a7b4a05300 <line:596:5, col:11>
|   | `-VarDecl 0x2a7b4a05298 <col:5, col:10> col:10 used a 'limb':'int'
|   |-DeclStmt 0x2a7b4a05420 <line:597:5, col:18>
|   | |-VarDecl 0x2a7b4a05328 <col:5, col:9> col:9 used high 'u64':'unsigned long long'
|   | `-VarDecl 0x2a7b4a053a0 <col:5, col:15> col:15 used low 'u64':'unsigned long long'
|   |-BinaryOperator 0x2a7b4a05578 <line:600:5, col:11> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x2a7b4a054f0 <col:5> 'u64':'unsigned long long' lvalue Var 0x2a7b4a053a0 'low' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x2a7b4a05560 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x2a7b4a05548 <col:11> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x2a7b4a05528 <col:11> 'limb':'int' lvalue Var 0x2a7b4a05298 'a' 'limb':'int'
|   |-BinaryOperator 0x2a7b4a05668 <line:601:5, col:17> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x2a7b4a05598 <col:5> 'u64':'unsigned long long' lvalue Var 0x2a7b4a05328 'high' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x2a7b4a05650 <col:12, col:17> 'u64':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x2a7b4a05630 <col:12, col:17> 'limb':'int' '>>'
|   |     |-ImplicitCastExpr 0x2a7b4a05618 <col:12> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x2a7b4a055d0 <col:12> 'limb':'int' lvalue Var 0x2a7b4a05298 'a' 'limb':'int'
|   |     `-IntegerLiteral 0x2a7b4a055f0 <col:17> 'int' 64
|   |-BinaryOperator 0x2a7b4a05758 <line:602:5, col:14> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2a7b4a056e8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b4a056d0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b4a05688 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b4a04f60 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b4a056a8 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x2a7b4a05740 <col:14> 'limb':'int' <IntegralCast>
|   |   `-ImplicitCastExpr 0x2a7b4a05728 <col:14> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-DeclRefExpr 0x2a7b4a05708 <col:14> 'u64':'unsigned long long' lvalue Var 0x2a7b4a053a0 'low' 'u64':'unsigned long long'
|   |-BinaryOperator 0x2a7b4a05848 <line:603:5, col:14> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2a7b4a057d8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b4a057c0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b4a05778 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b4a04f60 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b4a05798 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x2a7b4a05830 <col:14> 'limb':'int' <IntegralCast>
|   |   `-ImplicitCastExpr 0x2a7b4a05818 <col:14> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-DeclRefExpr 0x2a7b4a057f8 <col:14> 'u64':'unsigned long long' lvalue Var 0x2a7b4a05328 'high' 'u64':'unsigned long long'
|   |-BinaryOperator 0x2a7b4a05978 <line:606:5, col:11> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x2a7b4a05908 <col:5> 'u64':'unsigned long long' lvalue Var 0x2a7b4a053a0 'low' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x2a7b4a05960 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x2a7b4a05948 <col:11> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x2a7b4a05928 <col:11> 'limb':'int' lvalue Var 0x2a7b4a05298 'a' 'limb':'int'
|   |-BinaryOperator 0x2a7b4a05a50 <line:607:5, col:17> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x2a7b4a05998 <col:5> 'u64':'unsigned long long' lvalue Var 0x2a7b4a05328 'high' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x2a7b4a05a38 <col:12, col:17> 'u64':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x2a7b4a05a18 <col:12, col:17> 'limb':'int' '>>'
|   |     |-ImplicitCastExpr 0x2a7b4a05a00 <col:12> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x2a7b4a059b8 <col:12> 'limb':'int' lvalue Var 0x2a7b4a05298 'a' 'limb':'int'
|   |     `-IntegerLiteral 0x2a7b4a059d8 <col:17> 'int' 64
|   |-CompoundAssignOperator 0x2a7b4a05b28 <line:608:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x2a7b4a05ad0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b4a05ab8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b4a05a70 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b4a04f60 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b4a05a90 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x2a7b4a05b10 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x2a7b4a05af0 <col:15> 'u64':'unsigned long long' lvalue Var 0x2a7b4a053a0 'low' 'u64':'unsigned long long'
|   |-BinaryOperator 0x2a7b4a05c28 <line:609:5, col:14> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2a7b4a05bb8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b4a05ba0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b4a05b58 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b4a04f60 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b4a05b78 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x2a7b4a05c10 <col:14> 'limb':'int' <IntegralCast>
|   |   `-ImplicitCastExpr 0x2a7b4a05bf8 <col:14> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-DeclRefExpr 0x2a7b4a05bd8 <col:14> 'u64':'unsigned long long' lvalue Var 0x2a7b4a05328 'high' 'u64':'unsigned long long'
|   |-BinaryOperator 0x2a7b4a05d58 <line:612:5, col:11> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x2a7b4a05ce8 <col:5> 'u64':'unsigned long long' lvalue Var 0x2a7b4a053a0 'low' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x2a7b4a05d40 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x2a7b4a05d28 <col:11> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x2a7b4a05d08 <col:11> 'limb':'int' lvalue Var 0x2a7b4a05298 'a' 'limb':'int'
|   |-BinaryOperator 0x2a7b4a05e30 <line:613:5, col:17> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x2a7b4a05d78 <col:5> 'u64':'unsigned long long' lvalue Var 0x2a7b4a05328 'high' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x2a7b4a05e18 <col:12, col:17> 'u64':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x2a7b4a05df8 <col:12, col:17> 'limb':'int' '>>'
|   |     |-ImplicitCastExpr 0x2a7b4a05de0 <col:12> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x2a7b4a05d98 <col:12> 'limb':'int' lvalue Var 0x2a7b4a05298 'a' 'limb':'int'
|   |     `-IntegerLiteral 0x2a7b4a05db8 <col:17> 'int' 64
|   |-CompoundAssignOperator 0x2a7b4a05f28 <line:614:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x2a7b4a05ed0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b4a05eb8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b4a05e70 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b4a04f60 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b4a05e90 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x2a7b4a05f10 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x2a7b4a05ef0 <col:15> 'u64':'unsigned long long' lvalue Var 0x2a7b4a053a0 'low' 'u64':'unsigned long long'
|   |-CompoundAssignOperator 0x2a7b4a06010 <line:615:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x2a7b4a05fb8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b4a05fa0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b4a05f58 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b4a04f60 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b4a05f78 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x2a7b4a05ff8 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x2a7b4a05fd8 <col:15> 'u64':'unsigned long long' lvalue Var 0x2a7b4a05328 'high' 'u64':'unsigned long long'
|   |-BinaryOperator 0x2a7b4a06150 <line:618:5, col:11> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x2a7b4a060e0 <col:5> 'u64':'unsigned long long' lvalue Var 0x2a7b4a053a0 'low' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x2a7b4a06138 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x2a7b4a06120 <col:11> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x2a7b4a06100 <col:11> 'limb':'int' lvalue Var 0x2a7b4a05298 'a' 'limb':'int'
|   |-BinaryOperator 0x2a7b4a06228 <line:619:5, col:17> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x2a7b4a06170 <col:5> 'u64':'unsigned long long' lvalue Var 0x2a7b4a05328 'high' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x2a7b4a06210 <col:12, col:17> 'u64':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x2a7b4a061f0 <col:12, col:17> 'limb':'int' '>>'
|   |     |-ImplicitCastExpr 0x2a7b4a061d8 <col:12> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x2a7b4a06190 <col:12> 'limb':'int' lvalue Var 0x2a7b4a05298 'a' 'limb':'int'
|   |     `-IntegerLiteral 0x2a7b4a061b0 <col:17> 'int' 64
|   |-CompoundAssignOperator 0x2a7b4a06300 <line:620:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x2a7b4a062a8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b4a06290 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b4a06248 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b4a04f60 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b4a06268 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x2a7b4a062e8 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x2a7b4a062c8 <col:15> 'u64':'unsigned long long' lvalue Var 0x2a7b4a053a0 'low' 'u64':'unsigned long long'
|   |-BinaryOperator 0x2a7b4a06400 <line:621:5, col:14> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2a7b4a06390 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b4a06378 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b4a06330 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b4a04f60 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b4a06350 <col:9> 'int' 3
|   | `-ImplicitCastExpr 0x2a7b4a063e8 <col:14> 'limb':'int' <IntegralCast>
|   |   `-ImplicitCastExpr 0x2a7b4a063d0 <col:14> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-DeclRefExpr 0x2a7b4a063b0 <col:14> 'u64':'unsigned long long' lvalue Var 0x2a7b4a05328 'high' 'u64':'unsigned long long'
|   |-BinaryOperator 0x2a7b4a06530 <line:624:5, col:11> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x2a7b4a064c0 <col:5> 'u64':'unsigned long long' lvalue Var 0x2a7b4a053a0 'low' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x2a7b4a06518 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x2a7b4a06500 <col:11> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x2a7b4a064e0 <col:11> 'limb':'int' lvalue Var 0x2a7b4a05298 'a' 'limb':'int'
|   |-BinaryOperator 0x2a7b4a06608 <line:625:5, col:17> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x2a7b4a06550 <col:5> 'u64':'unsigned long long' lvalue Var 0x2a7b4a05328 'high' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x2a7b4a065f0 <col:12, col:17> 'u64':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x2a7b4a065d0 <col:12, col:17> 'limb':'int' '>>'
|   |     |-ImplicitCastExpr 0x2a7b4a065b8 <col:12> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x2a7b4a06570 <col:12> 'limb':'int' lvalue Var 0x2a7b4a05298 'a' 'limb':'int'
|   |     `-IntegerLiteral 0x2a7b4a06590 <col:17> 'int' 64
|   |-CompoundAssignOperator 0x2a7b4a066e0 <line:626:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x2a7b4a06688 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b4a06670 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b4a06628 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b4a04f60 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b4a06648 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x2a7b4a066c8 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x2a7b4a066a8 <col:15> 'u64':'unsigned long long' lvalue Var 0x2a7b4a053a0 'low' 'u64':'unsigned long long'
|   |-CompoundAssignOperator 0x2a7b4a067c8 <line:627:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x2a7b4a06770 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b4a06758 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b4a06710 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b4a04f60 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b4a06730 <col:9> 'int' 3
|   | `-ImplicitCastExpr 0x2a7b4a067b0 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x2a7b4a06790 <col:15> 'u64':'unsigned long long' lvalue Var 0x2a7b4a05328 'high' 'u64':'unsigned long long'
|   |-BinaryOperator 0x2a7b4a06908 <line:630:5, col:11> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x2a7b4a06898 <col:5> 'u64':'unsigned long long' lvalue Var 0x2a7b4a053a0 'low' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x2a7b4a068f0 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x2a7b4a068d8 <col:11> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x2a7b4a068b8 <col:11> 'limb':'int' lvalue Var 0x2a7b4a05298 'a' 'limb':'int'
|   |-BinaryOperator 0x2a7b4a069e0 <line:631:5, col:17> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x2a7b4a06928 <col:5> 'u64':'unsigned long long' lvalue Var 0x2a7b4a05328 'high' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x2a7b4a069c8 <col:12, col:17> 'u64':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x2a7b4a069a8 <col:12, col:17> 'limb':'int' '>>'
|   |     |-ImplicitCastExpr 0x2a7b4a06990 <col:12> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x2a7b4a06948 <col:12> 'limb':'int' lvalue Var 0x2a7b4a05298 'a' 'limb':'int'
|   |     `-IntegerLiteral 0x2a7b4a06968 <col:17> 'int' 64
|   |-CompoundAssignOperator 0x2a7b4a06ab8 <line:632:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x2a7b4a06a60 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b4a06a48 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b4a06a00 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b4a04f60 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b4a06a20 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x2a7b4a06aa0 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x2a7b4a06a80 <col:15> 'u64':'unsigned long long' lvalue Var 0x2a7b4a053a0 'low' 'u64':'unsigned long long'
|   |-CompoundAssignOperator 0x2a7b4a06ba0 <line:633:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x2a7b4a06b48 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b4a06b30 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b4a06ae8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b4a04f60 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b4a06b08 <col:9> 'int' 3
|   | `-ImplicitCastExpr 0x2a7b4a06b88 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x2a7b4a06b68 <col:15> 'u64':'unsigned long long' lvalue Var 0x2a7b4a05328 'high' 'u64':'unsigned long long'
|   |-BinaryOperator 0x2a7b4a06ce0 <line:636:5, col:11> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x2a7b4a06c70 <col:5> 'u64':'unsigned long long' lvalue Var 0x2a7b4a053a0 'low' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x2a7b4a06cc8 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x2a7b4a06cb0 <col:11> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x2a7b4a06c90 <col:11> 'limb':'int' lvalue Var 0x2a7b4a05298 'a' 'limb':'int'
|   |-BinaryOperator 0x2a7b4a06db8 <line:637:5, col:17> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x2a7b4a06d00 <col:5> 'u64':'unsigned long long' lvalue Var 0x2a7b4a05328 'high' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x2a7b4a06da0 <col:12, col:17> 'u64':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x2a7b4a06d80 <col:12, col:17> 'limb':'int' '>>'
|   |     |-ImplicitCastExpr 0x2a7b4a06d68 <col:12> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x2a7b4a06d20 <col:12> 'limb':'int' lvalue Var 0x2a7b4a05298 'a' 'limb':'int'
|   |     `-IntegerLiteral 0x2a7b4a06d40 <col:17> 'int' 64
|   |-CompoundAssignOperator 0x2a7b4a06e90 <line:638:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x2a7b4a06e38 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b4a06e20 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b4a06dd8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b4a04f60 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b4a06df8 <col:9> 'int' 3
|   | `-ImplicitCastExpr 0x2a7b4a06e78 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x2a7b4a06e58 <col:15> 'u64':'unsigned long long' lvalue Var 0x2a7b4a053a0 'low' 'u64':'unsigned long long'
|   |-BinaryOperator 0x2a7b4a06f90 <line:639:5, col:14> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2a7b4a06f20 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b4a06f08 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b4a06ec0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b4a04f60 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b4a06ee0 <col:9> 'int' 4
|   | `-ImplicitCastExpr 0x2a7b4a06f78 <col:14> 'limb':'int' <IntegralCast>
|   |   `-ImplicitCastExpr 0x2a7b4a06f60 <col:14> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-DeclRefExpr 0x2a7b4a06f40 <col:14> 'u64':'unsigned long long' lvalue Var 0x2a7b4a05328 'high' 'u64':'unsigned long long'
|   |-BinaryOperator 0x2a7b4a070c0 <line:642:5, col:11> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x2a7b4a07050 <col:5> 'u64':'unsigned long long' lvalue Var 0x2a7b4a053a0 'low' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x2a7b4a070a8 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x2a7b4a07090 <col:11> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x2a7b4a07070 <col:11> 'limb':'int' lvalue Var 0x2a7b4a05298 'a' 'limb':'int'
|   |-BinaryOperator 0x2a7b4a07198 <line:643:5, col:17> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x2a7b4a070e0 <col:5> 'u64':'unsigned long long' lvalue Var 0x2a7b4a05328 'high' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x2a7b4a07180 <col:12, col:17> 'u64':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x2a7b4a07160 <col:12, col:17> 'limb':'int' '>>'
|   |     |-ImplicitCastExpr 0x2a7b4a07148 <col:12> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x2a7b4a07100 <col:12> 'limb':'int' lvalue Var 0x2a7b4a05298 'a' 'limb':'int'
|   |     `-IntegerLiteral 0x2a7b4a07120 <col:17> 'int' 64
|   |-CompoundAssignOperator 0x2a7b4a07270 <line:644:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x2a7b4a07218 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b4a07200 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b4a071b8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b4a04f60 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b4a071d8 <col:9> 'int' 3
|   | `-ImplicitCastExpr 0x2a7b4a07258 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x2a7b4a07238 <col:15> 'u64':'unsigned long long' lvalue Var 0x2a7b4a053a0 'low' 'u64':'unsigned long long'
|   |-CompoundAssignOperator 0x2a7b4a07358 <line:645:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x2a7b4a07300 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b4a072e8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b4a072a0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b4a04f60 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b4a072c0 <col:9> 'int' 4
|   | `-ImplicitCastExpr 0x2a7b4a07340 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x2a7b4a07320 <col:15> 'u64':'unsigned long long' lvalue Var 0x2a7b4a05328 'high' 'u64':'unsigned long long'
|   |-BinaryOperator 0x2a7b4a07498 <line:648:5, col:11> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x2a7b4a07428 <col:5> 'u64':'unsigned long long' lvalue Var 0x2a7b4a053a0 'low' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x2a7b4a07480 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x2a7b4a07468 <col:11> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x2a7b4a07448 <col:11> 'limb':'int' lvalue Var 0x2a7b4a05298 'a' 'limb':'int'
|   |-BinaryOperator 0x2a7b4a07570 <line:649:5, col:17> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x2a7b4a074b8 <col:5> 'u64':'unsigned long long' lvalue Var 0x2a7b4a05328 'high' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x2a7b4a07558 <col:12, col:17> 'u64':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x2a7b4a07538 <col:12, col:17> 'limb':'int' '>>'
|   |     |-ImplicitCastExpr 0x2a7b4a07520 <col:12> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x2a7b4a074d8 <col:12> 'limb':'int' lvalue Var 0x2a7b4a05298 'a' 'limb':'int'
|   |     `-IntegerLiteral 0x2a7b4a074f8 <col:17> 'int' 64
|   |-CompoundAssignOperator 0x2a7b4a07648 <line:650:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x2a7b4a075f0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b4a075d8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b4a07590 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b4a04f60 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b4a075b0 <col:9> 'int' 3
|   | `-ImplicitCastExpr 0x2a7b4a07630 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x2a7b4a07610 <col:15> 'u64':'unsigned long long' lvalue Var 0x2a7b4a053a0 'low' 'u64':'unsigned long long'
|   |-CompoundAssignOperator 0x2a7b4a07730 <line:651:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x2a7b4a076d8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b4a076c0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b4a07678 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b4a04f60 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b4a07698 <col:9> 'int' 4
|   | `-ImplicitCastExpr 0x2a7b4a07718 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x2a7b4a076f8 <col:15> 'u64':'unsigned long long' lvalue Var 0x2a7b4a05328 'high' 'u64':'unsigned long long'
|   |-BinaryOperator 0x2a7b4a07870 <line:654:5, col:11> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x2a7b4a07800 <col:5> 'u64':'unsigned long long' lvalue Var 0x2a7b4a053a0 'low' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x2a7b4a07858 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x2a7b4a07840 <col:11> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x2a7b4a07820 <col:11> 'limb':'int' lvalue Var 0x2a7b4a05298 'a' 'limb':'int'
|   |-BinaryOperator 0x2a7b4a07948 <line:655:5, col:17> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x2a7b4a07890 <col:5> 'u64':'unsigned long long' lvalue Var 0x2a7b4a05328 'high' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x2a7b4a07930 <col:12, col:17> 'u64':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x2a7b4a07910 <col:12, col:17> 'limb':'int' '>>'
|   |     |-ImplicitCastExpr 0x2a7b4a078f8 <col:12> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x2a7b4a078b0 <col:12> 'limb':'int' lvalue Var 0x2a7b4a05298 'a' 'limb':'int'
|   |     `-IntegerLiteral 0x2a7b4a078d0 <col:17> 'int' 64
|   |-CompoundAssignOperator 0x2a7b4a07a20 <line:656:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x2a7b4a079c8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b4a079b0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b4a07968 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b4a04f60 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b4a07988 <col:9> 'int' 3
|   | `-ImplicitCastExpr 0x2a7b4a07a08 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x2a7b4a079e8 <col:15> 'u64':'unsigned long long' lvalue Var 0x2a7b4a053a0 'low' 'u64':'unsigned long long'
|   |-CompoundAssignOperator 0x2a7b4a07b08 <line:657:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x2a7b4a07ab0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b4a07a98 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b4a07a50 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b4a04f60 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b4a07a70 <col:9> 'int' 4
|   | `-ImplicitCastExpr 0x2a7b4a07af0 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x2a7b4a07ad0 <col:15> 'u64':'unsigned long long' lvalue Var 0x2a7b4a05328 'high' 'u64':'unsigned long long'
|   |-BinaryOperator 0x2a7b4a07c48 <line:660:5, col:11> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x2a7b4a07bd8 <col:5> 'u64':'unsigned long long' lvalue Var 0x2a7b4a053a0 'low' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x2a7b4a07c30 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x2a7b4a07c18 <col:11> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x2a7b4a07bf8 <col:11> 'limb':'int' lvalue Var 0x2a7b4a05298 'a' 'limb':'int'
|   |-BinaryOperator 0x2a7b4a07d20 <line:661:5, col:17> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x2a7b4a07c68 <col:5> 'u64':'unsigned long long' lvalue Var 0x2a7b4a05328 'high' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x2a7b4a07d08 <col:12, col:17> 'u64':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x2a7b4a07ce8 <col:12, col:17> 'limb':'int' '>>'
|   |     |-ImplicitCastExpr 0x2a7b4a07cd0 <col:12> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x2a7b4a07c88 <col:12> 'limb':'int' lvalue Var 0x2a7b4a05298 'a' 'limb':'int'
|   |     `-IntegerLiteral 0x2a7b4a07ca8 <col:17> 'int' 64
|   |-CompoundAssignOperator 0x2a7b4a07df8 <line:662:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x2a7b4a07da0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b4a07d88 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b4a07d40 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b4a04f60 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b4a07d60 <col:9> 'int' 4
|   | `-ImplicitCastExpr 0x2a7b4a07de0 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x2a7b4a07dc0 <col:15> 'u64':'unsigned long long' lvalue Var 0x2a7b4a053a0 'low' 'u64':'unsigned long long'
|   |-BinaryOperator 0x2a7b4a07f08 <line:663:5, col:14> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2a7b4a07e98 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b4a07e80 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b4a07e28 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b4a04f60 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b4a07e48 <col:9> 'int' 5
|   | `-ImplicitCastExpr 0x2a7b4a07ef0 <col:14> 'limb':'int' <IntegralCast>
|   |   `-ImplicitCastExpr 0x2a7b4a07ed8 <col:14> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-DeclRefExpr 0x2a7b4a07eb8 <col:14> 'u64':'unsigned long long' lvalue Var 0x2a7b4a05328 'high' 'u64':'unsigned long long'
|   |-BinaryOperator 0x2a7b4a08038 <line:666:5, col:11> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x2a7b4a07fc8 <col:5> 'u64':'unsigned long long' lvalue Var 0x2a7b4a053a0 'low' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x2a7b4a08020 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x2a7b4a08008 <col:11> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x2a7b4a07fe8 <col:11> 'limb':'int' lvalue Var 0x2a7b4a05298 'a' 'limb':'int'
|   |-BinaryOperator 0x2a7b4a08110 <line:667:5, col:17> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x2a7b4a08058 <col:5> 'u64':'unsigned long long' lvalue Var 0x2a7b4a05328 'high' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x2a7b4a080f8 <col:12, col:17> 'u64':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x2a7b4a080d8 <col:12, col:17> 'limb':'int' '>>'
|   |     |-ImplicitCastExpr 0x2a7b4a080c0 <col:12> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x2a7b4a08078 <col:12> 'limb':'int' lvalue Var 0x2a7b4a05298 'a' 'limb':'int'
|   |     `-IntegerLiteral 0x2a7b4a08098 <col:17> 'int' 64
|   |-CompoundAssignOperator 0x2a7b4a081e8 <line:668:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x2a7b4a08190 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b4a08178 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b4a08130 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b4a04f60 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b4a08150 <col:9> 'int' 4
|   | `-ImplicitCastExpr 0x2a7b4a081d0 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x2a7b4a081b0 <col:15> 'u64':'unsigned long long' lvalue Var 0x2a7b4a053a0 'low' 'u64':'unsigned long long'
|   |-CompoundAssignOperator 0x2a7b4a082d0 <line:669:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x2a7b4a08278 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b4a08260 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b4a08218 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b4a04f60 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b4a08238 <col:9> 'int' 5
|   | `-ImplicitCastExpr 0x2a7b4a082b8 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x2a7b4a08298 <col:15> 'u64':'unsigned long long' lvalue Var 0x2a7b4a05328 'high' 'u64':'unsigned long long'
|   |-BinaryOperator 0x2a7b4a08410 <line:672:5, col:11> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x2a7b4a083a0 <col:5> 'u64':'unsigned long long' lvalue Var 0x2a7b4a053a0 'low' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x2a7b4a083f8 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x2a7b4a083e0 <col:11> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x2a7b4a083c0 <col:11> 'limb':'int' lvalue Var 0x2a7b4a05298 'a' 'limb':'int'
|   |-BinaryOperator 0x2a7b4a084e8 <line:673:5, col:17> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x2a7b4a08430 <col:5> 'u64':'unsigned long long' lvalue Var 0x2a7b4a05328 'high' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x2a7b4a084d0 <col:12, col:17> 'u64':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x2a7b4a084b0 <col:12, col:17> 'limb':'int' '>>'
|   |     |-ImplicitCastExpr 0x2a7b4a08498 <col:12> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x2a7b4a08450 <col:12> 'limb':'int' lvalue Var 0x2a7b4a05298 'a' 'limb':'int'
|   |     `-IntegerLiteral 0x2a7b4a08470 <col:17> 'int' 64
|   |-CompoundAssignOperator 0x2a7b4a085c0 <line:674:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x2a7b4a08568 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b4a08550 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b4a08508 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b4a04f60 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b4a08528 <col:9> 'int' 4
|   | `-ImplicitCastExpr 0x2a7b4a085a8 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x2a7b4a08588 <col:15> 'u64':'unsigned long long' lvalue Var 0x2a7b4a053a0 'low' 'u64':'unsigned long long'
|   |-CompoundAssignOperator 0x2a7b4a086a8 <line:675:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x2a7b4a08650 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b4a08638 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b4a085f0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b4a04f60 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b4a08610 <col:9> 'int' 5
|   | `-ImplicitCastExpr 0x2a7b4a08690 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x2a7b4a08670 <col:15> 'u64':'unsigned long long' lvalue Var 0x2a7b4a05328 'high' 'u64':'unsigned long long'
|   |-BinaryOperator 0x2a7b4a087e8 <line:678:5, col:11> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x2a7b4a08778 <col:5> 'u64':'unsigned long long' lvalue Var 0x2a7b4a053a0 'low' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x2a7b4a087d0 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x2a7b4a087b8 <col:11> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x2a7b4a08798 <col:11> 'limb':'int' lvalue Var 0x2a7b4a05298 'a' 'limb':'int'
|   |-BinaryOperator 0x2a7b4a088c0 <line:679:5, col:17> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x2a7b4a08808 <col:5> 'u64':'unsigned long long' lvalue Var 0x2a7b4a05328 'high' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x2a7b4a088a8 <col:12, col:17> 'u64':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x2a7b4a08888 <col:12, col:17> 'limb':'int' '>>'
|   |     |-ImplicitCastExpr 0x2a7b4a08870 <col:12> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x2a7b4a08828 <col:12> 'limb':'int' lvalue Var 0x2a7b4a05298 'a' 'limb':'int'
|   |     `-IntegerLiteral 0x2a7b4a08848 <col:17> 'int' 64
|   |-CompoundAssignOperator 0x2a7b4a08998 <line:680:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x2a7b4a08940 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b4a08928 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b4a088e0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b4a04f60 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b4a08900 <col:9> 'int' 5
|   | `-ImplicitCastExpr 0x2a7b4a08980 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x2a7b4a08960 <col:15> 'u64':'unsigned long long' lvalue Var 0x2a7b4a053a0 'low' 'u64':'unsigned long long'
|   |-BinaryOperator 0x2a7b4a08a98 <line:681:5, col:14> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2a7b4a08a28 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b4a08a10 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b4a089c8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b4a04f60 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b4a089e8 <col:9> 'int' 6
|   | `-ImplicitCastExpr 0x2a7b4a08a80 <col:14> 'limb':'int' <IntegralCast>
|   |   `-ImplicitCastExpr 0x2a7b4a08a68 <col:14> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-DeclRefExpr 0x2a7b4a08a48 <col:14> 'u64':'unsigned long long' lvalue Var 0x2a7b4a05328 'high' 'u64':'unsigned long long'
|   |-BinaryOperator 0x2a7b4a08bc8 <line:684:5, col:11> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x2a7b4a08b58 <col:5> 'u64':'unsigned long long' lvalue Var 0x2a7b4a053a0 'low' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x2a7b4a08bb0 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x2a7b4a08b98 <col:11> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x2a7b4a08b78 <col:11> 'limb':'int' lvalue Var 0x2a7b4a05298 'a' 'limb':'int'
|   |-BinaryOperator 0x2a7b4a08ca0 <line:685:5, col:17> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x2a7b4a08be8 <col:5> 'u64':'unsigned long long' lvalue Var 0x2a7b4a05328 'high' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x2a7b4a08c88 <col:12, col:17> 'u64':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x2a7b4a08c68 <col:12, col:17> 'limb':'int' '>>'
|   |     |-ImplicitCastExpr 0x2a7b4a08c50 <col:12> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x2a7b4a08c08 <col:12> 'limb':'int' lvalue Var 0x2a7b4a05298 'a' 'limb':'int'
|   |     `-IntegerLiteral 0x2a7b4a08c28 <col:17> 'int' 64
|   |-CompoundAssignOperator 0x2a7b4a08d78 <line:686:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x2a7b4a08d20 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b4a08d08 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b4a08cc0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b4a04f60 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b4a08ce0 <col:9> 'int' 5
|   | `-ImplicitCastExpr 0x2a7b4a08d60 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x2a7b4a08d40 <col:15> 'u64':'unsigned long long' lvalue Var 0x2a7b4a053a0 'low' 'u64':'unsigned long long'
|   |-CompoundAssignOperator 0x2a7b4a08e60 <line:687:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x2a7b4a08e08 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b4a08df0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b4a08da8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b4a04f60 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b4a08dc8 <col:9> 'int' 6
|   | `-ImplicitCastExpr 0x2a7b4a08e48 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x2a7b4a08e28 <col:15> 'u64':'unsigned long long' lvalue Var 0x2a7b4a05328 'high' 'u64':'unsigned long long'
|   |-BinaryOperator 0x2a7b4a08fa0 <line:690:5, col:11> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x2a7b4a08f30 <col:5> 'u64':'unsigned long long' lvalue Var 0x2a7b4a053a0 'low' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x2a7b4a08f88 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x2a7b4a08f70 <col:11> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x2a7b4a08f50 <col:11> 'limb':'int' lvalue Var 0x2a7b4a05298 'a' 'limb':'int'
|   |-BinaryOperator 0x2a7b4a09078 <line:691:5, col:17> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x2a7b4a08fc0 <col:5> 'u64':'unsigned long long' lvalue Var 0x2a7b4a05328 'high' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x2a7b4a09060 <col:12, col:17> 'u64':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x2a7b4a09040 <col:12, col:17> 'limb':'int' '>>'
|   |     |-ImplicitCastExpr 0x2a7b4a09028 <col:12> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x2a7b4a08fe0 <col:12> 'limb':'int' lvalue Var 0x2a7b4a05298 'a' 'limb':'int'
|   |     `-IntegerLiteral 0x2a7b4a09000 <col:17> 'int' 64
|   |-CompoundAssignOperator 0x2a7b4a09150 <line:692:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x2a7b4a090f8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b4a090e0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b4a09098 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b4a04f60 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b4a090b8 <col:9> 'int' 6
|   | `-ImplicitCastExpr 0x2a7b4a09138 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x2a7b4a09118 <col:15> 'u64':'unsigned long long' lvalue Var 0x2a7b4a053a0 'low' 'u64':'unsigned long long'
|   `-BinaryOperator 0x2a7b4a09250 <line:693:5, col:14> 'limb':'int' '='
|     |-ArraySubscriptExpr 0x2a7b4a091e0 <col:5, col:10> 'limb':'int' lvalue
|     | |-ImplicitCastExpr 0x2a7b4a091c8 <col:5> 'limb *':'limb *' <LValueToRValue>
|     | | `-DeclRefExpr 0x2a7b4a09180 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b4a04f60 'out' 'limb *':'limb *'
|     | `-IntegerLiteral 0x2a7b4a091a0 <col:9> 'int' 7
|     `-ImplicitCastExpr 0x2a7b4a09238 <col:14> 'limb':'int' <IntegralCast>
|       `-ImplicitCastExpr 0x2a7b4a09220 <col:14> 'u64':'unsigned long long' <LValueToRValue>
|         `-DeclRefExpr 0x2a7b4a09200 <col:14> 'u64':'unsigned long long' lvalue Var 0x2a7b4a05328 'high' 'u64':'unsigned long long'
|-FunctionDecl 0x2a7b4a096f8 <line:704:1, line:710:1> line:704:13 used felem_mul 'void (limb *, const limb *, const limb *)' static
| |-ParmVarDecl 0x2a7b4a094a0 <col:23, col:33> col:33 used out 'limb *':'limb *'
| |-ParmVarDecl 0x2a7b4a09518 <col:38, col:50> col:50 used in1 'const limb *':'const limb *'
| |-ParmVarDecl 0x2a7b4a09590 <col:55, col:67> col:67 used in2 'const limb *':'const limb *'
| `-CompoundStmt 0x2a7b4a09c70 <line:705:1, line:710:1>
|   |-DeclStmt 0x2a7b4a098d0 <line:706:5, col:30>
|   | |-VarDecl 0x2a7b4a097d8 <col:5, col:16> col:16 used small1 'smallfelem':'u64 [4]'
|   | `-VarDecl 0x2a7b4a09850 <col:5, col:24> col:24 used small2 'smallfelem':'u64 [4]'
|   |-CallExpr 0x2a7b4a09978 <line:707:5, col:29> 'void'
|   | |-ImplicitCastExpr 0x2a7b4a09960 <col:5> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4a098e8 <col:5> 'void (u64 *, const limb *)' Function 0x2a7b49fd1a8 'felem_shrink' 'void (u64 *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4a099a8 <col:18> 'u64 *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4a09908 <col:18> 'smallfelem':'u64 [4]' lvalue Var 0x2a7b4a097d8 'small1' 'smallfelem':'u64 [4]'
|   | `-ImplicitCastExpr 0x2a7b4a099c0 <col:26> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x2a7b4a09940 <col:26> 'const limb *':'const limb *' lvalue ParmVar 0x2a7b4a09518 'in1' 'const limb *':'const limb *'
|   |-CallExpr 0x2a7b4a09a68 <line:708:5, col:29> 'void'
|   | |-ImplicitCastExpr 0x2a7b4a09a50 <col:5> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4a099d8 <col:5> 'void (u64 *, const limb *)' Function 0x2a7b49fd1a8 'felem_shrink' 'void (u64 *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4a09a98 <col:18> 'u64 *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4a099f8 <col:18> 'smallfelem':'u64 [4]' lvalue Var 0x2a7b4a09850 'small2' 'smallfelem':'u64 [4]'
|   | `-ImplicitCastExpr 0x2a7b4a09ab0 <col:26> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x2a7b4a09a30 <col:26> 'const limb *':'const limb *' lvalue ParmVar 0x2a7b4a09590 'in2' 'const limb *':'const limb *'
|   `-CallExpr 0x2a7b4a09bc0 <line:709:5, col:39> 'void'
|     |-ImplicitCastExpr 0x2a7b4a09ba8 <col:5> 'void (*)(limb *, const u64 *, const u64 *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x2a7b4a09ac8 <col:5> 'void (limb *, const u64 *, const u64 *)' Function 0x2a7b4a051b8 'smallfelem_mul' 'void (limb *, const u64 *, const u64 *)'
|     |-ImplicitCastExpr 0x2a7b4a09bf8 <col:20> 'limb *':'limb *' <LValueToRValue>
|     | `-DeclRefExpr 0x2a7b4a09ae8 <col:20> 'limb *':'limb *' lvalue ParmVar 0x2a7b4a094a0 'out' 'limb *':'limb *'
|     |-ImplicitCastExpr 0x2a7b4a09c28 <col:25> 'const u64 *':'const u64 *' <NoOp>
|     | `-ImplicitCastExpr 0x2a7b4a09c10 <col:25> 'u64 *' <ArrayToPointerDecay>
|     |   `-DeclRefExpr 0x2a7b4a09b08 <col:25> 'smallfelem':'u64 [4]' lvalue Var 0x2a7b4a097d8 'small1' 'smallfelem':'u64 [4]'
|     `-ImplicitCastExpr 0x2a7b4a09c58 <col:33> 'const u64 *':'const u64 *' <NoOp>
|       `-ImplicitCastExpr 0x2a7b4a09c40 <col:33> 'u64 *' <ArrayToPointerDecay>
|         `-DeclRefExpr 0x2a7b4a09b28 <col:33> 'smallfelem':'u64 [4]' lvalue Var 0x2a7b4a09850 'small2' 'smallfelem':'u64 [4]'
|-FunctionDecl 0x2a7b4aed998 <line:720:1, line:726:1> line:720:13 used felem_small_mul 'void (limb *, const u64 *, const limb *)' static
| |-ParmVarDecl 0x2a7b4a09cb0 <col:29, col:39> col:39 used out 'limb *':'limb *'
| |-ParmVarDecl 0x2a7b4a09d28 <col:44, col:61> col:61 used small1 'const u64 *':'const u64 *'
| |-ParmVarDecl 0x2a7b4a09da0 <line:721:29, col:41> col:41 used in2 'const limb *':'const limb *'
| `-CompoundStmt 0x2a7b4aedd18 <line:722:1, line:726:1>
|   |-DeclStmt 0x2a7b4aedae0 <line:723:5, col:22>
|   | `-VarDecl 0x2a7b4aeda78 <col:5, col:16> col:16 used small2 'smallfelem':'u64 [4]'
|   |-CallExpr 0x2a7b4aedb88 <line:724:5, col:29> 'void'
|   | |-ImplicitCastExpr 0x2a7b4aedb70 <col:5> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4aedaf8 <col:5> 'void (u64 *, const limb *)' Function 0x2a7b49fd1a8 'felem_shrink' 'void (u64 *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4aedbb8 <col:18> 'u64 *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4aedb18 <col:18> 'smallfelem':'u64 [4]' lvalue Var 0x2a7b4aeda78 'small2' 'smallfelem':'u64 [4]'
|   | `-ImplicitCastExpr 0x2a7b4aedbd0 <col:26> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x2a7b4aedb50 <col:26> 'const limb *':'const limb *' lvalue ParmVar 0x2a7b4a09da0 'in2' 'const limb *':'const limb *'
|   `-CallExpr 0x2a7b4aedc80 <line:725:5, col:39> 'void'
|     |-ImplicitCastExpr 0x2a7b4aedc68 <col:5> 'void (*)(limb *, const u64 *, const u64 *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x2a7b4aedbe8 <col:5> 'void (limb *, const u64 *, const u64 *)' Function 0x2a7b4a051b8 'smallfelem_mul' 'void (limb *, const u64 *, const u64 *)'
|     |-ImplicitCastExpr 0x2a7b4aedcb8 <col:20> 'limb *':'limb *' <LValueToRValue>
|     | `-DeclRefExpr 0x2a7b4aedc08 <col:20> 'limb *':'limb *' lvalue ParmVar 0x2a7b4a09cb0 'out' 'limb *':'limb *'
|     |-ImplicitCastExpr 0x2a7b4aedcd0 <col:25> 'const u64 *':'const u64 *' <LValueToRValue>
|     | `-DeclRefExpr 0x2a7b4aedc28 <col:25> 'const u64 *':'const u64 *' lvalue ParmVar 0x2a7b4a09d28 'small1' 'const u64 *':'const u64 *'
|     `-ImplicitCastExpr 0x2a7b4aedd00 <col:33> 'const u64 *':'const u64 *' <NoOp>
|       `-ImplicitCastExpr 0x2a7b4aedce8 <col:33> 'u64 *' <ArrayToPointerDecay>
|         `-DeclRefExpr 0x2a7b4aedc48 <col:33> 'smallfelem':'u64 [4]' lvalue Var 0x2a7b4aeda78 'small2' 'smallfelem':'u64 [4]'
|-VarDecl 0x2a7b4aedd50 <line:732:1, line:733:53> line:732:20 used zero100 'const felem':'limb const[4]' static cinit
| `-InitListExpr 0x2a7b4aee810 <line:733:5, col:53> 'const felem':'limb const[4]'
|   |-BinaryOperator 0x2a7b4aee090 <line:728:22, col:78> 'int' '-'
|   | |-BinaryOperator 0x2a7b4aedf88 <col:22, col:59> 'int' '-'
|   | | |-ParenExpr 0x2a7b4aede80 <col:22, col:39> 'limb':'int'
|   | | | `-BinaryOperator 0x2a7b4aede60 <col:23, col:36> 'limb':'int' '<<'
|   | | |   |-ParenExpr 0x2a7b4aede18 <col:23, col:31> 'limb':'int'
|   | | |   | `-CStyleCastExpr 0x2a7b4aeddf0 <col:24, col:30> 'limb':'int' <NoOp>
|   | | |   |   `-IntegerLiteral 0x2a7b4aeddb8 <col:30> 'int' 1
|   | | |   `-IntegerLiteral 0x2a7b4aede38 <col:36> 'int' 100
|   | | `-ParenExpr 0x2a7b4aedf68 <col:43, col:59> 'limb':'int'
|   | |   `-BinaryOperator 0x2a7b4aedf48 <col:44, col:57> 'limb':'int' '<<'
|   | |     |-ParenExpr 0x2a7b4aedf00 <col:44, col:52> 'limb':'int'
|   | |     | `-CStyleCastExpr 0x2a7b4aeded8 <col:45, col:51> 'limb':'int' <NoOp>
|   | |     |   `-IntegerLiteral 0x2a7b4aedea0 <col:51> 'int' 1
|   | |     `-IntegerLiteral 0x2a7b4aedf20 <col:57> 'int' 36
|   | `-ParenExpr 0x2a7b4aee070 <col:63, col:78> 'limb':'int'
|   |   `-BinaryOperator 0x2a7b4aee050 <col:64, col:77> 'limb':'int' '<<'
|   |     |-ParenExpr 0x2a7b4aee008 <col:64, col:72> 'limb':'int'
|   |     | `-CStyleCastExpr 0x2a7b4aedfe0 <col:65, col:71> 'limb':'int' <NoOp>
|   |     |   `-IntegerLiteral 0x2a7b4aedfa8 <col:71> 'int' 1
|   |     `-IntegerLiteral 0x2a7b4aee028 <col:77> 'int' 4
|   |-ParenExpr 0x2a7b4aee178 <line:729:17, col:34> 'limb':'int'
|   | `-BinaryOperator 0x2a7b4aee158 <col:18, col:31> 'limb':'int' '<<'
|   |   |-ParenExpr 0x2a7b4aee110 <col:18, col:26> 'limb':'int'
|   |   | `-CStyleCastExpr 0x2a7b4aee0e8 <col:19, col:25> 'limb':'int' <NoOp>
|   |   |   `-IntegerLiteral 0x2a7b4aee0b0 <col:25> 'int' 1
|   |   `-IntegerLiteral 0x2a7b4aee130 <col:31> 'int' 100
|   |-BinaryOperator 0x2a7b4aee470 <line:730:22, col:78> 'int' '+'
|   | |-BinaryOperator 0x2a7b4aee368 <col:22, col:59> 'int' '-'
|   | | |-ParenExpr 0x2a7b4aee260 <col:22, col:39> 'limb':'int'
|   | | | `-BinaryOperator 0x2a7b4aee240 <col:23, col:36> 'limb':'int' '<<'
|   | | |   |-ParenExpr 0x2a7b4aee1f8 <col:23, col:31> 'limb':'int'
|   | | |   | `-CStyleCastExpr 0x2a7b4aee1d0 <col:24, col:30> 'limb':'int' <NoOp>
|   | | |   |   `-IntegerLiteral 0x2a7b4aee198 <col:30> 'int' 1
|   | | |   `-IntegerLiteral 0x2a7b4aee218 <col:36> 'int' 100
|   | | `-ParenExpr 0x2a7b4aee348 <col:43, col:59> 'limb':'int'
|   | |   `-BinaryOperator 0x2a7b4aee328 <col:44, col:57> 'limb':'int' '<<'
|   | |     |-ParenExpr 0x2a7b4aee2e0 <col:44, col:52> 'limb':'int'
|   | |     | `-CStyleCastExpr 0x2a7b4aee2b8 <col:45, col:51> 'limb':'int' <NoOp>
|   | |     |   `-IntegerLiteral 0x2a7b4aee280 <col:51> 'int' 1
|   | |     `-IntegerLiteral 0x2a7b4aee300 <col:57> 'int' 36
|   | `-ParenExpr 0x2a7b4aee450 <col:63, col:78> 'limb':'int'
|   |   `-BinaryOperator 0x2a7b4aee430 <col:64, col:77> 'limb':'int' '<<'
|   |     |-ParenExpr 0x2a7b4aee3e8 <col:64, col:72> 'limb':'int'
|   |     | `-CStyleCastExpr 0x2a7b4aee3c0 <col:65, col:71> 'limb':'int' <NoOp>
|   |     |   `-IntegerLiteral 0x2a7b4aee388 <col:71> 'int' 1
|   |     `-IntegerLiteral 0x2a7b4aee408 <col:77> 'int' 4
|   `-BinaryOperator 0x2a7b4aee768 <col:22, col:78> 'int' '+'
|     |-BinaryOperator 0x2a7b4aee660 <col:22, col:59> 'int' '-'
|     | |-ParenExpr 0x2a7b4aee558 <col:22, col:39> 'limb':'int'
|     | | `-BinaryOperator 0x2a7b4aee538 <col:23, col:36> 'limb':'int' '<<'
|     | |   |-ParenExpr 0x2a7b4aee4f0 <col:23, col:31> 'limb':'int'
|     | |   | `-CStyleCastExpr 0x2a7b4aee4c8 <col:24, col:30> 'limb':'int' <NoOp>
|     | |   |   `-IntegerLiteral 0x2a7b4aee490 <col:30> 'int' 1
|     | |   `-IntegerLiteral 0x2a7b4aee510 <col:36> 'int' 100
|     | `-ParenExpr 0x2a7b4aee640 <col:43, col:59> 'limb':'int'
|     |   `-BinaryOperator 0x2a7b4aee620 <col:44, col:57> 'limb':'int' '<<'
|     |     |-ParenExpr 0x2a7b4aee5d8 <col:44, col:52> 'limb':'int'
|     |     | `-CStyleCastExpr 0x2a7b4aee5b0 <col:45, col:51> 'limb':'int' <NoOp>
|     |     |   `-IntegerLiteral 0x2a7b4aee578 <col:51> 'int' 1
|     |     `-IntegerLiteral 0x2a7b4aee5f8 <col:57> 'int' 36
|     `-ParenExpr 0x2a7b4aee748 <col:63, col:78> 'limb':'int'
|       `-BinaryOperator 0x2a7b4aee728 <col:64, col:77> 'limb':'int' '<<'
|         |-ParenExpr 0x2a7b4aee6e0 <col:64, col:72> 'limb':'int'
|         | `-CStyleCastExpr 0x2a7b4aee6b8 <col:65, col:71> 'limb':'int' <NoOp>
|         |   `-IntegerLiteral 0x2a7b4aee680 <col:71> 'int' 1
|         `-IntegerLiteral 0x2a7b4aee700 <col:77> 'int' 4
|-FunctionDecl 0x2a7b4aee9f8 <line:749:1, line:781:1> line:749:13 used felem_reduce_ 'void (limb *, const limb *)' static
| |-ParmVarDecl 0x2a7b4aee880 <col:27, col:33> col:33 used out 'limb *':'limb *'
| |-ParmVarDecl 0x2a7b4aee8f8 <col:38, col:54> col:54 used in 'const limb *':'const limb *'
| `-CompoundStmt 0x2a7b4af4378 <line:750:1, line:781:1>
|   |-CompoundAssignOperator 0x2a7b4aef148 <line:763:5, col:27> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2a7b4aef028 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b4aef010 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b4aeefc8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b4aee880 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b4aeefe8 <col:9> 'int' 1
|   | `-ParenExpr 0x2a7b4aef128 <col:15, col:27> 'limb':'int'
|   |   `-BinaryOperator 0x2a7b4aef108 <col:16, col:25> 'limb':'int' '<<'
|   |     |-ImplicitCastExpr 0x2a7b4aef0f0 <col:16, col:20> 'limb':'int' <LValueToRValue>
|   |     | `-ArraySubscriptExpr 0x2a7b4aef0a8 <col:16, col:20> 'const limb':'const int' lvalue
|   |     |   |-ImplicitCastExpr 0x2a7b4aef090 <col:16> 'const limb *':'const limb *' <LValueToRValue>
|   |     |   | `-DeclRefExpr 0x2a7b4aef048 <col:16> 'const limb *':'const limb *' lvalue ParmVar 0x2a7b4aee8f8 'in' 'const limb *':'const limb *'
|   |     |   `-IntegerLiteral 0x2a7b4aef068 <col:19> 'int' 4
|   |     `-IntegerLiteral 0x2a7b4aef0c8 <col:25> 'int' 32
|   |-CompoundAssignOperator 0x2a7b4aef2f8 <line:764:5, col:27> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2a7b4aef1d8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b4aef1c0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b4aef178 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b4aee880 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b4aef198 <col:9> 'int' 3
|   | `-ParenExpr 0x2a7b4aef2d8 <col:15, col:27> 'limb':'int'
|   |   `-BinaryOperator 0x2a7b4aef2b8 <col:16, col:25> 'limb':'int' '<<'
|   |     |-ImplicitCastExpr 0x2a7b4aef2a0 <col:16, col:20> 'limb':'int' <LValueToRValue>
|   |     | `-ArraySubscriptExpr 0x2a7b4aef258 <col:16, col:20> 'const limb':'const int' lvalue
|   |     |   |-ImplicitCastExpr 0x2a7b4aef240 <col:16> 'const limb *':'const limb *' <LValueToRValue>
|   |     |   | `-DeclRefExpr 0x2a7b4aef1f8 <col:16> 'const limb *':'const limb *' lvalue ParmVar 0x2a7b4aee8f8 'in' 'const limb *':'const limb *'
|   |     |   `-IntegerLiteral 0x2a7b4aef218 <col:19> 'int' 4
|   |     `-IntegerLiteral 0x2a7b4aef278 <col:25> 'int' 32
|   |-CompoundAssignOperator 0x2a7b4aef4a8 <line:767:5, col:27> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2a7b4aef388 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b4aef370 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b4aef328 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b4aee880 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b4aef348 <col:9> 'int' 2
|   | `-ParenExpr 0x2a7b4aef488 <col:15, col:27> 'limb':'int'
|   |   `-BinaryOperator 0x2a7b4aef468 <col:16, col:25> 'limb':'int' '<<'
|   |     |-ImplicitCastExpr 0x2a7b4aef450 <col:16, col:20> 'limb':'int' <LValueToRValue>
|   |     | `-ArraySubscriptExpr 0x2a7b4aef408 <col:16, col:20> 'const limb':'const int' lvalue
|   |     |   |-ImplicitCastExpr 0x2a7b4aef3f0 <col:16> 'const limb *':'const limb *' <LValueToRValue>
|   |     |   | `-DeclRefExpr 0x2a7b4aef3a8 <col:16> 'const limb *':'const limb *' lvalue ParmVar 0x2a7b4aee8f8 'in' 'const limb *':'const limb *'
|   |     |   `-IntegerLiteral 0x2a7b4aef3c8 <col:19> 'int' 5
|   |     `-IntegerLiteral 0x2a7b4aef428 <col:25> 'int' 32
|   |-CompoundAssignOperator 0x2a7b4aef5f0 <line:770:5, col:19> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2a7b4aef538 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b4aef520 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b4aef4d8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b4aee880 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b4aef4f8 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x2a7b4aef5d8 <col:15, col:19> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x2a7b4aef5b8 <col:15, col:19> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x2a7b4aef5a0 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x2a7b4aef558 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x2a7b4aee8f8 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x2a7b4aef578 <col:18> 'int' 6
|   |-CompoundAssignOperator 0x2a7b4aef7a0 <line:771:5, col:27> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2a7b4aef680 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b4aef668 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b4aef620 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b4aee880 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b4aef640 <col:9> 'int' 0
|   | `-ParenExpr 0x2a7b4aef780 <col:15, col:27> 'limb':'int'
|   |   `-BinaryOperator 0x2a7b4aef760 <col:16, col:25> 'limb':'int' '<<'
|   |     |-ImplicitCastExpr 0x2a7b4aef748 <col:16, col:20> 'limb':'int' <LValueToRValue>
|   |     | `-ArraySubscriptExpr 0x2a7b4aef700 <col:16, col:20> 'const limb':'const int' lvalue
|   |     |   |-ImplicitCastExpr 0x2a7b4aef6e8 <col:16> 'const limb *':'const limb *' <LValueToRValue>
|   |     |   | `-DeclRefExpr 0x2a7b4aef6a0 <col:16> 'const limb *':'const limb *' lvalue ParmVar 0x2a7b4aee8f8 'in' 'const limb *':'const limb *'
|   |     |   `-IntegerLiteral 0x2a7b4aef6c0 <col:19> 'int' 6
|   |     `-IntegerLiteral 0x2a7b4aef720 <col:25> 'int' 32
|   |-CompoundAssignOperator 0x2a7b4af3990 <line:772:5, col:27> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2a7b4aef830 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b4aef818 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b4aef7d0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b4aee880 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b4aef7f0 <col:9> 'int' 1
|   | `-ParenExpr 0x2a7b4af3970 <col:15, col:27> 'limb':'int'
|   |   `-BinaryOperator 0x2a7b4af3950 <col:16, col:25> 'limb':'int' '<<'
|   |     |-ImplicitCastExpr 0x2a7b4af3938 <col:16, col:20> 'limb':'int' <LValueToRValue>
|   |     | `-ArraySubscriptExpr 0x2a7b4aef8b0 <col:16, col:20> 'const limb':'const int' lvalue
|   |     |   |-ImplicitCastExpr 0x2a7b4aef898 <col:16> 'const limb *':'const limb *' <LValueToRValue>
|   |     |   | `-DeclRefExpr 0x2a7b4aef850 <col:16> 'const limb *':'const limb *' lvalue ParmVar 0x2a7b4aee8f8 'in' 'const limb *':'const limb *'
|   |     |   `-IntegerLiteral 0x2a7b4aef870 <col:19> 'int' 6
|   |     `-IntegerLiteral 0x2a7b4af3910 <col:25> 'int' 33
|   |-CompoundAssignOperator 0x2a7b4af3b40 <line:773:5, col:25> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2a7b4af3a20 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b4af3a08 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b4af39c0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b4aee880 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b4af39e0 <col:9> 'int' 2
|   | `-ParenExpr 0x2a7b4af3b20 <col:15, col:25> 'int'
|   |   `-BinaryOperator 0x2a7b4af3b00 <col:16, col:24> 'int' '*'
|   |     |-ImplicitCastExpr 0x2a7b4af3ae8 <col:16, col:20> 'limb':'int' <LValueToRValue>
|   |     | `-ArraySubscriptExpr 0x2a7b4af3aa0 <col:16, col:20> 'const limb':'const int' lvalue
|   |     |   |-ImplicitCastExpr 0x2a7b4af3a88 <col:16> 'const limb *':'const limb *' <LValueToRValue>
|   |     |   | `-DeclRefExpr 0x2a7b4af3a40 <col:16> 'const limb *':'const limb *' lvalue ParmVar 0x2a7b4aee8f8 'in' 'const limb *':'const limb *'
|   |     |   `-IntegerLiteral 0x2a7b4af3a60 <col:19> 'int' 6
|   |     `-IntegerLiteral 0x2a7b4af3ac0 <col:24> 'int' 2
|   |-CompoundAssignOperator 0x2a7b4af3cf0 <line:774:5, col:27> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2a7b4af3bd0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b4af3bb8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b4af3b70 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b4aee880 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b4af3b90 <col:9> 'int' 3
|   | `-ParenExpr 0x2a7b4af3cd0 <col:15, col:27> 'limb':'int'
|   |   `-BinaryOperator 0x2a7b4af3cb0 <col:16, col:25> 'limb':'int' '<<'
|   |     |-ImplicitCastExpr 0x2a7b4af3c98 <col:16, col:20> 'limb':'int' <LValueToRValue>
|   |     | `-ArraySubscriptExpr 0x2a7b4af3c50 <col:16, col:20> 'const limb':'const int' lvalue
|   |     |   |-ImplicitCastExpr 0x2a7b4af3c38 <col:16> 'const limb *':'const limb *' <LValueToRValue>
|   |     |   | `-DeclRefExpr 0x2a7b4af3bf0 <col:16> 'const limb *':'const limb *' lvalue ParmVar 0x2a7b4aee8f8 'in' 'const limb *':'const limb *'
|   |     |   `-IntegerLiteral 0x2a7b4af3c10 <col:19> 'int' 6
|   |     `-IntegerLiteral 0x2a7b4af3c70 <col:25> 'int' 32
|   |-CompoundAssignOperator 0x2a7b4af3e38 <line:777:5, col:19> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2a7b4af3d80 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b4af3d68 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b4af3d20 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b4aee880 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b4af3d40 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x2a7b4af3e20 <col:15, col:19> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x2a7b4af3e00 <col:15, col:19> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x2a7b4af3de8 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x2a7b4af3da0 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x2a7b4aee8f8 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x2a7b4af3dc0 <col:18> 'int' 7
|   |-CompoundAssignOperator 0x2a7b4af3fe8 <line:778:5, col:27> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2a7b4af3ec8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b4af3eb0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b4af3e68 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b4aee880 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b4af3e88 <col:9> 'int' 0
|   | `-ParenExpr 0x2a7b4af3fc8 <col:15, col:27> 'limb':'int'
|   |   `-BinaryOperator 0x2a7b4af3fa8 <col:16, col:25> 'limb':'int' '<<'
|   |     |-ImplicitCastExpr 0x2a7b4af3f90 <col:16, col:20> 'limb':'int' <LValueToRValue>
|   |     | `-ArraySubscriptExpr 0x2a7b4af3f48 <col:16, col:20> 'const limb':'const int' lvalue
|   |     |   |-ImplicitCastExpr 0x2a7b4af3f30 <col:16> 'const limb *':'const limb *' <LValueToRValue>
|   |     |   | `-DeclRefExpr 0x2a7b4af3ee8 <col:16> 'const limb *':'const limb *' lvalue ParmVar 0x2a7b4aee8f8 'in' 'const limb *':'const limb *'
|   |     |   `-IntegerLiteral 0x2a7b4af3f08 <col:19> 'int' 7
|   |     `-IntegerLiteral 0x2a7b4af3f68 <col:25> 'int' 32
|   |-CompoundAssignOperator 0x2a7b4af4198 <line:779:5, col:27> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2a7b4af4078 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b4af4060 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b4af4018 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b4aee880 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b4af4038 <col:9> 'int' 2
|   | `-ParenExpr 0x2a7b4af4178 <col:15, col:27> 'limb':'int'
|   |   `-BinaryOperator 0x2a7b4af4158 <col:16, col:25> 'limb':'int' '<<'
|   |     |-ImplicitCastExpr 0x2a7b4af4140 <col:16, col:20> 'limb':'int' <LValueToRValue>
|   |     | `-ArraySubscriptExpr 0x2a7b4af40f8 <col:16, col:20> 'const limb':'const int' lvalue
|   |     |   |-ImplicitCastExpr 0x2a7b4af40e0 <col:16> 'const limb *':'const limb *' <LValueToRValue>
|   |     |   | `-DeclRefExpr 0x2a7b4af4098 <col:16> 'const limb *':'const limb *' lvalue ParmVar 0x2a7b4aee8f8 'in' 'const limb *':'const limb *'
|   |     |   `-IntegerLiteral 0x2a7b4af40b8 <col:19> 'int' 7
|   |     `-IntegerLiteral 0x2a7b4af4118 <col:25> 'int' 33
|   `-CompoundAssignOperator 0x2a7b4af4348 <line:780:5, col:25> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|     |-ArraySubscriptExpr 0x2a7b4af4228 <col:5, col:10> 'limb':'int' lvalue
|     | |-ImplicitCastExpr 0x2a7b4af4210 <col:5> 'limb *':'limb *' <LValueToRValue>
|     | | `-DeclRefExpr 0x2a7b4af41c8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b4aee880 'out' 'limb *':'limb *'
|     | `-IntegerLiteral 0x2a7b4af41e8 <col:9> 'int' 3
|     `-ParenExpr 0x2a7b4af4328 <col:15, col:25> 'int'
|       `-BinaryOperator 0x2a7b4af4308 <col:16, col:24> 'int' '*'
|         |-ImplicitCastExpr 0x2a7b4af42f0 <col:16, col:20> 'limb':'int' <LValueToRValue>
|         | `-ArraySubscriptExpr 0x2a7b4af42a8 <col:16, col:20> 'const limb':'const int' lvalue
|         |   |-ImplicitCastExpr 0x2a7b4af4290 <col:16> 'const limb *':'const limb *' <LValueToRValue>
|         |   | `-DeclRefExpr 0x2a7b4af4248 <col:16> 'const limb *':'const limb *' lvalue ParmVar 0x2a7b4aee8f8 'in' 'const limb *':'const limb *'
|         |   `-IntegerLiteral 0x2a7b4af4268 <col:19> 'int' 7
|         `-IntegerLiteral 0x2a7b4af42c8 <col:24> 'int' 3
|-FunctionDecl 0x2a7b4af4538 <line:792:1, line:812:1> line:792:13 used felem_reduce 'void (limb *, const limb *)' static
| |-ParmVarDecl 0x2a7b4af43f8 <col:26, col:32> col:32 used out 'limb *':'limb *'
| |-ParmVarDecl 0x2a7b4af4470 <col:37, col:53> col:53 used in 'const limb *':'const limb *'
| `-CompoundStmt 0x2a7b4af4f40 <line:793:1, line:812:1>
|   |-BinaryOperator 0x2a7b4af47d0 <line:794:5, col:31> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2a7b4af4660 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b4af4648 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b4af4600 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b4af43f8 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b4af4620 <col:9> 'int' 0
|   | `-BinaryOperator 0x2a7b4af47b0 <col:14, col:31> 'int' '+'
|   |   |-ImplicitCastExpr 0x2a7b4af4780 <col:14, col:23> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x2a7b4af46e0 <col:14, col:23> 'const limb':'const int' lvalue
|   |   |   |-ImplicitCastExpr 0x2a7b4af46c8 <col:14> 'const limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x2a7b4af4680 <col:14> 'const felem':'limb const[4]' lvalue Var 0x2a7b4aedd50 'zero100' 'const felem':'limb const[4]'
|   |   |   `-IntegerLiteral 0x2a7b4af46a0 <col:22> 'int' 0
|   |   `-ImplicitCastExpr 0x2a7b4af4798 <col:27, col:31> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x2a7b4af4760 <col:27, col:31> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x2a7b4af4748 <col:27> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x2a7b4af4700 <col:27> 'const limb *':'const limb *' lvalue ParmVar 0x2a7b4af4470 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x2a7b4af4720 <col:30> 'int' 0
|   |-BinaryOperator 0x2a7b4af4a08 <line:795:5, col:31> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2a7b4af4898 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b4af4880 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b4af4838 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b4af43f8 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b4af4858 <col:9> 'int' 1
|   | `-BinaryOperator 0x2a7b4af49e8 <col:14, col:31> 'int' '+'
|   |   |-ImplicitCastExpr 0x2a7b4af49b8 <col:14, col:23> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x2a7b4af4918 <col:14, col:23> 'const limb':'const int' lvalue
|   |   |   |-ImplicitCastExpr 0x2a7b4af4900 <col:14> 'const limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x2a7b4af48b8 <col:14> 'const felem':'limb const[4]' lvalue Var 0x2a7b4aedd50 'zero100' 'const felem':'limb const[4]'
|   |   |   `-IntegerLiteral 0x2a7b4af48d8 <col:22> 'int' 1
|   |   `-ImplicitCastExpr 0x2a7b4af49d0 <col:27, col:31> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x2a7b4af4998 <col:27, col:31> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x2a7b4af4980 <col:27> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x2a7b4af4938 <col:27> 'const limb *':'const limb *' lvalue ParmVar 0x2a7b4af4470 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x2a7b4af4958 <col:30> 'int' 1
|   |-BinaryOperator 0x2a7b4af4bf8 <line:796:5, col:31> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2a7b4af4a88 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b4af4a70 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b4af4a28 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b4af43f8 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b4af4a48 <col:9> 'int' 2
|   | `-BinaryOperator 0x2a7b4af4bd8 <col:14, col:31> 'int' '+'
|   |   |-ImplicitCastExpr 0x2a7b4af4ba8 <col:14, col:23> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x2a7b4af4b08 <col:14, col:23> 'const limb':'const int' lvalue
|   |   |   |-ImplicitCastExpr 0x2a7b4af4af0 <col:14> 'const limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x2a7b4af4aa8 <col:14> 'const felem':'limb const[4]' lvalue Var 0x2a7b4aedd50 'zero100' 'const felem':'limb const[4]'
|   |   |   `-IntegerLiteral 0x2a7b4af4ac8 <col:22> 'int' 2
|   |   `-ImplicitCastExpr 0x2a7b4af4bc0 <col:27, col:31> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x2a7b4af4b88 <col:27, col:31> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x2a7b4af4b70 <col:27> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x2a7b4af4b28 <col:27> 'const limb *':'const limb *' lvalue ParmVar 0x2a7b4af4470 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x2a7b4af4b48 <col:30> 'int' 2
|   |-BinaryOperator 0x2a7b4af4de8 <line:797:5, col:31> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2a7b4af4c78 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b4af4c60 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b4af4c18 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b4af43f8 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b4af4c38 <col:9> 'int' 3
|   | `-BinaryOperator 0x2a7b4af4dc8 <col:14, col:31> 'int' '+'
|   |   |-ImplicitCastExpr 0x2a7b4af4d98 <col:14, col:23> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x2a7b4af4cf8 <col:14, col:23> 'const limb':'const int' lvalue
|   |   |   |-ImplicitCastExpr 0x2a7b4af4ce0 <col:14> 'const limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x2a7b4af4c98 <col:14> 'const felem':'limb const[4]' lvalue Var 0x2a7b4aedd50 'zero100' 'const felem':'limb const[4]'
|   |   |   `-IntegerLiteral 0x2a7b4af4cb8 <col:22> 'int' 3
|   |   `-ImplicitCastExpr 0x2a7b4af4db0 <col:27, col:31> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x2a7b4af4d78 <col:27, col:31> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x2a7b4af4d60 <col:27> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x2a7b4af4d18 <col:27> 'const limb *':'const limb *' lvalue ParmVar 0x2a7b4af4470 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x2a7b4af4d38 <col:30> 'int' 3
|   `-CallExpr 0x2a7b4af4ee0 <line:799:5, col:26> 'void'
|     |-ImplicitCastExpr 0x2a7b4af4ec8 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x2a7b4af4e08 <col:5> 'void (limb *, const limb *)' Function 0x2a7b4aee9f8 'felem_reduce_' 'void (limb *, const limb *)'
|     |-ImplicitCastExpr 0x2a7b4af4f10 <col:19> 'limb *':'limb *' <LValueToRValue>
|     | `-DeclRefExpr 0x2a7b4af4e28 <col:19> 'limb *':'limb *' lvalue ParmVar 0x2a7b4af43f8 'out' 'limb *':'limb *'
|     `-ImplicitCastExpr 0x2a7b4af4f28 <col:24> 'const limb *':'const limb *' <LValueToRValue>
|       `-DeclRefExpr 0x2a7b4af4e48 <col:24> 'const limb *':'const limb *' lvalue ParmVar 0x2a7b4af4470 'in' 'const limb *':'const limb *'
|-FunctionDecl 0x2a7b4af50c8 <line:821:1, line:841:1> line:821:13 used felem_reduce_zero105 'void (limb *, const limb *)' static
| |-ParmVarDecl 0x2a7b4af4f88 <col:34, col:40> col:40 used out 'limb *':'limb *'
| |-ParmVarDecl 0x2a7b4af5000 <col:45, col:61> col:61 used in 'const limb *':'const limb *'
| `-CompoundStmt 0x2a7b4aefa08 <line:822:1, line:841:1>
|   |-BinaryOperator 0x2a7b4af5360 <line:823:5, col:31> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2a7b4af51f0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b4af51d8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b4af5190 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b4af4f88 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b4af51b0 <col:9> 'int' 0
|   | `-BinaryOperator 0x2a7b4af5340 <col:14, col:31> 'int' '+'
|   |   |-ImplicitCastExpr 0x2a7b4af5310 <col:14, col:23> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x2a7b4af5270 <col:14, col:23> 'const limb':'const int' lvalue
|   |   |   |-ImplicitCastExpr 0x2a7b4af5258 <col:14> 'const limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x2a7b4af5210 <col:14> 'const felem':'limb const[4]' lvalue Var 0x2a7b49f6658 'zero105' 'const felem':'limb const[4]'
|   |   |   `-IntegerLiteral 0x2a7b4af5230 <col:22> 'int' 0
|   |   `-ImplicitCastExpr 0x2a7b4af5328 <col:27, col:31> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x2a7b4af52f0 <col:27, col:31> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x2a7b4af52d8 <col:27> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x2a7b4af5290 <col:27> 'const limb *':'const limb *' lvalue ParmVar 0x2a7b4af5000 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x2a7b4af52b0 <col:30> 'int' 0
|   |-BinaryOperator 0x2a7b4af5550 <line:824:5, col:31> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2a7b4af53e0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b4af53c8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b4af5380 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b4af4f88 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b4af53a0 <col:9> 'int' 1
|   | `-BinaryOperator 0x2a7b4af5530 <col:14, col:31> 'int' '+'
|   |   |-ImplicitCastExpr 0x2a7b4af5500 <col:14, col:23> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x2a7b4af5460 <col:14, col:23> 'const limb':'const int' lvalue
|   |   |   |-ImplicitCastExpr 0x2a7b4af5448 <col:14> 'const limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x2a7b4af5400 <col:14> 'const felem':'limb const[4]' lvalue Var 0x2a7b49f6658 'zero105' 'const felem':'limb const[4]'
|   |   |   `-IntegerLiteral 0x2a7b4af5420 <col:22> 'int' 1
|   |   `-ImplicitCastExpr 0x2a7b4af5518 <col:27, col:31> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x2a7b4af54e0 <col:27, col:31> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x2a7b4af54c8 <col:27> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x2a7b4af5480 <col:27> 'const limb *':'const limb *' lvalue ParmVar 0x2a7b4af5000 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x2a7b4af54a0 <col:30> 'int' 1
|   |-BinaryOperator 0x2a7b4af5740 <line:825:5, col:31> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2a7b4af55d0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b4af55b8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b4af5570 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b4af4f88 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b4af5590 <col:9> 'int' 2
|   | `-BinaryOperator 0x2a7b4af5720 <col:14, col:31> 'int' '+'
|   |   |-ImplicitCastExpr 0x2a7b4af56f0 <col:14, col:23> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x2a7b4af5650 <col:14, col:23> 'const limb':'const int' lvalue
|   |   |   |-ImplicitCastExpr 0x2a7b4af5638 <col:14> 'const limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x2a7b4af55f0 <col:14> 'const felem':'limb const[4]' lvalue Var 0x2a7b49f6658 'zero105' 'const felem':'limb const[4]'
|   |   |   `-IntegerLiteral 0x2a7b4af5610 <col:22> 'int' 2
|   |   `-ImplicitCastExpr 0x2a7b4af5708 <col:27, col:31> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x2a7b4af56d0 <col:27, col:31> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x2a7b4af56b8 <col:27> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x2a7b4af5670 <col:27> 'const limb *':'const limb *' lvalue ParmVar 0x2a7b4af5000 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x2a7b4af5690 <col:30> 'int' 2
|   |-BinaryOperator 0x2a7b4aef910 <line:826:5, col:31> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2a7b4af57c0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2a7b4af57a8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b4af5760 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2a7b4af4f88 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2a7b4af5780 <col:9> 'int' 3
|   | `-BinaryOperator 0x2a7b4aef8f0 <col:14, col:31> 'int' '+'
|   |   |-ImplicitCastExpr 0x2a7b4af58e0 <col:14, col:23> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x2a7b4af5840 <col:14, col:23> 'const limb':'const int' lvalue
|   |   |   |-ImplicitCastExpr 0x2a7b4af5828 <col:14> 'const limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x2a7b4af57e0 <col:14> 'const felem':'limb const[4]' lvalue Var 0x2a7b49f6658 'zero105' 'const felem':'limb const[4]'
|   |   |   `-IntegerLiteral 0x2a7b4af5800 <col:22> 'int' 3
|   |   `-ImplicitCastExpr 0x2a7b4af58f8 <col:27, col:31> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x2a7b4af58c0 <col:27, col:31> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x2a7b4af58a8 <col:27> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x2a7b4af5860 <col:27> 'const limb *':'const limb *' lvalue ParmVar 0x2a7b4af5000 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x2a7b4af5880 <col:30> 'int' 3
|   `-CallExpr 0x2a7b4aef9a8 <line:828:5, col:26> 'void'
|     |-ImplicitCastExpr 0x2a7b4aef990 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x2a7b4aef930 <col:5> 'void (limb *, const limb *)' Function 0x2a7b4aee9f8 'felem_reduce_' 'void (limb *, const limb *)'
|     |-ImplicitCastExpr 0x2a7b4aef9d8 <col:19> 'limb *':'limb *' <LValueToRValue>
|     | `-DeclRefExpr 0x2a7b4aef950 <col:19> 'limb *':'limb *' lvalue ParmVar 0x2a7b4af4f88 'out' 'limb *':'limb *'
|     `-ImplicitCastExpr 0x2a7b4aef9f0 <col:24> 'const limb *':'const limb *' <LValueToRValue>
|       `-DeclRefExpr 0x2a7b4aef970 <col:24> 'const limb *':'const limb *' lvalue ParmVar 0x2a7b4af5000 'in' 'const limb *':'const limb *'
|-FunctionDecl 0x2a7b4aefca8 <line:847:1, line:853:1> line:847:13 used subtract_u64 'void (u64 *, u64 *, u64)' static
| |-ParmVarDecl 0x2a7b4aefa50 <col:26, col:31> col:31 used result 'u64 *'
| |-ParmVarDecl 0x2a7b4aefac8 <col:39, col:44> col:44 used carry 'u64 *'
| |-ParmVarDecl 0x2a7b4aefb40 <col:51, col:55> col:55 used v 'u64':'unsigned long long'
| `-CompoundStmt 0x2a7b4aefe88 <line:848:1, line:853:1>
|-FunctionDecl 0x2a7b4aeffe8 <line:859:1, line:920:1> line:859:13 used felem_contract 'void (u64 *, const limb *)' static
| |-ParmVarDecl 0x2a7b4aefea8 <col:28, col:39> col:39 used out 'u64 *':'u64 *'
| |-ParmVarDecl 0x2a7b4aeff20 <col:44, col:56> col:56 used in 'const limb *':'const limb *'
| `-CompoundStmt 0x2a7b4aea2a8 <line:860:1, line:920:1>
|   |-DeclStmt 0x2a7b4af0130 <line:861:5, col:15>
|   | `-VarDecl 0x2a7b4af00c8 <col:5, col:14> col:14 used i 'unsigned int'
|   |-DeclStmt 0x2a7b4af0350 <line:862:5, col:48>
|   | |-VarDecl 0x2a7b4af0158 <col:5, col:28> col:9 used all_equal_so_far 'u64':'unsigned long long' cinit
|   | | `-ImplicitCastExpr 0x2a7b4af01e8 <col:28> 'u64':'unsigned long long' <IntegralCast>
|   | |   `-IntegerLiteral 0x2a7b4af01c0 <col:28> 'int' 0
|   | |-VarDecl 0x2a7b4af0210 <col:5, col:40> col:31 used result 'u64':'unsigned long long' cinit
|   | | `-ImplicitCastExpr 0x2a7b4af02a0 <col:40> 'u64':'unsigned long long' <IntegralCast>
|   | |   `-IntegerLiteral 0x2a7b4af0278 <col:40> 'int' 0
|   | `-VarDecl 0x2a7b4af02c8 <col:5, col:43> col:43 used carry 'u64':'unsigned long long'
|   |-CallExpr 0x2a7b4af03e0 <line:864:5, col:25> 'void'
|   | |-ImplicitCastExpr 0x2a7b4af03c8 <col:5> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4af0368 <col:5> 'void (u64 *, const limb *)' Function 0x2a7b49fd1a8 'felem_shrink' 'void (u64 *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4af0410 <col:18> 'u64 *':'u64 *' <LValueToRValue>
|   | | `-DeclRefExpr 0x2a7b4af0388 <col:18> 'u64 *':'u64 *' lvalue ParmVar 0x2a7b4aefea8 'out' 'u64 *':'u64 *'
|   | `-ImplicitCastExpr 0x2a7b4af0428 <col:23> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x2a7b4af03a8 <col:23> 'const limb *':'const limb *' lvalue ParmVar 0x2a7b4aeff20 'in' 'const limb *':'const limb *'
|   |-UnaryOperator 0x2a7b4af0478 <line:867:5, col:21> 'u64':'unsigned long long' postfix '--'
|   | `-DeclRefExpr 0x2a7b4af0440 <col:5> 'u64':'unsigned long long' lvalue Var 0x2a7b4af0158 'all_equal_so_far' 'u64':'unsigned long long'
|   |-ForStmt 0x2a7b4af1018 <line:874:5, line:898:5>
|   | |-BinaryOperator 0x2a7b4af0508 <line:874:10, col:14> 'unsigned int' '='
|   | | |-DeclRefExpr 0x2a7b4af0490 <col:10> 'unsigned int' lvalue Var 0x2a7b4af00c8 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x2a7b4af04f0 <col:14> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x2a7b4af04c8 <col:14> 'int' 3
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x2a7b4af05a0 <col:17, col:21> 'int' '<'
|   | | |-ImplicitCastExpr 0x2a7b4af0570 <col:17> 'unsigned int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b4af0528 <col:17> 'unsigned int' lvalue Var 0x2a7b4af00c8 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x2a7b4af0588 <col:21> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x2a7b4af0548 <col:21> 'int' 4
|   | |-UnaryOperator 0x2a7b4af05e0 <col:24, col:25> 'unsigned int' postfix '--'
|   | | `-DeclRefExpr 0x2a7b4af05c0 <col:24> 'unsigned int' lvalue Var 0x2a7b4af00c8 'i' 'unsigned int'
|   | `-CompoundStmt 0x2a7b4af0fb0 <col:29, line:898:5>
|   |   |-DeclStmt 0x2a7b4af0670 <line:875:9, col:18>
|   |   | `-VarDecl 0x2a7b4af0608 <col:9, col:13> col:13 used equal 'u64':'unsigned long long'
|   |   |-BinaryOperator 0x2a7b4af08b0 <line:887:9, col:34> 'u64':'unsigned long long' '='
|   |   | |-DeclRefExpr 0x2a7b4af0708 <col:9> 'u64':'unsigned long long' lvalue Var 0x2a7b4af0608 'equal' 'u64':'unsigned long long'
|   |   | `-BinaryOperator 0x2a7b4af0890 <col:17, col:34> 'unsigned long long' '^'
|   |   |   |-ImplicitCastExpr 0x2a7b4af0860 <col:17, col:25> 'u64':'unsigned long long' <LValueToRValue>
|   |   |   | `-ArraySubscriptExpr 0x2a7b4af07b0 <col:17, col:25> 'const u64':'const unsigned long long' lvalue
|   |   |   |   |-ImplicitCastExpr 0x2a7b4af0780 <col:17> 'const u64 *' <ArrayToPointerDecay>
|   |   |   |   | `-DeclRefExpr 0x2a7b4af0740 <col:17> 'const u64 [4]' lvalue Var 0x2a7b4ae6d38 'kPrime' 'const u64 [4]'
|   |   |   |   `-ImplicitCastExpr 0x2a7b4af0798 <col:24> 'unsigned int' <LValueToRValue>
|   |   |   |     `-DeclRefExpr 0x2a7b4af0760 <col:24> 'unsigned int' lvalue Var 0x2a7b4af00c8 'i' 'unsigned int'
|   |   |   `-ImplicitCastExpr 0x2a7b4af0878 <col:29, col:34> 'u64':'unsigned long long' <LValueToRValue>
|   |   |     `-ArraySubscriptExpr 0x2a7b4af0840 <col:29, col:34> 'u64':'unsigned long long' lvalue
|   |   |       |-ImplicitCastExpr 0x2a7b4af0810 <col:29> 'u64 *':'u64 *' <LValueToRValue>
|   |   |       | `-DeclRefExpr 0x2a7b4af07d0 <col:29> 'u64 *':'u64 *' lvalue ParmVar 0x2a7b4aefea8 'out' 'u64 *':'u64 *'
|   |   |       `-ImplicitCastExpr 0x2a7b4af0828 <col:33> 'unsigned int' <LValueToRValue>
|   |   |         `-DeclRefExpr 0x2a7b4af07f0 <col:33> 'unsigned int' lvalue Var 0x2a7b4af00c8 'i' 'unsigned int'
|   |   |-UnaryOperator 0x2a7b4af08f0 <line:888:9, col:14> 'u64':'unsigned long long' postfix '--'
|   |   | `-DeclRefExpr 0x2a7b4af08d0 <col:9> 'u64':'unsigned long long' lvalue Var 0x2a7b4af0608 'equal' 'u64':'unsigned long long'
|   |   |-CompoundAssignOperator 0x2a7b4af09a8 <line:889:9, col:27> 'u64':'unsigned long long' '&=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |   | |-DeclRefExpr 0x2a7b4af0908 <col:9> 'u64':'unsigned long long' lvalue Var 0x2a7b4af0608 'equal' 'u64':'unsigned long long'
|   |   | `-BinaryOperator 0x2a7b4af0988 <col:18, col:27> 'u64':'unsigned long long' '<<'
|   |   |   |-ImplicitCastExpr 0x2a7b4af0970 <col:18> 'u64':'unsigned long long' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x2a7b4af0928 <col:18> 'u64':'unsigned long long' lvalue Var 0x2a7b4af0608 'equal' 'u64':'unsigned long long'
|   |   |   `-IntegerLiteral 0x2a7b4af0948 <col:27> 'int' 32
|   |   |-CompoundAssignOperator 0x2a7b4af0a78 <line:890:9, col:27> 'u64':'unsigned long long' '&=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |   | |-DeclRefExpr 0x2a7b4af09d8 <col:9> 'u64':'unsigned long long' lvalue Var 0x2a7b4af0608 'equal' 'u64':'unsigned long long'
|   |   | `-BinaryOperator 0x2a7b4af0a58 <col:18, col:27> 'u64':'unsigned long long' '<<'
|   |   |   |-ImplicitCastExpr 0x2a7b4af0a40 <col:18> 'u64':'unsigned long long' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x2a7b4af09f8 <col:18> 'u64':'unsigned long long' lvalue Var 0x2a7b4af0608 'equal' 'u64':'unsigned long long'
|   |   |   `-IntegerLiteral 0x2a7b4af0a18 <col:27> 'int' 16
|   |   |-CompoundAssignOperator 0x2a7b4af0b48 <line:891:9, col:27> 'u64':'unsigned long long' '&=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |   | |-DeclRefExpr 0x2a7b4af0aa8 <col:9> 'u64':'unsigned long long' lvalue Var 0x2a7b4af0608 'equal' 'u64':'unsigned long long'
|   |   | `-BinaryOperator 0x2a7b4af0b28 <col:18, col:27> 'u64':'unsigned long long' '<<'
|   |   |   |-ImplicitCastExpr 0x2a7b4af0b10 <col:18> 'u64':'unsigned long long' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x2a7b4af0ac8 <col:18> 'u64':'unsigned long long' lvalue Var 0x2a7b4af0608 'equal' 'u64':'unsigned long long'
|   |   |   `-IntegerLiteral 0x2a7b4af0ae8 <col:27> 'int' 8
|   |   |-CompoundAssignOperator 0x2a7b4af0c18 <line:892:9, col:27> 'u64':'unsigned long long' '&=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |   | |-DeclRefExpr 0x2a7b4af0b78 <col:9> 'u64':'unsigned long long' lvalue Var 0x2a7b4af0608 'equal' 'u64':'unsigned long long'
|   |   | `-BinaryOperator 0x2a7b4af0bf8 <col:18, col:27> 'u64':'unsigned long long' '<<'
|   |   |   |-ImplicitCastExpr 0x2a7b4af0be0 <col:18> 'u64':'unsigned long long' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x2a7b4af0b98 <col:18> 'u64':'unsigned long long' lvalue Var 0x2a7b4af0608 'equal' 'u64':'unsigned long long'
|   |   |   `-IntegerLiteral 0x2a7b4af0bb8 <col:27> 'int' 4
|   |   |-CompoundAssignOperator 0x2a7b4af0ce8 <line:893:9, col:27> 'u64':'unsigned long long' '&=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |   | |-DeclRefExpr 0x2a7b4af0c48 <col:9> 'u64':'unsigned long long' lvalue Var 0x2a7b4af0608 'equal' 'u64':'unsigned long long'
|   |   | `-BinaryOperator 0x2a7b4af0cc8 <col:18, col:27> 'u64':'unsigned long long' '<<'
|   |   |   |-ImplicitCastExpr 0x2a7b4af0cb0 <col:18> 'u64':'unsigned long long' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x2a7b4af0c68 <col:18> 'u64':'unsigned long long' lvalue Var 0x2a7b4af0608 'equal' 'u64':'unsigned long long'
|   |   |   `-IntegerLiteral 0x2a7b4af0c88 <col:27> 'int' 2
|   |   |-CompoundAssignOperator 0x2a7b4af0db8 <line:894:9, col:27> 'u64':'unsigned long long' '&=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |   | |-DeclRefExpr 0x2a7b4af0d18 <col:9> 'u64':'unsigned long long' lvalue Var 0x2a7b4af0608 'equal' 'u64':'unsigned long long'
|   |   | `-BinaryOperator 0x2a7b4af0d98 <col:18, col:27> 'u64':'unsigned long long' '<<'
|   |   |   |-ImplicitCastExpr 0x2a7b4af0d80 <col:18> 'u64':'unsigned long long' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x2a7b4af0d38 <col:18> 'u64':'unsigned long long' lvalue Var 0x2a7b4af0608 'equal' 'u64':'unsigned long long'
|   |   |   `-IntegerLiteral 0x2a7b4af0d58 <col:27> 'int' 1
|   |   |-BinaryOperator 0x2a7b4af0f08 <line:895:9, col:33> 'u64':'unsigned long long' '='
|   |   | |-DeclRefExpr 0x2a7b4af0de8 <col:9> 'u64':'unsigned long long' lvalue Var 0x2a7b4af0608 'equal' 'u64':'unsigned long long'
|   |   | `-BinaryOperator 0x2a7b4af0ee8 <col:17, col:33> 'unsigned long long' '-'
|   |   |   |-ImplicitCastExpr 0x2a7b4af0ed0 <col:17> 'unsigned long long' <IntegralCast>
|   |   |   | `-IntegerLiteral 0x2a7b4af0e08 <col:17> 'int' 0
|   |   |   `-ParenExpr 0x2a7b4af0eb0 <col:21, col:33> 'u64':'unsigned long long'
|   |   |     `-BinaryOperator 0x2a7b4af0e90 <col:22, col:31> 'u64':'unsigned long long' '>>'
|   |   |       |-ImplicitCastExpr 0x2a7b4af0e78 <col:22> 'u64':'unsigned long long' <LValueToRValue>
|   |   |       | `-DeclRefExpr 0x2a7b4af0e30 <col:22> 'u64':'unsigned long long' lvalue Var 0x2a7b4af0608 'equal' 'u64':'unsigned long long'
|   |   |       `-IntegerLiteral 0x2a7b4af0e50 <col:31> 'int' 63
|   |   `-CompoundAssignOperator 0x2a7b4af0f80 <line:897:9, col:29> 'u64':'unsigned long long' '&=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |     |-DeclRefExpr 0x2a7b4af0f28 <col:9> 'u64':'unsigned long long' lvalue Var 0x2a7b4af0158 'all_equal_so_far' 'u64':'unsigned long long'
|   |     `-ImplicitCastExpr 0x2a7b4af0f68 <col:29> 'u64':'unsigned long long' <LValueToRValue>
|   |       `-DeclRefExpr 0x2a7b4af0f48 <col:29> 'u64':'unsigned long long' lvalue Var 0x2a7b4af0608 'equal' 'u64':'unsigned long long'
|   |-CompoundAssignOperator 0x2a7b4af10a8 <line:904:5, col:15> 'u64':'unsigned long long' '|=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-DeclRefExpr 0x2a7b4af1050 <col:5> 'u64':'unsigned long long' lvalue Var 0x2a7b4af0210 'result' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x2a7b4af1090 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x2a7b4af1070 <col:15> 'u64':'unsigned long long' lvalue Var 0x2a7b4af0158 'all_equal_so_far' 'u64':'unsigned long long'
|   |-CallExpr 0x2a7b4af1340 <line:907:5, col:53> 'void'
|   | |-ImplicitCastExpr 0x2a7b4af1328 <col:5> 'void (*)(u64 *, u64 *, u64)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4af10d8 <col:5> 'void (u64 *, u64 *, u64)' Function 0x2a7b4aefca8 'subtract_u64' 'void (u64 *, u64 *, u64)'
|   | |-UnaryOperator 0x2a7b4af1178 <col:18, col:24> 'u64 *' prefix '&' cannot overflow
|   | | `-ArraySubscriptExpr 0x2a7b4af1158 <col:19, col:24> 'u64':'unsigned long long' lvalue
|   | |   |-ImplicitCastExpr 0x2a7b4af1140 <col:19> 'u64 *':'u64 *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x2a7b4af10f8 <col:19> 'u64 *':'u64 *' lvalue ParmVar 0x2a7b4aefea8 'out' 'u64 *':'u64 *'
|   | |   `-IntegerLiteral 0x2a7b4af1118 <col:23> 'int' 0
|   | |-UnaryOperator 0x2a7b4af11c8 <col:27, col:28> 'u64 *' prefix '&' cannot overflow
|   | | `-DeclRefExpr 0x2a7b4af1190 <col:28> 'u64':'unsigned long long' lvalue Var 0x2a7b4af02c8 'carry' 'u64':'unsigned long long'
|   | `-BinaryOperator 0x2a7b4af12b0 <col:35, col:52> 'unsigned long long' '&'
|   |   |-ImplicitCastExpr 0x2a7b4af1280 <col:35> 'u64':'unsigned long long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x2a7b4af11e0 <col:35> 'u64':'unsigned long long' lvalue Var 0x2a7b4af0210 'result' 'u64':'unsigned long long'
|   |   `-ImplicitCastExpr 0x2a7b4af1298 <col:44, col:52> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x2a7b4af1260 <col:44, col:52> 'const u64':'const unsigned long long' lvalue
|   |       |-ImplicitCastExpr 0x2a7b4af1248 <col:44> 'const u64 *' <ArrayToPointerDecay>
|   |       | `-DeclRefExpr 0x2a7b4af1200 <col:44> 'const u64 [4]' lvalue Var 0x2a7b4ae6d38 'kPrime' 'const u64 [4]'
|   |       `-IntegerLiteral 0x2a7b4af1220 <col:51> 'int' 0
|   |-CallExpr 0x2a7b4af14a0 <line:908:5, col:40> 'void'
|   | |-ImplicitCastExpr 0x2a7b4af1488 <col:5> 'void (*)(u64 *, u64 *, u64)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4af1378 <col:5> 'void (u64 *, u64 *, u64)' Function 0x2a7b4aefca8 'subtract_u64' 'void (u64 *, u64 *, u64)'
|   | |-UnaryOperator 0x2a7b4af1418 <col:18, col:24> 'u64 *' prefix '&' cannot overflow
|   | | `-ArraySubscriptExpr 0x2a7b4af13f8 <col:19, col:24> 'u64':'unsigned long long' lvalue
|   | |   |-ImplicitCastExpr 0x2a7b4af13e0 <col:19> 'u64 *':'u64 *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x2a7b4af1398 <col:19> 'u64 *':'u64 *' lvalue ParmVar 0x2a7b4aefea8 'out' 'u64 *':'u64 *'
|   | |   `-IntegerLiteral 0x2a7b4af13b8 <col:23> 'int' 1
|   | |-UnaryOperator 0x2a7b4af1450 <col:27, col:28> 'u64 *' prefix '&' cannot overflow
|   | | `-DeclRefExpr 0x2a7b4af1430 <col:28> 'u64':'unsigned long long' lvalue Var 0x2a7b4af02c8 'carry' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x2a7b4af14d8 <col:35> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x2a7b4af1468 <col:35> 'u64':'unsigned long long' lvalue Var 0x2a7b4af02c8 'carry' 'u64':'unsigned long long'
|   |-CallExpr 0x2a7b4af1618 <line:909:5, col:40> 'void'
|   | |-ImplicitCastExpr 0x2a7b4af1600 <col:5> 'void (*)(u64 *, u64 *, u64)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4af14f0 <col:5> 'void (u64 *, u64 *, u64)' Function 0x2a7b4aefca8 'subtract_u64' 'void (u64 *, u64 *, u64)'
|   | |-UnaryOperator 0x2a7b4af1590 <col:18, col:24> 'u64 *' prefix '&' cannot overflow
|   | | `-ArraySubscriptExpr 0x2a7b4af1570 <col:19, col:24> 'u64':'unsigned long long' lvalue
|   | |   |-ImplicitCastExpr 0x2a7b4af1558 <col:19> 'u64 *':'u64 *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x2a7b4af1510 <col:19> 'u64 *':'u64 *' lvalue ParmVar 0x2a7b4aefea8 'out' 'u64 *':'u64 *'
|   | |   `-IntegerLiteral 0x2a7b4af1530 <col:23> 'int' 2
|   | |-UnaryOperator 0x2a7b4af15c8 <col:27, col:28> 'u64 *' prefix '&' cannot overflow
|   | | `-DeclRefExpr 0x2a7b4af15a8 <col:28> 'u64':'unsigned long long' lvalue Var 0x2a7b4af02c8 'carry' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x2a7b4af1650 <col:35> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x2a7b4af15e0 <col:35> 'u64':'unsigned long long' lvalue Var 0x2a7b4af02c8 'carry' 'u64':'unsigned long long'
|   |-CallExpr 0x2a7b4af1790 <line:910:5, col:40> 'void'
|   | |-ImplicitCastExpr 0x2a7b4af1778 <col:5> 'void (*)(u64 *, u64 *, u64)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4af1668 <col:5> 'void (u64 *, u64 *, u64)' Function 0x2a7b4aefca8 'subtract_u64' 'void (u64 *, u64 *, u64)'
|   | |-UnaryOperator 0x2a7b4af1708 <col:18, col:24> 'u64 *' prefix '&' cannot overflow
|   | | `-ArraySubscriptExpr 0x2a7b4af16e8 <col:19, col:24> 'u64':'unsigned long long' lvalue
|   | |   |-ImplicitCastExpr 0x2a7b4af16d0 <col:19> 'u64 *':'u64 *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x2a7b4af1688 <col:19> 'u64 *':'u64 *' lvalue ParmVar 0x2a7b4aefea8 'out' 'u64 *':'u64 *'
|   | |   `-IntegerLiteral 0x2a7b4af16a8 <col:23> 'int' 3
|   | |-UnaryOperator 0x2a7b4af1740 <col:27, col:28> 'u64 *' prefix '&' cannot overflow
|   | | `-DeclRefExpr 0x2a7b4af1720 <col:28> 'u64':'unsigned long long' lvalue Var 0x2a7b4af02c8 'carry' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x2a7b4af17c8 <col:35> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x2a7b4af1758 <col:35> 'u64':'unsigned long long' lvalue Var 0x2a7b4af02c8 'carry' 'u64':'unsigned long long'
|   |-CallExpr 0x2a7b4ae99a8 <line:912:5, col:53> 'void'
|   | |-ImplicitCastExpr 0x2a7b4ae9990 <col:5> 'void (*)(u64 *, u64 *, u64)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4af17e0 <col:5> 'void (u64 *, u64 *, u64)' Function 0x2a7b4aefca8 'subtract_u64' 'void (u64 *, u64 *, u64)'
|   | |-UnaryOperator 0x2a7b4af1880 <col:18, col:24> 'u64 *' prefix '&' cannot overflow
|   | | `-ArraySubscriptExpr 0x2a7b4af1860 <col:19, col:24> 'u64':'unsigned long long' lvalue
|   | |   |-ImplicitCastExpr 0x2a7b4af1848 <col:19> 'u64 *':'u64 *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x2a7b4af1800 <col:19> 'u64 *':'u64 *' lvalue ParmVar 0x2a7b4aefea8 'out' 'u64 *':'u64 *'
|   | |   `-IntegerLiteral 0x2a7b4af1820 <col:23> 'int' 1
|   | |-UnaryOperator 0x2a7b4af18b8 <col:27, col:28> 'u64 *' prefix '&' cannot overflow
|   | | `-DeclRefExpr 0x2a7b4af1898 <col:28> 'u64':'unsigned long long' lvalue Var 0x2a7b4af02c8 'carry' 'u64':'unsigned long long'
|   | `-BinaryOperator 0x2a7b4ae9970 <col:35, col:52> 'unsigned long long' '&'
|   |   |-ImplicitCastExpr 0x2a7b4ae9940 <col:35> 'u64':'unsigned long long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x2a7b4af18d0 <col:35> 'u64':'unsigned long long' lvalue Var 0x2a7b4af0210 'result' 'u64':'unsigned long long'
|   |   `-ImplicitCastExpr 0x2a7b4ae9958 <col:44, col:52> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x2a7b4ae9920 <col:44, col:52> 'const u64':'const unsigned long long' lvalue
|   |       |-ImplicitCastExpr 0x2a7b4ae9908 <col:44> 'const u64 *' <ArrayToPointerDecay>
|   |       | `-DeclRefExpr 0x2a7b4ae98c0 <col:44> 'const u64 [4]' lvalue Var 0x2a7b4ae6d38 'kPrime' 'const u64 [4]'
|   |       `-IntegerLiteral 0x2a7b4ae98e0 <col:51> 'int' 1
|   |-CallExpr 0x2a7b4ae9b08 <line:913:5, col:40> 'void'
|   | |-ImplicitCastExpr 0x2a7b4ae9af0 <col:5> 'void (*)(u64 *, u64 *, u64)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4ae99e0 <col:5> 'void (u64 *, u64 *, u64)' Function 0x2a7b4aefca8 'subtract_u64' 'void (u64 *, u64 *, u64)'
|   | |-UnaryOperator 0x2a7b4ae9a80 <col:18, col:24> 'u64 *' prefix '&' cannot overflow
|   | | `-ArraySubscriptExpr 0x2a7b4ae9a60 <col:19, col:24> 'u64':'unsigned long long' lvalue
|   | |   |-ImplicitCastExpr 0x2a7b4ae9a48 <col:19> 'u64 *':'u64 *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x2a7b4ae9a00 <col:19> 'u64 *':'u64 *' lvalue ParmVar 0x2a7b4aefea8 'out' 'u64 *':'u64 *'
|   | |   `-IntegerLiteral 0x2a7b4ae9a20 <col:23> 'int' 2
|   | |-UnaryOperator 0x2a7b4ae9ab8 <col:27, col:28> 'u64 *' prefix '&' cannot overflow
|   | | `-DeclRefExpr 0x2a7b4ae9a98 <col:28> 'u64':'unsigned long long' lvalue Var 0x2a7b4af02c8 'carry' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x2a7b4ae9b40 <col:35> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x2a7b4ae9ad0 <col:35> 'u64':'unsigned long long' lvalue Var 0x2a7b4af02c8 'carry' 'u64':'unsigned long long'
|   |-CallExpr 0x2a7b4ae9c80 <line:914:5, col:40> 'void'
|   | |-ImplicitCastExpr 0x2a7b4ae9c68 <col:5> 'void (*)(u64 *, u64 *, u64)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4ae9b58 <col:5> 'void (u64 *, u64 *, u64)' Function 0x2a7b4aefca8 'subtract_u64' 'void (u64 *, u64 *, u64)'
|   | |-UnaryOperator 0x2a7b4ae9bf8 <col:18, col:24> 'u64 *' prefix '&' cannot overflow
|   | | `-ArraySubscriptExpr 0x2a7b4ae9bd8 <col:19, col:24> 'u64':'unsigned long long' lvalue
|   | |   |-ImplicitCastExpr 0x2a7b4ae9bc0 <col:19> 'u64 *':'u64 *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x2a7b4ae9b78 <col:19> 'u64 *':'u64 *' lvalue ParmVar 0x2a7b4aefea8 'out' 'u64 *':'u64 *'
|   | |   `-IntegerLiteral 0x2a7b4ae9b98 <col:23> 'int' 3
|   | |-UnaryOperator 0x2a7b4ae9c30 <col:27, col:28> 'u64 *' prefix '&' cannot overflow
|   | | `-DeclRefExpr 0x2a7b4ae9c10 <col:28> 'u64':'unsigned long long' lvalue Var 0x2a7b4af02c8 'carry' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x2a7b4ae9cb8 <col:35> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x2a7b4ae9c48 <col:35> 'u64':'unsigned long long' lvalue Var 0x2a7b4af02c8 'carry' 'u64':'unsigned long long'
|   |-CallExpr 0x2a7b4ae9ec8 <line:916:5, col:53> 'void'
|   | |-ImplicitCastExpr 0x2a7b4ae9eb0 <col:5> 'void (*)(u64 *, u64 *, u64)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4ae9cd0 <col:5> 'void (u64 *, u64 *, u64)' Function 0x2a7b4aefca8 'subtract_u64' 'void (u64 *, u64 *, u64)'
|   | |-UnaryOperator 0x2a7b4ae9d70 <col:18, col:24> 'u64 *' prefix '&' cannot overflow
|   | | `-ArraySubscriptExpr 0x2a7b4ae9d50 <col:19, col:24> 'u64':'unsigned long long' lvalue
|   | |   |-ImplicitCastExpr 0x2a7b4ae9d38 <col:19> 'u64 *':'u64 *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x2a7b4ae9cf0 <col:19> 'u64 *':'u64 *' lvalue ParmVar 0x2a7b4aefea8 'out' 'u64 *':'u64 *'
|   | |   `-IntegerLiteral 0x2a7b4ae9d10 <col:23> 'int' 2
|   | |-UnaryOperator 0x2a7b4ae9da8 <col:27, col:28> 'u64 *' prefix '&' cannot overflow
|   | | `-DeclRefExpr 0x2a7b4ae9d88 <col:28> 'u64':'unsigned long long' lvalue Var 0x2a7b4af02c8 'carry' 'u64':'unsigned long long'
|   | `-BinaryOperator 0x2a7b4ae9e90 <col:35, col:52> 'unsigned long long' '&'
|   |   |-ImplicitCastExpr 0x2a7b4ae9e60 <col:35> 'u64':'unsigned long long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x2a7b4ae9dc0 <col:35> 'u64':'unsigned long long' lvalue Var 0x2a7b4af0210 'result' 'u64':'unsigned long long'
|   |   `-ImplicitCastExpr 0x2a7b4ae9e78 <col:44, col:52> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x2a7b4ae9e40 <col:44, col:52> 'const u64':'const unsigned long long' lvalue
|   |       |-ImplicitCastExpr 0x2a7b4ae9e28 <col:44> 'const u64 *' <ArrayToPointerDecay>
|   |       | `-DeclRefExpr 0x2a7b4ae9de0 <col:44> 'const u64 [4]' lvalue Var 0x2a7b4ae6d38 'kPrime' 'const u64 [4]'
|   |       `-IntegerLiteral 0x2a7b4ae9e00 <col:51> 'int' 2
|   |-CallExpr 0x2a7b4aea028 <line:917:5, col:40> 'void'
|   | |-ImplicitCastExpr 0x2a7b4aea010 <col:5> 'void (*)(u64 *, u64 *, u64)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4ae9f00 <col:5> 'void (u64 *, u64 *, u64)' Function 0x2a7b4aefca8 'subtract_u64' 'void (u64 *, u64 *, u64)'
|   | |-UnaryOperator 0x2a7b4ae9fa0 <col:18, col:24> 'u64 *' prefix '&' cannot overflow
|   | | `-ArraySubscriptExpr 0x2a7b4ae9f80 <col:19, col:24> 'u64':'unsigned long long' lvalue
|   | |   |-ImplicitCastExpr 0x2a7b4ae9f68 <col:19> 'u64 *':'u64 *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x2a7b4ae9f20 <col:19> 'u64 *':'u64 *' lvalue ParmVar 0x2a7b4aefea8 'out' 'u64 *':'u64 *'
|   | |   `-IntegerLiteral 0x2a7b4ae9f40 <col:23> 'int' 3
|   | |-UnaryOperator 0x2a7b4ae9fd8 <col:27, col:28> 'u64 *' prefix '&' cannot overflow
|   | | `-DeclRefExpr 0x2a7b4ae9fb8 <col:28> 'u64':'unsigned long long' lvalue Var 0x2a7b4af02c8 'carry' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x2a7b4aea060 <col:35> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x2a7b4ae9ff0 <col:35> 'u64':'unsigned long long' lvalue Var 0x2a7b4af02c8 'carry' 'u64':'unsigned long long'
|   `-CallExpr 0x2a7b4aea270 <line:919:5, col:53> 'void'
|     |-ImplicitCastExpr 0x2a7b4aea258 <col:5> 'void (*)(u64 *, u64 *, u64)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x2a7b4aea078 <col:5> 'void (u64 *, u64 *, u64)' Function 0x2a7b4aefca8 'subtract_u64' 'void (u64 *, u64 *, u64)'
|     |-UnaryOperator 0x2a7b4aea118 <col:18, col:24> 'u64 *' prefix '&' cannot overflow
|     | `-ArraySubscriptExpr 0x2a7b4aea0f8 <col:19, col:24> 'u64':'unsigned long long' lvalue
|     |   |-ImplicitCastExpr 0x2a7b4aea0e0 <col:19> 'u64 *':'u64 *' <LValueToRValue>
|     |   | `-DeclRefExpr 0x2a7b4aea098 <col:19> 'u64 *':'u64 *' lvalue ParmVar 0x2a7b4aefea8 'out' 'u64 *':'u64 *'
|     |   `-IntegerLiteral 0x2a7b4aea0b8 <col:23> 'int' 3
|     |-UnaryOperator 0x2a7b4aea150 <col:27, col:28> 'u64 *' prefix '&' cannot overflow
|     | `-DeclRefExpr 0x2a7b4aea130 <col:28> 'u64':'unsigned long long' lvalue Var 0x2a7b4af02c8 'carry' 'u64':'unsigned long long'
|     `-BinaryOperator 0x2a7b4aea238 <col:35, col:52> 'unsigned long long' '&'
|       |-ImplicitCastExpr 0x2a7b4aea208 <col:35> 'u64':'unsigned long long' <LValueToRValue>
|       | `-DeclRefExpr 0x2a7b4aea168 <col:35> 'u64':'unsigned long long' lvalue Var 0x2a7b4af0210 'result' 'u64':'unsigned long long'
|       `-ImplicitCastExpr 0x2a7b4aea220 <col:44, col:52> 'u64':'unsigned long long' <LValueToRValue>
|         `-ArraySubscriptExpr 0x2a7b4aea1e8 <col:44, col:52> 'const u64':'const unsigned long long' lvalue
|           |-ImplicitCastExpr 0x2a7b4aea1d0 <col:44> 'const u64 *' <ArrayToPointerDecay>
|           | `-DeclRefExpr 0x2a7b4aea188 <col:44> 'const u64 [4]' lvalue Var 0x2a7b4ae6d38 'kPrime' 'const u64 [4]'
|           `-IntegerLiteral 0x2a7b4aea1a8 <col:51> 'int' 3
|-FunctionDecl 0x2a7b4aea488 <line:922:1, line:930:1> line:922:13 used smallfelem_square_contract 'void (u64 *, const u64 *)' static
| |-ParmVarDecl 0x2a7b4aea348 <col:40, col:51> col:51 used out 'u64 *':'u64 *'
| |-ParmVarDecl 0x2a7b4aea3c0 <col:56, col:73> col:73 used in 'const u64 *':'const u64 *'
| `-CompoundStmt 0x2a7b4aea958 <line:923:1, line:930:1>
|   |-DeclStmt 0x2a7b4aea5c8 <line:924:5, col:22>
|   | `-VarDecl 0x2a7b4aea560 <col:5, col:15> col:15 used longtmp 'longfelem':'limb [8]'
|   |-DeclStmt 0x2a7b4aea658 <line:925:5, col:14>
|   | `-VarDecl 0x2a7b4aea5f0 <col:5, col:11> col:11 used tmp 'felem':'limb [4]'
|   |-CallExpr 0x2a7b4aea700 <line:927:5, col:34> 'void'
|   | |-ImplicitCastExpr 0x2a7b4aea6e8 <col:5> 'void (*)(limb *, const u64 *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4aea670 <col:5> 'void (limb *, const u64 *)' Function 0x2a7b4a018e8 'smallfelem_square' 'void (limb *, const u64 *)'
|   | |-ImplicitCastExpr 0x2a7b4aea730 <col:23> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4aea690 <col:23> 'longfelem':'limb [8]' lvalue Var 0x2a7b4aea560 'longtmp' 'longfelem':'limb [8]'
|   | `-ImplicitCastExpr 0x2a7b4aea748 <col:32> 'const u64 *':'const u64 *' <LValueToRValue>
|   |   `-DeclRefExpr 0x2a7b4aea6c8 <col:32> 'const u64 *':'const u64 *' lvalue ParmVar 0x2a7b4aea3c0 'in' 'const u64 *':'const u64 *'
|   |-CallExpr 0x2a7b4aea7f0 <line:928:5, col:30> 'void'
|   | |-ImplicitCastExpr 0x2a7b4aea7d8 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4aea760 <col:5> 'void (limb *, const limb *)' Function 0x2a7b4af4538 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4aea820 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4aea780 <col:18> 'felem':'limb [4]' lvalue Var 0x2a7b4aea5f0 'tmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x2a7b4aea850 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4aea838 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4aea7b8 <col:23> 'longfelem':'limb [8]' lvalue Var 0x2a7b4aea560 'longtmp' 'longfelem':'limb [8]'
|   `-CallExpr 0x2a7b4aea8e0 <line:929:5, col:28> 'void'
|     |-ImplicitCastExpr 0x2a7b4aea8c8 <col:5> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x2a7b4aea868 <col:5> 'void (u64 *, const limb *)' Function 0x2a7b4aeffe8 'felem_contract' 'void (u64 *, const limb *)'
|     |-ImplicitCastExpr 0x2a7b4aea910 <col:20> 'u64 *':'u64 *' <LValueToRValue>
|     | `-DeclRefExpr 0x2a7b4aea888 <col:20> 'u64 *':'u64 *' lvalue ParmVar 0x2a7b4aea348 'out' 'u64 *':'u64 *'
|     `-ImplicitCastExpr 0x2a7b4aea940 <col:25> 'const limb *':'const limb *' <NoOp>
|       `-ImplicitCastExpr 0x2a7b4aea928 <col:25> 'limb *' <ArrayToPointerDecay>
|         `-DeclRefExpr 0x2a7b4aea8a8 <col:25> 'felem':'limb [4]' lvalue Var 0x2a7b4aea5f0 'tmp' 'felem':'limb [4]'
|-FunctionDecl 0x2a7b4aeabf8 <line:932:1, line:941:1> line:932:13 used smallfelem_mul_contract 'void (u64 *, const u64 *, const u64 *)' static
| |-ParmVarDecl 0x2a7b4aea9a0 <col:37, col:48> col:48 used out 'u64 *':'u64 *'
| |-ParmVarDecl 0x2a7b4aeaa18 <col:53, col:70> col:70 used in1 'const u64 *':'const u64 *'
| |-ParmVarDecl 0x2a7b4aeaa90 <line:933:37, col:54> col:54 used in2 'const u64 *':'const u64 *'
| `-CompoundStmt 0x2a7b4aeb110 <line:934:1, line:941:1>
|   |-DeclStmt 0x2a7b4aead40 <line:935:5, col:22>
|   | `-VarDecl 0x2a7b4aeacd8 <col:5, col:15> col:15 used longtmp 'longfelem':'limb [8]'
|   |-DeclStmt 0x2a7b4aeadd0 <line:936:5, col:14>
|   | `-VarDecl 0x2a7b4aead68 <col:5, col:11> col:11 used tmp 'felem':'limb [4]'
|   |-CallExpr 0x2a7b4aeae98 <line:938:5, col:37> 'void'
|   | |-ImplicitCastExpr 0x2a7b4aeae80 <col:5> 'void (*)(limb *, const u64 *, const u64 *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4aeade8 <col:5> 'void (limb *, const u64 *, const u64 *)' Function 0x2a7b4a051b8 'smallfelem_mul' 'void (limb *, const u64 *, const u64 *)'
|   | |-ImplicitCastExpr 0x2a7b4aeaed0 <col:20> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4aeae08 <col:20> 'longfelem':'limb [8]' lvalue Var 0x2a7b4aeacd8 'longtmp' 'longfelem':'limb [8]'
|   | |-ImplicitCastExpr 0x2a7b4aeaee8 <col:29> 'const u64 *':'const u64 *' <LValueToRValue>
|   | | `-DeclRefExpr 0x2a7b4aeae40 <col:29> 'const u64 *':'const u64 *' lvalue ParmVar 0x2a7b4aeaa18 'in1' 'const u64 *':'const u64 *'
|   | `-ImplicitCastExpr 0x2a7b4aeaf00 <col:34> 'const u64 *':'const u64 *' <LValueToRValue>
|   |   `-DeclRefExpr 0x2a7b4aeae60 <col:34> 'const u64 *':'const u64 *' lvalue ParmVar 0x2a7b4aeaa90 'in2' 'const u64 *':'const u64 *'
|   |-CallExpr 0x2a7b4aeafa8 <line:939:5, col:30> 'void'
|   | |-ImplicitCastExpr 0x2a7b4aeaf90 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4aeaf18 <col:5> 'void (limb *, const limb *)' Function 0x2a7b4af4538 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4aeafd8 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4aeaf38 <col:18> 'felem':'limb [4]' lvalue Var 0x2a7b4aead68 'tmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x2a7b4aeb008 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4aeaff0 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4aeaf70 <col:23> 'longfelem':'limb [8]' lvalue Var 0x2a7b4aeacd8 'longtmp' 'longfelem':'limb [8]'
|   `-CallExpr 0x2a7b4aeb098 <line:940:5, col:28> 'void'
|     |-ImplicitCastExpr 0x2a7b4aeb080 <col:5> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x2a7b4aeb020 <col:5> 'void (u64 *, const limb *)' Function 0x2a7b4aeffe8 'felem_contract' 'void (u64 *, const limb *)'
|     |-ImplicitCastExpr 0x2a7b4aeb0c8 <col:20> 'u64 *':'u64 *' <LValueToRValue>
|     | `-DeclRefExpr 0x2a7b4aeb040 <col:20> 'u64 *':'u64 *' lvalue ParmVar 0x2a7b4aea9a0 'out' 'u64 *':'u64 *'
|     `-ImplicitCastExpr 0x2a7b4aeb0f8 <col:25> 'const limb *':'const limb *' <NoOp>
|       `-ImplicitCastExpr 0x2a7b4aeb0e0 <col:25> 'limb *' <ArrayToPointerDecay>
|         `-DeclRefExpr 0x2a7b4aeb060 <col:25> 'felem':'limb [4]' lvalue Var 0x2a7b4aead68 'tmp' 'felem':'limb [4]'
|-FunctionDecl 0x2a7b4aeb268 <line:949:1, line:981:1> line:949:13 used smallfelem_is_zero 'limb (const u64 *)' static
| |-ParmVarDecl 0x2a7b4aeb158 <col:32, col:49> col:49 used small 'const u64 *':'const u64 *'
| `-CompoundStmt 0x2a7b4af2dc0 <line:950:1, line:981:1>
|   |-DeclStmt 0x2a7b4aeb3a0 <line:951:5, col:16>
|   | `-VarDecl 0x2a7b4aeb338 <col:5, col:10> col:10 used result 'limb':'int'
|   |-DeclStmt 0x2a7b4aeb430 <line:952:5, col:13>
|   | `-VarDecl 0x2a7b4aeb3c8 <col:5, col:9> col:9 used is_p 'u64':'unsigned long long'
|   |-DeclStmt 0x2a7b4aeb780 <line:954:5, col:60>
|   | `-VarDecl 0x2a7b4aeb458 <col:5, col:59> col:9 used is_zero 'u64':'unsigned long long' cinit
|   |   `-BinaryOperator 0x2a7b4aeb760 <col:19, col:59> 'unsigned long long' '|'
|   |     |-BinaryOperator 0x2a7b4aeb6a8 <col:19, col:48> 'unsigned long long' '|'
|   |     | |-BinaryOperator 0x2a7b4aeb5f0 <col:19, col:37> 'unsigned long long' '|'
|   |     | | |-ImplicitCastExpr 0x2a7b4aeb5c0 <col:19, col:26> 'u64':'unsigned long long' <LValueToRValue>
|   |     | | | `-ArraySubscriptExpr 0x2a7b4aeb520 <col:19, col:26> 'const u64':'const unsigned long long' lvalue
|   |     | | |   |-ImplicitCastExpr 0x2a7b4aeb508 <col:19> 'const u64 *':'const u64 *' <LValueToRValue>
|   |     | | |   | `-DeclRefExpr 0x2a7b4aeb4c0 <col:19> 'const u64 *':'const u64 *' lvalue ParmVar 0x2a7b4aeb158 'small' 'const u64 *':'const u64 *'
|   |     | | |   `-IntegerLiteral 0x2a7b4aeb4e0 <col:25> 'int' 0
|   |     | | `-ImplicitCastExpr 0x2a7b4aeb5d8 <col:30, col:37> 'u64':'unsigned long long' <LValueToRValue>
|   |     | |   `-ArraySubscriptExpr 0x2a7b4aeb5a0 <col:30, col:37> 'const u64':'const unsigned long long' lvalue
|   |     | |     |-ImplicitCastExpr 0x2a7b4aeb588 <col:30> 'const u64 *':'const u64 *' <LValueToRValue>
|   |     | |     | `-DeclRefExpr 0x2a7b4aeb540 <col:30> 'const u64 *':'const u64 *' lvalue ParmVar 0x2a7b4aeb158 'small' 'const u64 *':'const u64 *'
|   |     | |     `-IntegerLiteral 0x2a7b4aeb560 <col:36> 'int' 1
|   |     | `-ImplicitCastExpr 0x2a7b4aeb690 <col:41, col:48> 'u64':'unsigned long long' <LValueToRValue>
|   |     |   `-ArraySubscriptExpr 0x2a7b4aeb670 <col:41, col:48> 'const u64':'const unsigned long long' lvalue
|   |     |     |-ImplicitCastExpr 0x2a7b4aeb658 <col:41> 'const u64 *':'const u64 *' <LValueToRValue>
|   |     |     | `-DeclRefExpr 0x2a7b4aeb610 <col:41> 'const u64 *':'const u64 *' lvalue ParmVar 0x2a7b4aeb158 'small' 'const u64 *':'const u64 *'
|   |     |     `-IntegerLiteral 0x2a7b4aeb630 <col:47> 'int' 2
|   |     `-ImplicitCastExpr 0x2a7b4aeb748 <col:52, col:59> 'u64':'unsigned long long' <LValueToRValue>
|   |       `-ArraySubscriptExpr 0x2a7b4aeb728 <col:52, col:59> 'const u64':'const unsigned long long' lvalue
|   |         |-ImplicitCastExpr 0x2a7b4aeb710 <col:52> 'const u64 *':'const u64 *' <LValueToRValue>
|   |         | `-DeclRefExpr 0x2a7b4aeb6c8 <col:52> 'const u64 *':'const u64 *' lvalue ParmVar 0x2a7b4aeb158 'small' 'const u64 *':'const u64 *'
|   |         `-IntegerLiteral 0x2a7b4aeb6e8 <col:58> 'int' 3
|   |-UnaryOperator 0x2a7b4aeb7d0 <line:955:5, col:12> 'u64':'unsigned long long' postfix '--'
|   | `-DeclRefExpr 0x2a7b4aeb798 <col:5> 'u64':'unsigned long long' lvalue Var 0x2a7b4aeb458 'is_zero' 'u64':'unsigned long long'
|   |-CompoundAssignOperator 0x2a7b4aeb888 <line:956:5, col:27> 'u64':'unsigned long long' '&=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-DeclRefExpr 0x2a7b4aeb7e8 <col:5> 'u64':'unsigned long long' lvalue Var 0x2a7b4aeb458 'is_zero' 'u64':'unsigned long long'
|   | `-BinaryOperator 0x2a7b4aeb868 <col:16, col:27> 'u64':'unsigned long long' '<<'
|   |   |-ImplicitCastExpr 0x2a7b4aeb850 <col:16> 'u64':'unsigned long long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x2a7b4aeb808 <col:16> 'u64':'unsigned long long' lvalue Var 0x2a7b4aeb458 'is_zero' 'u64':'unsigned long long'
|   |   `-IntegerLiteral 0x2a7b4aeb828 <col:27> 'int' 32
|   |-CompoundAssignOperator 0x2a7b4af19a0 <line:957:5, col:27> 'u64':'unsigned long long' '&=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-DeclRefExpr 0x2a7b4af1900 <col:5> 'u64':'unsigned long long' lvalue Var 0x2a7b4aeb458 'is_zero' 'u64':'unsigned long long'
|   | `-BinaryOperator 0x2a7b4af1980 <col:16, col:27> 'u64':'unsigned long long' '<<'
|   |   |-ImplicitCastExpr 0x2a7b4af1968 <col:16> 'u64':'unsigned long long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x2a7b4af1920 <col:16> 'u64':'unsigned long long' lvalue Var 0x2a7b4aeb458 'is_zero' 'u64':'unsigned long long'
|   |   `-IntegerLiteral 0x2a7b4af1940 <col:27> 'int' 16
|   |-CompoundAssignOperator 0x2a7b4af1a70 <line:958:5, col:27> 'u64':'unsigned long long' '&=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-DeclRefExpr 0x2a7b4af19d0 <col:5> 'u64':'unsigned long long' lvalue Var 0x2a7b4aeb458 'is_zero' 'u64':'unsigned long long'
|   | `-BinaryOperator 0x2a7b4af1a50 <col:16, col:27> 'u64':'unsigned long long' '<<'
|   |   |-ImplicitCastExpr 0x2a7b4af1a38 <col:16> 'u64':'unsigned long long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x2a7b4af19f0 <col:16> 'u64':'unsigned long long' lvalue Var 0x2a7b4aeb458 'is_zero' 'u64':'unsigned long long'
|   |   `-IntegerLiteral 0x2a7b4af1a10 <col:27> 'int' 8
|   |-CompoundAssignOperator 0x2a7b4af1b40 <line:959:5, col:27> 'u64':'unsigned long long' '&=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-DeclRefExpr 0x2a7b4af1aa0 <col:5> 'u64':'unsigned long long' lvalue Var 0x2a7b4aeb458 'is_zero' 'u64':'unsigned long long'
|   | `-BinaryOperator 0x2a7b4af1b20 <col:16, col:27> 'u64':'unsigned long long' '<<'
|   |   |-ImplicitCastExpr 0x2a7b4af1b08 <col:16> 'u64':'unsigned long long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x2a7b4af1ac0 <col:16> 'u64':'unsigned long long' lvalue Var 0x2a7b4aeb458 'is_zero' 'u64':'unsigned long long'
|   |   `-IntegerLiteral 0x2a7b4af1ae0 <col:27> 'int' 4
|   |-CompoundAssignOperator 0x2a7b4af1c10 <line:960:5, col:27> 'u64':'unsigned long long' '&=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-DeclRefExpr 0x2a7b4af1b70 <col:5> 'u64':'unsigned long long' lvalue Var 0x2a7b4aeb458 'is_zero' 'u64':'unsigned long long'
|   | `-BinaryOperator 0x2a7b4af1bf0 <col:16, col:27> 'u64':'unsigned long long' '<<'
|   |   |-ImplicitCastExpr 0x2a7b4af1bd8 <col:16> 'u64':'unsigned long long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x2a7b4af1b90 <col:16> 'u64':'unsigned long long' lvalue Var 0x2a7b4aeb458 'is_zero' 'u64':'unsigned long long'
|   |   `-IntegerLiteral 0x2a7b4af1bb0 <col:27> 'int' 2
|   |-CompoundAssignOperator 0x2a7b4af1ce0 <line:961:5, col:27> 'u64':'unsigned long long' '&=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-DeclRefExpr 0x2a7b4af1c40 <col:5> 'u64':'unsigned long long' lvalue Var 0x2a7b4aeb458 'is_zero' 'u64':'unsigned long long'
|   | `-BinaryOperator 0x2a7b4af1cc0 <col:16, col:27> 'u64':'unsigned long long' '<<'
|   |   |-ImplicitCastExpr 0x2a7b4af1ca8 <col:16> 'u64':'unsigned long long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x2a7b4af1c60 <col:16> 'u64':'unsigned long long' lvalue Var 0x2a7b4aeb458 'is_zero' 'u64':'unsigned long long'
|   |   `-IntegerLiteral 0x2a7b4af1c80 <col:27> 'int' 1
|   |-BinaryOperator 0x2a7b4af1e30 <line:962:5, col:33> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x2a7b4af1d10 <col:5> 'u64':'unsigned long long' lvalue Var 0x2a7b4aeb458 'is_zero' 'u64':'unsigned long long'
|   | `-BinaryOperator 0x2a7b4af1e10 <col:15, col:33> 'unsigned long long' '-'
|   |   |-ImplicitCastExpr 0x2a7b4af1df8 <col:15> 'unsigned long long' <IntegralCast>
|   |   | `-IntegerLiteral 0x2a7b4af1d30 <col:15> 'int' 0
|   |   `-ParenExpr 0x2a7b4af1dd8 <col:19, col:33> 'u64':'unsigned long long'
|   |     `-BinaryOperator 0x2a7b4af1db8 <col:20, col:31> 'u64':'unsigned long long' '>>'
|   |       |-ImplicitCastExpr 0x2a7b4af1da0 <col:20> 'u64':'unsigned long long' <LValueToRValue>
|   |       | `-DeclRefExpr 0x2a7b4af1d58 <col:20> 'u64':'unsigned long long' lvalue Var 0x2a7b4aeb458 'is_zero' 'u64':'unsigned long long'
|   |       `-IntegerLiteral 0x2a7b4af1d78 <col:31> 'int' 63
|   |-BinaryOperator 0x2a7b4af24a8 <line:964:5, line:966:55> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x2a7b4af1e50 <line:964:5> 'u64':'unsigned long long' lvalue Var 0x2a7b4aeb3c8 'is_p' 'u64':'unsigned long long'
|   | `-BinaryOperator 0x2a7b4af2488 <col:12, line:966:55> 'unsigned long long' '|'
|   |   |-BinaryOperator 0x2a7b4af22f8 <line:964:12, line:966:30> 'unsigned long long' '|'
|   |   | |-BinaryOperator 0x2a7b4af2168 <line:964:12, line:965:30> 'unsigned long long' '|'
|   |   | | |-ParenExpr 0x2a7b4af1fd8 <line:964:12, col:33> 'unsigned long long'
|   |   | | | `-BinaryOperator 0x2a7b4af1fb8 <col:13, col:32> 'unsigned long long' '^'
|   |   | | |   |-ImplicitCastExpr 0x2a7b4af1f88 <col:13, col:20> 'u64':'unsigned long long' <LValueToRValue>
|   |   | | |   | `-ArraySubscriptExpr 0x2a7b4af1ee8 <col:13, col:20> 'const u64':'const unsigned long long' lvalue
|   |   | | |   |   |-ImplicitCastExpr 0x2a7b4af1ed0 <col:13> 'const u64 *':'const u64 *' <LValueToRValue>
|   |   | | |   |   | `-DeclRefExpr 0x2a7b4af1e88 <col:13> 'const u64 *':'const u64 *' lvalue ParmVar 0x2a7b4aeb158 'small' 'const u64 *':'const u64 *'
|   |   | | |   |   `-IntegerLiteral 0x2a7b4af1ea8 <col:19> 'int' 0
|   |   | | |   `-ImplicitCastExpr 0x2a7b4af1fa0 <col:24, col:32> 'u64':'unsigned long long' <LValueToRValue>
|   |   | | |     `-ArraySubscriptExpr 0x2a7b4af1f68 <col:24, col:32> 'const u64':'const unsigned long long' lvalue
|   |   | | |       |-ImplicitCastExpr 0x2a7b4af1f50 <col:24> 'const u64 *' <ArrayToPointerDecay>
|   |   | | |       | `-DeclRefExpr 0x2a7b4af1f08 <col:24> 'const u64 [4]' lvalue Var 0x2a7b4ae6d38 'kPrime' 'const u64 [4]'
|   |   | | |       `-IntegerLiteral 0x2a7b4af1f28 <col:31> 'int' 0
|   |   | | `-ParenExpr 0x2a7b4af2148 <line:965:9, col:30> 'unsigned long long'
|   |   | |   `-BinaryOperator 0x2a7b4af2128 <col:10, col:29> 'unsigned long long' '^'
|   |   | |     |-ImplicitCastExpr 0x2a7b4af20f8 <col:10, col:17> 'u64':'unsigned long long' <LValueToRValue>
|   |   | |     | `-ArraySubscriptExpr 0x2a7b4af2058 <col:10, col:17> 'const u64':'const unsigned long long' lvalue
|   |   | |     |   |-ImplicitCastExpr 0x2a7b4af2040 <col:10> 'const u64 *':'const u64 *' <LValueToRValue>
|   |   | |     |   | `-DeclRefExpr 0x2a7b4af1ff8 <col:10> 'const u64 *':'const u64 *' lvalue ParmVar 0x2a7b4aeb158 'small' 'const u64 *':'const u64 *'
|   |   | |     |   `-IntegerLiteral 0x2a7b4af2018 <col:16> 'int' 1
|   |   | |     `-ImplicitCastExpr 0x2a7b4af2110 <col:21, col:29> 'u64':'unsigned long long' <LValueToRValue>
|   |   | |       `-ArraySubscriptExpr 0x2a7b4af20d8 <col:21, col:29> 'const u64':'const unsigned long long' lvalue
|   |   | |         |-ImplicitCastExpr 0x2a7b4af20c0 <col:21> 'const u64 *' <ArrayToPointerDecay>
|   |   | |         | `-DeclRefExpr 0x2a7b4af2078 <col:21> 'const u64 [4]' lvalue Var 0x2a7b4ae6d38 'kPrime' 'const u64 [4]'
|   |   | |         `-IntegerLiteral 0x2a7b4af2098 <col:28> 'int' 1
|   |   | `-ParenExpr 0x2a7b4af22d8 <line:966:9, col:30> 'unsigned long long'
|   |   |   `-BinaryOperator 0x2a7b4af22b8 <col:10, col:29> 'unsigned long long' '^'
|   |   |     |-ImplicitCastExpr 0x2a7b4af2288 <col:10, col:17> 'u64':'unsigned long long' <LValueToRValue>
|   |   |     | `-ArraySubscriptExpr 0x2a7b4af21e8 <col:10, col:17> 'const u64':'const unsigned long long' lvalue
|   |   |     |   |-ImplicitCastExpr 0x2a7b4af21d0 <col:10> 'const u64 *':'const u64 *' <LValueToRValue>
|   |   |     |   | `-DeclRefExpr 0x2a7b4af2188 <col:10> 'const u64 *':'const u64 *' lvalue ParmVar 0x2a7b4aeb158 'small' 'const u64 *':'const u64 *'
|   |   |     |   `-IntegerLiteral 0x2a7b4af21a8 <col:16> 'int' 2
|   |   |     `-ImplicitCastExpr 0x2a7b4af22a0 <col:21, col:29> 'u64':'unsigned long long' <LValueToRValue>
|   |   |       `-ArraySubscriptExpr 0x2a7b4af2268 <col:21, col:29> 'const u64':'const unsigned long long' lvalue
|   |   |         |-ImplicitCastExpr 0x2a7b4af2250 <col:21> 'const u64 *' <ArrayToPointerDecay>
|   |   |         | `-DeclRefExpr 0x2a7b4af2208 <col:21> 'const u64 [4]' lvalue Var 0x2a7b4ae6d38 'kPrime' 'const u64 [4]'
|   |   |         `-IntegerLiteral 0x2a7b4af2228 <col:28> 'int' 2
|   |   `-ParenExpr 0x2a7b4af2468 <col:34, col:55> 'unsigned long long'
|   |     `-BinaryOperator 0x2a7b4af2448 <col:35, col:54> 'unsigned long long' '^'
|   |       |-ImplicitCastExpr 0x2a7b4af2418 <col:35, col:42> 'u64':'unsigned long long' <LValueToRValue>
|   |       | `-ArraySubscriptExpr 0x2a7b4af2378 <col:35, col:42> 'const u64':'const unsigned long long' lvalue
|   |       |   |-ImplicitCastExpr 0x2a7b4af2360 <col:35> 'const u64 *':'const u64 *' <LValueToRValue>
|   |       |   | `-DeclRefExpr 0x2a7b4af2318 <col:35> 'const u64 *':'const u64 *' lvalue ParmVar 0x2a7b4aeb158 'small' 'const u64 *':'const u64 *'
|   |       |   `-IntegerLiteral 0x2a7b4af2338 <col:41> 'int' 3
|   |       `-ImplicitCastExpr 0x2a7b4af2430 <col:46, col:54> 'u64':'unsigned long long' <LValueToRValue>
|   |         `-ArraySubscriptExpr 0x2a7b4af23f8 <col:46, col:54> 'const u64':'const unsigned long long' lvalue
|   |           |-ImplicitCastExpr 0x2a7b4af23e0 <col:46> 'const u64 *' <ArrayToPointerDecay>
|   |           | `-DeclRefExpr 0x2a7b4af2398 <col:46> 'const u64 [4]' lvalue Var 0x2a7b4ae6d38 'kPrime' 'const u64 [4]'
|   |           `-IntegerLiteral 0x2a7b4af23b8 <col:53> 'int' 3
|   |-UnaryOperator 0x2a7b4af24e8 <line:967:5, col:9> 'u64':'unsigned long long' postfix '--'
|   | `-DeclRefExpr 0x2a7b4af24c8 <col:5> 'u64':'unsigned long long' lvalue Var 0x2a7b4aeb3c8 'is_p' 'u64':'unsigned long long'
|   |-CompoundAssignOperator 0x2a7b4af25a0 <line:968:5, col:21> 'u64':'unsigned long long' '&=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-DeclRefExpr 0x2a7b4af2500 <col:5> 'u64':'unsigned long long' lvalue Var 0x2a7b4aeb3c8 'is_p' 'u64':'unsigned long long'
|   | `-BinaryOperator 0x2a7b4af2580 <col:13, col:21> 'u64':'unsigned long long' '<<'
|   |   |-ImplicitCastExpr 0x2a7b4af2568 <col:13> 'u64':'unsigned long long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x2a7b4af2520 <col:13> 'u64':'unsigned long long' lvalue Var 0x2a7b4aeb3c8 'is_p' 'u64':'unsigned long long'
|   |   `-IntegerLiteral 0x2a7b4af2540 <col:21> 'int' 32
|   |-CompoundAssignOperator 0x2a7b4af2670 <line:969:5, col:21> 'u64':'unsigned long long' '&=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-DeclRefExpr 0x2a7b4af25d0 <col:5> 'u64':'unsigned long long' lvalue Var 0x2a7b4aeb3c8 'is_p' 'u64':'unsigned long long'
|   | `-BinaryOperator 0x2a7b4af2650 <col:13, col:21> 'u64':'unsigned long long' '<<'
|   |   |-ImplicitCastExpr 0x2a7b4af2638 <col:13> 'u64':'unsigned long long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x2a7b4af25f0 <col:13> 'u64':'unsigned long long' lvalue Var 0x2a7b4aeb3c8 'is_p' 'u64':'unsigned long long'
|   |   `-IntegerLiteral 0x2a7b4af2610 <col:21> 'int' 16
|   |-CompoundAssignOperator 0x2a7b4af2740 <line:970:5, col:21> 'u64':'unsigned long long' '&=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-DeclRefExpr 0x2a7b4af26a0 <col:5> 'u64':'unsigned long long' lvalue Var 0x2a7b4aeb3c8 'is_p' 'u64':'unsigned long long'
|   | `-BinaryOperator 0x2a7b4af2720 <col:13, col:21> 'u64':'unsigned long long' '<<'
|   |   |-ImplicitCastExpr 0x2a7b4af2708 <col:13> 'u64':'unsigned long long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x2a7b4af26c0 <col:13> 'u64':'unsigned long long' lvalue Var 0x2a7b4aeb3c8 'is_p' 'u64':'unsigned long long'
|   |   `-IntegerLiteral 0x2a7b4af26e0 <col:21> 'int' 8
|   |-CompoundAssignOperator 0x2a7b4af2810 <line:971:5, col:21> 'u64':'unsigned long long' '&=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-DeclRefExpr 0x2a7b4af2770 <col:5> 'u64':'unsigned long long' lvalue Var 0x2a7b4aeb3c8 'is_p' 'u64':'unsigned long long'
|   | `-BinaryOperator 0x2a7b4af27f0 <col:13, col:21> 'u64':'unsigned long long' '<<'
|   |   |-ImplicitCastExpr 0x2a7b4af27d8 <col:13> 'u64':'unsigned long long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x2a7b4af2790 <col:13> 'u64':'unsigned long long' lvalue Var 0x2a7b4aeb3c8 'is_p' 'u64':'unsigned long long'
|   |   `-IntegerLiteral 0x2a7b4af27b0 <col:21> 'int' 4
|   |-CompoundAssignOperator 0x2a7b4af28e0 <line:972:5, col:21> 'u64':'unsigned long long' '&=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-DeclRefExpr 0x2a7b4af2840 <col:5> 'u64':'unsigned long long' lvalue Var 0x2a7b4aeb3c8 'is_p' 'u64':'unsigned long long'
|   | `-BinaryOperator 0x2a7b4af28c0 <col:13, col:21> 'u64':'unsigned long long' '<<'
|   |   |-ImplicitCastExpr 0x2a7b4af28a8 <col:13> 'u64':'unsigned long long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x2a7b4af2860 <col:13> 'u64':'unsigned long long' lvalue Var 0x2a7b4aeb3c8 'is_p' 'u64':'unsigned long long'
|   |   `-IntegerLiteral 0x2a7b4af2880 <col:21> 'int' 2
|   |-CompoundAssignOperator 0x2a7b4af29b0 <line:973:5, col:21> 'u64':'unsigned long long' '&=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-DeclRefExpr 0x2a7b4af2910 <col:5> 'u64':'unsigned long long' lvalue Var 0x2a7b4aeb3c8 'is_p' 'u64':'unsigned long long'
|   | `-BinaryOperator 0x2a7b4af2990 <col:13, col:21> 'u64':'unsigned long long' '<<'
|   |   |-ImplicitCastExpr 0x2a7b4af2978 <col:13> 'u64':'unsigned long long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x2a7b4af2930 <col:13> 'u64':'unsigned long long' lvalue Var 0x2a7b4aeb3c8 'is_p' 'u64':'unsigned long long'
|   |   `-IntegerLiteral 0x2a7b4af2950 <col:21> 'int' 1
|   |-BinaryOperator 0x2a7b4af2b00 <line:974:5, col:27> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x2a7b4af29e0 <col:5> 'u64':'unsigned long long' lvalue Var 0x2a7b4aeb3c8 'is_p' 'u64':'unsigned long long'
|   | `-BinaryOperator 0x2a7b4af2ae0 <col:12, col:27> 'unsigned long long' '-'
|   |   |-ImplicitCastExpr 0x2a7b4af2ac8 <col:12> 'unsigned long long' <IntegralCast>
|   |   | `-IntegerLiteral 0x2a7b4af2a00 <col:12> 'int' 0
|   |   `-ParenExpr 0x2a7b4af2aa8 <col:16, col:27> 'u64':'unsigned long long'
|   |     `-BinaryOperator 0x2a7b4af2a88 <col:17, col:25> 'u64':'unsigned long long' '>>'
|   |       |-ImplicitCastExpr 0x2a7b4af2a70 <col:17> 'u64':'unsigned long long' <LValueToRValue>
|   |       | `-DeclRefExpr 0x2a7b4af2a28 <col:17> 'u64':'unsigned long long' lvalue Var 0x2a7b4aeb3c8 'is_p' 'u64':'unsigned long long'
|   |       `-IntegerLiteral 0x2a7b4af2a48 <col:25> 'int' 63
|   |-CompoundAssignOperator 0x2a7b4af2b78 <line:976:5, col:16> 'u64':'unsigned long long' '|=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-DeclRefExpr 0x2a7b4af2b20 <col:5> 'u64':'unsigned long long' lvalue Var 0x2a7b4aeb458 'is_zero' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x2a7b4af2b60 <col:16> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x2a7b4af2b40 <col:16> 'u64':'unsigned long long' lvalue Var 0x2a7b4aeb3c8 'is_p' 'u64':'unsigned long long'
|   |-BinaryOperator 0x2a7b4af2c30 <line:978:5, col:14> 'limb':'int' '='
|   | |-DeclRefExpr 0x2a7b4af2ba8 <col:5> 'limb':'int' lvalue Var 0x2a7b4aeb338 'result' 'limb':'int'
|   | `-ImplicitCastExpr 0x2a7b4af2c18 <col:14> 'limb':'int' <IntegralCast>
|   |   `-ImplicitCastExpr 0x2a7b4af2c00 <col:14> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-DeclRefExpr 0x2a7b4af2be0 <col:14> 'u64':'unsigned long long' lvalue Var 0x2a7b4aeb458 'is_zero' 'u64':'unsigned long long'
|   |-CompoundAssignOperator 0x2a7b4af2d48 <line:979:5, col:35> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x2a7b4af2c50 <col:5> 'limb':'int' lvalue Var 0x2a7b4aeb338 'result' 'limb':'int'
|   | `-BinaryOperator 0x2a7b4af2d28 <col:15, col:35> 'limb':'int' '<<'
|   |   |-ParenExpr 0x2a7b4af2ce0 <col:15, col:30> 'limb':'int'
|   |   | `-CStyleCastExpr 0x2a7b4af2cb8 <col:16, col:23> 'limb':'int' <IntegralCast>
|   |   |   `-ImplicitCastExpr 0x2a7b4af2ca0 <col:23> 'u64':'unsigned long long' <LValueToRValue> part_of_explicit_cast
|   |   |     `-DeclRefExpr 0x2a7b4af2c70 <col:23> 'u64':'unsigned long long' lvalue Var 0x2a7b4aeb458 'is_zero' 'u64':'unsigned long long'
|   |   `-IntegerLiteral 0x2a7b4af2d00 <col:35> 'int' 64
|   `-ReturnStmt 0x2a7b4af2db0 <line:980:5, col:12>
|     `-ImplicitCastExpr 0x2a7b4af2d98 <col:12> 'limb':'int' <LValueToRValue>
|       `-DeclRefExpr 0x2a7b4af2d78 <col:12> 'limb':'int' lvalue Var 0x2a7b4aeb338 'result' 'limb':'int'
|-FunctionDecl 0x2a7b4af2f58 <line:983:1, line:986:1> line:983:12 used smallfelem_is_zero_int 'int (const void *)' static
| |-ParmVarDecl 0x2a7b4af2ea8 <col:35, col:47> col:47 used small 'const void *'
| `-CompoundStmt 0x2a7b4af3258 <line:984:1, line:986:1>
|   `-ReturnStmt 0x2a7b4af3248 <line:985:5, col:56>
|     `-CStyleCastExpr 0x2a7b4af3220 <col:12, col:56> 'int' <NoOp>
|       `-ParenExpr 0x2a7b4af3200 <col:17, col:56> 'int'
|         `-BinaryOperator 0x2a7b4af31a8 <col:18, col:55> 'int' '&'
|           |-CallExpr 0x2a7b4af30d0 <col:18, col:42> 'limb':'int'
|           | |-ImplicitCastExpr 0x2a7b4af30b8 <col:18> 'limb (*)(const u64 *)' <FunctionToPointerDecay>
|           | | `-DeclRefExpr 0x2a7b4af3018 <col:18> 'limb (const u64 *)' Function 0x2a7b4aeb268 'smallfelem_is_zero' 'limb (const u64 *)'
|           | `-ImplicitCastExpr 0x2a7b4af3110 <col:37> 'const u64 *':'const u64 *' <BitCast>
|           |   `-ImplicitCastExpr 0x2a7b4af30f8 <col:37> 'const void *' <LValueToRValue>
|           |     `-DeclRefExpr 0x2a7b4af3038 <col:37> 'const void *' lvalue ParmVar 0x2a7b4af2ea8 'small' 'const void *'
|           `-ParenExpr 0x2a7b4af3188 <col:46, col:55> 'limb':'int'
|             `-CStyleCastExpr 0x2a7b4af3160 <col:47, col:54> 'limb':'int' <NoOp>
|               `-IntegerLiteral 0x2a7b4af3128 <col:54> 'int' 1
|-FunctionDecl 0x2a7b4af33c0 <line:996:1, line:1088:1> line:996:13 used felem_inv 'void (limb *, const limb *)' static
| |-ParmVarDecl 0x2a7b4af3280 <col:23, col:29> col:29 used out 'limb *':'limb *'
| |-ParmVarDecl 0x2a7b4af32f8 <col:34, col:46> col:46 used in 'const limb *':'const limb *'
| `-CompoundStmt 0x2a7b4afab80 <line:997:1, line:1088:1>
|   |-DeclStmt 0x2a7b4af3590 <line:998:5, col:22>
|   | |-VarDecl 0x2a7b4af3498 <col:5, col:11> col:11 used ftmp 'felem':'limb [4]'
|   | `-VarDecl 0x2a7b4af3510 <col:5, col:17> col:17 used ftmp2 'felem':'limb [4]'
|   |-DeclStmt 0x2a7b4af38b0 <line:1000:5, col:36>
|   | |-VarDecl 0x2a7b4af35b8 <col:5, col:11> col:11 used e2 'felem':'limb [4]'
|   | |-VarDecl 0x2a7b4af3630 <col:5, col:15> col:15 used e4 'felem':'limb [4]'
|   | |-VarDecl 0x2a7b4af36a8 <col:5, col:19> col:19 used e8 'felem':'limb [4]'
|   | |-VarDecl 0x2a7b4af3720 <col:5, col:23> col:23 used e16 'felem':'limb [4]'
|   | |-VarDecl 0x2a7b4af3798 <col:5, col:28> col:28 used e32 'felem':'limb [4]'
|   | `-VarDecl 0x2a7b4af3810 <col:5, col:33> col:33 used e64 'felem':'limb [4]'
|   |-DeclStmt 0x2a7b4af5988 <line:1001:5, col:18>
|   | `-VarDecl 0x2a7b4af5920 <col:5, col:15> col:15 used tmp 'longfelem':'limb [8]'
|   |-DeclStmt 0x2a7b4af5a20 <line:1002:5, col:15>
|   | `-VarDecl 0x2a7b4af59b8 <col:5, col:14> col:14 used i 'unsigned int'
|   |-CallExpr 0x2a7b4af5af0 <line:1004:5, col:25> 'void'
|   | |-ImplicitCastExpr 0x2a7b4af5ad8 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4af5a38 <col:5> 'void (limb *, const limb *)' Function 0x2a7b4a04ae8 'felem_square' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4af5b20 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4af5a58 <col:18> 'longfelem':'limb [8]' lvalue Var 0x2a7b4af5920 'tmp' 'longfelem':'limb [8]'
|   | `-ImplicitCastExpr 0x2a7b4af5b38 <col:23> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x2a7b4af5a90 <col:23> 'const limb *':'const limb *' lvalue ParmVar 0x2a7b4af32f8 'in' 'const limb *':'const limb *'
|   |-CallExpr 0x2a7b4af5be0 <line:1005:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x2a7b4af5bc8 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4af5b50 <col:5> 'void (limb *, const limb *)' Function 0x2a7b4af4538 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4af5c10 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4af5b70 <col:18> 'felem':'limb [4]' lvalue Var 0x2a7b4af3498 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x2a7b4af5c40 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4af5c28 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4af5ba8 <col:24> 'longfelem':'limb [8]' lvalue Var 0x2a7b4af5920 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x2a7b4af5d50 <line:1006:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x2a7b4af5d38 <col:5> 'void (*)(limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4af5c58 <col:5> 'void (limb *, const limb *, const limb *)' Function 0x2a7b4a096f8 'felem_mul' 'void (limb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4af5d88 <col:15> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4af5c78 <col:15> 'longfelem':'limb [8]' lvalue Var 0x2a7b4af5920 'tmp' 'longfelem':'limb [8]'
|   | |-ImplicitCastExpr 0x2a7b4af5da0 <col:20> 'const limb *':'const limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x2a7b4af5c98 <col:20> 'const limb *':'const limb *' lvalue ParmVar 0x2a7b4af32f8 'in' 'const limb *':'const limb *'
|   | `-ImplicitCastExpr 0x2a7b4af5dd0 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4af5db8 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4af5cb8 <col:24> 'felem':'limb [4]' lvalue Var 0x2a7b4af3498 'ftmp' 'felem':'limb [4]'
|   |-CallExpr 0x2a7b4af5e60 <line:1007:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x2a7b4af5e48 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4af5de8 <col:5> 'void (limb *, const limb *)' Function 0x2a7b4af4538 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4af5e90 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4af5e08 <col:18> 'felem':'limb [4]' lvalue Var 0x2a7b4af3498 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x2a7b4af5ec0 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4af5ea8 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4af5e28 <col:24> 'longfelem':'limb [8]' lvalue Var 0x2a7b4af5920 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x2a7b4af5f90 <line:1008:5, col:26> 'void'
|   | |-ImplicitCastExpr 0x2a7b4af5f78 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4af5ed8 <col:5> 'void (limb *, const limb *)' Function 0x2a7b49f4048 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4af5fc0 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4af5ef8 <col:18> 'felem':'limb [4]' lvalue Var 0x2a7b4af35b8 'e2' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x2a7b4af5ff0 <col:22> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4af5fd8 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4af5f30 <col:22> 'felem':'limb [4]' lvalue Var 0x2a7b4af3498 'ftmp' 'felem':'limb [4]'
|   |-CallExpr 0x2a7b4af6080 <line:1009:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x2a7b4af6068 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4af6008 <col:5> 'void (limb *, const limb *)' Function 0x2a7b4a04ae8 'felem_square' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4af60b0 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4af6028 <col:18> 'longfelem':'limb [8]' lvalue Var 0x2a7b4af5920 'tmp' 'longfelem':'limb [8]'
|   | `-ImplicitCastExpr 0x2a7b4af60e0 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4af60c8 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4af6048 <col:23> 'felem':'limb [4]' lvalue Var 0x2a7b4af3498 'ftmp' 'felem':'limb [4]'
|   |-CallExpr 0x2a7b4af6170 <line:1010:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x2a7b4af6158 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4af60f8 <col:5> 'void (limb *, const limb *)' Function 0x2a7b4af4538 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4af61a0 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4af6118 <col:18> 'felem':'limb [4]' lvalue Var 0x2a7b4af3498 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x2a7b4af61d0 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4af61b8 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4af6138 <col:24> 'longfelem':'limb [8]' lvalue Var 0x2a7b4af5920 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x2a7b4af6260 <line:1011:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x2a7b4af6248 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4af61e8 <col:5> 'void (limb *, const limb *)' Function 0x2a7b4a04ae8 'felem_square' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4af6290 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4af6208 <col:18> 'longfelem':'limb [8]' lvalue Var 0x2a7b4af5920 'tmp' 'longfelem':'limb [8]'
|   | `-ImplicitCastExpr 0x2a7b4af62c0 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4af62a8 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4af6228 <col:23> 'felem':'limb [4]' lvalue Var 0x2a7b4af3498 'ftmp' 'felem':'limb [4]'
|   |-CallExpr 0x2a7b4af6350 <line:1012:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x2a7b4af6338 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4af62d8 <col:5> 'void (limb *, const limb *)' Function 0x2a7b4af4538 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4af6380 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4af62f8 <col:18> 'felem':'limb [4]' lvalue Var 0x2a7b4af3498 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x2a7b4af63b0 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4af6398 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4af6318 <col:24> 'longfelem':'limb [8]' lvalue Var 0x2a7b4af5920 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x2a7b4af6460 <line:1013:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x2a7b4af6448 <col:5> 'void (*)(limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4af63c8 <col:5> 'void (limb *, const limb *, const limb *)' Function 0x2a7b4a096f8 'felem_mul' 'void (limb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4af6498 <col:15> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4af63e8 <col:15> 'longfelem':'limb [8]' lvalue Var 0x2a7b4af5920 'tmp' 'longfelem':'limb [8]'
|   | |-ImplicitCastExpr 0x2a7b4af64c8 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x2a7b4af64b0 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x2a7b4af6408 <col:20> 'felem':'limb [4]' lvalue Var 0x2a7b4af3498 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x2a7b4af64f8 <col:26> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4af64e0 <col:26> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4af6428 <col:26> 'felem':'limb [4]' lvalue Var 0x2a7b4af35b8 'e2' 'felem':'limb [4]'
|   |-CallExpr 0x2a7b4af6588 <line:1014:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x2a7b4af6570 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4af6510 <col:5> 'void (limb *, const limb *)' Function 0x2a7b4af4538 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4af65b8 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4af6530 <col:18> 'felem':'limb [4]' lvalue Var 0x2a7b4af3498 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x2a7b4af65e8 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4af65d0 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4af6550 <col:24> 'longfelem':'limb [8]' lvalue Var 0x2a7b4af5920 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x2a7b4af6690 <line:1015:5, col:26> 'void'
|   | |-ImplicitCastExpr 0x2a7b4af6678 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4af6600 <col:5> 'void (limb *, const limb *)' Function 0x2a7b49f4048 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4af66c0 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4af6620 <col:18> 'felem':'limb [4]' lvalue Var 0x2a7b4af3630 'e4' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x2a7b4af66f0 <col:22> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4af66d8 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4af6658 <col:22> 'felem':'limb [4]' lvalue Var 0x2a7b4af3498 'ftmp' 'felem':'limb [4]'
|   |-CallExpr 0x2a7b4af6780 <line:1016:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x2a7b4af6768 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4af6708 <col:5> 'void (limb *, const limb *)' Function 0x2a7b4a04ae8 'felem_square' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4af67b0 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4af6728 <col:18> 'longfelem':'limb [8]' lvalue Var 0x2a7b4af5920 'tmp' 'longfelem':'limb [8]'
|   | `-ImplicitCastExpr 0x2a7b4af67e0 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4af67c8 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4af6748 <col:23> 'felem':'limb [4]' lvalue Var 0x2a7b4af3498 'ftmp' 'felem':'limb [4]'
|   |-CallExpr 0x2a7b4af6870 <line:1017:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x2a7b4af6858 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4af67f8 <col:5> 'void (limb *, const limb *)' Function 0x2a7b4af4538 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4af68a0 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4af6818 <col:18> 'felem':'limb [4]' lvalue Var 0x2a7b4af3498 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x2a7b4af68d0 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4af68b8 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4af6838 <col:24> 'longfelem':'limb [8]' lvalue Var 0x2a7b4af5920 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x2a7b4af6960 <line:1018:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x2a7b4af6948 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4af68e8 <col:5> 'void (limb *, const limb *)' Function 0x2a7b4a04ae8 'felem_square' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4af6990 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4af6908 <col:18> 'longfelem':'limb [8]' lvalue Var 0x2a7b4af5920 'tmp' 'longfelem':'limb [8]'
|   | `-ImplicitCastExpr 0x2a7b4af69c0 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4af69a8 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4af6928 <col:23> 'felem':'limb [4]' lvalue Var 0x2a7b4af3498 'ftmp' 'felem':'limb [4]'
|   |-CallExpr 0x2a7b4af6a50 <line:1019:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x2a7b4af6a38 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4af69d8 <col:5> 'void (limb *, const limb *)' Function 0x2a7b4af4538 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4af6a80 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4af69f8 <col:18> 'felem':'limb [4]' lvalue Var 0x2a7b4af3498 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x2a7b4af6ab0 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4af6a98 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4af6a18 <col:24> 'longfelem':'limb [8]' lvalue Var 0x2a7b4af5920 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x2a7b4af6b40 <line:1020:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x2a7b4af6b28 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4af6ac8 <col:5> 'void (limb *, const limb *)' Function 0x2a7b4a04ae8 'felem_square' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4af6b70 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4af6ae8 <col:18> 'longfelem':'limb [8]' lvalue Var 0x2a7b4af5920 'tmp' 'longfelem':'limb [8]'
|   | `-ImplicitCastExpr 0x2a7b4af6ba0 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4af6b88 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4af6b08 <col:23> 'felem':'limb [4]' lvalue Var 0x2a7b4af3498 'ftmp' 'felem':'limb [4]'
|   |-CallExpr 0x2a7b4af6c30 <line:1021:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x2a7b4af6c18 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4af6bb8 <col:5> 'void (limb *, const limb *)' Function 0x2a7b4af4538 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4af6c60 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4af6bd8 <col:18> 'felem':'limb [4]' lvalue Var 0x2a7b4af3498 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x2a7b4af6c90 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4af6c78 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4af6bf8 <col:24> 'longfelem':'limb [8]' lvalue Var 0x2a7b4af5920 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x2a7b4af6d20 <line:1022:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x2a7b4af6d08 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4af6ca8 <col:5> 'void (limb *, const limb *)' Function 0x2a7b4a04ae8 'felem_square' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4af6d50 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4af6cc8 <col:18> 'longfelem':'limb [8]' lvalue Var 0x2a7b4af5920 'tmp' 'longfelem':'limb [8]'
|   | `-ImplicitCastExpr 0x2a7b4af6d80 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4af6d68 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4af6ce8 <col:23> 'felem':'limb [4]' lvalue Var 0x2a7b4af3498 'ftmp' 'felem':'limb [4]'
|   |-CallExpr 0x2a7b4af6e10 <line:1023:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x2a7b4af6df8 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4af6d98 <col:5> 'void (limb *, const limb *)' Function 0x2a7b4af4538 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4af6e40 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4af6db8 <col:18> 'felem':'limb [4]' lvalue Var 0x2a7b4af3498 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x2a7b4af6e70 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4af6e58 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4af6dd8 <col:24> 'longfelem':'limb [8]' lvalue Var 0x2a7b4af5920 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x2a7b4af6f20 <line:1024:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x2a7b4af6f08 <col:5> 'void (*)(limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4af6e88 <col:5> 'void (limb *, const limb *, const limb *)' Function 0x2a7b4a096f8 'felem_mul' 'void (limb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4af6f58 <col:15> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4af6ea8 <col:15> 'longfelem':'limb [8]' lvalue Var 0x2a7b4af5920 'tmp' 'longfelem':'limb [8]'
|   | |-ImplicitCastExpr 0x2a7b4af6f88 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x2a7b4af6f70 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x2a7b4af6ec8 <col:20> 'felem':'limb [4]' lvalue Var 0x2a7b4af3498 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x2a7b4af6fb8 <col:26> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4af6fa0 <col:26> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4af6ee8 <col:26> 'felem':'limb [4]' lvalue Var 0x2a7b4af3630 'e4' 'felem':'limb [4]'
|   |-CallExpr 0x2a7b4af7048 <line:1025:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x2a7b4af7030 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4af6fd0 <col:5> 'void (limb *, const limb *)' Function 0x2a7b4af4538 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4af7078 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4af6ff0 <col:18> 'felem':'limb [4]' lvalue Var 0x2a7b4af3498 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x2a7b4af70a8 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4af7090 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4af7010 <col:24> 'longfelem':'limb [8]' lvalue Var 0x2a7b4af5920 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x2a7b4af7150 <line:1026:5, col:26> 'void'
|   | |-ImplicitCastExpr 0x2a7b4af7138 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4af70c0 <col:5> 'void (limb *, const limb *)' Function 0x2a7b49f4048 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4af7180 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4af70e0 <col:18> 'felem':'limb [4]' lvalue Var 0x2a7b4af36a8 'e8' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x2a7b4af71b0 <col:22> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4af7198 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4af7118 <col:22> 'felem':'limb [4]' lvalue Var 0x2a7b4af3498 'ftmp' 'felem':'limb [4]'
|   |-ForStmt 0x2a7b4af7530 <line:1027:5, line:1030:5>
|   | |-BinaryOperator 0x2a7b4af7240 <line:1027:10, col:14> 'unsigned int' '='
|   | | |-DeclRefExpr 0x2a7b4af71c8 <col:10> 'unsigned int' lvalue Var 0x2a7b4af59b8 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x2a7b4af7228 <col:14> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x2a7b4af7200 <col:14> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x2a7b4af72d8 <col:17, col:21> 'int' '<'
|   | | |-ImplicitCastExpr 0x2a7b4af72a8 <col:17> 'unsigned int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b4af7260 <col:17> 'unsigned int' lvalue Var 0x2a7b4af59b8 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x2a7b4af72c0 <col:21> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x2a7b4af7280 <col:21> 'int' 8
|   | |-UnaryOperator 0x2a7b4af7318 <col:24, col:25> 'unsigned int' postfix '++'
|   | | `-DeclRefExpr 0x2a7b4af72f8 <col:24> 'unsigned int' lvalue Var 0x2a7b4af59b8 'i' 'unsigned int'
|   | `-CompoundStmt 0x2a7b4af7510 <col:29, line:1030:5>
|   |   |-CallExpr 0x2a7b4af73a8 <line:1028:9, col:31> 'void'
|   |   | |-ImplicitCastExpr 0x2a7b4af7390 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x2a7b4af7330 <col:9> 'void (limb *, const limb *)' Function 0x2a7b4a04ae8 'felem_square' 'void (limb *, const limb *)'
|   |   | |-ImplicitCastExpr 0x2a7b4af73d8 <col:22> 'limb *' <ArrayToPointerDecay>
|   |   | | `-DeclRefExpr 0x2a7b4af7350 <col:22> 'longfelem':'limb [8]' lvalue Var 0x2a7b4af5920 'tmp' 'longfelem':'limb [8]'
|   |   | `-ImplicitCastExpr 0x2a7b4af7408 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   |   `-ImplicitCastExpr 0x2a7b4af73f0 <col:27> 'limb *' <ArrayToPointerDecay>
|   |   |     `-DeclRefExpr 0x2a7b4af7370 <col:27> 'felem':'limb [4]' lvalue Var 0x2a7b4af3498 'ftmp' 'felem':'limb [4]'
|   |   `-CallExpr 0x2a7b4af7498 <line:1029:9, col:31> 'void'
|   |     |-ImplicitCastExpr 0x2a7b4af7480 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x2a7b4af7420 <col:9> 'void (limb *, const limb *)' Function 0x2a7b4af4538 'felem_reduce' 'void (limb *, const limb *)'
|   |     |-ImplicitCastExpr 0x2a7b4af74c8 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x2a7b4af7440 <col:22> 'felem':'limb [4]' lvalue Var 0x2a7b4af3498 'ftmp' 'felem':'limb [4]'
|   |     `-ImplicitCastExpr 0x2a7b4af74f8 <col:28> 'const limb *':'const limb *' <NoOp>
|   |       `-ImplicitCastExpr 0x2a7b4af74e0 <col:28> 'limb *' <ArrayToPointerDecay>
|   |         `-DeclRefExpr 0x2a7b4af7460 <col:28> 'longfelem':'limb [8]' lvalue Var 0x2a7b4af5920 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x2a7b4af7600 <line:1031:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x2a7b4af75e8 <col:5> 'void (*)(limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4af7568 <col:5> 'void (limb *, const limb *, const limb *)' Function 0x2a7b4a096f8 'felem_mul' 'void (limb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4af7638 <col:15> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4af7588 <col:15> 'longfelem':'limb [8]' lvalue Var 0x2a7b4af5920 'tmp' 'longfelem':'limb [8]'
|   | |-ImplicitCastExpr 0x2a7b4af7668 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x2a7b4af7650 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x2a7b4af75a8 <col:20> 'felem':'limb [4]' lvalue Var 0x2a7b4af3498 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x2a7b4af7698 <col:26> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4af7680 <col:26> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4af75c8 <col:26> 'felem':'limb [4]' lvalue Var 0x2a7b4af36a8 'e8' 'felem':'limb [4]'
|   |-CallExpr 0x2a7b4af7728 <line:1032:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x2a7b4af7710 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4af76b0 <col:5> 'void (limb *, const limb *)' Function 0x2a7b4af4538 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4af7758 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4af76d0 <col:18> 'felem':'limb [4]' lvalue Var 0x2a7b4af3498 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x2a7b4af7788 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4af7770 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4af76f0 <col:24> 'longfelem':'limb [8]' lvalue Var 0x2a7b4af5920 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x2a7b4af7830 <line:1033:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x2a7b4af7818 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4af77a0 <col:5> 'void (limb *, const limb *)' Function 0x2a7b49f4048 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4af7860 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4af77c0 <col:18> 'felem':'limb [4]' lvalue Var 0x2a7b4af3720 'e16' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x2a7b4af7890 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4af7878 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4af77f8 <col:23> 'felem':'limb [4]' lvalue Var 0x2a7b4af3498 'ftmp' 'felem':'limb [4]'
|   |-ForStmt 0x2a7b4af7c20 <line:1034:5, line:1037:5>
|   | |-BinaryOperator 0x2a7b4af7930 <line:1034:10, col:14> 'unsigned int' '='
|   | | |-DeclRefExpr 0x2a7b4af78a8 <col:10> 'unsigned int' lvalue Var 0x2a7b4af59b8 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x2a7b4af78f0 <col:14> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x2a7b4af78c8 <col:14> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x2a7b4af79c8 <col:17, col:21> 'int' '<'
|   | | |-ImplicitCastExpr 0x2a7b4af7998 <col:17> 'unsigned int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b4af7950 <col:17> 'unsigned int' lvalue Var 0x2a7b4af59b8 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x2a7b4af79b0 <col:21> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x2a7b4af7970 <col:21> 'int' 16
|   | |-UnaryOperator 0x2a7b4af7a08 <col:25, col:26> 'unsigned int' postfix '++'
|   | | `-DeclRefExpr 0x2a7b4af79e8 <col:25> 'unsigned int' lvalue Var 0x2a7b4af59b8 'i' 'unsigned int'
|   | `-CompoundStmt 0x2a7b4af7c00 <col:30, line:1037:5>
|   |   |-CallExpr 0x2a7b4af7a98 <line:1035:9, col:31> 'void'
|   |   | |-ImplicitCastExpr 0x2a7b4af7a80 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x2a7b4af7a20 <col:9> 'void (limb *, const limb *)' Function 0x2a7b4a04ae8 'felem_square' 'void (limb *, const limb *)'
|   |   | |-ImplicitCastExpr 0x2a7b4af7ac8 <col:22> 'limb *' <ArrayToPointerDecay>
|   |   | | `-DeclRefExpr 0x2a7b4af7a40 <col:22> 'longfelem':'limb [8]' lvalue Var 0x2a7b4af5920 'tmp' 'longfelem':'limb [8]'
|   |   | `-ImplicitCastExpr 0x2a7b4af7af8 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   |   `-ImplicitCastExpr 0x2a7b4af7ae0 <col:27> 'limb *' <ArrayToPointerDecay>
|   |   |     `-DeclRefExpr 0x2a7b4af7a60 <col:27> 'felem':'limb [4]' lvalue Var 0x2a7b4af3498 'ftmp' 'felem':'limb [4]'
|   |   `-CallExpr 0x2a7b4af7b88 <line:1036:9, col:31> 'void'
|   |     |-ImplicitCastExpr 0x2a7b4af7b70 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x2a7b4af7b10 <col:9> 'void (limb *, const limb *)' Function 0x2a7b4af4538 'felem_reduce' 'void (limb *, const limb *)'
|   |     |-ImplicitCastExpr 0x2a7b4af7bb8 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x2a7b4af7b30 <col:22> 'felem':'limb [4]' lvalue Var 0x2a7b4af3498 'ftmp' 'felem':'limb [4]'
|   |     `-ImplicitCastExpr 0x2a7b4af7be8 <col:28> 'const limb *':'const limb *' <NoOp>
|   |       `-ImplicitCastExpr 0x2a7b4af7bd0 <col:28> 'limb *' <ArrayToPointerDecay>
|   |         `-DeclRefExpr 0x2a7b4af7b50 <col:28> 'longfelem':'limb [8]' lvalue Var 0x2a7b4af5920 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x2a7b4af7cf0 <line:1038:5, col:29> 'void'
|   | |-ImplicitCastExpr 0x2a7b4af7cd8 <col:5> 'void (*)(limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4af7c58 <col:5> 'void (limb *, const limb *, const limb *)' Function 0x2a7b4a096f8 'felem_mul' 'void (limb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4af7d28 <col:15> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4af7c78 <col:15> 'longfelem':'limb [8]' lvalue Var 0x2a7b4af5920 'tmp' 'longfelem':'limb [8]'
|   | |-ImplicitCastExpr 0x2a7b4af7d58 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x2a7b4af7d40 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x2a7b4af7c98 <col:20> 'felem':'limb [4]' lvalue Var 0x2a7b4af3498 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x2a7b4af7d88 <col:26> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4af7d70 <col:26> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4af7cb8 <col:26> 'felem':'limb [4]' lvalue Var 0x2a7b4af3720 'e16' 'felem':'limb [4]'
|   |-CallExpr 0x2a7b4af7e18 <line:1039:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x2a7b4af7e00 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4af7da0 <col:5> 'void (limb *, const limb *)' Function 0x2a7b4af4538 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4af7e48 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4af7dc0 <col:18> 'felem':'limb [4]' lvalue Var 0x2a7b4af3498 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x2a7b4af7e78 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4af7e60 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4af7de0 <col:24> 'longfelem':'limb [8]' lvalue Var 0x2a7b4af5920 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x2a7b4af7f20 <line:1040:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x2a7b4af7f08 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4af7e90 <col:5> 'void (limb *, const limb *)' Function 0x2a7b49f4048 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4af7f50 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4af7eb0 <col:18> 'felem':'limb [4]' lvalue Var 0x2a7b4af3798 'e32' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x2a7b4af7f80 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4af7f68 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4af7ee8 <col:23> 'felem':'limb [4]' lvalue Var 0x2a7b4af3498 'ftmp' 'felem':'limb [4]'
|   |-ForStmt 0x2a7b4af82e8 <line:1041:5, line:1044:5>
|   | |-BinaryOperator 0x2a7b4af7ff8 <line:1041:10, col:14> 'unsigned int' '='
|   | | |-DeclRefExpr 0x2a7b4af7f98 <col:10> 'unsigned int' lvalue Var 0x2a7b4af59b8 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x2a7b4af7fe0 <col:14> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x2a7b4af7fb8 <col:14> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x2a7b4af8090 <col:17, col:21> 'int' '<'
|   | | |-ImplicitCastExpr 0x2a7b4af8060 <col:17> 'unsigned int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b4af8018 <col:17> 'unsigned int' lvalue Var 0x2a7b4af59b8 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x2a7b4af8078 <col:21> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x2a7b4af8038 <col:21> 'int' 32
|   | |-UnaryOperator 0x2a7b4af80d0 <col:25, col:26> 'unsigned int' postfix '++'
|   | | `-DeclRefExpr 0x2a7b4af80b0 <col:25> 'unsigned int' lvalue Var 0x2a7b4af59b8 'i' 'unsigned int'
|   | `-CompoundStmt 0x2a7b4af82c8 <col:30, line:1044:5>
|   |   |-CallExpr 0x2a7b4af8160 <line:1042:9, col:31> 'void'
|   |   | |-ImplicitCastExpr 0x2a7b4af8148 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x2a7b4af80e8 <col:9> 'void (limb *, const limb *)' Function 0x2a7b4a04ae8 'felem_square' 'void (limb *, const limb *)'
|   |   | |-ImplicitCastExpr 0x2a7b4af8190 <col:22> 'limb *' <ArrayToPointerDecay>
|   |   | | `-DeclRefExpr 0x2a7b4af8108 <col:22> 'longfelem':'limb [8]' lvalue Var 0x2a7b4af5920 'tmp' 'longfelem':'limb [8]'
|   |   | `-ImplicitCastExpr 0x2a7b4af81c0 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   |   `-ImplicitCastExpr 0x2a7b4af81a8 <col:27> 'limb *' <ArrayToPointerDecay>
|   |   |     `-DeclRefExpr 0x2a7b4af8128 <col:27> 'felem':'limb [4]' lvalue Var 0x2a7b4af3498 'ftmp' 'felem':'limb [4]'
|   |   `-CallExpr 0x2a7b4af8250 <line:1043:9, col:31> 'void'
|   |     |-ImplicitCastExpr 0x2a7b4af8238 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x2a7b4af81d8 <col:9> 'void (limb *, const limb *)' Function 0x2a7b4af4538 'felem_reduce' 'void (limb *, const limb *)'
|   |     |-ImplicitCastExpr 0x2a7b4af8280 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x2a7b4af81f8 <col:22> 'felem':'limb [4]' lvalue Var 0x2a7b4af3498 'ftmp' 'felem':'limb [4]'
|   |     `-ImplicitCastExpr 0x2a7b4af82b0 <col:28> 'const limb *':'const limb *' <NoOp>
|   |       `-ImplicitCastExpr 0x2a7b4af8298 <col:28> 'limb *' <ArrayToPointerDecay>
|   |         `-DeclRefExpr 0x2a7b4af8218 <col:28> 'longfelem':'limb [8]' lvalue Var 0x2a7b4af5920 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x2a7b4af83b0 <line:1045:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x2a7b4af8398 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4af8320 <col:5> 'void (limb *, const limb *)' Function 0x2a7b49f4048 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4af83e0 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4af8340 <col:18> 'felem':'limb [4]' lvalue Var 0x2a7b4af3810 'e64' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x2a7b4af8410 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4af83f8 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4af8378 <col:23> 'felem':'limb [4]' lvalue Var 0x2a7b4af3498 'ftmp' 'felem':'limb [4]'
|   |-CallExpr 0x2a7b4af84c0 <line:1046:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x2a7b4af84a8 <col:5> 'void (*)(limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4af8428 <col:5> 'void (limb *, const limb *, const limb *)' Function 0x2a7b4a096f8 'felem_mul' 'void (limb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4af84f8 <col:15> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4af8448 <col:15> 'longfelem':'limb [8]' lvalue Var 0x2a7b4af5920 'tmp' 'longfelem':'limb [8]'
|   | |-ImplicitCastExpr 0x2a7b4af8528 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x2a7b4af8510 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x2a7b4af8468 <col:20> 'felem':'limb [4]' lvalue Var 0x2a7b4af3498 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x2a7b4af8540 <col:26> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x2a7b4af8488 <col:26> 'const limb *':'const limb *' lvalue ParmVar 0x2a7b4af32f8 'in' 'const limb *':'const limb *'
|   |-CallExpr 0x2a7b4af85d0 <line:1047:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x2a7b4af85b8 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4af8558 <col:5> 'void (limb *, const limb *)' Function 0x2a7b4af4538 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4af8600 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4af8578 <col:18> 'felem':'limb [4]' lvalue Var 0x2a7b4af3498 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x2a7b4af8630 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4af8618 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4af8598 <col:24> 'longfelem':'limb [8]' lvalue Var 0x2a7b4af5920 'tmp' 'longfelem':'limb [8]'
|   |-ForStmt 0x2a7b4af8998 <line:1048:5, line:1051:5>
|   | |-BinaryOperator 0x2a7b4af86a8 <line:1048:10, col:14> 'unsigned int' '='
|   | | |-DeclRefExpr 0x2a7b4af8648 <col:10> 'unsigned int' lvalue Var 0x2a7b4af59b8 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x2a7b4af8690 <col:14> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x2a7b4af8668 <col:14> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x2a7b4af8740 <col:17, col:21> 'int' '<'
|   | | |-ImplicitCastExpr 0x2a7b4af8710 <col:17> 'unsigned int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b4af86c8 <col:17> 'unsigned int' lvalue Var 0x2a7b4af59b8 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x2a7b4af8728 <col:21> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x2a7b4af86e8 <col:21> 'int' 192
|   | |-UnaryOperator 0x2a7b4af8780 <col:26, col:27> 'unsigned int' postfix '++'
|   | | `-DeclRefExpr 0x2a7b4af8760 <col:26> 'unsigned int' lvalue Var 0x2a7b4af59b8 'i' 'unsigned int'
|   | `-CompoundStmt 0x2a7b4af8978 <col:31, line:1051:5>
|   |   |-CallExpr 0x2a7b4af8810 <line:1049:9, col:31> 'void'
|   |   | |-ImplicitCastExpr 0x2a7b4af87f8 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x2a7b4af8798 <col:9> 'void (limb *, const limb *)' Function 0x2a7b4a04ae8 'felem_square' 'void (limb *, const limb *)'
|   |   | |-ImplicitCastExpr 0x2a7b4af8840 <col:22> 'limb *' <ArrayToPointerDecay>
|   |   | | `-DeclRefExpr 0x2a7b4af87b8 <col:22> 'longfelem':'limb [8]' lvalue Var 0x2a7b4af5920 'tmp' 'longfelem':'limb [8]'
|   |   | `-ImplicitCastExpr 0x2a7b4af8870 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   |   `-ImplicitCastExpr 0x2a7b4af8858 <col:27> 'limb *' <ArrayToPointerDecay>
|   |   |     `-DeclRefExpr 0x2a7b4af87d8 <col:27> 'felem':'limb [4]' lvalue Var 0x2a7b4af3498 'ftmp' 'felem':'limb [4]'
|   |   `-CallExpr 0x2a7b4af8900 <line:1050:9, col:31> 'void'
|   |     |-ImplicitCastExpr 0x2a7b4af88e8 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x2a7b4af8888 <col:9> 'void (limb *, const limb *)' Function 0x2a7b4af4538 'felem_reduce' 'void (limb *, const limb *)'
|   |     |-ImplicitCastExpr 0x2a7b4af8930 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x2a7b4af88a8 <col:22> 'felem':'limb [4]' lvalue Var 0x2a7b4af3498 'ftmp' 'felem':'limb [4]'
|   |     `-ImplicitCastExpr 0x2a7b4af8960 <col:28> 'const limb *':'const limb *' <NoOp>
|   |       `-ImplicitCastExpr 0x2a7b4af8948 <col:28> 'limb *' <ArrayToPointerDecay>
|   |         `-DeclRefExpr 0x2a7b4af88c8 <col:28> 'longfelem':'limb [8]' lvalue Var 0x2a7b4af5920 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x2a7b4af8a68 <line:1053:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x2a7b4af8a50 <col:5> 'void (*)(limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4af89d0 <col:5> 'void (limb *, const limb *, const limb *)' Function 0x2a7b4a096f8 'felem_mul' 'void (limb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4af8aa0 <col:15> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4af89f0 <col:15> 'longfelem':'limb [8]' lvalue Var 0x2a7b4af5920 'tmp' 'longfelem':'limb [8]'
|   | |-ImplicitCastExpr 0x2a7b4af8ad0 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x2a7b4af8ab8 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x2a7b4af8a10 <col:20> 'felem':'limb [4]' lvalue Var 0x2a7b4af3810 'e64' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x2a7b4af8b00 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4af8ae8 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4af8a30 <col:25> 'felem':'limb [4]' lvalue Var 0x2a7b4af3798 'e32' 'felem':'limb [4]'
|   |-CallExpr 0x2a7b4af8ba8 <line:1054:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x2a7b4af8b90 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4af8b18 <col:5> 'void (limb *, const limb *)' Function 0x2a7b4af4538 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4af8bd8 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4af8b38 <col:18> 'felem':'limb [4]' lvalue Var 0x2a7b4af3510 'ftmp2' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x2a7b4af8c08 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4af8bf0 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4af8b70 <col:25> 'longfelem':'limb [8]' lvalue Var 0x2a7b4af5920 'tmp' 'longfelem':'limb [8]'
|   |-ForStmt 0x2a7b4af8f70 <line:1055:5, line:1058:5>
|   | |-BinaryOperator 0x2a7b4af8c80 <line:1055:10, col:14> 'unsigned int' '='
|   | | |-DeclRefExpr 0x2a7b4af8c20 <col:10> 'unsigned int' lvalue Var 0x2a7b4af59b8 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x2a7b4af8c68 <col:14> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x2a7b4af8c40 <col:14> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x2a7b4af8d18 <col:17, col:21> 'int' '<'
|   | | |-ImplicitCastExpr 0x2a7b4af8ce8 <col:17> 'unsigned int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b4af8ca0 <col:17> 'unsigned int' lvalue Var 0x2a7b4af59b8 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x2a7b4af8d00 <col:21> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x2a7b4af8cc0 <col:21> 'int' 16
|   | |-UnaryOperator 0x2a7b4af8d58 <col:25, col:26> 'unsigned int' postfix '++'
|   | | `-DeclRefExpr 0x2a7b4af8d38 <col:25> 'unsigned int' lvalue Var 0x2a7b4af59b8 'i' 'unsigned int'
|   | `-CompoundStmt 0x2a7b4af8f50 <col:30, line:1058:5>
|   |   |-CallExpr 0x2a7b4af8de8 <line:1056:9, col:32> 'void'
|   |   | |-ImplicitCastExpr 0x2a7b4af8dd0 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x2a7b4af8d70 <col:9> 'void (limb *, const limb *)' Function 0x2a7b4a04ae8 'felem_square' 'void (limb *, const limb *)'
|   |   | |-ImplicitCastExpr 0x2a7b4af8e18 <col:22> 'limb *' <ArrayToPointerDecay>
|   |   | | `-DeclRefExpr 0x2a7b4af8d90 <col:22> 'longfelem':'limb [8]' lvalue Var 0x2a7b4af5920 'tmp' 'longfelem':'limb [8]'
|   |   | `-ImplicitCastExpr 0x2a7b4af8e48 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   |   `-ImplicitCastExpr 0x2a7b4af8e30 <col:27> 'limb *' <ArrayToPointerDecay>
|   |   |     `-DeclRefExpr 0x2a7b4af8db0 <col:27> 'felem':'limb [4]' lvalue Var 0x2a7b4af3510 'ftmp2' 'felem':'limb [4]'
|   |   `-CallExpr 0x2a7b4af8ed8 <line:1057:9, col:32> 'void'
|   |     |-ImplicitCastExpr 0x2a7b4af8ec0 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x2a7b4af8e60 <col:9> 'void (limb *, const limb *)' Function 0x2a7b4af4538 'felem_reduce' 'void (limb *, const limb *)'
|   |     |-ImplicitCastExpr 0x2a7b4af8f08 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x2a7b4af8e80 <col:22> 'felem':'limb [4]' lvalue Var 0x2a7b4af3510 'ftmp2' 'felem':'limb [4]'
|   |     `-ImplicitCastExpr 0x2a7b4af8f38 <col:29> 'const limb *':'const limb *' <NoOp>
|   |       `-ImplicitCastExpr 0x2a7b4af8f20 <col:29> 'limb *' <ArrayToPointerDecay>
|   |         `-DeclRefExpr 0x2a7b4af8ea0 <col:29> 'longfelem':'limb [8]' lvalue Var 0x2a7b4af5920 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x2a7b4af9040 <line:1059:5, col:30> 'void'
|   | |-ImplicitCastExpr 0x2a7b4af9028 <col:5> 'void (*)(limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4af8fa8 <col:5> 'void (limb *, const limb *, const limb *)' Function 0x2a7b4a096f8 'felem_mul' 'void (limb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4af9078 <col:15> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4af8fc8 <col:15> 'longfelem':'limb [8]' lvalue Var 0x2a7b4af5920 'tmp' 'longfelem':'limb [8]'
|   | |-ImplicitCastExpr 0x2a7b4af90a8 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x2a7b4af9090 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x2a7b4af8fe8 <col:20> 'felem':'limb [4]' lvalue Var 0x2a7b4af3510 'ftmp2' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x2a7b4af90d8 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4af90c0 <col:27> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4af9008 <col:27> 'felem':'limb [4]' lvalue Var 0x2a7b4af3720 'e16' 'felem':'limb [4]'
|   |-CallExpr 0x2a7b4af9168 <line:1060:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x2a7b4af9150 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4af90f0 <col:5> 'void (limb *, const limb *)' Function 0x2a7b4af4538 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4af9198 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4af9110 <col:18> 'felem':'limb [4]' lvalue Var 0x2a7b4af3510 'ftmp2' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x2a7b4af91c8 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4af91b0 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4af9130 <col:25> 'longfelem':'limb [8]' lvalue Var 0x2a7b4af5920 'tmp' 'longfelem':'limb [8]'
|   |-ForStmt 0x2a7b4af9530 <line:1061:5, line:1064:5>
|   | |-BinaryOperator 0x2a7b4af9240 <line:1061:10, col:14> 'unsigned int' '='
|   | | |-DeclRefExpr 0x2a7b4af91e0 <col:10> 'unsigned int' lvalue Var 0x2a7b4af59b8 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x2a7b4af9228 <col:14> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x2a7b4af9200 <col:14> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x2a7b4af92d8 <col:17, col:21> 'int' '<'
|   | | |-ImplicitCastExpr 0x2a7b4af92a8 <col:17> 'unsigned int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b4af9260 <col:17> 'unsigned int' lvalue Var 0x2a7b4af59b8 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x2a7b4af92c0 <col:21> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x2a7b4af9280 <col:21> 'int' 8
|   | |-UnaryOperator 0x2a7b4af9318 <col:24, col:25> 'unsigned int' postfix '++'
|   | | `-DeclRefExpr 0x2a7b4af92f8 <col:24> 'unsigned int' lvalue Var 0x2a7b4af59b8 'i' 'unsigned int'
|   | `-CompoundStmt 0x2a7b4af9510 <col:29, line:1064:5>
|   |   |-CallExpr 0x2a7b4af93a8 <line:1062:9, col:32> 'void'
|   |   | |-ImplicitCastExpr 0x2a7b4af9390 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x2a7b4af9330 <col:9> 'void (limb *, const limb *)' Function 0x2a7b4a04ae8 'felem_square' 'void (limb *, const limb *)'
|   |   | |-ImplicitCastExpr 0x2a7b4af93d8 <col:22> 'limb *' <ArrayToPointerDecay>
|   |   | | `-DeclRefExpr 0x2a7b4af9350 <col:22> 'longfelem':'limb [8]' lvalue Var 0x2a7b4af5920 'tmp' 'longfelem':'limb [8]'
|   |   | `-ImplicitCastExpr 0x2a7b4af9408 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   |   `-ImplicitCastExpr 0x2a7b4af93f0 <col:27> 'limb *' <ArrayToPointerDecay>
|   |   |     `-DeclRefExpr 0x2a7b4af9370 <col:27> 'felem':'limb [4]' lvalue Var 0x2a7b4af3510 'ftmp2' 'felem':'limb [4]'
|   |   `-CallExpr 0x2a7b4af9498 <line:1063:9, col:32> 'void'
|   |     |-ImplicitCastExpr 0x2a7b4af9480 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x2a7b4af9420 <col:9> 'void (limb *, const limb *)' Function 0x2a7b4af4538 'felem_reduce' 'void (limb *, const limb *)'
|   |     |-ImplicitCastExpr 0x2a7b4af94c8 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x2a7b4af9440 <col:22> 'felem':'limb [4]' lvalue Var 0x2a7b4af3510 'ftmp2' 'felem':'limb [4]'
|   |     `-ImplicitCastExpr 0x2a7b4af94f8 <col:29> 'const limb *':'const limb *' <NoOp>
|   |       `-ImplicitCastExpr 0x2a7b4af94e0 <col:29> 'limb *' <ArrayToPointerDecay>
|   |         `-DeclRefExpr 0x2a7b4af9460 <col:29> 'longfelem':'limb [8]' lvalue Var 0x2a7b4af5920 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x2a7b4af9600 <line:1065:5, col:29> 'void'
|   | |-ImplicitCastExpr 0x2a7b4af95e8 <col:5> 'void (*)(limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4af9568 <col:5> 'void (limb *, const limb *, const limb *)' Function 0x2a7b4a096f8 'felem_mul' 'void (limb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4af9638 <col:15> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4af9588 <col:15> 'longfelem':'limb [8]' lvalue Var 0x2a7b4af5920 'tmp' 'longfelem':'limb [8]'
|   | |-ImplicitCastExpr 0x2a7b4af9668 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x2a7b4af9650 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x2a7b4af95a8 <col:20> 'felem':'limb [4]' lvalue Var 0x2a7b4af3510 'ftmp2' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x2a7b4af9698 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4af9680 <col:27> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4af95c8 <col:27> 'felem':'limb [4]' lvalue Var 0x2a7b4af36a8 'e8' 'felem':'limb [4]'
|   |-CallExpr 0x2a7b4af9728 <line:1066:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x2a7b4af9710 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4af96b0 <col:5> 'void (limb *, const limb *)' Function 0x2a7b4af4538 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4af9758 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4af96d0 <col:18> 'felem':'limb [4]' lvalue Var 0x2a7b4af3510 'ftmp2' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x2a7b4af9788 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4af9770 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4af96f0 <col:25> 'longfelem':'limb [8]' lvalue Var 0x2a7b4af5920 'tmp' 'longfelem':'limb [8]'
|   |-ForStmt 0x2a7b4af9b00 <line:1067:5, line:1070:5>
|   | |-BinaryOperator 0x2a7b4af9800 <line:1067:10, col:14> 'unsigned int' '='
|   | | |-DeclRefExpr 0x2a7b4af97a0 <col:10> 'unsigned int' lvalue Var 0x2a7b4af59b8 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x2a7b4af97e8 <col:14> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x2a7b4af97c0 <col:14> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x2a7b4af9898 <col:17, col:21> 'int' '<'
|   | | |-ImplicitCastExpr 0x2a7b4af9868 <col:17> 'unsigned int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b4af9820 <col:17> 'unsigned int' lvalue Var 0x2a7b4af59b8 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x2a7b4af9880 <col:21> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x2a7b4af9840 <col:21> 'int' 4
|   | |-UnaryOperator 0x2a7b4af98d8 <col:24, col:25> 'unsigned int' postfix '++'
|   | | `-DeclRefExpr 0x2a7b4af98b8 <col:24> 'unsigned int' lvalue Var 0x2a7b4af59b8 'i' 'unsigned int'
|   | `-CompoundStmt 0x2a7b4af9ae0 <col:29, line:1070:5>
|   |   |-CallExpr 0x2a7b4af9978 <line:1068:9, col:32> 'void'
|   |   | |-ImplicitCastExpr 0x2a7b4af9960 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x2a7b4af98f0 <col:9> 'void (limb *, const limb *)' Function 0x2a7b4a04ae8 'felem_square' 'void (limb *, const limb *)'
|   |   | |-ImplicitCastExpr 0x2a7b4af99a8 <col:22> 'limb *' <ArrayToPointerDecay>
|   |   | | `-DeclRefExpr 0x2a7b4af9910 <col:22> 'longfelem':'limb [8]' lvalue Var 0x2a7b4af5920 'tmp' 'longfelem':'limb [8]'
|   |   | `-ImplicitCastExpr 0x2a7b4af99d8 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   |   `-ImplicitCastExpr 0x2a7b4af99c0 <col:27> 'limb *' <ArrayToPointerDecay>
|   |   |     `-DeclRefExpr 0x2a7b4af9940 <col:27> 'felem':'limb [4]' lvalue Var 0x2a7b4af3510 'ftmp2' 'felem':'limb [4]'
|   |   `-CallExpr 0x2a7b4af9a68 <line:1069:9, col:32> 'void'
|   |     |-ImplicitCastExpr 0x2a7b4af9a50 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x2a7b4af99f0 <col:9> 'void (limb *, const limb *)' Function 0x2a7b4af4538 'felem_reduce' 'void (limb *, const limb *)'
|   |     |-ImplicitCastExpr 0x2a7b4af9a98 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x2a7b4af9a10 <col:22> 'felem':'limb [4]' lvalue Var 0x2a7b4af3510 'ftmp2' 'felem':'limb [4]'
|   |     `-ImplicitCastExpr 0x2a7b4af9ac8 <col:29> 'const limb *':'const limb *' <NoOp>
|   |       `-ImplicitCastExpr 0x2a7b4af9ab0 <col:29> 'limb *' <ArrayToPointerDecay>
|   |         `-DeclRefExpr 0x2a7b4af9a30 <col:29> 'longfelem':'limb [8]' lvalue Var 0x2a7b4af5920 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x2a7b4af9bd0 <line:1071:5, col:29> 'void'
|   | |-ImplicitCastExpr 0x2a7b4af9bb8 <col:5> 'void (*)(limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4af9b38 <col:5> 'void (limb *, const limb *, const limb *)' Function 0x2a7b4a096f8 'felem_mul' 'void (limb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4af9c08 <col:15> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4af9b58 <col:15> 'longfelem':'limb [8]' lvalue Var 0x2a7b4af5920 'tmp' 'longfelem':'limb [8]'
|   | |-ImplicitCastExpr 0x2a7b4af9c38 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x2a7b4af9c20 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x2a7b4af9b78 <col:20> 'felem':'limb [4]' lvalue Var 0x2a7b4af3510 'ftmp2' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x2a7b4af9c68 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4af9c50 <col:27> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4af9b98 <col:27> 'felem':'limb [4]' lvalue Var 0x2a7b4af3630 'e4' 'felem':'limb [4]'
|   |-CallExpr 0x2a7b4af9cf8 <line:1072:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x2a7b4af9ce0 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4af9c80 <col:5> 'void (limb *, const limb *)' Function 0x2a7b4af4538 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4af9d28 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4af9ca0 <col:18> 'felem':'limb [4]' lvalue Var 0x2a7b4af3510 'ftmp2' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x2a7b4af9d58 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4af9d40 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4af9cc0 <col:25> 'longfelem':'limb [8]' lvalue Var 0x2a7b4af5920 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x2a7b4af9de8 <line:1073:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x2a7b4af9dd0 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4af9d70 <col:5> 'void (limb *, const limb *)' Function 0x2a7b4a04ae8 'felem_square' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4af9e18 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4af9d90 <col:18> 'longfelem':'limb [8]' lvalue Var 0x2a7b4af5920 'tmp' 'longfelem':'limb [8]'
|   | `-ImplicitCastExpr 0x2a7b4af9e48 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4af9e30 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4af9db0 <col:23> 'felem':'limb [4]' lvalue Var 0x2a7b4af3510 'ftmp2' 'felem':'limb [4]'
|   |-CallExpr 0x2a7b4af9ed8 <line:1074:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x2a7b4af9ec0 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4af9e60 <col:5> 'void (limb *, const limb *)' Function 0x2a7b4af4538 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4af9f08 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4af9e80 <col:18> 'felem':'limb [4]' lvalue Var 0x2a7b4af3510 'ftmp2' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x2a7b4af9f38 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4af9f20 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4af9ea0 <col:25> 'longfelem':'limb [8]' lvalue Var 0x2a7b4af5920 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x2a7b4af9fc8 <line:1075:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x2a7b4af9fb0 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4af9f50 <col:5> 'void (limb *, const limb *)' Function 0x2a7b4a04ae8 'felem_square' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4af9ff8 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4af9f70 <col:18> 'longfelem':'limb [8]' lvalue Var 0x2a7b4af5920 'tmp' 'longfelem':'limb [8]'
|   | `-ImplicitCastExpr 0x2a7b4afa028 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4afa010 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4af9f90 <col:23> 'felem':'limb [4]' lvalue Var 0x2a7b4af3510 'ftmp2' 'felem':'limb [4]'
|   |-CallExpr 0x2a7b4afa0b8 <line:1076:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x2a7b4afa0a0 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4afa040 <col:5> 'void (limb *, const limb *)' Function 0x2a7b4af4538 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4afa0e8 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4afa060 <col:18> 'felem':'limb [4]' lvalue Var 0x2a7b4af3510 'ftmp2' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x2a7b4afa118 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4afa100 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4afa080 <col:25> 'longfelem':'limb [8]' lvalue Var 0x2a7b4af5920 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x2a7b4afa1c8 <line:1077:5, col:29> 'void'
|   | |-ImplicitCastExpr 0x2a7b4afa1b0 <col:5> 'void (*)(limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4afa130 <col:5> 'void (limb *, const limb *, const limb *)' Function 0x2a7b4a096f8 'felem_mul' 'void (limb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4afa200 <col:15> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4afa150 <col:15> 'longfelem':'limb [8]' lvalue Var 0x2a7b4af5920 'tmp' 'longfelem':'limb [8]'
|   | |-ImplicitCastExpr 0x2a7b4afa230 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x2a7b4afa218 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x2a7b4afa170 <col:20> 'felem':'limb [4]' lvalue Var 0x2a7b4af3510 'ftmp2' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x2a7b4afa260 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4afa248 <col:27> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4afa190 <col:27> 'felem':'limb [4]' lvalue Var 0x2a7b4af35b8 'e2' 'felem':'limb [4]'
|   |-CallExpr 0x2a7b4afa2f0 <line:1078:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x2a7b4afa2d8 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4afa278 <col:5> 'void (limb *, const limb *)' Function 0x2a7b4af4538 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4afa320 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4afa298 <col:18> 'felem':'limb [4]' lvalue Var 0x2a7b4af3510 'ftmp2' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x2a7b4afa350 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4afa338 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4afa2b8 <col:25> 'longfelem':'limb [8]' lvalue Var 0x2a7b4af5920 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x2a7b4afa3e0 <line:1079:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x2a7b4afa3c8 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4afa368 <col:5> 'void (limb *, const limb *)' Function 0x2a7b4a04ae8 'felem_square' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4afa410 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4afa388 <col:18> 'longfelem':'limb [8]' lvalue Var 0x2a7b4af5920 'tmp' 'longfelem':'limb [8]'
|   | `-ImplicitCastExpr 0x2a7b4afa440 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4afa428 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4afa3a8 <col:23> 'felem':'limb [4]' lvalue Var 0x2a7b4af3510 'ftmp2' 'felem':'limb [4]'
|   |-CallExpr 0x2a7b4afa4d0 <line:1080:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x2a7b4afa4b8 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4afa458 <col:5> 'void (limb *, const limb *)' Function 0x2a7b4af4538 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4afa500 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4afa478 <col:18> 'felem':'limb [4]' lvalue Var 0x2a7b4af3510 'ftmp2' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x2a7b4afa530 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4afa518 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4afa498 <col:25> 'longfelem':'limb [8]' lvalue Var 0x2a7b4af5920 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x2a7b4afa5c0 <line:1081:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x2a7b4afa5a8 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4afa548 <col:5> 'void (limb *, const limb *)' Function 0x2a7b4a04ae8 'felem_square' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4afa5f0 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4afa568 <col:18> 'longfelem':'limb [8]' lvalue Var 0x2a7b4af5920 'tmp' 'longfelem':'limb [8]'
|   | `-ImplicitCastExpr 0x2a7b4afa620 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4afa608 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4afa588 <col:23> 'felem':'limb [4]' lvalue Var 0x2a7b4af3510 'ftmp2' 'felem':'limb [4]'
|   |-CallExpr 0x2a7b4afa6b0 <line:1082:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x2a7b4afa698 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4afa638 <col:5> 'void (limb *, const limb *)' Function 0x2a7b4af4538 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4afa6e0 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4afa658 <col:18> 'felem':'limb [4]' lvalue Var 0x2a7b4af3510 'ftmp2' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x2a7b4afa710 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4afa6f8 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4afa678 <col:25> 'longfelem':'limb [8]' lvalue Var 0x2a7b4af5920 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x2a7b4afa7c0 <line:1083:5, col:29> 'void'
|   | |-ImplicitCastExpr 0x2a7b4afa7a8 <col:5> 'void (*)(limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4afa728 <col:5> 'void (limb *, const limb *, const limb *)' Function 0x2a7b4a096f8 'felem_mul' 'void (limb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4afa7f8 <col:15> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4afa748 <col:15> 'longfelem':'limb [8]' lvalue Var 0x2a7b4af5920 'tmp' 'longfelem':'limb [8]'
|   | |-ImplicitCastExpr 0x2a7b4afa828 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x2a7b4afa810 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x2a7b4afa768 <col:20> 'felem':'limb [4]' lvalue Var 0x2a7b4af3510 'ftmp2' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x2a7b4afa840 <col:27> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x2a7b4afa788 <col:27> 'const limb *':'const limb *' lvalue ParmVar 0x2a7b4af32f8 'in' 'const limb *':'const limb *'
|   |-CallExpr 0x2a7b4afa8d0 <line:1084:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x2a7b4afa8b8 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4afa858 <col:5> 'void (limb *, const limb *)' Function 0x2a7b4af4538 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4afa900 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4afa878 <col:18> 'felem':'limb [4]' lvalue Var 0x2a7b4af3510 'ftmp2' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x2a7b4afa930 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4afa918 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4afa898 <col:25> 'longfelem':'limb [8]' lvalue Var 0x2a7b4af5920 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x2a7b4afa9e0 <line:1086:5, col:31> 'void'
|   | |-ImplicitCastExpr 0x2a7b4afa9c8 <col:5> 'void (*)(limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4afa948 <col:5> 'void (limb *, const limb *, const limb *)' Function 0x2a7b4a096f8 'felem_mul' 'void (limb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4afaa18 <col:15> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4afa968 <col:15> 'longfelem':'limb [8]' lvalue Var 0x2a7b4af5920 'tmp' 'longfelem':'limb [8]'
|   | |-ImplicitCastExpr 0x2a7b4afaa48 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x2a7b4afaa30 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x2a7b4afa988 <col:20> 'felem':'limb [4]' lvalue Var 0x2a7b4af3510 'ftmp2' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x2a7b4afaa78 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4afaa60 <col:27> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4afa9a8 <col:27> 'felem':'limb [4]' lvalue Var 0x2a7b4af3498 'ftmp' 'felem':'limb [4]'
|   `-CallExpr 0x2a7b4afab08 <line:1087:5, col:26> 'void'
|     |-ImplicitCastExpr 0x2a7b4afaaf0 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x2a7b4afaa90 <col:5> 'void (limb *, const limb *)' Function 0x2a7b4af4538 'felem_reduce' 'void (limb *, const limb *)'
|     |-ImplicitCastExpr 0x2a7b4afab38 <col:18> 'limb *':'limb *' <LValueToRValue>
|     | `-DeclRefExpr 0x2a7b4afaab0 <col:18> 'limb *':'limb *' lvalue ParmVar 0x2a7b4af3280 'out' 'limb *':'limb *'
|     `-ImplicitCastExpr 0x2a7b4afab68 <col:23> 'const limb *':'const limb *' <NoOp>
|       `-ImplicitCastExpr 0x2a7b4afab50 <col:23> 'limb *' <ArrayToPointerDecay>
|         `-DeclRefExpr 0x2a7b4afaad0 <col:23> 'longfelem':'limb [8]' lvalue Var 0x2a7b4af5920 'tmp' 'longfelem':'limb [8]'
|-FunctionDecl 0x2a7b4afaee8 <line:1090:1, line:1097:1> line:1090:13 used smallfelem_inv_contract 'void (u64 *, const u64 *)' static
| |-ParmVarDecl 0x2a7b4afada8 <col:37, col:48> col:48 used out 'u64 *':'u64 *'
| |-ParmVarDecl 0x2a7b4afae20 <col:53, col:70> col:70 used in 'const u64 *':'const u64 *'
| `-CompoundStmt 0x2a7b4afb340 <line:1091:1, line:1097:1>
|   |-DeclStmt 0x2a7b4afb028 <line:1092:5, col:14>
|   | `-VarDecl 0x2a7b4afafc0 <col:5, col:11> col:11 used tmp 'felem':'limb [4]'
|   |-CallExpr 0x2a7b4afb100 <line:1094:5, col:30> 'void'
|   | |-ImplicitCastExpr 0x2a7b4afb0e8 <col:5> 'void (*)(limb *, const u64 *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4afb040 <col:5> 'void (limb *, const u64 *)' Function 0x2a7b4a01120 'smallfelem_expand' 'void (limb *, const u64 *)'
|   | |-ImplicitCastExpr 0x2a7b4afb130 <col:23> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4afb060 <col:23> 'felem':'limb [4]' lvalue Var 0x2a7b4afafc0 'tmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x2a7b4afb148 <col:28> 'const u64 *':'const u64 *' <LValueToRValue>
|   |   `-DeclRefExpr 0x2a7b4afb098 <col:28> 'const u64 *':'const u64 *' lvalue ParmVar 0x2a7b4afae20 'in' 'const u64 *':'const u64 *'
|   |-CallExpr 0x2a7b4afb1d8 <line:1095:5, col:23> 'void'
|   | |-ImplicitCastExpr 0x2a7b4afb1c0 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4afb160 <col:5> 'void (limb *, const limb *)' Function 0x2a7b4af33c0 'felem_inv' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4afb208 <col:15> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4afb180 <col:15> 'felem':'limb [4]' lvalue Var 0x2a7b4afafc0 'tmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x2a7b4afb238 <col:20> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4afb220 <col:20> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4afb1a0 <col:20> 'felem':'limb [4]' lvalue Var 0x2a7b4afafc0 'tmp' 'felem':'limb [4]'
|   `-CallExpr 0x2a7b4afb2c8 <line:1096:5, col:28> 'void'
|     |-ImplicitCastExpr 0x2a7b4afb2b0 <col:5> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x2a7b4afb250 <col:5> 'void (u64 *, const limb *)' Function 0x2a7b4aeffe8 'felem_contract' 'void (u64 *, const limb *)'
|     |-ImplicitCastExpr 0x2a7b4afb2f8 <col:20> 'u64 *':'u64 *' <LValueToRValue>
|     | `-DeclRefExpr 0x2a7b4afb270 <col:20> 'u64 *':'u64 *' lvalue ParmVar 0x2a7b4afada8 'out' 'u64 *':'u64 *'
|     `-ImplicitCastExpr 0x2a7b4afb328 <col:25> 'const limb *':'const limb *' <NoOp>
|       `-ImplicitCastExpr 0x2a7b4afb310 <col:25> 'limb *' <ArrayToPointerDecay>
|         `-DeclRefExpr 0x2a7b4afb290 <col:25> 'felem':'limb [4]' lvalue Var 0x2a7b4afafc0 'tmp' 'felem':'limb [4]'
|-FunctionDecl 0x2a7b4afb7d8 <line:1117:1, line:1193:1> line:1118:1 used point_double 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *)' static
| |-ParmVarDecl 0x2a7b4afb380 <col:14, col:20> col:20 used x_out 'limb *':'limb *'
| |-ParmVarDecl 0x2a7b4afb3f8 <col:27, col:33> col:33 used y_out 'limb *':'limb *'
| |-ParmVarDecl 0x2a7b4afb470 <col:40, col:46> col:46 used z_out 'limb *':'limb *'
| |-ParmVarDecl 0x2a7b4afb4e8 <line:1119:14, col:26> col:26 used x_in 'const limb *':'const limb *'
| |-ParmVarDecl 0x2a7b4afb560 <col:32, col:44> col:44 used y_in 'const limb *':'const limb *'
| |-ParmVarDecl 0x2a7b4afb5d8 <col:50, col:62> col:62 used z_in 'const limb *':'const limb *'
| `-CompoundStmt 0x2a7b4afbf68 <line:1120:1, line:1193:1>
|   |-DeclStmt 0x2a7b4aeb960 <line:1121:5, col:24>
|   | |-VarDecl 0x2a7b4afb8d0 <col:5, col:15> col:15 used tmp 'longfelem':'limb [8]'
|   | `-VarDecl 0x2a7b4aeb8e0 <col:5, col:20> col:20 used tmp2 'longfelem':'limb [8]'
|   |-DeclStmt 0x2a7b4aebc80 <line:1122:5, col:49>
|   | |-VarDecl 0x2a7b4aeb988 <col:5, col:11> col:11 used delta 'felem':'limb [4]'
|   | |-VarDecl 0x2a7b4aeba00 <col:5, col:18> col:18 used gamma 'felem':'limb [4]'
|   | |-VarDecl 0x2a7b4aeba78 <col:5, col:25> col:25 used beta 'felem':'limb [4]'
|   | |-VarDecl 0x2a7b4aebaf0 <col:5, col:31> col:31 used alpha 'felem':'limb [4]'
|   | |-VarDecl 0x2a7b4aebb68 <col:5, col:38> col:38 used ftmp 'felem':'limb [4]'
|   | `-VarDecl 0x2a7b4aebbe0 <col:5, col:44> col:44 used ftmp2 'felem':'limb [4]'
|   |-DeclStmt 0x2a7b4aebda0 <line:1123:5, col:30>
|   | |-VarDecl 0x2a7b4aebca8 <col:5, col:16> col:16 used small1 'smallfelem':'u64 [4]'
|   | `-VarDecl 0x2a7b4aebd20 <col:5, col:24> col:24 used small2 'smallfelem':'u64 [4]'
|   |-CallExpr 0x2a7b4aebe48 <line:1125:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x2a7b4aebe30 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4aebdb8 <col:5> 'void (limb *, const limb *)' Function 0x2a7b49f4048 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4aebe78 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4aebdd8 <col:18> 'felem':'limb [4]' lvalue Var 0x2a7b4aebb68 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x2a7b4aebe90 <col:24> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x2a7b4aebe10 <col:24> 'const limb *':'const limb *' lvalue ParmVar 0x2a7b4afb4e8 'x_in' 'const limb *':'const limb *'
|   |-CallExpr 0x2a7b4aebf38 <line:1127:5, col:29> 'void'
|   | |-ImplicitCastExpr 0x2a7b4aebf20 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4aebea8 <col:5> 'void (limb *, const limb *)' Function 0x2a7b49f4048 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4aebf68 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4aebec8 <col:18> 'felem':'limb [4]' lvalue Var 0x2a7b4aebbe0 'ftmp2' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x2a7b4aebf80 <col:25> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x2a7b4aebf00 <col:25> 'const limb *':'const limb *' lvalue ParmVar 0x2a7b4afb4e8 'x_in' 'const limb *':'const limb *'
|   |-CallExpr 0x2a7b4aec028 <line:1131:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x2a7b4aec010 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4aebf98 <col:5> 'void (limb *, const limb *)' Function 0x2a7b4a04ae8 'felem_square' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4aec058 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4aebfb8 <col:18> 'longfelem':'limb [8]' lvalue Var 0x2a7b4afb8d0 'tmp' 'longfelem':'limb [8]'
|   | `-ImplicitCastExpr 0x2a7b4aec070 <col:23> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x2a7b4aebff0 <col:23> 'const limb *':'const limb *' lvalue ParmVar 0x2a7b4afb5d8 'z_in' 'const limb *':'const limb *'
|   |-CallExpr 0x2a7b4aec118 <line:1132:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x2a7b4aec100 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4aec088 <col:5> 'void (limb *, const limb *)' Function 0x2a7b4af4538 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4aec148 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4aec0a8 <col:18> 'felem':'limb [4]' lvalue Var 0x2a7b4aeb988 'delta' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x2a7b4aec178 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4aec160 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4aec0e0 <col:25> 'longfelem':'limb [8]' lvalue Var 0x2a7b4afb8d0 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x2a7b4aec208 <line:1136:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x2a7b4aec1f0 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4aec190 <col:5> 'void (limb *, const limb *)' Function 0x2a7b4a04ae8 'felem_square' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4aec238 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4aec1b0 <col:18> 'longfelem':'limb [8]' lvalue Var 0x2a7b4afb8d0 'tmp' 'longfelem':'limb [8]'
|   | `-ImplicitCastExpr 0x2a7b4aec250 <col:23> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x2a7b4aec1d0 <col:23> 'const limb *':'const limb *' lvalue ParmVar 0x2a7b4afb560 'y_in' 'const limb *':'const limb *'
|   |-CallExpr 0x2a7b4aec2f8 <line:1137:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x2a7b4aec2e0 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4aec268 <col:5> 'void (limb *, const limb *)' Function 0x2a7b4af4538 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4aec328 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4aec288 <col:18> 'felem':'limb [4]' lvalue Var 0x2a7b4aeba00 'gamma' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x2a7b4aec358 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4aec340 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4aec2c0 <col:25> 'longfelem':'limb [8]' lvalue Var 0x2a7b4afb8d0 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x2a7b4aec400 <line:1139:5, col:31> 'void'
|   | |-ImplicitCastExpr 0x2a7b4aec3e8 <col:5> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4aec370 <col:5> 'void (u64 *, const limb *)' Function 0x2a7b49fd1a8 'felem_shrink' 'void (u64 *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4aec430 <col:18> 'u64 *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4aec390 <col:18> 'smallfelem':'u64 [4]' lvalue Var 0x2a7b4aebca8 'small1' 'smallfelem':'u64 [4]'
|   | `-ImplicitCastExpr 0x2a7b4aec460 <col:26> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4aec448 <col:26> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4aec3c8 <col:26> 'felem':'limb [4]' lvalue Var 0x2a7b4aeba00 'gamma' 'felem':'limb [4]'
|   |-CallExpr 0x2a7b4aec570 <line:1142:5, col:38> 'void'
|   | |-ImplicitCastExpr 0x2a7b4aec558 <col:5> 'void (*)(limb *, const u64 *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4aec478 <col:5> 'void (limb *, const u64 *, const limb *)' Function 0x2a7b4aed998 'felem_small_mul' 'void (limb *, const u64 *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4aec5a8 <col:21> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4aec498 <col:21> 'longfelem':'limb [8]' lvalue Var 0x2a7b4afb8d0 'tmp' 'longfelem':'limb [8]'
|   | |-ImplicitCastExpr 0x2a7b4aec5d8 <col:26> 'const u64 *':'const u64 *' <NoOp>
|   | | `-ImplicitCastExpr 0x2a7b4aec5c0 <col:26> 'u64 *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x2a7b4aec4b8 <col:26> 'smallfelem':'u64 [4]' lvalue Var 0x2a7b4aebca8 'small1' 'smallfelem':'u64 [4]'
|   | `-ImplicitCastExpr 0x2a7b4aec5f0 <col:34> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x2a7b4aec4d8 <col:34> 'const limb *':'const limb *' lvalue ParmVar 0x2a7b4afb4e8 'x_in' 'const limb *':'const limb *'
|   |-CallExpr 0x2a7b4aec698 <line:1143:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x2a7b4aec680 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4aec608 <col:5> 'void (limb *, const limb *)' Function 0x2a7b4af4538 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4aec6c8 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4aec628 <col:18> 'felem':'limb [4]' lvalue Var 0x2a7b4aeba78 'beta' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x2a7b4aec6f8 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4aec6e0 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4aec660 <col:24> 'longfelem':'limb [8]' lvalue Var 0x2a7b4afb8d0 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x2a7b4aec788 <line:1147:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x2a7b4aec770 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4aec710 <col:5> 'void (limb *, const limb *)' Function 0x2a7b49f7e00 'felem_diff' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4aec7b8 <col:16> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4aec730 <col:16> 'felem':'limb [4]' lvalue Var 0x2a7b4aebb68 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x2a7b4aec7e8 <col:22> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4aec7d0 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4aec750 <col:22> 'felem':'limb [4]' lvalue Var 0x2a7b4aeb988 'delta' 'felem':'limb [4]'
|   |-CallExpr 0x2a7b4aec878 <line:1149:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x2a7b4aec860 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4aec800 <col:5> 'void (limb *, const limb *)' Function 0x2a7b49f4770 'felem_sum' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4aec8a8 <col:15> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4aec820 <col:15> 'felem':'limb [4]' lvalue Var 0x2a7b4aebbe0 'ftmp2' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x2a7b4aec8d8 <col:22> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4aec8c0 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4aec840 <col:22> 'felem':'limb [4]' lvalue Var 0x2a7b4aeb988 'delta' 'felem':'limb [4]'
|   |-CallExpr 0x2a7b4aec9d0 <line:1151:5, col:26> 'void'
|   | |-ImplicitCastExpr 0x2a7b4aec9b8 <col:5> 'void (*)(limb *, const u64)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4aec8f0 <col:5> 'void (limb *, const u64)' Function 0x2a7b49f5738 'felem_scalar' 'void (limb *, const u64)'
|   | |-ImplicitCastExpr 0x2a7b4aeca00 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4aec910 <col:18> 'felem':'limb [4]' lvalue Var 0x2a7b4aebbe0 'ftmp2' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x2a7b4aeca18 <col:25> 'u64':'unsigned long long' <IntegralCast>
|   |   `-IntegerLiteral 0x2a7b4aec930 <col:25> 'int' 3
|   |-CallExpr 0x2a7b4aecac8 <line:1153:5, col:31> 'void'
|   | |-ImplicitCastExpr 0x2a7b4aecab0 <col:5> 'void (*)(limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4aeca30 <col:5> 'void (limb *, const limb *, const limb *)' Function 0x2a7b4a096f8 'felem_mul' 'void (limb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4aecb00 <col:15> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4aeca50 <col:15> 'longfelem':'limb [8]' lvalue Var 0x2a7b4afb8d0 'tmp' 'longfelem':'limb [8]'
|   | |-ImplicitCastExpr 0x2a7b4aecb30 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x2a7b4aecb18 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x2a7b4aeca70 <col:20> 'felem':'limb [4]' lvalue Var 0x2a7b4aebb68 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x2a7b4aecb60 <col:26> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4aecb48 <col:26> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4aeca90 <col:26> 'felem':'limb [4]' lvalue Var 0x2a7b4aebbe0 'ftmp2' 'felem':'limb [4]'
|   |-CallExpr 0x2a7b4aecc08 <line:1154:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x2a7b4aecbf0 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4aecb78 <col:5> 'void (limb *, const limb *)' Function 0x2a7b4af4538 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4aecc38 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4aecb98 <col:18> 'felem':'limb [4]' lvalue Var 0x2a7b4aebaf0 'alpha' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x2a7b4aecc68 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4aecc50 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4aecbd0 <col:25> 'longfelem':'limb [8]' lvalue Var 0x2a7b4afb8d0 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x2a7b4aecd10 <line:1156:5, col:31> 'void'
|   | |-ImplicitCastExpr 0x2a7b4aeccf8 <col:5> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4aecc80 <col:5> 'void (u64 *, const limb *)' Function 0x2a7b49fd1a8 'felem_shrink' 'void (u64 *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4aecd40 <col:18> 'u64 *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4aecca0 <col:18> 'smallfelem':'u64 [4]' lvalue Var 0x2a7b4aebd20 'small2' 'smallfelem':'u64 [4]'
|   | `-ImplicitCastExpr 0x2a7b4aecd70 <col:26> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4aecd58 <col:26> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4aeccd8 <col:26> 'felem':'limb [4]' lvalue Var 0x2a7b4aebaf0 'alpha' 'felem':'limb [4]'
|   |-CallExpr 0x2a7b4aece00 <line:1159:5, col:34> 'void'
|   | |-ImplicitCastExpr 0x2a7b4aecde8 <col:5> 'void (*)(limb *, const u64 *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4aecd88 <col:5> 'void (limb *, const u64 *)' Function 0x2a7b4a018e8 'smallfelem_square' 'void (limb *, const u64 *)'
|   | |-ImplicitCastExpr 0x2a7b4aece30 <col:23> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4aecda8 <col:23> 'longfelem':'limb [8]' lvalue Var 0x2a7b4afb8d0 'tmp' 'longfelem':'limb [8]'
|   | `-ImplicitCastExpr 0x2a7b4aece60 <col:28> 'const u64 *':'const u64 *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4aece48 <col:28> 'u64 *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4aecdc8 <col:28> 'smallfelem':'u64 [4]' lvalue Var 0x2a7b4aebd20 'small2' 'smallfelem':'u64 [4]'
|   |-CallExpr 0x2a7b4aecef0 <line:1160:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x2a7b4aeced8 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4aece78 <col:5> 'void (limb *, const limb *)' Function 0x2a7b4af4538 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4aecf20 <col:18> 'limb *':'limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x2a7b4aece98 <col:18> 'limb *':'limb *' lvalue ParmVar 0x2a7b4afb380 'x_out' 'limb *':'limb *'
|   | `-ImplicitCastExpr 0x2a7b4aecf50 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4aecf38 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4aeceb8 <col:25> 'longfelem':'limb [8]' lvalue Var 0x2a7b4afb8d0 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x2a7b4aecfe0 <line:1161:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x2a7b4aecfc8 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4aecf68 <col:5> 'void (limb *, const limb *)' Function 0x2a7b49f4048 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4aed010 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4aecf88 <col:18> 'felem':'limb [4]' lvalue Var 0x2a7b4aebb68 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x2a7b4aed040 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4aed028 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4aecfa8 <col:24> 'felem':'limb [4]' lvalue Var 0x2a7b4aeba78 'beta' 'felem':'limb [4]'
|   |-CallExpr 0x2a7b4aed0d8 <line:1162:5, col:25> 'void'
|   | |-ImplicitCastExpr 0x2a7b4aed0c0 <col:5> 'void (*)(limb *, const u64)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4aed058 <col:5> 'void (limb *, const u64)' Function 0x2a7b49f5738 'felem_scalar' 'void (limb *, const u64)'
|   | |-ImplicitCastExpr 0x2a7b4aed108 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4aed078 <col:18> 'felem':'limb [4]' lvalue Var 0x2a7b4aebb68 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x2a7b4aed120 <col:24> 'u64':'unsigned long long' <IntegralCast>
|   |   `-IntegerLiteral 0x2a7b4aed098 <col:24> 'int' 8
|   |-CallExpr 0x2a7b4aed1b0 <line:1164:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x2a7b4aed198 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4aed138 <col:5> 'void (limb *, const limb *)' Function 0x2a7b49f7e00 'felem_diff' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4aed1e0 <col:16> 'limb *':'limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x2a7b4aed158 <col:16> 'limb *':'limb *' lvalue ParmVar 0x2a7b4afb380 'x_out' 'limb *':'limb *'
|   | `-ImplicitCastExpr 0x2a7b4aed210 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4aed1f8 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4aed178 <col:23> 'felem':'limb [4]' lvalue Var 0x2a7b4aebb68 'ftmp' 'felem':'limb [4]'
|   |-CallExpr 0x2a7b4aed2a0 <line:1168:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x2a7b4aed288 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4aed228 <col:5> 'void (limb *, const limb *)' Function 0x2a7b49f4770 'felem_sum' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4aed2d0 <col:15> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4aed248 <col:15> 'felem':'limb [4]' lvalue Var 0x2a7b4aeb988 'delta' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x2a7b4aed300 <col:22> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4aed2e8 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4aed268 <col:22> 'felem':'limb [4]' lvalue Var 0x2a7b4aeba00 'gamma' 'felem':'limb [4]'
|   |-CallExpr 0x2a7b4aed390 <line:1170:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x2a7b4aed378 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4aed318 <col:5> 'void (limb *, const limb *)' Function 0x2a7b49f4048 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4aed3c0 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4aed338 <col:18> 'felem':'limb [4]' lvalue Var 0x2a7b4aebb68 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x2a7b4aed3d8 <col:24> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x2a7b4aed358 <col:24> 'const limb *':'const limb *' lvalue ParmVar 0x2a7b4afb560 'y_in' 'const limb *':'const limb *'
|   |-CallExpr 0x2a7b4aed468 <line:1171:5, col:25> 'void'
|   | |-ImplicitCastExpr 0x2a7b4aed450 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4aed3f0 <col:5> 'void (limb *, const limb *)' Function 0x2a7b49f4770 'felem_sum' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4aed498 <col:15> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4aed410 <col:15> 'felem':'limb [4]' lvalue Var 0x2a7b4aebb68 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x2a7b4aed4b0 <col:21> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x2a7b4aed430 <col:21> 'const limb *':'const limb *' lvalue ParmVar 0x2a7b4afb5d8 'z_in' 'const limb *':'const limb *'
|   |-CallExpr 0x2a7b4aed540 <line:1173:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x2a7b4aed528 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4aed4c8 <col:5> 'void (limb *, const limb *)' Function 0x2a7b4a04ae8 'felem_square' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4aed570 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4aed4e8 <col:18> 'longfelem':'limb [8]' lvalue Var 0x2a7b4afb8d0 'tmp' 'longfelem':'limb [8]'
|   | `-ImplicitCastExpr 0x2a7b4aed5a0 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4aed588 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4aed508 <col:23> 'felem':'limb [4]' lvalue Var 0x2a7b4aebb68 'ftmp' 'felem':'limb [4]'
|   |-CallExpr 0x2a7b4aed630 <line:1174:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x2a7b4aed618 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4aed5b8 <col:5> 'void (limb *, const limb *)' Function 0x2a7b4af4538 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4aed660 <col:18> 'limb *':'limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x2a7b4aed5d8 <col:18> 'limb *':'limb *' lvalue ParmVar 0x2a7b4afb470 'z_out' 'limb *':'limb *'
|   | `-ImplicitCastExpr 0x2a7b4aed690 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4aed678 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4aed5f8 <col:25> 'longfelem':'limb [8]' lvalue Var 0x2a7b4afb8d0 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x2a7b4aed720 <line:1175:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x2a7b4aed708 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4aed6a8 <col:5> 'void (limb *, const limb *)' Function 0x2a7b49f7e00 'felem_diff' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4aed750 <col:16> 'limb *':'limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x2a7b4aed6c8 <col:16> 'limb *':'limb *' lvalue ParmVar 0x2a7b4afb470 'z_out' 'limb *':'limb *'
|   | `-ImplicitCastExpr 0x2a7b4aed780 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4aed768 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4aed6e8 <col:23> 'felem':'limb [4]' lvalue Var 0x2a7b4aeb988 'delta' 'felem':'limb [4]'
|   |-CallExpr 0x2a7b4aed818 <line:1179:5, col:25> 'void'
|   | |-ImplicitCastExpr 0x2a7b4aed800 <col:5> 'void (*)(limb *, const u64)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4aed798 <col:5> 'void (limb *, const u64)' Function 0x2a7b49f5738 'felem_scalar' 'void (limb *, const u64)'
|   | |-ImplicitCastExpr 0x2a7b4aed848 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4aed7b8 <col:18> 'felem':'limb [4]' lvalue Var 0x2a7b4aeba78 'beta' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x2a7b4aed860 <col:24> 'u64':'unsigned long long' <IntegralCast>
|   |   `-IntegerLiteral 0x2a7b4aed7d8 <col:24> 'int' 4
|   |-CallExpr 0x2a7b4afb988 <line:1181:5, col:35> 'void'
|   | |-ImplicitCastExpr 0x2a7b4afb970 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4aed878 <col:5> 'void (limb *, const limb *)' Function 0x2a7b49f95d8 'felem_diff_zero107' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4afb9b8 <col:24> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4aed898 <col:24> 'felem':'limb [4]' lvalue Var 0x2a7b4aeba78 'beta' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x2a7b4afb9e8 <col:30> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4afb9d0 <col:30> 'limb *':'limb *' <LValueToRValue>
|   |     `-DeclRefExpr 0x2a7b4afb950 <col:30> 'limb *':'limb *' lvalue ParmVar 0x2a7b4afb380 'x_out' 'limb *':'limb *'
|   |-CallExpr 0x2a7b4afba98 <line:1183:5, col:38> 'void'
|   | |-ImplicitCastExpr 0x2a7b4afba80 <col:5> 'void (*)(limb *, const u64 *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4afba00 <col:5> 'void (limb *, const u64 *, const limb *)' Function 0x2a7b4aed998 'felem_small_mul' 'void (limb *, const u64 *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4afbad0 <col:21> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4afba20 <col:21> 'longfelem':'limb [8]' lvalue Var 0x2a7b4afb8d0 'tmp' 'longfelem':'limb [8]'
|   | |-ImplicitCastExpr 0x2a7b4afbb00 <col:26> 'const u64 *':'const u64 *' <NoOp>
|   | | `-ImplicitCastExpr 0x2a7b4afbae8 <col:26> 'u64 *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x2a7b4afba40 <col:26> 'smallfelem':'u64 [4]' lvalue Var 0x2a7b4aebd20 'small2' 'smallfelem':'u64 [4]'
|   | `-ImplicitCastExpr 0x2a7b4afbb30 <col:34> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4afbb18 <col:34> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4afba60 <col:34> 'felem':'limb [4]' lvalue Var 0x2a7b4aeba78 'beta' 'felem':'limb [4]'
|   |-CallExpr 0x2a7b4afbbd8 <line:1185:5, col:35> 'void'
|   | |-ImplicitCastExpr 0x2a7b4afbbc0 <col:5> 'void (*)(limb *, const u64 *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4afbb48 <col:5> 'void (limb *, const u64 *)' Function 0x2a7b4a018e8 'smallfelem_square' 'void (limb *, const u64 *)'
|   | |-ImplicitCastExpr 0x2a7b4afbc08 <col:23> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4afbb68 <col:23> 'longfelem':'limb [8]' lvalue Var 0x2a7b4aeb8e0 'tmp2' 'longfelem':'limb [8]'
|   | `-ImplicitCastExpr 0x2a7b4afbc38 <col:29> 'const u64 *':'const u64 *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4afbc20 <col:29> 'u64 *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4afbba0 <col:29> 'smallfelem':'u64 [4]' lvalue Var 0x2a7b4aebca8 'small1' 'smallfelem':'u64 [4]'
|   |-CallExpr 0x2a7b4afbd00 <line:1187:5, col:29> 'void'
|   | |-ImplicitCastExpr 0x2a7b4afbce8 <col:5> 'void (*)(limb *, const u64)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4afbc50 <col:5> 'void (limb *, const u64)' Function 0x2a7b49f5df0 'longfelem_scalar' 'void (limb *, const u64)'
|   | |-ImplicitCastExpr 0x2a7b4afbd30 <col:22> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4afbc70 <col:22> 'longfelem':'limb [8]' lvalue Var 0x2a7b4aeb8e0 'tmp2' 'longfelem':'limb [8]'
|   | `-ImplicitCastExpr 0x2a7b4afbd48 <col:28> 'u64':'unsigned long long' <IntegralCast>
|   |   `-IntegerLiteral 0x2a7b4afbc90 <col:28> 'int' 8
|   |-CallExpr 0x2a7b4afbe00 <line:1189:5, col:29> 'void'
|   | |-ImplicitCastExpr 0x2a7b4afbde8 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4afbd60 <col:5> 'void (limb *, const limb *)' Function 0x2a7b49fa398 'longfelem_diff' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4afbe30 <col:20> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4afbd80 <col:20> 'longfelem':'limb [8]' lvalue Var 0x2a7b4afb8d0 'tmp' 'longfelem':'limb [8]'
|   | `-ImplicitCastExpr 0x2a7b4afbe60 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4afbe48 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4afbda0 <col:25> 'longfelem':'limb [8]' lvalue Var 0x2a7b4aeb8e0 'tmp2' 'longfelem':'limb [8]'
|   `-CallExpr 0x2a7b4afbef0 <line:1191:5, col:36> 'void'
|     |-ImplicitCastExpr 0x2a7b4afbed8 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x2a7b4afbe78 <col:5> 'void (limb *, const limb *)' Function 0x2a7b4af50c8 'felem_reduce_zero105' 'void (limb *, const limb *)'
|     |-ImplicitCastExpr 0x2a7b4afbf20 <col:26> 'limb *':'limb *' <LValueToRValue>
|     | `-DeclRefExpr 0x2a7b4afbe98 <col:26> 'limb *':'limb *' lvalue ParmVar 0x2a7b4afb3f8 'y_out' 'limb *':'limb *'
|     `-ImplicitCastExpr 0x2a7b4afbf50 <col:33> 'const limb *':'const limb *' <NoOp>
|       `-ImplicitCastExpr 0x2a7b4afbf38 <col:33> 'limb *' <ArrayToPointerDecay>
|         `-DeclRefExpr 0x2a7b4afbeb8 <col:33> 'longfelem':'limb [8]' lvalue Var 0x2a7b4afb8d0 'tmp' 'longfelem':'limb [8]'
|-FunctionDecl 0x2a7b4afc508 <line:1199:1, line:1215:1> line:1200:1 used point_double_small 'void (u64 *, u64 *, u64 *, const u64 *, const u64 *, const u64 *)' static
| |-ParmVarDecl 0x2a7b4afc0a8 <col:20, col:31> col:31 used x_out 'u64 *':'u64 *'
| |-ParmVarDecl 0x2a7b4afc120 <col:38, col:49> col:49 used y_out 'u64 *':'u64 *'
| |-ParmVarDecl 0x2a7b4afc198 <col:56, col:67> col:67 used z_out 'u64 *':'u64 *'
| |-ParmVarDecl 0x2a7b4afc210 <line:1201:20, col:37> col:37 used x_in 'const u64 *':'const u64 *'
| |-ParmVarDecl 0x2a7b4afc288 <col:43, col:60> col:60 used y_in 'const u64 *':'const u64 *'
| |-ParmVarDecl 0x2a7b4afc300 <line:1202:20, col:37> col:37 used z_in 'const u64 *':'const u64 *'
| `-CompoundStmt 0x2a7b4afd198 <line:1203:1, line:1215:1>
|   |-DeclStmt 0x2a7b4afc778 <line:1204:5, col:48>
|   | |-VarDecl 0x2a7b4afc600 <col:5, col:11> col:11 used felem_x_out 'felem':'limb [4]'
|   | |-VarDecl 0x2a7b4afc678 <col:5, col:24> col:24 used felem_y_out 'felem':'limb [4]'
|   | `-VarDecl 0x2a7b4afc6f0 <col:5, col:37> col:37 used felem_z_out 'felem':'limb [4]'
|   |-DeclStmt 0x2a7b4afc918 <line:1205:5, col:45>
|   | |-VarDecl 0x2a7b4afc7a0 <col:5, col:11> col:11 used felem_x_in 'felem':'limb [4]'
|   | |-VarDecl 0x2a7b4afc818 <col:5, col:23> col:23 used felem_y_in 'felem':'limb [4]'
|   | `-VarDecl 0x2a7b4afc890 <col:5, col:35> col:35 used felem_z_in 'felem':'limb [4]'
|   |-CallExpr 0x2a7b4afc9c0 <line:1207:5, col:39> 'void'
|   | |-ImplicitCastExpr 0x2a7b4afc9a8 <col:5> 'void (*)(limb *, const u64 *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4afc930 <col:5> 'void (limb *, const u64 *)' Function 0x2a7b4a01120 'smallfelem_expand' 'void (limb *, const u64 *)'
|   | |-ImplicitCastExpr 0x2a7b4afc9f0 <col:23> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4afc950 <col:23> 'felem':'limb [4]' lvalue Var 0x2a7b4afc7a0 'felem_x_in' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x2a7b4afca08 <col:35> 'const u64 *':'const u64 *' <LValueToRValue>
|   |   `-DeclRefExpr 0x2a7b4afc988 <col:35> 'const u64 *':'const u64 *' lvalue ParmVar 0x2a7b4afc210 'x_in' 'const u64 *':'const u64 *'
|   |-CallExpr 0x2a7b4afcab0 <line:1208:5, col:39> 'void'
|   | |-ImplicitCastExpr 0x2a7b4afca98 <col:5> 'void (*)(limb *, const u64 *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4afca20 <col:5> 'void (limb *, const u64 *)' Function 0x2a7b4a01120 'smallfelem_expand' 'void (limb *, const u64 *)'
|   | |-ImplicitCastExpr 0x2a7b4afcae0 <col:23> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4afca40 <col:23> 'felem':'limb [4]' lvalue Var 0x2a7b4afc818 'felem_y_in' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x2a7b4afcaf8 <col:35> 'const u64 *':'const u64 *' <LValueToRValue>
|   |   `-DeclRefExpr 0x2a7b4afca78 <col:35> 'const u64 *':'const u64 *' lvalue ParmVar 0x2a7b4afc288 'y_in' 'const u64 *':'const u64 *'
|   |-CallExpr 0x2a7b4afcba0 <line:1209:5, col:39> 'void'
|   | |-ImplicitCastExpr 0x2a7b4afcb88 <col:5> 'void (*)(limb *, const u64 *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4afcb10 <col:5> 'void (limb *, const u64 *)' Function 0x2a7b4a01120 'smallfelem_expand' 'void (limb *, const u64 *)'
|   | |-ImplicitCastExpr 0x2a7b4afcbd0 <col:23> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4afcb30 <col:23> 'felem':'limb [4]' lvalue Var 0x2a7b4afc890 'felem_z_in' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x2a7b4afcbe8 <col:35> 'const u64 *':'const u64 *' <LValueToRValue>
|   |   `-DeclRefExpr 0x2a7b4afcb68 <col:35> 'const u64 *':'const u64 *' lvalue ParmVar 0x2a7b4afc300 'z_in' 'const u64 *':'const u64 *'
|   |-CallExpr 0x2a7b4afcda0 <line:1210:5, line:1211:52> 'void'
|   | |-ImplicitCastExpr 0x2a7b4afcd88 <line:1210:5> 'void (*)(limb *, limb *, limb *, const limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4afcc00 <col:5> 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *)' Function 0x2a7b4afb7d8 'point_double' 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4afcdf0 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4afcc20 <col:18> 'felem':'limb [4]' lvalue Var 0x2a7b4afc600 'felem_x_out' 'felem':'limb [4]'
|   | |-ImplicitCastExpr 0x2a7b4afce08 <col:31> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4afcc58 <col:31> 'felem':'limb [4]' lvalue Var 0x2a7b4afc678 'felem_y_out' 'felem':'limb [4]'
|   | |-ImplicitCastExpr 0x2a7b4afce20 <col:44> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4afcc90 <col:44> 'felem':'limb [4]' lvalue Var 0x2a7b4afc6f0 'felem_z_out' 'felem':'limb [4]'
|   | |-ImplicitCastExpr 0x2a7b4afce50 <line:1211:18> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x2a7b4afce38 <col:18> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x2a7b4afccc8 <col:18> 'felem':'limb [4]' lvalue Var 0x2a7b4afc7a0 'felem_x_in' 'felem':'limb [4]'
|   | |-ImplicitCastExpr 0x2a7b4afce80 <col:30> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x2a7b4afce68 <col:30> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x2a7b4afcce8 <col:30> 'felem':'limb [4]' lvalue Var 0x2a7b4afc818 'felem_y_in' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x2a7b4afceb0 <col:42> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4afce98 <col:42> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4afcd08 <col:42> 'felem':'limb [4]' lvalue Var 0x2a7b4afc890 'felem_z_in' 'felem':'limb [4]'
|   |-CallExpr 0x2a7b4afcf40 <line:1212:5, col:36> 'void'
|   | |-ImplicitCastExpr 0x2a7b4afcf28 <col:5> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4afcec8 <col:5> 'void (u64 *, const limb *)' Function 0x2a7b49fd1a8 'felem_shrink' 'void (u64 *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4afcf70 <col:18> 'u64 *':'u64 *' <LValueToRValue>
|   | | `-DeclRefExpr 0x2a7b4afcee8 <col:18> 'u64 *':'u64 *' lvalue ParmVar 0x2a7b4afc0a8 'x_out' 'u64 *':'u64 *'
|   | `-ImplicitCastExpr 0x2a7b4afcfa0 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4afcf88 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4afcf08 <col:25> 'felem':'limb [4]' lvalue Var 0x2a7b4afc600 'felem_x_out' 'felem':'limb [4]'
|   |-CallExpr 0x2a7b4afd030 <line:1213:5, col:36> 'void'
|   | |-ImplicitCastExpr 0x2a7b4afd018 <col:5> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4afcfb8 <col:5> 'void (u64 *, const limb *)' Function 0x2a7b49fd1a8 'felem_shrink' 'void (u64 *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4afd060 <col:18> 'u64 *':'u64 *' <LValueToRValue>
|   | | `-DeclRefExpr 0x2a7b4afcfd8 <col:18> 'u64 *':'u64 *' lvalue ParmVar 0x2a7b4afc120 'y_out' 'u64 *':'u64 *'
|   | `-ImplicitCastExpr 0x2a7b4afd090 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4afd078 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4afcff8 <col:25> 'felem':'limb [4]' lvalue Var 0x2a7b4afc678 'felem_y_out' 'felem':'limb [4]'
|   `-CallExpr 0x2a7b4afd120 <line:1214:5, col:36> 'void'
|     |-ImplicitCastExpr 0x2a7b4afd108 <col:5> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x2a7b4afd0a8 <col:5> 'void (u64 *, const limb *)' Function 0x2a7b49fd1a8 'felem_shrink' 'void (u64 *, const limb *)'
|     |-ImplicitCastExpr 0x2a7b4afd150 <col:18> 'u64 *':'u64 *' <LValueToRValue>
|     | `-DeclRefExpr 0x2a7b4afd0c8 <col:18> 'u64 *':'u64 *' lvalue ParmVar 0x2a7b4afc198 'z_out' 'u64 *':'u64 *'
|     `-ImplicitCastExpr 0x2a7b4afd180 <col:25> 'const limb *':'const limb *' <NoOp>
|       `-ImplicitCastExpr 0x2a7b4afd168 <col:25> 'limb *' <ArrayToPointerDecay>
|         `-DeclRefExpr 0x2a7b4afd0e8 <col:25> 'felem':'limb [4]' lvalue Var 0x2a7b4afc6f0 'felem_z_out' 'felem':'limb [4]'
|-FunctionDecl 0x2a7b4afd458 <line:1218:1, line:1225:1> line:1218:13 used copy_conditional 'void (limb *, const limb *, limb)' static
| |-ParmVarDecl 0x2a7b4afd200 <col:30, col:36> col:36 used out 'limb *':'limb *'
| |-ParmVarDecl 0x2a7b4afd278 <col:41, col:53> col:53 used in 'const limb *':'const limb *'
| |-ParmVarDecl 0x2a7b4afd2f0 <col:57, col:62> col:62 used mask 'limb':'int'
| `-CompoundStmt 0x2a7b4b05ba0 <line:1219:1, line:1225:1>
|   |-DeclStmt 0x2a7b4afd5a8 <line:1220:5, col:15>
|   | `-VarDecl 0x2a7b4afd540 <col:5, col:14> col:14 used i 'unsigned int'
|   `-ForStmt 0x2a7b4b05b68 <line:1221:5, line:1224:5>
|     |-BinaryOperator 0x2a7b4afd638 <line:1221:10, col:14> 'unsigned int' '='
|     | |-DeclRefExpr 0x2a7b4afd5c0 <col:10> 'unsigned int' lvalue Var 0x2a7b4afd540 'i' 'unsigned int'
|     | `-ImplicitCastExpr 0x2a7b4afd620 <col:14> 'unsigned int' <IntegralCast>
|     |   `-IntegerLiteral 0x2a7b4afd5f8 <col:14> 'int' 0
|     |-<<<NULL>>>
|     |-BinaryOperator 0x2a7b4afd6d0 <col:17, line:113:17> 'int' '<'
|     | |-ImplicitCastExpr 0x2a7b4afd6a0 <line:1221:17> 'unsigned int' <LValueToRValue>
|     | | `-DeclRefExpr 0x2a7b4afd658 <col:17> 'unsigned int' lvalue Var 0x2a7b4afd540 'i' 'unsigned int'
|     | `-ImplicitCastExpr 0x2a7b4afd6b8 <line:113:17> 'unsigned int' <IntegralCast>
|     |   `-IntegerLiteral 0x2a7b4afd678 <col:17> 'int' 4
|     |-UnaryOperator 0x2a7b4afd710 <line:1221:29, col:31> 'unsigned int' prefix '++'
|     | `-DeclRefExpr 0x2a7b4afd6f0 <col:31> 'unsigned int' lvalue Var 0x2a7b4afd540 'i' 'unsigned int'
|     `-CompoundStmt 0x2a7b4b05b48 <col:34, line:1224:5>
|       |-DeclStmt 0x2a7b4b059d8 <line:1222:9, col:49>
|       | `-VarDecl 0x2a7b4afd738 <col:9, col:48> col:20 used tmp 'const limb':'const int' cinit
|       |   `-BinaryOperator 0x2a7b4b059b8 <col:26, col:48> 'int' '&'
|       |     |-ImplicitCastExpr 0x2a7b4b059a0 <col:26> 'limb':'int' <LValueToRValue>
|       |     | `-DeclRefExpr 0x2a7b4afd7a0 <col:26> 'limb':'int' lvalue ParmVar 0x2a7b4afd2f0 'mask' 'limb':'int'
|       |     `-ParenExpr 0x2a7b4afd930 <col:33, col:48> 'int'
|       |       `-BinaryOperator 0x2a7b4afd910 <col:34, col:47> 'int' '^'
|       |         |-ImplicitCastExpr 0x2a7b4afd8e0 <col:34, col:38> 'limb':'int' <LValueToRValue>
|       |         | `-ArraySubscriptExpr 0x2a7b4afd830 <col:34, col:38> 'const limb':'const int' lvalue
|       |         |   |-ImplicitCastExpr 0x2a7b4afd800 <col:34> 'const limb *':'const limb *' <LValueToRValue>
|       |         |   | `-DeclRefExpr 0x2a7b4afd7c0 <col:34> 'const limb *':'const limb *' lvalue ParmVar 0x2a7b4afd278 'in' 'const limb *':'const limb *'
|       |         |   `-ImplicitCastExpr 0x2a7b4afd818 <col:37> 'unsigned int' <LValueToRValue>
|       |         |     `-DeclRefExpr 0x2a7b4afd7e0 <col:37> 'unsigned int' lvalue Var 0x2a7b4afd540 'i' 'unsigned int'
|       |         `-ImplicitCastExpr 0x2a7b4afd8f8 <col:42, col:47> 'limb':'int' <LValueToRValue>
|       |           `-ArraySubscriptExpr 0x2a7b4afd8c0 <col:42, col:47> 'limb':'int' lvalue
|       |             |-ImplicitCastExpr 0x2a7b4afd890 <col:42> 'limb *':'limb *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x2a7b4afd850 <col:42> 'limb *':'limb *' lvalue ParmVar 0x2a7b4afd200 'out' 'limb *':'limb *'
|       |             `-ImplicitCastExpr 0x2a7b4afd8a8 <col:46> 'unsigned int' <LValueToRValue>
|       |               `-DeclRefExpr 0x2a7b4afd870 <col:46> 'unsigned int' lvalue Var 0x2a7b4afd540 'i' 'unsigned int'
|       `-CompoundAssignOperator 0x2a7b4b05ad0 <line:1223:9, col:19> 'limb':'int' '^=' ComputeLHSTy='int' ComputeResultTy='int'
|         |-ArraySubscriptExpr 0x2a7b4b05a60 <col:9, col:14> 'limb':'int' lvalue
|         | |-ImplicitCastExpr 0x2a7b4b05a30 <col:9> 'limb *':'limb *' <LValueToRValue>
|         | | `-DeclRefExpr 0x2a7b4b059f0 <col:9> 'limb *':'limb *' lvalue ParmVar 0x2a7b4afd200 'out' 'limb *':'limb *'
|         | `-ImplicitCastExpr 0x2a7b4b05a48 <col:13> 'unsigned int' <LValueToRValue>
|         |   `-DeclRefExpr 0x2a7b4b05a10 <col:13> 'unsigned int' lvalue Var 0x2a7b4afd540 'i' 'unsigned int'
|         `-ImplicitCastExpr 0x2a7b4b05ab8 <col:19> 'limb':'int' <LValueToRValue>
|           `-DeclRefExpr 0x2a7b4b05a80 <col:19> 'const limb':'const int' lvalue Var 0x2a7b4afd738 'tmp' 'const limb':'const int'
|-FunctionDecl 0x2a7b4b05e28 <line:1228:1, line:1235:1> line:1228:13 used copy_small_conditional 'void (limb *, const u64 *, limb)' static
| |-ParmVarDecl 0x2a7b4b05bd0 <col:36, col:42> col:42 used out 'limb *':'limb *'
| |-ParmVarDecl 0x2a7b4b05c48 <col:47, col:64> col:64 used in 'const u64 *':'const u64 *'
| |-ParmVarDecl 0x2a7b4b05cc0 <col:68, col:73> col:73 used mask 'limb':'int'
| `-CompoundStmt 0x2a7b4b06628 <line:1229:1, line:1235:1>
|   |-DeclStmt 0x2a7b4b05f78 <line:1230:5, col:15>
|   | `-VarDecl 0x2a7b4b05f10 <col:5, col:14> col:14 used i 'unsigned int'
|   |-DeclStmt 0x2a7b4b06058 <line:1231:5, col:28>
|   | `-VarDecl 0x2a7b4b05fa0 <col:5, col:24> col:15 used mask64 'const u64':'const unsigned long long' cinit
|   |   `-ImplicitCastExpr 0x2a7b4b06040 <col:24> 'u64':'unsigned long long' <IntegralCast>
|   |     `-ImplicitCastExpr 0x2a7b4b06028 <col:24> 'limb':'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x2a7b4b06008 <col:24> 'limb':'int' lvalue ParmVar 0x2a7b4b05cc0 'mask' 'limb':'int'
|   `-ForStmt 0x2a7b4b065f0 <line:1232:5, line:1234:5>
|     |-BinaryOperator 0x2a7b4b060e8 <line:1232:10, col:14> 'unsigned int' '='
|     | |-DeclRefExpr 0x2a7b4b06070 <col:10> 'unsigned int' lvalue Var 0x2a7b4b05f10 'i' 'unsigned int'
|     | `-ImplicitCastExpr 0x2a7b4b060d0 <col:14> 'unsigned int' <IntegralCast>
|     |   `-IntegerLiteral 0x2a7b4b060a8 <col:14> 'int' 0
|     |-<<<NULL>>>
|     |-BinaryOperator 0x2a7b4b06180 <col:17, line:113:17> 'int' '<'
|     | |-ImplicitCastExpr 0x2a7b4b06150 <line:1232:17> 'unsigned int' <LValueToRValue>
|     | | `-DeclRefExpr 0x2a7b4b06108 <col:17> 'unsigned int' lvalue Var 0x2a7b4b05f10 'i' 'unsigned int'
|     | `-ImplicitCastExpr 0x2a7b4b06168 <line:113:17> 'unsigned int' <IntegralCast>
|     |   `-IntegerLiteral 0x2a7b4b06128 <col:17> 'int' 4
|     |-UnaryOperator 0x2a7b4b061c0 <line:1232:29, col:31> 'unsigned int' prefix '++'
|     | `-DeclRefExpr 0x2a7b4b061a0 <col:31> 'unsigned int' lvalue Var 0x2a7b4b05f10 'i' 'unsigned int'
|     `-CompoundStmt 0x2a7b4b065d8 <col:34, line:1234:5>
|       `-BinaryOperator 0x2a7b4b06570 <line:1233:9, col:61> 'limb':'int' '='
|         |-ArraySubscriptExpr 0x2a7b4b06248 <col:9, col:14> 'limb':'int' lvalue
|         | |-ImplicitCastExpr 0x2a7b4b06218 <col:9> 'limb *':'limb *' <LValueToRValue>
|         | | `-DeclRefExpr 0x2a7b4b061d8 <col:9> 'limb *':'limb *' lvalue ParmVar 0x2a7b4b05bd0 'out' 'limb *':'limb *'
|         | `-ImplicitCastExpr 0x2a7b4b06230 <col:13> 'unsigned int' <LValueToRValue>
|         |   `-DeclRefExpr 0x2a7b4b061f8 <col:13> 'unsigned int' lvalue Var 0x2a7b4b05f10 'i' 'unsigned int'
|         `-BinaryOperator 0x2a7b4b06550 <col:18, col:61> 'int' '|'
|           |-ParenExpr 0x2a7b4b063f8 <col:18, col:42> 'limb':'int'
|           | `-CStyleCastExpr 0x2a7b4b063d0 <col:19, col:41> 'limb':'int' <IntegralCast>
|           |   `-ParenExpr 0x2a7b4b063b0 <col:26, col:41> 'unsigned long long'
|           |     `-BinaryOperator 0x2a7b4b06360 <col:27, col:35> 'unsigned long long' '&'
|           |       |-ImplicitCastExpr 0x2a7b4b06330 <col:27, col:31> 'u64':'unsigned long long' <LValueToRValue>
|           |       | `-ArraySubscriptExpr 0x2a7b4b062d8 <col:27, col:31> 'const u64':'const unsigned long long' lvalue
|           |       |   |-ImplicitCastExpr 0x2a7b4b062a8 <col:27> 'const u64 *':'const u64 *' <LValueToRValue>
|           |       |   | `-DeclRefExpr 0x2a7b4b06268 <col:27> 'const u64 *':'const u64 *' lvalue ParmVar 0x2a7b4b05c48 'in' 'const u64 *':'const u64 *'
|           |       |   `-ImplicitCastExpr 0x2a7b4b062c0 <col:30> 'unsigned int' <LValueToRValue>
|           |       |     `-DeclRefExpr 0x2a7b4b06288 <col:30> 'unsigned int' lvalue Var 0x2a7b4b05f10 'i' 'unsigned int'
|           |       `-ImplicitCastExpr 0x2a7b4b06348 <col:35> 'u64':'unsigned long long' <LValueToRValue>
|           |         `-DeclRefExpr 0x2a7b4b062f8 <col:35> 'const u64':'const unsigned long long' lvalue Var 0x2a7b4b05fa0 'mask64' 'const u64':'const unsigned long long'
|           `-ParenExpr 0x2a7b4b06530 <col:46, col:61> 'int'
|             `-BinaryOperator 0x2a7b4b06510 <col:47, col:57> 'int' '&'
|               |-ImplicitCastExpr 0x2a7b4b064f8 <col:47, col:52> 'limb':'int' <LValueToRValue>
|               | `-ArraySubscriptExpr 0x2a7b4b06488 <col:47, col:52> 'limb':'int' lvalue
|               |   |-ImplicitCastExpr 0x2a7b4b06458 <col:47> 'limb *':'limb *' <LValueToRValue>
|               |   | `-DeclRefExpr 0x2a7b4b06418 <col:47> 'limb *':'limb *' lvalue ParmVar 0x2a7b4b05bd0 'out' 'limb *':'limb *'
|               |   `-ImplicitCastExpr 0x2a7b4b06470 <col:51> 'unsigned int' <LValueToRValue>
|               |     `-DeclRefExpr 0x2a7b4b06438 <col:51> 'unsigned int' lvalue Var 0x2a7b4b05f10 'i' 'unsigned int'
|               `-UnaryOperator 0x2a7b4b064e0 <col:56, col:57> 'limb':'int' prefix '~' cannot overflow
|                 `-ImplicitCastExpr 0x2a7b4b064c8 <col:57> 'limb':'int' <LValueToRValue>
|                   `-DeclRefExpr 0x2a7b4b064a8 <col:57> 'limb':'int' lvalue ParmVar 0x2a7b4b05cc0 'mask' 'limb':'int'
|-FunctionDecl 0x2a7b4b06d68 <line:1249:1, line:1408:1> line:1249:13 used point_add 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const u64 *, const u64 *, const u64 *)' static
| |-ParmVarDecl 0x2a7b4b06660 <col:23, col:29> col:29 used x3 'limb *':'limb *'
| |-ParmVarDecl 0x2a7b4b066d8 <col:33, col:39> col:39 used y3 'limb *':'limb *'
| |-ParmVarDecl 0x2a7b4b06750 <col:43, col:49> col:49 used z3 'limb *':'limb *'
| |-ParmVarDecl 0x2a7b4b067c8 <line:1250:23, col:35> col:35 used x1 'const limb *':'const limb *'
| |-ParmVarDecl 0x2a7b4b06840 <col:39, col:51> col:51 used y1 'const limb *':'const limb *'
| |-ParmVarDecl 0x2a7b4b068b8 <col:55, col:67> col:67 used z1 'const limb *':'const limb *'
| |-ParmVarDecl 0x2a7b4b06938 <line:1251:23, col:33> col:33 used mixed 'const int'
| |-ParmVarDecl 0x2a7b4b069b0 <col:40, col:57> col:57 used x2 'const u64 *':'const u64 *'
| |-ParmVarDecl 0x2a7b4b06a28 <line:1252:23, col:40> col:40 used y2 'const u64 *':'const u64 *'
| |-ParmVarDecl 0x2a7b4b06aa0 <col:44, col:61> col:61 used z2 'const u64 *':'const u64 *'
| `-CompoundStmt 0x2a7b4b02550 <line:1253:1, line:1408:1>
|   |-DeclStmt 0x2a7b4b072f8 <line:1254:5, col:71>
|   | |-VarDecl 0x2a7b4b06e80 <col:5, col:11> col:11 used ftmp 'felem':'limb [4]'
|   | |-VarDecl 0x2a7b4b06ef8 <col:5, col:17> col:17 used ftmp2 'felem':'limb [4]'
|   | |-VarDecl 0x2a7b4b06f70 <col:5, col:24> col:24 used ftmp3 'felem':'limb [4]'
|   | |-VarDecl 0x2a7b4b06fe8 <col:5, col:31> col:31 used ftmp4 'felem':'limb [4]'
|   | |-VarDecl 0x2a7b4b07060 <col:5, col:38> col:38 used ftmp5 'felem':'limb [4]'
|   | |-VarDecl 0x2a7b4b070d8 <col:5, col:45> col:45 used ftmp6 'felem':'limb [4]'
|   | |-VarDecl 0x2a7b4b07150 <col:5, col:52> col:52 used x_out 'felem':'limb [4]'
|   | |-VarDecl 0x2a7b4b071c8 <col:5, col:59> col:59 used y_out 'felem':'limb [4]'
|   | `-VarDecl 0x2a7b4b07240 <col:5, col:66> col:66 used z_out 'felem':'limb [4]'
|   |-DeclStmt 0x2a7b4b07418 <line:1255:5, col:24>
|   | |-VarDecl 0x2a7b4b07320 <col:5, col:15> col:15 used tmp 'longfelem':'limb [8]'
|   | `-VarDecl 0x2a7b4b07398 <col:5, col:20> col:20 used tmp2 'longfelem':'limb [8]'
|   |-DeclStmt 0x2a7b4b076b8 <line:1256:5, col:54>
|   | |-VarDecl 0x2a7b4b07440 <col:5, col:16> col:16 used small1 'smallfelem':'u64 [4]'
|   | |-VarDecl 0x2a7b4b074b8 <col:5, col:24> col:24 used small2 'smallfelem':'u64 [4]'
|   | |-VarDecl 0x2a7b4b07530 <col:5, col:32> col:32 used small3 'smallfelem':'u64 [4]'
|   | |-VarDecl 0x2a7b4b075a8 <col:5, col:40> col:40 used small4 'smallfelem':'u64 [4]'
|   | `-VarDecl 0x2a7b4b07620 <col:5, col:48> col:48 used small5 'smallfelem':'u64 [4]'
|   |-DeclStmt 0x2a7b4b078d8 <line:1257:5, col:50>
|   | |-VarDecl 0x2a7b4b076e0 <col:5, col:10> col:10 used x_equal 'limb':'int'
|   | |-VarDecl 0x2a7b4b07758 <col:5, col:19> col:19 used y_equal 'limb':'int'
|   | |-VarDecl 0x2a7b4b077d0 <col:5, col:28> col:28 used z1_is_zero 'limb':'int'
|   | `-VarDecl 0x2a7b4b07848 <col:5, col:40> col:40 used z2_is_zero 'limb':'int'
|   |-CallExpr 0x2a7b4afd960 <line:1259:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x2a7b4b07968 <col:5> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4b078f0 <col:5> 'void (u64 *, const limb *)' Function 0x2a7b49fd1a8 'felem_shrink' 'void (u64 *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4afd990 <col:18> 'u64 *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4b07910 <col:18> 'smallfelem':'u64 [4]' lvalue Var 0x2a7b4b07530 'small3' 'smallfelem':'u64 [4]'
|   | `-ImplicitCastExpr 0x2a7b4afd9a8 <col:26> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x2a7b4b07948 <col:26> 'const limb *':'const limb *' lvalue ParmVar 0x2a7b4b068b8 'z1' 'const limb *':'const limb *'
|   |-BinaryOperator 0x2a7b4afdaa8 <line:1261:5, col:43> 'limb':'int' '='
|   | |-DeclRefExpr 0x2a7b4afd9c0 <col:5> 'limb':'int' lvalue Var 0x2a7b4b077d0 'z1_is_zero' 'limb':'int'
|   | `-CallExpr 0x2a7b4afda50 <col:18, col:43> 'limb':'int'
|   |   |-ImplicitCastExpr 0x2a7b4afda38 <col:18> 'limb (*)(const u64 *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x2a7b4afd9f8 <col:18> 'limb (const u64 *)' Function 0x2a7b4aeb268 'smallfelem_is_zero' 'limb (const u64 *)'
|   |   `-ImplicitCastExpr 0x2a7b4afda90 <col:37> 'const u64 *':'const u64 *' <NoOp>
|   |     `-ImplicitCastExpr 0x2a7b4afda78 <col:37> 'u64 *' <ArrayToPointerDecay>
|   |       `-DeclRefExpr 0x2a7b4afda18 <col:37> 'smallfelem':'u64 [4]' lvalue Var 0x2a7b4b07530 'small3' 'smallfelem':'u64 [4]'
|   |-BinaryOperator 0x2a7b4afdb98 <line:1262:5, col:39> 'limb':'int' '='
|   | |-DeclRefExpr 0x2a7b4afdac8 <col:5> 'limb':'int' lvalue Var 0x2a7b4b07848 'z2_is_zero' 'limb':'int'
|   | `-CallExpr 0x2a7b4afdb58 <col:18, col:39> 'limb':'int'
|   |   |-ImplicitCastExpr 0x2a7b4afdb40 <col:18> 'limb (*)(const u64 *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x2a7b4afdb00 <col:18> 'limb (const u64 *)' Function 0x2a7b4aeb268 'smallfelem_is_zero' 'limb (const u64 *)'
|   |   `-ImplicitCastExpr 0x2a7b4afdb80 <col:37> 'const u64 *':'const u64 *' <LValueToRValue>
|   |     `-DeclRefExpr 0x2a7b4afdb20 <col:37> 'const u64 *':'const u64 *' lvalue ParmVar 0x2a7b4b06aa0 'z2' 'const u64 *':'const u64 *'
|   |-CallExpr 0x2a7b4afdc48 <line:1265:5, col:34> 'void'
|   | |-ImplicitCastExpr 0x2a7b4afdc30 <col:5> 'void (*)(limb *, const u64 *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4afdbb8 <col:5> 'void (limb *, const u64 *)' Function 0x2a7b4a018e8 'smallfelem_square' 'void (limb *, const u64 *)'
|   | |-ImplicitCastExpr 0x2a7b4afdc78 <col:23> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4afdbd8 <col:23> 'longfelem':'limb [8]' lvalue Var 0x2a7b4b07320 'tmp' 'longfelem':'limb [8]'
|   | `-ImplicitCastExpr 0x2a7b4afdca8 <col:28> 'const u64 *':'const u64 *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4afdc90 <col:28> 'u64 *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4afdc10 <col:28> 'smallfelem':'u64 [4]' lvalue Var 0x2a7b4b07530 'small3' 'smallfelem':'u64 [4]'
|   |-CallExpr 0x2a7b4afdd50 <line:1266:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x2a7b4afdd38 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4afdcc0 <col:5> 'void (limb *, const limb *)' Function 0x2a7b4af4538 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4afdd80 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4afdce0 <col:18> 'felem':'limb [4]' lvalue Var 0x2a7b4b06e80 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x2a7b4afddb0 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4afdd98 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4afdd18 <col:24> 'longfelem':'limb [8]' lvalue Var 0x2a7b4b07320 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x2a7b4afde58 <line:1268:5, col:30> 'void'
|   | |-ImplicitCastExpr 0x2a7b4afde40 <col:5> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4afddc8 <col:5> 'void (u64 *, const limb *)' Function 0x2a7b49fd1a8 'felem_shrink' 'void (u64 *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4afde88 <col:18> 'u64 *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4afdde8 <col:18> 'smallfelem':'u64 [4]' lvalue Var 0x2a7b4b07440 'small1' 'smallfelem':'u64 [4]'
|   | `-ImplicitCastExpr 0x2a7b4afdeb8 <col:26> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4afdea0 <col:26> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4afde20 <col:26> 'felem':'limb [4]' lvalue Var 0x2a7b4b06e80 'ftmp' 'felem':'limb [4]'
|   |-IfStmt 0x2a7b4aff350 <line:1270:5, line:1323:5> has_else
|   | |-UnaryOperator 0x2a7b4afdf08 <line:1270:9, col:10> 'int' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x2a7b4afdef0 <col:10> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x2a7b4afded0 <col:10> 'const int' lvalue ParmVar 0x2a7b4b06938 'mixed' 'const int'
|   | |-CompoundStmt 0x2a7b4afef28 <col:17, line:1306:5>
|   | | |-CallExpr 0x2a7b4afdf98 <line:1272:9, col:34> 'void'
|   | | | |-ImplicitCastExpr 0x2a7b4afdf80 <col:9> 'void (*)(limb *, const u64 *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x2a7b4afdf20 <col:9> 'void (limb *, const u64 *)' Function 0x2a7b4a018e8 'smallfelem_square' 'void (limb *, const u64 *)'
|   | | | |-ImplicitCastExpr 0x2a7b4afdfc8 <col:27> 'limb *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x2a7b4afdf40 <col:27> 'longfelem':'limb [8]' lvalue Var 0x2a7b4b07320 'tmp' 'longfelem':'limb [8]'
|   | | | `-ImplicitCastExpr 0x2a7b4afdfe0 <col:32> 'const u64 *':'const u64 *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x2a7b4afdf60 <col:32> 'const u64 *':'const u64 *' lvalue ParmVar 0x2a7b4b06aa0 'z2' 'const u64 *':'const u64 *'
|   | | |-CallExpr 0x2a7b4afe088 <line:1273:9, col:32> 'void'
|   | | | |-ImplicitCastExpr 0x2a7b4afe070 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x2a7b4afdff8 <col:9> 'void (limb *, const limb *)' Function 0x2a7b4af4538 'felem_reduce' 'void (limb *, const limb *)'
|   | | | |-ImplicitCastExpr 0x2a7b4afe0b8 <col:22> 'limb *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x2a7b4afe018 <col:22> 'felem':'limb [4]' lvalue Var 0x2a7b4b06ef8 'ftmp2' 'felem':'limb [4]'
|   | | | `-ImplicitCastExpr 0x2a7b4afe0e8 <col:29> 'const limb *':'const limb *' <NoOp>
|   | | |   `-ImplicitCastExpr 0x2a7b4afe0d0 <col:29> 'limb *' <ArrayToPointerDecay>
|   | | |     `-DeclRefExpr 0x2a7b4afe050 <col:29> 'longfelem':'limb [8]' lvalue Var 0x2a7b4b07320 'tmp' 'longfelem':'limb [8]'
|   | | |-CallExpr 0x2a7b4afe190 <line:1275:9, col:35> 'void'
|   | | | |-ImplicitCastExpr 0x2a7b4afe178 <col:9> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x2a7b4afe100 <col:9> 'void (u64 *, const limb *)' Function 0x2a7b49fd1a8 'felem_shrink' 'void (u64 *, const limb *)'
|   | | | |-ImplicitCastExpr 0x2a7b4afe1c0 <col:22> 'u64 *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x2a7b4afe120 <col:22> 'smallfelem':'u64 [4]' lvalue Var 0x2a7b4b074b8 'small2' 'smallfelem':'u64 [4]'
|   | | | `-ImplicitCastExpr 0x2a7b4afe1f0 <col:30> 'const limb *':'const limb *' <NoOp>
|   | | |   `-ImplicitCastExpr 0x2a7b4afe1d8 <col:30> 'limb *' <ArrayToPointerDecay>
|   | | |     `-DeclRefExpr 0x2a7b4afe158 <col:30> 'felem':'limb [4]' lvalue Var 0x2a7b4b06ef8 'ftmp2' 'felem':'limb [4]'
|   | | |-CallExpr 0x2a7b4afe298 <line:1277:9, col:32> 'void'
|   | | | |-ImplicitCastExpr 0x2a7b4afe280 <col:9> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x2a7b4afe208 <col:9> 'void (u64 *, const limb *)' Function 0x2a7b49fd1a8 'felem_shrink' 'void (u64 *, const limb *)'
|   | | | |-ImplicitCastExpr 0x2a7b4afe2c8 <col:22> 'u64 *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x2a7b4afe228 <col:22> 'smallfelem':'u64 [4]' lvalue Var 0x2a7b4b07620 'small5' 'smallfelem':'u64 [4]'
|   | | | `-ImplicitCastExpr 0x2a7b4afe2e0 <col:30> 'const limb *':'const limb *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x2a7b4afe260 <col:30> 'const limb *':'const limb *' lvalue ParmVar 0x2a7b4b067c8 'x1' 'const limb *':'const limb *'
|   | | |-CallExpr 0x2a7b4afe390 <line:1280:9, col:43> 'void'
|   | | | |-ImplicitCastExpr 0x2a7b4afe378 <col:9> 'void (*)(limb *, const u64 *, const u64 *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x2a7b4afe2f8 <col:9> 'void (limb *, const u64 *, const u64 *)' Function 0x2a7b4a051b8 'smallfelem_mul' 'void (limb *, const u64 *, const u64 *)'
|   | | | |-ImplicitCastExpr 0x2a7b4afe3c8 <col:24> 'limb *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x2a7b4afe318 <col:24> 'longfelem':'limb [8]' lvalue Var 0x2a7b4b07320 'tmp' 'longfelem':'limb [8]'
|   | | | |-ImplicitCastExpr 0x2a7b4afe3f8 <col:29> 'const u64 *':'const u64 *' <NoOp>
|   | | | | `-ImplicitCastExpr 0x2a7b4afe3e0 <col:29> 'u64 *' <ArrayToPointerDecay>
|   | | | |   `-DeclRefExpr 0x2a7b4afe338 <col:29> 'smallfelem':'u64 [4]' lvalue Var 0x2a7b4b07620 'small5' 'smallfelem':'u64 [4]'
|   | | | `-ImplicitCastExpr 0x2a7b4afe428 <col:37> 'const u64 *':'const u64 *' <NoOp>
|   | | |   `-ImplicitCastExpr 0x2a7b4afe410 <col:37> 'u64 *' <ArrayToPointerDecay>
|   | | |     `-DeclRefExpr 0x2a7b4afe358 <col:37> 'smallfelem':'u64 [4]' lvalue Var 0x2a7b4b074b8 'small2' 'smallfelem':'u64 [4]'
|   | | |-CallExpr 0x2a7b4afe4d0 <line:1281:9, col:32> 'void'
|   | | | |-ImplicitCastExpr 0x2a7b4afe4b8 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x2a7b4afe440 <col:9> 'void (limb *, const limb *)' Function 0x2a7b4af4538 'felem_reduce' 'void (limb *, const limb *)'
|   | | | |-ImplicitCastExpr 0x2a7b4afe500 <col:22> 'limb *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x2a7b4afe460 <col:22> 'felem':'limb [4]' lvalue Var 0x2a7b4b06f70 'ftmp3' 'felem':'limb [4]'
|   | | | `-ImplicitCastExpr 0x2a7b4afe530 <col:29> 'const limb *':'const limb *' <NoOp>
|   | | |   `-ImplicitCastExpr 0x2a7b4afe518 <col:29> 'limb *' <ArrayToPointerDecay>
|   | | |     `-DeclRefExpr 0x2a7b4afe498 <col:29> 'longfelem':'limb [8]' lvalue Var 0x2a7b4b07320 'tmp' 'longfelem':'limb [8]'
|   | | |-CallExpr 0x2a7b4afe5d8 <line:1285:9, col:31> 'void'
|   | | | |-ImplicitCastExpr 0x2a7b4afe5c0 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x2a7b4afe548 <col:9> 'void (limb *, const limb *)' Function 0x2a7b49f4048 'felem_assign' 'void (limb *, const limb *)'
|   | | | |-ImplicitCastExpr 0x2a7b4afe608 <col:22> 'limb *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x2a7b4afe568 <col:22> 'felem':'limb [4]' lvalue Var 0x2a7b4b07060 'ftmp5' 'felem':'limb [4]'
|   | | | `-ImplicitCastExpr 0x2a7b4afe620 <col:29> 'const limb *':'const limb *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x2a7b4afe5a0 <col:29> 'const limb *':'const limb *' lvalue ParmVar 0x2a7b4b068b8 'z1' 'const limb *':'const limb *'
|   | | |-CallExpr 0x2a7b4afe6b0 <line:1286:9, col:34> 'void'
|   | | | |-ImplicitCastExpr 0x2a7b4afe698 <col:9> 'void (*)(limb *, const u64 *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x2a7b4afe638 <col:9> 'void (limb *, const u64 *)' Function 0x2a7b49f4f58 'felem_small_sum' 'void (limb *, const u64 *)'
|   | | | |-ImplicitCastExpr 0x2a7b4afe6e0 <col:25> 'limb *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x2a7b4afe658 <col:25> 'felem':'limb [4]' lvalue Var 0x2a7b4b07060 'ftmp5' 'felem':'limb [4]'
|   | | | `-ImplicitCastExpr 0x2a7b4afe6f8 <col:32> 'const u64 *':'const u64 *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x2a7b4afe678 <col:32> 'const u64 *':'const u64 *' lvalue ParmVar 0x2a7b4b06aa0 'z2' 'const u64 *':'const u64 *'
|   | | |-CallExpr 0x2a7b4afe788 <line:1290:9, col:32> 'void'
|   | | | |-ImplicitCastExpr 0x2a7b4afe770 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x2a7b4afe710 <col:9> 'void (limb *, const limb *)' Function 0x2a7b4a04ae8 'felem_square' 'void (limb *, const limb *)'
|   | | | |-ImplicitCastExpr 0x2a7b4afe7b8 <col:22> 'limb *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x2a7b4afe730 <col:22> 'longfelem':'limb [8]' lvalue Var 0x2a7b4b07320 'tmp' 'longfelem':'limb [8]'
|   | | | `-ImplicitCastExpr 0x2a7b4afe7e8 <col:27> 'const limb *':'const limb *' <NoOp>
|   | | |   `-ImplicitCastExpr 0x2a7b4afe7d0 <col:27> 'limb *' <ArrayToPointerDecay>
|   | | |     `-DeclRefExpr 0x2a7b4afe750 <col:27> 'felem':'limb [4]' lvalue Var 0x2a7b4b07060 'ftmp5' 'felem':'limb [4]'
|   | | |-CallExpr 0x2a7b4afe878 <line:1291:9, col:32> 'void'
|   | | | |-ImplicitCastExpr 0x2a7b4afe860 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x2a7b4afe800 <col:9> 'void (limb *, const limb *)' Function 0x2a7b4af4538 'felem_reduce' 'void (limb *, const limb *)'
|   | | | |-ImplicitCastExpr 0x2a7b4afe8a8 <col:22> 'limb *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x2a7b4afe820 <col:22> 'felem':'limb [4]' lvalue Var 0x2a7b4b07060 'ftmp5' 'felem':'limb [4]'
|   | | | `-ImplicitCastExpr 0x2a7b4afe8d8 <col:29> 'const limb *':'const limb *' <NoOp>
|   | | |   `-ImplicitCastExpr 0x2a7b4afe8c0 <col:29> 'limb *' <ArrayToPointerDecay>
|   | | |     `-DeclRefExpr 0x2a7b4afe840 <col:29> 'longfelem':'limb [8]' lvalue Var 0x2a7b4b07320 'tmp' 'longfelem':'limb [8]'
|   | | |-CallExpr 0x2a7b4afe968 <line:1293:9, col:30> 'void'
|   | | | |-ImplicitCastExpr 0x2a7b4afe950 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x2a7b4afe8f0 <col:9> 'void (limb *, const limb *)' Function 0x2a7b49f4770 'felem_sum' 'void (limb *, const limb *)'
|   | | | |-ImplicitCastExpr 0x2a7b4afe998 <col:19> 'limb *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x2a7b4afe910 <col:19> 'felem':'limb [4]' lvalue Var 0x2a7b4b06ef8 'ftmp2' 'felem':'limb [4]'
|   | | | `-ImplicitCastExpr 0x2a7b4afe9c8 <col:26> 'const limb *':'const limb *' <NoOp>
|   | | |   `-ImplicitCastExpr 0x2a7b4afe9b0 <col:26> 'limb *' <ArrayToPointerDecay>
|   | | |     `-DeclRefExpr 0x2a7b4afe930 <col:26> 'felem':'limb [4]' lvalue Var 0x2a7b4b06e80 'ftmp' 'felem':'limb [4]'
|   | | |-CallExpr 0x2a7b4afea58 <line:1295:9, col:32> 'void'
|   | | | |-ImplicitCastExpr 0x2a7b4afea40 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x2a7b4afe9e0 <col:9> 'void (limb *, const limb *)' Function 0x2a7b49f7e00 'felem_diff' 'void (limb *, const limb *)'
|   | | | |-ImplicitCastExpr 0x2a7b4afea88 <col:20> 'limb *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x2a7b4afea00 <col:20> 'felem':'limb [4]' lvalue Var 0x2a7b4b07060 'ftmp5' 'felem':'limb [4]'
|   | | | `-ImplicitCastExpr 0x2a7b4afeab8 <col:27> 'const limb *':'const limb *' <NoOp>
|   | | |   `-ImplicitCastExpr 0x2a7b4afeaa0 <col:27> 'limb *' <ArrayToPointerDecay>
|   | | |     `-DeclRefExpr 0x2a7b4afea20 <col:27> 'felem':'limb [4]' lvalue Var 0x2a7b4b06ef8 'ftmp2' 'felem':'limb [4]'
|   | | |-CallExpr 0x2a7b4afeb68 <line:1299:9, col:39> 'void'
|   | | | |-ImplicitCastExpr 0x2a7b4afeb50 <col:9> 'void (*)(limb *, const u64 *, const u64 *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x2a7b4afead0 <col:9> 'void (limb *, const u64 *, const u64 *)' Function 0x2a7b4a051b8 'smallfelem_mul' 'void (limb *, const u64 *, const u64 *)'
|   | | | |-ImplicitCastExpr 0x2a7b4afeba0 <col:24> 'limb *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x2a7b4afeaf0 <col:24> 'longfelem':'limb [8]' lvalue Var 0x2a7b4b07320 'tmp' 'longfelem':'limb [8]'
|   | | | |-ImplicitCastExpr 0x2a7b4afebd0 <col:29> 'const u64 *':'const u64 *' <NoOp>
|   | | | | `-ImplicitCastExpr 0x2a7b4afebb8 <col:29> 'u64 *' <ArrayToPointerDecay>
|   | | | |   `-DeclRefExpr 0x2a7b4afeb10 <col:29> 'smallfelem':'u64 [4]' lvalue Var 0x2a7b4b074b8 'small2' 'smallfelem':'u64 [4]'
|   | | | `-ImplicitCastExpr 0x2a7b4afebe8 <col:37> 'const u64 *':'const u64 *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x2a7b4afeb30 <col:37> 'const u64 *':'const u64 *' lvalue ParmVar 0x2a7b4b06aa0 'z2' 'const u64 *':'const u64 *'
|   | | |-CallExpr 0x2a7b4afec78 <line:1300:9, col:32> 'void'
|   | | | |-ImplicitCastExpr 0x2a7b4afec60 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x2a7b4afec00 <col:9> 'void (limb *, const limb *)' Function 0x2a7b4af4538 'felem_reduce' 'void (limb *, const limb *)'
|   | | | |-ImplicitCastExpr 0x2a7b4afeca8 <col:22> 'limb *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x2a7b4afec20 <col:22> 'felem':'limb [4]' lvalue Var 0x2a7b4b06ef8 'ftmp2' 'felem':'limb [4]'
|   | | | `-ImplicitCastExpr 0x2a7b4afecd8 <col:29> 'const limb *':'const limb *' <NoOp>
|   | | |   `-ImplicitCastExpr 0x2a7b4afecc0 <col:29> 'limb *' <ArrayToPointerDecay>
|   | | |     `-DeclRefExpr 0x2a7b4afec40 <col:29> 'longfelem':'limb [8]' lvalue Var 0x2a7b4b07320 'tmp' 'longfelem':'limb [8]'
|   | | |-CallExpr 0x2a7b4afed88 <line:1303:9, col:33> 'void'
|   | | | |-ImplicitCastExpr 0x2a7b4afed70 <col:9> 'void (*)(limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x2a7b4afecf0 <col:9> 'void (limb *, const limb *, const limb *)' Function 0x2a7b4a096f8 'felem_mul' 'void (limb *, const limb *, const limb *)'
|   | | | |-ImplicitCastExpr 0x2a7b4afedc0 <col:19> 'limb *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x2a7b4afed10 <col:19> 'longfelem':'limb [8]' lvalue Var 0x2a7b4b07320 'tmp' 'longfelem':'limb [8]'
|   | | | |-ImplicitCastExpr 0x2a7b4afedd8 <col:24> 'const limb *':'const limb *' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x2a7b4afed30 <col:24> 'const limb *':'const limb *' lvalue ParmVar 0x2a7b4b06840 'y1' 'const limb *':'const limb *'
|   | | | `-ImplicitCastExpr 0x2a7b4afee08 <col:28> 'const limb *':'const limb *' <NoOp>
|   | | |   `-ImplicitCastExpr 0x2a7b4afedf0 <col:28> 'limb *' <ArrayToPointerDecay>
|   | | |     `-DeclRefExpr 0x2a7b4afed50 <col:28> 'felem':'limb [4]' lvalue Var 0x2a7b4b06ef8 'ftmp2' 'felem':'limb [4]'
|   | | `-CallExpr 0x2a7b4afeeb0 <line:1304:9, col:32> 'void'
|   | |   |-ImplicitCastExpr 0x2a7b4afee98 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x2a7b4afee20 <col:9> 'void (limb *, const limb *)' Function 0x2a7b4af4538 'felem_reduce' 'void (limb *, const limb *)'
|   | |   |-ImplicitCastExpr 0x2a7b4afeee0 <col:22> 'limb *' <ArrayToPointerDecay>
|   | |   | `-DeclRefExpr 0x2a7b4afee40 <col:22> 'felem':'limb [4]' lvalue Var 0x2a7b4b070d8 'ftmp6' 'felem':'limb [4]'
|   | |   `-ImplicitCastExpr 0x2a7b4afef10 <col:29> 'const limb *':'const limb *' <NoOp>
|   | |     `-ImplicitCastExpr 0x2a7b4afeef8 <col:29> 'limb *' <ArrayToPointerDecay>
|   | |       `-DeclRefExpr 0x2a7b4afee78 <col:29> 'longfelem':'limb [8]' lvalue Var 0x2a7b4b07320 'tmp' 'longfelem':'limb [8]'
|   | `-CompoundStmt 0x2a7b4aff320 <line:1306:12, line:1323:5>
|   |   |-CallExpr 0x2a7b4aff030 <line:1312:9, col:31> 'void'
|   |   | |-ImplicitCastExpr 0x2a7b4aff018 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x2a7b4afefb8 <col:9> 'void (limb *, const limb *)' Function 0x2a7b49f4048 'felem_assign' 'void (limb *, const limb *)'
|   |   | |-ImplicitCastExpr 0x2a7b4aff060 <col:22> 'limb *' <ArrayToPointerDecay>
|   |   | | `-DeclRefExpr 0x2a7b4afefd8 <col:22> 'felem':'limb [4]' lvalue Var 0x2a7b4b06f70 'ftmp3' 'felem':'limb [4]'
|   |   | `-ImplicitCastExpr 0x2a7b4aff078 <col:29> 'const limb *':'const limb *' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x2a7b4afeff8 <col:29> 'const limb *':'const limb *' lvalue ParmVar 0x2a7b4b067c8 'x1' 'const limb *':'const limb *'
|   |   |-CallExpr 0x2a7b4aff108 <line:1316:9, col:31> 'void'
|   |   | |-ImplicitCastExpr 0x2a7b4aff0f0 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x2a7b4aff090 <col:9> 'void (limb *, const limb *)' Function 0x2a7b49f4048 'felem_assign' 'void (limb *, const limb *)'
|   |   | |-ImplicitCastExpr 0x2a7b4aff138 <col:22> 'limb *' <ArrayToPointerDecay>
|   |   | | `-DeclRefExpr 0x2a7b4aff0b0 <col:22> 'felem':'limb [4]' lvalue Var 0x2a7b4b07060 'ftmp5' 'felem':'limb [4]'
|   |   | `-ImplicitCastExpr 0x2a7b4aff150 <col:29> 'const limb *':'const limb *' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x2a7b4aff0d0 <col:29> 'const limb *':'const limb *' lvalue ParmVar 0x2a7b4b068b8 'z1' 'const limb *':'const limb *'
|   |   |-CallExpr 0x2a7b4aff1e8 <line:1317:9, col:30> 'void'
|   |   | |-ImplicitCastExpr 0x2a7b4aff1d0 <col:9> 'void (*)(limb *, const u64)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x2a7b4aff168 <col:9> 'void (limb *, const u64)' Function 0x2a7b49f5738 'felem_scalar' 'void (limb *, const u64)'
|   |   | |-ImplicitCastExpr 0x2a7b4aff218 <col:22> 'limb *' <ArrayToPointerDecay>
|   |   | | `-DeclRefExpr 0x2a7b4aff188 <col:22> 'felem':'limb [4]' lvalue Var 0x2a7b4b07060 'ftmp5' 'felem':'limb [4]'
|   |   | `-ImplicitCastExpr 0x2a7b4aff230 <col:29> 'u64':'unsigned long long' <IntegralCast>
|   |   |   `-IntegerLiteral 0x2a7b4aff1a8 <col:29> 'int' 2
|   |   `-CallExpr 0x2a7b4aff2c0 <line:1321:9, col:31> 'void'
|   |     |-ImplicitCastExpr 0x2a7b4aff2a8 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x2a7b4aff248 <col:9> 'void (limb *, const limb *)' Function 0x2a7b49f4048 'felem_assign' 'void (limb *, const limb *)'
|   |     |-ImplicitCastExpr 0x2a7b4aff2f0 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x2a7b4aff268 <col:22> 'felem':'limb [4]' lvalue Var 0x2a7b4b070d8 'ftmp6' 'felem':'limb [4]'
|   |     `-ImplicitCastExpr 0x2a7b4aff308 <col:29> 'const limb *':'const limb *' <LValueToRValue>
|   |       `-DeclRefExpr 0x2a7b4aff288 <col:29> 'const limb *':'const limb *' lvalue ParmVar 0x2a7b4b06840 'y1' 'const limb *':'const limb *'
|   |-CallExpr 0x2a7b4aff410 <line:1326:5, col:35> 'void'
|   | |-ImplicitCastExpr 0x2a7b4aff3f8 <col:5> 'void (*)(limb *, const u64 *, const u64 *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4aff378 <col:5> 'void (limb *, const u64 *, const u64 *)' Function 0x2a7b4a051b8 'smallfelem_mul' 'void (limb *, const u64 *, const u64 *)'
|   | |-ImplicitCastExpr 0x2a7b4aff448 <col:20> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4aff398 <col:20> 'longfelem':'limb [8]' lvalue Var 0x2a7b4b07320 'tmp' 'longfelem':'limb [8]'
|   | |-ImplicitCastExpr 0x2a7b4aff460 <col:25> 'const u64 *':'const u64 *' <LValueToRValue>
|   | | `-DeclRefExpr 0x2a7b4aff3b8 <col:25> 'const u64 *':'const u64 *' lvalue ParmVar 0x2a7b4b069b0 'x2' 'const u64 *':'const u64 *'
|   | `-ImplicitCastExpr 0x2a7b4aff490 <col:29> 'const u64 *':'const u64 *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4aff478 <col:29> 'u64 *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4aff3d8 <col:29> 'smallfelem':'u64 [4]' lvalue Var 0x2a7b4b07440 'small1' 'smallfelem':'u64 [4]'
|   |-CallExpr 0x2a7b4aff538 <line:1327:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x2a7b4aff520 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4aff4a8 <col:5> 'void (limb *, const limb *)' Function 0x2a7b4af4538 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4aff568 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4aff4c8 <col:18> 'felem':'limb [4]' lvalue Var 0x2a7b4b06fe8 'ftmp4' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x2a7b4aff598 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4aff580 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4aff500 <col:25> 'longfelem':'limb [8]' lvalue Var 0x2a7b4b07320 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x2a7b4aff628 <line:1330:5, col:36> 'void'
|   | |-ImplicitCastExpr 0x2a7b4aff610 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4aff5b0 <col:5> 'void (limb *, const limb *)' Function 0x2a7b49f95d8 'felem_diff_zero107' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4aff658 <col:24> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4aff5d0 <col:24> 'felem':'limb [4]' lvalue Var 0x2a7b4b06fe8 'ftmp4' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x2a7b4aff688 <col:31> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4aff670 <col:31> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4aff5f0 <col:31> 'felem':'limb [4]' lvalue Var 0x2a7b4b06f70 'ftmp3' 'felem':'limb [4]'
|   |-CallExpr 0x2a7b4aff730 <line:1332:5, col:31> 'void'
|   | |-ImplicitCastExpr 0x2a7b4aff718 <col:5> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4aff6a0 <col:5> 'void (u64 *, const limb *)' Function 0x2a7b49fd1a8 'felem_shrink' 'void (u64 *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4aff760 <col:18> 'u64 *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4aff6c0 <col:18> 'smallfelem':'u64 [4]' lvalue Var 0x2a7b4b075a8 'small4' 'smallfelem':'u64 [4]'
|   | `-ImplicitCastExpr 0x2a7b4aff790 <col:26> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4aff778 <col:26> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4aff6f8 <col:26> 'felem':'limb [4]' lvalue Var 0x2a7b4b06fe8 'ftmp4' 'felem':'limb [4]'
|   |-BinaryOperator 0x2a7b4aff890 <line:1334:5, col:40> 'limb':'int' '='
|   | |-DeclRefExpr 0x2a7b4aff7a8 <col:5> 'limb':'int' lvalue Var 0x2a7b4b076e0 'x_equal' 'limb':'int'
|   | `-CallExpr 0x2a7b4aff838 <col:15, col:40> 'limb':'int'
|   |   |-ImplicitCastExpr 0x2a7b4aff820 <col:15> 'limb (*)(const u64 *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x2a7b4aff7e0 <col:15> 'limb (const u64 *)' Function 0x2a7b4aeb268 'smallfelem_is_zero' 'limb (const u64 *)'
|   |   `-ImplicitCastExpr 0x2a7b4aff878 <col:34> 'const u64 *':'const u64 *' <NoOp>
|   |     `-ImplicitCastExpr 0x2a7b4aff860 <col:34> 'u64 *' <ArrayToPointerDecay>
|   |       `-DeclRefExpr 0x2a7b4aff800 <col:34> 'smallfelem':'u64 [4]' lvalue Var 0x2a7b4b075a8 'small4' 'smallfelem':'u64 [4]'
|   |-CallExpr 0x2a7b4aff970 <line:1337:5, col:39> 'void'
|   | |-ImplicitCastExpr 0x2a7b4aff930 <col:5> 'void (*)(limb *, const u64 *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4aff8b0 <col:5> 'void (limb *, const u64 *, const limb *)' Function 0x2a7b4aed998 'felem_small_mul' 'void (limb *, const u64 *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4aff9a8 <col:21> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4aff8d0 <col:21> 'longfelem':'limb [8]' lvalue Var 0x2a7b4b07320 'tmp' 'longfelem':'limb [8]'
|   | |-ImplicitCastExpr 0x2a7b4aff9d8 <col:26> 'const u64 *':'const u64 *' <NoOp>
|   | | `-ImplicitCastExpr 0x2a7b4aff9c0 <col:26> 'u64 *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x2a7b4aff8f0 <col:26> 'smallfelem':'u64 [4]' lvalue Var 0x2a7b4b075a8 'small4' 'smallfelem':'u64 [4]'
|   | `-ImplicitCastExpr 0x2a7b4affa08 <col:34> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4aff9f0 <col:34> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4aff910 <col:34> 'felem':'limb [4]' lvalue Var 0x2a7b4b07060 'ftmp5' 'felem':'limb [4]'
|   |-CallExpr 0x2a7b4affab0 <line:1338:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x2a7b4affa98 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4affa20 <col:5> 'void (limb *, const limb *)' Function 0x2a7b4af4538 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4affae0 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4affa40 <col:18> 'felem':'limb [4]' lvalue Var 0x2a7b4b07240 'z_out' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x2a7b4affb10 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4affaf8 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4affa78 <col:25> 'longfelem':'limb [8]' lvalue Var 0x2a7b4b07320 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x2a7b4affbc0 <line:1342:5, col:39> 'void'
|   | |-ImplicitCastExpr 0x2a7b4affba8 <col:5> 'void (*)(limb *, const u64 *, const u64 *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4affb28 <col:5> 'void (limb *, const u64 *, const u64 *)' Function 0x2a7b4a051b8 'smallfelem_mul' 'void (limb *, const u64 *, const u64 *)'
|   | |-ImplicitCastExpr 0x2a7b4affbf8 <col:20> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4affb48 <col:20> 'longfelem':'limb [8]' lvalue Var 0x2a7b4b07320 'tmp' 'longfelem':'limb [8]'
|   | |-ImplicitCastExpr 0x2a7b4affc28 <col:25> 'const u64 *':'const u64 *' <NoOp>
|   | | `-ImplicitCastExpr 0x2a7b4affc10 <col:25> 'u64 *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x2a7b4affb68 <col:25> 'smallfelem':'u64 [4]' lvalue Var 0x2a7b4b07440 'small1' 'smallfelem':'u64 [4]'
|   | `-ImplicitCastExpr 0x2a7b4affc58 <col:33> 'const u64 *':'const u64 *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4affc40 <col:33> 'u64 *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4affb88 <col:33> 'smallfelem':'u64 [4]' lvalue Var 0x2a7b4b07530 'small3' 'smallfelem':'u64 [4]'
|   |-CallExpr 0x2a7b4affce8 <line:1343:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x2a7b4affcd0 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4affc70 <col:5> 'void (limb *, const limb *)' Function 0x2a7b4af4538 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4affd18 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4affc90 <col:18> 'felem':'limb [4]' lvalue Var 0x2a7b4b06e80 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x2a7b4affd48 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4affd30 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4affcb0 <col:24> 'longfelem':'limb [8]' lvalue Var 0x2a7b4b07320 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x2a7b4affdf8 <line:1346:5, col:34> 'void'
|   | |-ImplicitCastExpr 0x2a7b4affde0 <col:5> 'void (*)(limb *, const u64 *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4affd60 <col:5> 'void (limb *, const u64 *, const limb *)' Function 0x2a7b4aed998 'felem_small_mul' 'void (limb *, const u64 *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4affe30 <col:21> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4affd80 <col:21> 'longfelem':'limb [8]' lvalue Var 0x2a7b4b07320 'tmp' 'longfelem':'limb [8]'
|   | |-ImplicitCastExpr 0x2a7b4affe48 <col:26> 'const u64 *':'const u64 *' <LValueToRValue>
|   | | `-DeclRefExpr 0x2a7b4affda0 <col:26> 'const u64 *':'const u64 *' lvalue ParmVar 0x2a7b4b06a28 'y2' 'const u64 *':'const u64 *'
|   | `-ImplicitCastExpr 0x2a7b4affe78 <col:30> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4affe60 <col:30> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4affdc0 <col:30> 'felem':'limb [4]' lvalue Var 0x2a7b4b06e80 'ftmp' 'felem':'limb [4]'
|   |-CallExpr 0x2a7b4afff08 <line:1347:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x2a7b4affef0 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4affe90 <col:5> 'void (limb *, const limb *)' Function 0x2a7b4af4538 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4afff38 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4affeb0 <col:18> 'felem':'limb [4]' lvalue Var 0x2a7b4b07060 'ftmp5' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x2a7b4afff68 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4afff50 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4affed0 <col:25> 'longfelem':'limb [8]' lvalue Var 0x2a7b4b07320 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x2a7b4affff8 <line:1350:5, col:36> 'void'
|   | |-ImplicitCastExpr 0x2a7b4afffe0 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4afff80 <col:5> 'void (limb *, const limb *)' Function 0x2a7b49f95d8 'felem_diff_zero107' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4b00028 <col:24> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4afffa0 <col:24> 'felem':'limb [4]' lvalue Var 0x2a7b4b07060 'ftmp5' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x2a7b4b00058 <col:31> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4b00040 <col:31> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4afffc0 <col:31> 'felem':'limb [4]' lvalue Var 0x2a7b4b070d8 'ftmp6' 'felem':'limb [4]'
|   |-CallExpr 0x2a7b4b000f0 <line:1352:5, col:26> 'void'
|   | |-ImplicitCastExpr 0x2a7b4b000d8 <col:5> 'void (*)(limb *, const u64)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4b00070 <col:5> 'void (limb *, const u64)' Function 0x2a7b49f5738 'felem_scalar' 'void (limb *, const u64)'
|   | |-ImplicitCastExpr 0x2a7b4b00120 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4b00090 <col:18> 'felem':'limb [4]' lvalue Var 0x2a7b4b07060 'ftmp5' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x2a7b4b00138 <col:25> 'u64':'unsigned long long' <IntegralCast>
|   |   `-IntegerLiteral 0x2a7b4b000b0 <col:25> 'int' 2
|   |-CallExpr 0x2a7b4b001c8 <line:1354:5, col:31> 'void'
|   | |-ImplicitCastExpr 0x2a7b4b001b0 <col:5> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4b00150 <col:5> 'void (u64 *, const limb *)' Function 0x2a7b49fd1a8 'felem_shrink' 'void (u64 *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4b001f8 <col:18> 'u64 *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4b00170 <col:18> 'smallfelem':'u64 [4]' lvalue Var 0x2a7b4b07440 'small1' 'smallfelem':'u64 [4]'
|   | `-ImplicitCastExpr 0x2a7b4b00228 <col:26> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4b00210 <col:26> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4b00190 <col:26> 'felem':'limb [4]' lvalue Var 0x2a7b4b07060 'ftmp5' 'felem':'limb [4]'
|   |-BinaryOperator 0x2a7b4b00328 <line:1355:5, col:40> 'limb':'int' '='
|   | |-DeclRefExpr 0x2a7b4b00240 <col:5> 'limb':'int' lvalue Var 0x2a7b4b07758 'y_equal' 'limb':'int'
|   | `-CallExpr 0x2a7b4b002d0 <col:15, col:40> 'limb':'int'
|   |   |-ImplicitCastExpr 0x2a7b4b002b8 <col:15> 'limb (*)(const u64 *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x2a7b4b00278 <col:15> 'limb (const u64 *)' Function 0x2a7b4aeb268 'smallfelem_is_zero' 'limb (const u64 *)'
|   |   `-ImplicitCastExpr 0x2a7b4b00310 <col:34> 'const u64 *':'const u64 *' <NoOp>
|   |     `-ImplicitCastExpr 0x2a7b4b002f8 <col:34> 'u64 *' <ArrayToPointerDecay>
|   |       `-DeclRefExpr 0x2a7b4b00298 <col:34> 'smallfelem':'u64 [4]' lvalue Var 0x2a7b4b07440 'small1' 'smallfelem':'u64 [4]'
|   |-IfStmt 0x2a7b4b006c0 <line:1357:5, line:1360:5>
|   | |-BinaryOperator 0x2a7b4b00498 <line:1357:9, col:47> 'int' '&&'
|   | | |-BinaryOperator 0x2a7b4b00428 <col:9, col:32> 'int' '&&'
|   | | | |-BinaryOperator 0x2a7b4b003b8 <col:9, col:20> 'int' '&&'
|   | | | | |-ImplicitCastExpr 0x2a7b4b00388 <col:9> 'limb':'int' <LValueToRValue>
|   | | | | | `-DeclRefExpr 0x2a7b4b00348 <col:9> 'limb':'int' lvalue Var 0x2a7b4b076e0 'x_equal' 'limb':'int'
|   | | | | `-ImplicitCastExpr 0x2a7b4b003a0 <col:20> 'limb':'int' <LValueToRValue>
|   | | | |   `-DeclRefExpr 0x2a7b4b00368 <col:20> 'limb':'int' lvalue Var 0x2a7b4b07758 'y_equal' 'limb':'int'
|   | | | `-UnaryOperator 0x2a7b4b00410 <col:31, col:32> 'int' prefix '!' cannot overflow
|   | | |   `-ImplicitCastExpr 0x2a7b4b003f8 <col:32> 'limb':'int' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x2a7b4b003d8 <col:32> 'limb':'int' lvalue Var 0x2a7b4b077d0 'z1_is_zero' 'limb':'int'
|   | | `-UnaryOperator 0x2a7b4b00480 <col:46, col:47> 'int' prefix '!' cannot overflow
|   | |   `-ImplicitCastExpr 0x2a7b4b00468 <col:47> 'limb':'int' <LValueToRValue>
|   | |     `-DeclRefExpr 0x2a7b4b00448 <col:47> 'limb':'int' lvalue Var 0x2a7b4b07848 'z2_is_zero' 'limb':'int'
|   | `-CompoundStmt 0x2a7b4b006a0 <col:59, line:1360:5>
|   |   |-CallExpr 0x2a7b4b005b0 <line:1358:9, col:44> 'void'
|   |   | |-ImplicitCastExpr 0x2a7b4b00598 <col:9> 'void (*)(limb *, limb *, limb *, const limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x2a7b4b004b8 <col:9> 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *)' Function 0x2a7b4afb7d8 'point_double' 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *)'
|   |   | |-ImplicitCastExpr 0x2a7b4b00600 <col:22> 'limb *':'limb *' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x2a7b4b004d8 <col:22> 'limb *':'limb *' lvalue ParmVar 0x2a7b4b06660 'x3' 'limb *':'limb *'
|   |   | |-ImplicitCastExpr 0x2a7b4b00618 <col:26> 'limb *':'limb *' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x2a7b4b004f8 <col:26> 'limb *':'limb *' lvalue ParmVar 0x2a7b4b066d8 'y3' 'limb *':'limb *'
|   |   | |-ImplicitCastExpr 0x2a7b4b00630 <col:30> 'limb *':'limb *' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x2a7b4b00518 <col:30> 'limb *':'limb *' lvalue ParmVar 0x2a7b4b06750 'z3' 'limb *':'limb *'
|   |   | |-ImplicitCastExpr 0x2a7b4b00648 <col:34> 'const limb *':'const limb *' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x2a7b4b00538 <col:34> 'const limb *':'const limb *' lvalue ParmVar 0x2a7b4b067c8 'x1' 'const limb *':'const limb *'
|   |   | |-ImplicitCastExpr 0x2a7b4b00660 <col:38> 'const limb *':'const limb *' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x2a7b4b00558 <col:38> 'const limb *':'const limb *' lvalue ParmVar 0x2a7b4b06840 'y1' 'const limb *':'const limb *'
|   |   | `-ImplicitCastExpr 0x2a7b4b00678 <col:42> 'const limb *':'const limb *' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x2a7b4b00578 <col:42> 'const limb *':'const limb *' lvalue ParmVar 0x2a7b4b068b8 'z1' 'const limb *':'const limb *'
|   |   `-ReturnStmt 0x2a7b4b00690 <line:1359:9>
|   |-CallExpr 0x2a7b4b00750 <line:1363:5, col:29> 'void'
|   | |-ImplicitCastExpr 0x2a7b4b00738 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4b006d8 <col:5> 'void (limb *, const limb *)' Function 0x2a7b49f4048 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4b00780 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4b006f8 <col:18> 'felem':'limb [4]' lvalue Var 0x2a7b4b06e80 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x2a7b4b007b0 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4b00798 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4b00718 <col:24> 'felem':'limb [4]' lvalue Var 0x2a7b4b06fe8 'ftmp4' 'felem':'limb [4]'
|   |-CallExpr 0x2a7b4b00848 <line:1364:5, col:25> 'void'
|   | |-ImplicitCastExpr 0x2a7b4b00830 <col:5> 'void (*)(limb *, const u64)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4b007c8 <col:5> 'void (limb *, const u64)' Function 0x2a7b49f5738 'felem_scalar' 'void (limb *, const u64)'
|   | |-ImplicitCastExpr 0x2a7b4b00878 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4b007e8 <col:18> 'felem':'limb [4]' lvalue Var 0x2a7b4b06e80 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x2a7b4b00890 <col:24> 'u64':'unsigned long long' <IntegralCast>
|   |   `-IntegerLiteral 0x2a7b4b00808 <col:24> 'int' 2
|   |-CallExpr 0x2a7b4b00920 <line:1366:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x2a7b4b00908 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4b008a8 <col:5> 'void (limb *, const limb *)' Function 0x2a7b4a04ae8 'felem_square' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4b00950 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4b008c8 <col:18> 'longfelem':'limb [8]' lvalue Var 0x2a7b4b07320 'tmp' 'longfelem':'limb [8]'
|   | `-ImplicitCastExpr 0x2a7b4b00980 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4b00968 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4b008e8 <col:23> 'felem':'limb [4]' lvalue Var 0x2a7b4b06e80 'ftmp' 'felem':'limb [4]'
|   |-CallExpr 0x2a7b4b00a10 <line:1367:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x2a7b4b009f8 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4b00998 <col:5> 'void (limb *, const limb *)' Function 0x2a7b4af4538 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4b00a40 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4b009b8 <col:18> 'felem':'limb [4]' lvalue Var 0x2a7b4b06e80 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x2a7b4b00a70 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4b00a58 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4b009d8 <col:24> 'longfelem':'limb [8]' lvalue Var 0x2a7b4b07320 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x2a7b4b00b20 <line:1370:5, col:31> 'void'
|   | |-ImplicitCastExpr 0x2a7b4b00b08 <col:5> 'void (*)(limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4b00a88 <col:5> 'void (limb *, const limb *, const limb *)' Function 0x2a7b4a096f8 'felem_mul' 'void (limb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4b00b58 <col:15> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4b00aa8 <col:15> 'longfelem':'limb [8]' lvalue Var 0x2a7b4b07320 'tmp' 'longfelem':'limb [8]'
|   | |-ImplicitCastExpr 0x2a7b4b00b88 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x2a7b4b00b70 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x2a7b4b00ac8 <col:20> 'felem':'limb [4]' lvalue Var 0x2a7b4b06fe8 'ftmp4' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x2a7b4b00bb8 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4b00ba0 <col:27> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4b00ae8 <col:27> 'felem':'limb [4]' lvalue Var 0x2a7b4b06e80 'ftmp' 'felem':'limb [4]'
|   |-CallExpr 0x2a7b4b00c48 <line:1371:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x2a7b4b00c30 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4b00bd0 <col:5> 'void (limb *, const limb *)' Function 0x2a7b4af4538 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4b00c78 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4b00bf0 <col:18> 'felem':'limb [4]' lvalue Var 0x2a7b4b06ef8 'ftmp2' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x2a7b4b00ca8 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4b00c90 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4b00c10 <col:25> 'longfelem':'limb [8]' lvalue Var 0x2a7b4b07320 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x2a7b4b00d58 <line:1374:5, col:31> 'void'
|   | |-ImplicitCastExpr 0x2a7b4b00d40 <col:5> 'void (*)(limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4b00cc0 <col:5> 'void (limb *, const limb *, const limb *)' Function 0x2a7b4a096f8 'felem_mul' 'void (limb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4b00d90 <col:15> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4b00ce0 <col:15> 'longfelem':'limb [8]' lvalue Var 0x2a7b4b07320 'tmp' 'longfelem':'limb [8]'
|   | |-ImplicitCastExpr 0x2a7b4b00dc0 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x2a7b4b00da8 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x2a7b4b00d00 <col:20> 'felem':'limb [4]' lvalue Var 0x2a7b4b06f70 'ftmp3' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x2a7b4b00df0 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4b00dd8 <col:27> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4b00d20 <col:27> 'felem':'limb [4]' lvalue Var 0x2a7b4b06e80 'ftmp' 'felem':'limb [4]'
|   |-CallExpr 0x2a7b4b00e80 <line:1375:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x2a7b4b00e68 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4b00e08 <col:5> 'void (limb *, const limb *)' Function 0x2a7b4af4538 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4b00eb0 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4b00e28 <col:18> 'felem':'limb [4]' lvalue Var 0x2a7b4b06fe8 'ftmp4' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x2a7b4b00ee0 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4b00ec8 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4b00e48 <col:25> 'longfelem':'limb [8]' lvalue Var 0x2a7b4b07320 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x2a7b4b00f70 <line:1378:5, col:34> 'void'
|   | |-ImplicitCastExpr 0x2a7b4b00f58 <col:5> 'void (*)(limb *, const u64 *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4b00ef8 <col:5> 'void (limb *, const u64 *)' Function 0x2a7b4a018e8 'smallfelem_square' 'void (limb *, const u64 *)'
|   | |-ImplicitCastExpr 0x2a7b4b00fa0 <col:23> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4b00f18 <col:23> 'longfelem':'limb [8]' lvalue Var 0x2a7b4b07320 'tmp' 'longfelem':'limb [8]'
|   | `-ImplicitCastExpr 0x2a7b4b00fd0 <col:28> 'const u64 *':'const u64 *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4b00fb8 <col:28> 'u64 *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4b00f38 <col:28> 'smallfelem':'u64 [4]' lvalue Var 0x2a7b4b07440 'small1' 'smallfelem':'u64 [4]'
|   |-CallExpr 0x2a7b4b01078 <line:1379:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x2a7b4b01060 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4b00fe8 <col:5> 'void (limb *, const limb *)' Function 0x2a7b4af4538 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4b010a8 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4b01008 <col:18> 'felem':'limb [4]' lvalue Var 0x2a7b4b07150 'x_out' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x2a7b4b010d8 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4b010c0 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4b01040 <col:25> 'longfelem':'limb [8]' lvalue Var 0x2a7b4b07320 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x2a7b4b01168 <line:1380:5, col:30> 'void'
|   | |-ImplicitCastExpr 0x2a7b4b01150 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4b010f0 <col:5> 'void (limb *, const limb *)' Function 0x2a7b49f4048 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4b01198 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4b01110 <col:18> 'felem':'limb [4]' lvalue Var 0x2a7b4b06f70 'ftmp3' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x2a7b4b011c8 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4b011b0 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4b01130 <col:25> 'felem':'limb [4]' lvalue Var 0x2a7b4b06fe8 'ftmp4' 'felem':'limb [4]'
|   |-CallExpr 0x2a7b4b01260 <line:1381:5, col:26> 'void'
|   | |-ImplicitCastExpr 0x2a7b4b01248 <col:5> 'void (*)(limb *, const u64)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4b011e0 <col:5> 'void (limb *, const u64)' Function 0x2a7b49f5738 'felem_scalar' 'void (limb *, const u64)'
|   | |-ImplicitCastExpr 0x2a7b4b01290 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4b01200 <col:18> 'felem':'limb [4]' lvalue Var 0x2a7b4b06fe8 'ftmp4' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x2a7b4b012a8 <col:25> 'u64':'unsigned long long' <IntegralCast>
|   |   `-IntegerLiteral 0x2a7b4b01220 <col:25> 'int' 2
|   |-CallExpr 0x2a7b4b01338 <line:1382:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x2a7b4b01320 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4b012c0 <col:5> 'void (limb *, const limb *)' Function 0x2a7b49f4770 'felem_sum' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4b01368 <col:15> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4b012e0 <col:15> 'felem':'limb [4]' lvalue Var 0x2a7b4b06fe8 'ftmp4' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x2a7b4b01398 <col:22> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4b01380 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4b01300 <col:22> 'felem':'limb [4]' lvalue Var 0x2a7b4b06ef8 'ftmp2' 'felem':'limb [4]'
|   |-CallExpr 0x2a7b4b01428 <line:1384:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x2a7b4b01410 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4b013b0 <col:5> 'void (limb *, const limb *)' Function 0x2a7b49f7e00 'felem_diff' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4b01458 <col:16> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4b013d0 <col:16> 'felem':'limb [4]' lvalue Var 0x2a7b4b07150 'x_out' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x2a7b4b01488 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4b01470 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4b013f0 <col:23> 'felem':'limb [4]' lvalue Var 0x2a7b4b06fe8 'ftmp4' 'felem':'limb [4]'
|   |-CallExpr 0x2a7b4b01518 <line:1388:5, col:36> 'void'
|   | |-ImplicitCastExpr 0x2a7b4b01500 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4b014a0 <col:5> 'void (limb *, const limb *)' Function 0x2a7b49f95d8 'felem_diff_zero107' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4b01548 <col:24> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4b014c0 <col:24> 'felem':'limb [4]' lvalue Var 0x2a7b4b06f70 'ftmp3' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x2a7b4b01578 <col:31> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4b01560 <col:31> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4b014e0 <col:31> 'felem':'limb [4]' lvalue Var 0x2a7b4b07150 'x_out' 'felem':'limb [4]'
|   |-CallExpr 0x2a7b4b01628 <line:1390:5, col:39> 'void'
|   | |-ImplicitCastExpr 0x2a7b4b01610 <col:5> 'void (*)(limb *, const u64 *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4b01590 <col:5> 'void (limb *, const u64 *, const limb *)' Function 0x2a7b4aed998 'felem_small_mul' 'void (limb *, const u64 *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4b01660 <col:21> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4b015b0 <col:21> 'longfelem':'limb [8]' lvalue Var 0x2a7b4b07320 'tmp' 'longfelem':'limb [8]'
|   | |-ImplicitCastExpr 0x2a7b4b01690 <col:26> 'const u64 *':'const u64 *' <NoOp>
|   | | `-ImplicitCastExpr 0x2a7b4b01678 <col:26> 'u64 *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x2a7b4b015d0 <col:26> 'smallfelem':'u64 [4]' lvalue Var 0x2a7b4b07440 'small1' 'smallfelem':'u64 [4]'
|   | `-ImplicitCastExpr 0x2a7b4b016c0 <col:34> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4b016a8 <col:34> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4b015f0 <col:34> 'felem':'limb [4]' lvalue Var 0x2a7b4b06f70 'ftmp3' 'felem':'limb [4]'
|   |-CallExpr 0x2a7b4b01788 <line:1391:5, col:33> 'void'
|   | |-ImplicitCastExpr 0x2a7b4b01770 <col:5> 'void (*)(limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4b016d8 <col:5> 'void (limb *, const limb *, const limb *)' Function 0x2a7b4a096f8 'felem_mul' 'void (limb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4b017c0 <col:15> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4b016f8 <col:15> 'longfelem':'limb [8]' lvalue Var 0x2a7b4b07398 'tmp2' 'longfelem':'limb [8]'
|   | |-ImplicitCastExpr 0x2a7b4b017f0 <col:21> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x2a7b4b017d8 <col:21> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x2a7b4b01730 <col:21> 'felem':'limb [4]' lvalue Var 0x2a7b4b070d8 'ftmp6' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x2a7b4b01820 <col:28> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4b01808 <col:28> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4b01750 <col:28> 'felem':'limb [4]' lvalue Var 0x2a7b4b06ef8 'ftmp2' 'felem':'limb [4]'
|   |-CallExpr 0x2a7b4b018b8 <line:1392:5, col:29> 'void'
|   | |-ImplicitCastExpr 0x2a7b4b018a0 <col:5> 'void (*)(limb *, const u64)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4b01838 <col:5> 'void (limb *, const u64)' Function 0x2a7b49f5df0 'longfelem_scalar' 'void (limb *, const u64)'
|   | |-ImplicitCastExpr 0x2a7b4b018e8 <col:22> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4b01858 <col:22> 'longfelem':'limb [8]' lvalue Var 0x2a7b4b07398 'tmp2' 'longfelem':'limb [8]'
|   | `-ImplicitCastExpr 0x2a7b4b01900 <col:28> 'u64':'unsigned long long' <IntegralCast>
|   |   `-IntegerLiteral 0x2a7b4b01878 <col:28> 'int' 2
|   |-CallExpr 0x2a7b4b019b8 <line:1394:5, col:29> 'void'
|   | |-ImplicitCastExpr 0x2a7b4b019a0 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4b01918 <col:5> 'void (limb *, const limb *)' Function 0x2a7b49fa398 'longfelem_diff' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4b019e8 <col:20> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4b01938 <col:20> 'longfelem':'limb [8]' lvalue Var 0x2a7b4b07320 'tmp' 'longfelem':'limb [8]'
|   | `-ImplicitCastExpr 0x2a7b4b01a18 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4b01a00 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4b01980 <col:25> 'longfelem':'limb [8]' lvalue Var 0x2a7b4b07398 'tmp2' 'longfelem':'limb [8]'
|   |-CallExpr 0x2a7b4b01ac0 <line:1396:5, col:36> 'void'
|   | |-ImplicitCastExpr 0x2a7b4b01aa8 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4b01a30 <col:5> 'void (limb *, const limb *)' Function 0x2a7b4af50c8 'felem_reduce_zero105' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4b01af0 <col:26> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4b01a50 <col:26> 'felem':'limb [4]' lvalue Var 0x2a7b4b071c8 'y_out' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x2a7b4b01b20 <col:33> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4b01b08 <col:33> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4b01a88 <col:33> 'longfelem':'limb [8]' lvalue Var 0x2a7b4b07320 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x2a7b4b01c30 <line:1399:5, col:49> 'void'
|   | |-ImplicitCastExpr 0x2a7b4b01c18 <col:5> 'void (*)(limb *, const u64 *, limb)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4b01b38 <col:5> 'void (limb *, const u64 *, limb)' Function 0x2a7b4b05e28 'copy_small_conditional' 'void (limb *, const u64 *, limb)'
|   | |-ImplicitCastExpr 0x2a7b4b01c68 <col:28> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4b01b58 <col:28> 'felem':'limb [4]' lvalue Var 0x2a7b4b07150 'x_out' 'felem':'limb [4]'
|   | |-ImplicitCastExpr 0x2a7b4b01c80 <col:35> 'const u64 *':'const u64 *' <LValueToRValue>
|   | | `-DeclRefExpr 0x2a7b4b01b78 <col:35> 'const u64 *':'const u64 *' lvalue ParmVar 0x2a7b4b069b0 'x2' 'const u64 *':'const u64 *'
|   | `-ImplicitCastExpr 0x2a7b4b01c98 <col:39> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x2a7b4b01b98 <col:39> 'limb':'int' lvalue Var 0x2a7b4b077d0 'z1_is_zero' 'limb':'int'
|   |-CallExpr 0x2a7b4b01da0 <line:1400:5, col:43> 'void'
|   | |-ImplicitCastExpr 0x2a7b4b01d88 <col:5> 'void (*)(limb *, const limb *, limb)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4b01cb0 <col:5> 'void (limb *, const limb *, limb)' Function 0x2a7b4afd458 'copy_conditional' 'void (limb *, const limb *, limb)'
|   | |-ImplicitCastExpr 0x2a7b4b01dd8 <col:22> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4b01cd0 <col:22> 'felem':'limb [4]' lvalue Var 0x2a7b4b07150 'x_out' 'felem':'limb [4]'
|   | |-ImplicitCastExpr 0x2a7b4b01df0 <col:29> 'const limb *':'const limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x2a7b4b01cf0 <col:29> 'const limb *':'const limb *' lvalue ParmVar 0x2a7b4b067c8 'x1' 'const limb *':'const limb *'
|   | `-ImplicitCastExpr 0x2a7b4b01e08 <col:33> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x2a7b4b01d10 <col:33> 'limb':'int' lvalue Var 0x2a7b4b07848 'z2_is_zero' 'limb':'int'
|   |-CallExpr 0x2a7b4b01eb8 <line:1401:5, col:49> 'void'
|   | |-ImplicitCastExpr 0x2a7b4b01ea0 <col:5> 'void (*)(limb *, const u64 *, limb)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4b01e20 <col:5> 'void (limb *, const u64 *, limb)' Function 0x2a7b4b05e28 'copy_small_conditional' 'void (limb *, const u64 *, limb)'
|   | |-ImplicitCastExpr 0x2a7b4b01ef0 <col:28> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4b01e40 <col:28> 'felem':'limb [4]' lvalue Var 0x2a7b4b071c8 'y_out' 'felem':'limb [4]'
|   | |-ImplicitCastExpr 0x2a7b4b01f08 <col:35> 'const u64 *':'const u64 *' <LValueToRValue>
|   | | `-DeclRefExpr 0x2a7b4b01e60 <col:35> 'const u64 *':'const u64 *' lvalue ParmVar 0x2a7b4b06a28 'y2' 'const u64 *':'const u64 *'
|   | `-ImplicitCastExpr 0x2a7b4b01f20 <col:39> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x2a7b4b01e80 <col:39> 'limb':'int' lvalue Var 0x2a7b4b077d0 'z1_is_zero' 'limb':'int'
|   |-CallExpr 0x2a7b4b01fd0 <line:1402:5, col:43> 'void'
|   | |-ImplicitCastExpr 0x2a7b4b01fb8 <col:5> 'void (*)(limb *, const limb *, limb)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4b01f38 <col:5> 'void (limb *, const limb *, limb)' Function 0x2a7b4afd458 'copy_conditional' 'void (limb *, const limb *, limb)'
|   | |-ImplicitCastExpr 0x2a7b4b02008 <col:22> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4b01f58 <col:22> 'felem':'limb [4]' lvalue Var 0x2a7b4b071c8 'y_out' 'felem':'limb [4]'
|   | |-ImplicitCastExpr 0x2a7b4b02020 <col:29> 'const limb *':'const limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x2a7b4b01f78 <col:29> 'const limb *':'const limb *' lvalue ParmVar 0x2a7b4b06840 'y1' 'const limb *':'const limb *'
|   | `-ImplicitCastExpr 0x2a7b4b02038 <col:33> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x2a7b4b01f98 <col:33> 'limb':'int' lvalue Var 0x2a7b4b07848 'z2_is_zero' 'limb':'int'
|   |-CallExpr 0x2a7b4b020e8 <line:1403:5, col:49> 'void'
|   | |-ImplicitCastExpr 0x2a7b4b020d0 <col:5> 'void (*)(limb *, const u64 *, limb)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4b02050 <col:5> 'void (limb *, const u64 *, limb)' Function 0x2a7b4b05e28 'copy_small_conditional' 'void (limb *, const u64 *, limb)'
|   | |-ImplicitCastExpr 0x2a7b4b02120 <col:28> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4b02070 <col:28> 'felem':'limb [4]' lvalue Var 0x2a7b4b07240 'z_out' 'felem':'limb [4]'
|   | |-ImplicitCastExpr 0x2a7b4b02138 <col:35> 'const u64 *':'const u64 *' <LValueToRValue>
|   | | `-DeclRefExpr 0x2a7b4b02090 <col:35> 'const u64 *':'const u64 *' lvalue ParmVar 0x2a7b4b06aa0 'z2' 'const u64 *':'const u64 *'
|   | `-ImplicitCastExpr 0x2a7b4b02150 <col:39> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x2a7b4b020b0 <col:39> 'limb':'int' lvalue Var 0x2a7b4b077d0 'z1_is_zero' 'limb':'int'
|   |-CallExpr 0x2a7b4b02200 <line:1404:5, col:43> 'void'
|   | |-ImplicitCastExpr 0x2a7b4b021e8 <col:5> 'void (*)(limb *, const limb *, limb)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4b02168 <col:5> 'void (limb *, const limb *, limb)' Function 0x2a7b4afd458 'copy_conditional' 'void (limb *, const limb *, limb)'
|   | |-ImplicitCastExpr 0x2a7b4b02238 <col:22> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4b02188 <col:22> 'felem':'limb [4]' lvalue Var 0x2a7b4b07240 'z_out' 'felem':'limb [4]'
|   | |-ImplicitCastExpr 0x2a7b4b02250 <col:29> 'const limb *':'const limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x2a7b4b021a8 <col:29> 'const limb *':'const limb *' lvalue ParmVar 0x2a7b4b068b8 'z1' 'const limb *':'const limb *'
|   | `-ImplicitCastExpr 0x2a7b4b02268 <col:33> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x2a7b4b021c8 <col:33> 'limb':'int' lvalue Var 0x2a7b4b07848 'z2_is_zero' 'limb':'int'
|   |-CallExpr 0x2a7b4b022f8 <line:1405:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x2a7b4b022e0 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4b02280 <col:5> 'void (limb *, const limb *)' Function 0x2a7b49f4048 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4b02328 <col:18> 'limb *':'limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x2a7b4b022a0 <col:18> 'limb *':'limb *' lvalue ParmVar 0x2a7b4b06660 'x3' 'limb *':'limb *'
|   | `-ImplicitCastExpr 0x2a7b4b02358 <col:22> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4b02340 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4b022c0 <col:22> 'felem':'limb [4]' lvalue Var 0x2a7b4b07150 'x_out' 'felem':'limb [4]'
|   |-CallExpr 0x2a7b4b023e8 <line:1406:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x2a7b4b023d0 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4b02370 <col:5> 'void (limb *, const limb *)' Function 0x2a7b49f4048 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4b02418 <col:18> 'limb *':'limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x2a7b4b02390 <col:18> 'limb *':'limb *' lvalue ParmVar 0x2a7b4b066d8 'y3' 'limb *':'limb *'
|   | `-ImplicitCastExpr 0x2a7b4b02448 <col:22> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4b02430 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4b023b0 <col:22> 'felem':'limb [4]' lvalue Var 0x2a7b4b071c8 'y_out' 'felem':'limb [4]'
|   `-CallExpr 0x2a7b4b024d8 <line:1407:5, col:27> 'void'
|     |-ImplicitCastExpr 0x2a7b4b024c0 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x2a7b4b02460 <col:5> 'void (limb *, const limb *)' Function 0x2a7b49f4048 'felem_assign' 'void (limb *, const limb *)'
|     |-ImplicitCastExpr 0x2a7b4b02508 <col:18> 'limb *':'limb *' <LValueToRValue>
|     | `-DeclRefExpr 0x2a7b4b02480 <col:18> 'limb *':'limb *' lvalue ParmVar 0x2a7b4b06750 'z3' 'limb *':'limb *'
|     `-ImplicitCastExpr 0x2a7b4b02538 <col:22> 'const limb *':'const limb *' <NoOp>
|       `-ImplicitCastExpr 0x2a7b4b02520 <col:22> 'limb *' <ArrayToPointerDecay>
|         `-DeclRefExpr 0x2a7b4b024a0 <col:22> 'felem':'limb [4]' lvalue Var 0x2a7b4b07240 'z_out' 'felem':'limb [4]'
|-FunctionDecl 0x2a7b4b02d78 <line:1414:1, line:1428:1> line:1414:13 used point_add_small 'void (u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *)' static
| |-ParmVarDecl 0x2a7b4b02730 <col:29, col:40> col:40 used x3 'u64 *':'u64 *'
| |-ParmVarDecl 0x2a7b4b027a8 <col:44, col:55> col:55 used y3 'u64 *':'u64 *'
| |-ParmVarDecl 0x2a7b4b02820 <col:59, col:70> col:70 used z3 'u64 *':'u64 *'
| |-ParmVarDecl 0x2a7b4b02898 <line:1415:29, col:40> col:40 used x1 'u64 *':'u64 *'
| |-ParmVarDecl 0x2a7b4b02910 <col:44, col:55> col:55 used y1 'u64 *':'u64 *'
| |-ParmVarDecl 0x2a7b4b02988 <col:59, col:70> col:70 used z1 'u64 *':'u64 *'
| |-ParmVarDecl 0x2a7b4b02a00 <line:1416:29, col:40> col:40 used x2 'u64 *':'u64 *'
| |-ParmVarDecl 0x2a7b4b02a78 <col:44, col:55> col:55 used y2 'u64 *':'u64 *'
| |-ParmVarDecl 0x2a7b4b02af0 <col:59, col:70> col:70 used z2 'u64 *':'u64 *'
| `-CompoundStmt 0x2a7b4b03bb8 <line:1417:1, line:1428:1>
|   |-DeclStmt 0x2a7b4b03000 <line:1418:5, col:39>
|   | |-VarDecl 0x2a7b4b02e88 <col:5, col:11> col:11 used felem_x3 'felem':'limb [4]'
|   | |-VarDecl 0x2a7b4b02f00 <col:5, col:21> col:21 used felem_y3 'felem':'limb [4]'
|   | `-VarDecl 0x2a7b4b02f78 <col:5, col:31> col:31 used felem_z3 'felem':'limb [4]'
|   |-DeclStmt 0x2a7b4b031a0 <line:1419:5, col:39>
|   | |-VarDecl 0x2a7b4b03028 <col:5, col:11> col:11 used felem_x1 'felem':'limb [4]'
|   | |-VarDecl 0x2a7b4b030a0 <col:5, col:21> col:21 used felem_y1 'felem':'limb [4]'
|   | `-VarDecl 0x2a7b4b03118 <col:5, col:31> col:31 used felem_z1 'felem':'limb [4]'
|   |-CallExpr 0x2a7b4b03248 <line:1420:5, col:35> 'void'
|   | |-ImplicitCastExpr 0x2a7b4b03230 <col:5> 'void (*)(limb *, const u64 *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4b031b8 <col:5> 'void (limb *, const u64 *)' Function 0x2a7b4a01120 'smallfelem_expand' 'void (limb *, const u64 *)'
|   | |-ImplicitCastExpr 0x2a7b4b03278 <col:23> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4b031d8 <col:23> 'felem':'limb [4]' lvalue Var 0x2a7b4b03028 'felem_x1' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x2a7b4b032a8 <col:33> 'const u64 *':'const u64 *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4b03290 <col:33> 'u64 *':'u64 *' <LValueToRValue>
|   |     `-DeclRefExpr 0x2a7b4b03210 <col:33> 'u64 *':'u64 *' lvalue ParmVar 0x2a7b4b02898 'x1' 'u64 *':'u64 *'
|   |-CallExpr 0x2a7b4b03350 <line:1421:5, col:35> 'void'
|   | |-ImplicitCastExpr 0x2a7b4b03338 <col:5> 'void (*)(limb *, const u64 *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4b032c0 <col:5> 'void (limb *, const u64 *)' Function 0x2a7b4a01120 'smallfelem_expand' 'void (limb *, const u64 *)'
|   | |-ImplicitCastExpr 0x2a7b4b03380 <col:23> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4b032e0 <col:23> 'felem':'limb [4]' lvalue Var 0x2a7b4b030a0 'felem_y1' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x2a7b4b033b0 <col:33> 'const u64 *':'const u64 *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4b03398 <col:33> 'u64 *':'u64 *' <LValueToRValue>
|   |     `-DeclRefExpr 0x2a7b4b03318 <col:33> 'u64 *':'u64 *' lvalue ParmVar 0x2a7b4b02910 'y1' 'u64 *':'u64 *'
|   |-CallExpr 0x2a7b4b03458 <line:1422:5, col:35> 'void'
|   | |-ImplicitCastExpr 0x2a7b4b03440 <col:5> 'void (*)(limb *, const u64 *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4b033c8 <col:5> 'void (limb *, const u64 *)' Function 0x2a7b4a01120 'smallfelem_expand' 'void (limb *, const u64 *)'
|   | |-ImplicitCastExpr 0x2a7b4b03488 <col:23> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4b033e8 <col:23> 'felem':'limb [4]' lvalue Var 0x2a7b4b03118 'felem_z1' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x2a7b4b034b8 <col:33> 'const u64 *':'const u64 *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4b034a0 <col:33> 'u64 *':'u64 *' <LValueToRValue>
|   |     `-DeclRefExpr 0x2a7b4b03420 <col:33> 'u64 *':'u64 *' lvalue ParmVar 0x2a7b4b02988 'z1' 'u64 *':'u64 *'
|   |-CallExpr 0x2a7b4b036f0 <line:1423:5, line:1424:25> 'void'
|   | |-ImplicitCastExpr 0x2a7b4b036d8 <line:1423:5> 'void (*)(limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const u64 *, const u64 *, const u64 *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4b034d0 <col:5> 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const u64 *, const u64 *, const u64 *)' Function 0x2a7b4b06d68 'point_add' 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const u64 *, const u64 *, const u64 *)'
|   | |-ImplicitCastExpr 0x2a7b4b03760 <col:15> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4b034f0 <col:15> 'felem':'limb [4]' lvalue Var 0x2a7b4b02e88 'felem_x3' 'felem':'limb [4]'
|   | |-ImplicitCastExpr 0x2a7b4b03778 <col:25> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4b03528 <col:25> 'felem':'limb [4]' lvalue Var 0x2a7b4b02f00 'felem_y3' 'felem':'limb [4]'
|   | |-ImplicitCastExpr 0x2a7b4b03790 <col:35> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4b03560 <col:35> 'felem':'limb [4]' lvalue Var 0x2a7b4b02f78 'felem_z3' 'felem':'limb [4]'
|   | |-ImplicitCastExpr 0x2a7b4b037c0 <col:45> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x2a7b4b037a8 <col:45> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x2a7b4b03598 <col:45> 'felem':'limb [4]' lvalue Var 0x2a7b4b03028 'felem_x1' 'felem':'limb [4]'
|   | |-ImplicitCastExpr 0x2a7b4b037f0 <col:55> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x2a7b4b037d8 <col:55> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x2a7b4b035b8 <col:55> 'felem':'limb [4]' lvalue Var 0x2a7b4b030a0 'felem_y1' 'felem':'limb [4]'
|   | |-ImplicitCastExpr 0x2a7b4b03820 <col:65> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x2a7b4b03808 <col:65> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x2a7b4b035d8 <col:65> 'felem':'limb [4]' lvalue Var 0x2a7b4b03118 'felem_z1' 'felem':'limb [4]'
|   | |-IntegerLiteral 0x2a7b4b035f8 <col:75> 'int' 0
|   | |-ImplicitCastExpr 0x2a7b4b03850 <line:1424:15> 'const u64 *':'const u64 *' <NoOp>
|   | | `-ImplicitCastExpr 0x2a7b4b03838 <col:15> 'u64 *':'u64 *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x2a7b4b03620 <col:15> 'u64 *':'u64 *' lvalue ParmVar 0x2a7b4b02a00 'x2' 'u64 *':'u64 *'
|   | |-ImplicitCastExpr 0x2a7b4b03880 <col:19> 'const u64 *':'const u64 *' <NoOp>
|   | | `-ImplicitCastExpr 0x2a7b4b03868 <col:19> 'u64 *':'u64 *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x2a7b4b03640 <col:19> 'u64 *':'u64 *' lvalue ParmVar 0x2a7b4b02a78 'y2' 'u64 *':'u64 *'
|   | `-ImplicitCastExpr 0x2a7b4b038b0 <col:23> 'const u64 *':'const u64 *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4b03898 <col:23> 'u64 *':'u64 *' <LValueToRValue>
|   |     `-DeclRefExpr 0x2a7b4b03660 <col:23> 'u64 *':'u64 *' lvalue ParmVar 0x2a7b4b02af0 'z2' 'u64 *':'u64 *'
|   |-CallExpr 0x2a7b4b03940 <line:1425:5, col:30> 'void'
|   | |-ImplicitCastExpr 0x2a7b4b03928 <col:5> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4b038c8 <col:5> 'void (u64 *, const limb *)' Function 0x2a7b49fd1a8 'felem_shrink' 'void (u64 *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4b03990 <col:18> 'u64 *':'u64 *' <LValueToRValue>
|   | | `-DeclRefExpr 0x2a7b4b038e8 <col:18> 'u64 *':'u64 *' lvalue ParmVar 0x2a7b4b02730 'x3' 'u64 *':'u64 *'
|   | `-ImplicitCastExpr 0x2a7b4b039c0 <col:22> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4b039a8 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4b03908 <col:22> 'felem':'limb [4]' lvalue Var 0x2a7b4b02e88 'felem_x3' 'felem':'limb [4]'
|   |-CallExpr 0x2a7b4b03a50 <line:1426:5, col:30> 'void'
|   | |-ImplicitCastExpr 0x2a7b4b03a38 <col:5> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4b039d8 <col:5> 'void (u64 *, const limb *)' Function 0x2a7b49fd1a8 'felem_shrink' 'void (u64 *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4b03a80 <col:18> 'u64 *':'u64 *' <LValueToRValue>
|   | | `-DeclRefExpr 0x2a7b4b039f8 <col:18> 'u64 *':'u64 *' lvalue ParmVar 0x2a7b4b027a8 'y3' 'u64 *':'u64 *'
|   | `-ImplicitCastExpr 0x2a7b4b03ab0 <col:22> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4b03a98 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4b03a18 <col:22> 'felem':'limb [4]' lvalue Var 0x2a7b4b02f00 'felem_y3' 'felem':'limb [4]'
|   `-CallExpr 0x2a7b4b03b40 <line:1427:5, col:30> 'void'
|     |-ImplicitCastExpr 0x2a7b4b03b28 <col:5> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x2a7b4b03ac8 <col:5> 'void (u64 *, const limb *)' Function 0x2a7b49fd1a8 'felem_shrink' 'void (u64 *, const limb *)'
|     |-ImplicitCastExpr 0x2a7b4b03b70 <col:18> 'u64 *':'u64 *' <LValueToRValue>
|     | `-DeclRefExpr 0x2a7b4b03ae8 <col:18> 'u64 *':'u64 *' lvalue ParmVar 0x2a7b4b02820 'z3' 'u64 *':'u64 *'
|     `-ImplicitCastExpr 0x2a7b4b03ba0 <col:22> 'const limb *':'const limb *' <NoOp>
|       `-ImplicitCastExpr 0x2a7b4b03b88 <col:22> 'limb *' <ArrayToPointerDecay>
|         `-DeclRefExpr 0x2a7b4b03b08 <col:22> 'felem':'limb [4]' lvalue Var 0x2a7b4b02f78 'felem_z3' 'felem':'limb [4]'
|-VarDecl 0x2a7b4b03e78 <line:1467:1, line:1624:1> line:1467:25 used gmul 'const smallfelem [2][16][3]' static cinit
| `-InitListExpr 0x2a7b4c1a7d8 <col:42, line:1624:1> 'const smallfelem [2][16][3]'
|   |-InitListExpr 0x2a7b4c1ab28 <line:1468:5, line:1545:20> 'const smallfelem [16][3]'
|   | |-InitListExpr 0x2a7b4c1ac18 <line:1468:6, line:1470:19> 'const smallfelem [3]'
|   | | |-InitListExpr 0x2a7b4c1ac80 <line:1468:7, col:18> 'const smallfelem':'u64 const[4]'
|   | | | |-ImplicitCastExpr 0x2a7b4c1ace0 <col:8> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x2a7b4b03ee0 <col:8> 'int' 0
|   | | | |-ImplicitCastExpr 0x2a7b4c1acf8 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x2a7b4b03f08 <col:11> 'int' 0
|   | | | |-ImplicitCastExpr 0x2a7b4c1ad10 <col:14> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x2a7b4b03f30 <col:14> 'int' 0
|   | | | `-ImplicitCastExpr 0x2a7b4c1ad28 <col:17> 'u64':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x2a7b4b03f58 <col:17> 'int' 0
|   | | |-InitListExpr 0x2a7b4c1ad50 <line:1469:7, col:18> 'const smallfelem':'u64 const[4]'
|   | | | |-ImplicitCastExpr 0x2a7b4c1adb0 <col:8> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x2a7b4b03fe0 <col:8> 'int' 0
|   | | | |-ImplicitCastExpr 0x2a7b4c1adc8 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x2a7b4b04008 <col:11> 'int' 0
|   | | | |-ImplicitCastExpr 0x2a7b4c1ade0 <col:14> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x2a7b4b04030 <col:14> 'int' 0
|   | | | `-ImplicitCastExpr 0x2a7b4c1adf8 <col:17> 'u64':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x2a7b4b04058 <col:17> 'int' 0
|   | | `-InitListExpr 0x2a7b4c1ae20 <line:1470:7, col:18> 'const smallfelem':'u64 const[4]'
|   | |   |-ImplicitCastExpr 0x2a7b4c1ae80 <col:8> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x2a7b4b040e0 <col:8> 'int' 0
|   | |   |-ImplicitCastExpr 0x2a7b4c1ae98 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x2a7b4b04108 <col:11> 'int' 0
|   | |   |-ImplicitCastExpr 0x2a7b4c1aeb0 <col:14> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x2a7b4b04130 <col:14> 'int' 0
|   | |   `-ImplicitCastExpr 0x2a7b4c1aec8 <col:17> 'u64':'unsigned long long' <IntegralCast>
|   | |     `-IntegerLiteral 0x2a7b4b04158 <col:17> 'int' 0
|   | |-InitListExpr 0x2a7b4c1af10 <line:1471:6, line:1475:19> 'const smallfelem [3]'
|   | | |-InitListExpr 0x2a7b4c12f50 <line:1471:7, line:1472:26> 'const smallfelem':'u64 const[4]'
|   | | | |-IntegerLiteral 0x2a7b4b04238 <line:1471:8> 'unsigned long long' 17627433388654248598
|   | | | |-ImplicitCastExpr 0x2a7b4c12fb0 <col:28> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x2a7b4b04260 <col:28> 'long long' 8575836109218198432
|   | | | |-IntegerLiteral 0x2a7b4b04288 <col:48> 'unsigned long long' 17923454489921339634
|   | | | `-ImplicitCastExpr 0x2a7b4c12fc8 <line:1472:8> 'u64':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x2a7b4b042b0 <col:8> 'long long' 7716867327612699207
|   | | |-InitListExpr 0x2a7b4c12ff0 <line:1473:7, line:1474:26> 'const smallfelem':'u64 const[4]'
|   | | | |-IntegerLiteral 0x2a7b4b04338 <line:1473:8> 'unsigned long long' 14678990851816772085
|   | | | |-ImplicitCastExpr 0x2a7b4c13050 <col:28> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x2a7b4b04360 <col:28> 'long long' 3156516839386865358
|   | | | |-IntegerLiteral 0x2a7b4b04388 <col:48> 'unsigned long long' 10297457778147434006
|   | | | `-ImplicitCastExpr 0x2a7b4c13068 <line:1474:8> 'u64':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x2a7b4b043b0 <col:8> 'long long' 5756518291402817435
|   | | `-InitListExpr 0x2a7b4c13090 <line:1475:7, col:18> 'const smallfelem':'u64 const[4]'
|   | |   |-ImplicitCastExpr 0x2a7b4c130f0 <col:8> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x2a7b4b04438 <col:8> 'int' 1
|   | |   |-ImplicitCastExpr 0x2a7b4c13108 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x2a7b4b04460 <col:11> 'int' 0
|   | |   |-ImplicitCastExpr 0x2a7b4c13120 <col:14> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x2a7b4b04488 <col:14> 'int' 0
|   | |   `-ImplicitCastExpr 0x2a7b4c13138 <col:17> 'u64':'unsigned long long' <IntegralCast>
|   | |     `-IntegerLiteral 0x2a7b4b044b0 <col:17> 'int' 0
|   | |-InitListExpr 0x2a7b4c13180 <line:1476:6, line:1480:19> 'const smallfelem [3]'
|   | | |-InitListExpr 0x2a7b4c131e8 <line:1476:7, line:1477:26> 'const smallfelem':'u64 const[4]'
|   | | | |-IntegerLiteral 0x2a7b4b04590 <line:1476:8> 'unsigned long long' 10441416191629384547
|   | | | |-ImplicitCastExpr 0x2a7b4c13248 <col:28> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x2a7b4b045b8 <col:28> 'long long' 2974974633094487934
|   | | | |-IntegerLiteral 0x2a7b4b045e0 <col:48> 'unsigned long long' 9552795814555690462
|   | | | `-ImplicitCastExpr 0x2a7b4c13260 <line:1477:8> 'u64':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x2a7b4b04608 <col:8> 'long long' 1128189898177751717
|   | | |-InitListExpr 0x2a7b4c13288 <line:1478:7, line:1479:26> 'const smallfelem':'u64 const[4]'
|   | | | |-IntegerLiteral 0x2a7b4b04690 <line:1478:8> 'unsigned long long' 16433956460045938407
|   | | | |-ImplicitCastExpr 0x2a7b4c132e8 <col:28> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x2a7b4b046b8 <col:28> 'long long' 3796998824736490229
|   | | | |-ImplicitCastExpr 0x2a7b4c13300 <col:48> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x2a7b4b046e0 <col:48> 'long long' 8019455993423272075
|   | | | `-IntegerLiteral 0x2a7b4b04708 <line:1479:8> 'unsigned long long' 13831762719979317261
|   | | `-InitListExpr 0x2a7b4c13328 <line:1480:7, col:18> 'const smallfelem':'u64 const[4]'
|   | |   |-ImplicitCastExpr 0x2a7b4c13388 <col:8> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x2a7b4b04790 <col:8> 'int' 1
|   | |   |-ImplicitCastExpr 0x2a7b4c133a0 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x2a7b4b047b8 <col:11> 'int' 0
|   | |   |-ImplicitCastExpr 0x2a7b4c133b8 <col:14> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x2a7b4b047e0 <col:14> 'int' 0
|   | |   `-ImplicitCastExpr 0x2a7b4c133d0 <col:17> 'u64':'unsigned long long' <IntegralCast>
|   | |     `-IntegerLiteral 0x2a7b4b04808 <col:17> 'int' 0
|   | |-InitListExpr 0x2a7b4c13418 <line:1481:6, line:1485:19> 'const smallfelem [3]'
|   | | |-InitListExpr 0x2a7b4c13480 <line:1481:7, line:1482:26> 'const smallfelem':'u64 const[4]'
|   | | | |-IntegerLiteral 0x2a7b4b048e8 <line:1481:8> 'unsigned long long' 10608542154395062959
|   | | | |-IntegerLiteral 0x2a7b4b04910 <col:28> 'unsigned long long' 16819986920937746938
|   | | | |-IntegerLiteral 0x2a7b4b04938 <col:48> 'unsigned long long' 12850952123954767753
|   | | | `-ImplicitCastExpr 0x2a7b4c134e0 <line:1482:8> 'u64':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x2a7b4b04960 <col:8> 'long long' 3461662536726114927
|   | | |-InitListExpr 0x2a7b4c13508 <line:1483:7, line:1484:26> 'const smallfelem':'u64 const[4]'
|   | | | |-IntegerLiteral 0x2a7b4b049e8 <line:1483:8> 'unsigned long long' 12273613631375091616
|   | | | |-ImplicitCastExpr 0x2a7b4c13568 <col:28> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x2a7b4b04a10 <col:28> 'long long' 6607324557975488165
|   | | | |-ImplicitCastExpr 0x2a7b4c13580 <col:48> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x2a7b4b04a38 <col:48> 'long long' 9159718173381901423
|   | | | `-ImplicitCastExpr 0x2a7b4c13598 <line:1484:8> 'u64':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x2a7b4b04a60 <col:8> 'long long' 8262636234751034948
|   | | `-InitListExpr 0x2a7b4c135c0 <line:1485:7, col:18> 'const smallfelem':'u64 const[4]'
|   | |   |-ImplicitCastExpr 0x2a7b4c13620 <col:8> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x2a7b4b04ae8 <col:8> 'int' 1
|   | |   |-ImplicitCastExpr 0x2a7b4c13638 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x2a7b4b04b10 <col:11> 'int' 0
|   | |   |-ImplicitCastExpr 0x2a7b4c13650 <col:14> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x2a7b4b04b38 <col:14> 'int' 0
|   | |   `-ImplicitCastExpr 0x2a7b4c13668 <col:17> 'u64':'unsigned long long' <IntegralCast>
|   | |     `-IntegerLiteral 0x2a7b4b04b60 <col:17> 'int' 0
|   | |-InitListExpr 0x2a7b4c136b0 <line:1486:6, line:1490:19> 'const smallfelem [3]'
|   | | |-InitListExpr 0x2a7b4c13718 <line:1486:7, line:1487:26> 'const smallfelem':'u64 const[4]'
|   | | | |-ImplicitCastExpr 0x2a7b4c13778 <line:1486:8> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x2a7b4b04c40 <col:8> 'long long' 6325393404965010821
|   | | | |-IntegerLiteral 0x2a7b4b04c68 <col:28> 'unsigned long long' 18173712786924235459
|   | | | |-IntegerLiteral 0x2a7b4b04c90 <col:48> 'unsigned long long' 18129292894149178990
|   | | | `-ImplicitCastExpr 0x2a7b4c13790 <line:1487:8> 'u64':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x2a7b4b04cb8 <col:8> 'long long' 4935227880232410727
|   | | |-InitListExpr 0x2a7b4c137b8 <line:1488:7, line:1489:26> 'const smallfelem':'u64 const[4]'
|   | | | |-ImplicitCastExpr 0x2a7b4c13818 <line:1488:8> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x2a7b4b04d40 <col:8> 'long long' 900213915829558066
|   | | | |-ImplicitCastExpr 0x2a7b4c13830 <col:28> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x2a7b4b04d68 <col:28> 'long long' 4410321002173228288
|   | | | |-IntegerLiteral 0x2a7b4b04d90 <col:48> 'unsigned long long' 16226079771716136951
|   | | | `-ImplicitCastExpr 0x2a7b4c13848 <line:1489:8> 'u64':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x2a7b4b04db8 <col:8> 'long long' 3262899348601647598
|   | | `-InitListExpr 0x2a7b4c13870 <line:1490:7, col:18> 'const smallfelem':'u64 const[4]'
|   | |   |-ImplicitCastExpr 0x2a7b4c138d0 <col:8> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x2a7b4b04e40 <col:8> 'int' 1
|   | |   |-ImplicitCastExpr 0x2a7b4c138e8 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x2a7b4b04e68 <col:11> 'int' 0
|   | |   |-ImplicitCastExpr 0x2a7b4c13900 <col:14> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x2a7b4b04e90 <col:14> 'int' 0
|   | |   `-ImplicitCastExpr 0x2a7b4c13918 <col:17> 'u64':'unsigned long long' <IntegralCast>
|   | |     `-IntegerLiteral 0x2a7b4b04eb8 <col:17> 'int' 0
|   | |-InitListExpr 0x2a7b4c13960 <line:1491:6, line:1495:19> 'const smallfelem [3]'
|   | | |-InitListExpr 0x2a7b4c139c8 <line:1491:7, line:1492:26> 'const smallfelem':'u64 const[4]'
|   | | | |-ImplicitCastExpr 0x2a7b4c13a28 <line:1491:8> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x2a7b4b04f98 <col:8> 'long long' 1410924739154491007
|   | | | |-IntegerLiteral 0x2a7b4b04fc0 <col:28> 'unsigned long long' 17257720289925140919
|   | | | |-IntegerLiteral 0x2a7b4b04fe8 <col:48> 'unsigned long long' 15980467524946754656
|   | | | `-IntegerLiteral 0x2a7b4b05010 <line:1492:8> 'unsigned long long' 17263732451459232511
|   | | |-InitListExpr 0x2a7b4c13a50 <line:1493:7, line:1494:26> 'const smallfelem':'u64 const[4]'
|   | | | |-ImplicitCastExpr 0x2a7b4c13ab0 <line:1493:8> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x2a7b4b05098 <col:8> 'long long' 1828520442025400488
|   | | | |-ImplicitCastExpr 0x2a7b4c13ac8 <col:28> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x2a7b4b050c0 <col:28> 'long long' 2528836098827360064
|   | | | |-IntegerLiteral 0x2a7b4b050e8 <col:48> 'unsigned long long' 13974273849645867420
|   | | | `-ImplicitCastExpr 0x2a7b4c13ae0 <line:1494:8> 'u64':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x2a7b4b05110 <col:8> 'long long' 6998206532957187227
|   | | `-InitListExpr 0x2a7b4c13b08 <line:1495:7, col:18> 'const smallfelem':'u64 const[4]'
|   | |   |-ImplicitCastExpr 0x2a7b4c13b68 <col:8> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x2a7b4b05198 <col:8> 'int' 1
|   | |   |-ImplicitCastExpr 0x2a7b4c13b80 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x2a7b4b051c0 <col:11> 'int' 0
|   | |   |-ImplicitCastExpr 0x2a7b4c13b98 <col:14> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x2a7b4b051e8 <col:14> 'int' 0
|   | |   `-ImplicitCastExpr 0x2a7b4c13bb0 <col:17> 'u64':'unsigned long long' <IntegralCast>
|   | |     `-IntegerLiteral 0x2a7b4b05210 <col:17> 'int' 0
|   | |-InitListExpr 0x2a7b4c13bf8 <line:1496:6, line:1500:19> 'const smallfelem [3]'
|   | | |-InitListExpr 0x2a7b4c13c60 <line:1496:7, line:1497:26> 'const smallfelem':'u64 const[4]'
|   | | | |-IntegerLiteral 0x2a7b4b052f0 <line:1496:8> 'unsigned long long' 14619442581211706556
|   | | | |-ImplicitCastExpr 0x2a7b4c13cc0 <col:28> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x2a7b4b05318 <col:28> 'long long' 2969806602452450358
|   | | | |-ImplicitCastExpr 0x2a7b4c13cd8 <col:48> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x2a7b4b05340 <col:48> 'long long' 9073174912575879359
|   | | | `-ImplicitCastExpr 0x2a7b4c13cf0 <line:1497:8> 'u64':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x2a7b4b05368 <col:8> 'long long' 6126693716495300056
|   | | |-InitListExpr 0x2a7b4c13d18 <line:1498:7, line:1499:26> 'const smallfelem':'u64 const[4]'
|   | | | |-ImplicitCastExpr 0x2a7b4c13d78 <line:1498:8> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x2a7b4b053f0 <col:8> 'long long' 4971941098638972492
|   | | | |-IntegerLiteral 0x2a7b4b05418 <col:28> 'unsigned long long' 11507776179333430241
|   | | | |-ImplicitCastExpr 0x2a7b4c13d90 <col:48> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x2a7b4b05440 <col:48> 'long long' 791015059971985637
|   | | | `-ImplicitCastExpr 0x2a7b4c13da8 <line:1499:8> 'u64':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x2a7b4b05468 <col:8> 'long long' 1545126667594020945
|   | | `-InitListExpr 0x2a7b4c13dd0 <line:1500:7, col:18> 'const smallfelem':'u64 const[4]'
|   | |   |-ImplicitCastExpr 0x2a7b4c13e30 <col:8> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x2a7b4b054f0 <col:8> 'int' 1
|   | |   |-ImplicitCastExpr 0x2a7b4c13e48 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x2a7b4b05518 <col:11> 'int' 0
|   | |   |-ImplicitCastExpr 0x2a7b4c13e60 <col:14> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x2a7b4b05540 <col:14> 'int' 0
|   | |   `-ImplicitCastExpr 0x2a7b4c13e78 <col:17> 'u64':'unsigned long long' <IntegralCast>
|   | |     `-IntegerLiteral 0x2a7b4b05568 <col:17> 'int' 0
|   | |-InitListExpr 0x2a7b4c13ec0 <line:1501:6, line:1505:19> 'const smallfelem [3]'
|   | | |-InitListExpr 0x2a7b4c13f28 <line:1501:7, line:1502:26> 'const smallfelem':'u64 const[4]'
|   | | | |-IntegerLiteral 0x2a7b4b05648 <line:1501:8> 'unsigned long long' 16469324088139898369
|   | | | |-ImplicitCastExpr 0x2a7b4c13f88 <col:28> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x2a7b4b05670 <col:28> 'long long' 8992990158826594086
|   | | | |-IntegerLiteral 0x2a7b4b05698 <col:48> 'unsigned long long' 11738901276316812177
|   | | | `-IntegerLiteral 0x2a7b4b056c0 <line:1502:8> 'unsigned long long' 16959842912971080170
|   | | |-InitListExpr 0x2a7b4c13fb0 <line:1503:7, line:1504:26> 'const smallfelem':'u64 const[4]'
|   | | | |-IntegerLiteral 0x2a7b4b05748 <line:1503:8> 'unsigned long long' 14612236727341429881
|   | | | |-IntegerLiteral 0x2a7b4b05770 <col:28> 'unsigned long long' 9651826421517301317
|   | | | |-ImplicitCastExpr 0x2a7b4c14010 <col:48> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x2a7b4b05798 <col:48> 'long long' 689304323628231918
|   | | | `-IntegerLiteral 0x2a7b4b057c0 <line:1504:8> 'unsigned long long' 16932816531315540347
|   | | `-InitListExpr 0x2a7b4c14038 <line:1505:7, col:18> 'const smallfelem':'u64 const[4]'
|   | |   |-ImplicitCastExpr 0x2a7b4c14098 <col:8> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x2a7b4b05848 <col:8> 'int' 1
|   | |   |-ImplicitCastExpr 0x2a7b4c140b0 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x2a7b4b05870 <col:11> 'int' 0
|   | |   |-ImplicitCastExpr 0x2a7b4c140c8 <col:14> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x2a7b4b05898 <col:14> 'int' 0
|   | |   `-ImplicitCastExpr 0x2a7b4c140e0 <col:17> 'u64':'unsigned long long' <IntegralCast>
|   | |     `-IntegerLiteral 0x2a7b4b058c0 <col:17> 'int' 0
|   | |-InitListExpr 0x2a7b4c14128 <line:1506:6, line:1510:19> 'const smallfelem [3]'
|   | | |-InitListExpr 0x2a7b4c14190 <line:1506:7, line:1507:26> 'const smallfelem':'u64 const[4]'
|   | | | |-ImplicitCastExpr 0x2a7b4c141f0 <line:1506:8> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x2a7b4c14f78 <col:8> 'long long' 7850354671997102270
|   | | | |-IntegerLiteral 0x2a7b4c14fa0 <col:28> 'unsigned long long' 10827662381879310666
|   | | | |-ImplicitCastExpr 0x2a7b4c14208 <col:48> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x2a7b4c14fc8 <col:48> 'long long' 2825726755471450053
|   | | | `-IntegerLiteral 0x2a7b4c14ff0 <line:1507:8> 'unsigned long long' 12021117271037743734
|   | | |-InitListExpr 0x2a7b4c14230 <line:1508:7, line:1509:26> 'const smallfelem':'u64 const[4]'
|   | | | |-IntegerLiteral 0x2a7b4c15078 <line:1508:8> 'unsigned long long' 17490494635306907124
|   | | | |-IntegerLiteral 0x2a7b4c150a0 <col:28> 'unsigned long long' 9388476954023560603
|   | | | |-ImplicitCastExpr 0x2a7b4c14290 <col:48> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x2a7b4c150c8 <col:48> 'long long' 7401871309252586719
|   | | | `-ImplicitCastExpr 0x2a7b4c142a8 <line:1509:8> 'u64':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x2a7b4c150f0 <col:8> 'long long' 7444314345419016214
|   | | `-InitListExpr 0x2a7b4c142d0 <line:1510:7, col:18> 'const smallfelem':'u64 const[4]'
|   | |   |-ImplicitCastExpr 0x2a7b4c14330 <col:8> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x2a7b4c15178 <col:8> 'int' 1
|   | |   |-ImplicitCastExpr 0x2a7b4c14348 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x2a7b4c151a0 <col:11> 'int' 0
|   | |   |-ImplicitCastExpr 0x2a7b4c14360 <col:14> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x2a7b4c151c8 <col:14> 'int' 0
|   | |   `-ImplicitCastExpr 0x2a7b4c14378 <col:17> 'u64':'unsigned long long' <IntegralCast>
|   | |     `-IntegerLiteral 0x2a7b4c151f0 <col:17> 'int' 0
|   | |-InitListExpr 0x2a7b4c143c0 <line:1511:6, line:1515:19> 'const smallfelem [3]'
|   | | |-InitListExpr 0x2a7b4c14428 <line:1511:7, line:1512:26> 'const smallfelem':'u64 const[4]'
|   | | | |-ImplicitCastExpr 0x2a7b4c14488 <line:1511:8> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x2a7b4c152d0 <col:8> 'long long' 3311425576568130110
|   | | | |-ImplicitCastExpr 0x2a7b4c144a0 <col:28> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x2a7b4c152f8 <col:28> 'long long' 8421783014622864747
|   | | | |-ImplicitCastExpr 0x2a7b4c144b8 <col:48> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x2a7b4c15320 <col:48> 'long long' 3568363273336651483
|   | | | `-ImplicitCastExpr 0x2a7b4c144d0 <line:1512:8> 'u64':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x2a7b4c15348 <col:8> 'long long' 5653880613779398061
|   | | |-InitListExpr 0x2a7b4c144f8 <line:1513:7, line:1514:26> 'const smallfelem':'u64 const[4]'
|   | | | |-IntegerLiteral 0x2a7b4c153d0 <line:1513:8> 'unsigned long long' 11872440132187765680
|   | | | |-IntegerLiteral 0x2a7b4c153f8 <col:28> 'unsigned long long' 18130051117790339749
|   | | | |-ImplicitCastExpr 0x2a7b4c14558 <col:48> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x2a7b4c15420 <col:48> 'long long' 2215777003961086593
|   | | | `-ImplicitCastExpr 0x2a7b4c14570 <line:1514:8> 'u64':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x2a7b4c15448 <col:8> 'long long' 4808032968947992163
|   | | `-InitListExpr 0x2a7b4c14598 <line:1515:7, col:18> 'const smallfelem':'u64 const[4]'
|   | |   |-ImplicitCastExpr 0x2a7b4c145f8 <col:8> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x2a7b4c154d0 <col:8> 'int' 1
|   | |   |-ImplicitCastExpr 0x2a7b4c14610 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x2a7b4c154f8 <col:11> 'int' 0
|   | |   |-ImplicitCastExpr 0x2a7b4c14628 <col:14> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x2a7b4c15520 <col:14> 'int' 0
|   | |   `-ImplicitCastExpr 0x2a7b4c14640 <col:17> 'u64':'unsigned long long' <IntegralCast>
|   | |     `-IntegerLiteral 0x2a7b4c15548 <col:17> 'int' 0
|   | |-InitListExpr 0x2a7b4c14688 <line:1516:6, line:1520:19> 'const smallfelem [3]'
|   | | |-InitListExpr 0x2a7b4c146f0 <line:1516:7, line:1517:26> 'const smallfelem':'u64 const[4]'
|   | | | |-ImplicitCastExpr 0x2a7b4c14750 <line:1516:8> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x2a7b4c15628 <col:8> 'long long' 7996512021131061433
|   | | | |-IntegerLiteral 0x2a7b4c15650 <col:28> 'unsigned long long' 15130017193297502513
|   | | | |-ImplicitCastExpr 0x2a7b4c14768 <col:48> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x2a7b4c15678 <col:48> 'long long' 9213270411358356600
|   | | | `-ImplicitCastExpr 0x2a7b4c14780 <line:1517:8> 'u64':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x2a7b4c156a0 <col:8> 'long long' 8685067594097287245
|   | | |-InitListExpr 0x2a7b4c147a8 <line:1518:7, line:1519:26> 'const smallfelem':'u64 const[4]'
|   | | | |-IntegerLiteral 0x2a7b4c15728 <line:1518:8> 'unsigned long long' 11268772705129781622
|   | | | |-ImplicitCastExpr 0x2a7b4c14808 <col:28> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x2a7b4c15750 <col:28> 'long long' 7696184534049525071
|   | | | |-IntegerLiteral 0x2a7b4c15778 <col:48> 'unsigned long long' 16020170479003278831
|   | | | `-IntegerLiteral 0x2a7b4c157a0 <line:1519:8> 'unsigned long long' 13171691205910774561
|   | | `-InitListExpr 0x2a7b4c14830 <line:1520:7, col:18> 'const smallfelem':'u64 const[4]'
|   | |   |-ImplicitCastExpr 0x2a7b4c14890 <col:8> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x2a7b4c15828 <col:8> 'int' 1
|   | |   |-ImplicitCastExpr 0x2a7b4c148a8 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x2a7b4c15850 <col:11> 'int' 0
|   | |   |-ImplicitCastExpr 0x2a7b4c148c0 <col:14> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x2a7b4c15878 <col:14> 'int' 0
|   | |   `-ImplicitCastExpr 0x2a7b4c148d8 <col:17> 'u64':'unsigned long long' <IntegralCast>
|   | |     `-IntegerLiteral 0x2a7b4c158a0 <col:17> 'int' 0
|   | |-InitListExpr 0x2a7b4c14920 <line:1521:6, line:1525:19> 'const smallfelem [3]'
|   | | |-InitListExpr 0x2a7b4c14988 <line:1521:7, line:1522:26> 'const smallfelem':'u64 const[4]'
|   | | | |-ImplicitCastExpr 0x2a7b4c149e8 <line:1521:8> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x2a7b4c15980 <col:8> 'long long' 9194414004818818419
|   | | | |-ImplicitCastExpr 0x2a7b4c14a00 <col:28> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x2a7b4c159a8 <col:28> 'long long' 6594076190914360470
|   | | | |-ImplicitCastExpr 0x2a7b4c14a18 <col:48> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x2a7b4c159d0 <col:48> 'long long' 6439111866792803502
|   | | | `-ImplicitCastExpr 0x2a7b4c14a30 <line:1522:8> 'u64':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x2a7b4c159f8 <col:8> 'long long' 903178766089130631
|   | | |-InitListExpr 0x2a7b4c14a58 <line:1523:7, line:1524:26> 'const smallfelem':'u64 const[4]'
|   | | | |-ImplicitCastExpr 0x2a7b4c14ab8 <line:1523:8> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x2a7b4c15a80 <col:8> 'long long' 4204039210694913192
|   | | | |-ImplicitCastExpr 0x2a7b4c14ad0 <col:28> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x2a7b4c15aa8 <col:28> 'long long' 8971594821414511859
|   | | | |-ImplicitCastExpr 0x2a7b4c14ae8 <col:48> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x2a7b4c15ad0 <col:48> 'long long' 1788410310064137898
|   | | | `-IntegerLiteral 0x2a7b4c15af8 <line:1524:8> 'unsigned long long' 15951150250963508678
|   | | `-InitListExpr 0x2a7b4c14b10 <line:1525:7, col:18> 'const smallfelem':'u64 const[4]'
|   | |   |-ImplicitCastExpr 0x2a7b4c14b70 <col:8> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x2a7b4c15b80 <col:8> 'int' 1
|   | |   |-ImplicitCastExpr 0x2a7b4c14b88 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x2a7b4c15ba8 <col:11> 'int' 0
|   | |   |-ImplicitCastExpr 0x2a7b4c14ba0 <col:14> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x2a7b4c15bd0 <col:14> 'int' 0
|   | |   `-ImplicitCastExpr 0x2a7b4c14bb8 <col:17> 'u64':'unsigned long long' <IntegralCast>
|   | |     `-IntegerLiteral 0x2a7b4c15bf8 <col:17> 'int' 0
|   | |-InitListExpr 0x2a7b4c14c00 <line:1526:6, line:1530:19> 'const smallfelem [3]'
|   | | |-InitListExpr 0x2a7b4c14c68 <line:1526:7, line:1527:26> 'const smallfelem':'u64 const[4]'
|   | | | |-IntegerLiteral 0x2a7b4c15cd8 <line:1526:8> 'unsigned long long' 16819389878359993612
|   | | | |-ImplicitCastExpr 0x2a7b4c14cc8 <col:28> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x2a7b4c15d00 <col:28> 'long long' 4873073520113514799
|   | | | |-IntegerLiteral 0x2a7b4c15d28 <col:48> 'unsigned long long' 17284995840217074163
|   | | | `-ImplicitCastExpr 0x2a7b4c14ce0 <line:1527:8> 'u64':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x2a7b4c15d50 <col:8> 'long long' 7562463719493563494
|   | | |-InitListExpr 0x2a7b4c14d08 <line:1528:7, line:1529:26> 'const smallfelem':'u64 const[4]'
|   | | | |-IntegerLiteral 0x2a7b4c15dd8 <line:1528:8> 'unsigned long long' 14843327652293659978
|   | | | |-ImplicitCastExpr 0x2a7b4c14d68 <col:28> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x2a7b4c15e00 <col:28> 'long long' 7389276838502450726
|   | | | |-ImplicitCastExpr 0x2a7b4c14d80 <col:48> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x2a7b4c15e28 <col:48> 'long long' 6939722928163815411
|   | | | `-ImplicitCastExpr 0x2a7b4c14d98 <line:1529:8> 'u64':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x2a7b4c15e50 <col:8> 'long long' 3583110508470077984
|   | | `-InitListExpr 0x2a7b4c14dc0 <line:1530:7, col:18> 'const smallfelem':'u64 const[4]'
|   | |   |-ImplicitCastExpr 0x2a7b4c14e20 <col:8> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x2a7b4c15ed8 <col:8> 'int' 1
|   | |   |-ImplicitCastExpr 0x2a7b4c14e38 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x2a7b4c15f00 <col:11> 'int' 0
|   | |   |-ImplicitCastExpr 0x2a7b4c14e50 <col:14> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x2a7b4c15f28 <col:14> 'int' 0
|   | |   `-ImplicitCastExpr 0x2a7b4c14e68 <col:17> 'u64':'unsigned long long' <IntegralCast>
|   | |     `-IntegerLiteral 0x2a7b4c15f50 <col:17> 'int' 0
|   | |-InitListExpr 0x2a7b4c14eb0 <line:1531:6, line:1535:19> 'const smallfelem [3]'
|   | | |-InitListExpr 0x2a7b4c1af90 <line:1531:7, line:1532:26> 'const smallfelem':'u64 const[4]'
|   | | | |-IntegerLiteral 0x2a7b4c16030 <line:1531:8> 'unsigned long long' 15234348820970614399
|   | | | |-ImplicitCastExpr 0x2a7b4c1aff0 <col:28> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x2a7b4c16058 <col:28> 'long long' 944084751294372904
|   | | | |-ImplicitCastExpr 0x2a7b4c1b008 <col:48> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x2a7b4c16080 <col:48> 'long long' 7366871684117878688
|   | | | `-ImplicitCastExpr 0x2a7b4c1b020 <line:1532:8> 'u64':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x2a7b4c160a8 <col:8> 'long long' 4634977297227980217
|   | | |-InitListExpr 0x2a7b4c1b048 <line:1533:7, line:1534:26> 'const smallfelem':'u64 const[4]'
|   | | | |-ImplicitCastExpr 0x2a7b4c1b0a8 <line:1533:8> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x2a7b4c16130 <col:8> 'long long' 2547392258115446251
|   | | | |-IntegerLiteral 0x2a7b4c16158 <col:28> 'unsigned long long' 16655704750641106011
|   | | | |-IntegerLiteral 0x2a7b4c16180 <col:48> 'unsigned long long' 9668074726414027976
|   | | | `-IntegerLiteral 0x2a7b4c161a8 <line:1534:8> 'unsigned long long' 18360979218528009313
|   | | `-InitListExpr 0x2a7b4c1b0d0 <line:1535:7, col:18> 'const smallfelem':'u64 const[4]'
|   | |   |-ImplicitCastExpr 0x2a7b4c1b130 <col:8> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x2a7b4c16230 <col:8> 'int' 1
|   | |   |-ImplicitCastExpr 0x2a7b4c1b148 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x2a7b4c16258 <col:11> 'int' 0
|   | |   |-ImplicitCastExpr 0x2a7b4c1b160 <col:14> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x2a7b4c16280 <col:14> 'int' 0
|   | |   `-ImplicitCastExpr 0x2a7b4c1b178 <col:17> 'u64':'unsigned long long' <IntegralCast>
|   | |     `-IntegerLiteral 0x2a7b4c162a8 <col:17> 'int' 0
|   | |-InitListExpr 0x2a7b4c1b1c0 <line:1536:6, line:1540:19> 'const smallfelem [3]'
|   | | |-InitListExpr 0x2a7b4c1b228 <line:1536:7, line:1537:26> 'const smallfelem':'u64 const[4]'
|   | | | |-ImplicitCastExpr 0x2a7b4c1b288 <line:1536:8> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x2a7b4c16388 <col:8> 'long long' 8373436425878949804
|   | | | |-IntegerLiteral 0x2a7b4c163b0 <col:28> 'unsigned long long' 12672949858381244324
|   | | | |-ImplicitCastExpr 0x2a7b4c1b2a0 <col:48> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x2a7b4c163d8 <col:48> 'long long' 1311113366226075514
|   | | | `-ImplicitCastExpr 0x2a7b4c1b2b8 <line:1537:8> 'u64':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x2a7b4c16400 <col:8> 'long long' 2224139274171900954
|   | | |-InitListExpr 0x2a7b4c1b2e0 <line:1538:7, line:1539:26> 'const smallfelem':'u64 const[4]'
|   | | | |-IntegerLiteral 0x2a7b4c16488 <line:1538:8> 'unsigned long long' 10349464555096373316
|   | | | |-ImplicitCastExpr 0x2a7b4c1b340 <col:28> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x2a7b4c164b0 <col:28> 'long long' 3954278663023761687
|   | | | |-ImplicitCastExpr 0x2a7b4c1b358 <col:48> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x2a7b4c164d8 <col:48> 'long long' 884381536816411552
|   | | | `-ImplicitCastExpr 0x2a7b4c1b370 <line:1539:8> 'u64':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x2a7b4c16500 <col:8> 'long long' 4832447639533305084
|   | | `-InitListExpr 0x2a7b4c1b398 <line:1540:7, col:18> 'const smallfelem':'u64 const[4]'
|   | |   |-ImplicitCastExpr 0x2a7b4c1b3f8 <col:8> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x2a7b4c16588 <col:8> 'int' 1
|   | |   |-ImplicitCastExpr 0x2a7b4c1b410 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x2a7b4c165b0 <col:11> 'int' 0
|   | |   |-ImplicitCastExpr 0x2a7b4c1b428 <col:14> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x2a7b4c165d8 <col:14> 'int' 0
|   | |   `-ImplicitCastExpr 0x2a7b4c1b440 <col:17> 'u64':'unsigned long long' <IntegralCast>
|   | |     `-IntegerLiteral 0x2a7b4c16600 <col:17> 'int' 0
|   | `-InitListExpr 0x2a7b4c1b488 <line:1541:6, line:1545:19> 'const smallfelem [3]'
|   |   |-InitListExpr 0x2a7b4c1b4f0 <line:1541:7, line:1542:26> 'const smallfelem':'u64 const[4]'
|   |   | |-IntegerLiteral 0x2a7b4c166e0 <line:1541:8> 'unsigned long long' 10814749165039220965
|   |   | |-ImplicitCastExpr 0x2a7b4c1b550 <col:28> 'u64':'unsigned long long' <IntegralCast>
|   |   | | `-IntegerLiteral 0x2a7b4c16708 <col:28> 'long long' 7399658494733087819
|   |   | |-ImplicitCastExpr 0x2a7b4c1b568 <col:48> 'u64':'unsigned long long' <IntegralCast>
|   |   | | `-IntegerLiteral 0x2a7b4c16730 <col:48> 'long long' 741483134296471098
|   |   | `-IntegerLiteral 0x2a7b4c16758 <line:1542:8> 'unsigned long long' 13010378930286731804
|   |   |-InitListExpr 0x2a7b4c1b590 <line:1543:7, line:1544:26> 'const smallfelem':'u64 const[4]'
|   |   | |-ImplicitCastExpr 0x2a7b4c1b5f0 <line:1543:8> 'u64':'unsigned long long' <IntegralCast>
|   |   | | `-IntegerLiteral 0x2a7b4c167e0 <col:8> 'long long' 498686754927156013
|   |   | |-IntegerLiteral 0x2a7b4c16808 <col:28> 'unsigned long long' 13836434663360106392
|   |   | |-ImplicitCastExpr 0x2a7b4c1b608 <col:48> 'u64':'unsigned long long' <IntegralCast>
|   |   | | `-IntegerLiteral 0x2a7b4c16830 <col:48> 'long long' 7211137999908042344
|   |   | `-IntegerLiteral 0x2a7b4c16858 <line:1544:8> 'unsigned long long' 18068465070929427883
|   |   `-InitListExpr 0x2a7b4c1b630 <line:1545:7, col:18> 'const smallfelem':'u64 const[4]'
|   |     |-ImplicitCastExpr 0x2a7b4c1b690 <col:8> 'u64':'unsigned long long' <IntegralCast>
|   |     | `-IntegerLiteral 0x2a7b4c168e0 <col:8> 'int' 1
|   |     |-ImplicitCastExpr 0x2a7b4c1b6a8 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   |     | `-IntegerLiteral 0x2a7b4c16908 <col:11> 'int' 0
|   |     |-ImplicitCastExpr 0x2a7b4c1b6c0 <col:14> 'u64':'unsigned long long' <IntegralCast>
|   |     | `-IntegerLiteral 0x2a7b4c16930 <col:14> 'int' 0
|   |     `-ImplicitCastExpr 0x2a7b4c1b6d8 <col:17> 'u64':'unsigned long long' <IntegralCast>
|   |       `-IntegerLiteral 0x2a7b4c16958 <col:17> 'int' 0
|   `-InitListExpr 0x2a7b4c1b9f0 <line:1546:5, line:1623:20> 'const smallfelem [16][3]'
|     |-InitListExpr 0x2a7b4c1bae0 <line:1546:6, line:1548:19> 'const smallfelem [3]'
|     | |-InitListExpr 0x2a7b4c1bb48 <line:1546:7, col:18> 'const smallfelem':'u64 const[4]'
|     | | |-ImplicitCastExpr 0x2a7b4c1bba8 <col:8> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x2a7b4c16af8 <col:8> 'int' 0
|     | | |-ImplicitCastExpr 0x2a7b4c1bbc0 <col:11> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x2a7b4c16b20 <col:11> 'int' 0
|     | | |-ImplicitCastExpr 0x2a7b4c1bbd8 <col:14> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x2a7b4c16b48 <col:14> 'int' 0
|     | | `-ImplicitCastExpr 0x2a7b4c1bbf0 <col:17> 'u64':'unsigned long long' <IntegralCast>
|     | |   `-IntegerLiteral 0x2a7b4c16b70 <col:17> 'int' 0
|     | |-InitListExpr 0x2a7b4c1bc18 <line:1547:7, col:18> 'const smallfelem':'u64 const[4]'
|     | | |-ImplicitCastExpr 0x2a7b4c1bc78 <col:8> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x2a7b4c16bf8 <col:8> 'int' 0
|     | | |-ImplicitCastExpr 0x2a7b4c1bc90 <col:11> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x2a7b4c16c20 <col:11> 'int' 0
|     | | |-ImplicitCastExpr 0x2a7b4c1bca8 <col:14> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x2a7b4c16c48 <col:14> 'int' 0
|     | | `-ImplicitCastExpr 0x2a7b4c1bcc0 <col:17> 'u64':'unsigned long long' <IntegralCast>
|     | |   `-IntegerLiteral 0x2a7b4c16c70 <col:17> 'int' 0
|     | `-InitListExpr 0x2a7b4c1bce8 <line:1548:7, col:18> 'const smallfelem':'u64 const[4]'
|     |   |-ImplicitCastExpr 0x2a7b4c1bd48 <col:8> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x2a7b4c16cf8 <col:8> 'int' 0
|     |   |-ImplicitCastExpr 0x2a7b4c1bd60 <col:11> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x2a7b4c16d20 <col:11> 'int' 0
|     |   |-ImplicitCastExpr 0x2a7b4c1bd78 <col:14> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x2a7b4c16d48 <col:14> 'int' 0
|     |   `-ImplicitCastExpr 0x2a7b4c1bd90 <col:17> 'u64':'unsigned long long' <IntegralCast>
|     |     `-IntegerLiteral 0x2a7b4c16d70 <col:17> 'int' 0
|     |-InitListExpr 0x2a7b4c1bdd8 <line:1549:6, line:1553:19> 'const smallfelem [3]'
|     | |-InitListExpr 0x2a7b4c1be40 <line:1549:7, line:1550:26> 'const smallfelem':'u64 const[4]'
|     | | |-ImplicitCastExpr 0x2a7b4c1bea0 <line:1549:8> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x2a7b4c16e50 <col:8> 'long long' 4204847071378430275
|     | | |-ImplicitCastExpr 0x2a7b4c1beb8 <col:28> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x2a7b4c16e78 <col:28> 'long long' 1925598036946706358
|     | | |-ImplicitCastExpr 0x2a7b4c1bed0 <col:48> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x2a7b4c16ea0 <col:48> 'long long' 2406447439032381914
|     | | `-ImplicitCastExpr 0x2a7b4c1bee8 <line:1550:8> 'u64':'unsigned long long' <IntegralCast>
|     | |   `-IntegerLiteral 0x2a7b4c16ec8 <col:8> 'long long' 9215327188090531721
|     | |-InitListExpr 0x2a7b4c1bf10 <line:1551:7, line:1552:26> 'const smallfelem':'u64 const[4]'
|     | | |-IntegerLiteral 0x2a7b4c16f70 <line:1551:8> 'unsigned long long' 15351949985270505729
|     | | |-ImplicitCastExpr 0x2a7b4c1bf70 <col:28> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x2a7b4c16f98 <col:28> 'long long' 8409299702805885458
|     | | |-IntegerLiteral 0x2a7b4c16fc0 <col:48> 'unsigned long long' 11459959024969885425
|     | | `-IntegerLiteral 0x2a7b4c16fe8 <line:1552:8> 'unsigned long long' 16615982825261643300
|     | `-InitListExpr 0x2a7b4c1bf98 <line:1553:7, col:18> 'const smallfelem':'u64 const[4]'
|     |   |-ImplicitCastExpr 0x2a7b4c1bff8 <col:8> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x2a7b4c17070 <col:8> 'int' 1
|     |   |-ImplicitCastExpr 0x2a7b4c1c010 <col:11> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x2a7b4c17098 <col:11> 'int' 0
|     |   |-ImplicitCastExpr 0x2a7b4c1c028 <col:14> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x2a7b4c170c0 <col:14> 'int' 0
|     |   `-ImplicitCastExpr 0x2a7b4c1c040 <col:17> 'u64':'unsigned long long' <IntegralCast>
|     |     `-IntegerLiteral 0x2a7b4c170e8 <col:17> 'int' 0
|     |-InitListExpr 0x2a7b4c1c088 <line:1554:6, line:1558:19> 'const smallfelem [3]'
|     | |-InitListExpr 0x2a7b4c1c0f0 <line:1554:7, line:1555:26> 'const smallfelem':'u64 const[4]'
|     | | |-IntegerLiteral 0x2a7b4c171c8 <line:1554:8> 'unsigned long long' 12126691010890834318
|     | | |-IntegerLiteral 0x2a7b4c171f0 <col:28> 'unsigned long long' 16835899823751823681
|     | | |-ImplicitCastExpr 0x2a7b4c1c150 <col:48> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x2a7b4c17218 <col:48> 'long long' 6307303622281718018
|     | | `-ImplicitCastExpr 0x2a7b4c1c168 <line:1555:8> 'u64':'unsigned long long' <IntegralCast>
|     | |   `-IntegerLiteral 0x2a7b4c17240 <col:8> 'long long' 5357964581017122726
|     | |-InitListExpr 0x2a7b4c1c190 <line:1556:7, line:1557:26> 'const smallfelem':'u64 const[4]'
|     | | |-ImplicitCastExpr 0x2a7b4c1c1f0 <line:1556:8> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x2a7b4c172c8 <col:8> 'long long' 858738897768626240
|     | | |-ImplicitCastExpr 0x2a7b4c1c208 <col:28> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x2a7b4c172f0 <col:28> 'long long' 7092519962948038045
|     | | |-IntegerLiteral 0x2a7b4c17318 <col:48> 'unsigned long long' 14133989960413510976
|     | | `-IntegerLiteral 0x2a7b4c17340 <line:1557:8> 'unsigned long long' 16938959713482082801
|     | `-InitListExpr 0x2a7b4c1c230 <line:1558:7, col:18> 'const smallfelem':'u64 const[4]'
|     |   |-ImplicitCastExpr 0x2a7b4c1c290 <col:8> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x2a7b4c173c8 <col:8> 'int' 1
|     |   |-ImplicitCastExpr 0x2a7b4c1c2a8 <col:11> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x2a7b4c173f0 <col:11> 'int' 0
|     |   |-ImplicitCastExpr 0x2a7b4c1c2c0 <col:14> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x2a7b4c17418 <col:14> 'int' 0
|     |   `-ImplicitCastExpr 0x2a7b4c1c2d8 <col:17> 'u64':'unsigned long long' <IntegralCast>
|     |     `-IntegerLiteral 0x2a7b4c17440 <col:17> 'int' 0
|     |-InitListExpr 0x2a7b4c1c320 <line:1559:6, line:1563:19> 'const smallfelem [3]'
|     | |-InitListExpr 0x2a7b4c1c388 <line:1559:7, line:1560:26> 'const smallfelem':'u64 const[4]'
|     | | |-IntegerLiteral 0x2a7b4c17520 <line:1559:8> 'unsigned long long' 18012970283197280897
|     | | |-ImplicitCastExpr 0x2a7b4c1c3e8 <col:28> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x2a7b4c17548 <col:28> 'long long' 6796710378924666044
|     | | |-IntegerLiteral 0x2a7b4c17570 <col:48> 'unsigned long long' 14069973639409027159
|     | | `-ImplicitCastExpr 0x2a7b4c1c400 <line:1560:8> 'u64':'unsigned long long' <IntegralCast>
|     | |   `-IntegerLiteral 0x2a7b4c17598 <col:8> 'long long' 540915916971057674
|     | |-InitListExpr 0x2a7b4c1c428 <line:1561:7, line:1562:26> 'const smallfelem':'u64 const[4]'
|     | | |-ImplicitCastExpr 0x2a7b4c1c488 <line:1561:8> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x2a7b4c17620 <col:8> 'long long' 6522131241343737728
|     | | |-IntegerLiteral 0x2a7b4c17648 <col:28> 'unsigned long long' 9869655002594280931
|     | | |-IntegerLiteral 0x2a7b4c17670 <col:48> 'unsigned long long' 10930976606567621684
|     | | `-ImplicitCastExpr 0x2a7b4c1c4a0 <line:1562:8> 'u64':'unsigned long long' <IntegralCast>
|     | |   `-IntegerLiteral 0x2a7b4c17698 <col:8> 'long long' 7569669774902629779
|     | `-InitListExpr 0x2a7b4c1c4c8 <line:1563:7, col:18> 'const smallfelem':'u64 const[4]'
|     |   |-ImplicitCastExpr 0x2a7b4c1c528 <col:8> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x2a7b4c17720 <col:8> 'int' 1
|     |   |-ImplicitCastExpr 0x2a7b4c1c540 <col:11> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x2a7b4c17748 <col:11> 'int' 0
|     |   |-ImplicitCastExpr 0x2a7b4c1c558 <col:14> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x2a7b4c17770 <col:14> 'int' 0
|     |   `-ImplicitCastExpr 0x2a7b4c1c570 <col:17> 'u64':'unsigned long long' <IntegralCast>
|     |     `-IntegerLiteral 0x2a7b4c17798 <col:17> 'int' 0
|     |-InitListExpr 0x2a7b4c1c5b8 <line:1564:6, line:1568:19> 'const smallfelem [3]'
|     | |-InitListExpr 0x2a7b4c1c620 <line:1564:7, line:1565:26> 'const smallfelem':'u64 const[4]'
|     | | |-IntegerLiteral 0x2a7b4c17878 <line:1564:8> 'unsigned long long' 12603824238579167018
|     | | |-IntegerLiteral 0x2a7b4c178a0 <col:28> 'unsigned long long' 11406550811417637946
|     | | |-IntegerLiteral 0x2a7b4c178c8 <col:48> 'unsigned long long' 17681745613931615014
|     | | `-IntegerLiteral 0x2a7b4c178f0 <line:1565:8> 'unsigned long long' 9967415225131415063
|     | |-InitListExpr 0x2a7b4c1c690 <line:1566:7, line:1567:26> 'const smallfelem':'u64 const[4]'
|     | | |-IntegerLiteral 0x2a7b4c17978 <line:1566:8> 'unsigned long long' 14265609955841184951
|     | | |-IntegerLiteral 0x2a7b4c179a0 <col:28> 'unsigned long long' 14836321199344875113
|     | | |-ImplicitCastExpr 0x2a7b4c1c6f0 <col:48> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x2a7b4c179c8 <col:48> 'long long' 4026262154848670399
|     | | `-ImplicitCastExpr 0x2a7b4c1c708 <line:1567:8> 'u64':'unsigned long long' <IntegralCast>
|     | |   `-IntegerLiteral 0x2a7b4c179f0 <col:8> 'long long' 312367424096734167
|     | `-InitListExpr 0x2a7b4c1c730 <line:1568:7, col:18> 'const smallfelem':'u64 const[4]'
|     |   |-ImplicitCastExpr 0x2a7b4c1c790 <col:8> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x2a7b4c17a78 <col:8> 'int' 1
|     |   |-ImplicitCastExpr 0x2a7b4c1c7a8 <col:11> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x2a7b4c17aa0 <col:11> 'int' 0
|     |   |-ImplicitCastExpr 0x2a7b4c1c7c0 <col:14> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x2a7b4c17ac8 <col:14> 'int' 0
|     |   `-ImplicitCastExpr 0x2a7b4c1c7d8 <col:17> 'u64':'unsigned long long' <IntegralCast>
|     |     `-IntegerLiteral 0x2a7b4c17af0 <col:17> 'int' 0
|     |-InitListExpr 0x2a7b4c1c820 <line:1569:6, line:1573:19> 'const smallfelem [3]'
|     | |-InitListExpr 0x2a7b4c1c888 <line:1569:7, line:1570:26> 'const smallfelem':'u64 const[4]'
|     | | |-ImplicitCastExpr 0x2a7b4c1c8e8 <line:1569:8> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x2a7b4c17bd0 <col:8> 'long long' 867627015970731481
|     | | |-IntegerLiteral 0x2a7b4c17bf8 <col:28> 'unsigned long long' 17988713241524421700
|     | | |-ImplicitCastExpr 0x2a7b4c1c900 <col:48> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x2a7b4c17c20 <col:48> 'long long' 5787311655235732089
|     | | `-ImplicitCastExpr 0x2a7b4c1c918 <line:1570:8> 'u64':'unsigned long long' <IntegralCast>
|     | |   `-IntegerLiteral 0x2a7b4c17c48 <col:8> 'long long' 484940130495201910
|     | |-InitListExpr 0x2a7b4c1c940 <line:1571:7, line:1572:26> 'const smallfelem':'u64 const[4]'
|     | | |-IntegerLiteral 0x2a7b4c17cd0 <line:1571:8> 'unsigned long long' 14462376519995546313
|     | | |-IntegerLiteral 0x2a7b4c17cf8 <col:28> 'unsigned long long' 16050136703869978383
|     | | |-ImplicitCastExpr 0x2a7b4c1c9a0 <col:48> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x2a7b4c17d20 <col:48> 'long long' 4791065911985892208
|     | | `-ImplicitCastExpr 0x2a7b4c1c9b8 <line:1572:8> 'u64':'unsigned long long' <IntegralCast>
|     | |   `-IntegerLiteral 0x2a7b4c17d48 <col:8> 'long long' 6577346714434056586
|     | `-InitListExpr 0x2a7b4c1c9e0 <line:1573:7, col:18> 'const smallfelem':'u64 const[4]'
|     |   |-ImplicitCastExpr 0x2a7b4c1ca40 <col:8> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x2a7b4c17dd0 <col:8> 'int' 1
|     |   |-ImplicitCastExpr 0x2a7b4c1ca58 <col:11> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x2a7b4c17df8 <col:11> 'int' 0
|     |   |-ImplicitCastExpr 0x2a7b4c1ca70 <col:14> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x2a7b4c17e20 <col:14> 'int' 0
|     |   `-ImplicitCastExpr 0x2a7b4c1ca88 <col:17> 'u64':'unsigned long long' <IntegralCast>
|     |     `-IntegerLiteral 0x2a7b4c17e48 <col:17> 'int' 0
|     |-InitListExpr 0x2a7b4c1cad0 <line:1574:6, line:1578:19> 'const smallfelem [3]'
|     | |-InitListExpr 0x2a7b4c1cb38 <line:1574:7, line:1575:26> 'const smallfelem':'u64 const[4]'
|     | | |-ImplicitCastExpr 0x2a7b4c1cb98 <line:1574:8> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x2a7b4c17f28 <col:8> 'long long' 8961105821002642442
|     | | |-ImplicitCastExpr 0x2a7b4c1cbb0 <col:28> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x2a7b4c17f50 <col:28> 'long long' 5572184639073054523
|     | | |-ImplicitCastExpr 0x2a7b4c1cbc8 <col:48> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x2a7b4c17f78 <col:48> 'long long' 3001457500238366168
|     | | `-ImplicitCastExpr 0x2a7b4c1cbe0 <line:1575:8> 'u64':'unsigned long long' <IntegralCast>
|     | |   `-IntegerLiteral 0x2a7b4c17fa0 <col:8> 'long long' 4479258976280561928
|     | |-InitListExpr 0x2a7b4c1cc08 <line:1576:7, line:1577:26> 'const smallfelem':'u64 const[4]'
|     | | |-ImplicitCastExpr 0x2a7b4c1cc68 <line:1576:8> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x2a7b4c18028 <col:8> 'long long' 1453864872937502800
|     | | |-IntegerLiteral 0x2a7b4c18050 <col:28> 'unsigned long long' 12472513303615887232
|     | | |-ImplicitCastExpr 0x2a7b4c1cc80 <col:48> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x2a7b4c18078 <col:48> 'long long' 2239712233336787437
|     | | `-ImplicitCastExpr 0x2a7b4c1cc98 <line:1577:8> 'u64':'unsigned long long' <IntegralCast>
|     | |   `-IntegerLiteral 0x2a7b4c180a0 <col:8> 'long long' 2565803748450573950
|     | `-InitListExpr 0x2a7b4c1ccc0 <line:1578:7, col:18> 'const smallfelem':'u64 const[4]'
|     |   |-ImplicitCastExpr 0x2a7b4c1cd20 <col:8> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x2a7b4c18128 <col:8> 'int' 1
|     |   |-ImplicitCastExpr 0x2a7b4c1cd38 <col:11> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x2a7b4c18150 <col:11> 'int' 0
|     |   |-ImplicitCastExpr 0x2a7b4c1cd50 <col:14> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x2a7b4c18178 <col:14> 'int' 0
|     |   `-ImplicitCastExpr 0x2a7b4c1cd68 <col:17> 'u64':'unsigned long long' <IntegralCast>
|     |     `-IntegerLiteral 0x2a7b4c181a0 <col:17> 'int' 0
|     |-InitListExpr 0x2a7b4c1cdb0 <line:1579:6, line:1583:19> 'const smallfelem [3]'
|     | |-InitListExpr 0x2a7b4c1ce18 <line:1579:7, line:1580:26> 'const smallfelem':'u64 const[4]'
|     | | |-ImplicitCastExpr 0x2a7b4c1ce78 <line:1579:8> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x2a7b4c18280 <col:8> 'long long' 8702104923482042922
|     | | |-ImplicitCastExpr 0x2a7b4c1ce90 <col:28> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x2a7b4c182a8 <col:28> 'long long' 3485186220776451982
|     | | |-IntegerLiteral 0x2a7b4c182d0 <col:48> 'unsigned long long' 15837672636651286228
|     | | `-IntegerLiteral 0x2a7b4c182f8 <line:1580:8> 'unsigned long long' 9371794945225469943
|     | |-InitListExpr 0x2a7b4c1ceb8 <line:1581:7, line:1582:26> 'const smallfelem':'u64 const[4]'
|     | | |-ImplicitCastExpr 0x2a7b4c1cf18 <line:1581:8> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x2a7b4c18380 <col:8> 'long long' 7837746206991051732
|     | | |-ImplicitCastExpr 0x2a7b4c1cf30 <col:28> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x2a7b4c183a8 <col:28> 'long long' 8484321636022914244
|     | | |-ImplicitCastExpr 0x2a7b4c1cf48 <col:48> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x2a7b4c183d0 <col:48> 'long long' 1965851040684971219
|     | | `-ImplicitCastExpr 0x2a7b4c1cf60 <line:1582:8> 'u64':'unsigned long long' <IntegralCast>
|     | |   `-IntegerLiteral 0x2a7b4c183f8 <col:8> 'long long' 1442285393364518380
|     | `-InitListExpr 0x2a7b4c1cfa0 <line:1583:7, col:18> 'const smallfelem':'u64 const[4]'
|     |   |-ImplicitCastExpr 0x2a7b4c1d000 <col:8> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x2a7b4c18480 <col:8> 'int' 1
|     |   |-ImplicitCastExpr 0x2a7b4c1d018 <col:11> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x2a7b4c184a8 <col:11> 'int' 0
|     |   |-ImplicitCastExpr 0x2a7b4c1d030 <col:14> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x2a7b4c184d0 <col:14> 'int' 0
|     |   `-ImplicitCastExpr 0x2a7b4c1d048 <col:17> 'u64':'unsigned long long' <IntegralCast>
|     |     `-IntegerLiteral 0x2a7b4c184f8 <col:17> 'int' 0
|     |-InitListExpr 0x2a7b4c1d090 <line:1584:6, line:1588:19> 'const smallfelem [3]'
|     | |-InitListExpr 0x2a7b4c1d0f8 <line:1584:7, line:1585:26> 'const smallfelem':'u64 const[4]'
|     | | |-ImplicitCastExpr 0x2a7b4c1d158 <line:1584:8> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x2a7b4c185d8 <col:8> 'long long' 7669699507266117383
|     | | |-IntegerLiteral 0x2a7b4c18600 <col:28> 'unsigned long long' 18263772118963940312
|     | | |-IntegerLiteral 0x2a7b4c18628 <col:48> 'unsigned long long' 16959156411216990206
|     | | `-ImplicitCastExpr 0x2a7b4c1d170 <line:1585:8> 'u64':'unsigned long long' <IntegralCast>
|     | |   `-IntegerLiteral 0x2a7b4c18650 <col:8> 'long long' 7563435295795044334
|     | |-InitListExpr 0x2a7b4c1d198 <line:1586:7, line:1587:26> 'const smallfelem':'u64 const[4]'
|     | | |-IntegerLiteral 0x2a7b4c186d8 <line:1586:8> 'unsigned long long' 10432429702343894613
|     | | |-IntegerLiteral 0x2a7b4c18700 <col:28> 'unsigned long long' 14939165448171732863
|     | | |-IntegerLiteral 0x2a7b4c18728 <col:48> 'unsigned long long' 18142755831876440104
|     | | `-IntegerLiteral 0x2a7b4c18750 <line:1587:8> 'unsigned long long' 14691303536741059814
|     | `-InitListExpr 0x2a7b4c1d208 <line:1588:7, col:18> 'const smallfelem':'u64 const[4]'
|     |   |-ImplicitCastExpr 0x2a7b4c1d268 <col:8> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x2a7b4c187d8 <col:8> 'int' 1
|     |   |-ImplicitCastExpr 0x2a7b4c1d280 <col:11> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x2a7b4c18800 <col:11> 'int' 0
|     |   |-ImplicitCastExpr 0x2a7b4c1d298 <col:14> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x2a7b4c18828 <col:14> 'int' 0
|     |   `-ImplicitCastExpr 0x2a7b4c1d2b0 <col:17> 'u64':'unsigned long long' <IntegralCast>
|     |     `-IntegerLiteral 0x2a7b4c18850 <col:17> 'int' 0
|     |-InitListExpr 0x2a7b4c1d2f8 <line:1589:6, line:1593:19> 'const smallfelem [3]'
|     | |-InitListExpr 0x2a7b4c1d360 <line:1589:7, line:1590:26> 'const smallfelem':'u64 const[4]'
|     | | |-IntegerLiteral 0x2a7b4c18930 <line:1589:8> 'unsigned long long' 16832431112848860353
|     | | |-IntegerLiteral 0x2a7b4c18958 <col:28> 'unsigned long long' 18195368276845830772
|     | | |-ImplicitCastExpr 0x2a7b4c1d3c0 <col:48> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x2a7b4c18980 <col:48> 'long long' 2526363943779232039
|     | | `-IntegerLiteral 0x2a7b4c189a8 <line:1590:8> 'unsigned long long' 15038356215644160265
|     | |-InitListExpr 0x2a7b4c1d3e8 <line:1591:7, line:1592:26> 'const smallfelem':'u64 const[4]'
|     | | |-ImplicitCastExpr 0x2a7b4c1d448 <line:1591:8> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x2a7b4c18a30 <col:8> 'long long' 4829457343136483686
|     | | |-ImplicitCastExpr 0x2a7b4c1d460 <col:28> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x2a7b4c18a58 <col:28> 'long long' 1204775539773815621
|     | | |-ImplicitCastExpr 0x2a7b4c1d478 <col:48> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x2a7b4c18a80 <col:48> 'long long' 9057411091819482746
|     | | `-IntegerLiteral 0x2a7b4c18aa8 <line:1592:8> 'unsigned long long' 10886424616474450405
|     | `-InitListExpr 0x2a7b4c1d4a0 <line:1593:7, col:18> 'const smallfelem':'u64 const[4]'
|     |   |-ImplicitCastExpr 0x2a7b4c1d500 <col:8> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x2a7b4c18b30 <col:8> 'int' 1
|     |   |-ImplicitCastExpr 0x2a7b4c1d518 <col:11> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x2a7b4c18b58 <col:11> 'int' 0
|     |   |-ImplicitCastExpr 0x2a7b4c1d530 <col:14> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x2a7b4c18b80 <col:14> 'int' 0
|     |   `-ImplicitCastExpr 0x2a7b4c1d548 <col:17> 'u64':'unsigned long long' <IntegralCast>
|     |     `-IntegerLiteral 0x2a7b4c18ba8 <col:17> 'int' 0
|     |-InitListExpr 0x2a7b4c1d590 <line:1594:6, line:1598:19> 'const smallfelem [3]'
|     | |-InitListExpr 0x2a7b4c1d5f8 <line:1594:7, line:1595:26> 'const smallfelem':'u64 const[4]'
|     | | |-ImplicitCastExpr 0x2a7b4c1d658 <line:1594:8> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x2a7b4c18c88 <col:8> 'long long' 5464756572288098249
|     | | |-ImplicitCastExpr 0x2a7b4c1d670 <col:28> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x2a7b4c18cb0 <col:28> 'long long' 6337288834372384886
|     | | |-IntegerLiteral 0x2a7b4c18cd8 <col:48> 'unsigned long long' 14039351322695960199
|     | | `-IntegerLiteral 0x2a7b4c18d00 <line:1595:8> 'unsigned long long' 10814849148613192378
|     | |-InitListExpr 0x2a7b4c1d698 <line:1596:7, line:1597:26> 'const smallfelem':'u64 const[4]'
|     | | |-ImplicitCastExpr 0x2a7b4c1d6f8 <line:1596:8> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x2a7b4c18d88 <col:8> 'long long' 5303406157379959390
|     | | |-ImplicitCastExpr 0x2a7b4c1d710 <col:28> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x2a7b4c18db0 <col:28> 'long long' 7614207622125570852
|     | | |-ImplicitCastExpr 0x2a7b4c1d728 <col:48> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x2a7b4c18dd8 <col:48> 'long long' 3238635979046982428
|     | | `-ImplicitCastExpr 0x2a7b4c1d740 <line:1597:8> 'u64':'unsigned long long' <IntegralCast>
|     | |   `-IntegerLiteral 0x2a7b4c18e00 <col:8> 'long long' 8848341461748899396
|     | `-InitListExpr 0x2a7b4c1d768 <line:1598:7, col:18> 'const smallfelem':'u64 const[4]'
|     |   |-ImplicitCastExpr 0x2a7b4c1d7c8 <col:8> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x2a7b4c18e88 <col:8> 'int' 1
|     |   |-ImplicitCastExpr 0x2a7b4c1d7e0 <col:11> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x2a7b4c18eb0 <col:11> 'int' 0
|     |   |-ImplicitCastExpr 0x2a7b4c1d7f8 <col:14> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x2a7b4c18ed8 <col:14> 'int' 0
|     |   `-ImplicitCastExpr 0x2a7b4c1d810 <col:17> 'u64':'unsigned long long' <IntegralCast>
|     |     `-IntegerLiteral 0x2a7b4c18f00 <col:17> 'int' 0
|     |-InitListExpr 0x2a7b4c1d858 <line:1599:6, line:1603:19> 'const smallfelem [3]'
|     | |-InitListExpr 0x2a7b4c1d8c0 <line:1599:7, line:1600:26> 'const smallfelem':'u64 const[4]'
|     | | |-ImplicitCastExpr 0x2a7b4c1d920 <line:1599:8> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x2a7b4c18ff8 <col:8> 'long long' 2688230699866182848
|     | | |-IntegerLiteral 0x2a7b4c19020 <col:28> 'unsigned long long' 17689871680306571355
|     | | |-IntegerLiteral 0x2a7b4c19048 <col:48> 'unsigned long long' 11965369384869145322
|     | | `-ImplicitCastExpr 0x2a7b4c1d938 <line:1600:8> 'u64':'unsigned long long' <IntegralCast>
|     | |   `-IntegerLiteral 0x2a7b4c19070 <col:8> 'long long' 2660390208594493275
|     | |-InitListExpr 0x2a7b4c1d960 <line:1601:7, line:1602:26> 'const smallfelem':'u64 const[4]'
|     | | |-IntegerLiteral 0x2a7b4c190f8 <line:1601:8> 'unsigned long long' 16419645726685552106
|     | | |-IntegerLiteral 0x2a7b4c19120 <col:28> 'unsigned long long' 18370063315756542799
|     | | |-ImplicitCastExpr 0x2a7b4c1d9c0 <col:48> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x2a7b4c19148 <col:48> 'long long' 8372514931683904589
|     | | `-ImplicitCastExpr 0x2a7b4c1d9d8 <line:1602:8> 'u64':'unsigned long long' <IntegralCast>
|     | |   `-IntegerLiteral 0x2a7b4c19170 <col:8> 'long long' 7636013446400604620
|     | `-InitListExpr 0x2a7b4c1da00 <line:1603:7, col:18> 'const smallfelem':'u64 const[4]'
|     |   |-ImplicitCastExpr 0x2a7b4c1da60 <col:8> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x2a7b4c191f8 <col:8> 'int' 1
|     |   |-ImplicitCastExpr 0x2a7b4c1da78 <col:11> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x2a7b4c19220 <col:11> 'int' 0
|     |   |-ImplicitCastExpr 0x2a7b4c1da90 <col:14> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x2a7b4c19248 <col:14> 'int' 0
|     |   `-ImplicitCastExpr 0x2a7b4c1daa8 <col:17> 'u64':'unsigned long long' <IntegralCast>
|     |     `-IntegerLiteral 0x2a7b4c19270 <col:17> 'int' 0
|     |-InitListExpr 0x2a7b4c1daf0 <line:1604:6, line:1608:19> 'const smallfelem [3]'
|     | |-InitListExpr 0x2a7b4c1db58 <line:1604:7, line:1605:26> 'const smallfelem':'u64 const[4]'
|     | | |-IntegerLiteral 0x2a7b4c19350 <line:1604:8> 'unsigned long long' 17213966368603666101
|     | | |-ImplicitCastExpr 0x2a7b4c1dbb8 <col:28> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x2a7b4c19378 <col:28> 'long long' 9137858211030508120
|     | | |-IntegerLiteral 0x2a7b4c193a0 <col:48> 'unsigned long long' 12980167869281043732
|     | | `-IntegerLiteral 0x2a7b4c193c8 <line:1605:8> 'unsigned long long' 16510007652016890119
|     | |-InitListExpr 0x2a7b4c1dbe0 <line:1606:7, line:1607:26> 'const smallfelem':'u64 const[4]'
|     | | |-IntegerLiteral 0x2a7b4c19450 <line:1606:8> 'unsigned long long' 11699170337035859005
|     | | |-IntegerLiteral 0x2a7b4c19478 <col:28> 'unsigned long long' 10135670842130700366
|     | | |-IntegerLiteral 0x2a7b4c194a0 <col:48> 'unsigned long long' 11974957831620041222
|     | | `-ImplicitCastExpr 0x2a7b4c1dc40 <line:1607:8> 'u64':'unsigned long long' <IntegralCast>
|     | |   `-IntegerLiteral 0x2a7b4c194c8 <col:8> 'long long' 2031292942051382151
|     | `-InitListExpr 0x2a7b4c1dc68 <line:1608:7, col:18> 'const smallfelem':'u64 const[4]'
|     |   |-ImplicitCastExpr 0x2a7b4c1dcc8 <col:8> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x2a7b4c19550 <col:8> 'int' 1
|     |   |-ImplicitCastExpr 0x2a7b4c1dce0 <col:11> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x2a7b4c19578 <col:11> 'int' 0
|     |   |-ImplicitCastExpr 0x2a7b4c1dcf8 <col:14> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x2a7b4c195a0 <col:14> 'int' 0
|     |   `-ImplicitCastExpr 0x2a7b4c1dd10 <col:17> 'u64':'unsigned long long' <IntegralCast>
|     |     `-IntegerLiteral 0x2a7b4c195c8 <col:17> 'int' 0
|     |-InitListExpr 0x2a7b4c1dd58 <line:1609:6, line:1613:19> 'const smallfelem [3]'
|     | |-InitListExpr 0x2a7b4c1ddc0 <line:1609:7, line:1610:26> 'const smallfelem':'u64 const[4]'
|     | | |-IntegerLiteral 0x2a7b4c196a8 <line:1609:8> 'unsigned long long' 10562590303857394777
|     | | |-IntegerLiteral 0x2a7b4c196d0 <col:28> 'unsigned long long' 12682497754009880974
|     | | |-IntegerLiteral 0x2a7b4c196f8 <col:48> 'unsigned long long' 14196638462869837864
|     | | `-ImplicitCastExpr 0x2a7b4c1de20 <line:1610:8> 'u64':'unsigned long long' <IntegralCast>
|     | |   `-IntegerLiteral 0x2a7b4c19720 <col:8> 'long long' 2357770240294970627
|     | |-InitListExpr 0x2a7b4c1de48 <line:1611:7, line:1612:26> 'const smallfelem':'u64 const[4]'
|     | | |-ImplicitCastExpr 0x2a7b4c1dea8 <line:1611:8> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x2a7b4c197a8 <col:8> 'long long' 3486656228478141047
|     | | |-ImplicitCastExpr 0x2a7b4c1dec0 <col:28> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x2a7b4c197d0 <col:28> 'long long' 2005572102683722461
|     | | |-ImplicitCastExpr 0x2a7b4c1ded8 <col:48> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x2a7b4c197f8 <col:48> 'long long' 941725040706691140
|     | | `-IntegerLiteral 0x2a7b4c19820 <line:1612:8> 'unsigned long long' 17710117778563233470
|     | `-InitListExpr 0x2a7b4c1df00 <line:1613:7, col:18> 'const smallfelem':'u64 const[4]'
|     |   |-ImplicitCastExpr 0x2a7b4c1df60 <col:8> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x2a7b4c198a8 <col:8> 'int' 1
|     |   |-ImplicitCastExpr 0x2a7b4c1df78 <col:11> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x2a7b4c198d0 <col:11> 'int' 0
|     |   |-ImplicitCastExpr 0x2a7b4c1df90 <col:14> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x2a7b4c198f8 <col:14> 'int' 0
|     |   `-ImplicitCastExpr 0x2a7b4c1dfa8 <col:17> 'u64':'unsigned long long' <IntegralCast>
|     |     `-IntegerLiteral 0x2a7b4c19920 <col:17> 'int' 0
|     |-InitListExpr 0x2a7b4c1dff0 <line:1614:6, line:1618:19> 'const smallfelem [3]'
|     | |-InitListExpr 0x2a7b4c1e058 <line:1614:7, line:1615:26> 'const smallfelem':'u64 const[4]'
|     | | |-IntegerLiteral 0x2a7b4c19a00 <line:1614:8> 'unsigned long long' 10129807730841853457
|     | | |-ImplicitCastExpr 0x2a7b4c1e0b8 <col:28> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x2a7b4c19a28 <col:28> 'long long' 4068663205997555039
|     | | |-IntegerLiteral 0x2a7b4c19a50 <col:48> 'unsigned long long' 11841304802401167958
|     | | `-ImplicitCastExpr 0x2a7b4c1e0d0 <line:1615:8> 'u64':'unsigned long long' <IntegralCast>
|     | |   `-IntegerLiteral 0x2a7b4c19a78 <col:8> 'long long' 2222475534487523513
|     | |-InitListExpr 0x2a7b4c1e0f8 <line:1616:7, line:1617:26> 'const smallfelem':'u64 const[4]'
|     | | |-IntegerLiteral 0x2a7b4c19b00 <line:1616:8> 'unsigned long long' 11601582869891561609
|     | | |-ImplicitCastExpr 0x2a7b4c1e158 <col:28> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x2a7b4c19b28 <col:28> 'long long' 424693911077573444
|     | | |-ImplicitCastExpr 0x2a7b4c1e170 <col:48> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x2a7b4c19b50 <col:48> 'long long' 5959705901008562724
|     | | `-ImplicitCastExpr 0x2a7b4c1e188 <line:1617:8> 'u64':'unsigned long long' <IntegralCast>
|     | |   `-IntegerLiteral 0x2a7b4c19b78 <col:8> 'long long' 4191448208365790586
|     | `-InitListExpr 0x2a7b4c1e1b0 <line:1618:7, col:18> 'const smallfelem':'u64 const[4]'
|     |   |-ImplicitCastExpr 0x2a7b4c1e210 <col:8> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x2a7b4c19c00 <col:8> 'int' 1
|     |   |-ImplicitCastExpr 0x2a7b4c1e228 <col:11> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x2a7b4c19c28 <col:11> 'int' 0
|     |   |-ImplicitCastExpr 0x2a7b4c1e240 <col:14> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x2a7b4c19c50 <col:14> 'int' 0
|     |   `-ImplicitCastExpr 0x2a7b4c1e258 <col:17> 'u64':'unsigned long long' <IntegralCast>
|     |     `-IntegerLiteral 0x2a7b4c19c78 <col:17> 'int' 0
|     `-InitListExpr 0x2a7b4c1e2a0 <line:1619:6, line:1623:19> 'const smallfelem [3]'
|       |-InitListExpr 0x2a7b4c1e308 <line:1619:7, line:1620:26> 'const smallfelem':'u64 const[4]'
|       | |-IntegerLiteral 0x2a7b4c19d58 <line:1619:8> 'unsigned long long' 17442373942447506493
|       | |-IntegerLiteral 0x2a7b4c19d80 <col:28> 'unsigned long long' 17523545791397714530
|       | |-IntegerLiteral 0x2a7b4c19da8 <col:48> 'unsigned long long' 18193736125741632571
|       | `-ImplicitCastExpr 0x2a7b4c1e368 <line:1620:8> 'u64':'unsigned long long' <IntegralCast>
|       |   `-IntegerLiteral 0x2a7b4c19dd0 <col:8> 'long long' 1584956206744459766
|       |-InitListExpr 0x2a7b4c1e390 <line:1621:7, line:1622:26> 'const smallfelem':'u64 const[4]'
|       | |-ImplicitCastExpr 0x2a7b4c1e3f0 <line:1621:8> 'u64':'unsigned long long' <IntegralCast>
|       | | `-IntegerLiteral 0x2a7b4c19e58 <col:8> 'long long' 5773195294502653146
|       | |-ImplicitCastExpr 0x2a7b4c1e408 <col:28> 'u64':'unsigned long long' <IntegralCast>
|       | | `-IntegerLiteral 0x2a7b4c19e80 <col:28> 'long long' 4751157856429321220
|       | |-ImplicitCastExpr 0x2a7b4c1e420 <col:48> 'u64':'unsigned long long' <IntegralCast>
|       | | `-IntegerLiteral 0x2a7b4c19ea8 <col:48> 'long long' 6160255002369724667
|       | `-ImplicitCastExpr 0x2a7b4c1e438 <line:1622:8> 'u64':'unsigned long long' <IntegralCast>
|       |   `-IntegerLiteral 0x2a7b4c19ed0 <col:8> 'long long' 5383409808306421633
|       `-InitListExpr 0x2a7b4c1e460 <line:1623:7, col:18> 'const smallfelem':'u64 const[4]'
|         |-ImplicitCastExpr 0x2a7b4c1e4c0 <col:8> 'u64':'unsigned long long' <IntegralCast>
|         | `-IntegerLiteral 0x2a7b4c19f58 <col:8> 'int' 1
|         |-ImplicitCastExpr 0x2a7b4c1e4d8 <col:11> 'u64':'unsigned long long' <IntegralCast>
|         | `-IntegerLiteral 0x2a7b4c19f80 <col:11> 'int' 0
|         |-ImplicitCastExpr 0x2a7b4c1e4f0 <col:14> 'u64':'unsigned long long' <IntegralCast>
|         | `-IntegerLiteral 0x2a7b4c19fa8 <col:14> 'int' 0
|         `-ImplicitCastExpr 0x2a7b4c1e508 <col:17> 'u64':'unsigned long long' <IntegralCast>
|           `-IntegerLiteral 0x2a7b4c19fd0 <col:17> 'int' 0
|-FunctionDecl 0x2a7b4c1eaa8 <line:1630:1, line:1649:1> line:1630:13 used select_point 'void (const u64, unsigned int, const smallfelem (*)[3], smallfelem *)' static
| |-ParmVarDecl 0x2a7b4c1e530 <col:26, col:36> col:36 used idx 'const u64':'const unsigned long long'
| |-ParmVarDecl 0x2a7b4c1e5b0 <col:41, col:54> col:54 used size 'unsigned int'
| |-ParmVarDecl 0x2a7b4c1e760 <line:1631:26, col:57> col:43 used pre_comp 'const smallfelem (*)[3]':'const smallfelem (*)[3]'
| |-ParmVarDecl 0x2a7b4c1e900 <col:60, col:76> col:71 used out 'smallfelem *':'smallfelem *'
| `-CompoundStmt 0x2a7b4c1fd38 <line:1632:1, line:1649:1>
|   |-DeclStmt 0x2a7b4c1ec98 <line:1633:5, col:18>
|   | |-VarDecl 0x2a7b4c1eb98 <col:5, col:14> col:14 used i 'unsigned int'
|   | `-VarDecl 0x2a7b4c1ec18 <col:5, col:17> col:17 used j 'unsigned int'
|   |-DeclStmt 0x2a7b4c1ee20 <line:1634:5, col:31>
|   | `-VarDecl 0x2a7b4c1ecc0 <col:5, col:30> col:10 used outlimbs 'u64 *' cinit
|   |   `-UnaryOperator 0x2a7b4c1ee08 <col:21, col:30> 'u64 *' prefix '&' cannot overflow
|   |     `-ArraySubscriptExpr 0x2a7b4c1ede8 <col:22, col:30> 'u64':'unsigned long long' lvalue
|   |       |-ImplicitCastExpr 0x2a7b4c1edd0 <col:22, col:27> 'u64 *' <ArrayToPointerDecay>
|   |       | `-ArraySubscriptExpr 0x2a7b4c1ed88 <col:22, col:27> 'smallfelem':'u64 [4]' lvalue
|   |       |   |-ImplicitCastExpr 0x2a7b4c1ed70 <col:22> 'smallfelem *':'smallfelem *' <LValueToRValue>
|   |       |   | `-DeclRefExpr 0x2a7b4c1ed28 <col:22> 'smallfelem *':'smallfelem *' lvalue ParmVar 0x2a7b4c1e900 'out' 'smallfelem *':'smallfelem *'
|   |       |   `-IntegerLiteral 0x2a7b4c1ed48 <col:26> 'int' 0
|   |       `-IntegerLiteral 0x2a7b4c1eda8 <col:29> 'int' 0
|   |-CallExpr 0x2a7b4c1efe0 <line:1636:5, col:36> 'void *'
|   | |-ImplicitCastExpr 0x2a7b4c1efc8 <col:5> 'void *(*)(void *, int, unsigned long long)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4c1ee38 <col:5> 'void *(void *, int, unsigned long long)' Function 0x2a7b49c0150 'memset' 'void *(void *, int, unsigned long long)'
|   | |-ImplicitCastExpr 0x2a7b4c1f030 <col:12> 'void *' <BitCast>
|   | | `-ImplicitCastExpr 0x2a7b4c1f018 <col:12> 'smallfelem *':'smallfelem *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x2a7b4c1ee58 <col:12> 'smallfelem *':'smallfelem *' lvalue ParmVar 0x2a7b4c1e900 'out' 'smallfelem *':'smallfelem *'
|   | |-IntegerLiteral 0x2a7b4c1ee78 <col:17> 'int' 0
|   | `-BinaryOperator 0x2a7b4c1ef70 <col:20, col:35> 'unsigned long long' '*'
|   |   |-UnaryExprOrTypeTraitExpr 0x2a7b4c1ef10 <col:20, col:31> 'unsigned long long' sizeof
|   |   | `-ParenExpr 0x2a7b4c1eef0 <col:26, col:31> 'smallfelem':'u64 [4]' lvalue
|   |   |   `-UnaryOperator 0x2a7b4c1eed8 <col:27, col:28> 'smallfelem':'u64 [4]' lvalue prefix '*' cannot overflow
|   |   |     `-ImplicitCastExpr 0x2a7b4c1eec0 <col:28> 'smallfelem *':'smallfelem *' <LValueToRValue>
|   |   |       `-DeclRefExpr 0x2a7b4c1eea0 <col:28> 'smallfelem *':'smallfelem *' lvalue ParmVar 0x2a7b4c1e900 'out' 'smallfelem *':'smallfelem *' non_odr_use_unevaluated
|   |   `-ImplicitCastExpr 0x2a7b4c1ef58 <col:35> 'unsigned long long' <IntegralCast>
|   |     `-IntegerLiteral 0x2a7b4c1ef30 <col:35> 'int' 3
|   `-ForStmt 0x2a7b4c1fd00 <line:1638:5, line:1648:5>
|     |-BinaryOperator 0x2a7b4c1f0c0 <line:1638:10, col:14> 'unsigned int' '='
|     | |-DeclRefExpr 0x2a7b4c1f048 <col:10> 'unsigned int' lvalue Var 0x2a7b4c1eb98 'i' 'unsigned int'
|     | `-ImplicitCastExpr 0x2a7b4c1f0a8 <col:14> 'unsigned int' <IntegralCast>
|     |   `-IntegerLiteral 0x2a7b4c1f080 <col:14> 'int' 0
|     |-<<<NULL>>>
|     |-BinaryOperator 0x2a7b4c1f150 <col:17, col:21> 'int' '<'
|     | |-ImplicitCastExpr 0x2a7b4c1f120 <col:17> 'unsigned int' <LValueToRValue>
|     | | `-DeclRefExpr 0x2a7b4c1f0e0 <col:17> 'unsigned int' lvalue Var 0x2a7b4c1eb98 'i' 'unsigned int'
|     | `-ImplicitCastExpr 0x2a7b4c1f138 <col:21> 'unsigned int' <LValueToRValue>
|     |   `-DeclRefExpr 0x2a7b4c1f100 <col:21> 'unsigned int' lvalue ParmVar 0x2a7b4c1e5b0 'size' 'unsigned int'
|     |-UnaryOperator 0x2a7b4c1f190 <col:27, col:28> 'unsigned int' postfix '++'
|     | `-DeclRefExpr 0x2a7b4c1f170 <col:27> 'unsigned int' lvalue Var 0x2a7b4c1eb98 'i' 'unsigned int'
|     `-CompoundStmt 0x2a7b4c1fcb0 <col:32, line:1648:5>
|       |-DeclStmt 0x2a7b4c1f438 <line:1639:9, col:55>
|       | `-VarDecl 0x2a7b4c1f1b8 <col:9, col:54> col:20 used inlimbs 'const u64 *' cinit
|       |   `-ImplicitCastExpr 0x2a7b4c1f420 <col:30, col:54> 'const u64 *' <NoOp>
|       |     `-CStyleCastExpr 0x2a7b4c1f3f8 <col:30, col:54> 'u64 *' <NoOp>
|       |       `-UnaryOperator 0x2a7b4c1f3d0 <col:37, col:54> 'const u64 *' prefix '&' cannot overflow
|       |         `-ArraySubscriptExpr 0x2a7b4c1f3b0 <col:38, col:54> 'const u64':'const unsigned long long' lvalue
|       |           |-ImplicitCastExpr 0x2a7b4c1f398 <col:38, col:51> 'const u64 *' <ArrayToPointerDecay>
|       |           | `-ArraySubscriptExpr 0x2a7b4c1f350 <col:38, col:51> 'const smallfelem':'u64 const[4]' lvalue
|       |           |   |-ImplicitCastExpr 0x2a7b4c1f338 <col:38, col:48> 'const smallfelem *' <ArrayToPointerDecay>
|       |           |   | `-ArraySubscriptExpr 0x2a7b4c1f290 <col:38, col:48> 'const smallfelem [3]' lvalue
|       |           |   |   |-ImplicitCastExpr 0x2a7b4c1f260 <col:38> 'const smallfelem (*)[3]':'const smallfelem (*)[3]' <LValueToRValue>
|       |           |   |   | `-DeclRefExpr 0x2a7b4c1f220 <col:38> 'const smallfelem (*)[3]':'const smallfelem (*)[3]' lvalue ParmVar 0x2a7b4c1e760 'pre_comp' 'const smallfelem (*)[3]':'const smallfelem (*)[3]'
|       |           |   |   `-ImplicitCastExpr 0x2a7b4c1f278 <col:47> 'unsigned int' <LValueToRValue>
|       |           |   |     `-DeclRefExpr 0x2a7b4c1f240 <col:47> 'unsigned int' lvalue Var 0x2a7b4c1eb98 'i' 'unsigned int'
|       |           |   `-IntegerLiteral 0x2a7b4c1f2b0 <col:50> 'int' 0
|       |           `-IntegerLiteral 0x2a7b4c1f370 <col:53> 'int' 0
|       |-DeclStmt 0x2a7b4c1f570 <line:1640:9, col:27>
|       | `-VarDecl 0x2a7b4c1f460 <col:9, col:24> col:13 used mask 'u64':'unsigned long long' cinit
|       |   `-BinaryOperator 0x2a7b4c1f550 <col:20, col:24> 'unsigned long long' '^'
|       |     |-ImplicitCastExpr 0x2a7b4c1f538 <col:20> 'unsigned long long' <IntegralCast>
|       |     | `-ImplicitCastExpr 0x2a7b4c1f508 <col:20> 'unsigned int' <LValueToRValue>
|       |     |   `-DeclRefExpr 0x2a7b4c1f4c8 <col:20> 'unsigned int' lvalue Var 0x2a7b4c1eb98 'i' 'unsigned int'
|       |     `-ImplicitCastExpr 0x2a7b4c1f520 <col:24> 'u64':'unsigned long long' <LValueToRValue>
|       |       `-DeclRefExpr 0x2a7b4c1f4e8 <col:24> 'const u64':'const unsigned long long' lvalue ParmVar 0x2a7b4c1e530 'idx' 'const u64':'const unsigned long long'
|       |-CompoundAssignOperator 0x2a7b4c1f640 <line:1641:9, col:25> 'u64':'unsigned long long' '|=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|       | |-DeclRefExpr 0x2a7b4c1f588 <col:9> 'u64':'unsigned long long' lvalue Var 0x2a7b4c1f460 'mask' 'u64':'unsigned long long'
|       | `-BinaryOperator 0x2a7b4c1f620 <col:17, col:25> 'u64':'unsigned long long' '>>'
|       |   |-ImplicitCastExpr 0x2a7b4c1f608 <col:17> 'u64':'unsigned long long' <LValueToRValue>
|       |   | `-DeclRefExpr 0x2a7b4c1f5c0 <col:17> 'u64':'unsigned long long' lvalue Var 0x2a7b4c1f460 'mask' 'u64':'unsigned long long'
|       |   `-IntegerLiteral 0x2a7b4c1f5e0 <col:25> 'int' 4
|       |-CompoundAssignOperator 0x2a7b4c1f710 <line:1642:9, col:25> 'u64':'unsigned long long' '|=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|       | |-DeclRefExpr 0x2a7b4c1f670 <col:9> 'u64':'unsigned long long' lvalue Var 0x2a7b4c1f460 'mask' 'u64':'unsigned long long'
|       | `-BinaryOperator 0x2a7b4c1f6f0 <col:17, col:25> 'u64':'unsigned long long' '>>'
|       |   |-ImplicitCastExpr 0x2a7b4c1f6d8 <col:17> 'u64':'unsigned long long' <LValueToRValue>
|       |   | `-DeclRefExpr 0x2a7b4c1f690 <col:17> 'u64':'unsigned long long' lvalue Var 0x2a7b4c1f460 'mask' 'u64':'unsigned long long'
|       |   `-IntegerLiteral 0x2a7b4c1f6b0 <col:25> 'int' 2
|       |-CompoundAssignOperator 0x2a7b4c1f7e0 <line:1643:9, col:25> 'u64':'unsigned long long' '|=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|       | |-DeclRefExpr 0x2a7b4c1f740 <col:9> 'u64':'unsigned long long' lvalue Var 0x2a7b4c1f460 'mask' 'u64':'unsigned long long'
|       | `-BinaryOperator 0x2a7b4c1f7c0 <col:17, col:25> 'u64':'unsigned long long' '>>'
|       |   |-ImplicitCastExpr 0x2a7b4c1f7a8 <col:17> 'u64':'unsigned long long' <LValueToRValue>
|       |   | `-DeclRefExpr 0x2a7b4c1f760 <col:17> 'u64':'unsigned long long' lvalue Var 0x2a7b4c1f460 'mask' 'u64':'unsigned long long'
|       |   `-IntegerLiteral 0x2a7b4c1f780 <col:25> 'int' 1
|       |-CompoundAssignOperator 0x2a7b4c1f870 <line:1644:9, col:17> 'u64':'unsigned long long' '&=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|       | |-DeclRefExpr 0x2a7b4c1f810 <col:9> 'u64':'unsigned long long' lvalue Var 0x2a7b4c1f460 'mask' 'u64':'unsigned long long'
|       | `-ImplicitCastExpr 0x2a7b4c1f858 <col:17> 'unsigned long long' <IntegralCast>
|       |   `-IntegerLiteral 0x2a7b4c1f830 <col:17> 'int' 1
|       |-UnaryOperator 0x2a7b4c1f8c0 <line:1645:9, col:13> 'u64':'unsigned long long' postfix '--'
|       | `-DeclRefExpr 0x2a7b4c1f8a0 <col:9> 'u64':'unsigned long long' lvalue Var 0x2a7b4c1f460 'mask' 'u64':'unsigned long long'
|       `-ForStmt 0x2a7b4c1fc78 <line:1646:9, line:1647:41>
|         |-BinaryOperator 0x2a7b4c1f950 <line:1646:14, col:18> 'unsigned int' '='
|         | |-DeclRefExpr 0x2a7b4c1f8d8 <col:14> 'unsigned int' lvalue Var 0x2a7b4c1ec18 'j' 'unsigned int'
|         | `-ImplicitCastExpr 0x2a7b4c1f938 <col:18> 'unsigned int' <IntegralCast>
|         |   `-IntegerLiteral 0x2a7b4c1f910 <col:18> 'int' 0
|         |-<<<NULL>>>
|         |-BinaryOperator 0x2a7b4c1fa30 <col:21, col:34> 'int' '<'
|         | |-ImplicitCastExpr 0x2a7b4c1fa00 <col:21> 'unsigned int' <LValueToRValue>
|         | | `-DeclRefExpr 0x2a7b4c1f970 <col:21> 'unsigned int' lvalue Var 0x2a7b4c1ec18 'j' 'unsigned int'
|         | `-ImplicitCastExpr 0x2a7b4c1fa18 <line:113:17, line:1646:34> 'unsigned int' <IntegralCast>
|         |   `-BinaryOperator 0x2a7b4c1f9e0 <line:113:17, line:1646:34> 'int' '*'
|         |     |-IntegerLiteral 0x2a7b4c1f990 <line:113:17> 'int' 4
|         |     `-IntegerLiteral 0x2a7b4c1f9b8 <line:1646:34> 'int' 3
|         |-UnaryOperator 0x2a7b4c1fa70 <col:37, col:38> 'unsigned int' postfix '++'
|         | `-DeclRefExpr 0x2a7b4c1fa50 <col:37> 'unsigned int' lvalue Var 0x2a7b4c1ec18 'j' 'unsigned int'
|         `-CompoundAssignOperator 0x2a7b4c1fc48 <line:1647:13, col:41> 'u64':'unsigned long long' '|=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|           |-ArraySubscriptExpr 0x2a7b4c1fb10 <col:13, col:23> 'u64':'unsigned long long' lvalue
|           | |-ImplicitCastExpr 0x2a7b4c1fae0 <col:13> 'u64 *' <LValueToRValue>
|           | | `-DeclRefExpr 0x2a7b4c1fa88 <col:13> 'u64 *' lvalue Var 0x2a7b4c1ecc0 'outlimbs' 'u64 *'
|           | `-ImplicitCastExpr 0x2a7b4c1faf8 <col:22> 'unsigned int' <LValueToRValue>
|           |   `-DeclRefExpr 0x2a7b4c1fac0 <col:22> 'unsigned int' lvalue Var 0x2a7b4c1ec18 'j' 'unsigned int'
|           `-BinaryOperator 0x2a7b4c1fc28 <col:28, col:41> 'unsigned long long' '&'
|             |-ImplicitCastExpr 0x2a7b4c1fbf8 <col:28, col:37> 'u64':'unsigned long long' <LValueToRValue>
|             | `-ArraySubscriptExpr 0x2a7b4c1fbb8 <col:28, col:37> 'const u64':'const unsigned long long' lvalue
|             |   |-ImplicitCastExpr 0x2a7b4c1fb88 <col:28> 'const u64 *' <LValueToRValue>
|             |   | `-DeclRefExpr 0x2a7b4c1fb30 <col:28> 'const u64 *' lvalue Var 0x2a7b4c1f1b8 'inlimbs' 'const u64 *'
|             |   `-ImplicitCastExpr 0x2a7b4c1fba0 <col:36> 'unsigned int' <LValueToRValue>
|             |     `-DeclRefExpr 0x2a7b4c1fb68 <col:36> 'unsigned int' lvalue Var 0x2a7b4c1ec18 'j' 'unsigned int'
|             `-ImplicitCastExpr 0x2a7b4c1fc10 <col:41> 'u64':'unsigned long long' <LValueToRValue>
|               `-DeclRefExpr 0x2a7b4c1fbd8 <col:41> 'u64':'unsigned long long' lvalue Var 0x2a7b4c1f460 'mask' 'u64':'unsigned long long'
|-FunctionDecl 0x2a7b4c1ff78 <line:1652:1, line:1657:1> line:1652:13 used get_bit 'char (const u8 *, int)' static
| |-ParmVarDecl 0x2a7b4c1fdb0 <col:21, col:43> col:43 used in 'const u8 *':'const u8 *'
| |-ParmVarDecl 0x2a7b4c1fe30 <col:47, col:51> col:51 used i 'int'
| `-CompoundStmt 0x2a7b4c20460 <line:1653:1, line:1657:1>
|   |-IfStmt 0x2a7b4c201f0 <line:1654:5, line:1655:16>
|   | |-BinaryOperator 0x2a7b4c20180 <line:1654:9, col:29> 'int' '||'
|   | | |-ParenExpr 0x2a7b4c200c0 <col:9, col:15> 'int'
|   | | | `-BinaryOperator 0x2a7b4c200a0 <col:10, col:14> 'int' '<'
|   | | |   |-ImplicitCastExpr 0x2a7b4c20088 <col:10> 'int' <LValueToRValue>
|   | | |   | `-DeclRefExpr 0x2a7b4c20040 <col:10> 'int' lvalue ParmVar 0x2a7b4c1fe30 'i' 'int'
|   | | |   `-IntegerLiteral 0x2a7b4c20060 <col:14> 'int' 0
|   | | `-ParenExpr 0x2a7b4c20160 <col:20, col:29> 'int'
|   | |   `-BinaryOperator 0x2a7b4c20140 <col:21, col:26> 'int' '>='
|   | |     |-ImplicitCastExpr 0x2a7b4c20128 <col:21> 'int' <LValueToRValue>
|   | |     | `-DeclRefExpr 0x2a7b4c200e0 <col:21> 'int' lvalue ParmVar 0x2a7b4c1fe30 'i' 'int'
|   | |     `-IntegerLiteral 0x2a7b4c20100 <col:26> 'int' 256
|   | `-ReturnStmt 0x2a7b4c201e0 <line:1655:9, col:16>
|   |   `-ImplicitCastExpr 0x2a7b4c201c8 <col:16> 'char' <IntegralCast>
|   |     `-IntegerLiteral 0x2a7b4c201a0 <col:16> 'int' 0
|   `-ReturnStmt 0x2a7b4c20450 <line:1656:5, col:38>
|     `-ImplicitCastExpr 0x2a7b4c20438 <col:12, col:38> 'char' <IntegralCast>
|       `-BinaryOperator 0x2a7b4c20418 <col:12, col:38> 'int' '&'
|         |-ParenExpr 0x2a7b4c203d0 <col:12, col:34> 'int'
|         | `-BinaryOperator 0x2a7b4c203b0 <col:13, col:33> 'int' '>>'
|         |   |-ImplicitCastExpr 0x2a7b4c20398 <col:13, col:22> 'int' <IntegralCast>
|         |   | `-ImplicitCastExpr 0x2a7b4c20380 <col:13, col:22> 'u8':'unsigned char' <LValueToRValue>
|         |   |   `-ArraySubscriptExpr 0x2a7b4c202c0 <col:13, col:22> 'const u8':'const unsigned char' lvalue
|         |   |     |-ImplicitCastExpr 0x2a7b4c202a8 <col:13> 'const u8 *':'const u8 *' <LValueToRValue>
|         |   |     | `-DeclRefExpr 0x2a7b4c20208 <col:13> 'const u8 *':'const u8 *' lvalue ParmVar 0x2a7b4c1fdb0 'in' 'const u8 *':'const u8 *'
|         |   |     `-BinaryOperator 0x2a7b4c20288 <col:16, col:21> 'int' '>>'
|         |   |       |-ImplicitCastExpr 0x2a7b4c20270 <col:16> 'int' <LValueToRValue>
|         |   |       | `-DeclRefExpr 0x2a7b4c20228 <col:16> 'int' lvalue ParmVar 0x2a7b4c1fe30 'i' 'int'
|         |   |       `-IntegerLiteral 0x2a7b4c20248 <col:21> 'int' 3
|         |   `-ParenExpr 0x2a7b4c20360 <col:27, col:33> 'int'
|         |     `-BinaryOperator 0x2a7b4c20340 <col:28, col:32> 'int' '&'
|         |       |-ImplicitCastExpr 0x2a7b4c20328 <col:28> 'int' <LValueToRValue>
|         |       | `-DeclRefExpr 0x2a7b4c202e0 <col:28> 'int' lvalue ParmVar 0x2a7b4c1fe30 'i' 'int'
|         |       `-IntegerLiteral 0x2a7b4c20300 <col:32> 'int' 7
|         `-IntegerLiteral 0x2a7b4c203f0 <col:38> 'int' 1
|-FunctionDecl 0x2a7b4c10f40 <line:1666:1, line:1764:1> line:1666:13 used batch_mul 'void (limb *, limb *, limb *, const felem_bytearray *, const unsigned int, const u8 *, const int, const smallfelem (*)[17][3], const smallfelem (*)[16][3])' static
| |-ParmVarDecl 0x2a7b4c20490 <col:23, col:29> col:29 used x_out 'limb *':'limb *'
| |-ParmVarDecl 0x2a7b4c20508 <col:36, col:42> col:42 used y_out 'limb *':'limb *'
| |-ParmVarDecl 0x2a7b4c20580 <col:49, col:55> col:55 used z_out 'limb *':'limb *'
| |-ParmVarDecl 0x2a7b4c20700 <line:1667:23, col:53> col:45 used scalars 'const felem_bytearray *':'const felem_bytearray *'
| |-ParmVarDecl 0x2a7b4c20780 <line:1668:23, col:38> col:38 used num_points 'const unsigned int'
| |-ParmVarDecl 0x2a7b4c207f8 <col:50, col:60> col:60 used g_scalar 'const u8 *'
| |-ParmVarDecl 0x2a7b4c20878 <line:1669:23, col:33> col:33 used mixed 'const int'
| |-ParmVarDecl 0x2a7b4c20b10 <col:40, col:73> col:57 used pre_comp 'const smallfelem (*)[17][3]':'const smallfelem (*)[17][3]'
| |-ParmVarDecl 0x2a7b4c20d10 <line:1670:23, col:59> col:40 used g_pre_comp 'const smallfelem (*)[16][3]':'const smallfelem (*)[16][3]'
| `-CompoundStmt 0x2a7b4c27470 <line:1671:1, line:1764:1>
|   |-DeclStmt 0x2a7b4c11158 <line:1672:5, col:16>
|   | |-VarDecl 0x2a7b4c11058 <col:5, col:9> col:9 used i 'int'
|   | `-VarDecl 0x2a7b4c110d8 <col:5, col:12> col:12 used skip 'int'
|   |-DeclStmt 0x2a7b4c113b8 <line:1673:5, col:47>
|   | |-VarDecl 0x2a7b4c11188 <col:5, col:14> col:14 used num 'unsigned int'
|   | `-VarDecl 0x2a7b4c11208 <col:5, col:46> col:19 used gen_mul 'unsigned int' cinit
|   |   `-ImplicitCastExpr 0x2a7b4c11388 <col:29, col:46> 'unsigned int' <IntegralCast>
|   |     `-ParenExpr 0x2a7b4c11368 <col:29, col:46> 'int'
|   |       `-BinaryOperator 0x2a7b4c11348 <col:30, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27> 'int' '!='
|   |         |-ImplicitCastExpr 0x2a7b4c11318 <.//openssl//file_jk/before\crypto\ec\ecp_nistp256.c:1673:30> 'const u8 *' <LValueToRValue>
|   |         | `-DeclRefExpr 0x2a7b4c11270 <col:30> 'const u8 *' lvalue ParmVar 0x2a7b4c207f8 'g_scalar' 'const u8 *'
|   |         `-ImplicitCastExpr 0x2a7b4c11330 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'const u8 *' <BitCast>
|   |           `-ParenExpr 0x2a7b4c112f8 <col:17, col:27> 'void *'
|   |             `-CStyleCastExpr 0x2a7b4c112d0 <col:18, col:26> 'void *' <NullToPointer>
|   |               `-IntegerLiteral 0x2a7b4c11290 <col:26> 'int' 0
|   |-DeclStmt 0x2a7b4c115a0 <.//openssl//file_jk/before\crypto\ec\ecp_nistp256.c:1674:5, col:22>
|   | |-VarDecl 0x2a7b4c114a8 <col:5, col:15> col:11 used nq 'felem [3]'
|   | `-VarDecl 0x2a7b4c11520 <col:5, col:18> col:18 used ftmp 'felem':'limb [4]'
|   |-DeclStmt 0x2a7b4c11680 <line:1675:5, col:22>
|   | `-VarDecl 0x2a7b4c11618 <col:5, col:21> col:16 used tmp 'smallfelem [3]'
|   |-DeclStmt 0x2a7b4c11710 <line:1676:5, col:13>
|   | `-VarDecl 0x2a7b4c116a8 <col:5, col:9> col:9 used bits 'u64':'unsigned long long'
|   |-DeclStmt 0x2a7b4c11830 <line:1677:5, col:19>
|   | |-VarDecl 0x2a7b4c11738 <col:5, col:8> col:8 used sign 'u8':'unsigned char'
|   | `-VarDecl 0x2a7b4c117b0 <col:5, col:14> col:14 used digit 'u8':'unsigned char'
|   |-CallExpr 0x2a7b4c119b8 <line:1680:5, col:29> 'void *'
|   | |-ImplicitCastExpr 0x2a7b4c119a0 <col:5> 'void *(*)(void *, int, unsigned long long)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4c11848 <col:5> 'void *(void *, int, unsigned long long)' Function 0x2a7b49c0150 'memset' 'void *(void *, int, unsigned long long)'
|   | |-ImplicitCastExpr 0x2a7b4c11a08 <col:12> 'void *' <BitCast>
|   | | `-ImplicitCastExpr 0x2a7b4c119f0 <col:12> 'felem *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x2a7b4c11868 <col:12> 'felem [3]' lvalue Var 0x2a7b4c114a8 'nq' 'felem [3]'
|   | |-IntegerLiteral 0x2a7b4c118a0 <col:16> 'int' 0
|   | `-UnaryExprOrTypeTraitExpr 0x2a7b4c11908 <col:19, col:28> 'unsigned long long' sizeof
|   |   `-ParenExpr 0x2a7b4c118e8 <col:25, col:28> 'felem [3]' lvalue
|   |     `-DeclRefExpr 0x2a7b4c118c8 <col:26> 'felem [3]' lvalue Var 0x2a7b4c114a8 'nq' 'felem [3]' non_odr_use_unevaluated
|   |-BinaryOperator 0x2a7b4c11a80 <line:1687:5, col:12> 'int' '='
|   | |-DeclRefExpr 0x2a7b4c11a20 <col:5> 'int' lvalue Var 0x2a7b4c110d8 'skip' 'int'
|   | `-IntegerLiteral 0x2a7b4c11a58 <col:12> 'int' 1
|   |-ForStmt 0x2a7b4c27048 <line:1689:5, line:1760:5>
|   | |-BinaryOperator 0x2a7b4c11bb0 <line:1689:10, col:36> 'int' '='
|   | | |-DeclRefExpr 0x2a7b4c11aa0 <col:10> 'int' lvalue Var 0x2a7b4c11058 'i' 'int'
|   | | `-ParenExpr 0x2a7b4c11b90 <col:14, col:36> 'int'
|   | |   `-ConditionalOperator 0x2a7b4c11b60 <col:15, col:34> 'int'
|   | |     |-ImplicitCastExpr 0x2a7b4c11b48 <col:15> 'unsigned int' <LValueToRValue>
|   | |     | `-DeclRefExpr 0x2a7b4c11ad8 <col:15> 'const unsigned int' lvalue ParmVar 0x2a7b4c20780 'num_points' 'const unsigned int'
|   | |     |-IntegerLiteral 0x2a7b4c11af8 <col:28> 'int' 255
|   | |     `-IntegerLiteral 0x2a7b4c11b20 <col:34> 'int' 31
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x2a7b4c11c30 <col:39, col:44> 'int' '>='
|   | | |-ImplicitCastExpr 0x2a7b4c11c18 <col:39> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b4c11bd0 <col:39> 'int' lvalue Var 0x2a7b4c11058 'i' 'int'
|   | | `-IntegerLiteral 0x2a7b4c11bf0 <col:44> 'int' 0
|   | |-UnaryOperator 0x2a7b4c11c70 <col:47, col:49> 'int' prefix '--'
|   | | `-DeclRefExpr 0x2a7b4c11c50 <col:49> 'int' lvalue Var 0x2a7b4c11058 'i' 'int'
|   | `-CompoundStmt 0x2a7b4c27020 <col:52, line:1760:5>
|   |   |-IfStmt 0x2a7b4c12138 <line:1691:9, line:1692:66>
|   |   | |-UnaryOperator 0x2a7b4c11cc0 <line:1691:13, col:14> 'int' prefix '!' cannot overflow
|   |   | | `-ImplicitCastExpr 0x2a7b4c11ca8 <col:14> 'int' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x2a7b4c11c88 <col:14> 'int' lvalue Var 0x2a7b4c110d8 'skip' 'int'
|   |   | `-CallExpr 0x2a7b4c12010 <line:1692:13, col:66> 'void'
|   |   |   |-ImplicitCastExpr 0x2a7b4c11ff8 <col:13> 'void (*)(limb *, limb *, limb *, const limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   |   |   | `-DeclRefExpr 0x2a7b4c11cd8 <col:13> 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *)' Function 0x2a7b4afb7d8 'point_double' 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *)'
|   |   |   |-ImplicitCastExpr 0x2a7b4c12060 <col:26, col:30> 'limb *' <ArrayToPointerDecay>
|   |   |   | `-ArraySubscriptExpr 0x2a7b4c11d58 <col:26, col:30> 'felem':'limb [4]' lvalue
|   |   |   |   |-ImplicitCastExpr 0x2a7b4c11d40 <col:26> 'felem *' <ArrayToPointerDecay>
|   |   |   |   | `-DeclRefExpr 0x2a7b4c11cf8 <col:26> 'felem [3]' lvalue Var 0x2a7b4c114a8 'nq' 'felem [3]'
|   |   |   |   `-IntegerLiteral 0x2a7b4c11d18 <col:29> 'int' 0
|   |   |   |-ImplicitCastExpr 0x2a7b4c12078 <col:33, col:37> 'limb *' <ArrayToPointerDecay>
|   |   |   | `-ArraySubscriptExpr 0x2a7b4c11dd8 <col:33, col:37> 'felem':'limb [4]' lvalue
|   |   |   |   |-ImplicitCastExpr 0x2a7b4c11dc0 <col:33> 'felem *' <ArrayToPointerDecay>
|   |   |   |   | `-DeclRefExpr 0x2a7b4c11d78 <col:33> 'felem [3]' lvalue Var 0x2a7b4c114a8 'nq' 'felem [3]'
|   |   |   |   `-IntegerLiteral 0x2a7b4c11d98 <col:36> 'int' 1
|   |   |   |-ImplicitCastExpr 0x2a7b4c12090 <col:40, col:44> 'limb *' <ArrayToPointerDecay>
|   |   |   | `-ArraySubscriptExpr 0x2a7b4c11e58 <col:40, col:44> 'felem':'limb [4]' lvalue
|   |   |   |   |-ImplicitCastExpr 0x2a7b4c11e40 <col:40> 'felem *' <ArrayToPointerDecay>
|   |   |   |   | `-DeclRefExpr 0x2a7b4c11df8 <col:40> 'felem [3]' lvalue Var 0x2a7b4c114a8 'nq' 'felem [3]'
|   |   |   |   `-IntegerLiteral 0x2a7b4c11e18 <col:43> 'int' 2
|   |   |   |-ImplicitCastExpr 0x2a7b4c120c0 <col:47, col:51> 'const limb *':'const limb *' <NoOp>
|   |   |   | `-ImplicitCastExpr 0x2a7b4c120a8 <col:47, col:51> 'limb *' <ArrayToPointerDecay>
|   |   |   |   `-ArraySubscriptExpr 0x2a7b4c11ed8 <col:47, col:51> 'felem':'limb [4]' lvalue
|   |   |   |     |-ImplicitCastExpr 0x2a7b4c11ec0 <col:47> 'felem *' <ArrayToPointerDecay>
|   |   |   |     | `-DeclRefExpr 0x2a7b4c11e78 <col:47> 'felem [3]' lvalue Var 0x2a7b4c114a8 'nq' 'felem [3]'
|   |   |   |     `-IntegerLiteral 0x2a7b4c11e98 <col:50> 'int' 0
|   |   |   |-ImplicitCastExpr 0x2a7b4c120f0 <col:54, col:58> 'const limb *':'const limb *' <NoOp>
|   |   |   | `-ImplicitCastExpr 0x2a7b4c120d8 <col:54, col:58> 'limb *' <ArrayToPointerDecay>
|   |   |   |   `-ArraySubscriptExpr 0x2a7b4c11f58 <col:54, col:58> 'felem':'limb [4]' lvalue
|   |   |   |     |-ImplicitCastExpr 0x2a7b4c11f40 <col:54> 'felem *' <ArrayToPointerDecay>
|   |   |   |     | `-DeclRefExpr 0x2a7b4c11ef8 <col:54> 'felem [3]' lvalue Var 0x2a7b4c114a8 'nq' 'felem [3]'
|   |   |   |     `-IntegerLiteral 0x2a7b4c11f18 <col:57> 'int' 1
|   |   |   `-ImplicitCastExpr 0x2a7b4c12120 <col:61, col:65> 'const limb *':'const limb *' <NoOp>
|   |   |     `-ImplicitCastExpr 0x2a7b4c12108 <col:61, col:65> 'limb *' <ArrayToPointerDecay>
|   |   |       `-ArraySubscriptExpr 0x2a7b4c11fd8 <col:61, col:65> 'felem':'limb [4]' lvalue
|   |   |         |-ImplicitCastExpr 0x2a7b4c11fc0 <col:61> 'felem *' <ArrayToPointerDecay>
|   |   |         | `-DeclRefExpr 0x2a7b4c11f78 <col:61> 'felem [3]' lvalue Var 0x2a7b4c114a8 'nq' 'felem [3]'
|   |   |         `-IntegerLiteral 0x2a7b4c11f98 <col:64> 'int' 2
|   |   |-IfStmt 0x2a7b4c2a9d0 <line:1695:9, line:1725:9>
|   |   | |-BinaryOperator 0x2a7b4c12240 <line:1695:13, col:32> 'int' '&&'
|   |   | | |-ImplicitCastExpr 0x2a7b4c12228 <col:13> 'unsigned int' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x2a7b4c12150 <col:13> 'unsigned int' lvalue Var 0x2a7b4c11208 'gen_mul' 'unsigned int'
|   |   | | `-ParenExpr 0x2a7b4c12208 <col:24, col:32> 'int'
|   |   | |   `-BinaryOperator 0x2a7b4c121e8 <col:25, col:30> 'int' '<='
|   |   | |     |-ImplicitCastExpr 0x2a7b4c121d0 <col:25> 'int' <LValueToRValue>
|   |   | |     | `-DeclRefExpr 0x2a7b4c12188 <col:25> 'int' lvalue Var 0x2a7b4c11058 'i' 'int'
|   |   | |     `-IntegerLiteral 0x2a7b4c121a8 <col:30> 'int' 31
|   |   | `-CompoundStmt 0x2a7b4c2a960 <col:35, line:1725:9>
|   |   |   |-BinaryOperator 0x2a7b4c12490 <line:1697:13, col:50> 'u64':'unsigned long long' '='
|   |   |   | |-DeclRefExpr 0x2a7b4c12260 <col:13> 'u64':'unsigned long long' lvalue Var 0x2a7b4c116a8 'bits' 'u64':'unsigned long long'
|   |   |   | `-ImplicitCastExpr 0x2a7b4c12478 <col:20, col:50> 'u64':'unsigned long long' <IntegralCast>
|   |   |   |   `-BinaryOperator 0x2a7b4c12458 <col:20, col:50> 'int' '<<'
|   |   |   |     |-ImplicitCastExpr 0x2a7b4c12440 <col:20, col:45> 'int' <IntegralCast>
|   |   |   |     | `-CallExpr 0x2a7b4c123d0 <col:20, col:45> 'char'
|   |   |   |     |   |-ImplicitCastExpr 0x2a7b4c123b8 <col:20> 'char (*)(const u8 *, int)' <FunctionToPointerDecay>
|   |   |   |     |   | `-DeclRefExpr 0x2a7b4c12298 <col:20> 'char (const u8 *, int)' Function 0x2a7b4c1ff78 'get_bit' 'char (const u8 *, int)'
|   |   |   |     |   |-ImplicitCastExpr 0x2a7b4c12400 <col:28> 'const u8 *' <LValueToRValue>
|   |   |   |     |   | `-DeclRefExpr 0x2a7b4c122b8 <col:28> 'const u8 *' lvalue ParmVar 0x2a7b4c207f8 'g_scalar' 'const u8 *'
|   |   |   |     |   `-BinaryOperator 0x2a7b4c12338 <col:38, col:42> 'int' '+'
|   |   |   |     |     |-ImplicitCastExpr 0x2a7b4c12320 <col:38> 'int' <LValueToRValue>
|   |   |   |     |     | `-DeclRefExpr 0x2a7b4c122d8 <col:38> 'int' lvalue Var 0x2a7b4c11058 'i' 'int'
|   |   |   |     |     `-IntegerLiteral 0x2a7b4c122f8 <col:42> 'int' 224
|   |   |   |     `-IntegerLiteral 0x2a7b4c12418 <col:50> 'int' 3
|   |   |   |-CompoundAssignOperator 0x2a7b4c12668 <line:1698:13, col:51> 'u64':'unsigned long long' '|=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |   |   | |-DeclRefExpr 0x2a7b4c124b0 <col:13> 'u64':'unsigned long long' lvalue Var 0x2a7b4c116a8 'bits' 'u64':'unsigned long long'
|   |   |   | `-ImplicitCastExpr 0x2a7b4c12650 <col:21, col:51> 'unsigned long long' <IntegralCast>
|   |   |   |   `-BinaryOperator 0x2a7b4c12630 <col:21, col:51> 'int' '<<'
|   |   |   |     |-ImplicitCastExpr 0x2a7b4c12618 <col:21, col:46> 'int' <IntegralCast>
|   |   |   |     | `-CallExpr 0x2a7b4c125a8 <col:21, col:46> 'char'
|   |   |   |     |   |-ImplicitCastExpr 0x2a7b4c12590 <col:21> 'char (*)(const u8 *, int)' <FunctionToPointerDecay>
|   |   |   |     |   | `-DeclRefExpr 0x2a7b4c124d0 <col:21> 'char (const u8 *, int)' Function 0x2a7b4c1ff78 'get_bit' 'char (const u8 *, int)'
|   |   |   |     |   |-ImplicitCastExpr 0x2a7b4c125d8 <col:29> 'const u8 *' <LValueToRValue>
|   |   |   |     |   | `-DeclRefExpr 0x2a7b4c124f0 <col:29> 'const u8 *' lvalue ParmVar 0x2a7b4c207f8 'g_scalar' 'const u8 *'
|   |   |   |     |   `-BinaryOperator 0x2a7b4c12570 <col:39, col:43> 'int' '+'
|   |   |   |     |     |-ImplicitCastExpr 0x2a7b4c12558 <col:39> 'int' <LValueToRValue>
|   |   |   |     |     | `-DeclRefExpr 0x2a7b4c12510 <col:39> 'int' lvalue Var 0x2a7b4c11058 'i' 'int'
|   |   |   |     |     `-IntegerLiteral 0x2a7b4c12530 <col:43> 'int' 160
|   |   |   |     `-IntegerLiteral 0x2a7b4c125f0 <col:51> 'int' 2
|   |   |   |-CompoundAssignOperator 0x2a7b4c12850 <line:1699:13, col:50> 'u64':'unsigned long long' '|=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |   |   | |-DeclRefExpr 0x2a7b4c12698 <col:13> 'u64':'unsigned long long' lvalue Var 0x2a7b4c116a8 'bits' 'u64':'unsigned long long'
|   |   |   | `-ImplicitCastExpr 0x2a7b4c12838 <col:21, col:50> 'unsigned long long' <IntegralCast>
|   |   |   |   `-BinaryOperator 0x2a7b4c12818 <col:21, col:50> 'int' '<<'
|   |   |   |     |-ImplicitCastExpr 0x2a7b4c12800 <col:21, col:45> 'int' <IntegralCast>
|   |   |   |     | `-CallExpr 0x2a7b4c12790 <col:21, col:45> 'char'
|   |   |   |     |   |-ImplicitCastExpr 0x2a7b4c12778 <col:21> 'char (*)(const u8 *, int)' <FunctionToPointerDecay>
|   |   |   |     |   | `-DeclRefExpr 0x2a7b4c126b8 <col:21> 'char (const u8 *, int)' Function 0x2a7b4c1ff78 'get_bit' 'char (const u8 *, int)'
|   |   |   |     |   |-ImplicitCastExpr 0x2a7b4c127c0 <col:29> 'const u8 *' <LValueToRValue>
|   |   |   |     |   | `-DeclRefExpr 0x2a7b4c126d8 <col:29> 'const u8 *' lvalue ParmVar 0x2a7b4c207f8 'g_scalar' 'const u8 *'
|   |   |   |     |   `-BinaryOperator 0x2a7b4c12758 <col:39, col:43> 'int' '+'
|   |   |   |     |     |-ImplicitCastExpr 0x2a7b4c12740 <col:39> 'int' <LValueToRValue>
|   |   |   |     |     | `-DeclRefExpr 0x2a7b4c126f8 <col:39> 'int' lvalue Var 0x2a7b4c11058 'i' 'int'
|   |   |   |     |     `-IntegerLiteral 0x2a7b4c12718 <col:43> 'int' 96
|   |   |   |     `-IntegerLiteral 0x2a7b4c127d8 <col:50> 'int' 1
|   |   |   |-CompoundAssignOperator 0x2a7b4c129d8 <line:1700:13, col:45> 'u64':'unsigned long long' '|=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |   |   | |-DeclRefExpr 0x2a7b4c12880 <col:13> 'u64':'unsigned long long' lvalue Var 0x2a7b4c116a8 'bits' 'u64':'unsigned long long'
|   |   |   | `-ImplicitCastExpr 0x2a7b4c129c0 <col:21, col:45> 'unsigned long long' <IntegralCast>
|   |   |   |   `-CallExpr 0x2a7b4c12978 <col:21, col:45> 'char'
|   |   |   |     |-ImplicitCastExpr 0x2a7b4c12960 <col:21> 'char (*)(const u8 *, int)' <FunctionToPointerDecay>
|   |   |   |     | `-DeclRefExpr 0x2a7b4c128a0 <col:21> 'char (const u8 *, int)' Function 0x2a7b4c1ff78 'get_bit' 'char (const u8 *, int)'
|   |   |   |     |-ImplicitCastExpr 0x2a7b4c129a8 <col:29> 'const u8 *' <LValueToRValue>
|   |   |   |     | `-DeclRefExpr 0x2a7b4c128c0 <col:29> 'const u8 *' lvalue ParmVar 0x2a7b4c207f8 'g_scalar' 'const u8 *'
|   |   |   |     `-BinaryOperator 0x2a7b4c12940 <col:39, col:43> 'int' '+'
|   |   |   |       |-ImplicitCastExpr 0x2a7b4c12928 <col:39> 'int' <LValueToRValue>
|   |   |   |       | `-DeclRefExpr 0x2a7b4c128e0 <col:39> 'int' lvalue Var 0x2a7b4c11058 'i' 'int'
|   |   |   |       `-IntegerLiteral 0x2a7b4c12900 <col:43> 'int' 32
|   |   |   |-CallExpr 0x2a7b4c12ba0 <line:1702:13, col:54> 'void'
|   |   |   | |-ImplicitCastExpr 0x2a7b4c12b88 <col:13> 'void (*)(const u64, unsigned int, const smallfelem (*)[3], smallfelem *)' <FunctionToPointerDecay>
|   |   |   | | `-DeclRefExpr 0x2a7b4c12a08 <col:13> 'void (const u64, unsigned int, const smallfelem (*)[3], smallfelem *)' Function 0x2a7b4c1eaa8 'select_point' 'void (const u64, unsigned int, const smallfelem (*)[3], smallfelem *)'
|   |   |   | |-ImplicitCastExpr 0x2a7b4c12be0 <col:26> 'u64':'unsigned long long' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x2a7b4c12a28 <col:26> 'u64':'unsigned long long' lvalue Var 0x2a7b4c116a8 'bits' 'u64':'unsigned long long'
|   |   |   | |-ImplicitCastExpr 0x2a7b4c12bf8 <col:32> 'unsigned int' <IntegralCast>
|   |   |   | | `-IntegerLiteral 0x2a7b4c12a48 <col:32> 'int' 16
|   |   |   | |-ImplicitCastExpr 0x2a7b4c12c10 <col:36, col:48> 'const smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |   | | `-ArraySubscriptExpr 0x2a7b4c12ad0 <col:36, col:48> 'const smallfelem [16][3]' lvalue
|   |   |   | |   |-ImplicitCastExpr 0x2a7b4c12ab8 <col:36> 'const smallfelem (*)[16][3]':'const smallfelem (*)[16][3]' <LValueToRValue>
|   |   |   | |   | `-DeclRefExpr 0x2a7b4c12a70 <col:36> 'const smallfelem (*)[16][3]':'const smallfelem (*)[16][3]' lvalue ParmVar 0x2a7b4c20d10 'g_pre_comp' 'const smallfelem (*)[16][3]':'const smallfelem (*)[16][3]'
|   |   |   | |   `-IntegerLiteral 0x2a7b4c12a90 <col:47> 'int' 1
|   |   |   | `-ImplicitCastExpr 0x2a7b4c12c28 <col:51> 'smallfelem *' <ArrayToPointerDecay>
|   |   |   |   `-DeclRefExpr 0x2a7b4c12af0 <col:51> 'smallfelem [3]' lvalue Var 0x2a7b4c11618 'tmp' 'smallfelem [3]'
|   |   |   |-IfStmt 0x2a7b4c299d8 <line:1704:13, line:1713:13> has_else
|   |   |   | |-UnaryOperator 0x2a7b4c12c78 <line:1704:17, col:18> 'int' prefix '!' cannot overflow
|   |   |   | | `-ImplicitCastExpr 0x2a7b4c12c60 <col:18> 'int' <LValueToRValue>
|   |   |   | |   `-DeclRefExpr 0x2a7b4c12c40 <col:18> 'int' lvalue Var 0x2a7b4c110d8 'skip' 'int'
|   |   |   | |-CompoundStmt 0x2a7b4c29418 <col:24, line:1708:13>
|   |   |   | | `-CallExpr 0x2a7b4c29240 <line:1706:17, line:1707:73> 'void'
|   |   |   | |   |-ImplicitCastExpr 0x2a7b4c29228 <line:1706:17> 'void (*)(limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const u64 *, const u64 *, const u64 *)' <FunctionToPointerDecay>
|   |   |   | |   | `-DeclRefExpr 0x2a7b4c12c90 <col:17> 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const u64 *, const u64 *, const u64 *)' Function 0x2a7b4b06d68 'point_add' 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const u64 *, const u64 *, const u64 *)'
|   |   |   | |   |-ImplicitCastExpr 0x2a7b4c292b0 <col:27, col:31> 'limb *' <ArrayToPointerDecay>
|   |   |   | |   | `-ArraySubscriptExpr 0x2a7b4c12d10 <col:27, col:31> 'felem':'limb [4]' lvalue
|   |   |   | |   |   |-ImplicitCastExpr 0x2a7b4c12cf8 <col:27> 'felem *' <ArrayToPointerDecay>
|   |   |   | |   |   | `-DeclRefExpr 0x2a7b4c12cb0 <col:27> 'felem [3]' lvalue Var 0x2a7b4c114a8 'nq' 'felem [3]'
|   |   |   | |   |   `-IntegerLiteral 0x2a7b4c12cd0 <col:30> 'int' 0
|   |   |   | |   |-ImplicitCastExpr 0x2a7b4c292c8 <col:34, col:38> 'limb *' <ArrayToPointerDecay>
|   |   |   | |   | `-ArraySubscriptExpr 0x2a7b4c12d90 <col:34, col:38> 'felem':'limb [4]' lvalue
|   |   |   | |   |   |-ImplicitCastExpr 0x2a7b4c12d78 <col:34> 'felem *' <ArrayToPointerDecay>
|   |   |   | |   |   | `-DeclRefExpr 0x2a7b4c12d30 <col:34> 'felem [3]' lvalue Var 0x2a7b4c114a8 'nq' 'felem [3]'
|   |   |   | |   |   `-IntegerLiteral 0x2a7b4c12d50 <col:37> 'int' 1
|   |   |   | |   |-ImplicitCastExpr 0x2a7b4c292e0 <col:41, col:45> 'limb *' <ArrayToPointerDecay>
|   |   |   | |   | `-ArraySubscriptExpr 0x2a7b4c12e10 <col:41, col:45> 'felem':'limb [4]' lvalue
|   |   |   | |   |   |-ImplicitCastExpr 0x2a7b4c12df8 <col:41> 'felem *' <ArrayToPointerDecay>
|   |   |   | |   |   | `-DeclRefExpr 0x2a7b4c12db0 <col:41> 'felem [3]' lvalue Var 0x2a7b4c114a8 'nq' 'felem [3]'
|   |   |   | |   |   `-IntegerLiteral 0x2a7b4c12dd0 <col:44> 'int' 2
|   |   |   | |   |-ImplicitCastExpr 0x2a7b4c29310 <line:1707:27, col:31> 'const limb *':'const limb *' <NoOp>
|   |   |   | |   | `-ImplicitCastExpr 0x2a7b4c292f8 <col:27, col:31> 'limb *' <ArrayToPointerDecay>
|   |   |   | |   |   `-ArraySubscriptExpr 0x2a7b4c12e90 <col:27, col:31> 'felem':'limb [4]' lvalue
|   |   |   | |   |     |-ImplicitCastExpr 0x2a7b4c12e78 <col:27> 'felem *' <ArrayToPointerDecay>
|   |   |   | |   |     | `-DeclRefExpr 0x2a7b4c12e30 <col:27> 'felem [3]' lvalue Var 0x2a7b4c114a8 'nq' 'felem [3]'
|   |   |   | |   |     `-IntegerLiteral 0x2a7b4c12e50 <col:30> 'int' 0
|   |   |   | |   |-ImplicitCastExpr 0x2a7b4c29340 <col:34, col:38> 'const limb *':'const limb *' <NoOp>
|   |   |   | |   | `-ImplicitCastExpr 0x2a7b4c29328 <col:34, col:38> 'limb *' <ArrayToPointerDecay>
|   |   |   | |   |   `-ArraySubscriptExpr 0x2a7b4c12f10 <col:34, col:38> 'felem':'limb [4]' lvalue
|   |   |   | |   |     |-ImplicitCastExpr 0x2a7b4c12ef8 <col:34> 'felem *' <ArrayToPointerDecay>
|   |   |   | |   |     | `-DeclRefExpr 0x2a7b4c12eb0 <col:34> 'felem [3]' lvalue Var 0x2a7b4c114a8 'nq' 'felem [3]'
|   |   |   | |   |     `-IntegerLiteral 0x2a7b4c12ed0 <col:37> 'int' 1
|   |   |   | |   |-ImplicitCastExpr 0x2a7b4c29370 <col:41, col:45> 'const limb *':'const limb *' <NoOp>
|   |   |   | |   | `-ImplicitCastExpr 0x2a7b4c29358 <col:41, col:45> 'limb *' <ArrayToPointerDecay>
|   |   |   | |   |   `-ArraySubscriptExpr 0x2a7b4c29060 <col:41, col:45> 'felem':'limb [4]' lvalue
|   |   |   | |   |     |-ImplicitCastExpr 0x2a7b4c29048 <col:41> 'felem *' <ArrayToPointerDecay>
|   |   |   | |   |     | `-DeclRefExpr 0x2a7b4c29000 <col:41> 'felem [3]' lvalue Var 0x2a7b4c114a8 'nq' 'felem [3]'
|   |   |   | |   |     `-IntegerLiteral 0x2a7b4c29020 <col:44> 'int' 2
|   |   |   | |   |-IntegerLiteral 0x2a7b4c29080 <col:48> 'int' 1
|   |   |   | |   |-ImplicitCastExpr 0x2a7b4c293a0 <col:51, col:56> 'const u64 *':'const u64 *' <NoOp>
|   |   |   | |   | `-ImplicitCastExpr 0x2a7b4c29388 <col:51, col:56> 'u64 *' <ArrayToPointerDecay>
|   |   |   | |   |   `-ArraySubscriptExpr 0x2a7b4c29108 <col:51, col:56> 'smallfelem':'u64 [4]' lvalue
|   |   |   | |   |     |-ImplicitCastExpr 0x2a7b4c290f0 <col:51> 'smallfelem *' <ArrayToPointerDecay>
|   |   |   | |   |     | `-DeclRefExpr 0x2a7b4c290a8 <col:51> 'smallfelem [3]' lvalue Var 0x2a7b4c11618 'tmp' 'smallfelem [3]'
|   |   |   | |   |     `-IntegerLiteral 0x2a7b4c290c8 <col:55> 'int' 0
|   |   |   | |   |-ImplicitCastExpr 0x2a7b4c293d0 <col:59, col:64> 'const u64 *':'const u64 *' <NoOp>
|   |   |   | |   | `-ImplicitCastExpr 0x2a7b4c293b8 <col:59, col:64> 'u64 *' <ArrayToPointerDecay>
|   |   |   | |   |   `-ArraySubscriptExpr 0x2a7b4c29188 <col:59, col:64> 'smallfelem':'u64 [4]' lvalue
|   |   |   | |   |     |-ImplicitCastExpr 0x2a7b4c29170 <col:59> 'smallfelem *' <ArrayToPointerDecay>
|   |   |   | |   |     | `-DeclRefExpr 0x2a7b4c29128 <col:59> 'smallfelem [3]' lvalue Var 0x2a7b4c11618 'tmp' 'smallfelem [3]'
|   |   |   | |   |     `-IntegerLiteral 0x2a7b4c29148 <col:63> 'int' 1
|   |   |   | |   `-ImplicitCastExpr 0x2a7b4c29400 <col:67, col:72> 'const u64 *':'const u64 *' <NoOp>
|   |   |   | |     `-ImplicitCastExpr 0x2a7b4c293e8 <col:67, col:72> 'u64 *' <ArrayToPointerDecay>
|   |   |   | |       `-ArraySubscriptExpr 0x2a7b4c29208 <col:67, col:72> 'smallfelem':'u64 [4]' lvalue
|   |   |   | |         |-ImplicitCastExpr 0x2a7b4c291f0 <col:67> 'smallfelem *' <ArrayToPointerDecay>
|   |   |   | |         | `-DeclRefExpr 0x2a7b4c291a8 <col:67> 'smallfelem [3]' lvalue Var 0x2a7b4c11618 'tmp' 'smallfelem [3]'
|   |   |   | |         `-IntegerLiteral 0x2a7b4c291c8 <col:71> 'int' 2
|   |   |   | `-CompoundStmt 0x2a7b4c299a8 <line:1708:20, line:1713:13>
|   |   |   |   |-CallExpr 0x2a7b4c29568 <line:1709:17, col:48> 'void'
|   |   |   |   | |-ImplicitCastExpr 0x2a7b4c29550 <col:17> 'void (*)(limb *, const u64 *)' <FunctionToPointerDecay>
|   |   |   |   | | `-DeclRefExpr 0x2a7b4c29430 <col:17> 'void (limb *, const u64 *)' Function 0x2a7b4a01120 'smallfelem_expand' 'void (limb *, const u64 *)'
|   |   |   |   | |-ImplicitCastExpr 0x2a7b4c29598 <col:35, col:39> 'limb *' <ArrayToPointerDecay>
|   |   |   |   | | `-ArraySubscriptExpr 0x2a7b4c294b0 <col:35, col:39> 'felem':'limb [4]' lvalue
|   |   |   |   | |   |-ImplicitCastExpr 0x2a7b4c29498 <col:35> 'felem *' <ArrayToPointerDecay>
|   |   |   |   | |   | `-DeclRefExpr 0x2a7b4c29450 <col:35> 'felem [3]' lvalue Var 0x2a7b4c114a8 'nq' 'felem [3]'
|   |   |   |   | |   `-IntegerLiteral 0x2a7b4c29470 <col:38> 'int' 0
|   |   |   |   | `-ImplicitCastExpr 0x2a7b4c295c8 <col:42, col:47> 'const u64 *':'const u64 *' <NoOp>
|   |   |   |   |   `-ImplicitCastExpr 0x2a7b4c295b0 <col:42, col:47> 'u64 *' <ArrayToPointerDecay>
|   |   |   |   |     `-ArraySubscriptExpr 0x2a7b4c29530 <col:42, col:47> 'smallfelem':'u64 [4]' lvalue
|   |   |   |   |       |-ImplicitCastExpr 0x2a7b4c29518 <col:42> 'smallfelem *' <ArrayToPointerDecay>
|   |   |   |   |       | `-DeclRefExpr 0x2a7b4c294d0 <col:42> 'smallfelem [3]' lvalue Var 0x2a7b4c11618 'tmp' 'smallfelem [3]'
|   |   |   |   |       `-IntegerLiteral 0x2a7b4c294f0 <col:46> 'int' 0
|   |   |   |   |-CallExpr 0x2a7b4c29718 <line:1710:17, col:48> 'void'
|   |   |   |   | |-ImplicitCastExpr 0x2a7b4c29700 <col:17> 'void (*)(limb *, const u64 *)' <FunctionToPointerDecay>
|   |   |   |   | | `-DeclRefExpr 0x2a7b4c295e0 <col:17> 'void (limb *, const u64 *)' Function 0x2a7b4a01120 'smallfelem_expand' 'void (limb *, const u64 *)'
|   |   |   |   | |-ImplicitCastExpr 0x2a7b4c29748 <col:35, col:39> 'limb *' <ArrayToPointerDecay>
|   |   |   |   | | `-ArraySubscriptExpr 0x2a7b4c29660 <col:35, col:39> 'felem':'limb [4]' lvalue
|   |   |   |   | |   |-ImplicitCastExpr 0x2a7b4c29648 <col:35> 'felem *' <ArrayToPointerDecay>
|   |   |   |   | |   | `-DeclRefExpr 0x2a7b4c29600 <col:35> 'felem [3]' lvalue Var 0x2a7b4c114a8 'nq' 'felem [3]'
|   |   |   |   | |   `-IntegerLiteral 0x2a7b4c29620 <col:38> 'int' 1
|   |   |   |   | `-ImplicitCastExpr 0x2a7b4c29778 <col:42, col:47> 'const u64 *':'const u64 *' <NoOp>
|   |   |   |   |   `-ImplicitCastExpr 0x2a7b4c29760 <col:42, col:47> 'u64 *' <ArrayToPointerDecay>
|   |   |   |   |     `-ArraySubscriptExpr 0x2a7b4c296e0 <col:42, col:47> 'smallfelem':'u64 [4]' lvalue
|   |   |   |   |       |-ImplicitCastExpr 0x2a7b4c296c8 <col:42> 'smallfelem *' <ArrayToPointerDecay>
|   |   |   |   |       | `-DeclRefExpr 0x2a7b4c29680 <col:42> 'smallfelem [3]' lvalue Var 0x2a7b4c11618 'tmp' 'smallfelem [3]'
|   |   |   |   |       `-IntegerLiteral 0x2a7b4c296a0 <col:46> 'int' 1
|   |   |   |   |-CallExpr 0x2a7b4c298c8 <line:1711:17, col:48> 'void'
|   |   |   |   | |-ImplicitCastExpr 0x2a7b4c298b0 <col:17> 'void (*)(limb *, const u64 *)' <FunctionToPointerDecay>
|   |   |   |   | | `-DeclRefExpr 0x2a7b4c29790 <col:17> 'void (limb *, const u64 *)' Function 0x2a7b4a01120 'smallfelem_expand' 'void (limb *, const u64 *)'
|   |   |   |   | |-ImplicitCastExpr 0x2a7b4c298f8 <col:35, col:39> 'limb *' <ArrayToPointerDecay>
|   |   |   |   | | `-ArraySubscriptExpr 0x2a7b4c29810 <col:35, col:39> 'felem':'limb [4]' lvalue
|   |   |   |   | |   |-ImplicitCastExpr 0x2a7b4c297f8 <col:35> 'felem *' <ArrayToPointerDecay>
|   |   |   |   | |   | `-DeclRefExpr 0x2a7b4c297b0 <col:35> 'felem [3]' lvalue Var 0x2a7b4c114a8 'nq' 'felem [3]'
|   |   |   |   | |   `-IntegerLiteral 0x2a7b4c297d0 <col:38> 'int' 2
|   |   |   |   | `-ImplicitCastExpr 0x2a7b4c29928 <col:42, col:47> 'const u64 *':'const u64 *' <NoOp>
|   |   |   |   |   `-ImplicitCastExpr 0x2a7b4c29910 <col:42, col:47> 'u64 *' <ArrayToPointerDecay>
|   |   |   |   |     `-ArraySubscriptExpr 0x2a7b4c29890 <col:42, col:47> 'smallfelem':'u64 [4]' lvalue
|   |   |   |   |       |-ImplicitCastExpr 0x2a7b4c29878 <col:42> 'smallfelem *' <ArrayToPointerDecay>
|   |   |   |   |       | `-DeclRefExpr 0x2a7b4c29830 <col:42> 'smallfelem [3]' lvalue Var 0x2a7b4c11618 'tmp' 'smallfelem [3]'
|   |   |   |   |       `-IntegerLiteral 0x2a7b4c29850 <col:46> 'int' 2
|   |   |   |   `-BinaryOperator 0x2a7b4c29988 <line:1712:17, col:24> 'int' '='
|   |   |   |     |-DeclRefExpr 0x2a7b4c29940 <col:17> 'int' lvalue Var 0x2a7b4c110d8 'skip' 'int'
|   |   |   |     `-IntegerLiteral 0x2a7b4c29960 <col:24> 'int' 0
|   |   |   |-BinaryOperator 0x2a7b4c29bb8 <line:1716:13, col:50> 'u64':'unsigned long long' '='
|   |   |   | |-DeclRefExpr 0x2a7b4c29a00 <col:13> 'u64':'unsigned long long' lvalue Var 0x2a7b4c116a8 'bits' 'u64':'unsigned long long'
|   |   |   | `-ImplicitCastExpr 0x2a7b4c29ba0 <col:20, col:50> 'u64':'unsigned long long' <IntegralCast>
|   |   |   |   `-BinaryOperator 0x2a7b4c29b80 <col:20, col:50> 'int' '<<'
|   |   |   |     |-ImplicitCastExpr 0x2a7b4c29b68 <col:20, col:45> 'int' <IntegralCast>
|   |   |   |     | `-CallExpr 0x2a7b4c29af8 <col:20, col:45> 'char'
|   |   |   |     |   |-ImplicitCastExpr 0x2a7b4c29ae0 <col:20> 'char (*)(const u8 *, int)' <FunctionToPointerDecay>
|   |   |   |     |   | `-DeclRefExpr 0x2a7b4c29a20 <col:20> 'char (const u8 *, int)' Function 0x2a7b4c1ff78 'get_bit' 'char (const u8 *, int)'
|   |   |   |     |   |-ImplicitCastExpr 0x2a7b4c29b28 <col:28> 'const u8 *' <LValueToRValue>
|   |   |   |     |   | `-DeclRefExpr 0x2a7b4c29a40 <col:28> 'const u8 *' lvalue ParmVar 0x2a7b4c207f8 'g_scalar' 'const u8 *'
|   |   |   |     |   `-BinaryOperator 0x2a7b4c29ac0 <col:38, col:42> 'int' '+'
|   |   |   |     |     |-ImplicitCastExpr 0x2a7b4c29aa8 <col:38> 'int' <LValueToRValue>
|   |   |   |     |     | `-DeclRefExpr 0x2a7b4c29a60 <col:38> 'int' lvalue Var 0x2a7b4c11058 'i' 'int'
|   |   |   |     |     `-IntegerLiteral 0x2a7b4c29a80 <col:42> 'int' 192
|   |   |   |     `-IntegerLiteral 0x2a7b4c29b40 <col:50> 'int' 3
|   |   |   |-CompoundAssignOperator 0x2a7b4c29d90 <line:1717:13, col:51> 'u64':'unsigned long long' '|=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |   |   | |-DeclRefExpr 0x2a7b4c29bd8 <col:13> 'u64':'unsigned long long' lvalue Var 0x2a7b4c116a8 'bits' 'u64':'unsigned long long'
|   |   |   | `-ImplicitCastExpr 0x2a7b4c29d78 <col:21, col:51> 'unsigned long long' <IntegralCast>
|   |   |   |   `-BinaryOperator 0x2a7b4c29d58 <col:21, col:51> 'int' '<<'
|   |   |   |     |-ImplicitCastExpr 0x2a7b4c29d40 <col:21, col:46> 'int' <IntegralCast>
|   |   |   |     | `-CallExpr 0x2a7b4c29cd0 <col:21, col:46> 'char'
|   |   |   |     |   |-ImplicitCastExpr 0x2a7b4c29cb8 <col:21> 'char (*)(const u8 *, int)' <FunctionToPointerDecay>
|   |   |   |     |   | `-DeclRefExpr 0x2a7b4c29bf8 <col:21> 'char (const u8 *, int)' Function 0x2a7b4c1ff78 'get_bit' 'char (const u8 *, int)'
|   |   |   |     |   |-ImplicitCastExpr 0x2a7b4c29d00 <col:29> 'const u8 *' <LValueToRValue>
|   |   |   |     |   | `-DeclRefExpr 0x2a7b4c29c18 <col:29> 'const u8 *' lvalue ParmVar 0x2a7b4c207f8 'g_scalar' 'const u8 *'
|   |   |   |     |   `-BinaryOperator 0x2a7b4c29c98 <col:39, col:43> 'int' '+'
|   |   |   |     |     |-ImplicitCastExpr 0x2a7b4c29c80 <col:39> 'int' <LValueToRValue>
|   |   |   |     |     | `-DeclRefExpr 0x2a7b4c29c38 <col:39> 'int' lvalue Var 0x2a7b4c11058 'i' 'int'
|   |   |   |     |     `-IntegerLiteral 0x2a7b4c29c58 <col:43> 'int' 128
|   |   |   |     `-IntegerLiteral 0x2a7b4c29d18 <col:51> 'int' 2
|   |   |   |-CompoundAssignOperator 0x2a7b4c29f78 <line:1718:13, col:50> 'u64':'unsigned long long' '|=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |   |   | |-DeclRefExpr 0x2a7b4c29dc0 <col:13> 'u64':'unsigned long long' lvalue Var 0x2a7b4c116a8 'bits' 'u64':'unsigned long long'
|   |   |   | `-ImplicitCastExpr 0x2a7b4c29f60 <col:21, col:50> 'unsigned long long' <IntegralCast>
|   |   |   |   `-BinaryOperator 0x2a7b4c29f40 <col:21, col:50> 'int' '<<'
|   |   |   |     |-ImplicitCastExpr 0x2a7b4c29f28 <col:21, col:45> 'int' <IntegralCast>
|   |   |   |     | `-CallExpr 0x2a7b4c29eb8 <col:21, col:45> 'char'
|   |   |   |     |   |-ImplicitCastExpr 0x2a7b4c29ea0 <col:21> 'char (*)(const u8 *, int)' <FunctionToPointerDecay>
|   |   |   |     |   | `-DeclRefExpr 0x2a7b4c29de0 <col:21> 'char (const u8 *, int)' Function 0x2a7b4c1ff78 'get_bit' 'char (const u8 *, int)'
|   |   |   |     |   |-ImplicitCastExpr 0x2a7b4c29ee8 <col:29> 'const u8 *' <LValueToRValue>
|   |   |   |     |   | `-DeclRefExpr 0x2a7b4c29e00 <col:29> 'const u8 *' lvalue ParmVar 0x2a7b4c207f8 'g_scalar' 'const u8 *'
|   |   |   |     |   `-BinaryOperator 0x2a7b4c29e80 <col:39, col:43> 'int' '+'
|   |   |   |     |     |-ImplicitCastExpr 0x2a7b4c29e68 <col:39> 'int' <LValueToRValue>
|   |   |   |     |     | `-DeclRefExpr 0x2a7b4c29e20 <col:39> 'int' lvalue Var 0x2a7b4c11058 'i' 'int'
|   |   |   |     |     `-IntegerLiteral 0x2a7b4c29e40 <col:43> 'int' 64
|   |   |   |     `-IntegerLiteral 0x2a7b4c29f00 <col:50> 'int' 1
|   |   |   |-CompoundAssignOperator 0x2a7b4c2a0b8 <line:1719:13, col:40> 'u64':'unsigned long long' '|=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |   |   | |-DeclRefExpr 0x2a7b4c29fa8 <col:13> 'u64':'unsigned long long' lvalue Var 0x2a7b4c116a8 'bits' 'u64':'unsigned long long'
|   |   |   | `-ImplicitCastExpr 0x2a7b4c2a0a0 <col:21, col:40> 'unsigned long long' <IntegralCast>
|   |   |   |   `-CallExpr 0x2a7b4c2a040 <col:21, col:40> 'char'
|   |   |   |     |-ImplicitCastExpr 0x2a7b4c2a028 <col:21> 'char (*)(const u8 *, int)' <FunctionToPointerDecay>
|   |   |   |     | `-DeclRefExpr 0x2a7b4c29fc8 <col:21> 'char (const u8 *, int)' Function 0x2a7b4c1ff78 'get_bit' 'char (const u8 *, int)'
|   |   |   |     |-ImplicitCastExpr 0x2a7b4c2a070 <col:29> 'const u8 *' <LValueToRValue>
|   |   |   |     | `-DeclRefExpr 0x2a7b4c29fe8 <col:29> 'const u8 *' lvalue ParmVar 0x2a7b4c207f8 'g_scalar' 'const u8 *'
|   |   |   |     `-ImplicitCastExpr 0x2a7b4c2a088 <col:39> 'int' <LValueToRValue>
|   |   |   |       `-DeclRefExpr 0x2a7b4c2a008 <col:39> 'int' lvalue Var 0x2a7b4c11058 'i' 'int'
|   |   |   |-CallExpr 0x2a7b4c2a208 <line:1721:13, col:54> 'void'
|   |   |   | |-ImplicitCastExpr 0x2a7b4c2a1f0 <col:13> 'void (*)(const u64, unsigned int, const smallfelem (*)[3], smallfelem *)' <FunctionToPointerDecay>
|   |   |   | | `-DeclRefExpr 0x2a7b4c2a0e8 <col:13> 'void (const u64, unsigned int, const smallfelem (*)[3], smallfelem *)' Function 0x2a7b4c1eaa8 'select_point' 'void (const u64, unsigned int, const smallfelem (*)[3], smallfelem *)'
|   |   |   | |-ImplicitCastExpr 0x2a7b4c2a248 <col:26> 'u64':'unsigned long long' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x2a7b4c2a108 <col:26> 'u64':'unsigned long long' lvalue Var 0x2a7b4c116a8 'bits' 'u64':'unsigned long long'
|   |   |   | |-ImplicitCastExpr 0x2a7b4c2a260 <col:32> 'unsigned int' <IntegralCast>
|   |   |   | | `-IntegerLiteral 0x2a7b4c2a128 <col:32> 'int' 16
|   |   |   | |-ImplicitCastExpr 0x2a7b4c2a278 <col:36, col:48> 'const smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |   | | `-ArraySubscriptExpr 0x2a7b4c2a1b0 <col:36, col:48> 'const smallfelem [16][3]' lvalue
|   |   |   | |   |-ImplicitCastExpr 0x2a7b4c2a198 <col:36> 'const smallfelem (*)[16][3]':'const smallfelem (*)[16][3]' <LValueToRValue>
|   |   |   | |   | `-DeclRefExpr 0x2a7b4c2a150 <col:36> 'const smallfelem (*)[16][3]':'const smallfelem (*)[16][3]' lvalue ParmVar 0x2a7b4c20d10 'g_pre_comp' 'const smallfelem (*)[16][3]':'const smallfelem (*)[16][3]'
|   |   |   | |   `-IntegerLiteral 0x2a7b4c2a170 <col:47> 'int' 0
|   |   |   | `-ImplicitCastExpr 0x2a7b4c2a290 <col:51> 'smallfelem *' <ArrayToPointerDecay>
|   |   |   |   `-DeclRefExpr 0x2a7b4c2a1d0 <col:51> 'smallfelem [3]' lvalue Var 0x2a7b4c11618 'tmp' 'smallfelem [3]'
|   |   |   `-CallExpr 0x2a7b4c2a788 <line:1723:13, line:1724:69> 'void'
|   |   |     |-ImplicitCastExpr 0x2a7b4c2a770 <line:1723:13> 'void (*)(limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const u64 *, const u64 *, const u64 *)' <FunctionToPointerDecay>
|   |   |     | `-DeclRefExpr 0x2a7b4c2a2a8 <col:13> 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const u64 *, const u64 *, const u64 *)' Function 0x2a7b4b06d68 'point_add' 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const u64 *, const u64 *, const u64 *)'
|   |   |     |-ImplicitCastExpr 0x2a7b4c2a7f8 <col:23, col:27> 'limb *' <ArrayToPointerDecay>
|   |   |     | `-ArraySubscriptExpr 0x2a7b4c2a328 <col:23, col:27> 'felem':'limb [4]' lvalue
|   |   |     |   |-ImplicitCastExpr 0x2a7b4c2a310 <col:23> 'felem *' <ArrayToPointerDecay>
|   |   |     |   | `-DeclRefExpr 0x2a7b4c2a2c8 <col:23> 'felem [3]' lvalue Var 0x2a7b4c114a8 'nq' 'felem [3]'
|   |   |     |   `-IntegerLiteral 0x2a7b4c2a2e8 <col:26> 'int' 0
|   |   |     |-ImplicitCastExpr 0x2a7b4c2a810 <col:30, col:34> 'limb *' <ArrayToPointerDecay>
|   |   |     | `-ArraySubscriptExpr 0x2a7b4c2a3a8 <col:30, col:34> 'felem':'limb [4]' lvalue
|   |   |     |   |-ImplicitCastExpr 0x2a7b4c2a390 <col:30> 'felem *' <ArrayToPointerDecay>
|   |   |     |   | `-DeclRefExpr 0x2a7b4c2a348 <col:30> 'felem [3]' lvalue Var 0x2a7b4c114a8 'nq' 'felem [3]'
|   |   |     |   `-IntegerLiteral 0x2a7b4c2a368 <col:33> 'int' 1
|   |   |     |-ImplicitCastExpr 0x2a7b4c2a828 <col:37, col:41> 'limb *' <ArrayToPointerDecay>
|   |   |     | `-ArraySubscriptExpr 0x2a7b4c2a428 <col:37, col:41> 'felem':'limb [4]' lvalue
|   |   |     |   |-ImplicitCastExpr 0x2a7b4c2a410 <col:37> 'felem *' <ArrayToPointerDecay>
|   |   |     |   | `-DeclRefExpr 0x2a7b4c2a3c8 <col:37> 'felem [3]' lvalue Var 0x2a7b4c114a8 'nq' 'felem [3]'
|   |   |     |   `-IntegerLiteral 0x2a7b4c2a3e8 <col:40> 'int' 2
|   |   |     |-ImplicitCastExpr 0x2a7b4c2a858 <line:1724:23, col:27> 'const limb *':'const limb *' <NoOp>
|   |   |     | `-ImplicitCastExpr 0x2a7b4c2a840 <col:23, col:27> 'limb *' <ArrayToPointerDecay>
|   |   |     |   `-ArraySubscriptExpr 0x2a7b4c2a4a8 <col:23, col:27> 'felem':'limb [4]' lvalue
|   |   |     |     |-ImplicitCastExpr 0x2a7b4c2a490 <col:23> 'felem *' <ArrayToPointerDecay>
|   |   |     |     | `-DeclRefExpr 0x2a7b4c2a448 <col:23> 'felem [3]' lvalue Var 0x2a7b4c114a8 'nq' 'felem [3]'
|   |   |     |     `-IntegerLiteral 0x2a7b4c2a468 <col:26> 'int' 0
|   |   |     |-ImplicitCastExpr 0x2a7b4c2a888 <col:30, col:34> 'const limb *':'const limb *' <NoOp>
|   |   |     | `-ImplicitCastExpr 0x2a7b4c2a870 <col:30, col:34> 'limb *' <ArrayToPointerDecay>
|   |   |     |   `-ArraySubscriptExpr 0x2a7b4c2a528 <col:30, col:34> 'felem':'limb [4]' lvalue
|   |   |     |     |-ImplicitCastExpr 0x2a7b4c2a510 <col:30> 'felem *' <ArrayToPointerDecay>
|   |   |     |     | `-DeclRefExpr 0x2a7b4c2a4c8 <col:30> 'felem [3]' lvalue Var 0x2a7b4c114a8 'nq' 'felem [3]'
|   |   |     |     `-IntegerLiteral 0x2a7b4c2a4e8 <col:33> 'int' 1
|   |   |     |-ImplicitCastExpr 0x2a7b4c2a8b8 <col:37, col:41> 'const limb *':'const limb *' <NoOp>
|   |   |     | `-ImplicitCastExpr 0x2a7b4c2a8a0 <col:37, col:41> 'limb *' <ArrayToPointerDecay>
|   |   |     |   `-ArraySubscriptExpr 0x2a7b4c2a5a8 <col:37, col:41> 'felem':'limb [4]' lvalue
|   |   |     |     |-ImplicitCastExpr 0x2a7b4c2a590 <col:37> 'felem *' <ArrayToPointerDecay>
|   |   |     |     | `-DeclRefExpr 0x2a7b4c2a548 <col:37> 'felem [3]' lvalue Var 0x2a7b4c114a8 'nq' 'felem [3]'
|   |   |     |     `-IntegerLiteral 0x2a7b4c2a568 <col:40> 'int' 2
|   |   |     |-IntegerLiteral 0x2a7b4c2a5c8 <col:44> 'int' 1
|   |   |     |-ImplicitCastExpr 0x2a7b4c2a8e8 <col:47, col:52> 'const u64 *':'const u64 *' <NoOp>
|   |   |     | `-ImplicitCastExpr 0x2a7b4c2a8d0 <col:47, col:52> 'u64 *' <ArrayToPointerDecay>
|   |   |     |   `-ArraySubscriptExpr 0x2a7b4c2a650 <col:47, col:52> 'smallfelem':'u64 [4]' lvalue
|   |   |     |     |-ImplicitCastExpr 0x2a7b4c2a638 <col:47> 'smallfelem *' <ArrayToPointerDecay>
|   |   |     |     | `-DeclRefExpr 0x2a7b4c2a5f0 <col:47> 'smallfelem [3]' lvalue Var 0x2a7b4c11618 'tmp' 'smallfelem [3]'
|   |   |     |     `-IntegerLiteral 0x2a7b4c2a610 <col:51> 'int' 0
|   |   |     |-ImplicitCastExpr 0x2a7b4c2a918 <col:55, col:60> 'const u64 *':'const u64 *' <NoOp>
|   |   |     | `-ImplicitCastExpr 0x2a7b4c2a900 <col:55, col:60> 'u64 *' <ArrayToPointerDecay>
|   |   |     |   `-ArraySubscriptExpr 0x2a7b4c2a6d0 <col:55, col:60> 'smallfelem':'u64 [4]' lvalue
|   |   |     |     |-ImplicitCastExpr 0x2a7b4c2a6b8 <col:55> 'smallfelem *' <ArrayToPointerDecay>
|   |   |     |     | `-DeclRefExpr 0x2a7b4c2a670 <col:55> 'smallfelem [3]' lvalue Var 0x2a7b4c11618 'tmp' 'smallfelem [3]'
|   |   |     |     `-IntegerLiteral 0x2a7b4c2a690 <col:59> 'int' 1
|   |   |     `-ImplicitCastExpr 0x2a7b4c2a948 <col:63, col:68> 'const u64 *':'const u64 *' <NoOp>
|   |   |       `-ImplicitCastExpr 0x2a7b4c2a930 <col:63, col:68> 'u64 *' <ArrayToPointerDecay>
|   |   |         `-ArraySubscriptExpr 0x2a7b4c2a750 <col:63, col:68> 'smallfelem':'u64 [4]' lvalue
|   |   |           |-ImplicitCastExpr 0x2a7b4c2a738 <col:63> 'smallfelem *' <ArrayToPointerDecay>
|   |   |           | `-DeclRefExpr 0x2a7b4c2a6f0 <col:63> 'smallfelem [3]' lvalue Var 0x2a7b4c11618 'tmp' 'smallfelem [3]'
|   |   |           `-IntegerLiteral 0x2a7b4c2a710 <col:67> 'int' 2
|   |   `-IfStmt 0x2a7b4c27008 <line:1728:9, line:1759:9>
|   |     |-BinaryOperator 0x2a7b4c2ab08 <line:1728:13, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x2a7b4c2aaf0 <col:13> 'unsigned int' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x2a7b4c2a9e8 <col:13> 'const unsigned int' lvalue ParmVar 0x2a7b4c20780 'num_points' 'const unsigned int'
|   |     | `-ParenExpr 0x2a7b4c2aad0 <col:27, col:38> 'int'
|   |     |   `-BinaryOperator 0x2a7b4c2aab0 <col:28, col:37> 'int' '=='
|   |     |     |-BinaryOperator 0x2a7b4c2aa68 <col:28, col:32> 'int' '%'
|   |     |     | |-ImplicitCastExpr 0x2a7b4c2aa50 <col:28> 'int' <LValueToRValue>
|   |     |     | | `-DeclRefExpr 0x2a7b4c2aa08 <col:28> 'int' lvalue Var 0x2a7b4c11058 'i' 'int'
|   |     |     | `-IntegerLiteral 0x2a7b4c2aa28 <col:32> 'int' 5
|   |     |     `-IntegerLiteral 0x2a7b4c2aa88 <col:37> 'int' 0
|   |     `-CompoundStmt 0x2a7b4c26ff0 <col:41, line:1759:9>
|   |       `-ForStmt 0x2a7b4c24f98 <line:1730:13, line:1758:13>
|   |         |-BinaryOperator 0x2a7b4c2aba0 <line:1730:18, col:24> 'unsigned int' '='
|   |         | |-DeclRefExpr 0x2a7b4c2ab28 <col:18> 'unsigned int' lvalue Var 0x2a7b4c11188 'num' 'unsigned int'
|   |         | `-ImplicitCastExpr 0x2a7b4c2ab88 <col:24> 'unsigned int' <IntegralCast>
|   |         |   `-IntegerLiteral 0x2a7b4c2ab60 <col:24> 'int' 0
|   |         |-<<<NULL>>>
|   |         |-BinaryOperator 0x2a7b4c2ac30 <col:27, col:33> 'int' '<'
|   |         | |-ImplicitCastExpr 0x2a7b4c2ac00 <col:27> 'unsigned int' <LValueToRValue>
|   |         | | `-DeclRefExpr 0x2a7b4c2abc0 <col:27> 'unsigned int' lvalue Var 0x2a7b4c11188 'num' 'unsigned int'
|   |         | `-ImplicitCastExpr 0x2a7b4c2ac18 <col:33> 'unsigned int' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x2a7b4c2abe0 <col:33> 'const unsigned int' lvalue ParmVar 0x2a7b4c20780 'num_points' 'const unsigned int'
|   |         |-UnaryOperator 0x2a7b4c2ac70 <col:45, col:47> 'unsigned int' prefix '++'
|   |         | `-DeclRefExpr 0x2a7b4c2ac50 <col:47> 'unsigned int' lvalue Var 0x2a7b4c11188 'num' 'unsigned int'
|   |         `-CompoundStmt 0x2a7b4c24f28 <col:52, line:1758:13>
|   |           |-BinaryOperator 0x2a7b4c2aeb0 <line:1731:17, col:56> 'u64':'unsigned long long' '='
|   |           | |-DeclRefExpr 0x2a7b4c2ac88 <col:17> 'u64':'unsigned long long' lvalue Var 0x2a7b4c116a8 'bits' 'u64':'unsigned long long'
|   |           | `-ImplicitCastExpr 0x2a7b4c2ae98 <col:24, col:56> 'u64':'unsigned long long' <IntegralCast>
|   |           |   `-BinaryOperator 0x2a7b4c2ae78 <col:24, col:56> 'int' '<<'
|   |           |     |-ImplicitCastExpr 0x2a7b4c2ae60 <col:24, col:51> 'int' <IntegralCast>
|   |           |     | `-CallExpr 0x2a7b4c2adf0 <col:24, col:51> 'char'
|   |           |     |   |-ImplicitCastExpr 0x2a7b4c2add8 <col:24> 'char (*)(const u8 *, int)' <FunctionToPointerDecay>
|   |           |     |   | `-DeclRefExpr 0x2a7b4c2aca8 <col:24> 'char (const u8 *, int)' Function 0x2a7b4c1ff78 'get_bit' 'char (const u8 *, int)'
|   |           |     |   |-ImplicitCastExpr 0x2a7b4c2ae20 <col:32, col:43> 'const u8 *' <ArrayToPointerDecay>
|   |           |     |   | `-ArraySubscriptExpr 0x2a7b4c2ad38 <col:32, col:43> 'const felem_bytearray':'u8 const[32]' lvalue
|   |           |     |   |   |-ImplicitCastExpr 0x2a7b4c2ad08 <col:32> 'const felem_bytearray *':'const felem_bytearray *' <LValueToRValue>
|   |           |     |   |   | `-DeclRefExpr 0x2a7b4c2acc8 <col:32> 'const felem_bytearray *':'const felem_bytearray *' lvalue ParmVar 0x2a7b4c20700 'scalars' 'const felem_bytearray *':'const felem_bytearray *'
|   |           |     |   |   `-ImplicitCastExpr 0x2a7b4c2ad20 <col:40> 'unsigned int' <LValueToRValue>
|   |           |     |   |     `-DeclRefExpr 0x2a7b4c2ace8 <col:40> 'unsigned int' lvalue Var 0x2a7b4c11188 'num' 'unsigned int'
|   |           |     |   `-BinaryOperator 0x2a7b4c2adb8 <col:46, col:50> 'int' '+'
|   |           |     |     |-ImplicitCastExpr 0x2a7b4c2ada0 <col:46> 'int' <LValueToRValue>
|   |           |     |     | `-DeclRefExpr 0x2a7b4c2ad58 <col:46> 'int' lvalue Var 0x2a7b4c11058 'i' 'int'
|   |           |     |     `-IntegerLiteral 0x2a7b4c2ad78 <col:50> 'int' 4
|   |           |     `-IntegerLiteral 0x2a7b4c2ae38 <col:56> 'int' 5
|   |           |-CompoundAssignOperator 0x2a7b4c230c8 <line:1732:17, col:57> 'u64':'unsigned long long' '|=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |           | |-DeclRefExpr 0x2a7b4c2aed0 <col:17> 'u64':'unsigned long long' lvalue Var 0x2a7b4c116a8 'bits' 'u64':'unsigned long long'
|   |           | `-ImplicitCastExpr 0x2a7b4c230b0 <col:25, col:57> 'unsigned long long' <IntegralCast>
|   |           |   `-BinaryOperator 0x2a7b4c23090 <col:25, col:57> 'int' '<<'
|   |           |     |-ImplicitCastExpr 0x2a7b4c23078 <col:25, col:52> 'int' <IntegralCast>
|   |           |     | `-CallExpr 0x2a7b4c23008 <col:25, col:52> 'char'
|   |           |     |   |-ImplicitCastExpr 0x2a7b4c22ff0 <col:25> 'char (*)(const u8 *, int)' <FunctionToPointerDecay>
|   |           |     |   | `-DeclRefExpr 0x2a7b4c2aef0 <col:25> 'char (const u8 *, int)' Function 0x2a7b4c1ff78 'get_bit' 'char (const u8 *, int)'
|   |           |     |   |-ImplicitCastExpr 0x2a7b4c23038 <col:33, col:44> 'const u8 *' <ArrayToPointerDecay>
|   |           |     |   | `-ArraySubscriptExpr 0x2a7b4c2af80 <col:33, col:44> 'const felem_bytearray':'u8 const[32]' lvalue
|   |           |     |   |   |-ImplicitCastExpr 0x2a7b4c2af50 <col:33> 'const felem_bytearray *':'const felem_bytearray *' <LValueToRValue>
|   |           |     |   |   | `-DeclRefExpr 0x2a7b4c2af10 <col:33> 'const felem_bytearray *':'const felem_bytearray *' lvalue ParmVar 0x2a7b4c20700 'scalars' 'const felem_bytearray *':'const felem_bytearray *'
|   |           |     |   |   `-ImplicitCastExpr 0x2a7b4c2af68 <col:41> 'unsigned int' <LValueToRValue>
|   |           |     |   |     `-DeclRefExpr 0x2a7b4c2af30 <col:41> 'unsigned int' lvalue Var 0x2a7b4c11188 'num' 'unsigned int'
|   |           |     |   `-BinaryOperator 0x2a7b4c22fd0 <col:47, col:51> 'int' '+'
|   |           |     |     |-ImplicitCastExpr 0x2a7b4c2afe8 <col:47> 'int' <LValueToRValue>
|   |           |     |     | `-DeclRefExpr 0x2a7b4c2afa0 <col:47> 'int' lvalue Var 0x2a7b4c11058 'i' 'int'
|   |           |     |     `-IntegerLiteral 0x2a7b4c2afc0 <col:51> 'int' 3
|   |           |     `-IntegerLiteral 0x2a7b4c23050 <col:57> 'int' 4
|   |           |-CompoundAssignOperator 0x2a7b4c23320 <line:1733:17, col:57> 'u64':'unsigned long long' '|=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |           | |-DeclRefExpr 0x2a7b4c230f8 <col:17> 'u64':'unsigned long long' lvalue Var 0x2a7b4c116a8 'bits' 'u64':'unsigned long long'
|   |           | `-ImplicitCastExpr 0x2a7b4c23308 <col:25, col:57> 'unsigned long long' <IntegralCast>
|   |           |   `-BinaryOperator 0x2a7b4c232e8 <col:25, col:57> 'int' '<<'
|   |           |     |-ImplicitCastExpr 0x2a7b4c232d0 <col:25, col:52> 'int' <IntegralCast>
|   |           |     | `-CallExpr 0x2a7b4c23260 <col:25, col:52> 'char'
|   |           |     |   |-ImplicitCastExpr 0x2a7b4c23248 <col:25> 'char (*)(const u8 *, int)' <FunctionToPointerDecay>
|   |           |     |   | `-DeclRefExpr 0x2a7b4c23118 <col:25> 'char (const u8 *, int)' Function 0x2a7b4c1ff78 'get_bit' 'char (const u8 *, int)'
|   |           |     |   |-ImplicitCastExpr 0x2a7b4c23290 <col:33, col:44> 'const u8 *' <ArrayToPointerDecay>
|   |           |     |   | `-ArraySubscriptExpr 0x2a7b4c231a8 <col:33, col:44> 'const felem_bytearray':'u8 const[32]' lvalue
|   |           |     |   |   |-ImplicitCastExpr 0x2a7b4c23178 <col:33> 'const felem_bytearray *':'const felem_bytearray *' <LValueToRValue>
|   |           |     |   |   | `-DeclRefExpr 0x2a7b4c23138 <col:33> 'const felem_bytearray *':'const felem_bytearray *' lvalue ParmVar 0x2a7b4c20700 'scalars' 'const felem_bytearray *':'const felem_bytearray *'
|   |           |     |   |   `-ImplicitCastExpr 0x2a7b4c23190 <col:41> 'unsigned int' <LValueToRValue>
|   |           |     |   |     `-DeclRefExpr 0x2a7b4c23158 <col:41> 'unsigned int' lvalue Var 0x2a7b4c11188 'num' 'unsigned int'
|   |           |     |   `-BinaryOperator 0x2a7b4c23228 <col:47, col:51> 'int' '+'
|   |           |     |     |-ImplicitCastExpr 0x2a7b4c23210 <col:47> 'int' <LValueToRValue>
|   |           |     |     | `-DeclRefExpr 0x2a7b4c231c8 <col:47> 'int' lvalue Var 0x2a7b4c11058 'i' 'int'
|   |           |     |     `-IntegerLiteral 0x2a7b4c231e8 <col:51> 'int' 2
|   |           |     `-IntegerLiteral 0x2a7b4c232a8 <col:57> 'int' 3
|   |           |-CompoundAssignOperator 0x2a7b4c23578 <line:1734:17, col:57> 'u64':'unsigned long long' '|=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |           | |-DeclRefExpr 0x2a7b4c23350 <col:17> 'u64':'unsigned long long' lvalue Var 0x2a7b4c116a8 'bits' 'u64':'unsigned long long'
|   |           | `-ImplicitCastExpr 0x2a7b4c23560 <col:25, col:57> 'unsigned long long' <IntegralCast>
|   |           |   `-BinaryOperator 0x2a7b4c23540 <col:25, col:57> 'int' '<<'
|   |           |     |-ImplicitCastExpr 0x2a7b4c23528 <col:25, col:52> 'int' <IntegralCast>
|   |           |     | `-CallExpr 0x2a7b4c234b8 <col:25, col:52> 'char'
|   |           |     |   |-ImplicitCastExpr 0x2a7b4c234a0 <col:25> 'char (*)(const u8 *, int)' <FunctionToPointerDecay>
|   |           |     |   | `-DeclRefExpr 0x2a7b4c23370 <col:25> 'char (const u8 *, int)' Function 0x2a7b4c1ff78 'get_bit' 'char (const u8 *, int)'
|   |           |     |   |-ImplicitCastExpr 0x2a7b4c234e8 <col:33, col:44> 'const u8 *' <ArrayToPointerDecay>
|   |           |     |   | `-ArraySubscriptExpr 0x2a7b4c23400 <col:33, col:44> 'const felem_bytearray':'u8 const[32]' lvalue
|   |           |     |   |   |-ImplicitCastExpr 0x2a7b4c233d0 <col:33> 'const felem_bytearray *':'const felem_bytearray *' <LValueToRValue>
|   |           |     |   |   | `-DeclRefExpr 0x2a7b4c23390 <col:33> 'const felem_bytearray *':'const felem_bytearray *' lvalue ParmVar 0x2a7b4c20700 'scalars' 'const felem_bytearray *':'const felem_bytearray *'
|   |           |     |   |   `-ImplicitCastExpr 0x2a7b4c233e8 <col:41> 'unsigned int' <LValueToRValue>
|   |           |     |   |     `-DeclRefExpr 0x2a7b4c233b0 <col:41> 'unsigned int' lvalue Var 0x2a7b4c11188 'num' 'unsigned int'
|   |           |     |   `-BinaryOperator 0x2a7b4c23480 <col:47, col:51> 'int' '+'
|   |           |     |     |-ImplicitCastExpr 0x2a7b4c23468 <col:47> 'int' <LValueToRValue>
|   |           |     |     | `-DeclRefExpr 0x2a7b4c23420 <col:47> 'int' lvalue Var 0x2a7b4c11058 'i' 'int'
|   |           |     |     `-IntegerLiteral 0x2a7b4c23440 <col:51> 'int' 1
|   |           |     `-IntegerLiteral 0x2a7b4c23500 <col:57> 'int' 2
|   |           |-CompoundAssignOperator 0x2a7b4c23788 <line:1735:17, col:53> 'u64':'unsigned long long' '|=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |           | |-DeclRefExpr 0x2a7b4c235a8 <col:17> 'u64':'unsigned long long' lvalue Var 0x2a7b4c116a8 'bits' 'u64':'unsigned long long'
|   |           | `-ImplicitCastExpr 0x2a7b4c23770 <col:25, col:53> 'unsigned long long' <IntegralCast>
|   |           |   `-BinaryOperator 0x2a7b4c23750 <col:25, col:53> 'int' '<<'
|   |           |     |-ImplicitCastExpr 0x2a7b4c23738 <col:25, col:48> 'int' <IntegralCast>
|   |           |     | `-CallExpr 0x2a7b4c236b0 <col:25, col:48> 'char'
|   |           |     |   |-ImplicitCastExpr 0x2a7b4c23698 <col:25> 'char (*)(const u8 *, int)' <FunctionToPointerDecay>
|   |           |     |   | `-DeclRefExpr 0x2a7b4c235c8 <col:25> 'char (const u8 *, int)' Function 0x2a7b4c1ff78 'get_bit' 'char (const u8 *, int)'
|   |           |     |   |-ImplicitCastExpr 0x2a7b4c236e0 <col:33, col:44> 'const u8 *' <ArrayToPointerDecay>
|   |           |     |   | `-ArraySubscriptExpr 0x2a7b4c23658 <col:33, col:44> 'const felem_bytearray':'u8 const[32]' lvalue
|   |           |     |   |   |-ImplicitCastExpr 0x2a7b4c23628 <col:33> 'const felem_bytearray *':'const felem_bytearray *' <LValueToRValue>
|   |           |     |   |   | `-DeclRefExpr 0x2a7b4c235e8 <col:33> 'const felem_bytearray *':'const felem_bytearray *' lvalue ParmVar 0x2a7b4c20700 'scalars' 'const felem_bytearray *':'const felem_bytearray *'
|   |           |     |   |   `-ImplicitCastExpr 0x2a7b4c23640 <col:41> 'unsigned int' <LValueToRValue>
|   |           |     |   |     `-DeclRefExpr 0x2a7b4c23608 <col:41> 'unsigned int' lvalue Var 0x2a7b4c11188 'num' 'unsigned int'
|   |           |     |   `-ImplicitCastExpr 0x2a7b4c236f8 <col:47> 'int' <LValueToRValue>
|   |           |     |     `-DeclRefExpr 0x2a7b4c23678 <col:47> 'int' lvalue Var 0x2a7b4c11058 'i' 'int'
|   |           |     `-IntegerLiteral 0x2a7b4c23710 <col:53> 'int' 1
|   |           |-CompoundAssignOperator 0x2a7b4c23980 <line:1736:17, col:52> 'u64':'unsigned long long' '|=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |           | |-DeclRefExpr 0x2a7b4c237b8 <col:17> 'u64':'unsigned long long' lvalue Var 0x2a7b4c116a8 'bits' 'u64':'unsigned long long'
|   |           | `-ImplicitCastExpr 0x2a7b4c23968 <col:25, col:52> 'unsigned long long' <IntegralCast>
|   |           |   `-CallExpr 0x2a7b4c23920 <col:25, col:52> 'char'
|   |           |     |-ImplicitCastExpr 0x2a7b4c23908 <col:25> 'char (*)(const u8 *, int)' <FunctionToPointerDecay>
|   |           |     | `-DeclRefExpr 0x2a7b4c237d8 <col:25> 'char (const u8 *, int)' Function 0x2a7b4c1ff78 'get_bit' 'char (const u8 *, int)'
|   |           |     |-ImplicitCastExpr 0x2a7b4c23950 <col:33, col:44> 'const u8 *' <ArrayToPointerDecay>
|   |           |     | `-ArraySubscriptExpr 0x2a7b4c23868 <col:33, col:44> 'const felem_bytearray':'u8 const[32]' lvalue
|   |           |     |   |-ImplicitCastExpr 0x2a7b4c23838 <col:33> 'const felem_bytearray *':'const felem_bytearray *' <LValueToRValue>
|   |           |     |   | `-DeclRefExpr 0x2a7b4c237f8 <col:33> 'const felem_bytearray *':'const felem_bytearray *' lvalue ParmVar 0x2a7b4c20700 'scalars' 'const felem_bytearray *':'const felem_bytearray *'
|   |           |     |   `-ImplicitCastExpr 0x2a7b4c23850 <col:41> 'unsigned int' <LValueToRValue>
|   |           |     |     `-DeclRefExpr 0x2a7b4c23818 <col:41> 'unsigned int' lvalue Var 0x2a7b4c11188 'num' 'unsigned int'
|   |           |     `-BinaryOperator 0x2a7b4c238e8 <col:47, col:51> 'int' '-'
|   |           |       |-ImplicitCastExpr 0x2a7b4c238d0 <col:47> 'int' <LValueToRValue>
|   |           |       | `-DeclRefExpr 0x2a7b4c23888 <col:47> 'int' lvalue Var 0x2a7b4c11058 'i' 'int'
|   |           |       `-IntegerLiteral 0x2a7b4c238a8 <col:51> 'int' 1
|   |           |-CallExpr 0x2a7b4c23ad0 <line:1737:17, col:68> 'void'
|   |           | |-ImplicitCastExpr 0x2a7b4c23ab8 <col:17> 'void (*)(unsigned char *, unsigned char *, unsigned char)' <FunctionToPointerDecay>
|   |           | | `-DeclRefExpr 0x2a7b4c239b0 <col:17> 'void (unsigned char *, unsigned char *, unsigned char)' Function 0x2a7b4a9c168 'ec_GFp_nistp_recode_scalar_bits' 'void (unsigned char *, unsigned char *, unsigned char)'
|   |           | |-UnaryOperator 0x2a7b4c23a08 <col:49, col:50> 'u8 *' prefix '&' cannot overflow
|   |           | | `-DeclRefExpr 0x2a7b4c239d0 <col:50> 'u8':'unsigned char' lvalue Var 0x2a7b4c11738 'sign' 'u8':'unsigned char'
|   |           | |-UnaryOperator 0x2a7b4c23a58 <col:56, col:57> 'u8 *' prefix '&' cannot overflow
|   |           | | `-DeclRefExpr 0x2a7b4c23a20 <col:57> 'u8':'unsigned char' lvalue Var 0x2a7b4c117b0 'digit' 'u8':'unsigned char'
|   |           | `-ImplicitCastExpr 0x2a7b4c23b20 <col:64> 'unsigned char' <IntegralCast>
|   |           |   `-ImplicitCastExpr 0x2a7b4c23b08 <col:64> 'u64':'unsigned long long' <LValueToRValue>
|   |           |     `-DeclRefExpr 0x2a7b4c23a70 <col:64> 'u64':'unsigned long long' lvalue Var 0x2a7b4c116a8 'bits' 'u64':'unsigned long long'
|   |           |-CallExpr 0x2a7b4c23c68 <line:1742:17, col:59> 'void'
|   |           | |-ImplicitCastExpr 0x2a7b4c23c50 <col:17> 'void (*)(const u64, unsigned int, const smallfelem (*)[3], smallfelem *)' <FunctionToPointerDecay>
|   |           | | `-DeclRefExpr 0x2a7b4c23b38 <col:17> 'void (const u64, unsigned int, const smallfelem (*)[3], smallfelem *)' Function 0x2a7b4c1eaa8 'select_point' 'void (const u64, unsigned int, const smallfelem (*)[3], smallfelem *)'
|   |           | |-ImplicitCastExpr 0x2a7b4c23cc0 <col:30> 'u64':'unsigned long long' <IntegralCast>
|   |           | | `-ImplicitCastExpr 0x2a7b4c23ca8 <col:30> 'u8':'unsigned char' <LValueToRValue>
|   |           | |   `-DeclRefExpr 0x2a7b4c23b58 <col:30> 'u8':'unsigned char' lvalue Var 0x2a7b4c117b0 'digit' 'u8':'unsigned char'
|   |           | |-ImplicitCastExpr 0x2a7b4c23cd8 <col:37> 'unsigned int' <IntegralCast>
|   |           | | `-IntegerLiteral 0x2a7b4c23b78 <col:37> 'int' 17
|   |           | |-ImplicitCastExpr 0x2a7b4c23cf0 <col:41, col:53> 'const smallfelem (*)[3]' <ArrayToPointerDecay>
|   |           | | `-ArraySubscriptExpr 0x2a7b4c23c10 <col:41, col:53> 'const smallfelem [17][3]' lvalue
|   |           | |   |-ImplicitCastExpr 0x2a7b4c23be0 <col:41> 'const smallfelem (*)[17][3]':'const smallfelem (*)[17][3]' <LValueToRValue>
|   |           | |   | `-DeclRefExpr 0x2a7b4c23ba0 <col:41> 'const smallfelem (*)[17][3]':'const smallfelem (*)[17][3]' lvalue ParmVar 0x2a7b4c20b10 'pre_comp' 'const smallfelem (*)[17][3]':'const smallfelem (*)[17][3]'
|   |           | |   `-ImplicitCastExpr 0x2a7b4c23bf8 <col:50> 'unsigned int' <LValueToRValue>
|   |           | |     `-DeclRefExpr 0x2a7b4c23bc0 <col:50> 'unsigned int' lvalue Var 0x2a7b4c11188 'num' 'unsigned int'
|   |           | `-ImplicitCastExpr 0x2a7b4c23d08 <col:56> 'smallfelem *' <ArrayToPointerDecay>
|   |           |   `-DeclRefExpr 0x2a7b4c23c30 <col:56> 'smallfelem [3]' lvalue Var 0x2a7b4c11618 'tmp' 'smallfelem [3]'
|   |           |-CallExpr 0x2a7b4c23e10 <line:1743:17, col:44> 'void'
|   |           | |-ImplicitCastExpr 0x2a7b4c23df8 <col:17> 'void (*)(limb *, const u64 *)' <FunctionToPointerDecay>
|   |           | | `-DeclRefExpr 0x2a7b4c23d20 <col:17> 'void (limb *, const u64 *)' Function 0x2a7b49f72c8 'smallfelem_neg' 'void (limb *, const u64 *)'
|   |           | |-ImplicitCastExpr 0x2a7b4c23e40 <col:32> 'limb *' <ArrayToPointerDecay>
|   |           | | `-DeclRefExpr 0x2a7b4c23d40 <col:32> 'felem':'limb [4]' lvalue Var 0x2a7b4c11520 'ftmp' 'felem':'limb [4]'
|   |           | `-ImplicitCastExpr 0x2a7b4c23e70 <col:38, col:43> 'const u64 *':'const u64 *' <NoOp>
|   |           |   `-ImplicitCastExpr 0x2a7b4c23e58 <col:38, col:43> 'u64 *' <ArrayToPointerDecay>
|   |           |     `-ArraySubscriptExpr 0x2a7b4c23dd8 <col:38, col:43> 'smallfelem':'u64 [4]' lvalue
|   |           |       |-ImplicitCastExpr 0x2a7b4c23dc0 <col:38> 'smallfelem *' <ArrayToPointerDecay>
|   |           |       | `-DeclRefExpr 0x2a7b4c23d78 <col:38> 'smallfelem [3]' lvalue Var 0x2a7b4c11618 'tmp' 'smallfelem [3]'
|   |           |       `-IntegerLiteral 0x2a7b4c23d98 <col:42> 'int' 1
|   |           |-CallExpr 0x2a7b4c24058 <line:1745:17, col:73> 'void'
|   |           | |-ImplicitCastExpr 0x2a7b4c24040 <col:17> 'void (*)(limb *, const u64 *, limb)' <FunctionToPointerDecay>
|   |           | | `-DeclRefExpr 0x2a7b4c23e88 <col:17> 'void (limb *, const u64 *, limb)' Function 0x2a7b4b05e28 'copy_small_conditional' 'void (limb *, const u64 *, limb)'
|   |           | |-ImplicitCastExpr 0x2a7b4c24090 <col:40> 'limb *' <ArrayToPointerDecay>
|   |           | | `-DeclRefExpr 0x2a7b4c23ea8 <col:40> 'felem':'limb [4]' lvalue Var 0x2a7b4c11520 'ftmp' 'felem':'limb [4]'
|   |           | |-ImplicitCastExpr 0x2a7b4c240c0 <col:46, col:51> 'const u64 *':'const u64 *' <NoOp>
|   |           | | `-ImplicitCastExpr 0x2a7b4c240a8 <col:46, col:51> 'u64 *' <ArrayToPointerDecay>
|   |           | |   `-ArraySubscriptExpr 0x2a7b4c23f28 <col:46, col:51> 'smallfelem':'u64 [4]' lvalue
|   |           | |     |-ImplicitCastExpr 0x2a7b4c23f10 <col:46> 'smallfelem *' <ArrayToPointerDecay>
|   |           | |     | `-DeclRefExpr 0x2a7b4c23ec8 <col:46> 'smallfelem [3]' lvalue Var 0x2a7b4c11618 'tmp' 'smallfelem [3]'
|   |           | |     `-IntegerLiteral 0x2a7b4c23ee8 <col:50> 'int' 1
|   |           | `-ParenExpr 0x2a7b4c24020 <col:54, col:72> 'int'
|   |           |   `-BinaryOperator 0x2a7b4c24000 <col:55, col:71> 'int' '-'
|   |           |     |-ParenExpr 0x2a7b4c23fb8 <col:55, col:67> 'limb':'int'
|   |           |     | `-CStyleCastExpr 0x2a7b4c23f90 <col:56, col:63> 'limb':'int' <IntegralCast>
|   |           |     |   `-ImplicitCastExpr 0x2a7b4c23f78 <col:63> 'u8':'unsigned char' <LValueToRValue> part_of_explicit_cast
|   |           |     |     `-DeclRefExpr 0x2a7b4c23f48 <col:63> 'u8':'unsigned char' lvalue Var 0x2a7b4c11738 'sign' 'u8':'unsigned char'
|   |           |     `-IntegerLiteral 0x2a7b4c23fd8 <col:71> 'int' 1
|   |           |-CallExpr 0x2a7b4c241b0 <line:1746:17, col:44> 'void'
|   |           | |-ImplicitCastExpr 0x2a7b4c24198 <col:17> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|   |           | | `-DeclRefExpr 0x2a7b4c240d8 <col:17> 'void (u64 *, const limb *)' Function 0x2a7b4aeffe8 'felem_contract' 'void (u64 *, const limb *)'
|   |           | |-ImplicitCastExpr 0x2a7b4c241e0 <col:32, col:37> 'u64 *' <ArrayToPointerDecay>
|   |           | | `-ArraySubscriptExpr 0x2a7b4c24158 <col:32, col:37> 'smallfelem':'u64 [4]' lvalue
|   |           | |   |-ImplicitCastExpr 0x2a7b4c24140 <col:32> 'smallfelem *' <ArrayToPointerDecay>
|   |           | |   | `-DeclRefExpr 0x2a7b4c240f8 <col:32> 'smallfelem [3]' lvalue Var 0x2a7b4c11618 'tmp' 'smallfelem [3]'
|   |           | |   `-IntegerLiteral 0x2a7b4c24118 <col:36> 'int' 1
|   |           | `-ImplicitCastExpr 0x2a7b4c24210 <col:40> 'const limb *':'const limb *' <NoOp>
|   |           |   `-ImplicitCastExpr 0x2a7b4c241f8 <col:40> 'limb *' <ArrayToPointerDecay>
|   |           |     `-DeclRefExpr 0x2a7b4c24178 <col:40> 'felem':'limb [4]' lvalue Var 0x2a7b4c11520 'ftmp' 'felem':'limb [4]'
|   |           `-IfStmt 0x2a7b4c24f00 <line:1748:17, line:1757:17> has_else
|   |             |-UnaryOperator 0x2a7b4c24260 <line:1748:21, col:22> 'int' prefix '!' cannot overflow
|   |             | `-ImplicitCastExpr 0x2a7b4c24248 <col:22> 'int' <LValueToRValue>
|   |             |   `-DeclRefExpr 0x2a7b4c24228 <col:22> 'int' lvalue Var 0x2a7b4c110d8 'skip' 'int'
|   |             |-CompoundStmt 0x2a7b4c24940 <col:28, line:1752:17>
|   |             | `-CallExpr 0x2a7b4c24750 <line:1749:21, line:1751:60> 'void'
|   |             |   |-ImplicitCastExpr 0x2a7b4c24738 <line:1749:21> 'void (*)(limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const u64 *, const u64 *, const u64 *)' <FunctionToPointerDecay>
|   |             |   | `-DeclRefExpr 0x2a7b4c24278 <col:21> 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const u64 *, const u64 *, const u64 *)' Function 0x2a7b4b06d68 'point_add' 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const u64 *, const u64 *, const u64 *)'
|   |             |   |-ImplicitCastExpr 0x2a7b4c247c0 <col:31, col:35> 'limb *' <ArrayToPointerDecay>
|   |             |   | `-ArraySubscriptExpr 0x2a7b4c242f8 <col:31, col:35> 'felem':'limb [4]' lvalue
|   |             |   |   |-ImplicitCastExpr 0x2a7b4c242e0 <col:31> 'felem *' <ArrayToPointerDecay>
|   |             |   |   | `-DeclRefExpr 0x2a7b4c24298 <col:31> 'felem [3]' lvalue Var 0x2a7b4c114a8 'nq' 'felem [3]'
|   |             |   |   `-IntegerLiteral 0x2a7b4c242b8 <col:34> 'int' 0
|   |             |   |-ImplicitCastExpr 0x2a7b4c247d8 <col:38, col:42> 'limb *' <ArrayToPointerDecay>
|   |             |   | `-ArraySubscriptExpr 0x2a7b4c24378 <col:38, col:42> 'felem':'limb [4]' lvalue
|   |             |   |   |-ImplicitCastExpr 0x2a7b4c24360 <col:38> 'felem *' <ArrayToPointerDecay>
|   |             |   |   | `-DeclRefExpr 0x2a7b4c24318 <col:38> 'felem [3]' lvalue Var 0x2a7b4c114a8 'nq' 'felem [3]'
|   |             |   |   `-IntegerLiteral 0x2a7b4c24338 <col:41> 'int' 1
|   |             |   |-ImplicitCastExpr 0x2a7b4c247f0 <col:45, col:49> 'limb *' <ArrayToPointerDecay>
|   |             |   | `-ArraySubscriptExpr 0x2a7b4c243f8 <col:45, col:49> 'felem':'limb [4]' lvalue
|   |             |   |   |-ImplicitCastExpr 0x2a7b4c243e0 <col:45> 'felem *' <ArrayToPointerDecay>
|   |             |   |   | `-DeclRefExpr 0x2a7b4c24398 <col:45> 'felem [3]' lvalue Var 0x2a7b4c114a8 'nq' 'felem [3]'
|   |             |   |   `-IntegerLiteral 0x2a7b4c243b8 <col:48> 'int' 2
|   |             |   |-ImplicitCastExpr 0x2a7b4c24820 <line:1750:31, col:35> 'const limb *':'const limb *' <NoOp>
|   |             |   | `-ImplicitCastExpr 0x2a7b4c24808 <col:31, col:35> 'limb *' <ArrayToPointerDecay>
|   |             |   |   `-ArraySubscriptExpr 0x2a7b4c24478 <col:31, col:35> 'felem':'limb [4]' lvalue
|   |             |   |     |-ImplicitCastExpr 0x2a7b4c24460 <col:31> 'felem *' <ArrayToPointerDecay>
|   |             |   |     | `-DeclRefExpr 0x2a7b4c24418 <col:31> 'felem [3]' lvalue Var 0x2a7b4c114a8 'nq' 'felem [3]'
|   |             |   |     `-IntegerLiteral 0x2a7b4c24438 <col:34> 'int' 0
|   |             |   |-ImplicitCastExpr 0x2a7b4c24850 <col:38, col:42> 'const limb *':'const limb *' <NoOp>
|   |             |   | `-ImplicitCastExpr 0x2a7b4c24838 <col:38, col:42> 'limb *' <ArrayToPointerDecay>
|   |             |   |   `-ArraySubscriptExpr 0x2a7b4c244f8 <col:38, col:42> 'felem':'limb [4]' lvalue
|   |             |   |     |-ImplicitCastExpr 0x2a7b4c244e0 <col:38> 'felem *' <ArrayToPointerDecay>
|   |             |   |     | `-DeclRefExpr 0x2a7b4c24498 <col:38> 'felem [3]' lvalue Var 0x2a7b4c114a8 'nq' 'felem [3]'
|   |             |   |     `-IntegerLiteral 0x2a7b4c244b8 <col:41> 'int' 1
|   |             |   |-ImplicitCastExpr 0x2a7b4c24880 <col:45, col:49> 'const limb *':'const limb *' <NoOp>
|   |             |   | `-ImplicitCastExpr 0x2a7b4c24868 <col:45, col:49> 'limb *' <ArrayToPointerDecay>
|   |             |   |   `-ArraySubscriptExpr 0x2a7b4c24578 <col:45, col:49> 'felem':'limb [4]' lvalue
|   |             |   |     |-ImplicitCastExpr 0x2a7b4c24560 <col:45> 'felem *' <ArrayToPointerDecay>
|   |             |   |     | `-DeclRefExpr 0x2a7b4c24518 <col:45> 'felem [3]' lvalue Var 0x2a7b4c114a8 'nq' 'felem [3]'
|   |             |   |     `-IntegerLiteral 0x2a7b4c24538 <col:48> 'int' 2
|   |             |   |-ImplicitCastExpr 0x2a7b4c24898 <line:1751:31> 'int' <LValueToRValue>
|   |             |   | `-DeclRefExpr 0x2a7b4c24598 <col:31> 'const int' lvalue ParmVar 0x2a7b4c20878 'mixed' 'const int'
|   |             |   |-ImplicitCastExpr 0x2a7b4c248c8 <col:38, col:43> 'const u64 *':'const u64 *' <NoOp>
|   |             |   | `-ImplicitCastExpr 0x2a7b4c248b0 <col:38, col:43> 'u64 *' <ArrayToPointerDecay>
|   |             |   |   `-ArraySubscriptExpr 0x2a7b4c24618 <col:38, col:43> 'smallfelem':'u64 [4]' lvalue
|   |             |   |     |-ImplicitCastExpr 0x2a7b4c24600 <col:38> 'smallfelem *' <ArrayToPointerDecay>
|   |             |   |     | `-DeclRefExpr 0x2a7b4c245b8 <col:38> 'smallfelem [3]' lvalue Var 0x2a7b4c11618 'tmp' 'smallfelem [3]'
|   |             |   |     `-IntegerLiteral 0x2a7b4c245d8 <col:42> 'int' 0
|   |             |   |-ImplicitCastExpr 0x2a7b4c248f8 <col:46, col:51> 'const u64 *':'const u64 *' <NoOp>
|   |             |   | `-ImplicitCastExpr 0x2a7b4c248e0 <col:46, col:51> 'u64 *' <ArrayToPointerDecay>
|   |             |   |   `-ArraySubscriptExpr 0x2a7b4c24698 <col:46, col:51> 'smallfelem':'u64 [4]' lvalue
|   |             |   |     |-ImplicitCastExpr 0x2a7b4c24680 <col:46> 'smallfelem *' <ArrayToPointerDecay>
|   |             |   |     | `-DeclRefExpr 0x2a7b4c24638 <col:46> 'smallfelem [3]' lvalue Var 0x2a7b4c11618 'tmp' 'smallfelem [3]'
|   |             |   |     `-IntegerLiteral 0x2a7b4c24658 <col:50> 'int' 1
|   |             |   `-ImplicitCastExpr 0x2a7b4c24928 <col:54, col:59> 'const u64 *':'const u64 *' <NoOp>
|   |             |     `-ImplicitCastExpr 0x2a7b4c24910 <col:54, col:59> 'u64 *' <ArrayToPointerDecay>
|   |             |       `-ArraySubscriptExpr 0x2a7b4c24718 <col:54, col:59> 'smallfelem':'u64 [4]' lvalue
|   |             |         |-ImplicitCastExpr 0x2a7b4c24700 <col:54> 'smallfelem *' <ArrayToPointerDecay>
|   |             |         | `-DeclRefExpr 0x2a7b4c246b8 <col:54> 'smallfelem [3]' lvalue Var 0x2a7b4c11618 'tmp' 'smallfelem [3]'
|   |             |         `-IntegerLiteral 0x2a7b4c246d8 <col:58> 'int' 2
|   |             `-CompoundStmt 0x2a7b4c24ed0 <line:1752:24, line:1757:17>
|   |               |-CallExpr 0x2a7b4c24a90 <line:1753:21, col:52> 'void'
|   |               | |-ImplicitCastExpr 0x2a7b4c24a78 <col:21> 'void (*)(limb *, const u64 *)' <FunctionToPointerDecay>
|   |               | | `-DeclRefExpr 0x2a7b4c24958 <col:21> 'void (limb *, const u64 *)' Function 0x2a7b4a01120 'smallfelem_expand' 'void (limb *, const u64 *)'
|   |               | |-ImplicitCastExpr 0x2a7b4c24ac0 <col:39, col:43> 'limb *' <ArrayToPointerDecay>
|   |               | | `-ArraySubscriptExpr 0x2a7b4c249d8 <col:39, col:43> 'felem':'limb [4]' lvalue
|   |               | |   |-ImplicitCastExpr 0x2a7b4c249c0 <col:39> 'felem *' <ArrayToPointerDecay>
|   |               | |   | `-DeclRefExpr 0x2a7b4c24978 <col:39> 'felem [3]' lvalue Var 0x2a7b4c114a8 'nq' 'felem [3]'
|   |               | |   `-IntegerLiteral 0x2a7b4c24998 <col:42> 'int' 0
|   |               | `-ImplicitCastExpr 0x2a7b4c24af0 <col:46, col:51> 'const u64 *':'const u64 *' <NoOp>
|   |               |   `-ImplicitCastExpr 0x2a7b4c24ad8 <col:46, col:51> 'u64 *' <ArrayToPointerDecay>
|   |               |     `-ArraySubscriptExpr 0x2a7b4c24a58 <col:46, col:51> 'smallfelem':'u64 [4]' lvalue
|   |               |       |-ImplicitCastExpr 0x2a7b4c24a40 <col:46> 'smallfelem *' <ArrayToPointerDecay>
|   |               |       | `-DeclRefExpr 0x2a7b4c249f8 <col:46> 'smallfelem [3]' lvalue Var 0x2a7b4c11618 'tmp' 'smallfelem [3]'
|   |               |       `-IntegerLiteral 0x2a7b4c24a18 <col:50> 'int' 0
|   |               |-CallExpr 0x2a7b4c24c40 <line:1754:21, col:52> 'void'
|   |               | |-ImplicitCastExpr 0x2a7b4c24c28 <col:21> 'void (*)(limb *, const u64 *)' <FunctionToPointerDecay>
|   |               | | `-DeclRefExpr 0x2a7b4c24b08 <col:21> 'void (limb *, const u64 *)' Function 0x2a7b4a01120 'smallfelem_expand' 'void (limb *, const u64 *)'
|   |               | |-ImplicitCastExpr 0x2a7b4c24c70 <col:39, col:43> 'limb *' <ArrayToPointerDecay>
|   |               | | `-ArraySubscriptExpr 0x2a7b4c24b88 <col:39, col:43> 'felem':'limb [4]' lvalue
|   |               | |   |-ImplicitCastExpr 0x2a7b4c24b70 <col:39> 'felem *' <ArrayToPointerDecay>
|   |               | |   | `-DeclRefExpr 0x2a7b4c24b28 <col:39> 'felem [3]' lvalue Var 0x2a7b4c114a8 'nq' 'felem [3]'
|   |               | |   `-IntegerLiteral 0x2a7b4c24b48 <col:42> 'int' 1
|   |               | `-ImplicitCastExpr 0x2a7b4c24ca0 <col:46, col:51> 'const u64 *':'const u64 *' <NoOp>
|   |               |   `-ImplicitCastExpr 0x2a7b4c24c88 <col:46, col:51> 'u64 *' <ArrayToPointerDecay>
|   |               |     `-ArraySubscriptExpr 0x2a7b4c24c08 <col:46, col:51> 'smallfelem':'u64 [4]' lvalue
|   |               |       |-ImplicitCastExpr 0x2a7b4c24bf0 <col:46> 'smallfelem *' <ArrayToPointerDecay>
|   |               |       | `-DeclRefExpr 0x2a7b4c24ba8 <col:46> 'smallfelem [3]' lvalue Var 0x2a7b4c11618 'tmp' 'smallfelem [3]'
|   |               |       `-IntegerLiteral 0x2a7b4c24bc8 <col:50> 'int' 1
|   |               |-CallExpr 0x2a7b4c24df0 <line:1755:21, col:52> 'void'
|   |               | |-ImplicitCastExpr 0x2a7b4c24dd8 <col:21> 'void (*)(limb *, const u64 *)' <FunctionToPointerDecay>
|   |               | | `-DeclRefExpr 0x2a7b4c24cb8 <col:21> 'void (limb *, const u64 *)' Function 0x2a7b4a01120 'smallfelem_expand' 'void (limb *, const u64 *)'
|   |               | |-ImplicitCastExpr 0x2a7b4c24e20 <col:39, col:43> 'limb *' <ArrayToPointerDecay>
|   |               | | `-ArraySubscriptExpr 0x2a7b4c24d38 <col:39, col:43> 'felem':'limb [4]' lvalue
|   |               | |   |-ImplicitCastExpr 0x2a7b4c24d20 <col:39> 'felem *' <ArrayToPointerDecay>
|   |               | |   | `-DeclRefExpr 0x2a7b4c24cd8 <col:39> 'felem [3]' lvalue Var 0x2a7b4c114a8 'nq' 'felem [3]'
|   |               | |   `-IntegerLiteral 0x2a7b4c24cf8 <col:42> 'int' 2
|   |               | `-ImplicitCastExpr 0x2a7b4c24e50 <col:46, col:51> 'const u64 *':'const u64 *' <NoOp>
|   |               |   `-ImplicitCastExpr 0x2a7b4c24e38 <col:46, col:51> 'u64 *' <ArrayToPointerDecay>
|   |               |     `-ArraySubscriptExpr 0x2a7b4c24db8 <col:46, col:51> 'smallfelem':'u64 [4]' lvalue
|   |               |       |-ImplicitCastExpr 0x2a7b4c24da0 <col:46> 'smallfelem *' <ArrayToPointerDecay>
|   |               |       | `-DeclRefExpr 0x2a7b4c24d58 <col:46> 'smallfelem [3]' lvalue Var 0x2a7b4c11618 'tmp' 'smallfelem [3]'
|   |               |       `-IntegerLiteral 0x2a7b4c24d78 <col:50> 'int' 2
|   |               `-BinaryOperator 0x2a7b4c24eb0 <line:1756:21, col:28> 'int' '='
|   |                 |-DeclRefExpr 0x2a7b4c24e68 <col:21> 'int' lvalue Var 0x2a7b4c110d8 'skip' 'int'
|   |                 `-IntegerLiteral 0x2a7b4c24e88 <col:28> 'int' 0
|   |-CallExpr 0x2a7b4c27158 <line:1761:5, col:30> 'void'
|   | |-ImplicitCastExpr 0x2a7b4c27140 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4c27080 <col:5> 'void (limb *, const limb *)' Function 0x2a7b49f4048 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4c27188 <col:18> 'limb *':'limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x2a7b4c270a0 <col:18> 'limb *':'limb *' lvalue ParmVar 0x2a7b4c20490 'x_out' 'limb *':'limb *'
|   | `-ImplicitCastExpr 0x2a7b4c271b8 <col:25, col:29> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4c271a0 <col:25, col:29> 'limb *' <ArrayToPointerDecay>
|   |     `-ArraySubscriptExpr 0x2a7b4c27120 <col:25, col:29> 'felem':'limb [4]' lvalue
|   |       |-ImplicitCastExpr 0x2a7b4c27108 <col:25> 'felem *' <ArrayToPointerDecay>
|   |       | `-DeclRefExpr 0x2a7b4c270c0 <col:25> 'felem [3]' lvalue Var 0x2a7b4c114a8 'nq' 'felem [3]'
|   |       `-IntegerLiteral 0x2a7b4c270e0 <col:28> 'int' 0
|   |-CallExpr 0x2a7b4c272a8 <line:1762:5, col:30> 'void'
|   | |-ImplicitCastExpr 0x2a7b4c27290 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4c271d0 <col:5> 'void (limb *, const limb *)' Function 0x2a7b49f4048 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4c272d8 <col:18> 'limb *':'limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x2a7b4c271f0 <col:18> 'limb *':'limb *' lvalue ParmVar 0x2a7b4c20508 'y_out' 'limb *':'limb *'
|   | `-ImplicitCastExpr 0x2a7b4c27308 <col:25, col:29> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4c272f0 <col:25, col:29> 'limb *' <ArrayToPointerDecay>
|   |     `-ArraySubscriptExpr 0x2a7b4c27270 <col:25, col:29> 'felem':'limb [4]' lvalue
|   |       |-ImplicitCastExpr 0x2a7b4c27258 <col:25> 'felem *' <ArrayToPointerDecay>
|   |       | `-DeclRefExpr 0x2a7b4c27210 <col:25> 'felem [3]' lvalue Var 0x2a7b4c114a8 'nq' 'felem [3]'
|   |       `-IntegerLiteral 0x2a7b4c27230 <col:28> 'int' 1
|   `-CallExpr 0x2a7b4c273f8 <line:1763:5, col:30> 'void'
|     |-ImplicitCastExpr 0x2a7b4c273e0 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x2a7b4c27320 <col:5> 'void (limb *, const limb *)' Function 0x2a7b49f4048 'felem_assign' 'void (limb *, const limb *)'
|     |-ImplicitCastExpr 0x2a7b4c27428 <col:18> 'limb *':'limb *' <LValueToRValue>
|     | `-DeclRefExpr 0x2a7b4c27340 <col:18> 'limb *':'limb *' lvalue ParmVar 0x2a7b4c20580 'z_out' 'limb *':'limb *'
|     `-ImplicitCastExpr 0x2a7b4c27458 <col:25, col:29> 'const limb *':'const limb *' <NoOp>
|       `-ImplicitCastExpr 0x2a7b4c27440 <col:25, col:29> 'limb *' <ArrayToPointerDecay>
|         `-ArraySubscriptExpr 0x2a7b4c273c0 <col:25, col:29> 'felem':'limb [4]' lvalue
|           |-ImplicitCastExpr 0x2a7b4c273a8 <col:25> 'felem *' <ArrayToPointerDecay>
|           | `-DeclRefExpr 0x2a7b4c27360 <col:25> 'felem [3]' lvalue Var 0x2a7b4c114a8 'nq' 'felem [3]'
|           `-IntegerLiteral 0x2a7b4c27380 <col:28> 'int' 2
|-RecordDecl 0x2a7b4c274e0 prev 0x2a7b4a80418 <line:1767:1, line:1771:1> line:1767:8 invalid struct nistp256_pre_comp_st definition
| |-FieldDecl 0x2a7b4c276d8 <line:1768:5, col:35> col:16 referenced g_pre_comp 'smallfelem [2][16][3]'
| |-FieldDecl 0x2a7b4c27748 <line:1769:5, col:9> col:9 referenced references 'int'
| `-FieldDecl 0x2a7b4c277b8 <line:1770:5, col:20> col:20 invalid lock 'int *'
|-FunctionDecl 0x2a7b4c278e0 <line:1773:1, line:1828:1> line:1773:18 invalid EC_GFp_nistp256_method 'const int *(void)'
| `-CompoundStmt 0x2a7b4c27c18 <line:1774:1, line:1828:1>
|   `-DeclStmt 0x2a7b4c27bd0 <line:1775:5, line:1825:6>
|     `-VarDecl 0x2a7b4c279b0 <line:1775:5, col:28> col:28 invalid ret 'const int' static
|-FunctionDecl 0x2a7b4c27ca8 <line:1835:1, line:1853:1> line:1835:27 used nistp256_pre_comp_new 'NISTP256_PRE_COMP *()' static
| |-CompoundStmt 0x2a7b4c287a0 <line:1836:1, line:1853:1>
| | |-DeclStmt 0x2a7b4c28000 <line:1837:5, col:58>
| | | `-VarDecl 0x2a7b4c27d70 <col:5, col:57> col:24 used ret 'NISTP256_PRE_COMP *' cinit
| | |   `-ImplicitCastExpr 0x2a7b4c27fe8 <col:30, col:57> 'NISTP256_PRE_COMP *' <IntegralToPointer>
| | |     `-CallExpr 0x2a7b4c27fc0 <col:30, col:57> 'int'
| | |       |-ImplicitCastExpr 0x2a7b4c27fa8 <col:30> 'int (*)()' <FunctionToPointerDecay>
| | |       | `-DeclRefExpr 0x2a7b4c27ec8 <col:30> 'int ()' Function 0x2a7b4c27e00 'OPENSSL_zalloc' 'int ()'
| | |       `-UnaryExprOrTypeTraitExpr 0x2a7b4c27f58 <col:45, col:56> 'unsigned long long' sizeof
| | |         `-ParenExpr 0x2a7b4c27f38 <col:51, col:56> 'NISTP256_PRE_COMP':'struct nistp256_pre_comp_st' lvalue
| | |           `-UnaryOperator 0x2a7b4c27f20 <col:52, col:53> 'NISTP256_PRE_COMP':'struct nistp256_pre_comp_st' lvalue prefix '*' cannot overflow
| | |             `-ImplicitCastExpr 0x2a7b4c27f08 <col:53> 'NISTP256_PRE_COMP *' <LValueToRValue>
| | |               `-DeclRefExpr 0x2a7b4c27ee8 <col:53> 'NISTP256_PRE_COMP *' lvalue Var 0x2a7b4c27d70 'ret' 'NISTP256_PRE_COMP *' non_odr_use_unevaluated
| | |-IfStmt 0x2a7b4c281a8 <line:1839:5, line:1842:5>
| | | |-BinaryOperator 0x2a7b4c28108 <line:1839:9, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27> 'int' '=='
| | | | |-ImplicitCastExpr 0x2a7b4c280d8 <.//openssl//file_jk/before\crypto\ec\ecp_nistp256.c:1839:9> 'NISTP256_PRE_COMP *' <LValueToRValue>
| | | | | `-DeclRefExpr 0x2a7b4c28018 <col:9> 'NISTP256_PRE_COMP *' lvalue Var 0x2a7b4c27d70 'ret' 'NISTP256_PRE_COMP *'
| | | | `-ImplicitCastExpr 0x2a7b4c280f0 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'NISTP256_PRE_COMP *' <BitCast>
| | | |   `-ParenExpr 0x2a7b4c280b8 <col:17, col:27> 'void *'
| | | |     `-CStyleCastExpr 0x2a7b4c28090 <col:18, col:26> 'void *' <NullToPointer>
| | | |       `-IntegerLiteral 0x2a7b4c28050 <col:26> 'int' 0
| | | `-CompoundStmt 0x2a7b4c28190 <.//openssl//file_jk/before\crypto\ec\ecp_nistp256.c:1839:22, line:1842:5>
| | |   `-ReturnStmt 0x2a7b4c28180 <line:1841:9, col:16>
| | |     `-ImplicitCastExpr 0x2a7b4c28168 <col:16> 'NISTP256_PRE_COMP *' <LValueToRValue>
| | |       `-DeclRefExpr 0x2a7b4c28148 <col:16> 'NISTP256_PRE_COMP *' lvalue Var 0x2a7b4c27d70 'ret' 'NISTP256_PRE_COMP *'
| | |-BinaryOperator 0x2a7b4c28250 <line:1844:5, col:23> 'int' '='
| | | |-MemberExpr 0x2a7b4c281f8 <col:5, col:10> 'int' lvalue ->references 0x2a7b4c27748
| | | | `-ImplicitCastExpr 0x2a7b4c281e0 <col:5> 'NISTP256_PRE_COMP *' <LValueToRValue>
| | | |   `-DeclRefExpr 0x2a7b4c281c0 <col:5> 'NISTP256_PRE_COMP *' lvalue Var 0x2a7b4c27d70 'ret' 'NISTP256_PRE_COMP *'
| | | `-IntegerLiteral 0x2a7b4c28228 <col:23> 'int' 1
| | |-IfStmt 0x2a7b4c28740 <line:1847:5, line:1851:5>
| | | |-OpaqueValueExpr 0x2a7b4c28728 <<invalid sloc>> '_Bool'
| | | `-CompoundStmt 0x2a7b4c28708 <line:1847:28, line:1851:5>
| | |   |-CallExpr 0x2a7b4c28618 <line:1849:9, col:25> 'int'
| | |   | |-ImplicitCastExpr 0x2a7b4c28600 <col:9> 'int (*)()' <FunctionToPointerDecay>
| | |   | | `-DeclRefExpr 0x2a7b4c285c0 <col:9> 'int ()' Function 0x2a7b4c284f8 'OPENSSL_free' 'int ()'
| | |   | `-ImplicitCastExpr 0x2a7b4c28640 <col:22> 'NISTP256_PRE_COMP *' <LValueToRValue>
| | |   |   `-DeclRefExpr 0x2a7b4c285e0 <col:22> 'NISTP256_PRE_COMP *' lvalue Var 0x2a7b4c27d70 'ret' 'NISTP256_PRE_COMP *'
| | |   `-ReturnStmt 0x2a7b4c286f8 <line:1850:9, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27>
| | |     `-ImplicitCastExpr 0x2a7b4c286e0 <col:17, col:27> 'NISTP256_PRE_COMP *' <NullToPointer>
| | |       `-ParenExpr 0x2a7b4c286c0 <col:17, col:27> 'void *'
| | |         `-CStyleCastExpr 0x2a7b4c28698 <col:18, col:26> 'void *' <NullToPointer>
| | |           `-IntegerLiteral 0x2a7b4c28658 <col:26> 'int' 0
| | `-ReturnStmt 0x2a7b4c28790 <.//openssl//file_jk/before\crypto\ec\ecp_nistp256.c:1852:5, col:12>
| |   `-ImplicitCastExpr 0x2a7b4c28778 <col:12> 'NISTP256_PRE_COMP *' <LValueToRValue>
| |     `-DeclRefExpr 0x2a7b4c28758 <col:12> 'NISTP256_PRE_COMP *' lvalue Var 0x2a7b4c27d70 'ret' 'NISTP256_PRE_COMP *'
| `-FullComment 0x2a7b4c37fc8 <line:1830:4, col:78>
|   `-ParagraphComment 0x2a7b4c37fa0 <col:4, col:78>
|     `-TextComment 0x2a7b4c37f78 <col:4, col:78> Text="***************************************************************************"
|-FunctionDecl 0x2a7b4c28890 prev 0x2a7b4a88498 <line:1855:1, line:1861:1> line:1855:20 EC_nistp256_pre_comp_dup 'NISTP256_PRE_COMP *(NISTP256_PRE_COMP *)'
| |-ParmVarDecl 0x2a7b4c287e8 <col:45, col:64> col:64 used p 'NISTP256_PRE_COMP *'
| `-CompoundStmt 0x2a7b4c28d50 <line:1856:1, line:1861:1>
|   |-DeclStmt 0x2a7b4c289b8 <line:1857:5, col:10>
|   | `-VarDecl 0x2a7b4c28950 <col:5, col:9> col:9 used i 'int'
|   `-ReturnStmt 0x2a7b4c28d40 <line:1860:5, col:12>
|     `-ImplicitCastExpr 0x2a7b4c28d28 <col:12> 'NISTP256_PRE_COMP *' <LValueToRValue>
|       `-DeclRefExpr 0x2a7b4c28d08 <col:12> 'NISTP256_PRE_COMP *' lvalue ParmVar 0x2a7b4c287e8 'p' 'NISTP256_PRE_COMP *'
|-FunctionDecl 0x2a7b4c28e28 prev 0x2a7b4a88b18 <line:1863:1, line:1878:1> line:1863:6 used EC_nistp256_pre_comp_free 'void (NISTP256_PRE_COMP *)'
| |-ParmVarDecl 0x2a7b4c28d80 <col:32, col:51> col:51 used pre 'NISTP256_PRE_COMP *'
| `-CompoundStmt 0x2a7b4c257d8 <line:1864:1, line:1878:1>
|   |-DeclStmt 0x2a7b4c28f50 <line:1865:5, col:10>
|   | `-VarDecl 0x2a7b4c28ee8 <col:5, col:9> col:9 used i 'int'
|   |-IfStmt 0x2a7b4c25060 <line:1867:5, line:1868:9>
|   | |-BinaryOperator 0x2a7b4c25030 <line:1867:9, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27> 'int' '=='
|   | | |-ImplicitCastExpr 0x2a7b4c25000 <.//openssl//file_jk/before\crypto\ec\ecp_nistp256.c:1867:9> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b4c28f68 <col:9> 'NISTP256_PRE_COMP *' lvalue ParmVar 0x2a7b4c28d80 'pre' 'NISTP256_PRE_COMP *'
|   | | `-ImplicitCastExpr 0x2a7b4c25018 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'NISTP256_PRE_COMP *' <BitCast>
|   | |   `-ParenExpr 0x2a7b4c24fe0 <col:17, col:27> 'void *'
|   | |     `-CStyleCastExpr 0x2a7b4c28fc8 <col:18, col:26> 'void *' <NullToPointer>
|   | |       `-IntegerLiteral 0x2a7b4c28f88 <col:26> 'int' 0
|   | `-ReturnStmt 0x2a7b4c25050 <.//openssl//file_jk/before\crypto\ec\ecp_nistp256.c:1868:9>
|   |-IfStmt 0x2a7b4c253e0 <line:1872:5, line:1873:9>
|   | |-BinaryOperator 0x2a7b4c253b0 <line:1872:9, col:13> 'int' '>'
|   | | |-ImplicitCastExpr 0x2a7b4c25398 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b4c25350 <col:9> 'int' lvalue Var 0x2a7b4c28ee8 'i' 'int'
|   | | `-IntegerLiteral 0x2a7b4c25370 <col:13> 'int' 0
|   | `-ReturnStmt 0x2a7b4c253d0 <line:1873:9>
|   |-CallExpr 0x2a7b4c255a0 <line:1874:5, col:26> 'int'
|   | |-ImplicitCastExpr 0x2a7b4c25588 <col:5> 'int (*)()' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4c254e8 <col:5> 'int ()' Function 0x2a7b4c25420 'REF_ASSERT_ISNT' 'int ()'
|   | `-BinaryOperator 0x2a7b4c25568 <col:21, col:25> 'int' '<'
|   |   |-ImplicitCastExpr 0x2a7b4c25550 <col:21> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x2a7b4c25508 <col:21> 'int' lvalue Var 0x2a7b4c28ee8 'i' 'int'
|   |   `-IntegerLiteral 0x2a7b4c25528 <col:25> 'int' 0
|   `-CallExpr 0x2a7b4c25768 <line:1877:5, col:21> 'int'
|     |-ImplicitCastExpr 0x2a7b4c25750 <col:5> 'int (*)()' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x2a7b4c25710 <col:5> 'int ()' Function 0x2a7b4c284f8 'OPENSSL_free' 'int ()'
|     `-ImplicitCastExpr 0x2a7b4c25790 <col:18> 'NISTP256_PRE_COMP *' <LValueToRValue>
|       `-DeclRefExpr 0x2a7b4c25730 <col:18> 'NISTP256_PRE_COMP *' lvalue ParmVar 0x2a7b4c28d80 'pre' 'NISTP256_PRE_COMP *'
|-FunctionDecl 0x2a7b4c258c0 <line:1885:1, line:1891:1> line:1885:5 invalid ec_GFp_nistp256_group_init 'int (int *)'
| |-ParmVarDecl 0x2a7b4c25828 <col:32, col:42> col:42 invalid group 'int *'
| |-CompoundStmt 0x2a7b4c25ac0 <line:1886:1, line:1891:1>
| | |-DeclStmt 0x2a7b4c25a00 <line:1887:5, col:12>
| | | `-VarDecl 0x2a7b4c25998 <col:5, col:9> col:9 used ret 'int'
| | `-ReturnStmt 0x2a7b4c25ab0 <line:1890:5, col:12>
| |   `-ImplicitCastExpr 0x2a7b4c25a98 <col:12> 'int' <LValueToRValue>
| |     `-DeclRefExpr 0x2a7b4c25a78 <col:12> 'int' lvalue Var 0x2a7b4c25998 'ret' 'int'
| `-FullComment 0x2a7b4c38090 <line:1880:4, col:78>
|   `-ParagraphComment 0x2a7b4c38068 <col:4, col:78>
|     `-TextComment 0x2a7b4c38040 <col:4, col:78> Text="***************************************************************************"
|-FunctionDecl 0x2a7b4c25db0 <line:1893:1, line:1923:1> line:1893:5 invalid ec_GFp_nistp256_group_set_curve 'int (int *, const int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x2a7b4c25af8 <col:37, col:47> col:47 invalid group 'int *'
| |-ParmVarDecl 0x2a7b4c25b78 <col:54, col:68> col:68 invalid p 'const int *'
| |-ParmVarDecl 0x2a7b4c25bf8 <line:1894:37, col:51> col:51 invalid a 'const int *'
| |-ParmVarDecl 0x2a7b4c25c78 <col:54, col:68> col:68 invalid b 'const int *'
| |-ParmVarDecl 0x2a7b4c25cf8 <line:1895:37, col:45> col:45 invalid ctx 'int *'
| `-CompoundStmt 0x2a7b4c26e58 <line:1896:1, line:1923:1>
|   |-DeclStmt 0x2a7b4c25f38 <line:1897:5, col:16>
|   | `-VarDecl 0x2a7b4c25ea8 <col:5, col:15> col:9 used ret 'int' cinit
|   |   `-IntegerLiteral 0x2a7b4c25f10 <col:15> 'int' 0
|   |-IfStmt 0x2a7b4c262b0 <line:1901:5, line:1903:20>
|   | |-OpaqueValueExpr 0x2a7b4c26298 <<invalid sloc>> '_Bool'
|   | `-IfStmt 0x2a7b4c26280 <line:1902:9, line:1903:20>
|   |   |-OpaqueValueExpr 0x2a7b4c26268 <<invalid sloc>> '_Bool'
|   |   `-ReturnStmt 0x2a7b4c26258 <col:13, col:20>
|   |     `-IntegerLiteral 0x2a7b4c26230 <col:20> 'int' 0
|   |-IfStmt 0x2a7b4c26740 <line:1905:5, line:1908:14>
|   | |-OpaqueValueExpr 0x2a7b4c26728 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x2a7b4c26710 <col:9, col:14> 'err' 0x2a7b4c266c0
|   |-IfStmt 0x2a7b4c26b80 <line:1912:5, line:1916:5>
|   | |-OpaqueValueExpr 0x2a7b4c26b68 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x2a7b4c26b50 <line:1912:79, line:1916:5>
|   |   `-GotoStmt 0x2a7b4c26b38 <line:1915:9, col:14> 'err' 0x2a7b4c266c0
|   |-LabelStmt 0x2a7b4c26ce8 <line:1919:2, col:5> 'err'
|   | `-NullStmt 0x2a7b4c26ce0 <col:5>
|   `-ReturnStmt 0x2a7b4c26e48 <line:1922:5, col:12>
|     `-ImplicitCastExpr 0x2a7b4c26e30 <col:12> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x2a7b4c26e10 <col:12> 'int' lvalue Var 0x2a7b4c25ea8 'ret' 'int'
|-FunctionDecl 0x2a7b4c2f1e8 <line:1929:1, line:1972:1> line:1929:5 invalid ec_GFp_nistp256_point_get_affine_coordinates 'int (const int *, const int *, int *, int *, int *)'
| |-ParmVarDecl 0x2a7b4c26eb0 <col:50, col:66> col:66 invalid group 'const int *'
| |-ParmVarDecl 0x2a7b4c26f30 <line:1930:50, col:66> col:66 invalid point 'const int *'
| |-ParmVarDecl 0x2a7b4c2f030 <line:1931:50, col:58> col:58 invalid x 'int *'
| |-ParmVarDecl 0x2a7b4c2f0b0 <col:61, col:69> col:69 invalid y 'int *'
| |-ParmVarDecl 0x2a7b4c2f130 <line:1932:50, col:58> col:58 invalid ctx 'int *'
| `-CompoundStmt 0x2a7b4c30868 <line:1933:1, line:1972:1>
|   |-DeclStmt 0x2a7b4c2f4d0 <line:1934:5, col:29>
|   | |-VarDecl 0x2a7b4c2f2d8 <col:5, col:11> col:11 used z1 'felem':'limb [4]'
|   | |-VarDecl 0x2a7b4c2f350 <col:5, col:15> col:15 used z2 'felem':'limb [4]'
|   | |-VarDecl 0x2a7b4c2f3c8 <col:5, col:19> col:19 used x_in 'felem':'limb [4]'
|   | `-VarDecl 0x2a7b4c2f440 <col:5, col:25> col:25 used y_in 'felem':'limb [4]'
|   |-DeclStmt 0x2a7b4c2f5f0 <line:1935:5, col:28>
|   | |-VarDecl 0x2a7b4c2f4f8 <col:5, col:16> col:16 used x_out 'smallfelem':'u64 [4]'
|   | `-VarDecl 0x2a7b4c2f570 <col:5, col:23> col:23 used y_out 'smallfelem':'u64 [4]'
|   |-DeclStmt 0x2a7b4c2f680 <line:1936:5, col:18>
|   | `-VarDecl 0x2a7b4c2f618 <col:5, col:15> col:15 used tmp 'longfelem':'limb [8]'
|   |-IfStmt 0x2a7b4c2f830 <line:1938:5, line:1942:5>
|   | |-OpaqueValueExpr 0x2a7b4c2f818 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x2a7b4c2f800 <line:1938:48, line:1942:5>
|   |   `-ReturnStmt 0x2a7b4c2f7f0 <line:1941:9, col:16>
|   |     `-IntegerLiteral 0x2a7b4c2f7c8 <col:16> 'int' 0
|   |-IfStmt 0x2a7b4c2f940 <line:1943:5, line:1945:16>
|   | |-OpaqueValueExpr 0x2a7b4c2f928 <<invalid sloc>> '_Bool'
|   | `-ReturnStmt 0x2a7b4c2f918 <col:9, col:16>
|   |   `-IntegerLiteral 0x2a7b4c2f8f0 <col:16> 'int' 0
|   |-CallExpr 0x2a7b4c2f9e8 <line:1946:5, col:21> 'void'
|   | |-ImplicitCastExpr 0x2a7b4c2f9d0 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4c2f958 <col:5> 'void (limb *, const limb *)' Function 0x2a7b4af33c0 'felem_inv' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4c2fa18 <col:15> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4c2f978 <col:15> 'felem':'limb [4]' lvalue Var 0x2a7b4c2f350 'z2' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x2a7b4c2fa48 <col:19> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4c2fa30 <col:19> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4c2f9b0 <col:19> 'felem':'limb [4]' lvalue Var 0x2a7b4c2f2d8 'z1' 'felem':'limb [4]'
|   |-CallExpr 0x2a7b4c2faf0 <line:1947:5, col:25> 'void'
|   | |-ImplicitCastExpr 0x2a7b4c2fad8 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4c2fa60 <col:5> 'void (limb *, const limb *)' Function 0x2a7b4a04ae8 'felem_square' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4c2fb20 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4c2fa80 <col:18> 'longfelem':'limb [8]' lvalue Var 0x2a7b4c2f618 'tmp' 'longfelem':'limb [8]'
|   | `-ImplicitCastExpr 0x2a7b4c2fb50 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4c2fb38 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4c2fab8 <col:23> 'felem':'limb [4]' lvalue Var 0x2a7b4c2f350 'z2' 'felem':'limb [4]'
|   |-CallExpr 0x2a7b4c2fbe0 <line:1948:5, col:25> 'void'
|   | |-ImplicitCastExpr 0x2a7b4c2fbc8 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4c2fb68 <col:5> 'void (limb *, const limb *)' Function 0x2a7b4af4538 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4c2fc10 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4c2fb88 <col:18> 'felem':'limb [4]' lvalue Var 0x2a7b4c2f2d8 'z1' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x2a7b4c2fc40 <col:22> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4c2fc28 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4c2fba8 <col:22> 'longfelem':'limb [8]' lvalue Var 0x2a7b4c2f618 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x2a7b4c2fcf0 <line:1949:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x2a7b4c2fcd8 <col:5> 'void (*)(limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4c2fc58 <col:5> 'void (limb *, const limb *, const limb *)' Function 0x2a7b4a096f8 'felem_mul' 'void (limb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4c2fd28 <col:15> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4c2fc78 <col:15> 'longfelem':'limb [8]' lvalue Var 0x2a7b4c2f618 'tmp' 'longfelem':'limb [8]'
|   | |-ImplicitCastExpr 0x2a7b4c2fd58 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x2a7b4c2fd40 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x2a7b4c2fc98 <col:20> 'felem':'limb [4]' lvalue Var 0x2a7b4c2f3c8 'x_in' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x2a7b4c2fd88 <col:26> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4c2fd70 <col:26> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4c2fcb8 <col:26> 'felem':'limb [4]' lvalue Var 0x2a7b4c2f2d8 'z1' 'felem':'limb [4]'
|   |-CallExpr 0x2a7b4c2fe18 <line:1950:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x2a7b4c2fe00 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4c2fda0 <col:5> 'void (limb *, const limb *)' Function 0x2a7b4af4538 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4c2fe48 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4c2fdc0 <col:18> 'felem':'limb [4]' lvalue Var 0x2a7b4c2f3c8 'x_in' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x2a7b4c2fe78 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4c2fe60 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4c2fde0 <col:24> 'longfelem':'limb [8]' lvalue Var 0x2a7b4c2f618 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x2a7b4c2ff20 <line:1951:5, col:31> 'void'
|   | |-ImplicitCastExpr 0x2a7b4c2ff08 <col:5> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4c2fe90 <col:5> 'void (u64 *, const limb *)' Function 0x2a7b4aeffe8 'felem_contract' 'void (u64 *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4c2ff50 <col:20> 'u64 *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4c2feb0 <col:20> 'smallfelem':'u64 [4]' lvalue Var 0x2a7b4c2f4f8 'x_out' 'smallfelem':'u64 [4]'
|   | `-ImplicitCastExpr 0x2a7b4c2ff80 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4c2ff68 <col:27> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4c2fee8 <col:27> 'felem':'limb [4]' lvalue Var 0x2a7b4c2f3c8 'x_in' 'felem':'limb [4]'
|   |-IfStmt 0x2a7b4c30110 <line:1952:5, line:1958:5>
|   | |-OpaqueValueExpr 0x2a7b4c300f8 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x2a7b4c300e0 <line:1952:20, line:1958:5>
|   |   `-IfStmt 0x2a7b4c300c8 <line:1953:9, line:1957:9>
|   |     |-OpaqueValueExpr 0x2a7b4c300b0 <<invalid sloc>> '_Bool'
|   |     `-CompoundStmt 0x2a7b4c30098 <line:1953:42, line:1957:9>
|   |       `-ReturnStmt 0x2a7b4c30088 <line:1956:13, col:20>
|   |         `-IntegerLiteral 0x2a7b4c30060 <col:20> 'int' 0
|   |-CallExpr 0x2a7b4c301c0 <line:1959:5, col:26> 'void'
|   | |-ImplicitCastExpr 0x2a7b4c301a8 <col:5> 'void (*)(limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4c30128 <col:5> 'void (limb *, const limb *, const limb *)' Function 0x2a7b4a096f8 'felem_mul' 'void (limb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4c301f8 <col:15> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4c30148 <col:15> 'longfelem':'limb [8]' lvalue Var 0x2a7b4c2f618 'tmp' 'longfelem':'limb [8]'
|   | |-ImplicitCastExpr 0x2a7b4c30228 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x2a7b4c30210 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x2a7b4c30168 <col:20> 'felem':'limb [4]' lvalue Var 0x2a7b4c2f2d8 'z1' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x2a7b4c30258 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4c30240 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4c30188 <col:24> 'felem':'limb [4]' lvalue Var 0x2a7b4c2f350 'z2' 'felem':'limb [4]'
|   |-CallExpr 0x2a7b4c302e8 <line:1960:5, col:25> 'void'
|   | |-ImplicitCastExpr 0x2a7b4c302d0 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4c30270 <col:5> 'void (limb *, const limb *)' Function 0x2a7b4af4538 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4c30318 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4c30290 <col:18> 'felem':'limb [4]' lvalue Var 0x2a7b4c2f2d8 'z1' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x2a7b4c30348 <col:22> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4c30330 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4c302b0 <col:22> 'longfelem':'limb [8]' lvalue Var 0x2a7b4c2f618 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x2a7b4c303f8 <line:1961:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x2a7b4c303e0 <col:5> 'void (*)(limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4c30360 <col:5> 'void (limb *, const limb *, const limb *)' Function 0x2a7b4a096f8 'felem_mul' 'void (limb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4c30430 <col:15> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4c30380 <col:15> 'longfelem':'limb [8]' lvalue Var 0x2a7b4c2f618 'tmp' 'longfelem':'limb [8]'
|   | |-ImplicitCastExpr 0x2a7b4c30460 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x2a7b4c30448 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x2a7b4c303a0 <col:20> 'felem':'limb [4]' lvalue Var 0x2a7b4c2f440 'y_in' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x2a7b4c30490 <col:26> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4c30478 <col:26> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4c303c0 <col:26> 'felem':'limb [4]' lvalue Var 0x2a7b4c2f2d8 'z1' 'felem':'limb [4]'
|   |-CallExpr 0x2a7b4c30520 <line:1962:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x2a7b4c30508 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4c304a8 <col:5> 'void (limb *, const limb *)' Function 0x2a7b4af4538 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4c30550 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4c304c8 <col:18> 'felem':'limb [4]' lvalue Var 0x2a7b4c2f440 'y_in' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x2a7b4c30580 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4c30568 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4c304e8 <col:24> 'longfelem':'limb [8]' lvalue Var 0x2a7b4c2f618 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x2a7b4c30628 <line:1963:5, col:31> 'void'
|   | |-ImplicitCastExpr 0x2a7b4c30610 <col:5> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4c30598 <col:5> 'void (u64 *, const limb *)' Function 0x2a7b4aeffe8 'felem_contract' 'void (u64 *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4c30658 <col:20> 'u64 *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4c305b8 <col:20> 'smallfelem':'u64 [4]' lvalue Var 0x2a7b4c2f570 'y_out' 'smallfelem':'u64 [4]'
|   | `-ImplicitCastExpr 0x2a7b4c30688 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4c30670 <col:27> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4c305f0 <col:27> 'felem':'limb [4]' lvalue Var 0x2a7b4c2f440 'y_in' 'felem':'limb [4]'
|   |-IfStmt 0x2a7b4c30818 <line:1964:5, line:1970:5>
|   | |-OpaqueValueExpr 0x2a7b4c30800 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x2a7b4c307e8 <line:1964:20, line:1970:5>
|   |   `-IfStmt 0x2a7b4c307d0 <line:1965:9, line:1969:9>
|   |     |-OpaqueValueExpr 0x2a7b4c307b8 <<invalid sloc>> '_Bool'
|   |     `-CompoundStmt 0x2a7b4c307a0 <line:1965:42, line:1969:9>
|   |       `-ReturnStmt 0x2a7b4c30790 <line:1968:13, col:20>
|   |         `-IntegerLiteral 0x2a7b4c30768 <col:20> 'int' 0
|   `-ReturnStmt 0x2a7b4c30858 <line:1971:5, col:12>
|     `-IntegerLiteral 0x2a7b4c30830 <col:12> 'int' 1
|-FunctionDecl 0x2a7b4c30d78 <line:1975:1, line:2001:1> line:1975:13 used make_points_affine 'void (size_t, smallfelem (*)[3], smallfelem *)' static
| |-ParmVarDecl 0x2a7b4c30920 <col:32, col:39> col:39 used num 'size_t':'unsigned long long'
| |-ParmVarDecl 0x2a7b4c30af0 <col:44, col:65> col:55 used points 'smallfelem (*)[3]':'smallfelem (*)[3]'
| |-ParmVarDecl 0x2a7b4c30c10 <line:1976:32, col:59> col:43 used tmp_smallfelems 'smallfelem *':'smallfelem *'
| `-CompoundStmt 0x2a7b4c2bb48 <line:1977:1, line:2001:1>
|   `-CallExpr 0x2a7b4c2ba40 <line:1982:5, line:2000:63> 'void'
|     |-ImplicitCastExpr 0x2a7b4c2ba28 <line:1982:5> 'void (*)(size_t, void *, size_t, void *, void (*)(void *), int (*)(const void *), void (*)(void *, const void *), void (*)(void *, const void *), void (*)(void *, const void *, const void *), void (*)(void *, const void *), void (*)(void *, const void *))' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x2a7b4c30e48 <col:5> 'void (size_t, void *, size_t, void *, void (*)(void *), int (*)(const void *), void (*)(void *, const void *), void (*)(void *, const void *), void (*)(void *, const void *, const void *), void (*)(void *, const void *), void (*)(void *, const void *))' Function 0x2a7b4aa0e58 'ec_GFp_nistp_points_make_affine_internal' 'void (size_t, void *, size_t, void *, void (*)(void *), int (*)(const void *), void (*)(void *, const void *), void (*)(void *, const void *), void (*)(void *, const void *, const void *), void (*)(void *, const void *), void (*)(void *, const void *))'
|     |-ImplicitCastExpr 0x2a7b4c2bab8 <col:46> 'size_t':'unsigned long long' <LValueToRValue>
|     | `-DeclRefExpr 0x2a7b4c30e68 <col:46> 'size_t':'unsigned long long' lvalue ParmVar 0x2a7b4c30920 'num' 'size_t':'unsigned long long'
|     |-ImplicitCastExpr 0x2a7b4c2bae8 <line:1983:46> 'void *' <BitCast>
|     | `-ImplicitCastExpr 0x2a7b4c2bad0 <col:46> 'smallfelem (*)[3]':'smallfelem (*)[3]' <LValueToRValue>
|     |   `-DeclRefExpr 0x2a7b4c30e88 <col:46> 'smallfelem (*)[3]':'smallfelem (*)[3]' lvalue ParmVar 0x2a7b4c30af0 'points' 'smallfelem (*)[3]':'smallfelem (*)[3]'
|     |-UnaryExprOrTypeTraitExpr 0x2a7b4c30eb8 <line:1984:46, col:63> 'unsigned long long' sizeof 'smallfelem':'u64 [4]'
|     |-ImplicitCastExpr 0x2a7b4c2bb18 <line:1985:46> 'void *' <BitCast>
|     | `-ImplicitCastExpr 0x2a7b4c2bb00 <col:46> 'smallfelem *':'smallfelem *' <LValueToRValue>
|     |   `-DeclRefExpr 0x2a7b4c30ed8 <col:46> 'smallfelem *':'smallfelem *' lvalue ParmVar 0x2a7b4c30c10 'tmp_smallfelems' 'smallfelem *':'smallfelem *'
|     |-CStyleCastExpr 0x2a7b4c2b028 <line:1986:46, col:64> 'void (*)(void *)' <BitCast>
|     | `-ImplicitCastExpr 0x2a7b4c2b010 <col:64> 'void (*)(u64 *)' <FunctionToPointerDecay> part_of_explicit_cast
|     |   `-DeclRefExpr 0x2a7b4c30f78 <col:64> 'void (u64 *)' Function 0x2a7b49f3168 'smallfelem_one' 'void (u64 *)'
|     |-ImplicitCastExpr 0x2a7b4c2bb30 <line:1987:46> 'int (*)(const void *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x2a7b4c2b050 <col:46> 'int (const void *)' Function 0x2a7b4af2f58 'smallfelem_is_zero_int' 'int (const void *)'
|     |-CStyleCastExpr 0x2a7b4c2b240 <line:1988:46, line:1989:46> 'void (*)(void *, const void *)' <BitCast>
|     | `-ImplicitCastExpr 0x2a7b4c2b228 <col:46> 'void (*)(u64 *, const u64 *)' <FunctionToPointerDecay> part_of_explicit_cast
|     |   `-DeclRefExpr 0x2a7b4c2b170 <col:46> 'void (u64 *, const u64 *)' Function 0x2a7b49f37a8 'smallfelem_assign' 'void (u64 *, const u64 *)'
|     |-CStyleCastExpr 0x2a7b4c2b3e0 <line:1990:46, line:1991:46> 'void (*)(void *, const void *)' <BitCast>
|     | `-ImplicitCastExpr 0x2a7b4c2b3c8 <col:46> 'void (*)(u64 *, const u64 *)' <FunctionToPointerDecay> part_of_explicit_cast
|     |   `-DeclRefExpr 0x2a7b4c2b368 <col:46> 'void (u64 *, const u64 *)' Function 0x2a7b4aea488 'smallfelem_square_contract' 'void (u64 *, const u64 *)'
|     |-CStyleCastExpr 0x2a7b4c2b660 <line:1992:46, line:1995:46> 'void (*)(void *, const void *, const void *)' <BitCast>
|     | `-ImplicitCastExpr 0x2a7b4c2b648 <col:46> 'void (*)(u64 *, const u64 *, const u64 *)' <FunctionToPointerDecay> part_of_explicit_cast
|     |   `-DeclRefExpr 0x2a7b4c2b588 <col:46> 'void (u64 *, const u64 *, const u64 *)' Function 0x2a7b4aeabf8 'smallfelem_mul_contract' 'void (u64 *, const u64 *, const u64 *)'
|     |-CStyleCastExpr 0x2a7b4c2b800 <line:1996:46, line:1997:46> 'void (*)(void *, const void *)' <BitCast>
|     | `-ImplicitCastExpr 0x2a7b4c2b7e8 <col:46> 'void (*)(u64 *, const u64 *)' <FunctionToPointerDecay> part_of_explicit_cast
|     |   `-DeclRefExpr 0x2a7b4c2b788 <col:46> 'void (u64 *, const u64 *)' Function 0x2a7b4afaee8 'smallfelem_inv_contract' 'void (u64 *, const u64 *)'
|     `-CStyleCastExpr 0x2a7b4c2b9a0 <line:1999:46, line:2000:46> 'void (*)(void *, const void *)' <BitCast>
|       `-ImplicitCastExpr 0x2a7b4c2b988 <col:46> 'void (*)(u64 *, const u64 *)' <FunctionToPointerDecay> part_of_explicit_cast
|         `-DeclRefExpr 0x2a7b4c2b928 <col:46> 'void (u64 *, const u64 *)' Function 0x2a7b49f37a8 'smallfelem_assign' 'void (u64 *, const u64 *)'
|-FunctionDecl 0x2a7b4c2bf58 <line:2007:1, line:2208:1> line:2007:5 invalid ec_GFp_nistp256_points_mul 'int (const int *, int *, const int *, size_t, const int **, const int **, int *)'
| |-ParmVarDecl 0x2a7b4c2bb78 <col:32, col:48> col:48 invalid group 'const int *'
| |-ParmVarDecl 0x2a7b4c2bbf8 <col:55, col:65> col:65 invalid r 'int *'
| |-ParmVarDecl 0x2a7b4c2bc78 <line:2008:32, col:46> col:46 invalid scalar 'const int *'
| |-ParmVarDecl 0x2a7b4c2bcf0 <col:54, col:61> col:61 used num 'size_t':'unsigned long long'
| |-ParmVarDecl 0x2a7b4c2bd80 <line:2009:32, <invalid sloc>> col:48 invalid points 'const int **':'const int **'
| |-ParmVarDecl 0x2a7b4c2be10 <line:2010:32, <invalid sloc>> col:46 invalid scalars 'const int **':'const int **'
| |-ParmVarDecl 0x2a7b4c2be90 <col:57, col:65> col:65 invalid ctx 'int *'
| `-CompoundStmt 0x2a7b4c405f8 <line:2011:1, line:2208:1>
|   |-DeclStmt 0x2a7b4c2c0f0 <line:2012:5, col:16>
|   | `-VarDecl 0x2a7b4c2c060 <col:5, col:15> col:9 used ret 'int' cinit
|   |   `-IntegerLiteral 0x2a7b4c2c0c8 <col:15> 'int' 0
|   |-DeclStmt 0x2a7b4c2c188 <line:2013:5, col:10>
|   | `-VarDecl 0x2a7b4c2c120 <col:5, col:9> col:9 used j 'int'
|   |-DeclStmt 0x2a7b4c2c248 <line:2014:5, col:18>
|   | `-VarDecl 0x2a7b4c2c1b8 <col:5, col:17> col:9 used mixed 'int' cinit
|   |   `-IntegerLiteral 0x2a7b4c2c220 <col:17> 'int' 0
|   |-DeclStmt 0x2a7b4c2c360 <line:2017:5, col:29>
|   | `-VarDecl 0x2a7b4c2c2f8 <col:5, col:21> col:21 used g_secret 'felem_bytearray':'u8 [32]'
|   |-DeclStmt 0x2a7b4c2c4f0 <line:2018:5, col:36>
|   | `-VarDecl 0x2a7b4c2c3e8 <col:5, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27> .//openssl//file_jk/before\crypto\ec\ecp_nistp256.c:2018:22 used secrets 'felem_bytearray *' cinit
|   |   `-ImplicitCastExpr 0x2a7b4c2c4d8 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'felem_bytearray *' <NullToPointer>
|   |     `-ParenExpr 0x2a7b4c2c4b8 <col:17, col:27> 'void *'
|   |       `-CStyleCastExpr 0x2a7b4c2c490 <col:18, col:26> 'void *' <NullToPointer>
|   |         `-IntegerLiteral 0x2a7b4c2c450 <col:26> 'int' 0
|   |-DeclStmt 0x2a7b4c2c7a0 <.//openssl//file_jk/before\crypto\ec\ecp_nistp256.c:2019:5, col:41>
|   | `-VarDecl 0x2a7b4c2c698 <col:5, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27> .//openssl//file_jk/before\crypto\ec\ecp_nistp256.c:2019:18 used pre_comp 'smallfelem (*)[17][3]' cinit
|   |   `-ImplicitCastExpr 0x2a7b4c2c788 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'smallfelem (*)[17][3]' <NullToPointer>
|   |     `-ParenExpr 0x2a7b4c2c768 <col:17, col:27> 'void *'
|   |       `-CStyleCastExpr 0x2a7b4c2c740 <col:18, col:26> 'void *' <NullToPointer>
|   |         `-IntegerLiteral 0x2a7b4c2c700 <col:26> 'int' 0
|   |-DeclStmt 0x2a7b4c2c8d0 <.//openssl//file_jk/before\crypto\ec\ecp_nistp256.c:2020:5, col:39>
|   | `-VarDecl 0x2a7b4c2c7c8 <col:5, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27> .//openssl//file_jk/before\crypto\ec\ecp_nistp256.c:2020:17 used tmp_smallfelems 'smallfelem *' cinit
|   |   `-ImplicitCastExpr 0x2a7b4c2c8b8 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'smallfelem *' <NullToPointer>
|   |     `-ParenExpr 0x2a7b4c2c898 <col:17, col:27> 'void *'
|   |       `-CStyleCastExpr 0x2a7b4c2c870 <col:18, col:26> 'void *' <NullToPointer>
|   |         `-IntegerLiteral 0x2a7b4c2c830 <col:26> 'int' 0
|   |-DeclStmt 0x2a7b4c2c960 <.//openssl//file_jk/before\crypto\ec\ecp_nistp256.c:2021:5, col:24>
|   | `-VarDecl 0x2a7b4c2c8f8 <col:5, col:21> col:21 used tmp 'felem_bytearray':'u8 [32]'
|   |-DeclStmt 0x2a7b4c2ca90 <line:2022:5, col:26>
|   | |-VarDecl 0x2a7b4c2c990 <col:5, col:14> col:14 used i 'unsigned int'
|   | `-VarDecl 0x2a7b4c2ca10 <col:5, col:17> col:17 used num_bytes 'unsigned int'
|   |-DeclStmt 0x2a7b4c2cb50 <line:2023:5, col:26>
|   | `-VarDecl 0x2a7b4c2cac0 <col:5, col:25> col:9 used have_pre_comp 'int' cinit
|   |   `-IntegerLiteral 0x2a7b4c2cb28 <col:25> 'int' 0
|   |-DeclStmt 0x2a7b4c2cc30 <line:2024:5, col:28>
|   | `-VarDecl 0x2a7b4c2cb78 <col:5, col:25> col:12 used num_points 'size_t':'unsigned long long' cinit
|   |   `-ImplicitCastExpr 0x2a7b4c2cc18 <col:25> 'size_t':'unsigned long long' <LValueToRValue>
|   |     `-DeclRefExpr 0x2a7b4c2cbe0 <col:25> 'size_t':'unsigned long long' lvalue ParmVar 0x2a7b4c2bcf0 'num' 'size_t':'unsigned long long'
|   |-DeclStmt 0x2a7b4c2cdd0 <line:2025:5, col:32>
|   | |-VarDecl 0x2a7b4c2cc58 <col:5, col:16> col:16 used x_in 'smallfelem':'u64 [4]'
|   | |-VarDecl 0x2a7b4c2ccd0 <col:5, col:22> col:22 used y_in 'smallfelem':'u64 [4]'
|   | `-VarDecl 0x2a7b4c2cd48 <col:5, col:28> col:28 used z_in 'smallfelem':'u64 [4]'
|   |-DeclStmt 0x2a7b4c2cf70 <line:2026:5, col:30>
|   | |-VarDecl 0x2a7b4c2cdf8 <col:5, col:11> col:11 used x_out 'felem':'limb [4]'
|   | |-VarDecl 0x2a7b4c2ce70 <col:5, col:18> col:18 used y_out 'felem':'limb [4]'
|   | `-VarDecl 0x2a7b4c2cee8 <col:5, col:25> col:25 used z_out 'felem':'limb [4]'
|   |-DeclStmt 0x2a7b4c2d0c0 <line:2027:5, col:34>
|   | `-VarDecl 0x2a7b4c2cf98 <col:5, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27> .//openssl//file_jk/before\crypto\ec\ecp_nistp256.c:2027:24 used pre 'NISTP256_PRE_COMP *' cinit
|   |   `-ImplicitCastExpr 0x2a7b4c2d0a8 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'NISTP256_PRE_COMP *' <NullToPointer>
|   |     `-ParenExpr 0x2a7b4c2d088 <col:17, col:27> 'void *'
|   |       `-CStyleCastExpr 0x2a7b4c2d060 <col:18, col:26> 'void *' <NullToPointer>
|   |         `-IntegerLiteral 0x2a7b4c2d020 <col:26> 'int' 0
|   |-DeclStmt 0x2a7b4c2d300 <.//openssl//file_jk/before\crypto\ec\ecp_nistp256.c:2028:5, col:48>
|   | `-VarDecl 0x2a7b4c2d1f8 <col:5, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27> .//openssl//file_jk/before\crypto\ec\ecp_nistp256.c:2028:23 used g_pre_comp 'const smallfelem (*)[16][3]' cinit
|   |   `-ImplicitCastExpr 0x2a7b4c2d2e8 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'const smallfelem (*)[16][3]' <NullToPointer>
|   |     `-ParenExpr 0x2a7b4c2d2c8 <col:17, col:27> 'void *'
|   |       `-CStyleCastExpr 0x2a7b4c2d2a0 <col:18, col:26> 'void *' <NullToPointer>
|   |         `-IntegerLiteral 0x2a7b4c2d260 <col:26> 'int' 0
|   |-DeclStmt 0x2a7b4c2d4a8 <.//openssl//file_jk/before\crypto\ec\ecp_nistp256.c:2030:5, col:29>
|   | `-VarDecl 0x2a7b4c2d3b8 <col:5, col:21> col:21 invalid p 'const int *'
|   |-DeclStmt 0x2a7b4c2d5c8 <line:2031:5, col:34>
|   | `-VarDecl 0x2a7b4c2d4d8 <col:5, col:19> col:19 invalid p_scalar 'const int *'
|   |-IfStmt 0x2a7b4c2d7c8 <line:2033:5, line:2035:20>
|   | |-OpaqueValueExpr 0x2a7b4c2d7b0 <<invalid sloc>> '_Bool'
|   | `-IfStmt 0x2a7b4c2d798 <line:2034:9, line:2035:20>
|   |   |-OpaqueValueExpr 0x2a7b4c2d780 <<invalid sloc>> '_Bool'
|   |   `-ReturnStmt 0x2a7b4c2d770 <col:13, col:20>
|   |     `-IntegerLiteral 0x2a7b4c2d748 <col:20> 'int' 0
|   |-IfStmt 0x2a7b4c2db20 <line:2037:5, line:2041:14>
|   | |-OpaqueValueExpr 0x2a7b4c2db08 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x2a7b4c2daf0 <col:9, col:14> 'err' 0x2a7b4c2daa0
|   |-IfStmt 0x2a7b4c2ea10 <line:2043:5, line:2074:5>
|   | |-OpaqueValueExpr 0x2a7b4c2e9f8 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x2a7b4c2e9c0 <line:2043:25, line:2074:5>
|   |   |-IfStmt 0x2a7b4c2dfd8 <line:2045:9, line:2050:33> has_else
|   |   | |-ImplicitCastExpr 0x2a7b4c2dc18 <line:2045:13> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x2a7b4c2dbf8 <col:13> 'NISTP256_PRE_COMP *' lvalue Var 0x2a7b4c2cf98 'pre' 'NISTP256_PRE_COMP *'
|   |   | |-BinaryOperator 0x2a7b4c2dee0 <line:2047:13, col:59> 'const smallfelem (*)[16][3]' '='
|   |   | | |-DeclRefExpr 0x2a7b4c2dc30 <col:13> 'const smallfelem (*)[16][3]' lvalue Var 0x2a7b4c2d1f8 'g_pre_comp' 'const smallfelem (*)[16][3]'
|   |   | | `-CStyleCastExpr 0x2a7b4c2deb8 <col:26, col:59> 'const smallfelem (*)[16][3]' <NoOp>
|   |   | |   `-ImplicitCastExpr 0x2a7b4c2dde8 <col:54, col:59> 'smallfelem (*)[16][3]' <ArrayToPointerDecay> part_of_explicit_cast
|   |   | |     `-MemberExpr 0x2a7b4c2dcf0 <col:54, col:59> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x2a7b4c276d8
|   |   | |       `-ImplicitCastExpr 0x2a7b4c2dcd8 <col:54> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |         `-DeclRefExpr 0x2a7b4c2dcb8 <col:54> 'NISTP256_PRE_COMP *' lvalue Var 0x2a7b4c2cf98 'pre' 'NISTP256_PRE_COMP *'
|   |   | `-BinaryOperator 0x2a7b4c2dfb8 <line:2050:13, col:33> 'const smallfelem (*)[16][3]' '='
|   |   |   |-DeclRefExpr 0x2a7b4c2df00 <col:13> 'const smallfelem (*)[16][3]' lvalue Var 0x2a7b4c2d1f8 'g_pre_comp' 'const smallfelem (*)[16][3]'
|   |   |   `-UnaryOperator 0x2a7b4c2dfa0 <col:26, col:33> 'const smallfelem (*)[16][3]' prefix '&' cannot overflow
|   |   |     `-ArraySubscriptExpr 0x2a7b4c2df80 <col:27, col:33> 'const smallfelem [16][3]' lvalue
|   |   |       |-ImplicitCastExpr 0x2a7b4c2df68 <col:27> 'const smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   |       | `-DeclRefExpr 0x2a7b4c2df20 <col:27> 'const smallfelem [2][16][3]' lvalue Var 0x2a7b4b03e78 'gmul' 'const smallfelem [2][16][3]'
|   |   |       `-IntegerLiteral 0x2a7b4c2df40 <col:32> 'int' 0
|   |   |-IfStmt 0x2a7b4c2e1c8 <line:2052:9, line:2053:18>
|   |   | |-OpaqueValueExpr 0x2a7b4c2e1b0 <<invalid sloc>> '_Bool'
|   |   | `-GotoStmt 0x2a7b4c2e198 <col:13, col:18> 'err' 0x2a7b4c2daa0
|   |   |-IfStmt 0x2a7b4c2e608 <line:2055:9, line:2060:9>
|   |   | |-OpaqueValueExpr 0x2a7b4c2e5f0 <<invalid sloc>> '_Bool'
|   |   | `-CompoundStmt 0x2a7b4c2e5d8 <line:2057:56, line:2060:9>
|   |   |   `-GotoStmt 0x2a7b4c2e5c0 <line:2059:13, col:18> 'err' 0x2a7b4c2daa0
|   |   |-IfStmt 0x2a7b4c2e760 <line:2061:9, line:2064:18>
|   |   | |-OpaqueValueExpr 0x2a7b4c2e748 <<invalid sloc>> '_Bool'
|   |   | `-GotoStmt 0x2a7b4c2e730 <col:13, col:18> 'err' 0x2a7b4c2daa0
|   |   `-IfStmt 0x2a7b4c2e998 <line:2065:9, line:2073:23> has_else
|   |     |-OpaqueValueExpr 0x2a7b4c2e980 <<invalid sloc>> '_Bool'
|   |     |-BinaryOperator 0x2a7b4c2e910 <line:2067:13, col:29> 'int' '='
|   |     | |-DeclRefExpr 0x2a7b4c2e8b0 <col:13> 'int' lvalue Var 0x2a7b4c2cac0 'have_pre_comp' 'int'
|   |     | `-IntegerLiteral 0x2a7b4c2e8e8 <col:29> 'int' 1
|   |     `-UnaryOperator 0x2a7b4c2e968 <line:2073:13, col:23> 'size_t':'unsigned long long' postfix '++'
|   |       `-DeclRefExpr 0x2a7b4c2e930 <col:13> 'size_t':'unsigned long long' lvalue Var 0x2a7b4c2cb78 'num_points' 'size_t':'unsigned long long'
|   |-IfStmt 0x2a7b4c3adb8 <line:2075:5, line:2160:5>
|   | |-BinaryOperator 0x2a7b4c2eaa0 <line:2075:9, col:22> 'int' '>'
|   | | |-ImplicitCastExpr 0x2a7b4c2ea70 <col:9> 'size_t':'unsigned long long' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b4c2ea28 <col:9> 'size_t':'unsigned long long' lvalue Var 0x2a7b4c2cb78 'num_points' 'size_t':'unsigned long long'
|   | | `-ImplicitCastExpr 0x2a7b4c2ea88 <col:22> 'unsigned long long' <IntegralCast>
|   | |   `-IntegerLiteral 0x2a7b4c2ea48 <col:22> 'int' 0
|   | `-CompoundStmt 0x2a7b4c3ad60 <col:25, line:2160:5>
|   |   |-IfStmt 0x2a7b4c2ebf0 <line:2076:9, line:2082:9>
|   |   | |-BinaryOperator 0x2a7b4c2eb38 <line:2076:13, col:27> 'int' '>='
|   |   | | |-ImplicitCastExpr 0x2a7b4c2eb08 <col:13> 'size_t':'unsigned long long' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x2a7b4c2eac0 <col:13> 'size_t':'unsigned long long' lvalue Var 0x2a7b4c2cb78 'num_points' 'size_t':'unsigned long long'
|   |   | | `-ImplicitCastExpr 0x2a7b4c2eb20 <col:27> 'unsigned long long' <IntegralCast>
|   |   | |   `-IntegerLiteral 0x2a7b4c2eae0 <col:27> 'int' 3
|   |   | `-CompoundStmt 0x2a7b4c2ebd8 <col:30, line:2082:9>
|   |   |   `-BinaryOperator 0x2a7b4c2ebb8 <line:2081:13, col:21> 'int' '='
|   |   |     |-DeclRefExpr 0x2a7b4c2eb58 <col:13> 'int' lvalue Var 0x2a7b4c2c1b8 'mixed' 'int'
|   |   |     `-IntegerLiteral 0x2a7b4c2eb90 <col:21> 'int' 1
|   |   |-BinaryOperator 0x2a7b4c2ee90 <line:2083:9, col:63> 'felem_bytearray *' '='
|   |   | |-DeclRefExpr 0x2a7b4c2ec08 <col:9> 'felem_bytearray *' lvalue Var 0x2a7b4c2c3e8 'secrets' 'felem_bytearray *'
|   |   | `-ImplicitCastExpr 0x2a7b4c2ee78 <col:19, col:63> 'felem_bytearray *' <IntegralToPointer>
|   |   |   `-CallExpr 0x2a7b4c2ee50 <col:19, col:63> 'int'
|   |   |     |-ImplicitCastExpr 0x2a7b4c2ee38 <col:19> 'int (*)()' <FunctionToPointerDecay>
|   |   |     | `-DeclRefExpr 0x2a7b4c2ed30 <col:19> 'int ()' Function 0x2a7b4c2ec68 'OPENSSL_malloc' 'int ()'
|   |   |     `-BinaryOperator 0x2a7b4c2ee18 <col:34, col:53> 'unsigned long long' '*'
|   |   |       |-UnaryExprOrTypeTraitExpr 0x2a7b4c2edc0 <col:34, col:49> 'unsigned long long' sizeof
|   |   |       | `-ParenExpr 0x2a7b4c2eda0 <col:40, col:49> 'felem_bytearray':'u8 [32]' lvalue
|   |   |       |   `-UnaryOperator 0x2a7b4c2ed88 <col:41, col:42> 'felem_bytearray':'u8 [32]' lvalue prefix '*' cannot overflow
|   |   |       |     `-ImplicitCastExpr 0x2a7b4c2ed70 <col:42> 'felem_bytearray *' <LValueToRValue>
|   |   |       |       `-DeclRefExpr 0x2a7b4c2ed50 <col:42> 'felem_bytearray *' lvalue Var 0x2a7b4c2c3e8 'secrets' 'felem_bytearray *' non_odr_use_unevaluated
|   |   |       `-ImplicitCastExpr 0x2a7b4c2ee00 <col:53> 'size_t':'unsigned long long' <LValueToRValue>
|   |   |         `-DeclRefExpr 0x2a7b4c2ede0 <col:53> 'size_t':'unsigned long long' lvalue Var 0x2a7b4c2cb78 'num_points' 'size_t':'unsigned long long'
|   |   |-BinaryOperator 0x2a7b4c21000 <line:2084:9, col:65> 'smallfelem (*)[17][3]' '='
|   |   | |-DeclRefExpr 0x2a7b4c2eeb0 <col:9> 'smallfelem (*)[17][3]' lvalue Var 0x2a7b4c2c698 'pre_comp' 'smallfelem (*)[17][3]'
|   |   | `-ImplicitCastExpr 0x2a7b4c20fe8 <col:20, col:65> 'smallfelem (*)[17][3]' <IntegralToPointer>
|   |   |   `-CallExpr 0x2a7b4c20fc0 <col:20, col:65> 'int'
|   |   |     |-ImplicitCastExpr 0x2a7b4c2eff0 <col:20> 'int (*)()' <FunctionToPointerDecay>
|   |   |     | `-DeclRefExpr 0x2a7b4c2eee8 <col:20> 'int ()' Function 0x2a7b4c2ec68 'OPENSSL_malloc' 'int ()'
|   |   |     `-BinaryOperator 0x2a7b4c2efd0 <col:35, col:55> 'unsigned long long' '*'
|   |   |       |-UnaryExprOrTypeTraitExpr 0x2a7b4c2ef78 <col:35, col:51> 'unsigned long long' sizeof
|   |   |       | `-ParenExpr 0x2a7b4c2ef58 <col:41, col:51> 'smallfelem [17][3]':'smallfelem [17][3]' lvalue
|   |   |       |   `-UnaryOperator 0x2a7b4c2ef40 <col:42, col:43> 'smallfelem [17][3]':'smallfelem [17][3]' lvalue prefix '*' cannot overflow
|   |   |       |     `-ImplicitCastExpr 0x2a7b4c2ef28 <col:43> 'smallfelem (*)[17][3]' <LValueToRValue>
|   |   |       |       `-DeclRefExpr 0x2a7b4c2ef08 <col:43> 'smallfelem (*)[17][3]' lvalue Var 0x2a7b4c2c698 'pre_comp' 'smallfelem (*)[17][3]' non_odr_use_unevaluated
|   |   |       `-ImplicitCastExpr 0x2a7b4c2efb8 <col:55> 'size_t':'unsigned long long' <LValueToRValue>
|   |   |         `-DeclRefExpr 0x2a7b4c2ef98 <col:55> 'size_t':'unsigned long long' lvalue Var 0x2a7b4c2cb78 'num_points' 'size_t':'unsigned long long'
|   |   |-IfStmt 0x2a7b4c212f0 <line:2085:9, line:2087:78>
|   |   | |-ImplicitCastExpr 0x2a7b4c21040 <line:2085:13> 'int' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x2a7b4c21020 <col:13> 'int' lvalue Var 0x2a7b4c2c1b8 'mixed' 'int'
|   |   | `-BinaryOperator 0x2a7b4c212d0 <line:2086:13, line:2087:78> 'smallfelem *' '='
|   |   |   |-DeclRefExpr 0x2a7b4c21058 <line:2086:13> 'smallfelem *' lvalue Var 0x2a7b4c2c7c8 'tmp_smallfelems' 'smallfelem *'
|   |   |   `-ImplicitCastExpr 0x2a7b4c212b8 <line:2087:15, col:78> 'smallfelem *' <IntegralToPointer>
|   |   |     `-CallExpr 0x2a7b4c21290 <col:15, col:78> 'int'
|   |   |       |-ImplicitCastExpr 0x2a7b4c21278 <col:15> 'int (*)()' <FunctionToPointerDecay>
|   |   |       | `-DeclRefExpr 0x2a7b4c21090 <col:15> 'int ()' Function 0x2a7b4c2ec68 'OPENSSL_malloc' 'int ()'
|   |   |       `-BinaryOperator 0x2a7b4c21258 <col:30, col:77> 'unsigned long long' '*'
|   |   |         |-UnaryExprOrTypeTraitExpr 0x2a7b4c21120 <col:30, col:53> 'unsigned long long' sizeof
|   |   |         | `-ParenExpr 0x2a7b4c21100 <col:36, col:53> 'smallfelem':'u64 [4]' lvalue
|   |   |         |   `-UnaryOperator 0x2a7b4c210e8 <col:37, col:38> 'smallfelem':'u64 [4]' lvalue prefix '*' cannot overflow
|   |   |         |     `-ImplicitCastExpr 0x2a7b4c210d0 <col:38> 'smallfelem *' <LValueToRValue>
|   |   |         |       `-DeclRefExpr 0x2a7b4c210b0 <col:38> 'smallfelem *' lvalue Var 0x2a7b4c2c7c8 'tmp_smallfelems' 'smallfelem *' non_odr_use_unevaluated
|   |   |         `-ParenExpr 0x2a7b4c21238 <col:57, col:77> 'unsigned long long'
|   |   |           `-BinaryOperator 0x2a7b4c21218 <col:58, col:76> 'unsigned long long' '+'
|   |   |             |-BinaryOperator 0x2a7b4c211b8 <col:58, col:71> 'unsigned long long' '*'
|   |   |             | |-ImplicitCastExpr 0x2a7b4c21188 <col:58> 'size_t':'unsigned long long' <LValueToRValue>
|   |   |             | | `-DeclRefExpr 0x2a7b4c21140 <col:58> 'size_t':'unsigned long long' lvalue Var 0x2a7b4c2cb78 'num_points' 'size_t':'unsigned long long'
|   |   |             | `-ImplicitCastExpr 0x2a7b4c211a0 <col:71> 'unsigned long long' <IntegralCast>
|   |   |             |   `-IntegerLiteral 0x2a7b4c21160 <col:71> 'int' 17
|   |   |             `-ImplicitCastExpr 0x2a7b4c21200 <col:76> 'unsigned long long' <IntegralCast>
|   |   |               `-IntegerLiteral 0x2a7b4c211d8 <col:76> 'int' 1
|   |   |-IfStmt 0x2a7b4c21758 <line:2088:9, line:2092:9>
|   |   | |-BinaryOperator 0x2a7b4c216e8 <line:2088:13, line:2089:51> 'int' '||'
|   |   | | |-BinaryOperator 0x2a7b4c21538 <line:2088:13, col:51> 'int' '||'
|   |   | | | |-ParenExpr 0x2a7b4c21400 <col:13, col:29> 'int'
|   |   | | | | `-BinaryOperator 0x2a7b4c213e0 <col:14, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27> 'int' '=='
|   |   | | | |   |-ImplicitCastExpr 0x2a7b4c213b0 <.//openssl//file_jk/before\crypto\ec\ecp_nistp256.c:2088:14> 'felem_bytearray *' <LValueToRValue>
|   |   | | | |   | `-DeclRefExpr 0x2a7b4c21308 <col:14> 'felem_bytearray *' lvalue Var 0x2a7b4c2c3e8 'secrets' 'felem_bytearray *'
|   |   | | | |   `-ImplicitCastExpr 0x2a7b4c213c8 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'felem_bytearray *' <BitCast>
|   |   | | | |     `-ParenExpr 0x2a7b4c21390 <col:17, col:27> 'void *'
|   |   | | | |       `-CStyleCastExpr 0x2a7b4c21368 <col:18, col:26> 'void *' <NullToPointer>
|   |   | | | |         `-IntegerLiteral 0x2a7b4c21328 <col:26> 'int' 0
|   |   | | | `-ParenExpr 0x2a7b4c21518 <.//openssl//file_jk/before\crypto\ec\ecp_nistp256.c:2088:34, col:51> 'int'
|   |   | | |   `-BinaryOperator 0x2a7b4c214f8 <col:35, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27> 'int' '=='
|   |   | | |     |-ImplicitCastExpr 0x2a7b4c214c8 <.//openssl//file_jk/before\crypto\ec\ecp_nistp256.c:2088:35> 'smallfelem (*)[17][3]' <LValueToRValue>
|   |   | | |     | `-DeclRefExpr 0x2a7b4c21420 <col:35> 'smallfelem (*)[17][3]' lvalue Var 0x2a7b4c2c698 'pre_comp' 'smallfelem (*)[17][3]'
|   |   | | |     `-ImplicitCastExpr 0x2a7b4c214e0 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'smallfelem (*)[17][3]' <BitCast>
|   |   | | |       `-ParenExpr 0x2a7b4c214a8 <col:17, col:27> 'void *'
|   |   | | |         `-CStyleCastExpr 0x2a7b4c21480 <col:18, col:26> 'void *' <NullToPointer>
|   |   | | |           `-IntegerLiteral 0x2a7b4c21440 <col:26> 'int' 0
|   |   | | `-ParenExpr 0x2a7b4c216c8 <.//openssl//file_jk/before\crypto\ec\ecp_nistp256.c:2089:16, col:51> 'int'
|   |   | |   `-BinaryOperator 0x2a7b4c216a8 <col:17, col:50> 'int' '&&'
|   |   | |     |-ImplicitCastExpr 0x2a7b4c21690 <col:17> 'int' <LValueToRValue>
|   |   | |     | `-DeclRefExpr 0x2a7b4c21558 <col:17> 'int' lvalue Var 0x2a7b4c2c1b8 'mixed' 'int'
|   |   | |     `-ParenExpr 0x2a7b4c21670 <col:26, col:50> 'int'
|   |   | |       `-BinaryOperator 0x2a7b4c21650 <col:27, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27> 'int' '=='
|   |   | |         |-ImplicitCastExpr 0x2a7b4c21620 <.//openssl//file_jk/before\crypto\ec\ecp_nistp256.c:2089:27> 'smallfelem *' <LValueToRValue>
|   |   | |         | `-DeclRefExpr 0x2a7b4c21578 <col:27> 'smallfelem *' lvalue Var 0x2a7b4c2c7c8 'tmp_smallfelems' 'smallfelem *'
|   |   | |         `-ImplicitCastExpr 0x2a7b4c21638 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'smallfelem *' <BitCast>
|   |   | |           `-ParenExpr 0x2a7b4c21600 <col:17, col:27> 'void *'
|   |   | |             `-CStyleCastExpr 0x2a7b4c215d8 <col:18, col:26> 'void *' <NullToPointer>
|   |   | |               `-IntegerLiteral 0x2a7b4c21598 <col:26> 'int' 0
|   |   | `-CompoundStmt 0x2a7b4c21740 <.//openssl//file_jk/before\crypto\ec\ecp_nistp256.c:2089:54, line:2092:9>
|   |   |   `-GotoStmt 0x2a7b4c21728 <line:2091:13, col:18> 'err' 0x2a7b4c2daa0
|   |   |-CallExpr 0x2a7b4c218f0 <line:2098:9, col:57> 'void *'
|   |   | |-ImplicitCastExpr 0x2a7b4c218d8 <col:9> 'void *(*)(void *, int, unsigned long long)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x2a7b4c21770 <col:9> 'void *(void *, int, unsigned long long)' Function 0x2a7b49c0150 'memset' 'void *(void *, int, unsigned long long)'
|   |   | |-ImplicitCastExpr 0x2a7b4c21940 <col:16> 'void *' <BitCast>
|   |   | | `-ImplicitCastExpr 0x2a7b4c21928 <col:16> 'felem_bytearray *' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x2a7b4c21790 <col:16> 'felem_bytearray *' lvalue Var 0x2a7b4c2c3e8 'secrets' 'felem_bytearray *'
|   |   | |-IntegerLiteral 0x2a7b4c217b0 <col:25> 'int' 0
|   |   | `-BinaryOperator 0x2a7b4c218a0 <col:28, col:47> 'unsigned long long' '*'
|   |   |   |-UnaryExprOrTypeTraitExpr 0x2a7b4c21848 <col:28, col:43> 'unsigned long long' sizeof
|   |   |   | `-ParenExpr 0x2a7b4c21828 <col:34, col:43> 'felem_bytearray':'u8 [32]' lvalue
|   |   |   |   `-UnaryOperator 0x2a7b4c21810 <col:35, col:36> 'felem_bytearray':'u8 [32]' lvalue prefix '*' cannot overflow
|   |   |   |     `-ImplicitCastExpr 0x2a7b4c217f8 <col:36> 'felem_bytearray *' <LValueToRValue>
|   |   |   |       `-DeclRefExpr 0x2a7b4c217d8 <col:36> 'felem_bytearray *' lvalue Var 0x2a7b4c2c3e8 'secrets' 'felem_bytearray *' non_odr_use_unevaluated
|   |   |   `-ImplicitCastExpr 0x2a7b4c21888 <col:47> 'size_t':'unsigned long long' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x2a7b4c21868 <col:47> 'size_t':'unsigned long long' lvalue Var 0x2a7b4c2cb78 'num_points' 'size_t':'unsigned long long'
|   |   |-CallExpr 0x2a7b4c21ad8 <line:2099:9, col:59> 'void *'
|   |   | |-ImplicitCastExpr 0x2a7b4c21ac0 <col:9> 'void *(*)(void *, int, unsigned long long)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x2a7b4c21958 <col:9> 'void *(void *, int, unsigned long long)' Function 0x2a7b49c0150 'memset' 'void *(void *, int, unsigned long long)'
|   |   | |-ImplicitCastExpr 0x2a7b4c21b28 <col:16> 'void *' <BitCast>
|   |   | | `-ImplicitCastExpr 0x2a7b4c21b10 <col:16> 'smallfelem (*)[17][3]' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x2a7b4c21978 <col:16> 'smallfelem (*)[17][3]' lvalue Var 0x2a7b4c2c698 'pre_comp' 'smallfelem (*)[17][3]'
|   |   | |-IntegerLiteral 0x2a7b4c21998 <col:26> 'int' 0
|   |   | `-BinaryOperator 0x2a7b4c21a88 <col:29, col:49> 'unsigned long long' '*'
|   |   |   |-UnaryExprOrTypeTraitExpr 0x2a7b4c21a30 <col:29, col:45> 'unsigned long long' sizeof
|   |   |   | `-ParenExpr 0x2a7b4c21a10 <col:35, col:45> 'smallfelem [17][3]':'smallfelem [17][3]' lvalue
|   |   |   |   `-UnaryOperator 0x2a7b4c219f8 <col:36, col:37> 'smallfelem [17][3]':'smallfelem [17][3]' lvalue prefix '*' cannot overflow
|   |   |   |     `-ImplicitCastExpr 0x2a7b4c219e0 <col:37> 'smallfelem (*)[17][3]' <LValueToRValue>
|   |   |   |       `-DeclRefExpr 0x2a7b4c219c0 <col:37> 'smallfelem (*)[17][3]' lvalue Var 0x2a7b4c2c698 'pre_comp' 'smallfelem (*)[17][3]' non_odr_use_unevaluated
|   |   |   `-ImplicitCastExpr 0x2a7b4c21a70 <col:49> 'size_t':'unsigned long long' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x2a7b4c21a50 <col:49> 'size_t':'unsigned long long' lvalue Var 0x2a7b4c2cb78 'num_points' 'size_t':'unsigned long long'
|   |   |-ForStmt 0x2a7b4c3aaa0 <line:2100:9, line:2157:9>
|   |   | |-BinaryOperator 0x2a7b4c21bb8 <line:2100:14, col:18> 'unsigned int' '='
|   |   | | |-DeclRefExpr 0x2a7b4c21b40 <col:14> 'unsigned int' lvalue Var 0x2a7b4c2c990 'i' 'unsigned int'
|   |   | | `-ImplicitCastExpr 0x2a7b4c21ba0 <col:18> 'unsigned int' <IntegralCast>
|   |   | |   `-IntegerLiteral 0x2a7b4c21b78 <col:18> 'int' 0
|   |   | |-<<<NULL>>>
|   |   | |-BinaryOperator 0x2a7b4c21c60 <col:21, col:25> 'int' '<'
|   |   | | |-ImplicitCastExpr 0x2a7b4c21c48 <col:21> 'unsigned long long' <IntegralCast>
|   |   | | | `-ImplicitCastExpr 0x2a7b4c21c18 <col:21> 'unsigned int' <LValueToRValue>
|   |   | | |   `-DeclRefExpr 0x2a7b4c21bd8 <col:21> 'unsigned int' lvalue Var 0x2a7b4c2c990 'i' 'unsigned int'
|   |   | | `-ImplicitCastExpr 0x2a7b4c21c30 <col:25> 'size_t':'unsigned long long' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x2a7b4c21bf8 <col:25> 'size_t':'unsigned long long' lvalue Var 0x2a7b4c2cb78 'num_points' 'size_t':'unsigned long long'
|   |   | |-UnaryOperator 0x2a7b4c21ca0 <col:37, col:39> 'unsigned int' prefix '++'
|   |   | | `-DeclRefExpr 0x2a7b4c21c80 <col:39> 'unsigned int' lvalue Var 0x2a7b4c2c990 'i' 'unsigned int'
|   |   | `-CompoundStmt 0x2a7b4c3aa80 <col:42, line:2157:9>
|   |   |   |-IfStmt 0x2a7b4c21ed0 <line:2101:13, line:2114:13> has_else
|   |   |   | |-BinaryOperator 0x2a7b4c21d40 <line:2101:17, col:22> 'int' '=='
|   |   |   | | |-ImplicitCastExpr 0x2a7b4c21d28 <col:17> 'unsigned long long' <IntegralCast>
|   |   |   | | | `-ImplicitCastExpr 0x2a7b4c21cf8 <col:17> 'unsigned int' <LValueToRValue>
|   |   |   | | |   `-DeclRefExpr 0x2a7b4c21cb8 <col:17> 'unsigned int' lvalue Var 0x2a7b4c2c990 'i' 'unsigned int'
|   |   |   | | `-ImplicitCastExpr 0x2a7b4c21d10 <col:22> 'size_t':'unsigned long long' <LValueToRValue>
|   |   |   | |   `-DeclRefExpr 0x2a7b4c21cd8 <col:22> 'size_t':'unsigned long long' lvalue ParmVar 0x2a7b4c2bcf0 'num' 'size_t':'unsigned long long'
|   |   |   | |-CompoundStmt 0x2a7b4c21e70 <line:2106:13, line:2109:13>
|   |   |   | `-CompoundStmt 0x2a7b4c21ec0 <line:2111:13, line:2114:13>
|   |   |   `-IfStmt 0x2a7b4c3aa68 <line:2115:13, line:2156:13>
|   |   |     |-OpaqueValueExpr 0x2a7b4c3aa50 <<invalid sloc>> '_Bool'
|   |   |     `-CompoundStmt 0x2a7b4c3aa08 <line:2115:52, line:2156:13>
|   |   |       |-IfStmt 0x2a7b4c22418 <line:2117:17, line:2129:21> has_else
|   |   |       | |-OpaqueValueExpr 0x2a7b4c22400 <<invalid sloc>> '_Bool'
|   |   |       | |-CompoundStmt 0x2a7b4c22380 <line:2118:52, line:2128:17>
|   |   |       | | `-IfStmt 0x2a7b4c222d8 <line:2123:21, line:2126:21>
|   |   |       | |   |-OpaqueValueExpr 0x2a7b4c222c0 <<invalid sloc>> '_Bool'
|   |   |       | |   `-CompoundStmt 0x2a7b4c222a8 <line:2123:77, line:2126:21>
|   |   |       | |     `-GotoStmt 0x2a7b4c22290 <line:2125:25, col:30> 'err' 0x2a7b4c2daa0
|   |   |       | `-NullStmt 0x2a7b4c223f8 <line:2129:21>
|   |   |       |-CallExpr 0x2a7b4c22548 <line:2130:17, col:55> 'void'
|   |   |       | |-ImplicitCastExpr 0x2a7b4c22530 <col:17> 'void (*)(u8 *, const u8 *, unsigned int)' <FunctionToPointerDecay>
|   |   |       | | `-DeclRefExpr 0x2a7b4c22440 <col:17> 'void (u8 *, const u8 *, unsigned int)' Function 0x2a7b4ae8958 'flip_endian' 'void (u8 *, const u8 *, unsigned int)'
|   |   |       | |-ImplicitCastExpr 0x2a7b4c22580 <col:29, col:38> 'u8 *' <ArrayToPointerDecay>
|   |   |       | | `-ArraySubscriptExpr 0x2a7b4c224d0 <col:29, col:38> 'felem_bytearray':'u8 [32]' lvalue
|   |   |       | |   |-ImplicitCastExpr 0x2a7b4c224a0 <col:29> 'felem_bytearray *' <LValueToRValue>
|   |   |       | |   | `-DeclRefExpr 0x2a7b4c22460 <col:29> 'felem_bytearray *' lvalue Var 0x2a7b4c2c3e8 'secrets' 'felem_bytearray *'
|   |   |       | |   `-ImplicitCastExpr 0x2a7b4c224b8 <col:37> 'unsigned int' <LValueToRValue>
|   |   |       | |     `-DeclRefExpr 0x2a7b4c22480 <col:37> 'unsigned int' lvalue Var 0x2a7b4c2c990 'i' 'unsigned int'
|   |   |       | |-ImplicitCastExpr 0x2a7b4c225b0 <col:41> 'const u8 *' <NoOp>
|   |   |       | | `-ImplicitCastExpr 0x2a7b4c22598 <col:41> 'u8 *' <ArrayToPointerDecay>
|   |   |       | |   `-DeclRefExpr 0x2a7b4c224f0 <col:41> 'felem_bytearray':'u8 [32]' lvalue Var 0x2a7b4c2c8f8 'tmp' 'felem_bytearray':'u8 [32]'
|   |   |       | `-ImplicitCastExpr 0x2a7b4c225c8 <col:46> 'unsigned int' <LValueToRValue>
|   |   |       |   `-DeclRefExpr 0x2a7b4c22510 <col:46> 'unsigned int' lvalue Var 0x2a7b4c2ca10 'num_bytes' 'unsigned int'
|   |   |       |-IfStmt 0x2a7b4c226b8 <line:2132:17, line:2135:26>
|   |   |       | |-OpaqueValueExpr 0x2a7b4c226a0 <<invalid sloc>> '_Bool'
|   |   |       | `-GotoStmt 0x2a7b4c22688 <col:21, col:26> 'err' 0x2a7b4c2daa0
|   |   |       |-CallExpr 0x2a7b4c22878 <line:2136:17, col:54> 'void'
|   |   |       | |-ImplicitCastExpr 0x2a7b4c22860 <col:17> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|   |   |       | | `-DeclRefExpr 0x2a7b4c226d0 <col:17> 'void (u64 *, const limb *)' Function 0x2a7b49fd1a8 'felem_shrink' 'void (u64 *, const limb *)'
|   |   |       | |-ImplicitCastExpr 0x2a7b4c228a8 <col:30, col:46> 'u64 *' <ArrayToPointerDecay>
|   |   |       | | `-ArraySubscriptExpr 0x2a7b4c22820 <col:30, col:46> 'smallfelem':'u64 [4]' lvalue
|   |   |       | |   |-ImplicitCastExpr 0x2a7b4c22808 <col:30, col:43> 'smallfelem *' <ArrayToPointerDecay>
|   |   |       | |   | `-ArraySubscriptExpr 0x2a7b4c227c0 <col:30, col:43> 'smallfelem [3]' lvalue
|   |   |       | |   |   |-ImplicitCastExpr 0x2a7b4c227a8 <col:30, col:40> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |       | |   |   | `-ArraySubscriptExpr 0x2a7b4c22760 <col:30, col:40> 'smallfelem [17][3]':'smallfelem [17][3]' lvalue
|   |   |       | |   |   |   |-ImplicitCastExpr 0x2a7b4c22730 <col:30> 'smallfelem (*)[17][3]' <LValueToRValue>
|   |   |       | |   |   |   | `-DeclRefExpr 0x2a7b4c226f0 <col:30> 'smallfelem (*)[17][3]' lvalue Var 0x2a7b4c2c698 'pre_comp' 'smallfelem (*)[17][3]'
|   |   |       | |   |   |   `-ImplicitCastExpr 0x2a7b4c22748 <col:39> 'unsigned int' <LValueToRValue>
|   |   |       | |   |   |     `-DeclRefExpr 0x2a7b4c22710 <col:39> 'unsigned int' lvalue Var 0x2a7b4c2c990 'i' 'unsigned int'
|   |   |       | |   |   `-IntegerLiteral 0x2a7b4c22780 <col:42> 'int' 1
|   |   |       | |   `-IntegerLiteral 0x2a7b4c227e0 <col:45> 'int' 0
|   |   |       | `-ImplicitCastExpr 0x2a7b4c228d8 <col:49> 'const limb *':'const limb *' <NoOp>
|   |   |       |   `-ImplicitCastExpr 0x2a7b4c228c0 <col:49> 'limb *' <ArrayToPointerDecay>
|   |   |       |     `-DeclRefExpr 0x2a7b4c22840 <col:49> 'felem':'limb [4]' lvalue Var 0x2a7b4c2cdf8 'x_out' 'felem':'limb [4]'
|   |   |       |-CallExpr 0x2a7b4c22a98 <line:2137:17, col:54> 'void'
|   |   |       | |-ImplicitCastExpr 0x2a7b4c22a80 <col:17> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|   |   |       | | `-DeclRefExpr 0x2a7b4c228f0 <col:17> 'void (u64 *, const limb *)' Function 0x2a7b49fd1a8 'felem_shrink' 'void (u64 *, const limb *)'
|   |   |       | |-ImplicitCastExpr 0x2a7b4c22ac8 <col:30, col:46> 'u64 *' <ArrayToPointerDecay>
|   |   |       | | `-ArraySubscriptExpr 0x2a7b4c22a40 <col:30, col:46> 'smallfelem':'u64 [4]' lvalue
|   |   |       | |   |-ImplicitCastExpr 0x2a7b4c22a28 <col:30, col:43> 'smallfelem *' <ArrayToPointerDecay>
|   |   |       | |   | `-ArraySubscriptExpr 0x2a7b4c229e0 <col:30, col:43> 'smallfelem [3]' lvalue
|   |   |       | |   |   |-ImplicitCastExpr 0x2a7b4c229c8 <col:30, col:40> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |       | |   |   | `-ArraySubscriptExpr 0x2a7b4c22980 <col:30, col:40> 'smallfelem [17][3]':'smallfelem [17][3]' lvalue
|   |   |       | |   |   |   |-ImplicitCastExpr 0x2a7b4c22950 <col:30> 'smallfelem (*)[17][3]' <LValueToRValue>
|   |   |       | |   |   |   | `-DeclRefExpr 0x2a7b4c22910 <col:30> 'smallfelem (*)[17][3]' lvalue Var 0x2a7b4c2c698 'pre_comp' 'smallfelem (*)[17][3]'
|   |   |       | |   |   |   `-ImplicitCastExpr 0x2a7b4c22968 <col:39> 'unsigned int' <LValueToRValue>
|   |   |       | |   |   |     `-DeclRefExpr 0x2a7b4c22930 <col:39> 'unsigned int' lvalue Var 0x2a7b4c2c990 'i' 'unsigned int'
|   |   |       | |   |   `-IntegerLiteral 0x2a7b4c229a0 <col:42> 'int' 1
|   |   |       | |   `-IntegerLiteral 0x2a7b4c22a00 <col:45> 'int' 1
|   |   |       | `-ImplicitCastExpr 0x2a7b4c22af8 <col:49> 'const limb *':'const limb *' <NoOp>
|   |   |       |   `-ImplicitCastExpr 0x2a7b4c22ae0 <col:49> 'limb *' <ArrayToPointerDecay>
|   |   |       |     `-DeclRefExpr 0x2a7b4c22a60 <col:49> 'felem':'limb [4]' lvalue Var 0x2a7b4c2ce70 'y_out' 'felem':'limb [4]'
|   |   |       |-CallExpr 0x2a7b4c22cb8 <line:2138:17, col:54> 'void'
|   |   |       | |-ImplicitCastExpr 0x2a7b4c22ca0 <col:17> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|   |   |       | | `-DeclRefExpr 0x2a7b4c22b10 <col:17> 'void (u64 *, const limb *)' Function 0x2a7b49fd1a8 'felem_shrink' 'void (u64 *, const limb *)'
|   |   |       | |-ImplicitCastExpr 0x2a7b4c22ce8 <col:30, col:46> 'u64 *' <ArrayToPointerDecay>
|   |   |       | | `-ArraySubscriptExpr 0x2a7b4c22c60 <col:30, col:46> 'smallfelem':'u64 [4]' lvalue
|   |   |       | |   |-ImplicitCastExpr 0x2a7b4c22c48 <col:30, col:43> 'smallfelem *' <ArrayToPointerDecay>
|   |   |       | |   | `-ArraySubscriptExpr 0x2a7b4c22c00 <col:30, col:43> 'smallfelem [3]' lvalue
|   |   |       | |   |   |-ImplicitCastExpr 0x2a7b4c22be8 <col:30, col:40> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |       | |   |   | `-ArraySubscriptExpr 0x2a7b4c22ba0 <col:30, col:40> 'smallfelem [17][3]':'smallfelem [17][3]' lvalue
|   |   |       | |   |   |   |-ImplicitCastExpr 0x2a7b4c22b70 <col:30> 'smallfelem (*)[17][3]' <LValueToRValue>
|   |   |       | |   |   |   | `-DeclRefExpr 0x2a7b4c22b30 <col:30> 'smallfelem (*)[17][3]' lvalue Var 0x2a7b4c2c698 'pre_comp' 'smallfelem (*)[17][3]'
|   |   |       | |   |   |   `-ImplicitCastExpr 0x2a7b4c22b88 <col:39> 'unsigned int' <LValueToRValue>
|   |   |       | |   |   |     `-DeclRefExpr 0x2a7b4c22b50 <col:39> 'unsigned int' lvalue Var 0x2a7b4c2c990 'i' 'unsigned int'
|   |   |       | |   |   `-IntegerLiteral 0x2a7b4c22bc0 <col:42> 'int' 1
|   |   |       | |   `-IntegerLiteral 0x2a7b4c22c20 <col:45> 'int' 2
|   |   |       | `-ImplicitCastExpr 0x2a7b4c22d18 <col:49> 'const limb *':'const limb *' <NoOp>
|   |   |       |   `-ImplicitCastExpr 0x2a7b4c22d00 <col:49> 'limb *' <ArrayToPointerDecay>
|   |   |       |     `-DeclRefExpr 0x2a7b4c22c80 <col:49> 'felem':'limb [4]' lvalue Var 0x2a7b4c2cee8 'z_out' 'felem':'limb [4]'
|   |   |       `-ForStmt 0x2a7b4c3a9d0 <line:2139:17, line:2155:17>
|   |   |         |-BinaryOperator 0x2a7b4c22d90 <line:2139:22, col:26> 'int' '='
|   |   |         | |-DeclRefExpr 0x2a7b4c22d30 <col:22> 'int' lvalue Var 0x2a7b4c2c120 'j' 'int'
|   |   |         | `-IntegerLiteral 0x2a7b4c22d68 <col:26> 'int' 2
|   |   |         |-<<<NULL>>>
|   |   |         |-BinaryOperator 0x2a7b4c22e10 <col:29, col:34> 'int' '<='
|   |   |         | |-ImplicitCastExpr 0x2a7b4c22df8 <col:29> 'int' <LValueToRValue>
|   |   |         | | `-DeclRefExpr 0x2a7b4c22db0 <col:29> 'int' lvalue Var 0x2a7b4c2c120 'j' 'int'
|   |   |         | `-IntegerLiteral 0x2a7b4c22dd0 <col:34> 'int' 16
|   |   |         |-UnaryOperator 0x2a7b4c22e50 <col:38, col:40> 'int' prefix '++'
|   |   |         | `-DeclRefExpr 0x2a7b4c22e30 <col:40> 'int' lvalue Var 0x2a7b4c2c120 'j' 'int'
|   |   |         `-CompoundStmt 0x2a7b4c3a9b8 <col:43, line:2155:17>
|   |   |           `-IfStmt 0x2a7b4c3a990 <line:2140:21, line:2154:21> has_else
|   |   |             |-BinaryOperator 0x2a7b4c22ec8 <line:2140:25, col:29> 'int' '&'
|   |   |             | |-ImplicitCastExpr 0x2a7b4c22eb0 <col:25> 'int' <LValueToRValue>
|   |   |             | | `-DeclRefExpr 0x2a7b4c22e68 <col:25> 'int' lvalue Var 0x2a7b4c2c120 'j' 'int'
|   |   |             | `-IntegerLiteral 0x2a7b4c22e88 <col:29> 'int' 1
|   |   |             |-CompoundStmt 0x2a7b4c39e90 <col:32, line:2147:21>
|   |   |             | `-CallExpr 0x2a7b4c39d50 <line:2141:25, line:2146:62> 'void'
|   |   |             |   |-ImplicitCastExpr 0x2a7b4c39d38 <line:2141:25> 'void (*)(u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *)' <FunctionToPointerDecay>
|   |   |             |   | `-DeclRefExpr 0x2a7b4c22ee8 <col:25> 'void (u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *)' Function 0x2a7b4b02d78 'point_add_small' 'void (u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *)'
|   |   |             |   |-ImplicitCastExpr 0x2a7b4c39db8 <col:41, col:57> 'u64 *' <ArrayToPointerDecay>
|   |   |             |   | `-ArraySubscriptExpr 0x2a7b4c39110 <col:41, col:57> 'smallfelem':'u64 [4]' lvalue
|   |   |             |   |   |-ImplicitCastExpr 0x2a7b4c390f8 <col:41, col:54> 'smallfelem *' <ArrayToPointerDecay>
|   |   |             |   |   | `-ArraySubscriptExpr 0x2a7b4c390b0 <col:41, col:54> 'smallfelem [3]' lvalue
|   |   |             |   |   |   |-ImplicitCastExpr 0x2a7b4c39080 <col:41, col:51> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |             |   |   |   | `-ArraySubscriptExpr 0x2a7b4c22f78 <col:41, col:51> 'smallfelem [17][3]':'smallfelem [17][3]' lvalue
|   |   |             |   |   |   |   |-ImplicitCastExpr 0x2a7b4c22f48 <col:41> 'smallfelem (*)[17][3]' <LValueToRValue>
|   |   |             |   |   |   |   | `-DeclRefExpr 0x2a7b4c22f08 <col:41> 'smallfelem (*)[17][3]' lvalue Var 0x2a7b4c2c698 'pre_comp' 'smallfelem (*)[17][3]'
|   |   |             |   |   |   |   `-ImplicitCastExpr 0x2a7b4c22f60 <col:50> 'unsigned int' <LValueToRValue>
|   |   |             |   |   |   |     `-DeclRefExpr 0x2a7b4c22f28 <col:50> 'unsigned int' lvalue Var 0x2a7b4c2c990 'i' 'unsigned int'
|   |   |             |   |   |   `-ImplicitCastExpr 0x2a7b4c39098 <col:53> 'int' <LValueToRValue>
|   |   |             |   |   |     `-DeclRefExpr 0x2a7b4c22f98 <col:53> 'int' lvalue Var 0x2a7b4c2c120 'j' 'int'
|   |   |             |   |   `-IntegerLiteral 0x2a7b4c390d0 <col:56> 'int' 0
|   |   |             |   |-ImplicitCastExpr 0x2a7b4c39dd0 <col:60, col:76> 'u64 *' <ArrayToPointerDecay>
|   |   |             |   | `-ArraySubscriptExpr 0x2a7b4c39270 <col:60, col:76> 'smallfelem':'u64 [4]' lvalue
|   |   |             |   |   |-ImplicitCastExpr 0x2a7b4c39258 <col:60, col:73> 'smallfelem *' <ArrayToPointerDecay>
|   |   |             |   |   | `-ArraySubscriptExpr 0x2a7b4c39210 <col:60, col:73> 'smallfelem [3]' lvalue
|   |   |             |   |   |   |-ImplicitCastExpr 0x2a7b4c391e0 <col:60, col:70> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |             |   |   |   | `-ArraySubscriptExpr 0x2a7b4c391a0 <col:60, col:70> 'smallfelem [17][3]':'smallfelem [17][3]' lvalue
|   |   |             |   |   |   |   |-ImplicitCastExpr 0x2a7b4c39170 <col:60> 'smallfelem (*)[17][3]' <LValueToRValue>
|   |   |             |   |   |   |   | `-DeclRefExpr 0x2a7b4c39130 <col:60> 'smallfelem (*)[17][3]' lvalue Var 0x2a7b4c2c698 'pre_comp' 'smallfelem (*)[17][3]'
|   |   |             |   |   |   |   `-ImplicitCastExpr 0x2a7b4c39188 <col:69> 'unsigned int' <LValueToRValue>
|   |   |             |   |   |   |     `-DeclRefExpr 0x2a7b4c39150 <col:69> 'unsigned int' lvalue Var 0x2a7b4c2c990 'i' 'unsigned int'
|   |   |             |   |   |   `-ImplicitCastExpr 0x2a7b4c391f8 <col:72> 'int' <LValueToRValue>
|   |   |             |   |   |     `-DeclRefExpr 0x2a7b4c391c0 <col:72> 'int' lvalue Var 0x2a7b4c2c120 'j' 'int'
|   |   |             |   |   `-IntegerLiteral 0x2a7b4c39230 <col:75> 'int' 1
|   |   |             |   |-ImplicitCastExpr 0x2a7b4c39de8 <line:2142:41, col:57> 'u64 *' <ArrayToPointerDecay>
|   |   |             |   | `-ArraySubscriptExpr 0x2a7b4c393d0 <col:41, col:57> 'smallfelem':'u64 [4]' lvalue
|   |   |             |   |   |-ImplicitCastExpr 0x2a7b4c393b8 <col:41, col:54> 'smallfelem *' <ArrayToPointerDecay>
|   |   |             |   |   | `-ArraySubscriptExpr 0x2a7b4c39370 <col:41, col:54> 'smallfelem [3]' lvalue
|   |   |             |   |   |   |-ImplicitCastExpr 0x2a7b4c39340 <col:41, col:51> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |             |   |   |   | `-ArraySubscriptExpr 0x2a7b4c39300 <col:41, col:51> 'smallfelem [17][3]':'smallfelem [17][3]' lvalue
|   |   |             |   |   |   |   |-ImplicitCastExpr 0x2a7b4c392d0 <col:41> 'smallfelem (*)[17][3]' <LValueToRValue>
|   |   |             |   |   |   |   | `-DeclRefExpr 0x2a7b4c39290 <col:41> 'smallfelem (*)[17][3]' lvalue Var 0x2a7b4c2c698 'pre_comp' 'smallfelem (*)[17][3]'
|   |   |             |   |   |   |   `-ImplicitCastExpr 0x2a7b4c392e8 <col:50> 'unsigned int' <LValueToRValue>
|   |   |             |   |   |   |     `-DeclRefExpr 0x2a7b4c392b0 <col:50> 'unsigned int' lvalue Var 0x2a7b4c2c990 'i' 'unsigned int'
|   |   |             |   |   |   `-ImplicitCastExpr 0x2a7b4c39358 <col:53> 'int' <LValueToRValue>
|   |   |             |   |   |     `-DeclRefExpr 0x2a7b4c39320 <col:53> 'int' lvalue Var 0x2a7b4c2c120 'j' 'int'
|   |   |             |   |   `-IntegerLiteral 0x2a7b4c39390 <col:56> 'int' 2
|   |   |             |   |-ImplicitCastExpr 0x2a7b4c39e00 <col:60, col:76> 'u64 *' <ArrayToPointerDecay>
|   |   |             |   | `-ArraySubscriptExpr 0x2a7b4c39520 <col:60, col:76> 'smallfelem':'u64 [4]' lvalue
|   |   |             |   |   |-ImplicitCastExpr 0x2a7b4c39508 <col:60, col:73> 'smallfelem *' <ArrayToPointerDecay>
|   |   |             |   |   | `-ArraySubscriptExpr 0x2a7b4c394c0 <col:60, col:73> 'smallfelem [3]' lvalue
|   |   |             |   |   |   |-ImplicitCastExpr 0x2a7b4c394a8 <col:60, col:70> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |             |   |   |   | `-ArraySubscriptExpr 0x2a7b4c39460 <col:60, col:70> 'smallfelem [17][3]':'smallfelem [17][3]' lvalue
|   |   |             |   |   |   |   |-ImplicitCastExpr 0x2a7b4c39430 <col:60> 'smallfelem (*)[17][3]' <LValueToRValue>
|   |   |             |   |   |   |   | `-DeclRefExpr 0x2a7b4c393f0 <col:60> 'smallfelem (*)[17][3]' lvalue Var 0x2a7b4c2c698 'pre_comp' 'smallfelem (*)[17][3]'
|   |   |             |   |   |   |   `-ImplicitCastExpr 0x2a7b4c39448 <col:69> 'unsigned int' <LValueToRValue>
|   |   |             |   |   |   |     `-DeclRefExpr 0x2a7b4c39410 <col:69> 'unsigned int' lvalue Var 0x2a7b4c2c990 'i' 'unsigned int'
|   |   |             |   |   |   `-IntegerLiteral 0x2a7b4c39480 <col:72> 'int' 1
|   |   |             |   |   `-IntegerLiteral 0x2a7b4c394e0 <col:75> 'int' 0
|   |   |             |   |-ImplicitCastExpr 0x2a7b4c39e18 <line:2143:41, col:57> 'u64 *' <ArrayToPointerDecay>
|   |   |             |   | `-ArraySubscriptExpr 0x2a7b4c39670 <col:41, col:57> 'smallfelem':'u64 [4]' lvalue
|   |   |             |   |   |-ImplicitCastExpr 0x2a7b4c39658 <col:41, col:54> 'smallfelem *' <ArrayToPointerDecay>
|   |   |             |   |   | `-ArraySubscriptExpr 0x2a7b4c39610 <col:41, col:54> 'smallfelem [3]' lvalue
|   |   |             |   |   |   |-ImplicitCastExpr 0x2a7b4c395f8 <col:41, col:51> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |             |   |   |   | `-ArraySubscriptExpr 0x2a7b4c395b0 <col:41, col:51> 'smallfelem [17][3]':'smallfelem [17][3]' lvalue
|   |   |             |   |   |   |   |-ImplicitCastExpr 0x2a7b4c39580 <col:41> 'smallfelem (*)[17][3]' <LValueToRValue>
|   |   |             |   |   |   |   | `-DeclRefExpr 0x2a7b4c39540 <col:41> 'smallfelem (*)[17][3]' lvalue Var 0x2a7b4c2c698 'pre_comp' 'smallfelem (*)[17][3]'
|   |   |             |   |   |   |   `-ImplicitCastExpr 0x2a7b4c39598 <col:50> 'unsigned int' <LValueToRValue>
|   |   |             |   |   |   |     `-DeclRefExpr 0x2a7b4c39560 <col:50> 'unsigned int' lvalue Var 0x2a7b4c2c990 'i' 'unsigned int'
|   |   |             |   |   |   `-IntegerLiteral 0x2a7b4c395d0 <col:53> 'int' 1
|   |   |             |   |   `-IntegerLiteral 0x2a7b4c39630 <col:56> 'int' 1
|   |   |             |   |-ImplicitCastExpr 0x2a7b4c39e30 <col:60, col:76> 'u64 *' <ArrayToPointerDecay>
|   |   |             |   | `-ArraySubscriptExpr 0x2a7b4c397c0 <col:60, col:76> 'smallfelem':'u64 [4]' lvalue
|   |   |             |   |   |-ImplicitCastExpr 0x2a7b4c397a8 <col:60, col:73> 'smallfelem *' <ArrayToPointerDecay>
|   |   |             |   |   | `-ArraySubscriptExpr 0x2a7b4c39760 <col:60, col:73> 'smallfelem [3]' lvalue
|   |   |             |   |   |   |-ImplicitCastExpr 0x2a7b4c39748 <col:60, col:70> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |             |   |   |   | `-ArraySubscriptExpr 0x2a7b4c39700 <col:60, col:70> 'smallfelem [17][3]':'smallfelem [17][3]' lvalue
|   |   |             |   |   |   |   |-ImplicitCastExpr 0x2a7b4c396d0 <col:60> 'smallfelem (*)[17][3]' <LValueToRValue>
|   |   |             |   |   |   |   | `-DeclRefExpr 0x2a7b4c39690 <col:60> 'smallfelem (*)[17][3]' lvalue Var 0x2a7b4c2c698 'pre_comp' 'smallfelem (*)[17][3]'
|   |   |             |   |   |   |   `-ImplicitCastExpr 0x2a7b4c396e8 <col:69> 'unsigned int' <LValueToRValue>
|   |   |             |   |   |   |     `-DeclRefExpr 0x2a7b4c396b0 <col:69> 'unsigned int' lvalue Var 0x2a7b4c2c990 'i' 'unsigned int'
|   |   |             |   |   |   `-IntegerLiteral 0x2a7b4c39720 <col:72> 'int' 1
|   |   |             |   |   `-IntegerLiteral 0x2a7b4c39780 <col:75> 'int' 2
|   |   |             |   |-ImplicitCastExpr 0x2a7b4c39e48 <line:2144:41, col:61> 'u64 *' <ArrayToPointerDecay>
|   |   |             |   | `-ArraySubscriptExpr 0x2a7b4c39968 <col:41, col:61> 'smallfelem':'u64 [4]' lvalue
|   |   |             |   |   |-ImplicitCastExpr 0x2a7b4c39950 <col:41, col:58> 'smallfelem *' <ArrayToPointerDecay>
|   |   |             |   |   | `-ArraySubscriptExpr 0x2a7b4c39908 <col:41, col:58> 'smallfelem [3]' lvalue
|   |   |             |   |   |   |-ImplicitCastExpr 0x2a7b4c398f0 <col:41, col:51> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |             |   |   |   | `-ArraySubscriptExpr 0x2a7b4c39850 <col:41, col:51> 'smallfelem [17][3]':'smallfelem [17][3]' lvalue
|   |   |             |   |   |   |   |-ImplicitCastExpr 0x2a7b4c39820 <col:41> 'smallfelem (*)[17][3]' <LValueToRValue>
|   |   |             |   |   |   |   | `-DeclRefExpr 0x2a7b4c397e0 <col:41> 'smallfelem (*)[17][3]' lvalue Var 0x2a7b4c2c698 'pre_comp' 'smallfelem (*)[17][3]'
|   |   |             |   |   |   |   `-ImplicitCastExpr 0x2a7b4c39838 <col:50> 'unsigned int' <LValueToRValue>
|   |   |             |   |   |   |     `-DeclRefExpr 0x2a7b4c39800 <col:50> 'unsigned int' lvalue Var 0x2a7b4c2c990 'i' 'unsigned int'
|   |   |             |   |   |   `-BinaryOperator 0x2a7b4c398d0 <col:53, col:57> 'int' '-'
|   |   |             |   |   |     |-ImplicitCastExpr 0x2a7b4c398b8 <col:53> 'int' <LValueToRValue>
|   |   |             |   |   |     | `-DeclRefExpr 0x2a7b4c39870 <col:53> 'int' lvalue Var 0x2a7b4c2c120 'j' 'int'
|   |   |             |   |   |     `-IntegerLiteral 0x2a7b4c39890 <col:57> 'int' 1
|   |   |             |   |   `-IntegerLiteral 0x2a7b4c39928 <col:60> 'int' 0
|   |   |             |   |-ImplicitCastExpr 0x2a7b4c39e60 <line:2145:41, col:61> 'u64 *' <ArrayToPointerDecay>
|   |   |             |   | `-ArraySubscriptExpr 0x2a7b4c39b10 <col:41, col:61> 'smallfelem':'u64 [4]' lvalue
|   |   |             |   |   |-ImplicitCastExpr 0x2a7b4c39af8 <col:41, col:58> 'smallfelem *' <ArrayToPointerDecay>
|   |   |             |   |   | `-ArraySubscriptExpr 0x2a7b4c39ab0 <col:41, col:58> 'smallfelem [3]' lvalue
|   |   |             |   |   |   |-ImplicitCastExpr 0x2a7b4c39a98 <col:41, col:51> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |             |   |   |   | `-ArraySubscriptExpr 0x2a7b4c399f8 <col:41, col:51> 'smallfelem [17][3]':'smallfelem [17][3]' lvalue
|   |   |             |   |   |   |   |-ImplicitCastExpr 0x2a7b4c399c8 <col:41> 'smallfelem (*)[17][3]' <LValueToRValue>
|   |   |             |   |   |   |   | `-DeclRefExpr 0x2a7b4c39988 <col:41> 'smallfelem (*)[17][3]' lvalue Var 0x2a7b4c2c698 'pre_comp' 'smallfelem (*)[17][3]'
|   |   |             |   |   |   |   `-ImplicitCastExpr 0x2a7b4c399e0 <col:50> 'unsigned int' <LValueToRValue>
|   |   |             |   |   |   |     `-DeclRefExpr 0x2a7b4c399a8 <col:50> 'unsigned int' lvalue Var 0x2a7b4c2c990 'i' 'unsigned int'
|   |   |             |   |   |   `-BinaryOperator 0x2a7b4c39a78 <col:53, col:57> 'int' '-'
|   |   |             |   |   |     |-ImplicitCastExpr 0x2a7b4c39a60 <col:53> 'int' <LValueToRValue>
|   |   |             |   |   |     | `-DeclRefExpr 0x2a7b4c39a18 <col:53> 'int' lvalue Var 0x2a7b4c2c120 'j' 'int'
|   |   |             |   |   |     `-IntegerLiteral 0x2a7b4c39a38 <col:57> 'int' 1
|   |   |             |   |   `-IntegerLiteral 0x2a7b4c39ad0 <col:60> 'int' 1
|   |   |             |   `-ImplicitCastExpr 0x2a7b4c39e78 <line:2146:41, col:61> 'u64 *' <ArrayToPointerDecay>
|   |   |             |     `-ArraySubscriptExpr 0x2a7b4c39cb8 <col:41, col:61> 'smallfelem':'u64 [4]' lvalue
|   |   |             |       |-ImplicitCastExpr 0x2a7b4c39ca0 <col:41, col:58> 'smallfelem *' <ArrayToPointerDecay>
|   |   |             |       | `-ArraySubscriptExpr 0x2a7b4c39c58 <col:41, col:58> 'smallfelem [3]' lvalue
|   |   |             |       |   |-ImplicitCastExpr 0x2a7b4c39c40 <col:41, col:51> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |             |       |   | `-ArraySubscriptExpr 0x2a7b4c39ba0 <col:41, col:51> 'smallfelem [17][3]':'smallfelem [17][3]' lvalue
|   |   |             |       |   |   |-ImplicitCastExpr 0x2a7b4c39b70 <col:41> 'smallfelem (*)[17][3]' <LValueToRValue>
|   |   |             |       |   |   | `-DeclRefExpr 0x2a7b4c39b30 <col:41> 'smallfelem (*)[17][3]' lvalue Var 0x2a7b4c2c698 'pre_comp' 'smallfelem (*)[17][3]'
|   |   |             |       |   |   `-ImplicitCastExpr 0x2a7b4c39b88 <col:50> 'unsigned int' <LValueToRValue>
|   |   |             |       |   |     `-DeclRefExpr 0x2a7b4c39b50 <col:50> 'unsigned int' lvalue Var 0x2a7b4c2c990 'i' 'unsigned int'
|   |   |             |       |   `-BinaryOperator 0x2a7b4c39c20 <col:53, col:57> 'int' '-'
|   |   |             |       |     |-ImplicitCastExpr 0x2a7b4c39c08 <col:53> 'int' <LValueToRValue>
|   |   |             |       |     | `-DeclRefExpr 0x2a7b4c39bc0 <col:53> 'int' lvalue Var 0x2a7b4c2c120 'j' 'int'
|   |   |             |       |     `-IntegerLiteral 0x2a7b4c39be0 <col:57> 'int' 1
|   |   |             |       `-IntegerLiteral 0x2a7b4c39c78 <col:60> 'int' 2
|   |   |             `-CompoundStmt 0x2a7b4c3a978 <line:2147:28, line:2154:21>
|   |   |               `-CallExpr 0x2a7b4c3a850 <line:2148:25, line:2153:65> 'void'
|   |   |                 |-ImplicitCastExpr 0x2a7b4c3a838 <line:2148:25> 'void (*)(u64 *, u64 *, u64 *, const u64 *, const u64 *, const u64 *)' <FunctionToPointerDecay>
|   |   |                 | `-DeclRefExpr 0x2a7b4c39ea8 <col:25> 'void (u64 *, u64 *, u64 *, const u64 *, const u64 *, const u64 *)' Function 0x2a7b4afc508 'point_double_small' 'void (u64 *, u64 *, u64 *, const u64 *, const u64 *, const u64 *)'
|   |   |                 |-ImplicitCastExpr 0x2a7b4c3a8a0 <col:44, col:60> 'u64 *' <ArrayToPointerDecay>
|   |   |                 | `-ArraySubscriptExpr 0x2a7b4c3a008 <col:44, col:60> 'smallfelem':'u64 [4]' lvalue
|   |   |                 |   |-ImplicitCastExpr 0x2a7b4c39ff0 <col:44, col:57> 'smallfelem *' <ArrayToPointerDecay>
|   |   |                 |   | `-ArraySubscriptExpr 0x2a7b4c39fa8 <col:44, col:57> 'smallfelem [3]' lvalue
|   |   |                 |   |   |-ImplicitCastExpr 0x2a7b4c39f78 <col:44, col:54> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |                 |   |   | `-ArraySubscriptExpr 0x2a7b4c39f38 <col:44, col:54> 'smallfelem [17][3]':'smallfelem [17][3]' lvalue
|   |   |                 |   |   |   |-ImplicitCastExpr 0x2a7b4c39f08 <col:44> 'smallfelem (*)[17][3]' <LValueToRValue>
|   |   |                 |   |   |   | `-DeclRefExpr 0x2a7b4c39ec8 <col:44> 'smallfelem (*)[17][3]' lvalue Var 0x2a7b4c2c698 'pre_comp' 'smallfelem (*)[17][3]'
|   |   |                 |   |   |   `-ImplicitCastExpr 0x2a7b4c39f20 <col:53> 'unsigned int' <LValueToRValue>
|   |   |                 |   |   |     `-DeclRefExpr 0x2a7b4c39ee8 <col:53> 'unsigned int' lvalue Var 0x2a7b4c2c990 'i' 'unsigned int'
|   |   |                 |   |   `-ImplicitCastExpr 0x2a7b4c39f90 <col:56> 'int' <LValueToRValue>
|   |   |                 |   |     `-DeclRefExpr 0x2a7b4c39f58 <col:56> 'int' lvalue Var 0x2a7b4c2c120 'j' 'int'
|   |   |                 |   `-IntegerLiteral 0x2a7b4c39fc8 <col:59> 'int' 0
|   |   |                 |-ImplicitCastExpr 0x2a7b4c3a8b8 <line:2149:44, col:60> 'u64 *' <ArrayToPointerDecay>
|   |   |                 | `-ArraySubscriptExpr 0x2a7b4c3a168 <col:44, col:60> 'smallfelem':'u64 [4]' lvalue
|   |   |                 |   |-ImplicitCastExpr 0x2a7b4c3a150 <col:44, col:57> 'smallfelem *' <ArrayToPointerDecay>
|   |   |                 |   | `-ArraySubscriptExpr 0x2a7b4c3a108 <col:44, col:57> 'smallfelem [3]' lvalue
|   |   |                 |   |   |-ImplicitCastExpr 0x2a7b4c3a0d8 <col:44, col:54> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |                 |   |   | `-ArraySubscriptExpr 0x2a7b4c3a098 <col:44, col:54> 'smallfelem [17][3]':'smallfelem [17][3]' lvalue
|   |   |                 |   |   |   |-ImplicitCastExpr 0x2a7b4c3a068 <col:44> 'smallfelem (*)[17][3]' <LValueToRValue>
|   |   |                 |   |   |   | `-DeclRefExpr 0x2a7b4c3a028 <col:44> 'smallfelem (*)[17][3]' lvalue Var 0x2a7b4c2c698 'pre_comp' 'smallfelem (*)[17][3]'
|   |   |                 |   |   |   `-ImplicitCastExpr 0x2a7b4c3a080 <col:53> 'unsigned int' <LValueToRValue>
|   |   |                 |   |   |     `-DeclRefExpr 0x2a7b4c3a048 <col:53> 'unsigned int' lvalue Var 0x2a7b4c2c990 'i' 'unsigned int'
|   |   |                 |   |   `-ImplicitCastExpr 0x2a7b4c3a0f0 <col:56> 'int' <LValueToRValue>
|   |   |                 |   |     `-DeclRefExpr 0x2a7b4c3a0b8 <col:56> 'int' lvalue Var 0x2a7b4c2c120 'j' 'int'
|   |   |                 |   `-IntegerLiteral 0x2a7b4c3a128 <col:59> 'int' 1
|   |   |                 |-ImplicitCastExpr 0x2a7b4c3a8d0 <line:2150:44, col:60> 'u64 *' <ArrayToPointerDecay>
|   |   |                 | `-ArraySubscriptExpr 0x2a7b4c3a2c8 <col:44, col:60> 'smallfelem':'u64 [4]' lvalue
|   |   |                 |   |-ImplicitCastExpr 0x2a7b4c3a2b0 <col:44, col:57> 'smallfelem *' <ArrayToPointerDecay>
|   |   |                 |   | `-ArraySubscriptExpr 0x2a7b4c3a268 <col:44, col:57> 'smallfelem [3]' lvalue
|   |   |                 |   |   |-ImplicitCastExpr 0x2a7b4c3a238 <col:44, col:54> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |                 |   |   | `-ArraySubscriptExpr 0x2a7b4c3a1f8 <col:44, col:54> 'smallfelem [17][3]':'smallfelem [17][3]' lvalue
|   |   |                 |   |   |   |-ImplicitCastExpr 0x2a7b4c3a1c8 <col:44> 'smallfelem (*)[17][3]' <LValueToRValue>
|   |   |                 |   |   |   | `-DeclRefExpr 0x2a7b4c3a188 <col:44> 'smallfelem (*)[17][3]' lvalue Var 0x2a7b4c2c698 'pre_comp' 'smallfelem (*)[17][3]'
|   |   |                 |   |   |   `-ImplicitCastExpr 0x2a7b4c3a1e0 <col:53> 'unsigned int' <LValueToRValue>
|   |   |                 |   |   |     `-DeclRefExpr 0x2a7b4c3a1a8 <col:53> 'unsigned int' lvalue Var 0x2a7b4c2c990 'i' 'unsigned int'
|   |   |                 |   |   `-ImplicitCastExpr 0x2a7b4c3a250 <col:56> 'int' <LValueToRValue>
|   |   |                 |   |     `-DeclRefExpr 0x2a7b4c3a218 <col:56> 'int' lvalue Var 0x2a7b4c2c120 'j' 'int'
|   |   |                 |   `-IntegerLiteral 0x2a7b4c3a288 <col:59> 'int' 2
|   |   |                 |-ImplicitCastExpr 0x2a7b4c3a900 <line:2151:44, col:64> 'const u64 *':'const u64 *' <NoOp>
|   |   |                 | `-ImplicitCastExpr 0x2a7b4c3a8e8 <col:44, col:64> 'u64 *' <ArrayToPointerDecay>
|   |   |                 |   `-ArraySubscriptExpr 0x2a7b4c3a470 <col:44, col:64> 'smallfelem':'u64 [4]' lvalue
|   |   |                 |     |-ImplicitCastExpr 0x2a7b4c3a458 <col:44, col:61> 'smallfelem *' <ArrayToPointerDecay>
|   |   |                 |     | `-ArraySubscriptExpr 0x2a7b4c3a410 <col:44, col:61> 'smallfelem [3]' lvalue
|   |   |                 |     |   |-ImplicitCastExpr 0x2a7b4c3a3f8 <col:44, col:54> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |                 |     |   | `-ArraySubscriptExpr 0x2a7b4c3a358 <col:44, col:54> 'smallfelem [17][3]':'smallfelem [17][3]' lvalue
|   |   |                 |     |   |   |-ImplicitCastExpr 0x2a7b4c3a328 <col:44> 'smallfelem (*)[17][3]' <LValueToRValue>
|   |   |                 |     |   |   | `-DeclRefExpr 0x2a7b4c3a2e8 <col:44> 'smallfelem (*)[17][3]' lvalue Var 0x2a7b4c2c698 'pre_comp' 'smallfelem (*)[17][3]'
|   |   |                 |     |   |   `-ImplicitCastExpr 0x2a7b4c3a340 <col:53> 'unsigned int' <LValueToRValue>
|   |   |                 |     |   |     `-DeclRefExpr 0x2a7b4c3a308 <col:53> 'unsigned int' lvalue Var 0x2a7b4c2c990 'i' 'unsigned int'
|   |   |                 |     |   `-BinaryOperator 0x2a7b4c3a3d8 <col:56, col:60> 'int' '/'
|   |   |                 |     |     |-ImplicitCastExpr 0x2a7b4c3a3c0 <col:56> 'int' <LValueToRValue>
|   |   |                 |     |     | `-DeclRefExpr 0x2a7b4c3a378 <col:56> 'int' lvalue Var 0x2a7b4c2c120 'j' 'int'
|   |   |                 |     |     `-IntegerLiteral 0x2a7b4c3a398 <col:60> 'int' 2
|   |   |                 |     `-IntegerLiteral 0x2a7b4c3a430 <col:63> 'int' 0
|   |   |                 |-ImplicitCastExpr 0x2a7b4c3a930 <line:2152:44, col:64> 'const u64 *':'const u64 *' <NoOp>
|   |   |                 | `-ImplicitCastExpr 0x2a7b4c3a918 <col:44, col:64> 'u64 *' <ArrayToPointerDecay>
|   |   |                 |   `-ArraySubscriptExpr 0x2a7b4c3a618 <col:44, col:64> 'smallfelem':'u64 [4]' lvalue
|   |   |                 |     |-ImplicitCastExpr 0x2a7b4c3a600 <col:44, col:61> 'smallfelem *' <ArrayToPointerDecay>
|   |   |                 |     | `-ArraySubscriptExpr 0x2a7b4c3a5b8 <col:44, col:61> 'smallfelem [3]' lvalue
|   |   |                 |     |   |-ImplicitCastExpr 0x2a7b4c3a5a0 <col:44, col:54> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |                 |     |   | `-ArraySubscriptExpr 0x2a7b4c3a500 <col:44, col:54> 'smallfelem [17][3]':'smallfelem [17][3]' lvalue
|   |   |                 |     |   |   |-ImplicitCastExpr 0x2a7b4c3a4d0 <col:44> 'smallfelem (*)[17][3]' <LValueToRValue>
|   |   |                 |     |   |   | `-DeclRefExpr 0x2a7b4c3a490 <col:44> 'smallfelem (*)[17][3]' lvalue Var 0x2a7b4c2c698 'pre_comp' 'smallfelem (*)[17][3]'
|   |   |                 |     |   |   `-ImplicitCastExpr 0x2a7b4c3a4e8 <col:53> 'unsigned int' <LValueToRValue>
|   |   |                 |     |   |     `-DeclRefExpr 0x2a7b4c3a4b0 <col:53> 'unsigned int' lvalue Var 0x2a7b4c2c990 'i' 'unsigned int'
|   |   |                 |     |   `-BinaryOperator 0x2a7b4c3a580 <col:56, col:60> 'int' '/'
|   |   |                 |     |     |-ImplicitCastExpr 0x2a7b4c3a568 <col:56> 'int' <LValueToRValue>
|   |   |                 |     |     | `-DeclRefExpr 0x2a7b4c3a520 <col:56> 'int' lvalue Var 0x2a7b4c2c120 'j' 'int'
|   |   |                 |     |     `-IntegerLiteral 0x2a7b4c3a540 <col:60> 'int' 2
|   |   |                 |     `-IntegerLiteral 0x2a7b4c3a5d8 <col:63> 'int' 1
|   |   |                 `-ImplicitCastExpr 0x2a7b4c3a960 <line:2153:44, col:64> 'const u64 *':'const u64 *' <NoOp>
|   |   |                   `-ImplicitCastExpr 0x2a7b4c3a948 <col:44, col:64> 'u64 *' <ArrayToPointerDecay>
|   |   |                     `-ArraySubscriptExpr 0x2a7b4c3a7c0 <col:44, col:64> 'smallfelem':'u64 [4]' lvalue
|   |   |                       |-ImplicitCastExpr 0x2a7b4c3a7a8 <col:44, col:61> 'smallfelem *' <ArrayToPointerDecay>
|   |   |                       | `-ArraySubscriptExpr 0x2a7b4c3a760 <col:44, col:61> 'smallfelem [3]' lvalue
|   |   |                       |   |-ImplicitCastExpr 0x2a7b4c3a748 <col:44, col:54> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |                       |   | `-ArraySubscriptExpr 0x2a7b4c3a6a8 <col:44, col:54> 'smallfelem [17][3]':'smallfelem [17][3]' lvalue
|   |   |                       |   |   |-ImplicitCastExpr 0x2a7b4c3a678 <col:44> 'smallfelem (*)[17][3]' <LValueToRValue>
|   |   |                       |   |   | `-DeclRefExpr 0x2a7b4c3a638 <col:44> 'smallfelem (*)[17][3]' lvalue Var 0x2a7b4c2c698 'pre_comp' 'smallfelem (*)[17][3]'
|   |   |                       |   |   `-ImplicitCastExpr 0x2a7b4c3a690 <col:53> 'unsigned int' <LValueToRValue>
|   |   |                       |   |     `-DeclRefExpr 0x2a7b4c3a658 <col:53> 'unsigned int' lvalue Var 0x2a7b4c2c990 'i' 'unsigned int'
|   |   |                       |   `-BinaryOperator 0x2a7b4c3a728 <col:56, col:60> 'int' '/'
|   |   |                       |     |-ImplicitCastExpr 0x2a7b4c3a710 <col:56> 'int' <LValueToRValue>
|   |   |                       |     | `-DeclRefExpr 0x2a7b4c3a6c8 <col:56> 'int' lvalue Var 0x2a7b4c2c120 'j' 'int'
|   |   |                       |     `-IntegerLiteral 0x2a7b4c3a6e8 <col:60> 'int' 2
|   |   |                       `-IntegerLiteral 0x2a7b4c3a780 <col:63> 'int' 2
|   |   `-IfStmt 0x2a7b4c3ad48 <line:2158:9, line:2159:77>
|   |     |-ImplicitCastExpr 0x2a7b4c3aaf8 <line:2158:13> 'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x2a7b4c3aad8 <col:13> 'int' lvalue Var 0x2a7b4c2c1b8 'mixed' 'int'
|   |     `-CallExpr 0x2a7b4c3ace0 <line:2159:13, col:77> 'void'
|   |       |-ImplicitCastExpr 0x2a7b4c3acc8 <col:13> 'void (*)(size_t, smallfelem (*)[3], smallfelem *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x2a7b4c3ab10 <col:13> 'void (size_t, smallfelem (*)[3], smallfelem *)' Function 0x2a7b4c30d78 'make_points_affine' 'void (size_t, smallfelem (*)[3], smallfelem *)'
|   |       |-BinaryOperator 0x2a7b4c3aba8 <col:32, col:45> 'unsigned long long' '*'
|   |       | |-ImplicitCastExpr 0x2a7b4c3ab78 <col:32> 'size_t':'unsigned long long' <LValueToRValue>
|   |       | | `-DeclRefExpr 0x2a7b4c3ab30 <col:32> 'size_t':'unsigned long long' lvalue Var 0x2a7b4c2cb78 'num_points' 'size_t':'unsigned long long'
|   |       | `-ImplicitCastExpr 0x2a7b4c3ab90 <col:45> 'unsigned long long' <IntegralCast>
|   |       |   `-IntegerLiteral 0x2a7b4c3ab50 <col:45> 'int' 17
|   |       |-ImplicitCastExpr 0x2a7b4c3ad18 <col:49, col:59> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |       | `-ArraySubscriptExpr 0x2a7b4c3ac28 <col:49, col:59> 'smallfelem [17][3]':'smallfelem [17][3]' lvalue
|   |       |   |-ImplicitCastExpr 0x2a7b4c3ac10 <col:49> 'smallfelem (*)[17][3]' <LValueToRValue>
|   |       |   | `-DeclRefExpr 0x2a7b4c3abc8 <col:49> 'smallfelem (*)[17][3]' lvalue Var 0x2a7b4c2c698 'pre_comp' 'smallfelem (*)[17][3]'
|   |       |   `-IntegerLiteral 0x2a7b4c3abe8 <col:58> 'int' 0
|   |       `-ImplicitCastExpr 0x2a7b4c3ad30 <col:62> 'smallfelem *' <LValueToRValue>
|   |         `-DeclRefExpr 0x2a7b4c3ac48 <col:62> 'smallfelem *' lvalue Var 0x2a7b4c2c7c8 'tmp_smallfelems' 'smallfelem *'
|   |-IfStmt 0x2a7b4c3fe00 <line:2163:5, line:2188:74> has_else
|   | |-OpaqueValueExpr 0x2a7b4c3fde8 <<invalid sloc>> '_Bool'
|   | |-CompoundStmt 0x2a7b4c3f910 <line:2163:46, line:2184:5>
|   | | |-CallExpr 0x2a7b4c3afa8 <line:2164:9, col:45> 'void *'
|   | | | |-ImplicitCastExpr 0x2a7b4c3af90 <col:9> 'void *(*)(void *, int, unsigned long long)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x2a7b4c3ae98 <col:9> 'void *(void *, int, unsigned long long)' Function 0x2a7b49c0150 'memset' 'void *(void *, int, unsigned long long)'
|   | | | |-ImplicitCastExpr 0x2a7b4c3aff8 <col:16> 'void *' <BitCast>
|   | | | | `-ImplicitCastExpr 0x2a7b4c3afe0 <col:16> 'u8 *' <ArrayToPointerDecay>
|   | | | |   `-DeclRefExpr 0x2a7b4c3aeb8 <col:16> 'felem_bytearray':'u8 [32]' lvalue Var 0x2a7b4c2c2f8 'g_secret' 'felem_bytearray':'u8 [32]'
|   | | | |-IntegerLiteral 0x2a7b4c3aef0 <col:26> 'int' 0
|   | | | `-UnaryExprOrTypeTraitExpr 0x2a7b4c3af58 <col:29, col:44> 'unsigned long long' sizeof
|   | | |   `-ParenExpr 0x2a7b4c3af38 <col:35, col:44> 'felem_bytearray':'u8 [32]' lvalue
|   | | |     `-DeclRefExpr 0x2a7b4c3af18 <col:36> 'felem_bytearray':'u8 [32]' lvalue Var 0x2a7b4c2c2f8 'g_secret' 'felem_bytearray':'u8 [32]' non_odr_use_unevaluated
|   | | |-IfStmt 0x2a7b4c3f248 <line:2166:9, line:2177:13> has_else
|   | | | |-OpaqueValueExpr 0x2a7b4c3f230 <<invalid sloc>> '_Bool'
|   | | | |-CompoundStmt 0x2a7b4c3f1b0 <line:2166:70, line:2176:9>
|   | | | | `-IfStmt 0x2a7b4c3f138 <line:2171:13, line:2174:13>
|   | | | |   |-OpaqueValueExpr 0x2a7b4c3f120 <<invalid sloc>> '_Bool'
|   | | | |   `-CompoundStmt 0x2a7b4c3f108 <line:2171:67, line:2174:13>
|   | | | |     `-GotoStmt 0x2a7b4c3f0f0 <line:2173:17, col:22> 'err' 0x2a7b4c2daa0
|   | | | `-NullStmt 0x2a7b4c3f228 <line:2177:13>
|   | | |-CallExpr 0x2a7b4c3f308 <line:2178:9, col:45> 'void'
|   | | | |-ImplicitCastExpr 0x2a7b4c3f2f0 <col:9> 'void (*)(u8 *, const u8 *, unsigned int)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x2a7b4c3f270 <col:9> 'void (u8 *, const u8 *, unsigned int)' Function 0x2a7b4ae8958 'flip_endian' 'void (u8 *, const u8 *, unsigned int)'
|   | | | |-ImplicitCastExpr 0x2a7b4c3f340 <col:21> 'u8 *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x2a7b4c3f290 <col:21> 'felem_bytearray':'u8 [32]' lvalue Var 0x2a7b4c2c2f8 'g_secret' 'felem_bytearray':'u8 [32]'
|   | | | |-ImplicitCastExpr 0x2a7b4c3f370 <col:31> 'const u8 *' <NoOp>
|   | | | | `-ImplicitCastExpr 0x2a7b4c3f358 <col:31> 'u8 *' <ArrayToPointerDecay>
|   | | | |   `-DeclRefExpr 0x2a7b4c3f2b0 <col:31> 'felem_bytearray':'u8 [32]' lvalue Var 0x2a7b4c2c8f8 'tmp' 'felem_bytearray':'u8 [32]'
|   | | | `-ImplicitCastExpr 0x2a7b4c3f388 <col:36> 'unsigned int' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x2a7b4c3f2d0 <col:36> 'unsigned int' lvalue Var 0x2a7b4c2ca10 'num_bytes' 'unsigned int'
|   | | `-CallExpr 0x2a7b4c3f7d0 <line:2180:9, line:2183:74> 'void'
|   | |   |-ImplicitCastExpr 0x2a7b4c3f7b8 <line:2180:9> 'void (*)(limb *, limb *, limb *, const felem_bytearray *, const unsigned int, const u8 *, const int, const smallfelem (*)[17][3], const smallfelem (*)[16][3])' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x2a7b4c3f3a0 <col:9> 'void (limb *, limb *, limb *, const felem_bytearray *, const unsigned int, const u8 *, const int, const smallfelem (*)[17][3], const smallfelem (*)[16][3])' Function 0x2a7b4c10f40 'batch_mul' 'void (limb *, limb *, limb *, const felem_bytearray *, const unsigned int, const u8 *, const int, const smallfelem (*)[17][3], const smallfelem (*)[16][3])'
|   | |   |-ImplicitCastExpr 0x2a7b4c3f838 <col:19> 'limb *' <ArrayToPointerDecay>
|   | |   | `-DeclRefExpr 0x2a7b4c3f3c0 <col:19> 'felem':'limb [4]' lvalue Var 0x2a7b4c2cdf8 'x_out' 'felem':'limb [4]'
|   | |   |-ImplicitCastExpr 0x2a7b4c3f850 <col:26> 'limb *' <ArrayToPointerDecay>
|   | |   | `-DeclRefExpr 0x2a7b4c3f3e0 <col:26> 'felem':'limb [4]' lvalue Var 0x2a7b4c2ce70 'y_out' 'felem':'limb [4]'
|   | |   |-ImplicitCastExpr 0x2a7b4c3f868 <col:33> 'limb *' <ArrayToPointerDecay>
|   | |   | `-DeclRefExpr 0x2a7b4c3f400 <col:33> 'felem':'limb [4]' lvalue Var 0x2a7b4c2cee8 'z_out' 'felem':'limb [4]'
|   | |   |-CStyleCastExpr 0x2a7b4c3f508 <line:2181:19, col:45> 'const felem_bytearray (*)' <NoOp>
|   | |   | `-ImplicitCastExpr 0x2a7b4c3f4b0 <col:45> 'felem_bytearray *' <LValueToRValue> part_of_explicit_cast
|   | |   |   `-DeclRefExpr 0x2a7b4c3f420 <col:45> 'felem_bytearray *' lvalue Var 0x2a7b4c2c3e8 'secrets' 'felem_bytearray *'
|   | |   |-ImplicitCastExpr 0x2a7b4c3f898 <col:54> 'unsigned int' <IntegralCast>
|   | |   | `-ImplicitCastExpr 0x2a7b4c3f880 <col:54> 'size_t':'unsigned long long' <LValueToRValue>
|   | |   |   `-DeclRefExpr 0x2a7b4c3f530 <col:54> 'size_t':'unsigned long long' lvalue Var 0x2a7b4c2cb78 'num_points' 'size_t':'unsigned long long'
|   | |   |-ImplicitCastExpr 0x2a7b4c3f8c8 <line:2182:19> 'const u8 *' <NoOp>
|   | |   | `-ImplicitCastExpr 0x2a7b4c3f8b0 <col:19> 'u8 *' <ArrayToPointerDecay>
|   | |   |   `-DeclRefExpr 0x2a7b4c3f550 <col:19> 'felem_bytearray':'u8 [32]' lvalue Var 0x2a7b4c2c2f8 'g_secret' 'felem_bytearray':'u8 [32]'
|   | |   |-ImplicitCastExpr 0x2a7b4c3f8e0 <line:2183:19> 'int' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x2a7b4c3f570 <col:19> 'int' lvalue Var 0x2a7b4c2c1b8 'mixed' 'int'
|   | |   |-CStyleCastExpr 0x2a7b4c3f718 <col:26, col:54> 'const smallfelem (*)[17][3]' <NoOp>
|   | |   | `-ImplicitCastExpr 0x2a7b4c3f6c8 <col:54> 'smallfelem (*)[17][3]' <LValueToRValue> part_of_explicit_cast
|   | |   |   `-DeclRefExpr 0x2a7b4c3f5e0 <col:54> 'smallfelem (*)[17][3]' lvalue Var 0x2a7b4c2c698 'pre_comp' 'smallfelem (*)[17][3]'
|   | |   `-ImplicitCastExpr 0x2a7b4c3f8f8 <col:64> 'const smallfelem (*)[16][3]' <LValueToRValue>
|   | |     `-DeclRefExpr 0x2a7b4c3f740 <col:64> 'const smallfelem (*)[16][3]' lvalue Var 0x2a7b4c2d1f8 'g_pre_comp' 'const smallfelem (*)[16][3]'
|   | `-CallExpr 0x2a7b4c3fcc0 <line:2186:9, line:2188:74> 'void'
|   |   |-ImplicitCastExpr 0x2a7b4c3fca8 <line:2186:9> 'void (*)(limb *, limb *, limb *, const felem_bytearray *, const unsigned int, const u8 *, const int, const smallfelem (*)[17][3], const smallfelem (*)[16][3])' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x2a7b4c3f940 <col:9> 'void (limb *, limb *, limb *, const felem_bytearray *, const unsigned int, const u8 *, const int, const smallfelem (*)[17][3], const smallfelem (*)[16][3])' Function 0x2a7b4c10f40 'batch_mul' 'void (limb *, limb *, limb *, const felem_bytearray *, const unsigned int, const u8 *, const int, const smallfelem (*)[17][3], const smallfelem (*)[16][3])'
|   |   |-ImplicitCastExpr 0x2a7b4c3fd28 <col:19> 'limb *' <ArrayToPointerDecay>
|   |   | `-DeclRefExpr 0x2a7b4c3f960 <col:19> 'felem':'limb [4]' lvalue Var 0x2a7b4c2cdf8 'x_out' 'felem':'limb [4]'
|   |   |-ImplicitCastExpr 0x2a7b4c3fd40 <col:26> 'limb *' <ArrayToPointerDecay>
|   |   | `-DeclRefExpr 0x2a7b4c3f980 <col:26> 'felem':'limb [4]' lvalue Var 0x2a7b4c2ce70 'y_out' 'felem':'limb [4]'
|   |   |-ImplicitCastExpr 0x2a7b4c3fd58 <col:33> 'limb *' <ArrayToPointerDecay>
|   |   | `-DeclRefExpr 0x2a7b4c3f9a0 <col:33> 'felem':'limb [4]' lvalue Var 0x2a7b4c2cee8 'z_out' 'felem':'limb [4]'
|   |   |-CStyleCastExpr 0x2a7b4c3fa10 <line:2187:19, col:45> 'const felem_bytearray (*)' <NoOp>
|   |   | `-ImplicitCastExpr 0x2a7b4c3f9f8 <col:45> 'felem_bytearray *' <LValueToRValue> part_of_explicit_cast
|   |   |   `-DeclRefExpr 0x2a7b4c3f9c0 <col:45> 'felem_bytearray *' lvalue Var 0x2a7b4c2c3e8 'secrets' 'felem_bytearray *'
|   |   |-ImplicitCastExpr 0x2a7b4c3fd88 <col:54> 'unsigned int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x2a7b4c3fd70 <col:54> 'size_t':'unsigned long long' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x2a7b4c3fa38 <col:54> 'size_t':'unsigned long long' lvalue Var 0x2a7b4c2cb78 'num_points' 'size_t':'unsigned long long'
|   |   |-ImplicitCastExpr 0x2a7b4c3fda0 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'const u8 *' <NullToPointer>
|   |   | `-ParenExpr 0x2a7b4c3fac0 <col:17, col:27> 'void *'
|   |   |   `-CStyleCastExpr 0x2a7b4c3fa98 <col:18, col:26> 'void *' <NullToPointer>
|   |   |     `-IntegerLiteral 0x2a7b4c3fa58 <col:26> 'int' 0
|   |   |-ImplicitCastExpr 0x2a7b4c3fdb8 <.//openssl//file_jk/before\crypto\ec\ecp_nistp256.c:2188:25> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x2a7b4c3fae0 <col:25> 'int' lvalue Var 0x2a7b4c2c1b8 'mixed' 'int'
|   |   |-CStyleCastExpr 0x2a7b4c3fbf8 <col:32, col:60> 'const smallfelem (*)[17][3]' <NoOp>
|   |   | `-ImplicitCastExpr 0x2a7b4c3fbe0 <col:60> 'smallfelem (*)[17][3]' <LValueToRValue> part_of_explicit_cast
|   |   |   `-DeclRefExpr 0x2a7b4c3fb50 <col:60> 'smallfelem (*)[17][3]' lvalue Var 0x2a7b4c2c698 'pre_comp' 'smallfelem (*)[17][3]'
|   |   `-ImplicitCastExpr 0x2a7b4c3fdd0 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'const smallfelem (*)[16][3]':'const smallfelem (*)[16][3]' <NullToPointer>
|   |     `-ParenExpr 0x2a7b4c3fc88 <col:17, col:27> 'void *'
|   |       `-CStyleCastExpr 0x2a7b4c3fc60 <col:18, col:26> 'void *' <NullToPointer>
|   |         `-IntegerLiteral 0x2a7b4c3fc20 <col:26> 'int' 0
|   |-CallExpr 0x2a7b4c3feb8 <.//openssl//file_jk/before\crypto\ec\ecp_nistp256.c:2190:5, col:31> 'void'
|   | |-ImplicitCastExpr 0x2a7b4c3fea0 <col:5> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4c3fe28 <col:5> 'void (u64 *, const limb *)' Function 0x2a7b4aeffe8 'felem_contract' 'void (u64 *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4c3fee8 <col:20> 'u64 *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4c3fe48 <col:20> 'smallfelem':'u64 [4]' lvalue Var 0x2a7b4c2cc58 'x_in' 'smallfelem':'u64 [4]'
|   | `-ImplicitCastExpr 0x2a7b4c3ff18 <col:26> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4c3ff00 <col:26> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4c3fe80 <col:26> 'felem':'limb [4]' lvalue Var 0x2a7b4c2cdf8 'x_out' 'felem':'limb [4]'
|   |-CallExpr 0x2a7b4c3ffc0 <line:2191:5, col:31> 'void'
|   | |-ImplicitCastExpr 0x2a7b4c3ffa8 <col:5> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4c3ff30 <col:5> 'void (u64 *, const limb *)' Function 0x2a7b4aeffe8 'felem_contract' 'void (u64 *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4c3fff0 <col:20> 'u64 *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4c3ff50 <col:20> 'smallfelem':'u64 [4]' lvalue Var 0x2a7b4c2ccd0 'y_in' 'smallfelem':'u64 [4]'
|   | `-ImplicitCastExpr 0x2a7b4c40020 <col:26> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4c40008 <col:26> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4c3ff88 <col:26> 'felem':'limb [4]' lvalue Var 0x2a7b4c2ce70 'y_out' 'felem':'limb [4]'
|   |-CallExpr 0x2a7b4c400c8 <line:2192:5, col:31> 'void'
|   | |-ImplicitCastExpr 0x2a7b4c400b0 <col:5> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4c40038 <col:5> 'void (u64 *, const limb *)' Function 0x2a7b4aeffe8 'felem_contract' 'void (u64 *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4c400f8 <col:20> 'u64 *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4c40058 <col:20> 'smallfelem':'u64 [4]' lvalue Var 0x2a7b4c2cd48 'z_in' 'smallfelem':'u64 [4]'
|   | `-ImplicitCastExpr 0x2a7b4c40128 <col:26> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4c40110 <col:26> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4c40090 <col:26> 'felem':'limb [4]' lvalue Var 0x2a7b4c2cee8 'z_out' 'felem':'limb [4]'
|   |-IfStmt 0x2a7b4c40208 <line:2193:5, line:2197:5>
|   | |-OpaqueValueExpr 0x2a7b4c401f0 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x2a7b4c401d8 <line:2194:39, line:2197:5>
|   |   `-GotoStmt 0x2a7b4c401c0 <line:2196:9, col:14> 'err' 0x2a7b4c2daa0
|   |-LabelStmt 0x2a7b4c402a0 <line:2200:2, col:5> 'err'
|   | `-NullStmt 0x2a7b4c40298 <col:5>
|   |-CallExpr 0x2a7b4c40440 <line:2204:5, col:25> 'int'
|   | |-ImplicitCastExpr 0x2a7b4c40428 <col:5> 'int (*)()' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4c403e8 <col:5> 'int ()' Function 0x2a7b4c284f8 'OPENSSL_free' 'int ()'
|   | `-ImplicitCastExpr 0x2a7b4c40468 <col:18> 'felem_bytearray *' <LValueToRValue>
|   |   `-DeclRefExpr 0x2a7b4c40408 <col:18> 'felem_bytearray *' lvalue Var 0x2a7b4c2c3e8 'secrets' 'felem_bytearray *'
|   |-CallExpr 0x2a7b4c404d8 <line:2205:5, col:26> 'int'
|   | |-ImplicitCastExpr 0x2a7b4c404c0 <col:5> 'int (*)()' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4c40480 <col:5> 'int ()' Function 0x2a7b4c284f8 'OPENSSL_free' 'int ()'
|   | `-ImplicitCastExpr 0x2a7b4c40500 <col:18> 'smallfelem (*)[17][3]' <LValueToRValue>
|   |   `-DeclRefExpr 0x2a7b4c404a0 <col:18> 'smallfelem (*)[17][3]' lvalue Var 0x2a7b4c2c698 'pre_comp' 'smallfelem (*)[17][3]'
|   |-CallExpr 0x2a7b4c40570 <line:2206:5, col:33> 'int'
|   | |-ImplicitCastExpr 0x2a7b4c40558 <col:5> 'int (*)()' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4c40518 <col:5> 'int ()' Function 0x2a7b4c284f8 'OPENSSL_free' 'int ()'
|   | `-ImplicitCastExpr 0x2a7b4c40598 <col:18> 'smallfelem *' <LValueToRValue>
|   |   `-DeclRefExpr 0x2a7b4c40538 <col:18> 'smallfelem *' lvalue Var 0x2a7b4c2c7c8 'tmp_smallfelems' 'smallfelem *'
|   `-ReturnStmt 0x2a7b4c405e8 <line:2207:5, col:12>
|     `-ImplicitCastExpr 0x2a7b4c405d0 <col:12> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x2a7b4c405b0 <col:12> 'int' lvalue Var 0x2a7b4c2c060 'ret' 'int'
|-FunctionDecl 0x2a7b4c40838 <line:2210:1, line:2344:1> line:2210:5 invalid ec_GFp_nistp256_precompute_mult 'int (int *, int *)'
| |-ParmVarDecl 0x2a7b4c40718 <col:37, col:47> col:47 invalid group 'int *'
| |-ParmVarDecl 0x2a7b4c40798 <col:54, col:62> col:62 invalid ctx 'int *'
| `-CompoundStmt 0x2a7b4c45918 <line:2211:1, line:2344:1>
|   |-DeclStmt 0x2a7b4c409a8 <line:2212:5, col:16>
|   | `-VarDecl 0x2a7b4c40918 <col:5, col:15> col:9 used ret 'int' cinit
|   |   `-IntegerLiteral 0x2a7b4c40980 <col:15> 'int' 0
|   |-DeclStmt 0x2a7b4c40ad8 <line:2213:5, col:34>
|   | `-VarDecl 0x2a7b4c409d0 <col:5, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27> .//openssl//file_jk/before\crypto\ec\ecp_nistp256.c:2213:24 used pre 'NISTP256_PRE_COMP *' cinit
|   |   `-ImplicitCastExpr 0x2a7b4c40ac0 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'NISTP256_PRE_COMP *' <NullToPointer>
|   |     `-ParenExpr 0x2a7b4c40aa0 <col:17, col:27> 'void *'
|   |       `-CStyleCastExpr 0x2a7b4c40a78 <col:18, col:26> 'void *' <NullToPointer>
|   |         `-IntegerLiteral 0x2a7b4c40a38 <col:26> 'int' 0
|   |-DeclStmt 0x2a7b4c40c08 <.//openssl//file_jk/before\crypto\ec\ecp_nistp256.c:2214:5, col:13>
|   | |-VarDecl 0x2a7b4c40b08 <col:5, col:9> col:9 used i 'int'
|   | `-VarDecl 0x2a7b4c40b88 <col:5, col:12> col:12 used j 'int'
|   |-DeclStmt 0x2a7b4c40e70 <line:2218:5, col:35>
|   | `-VarDecl 0x2a7b4c40e08 <col:5, col:34> col:16 used tmp_smallfelems 'smallfelem [32]'
|   |-DeclStmt 0x2a7b4c41010 <line:2219:5, col:30>
|   | |-VarDecl 0x2a7b4c40e98 <col:5, col:11> col:11 used x_tmp 'felem':'limb [4]'
|   | |-VarDecl 0x2a7b4c40f10 <col:5, col:18> col:18 used y_tmp 'felem':'limb [4]'
|   | `-VarDecl 0x2a7b4c40f88 <col:5, col:25> col:25 used z_tmp 'felem':'limb [4]'
|   |-IfStmt 0x2a7b4c331b0 <line:2223:5, line:2225:20>
|   | |-OpaqueValueExpr 0x2a7b4c33198 <<invalid sloc>> '_Bool'
|   | `-IfStmt 0x2a7b4c33180 <line:2224:9, line:2225:20>
|   |   |-OpaqueValueExpr 0x2a7b4c33168 <<invalid sloc>> '_Bool'
|   |   `-ReturnStmt 0x2a7b4c33158 <col:13, col:20>
|   |     `-IntegerLiteral 0x2a7b4c33130 <col:20> 'int' 0
|   |-IfStmt 0x2a7b4c333b8 <line:2227:5, line:2228:14>
|   | |-OpaqueValueExpr 0x2a7b4c333a0 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x2a7b4c33388 <col:9, col:14> 'err' 0x2a7b4c33338
|   |-IfStmt 0x2a7b4c33488 <line:2230:5, line:2231:14>
|   | |-OpaqueValueExpr 0x2a7b4c33470 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x2a7b4c33458 <col:9, col:14> 'err' 0x2a7b4c33338
|   |-IfStmt 0x2a7b4c33578 <line:2233:5, line:2234:14>
|   | |-OpaqueValueExpr 0x2a7b4c33560 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x2a7b4c33548 <col:9, col:14> 'err' 0x2a7b4c33338
|   |-IfStmt 0x2a7b4c33870 <line:2237:5, line:2238:14>
|   | |-OpaqueValueExpr 0x2a7b4c33858 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x2a7b4c33840 <col:9, col:14> 'err' 0x2a7b4c33338
|   |-IfStmt 0x2a7b4c33a88 <line:2239:5, line:2240:14>
|   | |-BinaryOperator 0x2a7b4c33a50 <line:2239:9, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27> 'int' '=='
|   | | |-ParenExpr 0x2a7b4c33990 <.//openssl//file_jk/before\crypto\ec\ecp_nistp256.c:2239:9, col:39> 'NISTP256_PRE_COMP *'
|   | | | `-BinaryOperator 0x2a7b4c33970 <col:10, col:38> 'NISTP256_PRE_COMP *' '='
|   | | |   |-DeclRefExpr 0x2a7b4c33888 <col:10> 'NISTP256_PRE_COMP *' lvalue Var 0x2a7b4c409d0 'pre' 'NISTP256_PRE_COMP *'
|   | | |   `-CallExpr 0x2a7b4c33950 <col:16, col:38> 'NISTP256_PRE_COMP *'
|   | | |     `-ImplicitCastExpr 0x2a7b4c33938 <col:16> 'NISTP256_PRE_COMP *(*)()' <FunctionToPointerDecay>
|   | | |       `-DeclRefExpr 0x2a7b4c338c0 <col:16> 'NISTP256_PRE_COMP *()' Function 0x2a7b4c27ca8 'nistp256_pre_comp_new' 'NISTP256_PRE_COMP *()'
|   | | `-ImplicitCastExpr 0x2a7b4c33a38 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'NISTP256_PRE_COMP *' <BitCast>
|   | |   `-ParenExpr 0x2a7b4c33a18 <col:17, col:27> 'void *'
|   | |     `-CStyleCastExpr 0x2a7b4c339f0 <col:18, col:26> 'void *' <NullToPointer>
|   | |       `-IntegerLiteral 0x2a7b4c339b0 <col:26> 'int' 0
|   | `-GotoStmt 0x2a7b4c33a70 <.//openssl//file_jk/before\crypto\ec\ecp_nistp256.c:2240:9, col:14> 'err' 0x2a7b4c33338
|   |-IfStmt 0x2a7b4c33de8 <line:2244:5, line:2247:5>
|   | |-OpaqueValueExpr 0x2a7b4c33dd0 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x2a7b4c33db0 <line:2244:69, line:2247:5>
|   |   |-CallExpr 0x2a7b4c33cb0 <line:2245:9, col:62> 'void *'
|   |   | |-ImplicitCastExpr 0x2a7b4c33c98 <col:9> 'void *(*)(void *, const void *, unsigned long long)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x2a7b4c33ae8 <col:9> 'void *(void *, const void *, unsigned long long)' Function 0x2a7b49b8678 'memcpy' 'void *(void *, const void *, unsigned long long)'
|   |   | |-ImplicitCastExpr 0x2a7b4c33d00 <col:16, col:21> 'void *' <BitCast>
|   |   | | `-ImplicitCastExpr 0x2a7b4c33ce8 <col:16, col:21> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   `-MemberExpr 0x2a7b4c33b40 <col:16, col:21> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x2a7b4c276d8
|   |   | |     `-ImplicitCastExpr 0x2a7b4c33b28 <col:16> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |       `-DeclRefExpr 0x2a7b4c33b08 <col:16> 'NISTP256_PRE_COMP *' lvalue Var 0x2a7b4c409d0 'pre' 'NISTP256_PRE_COMP *'
|   |   | |-ImplicitCastExpr 0x2a7b4c33d30 <col:33> 'const void *' <BitCast>
|   |   | | `-ImplicitCastExpr 0x2a7b4c33d18 <col:33> 'const smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   `-DeclRefExpr 0x2a7b4c33b70 <col:33> 'const smallfelem [2][16][3]' lvalue Var 0x2a7b4b03e78 'gmul' 'const smallfelem [2][16][3]'
|   |   | `-UnaryExprOrTypeTraitExpr 0x2a7b4c33c18 <col:39, col:61> 'unsigned long long' sizeof
|   |   |   `-ParenExpr 0x2a7b4c33bf8 <col:45, col:61> 'smallfelem [2][16][3]' lvalue
|   |   |     `-MemberExpr 0x2a7b4c33bc8 <col:46, col:51> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x2a7b4c276d8 non_odr_use_unevaluated
|   |   |       `-ImplicitCastExpr 0x2a7b4c33bb0 <col:46> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   |         `-DeclRefExpr 0x2a7b4c33b90 <col:46> 'NISTP256_PRE_COMP *' lvalue Var 0x2a7b4c409d0 'pre' 'NISTP256_PRE_COMP *' non_odr_use_unevaluated
|   |   `-GotoStmt 0x2a7b4c33d98 <line:2246:9, col:14> 'done' 0x2a7b4c33d48
|   |-IfStmt 0x2a7b4c33ed8 <line:2248:5, line:2251:14>
|   | |-OpaqueValueExpr 0x2a7b4c33ec0 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x2a7b4c33ea8 <col:9, col:14> 'err' 0x2a7b4c33338
|   |-CallExpr 0x2a7b4c340d0 <line:2252:5, col:49> 'void'
|   | |-ImplicitCastExpr 0x2a7b4c340b8 <col:5> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4c33ef0 <col:5> 'void (u64 *, const limb *)' Function 0x2a7b49fd1a8 'felem_shrink' 'void (u64 *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4c34100 <col:18, col:41> 'u64 *' <ArrayToPointerDecay>
|   | | `-ArraySubscriptExpr 0x2a7b4c34078 <col:18, col:41> 'smallfelem':'u64 [4]' lvalue
|   | |   |-ImplicitCastExpr 0x2a7b4c34060 <col:18, col:38> 'smallfelem *' <ArrayToPointerDecay>
|   | |   | `-ArraySubscriptExpr 0x2a7b4c34018 <col:18, col:38> 'smallfelem [3]' lvalue
|   | |   |   |-ImplicitCastExpr 0x2a7b4c34000 <col:18, col:35> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   | |   |   | `-ArraySubscriptExpr 0x2a7b4c33fb8 <col:18, col:35> 'smallfelem [16][3]' lvalue
|   | |   |   |   |-ImplicitCastExpr 0x2a7b4c33fa0 <col:18, col:23> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   | |   |   |   | `-MemberExpr 0x2a7b4c33f48 <col:18, col:23> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x2a7b4c276d8
|   | |   |   |   |   `-ImplicitCastExpr 0x2a7b4c33f30 <col:18> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   | |   |   |   |     `-DeclRefExpr 0x2a7b4c33f10 <col:18> 'NISTP256_PRE_COMP *' lvalue Var 0x2a7b4c409d0 'pre' 'NISTP256_PRE_COMP *'
|   | |   |   |   `-IntegerLiteral 0x2a7b4c33f78 <col:34> 'int' 0
|   | |   |   `-IntegerLiteral 0x2a7b4c33fd8 <col:37> 'int' 1
|   | |   `-IntegerLiteral 0x2a7b4c34038 <col:40> 'int' 0
|   | `-ImplicitCastExpr 0x2a7b4c34130 <col:44> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4c34118 <col:44> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4c34098 <col:44> 'felem':'limb [4]' lvalue Var 0x2a7b4c40e98 'x_tmp' 'felem':'limb [4]'
|   |-CallExpr 0x2a7b4c34328 <line:2253:5, col:49> 'void'
|   | |-ImplicitCastExpr 0x2a7b4c34310 <col:5> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4c34148 <col:5> 'void (u64 *, const limb *)' Function 0x2a7b49fd1a8 'felem_shrink' 'void (u64 *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4c34358 <col:18, col:41> 'u64 *' <ArrayToPointerDecay>
|   | | `-ArraySubscriptExpr 0x2a7b4c342d0 <col:18, col:41> 'smallfelem':'u64 [4]' lvalue
|   | |   |-ImplicitCastExpr 0x2a7b4c342b8 <col:18, col:38> 'smallfelem *' <ArrayToPointerDecay>
|   | |   | `-ArraySubscriptExpr 0x2a7b4c34270 <col:18, col:38> 'smallfelem [3]' lvalue
|   | |   |   |-ImplicitCastExpr 0x2a7b4c34258 <col:18, col:35> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   | |   |   | `-ArraySubscriptExpr 0x2a7b4c34210 <col:18, col:35> 'smallfelem [16][3]' lvalue
|   | |   |   |   |-ImplicitCastExpr 0x2a7b4c341f8 <col:18, col:23> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   | |   |   |   | `-MemberExpr 0x2a7b4c341a0 <col:18, col:23> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x2a7b4c276d8
|   | |   |   |   |   `-ImplicitCastExpr 0x2a7b4c34188 <col:18> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   | |   |   |   |     `-DeclRefExpr 0x2a7b4c34168 <col:18> 'NISTP256_PRE_COMP *' lvalue Var 0x2a7b4c409d0 'pre' 'NISTP256_PRE_COMP *'
|   | |   |   |   `-IntegerLiteral 0x2a7b4c341d0 <col:34> 'int' 0
|   | |   |   `-IntegerLiteral 0x2a7b4c34230 <col:37> 'int' 1
|   | |   `-IntegerLiteral 0x2a7b4c34290 <col:40> 'int' 1
|   | `-ImplicitCastExpr 0x2a7b4c34388 <col:44> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4c34370 <col:44> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4c342f0 <col:44> 'felem':'limb [4]' lvalue Var 0x2a7b4c40f10 'y_tmp' 'felem':'limb [4]'
|   |-CallExpr 0x2a7b4c34580 <line:2254:5, col:49> 'void'
|   | |-ImplicitCastExpr 0x2a7b4c34568 <col:5> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4c343a0 <col:5> 'void (u64 *, const limb *)' Function 0x2a7b49fd1a8 'felem_shrink' 'void (u64 *, const limb *)'
|   | |-ImplicitCastExpr 0x2a7b4c345b0 <col:18, col:41> 'u64 *' <ArrayToPointerDecay>
|   | | `-ArraySubscriptExpr 0x2a7b4c34528 <col:18, col:41> 'smallfelem':'u64 [4]' lvalue
|   | |   |-ImplicitCastExpr 0x2a7b4c34510 <col:18, col:38> 'smallfelem *' <ArrayToPointerDecay>
|   | |   | `-ArraySubscriptExpr 0x2a7b4c344c8 <col:18, col:38> 'smallfelem [3]' lvalue
|   | |   |   |-ImplicitCastExpr 0x2a7b4c344b0 <col:18, col:35> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   | |   |   | `-ArraySubscriptExpr 0x2a7b4c34468 <col:18, col:35> 'smallfelem [16][3]' lvalue
|   | |   |   |   |-ImplicitCastExpr 0x2a7b4c34450 <col:18, col:23> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   | |   |   |   | `-MemberExpr 0x2a7b4c343f8 <col:18, col:23> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x2a7b4c276d8
|   | |   |   |   |   `-ImplicitCastExpr 0x2a7b4c343e0 <col:18> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   | |   |   |   |     `-DeclRefExpr 0x2a7b4c343c0 <col:18> 'NISTP256_PRE_COMP *' lvalue Var 0x2a7b4c409d0 'pre' 'NISTP256_PRE_COMP *'
|   | |   |   |   `-IntegerLiteral 0x2a7b4c34428 <col:34> 'int' 0
|   | |   |   `-IntegerLiteral 0x2a7b4c34488 <col:37> 'int' 1
|   | |   `-IntegerLiteral 0x2a7b4c344e8 <col:40> 'int' 2
|   | `-ImplicitCastExpr 0x2a7b4c345e0 <col:44> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x2a7b4c345c8 <col:44> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x2a7b4c34548 <col:44> 'felem':'limb [4]' lvalue Var 0x2a7b4c40f88 'z_tmp' 'felem':'limb [4]'
|   |-ForStmt 0x2a7b4c359c8 <line:2259:5, line:2287:5>
|   | |-BinaryOperator 0x2a7b4c34658 <line:2259:10, col:14> 'int' '='
|   | | |-DeclRefExpr 0x2a7b4c345f8 <col:10> 'int' lvalue Var 0x2a7b4c40b08 'i' 'int'
|   | | `-IntegerLiteral 0x2a7b4c34630 <col:14> 'int' 1
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x2a7b4c346d8 <col:17, col:22> 'int' '<='
|   | | |-ImplicitCastExpr 0x2a7b4c346c0 <col:17> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b4c34678 <col:17> 'int' lvalue Var 0x2a7b4c40b08 'i' 'int'
|   | | `-IntegerLiteral 0x2a7b4c34698 <col:22> 'int' 8
|   | |-CompoundAssignOperator 0x2a7b4c34758 <col:25, col:31> 'int' '<<=' ComputeLHSTy='int' ComputeResultTy='int'
|   | | |-DeclRefExpr 0x2a7b4c346f8 <col:25> 'int' lvalue Var 0x2a7b4c40b08 'i' 'int'
|   | | `-IntegerLiteral 0x2a7b4c34718 <col:31> 'int' 1
|   | `-CompoundStmt 0x2a7b4c35990 <col:34, line:2287:5>
|   |   |-CallExpr 0x2a7b4c3b198 <line:2260:9, line:2263:52> 'void'
|   |   | |-ImplicitCastExpr 0x2a7b4c3b180 <line:2260:9> 'void (*)(u64 *, u64 *, u64 *, const u64 *, const u64 *, const u64 *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x2a7b4c34788 <col:9> 'void (u64 *, u64 *, u64 *, const u64 *, const u64 *, const u64 *)' Function 0x2a7b4afc508 'point_double_small' 'void (u64 *, u64 *, u64 *, const u64 *, const u64 *, const u64 *)'
|   |   | |-ImplicitCastExpr 0x2a7b4c3b1e8 <col:28, col:51> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x2a7b4c34920 <col:28, col:51> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x2a7b4c34908 <col:28, col:48> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x2a7b4c348c0 <col:28, col:48> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x2a7b4c34890 <col:28, col:45> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x2a7b4c34850 <col:28, col:45> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x2a7b4c34838 <col:28, col:33> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x2a7b4c347e0 <col:28, col:33> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x2a7b4c276d8
|   |   | |   |   |   |   `-ImplicitCastExpr 0x2a7b4c347c8 <col:28> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x2a7b4c347a8 <col:28> 'NISTP256_PRE_COMP *' lvalue Var 0x2a7b4c409d0 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-IntegerLiteral 0x2a7b4c34810 <col:44> 'int' 1
|   |   | |   |   `-ImplicitCastExpr 0x2a7b4c348a8 <col:47> 'int' <LValueToRValue>
|   |   | |   |     `-DeclRefExpr 0x2a7b4c34870 <col:47> 'int' lvalue Var 0x2a7b4c40b08 'i' 'int'
|   |   | |   `-IntegerLiteral 0x2a7b4c348e0 <col:50> 'int' 0
|   |   | |-ImplicitCastExpr 0x2a7b4c3b200 <col:54, col:77> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x2a7b4c34ab8 <col:54, col:77> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x2a7b4c34aa0 <col:54, col:74> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x2a7b4c34a58 <col:54, col:74> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x2a7b4c34a28 <col:54, col:71> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x2a7b4c349e8 <col:54, col:71> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x2a7b4c349d0 <col:54, col:59> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x2a7b4c34978 <col:54, col:59> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x2a7b4c276d8
|   |   | |   |   |   |   `-ImplicitCastExpr 0x2a7b4c34960 <col:54> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x2a7b4c34940 <col:54> 'NISTP256_PRE_COMP *' lvalue Var 0x2a7b4c409d0 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-IntegerLiteral 0x2a7b4c349a8 <col:70> 'int' 1
|   |   | |   |   `-ImplicitCastExpr 0x2a7b4c34a40 <col:73> 'int' <LValueToRValue>
|   |   | |   |     `-DeclRefExpr 0x2a7b4c34a08 <col:73> 'int' lvalue Var 0x2a7b4c40b08 'i' 'int'
|   |   | |   `-IntegerLiteral 0x2a7b4c34a78 <col:76> 'int' 1
|   |   | |-ImplicitCastExpr 0x2a7b4c3b218 <line:2261:28, col:51> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x2a7b4c34c50 <col:28, col:51> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x2a7b4c34c38 <col:28, col:48> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x2a7b4c34bf0 <col:28, col:48> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x2a7b4c34bc0 <col:28, col:45> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x2a7b4c34b80 <col:28, col:45> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x2a7b4c34b68 <col:28, col:33> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x2a7b4c34b10 <col:28, col:33> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x2a7b4c276d8
|   |   | |   |   |   |   `-ImplicitCastExpr 0x2a7b4c34af8 <col:28> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x2a7b4c34ad8 <col:28> 'NISTP256_PRE_COMP *' lvalue Var 0x2a7b4c409d0 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-IntegerLiteral 0x2a7b4c34b40 <col:44> 'int' 1
|   |   | |   |   `-ImplicitCastExpr 0x2a7b4c34bd8 <col:47> 'int' <LValueToRValue>
|   |   | |   |     `-DeclRefExpr 0x2a7b4c34ba0 <col:47> 'int' lvalue Var 0x2a7b4c40b08 'i' 'int'
|   |   | |   `-IntegerLiteral 0x2a7b4c34c10 <col:50> 'int' 2
|   |   | |-ImplicitCastExpr 0x2a7b4c3b248 <col:54, col:77> 'const u64 *':'const u64 *' <NoOp>
|   |   | | `-ImplicitCastExpr 0x2a7b4c3b230 <col:54, col:77> 'u64 *' <ArrayToPointerDecay>
|   |   | |   `-ArraySubscriptExpr 0x2a7b4c34de8 <col:54, col:77> 'smallfelem':'u64 [4]' lvalue
|   |   | |     |-ImplicitCastExpr 0x2a7b4c34dd0 <col:54, col:74> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |     | `-ArraySubscriptExpr 0x2a7b4c34d88 <col:54, col:74> 'smallfelem [3]' lvalue
|   |   | |     |   |-ImplicitCastExpr 0x2a7b4c34d58 <col:54, col:71> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |     |   | `-ArraySubscriptExpr 0x2a7b4c34d18 <col:54, col:71> 'smallfelem [16][3]' lvalue
|   |   | |     |   |   |-ImplicitCastExpr 0x2a7b4c34d00 <col:54, col:59> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |     |   |   | `-MemberExpr 0x2a7b4c34ca8 <col:54, col:59> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x2a7b4c276d8
|   |   | |     |   |   |   `-ImplicitCastExpr 0x2a7b4c34c90 <col:54> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |     |   |   |     `-DeclRefExpr 0x2a7b4c34c70 <col:54> 'NISTP256_PRE_COMP *' lvalue Var 0x2a7b4c409d0 'pre' 'NISTP256_PRE_COMP *'
|   |   | |     |   |   `-IntegerLiteral 0x2a7b4c34cd8 <col:70> 'int' 0
|   |   | |     |   `-ImplicitCastExpr 0x2a7b4c34d70 <col:73> 'int' <LValueToRValue>
|   |   | |     |     `-DeclRefExpr 0x2a7b4c34d38 <col:73> 'int' lvalue Var 0x2a7b4c40b08 'i' 'int'
|   |   | |     `-IntegerLiteral 0x2a7b4c34da8 <col:76> 'int' 0
|   |   | |-ImplicitCastExpr 0x2a7b4c3b278 <line:2262:28, col:51> 'const u64 *':'const u64 *' <NoOp>
|   |   | | `-ImplicitCastExpr 0x2a7b4c3b260 <col:28, col:51> 'u64 *' <ArrayToPointerDecay>
|   |   | |   `-ArraySubscriptExpr 0x2a7b4c34f80 <col:28, col:51> 'smallfelem':'u64 [4]' lvalue
|   |   | |     |-ImplicitCastExpr 0x2a7b4c34f68 <col:28, col:48> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |     | `-ArraySubscriptExpr 0x2a7b4c34f20 <col:28, col:48> 'smallfelem [3]' lvalue
|   |   | |     |   |-ImplicitCastExpr 0x2a7b4c34ef0 <col:28, col:45> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |     |   | `-ArraySubscriptExpr 0x2a7b4c34eb0 <col:28, col:45> 'smallfelem [16][3]' lvalue
|   |   | |     |   |   |-ImplicitCastExpr 0x2a7b4c34e98 <col:28, col:33> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |     |   |   | `-MemberExpr 0x2a7b4c34e40 <col:28, col:33> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x2a7b4c276d8
|   |   | |     |   |   |   `-ImplicitCastExpr 0x2a7b4c34e28 <col:28> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |     |   |   |     `-DeclRefExpr 0x2a7b4c34e08 <col:28> 'NISTP256_PRE_COMP *' lvalue Var 0x2a7b4c409d0 'pre' 'NISTP256_PRE_COMP *'
|   |   | |     |   |   `-IntegerLiteral 0x2a7b4c34e70 <col:44> 'int' 0
|   |   | |     |   `-ImplicitCastExpr 0x2a7b4c34f08 <col:47> 'int' <LValueToRValue>
|   |   | |     |     `-DeclRefExpr 0x2a7b4c34ed0 <col:47> 'int' lvalue Var 0x2a7b4c40b08 'i' 'int'
|   |   | |     `-IntegerLiteral 0x2a7b4c34f40 <col:50> 'int' 1
|   |   | `-ImplicitCastExpr 0x2a7b4c3b2a8 <line:2263:28, col:51> 'const u64 *':'const u64 *' <NoOp>
|   |   |   `-ImplicitCastExpr 0x2a7b4c3b290 <col:28, col:51> 'u64 *' <ArrayToPointerDecay>
|   |   |     `-ArraySubscriptExpr 0x2a7b4c3b160 <col:28, col:51> 'smallfelem':'u64 [4]' lvalue
|   |   |       |-ImplicitCastExpr 0x2a7b4c3b148 <col:28, col:48> 'smallfelem *' <ArrayToPointerDecay>
|   |   |       | `-ArraySubscriptExpr 0x2a7b4c3b100 <col:28, col:48> 'smallfelem [3]' lvalue
|   |   |       |   |-ImplicitCastExpr 0x2a7b4c3b0d0 <col:28, col:45> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |       |   | `-ArraySubscriptExpr 0x2a7b4c3b090 <col:28, col:45> 'smallfelem [16][3]' lvalue
|   |   |       |   |   |-ImplicitCastExpr 0x2a7b4c35030 <col:28, col:33> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   |       |   |   | `-MemberExpr 0x2a7b4c34fd8 <col:28, col:33> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x2a7b4c276d8
|   |   |       |   |   |   `-ImplicitCastExpr 0x2a7b4c34fc0 <col:28> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   |       |   |   |     `-DeclRefExpr 0x2a7b4c34fa0 <col:28> 'NISTP256_PRE_COMP *' lvalue Var 0x2a7b4c409d0 'pre' 'NISTP256_PRE_COMP *'
|   |   |       |   |   `-IntegerLiteral 0x2a7b4c35008 <col:44> 'int' 0
|   |   |       |   `-ImplicitCastExpr 0x2a7b4c3b0e8 <col:47> 'int' <LValueToRValue>
|   |   |       |     `-DeclRefExpr 0x2a7b4c3b0b0 <col:47> 'int' lvalue Var 0x2a7b4c40b08 'i' 'int'
|   |   |       `-IntegerLiteral 0x2a7b4c3b120 <col:50> 'int' 2
|   |   |-ForStmt 0x2a7b4c3bf00 <line:2264:9, line:2271:9>
|   |   | |-BinaryOperator 0x2a7b4c3b320 <line:2264:14, col:18> 'int' '='
|   |   | | |-DeclRefExpr 0x2a7b4c3b2c0 <col:14> 'int' lvalue Var 0x2a7b4c40b88 'j' 'int'
|   |   | | `-IntegerLiteral 0x2a7b4c3b2f8 <col:18> 'int' 0
|   |   | |-<<<NULL>>>
|   |   | |-BinaryOperator 0x2a7b4c3b3a0 <col:21, col:25> 'int' '<'
|   |   | | |-ImplicitCastExpr 0x2a7b4c3b388 <col:21> 'int' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x2a7b4c3b340 <col:21> 'int' lvalue Var 0x2a7b4c40b88 'j' 'int'
|   |   | | `-IntegerLiteral 0x2a7b4c3b360 <col:25> 'int' 31
|   |   | |-UnaryOperator 0x2a7b4c3b3e0 <col:29, col:31> 'int' prefix '++'
|   |   | | `-DeclRefExpr 0x2a7b4c3b3c0 <col:31> 'int' lvalue Var 0x2a7b4c40b88 'j' 'int'
|   |   | `-CompoundStmt 0x2a7b4c3bee8 <col:34, line:2271:9>
|   |   |   `-CallExpr 0x2a7b4c3bdc0 <line:2265:13, line:2270:56> 'void'
|   |   |     |-ImplicitCastExpr 0x2a7b4c3bda8 <line:2265:13> 'void (*)(u64 *, u64 *, u64 *, const u64 *, const u64 *, const u64 *)' <FunctionToPointerDecay>
|   |   |     | `-DeclRefExpr 0x2a7b4c3b3f8 <col:13> 'void (u64 *, u64 *, u64 *, const u64 *, const u64 *, const u64 *)' Function 0x2a7b4afc508 'point_double_small' 'void (u64 *, u64 *, u64 *, const u64 *, const u64 *, const u64 *)'
|   |   |     |-ImplicitCastExpr 0x2a7b4c3be10 <col:32, col:55> 'u64 *' <ArrayToPointerDecay>
|   |   |     | `-ArraySubscriptExpr 0x2a7b4c3b590 <col:32, col:55> 'smallfelem':'u64 [4]' lvalue
|   |   |     |   |-ImplicitCastExpr 0x2a7b4c3b578 <col:32, col:52> 'smallfelem *' <ArrayToPointerDecay>
|   |   |     |   | `-ArraySubscriptExpr 0x2a7b4c3b530 <col:32, col:52> 'smallfelem [3]' lvalue
|   |   |     |   |   |-ImplicitCastExpr 0x2a7b4c3b500 <col:32, col:49> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |     |   |   | `-ArraySubscriptExpr 0x2a7b4c3b4c0 <col:32, col:49> 'smallfelem [16][3]' lvalue
|   |   |     |   |   |   |-ImplicitCastExpr 0x2a7b4c3b4a8 <col:32, col:37> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   |     |   |   |   | `-MemberExpr 0x2a7b4c3b450 <col:32, col:37> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x2a7b4c276d8
|   |   |     |   |   |   |   `-ImplicitCastExpr 0x2a7b4c3b438 <col:32> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   |     |   |   |   |     `-DeclRefExpr 0x2a7b4c3b418 <col:32> 'NISTP256_PRE_COMP *' lvalue Var 0x2a7b4c409d0 'pre' 'NISTP256_PRE_COMP *'
|   |   |     |   |   |   `-IntegerLiteral 0x2a7b4c3b480 <col:48> 'int' 1
|   |   |     |   |   `-ImplicitCastExpr 0x2a7b4c3b518 <col:51> 'int' <LValueToRValue>
|   |   |     |   |     `-DeclRefExpr 0x2a7b4c3b4e0 <col:51> 'int' lvalue Var 0x2a7b4c40b08 'i' 'int'
|   |   |     |   `-IntegerLiteral 0x2a7b4c3b550 <col:54> 'int' 0
|   |   |     |-ImplicitCastExpr 0x2a7b4c3be28 <line:2266:32, col:55> 'u64 *' <ArrayToPointerDecay>
|   |   |     | `-ArraySubscriptExpr 0x2a7b4c3b728 <col:32, col:55> 'smallfelem':'u64 [4]' lvalue
|   |   |     |   |-ImplicitCastExpr 0x2a7b4c3b710 <col:32, col:52> 'smallfelem *' <ArrayToPointerDecay>
|   |   |     |   | `-ArraySubscriptExpr 0x2a7b4c3b6c8 <col:32, col:52> 'smallfelem [3]' lvalue
|   |   |     |   |   |-ImplicitCastExpr 0x2a7b4c3b698 <col:32, col:49> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |     |   |   | `-ArraySubscriptExpr 0x2a7b4c3b658 <col:32, col:49> 'smallfelem [16][3]' lvalue
|   |   |     |   |   |   |-ImplicitCastExpr 0x2a7b4c3b640 <col:32, col:37> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   |     |   |   |   | `-MemberExpr 0x2a7b4c3b5e8 <col:32, col:37> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x2a7b4c276d8
|   |   |     |   |   |   |   `-ImplicitCastExpr 0x2a7b4c3b5d0 <col:32> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   |     |   |   |   |     `-DeclRefExpr 0x2a7b4c3b5b0 <col:32> 'NISTP256_PRE_COMP *' lvalue Var 0x2a7b4c409d0 'pre' 'NISTP256_PRE_COMP *'
|   |   |     |   |   |   `-IntegerLiteral 0x2a7b4c3b618 <col:48> 'int' 1
|   |   |     |   |   `-ImplicitCastExpr 0x2a7b4c3b6b0 <col:51> 'int' <LValueToRValue>
|   |   |     |   |     `-DeclRefExpr 0x2a7b4c3b678 <col:51> 'int' lvalue Var 0x2a7b4c40b08 'i' 'int'
|   |   |     |   `-IntegerLiteral 0x2a7b4c3b6e8 <col:54> 'int' 1
|   |   |     |-ImplicitCastExpr 0x2a7b4c3be40 <line:2267:32, col:55> 'u64 *' <ArrayToPointerDecay>
|   |   |     | `-ArraySubscriptExpr 0x2a7b4c3b8c0 <col:32, col:55> 'smallfelem':'u64 [4]' lvalue
|   |   |     |   |-ImplicitCastExpr 0x2a7b4c3b8a8 <col:32, col:52> 'smallfelem *' <ArrayToPointerDecay>
|   |   |     |   | `-ArraySubscriptExpr 0x2a7b4c3b860 <col:32, col:52> 'smallfelem [3]' lvalue
|   |   |     |   |   |-ImplicitCastExpr 0x2a7b4c3b830 <col:32, col:49> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |     |   |   | `-ArraySubscriptExpr 0x2a7b4c3b7f0 <col:32, col:49> 'smallfelem [16][3]' lvalue
|   |   |     |   |   |   |-ImplicitCastExpr 0x2a7b4c3b7d8 <col:32, col:37> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   |     |   |   |   | `-MemberExpr 0x2a7b4c3b780 <col:32, col:37> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x2a7b4c276d8
|   |   |     |   |   |   |   `-ImplicitCastExpr 0x2a7b4c3b768 <col:32> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   |     |   |   |   |     `-DeclRefExpr 0x2a7b4c3b748 <col:32> 'NISTP256_PRE_COMP *' lvalue Var 0x2a7b4c409d0 'pre' 'NISTP256_PRE_COMP *'
|   |   |     |   |   |   `-IntegerLiteral 0x2a7b4c3b7b0 <col:48> 'int' 1
|   |   |     |   |   `-ImplicitCastExpr 0x2a7b4c3b848 <col:51> 'int' <LValueToRValue>
|   |   |     |   |     `-DeclRefExpr 0x2a7b4c3b810 <col:51> 'int' lvalue Var 0x2a7b4c40b08 'i' 'int'
|   |   |     |   `-IntegerLiteral 0x2a7b4c3b880 <col:54> 'int' 2
|   |   |     |-ImplicitCastExpr 0x2a7b4c3be70 <line:2268:32, col:55> 'const u64 *':'const u64 *' <NoOp>
|   |   |     | `-ImplicitCastExpr 0x2a7b4c3be58 <col:32, col:55> 'u64 *' <ArrayToPointerDecay>
|   |   |     |   `-ArraySubscriptExpr 0x2a7b4c3ba58 <col:32, col:55> 'smallfelem':'u64 [4]' lvalue
|   |   |     |     |-ImplicitCastExpr 0x2a7b4c3ba40 <col:32, col:52> 'smallfelem *' <ArrayToPointerDecay>
|   |   |     |     | `-ArraySubscriptExpr 0x2a7b4c3b9f8 <col:32, col:52> 'smallfelem [3]' lvalue
|   |   |     |     |   |-ImplicitCastExpr 0x2a7b4c3b9c8 <col:32, col:49> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |     |     |   | `-ArraySubscriptExpr 0x2a7b4c3b988 <col:32, col:49> 'smallfelem [16][3]' lvalue
|   |   |     |     |   |   |-ImplicitCastExpr 0x2a7b4c3b970 <col:32, col:37> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   |     |     |   |   | `-MemberExpr 0x2a7b4c3b918 <col:32, col:37> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x2a7b4c276d8
|   |   |     |     |   |   |   `-ImplicitCastExpr 0x2a7b4c3b900 <col:32> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   |     |     |   |   |     `-DeclRefExpr 0x2a7b4c3b8e0 <col:32> 'NISTP256_PRE_COMP *' lvalue Var 0x2a7b4c409d0 'pre' 'NISTP256_PRE_COMP *'
|   |   |     |     |   |   `-IntegerLiteral 0x2a7b4c3b948 <col:48> 'int' 1
|   |   |     |     |   `-ImplicitCastExpr 0x2a7b4c3b9e0 <col:51> 'int' <LValueToRValue>
|   |   |     |     |     `-DeclRefExpr 0x2a7b4c3b9a8 <col:51> 'int' lvalue Var 0x2a7b4c40b08 'i' 'int'
|   |   |     |     `-IntegerLiteral 0x2a7b4c3ba18 <col:54> 'int' 0
|   |   |     |-ImplicitCastExpr 0x2a7b4c3bea0 <line:2269:32, col:55> 'const u64 *':'const u64 *' <NoOp>
|   |   |     | `-ImplicitCastExpr 0x2a7b4c3be88 <col:32, col:55> 'u64 *' <ArrayToPointerDecay>
|   |   |     |   `-ArraySubscriptExpr 0x2a7b4c3bbf0 <col:32, col:55> 'smallfelem':'u64 [4]' lvalue
|   |   |     |     |-ImplicitCastExpr 0x2a7b4c3bbd8 <col:32, col:52> 'smallfelem *' <ArrayToPointerDecay>
|   |   |     |     | `-ArraySubscriptExpr 0x2a7b4c3bb90 <col:32, col:52> 'smallfelem [3]' lvalue
|   |   |     |     |   |-ImplicitCastExpr 0x2a7b4c3bb60 <col:32, col:49> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |     |     |   | `-ArraySubscriptExpr 0x2a7b4c3bb20 <col:32, col:49> 'smallfelem [16][3]' lvalue
|   |   |     |     |   |   |-ImplicitCastExpr 0x2a7b4c3bb08 <col:32, col:37> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   |     |     |   |   | `-MemberExpr 0x2a7b4c3bab0 <col:32, col:37> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x2a7b4c276d8
|   |   |     |     |   |   |   `-ImplicitCastExpr 0x2a7b4c3ba98 <col:32> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   |     |     |   |   |     `-DeclRefExpr 0x2a7b4c3ba78 <col:32> 'NISTP256_PRE_COMP *' lvalue Var 0x2a7b4c409d0 'pre' 'NISTP256_PRE_COMP *'
|   |   |     |     |   |   `-IntegerLiteral 0x2a7b4c3bae0 <col:48> 'int' 1
|   |   |     |     |   `-ImplicitCastExpr 0x2a7b4c3bb78 <col:51> 'int' <LValueToRValue>
|   |   |     |     |     `-DeclRefExpr 0x2a7b4c3bb40 <col:51> 'int' lvalue Var 0x2a7b4c40b08 'i' 'int'
|   |   |     |     `-IntegerLiteral 0x2a7b4c3bbb0 <col:54> 'int' 1
|   |   |     `-ImplicitCastExpr 0x2a7b4c3bed0 <line:2270:32, col:55> 'const u64 *':'const u64 *' <NoOp>
|   |   |       `-ImplicitCastExpr 0x2a7b4c3beb8 <col:32, col:55> 'u64 *' <ArrayToPointerDecay>
|   |   |         `-ArraySubscriptExpr 0x2a7b4c3bd88 <col:32, col:55> 'smallfelem':'u64 [4]' lvalue
|   |   |           |-ImplicitCastExpr 0x2a7b4c3bd70 <col:32, col:52> 'smallfelem *' <ArrayToPointerDecay>
|   |   |           | `-ArraySubscriptExpr 0x2a7b4c3bd28 <col:32, col:52> 'smallfelem [3]' lvalue
|   |   |           |   |-ImplicitCastExpr 0x2a7b4c3bcf8 <col:32, col:49> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |           |   | `-ArraySubscriptExpr 0x2a7b4c3bcb8 <col:32, col:49> 'smallfelem [16][3]' lvalue
|   |   |           |   |   |-ImplicitCastExpr 0x2a7b4c3bca0 <col:32, col:37> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   |           |   |   | `-MemberExpr 0x2a7b4c3bc48 <col:32, col:37> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x2a7b4c276d8
|   |   |           |   |   |   `-ImplicitCastExpr 0x2a7b4c3bc30 <col:32> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   |           |   |   |     `-DeclRefExpr 0x2a7b4c3bc10 <col:32> 'NISTP256_PRE_COMP *' lvalue Var 0x2a7b4c409d0 'pre' 'NISTP256_PRE_COMP *'
|   |   |           |   |   `-IntegerLiteral 0x2a7b4c3bc78 <col:48> 'int' 1
|   |   |           |   `-ImplicitCastExpr 0x2a7b4c3bd10 <col:51> 'int' <LValueToRValue>
|   |   |           |     `-DeclRefExpr 0x2a7b4c3bcd8 <col:51> 'int' lvalue Var 0x2a7b4c40b08 'i' 'int'
|   |   |           `-IntegerLiteral 0x2a7b4c3bd48 <col:54> 'int' 2
|   |   |-IfStmt 0x2a7b4c3bfc0 <line:2272:9, line:2273:13>
|   |   | |-BinaryOperator 0x2a7b4c3bf98 <line:2272:13, col:18> 'int' '=='
|   |   | | |-ImplicitCastExpr 0x2a7b4c3bf80 <col:13> 'int' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x2a7b4c3bf38 <col:13> 'int' lvalue Var 0x2a7b4c40b08 'i' 'int'
|   |   | | `-IntegerLiteral 0x2a7b4c3bf58 <col:18> 'int' 8
|   |   | `-BreakStmt 0x2a7b4c3bfb8 <line:2273:13>
|   |   |-CallExpr 0x2a7b4c3ca78 <line:2274:9, line:2278:52> 'void'
|   |   | |-ImplicitCastExpr 0x2a7b4c3ca60 <line:2274:9> 'void (*)(u64 *, u64 *, u64 *, const u64 *, const u64 *, const u64 *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x2a7b4c3bfd8 <col:9> 'void (u64 *, u64 *, u64 *, const u64 *, const u64 *, const u64 *)' Function 0x2a7b4afc508 'point_double_small' 'void (u64 *, u64 *, u64 *, const u64 *, const u64 *, const u64 *)'
|   |   | |-ImplicitCastExpr 0x2a7b4c3cac8 <col:28, col:55> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x2a7b4c3c1b8 <col:28, col:55> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x2a7b4c3c1a0 <col:28, col:52> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x2a7b4c3c158 <col:28, col:52> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x2a7b4c3c140 <col:28, col:45> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x2a7b4c3c0a0 <col:28, col:45> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x2a7b4c3c088 <col:28, col:33> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x2a7b4c3c030 <col:28, col:33> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x2a7b4c276d8
|   |   | |   |   |   |   `-ImplicitCastExpr 0x2a7b4c3c018 <col:28> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x2a7b4c3bff8 <col:28> 'NISTP256_PRE_COMP *' lvalue Var 0x2a7b4c409d0 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-IntegerLiteral 0x2a7b4c3c060 <col:44> 'int' 0
|   |   | |   |   `-BinaryOperator 0x2a7b4c3c120 <col:47, col:51> 'int' '*'
|   |   | |   |     |-IntegerLiteral 0x2a7b4c3c0c0 <col:47> 'int' 2
|   |   | |   |     `-ImplicitCastExpr 0x2a7b4c3c108 <col:51> 'int' <LValueToRValue>
|   |   | |   |       `-DeclRefExpr 0x2a7b4c3c0e8 <col:51> 'int' lvalue Var 0x2a7b4c40b08 'i' 'int'
|   |   | |   `-IntegerLiteral 0x2a7b4c3c178 <col:54> 'int' 0
|   |   | |-ImplicitCastExpr 0x2a7b4c3cae0 <line:2275:28, col:55> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x2a7b4c3c398 <col:28, col:55> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x2a7b4c3c380 <col:28, col:52> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x2a7b4c3c338 <col:28, col:52> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x2a7b4c3c320 <col:28, col:45> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x2a7b4c3c280 <col:28, col:45> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x2a7b4c3c268 <col:28, col:33> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x2a7b4c3c210 <col:28, col:33> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x2a7b4c276d8
|   |   | |   |   |   |   `-ImplicitCastExpr 0x2a7b4c3c1f8 <col:28> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x2a7b4c3c1d8 <col:28> 'NISTP256_PRE_COMP *' lvalue Var 0x2a7b4c409d0 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-IntegerLiteral 0x2a7b4c3c240 <col:44> 'int' 0
|   |   | |   |   `-BinaryOperator 0x2a7b4c3c300 <col:47, col:51> 'int' '*'
|   |   | |   |     |-IntegerLiteral 0x2a7b4c3c2a0 <col:47> 'int' 2
|   |   | |   |     `-ImplicitCastExpr 0x2a7b4c3c2e8 <col:51> 'int' <LValueToRValue>
|   |   | |   |       `-DeclRefExpr 0x2a7b4c3c2c8 <col:51> 'int' lvalue Var 0x2a7b4c40b08 'i' 'int'
|   |   | |   `-IntegerLiteral 0x2a7b4c3c358 <col:54> 'int' 1
|   |   | |-ImplicitCastExpr 0x2a7b4c3caf8 <line:2276:28, col:55> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x2a7b4c3c578 <col:28, col:55> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x2a7b4c3c560 <col:28, col:52> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x2a7b4c3c518 <col:28, col:52> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x2a7b4c3c500 <col:28, col:45> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x2a7b4c3c460 <col:28, col:45> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x2a7b4c3c448 <col:28, col:33> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x2a7b4c3c3f0 <col:28, col:33> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x2a7b4c276d8
|   |   | |   |   |   |   `-ImplicitCastExpr 0x2a7b4c3c3d8 <col:28> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x2a7b4c3c3b8 <col:28> 'NISTP256_PRE_COMP *' lvalue Var 0x2a7b4c409d0 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-IntegerLiteral 0x2a7b4c3c420 <col:44> 'int' 0
|   |   | |   |   `-BinaryOperator 0x2a7b4c3c4e0 <col:47, col:51> 'int' '*'
|   |   | |   |     |-IntegerLiteral 0x2a7b4c3c480 <col:47> 'int' 2
|   |   | |   |     `-ImplicitCastExpr 0x2a7b4c3c4c8 <col:51> 'int' <LValueToRValue>
|   |   | |   |       `-DeclRefExpr 0x2a7b4c3c4a8 <col:51> 'int' lvalue Var 0x2a7b4c40b08 'i' 'int'
|   |   | |   `-IntegerLiteral 0x2a7b4c3c538 <col:54> 'int' 2
|   |   | |-ImplicitCastExpr 0x2a7b4c3cb28 <line:2277:28, col:51> 'const u64 *':'const u64 *' <NoOp>
|   |   | | `-ImplicitCastExpr 0x2a7b4c3cb10 <col:28, col:51> 'u64 *' <ArrayToPointerDecay>
|   |   | |   `-ArraySubscriptExpr 0x2a7b4c3c710 <col:28, col:51> 'smallfelem':'u64 [4]' lvalue
|   |   | |     |-ImplicitCastExpr 0x2a7b4c3c6f8 <col:28, col:48> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |     | `-ArraySubscriptExpr 0x2a7b4c3c6b0 <col:28, col:48> 'smallfelem [3]' lvalue
|   |   | |     |   |-ImplicitCastExpr 0x2a7b4c3c680 <col:28, col:45> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |     |   | `-ArraySubscriptExpr 0x2a7b4c3c640 <col:28, col:45> 'smallfelem [16][3]' lvalue
|   |   | |     |   |   |-ImplicitCastExpr 0x2a7b4c3c628 <col:28, col:33> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |     |   |   | `-MemberExpr 0x2a7b4c3c5d0 <col:28, col:33> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x2a7b4c276d8
|   |   | |     |   |   |   `-ImplicitCastExpr 0x2a7b4c3c5b8 <col:28> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |     |   |   |     `-DeclRefExpr 0x2a7b4c3c598 <col:28> 'NISTP256_PRE_COMP *' lvalue Var 0x2a7b4c409d0 'pre' 'NISTP256_PRE_COMP *'
|   |   | |     |   |   `-IntegerLiteral 0x2a7b4c3c600 <col:44> 'int' 1
|   |   | |     |   `-ImplicitCastExpr 0x2a7b4c3c698 <col:47> 'int' <LValueToRValue>
|   |   | |     |     `-DeclRefExpr 0x2a7b4c3c660 <col:47> 'int' lvalue Var 0x2a7b4c40b08 'i' 'int'
|   |   | |     `-IntegerLiteral 0x2a7b4c3c6d0 <col:50> 'int' 0
|   |   | |-ImplicitCastExpr 0x2a7b4c3cb58 <col:54, col:77> 'const u64 *':'const u64 *' <NoOp>
|   |   | | `-ImplicitCastExpr 0x2a7b4c3cb40 <col:54, col:77> 'u64 *' <ArrayToPointerDecay>
|   |   | |   `-ArraySubscriptExpr 0x2a7b4c3c8a8 <col:54, col:77> 'smallfelem':'u64 [4]' lvalue
|   |   | |     |-ImplicitCastExpr 0x2a7b4c3c890 <col:54, col:74> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |     | `-ArraySubscriptExpr 0x2a7b4c3c848 <col:54, col:74> 'smallfelem [3]' lvalue
|   |   | |     |   |-ImplicitCastExpr 0x2a7b4c3c818 <col:54, col:71> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |     |   | `-ArraySubscriptExpr 0x2a7b4c3c7d8 <col:54, col:71> 'smallfelem [16][3]' lvalue
|   |   | |     |   |   |-ImplicitCastExpr 0x2a7b4c3c7c0 <col:54, col:59> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |     |   |   | `-MemberExpr 0x2a7b4c3c768 <col:54, col:59> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x2a7b4c276d8
|   |   | |     |   |   |   `-ImplicitCastExpr 0x2a7b4c3c750 <col:54> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |     |   |   |     `-DeclRefExpr 0x2a7b4c3c730 <col:54> 'NISTP256_PRE_COMP *' lvalue Var 0x2a7b4c409d0 'pre' 'NISTP256_PRE_COMP *'
|   |   | |     |   |   `-IntegerLiteral 0x2a7b4c3c798 <col:70> 'int' 1
|   |   | |     |   `-ImplicitCastExpr 0x2a7b4c3c830 <col:73> 'int' <LValueToRValue>
|   |   | |     |     `-DeclRefExpr 0x2a7b4c3c7f8 <col:73> 'int' lvalue Var 0x2a7b4c40b08 'i' 'int'
|   |   | |     `-IntegerLiteral 0x2a7b4c3c868 <col:76> 'int' 1
|   |   | `-ImplicitCastExpr 0x2a7b4c3cb88 <line:2278:28, col:51> 'const u64 *':'const u64 *' <NoOp>
|   |   |   `-ImplicitCastExpr 0x2a7b4c3cb70 <col:28, col:51> 'u64 *' <ArrayToPointerDecay>
|   |   |     `-ArraySubscriptExpr 0x2a7b4c3ca40 <col:28, col:51> 'smallfelem':'u64 [4]' lvalue
|   |   |       |-ImplicitCastExpr 0x2a7b4c3ca28 <col:28, col:48> 'smallfelem *' <ArrayToPointerDecay>
|   |   |       | `-ArraySubscriptExpr 0x2a7b4c3c9e0 <col:28, col:48> 'smallfelem [3]' lvalue
|   |   |       |   |-ImplicitCastExpr 0x2a7b4c3c9b0 <col:28, col:45> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |       |   | `-ArraySubscriptExpr 0x2a7b4c3c970 <col:28, col:45> 'smallfelem [16][3]' lvalue
|   |   |       |   |   |-ImplicitCastExpr 0x2a7b4c3c958 <col:28, col:33> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   |       |   |   | `-MemberExpr 0x2a7b4c3c900 <col:28, col:33> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x2a7b4c276d8
|   |   |       |   |   |   `-ImplicitCastExpr 0x2a7b4c3c8e8 <col:28> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   |       |   |   |     `-DeclRefExpr 0x2a7b4c3c8c8 <col:28> 'NISTP256_PRE_COMP *' lvalue Var 0x2a7b4c409d0 'pre' 'NISTP256_PRE_COMP *'
|   |   |       |   |   `-IntegerLiteral 0x2a7b4c3c930 <col:44> 'int' 1
|   |   |       |   `-ImplicitCastExpr 0x2a7b4c3c9c8 <col:47> 'int' <LValueToRValue>
|   |   |       |     `-DeclRefExpr 0x2a7b4c3c990 <col:47> 'int' lvalue Var 0x2a7b4c40b08 'i' 'int'
|   |   |       `-IntegerLiteral 0x2a7b4c3ca00 <col:50> 'int' 2
|   |   `-ForStmt 0x2a7b4c35958 <line:2279:9, line:2286:9>
|   |     |-BinaryOperator 0x2a7b4c3cbe8 <line:2279:14, col:18> 'int' '='
|   |     | |-DeclRefExpr 0x2a7b4c3cba0 <col:14> 'int' lvalue Var 0x2a7b4c40b88 'j' 'int'
|   |     | `-IntegerLiteral 0x2a7b4c3cbc0 <col:18> 'int' 0
|   |     |-<<<NULL>>>
|   |     |-BinaryOperator 0x2a7b4c3cc68 <col:21, col:25> 'int' '<'
|   |     | |-ImplicitCastExpr 0x2a7b4c3cc50 <col:21> 'int' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x2a7b4c3cc08 <col:21> 'int' lvalue Var 0x2a7b4c40b88 'j' 'int'
|   |     | `-IntegerLiteral 0x2a7b4c3cc28 <col:25> 'int' 31
|   |     |-UnaryOperator 0x2a7b4c3cca8 <col:29, col:31> 'int' prefix '++'
|   |     | `-DeclRefExpr 0x2a7b4c3cc88 <col:31> 'int' lvalue Var 0x2a7b4c40b88 'j' 'int'
|   |     `-CompoundStmt 0x2a7b4c35940 <col:34, line:2286:9>
|   |       `-CallExpr 0x2a7b4c35818 <line:2280:13, line:2285:60> 'void'
|   |         |-ImplicitCastExpr 0x2a7b4c35800 <line:2280:13> 'void (*)(u64 *, u64 *, u64 *, const u64 *, const u64 *, const u64 *)' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x2a7b4c3ccc0 <col:13> 'void (u64 *, u64 *, u64 *, const u64 *, const u64 *, const u64 *)' Function 0x2a7b4afc508 'point_double_small' 'void (u64 *, u64 *, u64 *, const u64 *, const u64 *, const u64 *)'
|   |         |-ImplicitCastExpr 0x2a7b4c35868 <col:32, col:59> 'u64 *' <ArrayToPointerDecay>
|   |         | `-ArraySubscriptExpr 0x2a7b4c3cea0 <col:32, col:59> 'smallfelem':'u64 [4]' lvalue
|   |         |   |-ImplicitCastExpr 0x2a7b4c3ce88 <col:32, col:56> 'smallfelem *' <ArrayToPointerDecay>
|   |         |   | `-ArraySubscriptExpr 0x2a7b4c3ce40 <col:32, col:56> 'smallfelem [3]' lvalue
|   |         |   |   |-ImplicitCastExpr 0x2a7b4c3ce28 <col:32, col:49> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |         |   |   | `-ArraySubscriptExpr 0x2a7b4c3cd88 <col:32, col:49> 'smallfelem [16][3]' lvalue
|   |         |   |   |   |-ImplicitCastExpr 0x2a7b4c3cd70 <col:32, col:37> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |         |   |   |   | `-MemberExpr 0x2a7b4c3cd18 <col:32, col:37> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x2a7b4c276d8
|   |         |   |   |   |   `-ImplicitCastExpr 0x2a7b4c3cd00 <col:32> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |         |   |   |   |     `-DeclRefExpr 0x2a7b4c3cce0 <col:32> 'NISTP256_PRE_COMP *' lvalue Var 0x2a7b4c409d0 'pre' 'NISTP256_PRE_COMP *'
|   |         |   |   |   `-IntegerLiteral 0x2a7b4c3cd48 <col:48> 'int' 0
|   |         |   |   `-BinaryOperator 0x2a7b4c3ce08 <col:51, col:55> 'int' '*'
|   |         |   |     |-IntegerLiteral 0x2a7b4c3cda8 <col:51> 'int' 2
|   |         |   |     `-ImplicitCastExpr 0x2a7b4c3cdf0 <col:55> 'int' <LValueToRValue>
|   |         |   |       `-DeclRefExpr 0x2a7b4c3cdd0 <col:55> 'int' lvalue Var 0x2a7b4c40b08 'i' 'int'
|   |         |   `-IntegerLiteral 0x2a7b4c3ce60 <col:58> 'int' 0
|   |         |-ImplicitCastExpr 0x2a7b4c35880 <line:2281:32, col:59> 'u64 *' <ArrayToPointerDecay>
|   |         | `-ArraySubscriptExpr 0x2a7b4c35060 <col:32, col:59> 'smallfelem':'u64 [4]' lvalue
|   |         |   |-ImplicitCastExpr 0x2a7b4c3d068 <col:32, col:56> 'smallfelem *' <ArrayToPointerDecay>
|   |         |   | `-ArraySubscriptExpr 0x2a7b4c3d020 <col:32, col:56> 'smallfelem [3]' lvalue
|   |         |   |   |-ImplicitCastExpr 0x2a7b4c3d008 <col:32, col:49> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |         |   |   | `-ArraySubscriptExpr 0x2a7b4c3cf68 <col:32, col:49> 'smallfelem [16][3]' lvalue
|   |         |   |   |   |-ImplicitCastExpr 0x2a7b4c3cf50 <col:32, col:37> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |         |   |   |   | `-MemberExpr 0x2a7b4c3cef8 <col:32, col:37> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x2a7b4c276d8
|   |         |   |   |   |   `-ImplicitCastExpr 0x2a7b4c3cee0 <col:32> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |         |   |   |   |     `-DeclRefExpr 0x2a7b4c3cec0 <col:32> 'NISTP256_PRE_COMP *' lvalue Var 0x2a7b4c409d0 'pre' 'NISTP256_PRE_COMP *'
|   |         |   |   |   `-IntegerLiteral 0x2a7b4c3cf28 <col:48> 'int' 0
|   |         |   |   `-BinaryOperator 0x2a7b4c3cfe8 <col:51, col:55> 'int' '*'
|   |         |   |     |-IntegerLiteral 0x2a7b4c3cf88 <col:51> 'int' 2
|   |         |   |     `-ImplicitCastExpr 0x2a7b4c3cfd0 <col:55> 'int' <LValueToRValue>
|   |         |   |       `-DeclRefExpr 0x2a7b4c3cfb0 <col:55> 'int' lvalue Var 0x2a7b4c40b08 'i' 'int'
|   |         |   `-IntegerLiteral 0x2a7b4c3d040 <col:58> 'int' 1
|   |         |-ImplicitCastExpr 0x2a7b4c35898 <line:2282:32, col:59> 'u64 *' <ArrayToPointerDecay>
|   |         | `-ArraySubscriptExpr 0x2a7b4c35240 <col:32, col:59> 'smallfelem':'u64 [4]' lvalue
|   |         |   |-ImplicitCastExpr 0x2a7b4c35228 <col:32, col:56> 'smallfelem *' <ArrayToPointerDecay>
|   |         |   | `-ArraySubscriptExpr 0x2a7b4c351e0 <col:32, col:56> 'smallfelem [3]' lvalue
|   |         |   |   |-ImplicitCastExpr 0x2a7b4c351c8 <col:32, col:49> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |         |   |   | `-ArraySubscriptExpr 0x2a7b4c35128 <col:32, col:49> 'smallfelem [16][3]' lvalue
|   |         |   |   |   |-ImplicitCastExpr 0x2a7b4c35110 <col:32, col:37> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |         |   |   |   | `-MemberExpr 0x2a7b4c350b8 <col:32, col:37> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x2a7b4c276d8
|   |         |   |   |   |   `-ImplicitCastExpr 0x2a7b4c350a0 <col:32> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |         |   |   |   |     `-DeclRefExpr 0x2a7b4c35080 <col:32> 'NISTP256_PRE_COMP *' lvalue Var 0x2a7b4c409d0 'pre' 'NISTP256_PRE_COMP *'
|   |         |   |   |   `-IntegerLiteral 0x2a7b4c350e8 <col:48> 'int' 0
|   |         |   |   `-BinaryOperator 0x2a7b4c351a8 <col:51, col:55> 'int' '*'
|   |         |   |     |-IntegerLiteral 0x2a7b4c35148 <col:51> 'int' 2
|   |         |   |     `-ImplicitCastExpr 0x2a7b4c35190 <col:55> 'int' <LValueToRValue>
|   |         |   |       `-DeclRefExpr 0x2a7b4c35170 <col:55> 'int' lvalue Var 0x2a7b4c40b08 'i' 'int'
|   |         |   `-IntegerLiteral 0x2a7b4c35200 <col:58> 'int' 2
|   |         |-ImplicitCastExpr 0x2a7b4c358c8 <line:2283:32, col:59> 'const u64 *':'const u64 *' <NoOp>
|   |         | `-ImplicitCastExpr 0x2a7b4c358b0 <col:32, col:59> 'u64 *' <ArrayToPointerDecay>
|   |         |   `-ArraySubscriptExpr 0x2a7b4c35420 <col:32, col:59> 'smallfelem':'u64 [4]' lvalue
|   |         |     |-ImplicitCastExpr 0x2a7b4c35408 <col:32, col:56> 'smallfelem *' <ArrayToPointerDecay>
|   |         |     | `-ArraySubscriptExpr 0x2a7b4c353c0 <col:32, col:56> 'smallfelem [3]' lvalue
|   |         |     |   |-ImplicitCastExpr 0x2a7b4c353a8 <col:32, col:49> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |         |     |   | `-ArraySubscriptExpr 0x2a7b4c35308 <col:32, col:49> 'smallfelem [16][3]' lvalue
|   |         |     |   |   |-ImplicitCastExpr 0x2a7b4c352f0 <col:32, col:37> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |         |     |   |   | `-MemberExpr 0x2a7b4c35298 <col:32, col:37> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x2a7b4c276d8
|   |         |     |   |   |   `-ImplicitCastExpr 0x2a7b4c35280 <col:32> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |         |     |   |   |     `-DeclRefExpr 0x2a7b4c35260 <col:32> 'NISTP256_PRE_COMP *' lvalue Var 0x2a7b4c409d0 'pre' 'NISTP256_PRE_COMP *'
|   |         |     |   |   `-IntegerLiteral 0x2a7b4c352c8 <col:48> 'int' 0
|   |         |     |   `-BinaryOperator 0x2a7b4c35388 <col:51, col:55> 'int' '*'
|   |         |     |     |-IntegerLiteral 0x2a7b4c35328 <col:51> 'int' 2
|   |         |     |     `-ImplicitCastExpr 0x2a7b4c35370 <col:55> 'int' <LValueToRValue>
|   |         |     |       `-DeclRefExpr 0x2a7b4c35350 <col:55> 'int' lvalue Var 0x2a7b4c40b08 'i' 'int'
|   |         |     `-IntegerLiteral 0x2a7b4c353e0 <col:58> 'int' 0
|   |         |-ImplicitCastExpr 0x2a7b4c358f8 <line:2284:32, col:59> 'const u64 *':'const u64 *' <NoOp>
|   |         | `-ImplicitCastExpr 0x2a7b4c358e0 <col:32, col:59> 'u64 *' <ArrayToPointerDecay>
|   |         |   `-ArraySubscriptExpr 0x2a7b4c35600 <col:32, col:59> 'smallfelem':'u64 [4]' lvalue
|   |         |     |-ImplicitCastExpr 0x2a7b4c355e8 <col:32, col:56> 'smallfelem *' <ArrayToPointerDecay>
|   |         |     | `-ArraySubscriptExpr 0x2a7b4c355a0 <col:32, col:56> 'smallfelem [3]' lvalue
|   |         |     |   |-ImplicitCastExpr 0x2a7b4c35588 <col:32, col:49> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |         |     |   | `-ArraySubscriptExpr 0x2a7b4c354e8 <col:32, col:49> 'smallfelem [16][3]' lvalue
|   |         |     |   |   |-ImplicitCastExpr 0x2a7b4c354d0 <col:32, col:37> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |         |     |   |   | `-MemberExpr 0x2a7b4c35478 <col:32, col:37> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x2a7b4c276d8
|   |         |     |   |   |   `-ImplicitCastExpr 0x2a7b4c35460 <col:32> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |         |     |   |   |     `-DeclRefExpr 0x2a7b4c35440 <col:32> 'NISTP256_PRE_COMP *' lvalue Var 0x2a7b4c409d0 'pre' 'NISTP256_PRE_COMP *'
|   |         |     |   |   `-IntegerLiteral 0x2a7b4c354a8 <col:48> 'int' 0
|   |         |     |   `-BinaryOperator 0x2a7b4c35568 <col:51, col:55> 'int' '*'
|   |         |     |     |-IntegerLiteral 0x2a7b4c35508 <col:51> 'int' 2
|   |         |     |     `-ImplicitCastExpr 0x2a7b4c35550 <col:55> 'int' <LValueToRValue>
|   |         |     |       `-DeclRefExpr 0x2a7b4c35530 <col:55> 'int' lvalue Var 0x2a7b4c40b08 'i' 'int'
|   |         |     `-IntegerLiteral 0x2a7b4c355c0 <col:58> 'int' 1
|   |         `-ImplicitCastExpr 0x2a7b4c35928 <line:2285:32, col:59> 'const u64 *':'const u64 *' <NoOp>
|   |           `-ImplicitCastExpr 0x2a7b4c35910 <col:32, col:59> 'u64 *' <ArrayToPointerDecay>
|   |             `-ArraySubscriptExpr 0x2a7b4c357e0 <col:32, col:59> 'smallfelem':'u64 [4]' lvalue
|   |               |-ImplicitCastExpr 0x2a7b4c357c8 <col:32, col:56> 'smallfelem *' <ArrayToPointerDecay>
|   |               | `-ArraySubscriptExpr 0x2a7b4c35780 <col:32, col:56> 'smallfelem [3]' lvalue
|   |               |   |-ImplicitCastExpr 0x2a7b4c35768 <col:32, col:49> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |               |   | `-ArraySubscriptExpr 0x2a7b4c356c8 <col:32, col:49> 'smallfelem [16][3]' lvalue
|   |               |   |   |-ImplicitCastExpr 0x2a7b4c356b0 <col:32, col:37> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |               |   |   | `-MemberExpr 0x2a7b4c35658 <col:32, col:37> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x2a7b4c276d8
|   |               |   |   |   `-ImplicitCastExpr 0x2a7b4c35640 <col:32> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |               |   |   |     `-DeclRefExpr 0x2a7b4c35620 <col:32> 'NISTP256_PRE_COMP *' lvalue Var 0x2a7b4c409d0 'pre' 'NISTP256_PRE_COMP *'
|   |               |   |   `-IntegerLiteral 0x2a7b4c35688 <col:48> 'int' 0
|   |               |   `-BinaryOperator 0x2a7b4c35748 <col:51, col:55> 'int' '*'
|   |               |     |-IntegerLiteral 0x2a7b4c356e8 <col:51> 'int' 2
|   |               |     `-ImplicitCastExpr 0x2a7b4c35730 <col:55> 'int' <LValueToRValue>
|   |               |       `-DeclRefExpr 0x2a7b4c35710 <col:55> 'int' lvalue Var 0x2a7b4c40b08 'i' 'int'
|   |               `-IntegerLiteral 0x2a7b4c357a0 <col:58> 'int' 2
|   |-ForStmt 0x2a7b4c45300 <line:2288:5, line:2330:5>
|   | |-BinaryOperator 0x2a7b4c35a48 <line:2288:10, col:14> 'int' '='
|   | | |-DeclRefExpr 0x2a7b4c35a00 <col:10> 'int' lvalue Var 0x2a7b4c40b08 'i' 'int'
|   | | `-IntegerLiteral 0x2a7b4c35a20 <col:14> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x2a7b4c35ac8 <col:17, col:21> 'int' '<'
|   | | |-ImplicitCastExpr 0x2a7b4c35ab0 <col:17> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a7b4c35a68 <col:17> 'int' lvalue Var 0x2a7b4c40b08 'i' 'int'
|   | | `-IntegerLiteral 0x2a7b4c35a88 <col:21> 'int' 2
|   | |-UnaryOperator 0x2a7b4c35b08 <col:24, col:25> 'int' postfix '++'
|   | | `-DeclRefExpr 0x2a7b4c35ae8 <col:24> 'int' lvalue Var 0x2a7b4c40b08 'i' 'int'
|   | `-CompoundStmt 0x2a7b4c452c0 <col:29, line:2330:5>
|   |   |-CallExpr 0x2a7b4c35e48 <line:2290:9, col:71> 'void *'
|   |   | |-ImplicitCastExpr 0x2a7b4c35e30 <col:9> 'void *(*)(void *, int, unsigned long long)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x2a7b4c35b20 <col:9> 'void *(void *, int, unsigned long long)' Function 0x2a7b49c0150 'memset' 'void *(void *, int, unsigned long long)'
|   |   | |-ImplicitCastExpr 0x2a7b4c35e98 <col:16, col:36> 'void *' <BitCast>
|   |   | | `-ImplicitCastExpr 0x2a7b4c35e80 <col:16, col:36> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   `-ArraySubscriptExpr 0x2a7b4c35c58 <col:16, col:36> 'smallfelem [3]' lvalue
|   |   | |     |-ImplicitCastExpr 0x2a7b4c35c40 <col:16, col:33> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |     | `-ArraySubscriptExpr 0x2a7b4c35bf8 <col:16, col:33> 'smallfelem [16][3]' lvalue
|   |   | |     |   |-ImplicitCastExpr 0x2a7b4c35bc8 <col:16, col:21> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |     |   | `-MemberExpr 0x2a7b4c35b78 <col:16, col:21> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x2a7b4c276d8
|   |   | |     |   |   `-ImplicitCastExpr 0x2a7b4c35b60 <col:16> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |     |   |     `-DeclRefExpr 0x2a7b4c35b40 <col:16> 'NISTP256_PRE_COMP *' lvalue Var 0x2a7b4c409d0 'pre' 'NISTP256_PRE_COMP *'
|   |   | |     |   `-ImplicitCastExpr 0x2a7b4c35be0 <col:32> 'int' <LValueToRValue>
|   |   | |     |     `-DeclRefExpr 0x2a7b4c35ba8 <col:32> 'int' lvalue Var 0x2a7b4c40b08 'i' 'int'
|   |   | |     `-IntegerLiteral 0x2a7b4c35c18 <col:35> 'int' 0
|   |   | |-IntegerLiteral 0x2a7b4c35c78 <col:39> 'int' 0
|   |   | `-UnaryExprOrTypeTraitExpr 0x2a7b4c35df8 <col:42, col:70> 'unsigned long long' sizeof
|   |   |   `-ParenExpr 0x2a7b4c35dd8 <col:48, col:70> 'smallfelem [3]' lvalue
|   |   |     `-ArraySubscriptExpr 0x2a7b4c35db8 <col:49, col:69> 'smallfelem [3]' lvalue
|   |   |       |-ImplicitCastExpr 0x2a7b4c35da0 <col:49, col:66> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |       | `-ArraySubscriptExpr 0x2a7b4c35d58 <col:49, col:66> 'smallfelem [16][3]' lvalue
|   |   |       |   |-ImplicitCastExpr 0x2a7b4c35d28 <col:49, col:54> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   |       |   | `-MemberExpr 0x2a7b4c35cd8 <col:49, col:54> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x2a7b4c276d8 non_odr_use_unevaluated
|   |   |       |   |   `-ImplicitCastExpr 0x2a7b4c35cc0 <col:49> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   |       |   |     `-DeclRefExpr 0x2a7b4c35ca0 <col:49> 'NISTP256_PRE_COMP *' lvalue Var 0x2a7b4c409d0 'pre' 'NISTP256_PRE_COMP *' non_odr_use_unevaluated
|   |   |       |   `-ImplicitCastExpr 0x2a7b4c35d40 <col:65> 'int' <LValueToRValue>
|   |   |       |     `-DeclRefExpr 0x2a7b4c35d08 <col:65> 'int' lvalue Var 0x2a7b4c40b08 'i' 'int' non_odr_use_unevaluated
|   |   |       `-IntegerLiteral 0x2a7b4c35d78 <col:68> 'int' 0
|   |   |-CallExpr 0x2a7b4c36d40 <line:2293:9, line:2297:49> 'void'
|   |   | |-ImplicitCastExpr 0x2a7b4c36d28 <line:2293:9> 'void (*)(u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x2a7b4c35eb0 <col:9> 'void (u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *)' Function 0x2a7b4b02d78 'point_add_small' 'void (u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *)'
|   |   | |-ImplicitCastExpr 0x2a7b4c36da8 <col:25, col:48> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x2a7b4c36048 <col:25, col:48> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x2a7b4c36030 <col:25, col:45> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x2a7b4c35fe8 <col:25, col:45> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x2a7b4c35fd0 <col:25, col:42> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x2a7b4c35f88 <col:25, col:42> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x2a7b4c35f58 <col:25, col:30> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x2a7b4c35f08 <col:25, col:30> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x2a7b4c276d8
|   |   | |   |   |   |   `-ImplicitCastExpr 0x2a7b4c35ef0 <col:25> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x2a7b4c35ed0 <col:25> 'NISTP256_PRE_COMP *' lvalue Var 0x2a7b4c409d0 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x2a7b4c35f70 <col:41> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x2a7b4c35f38 <col:41> 'int' lvalue Var 0x2a7b4c40b08 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x2a7b4c35fa8 <col:44> 'int' 6
|   |   | |   `-IntegerLiteral 0x2a7b4c36008 <col:47> 'int' 0
|   |   | |-ImplicitCastExpr 0x2a7b4c36dc0 <col:51, col:74> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x2a7b4c361e0 <col:51, col:74> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x2a7b4c361c8 <col:51, col:71> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x2a7b4c36180 <col:51, col:71> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x2a7b4c36168 <col:51, col:68> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x2a7b4c36120 <col:51, col:68> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x2a7b4c360f0 <col:51, col:56> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x2a7b4c360a0 <col:51, col:56> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x2a7b4c276d8
|   |   | |   |   |   |   `-ImplicitCastExpr 0x2a7b4c36088 <col:51> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x2a7b4c36068 <col:51> 'NISTP256_PRE_COMP *' lvalue Var 0x2a7b4c409d0 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x2a7b4c36108 <col:67> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x2a7b4c360d0 <col:67> 'int' lvalue Var 0x2a7b4c40b08 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x2a7b4c36140 <col:70> 'int' 6
|   |   | |   `-IntegerLiteral 0x2a7b4c361a0 <col:73> 'int' 1
|   |   | |-ImplicitCastExpr 0x2a7b4c36dd8 <line:2294:25, col:48> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x2a7b4c36378 <col:25, col:48> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x2a7b4c36360 <col:25, col:45> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x2a7b4c36318 <col:25, col:45> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x2a7b4c36300 <col:25, col:42> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x2a7b4c362b8 <col:25, col:42> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x2a7b4c36288 <col:25, col:30> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x2a7b4c36238 <col:25, col:30> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x2a7b4c276d8
|   |   | |   |   |   |   `-ImplicitCastExpr 0x2a7b4c36220 <col:25> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x2a7b4c36200 <col:25> 'NISTP256_PRE_COMP *' lvalue Var 0x2a7b4c409d0 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x2a7b4c362a0 <col:41> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x2a7b4c36268 <col:41> 'int' lvalue Var 0x2a7b4c40b08 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x2a7b4c362d8 <col:44> 'int' 6
|   |   | |   `-IntegerLiteral 0x2a7b4c36338 <col:47> 'int' 2
|   |   | |-ImplicitCastExpr 0x2a7b4c36df0 <col:51, col:74> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x2a7b4c36510 <col:51, col:74> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x2a7b4c364f8 <col:51, col:71> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x2a7b4c364b0 <col:51, col:71> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x2a7b4c36498 <col:51, col:68> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x2a7b4c36450 <col:51, col:68> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x2a7b4c36420 <col:51, col:56> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x2a7b4c363d0 <col:51, col:56> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x2a7b4c276d8
|   |   | |   |   |   |   `-ImplicitCastExpr 0x2a7b4c363b8 <col:51> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x2a7b4c36398 <col:51> 'NISTP256_PRE_COMP *' lvalue Var 0x2a7b4c409d0 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x2a7b4c36438 <col:67> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x2a7b4c36400 <col:67> 'int' lvalue Var 0x2a7b4c40b08 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x2a7b4c36470 <col:70> 'int' 4
|   |   | |   `-IntegerLiteral 0x2a7b4c364d0 <col:73> 'int' 0
|   |   | |-ImplicitCastExpr 0x2a7b4c36e08 <line:2295:25, col:48> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x2a7b4c366a8 <col:25, col:48> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x2a7b4c36690 <col:25, col:45> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x2a7b4c36648 <col:25, col:45> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x2a7b4c36630 <col:25, col:42> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x2a7b4c365e8 <col:25, col:42> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x2a7b4c365b8 <col:25, col:30> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x2a7b4c36568 <col:25, col:30> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x2a7b4c276d8
|   |   | |   |   |   |   `-ImplicitCastExpr 0x2a7b4c36550 <col:25> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x2a7b4c36530 <col:25> 'NISTP256_PRE_COMP *' lvalue Var 0x2a7b4c409d0 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x2a7b4c365d0 <col:41> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x2a7b4c36598 <col:41> 'int' lvalue Var 0x2a7b4c40b08 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x2a7b4c36608 <col:44> 'int' 4
|   |   | |   `-IntegerLiteral 0x2a7b4c36668 <col:47> 'int' 1
|   |   | |-ImplicitCastExpr 0x2a7b4c36e20 <col:51, col:74> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x2a7b4c36840 <col:51, col:74> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x2a7b4c36828 <col:51, col:71> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x2a7b4c367e0 <col:51, col:71> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x2a7b4c367c8 <col:51, col:68> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x2a7b4c36780 <col:51, col:68> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x2a7b4c36750 <col:51, col:56> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x2a7b4c36700 <col:51, col:56> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x2a7b4c276d8
|   |   | |   |   |   |   `-ImplicitCastExpr 0x2a7b4c366e8 <col:51> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x2a7b4c366c8 <col:51> 'NISTP256_PRE_COMP *' lvalue Var 0x2a7b4c409d0 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x2a7b4c36768 <col:67> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x2a7b4c36730 <col:67> 'int' lvalue Var 0x2a7b4c40b08 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x2a7b4c367a0 <col:70> 'int' 4
|   |   | |   `-IntegerLiteral 0x2a7b4c36800 <col:73> 'int' 2
|   |   | |-ImplicitCastExpr 0x2a7b4c36e38 <line:2296:25, col:48> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x2a7b4c369d8 <col:25, col:48> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x2a7b4c369c0 <col:25, col:45> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x2a7b4c36978 <col:25, col:45> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x2a7b4c36960 <col:25, col:42> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x2a7b4c36918 <col:25, col:42> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x2a7b4c368e8 <col:25, col:30> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x2a7b4c36898 <col:25, col:30> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x2a7b4c276d8
|   |   | |   |   |   |   `-ImplicitCastExpr 0x2a7b4c36880 <col:25> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x2a7b4c36860 <col:25> 'NISTP256_PRE_COMP *' lvalue Var 0x2a7b4c409d0 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x2a7b4c36900 <col:41> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x2a7b4c368c8 <col:41> 'int' lvalue Var 0x2a7b4c40b08 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x2a7b4c36938 <col:44> 'int' 2
|   |   | |   `-IntegerLiteral 0x2a7b4c36998 <col:47> 'int' 0
|   |   | |-ImplicitCastExpr 0x2a7b4c36e50 <col:51, col:74> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x2a7b4c36b70 <col:51, col:74> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x2a7b4c36b58 <col:51, col:71> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x2a7b4c36b10 <col:51, col:71> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x2a7b4c36af8 <col:51, col:68> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x2a7b4c36ab0 <col:51, col:68> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x2a7b4c36a80 <col:51, col:56> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x2a7b4c36a30 <col:51, col:56> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x2a7b4c276d8
|   |   | |   |   |   |   `-ImplicitCastExpr 0x2a7b4c36a18 <col:51> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x2a7b4c369f8 <col:51> 'NISTP256_PRE_COMP *' lvalue Var 0x2a7b4c409d0 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x2a7b4c36a98 <col:67> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x2a7b4c36a60 <col:67> 'int' lvalue Var 0x2a7b4c40b08 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x2a7b4c36ad0 <col:70> 'int' 2
|   |   | |   `-IntegerLiteral 0x2a7b4c36b30 <col:73> 'int' 1
|   |   | `-ImplicitCastExpr 0x2a7b4c36e68 <line:2297:25, col:48> 'u64 *' <ArrayToPointerDecay>
|   |   |   `-ArraySubscriptExpr 0x2a7b4c36d08 <col:25, col:48> 'smallfelem':'u64 [4]' lvalue
|   |   |     |-ImplicitCastExpr 0x2a7b4c36cf0 <col:25, col:45> 'smallfelem *' <ArrayToPointerDecay>
|   |   |     | `-ArraySubscriptExpr 0x2a7b4c36ca8 <col:25, col:45> 'smallfelem [3]' lvalue
|   |   |     |   |-ImplicitCastExpr 0x2a7b4c36c90 <col:25, col:42> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |     |   | `-ArraySubscriptExpr 0x2a7b4c36c48 <col:25, col:42> 'smallfelem [16][3]' lvalue
|   |   |     |   |   |-ImplicitCastExpr 0x2a7b4c36c18 <col:25, col:30> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   |     |   |   | `-MemberExpr 0x2a7b4c36bc8 <col:25, col:30> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x2a7b4c276d8
|   |   |     |   |   |   `-ImplicitCastExpr 0x2a7b4c36bb0 <col:25> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   |     |   |   |     `-DeclRefExpr 0x2a7b4c36b90 <col:25> 'NISTP256_PRE_COMP *' lvalue Var 0x2a7b4c409d0 'pre' 'NISTP256_PRE_COMP *'
|   |   |     |   |   `-ImplicitCastExpr 0x2a7b4c36c30 <col:41> 'int' <LValueToRValue>
|   |   |     |   |     `-DeclRefExpr 0x2a7b4c36bf8 <col:41> 'int' lvalue Var 0x2a7b4c40b08 'i' 'int'
|   |   |     |   `-IntegerLiteral 0x2a7b4c36c68 <col:44> 'int' 2
|   |   |     `-IntegerLiteral 0x2a7b4c36cc8 <col:47> 'int' 2
|   |   |-CallExpr 0x2a7b4c3dd58 <line:2299:9, line:2303:49> 'void'
|   |   | |-ImplicitCastExpr 0x2a7b4c3dd40 <line:2299:9> 'void (*)(u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x2a7b4c36e80 <col:9> 'void (u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *)' Function 0x2a7b4b02d78 'point_add_small' 'void (u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *)'
|   |   | |-ImplicitCastExpr 0x2a7b4c3ddc0 <col:25, col:49> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x2a7b4c37018 <col:25, col:49> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x2a7b4c37000 <col:25, col:46> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x2a7b4c36fb8 <col:25, col:46> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x2a7b4c36fa0 <col:25, col:42> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x2a7b4c36f58 <col:25, col:42> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x2a7b4c36f28 <col:25, col:30> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x2a7b4c36ed8 <col:25, col:30> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x2a7b4c276d8
|   |   | |   |   |   |   `-ImplicitCastExpr 0x2a7b4c36ec0 <col:25> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x2a7b4c36ea0 <col:25> 'NISTP256_PRE_COMP *' lvalue Var 0x2a7b4c409d0 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x2a7b4c36f40 <col:41> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x2a7b4c36f08 <col:41> 'int' lvalue Var 0x2a7b4c40b08 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x2a7b4c36f78 <col:44> 'int' 10
|   |   | |   `-IntegerLiteral 0x2a7b4c36fd8 <col:48> 'int' 0
|   |   | |-ImplicitCastExpr 0x2a7b4c3ddd8 <col:52, col:76> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x2a7b4c3d1f8 <col:52, col:76> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x2a7b4c3d1e0 <col:52, col:73> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x2a7b4c3d198 <col:52, col:73> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x2a7b4c3d180 <col:52, col:69> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x2a7b4c3d138 <col:52, col:69> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x2a7b4c3d108 <col:52, col:57> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x2a7b4c3d0b8 <col:52, col:57> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x2a7b4c276d8
|   |   | |   |   |   |   `-ImplicitCastExpr 0x2a7b4c3d0a0 <col:52> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x2a7b4c37038 <col:52> 'NISTP256_PRE_COMP *' lvalue Var 0x2a7b4c409d0 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x2a7b4c3d120 <col:68> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x2a7b4c3d0e8 <col:68> 'int' lvalue Var 0x2a7b4c40b08 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x2a7b4c3d158 <col:71> 'int' 10
|   |   | |   `-IntegerLiteral 0x2a7b4c3d1b8 <col:75> 'int' 1
|   |   | |-ImplicitCastExpr 0x2a7b4c3ddf0 <line:2300:25, col:49> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x2a7b4c3d390 <col:25, col:49> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x2a7b4c3d378 <col:25, col:46> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x2a7b4c3d330 <col:25, col:46> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x2a7b4c3d318 <col:25, col:42> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x2a7b4c3d2d0 <col:25, col:42> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x2a7b4c3d2a0 <col:25, col:30> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x2a7b4c3d250 <col:25, col:30> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x2a7b4c276d8
|   |   | |   |   |   |   `-ImplicitCastExpr 0x2a7b4c3d238 <col:25> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x2a7b4c3d218 <col:25> 'NISTP256_PRE_COMP *' lvalue Var 0x2a7b4c409d0 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x2a7b4c3d2b8 <col:41> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x2a7b4c3d280 <col:41> 'int' lvalue Var 0x2a7b4c40b08 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x2a7b4c3d2f0 <col:44> 'int' 10
|   |   | |   `-IntegerLiteral 0x2a7b4c3d350 <col:48> 'int' 2
|   |   | |-ImplicitCastExpr 0x2a7b4c3de08 <col:52, col:75> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x2a7b4c3d528 <col:52, col:75> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x2a7b4c3d510 <col:52, col:72> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x2a7b4c3d4c8 <col:52, col:72> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x2a7b4c3d4b0 <col:52, col:69> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x2a7b4c3d468 <col:52, col:69> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x2a7b4c3d438 <col:52, col:57> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x2a7b4c3d3e8 <col:52, col:57> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x2a7b4c276d8
|   |   | |   |   |   |   `-ImplicitCastExpr 0x2a7b4c3d3d0 <col:52> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x2a7b4c3d3b0 <col:52> 'NISTP256_PRE_COMP *' lvalue Var 0x2a7b4c409d0 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x2a7b4c3d450 <col:68> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x2a7b4c3d418 <col:68> 'int' lvalue Var 0x2a7b4c40b08 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x2a7b4c3d488 <col:71> 'int' 8
|   |   | |   `-IntegerLiteral 0x2a7b4c3d4e8 <col:74> 'int' 0
|   |   | |-ImplicitCastExpr 0x2a7b4c3de20 <line:2301:25, col:48> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x2a7b4c3d6c0 <col:25, col:48> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x2a7b4c3d6a8 <col:25, col:45> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x2a7b4c3d660 <col:25, col:45> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x2a7b4c3d648 <col:25, col:42> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x2a7b4c3d600 <col:25, col:42> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x2a7b4c3d5d0 <col:25, col:30> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x2a7b4c3d580 <col:25, col:30> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x2a7b4c276d8
|   |   | |   |   |   |   `-ImplicitCastExpr 0x2a7b4c3d568 <col:25> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x2a7b4c3d548 <col:25> 'NISTP256_PRE_COMP *' lvalue Var 0x2a7b4c409d0 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x2a7b4c3d5e8 <col:41> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x2a7b4c3d5b0 <col:41> 'int' lvalue Var 0x2a7b4c40b08 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x2a7b4c3d620 <col:44> 'int' 8
|   |   | |   `-IntegerLiteral 0x2a7b4c3d680 <col:47> 'int' 1
|   |   | |-ImplicitCastExpr 0x2a7b4c3de38 <col:51, col:74> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x2a7b4c3d858 <col:51, col:74> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x2a7b4c3d840 <col:51, col:71> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x2a7b4c3d7f8 <col:51, col:71> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x2a7b4c3d7e0 <col:51, col:68> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x2a7b4c3d798 <col:51, col:68> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x2a7b4c3d768 <col:51, col:56> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x2a7b4c3d718 <col:51, col:56> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x2a7b4c276d8
|   |   | |   |   |   |   `-ImplicitCastExpr 0x2a7b4c3d700 <col:51> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x2a7b4c3d6e0 <col:51> 'NISTP256_PRE_COMP *' lvalue Var 0x2a7b4c409d0 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x2a7b4c3d780 <col:67> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x2a7b4c3d748 <col:67> 'int' lvalue Var 0x2a7b4c40b08 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x2a7b4c3d7b8 <col:70> 'int' 8
|   |   | |   `-IntegerLiteral 0x2a7b4c3d818 <col:73> 'int' 2
|   |   | |-ImplicitCastExpr 0x2a7b4c3de50 <line:2302:25, col:48> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x2a7b4c3d9f0 <col:25, col:48> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x2a7b4c3d9d8 <col:25, col:45> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x2a7b4c3d990 <col:25, col:45> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x2a7b4c3d978 <col:25, col:42> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x2a7b4c3d930 <col:25, col:42> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x2a7b4c3d900 <col:25, col:30> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x2a7b4c3d8b0 <col:25, col:30> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x2a7b4c276d8
|   |   | |   |   |   |   `-ImplicitCastExpr 0x2a7b4c3d898 <col:25> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x2a7b4c3d878 <col:25> 'NISTP256_PRE_COMP *' lvalue Var 0x2a7b4c409d0 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x2a7b4c3d918 <col:41> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x2a7b4c3d8e0 <col:41> 'int' lvalue Var 0x2a7b4c40b08 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x2a7b4c3d950 <col:44> 'int' 2
|   |   | |   `-IntegerLiteral 0x2a7b4c3d9b0 <col:47> 'int' 0
|   |   | |-ImplicitCastExpr 0x2a7b4c3de68 <col:51, col:74> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x2a7b4c3db88 <col:51, col:74> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x2a7b4c3db70 <col:51, col:71> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x2a7b4c3db28 <col:51, col:71> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x2a7b4c3db10 <col:51, col:68> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x2a7b4c3dac8 <col:51, col:68> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x2a7b4c3da98 <col:51, col:56> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x2a7b4c3da48 <col:51, col:56> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x2a7b4c276d8
|   |   | |   |   |   |   `-ImplicitCastExpr 0x2a7b4c3da30 <col:51> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x2a7b4c3da10 <col:51> 'NISTP256_PRE_COMP *' lvalue Var 0x2a7b4c409d0 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x2a7b4c3dab0 <col:67> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x2a7b4c3da78 <col:67> 'int' lvalue Var 0x2a7b4c40b08 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x2a7b4c3dae8 <col:70> 'int' 2
|   |   | |   `-IntegerLiteral 0x2a7b4c3db48 <col:73> 'int' 1
|   |   | `-ImplicitCastExpr 0x2a7b4c3de80 <line:2303:25, col:48> 'u64 *' <ArrayToPointerDecay>
|   |   |   `-ArraySubscriptExpr 0x2a7b4c3dd20 <col:25, col:48> 'smallfelem':'u64 [4]' lvalue
|   |   |     |-ImplicitCastExpr 0x2a7b4c3dd08 <col:25, col:45> 'smallfelem *' <ArrayToPointerDecay>
|   |   |     | `-ArraySubscriptExpr 0x2a7b4c3dcc0 <col:25, col:45> 'smallfelem [3]' lvalue
|   |   |     |   |-ImplicitCastExpr 0x2a7b4c3dca8 <col:25, col:42> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |     |   | `-ArraySubscriptExpr 0x2a7b4c3dc60 <col:25, col:42> 'smallfelem [16][3]' lvalue
|   |   |     |   |   |-ImplicitCastExpr 0x2a7b4c3dc30 <col:25, col:30> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   |     |   |   | `-MemberExpr 0x2a7b4c3dbe0 <col:25, col:30> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x2a7b4c276d8
|   |   |     |   |   |   `-ImplicitCastExpr 0x2a7b4c3dbc8 <col:25> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   |     |   |   |     `-DeclRefExpr 0x2a7b4c3dba8 <col:25> 'NISTP256_PRE_COMP *' lvalue Var 0x2a7b4c409d0 'pre' 'NISTP256_PRE_COMP *'
|   |   |     |   |   `-ImplicitCastExpr 0x2a7b4c3dc48 <col:41> 'int' <LValueToRValue>
|   |   |     |   |     `-DeclRefExpr 0x2a7b4c3dc10 <col:41> 'int' lvalue Var 0x2a7b4c40b08 'i' 'int'
|   |   |     |   `-IntegerLiteral 0x2a7b4c3dc80 <col:44> 'int' 2
|   |   |     `-IntegerLiteral 0x2a7b4c3dce0 <col:47> 'int' 2
|   |   |-CallExpr 0x2a7b4c3ed28 <line:2305:9, line:2309:49> 'void'
|   |   | |-ImplicitCastExpr 0x2a7b4c3ed10 <line:2305:9> 'void (*)(u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x2a7b4c3de98 <col:9> 'void (u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *)' Function 0x2a7b4b02d78 'point_add_small' 'void (u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *)'
|   |   | |-ImplicitCastExpr 0x2a7b4c3ed90 <col:25, col:49> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x2a7b4c3e030 <col:25, col:49> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x2a7b4c3e018 <col:25, col:46> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x2a7b4c3dfd0 <col:25, col:46> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x2a7b4c3dfb8 <col:25, col:42> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x2a7b4c3df70 <col:25, col:42> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x2a7b4c3df40 <col:25, col:30> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x2a7b4c3def0 <col:25, col:30> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x2a7b4c276d8
|   |   | |   |   |   |   `-ImplicitCastExpr 0x2a7b4c3ded8 <col:25> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x2a7b4c3deb8 <col:25> 'NISTP256_PRE_COMP *' lvalue Var 0x2a7b4c409d0 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x2a7b4c3df58 <col:41> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x2a7b4c3df20 <col:41> 'int' lvalue Var 0x2a7b4c40b08 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x2a7b4c3df90 <col:44> 'int' 12
|   |   | |   `-IntegerLiteral 0x2a7b4c3dff0 <col:48> 'int' 0
|   |   | |-ImplicitCastExpr 0x2a7b4c3eda8 <col:52, col:76> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x2a7b4c3e1c8 <col:52, col:76> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x2a7b4c3e1b0 <col:52, col:73> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x2a7b4c3e168 <col:52, col:73> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x2a7b4c3e150 <col:52, col:69> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x2a7b4c3e108 <col:52, col:69> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x2a7b4c3e0d8 <col:52, col:57> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x2a7b4c3e088 <col:52, col:57> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x2a7b4c276d8
|   |   | |   |   |   |   `-ImplicitCastExpr 0x2a7b4c3e070 <col:52> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x2a7b4c3e050 <col:52> 'NISTP256_PRE_COMP *' lvalue Var 0x2a7b4c409d0 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x2a7b4c3e0f0 <col:68> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x2a7b4c3e0b8 <col:68> 'int' lvalue Var 0x2a7b4c40b08 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x2a7b4c3e128 <col:71> 'int' 12
|   |   | |   `-IntegerLiteral 0x2a7b4c3e188 <col:75> 'int' 1
|   |   | |-ImplicitCastExpr 0x2a7b4c3edc0 <line:2306:25, col:49> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x2a7b4c3e360 <col:25, col:49> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x2a7b4c3e348 <col:25, col:46> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x2a7b4c3e300 <col:25, col:46> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x2a7b4c3e2e8 <col:25, col:42> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x2a7b4c3e2a0 <col:25, col:42> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x2a7b4c3e270 <col:25, col:30> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x2a7b4c3e220 <col:25, col:30> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x2a7b4c276d8
|   |   | |   |   |   |   `-ImplicitCastExpr 0x2a7b4c3e208 <col:25> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x2a7b4c3e1e8 <col:25> 'NISTP256_PRE_COMP *' lvalue Var 0x2a7b4c409d0 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x2a7b4c3e288 <col:41> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x2a7b4c3e250 <col:41> 'int' lvalue Var 0x2a7b4c40b08 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x2a7b4c3e2c0 <col:44> 'int' 12
|   |   | |   `-IntegerLiteral 0x2a7b4c3e320 <col:48> 'int' 2
|   |   | |-ImplicitCastExpr 0x2a7b4c3edd8 <col:52, col:75> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x2a7b4c3e4f8 <col:52, col:75> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x2a7b4c3e4e0 <col:52, col:72> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x2a7b4c3e498 <col:52, col:72> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x2a7b4c3e480 <col:52, col:69> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x2a7b4c3e438 <col:52, col:69> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x2a7b4c3e408 <col:52, col:57> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x2a7b4c3e3b8 <col:52, col:57> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x2a7b4c276d8
|   |   | |   |   |   |   `-ImplicitCastExpr 0x2a7b4c3e3a0 <col:52> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x2a7b4c3e380 <col:52> 'NISTP256_PRE_COMP *' lvalue Var 0x2a7b4c409d0 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x2a7b4c3e420 <col:68> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x2a7b4c3e3e8 <col:68> 'int' lvalue Var 0x2a7b4c40b08 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x2a7b4c3e458 <col:71> 'int' 8
|   |   | |   `-IntegerLiteral 0x2a7b4c3e4b8 <col:74> 'int' 0
|   |   | |-ImplicitCastExpr 0x2a7b4c3edf0 <line:2307:25, col:48> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x2a7b4c3e690 <col:25, col:48> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x2a7b4c3e678 <col:25, col:45> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x2a7b4c3e630 <col:25, col:45> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x2a7b4c3e618 <col:25, col:42> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x2a7b4c3e5d0 <col:25, col:42> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x2a7b4c3e5a0 <col:25, col:30> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x2a7b4c3e550 <col:25, col:30> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x2a7b4c276d8
|   |   | |   |   |   |   `-ImplicitCastExpr 0x2a7b4c3e538 <col:25> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x2a7b4c3e518 <col:25> 'NISTP256_PRE_COMP *' lvalue Var 0x2a7b4c409d0 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x2a7b4c3e5b8 <col:41> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x2a7b4c3e580 <col:41> 'int' lvalue Var 0x2a7b4c40b08 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x2a7b4c3e5f0 <col:44> 'int' 8
|   |   | |   `-IntegerLiteral 0x2a7b4c3e650 <col:47> 'int' 1
|   |   | |-ImplicitCastExpr 0x2a7b4c3ee08 <col:51, col:74> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x2a7b4c3e828 <col:51, col:74> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x2a7b4c3e810 <col:51, col:71> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x2a7b4c3e7c8 <col:51, col:71> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x2a7b4c3e7b0 <col:51, col:68> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x2a7b4c3e768 <col:51, col:68> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x2a7b4c3e738 <col:51, col:56> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x2a7b4c3e6e8 <col:51, col:56> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x2a7b4c276d8
|   |   | |   |   |   |   `-ImplicitCastExpr 0x2a7b4c3e6d0 <col:51> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x2a7b4c3e6b0 <col:51> 'NISTP256_PRE_COMP *' lvalue Var 0x2a7b4c409d0 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x2a7b4c3e750 <col:67> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x2a7b4c3e718 <col:67> 'int' lvalue Var 0x2a7b4c40b08 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x2a7b4c3e788 <col:70> 'int' 8
|   |   | |   `-IntegerLiteral 0x2a7b4c3e7e8 <col:73> 'int' 2
|   |   | |-ImplicitCastExpr 0x2a7b4c3ee20 <line:2308:25, col:48> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x2a7b4c3e9c0 <col:25, col:48> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x2a7b4c3e9a8 <col:25, col:45> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x2a7b4c3e960 <col:25, col:45> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x2a7b4c3e948 <col:25, col:42> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x2a7b4c3e900 <col:25, col:42> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x2a7b4c3e8d0 <col:25, col:30> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x2a7b4c3e880 <col:25, col:30> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x2a7b4c276d8
|   |   | |   |   |   |   `-ImplicitCastExpr 0x2a7b4c3e868 <col:25> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x2a7b4c3e848 <col:25> 'NISTP256_PRE_COMP *' lvalue Var 0x2a7b4c409d0 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x2a7b4c3e8e8 <col:41> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x2a7b4c3e8b0 <col:41> 'int' lvalue Var 0x2a7b4c40b08 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x2a7b4c3e920 <col:44> 'int' 4
|   |   | |   `-IntegerLiteral 0x2a7b4c3e980 <col:47> 'int' 0
|   |   | |-ImplicitCastExpr 0x2a7b4c3ee38 <col:51, col:74> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x2a7b4c3eb58 <col:51, col:74> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x2a7b4c3eb40 <col:51, col:71> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x2a7b4c3eaf8 <col:51, col:71> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x2a7b4c3eae0 <col:51, col:68> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x2a7b4c3ea98 <col:51, col:68> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x2a7b4c3ea68 <col:51, col:56> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x2a7b4c3ea18 <col:51, col:56> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x2a7b4c276d8
|   |   | |   |   |   |   `-ImplicitCastExpr 0x2a7b4c3ea00 <col:51> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x2a7b4c3e9e0 <col:51> 'NISTP256_PRE_COMP *' lvalue Var 0x2a7b4c409d0 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x2a7b4c3ea80 <col:67> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x2a7b4c3ea48 <col:67> 'int' lvalue Var 0x2a7b4c40b08 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x2a7b4c3eab8 <col:70> 'int' 4
|   |   | |   `-IntegerLiteral 0x2a7b4c3eb18 <col:73> 'int' 1
|   |   | `-ImplicitCastExpr 0x2a7b4c3ee50 <line:2309:25, col:48> 'u64 *' <ArrayToPointerDecay>
|   |   |   `-ArraySubscriptExpr 0x2a7b4c3ecf0 <col:25, col:48> 'smallfelem':'u64 [4]' lvalue
|   |   |     |-ImplicitCastExpr 0x2a7b4c3ecd8 <col:25, col:45> 'smallfelem *' <ArrayToPointerDecay>
|   |   |     | `-ArraySubscriptExpr 0x2a7b4c3ec90 <col:25, col:45> 'smallfelem [3]' lvalue
|   |   |     |   |-ImplicitCastExpr 0x2a7b4c3ec78 <col:25, col:42> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |     |   | `-ArraySubscriptExpr 0x2a7b4c3ec30 <col:25, col:42> 'smallfelem [16][3]' lvalue
|   |   |     |   |   |-ImplicitCastExpr 0x2a7b4c3ec00 <col:25, col:30> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   |     |   |   | `-MemberExpr 0x2a7b4c3ebb0 <col:25, col:30> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x2a7b4c276d8
|   |   |     |   |   |   `-ImplicitCastExpr 0x2a7b4c3eb98 <col:25> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   |     |   |   |     `-DeclRefExpr 0x2a7b4c3eb78 <col:25> 'NISTP256_PRE_COMP *' lvalue Var 0x2a7b4c409d0 'pre' 'NISTP256_PRE_COMP *'
|   |   |     |   |   `-ImplicitCastExpr 0x2a7b4c3ec18 <col:41> 'int' <LValueToRValue>
|   |   |     |   |     `-DeclRefExpr 0x2a7b4c3ebe0 <col:41> 'int' lvalue Var 0x2a7b4c40b08 'i' 'int'
|   |   |     |   `-IntegerLiteral 0x2a7b4c3ec50 <col:44> 'int' 4
|   |   |     `-IntegerLiteral 0x2a7b4c3ecb0 <col:47> 'int' 2
|   |   |-CallExpr 0x2a7b4c31cb0 <line:2313:9, line:2317:49> 'void'
|   |   | |-ImplicitCastExpr 0x2a7b4c31c98 <line:2313:9> 'void (*)(u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x2a7b4c3ee68 <col:9> 'void (u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *)' Function 0x2a7b4b02d78 'point_add_small' 'void (u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *)'
|   |   | |-ImplicitCastExpr 0x2a7b4c31d18 <col:25, col:49> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x2a7b4c3f000 <col:25, col:49> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x2a7b4c3efe8 <col:25, col:46> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x2a7b4c3efa0 <col:25, col:46> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x2a7b4c3ef88 <col:25, col:42> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x2a7b4c3ef40 <col:25, col:42> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x2a7b4c3ef10 <col:25, col:30> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x2a7b4c3eec0 <col:25, col:30> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x2a7b4c276d8
|   |   | |   |   |   |   `-ImplicitCastExpr 0x2a7b4c3eea8 <col:25> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x2a7b4c3ee88 <col:25> 'NISTP256_PRE_COMP *' lvalue Var 0x2a7b4c409d0 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x2a7b4c3ef28 <col:41> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x2a7b4c3eef0 <col:41> 'int' lvalue Var 0x2a7b4c40b08 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x2a7b4c3ef60 <col:44> 'int' 14
|   |   | |   `-IntegerLiteral 0x2a7b4c3efc0 <col:48> 'int' 0
|   |   | |-ImplicitCastExpr 0x2a7b4c31d30 <col:52, col:76> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x2a7b4c31150 <col:52, col:76> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x2a7b4c31138 <col:52, col:73> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x2a7b4c310f0 <col:52, col:73> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x2a7b4c310d8 <col:52, col:69> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x2a7b4c31090 <col:52, col:69> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x2a7b4c31060 <col:52, col:57> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x2a7b4c3f058 <col:52, col:57> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x2a7b4c276d8
|   |   | |   |   |   |   `-ImplicitCastExpr 0x2a7b4c3f040 <col:52> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x2a7b4c3f020 <col:52> 'NISTP256_PRE_COMP *' lvalue Var 0x2a7b4c409d0 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x2a7b4c31078 <col:68> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x2a7b4c31040 <col:68> 'int' lvalue Var 0x2a7b4c40b08 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x2a7b4c310b0 <col:71> 'int' 14
|   |   | |   `-IntegerLiteral 0x2a7b4c31110 <col:75> 'int' 1
|   |   | |-ImplicitCastExpr 0x2a7b4c31d48 <line:2314:25, col:49> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x2a7b4c312e8 <col:25, col:49> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x2a7b4c312d0 <col:25, col:46> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x2a7b4c31288 <col:25, col:46> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x2a7b4c31270 <col:25, col:42> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x2a7b4c31228 <col:25, col:42> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x2a7b4c311f8 <col:25, col:30> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x2a7b4c311a8 <col:25, col:30> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x2a7b4c276d8
|   |   | |   |   |   |   `-ImplicitCastExpr 0x2a7b4c31190 <col:25> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x2a7b4c31170 <col:25> 'NISTP256_PRE_COMP *' lvalue Var 0x2a7b4c409d0 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x2a7b4c31210 <col:41> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x2a7b4c311d8 <col:41> 'int' lvalue Var 0x2a7b4c40b08 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x2a7b4c31248 <col:44> 'int' 14
|   |   | |   `-IntegerLiteral 0x2a7b4c312a8 <col:48> 'int' 2
|   |   | |-ImplicitCastExpr 0x2a7b4c31d60 <col:52, col:76> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x2a7b4c31480 <col:52, col:76> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x2a7b4c31468 <col:52, col:73> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x2a7b4c31420 <col:52, col:73> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x2a7b4c31408 <col:52, col:69> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x2a7b4c313c0 <col:52, col:69> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x2a7b4c31390 <col:52, col:57> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x2a7b4c31340 <col:52, col:57> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x2a7b4c276d8
|   |   | |   |   |   |   `-ImplicitCastExpr 0x2a7b4c31328 <col:52> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x2a7b4c31308 <col:52> 'NISTP256_PRE_COMP *' lvalue Var 0x2a7b4c409d0 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x2a7b4c313a8 <col:68> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x2a7b4c31370 <col:68> 'int' lvalue Var 0x2a7b4c40b08 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x2a7b4c313e0 <col:71> 'int' 12
|   |   | |   `-IntegerLiteral 0x2a7b4c31440 <col:75> 'int' 0
|   |   | |-ImplicitCastExpr 0x2a7b4c31d78 <line:2315:25, col:49> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x2a7b4c31618 <col:25, col:49> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x2a7b4c31600 <col:25, col:46> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x2a7b4c315b8 <col:25, col:46> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x2a7b4c315a0 <col:25, col:42> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x2a7b4c31558 <col:25, col:42> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x2a7b4c31528 <col:25, col:30> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x2a7b4c314d8 <col:25, col:30> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x2a7b4c276d8
|   |   | |   |   |   |   `-ImplicitCastExpr 0x2a7b4c314c0 <col:25> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x2a7b4c314a0 <col:25> 'NISTP256_PRE_COMP *' lvalue Var 0x2a7b4c409d0 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x2a7b4c31540 <col:41> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x2a7b4c31508 <col:41> 'int' lvalue Var 0x2a7b4c40b08 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x2a7b4c31578 <col:44> 'int' 12
|   |   | |   `-IntegerLiteral 0x2a7b4c315d8 <col:48> 'int' 1
|   |   | |-ImplicitCastExpr 0x2a7b4c31d90 <col:52, col:76> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x2a7b4c317b0 <col:52, col:76> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x2a7b4c31798 <col:52, col:73> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x2a7b4c31750 <col:52, col:73> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x2a7b4c31738 <col:52, col:69> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x2a7b4c316f0 <col:52, col:69> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x2a7b4c316c0 <col:52, col:57> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x2a7b4c31670 <col:52, col:57> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x2a7b4c276d8
|   |   | |   |   |   |   `-ImplicitCastExpr 0x2a7b4c31658 <col:52> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x2a7b4c31638 <col:52> 'NISTP256_PRE_COMP *' lvalue Var 0x2a7b4c409d0 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x2a7b4c316d8 <col:68> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x2a7b4c316a0 <col:68> 'int' lvalue Var 0x2a7b4c40b08 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x2a7b4c31710 <col:71> 'int' 12
|   |   | |   `-IntegerLiteral 0x2a7b4c31770 <col:75> 'int' 2
|   |   | |-ImplicitCastExpr 0x2a7b4c31da8 <line:2316:25, col:48> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x2a7b4c31948 <col:25, col:48> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x2a7b4c31930 <col:25, col:45> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x2a7b4c318e8 <col:25, col:45> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x2a7b4c318d0 <col:25, col:42> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x2a7b4c31888 <col:25, col:42> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x2a7b4c31858 <col:25, col:30> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x2a7b4c31808 <col:25, col:30> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x2a7b4c276d8
|   |   | |   |   |   |   `-ImplicitCastExpr 0x2a7b4c317f0 <col:25> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x2a7b4c317d0 <col:25> 'NISTP256_PRE_COMP *' lvalue Var 0x2a7b4c409d0 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x2a7b4c31870 <col:41> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x2a7b4c31838 <col:41> 'int' lvalue Var 0x2a7b4c40b08 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x2a7b4c318a8 <col:44> 'int' 2
|   |   | |   `-IntegerLiteral 0x2a7b4c31908 <col:47> 'int' 0
|   |   | |-ImplicitCastExpr 0x2a7b4c31dc0 <col:51, col:74> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x2a7b4c31ae0 <col:51, col:74> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x2a7b4c31ac8 <col:51, col:71> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x2a7b4c31a80 <col:51, col:71> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x2a7b4c31a68 <col:51, col:68> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x2a7b4c31a20 <col:51, col:68> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x2a7b4c319f0 <col:51, col:56> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x2a7b4c319a0 <col:51, col:56> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x2a7b4c276d8
|   |   | |   |   |   |   `-ImplicitCastExpr 0x2a7b4c31988 <col:51> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x2a7b4c31968 <col:51> 'NISTP256_PRE_COMP *' lvalue Var 0x2a7b4c409d0 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x2a7b4c31a08 <col:67> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x2a7b4c319d0 <col:67> 'int' lvalue Var 0x2a7b4c40b08 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x2a7b4c31a40 <col:70> 'int' 2
|   |   | |   `-IntegerLiteral 0x2a7b4c31aa0 <col:73> 'int' 1
|   |   | `-ImplicitCastExpr 0x2a7b4c31dd8 <line:2317:25, col:48> 'u64 *' <ArrayToPointerDecay>
|   |   |   `-ArraySubscriptExpr 0x2a7b4c31c78 <col:25, col:48> 'smallfelem':'u64 [4]' lvalue
|   |   |     |-ImplicitCastExpr 0x2a7b4c31c60 <col:25, col:45> 'smallfelem *' <ArrayToPointerDecay>
|   |   |     | `-ArraySubscriptExpr 0x2a7b4c31c18 <col:25, col:45> 'smallfelem [3]' lvalue
|   |   |     |   |-ImplicitCastExpr 0x2a7b4c31c00 <col:25, col:42> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |     |   | `-ArraySubscriptExpr 0x2a7b4c31bb8 <col:25, col:42> 'smallfelem [16][3]' lvalue
|   |   |     |   |   |-ImplicitCastExpr 0x2a7b4c31b88 <col:25, col:30> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   |     |   |   | `-MemberExpr 0x2a7b4c31b38 <col:25, col:30> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x2a7b4c276d8
|   |   |     |   |   |   `-ImplicitCastExpr 0x2a7b4c31b20 <col:25> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   |     |   |   |     `-DeclRefExpr 0x2a7b4c31b00 <col:25> 'NISTP256_PRE_COMP *' lvalue Var 0x2a7b4c409d0 'pre' 'NISTP256_PRE_COMP *'
|   |   |     |   |   `-ImplicitCastExpr 0x2a7b4c31ba0 <col:41> 'int' <LValueToRValue>
|   |   |     |   |     `-DeclRefExpr 0x2a7b4c31b68 <col:41> 'int' lvalue Var 0x2a7b4c40b08 'i' 'int'
|   |   |     |   `-IntegerLiteral 0x2a7b4c31bd8 <col:44> 'int' 2
|   |   |     `-IntegerLiteral 0x2a7b4c31c38 <col:47> 'int' 2
|   |   `-ForStmt 0x2a7b4c45288 <line:2318:9, line:2329:9>
|   |     |-BinaryOperator 0x2a7b4c31e38 <line:2318:14, col:18> 'int' '='
|   |     | |-DeclRefExpr 0x2a7b4c31df0 <col:14> 'int' lvalue Var 0x2a7b4c40b88 'j' 'int'
|   |     | `-IntegerLiteral 0x2a7b4c31e10 <col:18> 'int' 1
|   |     |-<<<NULL>>>
|   |     |-BinaryOperator 0x2a7b4c31eb8 <col:21, col:25> 'int' '<'
|   |     | |-ImplicitCastExpr 0x2a7b4c31ea0 <col:21> 'int' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x2a7b4c31e58 <col:21> 'int' lvalue Var 0x2a7b4c40b88 'j' 'int'
|   |     | `-IntegerLiteral 0x2a7b4c31e78 <col:25> 'int' 8
|   |     |-UnaryOperator 0x2a7b4c31ef8 <col:28, col:30> 'int' prefix '++'
|   |     | `-DeclRefExpr 0x2a7b4c31ed8 <col:30> 'int' lvalue Var 0x2a7b4c40b88 'j' 'int'
|   |     `-CompoundStmt 0x2a7b4c45270 <col:33, line:2329:9>
|   |       `-CallExpr 0x2a7b4c45130 <line:2320:13, line:2328:53> 'void'
|   |         |-ImplicitCastExpr 0x2a7b4c45118 <line:2320:13> 'void (*)(u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *)' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x2a7b4c31f10 <col:13> 'void (u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *)' Function 0x2a7b4b02d78 'point_add_small' 'void (u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *)'
|   |         |-ImplicitCastExpr 0x2a7b4c45198 <col:29, col:60> 'u64 *' <ArrayToPointerDecay>
|   |         | `-ArraySubscriptExpr 0x2a7b4c32148 <col:29, col:60> 'smallfelem':'u64 [4]' lvalue
|   |         |   |-ImplicitCastExpr 0x2a7b4c32130 <col:29, col:57> 'smallfelem *' <ArrayToPointerDecay>
|   |         |   | `-ArraySubscriptExpr 0x2a7b4c320e8 <col:29, col:57> 'smallfelem [3]' lvalue
|   |         |   |   |-ImplicitCastExpr 0x2a7b4c320d0 <col:29, col:46> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |         |   |   | `-ArraySubscriptExpr 0x2a7b4c31fe8 <col:29, col:46> 'smallfelem [16][3]' lvalue
|   |         |   |   |   |-ImplicitCastExpr 0x2a7b4c31fb8 <col:29, col:34> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |         |   |   |   | `-MemberExpr 0x2a7b4c31f68 <col:29, col:34> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x2a7b4c276d8
|   |         |   |   |   |   `-ImplicitCastExpr 0x2a7b4c31f50 <col:29> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |         |   |   |   |     `-DeclRefExpr 0x2a7b4c31f30 <col:29> 'NISTP256_PRE_COMP *' lvalue Var 0x2a7b4c409d0 'pre' 'NISTP256_PRE_COMP *'
|   |         |   |   |   `-ImplicitCastExpr 0x2a7b4c31fd0 <col:45> 'int' <LValueToRValue>
|   |         |   |   |     `-DeclRefExpr 0x2a7b4c31f98 <col:45> 'int' lvalue Var 0x2a7b4c40b08 'i' 'int'
|   |         |   |   `-BinaryOperator 0x2a7b4c320b0 <col:48, col:56> 'int' '+'
|   |         |   |     |-BinaryOperator 0x2a7b4c32068 <col:48, col:52> 'int' '*'
|   |         |   |     | |-IntegerLiteral 0x2a7b4c32008 <col:48> 'int' 2
|   |         |   |     | `-ImplicitCastExpr 0x2a7b4c32050 <col:52> 'int' <LValueToRValue>
|   |         |   |     |   `-DeclRefExpr 0x2a7b4c32030 <col:52> 'int' lvalue Var 0x2a7b4c40b88 'j' 'int'
|   |         |   |     `-IntegerLiteral 0x2a7b4c32088 <col:56> 'int' 1
|   |         |   `-IntegerLiteral 0x2a7b4c32108 <col:59> 'int' 0
|   |         |-ImplicitCastExpr 0x2a7b4c451b0 <line:2321:29, col:60> 'u64 *' <ArrayToPointerDecay>
|   |         | `-ArraySubscriptExpr 0x2a7b4c32380 <col:29, col:60> 'smallfelem':'u64 [4]' lvalue
|   |         |   |-ImplicitCastExpr 0x2a7b4c32368 <col:29, col:57> 'smallfelem *' <ArrayToPointerDecay>
|   |         |   | `-ArraySubscriptExpr 0x2a7b4c32320 <col:29, col:57> 'smallfelem [3]' lvalue
|   |         |   |   |-ImplicitCastExpr 0x2a7b4c32308 <col:29, col:46> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |         |   |   | `-ArraySubscriptExpr 0x2a7b4c32220 <col:29, col:46> 'smallfelem [16][3]' lvalue
|   |         |   |   |   |-ImplicitCastExpr 0x2a7b4c321f0 <col:29, col:34> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |         |   |   |   | `-MemberExpr 0x2a7b4c321a0 <col:29, col:34> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x2a7b4c276d8
|   |         |   |   |   |   `-ImplicitCastExpr 0x2a7b4c32188 <col:29> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |         |   |   |   |     `-DeclRefExpr 0x2a7b4c32168 <col:29> 'NISTP256_PRE_COMP *' lvalue Var 0x2a7b4c409d0 'pre' 'NISTP256_PRE_COMP *'
|   |         |   |   |   `-ImplicitCastExpr 0x2a7b4c32208 <col:45> 'int' <LValueToRValue>
|   |         |   |   |     `-DeclRefExpr 0x2a7b4c321d0 <col:45> 'int' lvalue Var 0x2a7b4c40b08 'i' 'int'
|   |         |   |   `-BinaryOperator 0x2a7b4c322e8 <col:48, col:56> 'int' '+'
|   |         |   |     |-BinaryOperator 0x2a7b4c322a0 <col:48, col:52> 'int' '*'
|   |         |   |     | |-IntegerLiteral 0x2a7b4c32240 <col:48> 'int' 2
|   |         |   |     | `-ImplicitCastExpr 0x2a7b4c32288 <col:52> 'int' <LValueToRValue>
|   |         |   |     |   `-DeclRefExpr 0x2a7b4c32268 <col:52> 'int' lvalue Var 0x2a7b4c40b88 'j' 'int'
|   |         |   |     `-IntegerLiteral 0x2a7b4c322c0 <col:56> 'int' 1
|   |         |   `-IntegerLiteral 0x2a7b4c32340 <col:59> 'int' 1
|   |         |-ImplicitCastExpr 0x2a7b4c451c8 <line:2322:29, col:60> 'u64 *' <ArrayToPointerDecay>
|   |         | `-ArraySubscriptExpr 0x2a7b4c325b8 <col:29, col:60> 'smallfelem':'u64 [4]' lvalue
|   |         |   |-ImplicitCastExpr 0x2a7b4c325a0 <col:29, col:57> 'smallfelem *' <ArrayToPointerDecay>
|   |         |   | `-ArraySubscriptExpr 0x2a7b4c32558 <col:29, col:57> 'smallfelem [3]' lvalue
|   |         |   |   |-ImplicitCastExpr 0x2a7b4c32540 <col:29, col:46> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |         |   |   | `-ArraySubscriptExpr 0x2a7b4c32458 <col:29, col:46> 'smallfelem [16][3]' lvalue
|   |         |   |   |   |-ImplicitCastExpr 0x2a7b4c32428 <col:29, col:34> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |         |   |   |   | `-MemberExpr 0x2a7b4c323d8 <col:29, col:34> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x2a7b4c276d8
|   |         |   |   |   |   `-ImplicitCastExpr 0x2a7b4c323c0 <col:29> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |         |   |   |   |     `-DeclRefExpr 0x2a7b4c323a0 <col:29> 'NISTP256_PRE_COMP *' lvalue Var 0x2a7b4c409d0 'pre' 'NISTP256_PRE_COMP *'
|   |         |   |   |   `-ImplicitCastExpr 0x2a7b4c32440 <col:45> 'int' <LValueToRValue>
|   |         |   |   |     `-DeclRefExpr 0x2a7b4c32408 <col:45> 'int' lvalue Var 0x2a7b4c40b08 'i' 'int'
|   |         |   |   `-BinaryOperator 0x2a7b4c32520 <col:48, col:56> 'int' '+'
|   |         |   |     |-BinaryOperator 0x2a7b4c324d8 <col:48, col:52> 'int' '*'
|   |         |   |     | |-IntegerLiteral 0x2a7b4c32478 <col:48> 'int' 2
|   |         |   |     | `-ImplicitCastExpr 0x2a7b4c324c0 <col:52> 'int' <LValueToRValue>
|   |         |   |     |   `-DeclRefExpr 0x2a7b4c324a0 <col:52> 'int' lvalue Var 0x2a7b4c40b88 'j' 'int'
|   |         |   |     `-IntegerLiteral 0x2a7b4c324f8 <col:56> 'int' 1
|   |         |   `-IntegerLiteral 0x2a7b4c32578 <col:59> 'int' 2
|   |         |-ImplicitCastExpr 0x2a7b4c451e0 <line:2323:29, col:56> 'u64 *' <ArrayToPointerDecay>
|   |         | `-ArraySubscriptExpr 0x2a7b4c327a8 <col:29, col:56> 'smallfelem':'u64 [4]' lvalue
|   |         |   |-ImplicitCastExpr 0x2a7b4c32790 <col:29, col:53> 'smallfelem *' <ArrayToPointerDecay>
|   |         |   | `-ArraySubscriptExpr 0x2a7b4c32748 <col:29, col:53> 'smallfelem [3]' lvalue
|   |         |   |   |-ImplicitCastExpr 0x2a7b4c32730 <col:29, col:46> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |         |   |   | `-ArraySubscriptExpr 0x2a7b4c32690 <col:29, col:46> 'smallfelem [16][3]' lvalue
|   |         |   |   |   |-ImplicitCastExpr 0x2a7b4c32660 <col:29, col:34> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |         |   |   |   | `-MemberExpr 0x2a7b4c32610 <col:29, col:34> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x2a7b4c276d8
|   |         |   |   |   |   `-ImplicitCastExpr 0x2a7b4c325f8 <col:29> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |         |   |   |   |     `-DeclRefExpr 0x2a7b4c325d8 <col:29> 'NISTP256_PRE_COMP *' lvalue Var 0x2a7b4c409d0 'pre' 'NISTP256_PRE_COMP *'
|   |         |   |   |   `-ImplicitCastExpr 0x2a7b4c32678 <col:45> 'int' <LValueToRValue>
|   |         |   |   |     `-DeclRefExpr 0x2a7b4c32640 <col:45> 'int' lvalue Var 0x2a7b4c40b08 'i' 'int'
|   |         |   |   `-BinaryOperator 0x2a7b4c32710 <col:48, col:52> 'int' '*'
|   |         |   |     |-IntegerLiteral 0x2a7b4c326b0 <col:48> 'int' 2
|   |         |   |     `-ImplicitCastExpr 0x2a7b4c326f8 <col:52> 'int' <LValueToRValue>
|   |         |   |       `-DeclRefExpr 0x2a7b4c326d8 <col:52> 'int' lvalue Var 0x2a7b4c40b88 'j' 'int'
|   |         |   `-IntegerLiteral 0x2a7b4c32768 <col:55> 'int' 0
|   |         |-ImplicitCastExpr 0x2a7b4c451f8 <line:2324:29, col:56> 'u64 *' <ArrayToPointerDecay>
|   |         | `-ArraySubscriptExpr 0x2a7b4c32998 <col:29, col:56> 'smallfelem':'u64 [4]' lvalue
|   |         |   |-ImplicitCastExpr 0x2a7b4c32980 <col:29, col:53> 'smallfelem *' <ArrayToPointerDecay>
|   |         |   | `-ArraySubscriptExpr 0x2a7b4c32938 <col:29, col:53> 'smallfelem [3]' lvalue
|   |         |   |   |-ImplicitCastExpr 0x2a7b4c32920 <col:29, col:46> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |         |   |   | `-ArraySubscriptExpr 0x2a7b4c32880 <col:29, col:46> 'smallfelem [16][3]' lvalue
|   |         |   |   |   |-ImplicitCastExpr 0x2a7b4c32850 <col:29, col:34> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |         |   |   |   | `-MemberExpr 0x2a7b4c32800 <col:29, col:34> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x2a7b4c276d8
|   |         |   |   |   |   `-ImplicitCastExpr 0x2a7b4c327e8 <col:29> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |         |   |   |   |     `-DeclRefExpr 0x2a7b4c327c8 <col:29> 'NISTP256_PRE_COMP *' lvalue Var 0x2a7b4c409d0 'pre' 'NISTP256_PRE_COMP *'
|   |         |   |   |   `-ImplicitCastExpr 0x2a7b4c32868 <col:45> 'int' <LValueToRValue>
|   |         |   |   |     `-DeclRefExpr 0x2a7b4c32830 <col:45> 'int' lvalue Var 0x2a7b4c40b08 'i' 'int'
|   |         |   |   `-BinaryOperator 0x2a7b4c32900 <col:48, col:52> 'int' '*'
|   |         |   |     |-IntegerLiteral 0x2a7b4c328a0 <col:48> 'int' 2
|   |         |   |     `-ImplicitCastExpr 0x2a7b4c328e8 <col:52> 'int' <LValueToRValue>
|   |         |   |       `-DeclRefExpr 0x2a7b4c328c8 <col:52> 'int' lvalue Var 0x2a7b4c40b88 'j' 'int'
|   |         |   `-IntegerLiteral 0x2a7b4c32958 <col:55> 'int' 1
|   |         |-ImplicitCastExpr 0x2a7b4c45210 <line:2325:29, col:56> 'u64 *' <ArrayToPointerDecay>
|   |         | `-ArraySubscriptExpr 0x2a7b4c32b88 <col:29, col:56> 'smallfelem':'u64 [4]' lvalue
|   |         |   |-ImplicitCastExpr 0x2a7b4c32b70 <col:29, col:53> 'smallfelem *' <ArrayToPointerDecay>
|   |         |   | `-ArraySubscriptExpr 0x2a7b4c32b28 <col:29, col:53> 'smallfelem [3]' lvalue
|   |         |   |   |-ImplicitCastExpr 0x2a7b4c32b10 <col:29, col:46> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |         |   |   | `-ArraySubscriptExpr 0x2a7b4c32a70 <col:29, col:46> 'smallfelem [16][3]' lvalue
|   |         |   |   |   |-ImplicitCastExpr 0x2a7b4c32a40 <col:29, col:34> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |         |   |   |   | `-MemberExpr 0x2a7b4c329f0 <col:29, col:34> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x2a7b4c276d8
|   |         |   |   |   |   `-ImplicitCastExpr 0x2a7b4c329d8 <col:29> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |         |   |   |   |     `-DeclRefExpr 0x2a7b4c329b8 <col:29> 'NISTP256_PRE_COMP *' lvalue Var 0x2a7b4c409d0 'pre' 'NISTP256_PRE_COMP *'
|   |         |   |   |   `-ImplicitCastExpr 0x2a7b4c32a58 <col:45> 'int' <LValueToRValue>
|   |         |   |   |     `-DeclRefExpr 0x2a7b4c32a20 <col:45> 'int' lvalue Var 0x2a7b4c40b08 'i' 'int'
|   |         |   |   `-BinaryOperator 0x2a7b4c32af0 <col:48, col:52> 'int' '*'
|   |         |   |     |-IntegerLiteral 0x2a7b4c32a90 <col:48> 'int' 2
|   |         |   |     `-ImplicitCastExpr 0x2a7b4c32ad8 <col:52> 'int' <LValueToRValue>
|   |         |   |       `-DeclRefExpr 0x2a7b4c32ab8 <col:52> 'int' lvalue Var 0x2a7b4c40b88 'j' 'int'
|   |         |   `-IntegerLiteral 0x2a7b4c32b48 <col:55> 'int' 2
|   |         |-ImplicitCastExpr 0x2a7b4c45228 <line:2326:29, col:52> 'u64 *' <ArrayToPointerDecay>
|   |         | `-ArraySubscriptExpr 0x2a7b4c32d20 <col:29, col:52> 'smallfelem':'u64 [4]' lvalue
|   |         |   |-ImplicitCastExpr 0x2a7b4c32d08 <col:29, col:49> 'smallfelem *' <ArrayToPointerDecay>
|   |         |   | `-ArraySubscriptExpr 0x2a7b4c32cc0 <col:29, col:49> 'smallfelem [3]' lvalue
|   |         |   |   |-ImplicitCastExpr 0x2a7b4c32ca8 <col:29, col:46> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |         |   |   | `-ArraySubscriptExpr 0x2a7b4c32c60 <col:29, col:46> 'smallfelem [16][3]' lvalue
|   |         |   |   |   |-ImplicitCastExpr 0x2a7b4c32c30 <col:29, col:34> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |         |   |   |   | `-MemberExpr 0x2a7b4c32be0 <col:29, col:34> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x2a7b4c276d8
|   |         |   |   |   |   `-ImplicitCastExpr 0x2a7b4c32bc8 <col:29> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |         |   |   |   |     `-DeclRefExpr 0x2a7b4c32ba8 <col:29> 'NISTP256_PRE_COMP *' lvalue Var 0x2a7b4c409d0 'pre' 'NISTP256_PRE_COMP *'
|   |         |   |   |   `-ImplicitCastExpr 0x2a7b4c32c48 <col:45> 'int' <LValueToRValue>
|   |         |   |   |     `-DeclRefExpr 0x2a7b4c32c10 <col:45> 'int' lvalue Var 0x2a7b4c40b08 'i' 'int'
|   |         |   |   `-IntegerLiteral 0x2a7b4c32c80 <col:48> 'int' 1
|   |         |   `-IntegerLiteral 0x2a7b4c32ce0 <col:51> 'int' 0
|   |         |-ImplicitCastExpr 0x2a7b4c45240 <line:2327:29, col:52> 'u64 *' <ArrayToPointerDecay>
|   |         | `-ArraySubscriptExpr 0x2a7b4c32eb8 <col:29, col:52> 'smallfelem':'u64 [4]' lvalue
|   |         |   |-ImplicitCastExpr 0x2a7b4c32ea0 <col:29, col:49> 'smallfelem *' <ArrayToPointerDecay>
|   |         |   | `-ArraySubscriptExpr 0x2a7b4c32e58 <col:29, col:49> 'smallfelem [3]' lvalue
|   |         |   |   |-ImplicitCastExpr 0x2a7b4c32e40 <col:29, col:46> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |         |   |   | `-ArraySubscriptExpr 0x2a7b4c32df8 <col:29, col:46> 'smallfelem [16][3]' lvalue
|   |         |   |   |   |-ImplicitCastExpr 0x2a7b4c32dc8 <col:29, col:34> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |         |   |   |   | `-MemberExpr 0x2a7b4c32d78 <col:29, col:34> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x2a7b4c276d8
|   |         |   |   |   |   `-ImplicitCastExpr 0x2a7b4c32d60 <col:29> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |         |   |   |   |     `-DeclRefExpr 0x2a7b4c32d40 <col:29> 'NISTP256_PRE_COMP *' lvalue Var 0x2a7b4c409d0 'pre' 'NISTP256_PRE_COMP *'
|   |         |   |   |   `-ImplicitCastExpr 0x2a7b4c32de0 <col:45> 'int' <LValueToRValue>
|   |         |   |   |     `-DeclRefExpr 0x2a7b4c32da8 <col:45> 'int' lvalue Var 0x2a7b4c40b08 'i' 'int'
|   |         |   |   `-IntegerLiteral 0x2a7b4c32e18 <col:48> 'int' 1
|   |         |   `-IntegerLiteral 0x2a7b4c32e78 <col:51> 'int' 1
|   |         `-ImplicitCastExpr 0x2a7b4c45258 <line:2328:29, col:52> 'u64 *' <ArrayToPointerDecay>
|   |           `-ArraySubscriptExpr 0x2a7b4c450f8 <col:29, col:52> 'smallfelem':'u64 [4]' lvalue
|   |             |-ImplicitCastExpr 0x2a7b4c450e0 <col:29, col:49> 'smallfelem *' <ArrayToPointerDecay>
|   |             | `-ArraySubscriptExpr 0x2a7b4c32ff0 <col:29, col:49> 'smallfelem [3]' lvalue
|   |             |   |-ImplicitCastExpr 0x2a7b4c32fd8 <col:29, col:46> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |             |   | `-ArraySubscriptExpr 0x2a7b4c32f90 <col:29, col:46> 'smallfelem [16][3]' lvalue
|   |             |   |   |-ImplicitCastExpr 0x2a7b4c32f60 <col:29, col:34> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |             |   |   | `-MemberExpr 0x2a7b4c32f10 <col:29, col:34> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x2a7b4c276d8
|   |             |   |   |   `-ImplicitCastExpr 0x2a7b4c32ef8 <col:29> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |             |   |   |     `-DeclRefExpr 0x2a7b4c32ed8 <col:29> 'NISTP256_PRE_COMP *' lvalue Var 0x2a7b4c409d0 'pre' 'NISTP256_PRE_COMP *'
|   |             |   |   `-ImplicitCastExpr 0x2a7b4c32f78 <col:45> 'int' <LValueToRValue>
|   |             |   |     `-DeclRefExpr 0x2a7b4c32f40 <col:45> 'int' lvalue Var 0x2a7b4c40b08 'i' 'int'
|   |             |   `-IntegerLiteral 0x2a7b4c32fb0 <col:48> 'int' 1
|   |             `-IntegerLiteral 0x2a7b4c33010 <col:51> 'int' 2
|   |-CallExpr 0x2a7b4c45530 <line:2331:5, col:69> 'void'
|   | |-ImplicitCastExpr 0x2a7b4c45518 <col:5> 'void (*)(size_t, smallfelem (*)[3], smallfelem *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4c45338 <col:5> 'void (size_t, smallfelem (*)[3], smallfelem *)' Function 0x2a7b4c30d78 'make_points_affine' 'void (size_t, smallfelem (*)[3], smallfelem *)'
|   | |-ImplicitCastExpr 0x2a7b4c45568 <col:24> 'size_t':'unsigned long long' <IntegralCast>
|   | | `-IntegerLiteral 0x2a7b4c45358 <col:24> 'int' 31
|   | |-UnaryOperator 0x2a7b4c454c8 <col:28, col:51> 'smallfelem (*)[3]' prefix '&' cannot overflow
|   | | `-ParenExpr 0x2a7b4c454a8 <col:29, col:51> 'smallfelem [3]' lvalue
|   | |   `-ArraySubscriptExpr 0x2a7b4c45488 <col:30, col:50> 'smallfelem [3]' lvalue
|   | |     |-ImplicitCastExpr 0x2a7b4c45470 <col:30, col:47> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   | |     | `-ArraySubscriptExpr 0x2a7b4c45428 <col:30, col:47> 'smallfelem [16][3]' lvalue
|   | |     |   |-ImplicitCastExpr 0x2a7b4c45410 <col:30, col:35> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   | |     |   | `-MemberExpr 0x2a7b4c453b8 <col:30, col:35> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x2a7b4c276d8
|   | |     |   |   `-ImplicitCastExpr 0x2a7b4c453a0 <col:30> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   | |     |   |     `-DeclRefExpr 0x2a7b4c45380 <col:30> 'NISTP256_PRE_COMP *' lvalue Var 0x2a7b4c409d0 'pre' 'NISTP256_PRE_COMP *'
|   | |     |   `-IntegerLiteral 0x2a7b4c453e8 <col:46> 'int' 0
|   | |     `-IntegerLiteral 0x2a7b4c45448 <col:49> 'int' 1
|   | `-ImplicitCastExpr 0x2a7b4c45580 <col:54> 'smallfelem *' <ArrayToPointerDecay>
|   |   `-DeclRefExpr 0x2a7b4c454e0 <col:54> 'smallfelem [32]' lvalue Var 0x2a7b4c40e08 'tmp_smallfelems' 'smallfelem [32]'
|   |-LabelStmt 0x2a7b4c455e0 <line:2333:2, col:6> 'done'
|   | `-NullStmt 0x2a7b4c455d8 <col:6>
|   |-BinaryOperator 0x2a7b4c456b8 <line:2335:5, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27> 'NISTP256_PRE_COMP *' '='
|   | |-DeclRefExpr 0x2a7b4c455f8 <.//openssl//file_jk/before\crypto\ec\ecp_nistp256.c:2335:5> 'NISTP256_PRE_COMP *' lvalue Var 0x2a7b4c409d0 'pre' 'NISTP256_PRE_COMP *'
|   | `-ImplicitCastExpr 0x2a7b4c456a0 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'NISTP256_PRE_COMP *' <NullToPointer>
|   |   `-ParenExpr 0x2a7b4c45680 <col:17, col:27> 'void *'
|   |     `-CStyleCastExpr 0x2a7b4c45658 <col:18, col:26> 'void *' <NullToPointer>
|   |       `-IntegerLiteral 0x2a7b4c45618 <col:26> 'int' 0
|   |-BinaryOperator 0x2a7b4c45738 <.//openssl//file_jk/before\crypto\ec\ecp_nistp256.c:2336:5, col:11> 'int' '='
|   | |-DeclRefExpr 0x2a7b4c456d8 <col:5> 'int' lvalue Var 0x2a7b4c40918 'ret' 'int'
|   | `-IntegerLiteral 0x2a7b4c45710 <col:11> 'int' 1
|   |-LabelStmt 0x2a7b4c45780 <line:2338:2, col:5> 'err'
|   | `-NullStmt 0x2a7b4c45778 <col:5>
|   |-CallExpr 0x2a7b4c45890 <line:2342:5, col:34> 'void'
|   | |-ImplicitCastExpr 0x2a7b4c45878 <col:5> 'void (*)(NISTP256_PRE_COMP *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2a7b4c457d8 <col:5> 'void (NISTP256_PRE_COMP *)' Function 0x2a7b4c28e28 'EC_nistp256_pre_comp_free' 'void (NISTP256_PRE_COMP *)'
|   | `-ImplicitCastExpr 0x2a7b4c458b8 <col:31> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   `-DeclRefExpr 0x2a7b4c457f8 <col:31> 'NISTP256_PRE_COMP *' lvalue Var 0x2a7b4c409d0 'pre' 'NISTP256_PRE_COMP *'
|   `-ReturnStmt 0x2a7b4c45908 <line:2343:5, col:12>
|     `-ImplicitCastExpr 0x2a7b4c458f0 <col:12> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x2a7b4c458d0 <col:12> 'int' lvalue Var 0x2a7b4c40918 'ret' 'int'
`-FunctionDecl 0x2a7b4c45aa0 <line:2346:1, line:2349:1> line:2346:5 invalid ec_GFp_nistp256_have_precompute_mult 'int (const int *)'
  |-ParmVarDecl 0x2a7b4c45a08 <col:42, col:58> col:58 invalid group 'const int *'
  `-CompoundStmt 0x2a7b4c45c08 <line:2347:1, line:2349:1>
