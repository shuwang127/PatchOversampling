TranslationUnitDecl 0x28b88b728f8 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x28b88b73190 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x28b88b72e90 '__int128'
|-TypedefDecl 0x28b88b73200 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x28b88b72eb0 'unsigned __int128'
|-TypedefDecl 0x28b88b73538 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x28b88b732f0 'struct __NSConstantString_tag'
|   `-Record 0x28b88b73258 '__NSConstantString_tag'
|-TypedefDecl 0x28b88b735a8 <<invalid sloc>> <invalid sloc> implicit size_t 'unsigned long long'
| `-BuiltinType 0x28b88b72ad0 'unsigned long long'
|-TypedefDecl 0x28b88b73640 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x28b88b73600 'char *'
|   `-BuiltinType 0x28b88b72990 'char'
|-TypedefDecl 0x28b88b736b0 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x28b88b73600 'char *'
|   `-BuiltinType 0x28b88b72990 'char'
|-TypedefDecl 0x28b88b73770 <D:\Microsoft Visual Studio 12.0\VC\include\vadefs.h:48:1, col:29> col:29 referenced uintptr_t 'unsigned long long'
| `-BuiltinType 0x28b88b72ad0 'unsigned long long'
|-TypedefDecl 0x28b88b737e0 <line:59:1, col:17> col:17 referenced va_list 'char *'
| `-PointerType 0x28b88b73600 'char *'
|   `-BuiltinType 0x28b88b72990 'char'
|-FunctionDecl 0x28b8a586480 <line:119:21> col:21 implicit __va_start 'void (char **, ...)' extern
| |-ParmVarDecl 0x28b8a586520 <<invalid sloc>> <invalid sloc> 'char **'
| `-NoThrowAttr 0x28b8a586590 <col:21> Implicit
|-FunctionDecl 0x28b8a5865e8 prev 0x28b8a586480 <col:1, col:46> col:21 __va_start 'void (char **, ...)' extern
| |-ParmVarDecl 0x28b8a586310 <col:32, col:40> col:41 'va_list *'
| `-NoThrowAttr 0x28b8a5866d8 <col:21> Inherited Implicit
|-TypedefDecl 0x28b8a586718 prev 0x28b88b735a8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:494:1, col:29> col:29 referenced size_t 'unsigned long long'
| `-BuiltinType 0x28b88b72ad0 'unsigned long long'
|-TypedefDecl 0x28b8a5867c0 <line:503:1, col:16> col:16 referenced rsize_t 'size_t':'unsigned long long'
| `-TypedefType 0x28b8a586790 'size_t' sugar
|   |-Typedef 0x28b8a586718 'size_t'
|   `-BuiltinType 0x28b88b72ad0 'unsigned long long'
|-TypedefDecl 0x28b8a586830 <line:510:1, col:29> col:29 intptr_t 'long long'
| `-BuiltinType 0x28b88b72a30 'long long'
|-TypedefDecl 0x28b8a5868a0 <line:528:1, col:29> col:29 ptrdiff_t 'long long'
| `-BuiltinType 0x28b88b72a30 'long long'
|-TypedefDecl 0x28b8a586910 <line:536:1, col:24> col:24 referenced wchar_t 'unsigned short'
| `-BuiltinType 0x28b88b72a70 'unsigned short'
|-TypedefDecl 0x28b8a586980 <line:541:1, col:24> col:24 wint_t 'unsigned short'
| `-BuiltinType 0x28b88b72a70 'unsigned short'
|-TypedefDecl 0x28b8a5869f0 <line:542:1, col:24> col:24 wctype_t 'unsigned short'
| `-BuiltinType 0x28b88b72a70 'unsigned short'
|-TypedefDecl 0x28b8a586a60 <line:563:1, col:13> col:13 referenced errno_t 'int'
| `-BuiltinType 0x28b88b729f0 'int'
|-TypedefDecl 0x28b8a586ad0 <line:567:1, col:19> col:19 __time32_t 'long'
| `-BuiltinType 0x28b88b72a10 'long'
|-TypedefDecl 0x28b8a586b40 <line:572:1, col:17> col:17 referenced __time64_t 'long long'
| `-BuiltinType 0x28b88b72a30 'long long'
|-TypedefDecl 0x28b8a586bd0 <line:580:1, col:20> col:20 time_t '__time64_t':'long long'
| `-TypedefType 0x28b8a586ba0 '__time64_t' sugar
|   |-Typedef 0x28b8a586b40 '__time64_t'
|   `-BuiltinType 0x28b88b72a30 'long long'
|-FunctionDecl 0x28b8a586d48 <line:637:10, col:53> col:23 _invalid_parameter_noinfo 'void (void) __attribute__((cdecl))':'void (void)'
|-FunctionDecl 0x28b8a586f68 <line:638:10, col:83> col:44 _invalid_parameter_noinfo_noreturn 'void (void) __attribute__((noreturn)) __attribute__((cdecl))':'void (void) __attribute__((noreturn))'
|-FunctionDecl 0x28b8a5ae3c0 <line:641:9, line:642:136> col:14 _invoke_watson 'void (const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t) __attribute__((noreturn)) __attribute__((cdecl))':'void (const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t) __attribute__((noreturn))'
| |-ParmVarDecl 0x28b8a5870a8 <col:40, col:54> col:55 'const wchar_t *'
| |-ParmVarDecl 0x28b8a587120 <col:68, col:82> col:83 'const wchar_t *'
| |-ParmVarDecl 0x28b8a587198 <col:96, col:110> col:111 'const wchar_t *'
| |-ParmVarDecl 0x28b8a587218 <col:113, col:122> col:125 'unsigned int'
| `-ParmVarDecl 0x28b8a5ae160 <col:127> col:136 'uintptr_t':'unsigned long long'
|-RecordDecl 0x28b8a5ae4a0 <line:2072:1, col:8> col:8 struct threadlocaleinfostruct
|-RecordDecl 0x28b8a5ae560 <line:2073:1, col:8> col:8 struct threadmbcinfostruct
|-TypedefDecl 0x28b8a5ae6d0 <line:2074:1, col:41> col:41 referenced pthreadlocinfo 'struct threadlocaleinfostruct *'
| `-PointerType 0x28b8a5ae680 'struct threadlocaleinfostruct *'
|   `-ElaboratedType 0x28b8a5ae620 'struct threadlocaleinfostruct' sugar
|     `-RecordType 0x28b8a5ae540 'struct threadlocaleinfostruct'
|       `-Record 0x28b8a5b21a0 'threadlocaleinfostruct'
|-TypedefDecl 0x28b8a5ae7e0 <line:2075:1, col:38> col:38 referenced pthreadmbcinfo 'struct threadmbcinfostruct *'
| `-PointerType 0x28b8a5ae790 'struct threadmbcinfostruct *'
|   `-ElaboratedType 0x28b8a5ae730 'struct threadmbcinfostruct' sugar
|     `-RecordType 0x28b8a5ae600 'struct threadmbcinfostruct'
|       `-Record 0x28b8a5ae560 'threadmbcinfostruct'
|-RecordDecl 0x28b8a5ae838 <line:2076:1, col:8> col:8 struct __lc_time_data
|-RecordDecl 0x28b8a5ae8f0 <line:2078:9, line:2082:1> line:2078:16 struct localeinfo_struct definition
| |-MaxFieldAlignmentAttr 0x28b8a5ae9b0 <<invalid sloc>> Implicit 64
| |-FieldDecl 0x28b8a5aea40 <line:2080:5, col:20> col:20 locinfo 'pthreadlocinfo':'struct threadlocaleinfostruct *'
| `-FieldDecl 0x28b8a5aead0 <line:2081:5, col:20> col:20 mbcinfo 'pthreadmbcinfo':'struct threadmbcinfostruct *'
|-TypedefDecl 0x28b8a5aeb88 <line:2078:1, line:2082:3> col:3 _locale_tstruct 'struct localeinfo_struct':'struct localeinfo_struct'
| `-ElaboratedType 0x28b8a5aeb30 'struct localeinfo_struct' sugar
|   `-RecordType 0x28b8a5ae990 'struct localeinfo_struct'
|     `-Record 0x28b8a5ae8f0 'localeinfo_struct'
|-TypedefDecl 0x28b8a5aec60 <line:2078:1, line:2082:21> col:21 referenced _locale_t 'struct localeinfo_struct *'
| `-PointerType 0x28b8a5aec10 'struct localeinfo_struct *'
|   `-ElaboratedType 0x28b8a5aeb30 'struct localeinfo_struct' sugar
|     `-RecordType 0x28b8a5ae990 'struct localeinfo_struct'
|       `-Record 0x28b8a5ae8f0 'localeinfo_struct'
|-RecordDecl 0x28b8a5aecd8 <line:2085:9, line:2090:1> line:2085:16 struct localerefcount definition
| |-MaxFieldAlignmentAttr 0x28b8a5aed90 <<invalid sloc>> Implicit 64
| |-FieldDecl 0x28b8a5aee08 <line:2086:9, col:15> col:15 locale 'char *'
| |-FieldDecl 0x28b8a5aeec8 <line:2087:9, col:18> col:18 wlocale 'wchar_t *'
| |-FieldDecl 0x28b8a5aef60 <line:2088:9, col:14> col:14 refcount 'int *'
| `-FieldDecl 0x28b8a5aefd0 <line:2089:9, col:14> col:14 wrefcount 'int *'
|-TypedefDecl 0x28b8a5af088 <line:2085:1, line:2090:3> col:3 referenced locrefcount 'struct localerefcount':'struct localerefcount'
| `-ElaboratedType 0x28b8a5af030 'struct localerefcount' sugar
|   `-RecordType 0x28b8a5aed70 'struct localerefcount'
|     `-Record 0x28b8a5aecd8 'localerefcount'
|-RecordDecl 0x28b8a5b21a0 prev 0x28b8a5ae4a0 <line:2092:9, line:2111:1> line:2092:16 struct threadlocaleinfostruct definition
| |-MaxFieldAlignmentAttr 0x28b8a5b2220 <<invalid sloc>> Implicit 64
| |-FieldDecl 0x28b8a5b2298 <line:2093:9, col:13> col:13 refcount 'int'
| |-FieldDecl 0x28b8a5b2308 <line:2094:9, col:22> col:22 lc_codepage 'unsigned int'
| |-FieldDecl 0x28b8a5b2378 <line:2095:9, col:22> col:22 lc_collate_cp 'unsigned int'
| |-FieldDecl 0x28b8a5b23e8 <line:2096:9, col:22> col:22 lc_time_cp 'unsigned int'
| |-FieldDecl 0x28b8a5b25a8 <line:2097:9, col:34> col:21 lc_category 'locrefcount [6]'
| |-FieldDecl 0x28b8a5b2618 <line:2098:9, col:13> col:13 lc_clike 'int'
| |-FieldDecl 0x28b8a5b2688 <line:2099:9, col:13> col:13 mb_cur_max 'int'
| |-FieldDecl 0x28b8a5b26f8 <line:2100:9, col:15> col:15 lconv_intl_refcount 'int *'
| |-FieldDecl 0x28b8a5b2768 <line:2101:9, col:15> col:15 lconv_num_refcount 'int *'
| |-FieldDecl 0x28b8a5b27d8 <line:2102:9, col:15> col:15 lconv_mon_refcount 'int *'
| |-RecordDecl 0x28b8a5b2830 parent 0x28b88b728f8 <line:2103:9, col:16> col:16 struct lconv
| |-FieldDecl 0x28b8a5b29c0 <col:9, col:24> col:24 lconv 'struct lconv *'
| |-FieldDecl 0x28b8a5b2a30 <line:2104:9, col:15> col:15 ctype1_refcount 'int *'
| |-FieldDecl 0x28b8a5b2aa0 <line:2105:9, col:26> col:26 ctype1 'unsigned short *'
| |-FieldDecl 0x28b8a5b2b10 <line:2106:9, col:32> col:32 pctype 'const unsigned short *'
| |-FieldDecl 0x28b8a5b2bb0 <line:2107:9, col:31> col:31 pclmap 'const unsigned char *'
| |-FieldDecl 0x28b8a5b2c20 <line:2108:9, col:31> col:31 pcumap 'const unsigned char *'
| |-FieldDecl 0x28b8a5b2d30 <line:2109:9, col:33> col:33 lc_time_curr 'struct __lc_time_data *'
| `-FieldDecl 0x28b8a5b2e68 <line:2110:9, col:32> col:19 locale_name 'wchar_t *[6]'
|-TypedefDecl 0x28b8a5b2f18 <line:2092:1, line:2111:3> col:3 threadlocinfo 'struct threadlocaleinfostruct':'struct threadlocaleinfostruct'
| `-ElaboratedType 0x28b8a5b2ec0 'struct threadlocaleinfostruct' sugar
|   `-RecordType 0x28b8a5ae540 'struct threadlocaleinfostruct'
|     `-Record 0x28b8a5b21a0 'threadlocaleinfostruct'
|-TypedefDecl 0x28b8a5b2fa0 <D:\Microsoft Visual Studio 12.0\VC\include\stdint.h:8:1, col:28> col:28 int8_t 'signed char'
| `-BuiltinType 0x28b88b729b0 'signed char'
|-TypedefDecl 0x28b8a5b3010 <line:9:1, col:28> col:28 int16_t 'short'
| `-BuiltinType 0x28b88b729d0 'short'
|-TypedefDecl 0x28b8a5b3080 <line:10:1, col:28> col:28 referenced int32_t 'int'
| `-BuiltinType 0x28b88b729f0 'int'
|-TypedefDecl 0x28b8a5b30f0 <line:11:1, col:28> col:28 int64_t 'long long'
| `-BuiltinType 0x28b88b72a30 'long long'
|-TypedefDecl 0x28b8a5b71f0 <line:12:1, col:28> col:28 referenced uint8_t 'unsigned char'
| `-BuiltinType 0x28b88b72a50 'unsigned char'
|-TypedefDecl 0x28b8a5b7260 <line:13:1, col:28> col:28 uint16_t 'unsigned short'
| `-BuiltinType 0x28b88b72a70 'unsigned short'
|-TypedefDecl 0x28b8a5b72d0 <line:14:1, col:28> col:28 referenced uint32_t 'unsigned int'
| `-BuiltinType 0x28b88b72a90 'unsigned int'
|-TypedefDecl 0x28b8a5b7340 <line:15:1, col:28> col:28 referenced uint64_t 'unsigned long long'
| `-BuiltinType 0x28b88b72ad0 'unsigned long long'
|-TypedefDecl 0x28b8a5b73b0 <line:17:1, col:28> col:28 int_least8_t 'signed char'
| `-BuiltinType 0x28b88b729b0 'signed char'
|-TypedefDecl 0x28b8a5b7420 <line:18:1, col:28> col:28 int_least16_t 'short'
| `-BuiltinType 0x28b88b729d0 'short'
|-TypedefDecl 0x28b8a5b7490 <line:19:1, col:28> col:28 int_least32_t 'int'
| `-BuiltinType 0x28b88b729f0 'int'
|-TypedefDecl 0x28b8a5b7500 <line:20:1, col:28> col:28 int_least64_t 'long long'
| `-BuiltinType 0x28b88b72a30 'long long'
|-TypedefDecl 0x28b8a5b7570 <line:21:1, col:28> col:28 uint_least8_t 'unsigned char'
| `-BuiltinType 0x28b88b72a50 'unsigned char'
|-TypedefDecl 0x28b8a5b75e0 <line:22:1, col:28> col:28 uint_least16_t 'unsigned short'
| `-BuiltinType 0x28b88b72a70 'unsigned short'
|-TypedefDecl 0x28b8a5b7650 <line:23:1, col:28> col:28 uint_least32_t 'unsigned int'
| `-BuiltinType 0x28b88b72a90 'unsigned int'
|-TypedefDecl 0x28b8a5b76c0 <line:24:1, col:28> col:28 uint_least64_t 'unsigned long long'
| `-BuiltinType 0x28b88b72ad0 'unsigned long long'
|-TypedefDecl 0x28b8a5b7730 <line:26:1, col:28> col:28 int_fast8_t 'signed char'
| `-BuiltinType 0x28b88b729b0 'signed char'
|-TypedefDecl 0x28b8a5b77a0 <line:27:1, col:28> col:28 int_fast16_t 'int'
| `-BuiltinType 0x28b88b729f0 'int'
|-TypedefDecl 0x28b8a5b7810 <line:28:1, col:28> col:28 int_fast32_t 'int'
| `-BuiltinType 0x28b88b729f0 'int'
|-TypedefDecl 0x28b8a5b7880 <line:29:1, col:28> col:28 int_fast64_t 'long long'
| `-BuiltinType 0x28b88b72a30 'long long'
|-TypedefDecl 0x28b8a5b78f0 <line:30:1, col:28> col:28 uint_fast8_t 'unsigned char'
| `-BuiltinType 0x28b88b72a50 'unsigned char'
|-TypedefDecl 0x28b8a5b7960 <line:31:1, col:28> col:28 uint_fast16_t 'unsigned int'
| `-BuiltinType 0x28b88b72a90 'unsigned int'
|-TypedefDecl 0x28b8a5b79d0 <line:32:1, col:28> col:28 uint_fast32_t 'unsigned int'
| `-BuiltinType 0x28b88b72a90 'unsigned int'
|-TypedefDecl 0x28b8a5b7a40 <line:33:1, col:28> col:28 uint_fast64_t 'unsigned long long'
| `-BuiltinType 0x28b88b72ad0 'unsigned long long'
|-TypedefDecl 0x28b8a5b7ab0 <line:53:1, col:28> col:28 intmax_t 'long long'
| `-BuiltinType 0x28b88b72a30 'long long'
|-TypedefDecl 0x28b8a5b7b20 <line:54:1, col:28> col:28 uintmax_t 'unsigned long long'
| `-BuiltinType 0x28b88b72ad0 'unsigned long long'
|-FunctionDecl 0x28b8a5b7f40 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:47:9, col:142> col:25 _memccpy 'void *(void *, const void *, int, size_t) __attribute__((cdecl))':'void *(void *, const void *, int, size_t)'
| |-ParmVarDecl 0x28b8a5b7b90 <col:69, col:76> col:76 _Dst 'void *'
| |-ParmVarDecl 0x28b8a5b7c40 <col:87, col:100> col:100 _Src 'const void *'
| |-ParmVarDecl 0x28b8a5b7cc0 <col:111, col:115> col:115 _Val 'int'
| `-ParmVarDecl 0x28b8a5b7d38 <col:126, col:133> col:133 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x28b8a5c03a8 <line:48:54> col:54 implicit memchr 'void *(const void *, int, unsigned long long)' extern
| |-ParmVarDecl 0x28b8a5c0448 <<invalid sloc>> <invalid sloc> 'const void *'
| |-ParmVarDecl 0x28b8a5c04b0 <<invalid sloc>> <invalid sloc> 'int'
| `-ParmVarDecl 0x28b8a5c0518 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x28b8a5c0598 prev 0x28b8a5c03a8 <col:38, col:150> col:54 memchr 'void *(const void *, int, unsigned long long)'
| |-ParmVarDecl 0x28b8a5b8030 <col:94, col:107> col:107 _Buf 'const void *'
| |-ParmVarDecl 0x28b8a5b80b0 <col:119, col:123> col:123 _Val 'int'
| `-ParmVarDecl 0x28b8a5b8128 <col:134, col:141> col:141 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x28b8a5c0958 <line:49:24, col:162> col:40 _memicmp 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
| |-ParmVarDecl 0x28b8a5c0680 <col:77, col:90> col:90 _Buf1 'const void *'
| |-ParmVarDecl 0x28b8a5c0700 <col:125, col:138> col:138 _Buf2 'const void *'
| `-ParmVarDecl 0x28b8a5c0778 <col:150, col:157> col:157 _Size 'size_t':'unsigned long long'
|-FunctionDecl 0x28b8a5c0de0 <line:50:24, col:192> col:40 _memicmp_l 'int (const void *, const void *, size_t, _locale_t) __attribute__((cdecl))':'int (const void *, const void *, size_t, _locale_t)'
| |-ParmVarDecl 0x28b8a5c0a40 <col:79, col:92> col:92 _Buf1 'const void *'
| |-ParmVarDecl 0x28b8a5c0ac0 <col:127, col:140> col:140 _Buf2 'const void *'
| |-ParmVarDecl 0x28b8a5c0b38 <col:152, col:159> col:159 _Size 'size_t':'unsigned long long'
| `-ParmVarDecl 0x28b8a5c0bd0 <col:175, col:185> col:185 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x28b8a5c10e8 <line:51:32> col:32 implicit memcmp 'int (const void *, const void *, unsigned long long)' extern
| |-ParmVarDecl 0x28b8a5c1188 <<invalid sloc>> <invalid sloc> 'const void *'
| |-ParmVarDecl 0x28b8a5c11f0 <<invalid sloc>> <invalid sloc> 'const void *'
| `-ParmVarDecl 0x28b8a5bf270 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x28b8a5bf2f0 prev 0x28b8a5c10e8 <col:16, col:144> col:32 memcmp 'int (const void *, const void *, unsigned long long)'
| |-ParmVarDecl 0x28b8a5c0ed0 <col:63, col:76> col:76 _Buf1 'const void *'
| |-ParmVarDecl 0x28b8a5c0f50 <col:107, col:120> col:120 _Buf2 'const void *'
| `-ParmVarDecl 0x28b8a5c0fc8 <col:132, col:139> col:139 _Size 'size_t':'unsigned long long'
|-FunctionDecl 0x28b8a5bf6a8 <line:55:17> col:17 implicit used memcpy 'void *(void *, const void *, unsigned long long)' extern
| |-ParmVarDecl 0x28b8a5bf748 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x28b8a5bf7b0 <<invalid sloc>> <invalid sloc> 'const void *'
| `-ParmVarDecl 0x28b8a5bf818 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x28b8a5bf898 prev 0x28b8a5bf6a8 <col:1, col:127> col:17 used memcpy 'void *(void *, const void *, unsigned long long)'
| |-ParmVarDecl 0x28b8a5bf3d8 <col:54, col:61> col:61 _Dst 'void *'
| |-ParmVarDecl 0x28b8a5bf458 <col:91, col:104> col:104 _Src 'const void *'
| `-ParmVarDecl 0x28b8a5bf4d0 <col:115, col:122> col:122 _Size 'size_t':'unsigned long long'
|-FunctionDecl 0x28b8a5bfd38 <line:57:9, col:191> col:26 memcpy_s 'errno_t (void *, rsize_t, const void *, rsize_t) __attribute__((cdecl))':'errno_t (void *, rsize_t, const void *, rsize_t)'
| |-ParmVarDecl 0x28b8a5bf9a8 <col:82, col:89> col:89 _Dst 'void *'
| |-ParmVarDecl 0x28b8a5bfa40 <col:100, col:108> col:108 _DstSize 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x28b8a5bfac0 <col:150, col:163> col:163 _Src 'const void *'
| `-ParmVarDecl 0x28b8a5bfb38 <col:174, col:182> col:182 _MaxCount 'rsize_t':'unsigned long long'
|-FunctionDecl 0x28b8a5c00f8 <line:94:25> col:25 implicit used memset 'void *(void *, int, unsigned long long)' extern
| |-ParmVarDecl 0x28b8a5c0198 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x28b8a5c0200 <<invalid sloc>> <invalid sloc> 'int'
| `-ParmVarDecl 0x28b8a5c22a0 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x28b8a5c2320 prev 0x28b8a5c00f8 <col:9, col:107> col:25 used memset 'void *(void *, int, unsigned long long)'
| |-ParmVarDecl 0x28b8a5bfe28 <col:62, col:69> col:69 _Dst 'void *'
| |-ParmVarDecl 0x28b8a5bfea8 <col:80, col:84> col:84 _Val 'int'
| `-ParmVarDecl 0x28b8a5bff20 <col:95, col:102> col:102 _Size 'size_t':'unsigned long long'
|-FunctionDecl 0x28b8a5c2798 <line:98:57> col:57 implicit memccpy 'void *(void *, const void *, int, unsigned long long)' extern
| |-ParmVarDecl 0x28b8a5c2838 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x28b8a5c28a0 <<invalid sloc>> <invalid sloc> 'const void *'
| |-ParmVarDecl 0x28b8a5c2908 <<invalid sloc>> <invalid sloc> 'int'
| `-ParmVarDecl 0x28b8a5c2970 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x28b8a5c29f8 prev 0x28b8a5c2798 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:98:187> col:57 memccpy 'void *(void *, const void *, int, unsigned long long)'
| |-ParmVarDecl 0x28b8a5c24e0 <col:95, col:102> col:102 _Dst 'void *'
| |-ParmVarDecl 0x28b8a5c2560 <col:136, col:149> col:149 _Src 'const void *'
| |-ParmVarDecl 0x28b8a5c25e0 <col:160, col:164> col:164 _Val 'int'
| |-ParmVarDecl 0x28b8a5c2658 <col:175, col:182> col:182 _Size 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x28b8a5c2ab8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _memccpy. See online help for details." ""
|-FunctionDecl 0x28b8a5c2e98 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:99:190> col:69 memicmp 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
| |-ParmVarDecl 0x28b8a5c2c80 <col:105, col:118> col:118 _Buf1 'const void *'
| |-ParmVarDecl 0x28b8a5c2d00 <col:153, col:166> col:166 _Buf2 'const void *'
| |-ParmVarDecl 0x28b8a5c2d78 <col:178, col:185> col:185 _Size 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x28b8a5c2f50 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _memicmp. See online help for details." ""
|-FunctionDecl 0x28b8a5c1330 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:105:40, col:144> col:56 _strset_s 'errno_t (char *, size_t, int) __attribute__((cdecl))':'errno_t (char *, size_t, int)'
| |-ParmVarDecl 0x28b8a5c3078 <col:94, col:101> col:101 _Dst 'char *'
| |-ParmVarDecl 0x28b8a5c30f0 <col:112, col:119> col:119 _DstSize 'size_t':'unsigned long long'
| `-ParmVarDecl 0x28b8a5c3170 <col:134, col:138> col:138 _Value 'int'
|-FunctionDecl 0x28b8a5c1700 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:107:88 _strset 'char *(char *, int) __attribute__((cdecl))':'char *(char *, int)'
| |-ParmVarDecl 0x28b8a5c1510 <col:108, col:114> col:114 _Dest 'char *'
| |-ParmVarDecl 0x28b8a5c1590 <col:126, col:131> col:131 _Value 'int'
| `-DeprecatedAttr 0x28b8a5c17b0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _strset_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x28b8a5c1bc0 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:109:40, col:158> col:56 strcpy_s 'errno_t (char *, rsize_t, const char *) __attribute__((cdecl))':'errno_t (char *, rsize_t, const char *)'
| |-ParmVarDecl 0x28b8a5c18f8 <col:94, col:101> col:101 _Dst 'char *'
| |-ParmVarDecl 0x28b8a5c1970 <col:112, col:120> col:120 _SizeInBytes 'rsize_t':'unsigned long long'
| `-ParmVarDecl 0x28b8a5c19f0 <col:141, col:154> col:154 _Src 'const char *'
|-FunctionDecl 0x28b8a5c1f90 <line:112:88> col:88 implicit strcpy 'char *(char *, const char *)' extern
| |-ParmVarDecl 0x28b8a5c2030 <<invalid sloc>> <invalid sloc> 'char *'
| `-ParmVarDecl 0x28b8a5c2098 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x28b8a5c2110 prev 0x28b8a5c1f90 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:112:88 strcpy 'char *(char *, const char *)'
| |-ParmVarDecl 0x28b8a5c1da0 <col:142, col:148> col:148 _Dest 'char *'
| |-ParmVarDecl 0x28b8a5c1e20 <col:162, col:176> col:176 _Source 'const char *'
| `-DeprecatedAttr 0x28b8a5c21c0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using strcpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x28b8a5c35c0 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:114:40, col:161> col:56 strcat_s 'errno_t (char *, rsize_t, const char *) __attribute__((cdecl))':'errno_t (char *, rsize_t, const char *)'
| |-ParmVarDecl 0x28b8a5c33b0 <col:97, col:104> col:104 _Dst 'char *'
| |-ParmVarDecl 0x28b8a5c3428 <col:115, col:123> col:123 _SizeInBytes 'rsize_t':'unsigned long long'
| `-ParmVarDecl 0x28b8a5c34a8 <col:144, col:157> col:157 _Src 'const char *'
|-FunctionDecl 0x28b8a5c38e8 <line:118:88> col:88 implicit strcat 'char *(char *, const char *)' extern
| |-ParmVarDecl 0x28b8a5c3988 <<invalid sloc>> <invalid sloc> 'char *'
| `-ParmVarDecl 0x28b8a5c39f0 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x28b8a5c3a68 prev 0x28b8a5c38e8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:118:88 strcat 'char *(char *, const char *)'
| |-ParmVarDecl 0x28b8a5c3768 <col:170, col:176> col:176 _Dest 'char *'
| |-ParmVarDecl 0x28b8a5c37e8 <col:190, col:204> col:204 _Source 'const char *'
| `-DeprecatedAttr 0x28b8a5c3b18 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using strcat_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x28b8a5c3e50 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:120:32> col:32 implicit strcmp 'int (const char *, const char *)' extern
| |-ParmVarDecl 0x28b8a5c3ef0 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x28b8a5c3f58 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x28b8a5c3fd0 prev 0x28b8a5c3e50 <col:16, col:91> col:32 strcmp 'int (const char *, const char *)'
| |-ParmVarDecl 0x28b8a5c3c60 <col:46, col:59> col:59 _Str1 'const char *'
| `-ParmVarDecl 0x28b8a5c3ce0 <col:73, col:86> col:86 _Str2 'const char *'
|-FunctionDecl 0x28b8a5bc240 <line:121:32> col:32 implicit strlen 'unsigned long long (const char *)' extern
| `-ParmVarDecl 0x28b8a5bc2e0 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x28b8a5bc350 prev 0x28b8a5bc240 <col:16, col:63> col:32 strlen 'unsigned long long (const char *)'
| `-ParmVarDecl 0x28b8a5c40b0 <col:46, col:59> col:59 _Str 'const char *'
|-FunctionDecl 0x28b8a5bc648 <line:125:1, col:92> col:17 used strnlen 'size_t (const char *, size_t) __attribute__((cdecl))':'size_t (const char *, size_t)'
| |-ParmVarDecl 0x28b8a5bc428 <col:52, col:65> col:65 _Str 'const char *'
| `-ParmVarDecl 0x28b8a5bc4a0 <col:76, col:83> col:83 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x28b8a5bc898 <line:127:16, line:133:1> line:130:19 strnlen_s 'size_t (const char *, size_t) __attribute__((cdecl))':'size_t (const char *, size_t)' static inline
| |-ParmVarDecl 0x28b8a5bc728 <col:56, col:69> col:69 used _Str 'const char *'
| |-ParmVarDecl 0x28b8a5bc7a0 <col:80, col:87> col:87 used _MaxCount 'size_t':'unsigned long long'
| `-CompoundStmt 0x28b8a5bcbc8 <line:131:1, line:133:1>
|   `-ReturnStmt 0x28b8a5bcbb8 <line:132:5, col:51>
|     `-ConditionalOperator 0x28b8a5bcb88 <col:12, col:51> 'unsigned long long'
|       |-ParenExpr 0x28b8a5bc9f8 <col:12, col:20> 'int'
|       | `-BinaryOperator 0x28b8a5bc9d8 <col:13, col:19> 'int' '=='
|       |   |-ImplicitCastExpr 0x28b8a5bc9a8 <col:13> 'const char *' <LValueToRValue>
|       |   | `-DeclRefExpr 0x28b8a5bc960 <col:13> 'const char *' lvalue ParmVar 0x28b8a5bc728 '_Str' 'const char *'
|       |   `-ImplicitCastExpr 0x28b8a5bc9c0 <col:19> 'const char *' <NullToPointer>
|       |     `-IntegerLiteral 0x28b8a5bc980 <col:19> 'int' 0
|       |-ImplicitCastExpr 0x28b8a5bcb70 <col:24> 'unsigned long long' <IntegralCast>
|       | `-IntegerLiteral 0x28b8a5bca18 <col:24> 'int' 0
|       `-CallExpr 0x28b8a5bcb10 <col:28, col:51> 'size_t':'unsigned long long'
|         |-ImplicitCastExpr 0x28b8a5bcaf8 <col:28> 'size_t (*)(const char *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x28b8a5bca40 <col:28> 'size_t (const char *, size_t) __attribute__((cdecl))':'size_t (const char *, size_t)' Function 0x28b8a5bc648 'strnlen' 'size_t (const char *, size_t) __attribute__((cdecl))':'size_t (const char *, size_t)'
|         |-ImplicitCastExpr 0x28b8a5bcb40 <col:36> 'const char *' <LValueToRValue>
|         | `-DeclRefExpr 0x28b8a5bca60 <col:36> 'const char *' lvalue ParmVar 0x28b8a5bc728 '_Str' 'const char *'
|         `-ImplicitCastExpr 0x28b8a5bcb58 <col:42> 'size_t':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x28b8a5bca80 <col:42> 'size_t':'unsigned long long' lvalue ParmVar 0x28b8a5bc7a0 '_MaxCount' 'size_t':'unsigned long long'
|-FunctionDecl 0x28b8a5bcea0 <line:136:28, col:209> col:44 memmove_s 'errno_t (void *, rsize_t, const void *, rsize_t) __attribute__((cdecl))':'errno_t (void *, rsize_t, const void *, rsize_t)'
| |-ParmVarDecl 0x28b8a5bcbf8 <col:100, col:107> col:107 _Dst 'void *'
| |-ParmVarDecl 0x28b8a5bcc70 <col:118, col:126> col:126 _DstSize 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x28b8a5bccf0 <col:168, col:181> col:181 _Src 'const void *'
| `-ParmVarDecl 0x28b8a5bcd68 <col:192, col:200> col:200 _MaxCount 'rsize_t':'unsigned long long'
|-FunctionDecl 0x28b8a5c52d0 <line:139:67> col:67 implicit memmove 'void *(void *, const void *, unsigned long long)' extern
| |-ParmVarDecl 0x28b8a5c5370 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x28b8a5c53d8 <<invalid sloc>> <invalid sloc> 'const void *'
| `-ParmVarDecl 0x28b8a5c5440 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x28b8a5c54c0 prev 0x28b8a5c52d0 <col:51, col:186> col:67 memmove 'void *(void *, const void *, unsigned long long)'
| |-ParmVarDecl 0x28b8a5bcf90 <col:109, col:116> col:116 _Dst 'void *'
| |-ParmVarDecl 0x28b8a5bd010 <col:150, col:163> col:163 _Src 'const void *'
| `-ParmVarDecl 0x28b8a5bd088 <col:174, col:181> col:181 _Size 'size_t':'unsigned long long'
|-FunctionDecl 0x28b8a5c56f8 <line:146:24, col:76> col:40 _strdup 'char *(const char *) __attribute__((cdecl))':'char *(const char *)'
| `-ParmVarDecl 0x28b8a5c55a8 <col:59, col:72> col:72 _Src 'const char *'
|-FunctionDecl 0x28b8a5c59c0 <line:152:54> col:54 implicit strchr 'char *(const char *, int)' extern
| |-ParmVarDecl 0x28b8a5c5a60 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x28b8a5c5ac8 <<invalid sloc>> <invalid sloc> 'int'
|-FunctionDecl 0x28b8a5c5b40 prev 0x28b8a5c59c0 <col:38, col:100> col:54 strchr 'char *(const char *, int)'
| |-ParmVarDecl 0x28b8a5c57d0 <col:68, col:81> col:81 _Str 'const char *'
| `-ParmVarDecl 0x28b8a5c5850 <col:92, col:96> col:96 _Val 'int'
|-FunctionDecl 0x28b8a5c5da0 <line:153:24, col:103> col:40 _stricmp 'int (const char *, const char *) __attribute__((cdecl))':'int (const char *, const char *)'
| |-ParmVarDecl 0x28b8a5c5c20 <col:57, col:70> col:70 _Str1 'const char *'
| `-ParmVarDecl 0x28b8a5c5ca0 <col:85, col:98> col:98 _Str2 'const char *'
|-FunctionDecl 0x28b8a5c6000 <line:154:24, col:103> col:40 _strcmpi 'int (const char *, const char *) __attribute__((cdecl))':'int (const char *, const char *)'
| |-ParmVarDecl 0x28b8a5c5e80 <col:57, col:70> col:70 _Str1 'const char *'
| `-ParmVarDecl 0x28b8a5c5f00 <col:85, col:98> col:98 _Str2 'const char *'
|-FunctionDecl 0x28b8a5c43a8 <line:155:24, col:133> col:40 _stricmp_l 'int (const char *, const char *, _locale_t) __attribute__((cdecl))':'int (const char *, const char *, _locale_t)'
| |-ParmVarDecl 0x28b8a5c60e0 <col:59, col:72> col:72 _Str1 'const char *'
| |-ParmVarDecl 0x28b8a5c6160 <col:87, col:100> col:100 _Str2 'const char *'
| `-ParmVarDecl 0x28b8a5c61d8 <col:116, col:126> col:126 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x28b8a5c4610 <line:156:24, col:103> col:40 strcoll 'int (const char *, const char *) __attribute__((cdecl))':'int (const char *, const char *)'
| |-ParmVarDecl 0x28b8a5c4490 <col:56, col:69> col:69 _Str1 'const char *'
| `-ParmVarDecl 0x28b8a5c4510 <col:84, col:98> col:98 _Str2 'const char *'
|-FunctionDecl 0x28b8a5c4908 <line:157:24, col:133> col:40 _strcoll_l 'int (const char *, const char *, _locale_t) __attribute__((cdecl))':'int (const char *, const char *, _locale_t)'
| |-ParmVarDecl 0x28b8a5c46f0 <col:59, col:72> col:72 _Str1 'const char *'
| |-ParmVarDecl 0x28b8a5c4770 <col:87, col:100> col:100 _Str2 'const char *'
| `-ParmVarDecl 0x28b8a5c47e8 <col:116, col:126> col:126 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x28b8a5c4b70 <line:158:24, col:104> col:40 _stricoll 'int (const char *, const char *) __attribute__((cdecl))':'int (const char *, const char *)'
| |-ParmVarDecl 0x28b8a5c49f0 <col:58, col:71> col:71 _Str1 'const char *'
| `-ParmVarDecl 0x28b8a5c4a70 <col:86, col:99> col:99 _Str2 'const char *'
|-FunctionDecl 0x28b8a5c4e68 <line:159:24, col:134> col:40 _stricoll_l 'int (const char *, const char *, _locale_t) __attribute__((cdecl))':'int (const char *, const char *, _locale_t)'
| |-ParmVarDecl 0x28b8a5c4c50 <col:60, col:73> col:73 _Str1 'const char *'
| |-ParmVarDecl 0x28b8a5c4cd0 <col:88, col:101> col:101 _Str2 'const char *'
| `-ParmVarDecl 0x28b8a5c4d48 <col:117, col:127> col:127 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x28b8a614000 <line:160:24, col:167> col:40 _strncoll 'int (const char *, const char *, size_t) __attribute__((cdecl))':'int (const char *, const char *, size_t)'
| |-ParmVarDecl 0x28b8a5c4f50 <col:79, col:92> col:92 _Str1 'const char *'
| |-ParmVarDecl 0x28b8a5c4fd0 <col:126, col:139> col:139 _Str2 'const char *'
| `-ParmVarDecl 0x28b8a5c5048 <col:151, col:158> col:158 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x28b8a614460 <line:161:24, col:195> col:40 _strncoll_l 'int (const char *, const char *, size_t, _locale_t) __attribute__((cdecl))':'int (const char *, const char *, size_t, _locale_t)'
| |-ParmVarDecl 0x28b8a6140e8 <col:79, col:92> col:92 _Str1 'const char *'
| |-ParmVarDecl 0x28b8a614168 <col:126, col:139> col:139 _Str2 'const char *'
| |-ParmVarDecl 0x28b8a6141e0 <col:151, col:158> col:158 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x28b8a614258 <col:178, col:188> col:188 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x28b8a614768 <line:162:24, col:167> col:40 _strnicoll 'int (const char *, const char *, size_t) __attribute__((cdecl))':'int (const char *, const char *, size_t)'
| |-ParmVarDecl 0x28b8a614550 <col:79, col:92> col:92 _Str1 'const char *'
| |-ParmVarDecl 0x28b8a6145d0 <col:126, col:139> col:139 _Str2 'const char *'
| `-ParmVarDecl 0x28b8a614648 <col:151, col:158> col:158 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x28b8a614b00 <line:163:24, col:196> col:40 _strnicoll_l 'int (const char *, const char *, size_t, _locale_t) __attribute__((cdecl))':'int (const char *, const char *, size_t, _locale_t)'
| |-ParmVarDecl 0x28b8a614850 <col:80, col:93> col:93 _Str1 'const char *'
| |-ParmVarDecl 0x28b8a6148d0 <col:127, col:140> col:140 _Str2 'const char *'
| |-ParmVarDecl 0x28b8a614948 <col:152, col:159> col:159 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x28b8a6149c0 <col:179, col:189> col:189 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x28b8a614e18 <line:164:40> col:40 implicit strcspn 'unsigned long long (const char *, const char *)' extern
| |-ParmVarDecl 0x28b8a614eb8 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x28b8a614f20 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x28b8a616020 prev 0x28b8a614e18 <col:24, col:104> col:40 strcspn 'unsigned long long (const char *, const char *)'
| |-ParmVarDecl 0x28b8a614bf0 <col:56, col:69> col:69 _Str 'const char *'
| `-ParmVarDecl 0x28b8a614c70 <col:83, col:96> col:96 _Control 'const char *'
|-FunctionDecl 0x28b8a6162e0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:165:118> col:77 _strerror 'char *(const char *) __attribute__((cdecl))':'char *(const char *)'
| |-ParmVarDecl 0x28b8a616200 <col:98, col:111> col:111 _ErrMsg 'const char *'
| `-DeprecatedAttr 0x28b8a616388 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _strerror_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x28b8a616760 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:166:28, col:155> col:44 _strerror_s 'errno_t (char *, size_t, const char *) __attribute__((cdecl))':'errno_t (char *, size_t, const char *)'
| |-ParmVarDecl 0x28b8a6164d0 <col:85, col:92> col:92 _Buf 'char *'
| |-ParmVarDecl 0x28b8a616548 <col:103, col:110> col:110 _SizeInBytes 'size_t':'unsigned long long'
| `-ParmVarDecl 0x28b8a6165c8 <col:135, col:148> col:148 _ErrMsg 'const char *'
|-FunctionDecl 0x28b8a616a78 <line:168:76> col:76 implicit strerror 'char *(int)' extern
| `-ParmVarDecl 0x28b8a616b18 <<invalid sloc>> <invalid sloc> 'int'
|-FunctionDecl 0x28b8a616b88 prev 0x28b8a616a78 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:168:93> col:76 strerror 'char *(int)'
| |-ParmVarDecl 0x28b8a616940 <col:90> col:93 'int'
| `-DeprecatedAttr 0x28b8a616c30 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using strerror_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x28b8a615010 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:170:28, col:139> col:44 strerror_s 'errno_t (char *, size_t, int) __attribute__((cdecl))':'errno_t (char *, size_t, int)'
| |-ParmVarDecl 0x28b8a616d78 <col:84, col:91> col:91 _Buf 'char *'
| |-ParmVarDecl 0x28b8a616df0 <col:102, col:109> col:109 _SizeInBytes 'size_t':'unsigned long long'
| `-ParmVarDecl 0x28b8a616e70 <col:128, col:132> col:132 _ErrNum 'int'
|-FunctionDecl 0x28b8a615318 <line:173:28, col:109> col:44 _strlwr_s 'errno_t (char *, size_t) __attribute__((cdecl))':'errno_t (char *, size_t)'
| |-ParmVarDecl 0x28b8a6150f8 <col:79, col:86> col:86 _Str 'char *'
| `-ParmVarDecl 0x28b8a615170 <col:97, col:104> col:104 _Size 'size_t':'unsigned long long'
|-FunctionDecl 0x28b8a615608 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1933:117> D:\Microsoft Visual Studio 12.0\VC\include\string.h:175:79 _strlwr 'char *(char *) __attribute__((cdecl))':'char *(char *)'
| |-ParmVarDecl 0x28b8a6154b8 <col:99, col:105> col:105 _String 'char *'
| `-DeprecatedAttr 0x28b8a6156b0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _strlwr_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x28b8a615ac0 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:176:28, col:139> col:44 _strlwr_s_l 'errno_t (char *, size_t, _locale_t) __attribute__((cdecl))':'errno_t (char *, size_t, _locale_t)'
| |-ParmVarDecl 0x28b8a6157f8 <col:81, col:88> col:88 _Str 'char *'
| |-ParmVarDecl 0x28b8a615870 <col:99, col:106> col:106 _Size 'size_t':'unsigned long long'
| `-ParmVarDecl 0x28b8a6158e8 <col:122, col:132> col:132 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x28b8a615e90 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:178:82 _strlwr_l 'char *(char *, _locale_t) __attribute__((cdecl))':'char *(char *, _locale_t)'
| |-ParmVarDecl 0x28b8a615c68 <col:148, col:154> col:154 _String 'char *'
| |-ParmVarDecl 0x28b8a615ce0 <col:172, col:183> col:183 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x28b8a615f40 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _strlwr_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x28b8a60f428 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:180:40, col:206> col:56 strncat_s 'errno_t (char *, rsize_t, const char *, rsize_t) __attribute__((cdecl))':'errno_t (char *, rsize_t, const char *, rsize_t)'
| |-ParmVarDecl 0x28b8a60f0b0 <col:98, col:105> col:105 _Dst 'char *'
| |-ParmVarDecl 0x28b8a60f128 <col:116, col:124> col:124 _SizeInBytes 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x28b8a60f1a8 <col:165, col:178> col:178 _Src 'const char *'
| `-ParmVarDecl 0x28b8a60f220 <col:189, col:197> col:197 _MaxCount 'rsize_t':'unsigned long long'
|-FunctionDecl 0x28b8a60f8a8 <line:186:83> col:83 implicit strncat 'char *(char *, const char *, unsigned long long)' extern
| |-ParmVarDecl 0x28b8a60f948 <<invalid sloc>> <invalid sloc> 'char *'
| |-ParmVarDecl 0x28b8a60f9b0 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x28b8a60fa18 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x28b8a60fa98 prev 0x28b8a60f8a8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1980:149> D:\Microsoft Visual Studio 12.0\VC\include\string.h:186:83 strncat 'char *(char *, const char *, unsigned long long)'
| |-ParmVarDecl 0x28b8a60f5d8 <col:161, col:167> col:167 _Dest 'char *'
| |-ParmVarDecl 0x28b8a60f658 <col:198, col:212> col:212 _Source 'const char *'
| |-ParmVarDecl 0x28b8a60f6d0 <col:226, col:234> col:234 _Count 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x28b8a60fb50 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using strncat_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x28b8a60feb0 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:188:40> col:40 implicit strncmp 'int (const char *, const char *, unsigned long long)' extern
| |-ParmVarDecl 0x28b8a617030 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x28b8a617098 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x28b8a617100 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x28b8a617180 prev 0x28b8a60feb0 <col:24, col:163> col:40 strncmp 'int (const char *, const char *, unsigned long long)'
| |-ParmVarDecl 0x28b8a60fc98 <col:75, col:88> col:88 _Str1 'const char *'
| |-ParmVarDecl 0x28b8a60fd18 <col:122, col:135> col:135 _Str2 'const char *'
| `-ParmVarDecl 0x28b8a60fd90 <col:147, col:154> col:154 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x28b8a617480 <line:189:24, col:165> col:40 _strnicmp 'int (const char *, const char *, size_t) __attribute__((cdecl))':'int (const char *, const char *, size_t)'
| |-ParmVarDecl 0x28b8a617268 <col:77, col:90> col:90 _Str1 'const char *'
| |-ParmVarDecl 0x28b8a6172e8 <col:124, col:137> col:137 _Str2 'const char *'
| `-ParmVarDecl 0x28b8a617360 <col:149, col:156> col:156 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x28b8a617818 <line:190:24, col:195> col:40 _strnicmp_l 'int (const char *, const char *, size_t, _locale_t) __attribute__((cdecl))':'int (const char *, const char *, size_t, _locale_t)'
| |-ParmVarDecl 0x28b8a617568 <col:79, col:92> col:92 _Str1 'const char *'
| |-ParmVarDecl 0x28b8a6175e8 <col:126, col:139> col:139 _Str2 'const char *'
| |-ParmVarDecl 0x28b8a617660 <col:151, col:158> col:158 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x28b8a6176d8 <col:178, col:188> col:188 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x28b8a617bb0 <line:192:40, col:203> col:56 strncpy_s 'errno_t (char *, rsize_t, const char *, rsize_t) __attribute__((cdecl))':'errno_t (char *, rsize_t, const char *, rsize_t)'
| |-ParmVarDecl 0x28b8a617908 <col:95, col:102> col:102 _Dst 'char *'
| |-ParmVarDecl 0x28b8a617980 <col:113, col:121> col:121 _SizeInBytes 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x28b8a617a00 <col:162, col:175> col:175 _Src 'const char *'
| `-ParmVarDecl 0x28b8a617a78 <col:186, col:194> col:194 _MaxCount 'rsize_t':'unsigned long long'
|-FunctionDecl 0x28b8a617f78 <line:195:83> col:83 implicit strncpy 'char *(char *, const char *, unsigned long long)' extern
| |-ParmVarDecl 0x28b8a60ffc0 <<invalid sloc>> <invalid sloc> 'char *'
| |-ParmVarDecl 0x28b8a610028 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x28b8a610090 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x28b8a610110 prev 0x28b8a617f78 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1980:149> D:\Microsoft Visual Studio 12.0\VC\include\string.h:195:83 strncpy 'char *(char *, const char *, unsigned long long)'
| |-ParmVarDecl 0x28b8a617d60 <col:167, col:173> col:173 _Dest 'char *'
| |-ParmVarDecl 0x28b8a617de0 <col:204, col:218> col:218 _Source 'const char *'
| |-ParmVarDecl 0x28b8a617e58 <col:232, col:240> col:240 _Count 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x28b8a6101c8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using strncpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x28b8a610688 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:196:40, col:174> col:56 _strnset_s 'errno_t (char *, size_t, int, size_t) __attribute__((cdecl))':'errno_t (char *, size_t, int, size_t)'
| |-ParmVarDecl 0x28b8a610310 <col:99, col:106> col:106 _Str 'char *'
| |-ParmVarDecl 0x28b8a610388 <col:117, col:124> col:124 _SizeInBytes 'size_t':'unsigned long long'
| |-ParmVarDecl 0x28b8a610408 <col:143, col:147> col:147 _Val 'int'
| `-ParmVarDecl 0x28b8a610480 <col:158, col:165> col:165 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x28b8a610b08 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1980:149> D:\Microsoft Visual Studio 12.0\VC\include\string.h:198:83 _strnset 'char *(char *, int, size_t) __attribute__((cdecl))':'char *(char *, int, size_t)'
| |-ParmVarDecl 0x28b8a610838 <col:163, col:169> col:169 _Dest 'char *'
| |-ParmVarDecl 0x28b8a6108b8 <col:181, col:186> col:186 _Val 'int'
| |-ParmVarDecl 0x28b8a610930 <col:197, col:205> col:205 _Count 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x28b8a610bc0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _strnset_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x28b8a610ef0 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:199:54> col:54 implicit strpbrk 'char *(const char *, const char *)' extern
| |-ParmVarDecl 0x28b8a618040 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x28b8a6180a8 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x28b8a618120 prev 0x28b8a610ef0 <col:38, col:116> col:54 strpbrk 'char *(const char *, const char *)'
| |-ParmVarDecl 0x28b8a610d08 <col:69, col:82> col:82 _Str 'const char *'
| `-ParmVarDecl 0x28b8a610d88 <col:95, col:108> col:108 _Control 'const char *'
|-FunctionDecl 0x28b8a618380 <line:200:54> col:54 implicit strrchr 'char *(const char *, int)' extern
| |-ParmVarDecl 0x28b8a618420 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x28b8a618488 <<invalid sloc>> <invalid sloc> 'int'
|-FunctionDecl 0x28b8a618500 prev 0x28b8a618380 <col:38, col:100> col:54 strrchr 'char *(const char *, int)'
| |-ParmVarDecl 0x28b8a618200 <col:69, col:82> col:82 _Str 'const char *'
| `-ParmVarDecl 0x28b8a618280 <col:93, col:97> col:97 _Ch 'int'
|-FunctionDecl 0x28b8a6186c0 <line:201:9, col:54> col:25 _strrev 'char *(char *) __attribute__((cdecl))':'char *(char *)'
| `-ParmVarDecl 0x28b8a6185e0 <col:43, col:50> col:50 _Str 'char *'
|-FunctionDecl 0x28b8a618910 <line:202:40> col:40 implicit strspn 'unsigned long long (const char *, const char *)' extern
| |-ParmVarDecl 0x28b8a6189b0 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x28b8a618a18 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x28b8a618a90 prev 0x28b8a618910 <col:24, col:101> col:40 strspn 'unsigned long long (const char *, const char *)'
| |-ParmVarDecl 0x28b8a618798 <col:54, col:67> col:67 _Str 'const char *'
| `-ParmVarDecl 0x28b8a618818 <col:80, col:93> col:93 _Control 'const char *'
|-FunctionDecl 0x28b8a618cf0 <line:203:70> col:70 implicit strstr 'char *(const char *, const char *)' extern
| |-ParmVarDecl 0x28b8a618d90 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x28b8a618df8 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x28b8a618e70 prev 0x28b8a618cf0 <col:54, col:130> col:70 strstr 'char *(const char *, const char *)'
| |-ParmVarDecl 0x28b8a618b70 <col:84, col:97> col:97 _Str 'const char *'
| `-ParmVarDecl 0x28b8a618bf0 <col:110, col:123> col:123 _SubStr 'const char *'
|-FunctionDecl 0x28b8a611150 <line:204:74> col:74 implicit strtok 'char *(char *, const char *)' extern
| |-ParmVarDecl 0x28b8a6111f0 <<invalid sloc>> <invalid sloc> 'char *'
| `-ParmVarDecl 0x28b8a611258 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x28b8a6112d0 prev 0x28b8a611150 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:204:134> col:74 strtok 'char *(char *, const char *)'
| |-ParmVarDecl 0x28b8a610fd0 <col:95, col:102> col:102 _Str 'char *'
| |-ParmVarDecl 0x28b8a611050 <col:115, col:128> col:128 _Delim 'const char *'
| `-DeprecatedAttr 0x28b8a611380 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using strtok_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x28b8a611768 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:206:36, col:162> col:52 strtok_s 'char *(char *, const char *, char **) __attribute__((cdecl))':'char *(char *, const char *, char **)'
| |-ParmVarDecl 0x28b8a6114c8 <col:75, col:82> col:82 _Str 'char *'
| |-ParmVarDecl 0x28b8a611548 <col:95, col:108> col:108 _Delim 'const char *'
| `-ParmVarDecl 0x28b8a6115c8 <col:146, col:154> col:154 _Context 'char **'
|-FunctionDecl 0x28b8a6119c0 <line:208:28, col:109> col:44 _strupr_s 'errno_t (char *, size_t) __attribute__((cdecl))':'errno_t (char *, size_t)'
| |-ParmVarDecl 0x28b8a611850 <col:79, col:86> col:86 _Str 'char *'
| `-ParmVarDecl 0x28b8a6118c8 <col:97, col:104> col:104 _Size 'size_t':'unsigned long long'
|-FunctionDecl 0x28b8a611c40 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1933:117> D:\Microsoft Visual Studio 12.0\VC\include\string.h:210:79 _strupr 'char *(char *) __attribute__((cdecl))':'char *(char *)'
| |-ParmVarDecl 0x28b8a611b60 <col:99, col:105> col:105 _String 'char *'
| `-DeprecatedAttr 0x28b8a611ce8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _strupr_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x28b8a612048 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:211:28, col:130> col:44 _strupr_s_l 'errno_t (char *, size_t, _locale_t) __attribute__((cdecl))':'errno_t (char *, size_t, _locale_t)'
| |-ParmVarDecl 0x28b8a611e30 <col:81, col:88> col:88 _Str 'char *'
| |-ParmVarDecl 0x28b8a611ea8 <col:99, col:106> col:106 _Size 'size_t':'unsigned long long'
| `-ParmVarDecl 0x28b8a611f20 <col:113, col:123> col:123 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x28b8a612368 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:213:82 _strupr_l 'char *(char *, _locale_t) __attribute__((cdecl))':'char *(char *, _locale_t)'
| |-ParmVarDecl 0x28b8a6121f0 <col:148, col:154> col:154 _String 'char *'
| |-ParmVarDecl 0x28b8a612268 <col:172, col:183> col:183 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x28b8a612418 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _strupr_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x28b8a612830 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:214:44> col:44 implicit strxfrm 'unsigned long long (char *, const char *, unsigned long long)' extern
| |-ParmVarDecl 0x28b8a6128d0 <<invalid sloc>> <invalid sloc> 'char *'
| |-ParmVarDecl 0x28b8a612938 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x28b8a6129a0 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x28b8a612a20 prev 0x28b8a612830 <col:28, col:155> col:44 strxfrm 'unsigned long long (char *, const char *, unsigned long long)'
| |-ParmVarDecl 0x28b8a612560 <col:95, col:102> col:102 _Dst 'char *'
| |-ParmVarDecl 0x28b8a6125e0 <col:115, col:128> col:128 _Src 'const char *'
| `-ParmVarDecl 0x28b8a612658 <col:139, col:146> col:146 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x28b8a612e78 <line:215:28, col:185> col:44 _strxfrm_l 'size_t (char *, const char *, size_t, _locale_t) __attribute__((cdecl))':'size_t (char *, const char *, size_t, _locale_t)'
| |-ParmVarDecl 0x28b8a612b08 <col:97, col:104> col:104 _Dst 'char *'
| |-ParmVarDecl 0x28b8a612b88 <col:117, col:130> col:130 _Src 'const char *'
| |-ParmVarDecl 0x28b8a612c00 <col:141, col:148> col:148 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x28b8a612c78 <col:168, col:178> col:178 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x28b8a6191e8 <line:245:71> col:71 implicit strdup 'char *(const char *)' extern
| `-ParmVarDecl 0x28b8a619288 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x28b8a6192f8 prev 0x28b8a6191e8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:245:106> col:71 strdup 'char *(const char *)'
| |-ParmVarDecl 0x28b8a619108 <col:89, col:102> col:102 _Src 'const char *'
| `-DeprecatedAttr 0x28b8a6193a0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strdup. See online help for details." ""
|-FunctionDecl 0x28b8a6196e8 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:252:129> col:69 strcmpi 'int (const char *, const char *) __attribute__((cdecl))':'int (const char *, const char *)'
| |-ParmVarDecl 0x28b8a619568 <col:84, col:97> col:97 _Str1 'const char *'
| |-ParmVarDecl 0x28b8a6195e8 <col:111, col:124> col:124 _Str2 'const char *'
| `-DeprecatedAttr 0x28b8a619798 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strcmpi. See online help for details." ""
|-FunctionDecl 0x28b8a619ae0 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:253:129> col:69 stricmp 'int (const char *, const char *) __attribute__((cdecl))':'int (const char *, const char *)'
| |-ParmVarDecl 0x28b8a619960 <col:84, col:97> col:97 _Str1 'const char *'
| |-ParmVarDecl 0x28b8a6199e0 <col:111, col:124> col:124 _Str2 'const char *'
| `-DeprecatedAttr 0x28b8a619b90 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _stricmp. See online help for details." ""
|-FunctionDecl 0x28b8a619e38 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:254:84> col:56 strlwr 'char *(char *) __attribute__((cdecl))':'char *(char *)'
| |-ParmVarDecl 0x28b8a619d58 <col:73, col:80> col:80 _Str 'char *'
| `-DeprecatedAttr 0x28b8a619ee0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strlwr. See online help for details." ""
|-FunctionDecl 0x28b8a61a330 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:255:193> col:70 strnicmp 'int (const char *, const char *, size_t) __attribute__((cdecl))':'int (const char *, const char *, size_t)'
| |-ParmVarDecl 0x28b8a61a118 <col:106, col:119> col:119 _Str1 'const char *'
| |-ParmVarDecl 0x28b8a61a198 <col:153, col:166> col:166 _Str 'const char *'
| |-ParmVarDecl 0x28b8a61a210 <col:177, col:184> col:184 _MaxCount 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x28b8a61a3e8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strnicmp. See online help for details." ""
|-FunctionDecl 0x28b8a61a7c8 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:256:143> col:57 strnset 'char *(char *, int, size_t) __attribute__((cdecl))':'char *(char *, int, size_t)'
| |-ParmVarDecl 0x28b8a61a5b0 <col:94, col:101> col:101 _Str 'char *'
| |-ParmVarDecl 0x28b8a61a630 <col:112, col:116> col:116 _Val 'int'
| |-ParmVarDecl 0x28b8a61a6a8 <col:127, col:134> col:134 _MaxCount 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x28b8a61a880 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strnset. See online help for details." ""
|-FunctionDecl 0x28b8a61ab28 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:257:84> col:56 strrev 'char *(char *) __attribute__((cdecl))':'char *(char *)'
| |-ParmVarDecl 0x28b8a61aa48 <col:73, col:80> col:80 _Str 'char *'
| `-DeprecatedAttr 0x28b8a61abd0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strrev. See online help for details." ""
|-FunctionDecl 0x28b8a61af18 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:258:99> col:56 strset 'char *(char *, int) __attribute__((cdecl))':'char *(char *, int)'
| |-ParmVarDecl 0x28b8a61ad98 <col:73, col:80> col:80 _Str 'char *'
| |-ParmVarDecl 0x28b8a61ae18 <col:91, col:95> col:95 _Val 'int'
| `-DeprecatedAttr 0x28b8a61afc8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strset. See online help for details." ""
|-FunctionDecl 0x28b8a613250 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:259:84> col:56 strupr 'char *(char *) __attribute__((cdecl))':'char *(char *)'
| |-ParmVarDecl 0x28b8a613170 <col:73, col:80> col:80 _Str 'char *'
| `-DeprecatedAttr 0x28b8a6132f8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strupr. See online help for details." ""
|-FunctionDecl 0x28b8a613590 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:273:24, col:77> col:42 _wcsdup 'wchar_t *(const wchar_t *) __attribute__((cdecl))':'wchar_t *(const wchar_t *)'
| `-ParmVarDecl 0x28b8a613418 <col:57, col:73> col:73 _Str 'const wchar_t *'
|-FunctionDecl 0x28b8a613920 <line:280:40, col:167> col:56 wcscat_s 'errno_t (wchar_t *, rsize_t, const wchar_t *) __attribute__((cdecl))':'errno_t (wchar_t *, rsize_t, const wchar_t *)'
| |-ParmVarDecl 0x28b8a613660 <col:97, col:107> col:107 _Dst 'wchar_t *'
| |-ParmVarDecl 0x28b8a6136d8 <col:118, col:126> col:126 _SizeInWords 'rsize_t':'unsigned long long'
| `-ParmVarDecl 0x28b8a613750 <col:147, col:163> col:163 _Src 'const wchar_t *'
|-FunctionDecl 0x28b8a613cd8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:284:82 wcscat 'wchar_t *(wchar_t *, const wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x28b8a613ac0 <col:164, col:173> col:173 _Dest 'wchar_t *'
| |-ParmVarDecl 0x28b8a613b38 <col:187, col:204> col:204 _Source 'const wchar_t *'
| `-DeprecatedAttr 0x28b8a613d88 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using wcscat_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x28b8a61f1b8 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:288:41> col:41 implicit wcschr 'unsigned short *(const unsigned short *, unsigned short)' extern
| |-ParmVarDecl 0x28b8a61f258 <<invalid sloc>> <invalid sloc> 'const unsigned short *'
| `-ParmVarDecl 0x28b8a61f2c0 <<invalid sloc>> <invalid sloc> 'unsigned short'
|-FunctionDecl 0x28b8a61f338 prev 0x28b8a61f1b8 <col:23, col:88> col:41 wcschr 'unsigned short *(const unsigned short *, unsigned short)'
| |-ParmVarDecl 0x28b8a613ec8 <col:55, col:71> col:71 _Str 'const wchar_t *'
| `-ParmVarDecl 0x28b8a613f40 <col:77, col:85> col:85 _Ch 'wchar_t':'unsigned short'
|-FunctionDecl 0x28b8a61f630 <line:289:36> col:36 implicit wcscmp 'int (const unsigned short *, const unsigned short *)' extern
| |-ParmVarDecl 0x28b8a61f6d0 <<invalid sloc>> <invalid sloc> 'const unsigned short *'
| `-ParmVarDecl 0x28b8a61f738 <<invalid sloc>> <invalid sloc> 'const unsigned short *'
|-FunctionDecl 0x28b8a61f7b0 prev 0x28b8a61f630 <col:24, col:101> col:36 wcscmp 'int (const unsigned short *, const unsigned short *)'
| |-ParmVarDecl 0x28b8a61f410 <col:50, col:66> col:66 _Str1 'const wchar_t *'
| `-ParmVarDecl 0x28b8a61f488 <col:80, col:96> col:96 _Str2 'const wchar_t *'
|-FunctionDecl 0x28b8a61fa90 <line:291:40, col:164> col:56 wcscpy_s 'errno_t (wchar_t *, rsize_t, const wchar_t *) __attribute__((cdecl))':'errno_t (wchar_t *, rsize_t, const wchar_t *)'
| |-ParmVarDecl 0x28b8a61f888 <col:94, col:104> col:104 _Dst 'wchar_t *'
| |-ParmVarDecl 0x28b8a61f900 <col:115, col:123> col:123 _SizeInWords 'rsize_t':'unsigned long long'
| `-ParmVarDecl 0x28b8a61f978 <col:144, col:160> col:160 _Src 'const wchar_t *'
|-FunctionDecl 0x28b8a61fda0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:294:82 wcscpy 'wchar_t *(wchar_t *, const wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x28b8a61fc30 <col:136, col:145> col:145 _Dest 'wchar_t *'
| |-ParmVarDecl 0x28b8a61fca8 <col:159, col:176> col:176 _Source 'const wchar_t *'
| `-DeprecatedAttr 0x28b8a61fe50 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using wcscpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x28b8a61d198 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:295:24, col:107> col:39 wcscspn 'size_t (const wchar_t *, const wchar_t *) __attribute__((cdecl))':'size_t (const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x28b8a61ff90 <col:54, col:70> col:70 _Str 'const wchar_t *'
| `-ParmVarDecl 0x28b8a620008 <col:83, col:99> col:99 _Control 'const wchar_t *'
|-FunctionDecl 0x28b8a61d3e0 <line:296:39> col:39 implicit wcslen 'unsigned long long (const unsigned short *)' extern
| `-ParmVarDecl 0x28b8a61d480 <<invalid sloc>> <invalid sloc> 'const unsigned short *'
|-FunctionDecl 0x28b8a61d4f0 prev 0x28b8a61d3e0 <col:24, col:73> col:39 wcslen 'unsigned long long (const unsigned short *)'
| `-ParmVarDecl 0x28b8a61d270 <col:53, col:69> col:69 _Str 'const wchar_t *'
|-FunctionDecl 0x28b8a61d7d8 <line:300:1, col:94> col:16 used wcsnlen 'size_t (const wchar_t *, size_t) __attribute__((cdecl))':'size_t (const wchar_t *, size_t)'
| |-ParmVarDecl 0x28b8a61d5c0 <col:51, col:67> col:67 _Src 'const wchar_t *'
| `-ParmVarDecl 0x28b8a61d638 <col:78, col:85> col:85 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x28b8a61da20 <line:302:16, line:308:1> line:305:18 wcsnlen_s 'size_t (const wchar_t *, size_t) __attribute__((cdecl))':'size_t (const wchar_t *, size_t)' static inline
| |-ParmVarDecl 0x28b8a61d8b0 <col:55, col:71> col:71 used _Src 'const wchar_t *'
| |-ParmVarDecl 0x28b8a61d928 <col:82, col:89> col:89 used _MaxCount 'size_t':'unsigned long long'
| `-CompoundStmt 0x28b8a61ddb8 <line:306:1, line:308:1>
|   `-ReturnStmt 0x28b8a61dda8 <line:307:5, col:56>
|     `-ConditionalOperator 0x28b8a61dd78 <col:12, col:56> 'unsigned long long'
|       |-ParenExpr 0x28b8a61dbe0 <col:12, col:25> 'int'
|       | `-BinaryOperator 0x28b8a61dbc0 <col:13, line:36:27> 'int' '=='
|       |   |-ImplicitCastExpr 0x28b8a61db90 <line:307:13> 'const wchar_t *' <LValueToRValue>
|       |   | `-DeclRefExpr 0x28b8a61dae8 <col:13> 'const wchar_t *' lvalue ParmVar 0x28b8a61d8b0 '_Src' 'const wchar_t *'
|       |   `-ImplicitCastExpr 0x28b8a61dba8 <line:36:17, col:27> 'const wchar_t *' <BitCast>
|       |     `-ParenExpr 0x28b8a61db70 <col:17, col:27> 'void *'
|       |       `-CStyleCastExpr 0x28b8a61db48 <col:18, col:26> 'void *' <NullToPointer>
|       |         `-IntegerLiteral 0x28b8a61db08 <col:26> 'int' 0
|       |-ImplicitCastExpr 0x28b8a61dd60 <line:307:29> 'unsigned long long' <IntegralCast>
|       | `-IntegerLiteral 0x28b8a61dc00 <col:29> 'int' 0
|       `-CallExpr 0x28b8a61dd00 <col:33, col:56> 'size_t':'unsigned long long'
|         |-ImplicitCastExpr 0x28b8a61dce8 <col:33> 'size_t (*)(const wchar_t *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x28b8a61dc28 <col:33> 'size_t (const wchar_t *, size_t) __attribute__((cdecl))':'size_t (const wchar_t *, size_t)' Function 0x28b8a61d7d8 'wcsnlen' 'size_t (const wchar_t *, size_t) __attribute__((cdecl))':'size_t (const wchar_t *, size_t)'
|         |-ImplicitCastExpr 0x28b8a61dd30 <col:41> 'const wchar_t *' <LValueToRValue>
|         | `-DeclRefExpr 0x28b8a61dc48 <col:41> 'const wchar_t *' lvalue ParmVar 0x28b8a61d8b0 '_Src' 'const wchar_t *'
|         `-ImplicitCastExpr 0x28b8a61dd48 <col:47> 'size_t':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x28b8a61dc68 <col:47> 'size_t':'unsigned long long' lvalue ParmVar 0x28b8a61d928 '_MaxCount' 'size_t':'unsigned long long'
|-FunctionDecl 0x28b8a6201a8 <line:311:40, col:212> col:56 wcsncat_s 'errno_t (wchar_t *, rsize_t, const wchar_t *, rsize_t) __attribute__((cdecl))':'errno_t (wchar_t *, rsize_t, const wchar_t *, rsize_t)'
| |-ParmVarDecl 0x28b8a61dde0 <col:98, col:108> col:108 _Dst 'wchar_t *'
| |-ParmVarDecl 0x28b8a61de58 <col:119, col:127> col:127 _SizeInWords 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x28b8a61ded0 <col:168, col:184> col:184 _Src 'const wchar_t *'
| `-ParmVarDecl 0x28b8a61df48 <col:195, col:203> col:203 _MaxCount 'rsize_t':'unsigned long long'
|-FunctionDecl 0x28b8a620610 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1980:149> D:\Microsoft Visual Studio 12.0\VC\include\string.h:316:86 wcsncat 'wchar_t *(wchar_t *, const wchar_t *, size_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, const wchar_t *, size_t)'
| |-ParmVarDecl 0x28b8a620350 <col:167, col:176> col:176 _Dest 'wchar_t *'
| |-ParmVarDecl 0x28b8a6203c8 <col:207, col:224> col:224 _Source 'const wchar_t *'
| |-ParmVarDecl 0x28b8a620440 <col:238, col:246> col:246 _Count 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x28b8a6206c8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using wcsncat_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x28b8a620ad8 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:318:36> col:36 implicit wcsncmp 'int (const unsigned short *, const unsigned short *, unsigned long long)' extern
| |-ParmVarDecl 0x28b8a620b78 <<invalid sloc>> <invalid sloc> 'const unsigned short *'
| |-ParmVarDecl 0x28b8a620be0 <<invalid sloc>> <invalid sloc> 'const unsigned short *'
| `-ParmVarDecl 0x28b8a620c48 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x28b8a620cc8 prev 0x28b8a620ad8 <col:24, col:165> col:36 wcsncmp 'int (const unsigned short *, const unsigned short *, unsigned long long)'
| |-ParmVarDecl 0x28b8a620808 <col:71, col:87> col:87 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x28b8a620880 <col:121, col:137> col:137 _Str2 'const wchar_t *'
| `-ParmVarDecl 0x28b8a6208f8 <col:149, col:156> col:156 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x28b8a6210d0 <line:320:40, col:209> col:56 wcsncpy_s 'errno_t (wchar_t *, rsize_t, const wchar_t *, rsize_t) __attribute__((cdecl))':'errno_t (wchar_t *, rsize_t, const wchar_t *, rsize_t)'
| |-ParmVarDecl 0x28b8a620da8 <col:95, col:105> col:105 _Dst 'wchar_t *'
| |-ParmVarDecl 0x28b8a620e20 <col:116, col:124> col:124 _SizeInWords 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x28b8a620e98 <col:165, col:181> col:181 _Src 'const wchar_t *'
| `-ParmVarDecl 0x28b8a620f10 <col:192, col:200> col:200 _MaxCount 'rsize_t':'unsigned long long'
|-FunctionDecl 0x28b8a621480 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1980:149> D:\Microsoft Visual Studio 12.0\VC\include\string.h:323:86 wcsncpy 'wchar_t *(wchar_t *, const wchar_t *, size_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, const wchar_t *, size_t)'
| |-ParmVarDecl 0x28b8a621278 <col:179, col:188> col:188 _Dest 'wchar_t *'
| |-ParmVarDecl 0x28b8a6212f0 <col:219, col:236> col:236 _Source 'const wchar_t *'
| |-ParmVarDecl 0x28b8a621368 <col:250, col:258> col:258 _Count 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x28b8a621538 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using wcsncpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x28b8a621898 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:324:38, col:124> col:56 wcspbrk 'wchar_t *(const wchar_t *, const wchar_t *) __attribute__((cdecl))':'wchar_t *(const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x28b8a621678 <col:71, col:87> col:87 _Str 'const wchar_t *'
| `-ParmVarDecl 0x28b8a6216f0 <col:100, col:116> col:116 _Control 'const wchar_t *'
|-FunctionDecl 0x28b8a621ae0 <line:325:38, col:109> col:56 wcsrchr 'wchar_t *(const wchar_t *, wchar_t) __attribute__((cdecl))':'wchar_t *(const wchar_t *, wchar_t)'
| |-ParmVarDecl 0x28b8a621970 <col:71, col:87> col:87 _Str 'const wchar_t *'
| `-ParmVarDecl 0x28b8a6219e8 <col:98, col:106> col:106 _Ch 'wchar_t':'unsigned short'
|-FunctionDecl 0x28b8a621d28 <line:326:24, col:106> col:39 wcsspn 'size_t (const wchar_t *, const wchar_t *) __attribute__((cdecl))':'size_t (const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x28b8a621bb8 <col:53, col:69> col:69 _Str 'const wchar_t *'
| `-ParmVarDecl 0x28b8a621c30 <col:82, col:98> col:98 _Control 'const wchar_t *'
|-FunctionDecl 0x28b8a621f70 <line:329:23, col:107> col:41 wcsstr 'wchar_t *(const wchar_t *, const wchar_t *) __attribute__((cdecl))':'wchar_t *(const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x28b8a621e00 <col:55, col:71> col:71 _Str 'const wchar_t *'
| `-ParmVarDecl 0x28b8a621e78 <col:84, col:100> col:100 _SubStr 'const wchar_t *'
|-FunctionDecl 0x28b8a622320 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:330:142> col:76 wcstok 'wchar_t *(wchar_t *, const wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x28b8a6221b0 <col:97, col:107> col:107 _Str 'wchar_t *'
| |-ParmVarDecl 0x28b8a622228 <col:120, col:136> col:136 _Delim 'const wchar_t *'
| `-DeprecatedAttr 0x28b8a6223d0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using wcstok_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x28b8a622830 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:332:36, col:173> col:54 wcstok_s 'wchar_t *(wchar_t *, const wchar_t *, wchar_t **) __attribute__((cdecl))':'wchar_t *(wchar_t *, const wchar_t *, wchar_t **)'
| |-ParmVarDecl 0x28b8a622510 <col:77, col:87> col:87 _Str 'wchar_t *'
| |-ParmVarDecl 0x28b8a622588 <col:100, col:116> col:116 _Delim 'const wchar_t *'
| `-ParmVarDecl 0x28b8a622660 <col:154, col:165> col:165 _Context 'wchar_t **'
|-FunctionDecl 0x28b8a622b50 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:334:105> col:79 _wcserror 'wchar_t *(int) __attribute__((cdecl))':'wchar_t *(int)'
| |-ParmVarDecl 0x28b8a6229d8 <col:94, col:98> col:98 _ErrNum 'int'
| `-DeprecatedAttr 0x28b8a622bf8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wcserror_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x28b8a623000 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:335:28, col:147> col:44 _wcserror_s 'errno_t (wchar_t *, size_t, int) __attribute__((cdecl))':'errno_t (wchar_t *, size_t, int)'
| |-ParmVarDecl 0x28b8a622d38 <col:89, col:99> col:99 _Buf 'wchar_t *'
| |-ParmVarDecl 0x28b8a622db0 <col:110, col:117> col:117 _SizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x28b8a622e30 <col:136, col:140> col:140 _ErrNum 'int'
|-FunctionDecl 0x28b8a61b250 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:337:122> col:80 __wcserror 'wchar_t *(const wchar_t *) __attribute__((cdecl))':'wchar_t *(const wchar_t *)'
| |-ParmVarDecl 0x28b8a61b178 <col:102, col:118> col:118 _Str 'const wchar_t *'
| `-DeprecatedAttr 0x28b8a61b2f8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using __wcserror_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x28b8a61b6c0 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:338:28, col:165> col:44 __wcserror_s 'errno_t (wchar_t *, size_t, const wchar_t *) __attribute__((cdecl))':'errno_t (wchar_t *, size_t, const wchar_t *)'
| |-ParmVarDecl 0x28b8a61b438 <col:90, col:100> col:100 _Buffer 'wchar_t *'
| |-ParmVarDecl 0x28b8a61b4b0 <col:114, col:121> col:121 _SizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x28b8a61b528 <col:142, col:158> col:158 _ErrMsg 'const wchar_t *'
|-FunctionDecl 0x28b8a61b918 <line:341:24, col:103> col:36 _wcsicmp 'int (const wchar_t *, const wchar_t *) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x28b8a61b7a0 <col:52, col:68> col:68 _Str1 'const wchar_t *'
| `-ParmVarDecl 0x28b8a61b818 <col:82, col:98> col:98 _Str2 'const wchar_t *'
|-FunctionDecl 0x28b8a61bcb8 <line:342:24, col:133> col:36 _wcsicmp_l 'int (const wchar_t *, const wchar_t *, _locale_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, _locale_t)'
| |-ParmVarDecl 0x28b8a61b9f0 <col:54, col:70> col:70 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x28b8a61ba68 <col:84, col:100> col:100 _Str2 'const wchar_t *'
| `-ParmVarDecl 0x28b8a61bae0 <col:116, col:126> col:126 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x28b8a61bfa8 <line:343:24, col:167> col:36 _wcsnicmp 'int (const wchar_t *, const wchar_t *, size_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, size_t)'
| |-ParmVarDecl 0x28b8a61bd98 <col:73, col:89> col:89 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x28b8a61be10 <col:123, col:139> col:139 _Str2 'const wchar_t *'
| `-ParmVarDecl 0x28b8a61be88 <col:151, col:158> col:158 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x28b8a6274d0 <line:344:24, col:197> col:36 _wcsnicmp_l 'int (const wchar_t *, const wchar_t *, size_t, _locale_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, size_t, _locale_t)'
| |-ParmVarDecl 0x28b8a627158 <col:75, col:91> col:91 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x28b8a6271d0 <col:125, col:141> col:141 _Str2 'const wchar_t *'
| |-ParmVarDecl 0x28b8a627248 <col:153, col:160> col:160 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x28b8a6272c0 <col:180, col:190> col:190 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x28b8a627928 <line:345:40, col:181> col:56 _wcsnset_s 'errno_t (wchar_t *, size_t, wchar_t, size_t) __attribute__((cdecl))':'errno_t (wchar_t *, size_t, wchar_t, size_t)'
| |-ParmVarDecl 0x28b8a6275b8 <col:99, col:109> col:109 _Dst 'wchar_t *'
| |-ParmVarDecl 0x28b8a627630 <col:120, col:127> col:127 _SizeInWords 'size_t':'unsigned long long'
| |-ParmVarDecl 0x28b8a6276a8 <col:146, col:154> col:154 _Val 'wchar_t':'unsigned short'
| `-ParmVarDecl 0x28b8a627720 <col:165, col:172> col:172 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x28b8a627d90 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1980:149> D:\Microsoft Visual Studio 12.0\VC\include\string.h:347:86 _wcsnset 'wchar_t *(wchar_t *, wchar_t, size_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, wchar_t, size_t)'
| |-ParmVarDecl 0x28b8a627ad0 <col:172, col:181> col:181 _Str 'wchar_t *'
| |-ParmVarDecl 0x28b8a627b48 <col:187, col:196> col:196 _Val 'wchar_t':'unsigned short'
| |-ParmVarDecl 0x28b8a627bc0 <col:207, col:215> col:215 _MaxCount 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x28b8a627e48 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wcsnset_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x28b8a626120 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:348:9, col:59> col:27 _wcsrev 'wchar_t *(wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *)'
| `-ParmVarDecl 0x28b8a627f88 <col:45, col:55> col:55 _Str 'wchar_t *'
|-FunctionDecl 0x28b8a6264b0 <line:349:40, col:159> col:56 _wcsset_s 'errno_t (wchar_t *, size_t, wchar_t) __attribute__((cdecl))':'errno_t (wchar_t *, size_t, wchar_t)'
| |-ParmVarDecl 0x28b8a6261f0 <col:98, col:108> col:108 _Dst 'wchar_t *'
| |-ParmVarDecl 0x28b8a626268 <col:119, col:126> col:126 _SizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x28b8a6262e0 <col:145, col:153> col:153 _Value 'wchar_t':'unsigned short'
|-FunctionDecl 0x28b8a626868 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:351:85 _wcsset 'wchar_t *(wchar_t *, wchar_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, wchar_t)'
| |-ParmVarDecl 0x28b8a626650 <col:150, col:159> col:159 _Str 'wchar_t *'
| |-ParmVarDecl 0x28b8a6266c8 <col:165, col:174> col:174 _Val 'wchar_t':'unsigned short'
| `-DeprecatedAttr 0x28b8a626918 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wcsset_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x28b8a626c78 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:353:28, col:126> col:44 _wcslwr_s 'errno_t (wchar_t *, size_t) __attribute__((cdecl))':'errno_t (wchar_t *, size_t)'
| |-ParmVarDecl 0x28b8a626a58 <col:86, col:96> col:96 _Str 'wchar_t *'
| `-ParmVarDecl 0x28b8a626ad0 <col:107, col:114> col:114 _SizeInWords 'size_t':'unsigned long long'
|-FunctionDecl 0x28b8a626ee8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1933:117> D:\Microsoft Visual Studio 12.0\VC\include\string.h:355:82 _wcslwr 'wchar_t *(wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *)'
| |-ParmVarDecl 0x28b8a626e10 <col:102, col:111> col:111 _String 'wchar_t *'
| `-DeprecatedAttr 0x28b8a626f90 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wcslwr_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x28b8a62a420 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:356:28, col:156> col:44 _wcslwr_s_l 'errno_t (wchar_t *, size_t, _locale_t) __attribute__((cdecl))':'errno_t (wchar_t *, size_t, _locale_t)'
| |-ParmVarDecl 0x28b8a62a160 <col:88, col:98> col:98 _Str 'wchar_t *'
| |-ParmVarDecl 0x28b8a62a1d8 <col:109, col:116> col:116 _SizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x28b8a62a250 <col:139, col:149> col:149 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x28b8a62a7d8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:358:85 _wcslwr_l 'wchar_t *(wchar_t *, _locale_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, _locale_t)'
| |-ParmVarDecl 0x28b8a62a5c0 <col:154, col:163> col:163 _String 'wchar_t *'
| |-ParmVarDecl 0x28b8a62a638 <col:181, col:192> col:192 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x28b8a62a888 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wcslwr_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x28b8a62ab38 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:359:28, col:112> col:44 _wcsupr_s 'errno_t (wchar_t *, size_t) __attribute__((cdecl))':'errno_t (wchar_t *, size_t)'
| |-ParmVarDecl 0x28b8a62a9c8 <col:79, col:89> col:89 _Str 'wchar_t *'
| `-ParmVarDecl 0x28b8a62aa40 <col:100, col:107> col:107 _Size 'size_t':'unsigned long long'
|-FunctionDecl 0x28b8a62ada8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1933:117> D:\Microsoft Visual Studio 12.0\VC\include\string.h:361:82 _wcsupr 'wchar_t *(wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *)'
| |-ParmVarDecl 0x28b8a62acd0 <col:102, col:111> col:111 _String 'wchar_t *'
| `-DeprecatedAttr 0x28b8a62ae50 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wcsupr_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x28b8a629190 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:362:28, col:142> col:44 _wcsupr_s_l 'errno_t (wchar_t *, size_t, _locale_t) __attribute__((cdecl))':'errno_t (wchar_t *, size_t, _locale_t)'
| |-ParmVarDecl 0x28b8a62af90 <col:81, col:91> col:91 _Str 'wchar_t *'
| |-ParmVarDecl 0x28b8a62b008 <col:102, col:109> col:109 _Size 'size_t':'unsigned long long'
| `-ParmVarDecl 0x28b8a62b080 <col:125, col:135> col:135 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x28b8a6294a0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:364:85 _wcsupr_l 'wchar_t *(wchar_t *, _locale_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, _locale_t)'
| |-ParmVarDecl 0x28b8a629330 <col:154, col:163> col:163 _String 'wchar_t *'
| |-ParmVarDecl 0x28b8a6293a8 <col:181, col:192> col:192 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x28b8a629550 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wcsupr_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x28b8a629950 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:365:28, col:159> col:43 wcsxfrm 'size_t (wchar_t *, const wchar_t *, size_t) __attribute__((cdecl))':'size_t (wchar_t *, const wchar_t *, size_t)'
| |-ParmVarDecl 0x28b8a629690 <col:93, col:103> col:103 _Dst 'wchar_t *'
| |-ParmVarDecl 0x28b8a629708 <col:116, col:132> col:132 _Src 'const wchar_t *'
| `-ParmVarDecl 0x28b8a629780 <col:143, col:150> col:150 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x28b8a629d98 <line:366:28, col:189> col:43 _wcsxfrm_l 'size_t (wchar_t *, const wchar_t *, size_t, _locale_t) __attribute__((cdecl))':'size_t (wchar_t *, const wchar_t *, size_t, _locale_t)'
| |-ParmVarDecl 0x28b8a629a30 <col:96, col:106> col:106 _Dst 'wchar_t *'
| |-ParmVarDecl 0x28b8a629aa8 <col:119, col:134> col:134 _Src 'const wchar_t *'
| |-ParmVarDecl 0x28b8a629b20 <col:145, col:152> col:152 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x28b8a629b98 <col:172, col:182> col:182 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x28b8a629ff8 <line:367:24, col:102> col:36 wcscoll 'int (const wchar_t *, const wchar_t *) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x28b8a629e80 <col:51, col:67> col:67 _Str1 'const wchar_t *'
| `-ParmVarDecl 0x28b8a629ef8 <col:81, col:97> col:97 _Str2 'const wchar_t *'
|-FunctionDecl 0x28b8a6282d8 <line:368:24, col:133> col:36 _wcscoll_l 'int (const wchar_t *, const wchar_t *, _locale_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, _locale_t)'
| |-ParmVarDecl 0x28b8a62a0d0 <col:54, col:70> col:70 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x28b8a628140 <col:84, col:100> col:100 _Str2 'const wchar_t *'
| `-ParmVarDecl 0x28b8a6281b8 <col:116, col:126> col:126 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x28b8a628530 <line:369:24, col:104> col:36 _wcsicoll 'int (const wchar_t *, const wchar_t *) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x28b8a6283b8 <col:53, col:69> col:69 _Str1 'const wchar_t *'
| `-ParmVarDecl 0x28b8a628430 <col:83, col:99> col:99 _Str2 'const wchar_t *'
|-FunctionDecl 0x28b8a628818 <line:370:24, col:133> col:36 _wcsicoll_l 'int (const wchar_t *, const wchar_t *, _locale_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, _locale_t)'
| |-ParmVarDecl 0x28b8a628608 <col:55, col:71> col:71 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x28b8a628680 <col:85, col:100> col:100 _Str2 'const wchar_t *'
| `-ParmVarDecl 0x28b8a6286f8 <col:116, col:126> col:126 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x28b8a628b08 <line:371:24, col:167> col:36 _wcsncoll 'int (const wchar_t *, const wchar_t *, size_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, size_t)'
| |-ParmVarDecl 0x28b8a6288f8 <col:73, col:89> col:89 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x28b8a628970 <col:123, col:139> col:139 _Str2 'const wchar_t *'
| `-ParmVarDecl 0x28b8a6289e8 <col:151, col:158> col:158 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x28b8a628e90 <line:372:24, col:197> col:36 _wcsncoll_l 'int (const wchar_t *, const wchar_t *, size_t, _locale_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, size_t, _locale_t)'
| |-ParmVarDecl 0x28b8a628be8 <col:75, col:91> col:91 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x28b8a628c60 <col:125, col:141> col:141 _Str2 'const wchar_t *'
| |-ParmVarDecl 0x28b8a628cd8 <col:153, col:160> col:160 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x28b8a628d50 <col:180, col:190> col:190 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x28b8a623138 <line:373:24, col:168> col:36 _wcsnicoll 'int (const wchar_t *, const wchar_t *, size_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, size_t)'
| |-ParmVarDecl 0x28b8a628f78 <col:74, col:90> col:90 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x28b8a628ff0 <col:124, col:140> col:140 _Str2 'const wchar_t *'
| `-ParmVarDecl 0x28b8a629068 <col:152, col:159> col:159 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x28b8a6234c0 <line:374:24, col:198> col:36 _wcsnicoll_l 'int (const wchar_t *, const wchar_t *, size_t, _locale_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, size_t, _locale_t)'
| |-ParmVarDecl 0x28b8a623218 <col:76, col:92> col:92 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x28b8a623290 <col:126, col:142> col:142 _Str2 'const wchar_t *'
| |-ParmVarDecl 0x28b8a623308 <col:154, col:161> col:161 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x28b8a623380 <col:181, col:191> col:191 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x28b8a623720 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:403:108> col:74 wcsdup 'wchar_t *(const wchar_t *) __attribute__((cdecl))':'wchar_t *(const wchar_t *)'
| |-ParmVarDecl 0x28b8a623648 <col:88, col:104> col:104 _Str 'const wchar_t *'
| `-DeprecatedAttr 0x28b8a6237c8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsdup. See online help for details." ""
|-FunctionDecl 0x28b8a623b00 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:413:135> col:69 wcsicmp 'int (const wchar_t *, const wchar_t *) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x28b8a623988 <col:84, col:100> col:100 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x28b8a623a00 <col:114, col:130> col:130 _Str2 'const wchar_t *'
| `-DeprecatedAttr 0x28b8a623bb0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsicmp. See online help for details." ""
|-FunctionDecl 0x28b8a623f80 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:414:200> col:70 wcsnicmp 'int (const wchar_t *, const wchar_t *, size_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, size_t)'
| |-ParmVarDecl 0x28b8a623d70 <col:106, col:122> col:122 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x28b8a623de8 <col:156, col:172> col:172 _Str2 'const wchar_t *'
| |-ParmVarDecl 0x28b8a623e60 <col:184, col:191> col:191 _MaxCount 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x28b8a624038 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsnicmp. See online help for details." ""
|-FunctionDecl 0x28b8a62b4f0 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:415:153> col:60 wcsnset 'wchar_t *(wchar_t *, wchar_t, size_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, wchar_t, size_t)'
| |-ParmVarDecl 0x28b8a62b2e8 <col:97, col:107> col:107 _Str 'wchar_t *'
| |-ParmVarDecl 0x28b8a62b360 <col:118, col:126> col:126 _Val 'wchar_t':'unsigned short'
| |-ParmVarDecl 0x28b8a62b3d8 <col:137, col:144> col:144 _MaxCount 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x28b8a62b5a8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsnset. See online help for details." ""
|-FunctionDecl 0x28b8a62b840 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:416:90> col:59 wcsrev 'wchar_t *(wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *)'
| |-ParmVarDecl 0x28b8a62b768 <col:76, col:86> col:86 _Str 'wchar_t *'
| `-DeprecatedAttr 0x28b8a62b8e8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsrev. See online help for details." ""
|-FunctionDecl 0x28b8a62bc18 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:417:104> col:59 wcsset 'wchar_t *(wchar_t *, wchar_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, wchar_t)'
| |-ParmVarDecl 0x28b8a62baa8 <col:76, col:86> col:86 _Str 'wchar_t *'
| |-ParmVarDecl 0x28b8a62bb20 <col:92, col:100> col:100 _Val 'wchar_t':'unsigned short'
| `-DeprecatedAttr 0x28b8a62bcc8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsset. See online help for details." ""
|-FunctionDecl 0x28b8a62bf60 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:418:90> col:59 wcslwr 'wchar_t *(wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *)'
| |-ParmVarDecl 0x28b8a62be88 <col:76, col:86> col:86 _Str 'wchar_t *'
| `-DeprecatedAttr 0x28b8a62c008 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcslwr. See online help for details." ""
|-FunctionDecl 0x28b8a62c308 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:419:90> col:59 wcsupr 'wchar_t *(wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *)'
| |-ParmVarDecl 0x28b8a62c230 <col:76, col:86> col:86 _Str 'wchar_t *'
| `-DeprecatedAttr 0x28b8a62c3b0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsupr. See online help for details." ""
|-FunctionDecl 0x28b8a62c6e8 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:420:137> col:70 wcsicoll 'int (const wchar_t *, const wchar_t *) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x28b8a62c570 <col:86, col:102> col:102 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x28b8a62c5e8 <col:116, col:132> col:132 _Str2 'const wchar_t *'
| `-DeprecatedAttr 0x28b8a62c798 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsicoll. See online help for details." ""
|-TypedefDecl 0x28b8a62ca98 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:52:1, col:24> col:24 referenced _onexit_t 'int (*)(void) __attribute__((cdecl))'
| `-PointerType 0x28b8a62ca30 'int (*)(void) __attribute__((cdecl))'
|   `-AttributedType 0x28b8a62c9d0 'int (void) __attribute__((cdecl))' sugar
|     |-ParenType 0x28b8a62c980 'int (void)' sugar
|     | `-FunctionProtoType 0x28b8a62c950 'int (void)' cdecl
|     |   `-BuiltinType 0x28b88b729f0 'int'
|     `-ParenType 0x28b8a62c980 'int (void)' sugar
|       `-FunctionProtoType 0x28b8a62c950 'int (void)' cdecl
|         `-BuiltinType 0x28b88b729f0 'int'
|-RecordDecl 0x28b8a62caf0 <line:75:9, line:78:1> line:75:16 struct _div_t definition
| |-MaxFieldAlignmentAttr 0x28b8a62cbb0 <<invalid sloc>> Implicit 64
| |-FieldDecl 0x28b8a62cc28 <line:76:9, col:13> col:13 quot 'int'
| `-FieldDecl 0x28b8a62cc98 <line:77:9, col:13> col:13 rem 'int'
|-TypedefDecl 0x28b8a62cd48 <line:75:1, line:78:3> col:3 referenced div_t 'struct _div_t':'struct _div_t'
| `-ElaboratedType 0x28b8a62ccf0 'struct _div_t' sugar
|   `-RecordType 0x28b8a62cb90 'struct _div_t'
|     `-Record 0x28b8a62caf0 '_div_t'
|-RecordDecl 0x28b8a62cdb8 <line:80:9, line:83:1> line:80:16 struct _ldiv_t definition
| |-MaxFieldAlignmentAttr 0x28b8a62ce70 <<invalid sloc>> Implicit 64
| |-FieldDecl 0x28b8a62cee8 <line:81:9, col:14> col:14 quot 'long'
| `-FieldDecl 0x28b8a62cf58 <line:82:9, col:14> col:14 rem 'long'
|-TypedefDecl 0x28b8a62d008 <line:80:1, line:83:3> col:3 referenced ldiv_t 'struct _ldiv_t':'struct _ldiv_t'
| `-ElaboratedType 0x28b8a62cfb0 'struct _ldiv_t' sugar
|   `-RecordType 0x28b8a62ce50 'struct _ldiv_t'
|     `-Record 0x28b8a62cdb8 '_ldiv_t'
|-RecordDecl 0x28b8a62d078 <line:85:9, line:88:1> line:85:16 struct _lldiv_t definition
| |-MaxFieldAlignmentAttr 0x28b8a62d130 <<invalid sloc>> Implicit 64
| |-FieldDecl 0x28b8a631028 <line:86:9, col:19> col:19 quot 'long long'
| `-FieldDecl 0x28b8a631098 <line:87:9, col:19> col:19 rem 'long long'
|-TypedefDecl 0x28b8a631148 <line:85:1, line:88:3> col:3 referenced lldiv_t 'struct _lldiv_t':'struct _lldiv_t'
| `-ElaboratedType 0x28b8a6310f0 'struct _lldiv_t' sugar
|   `-RecordType 0x28b8a62d110 'struct _lldiv_t'
|     `-Record 0x28b8a62d078 '_lldiv_t'
|-RecordDecl 0x28b8a6311e0 <line:103:9, line:105:1> line:103:9 struct definition
| |-MaxFieldAlignmentAttr 0x28b8a6312a0 <<invalid sloc>> Implicit 32
| `-FieldDecl 0x28b8a6313a0 <line:104:5, col:24> col:19 ld 'unsigned char [10]'
|-TypedefDecl 0x28b8a631458 <line:103:1, line:105:3> col:3 referenced _LDOUBLE 'struct _LDOUBLE':'_LDOUBLE'
| `-ElaboratedType 0x28b8a631400 'struct _LDOUBLE' sugar
|   `-RecordType 0x28b8a631280 '_LDOUBLE'
|     `-Record 0x28b8a6311e0 ''
|-RecordDecl 0x28b8a6314c8 <line:122:9, line:124:1> line:122:9 struct definition
| `-FieldDecl 0x28b8a631598 <line:123:9, col:16> col:16 x 'double'
|-TypedefDecl 0x28b8a631648 <line:122:1, line:124:3> col:3 referenced _CRT_DOUBLE 'struct _CRT_DOUBLE':'_CRT_DOUBLE'
| `-ElaboratedType 0x28b8a6315f0 'struct _CRT_DOUBLE' sugar
|   `-RecordType 0x28b8a631560 '_CRT_DOUBLE'
|     `-Record 0x28b8a6314c8 ''
|-RecordDecl 0x28b8a6316b8 <line:126:9, line:128:1> line:126:9 struct definition
| `-FieldDecl 0x28b8a631788 <line:127:5, col:11> col:11 f 'float'
|-TypedefDecl 0x28b8a631838 <line:126:1, line:128:3> col:3 referenced _CRT_FLOAT 'struct _CRT_FLOAT':'_CRT_FLOAT'
| `-ElaboratedType 0x28b8a6317e0 'struct _CRT_FLOAT' sugar
|   `-RecordType 0x28b8a631750 '_CRT_FLOAT'
|     `-Record 0x28b8a6316b8 ''
|-RecordDecl 0x28b8a6318a8 <line:134:9, line:139:1> line:134:9 struct definition
| `-FieldDecl 0x28b8a631978 <line:138:9, col:21> col:21 x 'long double'
|-TypedefDecl 0x28b8a631a28 <line:134:1, line:139:3> col:3 _LONGDOUBLE 'struct _LONGDOUBLE':'_LONGDOUBLE'
| `-ElaboratedType 0x28b8a6319d0 'struct _LONGDOUBLE' sugar
|   `-RecordType 0x28b8a631940 '_LONGDOUBLE'
|     `-Record 0x28b8a6318a8 ''
|-RecordDecl 0x28b8a631ac0 <line:144:9, line:146:1> line:144:9 struct definition
| |-MaxFieldAlignmentAttr 0x28b8a631b80 <<invalid sloc>> Implicit 32
| `-FieldDecl 0x28b8a631c80 <line:145:5, col:26> col:19 ld12 'unsigned char [12]'
|-TypedefDecl 0x28b8a631d38 <line:144:1, line:146:3> col:3 _LDBL12 'struct _LDBL12':'_LDBL12'
| `-ElaboratedType 0x28b8a631ce0 'struct _LDBL12' sugar
|   `-RecordType 0x28b8a631b60 '_LDBL12'
|     `-Record 0x28b8a631ac0 ''
|-VarDecl 0x28b8a631dc0 <line:170:9, col:20> col:20 __mb_cur_max 'int' extern
|-FunctionDecl 0x28b8a631f40 <line:175:9, col:44> col:21 ___mb_cur_max_func 'int (void) __attribute__((cdecl))':'int (void)'
|-FunctionDecl 0x28b8a6361b8 <line:176:9, col:51> col:21 ___mb_cur_max_l_func 'int (_locale_t) __attribute__((cdecl))':'int (_locale_t)'
| `-ParmVarDecl 0x28b8a636058 <col:42> col:51 '_locale_t':'struct localeinfo_struct *'
|-TypedefDecl 0x28b8a636400 <line:215:1, col:24> col:24 referenced _purecall_handler 'void (*)(void) __attribute__((cdecl))'
| `-PointerType 0x28b8a6363a0 'void (*)(void) __attribute__((cdecl))'
|   `-AttributedType 0x28b8a636340 'void (void) __attribute__((cdecl))' sugar
|     |-ParenType 0x28b8a6362f0 'void (void)' sugar
|     | `-FunctionProtoType 0x28b8a586ca0 'void (void)' cdecl
|     |   `-BuiltinType 0x28b88b72950 'void'
|     `-ParenType 0x28b8a6362f0 'void (void)' sugar
|       `-FunctionProtoType 0x28b8a586ca0 'void (void)' cdecl
|         `-BuiltinType 0x28b88b72950 'void'
|-FunctionDecl 0x28b8a636600 <line:218:9, col:92> col:35 _set_purecall_handler '_purecall_handler (_purecall_handler) __attribute__((cdecl))':'_purecall_handler (_purecall_handler)'
| `-ParmVarDecl 0x28b8a636490 <col:66, col:84> col:84 _Handler '_purecall_handler':'void (*)(void) __attribute__((cdecl))'
|-FunctionDecl 0x28b8a636818 <line:219:9, col:61> col:35 _get_purecall_handler '_purecall_handler (void) __attribute__((cdecl))':'_purecall_handler (void)'
|-TypedefDecl 0x28b8a636c68 <line:235:1, col:24> col:24 referenced _invalid_parameter_handler 'void (*)(const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t) __attribute__((cdecl))'
| `-PointerType 0x28b8a636be0 'void (*)(const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t) __attribute__((cdecl))'
|   `-AttributedType 0x28b8a636b80 'void (const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t) __attribute__((cdecl))' sugar
|     |-ParenType 0x28b8a636b30 'void (const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t)' sugar
|     | `-FunctionProtoType 0x28b8a5ae220 'void (const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t)' cdecl
|     |   |-BuiltinType 0x28b88b72950 'void'
|     |   |-PointerType 0x28b8a587070 'const wchar_t *'
|     |   | `-QualType 0x28b8a587021 'const wchar_t' const
|     |   |   `-TypedefType 0x28b8a587020 'wchar_t' sugar
|     |   |     |-Typedef 0x28b8a586910 'wchar_t'
|     |   |     `-BuiltinType 0x28b88b72a70 'unsigned short'
|     |   |-PointerType 0x28b8a587070 'const wchar_t *'
|     |   | `-QualType 0x28b8a587021 'const wchar_t' const
|     |   |   `-TypedefType 0x28b8a587020 'wchar_t' sugar
|     |   |     |-Typedef 0x28b8a586910 'wchar_t'
|     |   |     `-BuiltinType 0x28b88b72a70 'unsigned short'
|     |   |-PointerType 0x28b8a587070 'const wchar_t *'
|     |   | `-QualType 0x28b8a587021 'const wchar_t' const
|     |   |   `-TypedefType 0x28b8a587020 'wchar_t' sugar
|     |   |     |-Typedef 0x28b8a586910 'wchar_t'
|     |   |     `-BuiltinType 0x28b88b72a70 'unsigned short'
|     |   |-BuiltinType 0x28b88b72a90 'unsigned int'
|     |   `-TypedefType 0x28b8a587280 'uintptr_t' sugar
|     |     |-Typedef 0x28b88b73770 'uintptr_t'
|     |     `-BuiltinType 0x28b88b72ad0 'unsigned long long'
|     `-ParenType 0x28b8a636b30 'void (const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t)' sugar
|       `-FunctionProtoType 0x28b8a5ae220 'void (const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t)' cdecl
|         |-BuiltinType 0x28b88b72950 'void'
|         |-PointerType 0x28b8a587070 'const wchar_t *'
|         | `-QualType 0x28b8a587021 'const wchar_t' const
|         |   `-TypedefType 0x28b8a587020 'wchar_t' sugar
|         |     |-Typedef 0x28b8a586910 'wchar_t'
|         |     `-BuiltinType 0x28b88b72a70 'unsigned short'
|         |-PointerType 0x28b8a587070 'const wchar_t *'
|         | `-QualType 0x28b8a587021 'const wchar_t' const
|         |   `-TypedefType 0x28b8a587020 'wchar_t' sugar
|         |     |-Typedef 0x28b8a586910 'wchar_t'
|         |     `-BuiltinType 0x28b88b72a70 'unsigned short'
|         |-PointerType 0x28b8a587070 'const wchar_t *'
|         | `-QualType 0x28b8a587021 'const wchar_t' const
|         |   `-TypedefType 0x28b8a587020 'wchar_t' sugar
|         |     |-Typedef 0x28b8a586910 'wchar_t'
|         |     `-BuiltinType 0x28b88b72a70 'unsigned short'
|         |-BuiltinType 0x28b88b72a90 'unsigned int'
|         `-TypedefType 0x28b8a587280 'uintptr_t' sugar
|           |-Typedef 0x28b88b73770 'uintptr_t'
|           `-BuiltinType 0x28b88b72ad0 'unsigned long long'
|-FunctionDecl 0x28b8a636e60 <line:238:9, col:119> col:44 _set_invalid_parameter_handler '_invalid_parameter_handler (_invalid_parameter_handler) __attribute__((cdecl))':'_invalid_parameter_handler (_invalid_parameter_handler)'
| `-ParmVarDecl 0x28b8a636cf0 <col:84, col:111> col:111 _Handler '_invalid_parameter_handler':'void (*)(const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t) __attribute__((cdecl))'
|-FunctionDecl 0x28b8a6390b8 <line:239:9, col:79> col:44 _get_invalid_parameter_handler '_invalid_parameter_handler (void) __attribute__((cdecl))':'_invalid_parameter_handler (void)'
|-FunctionDecl 0x28b8a6392a0 <line:245:9, col:41> col:30 _errno 'int *(void) __attribute__((cdecl))':'int *(void)' extern
|-FunctionDecl 0x28b8a6394e0 <line:248:1, col:43> col:17 _set_errno 'errno_t (int) __attribute__((cdecl))':'errno_t (int)'
| `-ParmVarDecl 0x28b8a639370 <col:33, col:37> col:37 _Value 'int'
|-FunctionDecl 0x28b8a639730 <line:249:1, col:46> col:17 _get_errno 'errno_t (int *) __attribute__((cdecl))':'errno_t (int *)'
| `-ParmVarDecl 0x28b8a6395b8 <col:34, col:40> col:40 _Value 'int *'
|-FunctionDecl 0x28b8a639950 <line:252:9, col:48> col:33 __doserrno 'unsigned long *(void) __attribute__((cdecl))':'unsigned long *(void)'
|-FunctionDecl 0x28b8a639b90 <line:255:1, col:56> col:17 _set_doserrno 'errno_t (unsigned long) __attribute__((cdecl))':'errno_t (unsigned long)'
| `-ParmVarDecl 0x28b8a639a20 <col:36, col:50> col:50 _Value 'unsigned long'
|-FunctionDecl 0x28b8a639de0 <line:256:1, col:59> col:17 _get_doserrno 'errno_t (unsigned long *) __attribute__((cdecl))':'errno_t (unsigned long *)'
| `-ParmVarDecl 0x28b8a639c68 <col:37, col:53> col:53 _Value 'unsigned long *'
|-FunctionDecl 0x28b8a63d0d0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:259:77> col:59 __sys_errlist 'char **(void) __attribute__((cdecl))':'char **(void)'
| `-DeprecatedAttr 0x28b8a63d170 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using strerror instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x28b8a63d430 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:262:72> col:57 __sys_nerr 'int *(void) __attribute__((cdecl))':'int *(void)'
| `-DeprecatedAttr 0x28b8a63d4d0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using strerror instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-VarDecl 0x28b8a63d618 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:288:9, col:20> col:20 __argc 'int' extern
|-VarDecl 0x28b8a63d6b0 <line:289:9, col:24> col:24 __argv 'char **' extern
|-VarDecl 0x28b8a63d748 <line:290:9, col:27> col:27 __wargv 'wchar_t **' extern
|-VarDecl 0x28b8a63d7e0 <line:306:9, col:24> col:24 _environ 'char **' extern
|-VarDecl 0x28b8a63d878 <line:307:9, col:27> col:27 _wenviron 'wchar_t **' extern
|-VarDecl 0x28b8a63d9d0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:311:68> col:68 _pgmptr 'char *' extern
| `-DeprecatedAttr 0x28b8a63da38 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _get_pgmptr instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-VarDecl 0x28b8a63dc38 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:312:72> col:72 _wpgmptr 'wchar_t *' extern
| `-DeprecatedAttr 0x28b8a63dca0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _get_wpgmptr instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x28b8a63df60 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:339:1, col:61> col:17 _get_pgmptr 'errno_t (char **) __attribute__((cdecl))':'errno_t (char **)'
| `-ParmVarDecl 0x28b8a63dde8 <col:47, col:55> col:55 _Value 'char **'
|-FunctionDecl 0x28b8a63b190 <line:340:1, col:65> col:17 _get_wpgmptr 'errno_t (wchar_t **) __attribute__((cdecl))':'errno_t (wchar_t **)'
| `-ParmVarDecl 0x28b8a63e038 <col:48, col:59> col:59 _Value 'wchar_t **'
|-VarDecl 0x28b8a63b328 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:346:64> col:64 _fmode 'int' extern
| `-DeprecatedAttr 0x28b8a63b390 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _get_fmode instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x28b8a63b5b0 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:353:9, col:50> col:25 _set_fmode 'errno_t (int) __attribute__((cdecl))':'errno_t (int)'
| `-ParmVarDecl 0x28b8a63b4d8 <col:41, col:45> col:45 _Mode 'int'
|-FunctionDecl 0x28b8a63b760 <line:354:9, col:54> col:25 _get_fmode 'errno_t (int *) __attribute__((cdecl))':'errno_t (int *)'
| `-ParmVarDecl 0x28b8a63b688 <col:42, col:48> col:48 _PMode 'int *'
|-FunctionDecl 0x28b8a63b9b0 <line:376:43> col:43 implicit exit 'void (int) __attribute__((noreturn))' extern
| `-ParmVarDecl 0x28b8a63ba50 <<invalid sloc>> <invalid sloc> 'int'
|-FunctionDecl 0x28b8a63bac0 prev 0x28b8a63b9b0 <col:9, col:62> col:43 exit 'void (int) __attribute__((noreturn))'
| `-ParmVarDecl 0x28b8a63b838 <col:53, col:57> col:57 _Code 'int'
|-FunctionDecl 0x28b8a63bc70 <line:378:43> col:43 implicit _exit 'void (int) __attribute__((noreturn))' extern
| `-ParmVarDecl 0x28b8a63bd10 <<invalid sloc>> <invalid sloc> 'int'
|-FunctionDecl 0x28b8a63bd80 prev 0x28b8a63bc70 <col:9, col:63> col:43 _exit 'void (int) __attribute__((noreturn))'
| `-ParmVarDecl 0x28b8a63bb98 <col:54, col:58> col:58 _Code 'int'
|-FunctionDecl 0x28b8a63bf08 <line:379:43> col:43 implicit abort 'void (void) __attribute__((noreturn))' extern
|-FunctionDecl 0x28b8a63bfa8 prev 0x28b8a63bf08 <col:9, col:53> col:43 abort 'void (void) __attribute__((noreturn))'
|-FunctionDecl 0x28b8a638240 <line:382:9, col:99> col:30 _set_abort_behavior 'unsigned int (unsigned int, unsigned int) __attribute__((cdecl))':'unsigned int (unsigned int, unsigned int)'
| |-ParmVarDecl 0x28b8a638050 <col:55, col:68> col:68 _Flags 'unsigned int'
| `-ParmVarDecl 0x28b8a6380d0 <col:81, col:94> col:94 _Mask 'unsigned int'
|-FunctionDecl 0x28b8a638438 <line:384:19> col:19 implicit abs 'int (int)' extern
| |-ParmVarDecl 0x28b8a6384d8 <<invalid sloc>> <invalid sloc> 'int'
| |-NoThrowAttr 0x28b8a638548 <col:19> Implicit
| `-ConstAttr 0x28b8a6385a0 <col:19> Implicit
|-FunctionDecl 0x28b8a6385c8 prev 0x28b8a638438 <col:1, col:34> col:19 abs 'int (int)'
| |-ParmVarDecl 0x28b8a638320 <col:28, col:32> col:32 _X 'int'
| |-NoThrowAttr 0x28b8a6386b8 <col:19> Inherited Implicit
| `-ConstAttr 0x28b8a6386e0 <col:19> Inherited Implicit
|-FunctionDecl 0x28b8a638868 <line:385:19> col:19 implicit labs 'long (long)' extern
| |-ParmVarDecl 0x28b8a638908 <<invalid sloc>> <invalid sloc> 'long'
| |-NoThrowAttr 0x28b8a638978 <col:19> Implicit
| `-ConstAttr 0x28b8a6389d0 <col:19> Implicit
|-FunctionDecl 0x28b8a6389f8 prev 0x28b8a638868 <col:1, col:36> col:19 labs 'long (long)'
| |-ParmVarDecl 0x28b8a638720 <col:29, col:34> col:34 _X 'long'
| |-NoThrowAttr 0x28b8a638ae8 <col:19> Inherited Implicit
| `-ConstAttr 0x28b8a638b10 <col:19> Inherited Implicit
|-FunctionDecl 0x28b8a638c98 <line:386:19> col:19 implicit llabs 'long long (long long)' extern
| |-ParmVarDecl 0x28b8a638d38 <<invalid sloc>> <invalid sloc> 'long long'
| |-NoThrowAttr 0x28b8a638da8 <col:19> Implicit
| `-ConstAttr 0x28b8a638e00 <col:19> Implicit
|-FunctionDecl 0x28b8a638e28 prev 0x28b8a638c98 <col:1, col:42> col:19 llabs 'long long (long long)'
| |-ParmVarDecl 0x28b8a638b50 <col:30, col:40> col:40 _X 'long long'
| |-NoThrowAttr 0x28b8a638f18 <col:19> Inherited Implicit
| `-ConstAttr 0x28b8a638f40 <col:19> Inherited Implicit
|-FunctionDecl 0x28b8a637040 <line:388:9, col:42> col:28 _abs64 'long long (long long) __attribute__((cdecl))':'long long (long long)'
| `-ParmVarDecl 0x28b8a638f80 <col:35> col:42 'long long'
|-FunctionDecl 0x28b8a637338 <line:426:9, col:53> col:24 atexit 'int (void (*)(void) __attribute__((cdecl))) __attribute__((cdecl))':'int (void (*)(void) __attribute__((cdecl)))'
| `-ParmVarDecl 0x28b8a6371d8 <col:31, col:45> col:46 'void (*)(void) __attribute__((cdecl))'
|-FunctionDecl 0x28b8a637558 <line:428:24, col:71> col:40 atof 'double (const char *) __attribute__((cdecl))':'double (const char *)'
| `-ParmVarDecl 0x28b8a637410 <col:52, col:64> col:64 _String 'const char *'
|-FunctionDecl 0x28b8a637850 <line:429:24, col:102> col:40 _atof_l 'double (const char *, _locale_t) __attribute__((cdecl))':'double (const char *, _locale_t)'
| |-ParmVarDecl 0x28b8a637630 <col:55, col:67> col:67 _String 'const char *'
| `-ParmVarDecl 0x28b8a6376a8 <col:85, col:95> col:95 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x28b8a637a78 <line:430:43, col:86> col:58 atoi 'int (const char *) __attribute__((cdecl))':'int (const char *)'
| `-ParmVarDecl 0x28b8a637930 <col:70, col:82> col:82 _Str 'const char *'
|-FunctionDecl 0x28b8a637d70 <line:431:24, col:98> col:39 _atoi_l 'int (const char *, _locale_t) __attribute__((cdecl))':'int (const char *, _locale_t)'
| |-ParmVarDecl 0x28b8a637b50 <col:54, col:66> col:66 _Str 'const char *'
| `-ParmVarDecl 0x28b8a637bc8 <col:81, col:91> col:91 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x28b8a637f98 <line:432:24, col:67> col:39 atol 'long (const char *) __attribute__((cdecl))':'long (const char *)'
| `-ParmVarDecl 0x28b8a637e50 <col:51, col:63> col:63 _Str 'const char *'
|-FunctionDecl 0x28b8a641330 <line:433:24, col:98> col:39 _atol_l 'long (const char *, _locale_t) __attribute__((cdecl))':'long (const char *, _locale_t)'
| |-ParmVarDecl 0x28b8a641110 <col:54, col:66> col:66 _Str 'const char *'
| `-ParmVarDecl 0x28b8a641188 <col:81, col:91> col:91 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x28b8a641558 <line:434:24, col:71> col:42 atoll 'long long (const char *) __attribute__((cdecl))':'long long (const char *)'
| `-ParmVarDecl 0x28b8a641410 <col:55, col:67> col:67 _Str 'const char *'
|-FunctionDecl 0x28b8a641850 <line:435:24, col:102> col:42 _atoll_l 'long long (const char *, _locale_t) __attribute__((cdecl))':'long long (const char *, _locale_t)'
| |-ParmVarDecl 0x28b8a641630 <col:58, col:70> col:70 _Str 'const char *'
| `-ParmVarDecl 0x28b8a6416a8 <col:85, col:95> col:95 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x28b8a63f120 <line:439:24, line:441:97> line:439:39 bsearch_s 'void *(const void *, const void *, rsize_t, rsize_t, int (*)(void *, const void *, const void *) __attribute__((cdecl)), void *) __attribute__((cdecl))':'void *(const void *, const void *, rsize_t, rsize_t, int (*)(void *, const void *, const void *) __attribute__((cdecl)), void *)'
| |-ParmVarDecl 0x28b8a641930 <col:54, col:67> col:67 _Key 'const void *'
| |-ParmVarDecl 0x28b8a6419b0 <col:124, col:137> col:137 _Base 'const void *'
| |-ParmVarDecl 0x28b8a641a28 <line:440:14, col:22> col:22 _NumOfElements 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x28b8a641aa0 <col:43, col:51> col:51 _SizeOfElements 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x28b8a641e00 <line:441:14, col:29> col:29 _PtFuncCompare 'int (*)(void *, const void *, const void *) __attribute__((cdecl))'
| `-ParmVarDecl 0x28b8a641e80 <col:82, col:89> col:89 _Context 'void *'
|-FunctionDecl 0x28b8a63f8a8 <line:443:24, line:445:72> line:443:39 bsearch 'void *(const void *, const void *, size_t, size_t, int (*)(const void *, const void *) __attribute__((cdecl))) __attribute__((cdecl))':'void *(const void *, const void *, size_t, size_t, int (*)(const void *, const void *) __attribute__((cdecl)))'
| |-ParmVarDecl 0x28b8a63f220 <col:52, col:65> col:65 _Key 'const void *'
| |-ParmVarDecl 0x28b8a63f2a0 <col:122, col:135> col:135 _Base 'const void *'
| |-ParmVarDecl 0x28b8a63f318 <line:444:14, col:21> col:21 _NumOfElements 'size_t':'unsigned long long'
| |-ParmVarDecl 0x28b8a63f390 <col:42, col:49> col:49 _SizeOfElements 'size_t':'unsigned long long'
| `-ParmVarDecl 0x28b8a63f668 <line:445:14, col:29> col:29 _PtFuncCompare 'int (*)(const void *, const void *) __attribute__((cdecl))'
|-FunctionDecl 0x28b8a63ffb0 <line:448:9, line:450:96> line:448:22 qsort_s 'void (void *, rsize_t, rsize_t, int (*)(void *, const void *, const void *) __attribute__((cdecl)), void *) __attribute__((cdecl))':'void (void *, rsize_t, rsize_t, int (*)(void *, const void *, const void *) __attribute__((cdecl)), void *)'
| |-ParmVarDecl 0x28b8a63f9a0 <col:85, col:92> col:92 _Base 'void *'
| |-ParmVarDecl 0x28b8a63fa18 <line:449:14, col:22> col:22 _NumOfElements 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x28b8a63fa90 <col:43, col:51> col:51 _SizeOfElements 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x28b8a63fcf8 <line:450:14, col:29> col:29 _PtFuncCompare 'int (*)(void *, const void *, const void *) __attribute__((cdecl))'
| `-ParmVarDecl 0x28b8a63fd78 <col:82, col:88> col:88 _Context 'void *'
|-FunctionDecl 0x28b8a6405a8 <line:452:9, line:454:72> line:452:22 qsort 'void (void *, size_t, size_t, int (*)(const void *, const void *) __attribute__((cdecl))) __attribute__((cdecl))':'void (void *, size_t, size_t, int (*)(const void *, const void *) __attribute__((cdecl)))'
| |-ParmVarDecl 0x28b8a6400d0 <col:84, col:91> col:91 _Base 'void *'
| |-ParmVarDecl 0x28b8a640148 <line:453:14, col:21> col:21 _NumOfElements 'size_t':'unsigned long long'
| |-ParmVarDecl 0x28b8a6401c0 <col:42, col:49> col:49 _SizeOfElements 'size_t':'unsigned long long'
| `-ParmVarDecl 0x28b8a6403a0 <line:454:14, col:29> col:29 _PtFuncCompare 'int (*)(const void *, const void *) __attribute__((cdecl))'
|-FunctionDecl 0x28b8a6407e8 <line:456:47> col:47 implicit _byteswap_ushort 'unsigned short (unsigned short)' extern
| |-ParmVarDecl 0x28b8a640888 <<invalid sloc>> <invalid sloc> 'unsigned short'
| |-NoThrowAttr 0x28b8a6408f8 <col:47> Implicit
| `-ConstAttr 0x28b8a640950 <col:47> Implicit
|-FunctionDecl 0x28b8a640978 prev 0x28b8a6407e8 <col:24, col:90> col:47 _byteswap_ushort 'unsigned short (unsigned short)'
| |-ParmVarDecl 0x28b8a640698 <col:69, col:84> col:84 _Short 'unsigned short'
| |-NoThrowAttr 0x28b8a640a68 <col:47> Inherited Implicit
| `-ConstAttr 0x28b8a640a90 <col:47> Inherited Implicit
|-FunctionDecl 0x28b8a640c18 <line:457:47> col:47 implicit _byteswap_ulong 'unsigned long (unsigned long)' extern
| |-ParmVarDecl 0x28b8a640cb8 <<invalid sloc>> <invalid sloc> 'unsigned long'
| |-NoThrowAttr 0x28b8a640d28 <col:47> Implicit
| `-ConstAttr 0x28b8a640d80 <col:47> Implicit
|-FunctionDecl 0x28b8a640da8 prev 0x28b8a640c18 <col:24, col:88> col:47 _byteswap_ulong 'unsigned long (unsigned long)'
| |-ParmVarDecl 0x28b8a640ad0 <col:69, col:83> col:83 _Long 'unsigned long'
| |-NoThrowAttr 0x28b8a640e98 <col:47> Inherited Implicit
| `-ConstAttr 0x28b8a640ec0 <col:47> Inherited Implicit
|-FunctionDecl 0x28b8a63a070 <line:458:49> col:49 implicit _byteswap_uint64 'unsigned long long (unsigned long long)' extern
| |-ParmVarDecl 0x28b8a63a110 <<invalid sloc>> <invalid sloc> 'unsigned long long'
| |-NoThrowAttr 0x28b8a63a180 <col:49> Implicit
| `-ConstAttr 0x28b8a63a1d8 <col:49> Implicit
|-FunctionDecl 0x28b8a63a200 prev 0x28b8a63a070 <col:24, col:94> col:49 _byteswap_uint64 'unsigned long long (unsigned long long)'
| |-ParmVarDecl 0x28b8a640f00 <col:71, col:88> col:88 _Int64 'unsigned long long'
| |-NoThrowAttr 0x28b8a63a2f0 <col:49> Inherited Implicit
| `-ConstAttr 0x28b8a63a318 <col:49> Inherited Implicit
|-FunctionDecl 0x28b8a63a598 <line:459:24, col:85> col:39 div 'div_t (int, int) __attribute__((cdecl))':'div_t (int, int)'
| |-ParmVarDecl 0x28b8a63a378 <col:48, col:52> col:52 _Numerator 'int'
| `-ParmVarDecl 0x28b8a63a3f8 <col:69, col:73> col:73 _Denominator 'int'
|-FunctionDecl 0x28b8a63a818 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:462:109> col:74 getenv 'char *(const char *) __attribute__((cdecl))':'char *(const char *)'
| |-ParmVarDecl 0x28b8a63a738 <col:88, col:101> col:101 _VarName 'const char *'
| `-DeprecatedAttr 0x28b8a63a8c0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _dupenv_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x28b8a63add8 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:464:28, col:177> col:44 getenv_s 'errno_t (size_t *, char *, rsize_t, const char *) __attribute__((cdecl))':'errno_t (size_t *, char *, rsize_t, const char *)'
| |-ParmVarDecl 0x28b8a63aa58 <col:59, col:68> col:68 _ReturnSize 'size_t *'
| |-ParmVarDecl 0x28b8a63aad8 <col:110, col:117> col:117 _DstBuf 'char *'
| |-ParmVarDecl 0x28b8a63ab50 <col:131, col:139> col:139 _DstSize 'rsize_t':'unsigned long long'
| `-ParmVarDecl 0x28b8a63abd0 <col:156, col:169> col:169 _VarName 'const char *'
|-FunctionDecl 0x28b8a643220 <line:472:28, col:212> col:44 _dupenv_s 'errno_t (char **, size_t *, const char *) __attribute__((cdecl))':'errno_t (char **, size_t *, const char *)'
| |-ParmVarDecl 0x28b8a63aec8 <col:127, col:134> col:134 _PBuffer 'char **'
| |-ParmVarDecl 0x28b8a63af40 <col:154, col:163> col:163 _PBufferSizeInBytes 'size_t *'
| `-ParmVarDecl 0x28b8a63afc0 <col:191, col:204> col:204 _VarName 'const char *'
|-FunctionDecl 0x28b8a643688 <line:479:28, col:141> col:44 _itoa_s 'errno_t (int, char *, size_t, int) __attribute__((cdecl))':'errno_t (int, char *, size_t, int)'
| |-ParmVarDecl 0x28b8a643308 <col:57, col:61> col:61 _Value 'int'
| |-ParmVarDecl 0x28b8a643388 <col:91, col:98> col:98 _DstBuf 'char *'
| |-ParmVarDecl 0x28b8a643400 <col:112, col:119> col:119 _Size 'size_t':'unsigned long long'
| `-ParmVarDecl 0x28b8a643480 <col:131, col:135> col:135 _Radix 'int'
|-FunctionDecl 0x28b8a643b08 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1951:149> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:481:79 _itoa 'char *(int, char *, int) __attribute__((cdecl))':'char *(int, char *, int)'
| |-ParmVarDecl 0x28b8a643870 <col:91, col:96> col:96 _Value 'int'
| |-ParmVarDecl 0x28b8a6438f0 <col:128, col:134> col:134 _Dest 'char *'
| |-ParmVarDecl 0x28b8a643970 <col:146, col:151> col:151 _Radix 'int'
| `-DeprecatedAttr 0x28b8a643bc0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _itoa_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x28b8a63c090 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:482:28, col:145> col:44 _i64toa_s 'errno_t (long long, char *, size_t, int) __attribute__((cdecl))':'errno_t (long long, char *, size_t, int)'
| |-ParmVarDecl 0x28b8a643d08 <col:59, col:67> col:67 _Val 'long long'
| |-ParmVarDecl 0x28b8a643d88 <col:95, col:102> col:102 _DstBuf 'char *'
| |-ParmVarDecl 0x28b8a643e00 <col:116, col:123> col:123 _Size 'size_t':'unsigned long long'
| `-ParmVarDecl 0x28b8a643e80 <col:135, col:139> col:139 _Radix 'int'
|-FunctionDecl 0x28b8a63c4d8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:483:140> col:59 _i64toa 'char *(long long, char *, int) __attribute__((cdecl))':'char *(long long, char *, int)'
| |-ParmVarDecl 0x28b8a63c240 <col:72, col:80> col:80 _Val 'long long'
| |-ParmVarDecl 0x28b8a63c2c0 <col:109, col:116> col:116 _DstBuf 'char *'
| |-ParmVarDecl 0x28b8a63c340 <col:130, col:134> col:134 _Radix 'int'
| `-DeprecatedAttr 0x28b8a63c590 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _i64toa_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x28b8a63ca58 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:484:28, col:155> col:44 _ui64toa_s 'errno_t (unsigned long long, char *, size_t, int) __attribute__((cdecl))':'errno_t (unsigned long long, char *, size_t, int)'
| |-ParmVarDecl 0x28b8a63c6d8 <col:60, col:77> col:77 _Val 'unsigned long long'
| |-ParmVarDecl 0x28b8a63c758 <col:105, col:112> col:112 _DstBuf 'char *'
| |-ParmVarDecl 0x28b8a63c7d0 <col:126, col:133> col:133 _Size 'size_t':'unsigned long long'
| `-ParmVarDecl 0x28b8a63c850 <col:145, col:149> col:149 _Radix 'int'
|-FunctionDecl 0x28b8a63cea8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:485:151> col:60 _ui64toa 'char *(unsigned long long, char *, int) __attribute__((cdecl))':'char *(unsigned long long, char *, int)'
| |-ParmVarDecl 0x28b8a63cc08 <col:74, col:91> col:91 _Val 'unsigned long long'
| |-ParmVarDecl 0x28b8a63cc88 <col:120, col:127> col:127 _DstBuf 'char *'
| |-ParmVarDecl 0x28b8a63cd08 <col:141, col:145> col:145 _Radix 'int'
| `-DeprecatedAttr 0x28b8a63cf60 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _ui64toa_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x28b8a64a268 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:486:24, col:75> col:40 _atoi64 'long long (const char *) __attribute__((cdecl))':'long long (const char *)'
| `-ParmVarDecl 0x28b8a64a188 <col:55, col:68> col:68 _String 'const char *'
|-FunctionDecl 0x28b8a64a4b8 <line:487:24, col:105> col:40 _atoi64_l 'long long (const char *, _locale_t) __attribute__((cdecl))':'long long (const char *, _locale_t)'
| |-ParmVarDecl 0x28b8a64a340 <col:57, col:70> col:70 _String 'const char *'
| `-ParmVarDecl 0x28b8a64a3b8 <col:88, col:98> col:98 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x28b8a64a838 <line:488:24, col:136> col:40 _strtoi64 'long long (const char *, char **, int) __attribute__((cdecl))':'long long (const char *, char **, int)'
| |-ParmVarDecl 0x28b8a64a598 <col:57, col:70> col:70 _String 'const char *'
| |-ParmVarDecl 0x28b8a64a618 <col:104, col:112> col:112 _EndPtr 'char **'
| `-ParmVarDecl 0x28b8a64a698 <col:126, col:130> col:130 _Radix 'int'
|-FunctionDecl 0x28b8a64aca0 <line:489:24, col:166> col:40 _strtoi64_l 'long long (const char *, char **, int, _locale_t) __attribute__((cdecl))':'long long (const char *, char **, int, _locale_t)'
| |-ParmVarDecl 0x28b8a64a920 <col:59, col:72> col:72 _String 'const char *'
| |-ParmVarDecl 0x28b8a64a9a0 <col:106, col:114> col:114 _EndPtr 'char **'
| |-ParmVarDecl 0x28b8a64aa20 <col:128, col:132> col:132 _Radix 'int'
| `-ParmVarDecl 0x28b8a64aa98 <col:149, col:159> col:159 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x28b8a64b028 <line:490:24, col:146> col:49 _strtoui64 'unsigned long long (const char *, char **, int) __attribute__((cdecl))':'unsigned long long (const char *, char **, int)'
| |-ParmVarDecl 0x28b8a64ad90 <col:67, col:80> col:80 _String 'const char *'
| |-ParmVarDecl 0x28b8a64ae10 <col:114, col:122> col:122 _EndPtr 'char **'
| `-ParmVarDecl 0x28b8a64ae90 <col:136, col:140> col:140 _Radix 'int'
|-FunctionDecl 0x28b8a644490 <line:491:24, col:177> col:49 _strtoui64_l 'unsigned long long (const char *, char **, int, _locale_t) __attribute__((cdecl))':'unsigned long long (const char *, char **, int, _locale_t)'
| |-ParmVarDecl 0x28b8a644110 <col:69, col:82> col:82 _String 'const char *'
| |-ParmVarDecl 0x28b8a644190 <col:116, col:124> col:124 _EndPtr 'char **'
| |-ParmVarDecl 0x28b8a644210 <col:138, col:143> col:143 _Radix 'int'
| `-ParmVarDecl 0x28b8a644288 <col:160, col:170> col:170 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x28b8a6447c8 <line:492:24, col:88> col:39 ldiv 'ldiv_t (long, long) __attribute__((cdecl))':'ldiv_t (long, long)'
| |-ParmVarDecl 0x28b8a6445a8 <col:49, col:54> col:54 _Numerator 'long'
| `-ParmVarDecl 0x28b8a644628 <col:71, col:76> col:76 _Denominator 'long'
|-FunctionDecl 0x28b8a644ae8 <line:493:24, col:100> col:40 lldiv 'lldiv_t (long long, long long) __attribute__((cdecl))':'lldiv_t (long long, long long)'
| |-ParmVarDecl 0x28b8a6448c8 <col:51, col:61> col:61 _Numerator 'long long'
| `-ParmVarDecl 0x28b8a644948 <col:78, col:88> col:88 _Denominator 'long long'
|-FunctionDecl 0x28b8a644f48 <line:515:28, col:140> col:44 _ltoa_s 'errno_t (long, char *, size_t, int) __attribute__((cdecl))':'errno_t (long, char *, size_t, int)'
| |-ParmVarDecl 0x28b8a644bc8 <col:57, col:62> col:62 _Val 'long'
| |-ParmVarDecl 0x28b8a644c48 <col:90, col:97> col:97 _DstBuf 'char *'
| |-ParmVarDecl 0x28b8a644cc0 <col:111, col:118> col:118 _Size 'size_t':'unsigned long long'
| `-ParmVarDecl 0x28b8a644d40 <col:130, col:134> col:134 _Radix 'int'
|-FunctionDecl 0x28b8a64b418 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1951:149> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:517:79 _ltoa 'char *(long, char *, int) __attribute__((cdecl))':'char *(long, char *, int)'
| |-ParmVarDecl 0x28b8a64b180 <col:91, col:97> col:97 _Value 'long'
| |-ParmVarDecl 0x28b8a64b200 <col:129, col:135> col:135 _Dest 'char *'
| |-ParmVarDecl 0x28b8a64b280 <col:147, col:152> col:152 _Radix 'int'
| `-DeprecatedAttr 0x28b8a64b4d0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _ltoa_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x28b8a64b840 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:518:24, col:128> col:39 mblen 'int (const char *, size_t) __attribute__((cdecl))':'int (const char *, size_t)'
| |-ParmVarDecl 0x28b8a64b618 <col:89, col:102> col:102 _Ch 'const char *'
| `-ParmVarDecl 0x28b8a64b690 <col:112, col:119> col:119 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x28b8a64bbe8 <line:519:24, col:159> col:39 _mblen_l 'int (const char *, size_t, _locale_t) __attribute__((cdecl))':'int (const char *, size_t, _locale_t)'
| |-ParmVarDecl 0x28b8a64b920 <col:92, col:105> col:105 _Ch 'const char *'
| |-ParmVarDecl 0x28b8a64b998 <col:115, col:122> col:122 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x28b8a64ba10 <col:142, col:152> col:152 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x28b8a64bda8 <line:520:24, col:73> col:39 _mbstrlen 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)'
| `-ParmVarDecl 0x28b8a64bcd0 <col:56, col:69> col:69 _Str 'const char *'
|-FunctionDecl 0x28b8a64c098 <line:521:24, col:102> col:39 _mbstrlen_l 'size_t (const char *, _locale_t) __attribute__((cdecl))':'size_t (const char *, _locale_t)'
| |-ParmVarDecl 0x28b8a64be80 <col:58, col:70> col:70 _Str 'const char *'
| `-ParmVarDecl 0x28b8a64bef8 <col:85, col:95> col:95 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x28b8a6462a0 <line:522:24, col:96> col:39 _mbstrnlen 'size_t (const char *, size_t) __attribute__((cdecl))':'size_t (const char *, size_t)'
| |-ParmVarDecl 0x28b8a646130 <col:57, col:69> col:69 _Str 'const char *'
| `-ParmVarDecl 0x28b8a6461a8 <col:80, col:87> col:87 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x28b8a646640 <line:523:24, col:126> col:39 _mbstrnlen_l 'size_t (const char *, size_t, _locale_t) __attribute__((cdecl))':'size_t (const char *, size_t, _locale_t)'
| |-ParmVarDecl 0x28b8a646380 <col:59, col:71> col:71 _Str 'const char *'
| |-ParmVarDecl 0x28b8a6463f8 <col:82, col:89> col:89 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x28b8a646470 <col:109, col:119> col:119 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x28b8a6469f8 <line:524:9, col:170> col:24 mbtowc 'int (wchar_t *, const char *, size_t) __attribute__((cdecl))':'int (wchar_t *, const char *, size_t)'
| |-ParmVarDecl 0x28b8a646720 <col:54, col:64> col:64 _DstCh 'wchar_t *'
| |-ParmVarDecl 0x28b8a6467a0 <col:122, col:135> col:135 _SrcCh 'const char *'
| `-ParmVarDecl 0x28b8a646818 <col:148, col:155> col:155 _SrcSizeInBytes 'size_t':'unsigned long long'
|-FunctionDecl 0x28b8a646e50 <line:525:9, col:201> col:24 _mbtowc_l 'int (wchar_t *, const char *, size_t, _locale_t) __attribute__((cdecl))':'int (wchar_t *, const char *, size_t, _locale_t)'
| |-ParmVarDecl 0x28b8a646ad8 <col:57, col:67> col:67 _DstCh 'wchar_t *'
| |-ParmVarDecl 0x28b8a646b58 <col:125, col:138> col:138 _SrcCh 'const char *'
| |-ParmVarDecl 0x28b8a646bd0 <col:151, col:158> col:158 _SrcSizeInBytes 'size_t':'unsigned long long'
| `-ParmVarDecl 0x28b8a646c48 <col:184, col:194> col:194 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x28b8a64c3c0 <line:526:28, col:271> col:44 mbstowcs_s 'errno_t (size_t *, wchar_t *, size_t, const char *, size_t) __attribute__((cdecl))':'errno_t (size_t *, wchar_t *, size_t, const char *, size_t)'
| |-ParmVarDecl 0x28b8a646f38 <col:65, col:74> col:74 _PtNumOfCharConverted 'size_t *'
| |-ParmVarDecl 0x28b8a646fb0 <col:155, col:165> col:165 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x28b8a647028 <col:179, col:186> col:186 _SizeInWords 'size_t':'unsigned long long'
| |-ParmVarDecl 0x28b8a6470a8 <col:227, col:240> col:240 _SrcBuf 'const char *'
| `-ParmVarDecl 0x28b8a64c190 <col:254, col:261> col:261 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x28b8a64c840 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:2007:144> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:528:56 mbstowcs 'size_t (wchar_t *, const char *, size_t) __attribute__((cdecl))':'size_t (wchar_t *, const char *, size_t)'
| |-ParmVarDecl 0x28b8a64c570 <col:97, col:106> col:106 _Dest 'wchar_t *'
| |-ParmVarDecl 0x28b8a64c5f0 <col:120, col:134> col:134 _Source 'const char *'
| |-ParmVarDecl 0x28b8a64c668 <col:148, col:156> col:156 _MaxCount 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x28b8a64c8f8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using mbstowcs_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x28b8a64cef8 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:530:28, col:301> col:44 _mbstowcs_s_l 'errno_t (size_t *, wchar_t *, size_t, const char *, size_t, _locale_t) __attribute__((cdecl))':'errno_t (size_t *, wchar_t *, size_t, const char *, size_t, _locale_t)'
| |-ParmVarDecl 0x28b8a64ca38 <col:68, col:77> col:77 _PtNumOfCharConverted 'size_t *'
| |-ParmVarDecl 0x28b8a64cab0 <col:158, col:168> col:168 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x28b8a64cb28 <col:182, col:189> col:189 _SizeInWords 'size_t':'unsigned long long'
| |-ParmVarDecl 0x28b8a64cba8 <col:230, col:243> col:243 _SrcBuf 'const char *'
| |-ParmVarDecl 0x28b8a64cc20 <col:257, col:264> col:264 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x28b8a64cc98 <col:284, col:294> col:294 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x28b8a647438 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:2010:160> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:532:59 _mbstowcs_l 'size_t (wchar_t *, const char *, size_t, _locale_t) __attribute__((cdecl))':'size_t (wchar_t *, const char *, size_t, _locale_t)'
| |-ParmVarDecl 0x28b8a64d0e8 <col:149, col:158> col:158 _Dest 'wchar_t *'
| |-ParmVarDecl 0x28b8a647140 <col:172, col:186> col:186 _Source 'const char *'
| |-ParmVarDecl 0x28b8a6471b8 <col:200, col:208> col:208 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x28b8a647230 <col:228, col:239> col:239 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x28b8a6474f8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _mbstowcs_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x28b8a6476f8 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:534:24, col:48> col:39 rand 'int (void) __attribute__((cdecl))':'int (void)'
|-FunctionDecl 0x28b8a6478a8 <line:539:28, col:73> col:43 _set_error_mode 'int (int) __attribute__((cdecl))':'int (int)'
| `-ParmVarDecl 0x28b8a6477c8 <col:64, col:68> col:68 _Mode 'int'
|-FunctionDecl 0x28b8a647ac0 <line:541:9, col:53> col:24 srand 'void (unsigned int) __attribute__((cdecl))':'void (unsigned int)'
| `-ParmVarDecl 0x28b8a647980 <col:35, col:48> col:48 _Seed 'unsigned int'
|-FunctionDecl 0x28b8a647d80 <line:542:39> col:39 implicit strtod 'double (const char *, char **)' extern
| |-ParmVarDecl 0x28b8a647e20 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x28b8a647e88 <<invalid sloc>> <invalid sloc> 'char **'
|-FunctionDecl 0x28b8a647f00 prev 0x28b8a647d80 <col:24, col:112> col:39 strtod 'double (const char *, char **)'
| |-ParmVarDecl 0x28b8a647b98 <col:53, col:66> col:66 _Str 'const char *'
| `-ParmVarDecl 0x28b8a647c18 <col:97, col:105> col:105 _EndPtr 'char **'
|-FunctionDecl 0x28b8a645298 <line:543:24, col:143> col:39 _strtod_l 'double (const char *, char **, _locale_t) __attribute__((cdecl))':'double (const char *, char **, _locale_t)'
| |-ParmVarDecl 0x28b8a647fe0 <col:56, col:69> col:69 _Str 'const char *'
| |-ParmVarDecl 0x28b8a648060 <col:100, col:108> col:108 _EndPtr 'char **'
| `-ParmVarDecl 0x28b8a6480d8 <col:126, col:136> col:136 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x28b8a645618 <line:544:39> col:39 implicit strtol 'long (const char *, char **, int)' extern
| |-ParmVarDecl 0x28b8a6456b8 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x28b8a645720 <<invalid sloc>> <invalid sloc> 'char **'
| `-ParmVarDecl 0x28b8a645788 <<invalid sloc>> <invalid sloc> 'int'
|-FunctionDecl 0x28b8a645808 prev 0x28b8a645618 <col:24, col:130> col:39 strtol 'long (const char *, char **, int)'
| |-ParmVarDecl 0x28b8a645380 <col:53, col:66> col:66 _Str 'const char *'
| |-ParmVarDecl 0x28b8a645400 <col:97, col:105> col:105 _EndPtr 'char **'
| `-ParmVarDecl 0x28b8a645480 <col:119, col:123> col:123 _Radix 'int'
|-FunctionDecl 0x28b8a645c70 <line:545:24, col:158> col:39 _strtol_l 'long (const char *, char **, int, _locale_t) __attribute__((cdecl))':'long (const char *, char **, int, _locale_t)'
| |-ParmVarDecl 0x28b8a6458f0 <col:56, col:68> col:68 _Str 'const char *'
| |-ParmVarDecl 0x28b8a645970 <col:99, col:106> col:106 _EndPtr 'char **'
| |-ParmVarDecl 0x28b8a6459f0 <col:120, col:124> col:124 _Radix 'int'
| `-ParmVarDecl 0x28b8a645a68 <col:141, col:151> col:151 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x28b8a645f80 <line:546:43> col:43 implicit strtoll 'long long (const char *, char **, int)' extern
| |-ParmVarDecl 0x28b8a646020 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x28b8a646088 <<invalid sloc>> <invalid sloc> 'char **'
| `-ParmVarDecl 0x28b8a648150 <<invalid sloc>> <invalid sloc> 'int'
|-FunctionDecl 0x28b8a6481d0 prev 0x28b8a645f80 <col:24, col:135> col:43 strtoll 'long long (const char *, char **, int)'
| |-ParmVarDecl 0x28b8a645d60 <col:58, col:71> col:71 _Str 'const char *'
| |-ParmVarDecl 0x28b8a645de0 <col:102, col:110> col:110 _EndPtr 'char **'
| `-ParmVarDecl 0x28b8a645e60 <col:124, col:128> col:128 _Radix 'int'
|-FunctionDecl 0x28b8a648570 <line:547:24, col:166> col:43 _strtoll_l 'long long (const char *, char **, int, _locale_t) __attribute__((cdecl))':'long long (const char *, char **, int, _locale_t)'
| |-ParmVarDecl 0x28b8a6482b8 <col:61, col:74> col:74 _Str 'const char *'
| |-ParmVarDecl 0x28b8a648338 <col:105, col:113> col:113 _EndPtr 'char **'
| |-ParmVarDecl 0x28b8a6483b8 <col:127, col:131> col:131 _Radix 'int'
| `-ParmVarDecl 0x28b8a648430 <col:148, col:158> col:158 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x28b8a6488f8 <line:548:46> col:46 implicit strtoul 'unsigned long (const char *, char **, int)' extern
| |-ParmVarDecl 0x28b8a648998 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x28b8a648a00 <<invalid sloc>> <invalid sloc> 'char **'
| `-ParmVarDecl 0x28b8a648a68 <<invalid sloc>> <invalid sloc> 'int'
|-FunctionDecl 0x28b8a648ae8 prev 0x28b8a6488f8 <col:24, col:137> col:46 strtoul 'unsigned long (const char *, char **, int)'
| |-ParmVarDecl 0x28b8a648660 <col:61, col:74> col:74 _Str 'const char *'
| |-ParmVarDecl 0x28b8a6486e0 <col:105, col:113> col:113 _EndPtr 'char **'
| `-ParmVarDecl 0x28b8a648760 <col:127, col:131> col:131 _Radix 'int'
|-FunctionDecl 0x28b8a648f50 <line:549:24, col:160> col:46 _strtoul_l 'unsigned long (const char *, char **, int, _locale_t) __attribute__((cdecl))':'unsigned long (const char *, char **, int, _locale_t)'
| |-ParmVarDecl 0x28b8a648bd0 <col:57, col:70> col:70 _Str 'const char *'
| |-ParmVarDecl 0x28b8a648c50 <col:101, col:108> col:108 _EndPtr 'char **'
| |-ParmVarDecl 0x28b8a648cd0 <col:122, col:126> col:126 _Radix 'int'
| `-ParmVarDecl 0x28b8a648d48 <col:143, col:153> col:153 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x28b8a649280 <line:550:51> col:51 implicit strtoull 'unsigned long long (const char *, char **, int)' extern
| |-ParmVarDecl 0x28b8a649320 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x28b8a649388 <<invalid sloc>> <invalid sloc> 'char **'
| `-ParmVarDecl 0x28b8a6493f0 <<invalid sloc>> <invalid sloc> 'int'
|-FunctionDecl 0x28b8a649470 prev 0x28b8a649280 <col:24, col:143> col:51 strtoull 'unsigned long long (const char *, char **, int)'
| |-ParmVarDecl 0x28b8a649040 <col:67, col:80> col:80 _Str 'const char *'
| |-ParmVarDecl 0x28b8a6490c0 <col:111, col:119> col:119 _EndPtr 'char **'
| `-ParmVarDecl 0x28b8a649160 <col:133, col:137> col:137 _Radix 'int'
|-FunctionDecl 0x28b8a649810 <line:551:24, col:174> col:51 _strtoull_l 'unsigned long long (const char *, char **, int, _locale_t) __attribute__((cdecl))':'unsigned long long (const char *, char **, int, _locale_t)'
| |-ParmVarDecl 0x28b8a649558 <col:70, col:83> col:83 _Str 'const char *'
| |-ParmVarDecl 0x28b8a6495d8 <col:114, col:122> col:122 _EndPtr 'char **'
| |-ParmVarDecl 0x28b8a649658 <col:136, col:140> col:140 _Radix 'int'
| `-ParmVarDecl 0x28b8a6496d0 <col:157, col:167> col:167 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x28b8a649af0 <line:552:44> col:44 implicit strtold 'long double (const char *, char **)' extern
| |-ParmVarDecl 0x28b8a649b90 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x28b8a649bf8 <<invalid sloc>> <invalid sloc> 'char **'
|-FunctionDecl 0x28b8a649c70 prev 0x28b8a649af0 <col:24, col:118> col:44 strtold 'long double (const char *, char **)'
| |-ParmVarDecl 0x28b8a649900 <col:59, col:72> col:72 _Str 'const char *'
| `-ParmVarDecl 0x28b8a649980 <col:103, col:111> col:111 _EndPtr 'char **'
|-FunctionDecl 0x28b8a64a028 <line:553:24, col:149> col:44 _strtold_l 'long double (const char *, char **, _locale_t) __attribute__((cdecl))':'long double (const char *, char **, _locale_t)'
| |-ParmVarDecl 0x28b8a649d50 <col:62, col:75> col:75 _Str 'const char *'
| |-ParmVarDecl 0x28b8a649dd0 <col:106, col:114> col:114 _EndPtr 'char **'
| `-ParmVarDecl 0x28b8a649e48 <col:132, col:142> col:142 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x28b8a64d390 <line:554:38> col:38 implicit strtof 'float (const char *, char **)' extern
| |-ParmVarDecl 0x28b8a64d430 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x28b8a64d498 <<invalid sloc>> <invalid sloc> 'char **'
|-FunctionDecl 0x28b8a64d510 prev 0x28b8a64d390 <col:24, col:111> col:38 strtof 'float (const char *, char **)'
| |-ParmVarDecl 0x28b8a64d1a0 <col:52, col:65> col:65 _Str 'const char *'
| `-ParmVarDecl 0x28b8a64d220 <col:96, col:104> col:104 _EndPtr 'char **'
|-FunctionDecl 0x28b8a64d8c8 <line:555:24, col:142> col:38 _strtof_l 'float (const char *, char **, _locale_t) __attribute__((cdecl))':'float (const char *, char **, _locale_t)'
| |-ParmVarDecl 0x28b8a64d5f0 <col:55, col:68> col:68 _Str 'const char *'
| |-ParmVarDecl 0x28b8a64d670 <col:99, col:107> col:107 _EndPtr 'char **'
| `-ParmVarDecl 0x28b8a64d6e8 <col:125, col:135> col:135 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x28b8a64da90 <line:560:9, col:60> col:21 system 'int (const char *) __attribute__((cdecl))':'int (const char *)'
| `-ParmVarDecl 0x28b8a64d9b0 <col:39, col:52> col:52 _Command 'const char *'
|-FunctionDecl 0x28b8a64dee8 <line:564:28, col:150> col:44 _ultoa_s 'errno_t (unsigned long, char *, size_t, int) __attribute__((cdecl))':'errno_t (unsigned long, char *, size_t, int)'
| |-ParmVarDecl 0x28b8a64db68 <col:58, col:72> col:72 _Val 'unsigned long'
| |-ParmVarDecl 0x28b8a64dbe8 <col:100, col:107> col:107 _DstBuf 'char *'
| |-ParmVarDecl 0x28b8a64dc60 <col:121, col:128> col:128 _Size 'size_t':'unsigned long long'
| `-ParmVarDecl 0x28b8a64dce0 <col:140, col:144> col:144 _Radix 'int'
|-FunctionDecl 0x28b8a65e058 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1951:149> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:566:79 _ultoa 'char *(unsigned long, char *, int) __attribute__((cdecl))':'char *(unsigned long, char *, int)'
| |-ParmVarDecl 0x28b8a64e098 <col:92, col:107> col:107 _Value 'unsigned long'
| |-ParmVarDecl 0x28b8a64e118 <col:139, col:145> col:145 _Dest 'char *'
| |-ParmVarDecl 0x28b8a65dec0 <col:157, col:162> col:162 _Radix 'int'
| `-DeprecatedAttr 0x28b8a65e110 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _ultoa_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x28b8a65e540 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:567:127> col:58 wctomb 'int (char *, wchar_t) __attribute__((cdecl))':'int (char *, wchar_t)'
| |-ParmVarDecl 0x28b8a65e318 <col:96, col:103> col:103 _MbCh 'char *'
| |-ParmVarDecl 0x28b8a65e390 <col:115, col:123> col:123 _WCh 'wchar_t':'unsigned short'
| `-DeprecatedAttr 0x28b8a65e5f0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using wctomb_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x28b8a65eac8 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:568:155> col:61 _wctomb_l 'int (char *, wchar_t, _locale_t) __attribute__((cdecl))':'int (char *, wchar_t, _locale_t)'
| |-ParmVarDecl 0x28b8a65e7f8 <col:96, col:103> col:103 _MbCh 'char *'
| |-ParmVarDecl 0x28b8a65e870 <col:115, col:123> col:123 _WCh 'wchar_t':'unsigned short'
| |-ParmVarDecl 0x28b8a65e8e8 <col:138, col:148> col:148 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x28b8a65eb80 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wctomb_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x28b8a658ff8 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:570:28, col:200> col:44 wctomb_s 'errno_t (int *, char *, rsize_t, wchar_t) __attribute__((cdecl))':'errno_t (int *, char *, rsize_t, wchar_t)'
| |-ParmVarDecl 0x28b8a65ecc8 <col:63, col:69> col:69 _SizeConverted 'int *'
| |-ParmVarDecl 0x28b8a65ed48 <col:142, col:149> col:149 _MbCh 'char *'
| |-ParmVarDecl 0x28b8a65edc0 <col:161, col:169> col:169 _SizeInBytes 'rsize_t':'unsigned long long'
| `-ParmVarDecl 0x28b8a65ee38 <col:188, col:196> col:196 _WCh 'wchar_t':'unsigned short'
|-FunctionDecl 0x28b8a659500 <line:572:28, col:206> col:44 _wctomb_s_l 'errno_t (int *, char *, size_t, wchar_t, _locale_t) __attribute__((cdecl))':'errno_t (int *, char *, size_t, wchar_t, _locale_t)'
| |-ParmVarDecl 0x28b8a6590e8 <col:66, col:72> col:72 _SizeConverted 'int *'
| |-ParmVarDecl 0x28b8a659168 <col:121, col:128> col:128 _MbCh 'char *'
| |-ParmVarDecl 0x28b8a6591e0 <col:140, col:147> col:147 _SizeInBytes 'size_t':'unsigned long long'
| |-ParmVarDecl 0x28b8a659258 <col:166, col:174> col:174 _WCh 'wchar_t':'unsigned short'
| `-ParmVarDecl 0x28b8a6592d0 <col:189, col:199> col:199 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x28b8a659a10 <line:573:28, col:263> col:44 wcstombs_s 'errno_t (size_t *, char *, size_t, const wchar_t *, size_t) __attribute__((cdecl))':'errno_t (size_t *, char *, size_t, const wchar_t *, size_t)'
| |-ParmVarDecl 0x28b8a6595f0 <col:65, col:74> col:74 _PtNumOfCharConverted 'size_t *'
| |-ParmVarDecl 0x28b8a659670 <col:164, col:171> col:171 _Dst 'char *'
| |-ParmVarDecl 0x28b8a6596e8 <col:182, col:189> col:189 _DstSizeInBytes 'size_t':'unsigned long long'
| |-ParmVarDecl 0x28b8a659760 <col:213, col:229> col:229 _Src 'const wchar_t *'
| `-ParmVarDecl 0x28b8a6597d8 <col:240, col:247> col:247 _MaxCountInBytes 'size_t':'unsigned long long'
|-FunctionDecl 0x28b8a65ef10 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:2007:144> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:575:56 wcstombs 'size_t (char *, const wchar_t *, size_t) __attribute__((cdecl))':'size_t (char *, const wchar_t *, size_t)'
| |-ParmVarDecl 0x28b8a659bc8 <col:97, col:103> col:103 _Dest 'char *'
| |-ParmVarDecl 0x28b8a659c40 <col:117, col:134> col:134 _Source 'const wchar_t *'
| |-ParmVarDecl 0x28b8a659cb8 <col:148, col:156> col:156 _MaxCount 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x28b8a65efc8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using wcstombs_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x28b8a65f5c8 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:576:28, col:294> col:44 _wcstombs_s_l 'errno_t (size_t *, char *, size_t, const wchar_t *, size_t, _locale_t) __attribute__((cdecl))':'errno_t (size_t *, char *, size_t, const wchar_t *, size_t, _locale_t)'
| |-ParmVarDecl 0x28b8a65f108 <col:68, col:77> col:77 _PtNumOfCharConverted 'size_t *'
| |-ParmVarDecl 0x28b8a65f188 <col:167, col:174> col:174 _Dst 'char *'
| |-ParmVarDecl 0x28b8a65f200 <col:185, col:192> col:192 _DstSizeInBytes 'size_t':'unsigned long long'
| |-ParmVarDecl 0x28b8a65f278 <col:216, col:232> col:232 _Src 'const wchar_t *'
| |-ParmVarDecl 0x28b8a65f2f0 <col:243, col:250> col:250 _MaxCountInBytes 'size_t':'unsigned long long'
| `-ParmVarDecl 0x28b8a65f368 <col:277, col:287> col:287 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x28b8a65faf8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:2010:160> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:578:59 _wcstombs_l 'size_t (char *, const wchar_t *, size_t, _locale_t) __attribute__((cdecl))':'size_t (char *, const wchar_t *, size_t, _locale_t)'
| |-ParmVarDecl 0x28b8a65f788 <col:146, col:152> col:152 _Dest 'char *'
| |-ParmVarDecl 0x28b8a65f800 <col:166, col:183> col:183 _Source 'const wchar_t *'
| |-ParmVarDecl 0x28b8a65f878 <col:197, col:205> col:205 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x28b8a65f8f0 <col:225, col:236> col:236 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x28b8a65fbb8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wcstombs_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x28b8a657ed0 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:640:142> col:142 implicit calloc 'void *(unsigned long long, unsigned long long)' extern
| |-ParmVarDecl 0x28b8a657f70 <<invalid sloc>> <invalid sloc> 'unsigned long long'
| `-ParmVarDecl 0x28b8a657fd8 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x28b8a658050 prev 0x28b8a657ed0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:21, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:640:224> col:142 calloc 'void *(unsigned long long, unsigned long long)'
| |-ParmVarDecl 0x28b8a65fcf8 <col:173, col:180> col:180 _Count 'size_t':'unsigned long long'
| |-ParmVarDecl 0x28b8a65fd70 <col:212, col:219> col:219 _Size 'size_t':'unsigned long long'
| |-NoAliasAttr 0x28b8a658100 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:32>
| `-RestrictAttr 0x28b8a658158 <line:615:33> restrict
|-FunctionDecl 0x28b8a6582f0 <line:611:21, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:641:182> col:132 free 'void (void *) __attribute__((cdecl))':'void (void *)'
| |-ParmVarDecl 0x28b8a6581b0 <col:168, col:175> col:175 _Memory 'void *'
| `-NoAliasAttr 0x28b8a658398 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:32>
|-FunctionDecl 0x28b8a658598 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:642:161> col:161 implicit malloc 'void *(unsigned long long)' extern
| `-ParmVarDecl 0x28b8a658638 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x28b8a6586a8 prev 0x28b8a658598 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:21, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:642:204> col:161 malloc 'void *(unsigned long long)'
| |-ParmVarDecl 0x28b8a658418 <col:192, col:199> col:199 _Size 'size_t':'unsigned long long'
| |-NoAliasAttr 0x28b8a658750 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:32>
| `-RestrictAttr 0x28b8a6587a8 <line:615:33> restrict
|-FunctionDecl 0x28b8a658a20 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:644:142> col:142 implicit realloc 'void *(void *, unsigned long long)' extern
| |-ParmVarDecl 0x28b8a658ac0 <<invalid sloc>> <invalid sloc> 'void *'
| `-ParmVarDecl 0x28b8a658b28 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x28b8a658ba0 prev 0x28b8a658a20 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:21, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:644:236> col:142 realloc 'void *(void *, unsigned long long)'
| |-ParmVarDecl 0x28b8a658800 <col:181, col:188> col:188 _Memory 'void *'
| |-ParmVarDecl 0x28b8a658878 <col:221, col:228> col:228 _NewSize 'size_t':'unsigned long long'
| |-NoAliasAttr 0x28b8a658c50 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:32>
| `-RestrictAttr 0x28b8a658ca8 <line:615:33> restrict
|-FunctionDecl 0x28b8a660058 <line:611:21, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:646:274> col:142 _recalloc 'void *(void *, size_t, size_t) __attribute__((cdecl))':'void *(void *, size_t, size_t)'
| |-ParmVarDecl 0x28b8a658d00 <col:183, col:190> col:190 _Memory 'void *'
| |-ParmVarDecl 0x28b8a658d78 <col:223, col:230> col:230 _Count 'size_t':'unsigned long long'
| |-ParmVarDecl 0x28b8a658df0 <col:262, col:269> col:269 _Size 'size_t':'unsigned long long'
| |-NoAliasAttr 0x28b8a660110 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:32>
| `-RestrictAttr 0x28b8a660168 <line:615:33> restrict
|-FunctionDecl 0x28b8a660298 <line:611:21, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:647:191> col:132 _aligned_free 'void (void *) __attribute__((cdecl))':'void (void *)'
| |-ParmVarDecl 0x28b8a6601c0 <col:177, col:184> col:184 _Memory 'void *'
| `-NoAliasAttr 0x28b8a660340 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:32>
|-FunctionDecl 0x28b8a660538 <col:21, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:648:218> col:142 _aligned_malloc 'void *(size_t, size_t) __attribute__((cdecl))':'void *(size_t, size_t)'
| |-ParmVarDecl 0x28b8a6603c0 <col:182, col:189> col:189 _Size 'size_t':'unsigned long long'
| |-ParmVarDecl 0x28b8a660438 <col:201, col:208> col:208 _Alignment 'size_t':'unsigned long long'
| |-NoAliasAttr 0x28b8a6605e8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:32>
| `-RestrictAttr 0x28b8a660640 <line:615:33> restrict
|-FunctionDecl 0x28b8a660958 <line:611:21, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:649:246> col:142 _aligned_offset_malloc 'void *(size_t, size_t, size_t) __attribute__((cdecl))':'void *(size_t, size_t, size_t)'
| |-ParmVarDecl 0x28b8a660690 <col:189, col:196> col:196 _Size 'size_t':'unsigned long long'
| |-ParmVarDecl 0x28b8a660708 <col:208, col:215> col:215 _Alignment 'size_t':'unsigned long long'
| |-ParmVarDecl 0x28b8a660780 <col:232, col:239> col:239 _Offset 'size_t':'unsigned long long'
| |-NoAliasAttr 0x28b8a660a10 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:32>
| `-RestrictAttr 0x28b8a660a68 <line:615:33> restrict
|-FunctionDecl 0x28b8a660cd0 <line:611:21, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:651:272> col:145 _aligned_realloc 'void *(void *, size_t, size_t) __attribute__((cdecl))':'void *(void *, size_t, size_t)'
| |-ParmVarDecl 0x28b8a660ac0 <col:193, col:200> col:200 _Memory 'void *'
| |-ParmVarDecl 0x28b8a660b38 <col:233, col:240> col:240 _NewSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x28b8a660bb0 <col:255, col:262> col:262 _Alignment 'size_t':'unsigned long long'
| |-NoAliasAttr 0x28b8a660d88 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:32>
| `-RestrictAttr 0x28b8a660de0 <line:615:33> restrict
|-FunctionDecl 0x28b8a6611f0 <line:611:21, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:653:306> col:142 _aligned_recalloc 'void *(void *, size_t, size_t, size_t) __attribute__((cdecl))':'void *(void *, size_t, size_t, size_t)'
| |-ParmVarDecl 0x28b8a660e38 <col:191, col:198> col:198 _Memory 'void *'
| |-ParmVarDecl 0x28b8a660ef0 <col:231, col:238> col:238 _Count 'size_t':'unsigned long long'
| |-ParmVarDecl 0x28b8a660f68 <col:270, col:277> col:277 _Size 'size_t':'unsigned long long'
| |-ParmVarDecl 0x28b8a660fe0 <col:289, col:296> col:296 _Alignment 'size_t':'unsigned long long'
| |-NoAliasAttr 0x28b8a6612b0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:32>
| `-RestrictAttr 0x28b8a661308 <line:615:33> restrict
|-FunctionDecl 0x28b8a661608 <line:611:21, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:655:300> col:145 _aligned_offset_realloc 'void *(void *, size_t, size_t, size_t) __attribute__((cdecl))':'void *(void *, size_t, size_t, size_t)'
| |-ParmVarDecl 0x28b8a661360 <col:200, col:207> col:207 _Memory 'void *'
| |-ParmVarDecl 0x28b8a6613d8 <col:240, col:247> col:247 _NewSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x28b8a661450 <col:262, col:269> col:269 _Alignment 'size_t':'unsigned long long'
| |-ParmVarDecl 0x28b8a6614c8 <col:286, col:293> col:293 _Offset 'size_t':'unsigned long long'
| |-NoAliasAttr 0x28b8a6616c8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:32>
| `-RestrictAttr 0x28b8a661720 <line:615:33> restrict
|-FunctionDecl 0x28b8a661b98 <line:611:21, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:657:334> col:142 _aligned_offset_recalloc 'void *(void *, size_t, size_t, size_t, size_t) __attribute__((cdecl))':'void *(void *, size_t, size_t, size_t, size_t)'
| |-ParmVarDecl 0x28b8a661778 <col:198, col:205> col:205 _Memory 'void *'
| |-ParmVarDecl 0x28b8a6617f0 <col:238, col:245> col:245 _Count 'size_t':'unsigned long long'
| |-ParmVarDecl 0x28b8a661868 <col:277, col:284> col:284 _Size 'size_t':'unsigned long long'
| |-ParmVarDecl 0x28b8a6618e0 <col:296, col:303> col:303 _Alignment 'size_t':'unsigned long long'
| |-ParmVarDecl 0x28b8a661958 <col:320, col:327> col:327 _Offset 'size_t':'unsigned long long'
| |-NoAliasAttr 0x28b8a661c60 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:32>
| `-RestrictAttr 0x28b8a661cb8 <line:615:33> restrict
|-FunctionDecl 0x28b8a661fe0 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:658:73, col:176> col:88 _aligned_msize 'size_t (void *, size_t, size_t) __attribute__((cdecl))':'size_t (void *, size_t, size_t)'
| |-ParmVarDecl 0x28b8a661d10 <col:117, col:124> col:124 _Memory 'void *'
| |-ParmVarDecl 0x28b8a661d88 <col:138, col:145> col:145 _Alignment 'size_t':'unsigned long long'
| `-ParmVarDecl 0x28b8a661e00 <col:162, col:169> col:169 _Offset 'size_t':'unsigned long long'
|-FunctionDecl 0x28b8a662438 <line:685:28, col:157> col:44 _itow_s 'errno_t (int, wchar_t *, size_t, int) __attribute__((cdecl))':'errno_t (int, wchar_t *, size_t, int)'
| |-ParmVarDecl 0x28b8a6620c8 <col:58, col:62> col:62 _Val 'int'
| |-ParmVarDecl 0x28b8a662140 <col:97, col:107> col:107 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x28b8a6621b8 <col:121, col:128> col:128 _SizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x28b8a662238 <col:147, col:151> col:151 _Radix 'int'
|-FunctionDecl 0x28b8a6628b0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1951:149> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:687:82 _itow 'wchar_t *(int, wchar_t *, int) __attribute__((cdecl))':'wchar_t *(int, wchar_t *, int)'
| |-ParmVarDecl 0x28b8a6625e8 <col:94, col:99> col:99 _Value 'int'
| |-ParmVarDecl 0x28b8a662660 <col:131, col:140> col:140 _Dest 'wchar_t *'
| |-ParmVarDecl 0x28b8a6626e0 <col:152, col:157> col:157 _Radix 'int'
| `-DeprecatedAttr 0x28b8a662968 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _itow_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x28b8a662e28 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:688:28, col:158> col:44 _ltow_s 'errno_t (long, wchar_t *, size_t, int) __attribute__((cdecl))':'errno_t (long, wchar_t *, size_t, int)'
| |-ParmVarDecl 0x28b8a662ab0 <col:58, col:63> col:63 _Val 'long'
| |-ParmVarDecl 0x28b8a662b28 <col:98, col:108> col:108 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x28b8a662ba0 <col:122, col:129> col:129 _SizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x28b8a662c20 <col:148, col:152> col:152 _Radix 'int'
|-FunctionDecl 0x28b8a65b230 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1951:149> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:690:82 _ltow 'wchar_t *(long, wchar_t *, int) __attribute__((cdecl))':'wchar_t *(long, wchar_t *, int)'
| |-ParmVarDecl 0x28b8a65af68 <col:94, col:100> col:100 _Value 'long'
| |-ParmVarDecl 0x28b8a65afe0 <col:132, col:141> col:141 _Dest 'wchar_t *'
| |-ParmVarDecl 0x28b8a65b060 <col:153, col:158> col:158 _Radix 'int'
| `-DeprecatedAttr 0x28b8a65b2e8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _ltow_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x28b8a65b7a8 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:691:28, col:168> col:44 _ultow_s 'errno_t (unsigned long, wchar_t *, size_t, int) __attribute__((cdecl))':'errno_t (unsigned long, wchar_t *, size_t, int)'
| |-ParmVarDecl 0x28b8a65b430 <col:59, col:73> col:73 _Val 'unsigned long'
| |-ParmVarDecl 0x28b8a65b4a8 <col:108, col:118> col:118 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x28b8a65b520 <col:132, col:139> col:139 _SizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x28b8a65b5a0 <col:158, col:162> col:162 _Radix 'int'
|-FunctionDecl 0x28b8a65bc20 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1951:149> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:693:82 _ultow 'wchar_t *(unsigned long, wchar_t *, int) __attribute__((cdecl))':'wchar_t *(unsigned long, wchar_t *, int)'
| |-ParmVarDecl 0x28b8a65b958 <col:95, col:110> col:110 _Value 'unsigned long'
| |-ParmVarDecl 0x28b8a65b9d0 <col:142, col:151> col:151 _Dest 'wchar_t *'
| |-ParmVarDecl 0x28b8a65ba50 <col:163, col:168> col:168 _Radix 'int'
| `-DeprecatedAttr 0x28b8a65bcd8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _ultow_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x28b8a6630d0 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:694:24, col:118> col:39 wcstod 'double (const wchar_t *, wchar_t **) __attribute__((cdecl))':'double (const wchar_t *, wchar_t **)'
| |-ParmVarDecl 0x28b8a65be18 <col:53, col:69> col:69 _Str 'const wchar_t *'
| `-ParmVarDecl 0x28b8a662f28 <col:100, col:111> col:111 _EndPtr 'wchar_t **'
|-FunctionDecl 0x28b8a663478 <line:695:24, col:148> col:39 _wcstod_l 'double (const wchar_t *, wchar_t **, _locale_t) __attribute__((cdecl))':'double (const wchar_t *, wchar_t **, _locale_t)'
| |-ParmVarDecl 0x28b8a6631a8 <col:56, col:71> col:71 _Str 'const wchar_t *'
| |-ParmVarDecl 0x28b8a663228 <col:102, col:113> col:113 _EndPtr 'wchar_t **'
| `-ParmVarDecl 0x28b8a6632a0 <col:131, col:141> col:141 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x28b8a663838 <line:696:24, col:129> col:39 wcstol 'long (const wchar_t *, wchar_t **, int) __attribute__((cdecl))':'long (const wchar_t *, wchar_t **, int)'
| |-ParmVarDecl 0x28b8a663558 <col:53, col:68> col:68 _Str 'const wchar_t *'
| |-ParmVarDecl 0x28b8a6635d8 <col:99, col:110> col:110 _EndPtr 'wchar_t **'
| `-ParmVarDecl 0x28b8a663658 <col:119, col:123> col:123 _Radix 'int'
|-FunctionDecl 0x28b8a663ca0 <line:697:24, col:159> col:39 _wcstol_l 'long (const wchar_t *, wchar_t **, int, _locale_t) __attribute__((cdecl))':'long (const wchar_t *, wchar_t **, int, _locale_t)'
| |-ParmVarDecl 0x28b8a663918 <col:56, col:71> col:71 _Str 'const wchar_t *'
| |-ParmVarDecl 0x28b8a663998 <col:102, col:112> col:112 _EndPtr 'wchar_t **'
| |-ParmVarDecl 0x28b8a663a18 <col:121, col:125> col:125 _Radix 'int'
| `-ParmVarDecl 0x28b8a663a90 <col:142, col:152> col:152 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x28b8a65bff8 <line:698:24, col:133> col:43 wcstoll 'long long (const wchar_t *, wchar_t **, int) __attribute__((cdecl))':'long long (const wchar_t *, wchar_t **, int)'
| |-ParmVarDecl 0x28b8a663d88 <col:58, col:73> col:73 _Str 'const wchar_t *'
| |-ParmVarDecl 0x28b8a663e08 <col:104, col:114> col:114 _EndPtr 'wchar_t **'
| `-ParmVarDecl 0x28b8a663e88 <col:123, col:127> col:127 _Radix 'int'
|-FunctionDecl 0x28b8a65c460 <line:699:24, col:164> col:43 _wcstoll_l 'long long (const wchar_t *, wchar_t **, int, _locale_t) __attribute__((cdecl))':'long long (const wchar_t *, wchar_t **, int, _locale_t)'
| |-ParmVarDecl 0x28b8a65c0d8 <col:61, col:76> col:76 _Str 'const wchar_t *'
| |-ParmVarDecl 0x28b8a65c158 <col:107, col:117> col:117 _EndPtr 'wchar_t **'
| |-ParmVarDecl 0x28b8a65c1d8 <col:126, col:130> col:130 _Radix 'int'
| `-ParmVarDecl 0x28b8a65c250 <col:147, col:157> col:157 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x28b8a65c828 <line:700:24, col:137> col:46 wcstoul 'unsigned long (const wchar_t *, wchar_t **, int) __attribute__((cdecl))':'unsigned long (const wchar_t *, wchar_t **, int)'
| |-ParmVarDecl 0x28b8a65c548 <col:61, col:76> col:76 _Str 'const wchar_t *'
| |-ParmVarDecl 0x28b8a65c5c8 <col:107, col:118> col:118 _EndPtr 'wchar_t **'
| `-ParmVarDecl 0x28b8a65c648 <col:127, col:131> col:131 _Radix 'int'
|-FunctionDecl 0x28b8a65cc90 <line:701:24, col:167> col:46 _wcstoul_l 'unsigned long (const wchar_t *, wchar_t **, int, _locale_t) __attribute__((cdecl))':'unsigned long (const wchar_t *, wchar_t **, int, _locale_t)'
| |-ParmVarDecl 0x28b8a65c908 <col:64, col:79> col:79 _Str 'const wchar_t *'
| |-ParmVarDecl 0x28b8a65c988 <col:110, col:120> col:120 _EndPtr 'wchar_t **'
| |-ParmVarDecl 0x28b8a65ca08 <col:129, col:133> col:133 _Radix 'int'
| `-ParmVarDecl 0x28b8a65ca80 <col:150, col:160> col:160 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x28b8a66b168 <line:702:24, col:143> col:51 wcstoull 'unsigned long long (const wchar_t *, wchar_t **, int) __attribute__((cdecl))':'unsigned long long (const wchar_t *, wchar_t **, int)'
| |-ParmVarDecl 0x28b8a65cd78 <col:67, col:82> col:82 _Str 'const wchar_t *'
| |-ParmVarDecl 0x28b8a65cdf8 <col:113, col:124> col:124 _EndPtr 'wchar_t **'
| `-ParmVarDecl 0x28b8a66af90 <col:133, col:137> col:137 _Radix 'int'
|-FunctionDecl 0x28b8a66b5d0 <line:703:24, col:174> col:51 _wcstoull_l 'unsigned long long (const wchar_t *, wchar_t **, int, _locale_t) __attribute__((cdecl))':'unsigned long long (const wchar_t *, wchar_t **, int, _locale_t)'
| |-ParmVarDecl 0x28b8a66b248 <col:70, col:85> col:85 _Str 'const wchar_t *'
| |-ParmVarDecl 0x28b8a66b2c8 <col:116, col:127> col:127 _EndPtr 'wchar_t **'
| |-ParmVarDecl 0x28b8a66b348 <col:136, col:140> col:140 _Radix 'int'
| `-ParmVarDecl 0x28b8a66b3c0 <col:157, col:167> col:167 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x28b8a66b8e0 <line:704:24, col:124> col:44 wcstold 'long double (const wchar_t *, wchar_t **) __attribute__((cdecl))':'long double (const wchar_t *, wchar_t **)'
| |-ParmVarDecl 0x28b8a66b6b8 <col:59, col:75> col:75 _Str 'const wchar_t *'
| `-ParmVarDecl 0x28b8a66b738 <col:106, col:117> col:117 _EndPtr 'wchar_t **'
|-FunctionDecl 0x28b8a66bc88 <line:705:24, col:155> col:44 _wcstold_l 'long double (const wchar_t *, wchar_t **, _locale_t) __attribute__((cdecl))':'long double (const wchar_t *, wchar_t **, _locale_t)'
| |-ParmVarDecl 0x28b8a66b9b8 <col:62, col:78> col:78 _Str 'const wchar_t *'
| |-ParmVarDecl 0x28b8a66ba38 <col:109, col:120> col:120 _EndPtr 'wchar_t **'
| `-ParmVarDecl 0x28b8a66bab0 <col:138, col:148> col:148 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x28b8a666f50 <line:706:24, col:117> col:38 wcstof 'float (const wchar_t *, wchar_t **) __attribute__((cdecl))':'float (const wchar_t *, wchar_t **)'
| |-ParmVarDecl 0x28b8a66bd68 <col:52, col:68> col:68 _Str 'const wchar_t *'
| `-ParmVarDecl 0x28b8a66bde8 <col:99, col:110> col:110 _EndPtr 'wchar_t **'
|-FunctionDecl 0x28b8a6672f8 <line:707:24, col:148> col:38 _wcstof_l 'float (const wchar_t *, wchar_t **, _locale_t) __attribute__((cdecl))':'float (const wchar_t *, wchar_t **, _locale_t)'
| |-ParmVarDecl 0x28b8a667028 <col:55, col:71> col:71 _Str 'const wchar_t *'
| |-ParmVarDecl 0x28b8a6670a8 <col:102, col:113> col:113 _EndPtr 'wchar_t **'
| `-ParmVarDecl 0x28b8a667120 <col:131, col:141> col:141 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x28b8a667570 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:711:118> col:78 _wgetenv 'wchar_t *(const wchar_t *) __attribute__((cdecl))':'wchar_t *(const wchar_t *)'
| |-ParmVarDecl 0x28b8a667498 <col:94, col:110> col:110 _VarName 'const wchar_t *'
| `-DeprecatedAttr 0x28b8a667618 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wdupenv_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x28b8a667ac8 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:712:28, col:198> col:44 _wgetenv_s 'errno_t (size_t *, wchar_t *, size_t, const wchar_t *) __attribute__((cdecl))':'errno_t (size_t *, wchar_t *, size_t, const wchar_t *)'
| |-ParmVarDecl 0x28b8a667758 <col:61, col:70> col:70 _ReturnSize 'size_t *'
| |-ParmVarDecl 0x28b8a6677d0 <col:119, col:129> col:129 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x28b8a667848 <col:143, col:150> col:150 _DstSizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x28b8a6678c0 <col:174, col:190> col:190 _VarName 'const wchar_t *'
|-FunctionDecl 0x28b8a667e80 <line:720:28, col:214> col:44 _wdupenv_s 'errno_t (wchar_t **, size_t *, const wchar_t *) __attribute__((cdecl))':'errno_t (wchar_t **, size_t *, const wchar_t *)'
| |-ParmVarDecl 0x28b8a667bb8 <col:127, col:137> col:137 _Buffer 'wchar_t **'
| |-ParmVarDecl 0x28b8a667c30 <col:156, col:164> col:164 _BufferSizeInWords 'size_t *'
| `-ParmVarDecl 0x28b8a667ca8 <col:191, col:206> col:206 _VarName 'const wchar_t *'
|-FunctionDecl 0x28b8a6640a8 <line:728:9, col:65> col:21 _wsystem 'int (const wchar_t *) __attribute__((cdecl))':'int (const wchar_t *)'
| `-ParmVarDecl 0x28b8a663f30 <col:41, col:57> col:57 _Command 'const wchar_t *'
|-FunctionDecl 0x28b8a6642f8 <line:733:24, col:71> col:39 _wtof 'double (const wchar_t *) __attribute__((cdecl))':'double (const wchar_t *)'
| `-ParmVarDecl 0x28b8a664178 <col:52, col:67> col:67 _Str 'const wchar_t *'
|-FunctionDecl 0x28b8a6645f0 <line:734:24, col:101> col:39 _wtof_l 'double (const wchar_t *, _locale_t) __attribute__((cdecl))':'double (const wchar_t *, _locale_t)'
| |-ParmVarDecl 0x28b8a6643c8 <col:54, col:69> col:69 _Str 'const wchar_t *'
| `-ParmVarDecl 0x28b8a664440 <col:84, col:94> col:94 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x28b8a6647a8 <line:735:24, col:68> col:36 _wtoi 'int (const wchar_t *) __attribute__((cdecl))':'int (const wchar_t *)'
| `-ParmVarDecl 0x28b8a6646c8 <col:49, col:64> col:64 _Str 'const wchar_t *'
|-FunctionDecl 0x28b8a664aa0 <line:736:24, col:98> col:36 _wtoi_l 'int (const wchar_t *, _locale_t) __attribute__((cdecl))':'int (const wchar_t *, _locale_t)'
| |-ParmVarDecl 0x28b8a664878 <col:51, col:66> col:66 _Str 'const wchar_t *'
| `-ParmVarDecl 0x28b8a6648f0 <col:81, col:91> col:91 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x28b8a664cf8 <line:737:24, col:69> col:37 _wtol 'long (const wchar_t *) __attribute__((cdecl))':'long (const wchar_t *)'
| `-ParmVarDecl 0x28b8a664b78 <col:50, col:65> col:65 _Str 'const wchar_t *'
|-FunctionDecl 0x28b8a666010 <line:738:24, col:99> col:37 _wtol_l 'long (const wchar_t *, _locale_t) __attribute__((cdecl))':'long (const wchar_t *, _locale_t)'
| |-ParmVarDecl 0x28b8a664dc8 <col:52, col:67> col:67 _Str 'const wchar_t *'
| `-ParmVarDecl 0x28b8a664e40 <col:82, col:92> col:92 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x28b8a666268 <line:739:24, col:75> col:42 _wtoll 'long long (const wchar_t *) __attribute__((cdecl))':'long long (const wchar_t *)'
| `-ParmVarDecl 0x28b8a6660e8 <col:56, col:71> col:71 _Str 'const wchar_t *'
|-FunctionDecl 0x28b8a666560 <line:740:24, col:105> col:42 _wtoll_l 'long long (const wchar_t *, _locale_t) __attribute__((cdecl))':'long long (const wchar_t *, _locale_t)'
| |-ParmVarDecl 0x28b8a666338 <col:58, col:73> col:73 _Str 'const wchar_t *'
| `-ParmVarDecl 0x28b8a6663b0 <col:88, col:98> col:98 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x28b8a6669b8 <line:742:28, col:162> col:44 _i64tow_s 'errno_t (long long, wchar_t *, size_t, int) __attribute__((cdecl))':'errno_t (long long, wchar_t *, size_t, int)'
| |-ParmVarDecl 0x28b8a666640 <col:59, col:67> col:67 _Val 'long long'
| |-ParmVarDecl 0x28b8a6666b8 <col:102, col:112> col:112 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x28b8a666730 <col:126, col:133> col:133 _SizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x28b8a6667b0 <col:152, col:156> col:156 _Radix 'int'
|-FunctionDecl 0x28b8a666e30 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:743:146> col:62 _i64tow 'wchar_t *(long long, wchar_t *, int) __attribute__((cdecl))':'wchar_t *(long long, wchar_t *, int)'
| |-ParmVarDecl 0x28b8a666b68 <col:75, col:83> col:83 _Val 'long long'
| |-ParmVarDecl 0x28b8a666be0 <col:112, col:122> col:122 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x28b8a666c60 <col:136, col:140> col:140 _Radix 'int'
| `-DeprecatedAttr 0x28b8a666ee8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _i64tow_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x28b8a6653a8 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:744:28, col:172> col:44 _ui64tow_s 'errno_t (unsigned long long, wchar_t *, size_t, int) __attribute__((cdecl))':'errno_t (unsigned long long, wchar_t *, size_t, int)'
| |-ParmVarDecl 0x28b8a665030 <col:60, col:77> col:77 _Val 'unsigned long long'
| |-ParmVarDecl 0x28b8a6650a8 <col:112, col:122> col:122 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x28b8a665120 <col:136, col:143> col:143 _SizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x28b8a6651a0 <col:162, col:166> col:166 _Radix 'int'
|-FunctionDecl 0x28b8a665820 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:745:157> col:63 _ui64tow 'wchar_t *(unsigned long long, wchar_t *, int) __attribute__((cdecl))':'wchar_t *(unsigned long long, wchar_t *, int)'
| |-ParmVarDecl 0x28b8a665558 <col:77, col:94> col:94 _Val 'unsigned long long'
| |-ParmVarDecl 0x28b8a6655d0 <col:123, col:133> col:133 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x28b8a665650 <col:147, col:151> col:151 _Radix 'int'
| `-DeprecatedAttr 0x28b8a6658d8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _ui64tow_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x28b8a665af8 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:746:24, col:76> col:42 _wtoi64 'long long (const wchar_t *) __attribute__((cdecl))':'long long (const wchar_t *)'
| `-ParmVarDecl 0x28b8a665a18 <col:57, col:72> col:72 _Str 'const wchar_t *'
|-FunctionDecl 0x28b8a665d40 <line:747:24, col:106> col:42 _wtoi64_l 'long long (const wchar_t *, _locale_t) __attribute__((cdecl))':'long long (const wchar_t *, _locale_t)'
| |-ParmVarDecl 0x28b8a665bc8 <col:59, col:74> col:74 _Str 'const wchar_t *'
| `-ParmVarDecl 0x28b8a665c40 <col:89, col:99> col:99 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x28b8a669090 <line:748:24, col:141> col:42 _wcstoi64 'long long (const wchar_t *, wchar_t **, int) __attribute__((cdecl))':'long long (const wchar_t *, wchar_t **, int)'
| |-ParmVarDecl 0x28b8a665e18 <col:59, col:75> col:75 _Str 'const wchar_t *'
| |-ParmVarDecl 0x28b8a665e98 <col:106, col:117> col:117 _EndPtr 'wchar_t **'
| `-ParmVarDecl 0x28b8a668f70 <col:131, col:135> col:135 _Radix 'int'
|-FunctionDecl 0x28b8a669428 <line:749:24, col:171> col:42 _wcstoi64_l 'long long (const wchar_t *, wchar_t **, int, _locale_t) __attribute__((cdecl))':'long long (const wchar_t *, wchar_t **, int, _locale_t)'
| |-ParmVarDecl 0x28b8a669170 <col:61, col:77> col:77 _Str 'const wchar_t *'
| |-ParmVarDecl 0x28b8a6691f0 <col:108, col:119> col:119 _EndPtr 'wchar_t **'
| |-ParmVarDecl 0x28b8a669270 <col:133, col:137> col:137 _Radix 'int'
| `-ParmVarDecl 0x28b8a6692e8 <col:154, col:164> col:164 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x28b8a669730 <line:750:24, col:150> col:50 _wcstoui64 'unsigned long long (const wchar_t *, wchar_t **, int) __attribute__((cdecl))':'unsigned long long (const wchar_t *, wchar_t **, int)'
| |-ParmVarDecl 0x28b8a669510 <col:68, col:84> col:84 _Str 'const wchar_t *'
| |-ParmVarDecl 0x28b8a669590 <col:115, col:126> col:126 _EndPtr 'wchar_t **'
| `-ParmVarDecl 0x28b8a669610 <col:140, col:144> col:144 _Radix 'int'
|-FunctionDecl 0x28b8a669ac8 <line:751:24, col:180> col:50 _wcstoui64_l 'unsigned long long (const wchar_t *, wchar_t **, int, _locale_t) __attribute__((cdecl))':'unsigned long long (const wchar_t *, wchar_t **, int, _locale_t)'
| |-ParmVarDecl 0x28b8a669810 <col:70, col:85> col:85 _Str 'const wchar_t *'
| |-ParmVarDecl 0x28b8a669890 <col:117, col:128> col:128 _EndPtr 'wchar_t **'
| |-ParmVarDecl 0x28b8a669910 <col:142, col:146> col:146 _Radix 'int'
| `-ParmVarDecl 0x28b8a669988 <col:163, col:173> col:173 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x28b8a669dd0 <line:770:24, col:151> col:39 _fullpath 'char *(char *, const char *, size_t) __attribute__((cdecl))':'char *(char *, const char *, size_t)'
| |-ParmVarDecl 0x28b8a669bb8 <col:82, col:89> col:89 _FullPath 'char *'
| |-ParmVarDecl 0x28b8a669c38 <col:107, col:120> col:120 _Path 'const char *'
| `-ParmVarDecl 0x28b8a669cb0 <col:132, col:139> col:139 _SizeInBytes 'size_t':'unsigned long long'
|-FunctionDecl 0x28b8a66d418 <line:778:28, col:189> col:44 _ecvt_s 'errno_t (char *, size_t, double, int, int *, int *) __attribute__((cdecl))':'errno_t (char *, size_t, double, int, int *, int *)'
| |-ParmVarDecl 0x28b8a669eb8 <col:74, col:81> col:81 _DstBuf 'char *'
| |-ParmVarDecl 0x28b8a66cfb0 <col:95, col:102> col:102 _Size 'size_t':'unsigned long long'
| |-ParmVarDecl 0x28b8a66d030 <col:114, col:121> col:121 _Val 'double'
| |-ParmVarDecl 0x28b8a66d0b0 <col:132, col:136> col:136 _NumOfDights 'int'
| |-ParmVarDecl 0x28b8a66d130 <col:156, col:162> col:162 _PtDec 'int *'
| `-ParmVarDecl 0x28b8a66d1b0 <col:176, col:182> col:182 _PtSign 'int *'
|-FunctionDecl 0x28b8a66d910 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:780:158> col:72 _ecvt 'char *(double, int, int *, int *) __attribute__((cdecl))':'char *(double, int, int *, int *)'
| |-ParmVarDecl 0x28b8a66d5d8 <col:83, col:90> col:90 _Val 'double'
| |-ParmVarDecl 0x28b8a66d658 <col:101, col:105> col:105 _NumOfDigits 'int'
| |-ParmVarDecl 0x28b8a66d6d8 <col:125, col:131> col:131 _PtDec 'int *'
| |-ParmVarDecl 0x28b8a66d758 <col:145, col:151> col:151 _PtSign 'int *'
| `-DeprecatedAttr 0x28b8a66d9d0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _ecvt_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x28b8a66df08 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:781:28, col:186> col:44 _fcvt_s 'errno_t (char *, size_t, double, int, int *, int *) __attribute__((cdecl))':'errno_t (char *, size_t, double, int, int *, int *)'
| |-ParmVarDecl 0x28b8a66db18 <col:74, col:81> col:81 _DstBuf 'char *'
| |-ParmVarDecl 0x28b8a66db90 <col:95, col:102> col:102 _Size 'size_t':'unsigned long long'
| |-ParmVarDecl 0x28b8a66dc10 <col:114, col:121> col:121 _Val 'double'
| |-ParmVarDecl 0x28b8a66dc90 <col:132, col:136> col:136 _NumOfDec 'int'
| |-ParmVarDecl 0x28b8a66dd10 <col:153, col:159> col:159 _PtDec 'int *'
| `-ParmVarDecl 0x28b8a66dd90 <col:173, col:179> col:179 _PtSign 'int *'
|-FunctionDecl 0x28b8a668340 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:783:155> col:72 _fcvt 'char *(double, int, int *, int *) __attribute__((cdecl))':'char *(double, int, int *, int *)'
| |-ParmVarDecl 0x28b8a668080 <col:83, col:90> col:90 _Val 'double'
| |-ParmVarDecl 0x28b8a668100 <col:101, col:105> col:105 _NumOfDec 'int'
| |-ParmVarDecl 0x28b8a668180 <col:122, col:128> col:128 _PtDec 'int *'
| |-ParmVarDecl 0x28b8a668200 <col:142, col:148> col:148 _PtSign 'int *'
| `-DeprecatedAttr 0x28b8a668400 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _fcvt_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x28b8a6688c8 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:784:9, col:129> col:25 _gcvt_s 'errno_t (char *, size_t, double, int) __attribute__((cdecl))':'errno_t (char *, size_t, double, int)'
| |-ParmVarDecl 0x28b8a668548 <col:55, col:62> col:62 _DstBuf 'char *'
| |-ParmVarDecl 0x28b8a6685c0 <col:76, col:83> col:83 _Size 'size_t':'unsigned long long'
| |-ParmVarDecl 0x28b8a668640 <col:95, col:102> col:102 _Val 'double'
| `-ParmVarDecl 0x28b8a6686c0 <col:113, col:117> col:117 _NumOfDigits 'int'
|-FunctionDecl 0x28b8a668d18 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:786:141> col:57 _gcvt 'char *(double, int, char *) __attribute__((cdecl))':'char *(double, int, char *)'
| |-ParmVarDecl 0x28b8a668a78 <col:68, col:75> col:75 _Val 'double'
| |-ParmVarDecl 0x28b8a668af8 <col:86, col:90> col:90 _NumOfDigits 'int'
| |-ParmVarDecl 0x28b8a668b78 <col:127, col:134> col:134 _DstBuf 'char *'
| `-DeprecatedAttr 0x28b8a668dd0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _gcvt_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x28b8a66c200 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:788:24, col:91> col:36 _atodbl 'int (_CRT_DOUBLE *, char *) __attribute__((cdecl))':'int (_CRT_DOUBLE *, char *)'
| |-ParmVarDecl 0x28b8a66bfd8 <col:50, col:64> col:64 _Result '_CRT_DOUBLE *'
| `-ParmVarDecl 0x28b8a66c058 <col:80, col:87> col:87 _Str 'char *'
|-FunctionDecl 0x28b8a66c580 <line:789:24, col:89> col:36 _atoldbl 'int (_LDOUBLE *, char *) __attribute__((cdecl))':'int (_LDOUBLE *, char *)'
| |-ParmVarDecl 0x28b8a66c358 <col:51, col:62> col:62 _Result '_LDOUBLE *'
| `-ParmVarDecl 0x28b8a66c3d8 <col:78, col:85> col:85 _Str 'char *'
|-FunctionDecl 0x28b8a66c900 <line:790:24, col:96> col:36 _atoflt 'int (_CRT_FLOAT *, const char *) __attribute__((cdecl))':'int (_CRT_FLOAT *, const char *)'
| |-ParmVarDecl 0x28b8a66c6d8 <col:50, col:63> col:63 _Result '_CRT_FLOAT *'
| `-ParmVarDecl 0x28b8a66c758 <col:79, col:92> col:92 _Str 'const char *'
|-FunctionDecl 0x28b8a66cca8 <line:791:24, col:121> col:36 _atodbl_l 'int (_CRT_DOUBLE *, char *, _locale_t) __attribute__((cdecl))':'int (_CRT_DOUBLE *, char *, _locale_t)'
| |-ParmVarDecl 0x28b8a66c9d8 <col:52, col:66> col:66 _Result '_CRT_DOUBLE *'
| |-ParmVarDecl 0x28b8a66ca58 <col:82, col:89> col:89 _Str 'char *'
| `-ParmVarDecl 0x28b8a66cad0 <col:104, col:114> col:114 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x28b8a66e0a8 <line:792:24, col:119> col:36 _atoldbl_l 'int (_LDOUBLE *, char *, _locale_t) __attribute__((cdecl))':'int (_LDOUBLE *, char *, _locale_t)'
| |-ParmVarDecl 0x28b8a66cd88 <col:53, col:64> col:64 _Result '_LDOUBLE *'
| |-ParmVarDecl 0x28b8a66ce08 <col:80, col:87> col:87 _Str 'char *'
| `-ParmVarDecl 0x28b8a66ce80 <col:102, col:112> col:112 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x28b8a66e458 <line:793:24, col:126> col:36 _atoflt_l 'int (_CRT_FLOAT *, const char *, _locale_t) __attribute__((cdecl))':'int (_CRT_FLOAT *, const char *, _locale_t)'
| |-ParmVarDecl 0x28b8a66e188 <col:52, col:65> col:65 _Result '_CRT_FLOAT *'
| |-ParmVarDecl 0x28b8a66e208 <col:81, col:94> col:94 _Str 'const char *'
| `-ParmVarDecl 0x28b8a66e280 <col:109, col:119> col:119 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x28b8a66e730 <line:794:46> col:46 implicit _lrotl 'unsigned long (unsigned long, int)' extern
| |-ParmVarDecl 0x28b8a66e7d0 <<invalid sloc>> <invalid sloc> 'unsigned long'
| |-ParmVarDecl 0x28b8a66e838 <<invalid sloc>> <invalid sloc> 'int'
| `-NoThrowAttr 0x28b8a66e8b0 <col:46> Implicit
|-FunctionDecl 0x28b8a66e908 prev 0x28b8a66e730 <col:24, col:93> col:46 _lrotl 'unsigned long (unsigned long, int)'
| |-ParmVarDecl 0x28b8a66e540 <col:58, col:72> col:72 _Val 'unsigned long'
| |-ParmVarDecl 0x28b8a66e5c0 <col:83, col:87> col:87 _Shift 'int'
| `-NoThrowAttr 0x28b8a66ea00 <col:46> Inherited Implicit
|-FunctionDecl 0x28b8a66ebc0 <line:795:46> col:46 implicit _lrotr 'unsigned long (unsigned long, int)' extern
| |-ParmVarDecl 0x28b8a66ec60 <<invalid sloc>> <invalid sloc> 'unsigned long'
| |-ParmVarDecl 0x28b8a66ecc8 <<invalid sloc>> <invalid sloc> 'int'
| `-NoThrowAttr 0x28b8a66ed40 <col:46> Implicit
|-FunctionDecl 0x28b8a66ed98 prev 0x28b8a66ebc0 <col:24, col:93> col:46 _lrotr 'unsigned long (unsigned long, int)'
| |-ParmVarDecl 0x28b8a66ea40 <col:58, col:72> col:72 _Val 'unsigned long'
| |-ParmVarDecl 0x28b8a66eac0 <col:83, col:87> col:87 _Shift 'int'
| `-NoThrowAttr 0x28b8a66ee90 <col:46> Inherited Implicit
|-FunctionDecl 0x28b8a6703d8 <line:796:40, line:797:37> line:796:58 _makepath_s 'errno_t (char *, size_t, const char *, const char *, const char *, const char *) __attribute__((cdecl))':'errno_t (char *, size_t, const char *, const char *, const char *, const char *)'
| |-ParmVarDecl 0x28b8a66eed0 <col:99, col:106> col:106 _PathResult 'char *'
| |-ParmVarDecl 0x28b8a66ef48 <col:124, col:131> col:131 _SizeInWords 'size_t':'unsigned long long'
| |-ParmVarDecl 0x28b8a66fff8 <col:156, col:169> col:169 _Drive 'const char *'
| |-ParmVarDecl 0x28b8a670078 <col:188, col:201> col:201 _Dir 'const char *'
| |-ParmVarDecl 0x28b8a6700f8 <col:218, col:231> col:231 _Filename 'const char *'
| `-ParmVarDecl 0x28b8a670178 <line:797:20, col:33> col:33 _Ext 'const char *'
|-FunctionDecl 0x28b8a670980 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1948:181> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:799:78 _makepath 'void (char *, const char *, const char *, const char *, const char *) __attribute__((cdecl))':'void (char *, const char *, const char *, const char *, const char *)'
| |-ParmVarDecl 0x28b8a670598 <col:113, col:119> col:119 _Path 'char *'
| |-ParmVarDecl 0x28b8a670618 <col:137, col:151> col:151 _Drive 'const char *'
| |-ParmVarDecl 0x28b8a670698 <col:170, col:184> col:184 _Dir 'const char *'
| |-ParmVarDecl 0x28b8a670718 <col:201, col:215> col:215 _Filename 'const char *'
| |-ParmVarDecl 0x28b8a670798 <col:237, col:251> col:251 _Ext 'const char *'
| `-DeprecatedAttr 0x28b8a670a48 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _makepath_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x28b8a670d20 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:826:9, col:59> col:27 _onexit '_onexit_t (_onexit_t) __attribute__((cdecl))':'_onexit_t (_onexit_t)'
| `-ParmVarDecl 0x28b8a670bb0 <col:44, col:54> col:54 _Func '_onexit_t':'int (*)(void) __attribute__((cdecl))'
|-FunctionDecl 0x28b8a670f40 <line:831:9, col:60> col:22 perror 'void (const char *) __attribute__((cdecl))':'void (const char *)'
| `-ParmVarDecl 0x28b8a670df8 <col:40, col:53> col:53 _ErrMsg 'const char *'
|-FunctionDecl 0x28b8a66a098 <line:838:24, col:77> col:39 _putenv 'int (const char *) __attribute__((cdecl))':'int (const char *)'
| `-ParmVarDecl 0x28b8a669fb8 <col:54, col:67> col:67 _EnvString 'const char *'
|-FunctionDecl 0x28b8a66a358 <line:839:28, col:107> col:44 _putenv_s 'errno_t (const char *, const char *) __attribute__((cdecl))':'errno_t (const char *, const char *)'
| |-ParmVarDecl 0x28b8a66a170 <col:61, col:74> col:74 _Name 'const char *'
| `-ParmVarDecl 0x28b8a66a1f0 <col:88, col:101> col:101 _Value 'const char *'
|-FunctionDecl 0x28b8a66a620 <line:842:30> col:30 implicit _rotl 'unsigned int (unsigned int, int)' extern
| |-ParmVarDecl 0x28b8a66a6c0 <<invalid sloc>> <invalid sloc> 'unsigned int'
| |-ParmVarDecl 0x28b8a66a728 <<invalid sloc>> <invalid sloc> 'int'
| `-NoThrowAttr 0x28b8a66a7a0 <col:30> Implicit
|-FunctionDecl 0x28b8a66a7f8 prev 0x28b8a66a620 <col:9, col:75> col:30 _rotl 'unsigned int (unsigned int, int)'
| |-ParmVarDecl 0x28b8a66a438 <col:41, col:54> col:54 _Val 'unsigned int'
| |-ParmVarDecl 0x28b8a66a4b8 <col:65, col:69> col:69 _Shift 'int'
| `-NoThrowAttr 0x28b8a66a8f0 <col:30> Inherited Implicit
|-FunctionDecl 0x28b8a66ab20 <line:843:34> col:34 implicit _rotl64 'unsigned long long (unsigned long long, int)' extern
| |-ParmVarDecl 0x28b8a66abc0 <<invalid sloc>> <invalid sloc> 'unsigned long long'
| |-ParmVarDecl 0x28b8a66ac28 <<invalid sloc>> <invalid sloc> 'int'
| `-NoThrowAttr 0x28b8a66aca0 <col:34> Implicit
|-FunctionDecl 0x28b8a66acf8 prev 0x28b8a66ab20 <col:9, col:85> col:34 _rotl64 'unsigned long long (unsigned long long, int)'
| |-ParmVarDecl 0x28b8a66a930 <col:47, col:64> col:64 _Val 'unsigned long long'
| |-ParmVarDecl 0x28b8a66a9b0 <col:75, col:79> col:79 _Shift 'int'
| `-NoThrowAttr 0x28b8a66adf0 <col:34> Inherited Implicit
|-FunctionDecl 0x28b8a676080 <line:844:30> col:30 implicit _rotr 'unsigned int (unsigned int, int)' extern
| |-ParmVarDecl 0x28b8a676120 <<invalid sloc>> <invalid sloc> 'unsigned int'
| |-ParmVarDecl 0x28b8a676188 <<invalid sloc>> <invalid sloc> 'int'
| `-NoThrowAttr 0x28b8a676200 <col:30> Implicit
|-FunctionDecl 0x28b8a676258 prev 0x28b8a676080 <col:9, col:75> col:30 _rotr 'unsigned int (unsigned int, int)'
| |-ParmVarDecl 0x28b8a66ae30 <col:41, col:54> col:54 _Val 'unsigned int'
| |-ParmVarDecl 0x28b8a66aeb0 <col:65, col:69> col:69 _Shift 'int'
| `-NoThrowAttr 0x28b8a676350 <col:30> Inherited Implicit
|-FunctionDecl 0x28b8a676510 <line:845:34> col:34 implicit _rotr64 'unsigned long long (unsigned long long, int)' extern
| |-ParmVarDecl 0x28b8a6765b0 <<invalid sloc>> <invalid sloc> 'unsigned long long'
| |-ParmVarDecl 0x28b8a676618 <<invalid sloc>> <invalid sloc> 'int'
| `-NoThrowAttr 0x28b8a676690 <col:34> Implicit
|-FunctionDecl 0x28b8a6766e8 prev 0x28b8a676510 <col:9, col:85> col:34 _rotr64 'unsigned long long (unsigned long long, int)'
| |-ParmVarDecl 0x28b8a676390 <col:47, col:64> col:64 _Val 'unsigned long long'
| |-ParmVarDecl 0x28b8a676410 <col:75, col:79> col:79 _Shift 'int'
| `-NoThrowAttr 0x28b8a6767e0 <col:34> Inherited Implicit
|-FunctionDecl 0x28b8a676b98 <line:849:9, col:171> col:25 _searchenv_s 'errno_t (const char *, const char *, char *, size_t) __attribute__((cdecl))':'errno_t (const char *, const char *, char *, size_t)'
| |-ParmVarDecl 0x28b8a676820 <col:45, col:58> col:58 _Filename 'const char *'
| |-ParmVarDecl 0x28b8a6768a0 <col:76, col:89> col:89 _EnvVar 'const char *'
| |-ParmVarDecl 0x28b8a676920 <col:127, col:134> col:134 _ResultPath 'char *'
| `-ParmVarDecl 0x28b8a676998 <col:152, col:159> col:159 _SizeInBytes 'size_t':'unsigned long long'
|-FunctionDecl 0x28b8a66efd0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1954:149> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:851:78 _searchenv 'void (const char *, const char *, char *) __attribute__((cdecl))':'void (const char *, const char *, char *)'
| |-ParmVarDecl 0x28b8a676d48 <col:97, col:111> col:111 _Filename 'const char *'
| |-ParmVarDecl 0x28b8a676dc8 <col:129, col:143> col:143 _EnvVar 'const char *'
| |-ParmVarDecl 0x28b8a676e48 <col:176, col:182> col:182 _ResultPath 'char *'
| `-DeprecatedAttr 0x28b8a66f088 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _searchenv_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x28b8a66f670 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:854:261> col:62 _splitpath 'void (const char *, char *, char *, char *, char *) __attribute__((cdecl))':'void (const char *, char *, char *, char *, char *)'
| |-ParmVarDecl 0x28b8a66f290 <col:80, col:93> col:93 _FullPath 'const char *'
| |-ParmVarDecl 0x28b8a66f310 <col:129, col:136> col:136 _Drive 'char *'
| |-ParmVarDecl 0x28b8a66f390 <col:169, col:176> col:176 _Dir 'char *'
| |-ParmVarDecl 0x28b8a66f410 <col:207, col:214> col:214 _Filename 'char *'
| |-ParmVarDecl 0x28b8a66f490 <col:250, col:257> col:257 _Ext 'char *'
| `-DeprecatedAttr 0x28b8a66f738 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _splitpath_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x28b8a673010 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:855:40, line:859:79> line:855:57 _splitpath_s 'errno_t (const char *, char *, size_t, char *, size_t, char *, size_t, char *, size_t) __attribute__((cdecl))':'errno_t (const char *, char *, size_t, char *, size_t, char *, size_t, char *, size_t)'
| |-ParmVarDecl 0x28b8a66f880 <col:77, col:90> col:90 _FullPath 'const char *'
| |-ParmVarDecl 0x28b8a66f900 <line:856:48, col:55> col:55 _Drive 'char *'
| |-ParmVarDecl 0x28b8a66f978 <col:68, col:75> col:75 _DriveSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x28b8a66f9f8 <line:857:46, col:53> col:53 _Dir 'char *'
| |-ParmVarDecl 0x28b8a66fa70 <col:64, col:71> col:71 _DirSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x28b8a66faf0 <line:858:51, col:58> col:58 _Filename 'char *'
| |-ParmVarDecl 0x28b8a66fb68 <col:74, col:81> col:81 _FilenameSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x28b8a66fbe8 <line:859:46, col:53> col:53 _Ext 'char *'
| `-ParmVarDecl 0x28b8a66fc60 <col:64, col:71> col:71 _ExtSize 'size_t':'unsigned long long'
|-FunctionDecl 0x28b8a6733c0 <line:862:9, col:204> col:24 _swab 'void (char *, char *, int) __attribute__((cdecl))':'void (char *, char *, int)'
| |-ParmVarDecl 0x28b8a673128 <col:95, col:102> col:102 _Buf1 'char *'
| |-ParmVarDecl 0x28b8a6731a8 <col:174, col:181> col:181 _Buf2 'char *'
| `-ParmVarDecl 0x28b8a673228 <col:188, col:192> col:192 _SizeInBytes 'int'
|-FunctionDecl 0x28b8a6736a8 <line:873:24, col:161> col:42 _wfullpath 'wchar_t *(wchar_t *, const wchar_t *, size_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, const wchar_t *, size_t)'
| |-ParmVarDecl 0x28b8a6734a0 <col:86, col:96> col:96 _FullPath 'wchar_t *'
| |-ParmVarDecl 0x28b8a673518 <col:114, col:130> col:130 _Path 'const wchar_t *'
| `-ParmVarDecl 0x28b8a673590 <col:142, col:149> col:149 _SizeInWords 'size_t':'unsigned long long'
|-FunctionDecl 0x28b8a673c48 <line:879:40, line:880:40> line:879:56 _wmakepath_s 'errno_t (wchar_t *, size_t, const wchar_t *, const wchar_t *, const wchar_t *, const wchar_t *) __attribute__((cdecl))':'errno_t (wchar_t *, size_t, const wchar_t *, const wchar_t *, const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x28b8a673788 <col:91, col:101> col:101 _PathResult 'wchar_t *'
| |-ParmVarDecl 0x28b8a673800 <col:119, col:126> col:126 _SIZE 'size_t':'unsigned long long'
| |-ParmVarDecl 0x28b8a673878 <col:144, col:160> col:160 _Drive 'const wchar_t *'
| |-ParmVarDecl 0x28b8a6738f0 <col:179, col:195> col:195 _Dir 'const wchar_t *'
| |-ParmVarDecl 0x28b8a673968 <col:212, col:228> col:228 _Filename 'const wchar_t *'
| `-ParmVarDecl 0x28b8a6739e0 <line:880:20, col:36> col:36 _Ext 'const wchar_t *'
|-FunctionDecl 0x28b8a6792a0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1948:181> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:882:78 _wmakepath 'void (wchar_t *, const wchar_t *, const wchar_t *, const wchar_t *, const wchar_t *) __attribute__((cdecl))':'void (wchar_t *, const wchar_t *, const wchar_t *, const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x28b8a673e00 <col:114, col:123> col:123 _ResultPath 'wchar_t *'
| |-ParmVarDecl 0x28b8a673e78 <col:147, col:164> col:164 _Drive 'const wchar_t *'
| |-ParmVarDecl 0x28b8a673ef0 <col:183, col:200> col:200 _Dir 'const wchar_t *'
| |-ParmVarDecl 0x28b8a673f68 <col:217, col:234> col:234 _Filename 'const wchar_t *'
| |-ParmVarDecl 0x28b8a679070 <col:256, col:273> col:273 _Ext 'const wchar_t *'
| `-DeprecatedAttr 0x28b8a679368 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wmakepath_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x28b8a679620 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:885:9, col:65> col:22 _wperror 'void (const wchar_t *) __attribute__((cdecl))':'void (const wchar_t *)'
| `-ParmVarDecl 0x28b8a6794a8 <col:42, col:58> col:58 _ErrMsg 'const wchar_t *'
|-FunctionDecl 0x28b8a6797d0 <line:889:24, col:81> col:39 _wputenv 'int (const wchar_t *) __attribute__((cdecl))':'int (const wchar_t *)'
| `-ParmVarDecl 0x28b8a6796f0 <col:55, col:71> col:71 _EnvString 'const wchar_t *'
|-FunctionDecl 0x28b8a679a78 <line:890:28, col:114> col:44 _wputenv_s 'errno_t (const wchar_t *, const wchar_t *) __attribute__((cdecl))':'errno_t (const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x28b8a6798a0 <col:62, col:78> col:78 _Name 'const wchar_t *'
| `-ParmVarDecl 0x28b8a679918 <col:92, col:108> col:108 _Value 'const wchar_t *'
|-FunctionDecl 0x28b8a679eb8 <line:891:9, col:181> col:25 _wsearchenv_s 'errno_t (const wchar_t *, const wchar_t *, wchar_t *, size_t) __attribute__((cdecl))':'errno_t (const wchar_t *, const wchar_t *, wchar_t *, size_t)'
| |-ParmVarDecl 0x28b8a679b50 <col:46, col:62> col:62 _Filename 'const wchar_t *'
| |-ParmVarDecl 0x28b8a679bc8 <col:80, col:96> col:96 _EnvVar 'const wchar_t *'
| |-ParmVarDecl 0x28b8a679c40 <col:134, col:144> col:144 _ResultPath 'wchar_t *'
| `-ParmVarDecl 0x28b8a679cb8 <col:162, col:169> col:169 _SizeInWords 'size_t':'unsigned long long'
|-FunctionDecl 0x28b8a6742e0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1954:149> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:893:78 _wsearchenv 'void (const wchar_t *, const wchar_t *, wchar_t *) __attribute__((cdecl))':'void (const wchar_t *, const wchar_t *, wchar_t *)'
| |-ParmVarDecl 0x28b8a674020 <col:98, col:115> col:115 _Filename 'const wchar_t *'
| |-ParmVarDecl 0x28b8a674098 <col:133, col:150> col:150 _EnvVar 'const wchar_t *'
| |-ParmVarDecl 0x28b8a674110 <col:183, col:192> col:192 _ResultPath 'wchar_t *'
| `-DeprecatedAttr 0x28b8a674398 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wsearchenv_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x28b8a6749b0 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:896:278> col:63 _wsplitpath 'void (const wchar_t *, wchar_t *, wchar_t *, wchar_t *, wchar_t *) __attribute__((cdecl))':'void (const wchar_t *, wchar_t *, wchar_t *, wchar_t *, wchar_t *)'
| |-ParmVarDecl 0x28b8a674598 <col:82, col:98> col:98 _FullPath 'const wchar_t *'
| |-ParmVarDecl 0x28b8a674610 <col:134, col:144> col:144 _Drive 'wchar_t *'
| |-ParmVarDecl 0x28b8a674688 <col:177, col:187> col:187 _Dir 'wchar_t *'
| |-ParmVarDecl 0x28b8a674700 <col:218, col:228> col:228 _Filename 'wchar_t *'
| |-ParmVarDecl 0x28b8a674778 <col:264, col:274> col:274 _Ext 'wchar_t *'
| `-DeprecatedAttr 0x28b8a674a78 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wsplitpath_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x28b8a675290 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:897:21, line:901:82> line:897:37 _wsplitpath_s 'errno_t (const wchar_t *, wchar_t *, size_t, wchar_t *, size_t, wchar_t *, size_t, wchar_t *, size_t) __attribute__((cdecl))':'errno_t (const wchar_t *, wchar_t *, size_t, wchar_t *, size_t, wchar_t *, size_t, wchar_t *, size_t)'
| |-ParmVarDecl 0x28b8a674bb8 <col:58, col:74> col:74 _FullPath 'const wchar_t *'
| |-ParmVarDecl 0x28b8a674c30 <line:898:48, col:58> col:58 _Drive 'wchar_t *'
| |-ParmVarDecl 0x28b8a674ca8 <col:71, col:78> col:78 _DriveSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x28b8a674d20 <line:899:46, col:56> col:56 _Dir 'wchar_t *'
| |-ParmVarDecl 0x28b8a674d98 <col:67, col:74> col:74 _DirSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x28b8a674e10 <line:900:51, col:61> col:61 _Filename 'wchar_t *'
| |-ParmVarDecl 0x28b8a674e88 <col:77, col:84> col:84 _FilenameSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x28b8a674f00 <line:901:46, col:56> col:56 _Ext 'wchar_t *'
| `-ParmVarDecl 0x28b8a674f78 <col:67, col:74> col:74 _ExtSize 'size_t':'unsigned long long'
|-FunctionDecl 0x28b8a6755b0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:909:78> col:50 _seterrormode 'void (int) __attribute__((cdecl))':'void (int)'
| |-ParmVarDecl 0x28b8a6754a8 <col:69, col:73> col:73 _Mode 'int'
| `-DeprecatedAttr 0x28b8a675658 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable has been superceded by newer library or operating system functionality. Consider using SetErrorMode instead. See online help for details." ""
|-FunctionDecl 0x28b8a675a48 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:910:97> col:42 _beep 'void (unsigned int, unsigned int) __attribute__((cdecl))':'void (unsigned int, unsigned int)'
| |-ParmVarDecl 0x28b8a675868 <col:53, col:62> col:62 _Frequency 'unsigned int'
| |-ParmVarDecl 0x28b8a6758e8 <col:79, col:88> col:88 _Duration 'unsigned int'
| `-DeprecatedAttr 0x28b8a675af8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable has been superceded by newer library or operating system functionality. Consider using Beep instead. See online help for details." ""
|-FunctionDecl 0x28b8a675e40 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:911:78> col:43 _sleep 'void (unsigned long) __attribute__((cdecl))':'void (unsigned long)'
| |-ParmVarDecl 0x28b8a675d00 <col:55, col:69> col:69 _Duration 'unsigned long'
| `-DeprecatedAttr 0x28b8a675ee8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable has been superceded by newer library or operating system functionality. Consider using Sleep instead. See online help for details." ""
|-FunctionDecl 0x28b8a6784d0 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:934:187> col:102 ecvt 'char *(double, int, int *, int *) __attribute__((cdecl))':'char *(double, int, int *, int *)'
| |-ParmVarDecl 0x28b8a678210 <col:112, col:119> col:119 _Val 'double'
| |-ParmVarDecl 0x28b8a678290 <col:130, col:134> col:134 _NumOfDigits 'int'
| |-ParmVarDecl 0x28b8a678310 <col:154, col:160> col:160 _PtDec 'int *'
| |-ParmVarDecl 0x28b8a678390 <col:174, col:180> col:180 _PtSign 'int *'
| |-DeprecatedAttr 0x28b8a678590 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _ecvt. See online help for details." ""
| `-DeprecatedAttr 0x28b8a678688 <col:47, col:63> "This function or variable may be unsafe. Consider using _ecvt_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x28b8a678bc0 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:935:184> col:102 fcvt 'char *(double, int, int *, int *) __attribute__((cdecl))':'char *(double, int, int *, int *)'
| |-ParmVarDecl 0x28b8a678900 <col:112, col:119> col:119 _Val 'double'
| |-ParmVarDecl 0x28b8a678980 <col:130, col:134> col:134 _NumOfDec 'int'
| |-ParmVarDecl 0x28b8a678a00 <col:151, col:157> col:157 _PtDec 'int *'
| |-ParmVarDecl 0x28b8a678a80 <col:171, col:177> col:177 _PtSign 'int *'
| |-DeprecatedAttr 0x28b8a678c80 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _fcvt. See online help for details." ""
| `-DeprecatedAttr 0x28b8a678d78 <col:47, col:63> "This function or variable may be unsafe. Consider using _fcvt_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x28b8a6721b8 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:936:179> col:96 gcvt 'char *(double, int, char *) __attribute__((cdecl))':'char *(double, int, char *)'
| |-ParmVarDecl 0x28b8a678ff0 <col:106, col:113> col:113 _Val 'double'
| |-ParmVarDecl 0x28b8a672018 <col:124, col:128> col:128 _NumOfDigits 'int'
| |-ParmVarDecl 0x28b8a672098 <col:165, col:172> col:172 _DstBuf 'char *'
| |-DeprecatedAttr 0x28b8a672270 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _gcvt. See online help for details." ""
| `-DeprecatedAttr 0x28b8a672368 <col:47, col:63> "This function or variable may be unsafe. Consider using _fcvt_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x28b8a672800 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:937:170> col:96 itoa 'char *(int, char *, int) __attribute__((cdecl))':'char *(int, char *, int)'
| |-ParmVarDecl 0x28b8a6725e0 <col:106, col:110> col:110 _Val 'int'
| |-ParmVarDecl 0x28b8a672660 <col:139, col:146> col:146 _DstBuf 'char *'
| |-ParmVarDecl 0x28b8a6726e0 <col:160, col:164> col:164 _Radix 'int'
| |-DeprecatedAttr 0x28b8a6728b8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _itoa. See online help for details." ""
| `-DeprecatedAttr 0x28b8a6729b0 <col:47, col:63> "This function or variable may be unsafe. Consider using _itoa_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x28b8a672e48 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:938:171> col:96 ltoa 'char *(long, char *, int) __attribute__((cdecl))':'char *(long, char *, int)'
| |-ParmVarDecl 0x28b8a672c28 <col:106, col:111> col:111 _Val 'long'
| |-ParmVarDecl 0x28b8a672ca8 <col:140, col:147> col:147 _DstBuf 'char *'
| |-ParmVarDecl 0x28b8a672d28 <col:161, col:165> col:165 _Radix 'int'
| |-DeprecatedAttr 0x28b8a672f00 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _ltoa. See online help for details." ""
| `-DeprecatedAttr 0x28b8a67d0b0 <col:47, col:63> "This function or variable may be unsafe. Consider using _ltoa_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x28b8a67d348 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:941:108> col:71 putenv 'int (const char *) __attribute__((cdecl))':'int (const char *)'
| |-ParmVarDecl 0x28b8a67d268 <col:85, col:98> col:98 _EnvString 'const char *'
| `-DeprecatedAttr 0x28b8a67d3f0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _putenv. See online help for details." ""
|-FunctionDecl 0x28b8a67d7d0 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:944:245> col:128 swab 'void (char *, char *, int) __attribute__((cdecl))':'void (char *, char *, int)'
| |-ParmVarDecl 0x28b8a67d5b8 <col:165, col:172> col:172 _Buf1 'char *'
| |-ParmVarDecl 0x28b8a67d638 <col:210, col:217> col:217 _Buf2 'char *'
| |-ParmVarDecl 0x28b8a67d6b8 <col:229, col:233> col:233 _SizeInBytes 'int'
| `-DeprecatedAttr 0x28b8a67d888 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _swab. See online help for details." ""
|-FunctionDecl 0x28b8a67dd70 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:945:181> col:96 ultoa 'char *(unsigned long, char *, int) __attribute__((cdecl))':'char *(unsigned long, char *, int)'
| |-ParmVarDecl 0x28b8a67db50 <col:107, col:121> col:121 _Val 'unsigned long'
| |-ParmVarDecl 0x28b8a67dbd0 <col:150, col:157> col:157 _Dstbuf 'char *'
| |-ParmVarDecl 0x28b8a67dc50 <col:171, col:175> col:175 _Radix 'int'
| |-DeprecatedAttr 0x28b8a67de28 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _ultoa. See online help for details." ""
| `-DeprecatedAttr 0x28b8a67df20 <col:47, col:63> "This function or variable may be unsafe. Consider using _ultoa_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x28b8a67a0d8 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:64:18, line:947:48> col:18 onexit '_onexit_t (_onexit_t) __attribute__((cdecl))':'_onexit_t (_onexit_t)'
| `-ParmVarDecl 0x28b8a67e030 <line:64:18, line:947:43> col:43 _Func '_onexit_t':'int (*)(void) __attribute__((cdecl))'
|-RecordDecl 0x28b8a67a198 <.//openssl//file_jk/before\crypto\ec/ec_lcl.h:52:1, line:173:1> line:52:8 struct ec_method_st definition
| |-FieldDecl 0x28b8a67a268 <line:54:5, col:9> col:9 flags 'int'
| |-FieldDecl 0x28b8a67a2d8 <line:56:5, col:9> col:9 field_type 'int'
| |-FieldDecl 0x28b8a67a478 <line:61:5, col:34> col:11 group_init 'int (*)(int *)'
| |-FieldDecl 0x28b8a67a640 <line:62:5, col:37> col:12 group_finish 'void (*)(int *)'
| |-FieldDecl 0x28b8a67a750 <line:63:5, col:43> col:12 group_clear_finish 'void (*)(int *)'
| |-FieldDecl 0x28b8a67a9c0 <line:64:5, col:52> col:11 group_copy 'int (*)(int *, const int *)'
| |-FieldDecl 0x28b8a67add8 <line:67:5, line:68:54> line:67:11 group_set_curve 'int (*)(int *, const int *, const int *, const int *, int *)'
| |-FieldDecl 0x28b8a681298 <line:69:5, line:70:37> line:69:11 group_get_curve 'int (*)(const int *, int *, int *, int *, int *)'
| |-FieldDecl 0x28b8a681468 <line:72:5, col:46> col:11 group_get_degree 'int (*)(const int *)'
| |-FieldDecl 0x28b8a681580 <line:73:5, col:46> col:11 group_order_bits 'int (*)(const int *)'
| |-FieldDecl 0x28b8a6817f0 <line:75:5, col:64> col:11 group_check_discriminant 'int (*)(const int *, int *)'
| |-FieldDecl 0x28b8a681908 <line:80:5, col:34> col:11 point_init 'int (*)(int *)'
| |-FieldDecl 0x28b8a681a18 <line:81:5, col:37> col:12 point_finish 'void (*)(int *)'
| |-FieldDecl 0x28b8a681b28 <line:82:5, col:43> col:12 point_clear_finish 'void (*)(int *)'
| |-FieldDecl 0x28b8a681cc8 <line:83:5, col:52> col:11 point_copy 'int (*)(int *, const int *)'
| |-FieldDecl 0x28b8a681e68 <line:92:5, col:63> col:11 point_set_to_infinity 'int (*)(const int *, int *)'
| |-FieldDecl 0x28b8a682340 <line:93:5, line:96:76> line:93:11 point_set_Jprojective_coordinates_GFp 'int (*)(const int *, int *, const int *, const int *, const int *, int *)'
| |-FieldDecl 0x28b8a6827f0 <line:97:5, line:100:59> line:97:11 point_get_Jprojective_coordinates_GFp 'int (*)(const int *, const int *, int *, int *, int *, int *)'
| |-FieldDecl 0x28b8a682c08 <line:101:5, line:103:50> line:101:11 point_set_affine_coordinates 'int (*)(const int *, int *, const int *, const int *, int *)'
| |-FieldDecl 0x28b8a683018 <line:104:5, line:105:72> line:104:11 point_get_affine_coordinates 'int (*)(const int *, const int *, int *, int *, int *)'
| |-FieldDecl 0x28b8a67b3c8 <line:106:5, line:108:54> line:106:11 point_set_compressed_coordinates 'int (*)(const int *, int *, const int *, int, int *)'
| |-FieldDecl 0x28b8a67b8e8 <line:110:5, line:112:46> line:110:14 point2oct 'size_t (*)(const int *, const int *, int, unsigned char *, size_t, int *)'
| |-FieldDecl 0x28b8a67bd48 <line:113:5, line:114:43> line:113:11 oct2point 'int (*)(const int *, int *, const unsigned char *, size_t, int *)'
| |-FieldDecl 0x28b8a683110 <line:116:5, line:117:44> line:116:11 add 'int (*)(const int *, int *, const int *, const int *, int *)'
| |-FieldDecl 0x28b8a6834a0 <line:118:5, col:75> col:11 dbl 'int (*)(const int *, int *, const int *, int *)'
| |-FieldDecl 0x28b8a683798 <line:119:5, col:58> col:11 invert 'int (*)(const int *, int *, int *)'
| |-FieldDecl 0x28b8a683a00 <line:123:5, col:62> col:11 is_at_infinity 'int (*)(const int *, const int *)'
| |-FieldDecl 0x28b8a683cf8 <line:124:5, col:69> col:11 is_on_curve 'int (*)(const int *, const int *, int *)'
| |-FieldDecl 0x28b8a684080 <line:125:5, line:126:31> line:125:11 point_cmp 'int (*)(const int *, const int *, const int *, int *)'
| |-FieldDecl 0x28b8a67c258 <line:128:5, col:63> col:11 make_affine 'int (*)(const int *, int *, int *)'
| |-FieldDecl 0x28b8a67c6d0 <line:129:5, line:130:40> line:129:11 points_make_affine 'int (*)(const int *, size_t, int **, int *)'
| |-FieldDecl 0x28b8a67cd08 <line:136:5, line:138:25> line:136:11 mul 'int (*)(const int *, int *, const int *, size_t, const int **, const int **, int *)'
| |-FieldDecl 0x28b8a67cf70 <line:139:5, col:54> col:11 precompute_mult 'int (*)(int *, int *)'
| |-FieldDecl 0x28b8a684120 <line:140:5, col:55> col:11 have_precompute_mult 'int (*)(const int *)'
| |-FieldDecl 0x28b8a684458 <line:148:5, line:149:48> line:148:11 field_mul 'int (*)(const int *, int *, const int *, const int *, int *)'
| |-FieldDecl 0x28b8a684708 <line:150:5, col:77> col:11 field_sqr 'int (*)(const int *, int *, const int *, int *)'
| |-FieldDecl 0x28b8a684a40 <line:151:5, line:152:48> line:151:11 field_div 'int (*)(const int *, int *, const int *, const int *, int *)'
| |-FieldDecl 0x28b8a684cf0 <line:154:5, line:155:34> line:154:11 field_encode 'int (*)(const int *, int *, const int *, int *)'
| |-FieldDecl 0x28b8a684fa0 <line:157:5, line:158:34> line:157:11 field_decode 'int (*)(const int *, int *, const int *, int *)'
| |-FieldDecl 0x28b8a67e178 <line:159:5, col:67> col:11 field_set_to_one 'int (*)(const int *, int *, int *)'
| |-FieldDecl 0x28b8a67e4a0 <line:161:5, col:75> col:14 priv2oct 'size_t (*)(const int *, unsigned char *, size_t)'
| |-FieldDecl 0x28b8a67e7c8 <line:162:5, col:72> col:11 oct2priv 'int (*)(int *, const unsigned char *, size_t)'
| |-FieldDecl 0x28b8a67e968 <line:163:5, col:61> col:11 set_private 'int (*)(int *, const int *)'
| |-FieldDecl 0x28b8a67ea80 <line:164:5, col:32> col:11 keygen 'int (*)(int *)'
| |-FieldDecl 0x28b8a67eb98 <line:165:5, col:40> col:11 keycheck 'int (*)(const int *)'
| |-FieldDecl 0x28b8a67ecb0 <line:166:5, col:35> col:11 keygenpub 'int (*)(int *)'
| |-FieldDecl 0x28b8a67ee50 <line:167:5, col:50> col:11 keycopy 'int (*)(int *, const int *)'
| |-FieldDecl 0x28b8a67ef60 <line:168:5, col:36> col:12 keyfinish 'void (*)(int *)'
| |-FieldDecl 0x28b8a686430 <line:170:5, line:171:72> line:170:11 ecdh_compute_key 'int (*)(unsigned char **, size_t *, const int *, const int *)'
| `-FieldDecl 0x28b8a686658 <line:172:5, col:77> col:11 blind_coordinates 'int (*)(const int *, int *, int *)'
|-RecordDecl 0x28b8a6866b0 <line:178:9, col:16> col:16 struct nistp224_pre_comp_st
|-TypedefDecl 0x28b8a6867c8 <col:1, col:37> col:37 referenced NISTP224_PRE_COMP 'struct nistp224_pre_comp_st':'struct nistp224_pre_comp_st'
| `-ElaboratedType 0x28b8a686770 'struct nistp224_pre_comp_st' sugar
|   `-RecordType 0x28b8a686750 'struct nistp224_pre_comp_st'
|     `-Record 0x28b8a6866b0 'nistp224_pre_comp_st'
|-RecordDecl 0x28b8a686838 <line:179:9, col:16> col:16 struct nistp256_pre_comp_st
|-TypedefDecl 0x28b8a686948 <col:1, col:37> col:37 referenced NISTP256_PRE_COMP 'struct nistp256_pre_comp_st':'struct nistp256_pre_comp_st'
| `-ElaboratedType 0x28b8a6868f0 'struct nistp256_pre_comp_st' sugar
|   `-RecordType 0x28b8a6868d0 'struct nistp256_pre_comp_st'
|     `-Record 0x28b8a7fb440 'nistp256_pre_comp_st'
|-RecordDecl 0x28b8a6869b8 <line:180:9, col:16> col:16 struct nistp521_pre_comp_st
|-TypedefDecl 0x28b8a686ac8 <col:1, col:37> col:37 referenced NISTP521_PRE_COMP 'struct nistp521_pre_comp_st':'struct nistp521_pre_comp_st'
| `-ElaboratedType 0x28b8a686a70 'struct nistp521_pre_comp_st' sugar
|   `-RecordType 0x28b8a686a50 'struct nistp521_pre_comp_st'
|     `-Record 0x28b8a6869b8 'nistp521_pre_comp_st'
|-RecordDecl 0x28b8a686b38 <line:181:9, col:16> col:16 struct nistz256_pre_comp_st
|-TypedefDecl 0x28b8a686c48 <col:1, col:37> col:37 referenced NISTZ256_PRE_COMP 'struct nistz256_pre_comp_st':'struct nistz256_pre_comp_st'
| `-ElaboratedType 0x28b8a686bf0 'struct nistz256_pre_comp_st' sugar
|   `-RecordType 0x28b8a686bd0 'struct nistz256_pre_comp_st'
|     `-Record 0x28b8a686b38 'nistz256_pre_comp_st'
|-RecordDecl 0x28b8a686cb8 <line:182:9, col:16> col:16 struct ec_pre_comp_st
|-TypedefDecl 0x28b8a686dc8 <col:1, col:31> col:31 referenced EC_PRE_COMP 'struct ec_pre_comp_st':'struct ec_pre_comp_st'
| `-ElaboratedType 0x28b8a686d70 'struct ec_pre_comp_st' sugar
|   `-RecordType 0x28b8a686d50 'struct ec_pre_comp_st'
|     `-Record 0x28b8a686cb8 'ec_pre_comp_st'
|-RecordDecl 0x28b8a686e38 <line:184:1, line:249:1> line:184:8 invalid struct ec_group_st definition
| |-FieldDecl 0x28b8a686f08 <line:185:5, col:22> col:22 invalid meth 'const int *'
| |-FieldDecl 0x28b8a686f78 <line:186:5, col:15> col:15 invalid generator 'int *'
| |-FieldDecl 0x28b8a686fe8 <line:187:5, col:13> col:13 invalid order 'int *'
| |-FieldDecl 0x28b8a687058 <col:5, col:21> col:21 invalid cofactor 'int *'
| |-FieldDecl 0x28b8a6870c8 <line:188:5, col:9> col:9 curve_name 'int'
| |-FieldDecl 0x28b8a67f0d0 <line:189:5, col:9> col:9 asn1_flag 'int'
| |-FieldDecl 0x28b8a67f140 <line:190:5, col:29> col:29 invalid asn1_form 'int'
| |-FieldDecl 0x28b8a67f1b0 <line:191:5, col:20> col:20 seed 'unsigned char *'
| |-FieldDecl 0x28b8a67f218 <line:193:5, col:12> col:12 seed_len 'size_t':'unsigned long long'
| |-FieldDecl 0x28b8a67f288 <line:203:5, col:13> col:13 invalid field 'int *'
| |-FieldDecl 0x28b8a67f380 <line:211:5, col:15> col:9 poly 'int [6]'
| |-FieldDecl 0x28b8a67f3f0 <line:219:5, col:13> col:13 invalid a 'int *'
| |-FieldDecl 0x28b8a67f460 <col:5, col:17> col:17 invalid b 'int *'
| |-FieldDecl 0x28b8a67f4d0 <line:221:5, col:9> col:9 a_is_minus3 'int'
| |-FieldDecl 0x28b8a67f540 <line:223:5, col:11> col:11 field_data1 'void *'
| |-FieldDecl 0x28b8a67f5b0 <line:225:5, col:11> col:11 field_data2 'void *'
| |-FieldDecl 0x28b8a67f940 <line:227:5, line:228:36> line:227:11 field_mod_func 'int (*)(int *, const int *, const int *, int *)'
| |-FieldDecl 0x28b8a67f9b0 <line:230:5, col:18> col:18 invalid mont_data 'int *'
| |-EnumDecl 0x28b8a67fa08 <line:237:5, line:241:5> line:237:5
| | |-EnumConstantDecl 0x28b8a67fae0 <line:238:9> col:9 PCT_none 'int'
| | |-EnumConstantDecl 0x28b8a67fb38 <line:239:9> col:9 PCT_nistp224 'int'
| | |-EnumConstantDecl 0x28b8a67fb90 <col:23> col:23 referenced PCT_nistp256 'int'
| | |-EnumConstantDecl 0x28b8a67fbe8 <col:37> col:37 PCT_nistp521 'int'
| | |-EnumConstantDecl 0x28b8a67fc40 <col:51> col:51 PCT_nistz256 'int'
| | `-EnumConstantDecl 0x28b8a67fc98 <line:240:9> col:9 PCT_ec 'int'
| |-FieldDecl 0x28b8a67fd48 <line:237:5, line:241:7> col:7 pre_comp_type 'enum (anonymous enum at .//openssl//file_jk/before\crypto\ec/ec_lcl.h:237:5)':'enum ec_group_st::(anonymous at .//openssl//file_jk/before\crypto\ec/ec_lcl.h:237:5)'
| |-RecordDecl 0x28b8a67fda0 <line:242:5, line:248:5> line:242:5 union definition
| | |-FieldDecl 0x28b8a67fee8 <line:243:9, col:28> col:28 nistp224 'NISTP224_PRE_COMP *'
| | |-FieldDecl 0x28b8a67ffc8 <line:244:9, col:28> col:28 nistp256 'NISTP256_PRE_COMP *'
| | |-FieldDecl 0x28b8a687150 <line:245:9, col:28> col:28 nistp521 'NISTP521_PRE_COMP *'
| | |-FieldDecl 0x28b8a687238 <line:246:9, col:28> col:28 nistz256 'NISTZ256_PRE_COMP *'
| | `-FieldDecl 0x28b8a687318 <line:247:9, col:22> col:22 ec 'EC_PRE_COMP *'
| `-FieldDecl 0x28b8a6873c8 <line:242:5, line:248:7> col:7 pre_comp 'union (anonymous union at .//openssl//file_jk/before\crypto\ec/ec_lcl.h:242:5)':'union ec_group_st::(anonymous at .//openssl//file_jk/before\crypto\ec/ec_lcl.h:242:5)'
|-RecordDecl 0x28b8a687420 <line:256:1, line:269:1> line:256:8 invalid struct ec_key_st definition
| |-FieldDecl 0x28b8a6874f8 <line:257:5, col:26> col:26 invalid meth 'const int *'
| |-FieldDecl 0x28b8a687568 <line:258:5, col:13> col:13 invalid engine 'int *'
| |-FieldDecl 0x28b8a6875d8 <line:259:5, col:9> col:9 version 'int'
| |-FieldDecl 0x28b8a687648 <line:260:5, col:15> col:15 invalid group 'int *'
| |-FieldDecl 0x28b8a6876b8 <line:261:5, col:15> col:15 invalid pub_key 'int *'
| |-FieldDecl 0x28b8a687728 <line:262:5, col:13> col:13 invalid priv_key 'int *'
| |-FieldDecl 0x28b8a687798 <line:263:5, col:18> col:18 enc_flag 'unsigned int'
| |-FieldDecl 0x28b8a687808 <line:264:5, col:29> col:29 invalid conv_form 'int'
| |-FieldDecl 0x28b8a687878 <line:265:5, col:9> col:9 references 'int'
| |-FieldDecl 0x28b8a6878e8 <line:266:5, col:9> col:9 flags 'int'
| |-FieldDecl 0x28b8a687958 <line:267:5, col:20> col:20 invalid ex_data 'int'
| `-FieldDecl 0x28b8a6879c8 <line:268:5, col:20> col:20 invalid lock 'int *'
|-RecordDecl 0x28b8a687a20 <line:271:1, line:285:1> line:271:8 invalid struct ec_point_st definition
| |-FieldDecl 0x28b8a687af8 <line:272:5, col:22> col:22 invalid meth 'const int *'
| |-FieldDecl 0x28b8a687b68 <line:274:5, col:9> col:9 curve_name 'int'
| |-FieldDecl 0x28b8a687bd8 <line:279:5, col:13> col:13 invalid X 'int *'
| |-FieldDecl 0x28b8a687c48 <line:280:5, col:13> col:13 invalid Y 'int *'
| |-FieldDecl 0x28b8a687cb8 <line:281:5, col:13> col:13 invalid Z 'int *'
| `-FieldDecl 0x28b8a687d28 <line:283:5, col:9> col:9 Z_is_one 'int'
|-FunctionDecl 0x28b8a687eb8 <line:288:1, line:298:1> line:288:24 invalid ec_point_is_compat 'int (const int *, const int *)' static
| |-ParmVarDecl 0x28b8a687d98 <col:43, col:59> col:59 invalid point 'const int *'
| |-ParmVarDecl 0x28b8a687e18 <line:289:43, col:59> col:59 invalid group 'const int *'
| `-CompoundStmt 0x28b8a688070 <line:290:1, line:298:1>
|   |-IfStmt 0x28b8a688020 <line:291:5, line:295:16>
|   | |-OpaqueValueExpr 0x28b8a688008 <<invalid sloc>> '_Bool'
|   | `-ReturnStmt 0x28b8a687ff8 <col:9, col:16>
|   |   `-IntegerLiteral 0x28b8a687fd0 <col:16> 'int' 0
|   `-ReturnStmt 0x28b8a688060 <line:297:5, col:12>
|     `-IntegerLiteral 0x28b8a688038 <col:12> 'int' 1
|-FunctionDecl 0x28b8a68e218 <line:301:1, col:64> col:20 EC_nistp224_pre_comp_dup 'NISTP224_PRE_COMP *(NISTP224_PRE_COMP *)'
| `-ParmVarDecl 0x28b8a6880a0 <col:45, col:63> col:64 'NISTP224_PRE_COMP *'
|-FunctionDecl 0x28b8a68e3d8 <line:302:1, col:64> col:20 EC_nistp256_pre_comp_dup 'NISTP256_PRE_COMP *(NISTP256_PRE_COMP *)'
| `-ParmVarDecl 0x28b8a68e2e8 <col:45, col:63> col:64 'NISTP256_PRE_COMP *'
|-FunctionDecl 0x28b8a68e598 <line:303:1, col:64> col:20 EC_nistp521_pre_comp_dup 'NISTP521_PRE_COMP *(NISTP521_PRE_COMP *)'
| `-ParmVarDecl 0x28b8a68e4a8 <col:45, col:63> col:64 'NISTP521_PRE_COMP *'
|-FunctionDecl 0x28b8a68e758 <line:304:1, col:64> col:20 EC_nistz256_pre_comp_dup 'NISTZ256_PRE_COMP *(NISTZ256_PRE_COMP *)'
| `-ParmVarDecl 0x28b8a68e668 <col:45, col:63> col:64 'NISTZ256_PRE_COMP *'
|-FunctionDecl 0x28b8a68e8b8 prev 0x28b8a68e3d8 <line:305:1, col:64> col:20 EC_nistp256_pre_comp_dup 'NISTP256_PRE_COMP *(NISTP256_PRE_COMP *)'
| `-ParmVarDecl 0x28b8a68e828 <col:45, col:63> col:64 'NISTP256_PRE_COMP *'
|-FunctionDecl 0x28b8a68ea68 <line:306:1, col:46> col:14 EC_ec_pre_comp_dup 'EC_PRE_COMP *(EC_PRE_COMP *)'
| `-ParmVarDecl 0x28b8a68e970 <col:33, col:45> col:46 'EC_PRE_COMP *'
|-FunctionDecl 0x28b8a68ebd0 <line:308:1, col:38> col:6 invalid EC_pre_comp_free 'void (int *)'
| `-ParmVarDecl 0x28b8a68eb40 <col:23, col:33> col:33 invalid group 'int *'
|-FunctionDecl 0x28b8a68ed78 <line:309:1, col:51> col:6 EC_nistp224_pre_comp_free 'void (NISTP224_PRE_COMP *)'
| `-ParmVarDecl 0x28b8a68ec88 <col:32, col:50> col:51 'NISTP224_PRE_COMP *'
|-FunctionDecl 0x28b8a68ef38 <line:310:1, col:51> col:6 used EC_nistp256_pre_comp_free 'void (NISTP256_PRE_COMP *)'
| `-ParmVarDecl 0x28b8a68ee48 <col:32, col:50> col:51 'NISTP256_PRE_COMP *'
|-FunctionDecl 0x28b8a68f0f8 <line:311:1, col:51> col:6 EC_nistp521_pre_comp_free 'void (NISTP521_PRE_COMP *)'
| `-ParmVarDecl 0x28b8a68f008 <col:32, col:50> col:51 'NISTP521_PRE_COMP *'
|-FunctionDecl 0x28b8a68f2d8 <line:312:1, col:51> col:6 EC_nistz256_pre_comp_free 'void (NISTZ256_PRE_COMP *)'
| `-ParmVarDecl 0x28b8a68f1e0 <col:32, col:50> col:51 'NISTZ256_PRE_COMP *'
|-FunctionDecl 0x28b8a68f498 <line:313:1, col:39> col:6 EC_ec_pre_comp_free 'void (EC_PRE_COMP *)'
| `-ParmVarDecl 0x28b8a68f3a8 <col:26, col:38> col:39 'EC_PRE_COMP *'
|-FunctionDecl 0x28b8a68f950 <line:319:1, line:321:25> line:319:5 invalid ec_wNAF_mul 'int (const int *, int *, const int *, size_t, const int **, const int **, int *)'
| |-ParmVarDecl 0x28b8a68f570 <col:17, col:33> col:33 invalid group 'const int *'
| |-ParmVarDecl 0x28b8a68f5f0 <col:40, col:50> col:50 invalid r 'int *'
| |-ParmVarDecl 0x28b8a68f670 <col:53, col:67> col:67 invalid scalar 'const int *'
| |-ParmVarDecl 0x28b8a68f6e8 <line:320:17, col:24> col:24 num 'size_t':'unsigned long long'
| |-ParmVarDecl 0x28b8a68f778 <col:29, <invalid sloc>> col:45 invalid points 'const int **':'const int **'
| |-ParmVarDecl 0x28b8a68f808 <col:55, <invalid sloc>> col:69 invalid scalars 'const int **':'const int **'
| `-ParmVarDecl 0x28b8a68f888 <line:321:17, <invalid sloc>> col:25 invalid 'int *'
|-FunctionDecl 0x28b8a68fb60 <line:322:1, col:54> col:5 invalid ec_wNAF_precompute_mult 'int (int *, int *)'
| |-ParmVarDecl 0x28b8a68fa40 <col:29, col:39> col:39 invalid group 'int *'
| `-ParmVarDecl 0x28b8a68fac0 <col:46, <invalid sloc>> col:54 invalid 'int *'
|-FunctionDecl 0x28b8a68fcc0 <line:323:1, col:55> col:5 invalid ec_wNAF_have_precompute_mult 'int (const int *)'
| `-ParmVarDecl 0x28b8a68fc28 <col:34, col:50> col:50 invalid group 'const int *'
|-FunctionDecl 0x28b8a68fe18 <line:326:1, col:40> col:5 invalid ec_GFp_simple_group_init 'int (int *)'
| `-ParmVarDecl 0x28b8a68fd80 <col:30, <invalid sloc>> col:40 invalid 'int *'
|-FunctionDecl 0x28b8a68ff68 <line:327:1, col:43> col:6 invalid ec_GFp_simple_group_finish 'void (int *)'
| `-ParmVarDecl 0x28b8a68fed8 <col:33, <invalid sloc>> col:43 invalid 'int *'
|-FunctionDecl 0x28b8a6900b8 <line:328:1, col:49> col:6 invalid ec_GFp_simple_group_clear_finish 'void (int *)'
| `-ParmVarDecl 0x28b8a690028 <col:39, <invalid sloc>> col:49 invalid 'int *'
|-FunctionDecl 0x28b8a68c2c0 <line:329:1, col:58> col:5 invalid ec_GFp_simple_group_copy 'int (int *, const int *)'
| |-ParmVarDecl 0x28b8a68c1a0 <col:30, <invalid sloc>> col:40 invalid 'int *'
| `-ParmVarDecl 0x28b8a68c220 <col:42, <invalid sloc>> col:58 invalid 'const int *'
|-FunctionDecl 0x28b8a68c640 <line:330:1, line:331:77> line:330:5 invalid ec_GFp_simple_group_set_curve 'int (int *, const int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x28b8a68c388 <col:35, <invalid sloc>> col:45 invalid 'int *'
| |-ParmVarDecl 0x28b8a68c408 <col:47, col:61> col:61 invalid p 'const int *'
| |-ParmVarDecl 0x28b8a68c488 <line:331:35, col:49> col:49 invalid a 'const int *'
| |-ParmVarDecl 0x28b8a68c508 <col:52, col:66> col:66 invalid b 'const int *'
| `-ParmVarDecl 0x28b8a68c588 <col:69, <invalid sloc>> col:77 invalid 'int *'
|-FunctionDecl 0x28b8a68c9d8 <line:332:1, line:333:54> line:332:5 invalid ec_GFp_simple_group_get_curve 'int (const int *, int *, int *, int *, int *)'
| |-ParmVarDecl 0x28b8a68c720 <col:35, <invalid sloc>> col:51 invalid 'const int *'
| |-ParmVarDecl 0x28b8a68c7a0 <col:53, col:61> col:61 invalid p 'int *'
| |-ParmVarDecl 0x28b8a68c820 <col:64, col:72> col:72 invalid a 'int *'
| |-ParmVarDecl 0x28b8a68c8a0 <line:333:35, col:43> col:43 invalid b 'int *'
| `-ParmVarDecl 0x28b8a68c920 <col:46, <invalid sloc>> col:54 invalid 'int *'
|-FunctionDecl 0x28b8a68cb50 <line:334:1, col:52> col:5 invalid ec_GFp_simple_group_get_degree 'int (const int *)'
| `-ParmVarDecl 0x28b8a68cab8 <col:36, <invalid sloc>> col:52 invalid 'const int *'
|-FunctionDecl 0x28b8a68cd30 <line:335:1, col:70> col:5 invalid ec_GFp_simple_group_check_discriminant 'int (const int *, int *)'
| |-ParmVarDecl 0x28b8a68cc10 <col:44, <invalid sloc>> col:60 invalid 'const int *'
| `-ParmVarDecl 0x28b8a68cc90 <col:62, <invalid sloc>> col:70 invalid 'int *'
|-FunctionDecl 0x28b8a68ce90 <line:336:1, col:40> col:5 invalid ec_GFp_simple_point_init 'int (int *)'
| `-ParmVarDecl 0x28b8a68cdf8 <col:30, <invalid sloc>> col:40 invalid 'int *'
|-FunctionDecl 0x28b8a68cfe0 <line:337:1, col:43> col:6 invalid ec_GFp_simple_point_finish 'void (int *)'
| `-ParmVarDecl 0x28b8a68cf50 <col:33, <invalid sloc>> col:43 invalid 'int *'
|-FunctionDecl 0x28b8a688160 <line:338:1, col:49> col:6 invalid ec_GFp_simple_point_clear_finish 'void (int *)'
| `-ParmVarDecl 0x28b8a68d0a0 <col:39, <invalid sloc>> col:49 invalid 'int *'
|-FunctionDecl 0x28b8a688340 <line:339:1, col:58> col:5 invalid ec_GFp_simple_point_copy 'int (int *, const int *)'
| |-ParmVarDecl 0x28b8a688220 <col:30, <invalid sloc>> col:40 invalid 'int *'
| `-ParmVarDecl 0x28b8a6882a0 <col:42, <invalid sloc>> col:58 invalid 'const int *'
|-FunctionDecl 0x28b8a688528 <line:340:1, col:69> col:5 invalid ec_GFp_simple_point_set_to_infinity 'int (const int *, int *)'
| |-ParmVarDecl 0x28b8a688408 <col:41, <invalid sloc>> col:57 invalid 'const int *'
| `-ParmVarDecl 0x28b8a688488 <col:59, <invalid sloc>> col:69 invalid 'int *'
|-FunctionDecl 0x28b8a688930 <line:341:1, line:344:76> line:341:5 invalid ec_GFp_simple_set_Jprojective_coordinates_GFp 'int (const int *, int *, const int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x28b8a6885f0 <col:51, <invalid sloc>> col:67 invalid 'const int *'
| |-ParmVarDecl 0x28b8a688670 <line:342:51, <invalid sloc>> col:61 invalid 'int *'
| |-ParmVarDecl 0x28b8a6886f0 <col:63, col:77> col:77 invalid x 'const int *'
| |-ParmVarDecl 0x28b8a688770 <line:343:51, col:65> col:65 invalid y 'const int *'
| |-ParmVarDecl 0x28b8a6887f0 <line:344:51, col:65> col:65 invalid z 'const int *'
| `-ParmVarDecl 0x28b8a688870 <col:68, <invalid sloc>> col:76 invalid 'int *'
|-FunctionDecl 0x28b8a688d58 <line:345:1, line:348:59> line:345:5 invalid ec_GFp_simple_get_Jprojective_coordinates_GFp 'int (const int *, const int *, int *, int *, int *, int *)'
| |-ParmVarDecl 0x28b8a688a18 <col:51, <invalid sloc>> col:67 invalid 'const int *'
| |-ParmVarDecl 0x28b8a688a98 <line:346:51, <invalid sloc>> col:67 invalid 'const int *'
| |-ParmVarDecl 0x28b8a688b18 <col:69, col:77> col:77 invalid x 'int *'
| |-ParmVarDecl 0x28b8a688b98 <line:347:51, col:59> col:59 invalid y 'int *'
| |-ParmVarDecl 0x28b8a688c18 <col:62, col:70> col:70 invalid z 'int *'
| `-ParmVarDecl 0x28b8a688c98 <line:348:51, <invalid sloc>> col:59 invalid 'int *'
|-FunctionDecl 0x28b8a6901e0 <line:349:1, line:351:73> line:349:5 invalid ec_GFp_simple_point_set_affine_coordinates 'int (const int *, int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x28b8a688e40 <col:48, <invalid sloc>> col:64 invalid 'const int *'
| |-ParmVarDecl 0x28b8a688ec0 <col:66, <invalid sloc>> col:76 invalid 'int *'
| |-ParmVarDecl 0x28b8a688f40 <line:350:48, col:62> col:62 invalid x 'const int *'
| |-ParmVarDecl 0x28b8a688fc0 <line:351:48, col:62> col:62 invalid y 'const int *'
| `-ParmVarDecl 0x28b8a689040 <col:65, <invalid sloc>> col:73 invalid 'int *'
|-FunctionDecl 0x28b8a690578 <line:352:1, line:354:67> line:352:5 invalid ec_GFp_simple_point_get_affine_coordinates 'int (const int *, const int *, int *, int *, int *)'
| |-ParmVarDecl 0x28b8a6902c0 <col:48, <invalid sloc>> col:64 invalid 'const int *'
| |-ParmVarDecl 0x28b8a690340 <line:353:48, <invalid sloc>> col:64 invalid 'const int *'
| |-ParmVarDecl 0x28b8a6903c0 <col:66, col:74> col:74 invalid x 'int *'
| |-ParmVarDecl 0x28b8a690440 <line:354:48, col:56> col:56 invalid y 'int *'
| `-ParmVarDecl 0x28b8a6904c0 <col:59, <invalid sloc>> col:67 invalid 'int *'
|-FunctionDecl 0x28b8a690910 <line:355:1, line:357:54> line:355:5 invalid ec_GFp_simple_set_compressed_coordinates 'int (const int *, int *, const int *, int, int *)'
| |-ParmVarDecl 0x28b8a690658 <col:46, <invalid sloc>> col:62 invalid 'const int *'
| |-ParmVarDecl 0x28b8a6906d8 <col:64, <invalid sloc>> col:74 invalid 'int *'
| |-ParmVarDecl 0x28b8a690758 <line:356:46, col:60> col:60 invalid x 'const int *'
| |-ParmVarDecl 0x28b8a6907d8 <col:63, col:67> col:67 y_bit 'int'
| `-ParmVarDecl 0x28b8a690858 <line:357:46, <invalid sloc>> col:54 invalid 'int *'
|-FunctionDecl 0x28b8a690d20 <line:358:1, line:360:72> line:358:8 invalid ec_GFp_simple_point2oct 'size_t (const int *, const int *, int, unsigned char *, size_t, int *)'
| |-ParmVarDecl 0x28b8a6909f0 <col:32, <invalid sloc>> col:48 invalid 'const int *'
| |-ParmVarDecl 0x28b8a690a70 <col:50, <invalid sloc>> col:66 invalid 'const int *'
| |-ParmVarDecl 0x28b8a690af0 <line:359:32, col:56> col:56 invalid form 'int'
| |-ParmVarDecl 0x28b8a690b70 <line:360:32, col:47> col:47 buf 'unsigned char *'
| |-ParmVarDecl 0x28b8a690be8 <col:52, col:59> col:59 len 'size_t':'unsigned long long'
| `-ParmVarDecl 0x28b8a690c68 <col:64, <invalid sloc>> col:72 invalid 'int *'
|-FunctionDecl 0x28b8a6910b8 <line:361:1, line:362:75> line:361:5 invalid ec_GFp_simple_oct2point 'int (const int *, int *, const unsigned char *, size_t, int *)'
| |-ParmVarDecl 0x28b8a690e08 <col:29, <invalid sloc>> col:45 invalid 'const int *'
| |-ParmVarDecl 0x28b8a690e88 <col:47, <invalid sloc>> col:57 invalid 'int *'
| |-ParmVarDecl 0x28b8a690f08 <line:362:29, col:50> col:50 buf 'const unsigned char *'
| |-ParmVarDecl 0x28b8a690f80 <col:55, col:62> col:62 len 'size_t':'unsigned long long'
| `-ParmVarDecl 0x28b8a691000 <col:67, <invalid sloc>> col:75 invalid 'int *'
|-FunctionDecl 0x28b8a68d468 <line:363:1, line:364:50> line:363:5 invalid ec_GFp_simple_add 'int (const int *, int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x28b8a68d1b0 <col:23, <invalid sloc>> col:39 invalid 'const int *'
| |-ParmVarDecl 0x28b8a68d230 <col:41, col:51> col:51 invalid r 'int *'
| |-ParmVarDecl 0x28b8a68d2b0 <col:54, col:70> col:70 invalid a 'const int *'
| |-ParmVarDecl 0x28b8a68d330 <line:364:23, col:39> col:39 invalid b 'const int *'
| `-ParmVarDecl 0x28b8a68d3b0 <col:42, <invalid sloc>> col:50 invalid 'int *'
|-FunctionDecl 0x28b8a68d778 <line:365:1, line:366:31> line:365:5 invalid ec_GFp_simple_dbl 'int (const int *, int *, const int *, int *)'
| |-ParmVarDecl 0x28b8a68d548 <col:23, <invalid sloc>> col:39 invalid 'const int *'
| |-ParmVarDecl 0x28b8a68d5c8 <col:41, col:51> col:51 invalid r 'int *'
| |-ParmVarDecl 0x28b8a68d648 <col:54, col:70> col:70 invalid a 'const int *'
| `-ParmVarDecl 0x28b8a68d6c8 <line:366:23, <invalid sloc>> col:31 invalid 'int *'
|-FunctionDecl 0x28b8a68d9f8 <line:367:1, col:64> col:5 invalid ec_GFp_simple_invert 'int (const int *, int *, int *)'
| |-ParmVarDecl 0x28b8a68d850 <col:26, <invalid sloc>> col:42 invalid 'const int *'
| |-ParmVarDecl 0x28b8a68d8d0 <col:44, <invalid sloc>> col:54 invalid 'int *'
| `-ParmVarDecl 0x28b8a68d950 <col:56, <invalid sloc>> col:64 invalid 'int *'
|-FunctionDecl 0x28b8a68dbe8 <line:368:1, col:68> col:5 invalid ec_GFp_simple_is_at_infinity 'int (const int *, const int *)'
| |-ParmVarDecl 0x28b8a68dac8 <col:34, <invalid sloc>> col:50 invalid 'const int *'
| `-ParmVarDecl 0x28b8a68db48 <col:52, <invalid sloc>> col:68 invalid 'const int *'
|-FunctionDecl 0x28b8a68de58 <line:369:1, col:75> col:5 invalid ec_GFp_simple_is_on_curve 'int (const int *, const int *, int *)'
| |-ParmVarDecl 0x28b8a68dcb0 <col:31, <invalid sloc>> col:47 invalid 'const int *'
| |-ParmVarDecl 0x28b8a68dd30 <col:49, <invalid sloc>> col:65 invalid 'const int *'
| `-ParmVarDecl 0x28b8a68ddb0 <col:67, <invalid sloc>> col:75 invalid 'int *'
|-FunctionDecl 0x28b8a68a180 <line:370:1, line:371:31> line:370:5 invalid ec_GFp_simple_cmp 'int (const int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x28b8a68df28 <col:23, <invalid sloc>> col:39 invalid 'const int *'
| |-ParmVarDecl 0x28b8a68dfa8 <col:41, col:57> col:57 invalid a 'const int *'
| |-ParmVarDecl 0x28b8a68e028 <col:60, col:76> col:76 invalid b 'const int *'
| `-ParmVarDecl 0x28b8a68e0a8 <line:371:23, <invalid sloc>> col:31 invalid 'int *'
|-FunctionDecl 0x28b8a68a400 <line:372:1, col:69> col:5 invalid ec_GFp_simple_make_affine 'int (const int *, int *, int *)'
| |-ParmVarDecl 0x28b8a68a258 <col:31, <invalid sloc>> col:47 invalid 'const int *'
| |-ParmVarDecl 0x28b8a68a2d8 <col:49, <invalid sloc>> col:59 invalid 'int *'
| `-ParmVarDecl 0x28b8a68a358 <col:61, <invalid sloc>> col:69 invalid 'int *'
|-FunctionDecl 0x28b8a68a708 <line:373:1, line:374:60> line:373:5 invalid ec_GFp_simple_points_make_affine 'int (const int *, size_t, int **, int *)'
| |-ParmVarDecl 0x28b8a68a4d0 <col:38, <invalid sloc>> col:54 invalid 'const int *'
| |-ParmVarDecl 0x28b8a68a548 <col:56, col:63> col:63 num 'size_t':'unsigned long long'
| |-ParmVarDecl 0x28b8a68a5d8 <line:374:38, <invalid sloc>> col:48 invalid 'int **':'int **'
| `-ParmVarDecl 0x28b8a68a658 <col:52, <invalid sloc>> col:60 invalid 'int *'
|-FunctionDecl 0x28b8a68aa98 <line:375:1, line:376:54> line:375:5 invalid ec_GFp_simple_field_mul 'int (const int *, int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x28b8a68a7e0 <col:29, <invalid sloc>> col:45 invalid 'const int *'
| |-ParmVarDecl 0x28b8a68a860 <col:47, col:55> col:55 invalid r 'int *'
| |-ParmVarDecl 0x28b8a68a8e0 <col:58, col:72> col:72 invalid a 'const int *'
| |-ParmVarDecl 0x28b8a68a960 <line:376:29, col:43> col:43 invalid b 'const int *'
| `-ParmVarDecl 0x28b8a68a9e0 <col:46, <invalid sloc>> col:54 invalid 'int *'
|-FunctionDecl 0x28b8a68ada8 <line:377:1, line:378:37> line:377:5 invalid ec_GFp_simple_field_sqr 'int (const int *, int *, const int *, int *)'
| |-ParmVarDecl 0x28b8a68ab78 <col:29, <invalid sloc>> col:45 invalid 'const int *'
| |-ParmVarDecl 0x28b8a68abf8 <col:47, col:55> col:55 invalid r 'int *'
| |-ParmVarDecl 0x28b8a68ac78 <col:58, col:72> col:72 invalid a 'const int *'
| `-ParmVarDecl 0x28b8a68acf8 <line:378:29, <invalid sloc>> col:37 invalid 'int *'
|-FunctionDecl 0x28b8a68b028 <line:379:1, line:380:48> line:379:5 invalid ec_GFp_simple_blind_coordinates 'int (const int *, int *, int *)'
| |-ParmVarDecl 0x28b8a68ae80 <col:37, col:53> col:53 invalid group 'const int *'
| |-ParmVarDecl 0x28b8a68af00 <col:60, col:70> col:70 invalid p 'int *'
| `-ParmVarDecl 0x28b8a68af80 <line:380:37, col:45> col:45 invalid ctx 'int *'
|-FunctionDecl 0x28b8a68b1c0 <line:383:1, col:38> col:5 invalid ec_GFp_mont_group_init 'int (int *)'
| `-ParmVarDecl 0x28b8a68b0f8 <col:28, <invalid sloc>> col:38 invalid 'int *'
|-FunctionDecl 0x28b8a68b538 <line:384:1, line:385:58> line:384:5 invalid ec_GFp_mont_group_set_curve 'int (int *, const int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x28b8a68b280 <col:33, <invalid sloc>> col:43 invalid 'int *'
| |-ParmVarDecl 0x28b8a68b300 <col:45, col:59> col:59 invalid p 'const int *'
| |-ParmVarDecl 0x28b8a68b380 <col:62, col:76> col:76 invalid a 'const int *'
| |-ParmVarDecl 0x28b8a68b400 <line:385:33, col:47> col:47 invalid b 'const int *'
| `-ParmVarDecl 0x28b8a68b480 <col:50, <invalid sloc>> col:58 invalid 'int *'
|-FunctionDecl 0x28b8a68b6a8 <line:386:1, col:41> col:6 invalid ec_GFp_mont_group_finish 'void (int *)'
| `-ParmVarDecl 0x28b8a68b618 <col:31, <invalid sloc>> col:41 invalid 'int *'
|-FunctionDecl 0x28b8a68b7f8 <line:387:1, col:47> col:6 invalid ec_GFp_mont_group_clear_finish 'void (int *)'
| `-ParmVarDecl 0x28b8a68b768 <col:37, <invalid sloc>> col:47 invalid 'int *'
|-FunctionDecl 0x28b8a68b9d8 <line:388:1, col:56> col:5 invalid ec_GFp_mont_group_copy 'int (int *, const int *)'
| |-ParmVarDecl 0x28b8a68b8b8 <col:28, <invalid sloc>> col:38 invalid 'int *'
| `-ParmVarDecl 0x28b8a68b938 <col:40, <invalid sloc>> col:56 invalid 'const int *'
|-FunctionDecl 0x28b8a68bd58 <line:389:1, line:390:52> line:389:5 invalid ec_GFp_mont_field_mul 'int (const int *, int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x28b8a68baa0 <col:27, <invalid sloc>> col:43 invalid 'const int *'
| |-ParmVarDecl 0x28b8a68bb20 <col:45, col:53> col:53 invalid r 'int *'
| |-ParmVarDecl 0x28b8a68bba0 <col:56, col:70> col:70 invalid a 'const int *'
| |-ParmVarDecl 0x28b8a68bc20 <line:390:27, col:41> col:41 invalid b 'const int *'
| `-ParmVarDecl 0x28b8a68bca0 <col:44, <invalid sloc>> col:52 invalid 'int *'
|-FunctionDecl 0x28b8a68c068 <line:391:1, line:392:35> line:391:5 invalid ec_GFp_mont_field_sqr 'int (const int *, int *, const int *, int *)'
| |-ParmVarDecl 0x28b8a68be38 <col:27, <invalid sloc>> col:43 invalid 'const int *'
| |-ParmVarDecl 0x28b8a68beb8 <col:45, col:53> col:53 invalid r 'int *'
| |-ParmVarDecl 0x28b8a68bf38 <col:56, col:70> col:70 invalid a 'const int *'
| `-ParmVarDecl 0x28b8a68bfb8 <line:392:27, <invalid sloc>> col:35 invalid 'int *'
|-FunctionDecl 0x28b8a691420 <line:393:1, line:394:38> line:393:5 invalid ec_GFp_mont_field_encode 'int (const int *, int *, const int *, int *)'
| |-ParmVarDecl 0x28b8a6911f0 <col:30, <invalid sloc>> col:46 invalid 'const int *'
| |-ParmVarDecl 0x28b8a691270 <col:48, col:56> col:56 invalid r 'int *'
| |-ParmVarDecl 0x28b8a6912f0 <col:59, col:73> col:73 invalid a 'const int *'
| `-ParmVarDecl 0x28b8a691370 <line:394:30, <invalid sloc>> col:38 invalid 'int *'
|-FunctionDecl 0x28b8a691728 <line:395:1, line:396:38> line:395:5 invalid ec_GFp_mont_field_decode 'int (const int *, int *, const int *, int *)'
| |-ParmVarDecl 0x28b8a6914f8 <col:30, <invalid sloc>> col:46 invalid 'const int *'
| |-ParmVarDecl 0x28b8a691578 <col:48, col:56> col:56 invalid r 'int *'
| |-ParmVarDecl 0x28b8a6915f8 <col:59, col:73> col:73 invalid a 'const int *'
| `-ParmVarDecl 0x28b8a691678 <line:396:30, <invalid sloc>> col:38 invalid 'int *'
|-FunctionDecl 0x28b8a6919a8 <line:397:1, col:71> col:5 invalid ec_GFp_mont_field_set_to_one 'int (const int *, int *, int *)'
| |-ParmVarDecl 0x28b8a691800 <col:34, <invalid sloc>> col:50 invalid 'const int *'
| |-ParmVarDecl 0x28b8a691880 <col:52, col:60> col:60 invalid r 'int *'
| `-ParmVarDecl 0x28b8a691900 <col:63, <invalid sloc>> col:71 invalid 'int *'
|-FunctionDecl 0x28b8a691b98 <line:400:1, col:63> col:5 invalid ec_GFp_nist_group_copy 'int (int *, const int *)'
| |-ParmVarDecl 0x28b8a691a78 <col:28, col:38> col:38 invalid dest 'int *'
| `-ParmVarDecl 0x28b8a691af8 <col:44, col:60> col:60 invalid src 'const int *'
|-FunctionDecl 0x28b8a691f18 <line:401:1, line:402:58> line:401:5 invalid ec_GFp_nist_group_set_curve 'int (int *, const int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x28b8a691c60 <col:33, <invalid sloc>> col:43 invalid 'int *'
| |-ParmVarDecl 0x28b8a691ce0 <col:45, col:59> col:59 invalid p 'const int *'
| |-ParmVarDecl 0x28b8a691d60 <col:62, col:76> col:76 invalid a 'const int *'
| |-ParmVarDecl 0x28b8a691de0 <line:402:33, col:47> col:47 invalid b 'const int *'
| `-ParmVarDecl 0x28b8a691e60 <col:50, <invalid sloc>> col:58 invalid 'int *'
|-FunctionDecl 0x28b8a6942f0 <line:403:1, line:404:52> line:403:5 invalid ec_GFp_nist_field_mul 'int (const int *, int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x28b8a691ff8 <col:27, <invalid sloc>> col:43 invalid 'const int *'
| |-ParmVarDecl 0x28b8a692078 <col:45, col:53> col:53 invalid r 'int *'
| |-ParmVarDecl 0x28b8a6920f8 <col:56, col:70> col:70 invalid a 'const int *'
| |-ParmVarDecl 0x28b8a692178 <line:404:27, col:41> col:41 invalid b 'const int *'
| `-ParmVarDecl 0x28b8a694238 <col:44, <invalid sloc>> col:52 invalid 'int *'
|-FunctionDecl 0x28b8a694600 <line:405:1, line:406:35> line:405:5 invalid ec_GFp_nist_field_sqr 'int (const int *, int *, const int *, int *)'
| |-ParmVarDecl 0x28b8a6943d0 <col:27, <invalid sloc>> col:43 invalid 'const int *'
| |-ParmVarDecl 0x28b8a694450 <col:45, col:53> col:53 invalid r 'int *'
| |-ParmVarDecl 0x28b8a6944d0 <col:56, col:70> col:70 invalid a 'const int *'
| `-ParmVarDecl 0x28b8a694550 <line:406:27, <invalid sloc>> col:35 invalid 'int *'
|-FunctionDecl 0x28b8a694770 <line:409:1, col:41> col:5 invalid ec_GF2m_simple_group_init 'int (int *)'
| `-ParmVarDecl 0x28b8a6946d8 <col:31, <invalid sloc>> col:41 invalid 'int *'
|-FunctionDecl 0x28b8a6948c0 <line:410:1, col:44> col:6 invalid ec_GF2m_simple_group_finish 'void (int *)'
| `-ParmVarDecl 0x28b8a694830 <col:34, <invalid sloc>> col:44 invalid 'int *'
|-FunctionDecl 0x28b8a694a10 <line:411:1, col:50> col:6 invalid ec_GF2m_simple_group_clear_finish 'void (int *)'
| `-ParmVarDecl 0x28b8a694980 <col:40, <invalid sloc>> col:50 invalid 'int *'
|-FunctionDecl 0x28b8a694bf0 <line:412:1, col:59> col:5 invalid ec_GF2m_simple_group_copy 'int (int *, const int *)'
| |-ParmVarDecl 0x28b8a694ad0 <col:31, <invalid sloc>> col:41 invalid 'int *'
| `-ParmVarDecl 0x28b8a694b50 <col:43, <invalid sloc>> col:59 invalid 'const int *'
|-FunctionDecl 0x28b8a694f70 <line:413:1, line:415:44> line:413:5 invalid ec_GF2m_simple_group_set_curve 'int (int *, const int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x28b8a694cb8 <col:36, <invalid sloc>> col:46 invalid 'int *'
| |-ParmVarDecl 0x28b8a694d38 <col:48, col:62> col:62 invalid p 'const int *'
| |-ParmVarDecl 0x28b8a694db8 <line:414:36, col:50> col:50 invalid a 'const int *'
| |-ParmVarDecl 0x28b8a694e38 <col:53, col:67> col:67 invalid b 'const int *'
| `-ParmVarDecl 0x28b8a694eb8 <line:415:36, <invalid sloc>> col:44 invalid 'int *'
|-FunctionDecl 0x28b8a695368 <line:416:1, line:417:55> line:416:5 invalid ec_GF2m_simple_group_get_curve 'int (const int *, int *, int *, int *, int *)'
| |-ParmVarDecl 0x28b8a695050 <col:36, <invalid sloc>> col:52 invalid 'const int *'
| |-ParmVarDecl 0x28b8a6950d0 <col:54, col:62> col:62 invalid p 'int *'
| |-ParmVarDecl 0x28b8a695150 <col:65, col:73> col:73 invalid a 'int *'
| |-ParmVarDecl 0x28b8a695230 <line:417:36, col:44> col:44 invalid b 'int *'
| `-ParmVarDecl 0x28b8a6952b0 <col:47, <invalid sloc>> col:55 invalid 'int *'
|-FunctionDecl 0x28b8a6954e0 <line:418:1, col:53> col:5 invalid ec_GF2m_simple_group_get_degree 'int (const int *)'
| `-ParmVarDecl 0x28b8a695448 <col:37, <invalid sloc>> col:53 invalid 'const int *'
|-FunctionDecl 0x28b8a6956c0 <line:419:1, col:71> col:5 invalid ec_GF2m_simple_group_check_discriminant 'int (const int *, int *)'
| |-ParmVarDecl 0x28b8a6955a0 <col:45, <invalid sloc>> col:61 invalid 'const int *'
| `-ParmVarDecl 0x28b8a695620 <col:63, <invalid sloc>> col:71 invalid 'int *'
|-FunctionDecl 0x28b8a695820 <line:420:1, col:41> col:5 invalid ec_GF2m_simple_point_init 'int (int *)'
| `-ParmVarDecl 0x28b8a695788 <col:31, <invalid sloc>> col:41 invalid 'int *'
|-FunctionDecl 0x28b8a695970 <line:421:1, col:44> col:6 invalid ec_GF2m_simple_point_finish 'void (int *)'
| `-ParmVarDecl 0x28b8a6958e0 <col:34, <invalid sloc>> col:44 invalid 'int *'
|-FunctionDecl 0x28b8a695ac0 <line:422:1, col:50> col:6 invalid ec_GF2m_simple_point_clear_finish 'void (int *)'
| `-ParmVarDecl 0x28b8a695a30 <col:40, <invalid sloc>> col:50 invalid 'int *'
|-FunctionDecl 0x28b8a695ca0 <line:423:1, col:59> col:5 invalid ec_GF2m_simple_point_copy 'int (int *, const int *)'
| |-ParmVarDecl 0x28b8a695b80 <col:31, <invalid sloc>> col:41 invalid 'int *'
| `-ParmVarDecl 0x28b8a695c00 <col:43, <invalid sloc>> col:59 invalid 'const int *'
|-FunctionDecl 0x28b8a695e88 <line:424:1, col:70> col:5 invalid ec_GF2m_simple_point_set_to_infinity 'int (const int *, int *)'
| |-ParmVarDecl 0x28b8a695d68 <col:42, <invalid sloc>> col:58 invalid 'const int *'
| `-ParmVarDecl 0x28b8a695de8 <col:60, <invalid sloc>> col:70 invalid 'int *'
|-FunctionDecl 0x28b8a692200 <line:425:1, line:427:74> line:425:5 invalid ec_GF2m_simple_point_set_affine_coordinates 'int (const int *, int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x28b8a695f50 <col:49, <invalid sloc>> col:65 invalid 'const int *'
| |-ParmVarDecl 0x28b8a695fd0 <col:67, <invalid sloc>> col:77 invalid 'int *'
| |-ParmVarDecl 0x28b8a696050 <line:426:49, col:63> col:63 invalid x 'const int *'
| |-ParmVarDecl 0x28b8a6960d0 <line:427:49, col:63> col:63 invalid y 'const int *'
| `-ParmVarDecl 0x28b8a696150 <col:66, <invalid sloc>> col:74 invalid 'int *'
|-FunctionDecl 0x28b8a692598 <line:428:1, line:430:68> line:428:5 invalid ec_GF2m_simple_point_get_affine_coordinates 'int (const int *, const int *, int *, int *, int *)'
| |-ParmVarDecl 0x28b8a6922e0 <col:49, <invalid sloc>> col:65 invalid 'const int *'
| |-ParmVarDecl 0x28b8a692360 <line:429:49, <invalid sloc>> col:65 invalid 'const int *'
| |-ParmVarDecl 0x28b8a6923e0 <col:67, col:75> col:75 invalid x 'int *'
| |-ParmVarDecl 0x28b8a692460 <line:430:49, col:57> col:57 invalid y 'int *'
| `-ParmVarDecl 0x28b8a6924e0 <col:60, <invalid sloc>> col:68 invalid 'int *'
|-FunctionDecl 0x28b8a692930 <line:431:1, line:433:55> line:431:5 invalid ec_GF2m_simple_set_compressed_coordinates 'int (const int *, int *, const int *, int, int *)'
| |-ParmVarDecl 0x28b8a692678 <col:47, <invalid sloc>> col:63 invalid 'const int *'
| |-ParmVarDecl 0x28b8a6926f8 <col:65, <invalid sloc>> col:75 invalid 'int *'
| |-ParmVarDecl 0x28b8a692778 <line:432:47, col:61> col:61 invalid x 'const int *'
| |-ParmVarDecl 0x28b8a6927f8 <col:64, col:68> col:68 y_bit 'int'
| `-ParmVarDecl 0x28b8a692878 <line:433:47, <invalid sloc>> col:55 invalid 'int *'
|-FunctionDecl 0x28b8a692d40 <line:434:1, line:436:73> line:434:8 invalid ec_GF2m_simple_point2oct 'size_t (const int *, const int *, int, unsigned char *, size_t, int *)'
| |-ParmVarDecl 0x28b8a692a10 <col:33, <invalid sloc>> col:49 invalid 'const int *'
| |-ParmVarDecl 0x28b8a692a90 <col:51, <invalid sloc>> col:67 invalid 'const int *'
| |-ParmVarDecl 0x28b8a692b10 <line:435:33, col:57> col:57 invalid form 'int'
| |-ParmVarDecl 0x28b8a692b90 <line:436:33, col:48> col:48 buf 'unsigned char *'
| |-ParmVarDecl 0x28b8a692c08 <col:53, col:60> col:60 len 'size_t':'unsigned long long'
| `-ParmVarDecl 0x28b8a692c88 <col:65, <invalid sloc>> col:73 invalid 'int *'
|-FunctionDecl 0x28b8a6930d8 <line:437:1, line:438:76> line:437:5 invalid ec_GF2m_simple_oct2point 'int (const int *, int *, const unsigned char *, size_t, int *)'
| |-ParmVarDecl 0x28b8a692e28 <col:30, <invalid sloc>> col:46 invalid 'const int *'
| |-ParmVarDecl 0x28b8a692ea8 <col:48, <invalid sloc>> col:58 invalid 'int *'
| |-ParmVarDecl 0x28b8a692f28 <line:438:30, col:51> col:51 buf 'const unsigned char *'
| |-ParmVarDecl 0x28b8a692fa0 <col:56, col:63> col:63 len 'size_t':'unsigned long long'
| `-ParmVarDecl 0x28b8a693020 <col:68, <invalid sloc>> col:76 invalid 'int *'
|-FunctionDecl 0x28b8a6934c8 <line:439:1, line:440:51> line:439:5 invalid ec_GF2m_simple_add 'int (const int *, int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x28b8a693210 <col:24, <invalid sloc>> col:40 invalid 'const int *'
| |-ParmVarDecl 0x28b8a693290 <col:42, col:52> col:52 invalid r 'int *'
| |-ParmVarDecl 0x28b8a693310 <col:55, col:71> col:71 invalid a 'const int *'
| |-ParmVarDecl 0x28b8a693390 <line:440:24, col:40> col:40 invalid b 'const int *'
| `-ParmVarDecl 0x28b8a693410 <col:43, <invalid sloc>> col:51 invalid 'int *'
|-FunctionDecl 0x28b8a6937d8 <line:441:1, line:442:32> line:441:5 invalid ec_GF2m_simple_dbl 'int (const int *, int *, const int *, int *)'
| |-ParmVarDecl 0x28b8a6935a8 <col:24, <invalid sloc>> col:40 invalid 'const int *'
| |-ParmVarDecl 0x28b8a693628 <col:42, col:52> col:52 invalid r 'int *'
| |-ParmVarDecl 0x28b8a6936a8 <col:55, col:71> col:71 invalid a 'const int *'
| `-ParmVarDecl 0x28b8a693728 <line:442:24, <invalid sloc>> col:32 invalid 'int *'
|-FunctionDecl 0x28b8a693a58 <line:443:1, col:65> col:5 invalid ec_GF2m_simple_invert 'int (const int *, int *, int *)'
| |-ParmVarDecl 0x28b8a6938b0 <col:27, <invalid sloc>> col:43 invalid 'const int *'
| |-ParmVarDecl 0x28b8a693930 <col:45, <invalid sloc>> col:55 invalid 'int *'
| `-ParmVarDecl 0x28b8a6939b0 <col:57, <invalid sloc>> col:65 invalid 'int *'
|-FunctionDecl 0x28b8a693c48 <line:444:1, col:69> col:5 invalid ec_GF2m_simple_is_at_infinity 'int (const int *, const int *)'
| |-ParmVarDecl 0x28b8a693b28 <col:35, <invalid sloc>> col:51 invalid 'const int *'
| `-ParmVarDecl 0x28b8a693ba8 <col:53, <invalid sloc>> col:69 invalid 'const int *'
|-FunctionDecl 0x28b8a693eb8 <line:445:1, col:76> col:5 invalid ec_GF2m_simple_is_on_curve 'int (const int *, const int *, int *)'
| |-ParmVarDecl 0x28b8a693d10 <col:32, <invalid sloc>> col:48 invalid 'const int *'
| |-ParmVarDecl 0x28b8a693d90 <col:50, <invalid sloc>> col:66 invalid 'const int *'
| `-ParmVarDecl 0x28b8a693e10 <col:68, <invalid sloc>> col:76 invalid 'int *'
|-FunctionDecl 0x28b8a624100 <line:446:1, line:447:32> line:446:5 invalid ec_GF2m_simple_cmp 'int (const int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x28b8a693f88 <col:24, <invalid sloc>> col:40 invalid 'const int *'
| |-ParmVarDecl 0x28b8a694008 <col:42, col:58> col:58 invalid a 'const int *'
| |-ParmVarDecl 0x28b8a694088 <col:61, col:77> col:77 invalid b 'const int *'
| `-ParmVarDecl 0x28b8a694108 <line:447:24, <invalid sloc>> col:32 invalid 'int *'
|-FunctionDecl 0x28b8a624380 <line:448:1, col:70> col:5 invalid ec_GF2m_simple_make_affine 'int (const int *, int *, int *)'
| |-ParmVarDecl 0x28b8a6241d8 <col:32, <invalid sloc>> col:48 invalid 'const int *'
| |-ParmVarDecl 0x28b8a624258 <col:50, <invalid sloc>> col:60 invalid 'int *'
| `-ParmVarDecl 0x28b8a6242d8 <col:62, <invalid sloc>> col:70 invalid 'int *'
|-FunctionDecl 0x28b8a624688 <line:449:1, line:450:61> line:449:5 invalid ec_GF2m_simple_points_make_affine 'int (const int *, size_t, int **, int *)'
| |-ParmVarDecl 0x28b8a624450 <col:39, <invalid sloc>> col:55 invalid 'const int *'
| |-ParmVarDecl 0x28b8a6244c8 <col:57, col:64> col:64 num 'size_t':'unsigned long long'
| |-ParmVarDecl 0x28b8a624558 <line:450:39, <invalid sloc>> col:49 invalid 'int **':'int **'
| `-ParmVarDecl 0x28b8a6245d8 <col:53, <invalid sloc>> col:61 invalid 'int *'
|-FunctionDecl 0x28b8a624a18 <line:451:1, line:452:55> line:451:5 invalid ec_GF2m_simple_field_mul 'int (const int *, int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x28b8a624760 <col:30, <invalid sloc>> col:46 invalid 'const int *'
| |-ParmVarDecl 0x28b8a6247e0 <col:48, col:56> col:56 invalid r 'int *'
| |-ParmVarDecl 0x28b8a624860 <col:59, col:73> col:73 invalid a 'const int *'
| |-ParmVarDecl 0x28b8a6248e0 <line:452:30, col:44> col:44 invalid b 'const int *'
| `-ParmVarDecl 0x28b8a624960 <col:47, <invalid sloc>> col:55 invalid 'int *'
|-FunctionDecl 0x28b8a624d28 <line:453:1, line:454:38> line:453:5 invalid ec_GF2m_simple_field_sqr 'int (const int *, int *, const int *, int *)'
| |-ParmVarDecl 0x28b8a624af8 <col:30, <invalid sloc>> col:46 invalid 'const int *'
| |-ParmVarDecl 0x28b8a624b78 <col:48, col:56> col:56 invalid r 'int *'
| |-ParmVarDecl 0x28b8a624bf8 <col:59, col:73> col:73 invalid a 'const int *'
| `-ParmVarDecl 0x28b8a624c78 <line:454:30, <invalid sloc>> col:38 invalid 'int *'
|-FunctionDecl 0x28b8a6a1d00 <line:455:1, line:456:55> line:455:5 invalid ec_GF2m_simple_field_div 'int (const int *, int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x28b8a624e00 <col:30, <invalid sloc>> col:46 invalid 'const int *'
| |-ParmVarDecl 0x28b8a624e80 <col:48, col:56> col:56 invalid r 'int *'
| |-ParmVarDecl 0x28b8a624f00 <col:59, col:73> col:73 invalid a 'const int *'
| |-ParmVarDecl 0x28b8a624f80 <line:456:30, col:44> col:44 invalid b 'const int *'
| `-ParmVarDecl 0x28b8a625000 <col:47, <invalid sloc>> col:55 invalid 'int *'
|-FunctionDecl 0x28b8a6a21c0 <line:459:1, line:462:32> line:459:5 invalid ec_GF2m_simple_mul 'int (const int *, int *, const int *, size_t, const int **, const int **, int *)'
| |-ParmVarDecl 0x28b8a6a1de0 <col:24, col:40> col:40 invalid group 'const int *'
| |-ParmVarDecl 0x28b8a6a1e60 <col:47, col:57> col:57 invalid r 'int *'
| |-ParmVarDecl 0x28b8a6a1ee0 <line:460:24, col:38> col:38 invalid scalar 'const int *'
| |-ParmVarDecl 0x28b8a6a1f58 <col:46, col:53> col:53 num 'size_t':'unsigned long long'
| |-ParmVarDecl 0x28b8a6a1fe8 <line:461:24, <invalid sloc>> col:40 invalid points 'const int **':'const int **'
| |-ParmVarDecl 0x28b8a6a2078 <col:50, <invalid sloc>> col:64 invalid scalars 'const int **':'const int **'
| `-ParmVarDecl 0x28b8a6a20f8 <line:462:24, <invalid sloc>> col:32 invalid 'int *'
|-FunctionDecl 0x28b8a6a23d0 <line:463:1, col:57> col:5 invalid ec_GF2m_precompute_mult 'int (int *, int *)'
| |-ParmVarDecl 0x28b8a6a22b0 <col:29, col:39> col:39 invalid group 'int *'
| `-ParmVarDecl 0x28b8a6a2330 <col:46, col:54> col:54 invalid ctx 'int *'
|-FunctionDecl 0x28b8a6a2530 <line:464:1, col:55> col:5 invalid ec_GF2m_have_precompute_mult 'int (const int *)'
| `-ParmVarDecl 0x28b8a6a2498 <col:34, col:50> col:50 invalid group 'const int *'
|-FunctionDecl 0x28b8a6a2688 <line:468:1, col:47> col:5 invalid ec_GFp_nistp224_group_init 'int (int *)'
| `-ParmVarDecl 0x28b8a6a25f0 <col:32, col:42> col:42 invalid group 'int *'
|-FunctionDecl 0x28b8a6a2a00 <line:469:1, line:471:45> line:469:5 invalid ec_GFp_nistp224_group_set_curve 'int (int *, const int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x28b8a6a2748 <col:37, col:47> col:47 invalid group 'int *'
| |-ParmVarDecl 0x28b8a6a27c8 <col:54, col:68> col:68 invalid p 'const int *'
| |-ParmVarDecl 0x28b8a6a2848 <line:470:37, col:51> col:51 invalid a 'const int *'
| |-ParmVarDecl 0x28b8a6a28c8 <col:54, col:68> col:68 invalid n 'const int *'
| `-ParmVarDecl 0x28b8a6a2948 <line:471:37, <invalid sloc>> col:45 invalid 'int *'
|-FunctionDecl 0x28b8a69dd78 <line:472:1, line:475:61> line:472:5 invalid ec_GFp_nistp224_point_get_affine_coordinates 'int (const int *, const int *, int *, int *, int *)'
| |-ParmVarDecl 0x28b8a6a2ae0 <col:50, col:66> col:66 invalid group 'const int *'
| |-ParmVarDecl 0x28b8a6a2b60 <line:473:50, col:66> col:66 invalid point 'const int *'
| |-ParmVarDecl 0x28b8a6a2be0 <line:474:50, col:58> col:58 invalid x 'int *'
| |-ParmVarDecl 0x28b8a6a2c60 <col:61, col:69> col:69 invalid y 'int *'
| `-ParmVarDecl 0x28b8a69dcc0 <line:475:50, col:58> col:58 invalid ctx 'int *'
|-FunctionDecl 0x28b8a69e238 <line:476:1, line:479:33> line:476:5 invalid ec_GFp_nistp224_mul 'int (const int *, int *, const int *, size_t, const int **, const int **, int *)'
| |-ParmVarDecl 0x28b8a69de58 <col:25, col:41> col:41 invalid group 'const int *'
| |-ParmVarDecl 0x28b8a69ded8 <col:48, col:58> col:58 invalid r 'int *'
| |-ParmVarDecl 0x28b8a69df58 <line:477:25, col:39> col:39 invalid scalar 'const int *'
| |-ParmVarDecl 0x28b8a69dfd0 <col:47, col:54> col:54 num 'size_t':'unsigned long long'
| |-ParmVarDecl 0x28b8a69e060 <line:478:25, <invalid sloc>> col:41 invalid points 'const int **':'const int **'
| |-ParmVarDecl 0x28b8a69e0f0 <col:51, <invalid sloc>> col:65 invalid scalars 'const int **':'const int **'
| `-ParmVarDecl 0x28b8a69e170 <line:479:25, <invalid sloc>> col:33 invalid 'int *'
|-FunctionDecl 0x28b8a69e708 <line:480:1, line:483:68> line:480:5 invalid ec_GFp_nistp224_points_mul 'int (const int *, int *, const int *, size_t, const int **, const int **, int *)'
| |-ParmVarDecl 0x28b8a69e328 <col:32, col:48> col:48 invalid group 'const int *'
| |-ParmVarDecl 0x28b8a69e3a8 <col:55, col:65> col:65 invalid r 'int *'
| |-ParmVarDecl 0x28b8a69e428 <line:481:32, col:46> col:46 invalid scalar 'const int *'
| |-ParmVarDecl 0x28b8a69e4a0 <col:54, col:61> col:61 num 'size_t':'unsigned long long'
| |-ParmVarDecl 0x28b8a69e530 <line:482:32, <invalid sloc>> col:48 invalid points 'const int **':'const int **'
| |-ParmVarDecl 0x28b8a69e5c0 <line:483:32, <invalid sloc>> col:46 invalid scalars 'const int **':'const int **'
| `-ParmVarDecl 0x28b8a69e640 <col:57, col:65> col:65 invalid ctx 'int *'
|-FunctionDecl 0x28b8a69e918 <line:484:1, col:65> col:5 invalid ec_GFp_nistp224_precompute_mult 'int (int *, int *)'
| |-ParmVarDecl 0x28b8a69e7f8 <col:37, col:47> col:47 invalid group 'int *'
| `-ParmVarDecl 0x28b8a69e878 <col:54, col:62> col:62 invalid ctx 'int *'
|-FunctionDecl 0x28b8a69ea78 <line:485:1, col:63> col:5 invalid ec_GFp_nistp224_have_precompute_mult 'int (const int *)'
| `-ParmVarDecl 0x28b8a69e9e0 <col:42, col:58> col:58 invalid group 'const int *'
|-FunctionDecl 0x28b8a69ebd0 <line:488:1, col:47> col:5 invalid ec_GFp_nistp256_group_init 'int (int *)'
| `-ParmVarDecl 0x28b8a69eb38 <col:32, col:42> col:42 invalid group 'int *'
|-FunctionDecl 0x28b8a69ff98 <line:489:1, line:491:45> line:489:5 invalid ec_GFp_nistp256_group_set_curve 'int (int *, const int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x28b8a69fce0 <col:37, col:47> col:47 invalid group 'int *'
| |-ParmVarDecl 0x28b8a69fd60 <col:54, col:68> col:68 invalid p 'const int *'
| |-ParmVarDecl 0x28b8a69fde0 <line:490:37, col:51> col:51 invalid a 'const int *'
| |-ParmVarDecl 0x28b8a69fe60 <col:54, col:68> col:68 invalid n 'const int *'
| `-ParmVarDecl 0x28b8a69fee0 <line:491:37, <invalid sloc>> col:45 invalid 'int *'
|-FunctionDecl 0x28b8a6a0330 <line:492:1, line:495:61> line:492:5 invalid ec_GFp_nistp256_point_get_affine_coordinates 'int (const int *, const int *, int *, int *, int *)'
| |-ParmVarDecl 0x28b8a6a0078 <col:50, col:66> col:66 invalid group 'const int *'
| |-ParmVarDecl 0x28b8a6a00f8 <line:493:50, col:66> col:66 invalid point 'const int *'
| |-ParmVarDecl 0x28b8a6a0178 <line:494:50, col:58> col:58 invalid x 'int *'
| |-ParmVarDecl 0x28b8a6a01f8 <col:61, col:69> col:69 invalid y 'int *'
| `-ParmVarDecl 0x28b8a6a0278 <line:495:50, col:58> col:58 invalid ctx 'int *'
|-FunctionDecl 0x28b8a6a07f0 <line:496:1, line:499:33> line:496:5 invalid ec_GFp_nistp256_mul 'int (const int *, int *, const int *, size_t, const int **, const int **, int *)'
| |-ParmVarDecl 0x28b8a6a0410 <col:25, col:41> col:41 invalid group 'const int *'
| |-ParmVarDecl 0x28b8a6a0490 <col:48, col:58> col:58 invalid r 'int *'
| |-ParmVarDecl 0x28b8a6a0510 <line:497:25, col:39> col:39 invalid scalar 'const int *'
| |-ParmVarDecl 0x28b8a6a0588 <col:47, col:54> col:54 num 'size_t':'unsigned long long'
| |-ParmVarDecl 0x28b8a6a0618 <line:498:25, <invalid sloc>> col:41 invalid points 'const int **':'const int **'
| |-ParmVarDecl 0x28b8a6a06a8 <col:51, <invalid sloc>> col:65 invalid scalars 'const int **':'const int **'
| `-ParmVarDecl 0x28b8a6a0728 <line:499:25, <invalid sloc>> col:33 invalid 'int *'
|-FunctionDecl 0x28b8a6a3d20 <line:500:1, line:503:68> line:500:5 invalid ec_GFp_nistp256_points_mul 'int (const int *, int *, const int *, size_t, const int **, const int **, int *)'
| |-ParmVarDecl 0x28b8a6a08e0 <col:32, col:48> col:48 invalid group 'const int *'
| |-ParmVarDecl 0x28b8a6a0960 <col:55, col:65> col:65 invalid r 'int *'
| |-ParmVarDecl 0x28b8a6a09e0 <line:501:32, col:46> col:46 invalid scalar 'const int *'
| |-ParmVarDecl 0x28b8a6a0a58 <col:54, col:61> col:61 num 'size_t':'unsigned long long'
| |-ParmVarDecl 0x28b8a6a0ae8 <line:502:32, <invalid sloc>> col:48 invalid points 'const int **':'const int **'
| |-ParmVarDecl 0x28b8a6a0b78 <line:503:32, <invalid sloc>> col:46 invalid scalars 'const int **':'const int **'
| `-ParmVarDecl 0x28b8a6a0bf8 <col:57, col:65> col:65 invalid ctx 'int *'
|-FunctionDecl 0x28b8a6a3f30 <line:504:1, col:65> col:5 invalid ec_GFp_nistp256_precompute_mult 'int (int *, int *)'
| |-ParmVarDecl 0x28b8a6a3e10 <col:37, col:47> col:47 invalid group 'int *'
| `-ParmVarDecl 0x28b8a6a3e90 <col:54, col:62> col:62 invalid ctx 'int *'
|-FunctionDecl 0x28b8a6a4090 <line:505:1, col:63> col:5 invalid ec_GFp_nistp256_have_precompute_mult 'int (const int *)'
| `-ParmVarDecl 0x28b8a6a3ff8 <col:42, col:58> col:58 invalid group 'const int *'
|-FunctionDecl 0x28b8a6a41e8 <line:508:1, col:47> col:5 invalid ec_GFp_nistp521_group_init 'int (int *)'
| `-ParmVarDecl 0x28b8a6a4150 <col:32, col:42> col:42 invalid group 'int *'
|-FunctionDecl 0x28b8a6a4560 <line:509:1, line:511:45> line:509:5 invalid ec_GFp_nistp521_group_set_curve 'int (int *, const int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x28b8a6a42a8 <col:37, col:47> col:47 invalid group 'int *'
| |-ParmVarDecl 0x28b8a6a4328 <col:54, col:68> col:68 invalid p 'const int *'
| |-ParmVarDecl 0x28b8a6a43a8 <line:510:37, col:51> col:51 invalid a 'const int *'
| |-ParmVarDecl 0x28b8a6a4428 <col:54, col:68> col:68 invalid n 'const int *'
| `-ParmVarDecl 0x28b8a6a44a8 <line:511:37, <invalid sloc>> col:45 invalid 'int *'
|-FunctionDecl 0x28b8a6a48f8 <line:512:1, line:515:61> line:512:5 invalid ec_GFp_nistp521_point_get_affine_coordinates 'int (const int *, const int *, int *, int *, int *)'
| |-ParmVarDecl 0x28b8a6a4640 <col:50, col:66> col:66 invalid group 'const int *'
| |-ParmVarDecl 0x28b8a6a46c0 <line:513:50, col:66> col:66 invalid point 'const int *'
| |-ParmVarDecl 0x28b8a6a4740 <line:514:50, col:58> col:58 invalid x 'int *'
| |-ParmVarDecl 0x28b8a6a47c0 <col:61, col:69> col:69 invalid y 'int *'
| `-ParmVarDecl 0x28b8a6a4840 <line:515:50, col:58> col:58 invalid ctx 'int *'
|-FunctionDecl 0x28b8a69ed98 <line:516:1, line:519:33> line:516:5 invalid ec_GFp_nistp521_mul 'int (const int *, int *, const int *, size_t, const int **, const int **, int *)'
| |-ParmVarDecl 0x28b8a6a49d8 <col:25, col:41> col:41 invalid group 'const int *'
| |-ParmVarDecl 0x28b8a6a4a58 <col:48, col:58> col:58 invalid r 'int *'
| |-ParmVarDecl 0x28b8a6a4ad8 <line:517:25, col:39> col:39 invalid scalar 'const int *'
| |-ParmVarDecl 0x28b8a6a4b50 <col:47, col:54> col:54 num 'size_t':'unsigned long long'
| |-ParmVarDecl 0x28b8a6a4be0 <line:518:25, <invalid sloc>> col:41 invalid points 'const int **':'const int **'
| |-ParmVarDecl 0x28b8a6a4c70 <col:51, <invalid sloc>> col:65 invalid scalars 'const int **':'const int **'
| `-ParmVarDecl 0x28b8a69ecd0 <line:519:25, <invalid sloc>> col:33 invalid 'int *'
|-FunctionDecl 0x28b8a69f268 <line:520:1, line:523:68> line:520:5 invalid ec_GFp_nistp521_points_mul 'int (const int *, int *, const int *, size_t, const int **, const int **, int *)'
| |-ParmVarDecl 0x28b8a69ee88 <col:32, col:48> col:48 invalid group 'const int *'
| |-ParmVarDecl 0x28b8a69ef08 <col:55, col:65> col:65 invalid r 'int *'
| |-ParmVarDecl 0x28b8a69ef88 <line:521:32, col:46> col:46 invalid scalar 'const int *'
| |-ParmVarDecl 0x28b8a69f000 <col:54, col:61> col:61 num 'size_t':'unsigned long long'
| |-ParmVarDecl 0x28b8a69f090 <line:522:32, <invalid sloc>> col:48 invalid points 'const int **':'const int **'
| |-ParmVarDecl 0x28b8a69f120 <line:523:32, <invalid sloc>> col:46 invalid scalars 'const int **':'const int **'
| `-ParmVarDecl 0x28b8a69f1a0 <col:57, col:65> col:65 invalid ctx 'int *'
|-FunctionDecl 0x28b8a69f478 <line:524:1, col:65> col:5 invalid ec_GFp_nistp521_precompute_mult 'int (int *, int *)'
| |-ParmVarDecl 0x28b8a69f358 <col:37, col:47> col:47 invalid group 'int *'
| `-ParmVarDecl 0x28b8a69f3d8 <col:54, col:62> col:62 invalid ctx 'int *'
|-FunctionDecl 0x28b8a69f5d8 <line:525:1, col:63> col:5 invalid ec_GFp_nistp521_have_precompute_mult 'int (const int *)'
| `-ParmVarDecl 0x28b8a69f540 <col:42, col:58> col:58 invalid group 'const int *'
|-FunctionDecl 0x28b8a6a1a48 <line:528:1, line:552:75> line:528:6 used ec_GFp_nistp_points_make_affine_internal 'void (size_t, void *, size_t, void *, void (*)(void *), int (*)(const void *), void (*)(void *, const void *), void (*)(void *, const void *), void (*)(void *, const void *, const void *), void (*)(void *, const void *), void (*)(void *, const void *))'
| |-ParmVarDecl 0x28b8a69f690 <col:47, col:54> col:54 num 'size_t':'unsigned long long'
| |-ParmVarDecl 0x28b8a69f710 <col:59, col:65> col:65 point_array 'void *'
| |-ParmVarDecl 0x28b8a69f788 <line:529:47, col:54> col:54 felem_size 'size_t':'unsigned long long'
| |-ParmVarDecl 0x28b8a69f808 <line:530:47, col:53> col:53 tmp_felems 'void *'
| |-ParmVarDecl 0x28b8a69f9d0 <line:531:47, col:75> col:54 felem_one 'void (*)(void *)'
| |-ParmVarDecl 0x28b8a69fbc8 <line:532:47, line:533:72> line:532:53 felem_is_zero 'int (*)(const void *)'
| |-ParmVarDecl 0x28b8a6a0e98 <line:534:47, line:536:72> line:534:54 felem_assign 'void (*)(void *, const void *)'
| |-ParmVarDecl 0x28b8a6a1070 <line:537:47, line:539:72> line:537:54 felem_square 'void (*)(void *, const void *)'
| |-ParmVarDecl 0x28b8a6a13b0 <line:540:47, line:544:70> line:540:54 felem_mul 'void (*)(void *, const void *, const void *)'
| |-ParmVarDecl 0x28b8a6a1588 <line:545:47, line:547:69> line:545:54 felem_inv 'void (*)(void *, const void *)'
| `-ParmVarDecl 0x28b8a6a1760 <line:548:47, line:552:74> line:548:54 felem_contract 'void (*)(void *, const void *)'
|-FunctionDecl 0x28b8a6a8e18 <line:553:1, line:554:76> line:553:6 used ec_GFp_nistp_recode_scalar_bits 'void (unsigned char *, unsigned char *, unsigned char)'
| |-ParmVarDecl 0x28b8a6a1b70 <col:38, col:53> col:53 sign 'unsigned char *'
| |-ParmVarDecl 0x28b8a6a1bf0 <line:554:38, col:53> col:53 digit 'unsigned char *'
| `-ParmVarDecl 0x28b8a6a1c70 <col:60, col:74> col:74 in 'unsigned char'
|-FunctionDecl 0x28b8a6a8f98 <line:556:1, col:39> col:5 invalid ec_precompute_mont_data 'int (int *)'
| `-ParmVarDecl 0x28b8a6a8f00 <col:29, <invalid sloc>> col:39 invalid 'int *'
|-FunctionDecl 0x28b8a6a90f0 <line:557:1, col:53> col:5 invalid ec_group_simple_order_bits 'int (const int *)'
| `-ParmVarDecl 0x28b8a6a9058 <col:32, col:48> col:48 invalid group 'const int *'
|-FunctionDecl 0x28b8a6a9348 <line:567:1, line:568:61> line:567:8 invalid ec_key_simple_priv2oct 'size_t (const int *, unsigned char *, size_t)'
| |-ParmVarDecl 0x28b8a6a91b0 <col:31, col:45> col:45 invalid eckey 'const int *'
| |-ParmVarDecl 0x28b8a6a9230 <line:568:31, col:46> col:46 buf 'unsigned char *'
| `-ParmVarDecl 0x28b8a6a92a8 <col:51, col:58> col:58 len 'size_t':'unsigned long long'
|-FunctionDecl 0x28b8a6a95b8 <line:569:1, col:79> col:5 invalid ec_key_simple_oct2priv 'int (int *, const unsigned char *, size_t)'
| |-ParmVarDecl 0x28b8a6a9418 <col:28, col:36> col:36 invalid eckey 'int *'
| |-ParmVarDecl 0x28b8a6a9498 <col:43, col:64> col:64 buf 'const unsigned char *'
| `-ParmVarDecl 0x28b8a6a9510 <col:69, col:76> col:76 len 'size_t':'unsigned long long'
|-FunctionDecl 0x28b8a6a9720 <line:570:1, col:45> col:5 invalid ec_key_simple_generate_key 'int (int *)'
| `-ParmVarDecl 0x28b8a6a9688 <col:32, col:40> col:40 invalid eckey 'int *'
|-FunctionDecl 0x28b8a6a9878 <line:571:1, col:52> col:5 invalid ec_key_simple_generate_public_key 'int (int *)'
| `-ParmVarDecl 0x28b8a6a97e0 <col:39, col:47> col:47 invalid eckey 'int *'
|-FunctionDecl 0x28b8a6a99d0 <line:572:1, col:48> col:5 invalid ec_key_simple_check_key 'int (const int *)'
| `-ParmVarDecl 0x28b8a6a9938 <col:29, col:43> col:43 invalid eckey 'const int *'
|-RecordDecl 0x28b8a6a9a78 <line:576:1, line:601:1> line:576:8 invalid struct ec_key_method_st definition
| |-FieldDecl 0x28b8a6a9b48 <line:577:5, col:17> col:17 name 'const char *'
| |-FieldDecl 0x28b8a6a9bd0 <line:578:5, col:13> col:13 flags 'int32_t':'int'
| |-FieldDecl 0x28b8a6a9ce8 <line:579:5, col:28> col:11 init 'int (*)(int *)'
| |-FieldDecl 0x28b8a6a5de0 <line:580:5, col:31> col:12 finish 'void (*)(int *)'
| |-FieldDecl 0x28b8a6a5f80 <line:581:5, col:48> col:11 copy 'int (*)(int *, const int *)'
| |-FieldDecl 0x28b8a6a6120 <line:582:5, col:54> col:11 set_group 'int (*)(int *, const int *)'
| |-FieldDecl 0x28b8a6a62c0 <line:583:5, col:59> col:11 set_private 'int (*)(int *, const int *)'
| |-FieldDecl 0x28b8a6a6460 <line:584:5, col:59> col:11 set_public 'int (*)(int *, const int *)'
| |-FieldDecl 0x28b8a6a6578 <line:585:5, col:30> col:11 keygen 'int (*)(int *)'
| |-FieldDecl 0x28b8a6a6828 <line:586:5, line:587:67> line:586:11 compute_key 'int (*)(unsigned char **, size_t *, const int *, const int *)'
| |-FieldDecl 0x28b8a6a4e30 <line:588:5, line:590:47> line:588:11 sign 'int (*)(int, const unsigned char *, int, unsigned char *, unsigned int *, const int *, const int *, int *)'
| |-FieldDecl 0x28b8a6a51d0 <line:591:5, line:592:34> line:591:11 sign_setup 'int (*)(int *, int *, int **, int **)'
| |-FieldDecl 0x28b8a6a55e8 <line:593:5, <invalid sloc>> col:18 invalid sign_sig 'int *(*)(const unsigned char *, int, const int *, const int *, int *)'
| |-FieldDecl 0x28b8a6a5a90 <line:597:5, line:598:74> line:597:11 verify 'int (*)(int, const unsigned char *, int, const unsigned char *, int, int *)'
| `-FieldDecl 0x28b8a6a9eb0 <line:599:5, line:600:58> line:599:11 verify_sig 'int (*)(const unsigned char *, int, const int *, int *)'
|-FunctionDecl 0x28b8a6a9fb8 <line:605:1, col:34> col:5 invalid ossl_ec_key_gen 'int (int *)'
| `-ParmVarDecl 0x28b8a6a9f20 <col:21, col:29> col:29 invalid eckey 'int *'
|-FunctionDecl 0x28b8a6aa2a8 <line:606:1, line:607:70> line:606:5 invalid ossl_ecdh_compute_key 'int (unsigned char **, size_t *, const int *, const int *)'
| |-ParmVarDecl 0x28b8a6aa080 <col:27, col:43> col:43 pout 'unsigned char **'
| |-ParmVarDecl 0x28b8a6aa0f8 <col:49, col:57> col:57 poutlen 'size_t *'
| |-ParmVarDecl 0x28b8a6aa178 <line:607:27, col:43> col:43 invalid pub_key 'const int *'
| `-ParmVarDecl 0x28b8a6aa1f8 <col:52, col:66> col:66 invalid ecdh 'const int *'
|-FunctionDecl 0x28b8a6aa5b0 <line:608:1, line:609:72> line:608:5 invalid ecdh_simple_compute_key 'int (unsigned char **, size_t *, const int *, const int *)'
| |-ParmVarDecl 0x28b8a6aa388 <col:29, col:45> col:45 pout 'unsigned char **'
| |-ParmVarDecl 0x28b8a6aa400 <col:51, col:59> col:59 poutlen 'size_t *'
| |-ParmVarDecl 0x28b8a6aa480 <line:609:29, col:45> col:45 invalid pub_key 'const int *'
| `-ParmVarDecl 0x28b8a6aa500 <col:54, col:68> col:68 invalid ecdh 'const int *'
|-RecordDecl 0x28b8a6aa670 <line:611:1, line:614:1> line:611:8 invalid struct ECDSA_SIG_st definition
| |-FieldDecl 0x28b8a6aa748 <line:612:5, col:13> col:13 invalid r 'int *'
| `-FieldDecl 0x28b8a6aa7b8 <line:613:5, col:13> col:13 invalid s 'int *'
|-FunctionDecl 0x28b8a6aaa68 <line:616:1, line:617:38> line:616:5 invalid ossl_ecdsa_sign_setup 'int (int *, int *, int **, int **)'
| |-ParmVarDecl 0x28b8a6aa828 <col:27, col:35> col:35 invalid eckey 'int *'
| |-ParmVarDecl 0x28b8a6aa8a8 <col:42, col:50> col:50 invalid ctx_in 'int *'
| |-ParmVarDecl 0x28b8a6aa930 <col:58, col:67> col:67 invalid kinvp 'int **'
| `-ParmVarDecl 0x28b8a6aa9b8 <line:617:27, col:36> col:36 invalid rp 'int **'
|-FunctionDecl 0x28b8a6e2260 <line:618:1, line:620:71> line:618:5 invalid ossl_ecdsa_sign 'int (int, const unsigned char *, int, unsigned char *, unsigned int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x28b8a6aab40 <col:21, col:25> col:25 type 'int'
| |-ParmVarDecl 0x28b8a6aabc0 <col:31, col:52> col:52 dgst 'const unsigned char *'
| |-ParmVarDecl 0x28b8a6aac40 <col:58, col:62> col:62 dlen 'int'
| |-ParmVarDecl 0x28b8a6aacc0 <line:619:21, col:36> col:36 sig 'unsigned char *'
| |-ParmVarDecl 0x28b8a6e2010 <col:41, col:55> col:55 siglen 'unsigned int *'
| |-ParmVarDecl 0x28b8a6e2090 <line:620:21, col:35> col:35 invalid kinv 'const int *'
| |-ParmVarDecl 0x28b8a6e2110 <col:41, col:55> col:55 invalid r 'const int *'
| `-ParmVarDecl 0x28b8a6e2190 <col:58, col:66> col:66 invalid eckey 'int *'
|-FunctionDecl 0x28b8a6e2610 <line:621:1, line:623:45> line:621:12 invalid ossl_ecdsa_sign_sig 'int *(const unsigned char *, int, const int *, const int *, int *)'
| |-ParmVarDecl 0x28b8a6e2358 <col:32, col:53> col:53 dgst 'const unsigned char *'
| |-ParmVarDecl 0x28b8a6e23d8 <col:59, col:63> col:63 dgst_len 'int'
| |-ParmVarDecl 0x28b8a6e2458 <line:622:32, col:46> col:46 invalid in_kinv 'const int *'
| |-ParmVarDecl 0x28b8a6e24d8 <col:55, col:69> col:69 invalid in_r 'const int *'
| `-ParmVarDecl 0x28b8a6e2558 <line:623:32, col:40> col:40 invalid eckey 'int *'
|-FunctionDecl 0x28b8a6e2a30 <line:624:1, line:625:78> line:624:5 invalid ossl_ecdsa_verify 'int (int, const unsigned char *, int, const unsigned char *, int, int *)'
| |-ParmVarDecl 0x28b8a6e26f0 <col:23, col:27> col:27 type 'int'
| |-ParmVarDecl 0x28b8a6e2770 <col:33, col:54> col:54 dgst 'const unsigned char *'
| |-ParmVarDecl 0x28b8a6e27f0 <col:60, col:64> col:64 dgst_len 'int'
| |-ParmVarDecl 0x28b8a6e2870 <line:625:23, col:44> col:44 sigbuf 'const unsigned char *'
| |-ParmVarDecl 0x28b8a6e28f0 <col:52, col:56> col:56 sig_len 'int'
| `-ParmVarDecl 0x28b8a6e2970 <col:65, col:73> col:73 invalid eckey 'int *'
|-FunctionDecl 0x28b8a6e2d48 <line:626:1, line:627:62> line:626:5 invalid ossl_ecdsa_verify_sig 'int (const unsigned char *, int, const int *, int *)'
| |-ParmVarDecl 0x28b8a6e2b18 <col:27, col:48> col:48 dgst 'const unsigned char *'
| |-ParmVarDecl 0x28b8a6e2b98 <col:54, col:58> col:58 dgst_len 'int'
| |-ParmVarDecl 0x28b8a6e2c18 <line:627:27, col:44> col:44 invalid sig 'const int *'
| `-ParmVarDecl 0x28b8a6e2c98 <col:49, col:57> col:57 invalid eckey 'int *'
|-FunctionDecl 0x28b8a6e3320 <line:629:1, line:630:47> line:629:5 X25519 'int (uint8_t *, const uint8_t *, const uint8_t *)'
| |-ParmVarDecl 0x28b8a6e2f70 <col:12, col:37> col:20 out_shared_key 'uint8_t *':'uint8_t *'
| |-ParmVarDecl 0x28b8a6e30e0 <col:40, col:68> col:54 private_key 'const uint8_t *':'const uint8_t *'
| `-ParmVarDecl 0x28b8a6e31a8 <line:630:12, col:46> col:26 peer_public_value 'const uint8_t *':'const uint8_t *'
|-FunctionDecl 0x28b8a6e3658 <line:631:1, line:632:62> line:631:6 X25519_public_from_private 'void (uint8_t *, const uint8_t *)'
| |-ParmVarDecl 0x28b8a6e3450 <col:33, col:60> col:41 out_public_value 'uint8_t *':'uint8_t *'
| `-ParmVarDecl 0x28b8a6e3518 <line:632:33, col:61> col:47 private_key 'const uint8_t *':'const uint8_t *'
|-FunctionDecl 0x28b8a6e38e0 <line:634:1, col:79> col:5 invalid ec_point_blind_coordinates 'int (const int *, int *, int *)'
| |-ParmVarDecl 0x28b8a6e3738 <col:32, col:48> col:48 invalid group 'const int *'
| |-ParmVarDecl 0x28b8a6e37b8 <col:55, col:65> col:65 invalid p 'int *'
| `-ParmVarDecl 0x28b8a6e3838 <col:68, col:76> col:76 invalid ctx 'int *'
|-TypedefDecl 0x28b8a6e39a8 <.//openssl//file_jk/before\crypto\ec\ecp_nistp256.c:53:1, col:17> col:17 referenced u8 'uint8_t':'unsigned char'
| `-TypedefType 0x28b8a6e2e10 'uint8_t' sugar
|   |-Typedef 0x28b8a5b71f0 'uint8_t'
|   `-BuiltinType 0x28b88b72a50 'unsigned char'
|-TypedefDecl 0x28b8a6e3a30 <line:54:1, col:18> col:18 u32 'uint32_t':'unsigned int'
| `-TypedefType 0x28b8a6e3a00 'uint32_t' sugar
|   |-Typedef 0x28b8a5b72d0 'uint32_t'
|   `-BuiltinType 0x28b88b72a90 'unsigned int'
|-TypedefDecl 0x28b8a6e3ac0 <line:55:1, col:18> col:18 referenced u64 'uint64_t':'unsigned long long'
| `-TypedefType 0x28b8a6e3a90 'uint64_t' sugar
|   |-Typedef 0x28b8a5b7340 'uint64_t'
|   `-BuiltinType 0x28b88b72ad0 'unsigned long long'
|-TypedefDecl 0x28b8a6e3bd8 <line:63:1, col:30> col:12 referenced felem_bytearray 'u8 [32]'
| `-ConstantArrayType 0x28b8a6e3b80 'u8 [32]' 32 
|   `-TypedefType 0x28b8a6e3b20 'u8' sugar
|     |-Typedef 0x28b8a6e39a8 'u8'
|     `-TypedefType 0x28b8a6e2e10 'uint8_t' sugar
|       |-Typedef 0x28b8a5b71f0 'uint8_t'
|       `-BuiltinType 0x28b88b72a50 'unsigned char'
|-VarDecl 0x28b8a6e3d28 <line:69:1, line:90:1> line:69:30 used nistp256_curve_params 'const felem_bytearray [5]' static cinit
| `-InitListExpr 0x28b8a6e5de8 <col:57, line:90:1> 'const felem_bytearray [5]'
|   |-InitListExpr 0x28b8a6e5e60 <line:70:5, line:73:52> 'const felem_bytearray':'u8 const[32]'
|   | |-ImplicitCastExpr 0x28b8a6e5fa0 <line:70:6> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e3d90 <col:6> 'int' 255
|   | |-ImplicitCastExpr 0x28b8a6e5fb8 <col:12> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e3db8 <col:12> 'int' 255
|   | |-ImplicitCastExpr 0x28b8a6e5fd0 <col:18> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e3de0 <col:18> 'int' 255
|   | |-ImplicitCastExpr 0x28b8a6e5fe8 <col:24> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e3e08 <col:24> 'int' 255
|   | |-ImplicitCastExpr 0x28b8a6e6000 <col:30> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e3e30 <col:30> 'int' 0
|   | |-ImplicitCastExpr 0x28b8a6e6030 <col:36> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e3e58 <col:36> 'int' 0
|   | |-ImplicitCastExpr 0x28b8a6e6048 <col:42> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e3e80 <col:42> 'int' 0
|   | |-ImplicitCastExpr 0x28b8a6e6060 <col:48> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e3ea8 <col:48> 'int' 1
|   | |-ImplicitCastExpr 0x28b8a6e6078 <line:71:6> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e3ed0 <col:6> 'int' 0
|   | |-ImplicitCastExpr 0x28b8a6e6090 <col:12> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e3ef8 <col:12> 'int' 0
|   | |-ImplicitCastExpr 0x28b8a6e60a8 <col:18> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e3f20 <col:18> 'int' 0
|   | |-ImplicitCastExpr 0x28b8a6e60c0 <col:24> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e3f48 <col:24> 'int' 0
|   | |-ImplicitCastExpr 0x28b8a6e60d8 <col:30> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e3f70 <col:30> 'int' 0
|   | |-ImplicitCastExpr 0x28b8a6e60f0 <col:36> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e3f98 <col:36> 'int' 0
|   | |-ImplicitCastExpr 0x28b8a6e6108 <col:42> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e3fc0 <col:42> 'int' 0
|   | |-ImplicitCastExpr 0x28b8a6e6120 <col:48> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e3fe8 <col:48> 'int' 0
|   | |-ImplicitCastExpr 0x28b8a6e6138 <line:72:6> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e4020 <col:6> 'int' 0
|   | |-ImplicitCastExpr 0x28b8a6e6150 <col:12> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e4048 <col:12> 'int' 0
|   | |-ImplicitCastExpr 0x28b8a6e6168 <col:18> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e4070 <col:18> 'int' 0
|   | |-ImplicitCastExpr 0x28b8a6e6180 <col:24> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e4098 <col:24> 'int' 0
|   | |-ImplicitCastExpr 0x28b8a6e6198 <col:30> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e40c0 <col:30> 'int' 255
|   | |-ImplicitCastExpr 0x28b8a6e61b0 <col:36> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e40e8 <col:36> 'int' 255
|   | |-ImplicitCastExpr 0x28b8a6e61c8 <col:42> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e4110 <col:42> 'int' 255
|   | |-ImplicitCastExpr 0x28b8a6e61e0 <col:48> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e4138 <col:48> 'int' 255
|   | |-ImplicitCastExpr 0x28b8a6e61f8 <line:73:6> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e4160 <col:6> 'int' 255
|   | |-ImplicitCastExpr 0x28b8a6e6210 <col:12> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e4188 <col:12> 'int' 255
|   | |-ImplicitCastExpr 0x28b8a6e6228 <col:18> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e41b0 <col:18> 'int' 255
|   | |-ImplicitCastExpr 0x28b8a6e6240 <col:24> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e41d8 <col:24> 'int' 255
|   | |-ImplicitCastExpr 0x28b8a6e6258 <col:30> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e4200 <col:30> 'int' 255
|   | |-ImplicitCastExpr 0x28b8a6e6270 <col:36> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e4228 <col:36> 'int' 255
|   | |-ImplicitCastExpr 0x28b8a6e6288 <col:42> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e4250 <col:42> 'int' 255
|   | `-ImplicitCastExpr 0x28b8a6e62a0 <col:48> 'u8':'unsigned char' <IntegralCast>
|   |   `-IntegerLiteral 0x28b8a6e4278 <col:48> 'int' 255
|   |-InitListExpr 0x28b8a6e62c8 <line:74:5, line:77:52> 'const felem_bytearray':'u8 const[32]'
|   | |-ImplicitCastExpr 0x28b8a6e6408 <line:74:6> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e43e0 <col:6> 'int' 255
|   | |-ImplicitCastExpr 0x28b8a6e6420 <col:12> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e4408 <col:12> 'int' 255
|   | |-ImplicitCastExpr 0x28b8a6e6438 <col:18> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e4430 <col:18> 'int' 255
|   | |-ImplicitCastExpr 0x28b8a6e6450 <col:24> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e4458 <col:24> 'int' 255
|   | |-ImplicitCastExpr 0x28b8a6e6468 <col:30> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e4480 <col:30> 'int' 0
|   | |-ImplicitCastExpr 0x28b8a6e6480 <col:36> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e44a8 <col:36> 'int' 0
|   | |-ImplicitCastExpr 0x28b8a6e6498 <col:42> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e44d0 <col:42> 'int' 0
|   | |-ImplicitCastExpr 0x28b8a6e64b0 <col:48> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e44f8 <col:48> 'int' 1
|   | |-ImplicitCastExpr 0x28b8a6e64c8 <line:75:6> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e4520 <col:6> 'int' 0
|   | |-ImplicitCastExpr 0x28b8a6e64e0 <col:12> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e4548 <col:12> 'int' 0
|   | |-ImplicitCastExpr 0x28b8a6e64f8 <col:18> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e4570 <col:18> 'int' 0
|   | |-ImplicitCastExpr 0x28b8a6e6510 <col:24> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e4598 <col:24> 'int' 0
|   | |-ImplicitCastExpr 0x28b8a6e6528 <col:30> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e45c0 <col:30> 'int' 0
|   | |-ImplicitCastExpr 0x28b8a6e6540 <col:36> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e45e8 <col:36> 'int' 0
|   | |-ImplicitCastExpr 0x28b8a6e6558 <col:42> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e4610 <col:42> 'int' 0
|   | |-ImplicitCastExpr 0x28b8a6e6570 <col:48> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e4638 <col:48> 'int' 0
|   | |-ImplicitCastExpr 0x28b8a6e6588 <line:76:6> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e4660 <col:6> 'int' 0
|   | |-ImplicitCastExpr 0x28b8a6e65a0 <col:12> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e4688 <col:12> 'int' 0
|   | |-ImplicitCastExpr 0x28b8a6e65b8 <col:18> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e46b0 <col:18> 'int' 0
|   | |-ImplicitCastExpr 0x28b8a6e65d0 <col:24> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e46d8 <col:24> 'int' 0
|   | |-ImplicitCastExpr 0x28b8a6e65e8 <col:30> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e4700 <col:30> 'int' 255
|   | |-ImplicitCastExpr 0x28b8a6e6600 <col:36> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e4728 <col:36> 'int' 255
|   | |-ImplicitCastExpr 0x28b8a6e6618 <col:42> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e4750 <col:42> 'int' 255
|   | |-ImplicitCastExpr 0x28b8a6e6630 <col:48> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e4778 <col:48> 'int' 255
|   | |-ImplicitCastExpr 0x28b8a6e6648 <line:77:6> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e47a0 <col:6> 'int' 255
|   | |-ImplicitCastExpr 0x28b8a6e6660 <col:12> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e47c8 <col:12> 'int' 255
|   | |-ImplicitCastExpr 0x28b8a6e6678 <col:18> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e47f0 <col:18> 'int' 255
|   | |-ImplicitCastExpr 0x28b8a6e6690 <col:24> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e4818 <col:24> 'int' 255
|   | |-ImplicitCastExpr 0x28b8a6e66a8 <col:30> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e4840 <col:30> 'int' 255
|   | |-ImplicitCastExpr 0x28b8a6e66c0 <col:36> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e4868 <col:36> 'int' 255
|   | |-ImplicitCastExpr 0x28b8a6e66d8 <col:42> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e4890 <col:42> 'int' 255
|   | `-ImplicitCastExpr 0x28b8a6e66f0 <col:48> 'u8':'unsigned char' <IntegralCast>
|   |   `-IntegerLiteral 0x28b8a6e48b8 <col:48> 'int' 252
|   |-InitListExpr 0x28b8a6e6718 <line:78:5, line:81:52> 'const felem_bytearray':'u8 const[32]'
|   | |-ImplicitCastExpr 0x28b8a6e6858 <line:78:6> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e4a20 <col:6> 'int' 90
|   | |-ImplicitCastExpr 0x28b8a6e6870 <col:12> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e4a48 <col:12> 'int' 198
|   | |-ImplicitCastExpr 0x28b8a6e6888 <col:18> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e4a70 <col:18> 'int' 53
|   | |-ImplicitCastExpr 0x28b8a6e68a0 <col:24> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e4a98 <col:24> 'int' 216
|   | |-ImplicitCastExpr 0x28b8a6e68b8 <col:30> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e4ac0 <col:30> 'int' 170
|   | |-ImplicitCastExpr 0x28b8a6e68d0 <col:36> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e4ae8 <col:36> 'int' 58
|   | |-ImplicitCastExpr 0x28b8a6e68e8 <col:42> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e4b10 <col:42> 'int' 147
|   | |-ImplicitCastExpr 0x28b8a6e6900 <col:48> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e4b38 <col:48> 'int' 231
|   | |-ImplicitCastExpr 0x28b8a6e6918 <line:79:6> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e4b60 <col:6> 'int' 179
|   | |-ImplicitCastExpr 0x28b8a6e6930 <col:12> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e4b88 <col:12> 'int' 235
|   | |-ImplicitCastExpr 0x28b8a6e6948 <col:18> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e4bb0 <col:18> 'int' 189
|   | |-ImplicitCastExpr 0x28b8a6e6960 <col:24> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e4bd8 <col:24> 'int' 85
|   | |-ImplicitCastExpr 0x28b8a6e6978 <col:30> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e4c00 <col:30> 'int' 118
|   | |-ImplicitCastExpr 0x28b8a6e6990 <col:36> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e4c28 <col:36> 'int' 152
|   | |-ImplicitCastExpr 0x28b8a6e69a8 <col:42> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e4c50 <col:42> 'int' 134
|   | |-ImplicitCastExpr 0x28b8a6e69c0 <col:48> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e4c78 <col:48> 'int' 188
|   | |-ImplicitCastExpr 0x28b8a6e69d8 <line:80:6> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e4ca0 <col:6> 'int' 101
|   | |-ImplicitCastExpr 0x28b8a6e69f0 <col:12> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e4cc8 <col:12> 'int' 29
|   | |-ImplicitCastExpr 0x28b8a6e6a08 <col:18> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e4cf0 <col:18> 'int' 6
|   | |-ImplicitCastExpr 0x28b8a6e6a20 <col:24> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e4d18 <col:24> 'int' 176
|   | |-ImplicitCastExpr 0x28b8a6e6a38 <col:30> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e4d40 <col:30> 'int' 204
|   | |-ImplicitCastExpr 0x28b8a6e6a50 <col:36> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e4d68 <col:36> 'int' 83
|   | |-ImplicitCastExpr 0x28b8a6e6a68 <col:42> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e4d90 <col:42> 'int' 176
|   | |-ImplicitCastExpr 0x28b8a6e6a80 <col:48> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e4db8 <col:48> 'int' 246
|   | |-ImplicitCastExpr 0x28b8a6e6a98 <line:81:6> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e4de0 <col:6> 'int' 59
|   | |-ImplicitCastExpr 0x28b8a6e6ab0 <col:12> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e4e08 <col:12> 'int' 206
|   | |-ImplicitCastExpr 0x28b8a6e6ac8 <col:18> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e4e30 <col:18> 'int' 60
|   | |-ImplicitCastExpr 0x28b8a6e6ae0 <col:24> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e4e58 <col:24> 'int' 62
|   | |-ImplicitCastExpr 0x28b8a6e6af8 <col:30> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e4e80 <col:30> 'int' 39
|   | |-ImplicitCastExpr 0x28b8a6e6b10 <col:36> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e4ea8 <col:36> 'int' 210
|   | |-ImplicitCastExpr 0x28b8a6e6b28 <col:42> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e4ed0 <col:42> 'int' 96
|   | `-ImplicitCastExpr 0x28b8a6e6b40 <col:48> 'u8':'unsigned char' <IntegralCast>
|   |   `-IntegerLiteral 0x28b8a6e4ef8 <col:48> 'int' 75
|   |-InitListExpr 0x28b8a6e6b68 <line:82:5, line:85:52> 'const felem_bytearray':'u8 const[32]'
|   | |-ImplicitCastExpr 0x28b8a6e6ca8 <line:82:6> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e5060 <col:6> 'int' 107
|   | |-ImplicitCastExpr 0x28b8a6e6cc0 <col:12> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e5088 <col:12> 'int' 23
|   | |-ImplicitCastExpr 0x28b8a6e6cd8 <col:18> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e50b0 <col:18> 'int' 209
|   | |-ImplicitCastExpr 0x28b8a6e6cf0 <col:24> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e50d8 <col:24> 'int' 242
|   | |-ImplicitCastExpr 0x28b8a6e6d08 <col:30> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e5100 <col:30> 'int' 225
|   | |-ImplicitCastExpr 0x28b8a6e6d20 <col:36> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e5128 <col:36> 'int' 44
|   | |-ImplicitCastExpr 0x28b8a6e6d38 <col:42> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e5150 <col:42> 'int' 66
|   | |-ImplicitCastExpr 0x28b8a6e6d50 <col:48> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e5178 <col:48> 'int' 71
|   | |-ImplicitCastExpr 0x28b8a6e6d68 <line:83:6> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e51a0 <col:6> 'int' 248
|   | |-ImplicitCastExpr 0x28b8a6e6d80 <col:12> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e51c8 <col:12> 'int' 188
|   | |-ImplicitCastExpr 0x28b8a6e6d98 <col:18> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e51f0 <col:18> 'int' 230
|   | |-ImplicitCastExpr 0x28b8a6e6db0 <col:24> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e5218 <col:24> 'int' 229
|   | |-ImplicitCastExpr 0x28b8a6e6dc8 <col:30> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e5240 <col:30> 'int' 99
|   | |-ImplicitCastExpr 0x28b8a6e6de0 <col:36> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e5268 <col:36> 'int' 164
|   | |-ImplicitCastExpr 0x28b8a6e6df8 <col:42> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e5290 <col:42> 'int' 64
|   | |-ImplicitCastExpr 0x28b8a6e6e10 <col:48> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e52b8 <col:48> 'int' 242
|   | |-ImplicitCastExpr 0x28b8a6e6e28 <line:84:6> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e52e0 <col:6> 'int' 119
|   | |-ImplicitCastExpr 0x28b8a6e6e40 <col:12> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e5308 <col:12> 'int' 3
|   | |-ImplicitCastExpr 0x28b8a6e6e58 <col:18> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e5330 <col:18> 'int' 125
|   | |-ImplicitCastExpr 0x28b8a6e6e70 <col:24> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e5358 <col:24> 'int' 129
|   | |-ImplicitCastExpr 0x28b8a6e6e88 <col:30> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e5380 <col:30> 'int' 45
|   | |-ImplicitCastExpr 0x28b8a6e6ea0 <col:36> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e53a8 <col:36> 'int' 235
|   | |-ImplicitCastExpr 0x28b8a6e6eb8 <col:42> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e53d0 <col:42> 'int' 51
|   | |-ImplicitCastExpr 0x28b8a6e6ed0 <col:48> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e53f8 <col:48> 'int' 160
|   | |-ImplicitCastExpr 0x28b8a6e6ee8 <line:85:6> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e5420 <col:6> 'int' 244
|   | |-ImplicitCastExpr 0x28b8a6e6f00 <col:12> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e5448 <col:12> 'int' 161
|   | |-ImplicitCastExpr 0x28b8a6e6f18 <col:18> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e5470 <col:18> 'int' 57
|   | |-ImplicitCastExpr 0x28b8a6e6f30 <col:24> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e5498 <col:24> 'int' 69
|   | |-ImplicitCastExpr 0x28b8a6e6f48 <col:30> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e54c0 <col:30> 'int' 216
|   | |-ImplicitCastExpr 0x28b8a6e6f60 <col:36> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e54e8 <col:36> 'int' 152
|   | |-ImplicitCastExpr 0x28b8a6e6f78 <col:42> 'u8':'unsigned char' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a6e5510 <col:42> 'int' 194
|   | `-ImplicitCastExpr 0x28b8a6e6f90 <col:48> 'u8':'unsigned char' <IntegralCast>
|   |   `-IntegerLiteral 0x28b8a6e5538 <col:48> 'int' 150
|   `-InitListExpr 0x28b8a6e6fb8 <line:86:5, line:89:52> 'const felem_bytearray':'u8 const[32]'
|     |-ImplicitCastExpr 0x28b8a6e70f8 <line:86:6> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x28b8a6e56a0 <col:6> 'int' 79
|     |-ImplicitCastExpr 0x28b8a6e7110 <col:12> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x28b8a6e56c8 <col:12> 'int' 227
|     |-ImplicitCastExpr 0x28b8a6e7128 <col:18> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x28b8a6e56f0 <col:18> 'int' 66
|     |-ImplicitCastExpr 0x28b8a6e7140 <col:24> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x28b8a6e5718 <col:24> 'int' 226
|     |-ImplicitCastExpr 0x28b8a6e7158 <col:30> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x28b8a6e5740 <col:30> 'int' 254
|     |-ImplicitCastExpr 0x28b8a6e7170 <col:36> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x28b8a6e5768 <col:36> 'int' 26
|     |-ImplicitCastExpr 0x28b8a6e7188 <col:42> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x28b8a6e5790 <col:42> 'int' 127
|     |-ImplicitCastExpr 0x28b8a6e71a0 <col:48> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x28b8a6e57b8 <col:48> 'int' 155
|     |-ImplicitCastExpr 0x28b8a6e71b8 <line:87:6> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x28b8a6e57e0 <col:6> 'int' 142
|     |-ImplicitCastExpr 0x28b8a6e71d0 <col:12> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x28b8a6e5808 <col:12> 'int' 231
|     |-ImplicitCastExpr 0x28b8a6e71e8 <col:18> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x28b8a6e5830 <col:18> 'int' 235
|     |-ImplicitCastExpr 0x28b8a6e7200 <col:24> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x28b8a6e5858 <col:24> 'int' 74
|     |-ImplicitCastExpr 0x28b8a6e7218 <col:30> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x28b8a6e5880 <col:30> 'int' 124
|     |-ImplicitCastExpr 0x28b8a6e7230 <col:36> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x28b8a6e58a8 <col:36> 'int' 15
|     |-ImplicitCastExpr 0x28b8a6e7248 <col:42> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x28b8a6e58d0 <col:42> 'int' 158
|     |-ImplicitCastExpr 0x28b8a6e7260 <col:48> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x28b8a6e58f8 <col:48> 'int' 22
|     |-ImplicitCastExpr 0x28b8a6e7278 <line:88:6> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x28b8a6e5920 <col:6> 'int' 43
|     |-ImplicitCastExpr 0x28b8a6e7290 <col:12> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x28b8a6e5948 <col:12> 'int' 206
|     |-ImplicitCastExpr 0x28b8a6e72a8 <col:18> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x28b8a6e5970 <col:18> 'int' 51
|     |-ImplicitCastExpr 0x28b8a6e72c0 <col:24> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x28b8a6e5998 <col:24> 'int' 87
|     |-ImplicitCastExpr 0x28b8a6e72d8 <col:30> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x28b8a6e59c0 <col:30> 'int' 107
|     |-ImplicitCastExpr 0x28b8a6e72f0 <col:36> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x28b8a6e59e8 <col:36> 'int' 49
|     |-ImplicitCastExpr 0x28b8a6e7308 <col:42> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x28b8a6e5a10 <col:42> 'int' 94
|     |-ImplicitCastExpr 0x28b8a6e7320 <col:48> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x28b8a6e5a38 <col:48> 'int' 206
|     |-ImplicitCastExpr 0x28b8a6e7338 <line:89:6> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x28b8a6e5a60 <col:6> 'int' 203
|     |-ImplicitCastExpr 0x28b8a6e7350 <col:12> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x28b8a6e5a88 <col:12> 'int' 182
|     |-ImplicitCastExpr 0x28b8a6e7368 <col:18> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x28b8a6e5ab0 <col:18> 'int' 64
|     |-ImplicitCastExpr 0x28b8a6e7380 <col:24> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x28b8a6e5ad8 <col:24> 'int' 104
|     |-ImplicitCastExpr 0x28b8a6e7398 <col:30> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x28b8a6e5b00 <col:30> 'int' 55
|     |-ImplicitCastExpr 0x28b8a6e73b0 <col:36> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x28b8a6e5b28 <col:36> 'int' 191
|     |-ImplicitCastExpr 0x28b8a6e73c8 <col:42> 'u8':'unsigned char' <IntegralCast>
|     | `-IntegerLiteral 0x28b8a6e5b50 <col:42> 'int' 81
|     `-ImplicitCastExpr 0x28b8a6e73e0 <col:48> 'u8':'unsigned char' <IntegralCast>
|       `-IntegerLiteral 0x28b8a6e5b78 <col:48> 'int' 245
|-TypedefDecl 0x28b8a6e7410 <line:115:1, col:19> col:19 referenced invalid limb 'int'
| `-BuiltinType 0x28b88b729f0 'int'
|-TypedefDecl 0x28b8a6e7568 <line:116:1, col:26> col:14 referenced felem 'limb [4]'
| `-ConstantArrayType 0x28b8a6e7510 'limb [4]' 4 
|   `-TypedefType 0x28b8a6e7470 'limb' sugar
|     |-Typedef 0x28b8a6e7410 'limb'
|     `-BuiltinType 0x28b88b729f0 'int'
|-TypedefDecl 0x28b8a6e76e8 <line:117:1, col:34> col:14 referenced longfelem 'limb [8]'
| `-ConstantArrayType 0x28b8a6e7690 'limb [8]' 8 
|   `-TypedefType 0x28b8a6e7470 'limb' sugar
|     |-Typedef 0x28b8a6e7410 'limb'
|     `-BuiltinType 0x28b88b729f0 'int'
|-TypedefDecl 0x28b8a6e7838 <line:118:1, col:30> col:13 referenced smallfelem 'u64 [4]'
| `-ConstantArrayType 0x28b8a6e77e0 'u64 [4]' 4 
|   `-TypedefType 0x28b8a6e7740 'u64' sugar
|     |-Typedef 0x28b8a6e3ac0 'u64'
|     `-TypedefType 0x28b8a6e3a90 'uint64_t' sugar
|       |-Typedef 0x28b8a5b7340 'uint64_t'
|       `-BuiltinType 0x28b88b72ad0 'unsigned long long'
|-VarDecl 0x28b8a6e7928 <line:121:1, line:122:65> line:121:18 used kPrime 'const u64 [4]' static cinit
| `-InitListExpr 0x28b8a6e7ab8 <line:122:5, col:65> 'const u64 [4]'
|   |-IntegerLiteral 0x28b8a6e7990 <col:7> 'unsigned long long' 18446744073709551615
|   |-ImplicitCastExpr 0x28b8a6e7b18 <col:29> 'u64':'unsigned long long' <IntegralCast>
|   | `-IntegerLiteral 0x28b8a6e79b8 <col:29> 'unsigned int' 4294967295
|   |-ImplicitCastExpr 0x28b8a6e7b30 <col:41> 'u64':'unsigned long long' <IntegralCast>
|   | `-IntegerLiteral 0x28b8a6e79e0 <col:41> 'int' 0
|   `-IntegerLiteral 0x28b8a6e7a08 <col:44> 'unsigned long long' 18446744069414584321
|-VarDecl 0x28b8a6e7b58 <line:123:1, col:33> col:18 used bottom63bits 'const u64':'const unsigned long long' static cinit
| `-IntegerLiteral 0x28b8a6e7bc0 <col:33> 'unsigned long long' 9223372036854775807
|-FunctionDecl 0x28b8a6e7f08 <line:129:1, line:135:1> line:129:13 used bin32_to_felem 'void (limb *, const u8 *)' static
| |-ParmVarDecl 0x28b8a6e7c90 <col:28, col:34> col:34 used out 'limb *':'limb *'
| |-ParmVarDecl 0x28b8a6e7dc0 <col:39, col:53> col:48 used in 'const u8 *':'const u8 *'
| `-CompoundStmt 0x28b8a6e8770 <line:130:1, line:135:1>
|   |-BinaryOperator 0x28b8a6e81c8 <line:131:5, col:29> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x28b8a6e8040 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a6e8018 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a6e7fd0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a6e7c90 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a6e7ff0 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x28b8a6e81b0 <col:14, col:29> 'limb':'int' <IntegralCast>
|   |   `-ImplicitCastExpr 0x28b8a6e8198 <col:14, col:29> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-UnaryOperator 0x28b8a6e8180 <col:14, col:29> 'u64':'unsigned long long' lvalue prefix '*' cannot overflow
|   |       `-ParenExpr 0x28b8a6e8160 <col:15, col:29> 'u64 *'
|   |         `-CStyleCastExpr 0x28b8a6e8138 <col:16, col:28> 'u64 *' <BitCast>
|   |           `-UnaryOperator 0x28b8a6e80e0 <col:23, col:28> 'const u8 *' prefix '&' cannot overflow
|   |             `-ArraySubscriptExpr 0x28b8a6e80c0 <col:24, col:28> 'const u8':'const unsigned char' lvalue
|   |               |-ImplicitCastExpr 0x28b8a6e80a8 <col:24> 'const u8 *':'const u8 *' <LValueToRValue>
|   |               | `-DeclRefExpr 0x28b8a6e8060 <col:24> 'const u8 *':'const u8 *' lvalue ParmVar 0x28b8a6e7dc0 'in' 'const u8 *':'const u8 *'
|   |               `-IntegerLiteral 0x28b8a6e8080 <col:27> 'int' 0
|   |-BinaryOperator 0x28b8a6e83a0 <line:132:5, col:29> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x28b8a6e8248 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a6e8230 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a6e81e8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a6e7c90 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a6e8208 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x28b8a6e8388 <col:14, col:29> 'limb':'int' <IntegralCast>
|   |   `-ImplicitCastExpr 0x28b8a6e8370 <col:14, col:29> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-UnaryOperator 0x28b8a6e8358 <col:14, col:29> 'u64':'unsigned long long' lvalue prefix '*' cannot overflow
|   |       `-ParenExpr 0x28b8a6e8338 <col:15, col:29> 'u64 *'
|   |         `-CStyleCastExpr 0x28b8a6e8310 <col:16, col:28> 'u64 *' <BitCast>
|   |           `-UnaryOperator 0x28b8a6e82e8 <col:23, col:28> 'const u8 *' prefix '&' cannot overflow
|   |             `-ArraySubscriptExpr 0x28b8a6e82c8 <col:24, col:28> 'const u8':'const unsigned char' lvalue
|   |               |-ImplicitCastExpr 0x28b8a6e82b0 <col:24> 'const u8 *':'const u8 *' <LValueToRValue>
|   |               | `-DeclRefExpr 0x28b8a6e8268 <col:24> 'const u8 *':'const u8 *' lvalue ParmVar 0x28b8a6e7dc0 'in' 'const u8 *':'const u8 *'
|   |               `-IntegerLiteral 0x28b8a6e8288 <col:27> 'int' 8
|   |-BinaryOperator 0x28b8a6e8578 <line:133:5, col:30> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x28b8a6e8420 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a6e8408 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a6e83c0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a6e7c90 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a6e83e0 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x28b8a6e8560 <col:14, col:30> 'limb':'int' <IntegralCast>
|   |   `-ImplicitCastExpr 0x28b8a6e8548 <col:14, col:30> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-UnaryOperator 0x28b8a6e8530 <col:14, col:30> 'u64':'unsigned long long' lvalue prefix '*' cannot overflow
|   |       `-ParenExpr 0x28b8a6e8510 <col:15, col:30> 'u64 *'
|   |         `-CStyleCastExpr 0x28b8a6e84e8 <col:16, col:29> 'u64 *' <BitCast>
|   |           `-UnaryOperator 0x28b8a6e84c0 <col:23, col:29> 'const u8 *' prefix '&' cannot overflow
|   |             `-ArraySubscriptExpr 0x28b8a6e84a0 <col:24, col:29> 'const u8':'const unsigned char' lvalue
|   |               |-ImplicitCastExpr 0x28b8a6e8488 <col:24> 'const u8 *':'const u8 *' <LValueToRValue>
|   |               | `-DeclRefExpr 0x28b8a6e8440 <col:24> 'const u8 *':'const u8 *' lvalue ParmVar 0x28b8a6e7dc0 'in' 'const u8 *':'const u8 *'
|   |               `-IntegerLiteral 0x28b8a6e8460 <col:27> 'int' 16
|   `-BinaryOperator 0x28b8a6e8750 <line:134:5, col:30> 'limb':'int' '='
|     |-ArraySubscriptExpr 0x28b8a6e85f8 <col:5, col:10> 'limb':'int' lvalue
|     | |-ImplicitCastExpr 0x28b8a6e85e0 <col:5> 'limb *':'limb *' <LValueToRValue>
|     | | `-DeclRefExpr 0x28b8a6e8598 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a6e7c90 'out' 'limb *':'limb *'
|     | `-IntegerLiteral 0x28b8a6e85b8 <col:9> 'int' 3
|     `-ImplicitCastExpr 0x28b8a6e8738 <col:14, col:30> 'limb':'int' <IntegralCast>
|       `-ImplicitCastExpr 0x28b8a6e8720 <col:14, col:30> 'u64':'unsigned long long' <LValueToRValue>
|         `-UnaryOperator 0x28b8a6e8708 <col:14, col:30> 'u64':'unsigned long long' lvalue prefix '*' cannot overflow
|           `-ParenExpr 0x28b8a6e86e8 <col:15, col:30> 'u64 *'
|             `-CStyleCastExpr 0x28b8a6e86c0 <col:16, col:29> 'u64 *' <BitCast>
|               `-UnaryOperator 0x28b8a6e8698 <col:23, col:29> 'const u8 *' prefix '&' cannot overflow
|                 `-ArraySubscriptExpr 0x28b8a6e8678 <col:24, col:29> 'const u8':'const unsigned char' lvalue
|                   |-ImplicitCastExpr 0x28b8a6e8660 <col:24> 'const u8 *':'const u8 *' <LValueToRValue>
|                   | `-DeclRefExpr 0x28b8a6e8618 <col:24> 'const u8 *':'const u8 *' lvalue ParmVar 0x28b8a6e7dc0 'in' 'const u8 *':'const u8 *'
|                   `-IntegerLiteral 0x28b8a6e8638 <col:27> 'int' 24
|-FunctionDecl 0x28b8a6e8ad8 <line:141:1, line:147:1> line:141:13 used smallfelem_to_bin32 'void (u8 *, const u64 *)' static
| |-ParmVarDecl 0x28b8a6e8860 <col:33, col:42> col:36 used out 'u8 *':'u8 *'
| |-ParmVarDecl 0x28b8a6e8990 <col:45, col:62> col:62 used in 'const u64 *':'const u64 *'
| `-CompoundStmt 0x28b8a6e92a0 <line:142:1, line:147:1>
|   |-BinaryOperator 0x28b8a6e8d40 <line:143:5, col:29> 'u64':'unsigned long long' '='
|   | |-UnaryOperator 0x28b8a6e8c90 <col:5, col:21> 'u64':'unsigned long long' lvalue prefix '*' cannot overflow
|   | | `-ParenExpr 0x28b8a6e8c70 <col:6, col:21> 'u64 *'
|   | |   `-CStyleCastExpr 0x28b8a6e8c48 <col:7, col:20> 'u64 *' <BitCast>
|   | |     `-UnaryOperator 0x28b8a6e8c20 <col:14, col:20> 'u8 *' prefix '&' cannot overflow
|   | |       `-ArraySubscriptExpr 0x28b8a6e8c00 <col:15, col:20> 'u8':'unsigned char' lvalue
|   | |         |-ImplicitCastExpr 0x28b8a6e8be8 <col:15> 'u8 *':'u8 *' <LValueToRValue>
|   | |         | `-DeclRefExpr 0x28b8a6e8ba0 <col:15> 'u8 *':'u8 *' lvalue ParmVar 0x28b8a6e8860 'out' 'u8 *':'u8 *'
|   | |         `-IntegerLiteral 0x28b8a6e8bc0 <col:19> 'int' 0
|   | `-ImplicitCastExpr 0x28b8a6e8d28 <col:25, col:29> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x28b8a6e8d08 <col:25, col:29> 'const u64':'const unsigned long long' lvalue
|   |     |-ImplicitCastExpr 0x28b8a6e8cf0 <col:25> 'const u64 *':'const u64 *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x28b8a6e8ca8 <col:25> 'const u64 *':'const u64 *' lvalue ParmVar 0x28b8a6e8990 'in' 'const u64 *':'const u64 *'
|   |     `-IntegerLiteral 0x28b8a6e8cc8 <col:28> 'int' 0
|   |-BinaryOperator 0x28b8a6e8f00 <line:144:5, col:29> 'u64':'unsigned long long' '='
|   | |-UnaryOperator 0x28b8a6e8e50 <col:5, col:21> 'u64':'unsigned long long' lvalue prefix '*' cannot overflow
|   | | `-ParenExpr 0x28b8a6e8e30 <col:6, col:21> 'u64 *'
|   | |   `-CStyleCastExpr 0x28b8a6e8e08 <col:7, col:20> 'u64 *' <BitCast>
|   | |     `-UnaryOperator 0x28b8a6e8de0 <col:14, col:20> 'u8 *' prefix '&' cannot overflow
|   | |       `-ArraySubscriptExpr 0x28b8a6e8dc0 <col:15, col:20> 'u8':'unsigned char' lvalue
|   | |         |-ImplicitCastExpr 0x28b8a6e8da8 <col:15> 'u8 *':'u8 *' <LValueToRValue>
|   | |         | `-DeclRefExpr 0x28b8a6e8d60 <col:15> 'u8 *':'u8 *' lvalue ParmVar 0x28b8a6e8860 'out' 'u8 *':'u8 *'
|   | |         `-IntegerLiteral 0x28b8a6e8d80 <col:19> 'int' 8
|   | `-ImplicitCastExpr 0x28b8a6e8ee8 <col:25, col:29> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x28b8a6e8ec8 <col:25, col:29> 'const u64':'const unsigned long long' lvalue
|   |     |-ImplicitCastExpr 0x28b8a6e8eb0 <col:25> 'const u64 *':'const u64 *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x28b8a6e8e68 <col:25> 'const u64 *':'const u64 *' lvalue ParmVar 0x28b8a6e8990 'in' 'const u64 *':'const u64 *'
|   |     `-IntegerLiteral 0x28b8a6e8e88 <col:28> 'int' 1
|   |-BinaryOperator 0x28b8a6e90c0 <line:145:5, col:30> 'u64':'unsigned long long' '='
|   | |-UnaryOperator 0x28b8a6e9010 <col:5, col:22> 'u64':'unsigned long long' lvalue prefix '*' cannot overflow
|   | | `-ParenExpr 0x28b8a6e8ff0 <col:6, col:22> 'u64 *'
|   | |   `-CStyleCastExpr 0x28b8a6e8fc8 <col:7, col:21> 'u64 *' <BitCast>
|   | |     `-UnaryOperator 0x28b8a6e8fa0 <col:14, col:21> 'u8 *' prefix '&' cannot overflow
|   | |       `-ArraySubscriptExpr 0x28b8a6e8f80 <col:15, col:21> 'u8':'unsigned char' lvalue
|   | |         |-ImplicitCastExpr 0x28b8a6e8f68 <col:15> 'u8 *':'u8 *' <LValueToRValue>
|   | |         | `-DeclRefExpr 0x28b8a6e8f20 <col:15> 'u8 *':'u8 *' lvalue ParmVar 0x28b8a6e8860 'out' 'u8 *':'u8 *'
|   | |         `-IntegerLiteral 0x28b8a6e8f40 <col:19> 'int' 16
|   | `-ImplicitCastExpr 0x28b8a6e90a8 <col:26, col:30> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x28b8a6e9088 <col:26, col:30> 'const u64':'const unsigned long long' lvalue
|   |     |-ImplicitCastExpr 0x28b8a6e9070 <col:26> 'const u64 *':'const u64 *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x28b8a6e9028 <col:26> 'const u64 *':'const u64 *' lvalue ParmVar 0x28b8a6e8990 'in' 'const u64 *':'const u64 *'
|   |     `-IntegerLiteral 0x28b8a6e9048 <col:29> 'int' 2
|   `-BinaryOperator 0x28b8a6e9280 <line:146:5, col:30> 'u64':'unsigned long long' '='
|     |-UnaryOperator 0x28b8a6e91d0 <col:5, col:22> 'u64':'unsigned long long' lvalue prefix '*' cannot overflow
|     | `-ParenExpr 0x28b8a6e91b0 <col:6, col:22> 'u64 *'
|     |   `-CStyleCastExpr 0x28b8a6e9188 <col:7, col:21> 'u64 *' <BitCast>
|     |     `-UnaryOperator 0x28b8a6e9160 <col:14, col:21> 'u8 *' prefix '&' cannot overflow
|     |       `-ArraySubscriptExpr 0x28b8a6e9140 <col:15, col:21> 'u8':'unsigned char' lvalue
|     |         |-ImplicitCastExpr 0x28b8a6e9128 <col:15> 'u8 *':'u8 *' <LValueToRValue>
|     |         | `-DeclRefExpr 0x28b8a6e90e0 <col:15> 'u8 *':'u8 *' lvalue ParmVar 0x28b8a6e8860 'out' 'u8 *':'u8 *'
|     |         `-IntegerLiteral 0x28b8a6e9100 <col:19> 'int' 24
|     `-ImplicitCastExpr 0x28b8a6e9268 <col:26, col:30> 'u64':'unsigned long long' <LValueToRValue>
|       `-ArraySubscriptExpr 0x28b8a6e9248 <col:26, col:30> 'const u64':'const unsigned long long' lvalue
|         |-ImplicitCastExpr 0x28b8a6e9230 <col:26> 'const u64 *':'const u64 *' <LValueToRValue>
|         | `-DeclRefExpr 0x28b8a6e91e8 <col:26> 'const u64 *':'const u64 *' lvalue ParmVar 0x28b8a6e8990 'in' 'const u64 *':'const u64 *'
|         `-IntegerLiteral 0x28b8a6e9208 <col:29> 'int' 3
|-FunctionDecl 0x28b8a6e9548 <line:150:1, line:155:1> line:150:13 used flip_endian 'void (u8 *, const u8 *, unsigned int)' static
| |-ParmVarDecl 0x28b8a6e92e0 <col:25, col:29> col:29 used out 'u8 *'
| |-ParmVarDecl 0x28b8a6e9358 <col:34, col:44> col:44 used in 'const u8 *'
| |-ParmVarDecl 0x28b8a6e93d8 <col:48, col:57> col:57 used len 'unsigned int'
| `-CompoundStmt 0x28b8a6e9a58 <line:151:1, line:155:1>
|   |-DeclStmt 0x28b8a6e9698 <line:152:5, col:15>
|   | `-VarDecl 0x28b8a6e9630 <col:5, col:14> col:14 used i 'unsigned int'
|   `-ForStmt 0x28b8a6e9a20 <line:153:5, line:154:32>
|     |-BinaryOperator 0x28b8a6e9728 <line:153:10, col:14> 'unsigned int' '='
|     | |-DeclRefExpr 0x28b8a6e96b0 <col:10> 'unsigned int' lvalue Var 0x28b8a6e9630 'i' 'unsigned int'
|     | `-ImplicitCastExpr 0x28b8a6e9710 <col:14> 'unsigned int' <IntegralCast>
|     |   `-IntegerLiteral 0x28b8a6e96e8 <col:14> 'int' 0
|     |-<<<NULL>>>
|     |-BinaryOperator 0x28b8a6e97b8 <col:17, col:21> 'int' '<'
|     | |-ImplicitCastExpr 0x28b8a6e9788 <col:17> 'unsigned int' <LValueToRValue>
|     | | `-DeclRefExpr 0x28b8a6e9748 <col:17> 'unsigned int' lvalue Var 0x28b8a6e9630 'i' 'unsigned int'
|     | `-ImplicitCastExpr 0x28b8a6e97a0 <col:21> 'unsigned int' <LValueToRValue>
|     |   `-DeclRefExpr 0x28b8a6e9768 <col:21> 'unsigned int' lvalue ParmVar 0x28b8a6e93d8 'len' 'unsigned int'
|     |-UnaryOperator 0x28b8a6e97f8 <col:26, col:28> 'unsigned int' prefix '++'
|     | `-DeclRefExpr 0x28b8a6e97d8 <col:28> 'unsigned int' lvalue Var 0x28b8a6e9630 'i' 'unsigned int'
|     `-BinaryOperator 0x28b8a6e9a00 <line:154:9, col:32> 'u8':'unsigned char' '='
|       |-ArraySubscriptExpr 0x28b8a6e9880 <col:9, col:14> 'u8':'unsigned char' lvalue
|       | |-ImplicitCastExpr 0x28b8a6e9850 <col:9> 'u8 *' <LValueToRValue>
|       | | `-DeclRefExpr 0x28b8a6e9810 <col:9> 'u8 *' lvalue ParmVar 0x28b8a6e92e0 'out' 'u8 *'
|       | `-ImplicitCastExpr 0x28b8a6e9868 <col:13> 'unsigned int' <LValueToRValue>
|       |   `-DeclRefExpr 0x28b8a6e9830 <col:13> 'unsigned int' lvalue Var 0x28b8a6e9630 'i' 'unsigned int'
|       `-ImplicitCastExpr 0x28b8a6e99e8 <col:18, col:32> 'u8':'unsigned char' <LValueToRValue>
|         `-ArraySubscriptExpr 0x28b8a6e99c8 <col:18, col:32> 'const u8':'const unsigned char' lvalue
|           |-ImplicitCastExpr 0x28b8a6e99b0 <col:18> 'const u8 *' <LValueToRValue>
|           | `-DeclRefExpr 0x28b8a6e98a0 <col:18> 'const u8 *' lvalue ParmVar 0x28b8a6e9358 'in' 'const u8 *'
|           `-BinaryOperator 0x28b8a6e9990 <col:21, col:31> 'unsigned int' '-'
|             |-BinaryOperator 0x28b8a6e9938 <col:21, col:27> 'unsigned int' '-'
|             | |-ImplicitCastExpr 0x28b8a6e9908 <col:21> 'unsigned int' <LValueToRValue>
|             | | `-DeclRefExpr 0x28b8a6e98c0 <col:21> 'unsigned int' lvalue ParmVar 0x28b8a6e93d8 'len' 'unsigned int'
|             | `-ImplicitCastExpr 0x28b8a6e9920 <col:27> 'unsigned int' <IntegralCast>
|             |   `-IntegerLiteral 0x28b8a6e98e0 <col:27> 'int' 1
|             `-ImplicitCastExpr 0x28b8a6e9978 <col:31> 'unsigned int' <LValueToRValue>
|               `-DeclRefExpr 0x28b8a6e9958 <col:31> 'unsigned int' lvalue Var 0x28b8a6e9630 'i' 'unsigned int'
|-FunctionDecl 0x28b8a6e9be0 <line:158:1, line:179:1> line:158:12 invalid BN_to_felem 'int (limb *, const int *)' static
| |-ParmVarDecl 0x28b8a6e9a88 <col:24, col:30> col:30 used out 'limb *':'limb *'
| |-ParmVarDecl 0x28b8a6e9b08 <col:35, col:49> col:49 invalid bn 'const int *'
| `-CompoundStmt 0x28b8a5f1960 <line:159:1, line:179:1>
|   |-DeclStmt 0x28b8a6e9d20 <line:160:5, col:25>
|   | `-VarDecl 0x28b8a6e9cb8 <col:5, col:21> col:21 used b_in 'felem_bytearray':'u8 [32]'
|   |-DeclStmt 0x28b8a6e9db0 <line:161:5, col:26>
|   | `-VarDecl 0x28b8a6e9d48 <col:5, col:21> col:21 used b_out 'felem_bytearray':'u8 [32]'
|   |-DeclStmt 0x28b8a6e9e48 <line:162:5, col:23>
|   | `-VarDecl 0x28b8a6e9de0 <col:5, col:14> col:14 used num_bytes 'unsigned int'
|   |-CallExpr 0x28b8a6e9fa0 <line:165:5, col:35> 'void *'
|   | |-ImplicitCastExpr 0x28b8a6e9f88 <col:5> 'void *(*)(void *, int, unsigned long long)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6e9e60 <col:5> 'void *(void *, int, unsigned long long)' Function 0x28b8a5c2320 'memset' 'void *(void *, int, unsigned long long)'
|   | |-ImplicitCastExpr 0x28b8a6e9ff0 <col:12> 'void *' <BitCast>
|   | | `-ImplicitCastExpr 0x28b8a6e9fd8 <col:12> 'u8 *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x28b8a6e9e80 <col:12> 'felem_bytearray':'u8 [32]' lvalue Var 0x28b8a6e9d48 'b_out' 'felem_bytearray':'u8 [32]'
|   | |-IntegerLiteral 0x28b8a6e9eb8 <col:19> 'int' 0
|   | `-UnaryExprOrTypeTraitExpr 0x28b8a6e9f20 <col:22, col:34> 'unsigned long long' sizeof
|   |   `-ParenExpr 0x28b8a6e9f00 <col:28, col:34> 'felem_bytearray':'u8 [32]' lvalue
|   |     `-DeclRefExpr 0x28b8a6e9ee0 <col:29> 'felem_bytearray':'u8 [32]' lvalue Var 0x28b8a6e9d48 'b_out' 'felem_bytearray':'u8 [32]' non_odr_use_unevaluated
|   |-IfStmt 0x28b8a5f1308 <line:167:5, line:170:5>
|   | |-BinaryOperator 0x28b8a5f1188 <line:167:9, col:33> 'int' '>'
|   | | |-ImplicitCastExpr 0x28b8a5f1170 <col:9> 'unsigned long long' <IntegralCast>
|   | | | `-ImplicitCastExpr 0x28b8a5f1158 <col:9> 'unsigned int' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x28b8a5f10d8 <col:9> 'unsigned int' lvalue Var 0x28b8a6e9de0 'num_bytes' 'unsigned int'
|   | | `-UnaryExprOrTypeTraitExpr 0x28b8a5f1138 <col:21, col:33> 'unsigned long long' sizeof
|   | |   `-ParenExpr 0x28b8a5f1118 <col:27, col:33> 'felem_bytearray':'u8 [32]' lvalue
|   | |     `-DeclRefExpr 0x28b8a5f10f8 <col:28> 'felem_bytearray':'u8 [32]' lvalue Var 0x28b8a6e9d48 'b_out' 'felem_bytearray':'u8 [32]' non_odr_use_unevaluated
|   | `-CompoundStmt 0x28b8a5f12f0 <col:36, line:170:5>
|   |   `-ReturnStmt 0x28b8a5f12e0 <line:169:9, col:16>
|   |     `-IntegerLiteral 0x28b8a5f12b8 <col:16> 'int' 0
|   |-IfStmt 0x28b8a5f14b8 <line:171:5, line:174:5>
|   | |-OpaqueValueExpr 0x28b8a5f14a0 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x28b8a5f1488 <line:171:29, line:174:5>
|   |   `-ReturnStmt 0x28b8a5f1478 <line:173:9, col:16>
|   |     `-IntegerLiteral 0x28b8a5f1450 <col:16> 'int' 0
|   |-CallExpr 0x28b8a5f1730 <line:176:5, col:39> 'void'
|   | |-ImplicitCastExpr 0x28b8a5f1718 <col:5> 'void (*)(u8 *, const u8 *, unsigned int)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a5f1638 <col:5> 'void (u8 *, const u8 *, unsigned int)' Function 0x28b8a6e9548 'flip_endian' 'void (u8 *, const u8 *, unsigned int)'
|   | |-ImplicitCastExpr 0x28b8a5f1768 <col:17> 'u8 *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a5f1658 <col:17> 'felem_bytearray':'u8 [32]' lvalue Var 0x28b8a6e9d48 'b_out' 'felem_bytearray':'u8 [32]'
|   | |-ImplicitCastExpr 0x28b8a5f1798 <col:24> 'const u8 *' <NoOp>
|   | | `-ImplicitCastExpr 0x28b8a5f1780 <col:24> 'u8 *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x28b8a5f1678 <col:24> 'felem_bytearray':'u8 [32]' lvalue Var 0x28b8a6e9cb8 'b_in' 'felem_bytearray':'u8 [32]'
|   | `-ImplicitCastExpr 0x28b8a5f17b0 <col:30> 'unsigned int' <LValueToRValue>
|   |   `-DeclRefExpr 0x28b8a5f1698 <col:30> 'unsigned int' lvalue Var 0x28b8a6e9de0 'num_bytes' 'unsigned int'
|   |-CallExpr 0x28b8a5f18b0 <line:177:5, col:30> 'void'
|   | |-ImplicitCastExpr 0x28b8a5f1898 <col:5> 'void (*)(limb *, const u8 *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a5f17c8 <col:5> 'void (limb *, const u8 *)' Function 0x28b8a6e7f08 'bin32_to_felem' 'void (limb *, const u8 *)'
|   | |-ImplicitCastExpr 0x28b8a5f18e0 <col:20> 'limb *':'limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x28b8a5f17e8 <col:20> 'limb *':'limb *' lvalue ParmVar 0x28b8a6e9a88 'out' 'limb *':'limb *'
|   | `-ImplicitCastExpr 0x28b8a5f1910 <col:25> 'const u8 *':'const u8 *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a5f18f8 <col:25> 'u8 *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a5f1820 <col:25> 'felem_bytearray':'u8 [32]' lvalue Var 0x28b8a6e9d48 'b_out' 'felem_bytearray':'u8 [32]'
|   `-ReturnStmt 0x28b8a5f1950 <line:178:5, col:12>
|     `-IntegerLiteral 0x28b8a5f1928 <col:12> 'int' 1
|-FunctionDecl 0x28b8a5f1b60 <line:182:1, line:188:1> line:182:16 invalid smallfelem_to_BN 'int *(int *, const u64 *)' static
| |-ParmVarDecl 0x28b8a5f19d0 <col:33, col:41> col:41 invalid out 'int *'
| |-ParmVarDecl 0x28b8a5f1a48 <col:46, col:63> col:63 used in 'const u64 *':'const u64 *'
| `-CompoundStmt 0x28b8a5f21c8 <line:183:1, line:188:1>
|   |-DeclStmt 0x28b8a5f1d30 <line:184:5, col:32>
|   | |-VarDecl 0x28b8a5f1c38 <col:5, col:21> col:21 used b_in 'felem_bytearray':'u8 [32]'
|   | `-VarDecl 0x28b8a5f1cb0 <col:5, col:27> col:27 used b_out 'felem_bytearray':'u8 [32]'
|   |-CallExpr 0x28b8a5f1e50 <line:185:5, col:33> 'void'
|   | |-ImplicitCastExpr 0x28b8a5f1e38 <col:5> 'void (*)(u8 *, const u64 *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a5f1d48 <col:5> 'void (u8 *, const u64 *)' Function 0x28b8a6e8ad8 'smallfelem_to_bin32' 'void (u8 *, const u64 *)'
|   | |-ImplicitCastExpr 0x28b8a5f1e80 <col:25> 'u8 *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a5f1d68 <col:25> 'felem_bytearray':'u8 [32]' lvalue Var 0x28b8a5f1c38 'b_in' 'felem_bytearray':'u8 [32]'
|   | `-ImplicitCastExpr 0x28b8a5f1e98 <col:31> 'const u64 *':'const u64 *' <LValueToRValue>
|   |   `-DeclRefExpr 0x28b8a5f1da0 <col:31> 'const u64 *':'const u64 *' lvalue ParmVar 0x28b8a5f1a48 'in' 'const u64 *':'const u64 *'
|   `-CallExpr 0x28b8a5f1fa0 <line:186:5, col:43> 'void'
|     |-ImplicitCastExpr 0x28b8a5f1f88 <col:5> 'void (*)(u8 *, const u8 *, unsigned int)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x28b8a5f1eb0 <col:5> 'void (u8 *, const u8 *, unsigned int)' Function 0x28b8a6e9548 'flip_endian' 'void (u8 *, const u8 *, unsigned int)'
|     |-ImplicitCastExpr 0x28b8a5f1fd8 <col:17> 'u8 *' <ArrayToPointerDecay>
|     | `-DeclRefExpr 0x28b8a5f1ed0 <col:17> 'felem_bytearray':'u8 [32]' lvalue Var 0x28b8a5f1cb0 'b_out' 'felem_bytearray':'u8 [32]'
|     |-ImplicitCastExpr 0x28b8a5f2008 <col:24> 'const u8 *' <NoOp>
|     | `-ImplicitCastExpr 0x28b8a5f1ff0 <col:24> 'u8 *' <ArrayToPointerDecay>
|     |   `-DeclRefExpr 0x28b8a5f1f08 <col:24> 'felem_bytearray':'u8 [32]' lvalue Var 0x28b8a5f1c38 'b_in' 'felem_bytearray':'u8 [32]'
|     `-ImplicitCastExpr 0x28b8a5f2020 <col:30, col:42> 'unsigned int' <IntegralCast>
|       `-UnaryExprOrTypeTraitExpr 0x28b8a5f1f68 <col:30, col:42> 'unsigned long long' sizeof
|         `-ParenExpr 0x28b8a5f1f48 <col:36, col:42> 'felem_bytearray':'u8 [32]' lvalue
|           `-DeclRefExpr 0x28b8a5f1f28 <col:37> 'felem_bytearray':'u8 [32]' lvalue Var 0x28b8a5f1cb0 'b_out' 'felem_bytearray':'u8 [32]' non_odr_use_unevaluated
|-FunctionDecl 0x28b8a5f2338 <line:195:1, line:201:1> line:195:13 used smallfelem_one 'void (u64 *)' static
| |-ParmVarDecl 0x28b8a5f2230 <col:28, col:39> col:39 used out 'u64 *':'u64 *'
| `-CompoundStmt 0x28b8a5f2778 <line:196:1, line:201:1>
|   |-BinaryOperator 0x28b8a5f24b8 <line:197:5, col:14> 'u64':'unsigned long long' '='
|   | |-ArraySubscriptExpr 0x28b8a5f2458 <col:5, col:10> 'u64':'unsigned long long' lvalue
|   | | |-ImplicitCastExpr 0x28b8a5f2440 <col:5> 'u64 *':'u64 *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a5f23f8 <col:5> 'u64 *':'u64 *' lvalue ParmVar 0x28b8a5f2230 'out' 'u64 *':'u64 *'
|   | | `-IntegerLiteral 0x28b8a5f2418 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x28b8a5f24a0 <col:14> 'u64':'unsigned long long' <IntegralCast>
|   |   `-IntegerLiteral 0x28b8a5f2478 <col:14> 'int' 1
|   |-BinaryOperator 0x28b8a5f2598 <line:198:5, col:14> 'u64':'unsigned long long' '='
|   | |-ArraySubscriptExpr 0x28b8a5f2538 <col:5, col:10> 'u64':'unsigned long long' lvalue
|   | | |-ImplicitCastExpr 0x28b8a5f2520 <col:5> 'u64 *':'u64 *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a5f24d8 <col:5> 'u64 *':'u64 *' lvalue ParmVar 0x28b8a5f2230 'out' 'u64 *':'u64 *'
|   | | `-IntegerLiteral 0x28b8a5f24f8 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x28b8a5f2580 <col:14> 'u64':'unsigned long long' <IntegralCast>
|   |   `-IntegerLiteral 0x28b8a5f2558 <col:14> 'int' 0
|   |-BinaryOperator 0x28b8a5f2678 <line:199:5, col:14> 'u64':'unsigned long long' '='
|   | |-ArraySubscriptExpr 0x28b8a5f2618 <col:5, col:10> 'u64':'unsigned long long' lvalue
|   | | |-ImplicitCastExpr 0x28b8a5f2600 <col:5> 'u64 *':'u64 *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a5f25b8 <col:5> 'u64 *':'u64 *' lvalue ParmVar 0x28b8a5f2230 'out' 'u64 *':'u64 *'
|   | | `-IntegerLiteral 0x28b8a5f25d8 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x28b8a5f2660 <col:14> 'u64':'unsigned long long' <IntegralCast>
|   |   `-IntegerLiteral 0x28b8a5f2638 <col:14> 'int' 0
|   `-BinaryOperator 0x28b8a5f2758 <line:200:5, col:14> 'u64':'unsigned long long' '='
|     |-ArraySubscriptExpr 0x28b8a5f26f8 <col:5, col:10> 'u64':'unsigned long long' lvalue
|     | |-ImplicitCastExpr 0x28b8a5f26e0 <col:5> 'u64 *':'u64 *' <LValueToRValue>
|     | | `-DeclRefExpr 0x28b8a5f2698 <col:5> 'u64 *':'u64 *' lvalue ParmVar 0x28b8a5f2230 'out' 'u64 *':'u64 *'
|     | `-IntegerLiteral 0x28b8a5f26b8 <col:9> 'int' 3
|     `-ImplicitCastExpr 0x28b8a5f2740 <col:14> 'u64':'unsigned long long' <IntegralCast>
|       `-IntegerLiteral 0x28b8a5f2718 <col:14> 'int' 0
|-FunctionDecl 0x28b8a5f2978 <line:203:1, line:209:1> line:203:13 used smallfelem_assign 'void (u64 *, const u64 *)' static
| |-ParmVarDecl 0x28b8a5f27b8 <col:31, col:42> col:42 used out 'u64 *':'u64 *'
| |-ParmVarDecl 0x28b8a5f2830 <col:47, col:64> col:64 used in 'const u64 *':'const u64 *'
| `-CompoundStmt 0x28b8a5f2f20 <line:204:1, line:209:1>
|   |-BinaryOperator 0x28b8a5f2b58 <line:205:5, col:18> 'u64':'unsigned long long' '='
|   | |-ArraySubscriptExpr 0x28b8a5f2aa0 <col:5, col:10> 'u64':'unsigned long long' lvalue
|   | | |-ImplicitCastExpr 0x28b8a5f2a88 <col:5> 'u64 *':'u64 *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a5f2a40 <col:5> 'u64 *':'u64 *' lvalue ParmVar 0x28b8a5f27b8 'out' 'u64 *':'u64 *'
|   | | `-IntegerLiteral 0x28b8a5f2a60 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x28b8a5f2b40 <col:14, col:18> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x28b8a5f2b20 <col:14, col:18> 'const u64':'const unsigned long long' lvalue
|   |     |-ImplicitCastExpr 0x28b8a5f2b08 <col:14> 'const u64 *':'const u64 *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x28b8a5f2ac0 <col:14> 'const u64 *':'const u64 *' lvalue ParmVar 0x28b8a5f2830 'in' 'const u64 *':'const u64 *'
|   |     `-IntegerLiteral 0x28b8a5f2ae0 <col:17> 'int' 0
|   |-BinaryOperator 0x28b8a5f2c90 <line:206:5, col:18> 'u64':'unsigned long long' '='
|   | |-ArraySubscriptExpr 0x28b8a5f2bd8 <col:5, col:10> 'u64':'unsigned long long' lvalue
|   | | |-ImplicitCastExpr 0x28b8a5f2bc0 <col:5> 'u64 *':'u64 *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a5f2b78 <col:5> 'u64 *':'u64 *' lvalue ParmVar 0x28b8a5f27b8 'out' 'u64 *':'u64 *'
|   | | `-IntegerLiteral 0x28b8a5f2b98 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x28b8a5f2c78 <col:14, col:18> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x28b8a5f2c58 <col:14, col:18> 'const u64':'const unsigned long long' lvalue
|   |     |-ImplicitCastExpr 0x28b8a5f2c40 <col:14> 'const u64 *':'const u64 *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x28b8a5f2bf8 <col:14> 'const u64 *':'const u64 *' lvalue ParmVar 0x28b8a5f2830 'in' 'const u64 *':'const u64 *'
|   |     `-IntegerLiteral 0x28b8a5f2c18 <col:17> 'int' 1
|   |-BinaryOperator 0x28b8a5f2dc8 <line:207:5, col:18> 'u64':'unsigned long long' '='
|   | |-ArraySubscriptExpr 0x28b8a5f2d10 <col:5, col:10> 'u64':'unsigned long long' lvalue
|   | | |-ImplicitCastExpr 0x28b8a5f2cf8 <col:5> 'u64 *':'u64 *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a5f2cb0 <col:5> 'u64 *':'u64 *' lvalue ParmVar 0x28b8a5f27b8 'out' 'u64 *':'u64 *'
|   | | `-IntegerLiteral 0x28b8a5f2cd0 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x28b8a5f2db0 <col:14, col:18> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x28b8a5f2d90 <col:14, col:18> 'const u64':'const unsigned long long' lvalue
|   |     |-ImplicitCastExpr 0x28b8a5f2d78 <col:14> 'const u64 *':'const u64 *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x28b8a5f2d30 <col:14> 'const u64 *':'const u64 *' lvalue ParmVar 0x28b8a5f2830 'in' 'const u64 *':'const u64 *'
|   |     `-IntegerLiteral 0x28b8a5f2d50 <col:17> 'int' 2
|   `-BinaryOperator 0x28b8a5f2f00 <line:208:5, col:18> 'u64':'unsigned long long' '='
|     |-ArraySubscriptExpr 0x28b8a5f2e48 <col:5, col:10> 'u64':'unsigned long long' lvalue
|     | |-ImplicitCastExpr 0x28b8a5f2e30 <col:5> 'u64 *':'u64 *' <LValueToRValue>
|     | | `-DeclRefExpr 0x28b8a5f2de8 <col:5> 'u64 *':'u64 *' lvalue ParmVar 0x28b8a5f27b8 'out' 'u64 *':'u64 *'
|     | `-IntegerLiteral 0x28b8a5f2e08 <col:9> 'int' 3
|     `-ImplicitCastExpr 0x28b8a5f2ee8 <col:14, col:18> 'u64':'unsigned long long' <LValueToRValue>
|       `-ArraySubscriptExpr 0x28b8a5f2ec8 <col:14, col:18> 'const u64':'const unsigned long long' lvalue
|         |-ImplicitCastExpr 0x28b8a5f2eb0 <col:14> 'const u64 *':'const u64 *' <LValueToRValue>
|         | `-DeclRefExpr 0x28b8a5f2e68 <col:14> 'const u64 *':'const u64 *' lvalue ParmVar 0x28b8a5f2830 'in' 'const u64 *':'const u64 *'
|         `-IntegerLiteral 0x28b8a5f2e88 <col:17> 'int' 3
|-FunctionDecl 0x28b8a5f3218 <line:211:1, line:217:1> line:211:13 used felem_assign 'void (limb *, const limb *)' static
| |-ParmVarDecl 0x28b8a5f2fb0 <col:26, col:32> col:32 used out 'limb *':'limb *'
| |-ParmVarDecl 0x28b8a5f30d0 <col:37, col:49> col:49 used in 'const limb *':'const limb *'
| `-CompoundStmt 0x28b8a5f37c0 <line:212:1, line:217:1>
|   |-BinaryOperator 0x28b8a5f33f8 <line:213:5, col:18> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x28b8a5f3340 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a5f3328 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a5f32e0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a5f2fb0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a5f3300 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x28b8a5f33e0 <col:14, col:18> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x28b8a5f33c0 <col:14, col:18> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x28b8a5f33a8 <col:14> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x28b8a5f3360 <col:14> 'const limb *':'const limb *' lvalue ParmVar 0x28b8a5f30d0 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x28b8a5f3380 <col:17> 'int' 0
|   |-BinaryOperator 0x28b8a5f3530 <line:214:5, col:18> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x28b8a5f3478 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a5f3460 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a5f3418 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a5f2fb0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a5f3438 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x28b8a5f3518 <col:14, col:18> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x28b8a5f34f8 <col:14, col:18> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x28b8a5f34e0 <col:14> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x28b8a5f3498 <col:14> 'const limb *':'const limb *' lvalue ParmVar 0x28b8a5f30d0 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x28b8a5f34b8 <col:17> 'int' 1
|   |-BinaryOperator 0x28b8a5f3668 <line:215:5, col:18> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x28b8a5f35b0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a5f3598 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a5f3550 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a5f2fb0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a5f3570 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x28b8a5f3650 <col:14, col:18> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x28b8a5f3630 <col:14, col:18> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x28b8a5f3618 <col:14> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x28b8a5f35d0 <col:14> 'const limb *':'const limb *' lvalue ParmVar 0x28b8a5f30d0 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x28b8a5f35f0 <col:17> 'int' 2
|   `-BinaryOperator 0x28b8a5f37a0 <line:216:5, col:18> 'limb':'int' '='
|     |-ArraySubscriptExpr 0x28b8a5f36e8 <col:5, col:10> 'limb':'int' lvalue
|     | |-ImplicitCastExpr 0x28b8a5f36d0 <col:5> 'limb *':'limb *' <LValueToRValue>
|     | | `-DeclRefExpr 0x28b8a5f3688 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a5f2fb0 'out' 'limb *':'limb *'
|     | `-IntegerLiteral 0x28b8a5f36a8 <col:9> 'int' 3
|     `-ImplicitCastExpr 0x28b8a5f3788 <col:14, col:18> 'limb':'int' <LValueToRValue>
|       `-ArraySubscriptExpr 0x28b8a5f3768 <col:14, col:18> 'const limb':'const int' lvalue
|         |-ImplicitCastExpr 0x28b8a5f3750 <col:14> 'const limb *':'const limb *' <LValueToRValue>
|         | `-DeclRefExpr 0x28b8a5f3708 <col:14> 'const limb *':'const limb *' lvalue ParmVar 0x28b8a5f30d0 'in' 'const limb *':'const limb *'
|         `-IntegerLiteral 0x28b8a5f3728 <col:17> 'int' 3
|-FunctionDecl 0x28b8a5f3940 <line:220:1, line:226:1> line:220:13 used felem_sum 'void (limb *, const limb *)' static
| |-ParmVarDecl 0x28b8a5f3800 <col:23, col:29> col:29 used out 'limb *':'limb *'
| |-ParmVarDecl 0x28b8a5f3878 <col:34, col:46> col:46 used in 'const limb *':'const limb *'
| `-CompoundStmt 0x28b8a5f3f28 <line:221:1, line:226:1>
|   |-CompoundAssignOperator 0x28b8a5f3b20 <line:222:5, col:19> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x28b8a5f3a68 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a5f3a50 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a5f3a08 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a5f3800 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a5f3a28 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x28b8a5f3b08 <col:15, col:19> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x28b8a5f3ae8 <col:15, col:19> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x28b8a5f3ad0 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x28b8a5f3a88 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x28b8a5f3878 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x28b8a5f3aa8 <col:18> 'int' 0
|   |-CompoundAssignOperator 0x28b8a5f3c68 <line:223:5, col:19> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x28b8a5f3bb0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a5f3b98 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a5f3b50 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a5f3800 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a5f3b70 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x28b8a5f3c50 <col:15, col:19> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x28b8a5f3c30 <col:15, col:19> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x28b8a5f3c18 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x28b8a5f3bd0 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x28b8a5f3878 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x28b8a5f3bf0 <col:18> 'int' 1
|   |-CompoundAssignOperator 0x28b8a5f3db0 <line:224:5, col:19> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x28b8a5f3cf8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a5f3ce0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a5f3c98 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a5f3800 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a5f3cb8 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x28b8a5f3d98 <col:15, col:19> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x28b8a5f3d78 <col:15, col:19> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x28b8a5f3d60 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x28b8a5f3d18 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x28b8a5f3878 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x28b8a5f3d38 <col:18> 'int' 2
|   `-CompoundAssignOperator 0x28b8a5f3ef8 <line:225:5, col:19> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|     |-ArraySubscriptExpr 0x28b8a5f3e40 <col:5, col:10> 'limb':'int' lvalue
|     | |-ImplicitCastExpr 0x28b8a5f3e28 <col:5> 'limb *':'limb *' <LValueToRValue>
|     | | `-DeclRefExpr 0x28b8a5f3de0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a5f3800 'out' 'limb *':'limb *'
|     | `-IntegerLiteral 0x28b8a5f3e00 <col:9> 'int' 3
|     `-ImplicitCastExpr 0x28b8a5f3ee0 <col:15, col:19> 'limb':'int' <LValueToRValue>
|       `-ArraySubscriptExpr 0x28b8a5f3ec0 <col:15, col:19> 'const limb':'const int' lvalue
|         |-ImplicitCastExpr 0x28b8a5f3ea8 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|         | `-DeclRefExpr 0x28b8a5f3e60 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x28b8a5f3878 'in' 'const limb *':'const limb *'
|         `-IntegerLiteral 0x28b8a5f3e80 <col:18> 'int' 3
|-FunctionDecl 0x28b8a5f4128 <line:229:1, line:235:1> line:229:13 used felem_small_sum 'void (limb *, const u64 *)' static
| |-ParmVarDecl 0x28b8a5f3f68 <col:29, col:35> col:35 used out 'limb *':'limb *'
| |-ParmVarDecl 0x28b8a5f3fe0 <col:40, col:57> col:57 used in 'const u64 *':'const u64 *'
| `-CompoundStmt 0x28b8a5f4710 <line:230:1, line:235:1>
|   |-CompoundAssignOperator 0x28b8a5f4308 <line:231:5, col:19> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x28b8a5f4250 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a5f4238 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a5f41f0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a5f3f68 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a5f4210 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x28b8a5f42f0 <col:15, col:19> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x28b8a5f42d0 <col:15, col:19> 'const u64':'const unsigned long long' lvalue
|   |     |-ImplicitCastExpr 0x28b8a5f42b8 <col:15> 'const u64 *':'const u64 *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x28b8a5f4270 <col:15> 'const u64 *':'const u64 *' lvalue ParmVar 0x28b8a5f3fe0 'in' 'const u64 *':'const u64 *'
|   |     `-IntegerLiteral 0x28b8a5f4290 <col:18> 'int' 0
|   |-CompoundAssignOperator 0x28b8a5f4450 <line:232:5, col:19> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x28b8a5f4398 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a5f4380 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a5f4338 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a5f3f68 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a5f4358 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x28b8a5f4438 <col:15, col:19> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x28b8a5f4418 <col:15, col:19> 'const u64':'const unsigned long long' lvalue
|   |     |-ImplicitCastExpr 0x28b8a5f4400 <col:15> 'const u64 *':'const u64 *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x28b8a5f43b8 <col:15> 'const u64 *':'const u64 *' lvalue ParmVar 0x28b8a5f3fe0 'in' 'const u64 *':'const u64 *'
|   |     `-IntegerLiteral 0x28b8a5f43d8 <col:18> 'int' 1
|   |-CompoundAssignOperator 0x28b8a5f4598 <line:233:5, col:19> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x28b8a5f44e0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a5f44c8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a5f4480 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a5f3f68 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a5f44a0 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x28b8a5f4580 <col:15, col:19> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x28b8a5f4560 <col:15, col:19> 'const u64':'const unsigned long long' lvalue
|   |     |-ImplicitCastExpr 0x28b8a5f4548 <col:15> 'const u64 *':'const u64 *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x28b8a5f4500 <col:15> 'const u64 *':'const u64 *' lvalue ParmVar 0x28b8a5f3fe0 'in' 'const u64 *':'const u64 *'
|   |     `-IntegerLiteral 0x28b8a5f4520 <col:18> 'int' 2
|   `-CompoundAssignOperator 0x28b8a5f46e0 <line:234:5, col:19> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|     |-ArraySubscriptExpr 0x28b8a5f4628 <col:5, col:10> 'limb':'int' lvalue
|     | |-ImplicitCastExpr 0x28b8a5f4610 <col:5> 'limb *':'limb *' <LValueToRValue>
|     | | `-DeclRefExpr 0x28b8a5f45c8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a5f3f68 'out' 'limb *':'limb *'
|     | `-IntegerLiteral 0x28b8a5f45e8 <col:9> 'int' 3
|     `-ImplicitCastExpr 0x28b8a5f46c8 <col:15, col:19> 'u64':'unsigned long long' <LValueToRValue>
|       `-ArraySubscriptExpr 0x28b8a5f46a8 <col:15, col:19> 'const u64':'const unsigned long long' lvalue
|         |-ImplicitCastExpr 0x28b8a5f4690 <col:15> 'const u64 *':'const u64 *' <LValueToRValue>
|         | `-DeclRefExpr 0x28b8a5f4648 <col:15> 'const u64 *':'const u64 *' lvalue ParmVar 0x28b8a5f3fe0 'in' 'const u64 *':'const u64 *'
|         `-IntegerLiteral 0x28b8a5f4668 <col:18> 'int' 3
|-FunctionDecl 0x28b8a5f4908 <line:238:1, line:244:1> line:238:13 used felem_scalar 'void (limb *, const u64)' static
| |-ParmVarDecl 0x28b8a5f4750 <col:26, col:32> col:32 used out 'limb *':'limb *'
| |-ParmVarDecl 0x28b8a5f47c8 <col:37, col:47> col:47 used scalar 'const u64':'const unsigned long long'
| `-CompoundStmt 0x28b8a5f4d70 <line:239:1, line:244:1>
|   |-CompoundAssignOperator 0x28b8a5f4a88 <line:240:5, col:15> 'limb':'int' '*=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x28b8a5f4a30 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a5f4a18 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a5f49d0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a5f4750 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a5f49f0 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x28b8a5f4a70 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x28b8a5f4a50 <col:15> 'const u64':'const unsigned long long' lvalue ParmVar 0x28b8a5f47c8 'scalar' 'const u64':'const unsigned long long'
|   |-CompoundAssignOperator 0x28b8a5f4b70 <line:241:5, col:15> 'limb':'int' '*=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x28b8a5f4b18 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a5f4b00 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a5f4ab8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a5f4750 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a5f4ad8 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x28b8a5f4b58 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x28b8a5f4b38 <col:15> 'const u64':'const unsigned long long' lvalue ParmVar 0x28b8a5f47c8 'scalar' 'const u64':'const unsigned long long'
|   |-CompoundAssignOperator 0x28b8a5f4c58 <line:242:5, col:15> 'limb':'int' '*=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x28b8a5f4c00 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a5f4be8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a5f4ba0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a5f4750 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a5f4bc0 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x28b8a5f4c40 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x28b8a5f4c20 <col:15> 'const u64':'const unsigned long long' lvalue ParmVar 0x28b8a5f47c8 'scalar' 'const u64':'const unsigned long long'
|   `-CompoundAssignOperator 0x28b8a5f4d40 <line:243:5, col:15> 'limb':'int' '*=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|     |-ArraySubscriptExpr 0x28b8a5f4ce8 <col:5, col:10> 'limb':'int' lvalue
|     | |-ImplicitCastExpr 0x28b8a5f4cd0 <col:5> 'limb *':'limb *' <LValueToRValue>
|     | | `-DeclRefExpr 0x28b8a5f4c88 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a5f4750 'out' 'limb *':'limb *'
|     | `-IntegerLiteral 0x28b8a5f4ca8 <col:9> 'int' 3
|     `-ImplicitCastExpr 0x28b8a5f4d28 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|       `-DeclRefExpr 0x28b8a5f4d08 <col:15> 'const u64':'const unsigned long long' lvalue ParmVar 0x28b8a5f47c8 'scalar' 'const u64':'const unsigned long long'
|-FunctionDecl 0x28b8a5f4fc0 <line:247:1, line:257:1> line:247:13 used longfelem_scalar 'void (limb *, const u64)' static
| |-ParmVarDecl 0x28b8a5f4e00 <col:30, col:40> col:40 used out 'limb *':'limb *'
| |-ParmVarDecl 0x28b8a5f4e78 <col:45, col:55> col:55 used scalar 'const u64':'const unsigned long long'
| `-CompoundStmt 0x28b8a5f57c8 <line:248:1, line:257:1>
|   |-CompoundAssignOperator 0x28b8a5f5140 <line:249:5, col:15> 'limb':'int' '*=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x28b8a5f50e8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a5f50d0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a5f5088 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a5f4e00 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a5f50a8 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x28b8a5f5128 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x28b8a5f5108 <col:15> 'const u64':'const unsigned long long' lvalue ParmVar 0x28b8a5f4e78 'scalar' 'const u64':'const unsigned long long'
|   |-CompoundAssignOperator 0x28b8a5f5228 <line:250:5, col:15> 'limb':'int' '*=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x28b8a5f51d0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a5f51b8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a5f5170 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a5f4e00 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a5f5190 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x28b8a5f5210 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x28b8a5f51f0 <col:15> 'const u64':'const unsigned long long' lvalue ParmVar 0x28b8a5f4e78 'scalar' 'const u64':'const unsigned long long'
|   |-CompoundAssignOperator 0x28b8a5f5310 <line:251:5, col:15> 'limb':'int' '*=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x28b8a5f52b8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a5f52a0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a5f5258 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a5f4e00 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a5f5278 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x28b8a5f52f8 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x28b8a5f52d8 <col:15> 'const u64':'const unsigned long long' lvalue ParmVar 0x28b8a5f4e78 'scalar' 'const u64':'const unsigned long long'
|   |-CompoundAssignOperator 0x28b8a5f53f8 <line:252:5, col:15> 'limb':'int' '*=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x28b8a5f53a0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a5f5388 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a5f5340 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a5f4e00 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a5f5360 <col:9> 'int' 3
|   | `-ImplicitCastExpr 0x28b8a5f53e0 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x28b8a5f53c0 <col:15> 'const u64':'const unsigned long long' lvalue ParmVar 0x28b8a5f4e78 'scalar' 'const u64':'const unsigned long long'
|   |-CompoundAssignOperator 0x28b8a5f54e0 <line:253:5, col:15> 'limb':'int' '*=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x28b8a5f5488 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a5f5470 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a5f5428 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a5f4e00 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a5f5448 <col:9> 'int' 4
|   | `-ImplicitCastExpr 0x28b8a5f54c8 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x28b8a5f54a8 <col:15> 'const u64':'const unsigned long long' lvalue ParmVar 0x28b8a5f4e78 'scalar' 'const u64':'const unsigned long long'
|   |-CompoundAssignOperator 0x28b8a5f55c8 <line:254:5, col:15> 'limb':'int' '*=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x28b8a5f5570 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a5f5558 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a5f5510 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a5f4e00 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a5f5530 <col:9> 'int' 5
|   | `-ImplicitCastExpr 0x28b8a5f55b0 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x28b8a5f5590 <col:15> 'const u64':'const unsigned long long' lvalue ParmVar 0x28b8a5f4e78 'scalar' 'const u64':'const unsigned long long'
|   |-CompoundAssignOperator 0x28b8a5f56b0 <line:255:5, col:15> 'limb':'int' '*=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x28b8a5f5658 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a5f5640 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a5f55f8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a5f4e00 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a5f5618 <col:9> 'int' 6
|   | `-ImplicitCastExpr 0x28b8a5f5698 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x28b8a5f5678 <col:15> 'const u64':'const unsigned long long' lvalue ParmVar 0x28b8a5f4e78 'scalar' 'const u64':'const unsigned long long'
|   `-CompoundAssignOperator 0x28b8a5f5798 <line:256:5, col:15> 'limb':'int' '*=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|     |-ArraySubscriptExpr 0x28b8a5f5740 <col:5, col:10> 'limb':'int' lvalue
|     | |-ImplicitCastExpr 0x28b8a5f5728 <col:5> 'limb *':'limb *' <LValueToRValue>
|     | | `-DeclRefExpr 0x28b8a5f56e0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a5f4e00 'out' 'limb *':'limb *'
|     | `-IntegerLiteral 0x28b8a5f5700 <col:9> 'int' 7
|     `-ImplicitCastExpr 0x28b8a5f5780 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|       `-DeclRefExpr 0x28b8a5f5760 <col:15> 'const u64':'const unsigned long long' lvalue ParmVar 0x28b8a5f4e78 'scalar' 'const u64':'const unsigned long long'
|-VarDecl 0x28b8a5f5828 <line:264:1, line:265:53> line:264:20 used zero105 'const felem':'limb const[4]' static cinit
| `-InitListExpr 0x28b8a5f62e8 <line:265:5, col:53> 'const felem':'limb const[4]'
|   |-BinaryOperator 0x28b8a5f5b68 <line:259:22, col:78> 'int' '-'
|   | |-BinaryOperator 0x28b8a5f5a60 <col:22, col:59> 'int' '-'
|   | | |-ParenExpr 0x28b8a5f5958 <col:22, col:39> 'limb':'int'
|   | | | `-BinaryOperator 0x28b8a5f5938 <col:23, col:36> 'limb':'int' '<<'
|   | | |   |-ParenExpr 0x28b8a5f58f0 <col:23, col:31> 'limb':'int'
|   | | |   | `-CStyleCastExpr 0x28b8a5f58c8 <col:24, col:30> 'limb':'int' <NoOp>
|   | | |   |   `-IntegerLiteral 0x28b8a5f5890 <col:30> 'int' 1
|   | | |   `-IntegerLiteral 0x28b8a5f5910 <col:36> 'int' 105
|   | | `-ParenExpr 0x28b8a5f5a40 <col:43, col:59> 'limb':'int'
|   | |   `-BinaryOperator 0x28b8a5f5a20 <col:44, col:57> 'limb':'int' '<<'
|   | |     |-ParenExpr 0x28b8a5f59d8 <col:44, col:52> 'limb':'int'
|   | |     | `-CStyleCastExpr 0x28b8a5f59b0 <col:45, col:51> 'limb':'int' <NoOp>
|   | |     |   `-IntegerLiteral 0x28b8a5f5978 <col:51> 'int' 1
|   | |     `-IntegerLiteral 0x28b8a5f59f8 <col:57> 'int' 41
|   | `-ParenExpr 0x28b8a5f5b48 <col:63, col:78> 'limb':'int'
|   |   `-BinaryOperator 0x28b8a5f5b28 <col:64, col:77> 'limb':'int' '<<'
|   |     |-ParenExpr 0x28b8a5f5ae0 <col:64, col:72> 'limb':'int'
|   |     | `-CStyleCastExpr 0x28b8a5f5ab8 <col:65, col:71> 'limb':'int' <NoOp>
|   |     |   `-IntegerLiteral 0x28b8a5f5a80 <col:71> 'int' 1
|   |     `-IntegerLiteral 0x28b8a5f5b00 <col:77> 'int' 9
|   |-ParenExpr 0x28b8a5f5c50 <line:260:17, col:34> 'limb':'int'
|   | `-BinaryOperator 0x28b8a5f5c30 <col:18, col:31> 'limb':'int' '<<'
|   |   |-ParenExpr 0x28b8a5f5be8 <col:18, col:26> 'limb':'int'
|   |   | `-CStyleCastExpr 0x28b8a5f5bc0 <col:19, col:25> 'limb':'int' <NoOp>
|   |   |   `-IntegerLiteral 0x28b8a5f5b88 <col:25> 'int' 1
|   |   `-IntegerLiteral 0x28b8a5f5c08 <col:31> 'int' 105
|   |-BinaryOperator 0x28b8a5f5f48 <line:261:22, col:78> 'int' '+'
|   | |-BinaryOperator 0x28b8a5f5e40 <col:22, col:59> 'int' '-'
|   | | |-ParenExpr 0x28b8a5f5d38 <col:22, col:39> 'limb':'int'
|   | | | `-BinaryOperator 0x28b8a5f5d18 <col:23, col:36> 'limb':'int' '<<'
|   | | |   |-ParenExpr 0x28b8a5f5cd0 <col:23, col:31> 'limb':'int'
|   | | |   | `-CStyleCastExpr 0x28b8a5f5ca8 <col:24, col:30> 'limb':'int' <NoOp>
|   | | |   |   `-IntegerLiteral 0x28b8a5f5c70 <col:30> 'int' 1
|   | | |   `-IntegerLiteral 0x28b8a5f5cf0 <col:36> 'int' 105
|   | | `-ParenExpr 0x28b8a5f5e20 <col:43, col:59> 'limb':'int'
|   | |   `-BinaryOperator 0x28b8a5f5e00 <col:44, col:57> 'limb':'int' '<<'
|   | |     |-ParenExpr 0x28b8a5f5db8 <col:44, col:52> 'limb':'int'
|   | |     | `-CStyleCastExpr 0x28b8a5f5d90 <col:45, col:51> 'limb':'int' <NoOp>
|   | |     |   `-IntegerLiteral 0x28b8a5f5d58 <col:51> 'int' 1
|   | |     `-IntegerLiteral 0x28b8a5f5dd8 <col:57> 'int' 41
|   | `-ParenExpr 0x28b8a5f5f28 <col:63, col:78> 'limb':'int'
|   |   `-BinaryOperator 0x28b8a5f5f08 <col:64, col:77> 'limb':'int' '<<'
|   |     |-ParenExpr 0x28b8a5f5ec0 <col:64, col:72> 'limb':'int'
|   |     | `-CStyleCastExpr 0x28b8a5f5e98 <col:65, col:71> 'limb':'int' <NoOp>
|   |     |   `-IntegerLiteral 0x28b8a5f5e60 <col:71> 'int' 1
|   |     `-IntegerLiteral 0x28b8a5f5ee0 <col:77> 'int' 9
|   `-BinaryOperator 0x28b8a5f6240 <col:22, col:78> 'int' '+'
|     |-BinaryOperator 0x28b8a5f6138 <col:22, col:59> 'int' '-'
|     | |-ParenExpr 0x28b8a5f6030 <col:22, col:39> 'limb':'int'
|     | | `-BinaryOperator 0x28b8a5f6010 <col:23, col:36> 'limb':'int' '<<'
|     | |   |-ParenExpr 0x28b8a5f5fc8 <col:23, col:31> 'limb':'int'
|     | |   | `-CStyleCastExpr 0x28b8a5f5fa0 <col:24, col:30> 'limb':'int' <NoOp>
|     | |   |   `-IntegerLiteral 0x28b8a5f5f68 <col:30> 'int' 1
|     | |   `-IntegerLiteral 0x28b8a5f5fe8 <col:36> 'int' 105
|     | `-ParenExpr 0x28b8a5f6118 <col:43, col:59> 'limb':'int'
|     |   `-BinaryOperator 0x28b8a5f60f8 <col:44, col:57> 'limb':'int' '<<'
|     |     |-ParenExpr 0x28b8a5f60b0 <col:44, col:52> 'limb':'int'
|     |     | `-CStyleCastExpr 0x28b8a5f6088 <col:45, col:51> 'limb':'int' <NoOp>
|     |     |   `-IntegerLiteral 0x28b8a5f6050 <col:51> 'int' 1
|     |     `-IntegerLiteral 0x28b8a5f60d0 <col:57> 'int' 41
|     `-ParenExpr 0x28b8a5f6220 <col:63, col:78> 'limb':'int'
|       `-BinaryOperator 0x28b8a5f6200 <col:64, col:77> 'limb':'int' '<<'
|         |-ParenExpr 0x28b8a5f61b8 <col:64, col:72> 'limb':'int'
|         | `-CStyleCastExpr 0x28b8a5f6190 <col:65, col:71> 'limb':'int' <NoOp>
|         |   `-IntegerLiteral 0x28b8a5f6158 <col:71> 'int' 1
|         `-IntegerLiteral 0x28b8a5f61d8 <col:77> 'int' 9
|-FunctionDecl 0x28b8a5f6498 <line:272:1, line:279:1> line:272:13 used smallfelem_neg 'void (limb *, const u64 *)' static
| |-ParmVarDecl 0x28b8a5f6358 <col:28, col:34> col:34 used out 'limb *':'limb *'
| |-ParmVarDecl 0x28b8a5f63d0 <col:39, col:56> col:56 used small 'const u64 *':'const u64 *'
| `-CompoundStmt 0x28b8a5f6e28 <line:273:1, line:279:1>
|   |-BinaryOperator 0x28b8a5f6760 <line:275:5, col:34> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x28b8a5f65c0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a5f65a8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a5f6560 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a5f6358 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a5f6580 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x28b8a5f6748 <col:14, col:34> 'limb':'int' <IntegralCast>
|   |   `-BinaryOperator 0x28b8a5f6728 <col:14, col:34> 'unsigned long long' '-'
|   |     |-ImplicitCastExpr 0x28b8a5f6710 <col:14, col:23> 'unsigned long long' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x28b8a5f66e0 <col:14, col:23> 'limb':'int' <LValueToRValue>
|   |     |   `-ArraySubscriptExpr 0x28b8a5f6640 <col:14, col:23> 'const limb':'const int' lvalue
|   |     |     |-ImplicitCastExpr 0x28b8a5f6628 <col:14> 'const limb *' <ArrayToPointerDecay>
|   |     |     | `-DeclRefExpr 0x28b8a5f65e0 <col:14> 'const felem':'limb const[4]' lvalue Var 0x28b8a5f5828 'zero105' 'const felem':'limb const[4]'
|   |     |     `-IntegerLiteral 0x28b8a5f6600 <col:22> 'int' 0
|   |     `-ImplicitCastExpr 0x28b8a5f66f8 <col:27, col:34> 'u64':'unsigned long long' <LValueToRValue>
|   |       `-ArraySubscriptExpr 0x28b8a5f66c0 <col:27, col:34> 'const u64':'const unsigned long long' lvalue
|   |         |-ImplicitCastExpr 0x28b8a5f66a8 <col:27> 'const u64 *':'const u64 *' <LValueToRValue>
|   |         | `-DeclRefExpr 0x28b8a5f6660 <col:27> 'const u64 *':'const u64 *' lvalue ParmVar 0x28b8a5f63d0 'small' 'const u64 *':'const u64 *'
|   |         `-IntegerLiteral 0x28b8a5f6680 <col:33> 'int' 0
|   |-BinaryOperator 0x28b8a5f69c8 <line:276:5, col:34> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x28b8a5f6828 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a5f6810 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a5f67c8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a5f6358 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a5f67e8 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x28b8a5f69b0 <col:14, col:34> 'limb':'int' <IntegralCast>
|   |   `-BinaryOperator 0x28b8a5f6990 <col:14, col:34> 'unsigned long long' '-'
|   |     |-ImplicitCastExpr 0x28b8a5f6978 <col:14, col:23> 'unsigned long long' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x28b8a5f6948 <col:14, col:23> 'limb':'int' <LValueToRValue>
|   |     |   `-ArraySubscriptExpr 0x28b8a5f68a8 <col:14, col:23> 'const limb':'const int' lvalue
|   |     |     |-ImplicitCastExpr 0x28b8a5f6890 <col:14> 'const limb *' <ArrayToPointerDecay>
|   |     |     | `-DeclRefExpr 0x28b8a5f6848 <col:14> 'const felem':'limb const[4]' lvalue Var 0x28b8a5f5828 'zero105' 'const felem':'limb const[4]'
|   |     |     `-IntegerLiteral 0x28b8a5f6868 <col:22> 'int' 1
|   |     `-ImplicitCastExpr 0x28b8a5f6960 <col:27, col:34> 'u64':'unsigned long long' <LValueToRValue>
|   |       `-ArraySubscriptExpr 0x28b8a5f6928 <col:27, col:34> 'const u64':'const unsigned long long' lvalue
|   |         |-ImplicitCastExpr 0x28b8a5f6910 <col:27> 'const u64 *':'const u64 *' <LValueToRValue>
|   |         | `-DeclRefExpr 0x28b8a5f68c8 <col:27> 'const u64 *':'const u64 *' lvalue ParmVar 0x28b8a5f63d0 'small' 'const u64 *':'const u64 *'
|   |         `-IntegerLiteral 0x28b8a5f68e8 <col:33> 'int' 1
|   |-BinaryOperator 0x28b8a5f6be8 <line:277:5, col:34> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x28b8a5f6a48 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a5f6a30 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a5f69e8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a5f6358 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a5f6a08 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x28b8a5f6bd0 <col:14, col:34> 'limb':'int' <IntegralCast>
|   |   `-BinaryOperator 0x28b8a5f6bb0 <col:14, col:34> 'unsigned long long' '-'
|   |     |-ImplicitCastExpr 0x28b8a5f6b98 <col:14, col:23> 'unsigned long long' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x28b8a5f6b68 <col:14, col:23> 'limb':'int' <LValueToRValue>
|   |     |   `-ArraySubscriptExpr 0x28b8a5f6ac8 <col:14, col:23> 'const limb':'const int' lvalue
|   |     |     |-ImplicitCastExpr 0x28b8a5f6ab0 <col:14> 'const limb *' <ArrayToPointerDecay>
|   |     |     | `-DeclRefExpr 0x28b8a5f6a68 <col:14> 'const felem':'limb const[4]' lvalue Var 0x28b8a5f5828 'zero105' 'const felem':'limb const[4]'
|   |     |     `-IntegerLiteral 0x28b8a5f6a88 <col:22> 'int' 2
|   |     `-ImplicitCastExpr 0x28b8a5f6b80 <col:27, col:34> 'u64':'unsigned long long' <LValueToRValue>
|   |       `-ArraySubscriptExpr 0x28b8a5f6b48 <col:27, col:34> 'const u64':'const unsigned long long' lvalue
|   |         |-ImplicitCastExpr 0x28b8a5f6b30 <col:27> 'const u64 *':'const u64 *' <LValueToRValue>
|   |         | `-DeclRefExpr 0x28b8a5f6ae8 <col:27> 'const u64 *':'const u64 *' lvalue ParmVar 0x28b8a5f63d0 'small' 'const u64 *':'const u64 *'
|   |         `-IntegerLiteral 0x28b8a5f6b08 <col:33> 'int' 2
|   `-BinaryOperator 0x28b8a5f6e08 <line:278:5, col:34> 'limb':'int' '='
|     |-ArraySubscriptExpr 0x28b8a5f6c68 <col:5, col:10> 'limb':'int' lvalue
|     | |-ImplicitCastExpr 0x28b8a5f6c50 <col:5> 'limb *':'limb *' <LValueToRValue>
|     | | `-DeclRefExpr 0x28b8a5f6c08 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a5f6358 'out' 'limb *':'limb *'
|     | `-IntegerLiteral 0x28b8a5f6c28 <col:9> 'int' 3
|     `-ImplicitCastExpr 0x28b8a5f6df0 <col:14, col:34> 'limb':'int' <IntegralCast>
|       `-BinaryOperator 0x28b8a5f6dd0 <col:14, col:34> 'unsigned long long' '-'
|         |-ImplicitCastExpr 0x28b8a5f6db8 <col:14, col:23> 'unsigned long long' <IntegralCast>
|         | `-ImplicitCastExpr 0x28b8a5f6d88 <col:14, col:23> 'limb':'int' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x28b8a5f6ce8 <col:14, col:23> 'const limb':'const int' lvalue
|         |     |-ImplicitCastExpr 0x28b8a5f6cd0 <col:14> 'const limb *' <ArrayToPointerDecay>
|         |     | `-DeclRefExpr 0x28b8a5f6c88 <col:14> 'const felem':'limb const[4]' lvalue Var 0x28b8a5f5828 'zero105' 'const felem':'limb const[4]'
|         |     `-IntegerLiteral 0x28b8a5f6ca8 <col:22> 'int' 3
|         `-ImplicitCastExpr 0x28b8a5f6da0 <col:27, col:34> 'u64':'unsigned long long' <LValueToRValue>
|           `-ArraySubscriptExpr 0x28b8a5f6d68 <col:27, col:34> 'const u64':'const unsigned long long' lvalue
|             |-ImplicitCastExpr 0x28b8a5f6d50 <col:27> 'const u64 *':'const u64 *' <LValueToRValue>
|             | `-DeclRefExpr 0x28b8a5f6d08 <col:27> 'const u64 *':'const u64 *' lvalue ParmVar 0x28b8a5f63d0 'small' 'const u64 *':'const u64 *'
|             `-IntegerLiteral 0x28b8a5f6d28 <col:33> 'int' 3
|-FunctionDecl 0x28b8a5f6fd0 <line:288:1, line:302:1> line:288:13 used felem_diff 'void (limb *, const limb *)' static
| |-ParmVarDecl 0x28b8a5f6e68 <col:24, col:30> col:30 used out 'limb *':'limb *'
| |-ParmVarDecl 0x28b8a5f6ee0 <col:35, col:47> col:47 used in 'const limb *':'const limb *'
| `-CompoundStmt 0x28b8a5f7ad8 <line:289:1, line:302:1>
|   |-CompoundAssignOperator 0x28b8a5f71b0 <line:293:5, col:24> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x28b8a5f70f8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a5f70e0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a5f7098 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a5f6e68 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a5f70b8 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x28b8a5f7198 <col:15, col:24> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x28b8a5f7178 <col:15, col:24> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x28b8a5f7160 <col:15> 'const limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x28b8a5f7118 <col:15> 'const felem':'limb const[4]' lvalue Var 0x28b8a5f5828 'zero105' 'const felem':'limb const[4]'
|   |     `-IntegerLiteral 0x28b8a5f7138 <col:23> 'int' 0
|   |-CompoundAssignOperator 0x28b8a5f72f8 <line:294:5, col:24> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x28b8a5f7240 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a5f7228 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a5f71e0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a5f6e68 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a5f7200 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x28b8a5f72e0 <col:15, col:24> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x28b8a5f72c0 <col:15, col:24> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x28b8a5f72a8 <col:15> 'const limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x28b8a5f7260 <col:15> 'const felem':'limb const[4]' lvalue Var 0x28b8a5f5828 'zero105' 'const felem':'limb const[4]'
|   |     `-IntegerLiteral 0x28b8a5f7280 <col:23> 'int' 1
|   |-CompoundAssignOperator 0x28b8a5f7440 <line:295:5, col:24> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x28b8a5f7388 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a5f7370 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a5f7328 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a5f6e68 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a5f7348 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x28b8a5f7428 <col:15, col:24> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x28b8a5f7408 <col:15, col:24> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x28b8a5f73f0 <col:15> 'const limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x28b8a5f73a8 <col:15> 'const felem':'limb const[4]' lvalue Var 0x28b8a5f5828 'zero105' 'const felem':'limb const[4]'
|   |     `-IntegerLiteral 0x28b8a5f73c8 <col:23> 'int' 2
|   |-CompoundAssignOperator 0x28b8a5f7588 <line:296:5, col:24> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x28b8a5f74d0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a5f74b8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a5f7470 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a5f6e68 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a5f7490 <col:9> 'int' 3
|   | `-ImplicitCastExpr 0x28b8a5f7570 <col:15, col:24> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x28b8a5f7550 <col:15, col:24> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x28b8a5f7538 <col:15> 'const limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x28b8a5f74f0 <col:15> 'const felem':'limb const[4]' lvalue Var 0x28b8a5f5828 'zero105' 'const felem':'limb const[4]'
|   |     `-IntegerLiteral 0x28b8a5f7510 <col:23> 'int' 3
|   |-CompoundAssignOperator 0x28b8a5f76d0 <line:298:5, col:19> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x28b8a5f7618 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a5f7600 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a5f75b8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a5f6e68 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a5f75d8 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x28b8a5f76b8 <col:15, col:19> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x28b8a5f7698 <col:15, col:19> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x28b8a5f7680 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x28b8a5f7638 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x28b8a5f6ee0 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x28b8a5f7658 <col:18> 'int' 0
|   |-CompoundAssignOperator 0x28b8a5f7818 <line:299:5, col:19> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x28b8a5f7760 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a5f7748 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a5f7700 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a5f6e68 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a5f7720 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x28b8a5f7800 <col:15, col:19> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x28b8a5f77e0 <col:15, col:19> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x28b8a5f77c8 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x28b8a5f7780 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x28b8a5f6ee0 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x28b8a5f77a0 <col:18> 'int' 1
|   |-CompoundAssignOperator 0x28b8a5f7960 <line:300:5, col:19> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x28b8a5f78a8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a5f7890 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a5f7848 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a5f6e68 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a5f7868 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x28b8a5f7948 <col:15, col:19> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x28b8a5f7928 <col:15, col:19> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x28b8a5f7910 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x28b8a5f78c8 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x28b8a5f6ee0 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x28b8a5f78e8 <col:18> 'int' 2
|   `-CompoundAssignOperator 0x28b8a5f7aa8 <line:301:5, col:19> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|     |-ArraySubscriptExpr 0x28b8a5f79f0 <col:5, col:10> 'limb':'int' lvalue
|     | |-ImplicitCastExpr 0x28b8a5f79d8 <col:5> 'limb *':'limb *' <LValueToRValue>
|     | | `-DeclRefExpr 0x28b8a5f7990 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a5f6e68 'out' 'limb *':'limb *'
|     | `-IntegerLiteral 0x28b8a5f79b0 <col:9> 'int' 3
|     `-ImplicitCastExpr 0x28b8a5f7a90 <col:15, col:19> 'limb':'int' <LValueToRValue>
|       `-ArraySubscriptExpr 0x28b8a5f7a70 <col:15, col:19> 'const limb':'const int' lvalue
|         |-ImplicitCastExpr 0x28b8a5f7a58 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|         | `-DeclRefExpr 0x28b8a5f7a10 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x28b8a5f6ee0 'in' 'const limb *':'const limb *'
|         `-IntegerLiteral 0x28b8a5f7a30 <col:18> 'int' 3
|-VarDecl 0x28b8a5f7b38 <line:309:1, line:310:56> line:309:20 used zero107 'const felem':'limb const[4]' static cinit
| `-InitListExpr 0x28b8a5f85f8 <line:310:5, col:56> 'const felem':'limb const[4]'
|   |-BinaryOperator 0x28b8a5f7e78 <line:304:23, col:80> 'int' '-'
|   | |-BinaryOperator 0x28b8a5f7d70 <col:23, col:60> 'int' '-'
|   | | |-ParenExpr 0x28b8a5f7c68 <col:23, col:40> 'limb':'int'
|   | | | `-BinaryOperator 0x28b8a5f7c48 <col:24, col:37> 'limb':'int' '<<'
|   | | |   |-ParenExpr 0x28b8a5f7c00 <col:24, col:32> 'limb':'int'
|   | | |   | `-CStyleCastExpr 0x28b8a5f7bd8 <col:25, col:31> 'limb':'int' <NoOp>
|   | | |   |   `-IntegerLiteral 0x28b8a5f7ba0 <col:31> 'int' 1
|   | | |   `-IntegerLiteral 0x28b8a5f7c20 <col:37> 'int' 107
|   | | `-ParenExpr 0x28b8a5f7d50 <col:44, col:60> 'limb':'int'
|   | |   `-BinaryOperator 0x28b8a5f7d30 <col:45, col:58> 'limb':'int' '<<'
|   | |     |-ParenExpr 0x28b8a5f7ce8 <col:45, col:53> 'limb':'int'
|   | |     | `-CStyleCastExpr 0x28b8a5f7cc0 <col:46, col:52> 'limb':'int' <NoOp>
|   | |     |   `-IntegerLiteral 0x28b8a5f7c88 <col:52> 'int' 1
|   | |     `-IntegerLiteral 0x28b8a5f7d08 <col:58> 'int' 43
|   | `-ParenExpr 0x28b8a5f7e58 <col:64, col:80> 'limb':'int'
|   |   `-BinaryOperator 0x28b8a5f7e38 <col:65, col:78> 'limb':'int' '<<'
|   |     |-ParenExpr 0x28b8a5f7df0 <col:65, col:73> 'limb':'int'
|   |     | `-CStyleCastExpr 0x28b8a5f7dc8 <col:66, col:72> 'limb':'int' <NoOp>
|   |     |   `-IntegerLiteral 0x28b8a5f7d90 <col:72> 'int' 1
|   |     `-IntegerLiteral 0x28b8a5f7e10 <col:78> 'int' 11
|   |-ParenExpr 0x28b8a5f7f60 <line:305:17, col:34> 'limb':'int'
|   | `-BinaryOperator 0x28b8a5f7f40 <col:18, col:31> 'limb':'int' '<<'
|   |   |-ParenExpr 0x28b8a5f7ef8 <col:18, col:26> 'limb':'int'
|   |   | `-CStyleCastExpr 0x28b8a5f7ed0 <col:19, col:25> 'limb':'int' <NoOp>
|   |   |   `-IntegerLiteral 0x28b8a5f7e98 <col:25> 'int' 1
|   |   `-IntegerLiteral 0x28b8a5f7f18 <col:31> 'int' 107
|   |-BinaryOperator 0x28b8a5f8258 <line:306:23, col:80> 'int' '+'
|   | |-BinaryOperator 0x28b8a5f8150 <col:23, col:60> 'int' '-'
|   | | |-ParenExpr 0x28b8a5f8048 <col:23, col:40> 'limb':'int'
|   | | | `-BinaryOperator 0x28b8a5f8028 <col:24, col:37> 'limb':'int' '<<'
|   | | |   |-ParenExpr 0x28b8a5f7fe0 <col:24, col:32> 'limb':'int'
|   | | |   | `-CStyleCastExpr 0x28b8a5f7fb8 <col:25, col:31> 'limb':'int' <NoOp>
|   | | |   |   `-IntegerLiteral 0x28b8a5f7f80 <col:31> 'int' 1
|   | | |   `-IntegerLiteral 0x28b8a5f8000 <col:37> 'int' 107
|   | | `-ParenExpr 0x28b8a5f8130 <col:44, col:60> 'limb':'int'
|   | |   `-BinaryOperator 0x28b8a5f8110 <col:45, col:58> 'limb':'int' '<<'
|   | |     |-ParenExpr 0x28b8a5f80c8 <col:45, col:53> 'limb':'int'
|   | |     | `-CStyleCastExpr 0x28b8a5f80a0 <col:46, col:52> 'limb':'int' <NoOp>
|   | |     |   `-IntegerLiteral 0x28b8a5f8068 <col:52> 'int' 1
|   | |     `-IntegerLiteral 0x28b8a5f80e8 <col:58> 'int' 43
|   | `-ParenExpr 0x28b8a5f8238 <col:64, col:80> 'limb':'int'
|   |   `-BinaryOperator 0x28b8a5f8218 <col:65, col:78> 'limb':'int' '<<'
|   |     |-ParenExpr 0x28b8a5f81d0 <col:65, col:73> 'limb':'int'
|   |     | `-CStyleCastExpr 0x28b8a5f81a8 <col:66, col:72> 'limb':'int' <NoOp>
|   |     |   `-IntegerLiteral 0x28b8a5f8170 <col:72> 'int' 1
|   |     `-IntegerLiteral 0x28b8a5f81f0 <col:78> 'int' 11
|   `-BinaryOperator 0x28b8a5f8550 <col:23, col:80> 'int' '+'
|     |-BinaryOperator 0x28b8a5f8448 <col:23, col:60> 'int' '-'
|     | |-ParenExpr 0x28b8a5f8340 <col:23, col:40> 'limb':'int'
|     | | `-BinaryOperator 0x28b8a5f8320 <col:24, col:37> 'limb':'int' '<<'
|     | |   |-ParenExpr 0x28b8a5f82d8 <col:24, col:32> 'limb':'int'
|     | |   | `-CStyleCastExpr 0x28b8a5f82b0 <col:25, col:31> 'limb':'int' <NoOp>
|     | |   |   `-IntegerLiteral 0x28b8a5f8278 <col:31> 'int' 1
|     | |   `-IntegerLiteral 0x28b8a5f82f8 <col:37> 'int' 107
|     | `-ParenExpr 0x28b8a5f8428 <col:44, col:60> 'limb':'int'
|     |   `-BinaryOperator 0x28b8a5f8408 <col:45, col:58> 'limb':'int' '<<'
|     |     |-ParenExpr 0x28b8a5f83c0 <col:45, col:53> 'limb':'int'
|     |     | `-CStyleCastExpr 0x28b8a5f8398 <col:46, col:52> 'limb':'int' <NoOp>
|     |     |   `-IntegerLiteral 0x28b8a5f8360 <col:52> 'int' 1
|     |     `-IntegerLiteral 0x28b8a5f83e0 <col:58> 'int' 43
|     `-ParenExpr 0x28b8a5f8530 <col:64, col:80> 'limb':'int'
|       `-BinaryOperator 0x28b8a5f8510 <col:65, col:78> 'limb':'int' '<<'
|         |-ParenExpr 0x28b8a5f84c8 <col:65, col:73> 'limb':'int'
|         | `-CStyleCastExpr 0x28b8a5f84a0 <col:66, col:72> 'limb':'int' <NoOp>
|         |   `-IntegerLiteral 0x28b8a5f8468 <col:72> 'int' 1
|         `-IntegerLiteral 0x28b8a5f84e8 <col:78> 'int' 11
|-FunctionDecl 0x28b8a5f87a8 <line:320:1, line:334:1> line:320:13 used felem_diff_zero107 'void (limb *, const limb *)' static
| |-ParmVarDecl 0x28b8a5f8668 <col:32, col:38> col:38 used out 'limb *':'limb *'
| |-ParmVarDecl 0x28b8a5f86e0 <col:43, col:55> col:55 used in 'const limb *':'const limb *'
| `-CompoundStmt 0x28b8a5f9318 <line:321:1, line:334:1>
|   |-CompoundAssignOperator 0x28b8a5f8988 <line:325:5, col:24> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x28b8a5f88d0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a5f88b8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a5f8870 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a5f8668 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a5f8890 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x28b8a5f8970 <col:15, col:24> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x28b8a5f8950 <col:15, col:24> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x28b8a5f8938 <col:15> 'const limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x28b8a5f88f0 <col:15> 'const felem':'limb const[4]' lvalue Var 0x28b8a5f7b38 'zero107' 'const felem':'limb const[4]'
|   |     `-IntegerLiteral 0x28b8a5f8910 <col:23> 'int' 0
|   |-CompoundAssignOperator 0x28b8a5f8b18 <line:326:5, col:24> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x28b8a5f8a60 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a5f8a48 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a5f8a00 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a5f8668 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a5f8a20 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x28b8a5f8b00 <col:15, col:24> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x28b8a5f8ae0 <col:15, col:24> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x28b8a5f8ac8 <col:15> 'const limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x28b8a5f8a80 <col:15> 'const felem':'limb const[4]' lvalue Var 0x28b8a5f7b38 'zero107' 'const felem':'limb const[4]'
|   |     `-IntegerLiteral 0x28b8a5f8aa0 <col:23> 'int' 1
|   |-CompoundAssignOperator 0x28b8a5f8c60 <line:327:5, col:24> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x28b8a5f8ba8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a5f8b90 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a5f8b48 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a5f8668 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a5f8b68 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x28b8a5f8c48 <col:15, col:24> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x28b8a5f8c28 <col:15, col:24> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x28b8a5f8c10 <col:15> 'const limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x28b8a5f8bc8 <col:15> 'const felem':'limb const[4]' lvalue Var 0x28b8a5f7b38 'zero107' 'const felem':'limb const[4]'
|   |     `-IntegerLiteral 0x28b8a5f8be8 <col:23> 'int' 2
|   |-CompoundAssignOperator 0x28b8a5f8da8 <line:328:5, col:24> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x28b8a5f8cf0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a5f8cd8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a5f8c90 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a5f8668 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a5f8cb0 <col:9> 'int' 3
|   | `-ImplicitCastExpr 0x28b8a5f8d90 <col:15, col:24> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x28b8a5f8d70 <col:15, col:24> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x28b8a5f8d58 <col:15> 'const limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x28b8a5f8d10 <col:15> 'const felem':'limb const[4]' lvalue Var 0x28b8a5f7b38 'zero107' 'const felem':'limb const[4]'
|   |     `-IntegerLiteral 0x28b8a5f8d30 <col:23> 'int' 3
|   |-CompoundAssignOperator 0x28b8a5f8ef0 <line:330:5, col:19> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x28b8a5f8e38 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a5f8e20 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a5f8dd8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a5f8668 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a5f8df8 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x28b8a5f8ed8 <col:15, col:19> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x28b8a5f8eb8 <col:15, col:19> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x28b8a5f8ea0 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x28b8a5f8e58 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x28b8a5f86e0 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x28b8a5f8e78 <col:18> 'int' 0
|   |-CompoundAssignOperator 0x28b8a5f9058 <line:331:5, col:19> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x28b8a5f8f80 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a5f8f68 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a5f8f20 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a5f8668 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a5f8f40 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x28b8a5f9040 <col:15, col:19> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x28b8a5f9020 <col:15, col:19> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x28b8a5f9008 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x28b8a5f8fa0 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x28b8a5f86e0 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x28b8a5f8fe0 <col:18> 'int' 1
|   |-CompoundAssignOperator 0x28b8a5f91a0 <line:332:5, col:19> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x28b8a5f90e8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a5f90d0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a5f9088 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a5f8668 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a5f90a8 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x28b8a5f9188 <col:15, col:19> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x28b8a5f9168 <col:15, col:19> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x28b8a5f9150 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x28b8a5f9108 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x28b8a5f86e0 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x28b8a5f9128 <col:18> 'int' 2
|   `-CompoundAssignOperator 0x28b8a5f92e8 <line:333:5, col:19> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|     |-ArraySubscriptExpr 0x28b8a5f9230 <col:5, col:10> 'limb':'int' lvalue
|     | |-ImplicitCastExpr 0x28b8a5f9218 <col:5> 'limb *':'limb *' <LValueToRValue>
|     | | `-DeclRefExpr 0x28b8a5f91d0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a5f8668 'out' 'limb *':'limb *'
|     | `-IntegerLiteral 0x28b8a5f91f0 <col:9> 'int' 3
|     `-ImplicitCastExpr 0x28b8a5f92d0 <col:15, col:19> 'limb':'int' <LValueToRValue>
|       `-ArraySubscriptExpr 0x28b8a5f92b0 <col:15, col:19> 'const limb':'const int' lvalue
|         |-ImplicitCastExpr 0x28b8a5f9298 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|         | `-DeclRefExpr 0x28b8a5f9250 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x28b8a5f86e0 'in' 'const limb *':'const limb *'
|         `-IntegerLiteral 0x28b8a5f9270 <col:18> 'int' 3
|-FunctionDecl 0x28b8a5f9568 <line:343:1, line:373:1> line:343:13 used longfelem_diff 'void (limb *, const limb *)' static
| |-ParmVarDecl 0x28b8a5f9378 <col:28, col:38> col:38 used out 'limb *':'limb *'
| |-ParmVarDecl 0x28b8a5f9460 <col:43, col:59> col:59 used in 'const limb *':'const limb *'
| `-CompoundStmt 0x28b8a5fb848 <line:344:1, line:373:1>
|   |-DeclStmt 0x28b8a5f99a0 <line:345:5, line:346:67>
|   | `-VarDecl 0x28b8a5f9640 <line:345:5, line:346:66> line:345:23 used two70m8p6 'const limb':'const int' static cinit
|   |   `-BinaryOperator 0x28b8a5f9980 <line:346:9, col:66> 'int' '+'
|   |     |-BinaryOperator 0x28b8a5f9878 <col:9, col:46> 'int' '-'
|   |     | |-ParenExpr 0x28b8a5f9770 <col:9, col:26> 'limb':'int'
|   |     | | `-BinaryOperator 0x28b8a5f9750 <col:10, col:24> 'limb':'int' '<<'
|   |     | |   |-ParenExpr 0x28b8a5f9708 <col:10, col:19> 'limb':'int'
|   |     | |   | `-CStyleCastExpr 0x28b8a5f96e0 <col:11, col:18> 'limb':'int' <NoOp>
|   |     | |   |   `-IntegerLiteral 0x28b8a5f96a8 <col:18> 'int' 1
|   |     | |   `-IntegerLiteral 0x28b8a5f9728 <col:24> 'int' 70
|   |     | `-ParenExpr 0x28b8a5f9858 <col:30, col:46> 'limb':'int'
|   |     |   `-BinaryOperator 0x28b8a5f9838 <col:31, col:45> 'limb':'int' '<<'
|   |     |     |-ParenExpr 0x28b8a5f97f0 <col:31, col:40> 'limb':'int'
|   |     |     | `-CStyleCastExpr 0x28b8a5f97c8 <col:32, col:39> 'limb':'int' <NoOp>
|   |     |     |   `-IntegerLiteral 0x28b8a5f9790 <col:39> 'int' 1
|   |     |     `-IntegerLiteral 0x28b8a5f9810 <col:45> 'int' 8
|   |     `-ParenExpr 0x28b8a5f9960 <col:50, col:66> 'limb':'int'
|   |       `-BinaryOperator 0x28b8a5f9940 <col:51, col:65> 'limb':'int' '<<'
|   |         |-ParenExpr 0x28b8a5f98f8 <col:51, col:60> 'limb':'int'
|   |         | `-CStyleCastExpr 0x28b8a5f98d0 <col:52, col:59> 'limb':'int' <NoOp>
|   |         |   `-IntegerLiteral 0x28b8a5f9898 <col:59> 'int' 1
|   |         `-IntegerLiteral 0x28b8a5f9918 <col:65> 'int' 6
|   |-DeclStmt 0x28b8a5f9c20 <line:347:5, col:73>
|   | `-VarDecl 0x28b8a5f99c8 <col:5, col:72> col:23 used two70p40 'const limb':'const int' static cinit
|   |   `-BinaryOperator 0x28b8a5f9c00 <col:34, col:72> 'int' '+'
|   |     |-ParenExpr 0x28b8a5f9af8 <col:34, col:51> 'limb':'int'
|   |     | `-BinaryOperator 0x28b8a5f9ad8 <col:35, col:49> 'limb':'int' '<<'
|   |     |   |-ParenExpr 0x28b8a5f9a90 <col:35, col:44> 'limb':'int'
|   |     |   | `-CStyleCastExpr 0x28b8a5f9a68 <col:36, col:43> 'limb':'int' <NoOp>
|   |     |   |   `-IntegerLiteral 0x28b8a5f9a30 <col:43> 'int' 1
|   |     |   `-IntegerLiteral 0x28b8a5f9ab0 <col:49> 'int' 70
|   |     `-ParenExpr 0x28b8a5f9be0 <col:55, col:72> 'limb':'int'
|   |       `-BinaryOperator 0x28b8a5f9bc0 <col:56, col:70> 'limb':'int' '<<'
|   |         |-ParenExpr 0x28b8a5f9b78 <col:56, col:65> 'limb':'int'
|   |         | `-CStyleCastExpr 0x28b8a5f9b50 <col:57, col:64> 'limb':'int' <NoOp>
|   |         |   `-IntegerLiteral 0x28b8a5f9b18 <col:64> 'int' 1
|   |         `-IntegerLiteral 0x28b8a5f9b98 <col:70> 'int' 40
|   |-DeclStmt 0x28b8a5f9d98 <line:348:5, col:49>
|   | `-VarDecl 0x28b8a5f9c48 <col:5, col:48> col:23 used two70 'const limb':'const int' static cinit
|   |   `-ParenExpr 0x28b8a5f9d78 <col:31, col:48> 'limb':'int'
|   |     `-BinaryOperator 0x28b8a5f9d58 <col:32, col:46> 'limb':'int' '<<'
|   |       |-ParenExpr 0x28b8a5f9d10 <col:32, col:41> 'limb':'int'
|   |       | `-CStyleCastExpr 0x28b8a5f9ce8 <col:33, col:40> 'limb':'int' <NoOp>
|   |       |   `-IntegerLiteral 0x28b8a5f9cb0 <col:40> 'int' 1
|   |       `-IntegerLiteral 0x28b8a5f9d30 <col:46> 'int' 70
|   |-DeclStmt 0x28b8a5fa228 <line:349:5, line:351:26>
|   | `-VarDecl 0x28b8a5f9dc0 <line:349:5, line:351:25> line:349:23 used two70m40m38p6 'const limb':'const int' static cinit
|   |   `-BinaryOperator 0x28b8a5fa208 <line:350:9, line:351:25> 'int' '+'
|   |     |-BinaryOperator 0x28b8a5fa100 <line:350:9, col:68> 'int' '-'
|   |     | |-BinaryOperator 0x28b8a5f9ff8 <col:9, col:47> 'int' '-'
|   |     | | |-ParenExpr 0x28b8a5f9ef0 <col:9, col:26> 'limb':'int'
|   |     | | | `-BinaryOperator 0x28b8a5f9ed0 <col:10, col:24> 'limb':'int' '<<'
|   |     | | |   |-ParenExpr 0x28b8a5f9e88 <col:10, col:19> 'limb':'int'
|   |     | | |   | `-CStyleCastExpr 0x28b8a5f9e60 <col:11, col:18> 'limb':'int' <NoOp>
|   |     | | |   |   `-IntegerLiteral 0x28b8a5f9e28 <col:18> 'int' 1
|   |     | | |   `-IntegerLiteral 0x28b8a5f9ea8 <col:24> 'int' 70
|   |     | | `-ParenExpr 0x28b8a5f9fd8 <col:30, col:47> 'limb':'int'
|   |     | |   `-BinaryOperator 0x28b8a5f9fb8 <col:31, col:45> 'limb':'int' '<<'
|   |     | |     |-ParenExpr 0x28b8a5f9f70 <col:31, col:40> 'limb':'int'
|   |     | |     | `-CStyleCastExpr 0x28b8a5f9f48 <col:32, col:39> 'limb':'int' <NoOp>
|   |     | |     |   `-IntegerLiteral 0x28b8a5f9f10 <col:39> 'int' 1
|   |     | |     `-IntegerLiteral 0x28b8a5f9f90 <col:45> 'int' 40
|   |     | `-ParenExpr 0x28b8a5fa0e0 <col:51, col:68> 'limb':'int'
|   |     |   `-BinaryOperator 0x28b8a5fa0c0 <col:52, col:66> 'limb':'int' '<<'
|   |     |     |-ParenExpr 0x28b8a5fa078 <col:52, col:61> 'limb':'int'
|   |     |     | `-CStyleCastExpr 0x28b8a5fa050 <col:53, col:60> 'limb':'int' <NoOp>
|   |     |     |   `-IntegerLiteral 0x28b8a5fa018 <col:60> 'int' 1
|   |     |     `-IntegerLiteral 0x28b8a5fa098 <col:66> 'int' 38
|   |     `-ParenExpr 0x28b8a5fa1e8 <line:351:9, col:25> 'limb':'int'
|   |       `-BinaryOperator 0x28b8a5fa1c8 <col:10, col:24> 'limb':'int' '<<'
|   |         |-ParenExpr 0x28b8a5fa180 <col:10, col:19> 'limb':'int'
|   |         | `-CStyleCastExpr 0x28b8a5fa158 <col:11, col:18> 'limb':'int' <NoOp>
|   |         |   `-IntegerLiteral 0x28b8a5fa120 <col:18> 'int' 1
|   |         `-IntegerLiteral 0x28b8a5fa1a0 <col:24> 'int' 6
|   |-DeclStmt 0x28b8a5fa4a8 <line:352:5, col:71>
|   | `-VarDecl 0x28b8a5fa250 <col:5, col:70> col:23 used two70m6 'const limb':'const int' static cinit
|   |   `-BinaryOperator 0x28b8a5fa488 <col:33, col:70> 'int' '-'
|   |     |-ParenExpr 0x28b8a5fa380 <col:33, col:50> 'limb':'int'
|   |     | `-BinaryOperator 0x28b8a5fa360 <col:34, col:48> 'limb':'int' '<<'
|   |     |   |-ParenExpr 0x28b8a5fa318 <col:34, col:43> 'limb':'int'
|   |     |   | `-CStyleCastExpr 0x28b8a5fa2f0 <col:35, col:42> 'limb':'int' <NoOp>
|   |     |   |   `-IntegerLiteral 0x28b8a5fa2b8 <col:42> 'int' 1
|   |     |   `-IntegerLiteral 0x28b8a5fa338 <col:48> 'int' 70
|   |     `-ParenExpr 0x28b8a5fa468 <col:54, col:70> 'limb':'int'
|   |       `-BinaryOperator 0x28b8a5fa448 <col:55, col:69> 'limb':'int' '<<'
|   |         |-ParenExpr 0x28b8a5fa400 <col:55, col:64> 'limb':'int'
|   |         | `-CStyleCastExpr 0x28b8a5fa3d8 <col:56, col:63> 'limb':'int' <NoOp>
|   |         |   `-IntegerLiteral 0x28b8a5fa3a0 <col:63> 'int' 1
|   |         `-IntegerLiteral 0x28b8a5fa420 <col:69> 'int' 6
|   |-CompoundAssignOperator 0x28b8a5fa590 <line:355:5, col:15> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x28b8a5fa520 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a5fa508 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a5fa4c0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a5f9378 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a5fa4e0 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x28b8a5fa578 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x28b8a5fa540 <col:15> 'const limb':'const int' lvalue Var 0x28b8a5f9640 'two70m8p6' 'const limb':'const int'
|   |-CompoundAssignOperator 0x28b8a5fa6d8 <line:356:5, col:15> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x28b8a5fa668 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a5fa650 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a5fa608 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a5f9378 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a5fa628 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x28b8a5fa6c0 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x28b8a5fa688 <col:15> 'const limb':'const int' lvalue Var 0x28b8a5f99c8 'two70p40' 'const limb':'const int'
|   |-CompoundAssignOperator 0x28b8a5fa820 <line:357:5, col:15> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x28b8a5fa7b0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a5fa798 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a5fa750 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a5f9378 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a5fa770 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x28b8a5fa808 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x28b8a5fa7d0 <col:15> 'const limb':'const int' lvalue Var 0x28b8a5f9c48 'two70' 'const limb':'const int'
|   |-CompoundAssignOperator 0x28b8a5fa968 <line:358:5, col:15> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x28b8a5fa8f8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a5fa8e0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a5fa898 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a5f9378 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a5fa8b8 <col:9> 'int' 3
|   | `-ImplicitCastExpr 0x28b8a5fa950 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x28b8a5fa918 <col:15> 'const limb':'const int' lvalue Var 0x28b8a5f9dc0 'two70m40m38p6' 'const limb':'const int'
|   |-CompoundAssignOperator 0x28b8a5faab0 <line:359:5, col:15> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x28b8a5faa40 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a5faa28 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a5fa9e0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a5f9378 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a5faa00 <col:9> 'int' 4
|   | `-ImplicitCastExpr 0x28b8a5faa98 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x28b8a5faa60 <col:15> 'const limb':'const int' lvalue Var 0x28b8a5fa250 'two70m6' 'const limb':'const int'
|   |-CompoundAssignOperator 0x28b8a5fabe0 <line:360:5, col:15> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x28b8a5fab88 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a5fab70 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a5fab28 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a5f9378 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a5fab48 <col:9> 'int' 5
|   | `-ImplicitCastExpr 0x28b8a5fabc8 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x28b8a5faba8 <col:15> 'const limb':'const int' lvalue Var 0x28b8a5fa250 'two70m6' 'const limb':'const int'
|   |-CompoundAssignOperator 0x28b8a5facc8 <line:361:5, col:15> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x28b8a5fac70 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a5fac58 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a5fac10 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a5f9378 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a5fac30 <col:9> 'int' 6
|   | `-ImplicitCastExpr 0x28b8a5facb0 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x28b8a5fac90 <col:15> 'const limb':'const int' lvalue Var 0x28b8a5fa250 'two70m6' 'const limb':'const int'
|   |-CompoundAssignOperator 0x28b8a5fadb0 <line:362:5, col:15> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x28b8a5fad58 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a5fad40 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a5facf8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a5f9378 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a5fad18 <col:9> 'int' 7
|   | `-ImplicitCastExpr 0x28b8a5fad98 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x28b8a5fad78 <col:15> 'const limb':'const int' lvalue Var 0x28b8a5fa250 'two70m6' 'const limb':'const int'
|   |-CompoundAssignOperator 0x28b8a5faef8 <line:365:5, col:19> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x28b8a5fae40 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a5fae28 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a5fade0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a5f9378 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a5fae00 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x28b8a5faee0 <col:15, col:19> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x28b8a5faec0 <col:15, col:19> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x28b8a5faea8 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x28b8a5fae60 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x28b8a5f9460 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x28b8a5fae80 <col:18> 'int' 0
|   |-CompoundAssignOperator 0x28b8a5fb068 <line:366:5, col:19> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x28b8a5faf88 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a5faf70 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a5faf28 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a5f9378 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a5faf48 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x28b8a5fb050 <col:15, col:19> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x28b8a5fb030 <col:15, col:19> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x28b8a5fb018 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x28b8a5fafa8 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x28b8a5f9460 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x28b8a5faff0 <col:18> 'int' 1
|   |-CompoundAssignOperator 0x28b8a5fb1b0 <line:367:5, col:19> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x28b8a5fb0f8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a5fb0e0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a5fb098 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a5f9378 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a5fb0b8 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x28b8a5fb198 <col:15, col:19> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x28b8a5fb178 <col:15, col:19> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x28b8a5fb160 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x28b8a5fb118 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x28b8a5f9460 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x28b8a5fb138 <col:18> 'int' 2
|   |-CompoundAssignOperator 0x28b8a5fb2f8 <line:368:5, col:19> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x28b8a5fb240 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a5fb228 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a5fb1e0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a5f9378 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a5fb200 <col:9> 'int' 3
|   | `-ImplicitCastExpr 0x28b8a5fb2e0 <col:15, col:19> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x28b8a5fb2c0 <col:15, col:19> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x28b8a5fb2a8 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x28b8a5fb260 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x28b8a5f9460 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x28b8a5fb280 <col:18> 'int' 3
|   |-CompoundAssignOperator 0x28b8a5fb440 <line:369:5, col:19> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x28b8a5fb388 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a5fb370 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a5fb328 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a5f9378 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a5fb348 <col:9> 'int' 4
|   | `-ImplicitCastExpr 0x28b8a5fb428 <col:15, col:19> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x28b8a5fb408 <col:15, col:19> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x28b8a5fb3f0 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x28b8a5fb3a8 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x28b8a5f9460 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x28b8a5fb3c8 <col:18> 'int' 4
|   |-CompoundAssignOperator 0x28b8a5fb588 <line:370:5, col:19> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x28b8a5fb4d0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a5fb4b8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a5fb470 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a5f9378 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a5fb490 <col:9> 'int' 5
|   | `-ImplicitCastExpr 0x28b8a5fb570 <col:15, col:19> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x28b8a5fb550 <col:15, col:19> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x28b8a5fb538 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x28b8a5fb4f0 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x28b8a5f9460 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x28b8a5fb510 <col:18> 'int' 5
|   |-CompoundAssignOperator 0x28b8a5fb6d0 <line:371:5, col:19> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x28b8a5fb618 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a5fb600 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a5fb5b8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a5f9378 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a5fb5d8 <col:9> 'int' 6
|   | `-ImplicitCastExpr 0x28b8a5fb6b8 <col:15, col:19> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x28b8a5fb698 <col:15, col:19> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x28b8a5fb680 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x28b8a5fb638 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x28b8a5f9460 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x28b8a5fb658 <col:18> 'int' 6
|   `-CompoundAssignOperator 0x28b8a5fb818 <line:372:5, col:19> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|     |-ArraySubscriptExpr 0x28b8a5fb760 <col:5, col:10> 'limb':'int' lvalue
|     | |-ImplicitCastExpr 0x28b8a5fb748 <col:5> 'limb *':'limb *' <LValueToRValue>
|     | | `-DeclRefExpr 0x28b8a5fb700 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a5f9378 'out' 'limb *':'limb *'
|     | `-IntegerLiteral 0x28b8a5fb720 <col:9> 'int' 7
|     `-ImplicitCastExpr 0x28b8a5fb800 <col:15, col:19> 'limb':'int' <LValueToRValue>
|       `-ArraySubscriptExpr 0x28b8a5fb7e0 <col:15, col:19> 'const limb':'const int' lvalue
|         |-ImplicitCastExpr 0x28b8a5fb7c8 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|         | `-DeclRefExpr 0x28b8a5fb780 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x28b8a5f9460 'in' 'const limb *':'const limb *'
|         `-IntegerLiteral 0x28b8a5fb7a0 <col:18> 'int' 7
|-VarDecl 0x28b8a5fb910 <line:381:1, col:73> col:20 used zero110 'const felem':'limb const[4]' static cinit
| `-InitListExpr 0x28b8a5fc148 <col:30, col:73> 'const felem':'limb const[4]'
|   |-BinaryOperator 0x28b8a5fba88 <line:375:18, col:38> 'int' '-'
|   | |-ParenExpr 0x28b8a5fba40 <col:18, col:34> 'limb':'int'
|   | | `-BinaryOperator 0x28b8a5fba20 <col:19, col:32> 'limb':'int' '<<'
|   | |   |-ParenExpr 0x28b8a5fb9d8 <col:19, col:27> 'limb':'int'
|   | |   | `-CStyleCastExpr 0x28b8a5fb9b0 <col:20, col:26> 'limb':'int' <NoOp>
|   | |   |   `-IntegerLiteral 0x28b8a5fb978 <col:26> 'int' 1
|   | |   `-IntegerLiteral 0x28b8a5fb9f8 <col:32> 'int' 64
|   | `-IntegerLiteral 0x28b8a5fba60 <col:38> 'int' 1
|   |-BinaryOperator 0x28b8a5fbcc0 <line:376:22, col:63> 'int' '-'
|   | |-BinaryOperator 0x28b8a5fbc78 <col:22, col:59> 'int' '+'
|   | | |-ParenExpr 0x28b8a5fbb70 <col:22, col:39> 'limb':'int'
|   | | | `-BinaryOperator 0x28b8a5fbb50 <col:23, col:36> 'limb':'int' '<<'
|   | | |   |-ParenExpr 0x28b8a5fbb08 <col:23, col:31> 'limb':'int'
|   | | |   | `-CStyleCastExpr 0x28b8a5fbae0 <col:24, col:30> 'limb':'int' <NoOp>
|   | | |   |   `-IntegerLiteral 0x28b8a5fbaa8 <col:30> 'int' 1
|   | | |   `-IntegerLiteral 0x28b8a5fbb28 <col:36> 'int' 110
|   | | `-ParenExpr 0x28b8a5fbc58 <col:43, col:59> 'limb':'int'
|   | |   `-BinaryOperator 0x28b8a5fbc38 <col:44, col:57> 'limb':'int' '<<'
|   | |     |-ParenExpr 0x28b8a5fbbf0 <col:44, col:52> 'limb':'int'
|   | |     | `-CStyleCastExpr 0x28b8a5fbbc8 <col:45, col:51> 'limb':'int' <NoOp>
|   | |     |   `-IntegerLiteral 0x28b8a5fbb90 <col:51> 'int' 1
|   | |     `-IntegerLiteral 0x28b8a5fbc10 <col:57> 'int' 32
|   | `-IntegerLiteral 0x28b8a5fbc98 <col:63> 'int' 1
|   |-BinaryOperator 0x28b8a5fbeb0 <line:377:19, col:55> 'int' '-'
|   | |-ParenExpr 0x28b8a5fbda8 <col:19, col:35> 'limb':'int'
|   | | `-BinaryOperator 0x28b8a5fbd88 <col:20, col:33> 'limb':'int' '<<'
|   | |   |-ParenExpr 0x28b8a5fbd40 <col:20, col:28> 'limb':'int'
|   | |   | `-CStyleCastExpr 0x28b8a5fbd18 <col:21, col:27> 'limb':'int' <NoOp>
|   | |   |   `-IntegerLiteral 0x28b8a5fbce0 <col:27> 'int' 1
|   | |   `-IntegerLiteral 0x28b8a5fbd60 <col:33> 'int' 64
|   | `-ParenExpr 0x28b8a5fbe90 <col:39, col:55> 'limb':'int'
|   |   `-BinaryOperator 0x28b8a5fbe70 <col:40, col:53> 'limb':'int' '<<'
|   |     |-ParenExpr 0x28b8a5fbe28 <col:40, col:48> 'limb':'int'
|   |     | `-CStyleCastExpr 0x28b8a5fbe00 <col:41, col:47> 'limb':'int' <NoOp>
|   |     |   `-IntegerLiteral 0x28b8a5fbdc8 <col:47> 'int' 1
|   |     `-IntegerLiteral 0x28b8a5fbe48 <col:53> 'int' 46
|   `-BinaryOperator 0x28b8a5fc0a0 <line:378:19, col:55> 'int' '-'
|     |-ParenExpr 0x28b8a5fbf98 <col:19, col:35> 'limb':'int'
|     | `-BinaryOperator 0x28b8a5fbf78 <col:20, col:33> 'limb':'int' '<<'
|     |   |-ParenExpr 0x28b8a5fbf30 <col:20, col:28> 'limb':'int'
|     |   | `-CStyleCastExpr 0x28b8a5fbf08 <col:21, col:27> 'limb':'int' <NoOp>
|     |   |   `-IntegerLiteral 0x28b8a5fbed0 <col:27> 'int' 1
|     |   `-IntegerLiteral 0x28b8a5fbf50 <col:33> 'int' 64
|     `-ParenExpr 0x28b8a5fc080 <col:39, col:55> 'limb':'int'
|       `-BinaryOperator 0x28b8a5fc060 <col:40, col:53> 'limb':'int' '<<'
|         |-ParenExpr 0x28b8a5fc018 <col:40, col:48> 'limb':'int'
|         | `-CStyleCastExpr 0x28b8a5fbff0 <col:41, col:47> 'limb':'int' <NoOp>
|         |   `-IntegerLiteral 0x28b8a5fbfb8 <col:47> 'int' 1
|         `-IntegerLiteral 0x28b8a5fc038 <col:53> 'int' 32
|-FunctionDecl 0x28b8a5fc378 <line:392:1, line:481:1> line:392:13 used felem_shrink 'void (u64 *, const limb *)' static
| |-ParmVarDecl 0x28b8a5fc1b8 <col:26, col:37> col:37 used out 'u64 *':'u64 *'
| |-ParmVarDecl 0x28b8a5fc230 <col:42, col:54> col:54 used in 'const limb *':'const limb *'
| `-CompoundStmt 0x28b8a600040 <line:393:1, line:481:1>
|   |-DeclStmt 0x28b8a5fc4b8 <line:394:5, col:14>
|   | `-VarDecl 0x28b8a5fc450 <col:5, col:11> col:11 used tmp 'felem':'limb [4]'
|   |-DeclStmt 0x28b8a5fc658 <line:395:5, col:19>
|   | |-VarDecl 0x28b8a5fc4e0 <col:5, col:9> col:9 used a 'u64':'unsigned long long'
|   | |-VarDecl 0x28b8a5fc558 <col:5, col:12> col:12 used b 'u64':'unsigned long long'
|   | `-VarDecl 0x28b8a5fc5d0 <col:5, col:15> col:15 used mask 'u64':'unsigned long long'
|   |-DeclStmt 0x28b8a5fc778 <line:396:5, col:18>
|   | |-VarDecl 0x28b8a5fc680 <col:5, col:9> col:9 used high 'u64':'unsigned long long'
|   | `-VarDecl 0x28b8a5fc6f8 <col:5, col:15> col:15 used low 'u64':'unsigned long long'
|   |-DeclStmt 0x28b8a5fc830 <line:397:5, col:56>
|   | `-VarDecl 0x28b8a5fc7a0 <col:5, col:36> col:22 used kPrime3Test 'const u64':'const unsigned long long' static cinit
|   |   `-IntegerLiteral 0x28b8a5fc808 <col:36> 'unsigned long long' 9223372032559808513
|   |-BinaryOperator 0x28b8a5fcbf8 <line:400:5, col:54> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x28b8a5fc8c0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a5fc8a8 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x28b8a5fc848 <col:5> 'felem':'limb [4]' lvalue Var 0x28b8a5fc450 'tmp' 'felem':'limb [4]'
|   | | `-IntegerLiteral 0x28b8a5fc880 <col:9> 'int' 3
|   | `-ImplicitCastExpr 0x28b8a5fcbe0 <col:14, col:54> 'limb':'int' <IntegralCast>
|   |   `-BinaryOperator 0x28b8a5fcbc0 <col:14, col:54> 'unsigned long long' '+'
|   |     |-ImplicitCastExpr 0x28b8a5fcba8 <col:14, col:31> 'unsigned long long' <IntegralCast>
|   |     | `-BinaryOperator 0x28b8a5fca10 <col:14, col:31> 'int' '+'
|   |     |   |-ImplicitCastExpr 0x28b8a5fc9e0 <col:14, col:23> 'limb':'int' <LValueToRValue>
|   |     |   | `-ArraySubscriptExpr 0x28b8a5fc940 <col:14, col:23> 'const limb':'const int' lvalue
|   |     |   |   |-ImplicitCastExpr 0x28b8a5fc928 <col:14> 'const limb *' <ArrayToPointerDecay>
|   |     |   |   | `-DeclRefExpr 0x28b8a5fc8e0 <col:14> 'const felem':'limb const[4]' lvalue Var 0x28b8a5fb910 'zero110' 'const felem':'limb const[4]'
|   |     |   |   `-IntegerLiteral 0x28b8a5fc900 <col:22> 'int' 3
|   |     |   `-ImplicitCastExpr 0x28b8a5fc9f8 <col:27, col:31> 'limb':'int' <LValueToRValue>
|   |     |     `-ArraySubscriptExpr 0x28b8a5fc9c0 <col:27, col:31> 'const limb':'const int' lvalue
|   |     |       |-ImplicitCastExpr 0x28b8a5fc9a8 <col:27> 'const limb *':'const limb *' <LValueToRValue>
|   |     |       | `-DeclRefExpr 0x28b8a5fc960 <col:27> 'const limb *':'const limb *' lvalue ParmVar 0x28b8a5fc230 'in' 'const limb *':'const limb *'
|   |     |       `-IntegerLiteral 0x28b8a5fc980 <col:30> 'int' 3
|   |     `-ParenExpr 0x28b8a5fcb88 <col:35, col:54> 'u64':'unsigned long long'
|   |       `-CStyleCastExpr 0x28b8a5fcb60 <col:36, col:53> 'u64':'unsigned long long' <IntegralCast>
|   |         `-ParenExpr 0x28b8a5fcb40 <col:41, col:53> 'limb':'int'
|   |           `-BinaryOperator 0x28b8a5fcaf0 <col:42, col:51> 'limb':'int' '>>'
|   |             |-ImplicitCastExpr 0x28b8a5fcad8 <col:42, col:46> 'limb':'int' <LValueToRValue>
|   |             | `-ArraySubscriptExpr 0x28b8a5fca90 <col:42, col:46> 'const limb':'const int' lvalue
|   |             |   |-ImplicitCastExpr 0x28b8a5fca78 <col:42> 'const limb *':'const limb *' <LValueToRValue>
|   |             |   | `-DeclRefExpr 0x28b8a5fca30 <col:42> 'const limb *':'const limb *' lvalue ParmVar 0x28b8a5fc230 'in' 'const limb *':'const limb *'
|   |             |   `-IntegerLiteral 0x28b8a5fca50 <col:45> 'int' 2
|   |             `-IntegerLiteral 0x28b8a5fcab0 <col:51> 'int' 64
|   |-BinaryOperator 0x28b8a5fce98 <line:403:5, col:36> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x28b8a5fccc0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a5fcca8 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x28b8a5fcc60 <col:5> 'felem':'limb [4]' lvalue Var 0x28b8a5fc450 'tmp' 'felem':'limb [4]'
|   | | `-IntegerLiteral 0x28b8a5fcc80 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x28b8a5fce80 <col:14, col:36> 'limb':'int' <IntegralCast>
|   |   `-BinaryOperator 0x28b8a5fce60 <col:14, col:36> 'unsigned long long' '+'
|   |     |-ImplicitCastExpr 0x28b8a5fce48 <col:14, col:23> 'unsigned long long' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x28b8a5fce30 <col:14, col:23> 'limb':'int' <LValueToRValue>
|   |     |   `-ArraySubscriptExpr 0x28b8a5fcd40 <col:14, col:23> 'const limb':'const int' lvalue
|   |     |     |-ImplicitCastExpr 0x28b8a5fcd28 <col:14> 'const limb *' <ArrayToPointerDecay>
|   |     |     | `-DeclRefExpr 0x28b8a5fcce0 <col:14> 'const felem':'limb const[4]' lvalue Var 0x28b8a5fb910 'zero110' 'const felem':'limb const[4]'
|   |     |     `-IntegerLiteral 0x28b8a5fcd00 <col:22> 'int' 2
|   |     `-CStyleCastExpr 0x28b8a5fce08 <col:27, col:36> 'u64':'unsigned long long' <IntegralCast>
|   |       `-ImplicitCastExpr 0x28b8a5fcdf0 <col:32, col:36> 'limb':'int' <LValueToRValue> part_of_explicit_cast
|   |         `-ArraySubscriptExpr 0x28b8a5fcdc0 <col:32, col:36> 'const limb':'const int' lvalue
|   |           |-ImplicitCastExpr 0x28b8a5fcda8 <col:32> 'const limb *':'const limb *' <LValueToRValue>
|   |           | `-DeclRefExpr 0x28b8a5fcd60 <col:32> 'const limb *':'const limb *' lvalue ParmVar 0x28b8a5fc230 'in' 'const limb *':'const limb *'
|   |           `-IntegerLiteral 0x28b8a5fcd80 <col:35> 'int' 2
|   |-BinaryOperator 0x28b8a5fd0b0 <line:404:5, col:31> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x28b8a5fcf18 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a5fcf00 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x28b8a5fceb8 <col:5> 'felem':'limb [4]' lvalue Var 0x28b8a5fc450 'tmp' 'felem':'limb [4]'
|   | | `-IntegerLiteral 0x28b8a5fced8 <col:9> 'int' 0
|   | `-BinaryOperator 0x28b8a5fd090 <col:14, col:31> 'int' '+'
|   |   |-ImplicitCastExpr 0x28b8a5fd060 <col:14, col:23> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x28b8a5fcf98 <col:14, col:23> 'const limb':'const int' lvalue
|   |   |   |-ImplicitCastExpr 0x28b8a5fcf80 <col:14> 'const limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x28b8a5fcf38 <col:14> 'const felem':'limb const[4]' lvalue Var 0x28b8a5fb910 'zero110' 'const felem':'limb const[4]'
|   |   |   `-IntegerLiteral 0x28b8a5fcf58 <col:22> 'int' 0
|   |   `-ImplicitCastExpr 0x28b8a5fd078 <col:27, col:31> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x28b8a5fd040 <col:27, col:31> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x28b8a5fd028 <col:27> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x28b8a5fcfb8 <col:27> 'const limb *':'const limb *' lvalue ParmVar 0x28b8a5fc230 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x28b8a5fd000 <col:30> 'int' 0
|   |-BinaryOperator 0x28b8a5fd2a0 <line:405:5, col:31> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x28b8a5fd130 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a5fd118 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x28b8a5fd0d0 <col:5> 'felem':'limb [4]' lvalue Var 0x28b8a5fc450 'tmp' 'felem':'limb [4]'
|   | | `-IntegerLiteral 0x28b8a5fd0f0 <col:9> 'int' 1
|   | `-BinaryOperator 0x28b8a5fd280 <col:14, col:31> 'int' '+'
|   |   |-ImplicitCastExpr 0x28b8a5fd250 <col:14, col:23> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x28b8a5fd1b0 <col:14, col:23> 'const limb':'const int' lvalue
|   |   |   |-ImplicitCastExpr 0x28b8a5fd198 <col:14> 'const limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x28b8a5fd150 <col:14> 'const felem':'limb const[4]' lvalue Var 0x28b8a5fb910 'zero110' 'const felem':'limb const[4]'
|   |   |   `-IntegerLiteral 0x28b8a5fd170 <col:22> 'int' 1
|   |   `-ImplicitCastExpr 0x28b8a5fd268 <col:27, col:31> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x28b8a5fd230 <col:27, col:31> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x28b8a5fd218 <col:27> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x28b8a5fd1d0 <col:27> 'const limb *':'const limb *' lvalue ParmVar 0x28b8a5fc230 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x28b8a5fd1f0 <col:30> 'int' 1
|   |-BinaryOperator 0x28b8a5fd3f0 <line:412:5, col:19> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x28b8a5fd2c0 <col:5> 'u64':'unsigned long long' lvalue Var 0x28b8a5fc4e0 'a' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x28b8a5fd3d8 <col:9, col:19> 'u64':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x28b8a5fd3b8 <col:9, col:19> 'limb':'int' '>>'
|   |     |-ImplicitCastExpr 0x28b8a5fd3a0 <col:9, col:14> 'limb':'int' <LValueToRValue>
|   |     | `-ArraySubscriptExpr 0x28b8a5fd358 <col:9, col:14> 'limb':'int' lvalue
|   |     |   |-ImplicitCastExpr 0x28b8a5fd340 <col:9> 'limb *' <ArrayToPointerDecay>
|   |     |   | `-DeclRefExpr 0x28b8a5fd2f8 <col:9> 'felem':'limb [4]' lvalue Var 0x28b8a5fc450 'tmp' 'felem':'limb [4]'
|   |     |   `-IntegerLiteral 0x28b8a5fd318 <col:13> 'int' 3
|   |     `-IntegerLiteral 0x28b8a5fd378 <col:19> 'int' 64
|   |-BinaryOperator 0x28b8a5fd578 <line:413:5, col:24> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x28b8a5fd470 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a5fd458 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x28b8a5fd410 <col:5> 'felem':'limb [4]' lvalue Var 0x28b8a5fc450 'tmp' 'felem':'limb [4]'
|   | | `-IntegerLiteral 0x28b8a5fd430 <col:9> 'int' 3
|   | `-ImplicitCastExpr 0x28b8a5fd560 <col:14, col:24> 'limb':'int' <IntegralCast>
|   |   `-CStyleCastExpr 0x28b8a5fd538 <col:14, col:24> 'u64':'unsigned long long' <IntegralCast>
|   |     `-ImplicitCastExpr 0x28b8a5fd520 <col:19, col:24> 'limb':'int' <LValueToRValue> part_of_explicit_cast
|   |       `-ArraySubscriptExpr 0x28b8a5fd4f0 <col:19, col:24> 'limb':'int' lvalue
|   |         |-ImplicitCastExpr 0x28b8a5fd4d8 <col:19> 'limb *' <ArrayToPointerDecay>
|   |         | `-DeclRefExpr 0x28b8a5fd490 <col:19> 'felem':'limb [4]' lvalue Var 0x28b8a5fc450 'tmp' 'felem':'limb [4]'
|   |         `-IntegerLiteral 0x28b8a5fd4b0 <col:23> 'int' 3
|   |-CompoundAssignOperator 0x28b8a5fd650 <line:414:5, col:15> 'limb':'int' '-=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x28b8a5fd5f8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a5fd5e0 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x28b8a5fd598 <col:5> 'felem':'limb [4]' lvalue Var 0x28b8a5fc450 'tmp' 'felem':'limb [4]'
|   | | `-IntegerLiteral 0x28b8a5fd5b8 <col:9> 'int' 3
|   | `-ImplicitCastExpr 0x28b8a5fd638 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x28b8a5fd618 <col:15> 'u64':'unsigned long long' lvalue Var 0x28b8a5fc4e0 'a' 'u64':'unsigned long long'
|   |-CompoundAssignOperator 0x28b8a5fd7d8 <line:415:5, col:29> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x28b8a5fd6e0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a5fd6c8 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x28b8a5fd680 <col:5> 'felem':'limb [4]' lvalue Var 0x28b8a5fc450 'tmp' 'felem':'limb [4]'
|   | | `-IntegerLiteral 0x28b8a5fd6a0 <col:9> 'int' 3
|   | `-BinaryOperator 0x28b8a5fd7b8 <col:15, col:29> 'limb':'int' '<<'
|   |   |-ParenExpr 0x28b8a5fd770 <col:15, col:24> 'limb':'int'
|   |   | `-CStyleCastExpr 0x28b8a5fd748 <col:16, col:23> 'limb':'int' <IntegralCast>
|   |   |   `-ImplicitCastExpr 0x28b8a5fd730 <col:23> 'u64':'unsigned long long' <LValueToRValue> part_of_explicit_cast
|   |   |     `-DeclRefExpr 0x28b8a5fd700 <col:23> 'u64':'unsigned long long' lvalue Var 0x28b8a5fc4e0 'a' 'u64':'unsigned long long'
|   |   `-IntegerLiteral 0x28b8a5fd790 <col:29> 'int' 32
|   |-BinaryOperator 0x28b8a5fd878 <line:418:5, col:9> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x28b8a5fd808 <col:5> 'u64':'unsigned long long' lvalue Var 0x28b8a5fc558 'b' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x28b8a5fd860 <col:9> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x28b8a5fd840 <col:9> 'u64':'unsigned long long' lvalue Var 0x28b8a5fc4e0 'a' 'u64':'unsigned long long'
|   |-BinaryOperator 0x28b8a5fd9b0 <line:419:5, col:19> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x28b8a5fd898 <col:5> 'u64':'unsigned long long' lvalue Var 0x28b8a5fc4e0 'a' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x28b8a5fd998 <col:9, col:19> 'u64':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x28b8a5fd978 <col:9, col:19> 'limb':'int' '>>'
|   |     |-ImplicitCastExpr 0x28b8a5fd960 <col:9, col:14> 'limb':'int' <LValueToRValue>
|   |     | `-ArraySubscriptExpr 0x28b8a5fd918 <col:9, col:14> 'limb':'int' lvalue
|   |     |   |-ImplicitCastExpr 0x28b8a5fd900 <col:9> 'limb *' <ArrayToPointerDecay>
|   |     |   | `-DeclRefExpr 0x28b8a5fd8b8 <col:9> 'felem':'limb [4]' lvalue Var 0x28b8a5fc450 'tmp' 'felem':'limb [4]'
|   |     |   `-IntegerLiteral 0x28b8a5fd8d8 <col:13> 'int' 3
|   |     `-IntegerLiteral 0x28b8a5fd938 <col:19> 'int' 64
|   |-CompoundAssignOperator 0x28b8a5fda28 <line:420:5, col:10> 'u64':'unsigned long long' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-DeclRefExpr 0x28b8a5fd9d0 <col:5> 'u64':'unsigned long long' lvalue Var 0x28b8a5fc558 'b' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x28b8a5fda10 <col:10> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x28b8a5fd9f0 <col:10> 'u64':'unsigned long long' lvalue Var 0x28b8a5fc4e0 'a' 'u64':'unsigned long long'
|   |-BinaryOperator 0x28b8a5fdbc0 <line:421:5, col:24> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x28b8a5fdab8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a5fdaa0 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x28b8a5fda58 <col:5> 'felem':'limb [4]' lvalue Var 0x28b8a5fc450 'tmp' 'felem':'limb [4]'
|   | | `-IntegerLiteral 0x28b8a5fda78 <col:9> 'int' 3
|   | `-ImplicitCastExpr 0x28b8a5fdba8 <col:14, col:24> 'limb':'int' <IntegralCast>
|   |   `-CStyleCastExpr 0x28b8a5fdb80 <col:14, col:24> 'u64':'unsigned long long' <IntegralCast>
|   |     `-ImplicitCastExpr 0x28b8a5fdb68 <col:19, col:24> 'limb':'int' <LValueToRValue> part_of_explicit_cast
|   |       `-ArraySubscriptExpr 0x28b8a5fdb38 <col:19, col:24> 'limb':'int' lvalue
|   |         |-ImplicitCastExpr 0x28b8a5fdb20 <col:19> 'limb *' <ArrayToPointerDecay>
|   |         | `-DeclRefExpr 0x28b8a5fdad8 <col:19> 'felem':'limb [4]' lvalue Var 0x28b8a5fc450 'tmp' 'felem':'limb [4]'
|   |         `-IntegerLiteral 0x28b8a5fdaf8 <col:23> 'int' 3
|   |-CompoundAssignOperator 0x28b8a5fdc98 <line:422:5, col:15> 'limb':'int' '-=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x28b8a5fdc40 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a5fdc28 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x28b8a5fdbe0 <col:5> 'felem':'limb [4]' lvalue Var 0x28b8a5fc450 'tmp' 'felem':'limb [4]'
|   | | `-IntegerLiteral 0x28b8a5fdc00 <col:9> 'int' 3
|   | `-ImplicitCastExpr 0x28b8a5fdc80 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x28b8a5fdc60 <col:15> 'u64':'unsigned long long' lvalue Var 0x28b8a5fc4e0 'a' 'u64':'unsigned long long'
|   |-CompoundAssignOperator 0x28b8a5fde20 <line:423:5, col:29> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x28b8a5fdd28 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a5fdd10 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x28b8a5fdcc8 <col:5> 'felem':'limb [4]' lvalue Var 0x28b8a5fc450 'tmp' 'felem':'limb [4]'
|   | | `-IntegerLiteral 0x28b8a5fdce8 <col:9> 'int' 3
|   | `-BinaryOperator 0x28b8a5fde00 <col:15, col:29> 'limb':'int' '<<'
|   |   |-ParenExpr 0x28b8a5fddb8 <col:15, col:24> 'limb':'int'
|   |   | `-CStyleCastExpr 0x28b8a5fdd90 <col:16, col:23> 'limb':'int' <IntegralCast>
|   |   |   `-ImplicitCastExpr 0x28b8a5fdd78 <col:23> 'u64':'unsigned long long' <LValueToRValue> part_of_explicit_cast
|   |   |     `-DeclRefExpr 0x28b8a5fdd48 <col:23> 'u64':'unsigned long long' lvalue Var 0x28b8a5fc4e0 'a' 'u64':'unsigned long long'
|   |   `-IntegerLiteral 0x28b8a5fddd8 <col:29> 'int' 32
|   |-CompoundAssignOperator 0x28b8a5fdf08 <line:430:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x28b8a5fdeb0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a5fde98 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x28b8a5fde50 <col:5> 'felem':'limb [4]' lvalue Var 0x28b8a5fc450 'tmp' 'felem':'limb [4]'
|   | | `-IntegerLiteral 0x28b8a5fde70 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x28b8a5fdef0 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x28b8a5fded0 <col:15> 'u64':'unsigned long long' lvalue Var 0x28b8a5fc558 'b' 'u64':'unsigned long long'
|   |-CompoundAssignOperator 0x28b8a5fe0b0 <line:431:5, col:32> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x28b8a5fdf98 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a5fdf80 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x28b8a5fdf38 <col:5> 'felem':'limb [4]' lvalue Var 0x28b8a5fc450 'tmp' 'felem':'limb [4]'
|   | | `-IntegerLiteral 0x28b8a5fdf58 <col:9> 'int' 1
|   | `-ParenExpr 0x28b8a5fe090 <col:15, col:32> 'limb':'int'
|   |   `-BinaryOperator 0x28b8a5fe070 <col:16, col:30> 'limb':'int' '<<'
|   |     |-ParenExpr 0x28b8a5fe028 <col:16, col:25> 'limb':'int'
|   |     | `-CStyleCastExpr 0x28b8a5fe000 <col:17, col:24> 'limb':'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x28b8a5fdfe8 <col:24> 'u64':'unsigned long long' <LValueToRValue> part_of_explicit_cast
|   |     |     `-DeclRefExpr 0x28b8a5fdfb8 <col:24> 'u64':'unsigned long long' lvalue Var 0x28b8a5fc558 'b' 'u64':'unsigned long long'
|   |     `-IntegerLiteral 0x28b8a5fe048 <col:30> 'int' 32
|   |-BinaryOperator 0x28b8a5fe270 <line:437:5, col:30> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x28b8a5fe0e0 <col:5> 'u64':'unsigned long long' lvalue Var 0x28b8a5fc680 'high' 'u64':'unsigned long long'
|   | `-CStyleCastExpr 0x28b8a5fe248 <col:12, col:30> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ParenExpr 0x28b8a5fe228 <col:17, col:30> 'limb':'int'
|   |     `-BinaryOperator 0x28b8a5fe1d8 <col:18, col:28> 'limb':'int' '>>'
|   |       |-ImplicitCastExpr 0x28b8a5fe1c0 <col:18, col:23> 'limb':'int' <LValueToRValue>
|   |       | `-ArraySubscriptExpr 0x28b8a5fe178 <col:18, col:23> 'limb':'int' lvalue
|   |       |   |-ImplicitCastExpr 0x28b8a5fe160 <col:18> 'limb *' <ArrayToPointerDecay>
|   |       |   | `-DeclRefExpr 0x28b8a5fe118 <col:18> 'felem':'limb [4]' lvalue Var 0x28b8a5fc450 'tmp' 'felem':'limb [4]'
|   |       |   `-IntegerLiteral 0x28b8a5fe138 <col:22> 'int' 3
|   |       `-IntegerLiteral 0x28b8a5fe198 <col:28> 'int' 64
|   |-BinaryOperator 0x28b8a5fe348 <line:439:5, col:16> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x28b8a5fe290 <col:5> 'u64':'unsigned long long' lvalue Var 0x28b8a5fc680 'high' 'u64':'unsigned long long'
|   | `-BinaryOperator 0x28b8a5fe328 <col:12, col:16> 'unsigned long long' '-'
|   |   |-ImplicitCastExpr 0x28b8a5fe310 <col:12> 'unsigned long long' <IntegralCast>
|   |   | `-IntegerLiteral 0x28b8a5fe2b0 <col:12> 'int' 0
|   |   `-ImplicitCastExpr 0x28b8a5fe2f8 <col:16> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-DeclRefExpr 0x28b8a5fe2d8 <col:16> 'u64':'unsigned long long' lvalue Var 0x28b8a5fc680 'high' 'u64':'unsigned long long'
|   |-BinaryOperator 0x28b8a5fe470 <line:445:5, col:21> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x28b8a5fe368 <col:5> 'u64':'unsigned long long' lvalue Var 0x28b8a5fc6f8 'low' 'u64':'unsigned long long'
|   | `-CStyleCastExpr 0x28b8a5fe448 <col:11, col:21> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x28b8a5fe430 <col:16, col:21> 'limb':'int' <LValueToRValue> part_of_explicit_cast
|   |     `-ArraySubscriptExpr 0x28b8a5fe400 <col:16, col:21> 'limb':'int' lvalue
|   |       |-ImplicitCastExpr 0x28b8a5fe3e8 <col:16> 'limb *' <ArrayToPointerDecay>
|   |       | `-DeclRefExpr 0x28b8a5fe3a0 <col:16> 'felem':'limb [4]' lvalue Var 0x28b8a5fc450 'tmp' 'felem':'limb [4]'
|   |       `-IntegerLiteral 0x28b8a5fe3c0 <col:20> 'int' 3
|   |-BinaryOperator 0x28b8a5fe5c8 <line:446:5, col:26> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x28b8a5fe490 <col:5> 'u64':'unsigned long long' lvalue Var 0x28b8a5fc5d0 'mask' 'u64':'unsigned long long'
|   | `-BinaryOperator 0x28b8a5fe5a8 <col:12, col:26> 'unsigned long long' '-'
|   |   |-ImplicitCastExpr 0x28b8a5fe590 <col:12> 'unsigned long long' <IntegralCast>
|   |   | `-IntegerLiteral 0x28b8a5fe4c8 <col:12> 'int' 0
|   |   `-ParenExpr 0x28b8a5fe570 <col:16, col:26> 'u64':'unsigned long long'
|   |     `-BinaryOperator 0x28b8a5fe550 <col:17, col:24> 'u64':'unsigned long long' '>>'
|   |       |-ImplicitCastExpr 0x28b8a5fe538 <col:17> 'u64':'unsigned long long' <LValueToRValue>
|   |       | `-DeclRefExpr 0x28b8a5fe4f0 <col:17> 'u64':'unsigned long long' lvalue Var 0x28b8a5fc6f8 'low' 'u64':'unsigned long long'
|   |       `-IntegerLiteral 0x28b8a5fe510 <col:24> 'int' 63
|   |-CompoundAssignOperator 0x28b8a5fe640 <line:452:5, col:12> 'u64':'unsigned long long' '&=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-DeclRefExpr 0x28b8a5fe5e8 <col:5> 'u64':'unsigned long long' lvalue Var 0x28b8a5fc6f8 'low' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x28b8a5fe628 <col:12> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x28b8a5fe608 <col:12> 'const u64':'const unsigned long long' lvalue Var 0x28b8a6e7b58 'bottom63bits' 'const u64':'const unsigned long long'
|   |-CompoundAssignOperator 0x28b8a5fe728 <line:453:5, col:12> 'u64':'unsigned long long' '-=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-DeclRefExpr 0x28b8a5fe6b8 <col:5> 'u64':'unsigned long long' lvalue Var 0x28b8a5fc6f8 'low' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x28b8a5fe710 <col:12> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x28b8a5fe6d8 <col:12> 'const u64':'const unsigned long long' lvalue Var 0x28b8a5fc7a0 'kPrime3Test' 'const u64':'const unsigned long long'
|   |-BinaryOperator 0x28b8a5fe810 <line:455:5, col:12> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x28b8a5fe7a0 <col:5> 'u64':'unsigned long long' lvalue Var 0x28b8a5fc6f8 'low' 'u64':'unsigned long long'
|   | `-UnaryOperator 0x28b8a5fe7f8 <col:11, col:12> 'u64':'unsigned long long' prefix '~' cannot overflow
|   |   `-ImplicitCastExpr 0x28b8a5fe7e0 <col:12> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-DeclRefExpr 0x28b8a5fe7c0 <col:12> 'u64':'unsigned long long' lvalue Var 0x28b8a5fc6f8 'low' 'u64':'unsigned long long'
|   |-BinaryOperator 0x28b8a5fe950 <line:456:5, col:25> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x28b8a5fe830 <col:5> 'u64':'unsigned long long' lvalue Var 0x28b8a5fc6f8 'low' 'u64':'unsigned long long'
|   | `-BinaryOperator 0x28b8a5fe930 <col:11, col:25> 'unsigned long long' '-'
|   |   |-ImplicitCastExpr 0x28b8a5fe918 <col:11> 'unsigned long long' <IntegralCast>
|   |   | `-IntegerLiteral 0x28b8a5fe850 <col:11> 'int' 0
|   |   `-ParenExpr 0x28b8a5fe8f8 <col:15, col:25> 'u64':'unsigned long long'
|   |     `-BinaryOperator 0x28b8a5fe8d8 <col:16, col:23> 'u64':'unsigned long long' '>>'
|   |       |-ImplicitCastExpr 0x28b8a5fe8c0 <col:16> 'u64':'unsigned long long' <LValueToRValue>
|   |       | `-DeclRefExpr 0x28b8a5fe878 <col:16> 'u64':'unsigned long long' lvalue Var 0x28b8a5fc6f8 'low' 'u64':'unsigned long long'
|   |       `-IntegerLiteral 0x28b8a5fe898 <col:23> 'int' 63
|   |-BinaryOperator 0x28b8a5fea98 <line:462:5, col:27> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x28b8a5fe970 <col:5> 'u64':'unsigned long long' lvalue Var 0x28b8a5fc5d0 'mask' 'u64':'unsigned long long'
|   | `-BinaryOperator 0x28b8a5fea78 <col:12, col:27> 'unsigned long long' '|'
|   |   |-ParenExpr 0x28b8a5fea20 <col:12, col:23> 'unsigned long long'
|   |   | `-BinaryOperator 0x28b8a5fea00 <col:13, col:20> 'unsigned long long' '&'
|   |   |   |-ImplicitCastExpr 0x28b8a5fe9d0 <col:13> 'u64':'unsigned long long' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x28b8a5fe990 <col:13> 'u64':'unsigned long long' lvalue Var 0x28b8a5fc5d0 'mask' 'u64':'unsigned long long'
|   |   |   `-ImplicitCastExpr 0x28b8a5fe9e8 <col:20> 'u64':'unsigned long long' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x28b8a5fe9b0 <col:20> 'u64':'unsigned long long' lvalue Var 0x28b8a5fc6f8 'low' 'u64':'unsigned long long'
|   |   `-ImplicitCastExpr 0x28b8a5fea60 <col:27> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-DeclRefExpr 0x28b8a5fea40 <col:27> 'u64':'unsigned long long' lvalue Var 0x28b8a5fc680 'high' 'u64':'unsigned long long'
|   |-CompoundAssignOperator 0x28b8a5fec28 <line:463:5, col:30> 'limb':'int' '-=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x28b8a5feb18 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a5feb00 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x28b8a5feab8 <col:5> 'felem':'limb [4]' lvalue Var 0x28b8a5fc450 'tmp' 'felem':'limb [4]'
|   | | `-IntegerLiteral 0x28b8a5fead8 <col:9> 'int' 0
|   | `-BinaryOperator 0x28b8a5fec08 <col:15, col:30> 'unsigned long long' '&'
|   |   |-ImplicitCastExpr 0x28b8a5febd8 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x28b8a5feb38 <col:15> 'u64':'unsigned long long' lvalue Var 0x28b8a5fc5d0 'mask' 'u64':'unsigned long long'
|   |   `-ImplicitCastExpr 0x28b8a5febf0 <col:22, col:30> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x28b8a5febb8 <col:22, col:30> 'const u64':'const unsigned long long' lvalue
|   |       |-ImplicitCastExpr 0x28b8a5feba0 <col:22> 'const u64 *' <ArrayToPointerDecay>
|   |       | `-DeclRefExpr 0x28b8a5feb58 <col:22> 'const u64 [4]' lvalue Var 0x28b8a6e7928 'kPrime' 'const u64 [4]'
|   |       `-IntegerLiteral 0x28b8a5feb78 <col:29> 'int' 0
|   |-CompoundAssignOperator 0x28b8a5fee10 <line:464:5, col:30> 'limb':'int' '-=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x28b8a5fed00 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a5fece8 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x28b8a5feca0 <col:5> 'felem':'limb [4]' lvalue Var 0x28b8a5fc450 'tmp' 'felem':'limb [4]'
|   | | `-IntegerLiteral 0x28b8a5fecc0 <col:9> 'int' 1
|   | `-BinaryOperator 0x28b8a5fedf0 <col:15, col:30> 'unsigned long long' '&'
|   |   |-ImplicitCastExpr 0x28b8a5fedc0 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x28b8a5fed20 <col:15> 'u64':'unsigned long long' lvalue Var 0x28b8a5fc5d0 'mask' 'u64':'unsigned long long'
|   |   `-ImplicitCastExpr 0x28b8a5fedd8 <col:22, col:30> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x28b8a5feda0 <col:22, col:30> 'const u64':'const unsigned long long' lvalue
|   |       |-ImplicitCastExpr 0x28b8a5fed88 <col:22> 'const u64 *' <ArrayToPointerDecay>
|   |       | `-DeclRefExpr 0x28b8a5fed40 <col:22> 'const u64 [4]' lvalue Var 0x28b8a6e7928 'kPrime' 'const u64 [4]'
|   |       `-IntegerLiteral 0x28b8a5fed60 <col:29> 'int' 1
|   |-CompoundAssignOperator 0x28b8a5fefb0 <line:466:5, col:30> 'limb':'int' '-=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x28b8a5feea0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a5fee88 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x28b8a5fee40 <col:5> 'felem':'limb [4]' lvalue Var 0x28b8a5fc450 'tmp' 'felem':'limb [4]'
|   | | `-IntegerLiteral 0x28b8a5fee60 <col:9> 'int' 3
|   | `-BinaryOperator 0x28b8a5fef90 <col:15, col:30> 'unsigned long long' '&'
|   |   |-ImplicitCastExpr 0x28b8a5fef60 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x28b8a5feec0 <col:15> 'u64':'unsigned long long' lvalue Var 0x28b8a5fc5d0 'mask' 'u64':'unsigned long long'
|   |   `-ImplicitCastExpr 0x28b8a5fef78 <col:22, col:30> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x28b8a5fef40 <col:22, col:30> 'const u64':'const unsigned long long' lvalue
|   |       |-ImplicitCastExpr 0x28b8a5fef28 <col:22> 'const u64 *' <ArrayToPointerDecay>
|   |       | `-DeclRefExpr 0x28b8a5feee0 <col:22> 'const u64 [4]' lvalue Var 0x28b8a6e7928 'kPrime' 'const u64 [4]'
|   |       `-IntegerLiteral 0x28b8a5fef00 <col:29> 'int' 3
|   |-CompoundAssignOperator 0x28b8a5ff1e8 <line:469:5, col:35> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x28b8a5ff050 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a5ff038 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x28b8a5fefe0 <col:5> 'felem':'limb [4]' lvalue Var 0x28b8a5fc450 'tmp' 'felem':'limb [4]'
|   | | `-IntegerLiteral 0x28b8a5ff010 <col:9> 'int' 1
|   | `-ParenExpr 0x28b8a5ff1c8 <col:15, col:35> 'u64':'unsigned long long'
|   |   `-CStyleCastExpr 0x28b8a5ff1a0 <col:16, col:34> 'u64':'unsigned long long' <IntegralCast>
|   |     `-ParenExpr 0x28b8a5ff180 <col:21, col:34> 'limb':'int'
|   |       `-BinaryOperator 0x28b8a5ff130 <col:22, col:32> 'limb':'int' '>>'
|   |         |-ImplicitCastExpr 0x28b8a5ff118 <col:22, col:27> 'limb':'int' <LValueToRValue>
|   |         | `-ArraySubscriptExpr 0x28b8a5ff0d0 <col:22, col:27> 'limb':'int' lvalue
|   |         |   |-ImplicitCastExpr 0x28b8a5ff0b8 <col:22> 'limb *' <ArrayToPointerDecay>
|   |         |   | `-DeclRefExpr 0x28b8a5ff070 <col:22> 'felem':'limb [4]' lvalue Var 0x28b8a5fc450 'tmp' 'felem':'limb [4]'
|   |         |   `-IntegerLiteral 0x28b8a5ff090 <col:26> 'int' 0
|   |         `-IntegerLiteral 0x28b8a5ff0f0 <col:32> 'int' 64
|   |-BinaryOperator 0x28b8a5ff380 <line:470:5, col:24> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x28b8a5ff278 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a5ff260 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x28b8a5ff218 <col:5> 'felem':'limb [4]' lvalue Var 0x28b8a5fc450 'tmp' 'felem':'limb [4]'
|   | | `-IntegerLiteral 0x28b8a5ff238 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x28b8a5ff368 <col:14, col:24> 'limb':'int' <IntegralCast>
|   |   `-CStyleCastExpr 0x28b8a5ff340 <col:14, col:24> 'u64':'unsigned long long' <IntegralCast>
|   |     `-ImplicitCastExpr 0x28b8a5ff328 <col:19, col:24> 'limb':'int' <LValueToRValue> part_of_explicit_cast
|   |       `-ArraySubscriptExpr 0x28b8a5ff2f8 <col:19, col:24> 'limb':'int' lvalue
|   |         |-ImplicitCastExpr 0x28b8a5ff2e0 <col:19> 'limb *' <ArrayToPointerDecay>
|   |         | `-DeclRefExpr 0x28b8a5ff298 <col:19> 'felem':'limb [4]' lvalue Var 0x28b8a5fc450 'tmp' 'felem':'limb [4]'
|   |         `-IntegerLiteral 0x28b8a5ff2b8 <col:23> 'int' 0
|   |-CompoundAssignOperator 0x28b8a5ff598 <line:471:5, col:35> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x28b8a5ff400 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a5ff3e8 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x28b8a5ff3a0 <col:5> 'felem':'limb [4]' lvalue Var 0x28b8a5fc450 'tmp' 'felem':'limb [4]'
|   | | `-IntegerLiteral 0x28b8a5ff3c0 <col:9> 'int' 2
|   | `-ParenExpr 0x28b8a5ff578 <col:15, col:35> 'u64':'unsigned long long'
|   |   `-CStyleCastExpr 0x28b8a5ff550 <col:16, col:34> 'u64':'unsigned long long' <IntegralCast>
|   |     `-ParenExpr 0x28b8a5ff530 <col:21, col:34> 'limb':'int'
|   |       `-BinaryOperator 0x28b8a5ff4e0 <col:22, col:32> 'limb':'int' '>>'
|   |         |-ImplicitCastExpr 0x28b8a5ff4c8 <col:22, col:27> 'limb':'int' <LValueToRValue>
|   |         | `-ArraySubscriptExpr 0x28b8a5ff480 <col:22, col:27> 'limb':'int' lvalue
|   |         |   |-ImplicitCastExpr 0x28b8a5ff468 <col:22> 'limb *' <ArrayToPointerDecay>
|   |         |   | `-DeclRefExpr 0x28b8a5ff420 <col:22> 'felem':'limb [4]' lvalue Var 0x28b8a5fc450 'tmp' 'felem':'limb [4]'
|   |         |   `-IntegerLiteral 0x28b8a5ff440 <col:26> 'int' 1
|   |         `-IntegerLiteral 0x28b8a5ff4a0 <col:32> 'int' 64
|   |-BinaryOperator 0x28b8a5ff730 <line:472:5, col:24> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x28b8a5ff628 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a5ff610 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x28b8a5ff5c8 <col:5> 'felem':'limb [4]' lvalue Var 0x28b8a5fc450 'tmp' 'felem':'limb [4]'
|   | | `-IntegerLiteral 0x28b8a5ff5e8 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x28b8a5ff718 <col:14, col:24> 'limb':'int' <IntegralCast>
|   |   `-CStyleCastExpr 0x28b8a5ff6f0 <col:14, col:24> 'u64':'unsigned long long' <IntegralCast>
|   |     `-ImplicitCastExpr 0x28b8a5ff6d8 <col:19, col:24> 'limb':'int' <LValueToRValue> part_of_explicit_cast
|   |       `-ArraySubscriptExpr 0x28b8a5ff6a8 <col:19, col:24> 'limb':'int' lvalue
|   |         |-ImplicitCastExpr 0x28b8a5ff690 <col:19> 'limb *' <ArrayToPointerDecay>
|   |         | `-DeclRefExpr 0x28b8a5ff648 <col:19> 'felem':'limb [4]' lvalue Var 0x28b8a5fc450 'tmp' 'felem':'limb [4]'
|   |         `-IntegerLiteral 0x28b8a5ff668 <col:23> 'int' 1
|   |-CompoundAssignOperator 0x28b8a5ff948 <line:473:5, col:35> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x28b8a5ff7b0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a5ff798 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x28b8a5ff750 <col:5> 'felem':'limb [4]' lvalue Var 0x28b8a5fc450 'tmp' 'felem':'limb [4]'
|   | | `-IntegerLiteral 0x28b8a5ff770 <col:9> 'int' 3
|   | `-ParenExpr 0x28b8a5ff928 <col:15, col:35> 'u64':'unsigned long long'
|   |   `-CStyleCastExpr 0x28b8a5ff900 <col:16, col:34> 'u64':'unsigned long long' <IntegralCast>
|   |     `-ParenExpr 0x28b8a5ff8e0 <col:21, col:34> 'limb':'int'
|   |       `-BinaryOperator 0x28b8a5ff890 <col:22, col:32> 'limb':'int' '>>'
|   |         |-ImplicitCastExpr 0x28b8a5ff878 <col:22, col:27> 'limb':'int' <LValueToRValue>
|   |         | `-ArraySubscriptExpr 0x28b8a5ff830 <col:22, col:27> 'limb':'int' lvalue
|   |         |   |-ImplicitCastExpr 0x28b8a5ff818 <col:22> 'limb *' <ArrayToPointerDecay>
|   |         |   | `-DeclRefExpr 0x28b8a5ff7d0 <col:22> 'felem':'limb [4]' lvalue Var 0x28b8a5fc450 'tmp' 'felem':'limb [4]'
|   |         |   `-IntegerLiteral 0x28b8a5ff7f0 <col:26> 'int' 2
|   |         `-IntegerLiteral 0x28b8a5ff850 <col:32> 'int' 64
|   |-BinaryOperator 0x28b8a5ffae0 <line:474:5, col:24> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x28b8a5ff9d8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a5ff9c0 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x28b8a5ff978 <col:5> 'felem':'limb [4]' lvalue Var 0x28b8a5fc450 'tmp' 'felem':'limb [4]'
|   | | `-IntegerLiteral 0x28b8a5ff998 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x28b8a5ffac8 <col:14, col:24> 'limb':'int' <IntegralCast>
|   |   `-CStyleCastExpr 0x28b8a5ffaa0 <col:14, col:24> 'u64':'unsigned long long' <IntegralCast>
|   |     `-ImplicitCastExpr 0x28b8a5ffa88 <col:19, col:24> 'limb':'int' <LValueToRValue> part_of_explicit_cast
|   |       `-ArraySubscriptExpr 0x28b8a5ffa58 <col:19, col:24> 'limb':'int' lvalue
|   |         |-ImplicitCastExpr 0x28b8a5ffa40 <col:19> 'limb *' <ArrayToPointerDecay>
|   |         | `-DeclRefExpr 0x28b8a5ff9f8 <col:19> 'felem':'limb [4]' lvalue Var 0x28b8a5fc450 'tmp' 'felem':'limb [4]'
|   |         `-IntegerLiteral 0x28b8a5ffa18 <col:23> 'int' 2
|   |-BinaryOperator 0x28b8a5ffc30 <line:477:5, col:19> 'u64':'unsigned long long' '='
|   | |-ArraySubscriptExpr 0x28b8a5ffb60 <col:5, col:10> 'u64':'unsigned long long' lvalue
|   | | |-ImplicitCastExpr 0x28b8a5ffb48 <col:5> 'u64 *':'u64 *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a5ffb00 <col:5> 'u64 *':'u64 *' lvalue ParmVar 0x28b8a5fc1b8 'out' 'u64 *':'u64 *'
|   | | `-IntegerLiteral 0x28b8a5ffb20 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x28b8a5ffc18 <col:14, col:19> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x28b8a5ffc00 <col:14, col:19> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x28b8a5ffbe0 <col:14, col:19> 'limb':'int' lvalue
|   |       |-ImplicitCastExpr 0x28b8a5ffbc8 <col:14> 'limb *' <ArrayToPointerDecay>
|   |       | `-DeclRefExpr 0x28b8a5ffb80 <col:14> 'felem':'limb [4]' lvalue Var 0x28b8a5fc450 'tmp' 'felem':'limb [4]'
|   |       `-IntegerLiteral 0x28b8a5ffba0 <col:18> 'int' 0
|   |-BinaryOperator 0x28b8a5ffd80 <line:478:5, col:19> 'u64':'unsigned long long' '='
|   | |-ArraySubscriptExpr 0x28b8a5ffcb0 <col:5, col:10> 'u64':'unsigned long long' lvalue
|   | | |-ImplicitCastExpr 0x28b8a5ffc98 <col:5> 'u64 *':'u64 *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a5ffc50 <col:5> 'u64 *':'u64 *' lvalue ParmVar 0x28b8a5fc1b8 'out' 'u64 *':'u64 *'
|   | | `-IntegerLiteral 0x28b8a5ffc70 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x28b8a5ffd68 <col:14, col:19> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x28b8a5ffd50 <col:14, col:19> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x28b8a5ffd30 <col:14, col:19> 'limb':'int' lvalue
|   |       |-ImplicitCastExpr 0x28b8a5ffd18 <col:14> 'limb *' <ArrayToPointerDecay>
|   |       | `-DeclRefExpr 0x28b8a5ffcd0 <col:14> 'felem':'limb [4]' lvalue Var 0x28b8a5fc450 'tmp' 'felem':'limb [4]'
|   |       `-IntegerLiteral 0x28b8a5ffcf0 <col:18> 'int' 1
|   |-BinaryOperator 0x28b8a5ffed0 <line:479:5, col:19> 'u64':'unsigned long long' '='
|   | |-ArraySubscriptExpr 0x28b8a5ffe00 <col:5, col:10> 'u64':'unsigned long long' lvalue
|   | | |-ImplicitCastExpr 0x28b8a5ffde8 <col:5> 'u64 *':'u64 *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a5ffda0 <col:5> 'u64 *':'u64 *' lvalue ParmVar 0x28b8a5fc1b8 'out' 'u64 *':'u64 *'
|   | | `-IntegerLiteral 0x28b8a5ffdc0 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x28b8a5ffeb8 <col:14, col:19> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x28b8a5ffea0 <col:14, col:19> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x28b8a5ffe80 <col:14, col:19> 'limb':'int' lvalue
|   |       |-ImplicitCastExpr 0x28b8a5ffe68 <col:14> 'limb *' <ArrayToPointerDecay>
|   |       | `-DeclRefExpr 0x28b8a5ffe20 <col:14> 'felem':'limb [4]' lvalue Var 0x28b8a5fc450 'tmp' 'felem':'limb [4]'
|   |       `-IntegerLiteral 0x28b8a5ffe40 <col:18> 'int' 2
|   `-BinaryOperator 0x28b8a600020 <line:480:5, col:19> 'u64':'unsigned long long' '='
|     |-ArraySubscriptExpr 0x28b8a5fff50 <col:5, col:10> 'u64':'unsigned long long' lvalue
|     | |-ImplicitCastExpr 0x28b8a5fff38 <col:5> 'u64 *':'u64 *' <LValueToRValue>
|     | | `-DeclRefExpr 0x28b8a5ffef0 <col:5> 'u64 *':'u64 *' lvalue ParmVar 0x28b8a5fc1b8 'out' 'u64 *':'u64 *'
|     | `-IntegerLiteral 0x28b8a5fff10 <col:9> 'int' 3
|     `-ImplicitCastExpr 0x28b8a600008 <col:14, col:19> 'u64':'unsigned long long' <IntegralCast>
|       `-ImplicitCastExpr 0x28b8a5ffff0 <col:14, col:19> 'limb':'int' <LValueToRValue>
|         `-ArraySubscriptExpr 0x28b8a5fffd0 <col:14, col:19> 'limb':'int' lvalue
|           |-ImplicitCastExpr 0x28b8a5fffb8 <col:14> 'limb *' <ArrayToPointerDecay>
|           | `-DeclRefExpr 0x28b8a5fff70 <col:14> 'felem':'limb [4]' lvalue Var 0x28b8a5fc450 'tmp' 'felem':'limb [4]'
|           `-IntegerLiteral 0x28b8a5fff90 <col:18> 'int' 3
|-FunctionDecl 0x28b8a6002f0 <line:484:1, line:490:1> line:484:13 used smallfelem_expand 'void (limb *, const u64 *)' static
| |-ParmVarDecl 0x28b8a6001b0 <col:31, col:37> col:37 used out 'limb *':'limb *'
| |-ParmVarDecl 0x28b8a600228 <col:42, col:59> col:59 used in 'const u64 *':'const u64 *'
| `-CompoundStmt 0x28b8a6008f8 <line:485:1, line:490:1>
|   |-BinaryOperator 0x28b8a6004e8 <line:486:5, col:18> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x28b8a600418 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a600400 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a6003b8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a6001b0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a6003d8 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x28b8a6004d0 <col:14, col:18> 'limb':'int' <IntegralCast>
|   |   `-ImplicitCastExpr 0x28b8a6004b8 <col:14, col:18> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x28b8a600498 <col:14, col:18> 'const u64':'const unsigned long long' lvalue
|   |       |-ImplicitCastExpr 0x28b8a600480 <col:14> 'const u64 *':'const u64 *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x28b8a600438 <col:14> 'const u64 *':'const u64 *' lvalue ParmVar 0x28b8a600228 'in' 'const u64 *':'const u64 *'
|   |       `-IntegerLiteral 0x28b8a600458 <col:17> 'int' 0
|   |-BinaryOperator 0x28b8a600638 <line:487:5, col:18> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x28b8a600568 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a600550 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a600508 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a6001b0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a600528 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x28b8a600620 <col:14, col:18> 'limb':'int' <IntegralCast>
|   |   `-ImplicitCastExpr 0x28b8a600608 <col:14, col:18> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x28b8a6005e8 <col:14, col:18> 'const u64':'const unsigned long long' lvalue
|   |       |-ImplicitCastExpr 0x28b8a6005d0 <col:14> 'const u64 *':'const u64 *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x28b8a600588 <col:14> 'const u64 *':'const u64 *' lvalue ParmVar 0x28b8a600228 'in' 'const u64 *':'const u64 *'
|   |       `-IntegerLiteral 0x28b8a6005a8 <col:17> 'int' 1
|   |-BinaryOperator 0x28b8a600788 <line:488:5, col:18> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x28b8a6006b8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a6006a0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a600658 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a6001b0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a600678 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x28b8a600770 <col:14, col:18> 'limb':'int' <IntegralCast>
|   |   `-ImplicitCastExpr 0x28b8a600758 <col:14, col:18> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x28b8a600738 <col:14, col:18> 'const u64':'const unsigned long long' lvalue
|   |       |-ImplicitCastExpr 0x28b8a600720 <col:14> 'const u64 *':'const u64 *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x28b8a6006d8 <col:14> 'const u64 *':'const u64 *' lvalue ParmVar 0x28b8a600228 'in' 'const u64 *':'const u64 *'
|   |       `-IntegerLiteral 0x28b8a6006f8 <col:17> 'int' 2
|   `-BinaryOperator 0x28b8a6008d8 <line:489:5, col:18> 'limb':'int' '='
|     |-ArraySubscriptExpr 0x28b8a600808 <col:5, col:10> 'limb':'int' lvalue
|     | |-ImplicitCastExpr 0x28b8a6007f0 <col:5> 'limb *':'limb *' <LValueToRValue>
|     | | `-DeclRefExpr 0x28b8a6007a8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a6001b0 'out' 'limb *':'limb *'
|     | `-IntegerLiteral 0x28b8a6007c8 <col:9> 'int' 3
|     `-ImplicitCastExpr 0x28b8a6008c0 <col:14, col:18> 'limb':'int' <IntegralCast>
|       `-ImplicitCastExpr 0x28b8a6008a8 <col:14, col:18> 'u64':'unsigned long long' <LValueToRValue>
|         `-ArraySubscriptExpr 0x28b8a600888 <col:14, col:18> 'const u64':'const unsigned long long' lvalue
|           |-ImplicitCastExpr 0x28b8a600870 <col:14> 'const u64 *':'const u64 *' <LValueToRValue>
|           | `-DeclRefExpr 0x28b8a600828 <col:14> 'const u64 *':'const u64 *' lvalue ParmVar 0x28b8a600228 'in' 'const u64 *':'const u64 *'
|           `-IntegerLiteral 0x28b8a600848 <col:17> 'int' 3
|-FunctionDecl 0x28b8a600ab8 <line:499:1, line:569:1> line:499:13 used smallfelem_square 'void (limb *, const u64 *)' static
| |-ParmVarDecl 0x28b8a600938 <col:31, col:41> col:41 used out 'limb *':'limb *'
| |-ParmVarDecl 0x28b8a6009b0 <col:46, col:63> col:63 used small 'const u64 *':'const u64 *'
| `-CompoundStmt 0x28b8a6039a0 <line:500:1, line:569:1>
|   |-DeclStmt 0x28b8a600bf8 <line:501:5, col:11>
|   | `-VarDecl 0x28b8a600b90 <col:5, col:10> col:10 used a 'limb':'int'
|   |-DeclStmt 0x28b8a600d18 <line:502:5, col:18>
|   | |-VarDecl 0x28b8a600c20 <col:5, col:9> col:9 used high 'u64':'unsigned long long'
|   | `-VarDecl 0x28b8a600c98 <col:5, col:15> col:15 used low 'u64':'unsigned long long'
|   |-BinaryOperator 0x28b8a600e70 <line:505:5, col:11> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x28b8a600de8 <col:5> 'u64':'unsigned long long' lvalue Var 0x28b8a600c98 'low' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x28b8a600e58 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x28b8a600e40 <col:11> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x28b8a600e20 <col:11> 'limb':'int' lvalue Var 0x28b8a600b90 'a' 'limb':'int'
|   |-BinaryOperator 0x28b8a600f60 <line:506:5, col:17> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x28b8a600e90 <col:5> 'u64':'unsigned long long' lvalue Var 0x28b8a600c20 'high' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x28b8a600f48 <col:12, col:17> 'u64':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x28b8a600f28 <col:12, col:17> 'limb':'int' '>>'
|   |     |-ImplicitCastExpr 0x28b8a600f10 <col:12> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x28b8a600ec8 <col:12> 'limb':'int' lvalue Var 0x28b8a600b90 'a' 'limb':'int'
|   |     `-IntegerLiteral 0x28b8a600ee8 <col:17> 'int' 64
|   |-BinaryOperator 0x28b8a601070 <line:507:5, col:14> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x28b8a600fe0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a600fc8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a600f80 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a600938 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a600fa0 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x28b8a601058 <col:14> 'limb':'int' <IntegralCast>
|   |   `-ImplicitCastExpr 0x28b8a601040 <col:14> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-DeclRefExpr 0x28b8a601020 <col:14> 'u64':'unsigned long long' lvalue Var 0x28b8a600c98 'low' 'u64':'unsigned long long'
|   |-BinaryOperator 0x28b8a601160 <line:508:5, col:14> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x28b8a6010f0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a6010d8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a601090 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a600938 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a6010b0 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x28b8a601148 <col:14> 'limb':'int' <IntegralCast>
|   |   `-ImplicitCastExpr 0x28b8a601130 <col:14> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-DeclRefExpr 0x28b8a601110 <col:14> 'u64':'unsigned long long' lvalue Var 0x28b8a600c20 'high' 'u64':'unsigned long long'
|   |-BinaryOperator 0x28b8a601290 <line:511:5, col:11> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x28b8a601220 <col:5> 'u64':'unsigned long long' lvalue Var 0x28b8a600c98 'low' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x28b8a601278 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x28b8a601260 <col:11> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x28b8a601240 <col:11> 'limb':'int' lvalue Var 0x28b8a600b90 'a' 'limb':'int'
|   |-BinaryOperator 0x28b8a601368 <line:512:5, col:17> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x28b8a6012b0 <col:5> 'u64':'unsigned long long' lvalue Var 0x28b8a600c20 'high' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x28b8a601350 <col:12, col:17> 'u64':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x28b8a601330 <col:12, col:17> 'limb':'int' '>>'
|   |     |-ImplicitCastExpr 0x28b8a601318 <col:12> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x28b8a6012d0 <col:12> 'limb':'int' lvalue Var 0x28b8a600b90 'a' 'limb':'int'
|   |     `-IntegerLiteral 0x28b8a6012f0 <col:17> 'int' 64
|   |-CompoundAssignOperator 0x28b8a601440 <line:513:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x28b8a6013e8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a6013d0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a601388 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a600938 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a6013a8 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x28b8a601428 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x28b8a601408 <col:15> 'u64':'unsigned long long' lvalue Var 0x28b8a600c98 'low' 'u64':'unsigned long long'
|   |-CompoundAssignOperator 0x28b8a601528 <line:514:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x28b8a6014d0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a6014b8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a601470 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a600938 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a601490 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x28b8a601510 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x28b8a6014f0 <col:15> 'u64':'unsigned long long' lvalue Var 0x28b8a600c98 'low' 'u64':'unsigned long long'
|   |-BinaryOperator 0x28b8a601628 <line:515:5, col:14> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x28b8a6015b8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a6015a0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a601558 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a600938 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a601578 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x28b8a601610 <col:14> 'limb':'int' <IntegralCast>
|   |   `-ImplicitCastExpr 0x28b8a6015f8 <col:14> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-DeclRefExpr 0x28b8a6015d8 <col:14> 'u64':'unsigned long long' lvalue Var 0x28b8a600c20 'high' 'u64':'unsigned long long'
|   |-BinaryOperator 0x28b8a601758 <line:518:5, col:11> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x28b8a6016e8 <col:5> 'u64':'unsigned long long' lvalue Var 0x28b8a600c98 'low' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x28b8a601740 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x28b8a601728 <col:11> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x28b8a601708 <col:11> 'limb':'int' lvalue Var 0x28b8a600b90 'a' 'limb':'int'
|   |-BinaryOperator 0x28b8a601830 <line:519:5, col:17> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x28b8a601778 <col:5> 'u64':'unsigned long long' lvalue Var 0x28b8a600c20 'high' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x28b8a601818 <col:12, col:17> 'u64':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x28b8a6017f8 <col:12, col:17> 'limb':'int' '>>'
|   |     |-ImplicitCastExpr 0x28b8a6017e0 <col:12> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x28b8a601798 <col:12> 'limb':'int' lvalue Var 0x28b8a600b90 'a' 'limb':'int'
|   |     `-IntegerLiteral 0x28b8a6017b8 <col:17> 'int' 64
|   |-CompoundAssignOperator 0x28b8a601908 <line:520:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x28b8a6018b0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a601898 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a601850 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a600938 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a601870 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x28b8a6018f0 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x28b8a6018d0 <col:15> 'u64':'unsigned long long' lvalue Var 0x28b8a600c98 'low' 'u64':'unsigned long long'
|   |-CompoundAssignOperator 0x28b8a6019e0 <line:521:5, col:15> 'limb':'int' '*=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x28b8a601998 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a601980 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a601938 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a600938 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a601958 <col:9> 'int' 2
|   | `-IntegerLiteral 0x28b8a6019b8 <col:15> 'int' 2
|   |-BinaryOperator 0x28b8a601ae0 <line:522:5, col:14> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x28b8a601a70 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a601a58 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a601a10 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a600938 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a601a30 <col:9> 'int' 3
|   | `-ImplicitCastExpr 0x28b8a601ac8 <col:14> 'limb':'int' <IntegralCast>
|   |   `-ImplicitCastExpr 0x28b8a601ab0 <col:14> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-DeclRefExpr 0x28b8a601a90 <col:14> 'u64':'unsigned long long' lvalue Var 0x28b8a600c20 'high' 'u64':'unsigned long long'
|   |-BinaryOperator 0x28b8a601c10 <line:525:5, col:11> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x28b8a601ba0 <col:5> 'u64':'unsigned long long' lvalue Var 0x28b8a600c98 'low' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x28b8a601bf8 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x28b8a601be0 <col:11> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x28b8a601bc0 <col:11> 'limb':'int' lvalue Var 0x28b8a600b90 'a' 'limb':'int'
|   |-BinaryOperator 0x28b8a601ce8 <line:526:5, col:17> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x28b8a601c30 <col:5> 'u64':'unsigned long long' lvalue Var 0x28b8a600c20 'high' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x28b8a601cd0 <col:12, col:17> 'u64':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x28b8a601cb0 <col:12, col:17> 'limb':'int' '>>'
|   |     |-ImplicitCastExpr 0x28b8a601c98 <col:12> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x28b8a601c50 <col:12> 'limb':'int' lvalue Var 0x28b8a600b90 'a' 'limb':'int'
|   |     `-IntegerLiteral 0x28b8a601c70 <col:17> 'int' 64
|   |-CompoundAssignOperator 0x28b8a601dc0 <line:527:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x28b8a601d68 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a601d50 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a601d08 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a600938 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a601d28 <col:9> 'int' 3
|   | `-ImplicitCastExpr 0x28b8a601da8 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x28b8a601d88 <col:15> 'u64':'unsigned long long' lvalue Var 0x28b8a600c98 'low' 'u64':'unsigned long long'
|   |-BinaryOperator 0x28b8a601ec0 <line:528:5, col:14> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x28b8a601e50 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a601e38 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a601df0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a600938 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a601e10 <col:9> 'int' 4
|   | `-ImplicitCastExpr 0x28b8a601ea8 <col:14> 'limb':'int' <IntegralCast>
|   |   `-ImplicitCastExpr 0x28b8a601e90 <col:14> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-DeclRefExpr 0x28b8a601e70 <col:14> 'u64':'unsigned long long' lvalue Var 0x28b8a600c20 'high' 'u64':'unsigned long long'
|   |-BinaryOperator 0x28b8a601ff0 <line:531:5, col:11> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x28b8a601f80 <col:5> 'u64':'unsigned long long' lvalue Var 0x28b8a600c98 'low' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x28b8a601fd8 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x28b8a601fc0 <col:11> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x28b8a601fa0 <col:11> 'limb':'int' lvalue Var 0x28b8a600b90 'a' 'limb':'int'
|   |-BinaryOperator 0x28b8a6020c8 <line:532:5, col:17> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x28b8a602010 <col:5> 'u64':'unsigned long long' lvalue Var 0x28b8a600c20 'high' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x28b8a6020b0 <col:12, col:17> 'u64':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x28b8a602090 <col:12, col:17> 'limb':'int' '>>'
|   |     |-ImplicitCastExpr 0x28b8a602078 <col:12> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x28b8a602030 <col:12> 'limb':'int' lvalue Var 0x28b8a600b90 'a' 'limb':'int'
|   |     `-IntegerLiteral 0x28b8a602050 <col:17> 'int' 64
|   |-CompoundAssignOperator 0x28b8a6021a0 <line:533:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x28b8a602148 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a602130 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a6020e8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a600938 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a602108 <col:9> 'int' 3
|   | `-ImplicitCastExpr 0x28b8a602188 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x28b8a602168 <col:15> 'u64':'unsigned long long' lvalue Var 0x28b8a600c98 'low' 'u64':'unsigned long long'
|   |-CompoundAssignOperator 0x28b8a602278 <line:534:5, col:15> 'limb':'int' '*=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x28b8a602230 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a602218 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a6021d0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a600938 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a6021f0 <col:9> 'int' 3
|   | `-IntegerLiteral 0x28b8a602250 <col:15> 'int' 2
|   |-CompoundAssignOperator 0x28b8a602360 <line:535:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x28b8a602308 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a6022f0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a6022a8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a600938 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a6022c8 <col:9> 'int' 4
|   | `-ImplicitCastExpr 0x28b8a602348 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x28b8a602328 <col:15> 'u64':'unsigned long long' lvalue Var 0x28b8a600c20 'high' 'u64':'unsigned long long'
|   |-BinaryOperator 0x28b8a6024a0 <line:538:5, col:11> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x28b8a602430 <col:5> 'u64':'unsigned long long' lvalue Var 0x28b8a600c98 'low' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x28b8a602488 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x28b8a602470 <col:11> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x28b8a602450 <col:11> 'limb':'int' lvalue Var 0x28b8a600b90 'a' 'limb':'int'
|   |-BinaryOperator 0x28b8a602578 <line:539:5, col:17> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x28b8a6024c0 <col:5> 'u64':'unsigned long long' lvalue Var 0x28b8a600c20 'high' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x28b8a602560 <col:12, col:17> 'u64':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x28b8a602540 <col:12, col:17> 'limb':'int' '>>'
|   |     |-ImplicitCastExpr 0x28b8a602528 <col:12> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x28b8a6024e0 <col:12> 'limb':'int' lvalue Var 0x28b8a600b90 'a' 'limb':'int'
|   |     `-IntegerLiteral 0x28b8a602500 <col:17> 'int' 64
|   |-CompoundAssignOperator 0x28b8a602650 <line:540:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x28b8a6025f8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a6025e0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a602598 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a600938 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a6025b8 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x28b8a602638 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x28b8a602618 <col:15> 'u64':'unsigned long long' lvalue Var 0x28b8a600c98 'low' 'u64':'unsigned long long'
|   |-CompoundAssignOperator 0x28b8a602738 <line:541:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x28b8a6026e0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a6026c8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a602680 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a600938 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a6026a0 <col:9> 'int' 3
|   | `-ImplicitCastExpr 0x28b8a602720 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x28b8a602700 <col:15> 'u64':'unsigned long long' lvalue Var 0x28b8a600c20 'high' 'u64':'unsigned long long'
|   |-BinaryOperator 0x28b8a602878 <line:544:5, col:11> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x28b8a602808 <col:5> 'u64':'unsigned long long' lvalue Var 0x28b8a600c98 'low' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x28b8a602860 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x28b8a602848 <col:11> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x28b8a602828 <col:11> 'limb':'int' lvalue Var 0x28b8a600b90 'a' 'limb':'int'
|   |-BinaryOperator 0x28b8a602950 <line:545:5, col:17> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x28b8a602898 <col:5> 'u64':'unsigned long long' lvalue Var 0x28b8a600c20 'high' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x28b8a602938 <col:12, col:17> 'u64':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x28b8a602918 <col:12, col:17> 'limb':'int' '>>'
|   |     |-ImplicitCastExpr 0x28b8a602900 <col:12> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x28b8a6028b8 <col:12> 'limb':'int' lvalue Var 0x28b8a600b90 'a' 'limb':'int'
|   |     `-IntegerLiteral 0x28b8a6028d8 <col:17> 'int' 64
|   |-CompoundAssignOperator 0x28b8a602a28 <line:546:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x28b8a6029d0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a6029b8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a602970 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a600938 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a602990 <col:9> 'int' 4
|   | `-ImplicitCastExpr 0x28b8a602a10 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x28b8a6029f0 <col:15> 'u64':'unsigned long long' lvalue Var 0x28b8a600c98 'low' 'u64':'unsigned long long'
|   |-CompoundAssignOperator 0x28b8a602b00 <line:547:5, col:15> 'limb':'int' '*=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x28b8a602ab8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a602aa0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a602a58 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a600938 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a602a78 <col:9> 'int' 4
|   | `-IntegerLiteral 0x28b8a602ad8 <col:15> 'int' 2
|   |-BinaryOperator 0x28b8a602c00 <line:548:5, col:14> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x28b8a602b90 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a602b78 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a602b30 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a600938 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a602b50 <col:9> 'int' 5
|   | `-ImplicitCastExpr 0x28b8a602be8 <col:14> 'limb':'int' <IntegralCast>
|   |   `-ImplicitCastExpr 0x28b8a602bd0 <col:14> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-DeclRefExpr 0x28b8a602bb0 <col:14> 'u64':'unsigned long long' lvalue Var 0x28b8a600c20 'high' 'u64':'unsigned long long'
|   |-BinaryOperator 0x28b8a602d30 <line:551:5, col:11> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x28b8a602cc0 <col:5> 'u64':'unsigned long long' lvalue Var 0x28b8a600c98 'low' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x28b8a602d18 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x28b8a602d00 <col:11> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x28b8a602ce0 <col:11> 'limb':'int' lvalue Var 0x28b8a600b90 'a' 'limb':'int'
|   |-BinaryOperator 0x28b8a602e08 <line:552:5, col:17> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x28b8a602d50 <col:5> 'u64':'unsigned long long' lvalue Var 0x28b8a600c20 'high' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x28b8a602df0 <col:12, col:17> 'u64':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x28b8a602dd0 <col:12, col:17> 'limb':'int' '>>'
|   |     |-ImplicitCastExpr 0x28b8a602db8 <col:12> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x28b8a602d70 <col:12> 'limb':'int' lvalue Var 0x28b8a600b90 'a' 'limb':'int'
|   |     `-IntegerLiteral 0x28b8a602d90 <col:17> 'int' 64
|   |-CompoundAssignOperator 0x28b8a602ee0 <line:553:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x28b8a602e88 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a602e70 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a602e28 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a600938 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a602e48 <col:9> 'int' 5
|   | `-ImplicitCastExpr 0x28b8a602ec8 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x28b8a602ea8 <col:15> 'u64':'unsigned long long' lvalue Var 0x28b8a600c98 'low' 'u64':'unsigned long long'
|   |-CompoundAssignOperator 0x28b8a602fb8 <line:554:5, col:15> 'limb':'int' '*=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x28b8a602f70 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a602f58 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a602f10 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a600938 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a602f30 <col:9> 'int' 5
|   | `-IntegerLiteral 0x28b8a602f90 <col:15> 'int' 2
|   |-BinaryOperator 0x28b8a6030e0 <line:555:5, col:14> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x28b8a603070 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a603058 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a602fe8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a600938 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a603030 <col:9> 'int' 6
|   | `-ImplicitCastExpr 0x28b8a6030c8 <col:14> 'limb':'int' <IntegralCast>
|   |   `-ImplicitCastExpr 0x28b8a6030b0 <col:14> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-DeclRefExpr 0x28b8a603090 <col:14> 'u64':'unsigned long long' lvalue Var 0x28b8a600c20 'high' 'u64':'unsigned long long'
|   |-CompoundAssignOperator 0x28b8a6031b8 <line:556:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x28b8a603160 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a603148 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a603100 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a600938 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a603120 <col:9> 'int' 6
|   | `-ImplicitCastExpr 0x28b8a6031a0 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x28b8a603180 <col:15> 'u64':'unsigned long long' lvalue Var 0x28b8a600c20 'high' 'u64':'unsigned long long'
|   |-BinaryOperator 0x28b8a6032f8 <line:559:5, col:11> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x28b8a603288 <col:5> 'u64':'unsigned long long' lvalue Var 0x28b8a600c98 'low' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x28b8a6032e0 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x28b8a6032c8 <col:11> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x28b8a6032a8 <col:11> 'limb':'int' lvalue Var 0x28b8a600b90 'a' 'limb':'int'
|   |-BinaryOperator 0x28b8a6033d0 <line:560:5, col:17> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x28b8a603318 <col:5> 'u64':'unsigned long long' lvalue Var 0x28b8a600c20 'high' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x28b8a6033b8 <col:12, col:17> 'u64':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x28b8a603398 <col:12, col:17> 'limb':'int' '>>'
|   |     |-ImplicitCastExpr 0x28b8a603380 <col:12> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x28b8a603338 <col:12> 'limb':'int' lvalue Var 0x28b8a600b90 'a' 'limb':'int'
|   |     `-IntegerLiteral 0x28b8a603358 <col:17> 'int' 64
|   |-CompoundAssignOperator 0x28b8a6034a8 <line:561:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x28b8a603450 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a603438 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a6033f0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a600938 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a603410 <col:9> 'int' 4
|   | `-ImplicitCastExpr 0x28b8a603490 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x28b8a603470 <col:15> 'u64':'unsigned long long' lvalue Var 0x28b8a600c98 'low' 'u64':'unsigned long long'
|   |-CompoundAssignOperator 0x28b8a603590 <line:562:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x28b8a603538 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a603520 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a6034d8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a600938 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a6034f8 <col:9> 'int' 5
|   | `-ImplicitCastExpr 0x28b8a603578 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x28b8a603558 <col:15> 'u64':'unsigned long long' lvalue Var 0x28b8a600c20 'high' 'u64':'unsigned long long'
|   |-BinaryOperator 0x28b8a6036d0 <line:565:5, col:11> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x28b8a603660 <col:5> 'u64':'unsigned long long' lvalue Var 0x28b8a600c98 'low' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x28b8a6036b8 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x28b8a6036a0 <col:11> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x28b8a603680 <col:11> 'limb':'int' lvalue Var 0x28b8a600b90 'a' 'limb':'int'
|   |-BinaryOperator 0x28b8a6037a8 <line:566:5, col:17> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x28b8a6036f0 <col:5> 'u64':'unsigned long long' lvalue Var 0x28b8a600c20 'high' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x28b8a603790 <col:12, col:17> 'u64':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x28b8a603770 <col:12, col:17> 'limb':'int' '>>'
|   |     |-ImplicitCastExpr 0x28b8a603758 <col:12> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x28b8a603710 <col:12> 'limb':'int' lvalue Var 0x28b8a600b90 'a' 'limb':'int'
|   |     `-IntegerLiteral 0x28b8a603730 <col:17> 'int' 64
|   |-CompoundAssignOperator 0x28b8a603880 <line:567:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x28b8a603828 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a603810 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a6037c8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a600938 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a6037e8 <col:9> 'int' 6
|   | `-ImplicitCastExpr 0x28b8a603868 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x28b8a603848 <col:15> 'u64':'unsigned long long' lvalue Var 0x28b8a600c98 'low' 'u64':'unsigned long long'
|   `-BinaryOperator 0x28b8a603980 <line:568:5, col:14> 'limb':'int' '='
|     |-ArraySubscriptExpr 0x28b8a603910 <col:5, col:10> 'limb':'int' lvalue
|     | |-ImplicitCastExpr 0x28b8a6038f8 <col:5> 'limb *':'limb *' <LValueToRValue>
|     | | `-DeclRefExpr 0x28b8a6038b0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a600938 'out' 'limb *':'limb *'
|     | `-IntegerLiteral 0x28b8a6038d0 <col:9> 'int' 7
|     `-ImplicitCastExpr 0x28b8a603968 <col:14> 'limb':'int' <IntegralCast>
|       `-ImplicitCastExpr 0x28b8a603950 <col:14> 'u64':'unsigned long long' <LValueToRValue>
|         `-DeclRefExpr 0x28b8a603930 <col:14> 'u64':'unsigned long long' lvalue Var 0x28b8a600c20 'high' 'u64':'unsigned long long'
|-FunctionDecl 0x28b8a603cb8 <line:578:1, line:583:1> line:578:13 used felem_square 'void (limb *, const limb *)' static
| |-ParmVarDecl 0x28b8a603b40 <col:26, col:36> col:36 used out 'limb *':'limb *'
| |-ParmVarDecl 0x28b8a603bb8 <col:41, col:53> col:53 used in 'const limb *':'const limb *'
| `-CompoundStmt 0x28b8a6040f8 <line:579:1, line:583:1>
|   |-DeclStmt 0x28b8a603e48 <line:580:5, col:17>
|   | `-VarDecl 0x28b8a603de0 <col:5, col:16> col:9 used small 'u64 [4]'
|   |-CallExpr 0x28b8a603f50 <line:581:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x28b8a603f38 <col:5> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a603e60 <col:5> 'void (u64 *, const limb *)' Function 0x28b8a5fc378 'felem_shrink' 'void (u64 *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a603f80 <col:18> 'u64 *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a603e80 <col:18> 'u64 [4]' lvalue Var 0x28b8a603de0 'small' 'u64 [4]'
|   | `-ImplicitCastExpr 0x28b8a603f98 <col:25> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x28b8a603eb8 <col:25> 'const limb *':'const limb *' lvalue ParmVar 0x28b8a603bb8 'in' 'const limb *':'const limb *'
|   `-CallExpr 0x28b8a604080 <line:582:5, col:33> 'void'
|     |-ImplicitCastExpr 0x28b8a604068 <col:5> 'void (*)(limb *, const u64 *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x28b8a603fb0 <col:5> 'void (limb *, const u64 *)' Function 0x28b8a600ab8 'smallfelem_square' 'void (limb *, const u64 *)'
|     |-ImplicitCastExpr 0x28b8a6040b0 <col:23> 'limb *':'limb *' <LValueToRValue>
|     | `-DeclRefExpr 0x28b8a603fd0 <col:23> 'limb *':'limb *' lvalue ParmVar 0x28b8a603b40 'out' 'limb *':'limb *'
|     `-ImplicitCastExpr 0x28b8a6040e0 <col:28> 'const u64 *':'const u64 *' <NoOp>
|       `-ImplicitCastExpr 0x28b8a6040c8 <col:28> 'u64 *' <ArrayToPointerDecay>
|         `-DeclRefExpr 0x28b8a603ff0 <col:28> 'u64 [4]' lvalue Var 0x28b8a603de0 'small' 'u64 [4]'
|-FunctionDecl 0x28b8a604388 <line:593:1, line:694:1> line:593:13 used smallfelem_mul 'void (limb *, const u64 *, const u64 *)' static
| |-ParmVarDecl 0x28b8a604130 <col:28, col:38> col:38 used out 'limb *':'limb *'
| |-ParmVarDecl 0x28b8a6041a8 <col:43, col:60> col:60 small1 'const u64 *':'const u64 *'
| |-ParmVarDecl 0x28b8a604220 <line:594:28, col:45> col:45 used small2 'const u64 *':'const u64 *'
| `-CompoundStmt 0x28b8a608440 <line:595:1, line:694:1>
|   |-DeclStmt 0x28b8a6044d0 <line:596:5, col:11>
|   | `-VarDecl 0x28b8a604468 <col:5, col:10> col:10 used a 'limb':'int'
|   |-DeclStmt 0x28b8a6045f0 <line:597:5, col:18>
|   | |-VarDecl 0x28b8a6044f8 <col:5, col:9> col:9 used high 'u64':'unsigned long long'
|   | `-VarDecl 0x28b8a604570 <col:5, col:15> col:15 used low 'u64':'unsigned long long'
|   |-BinaryOperator 0x28b8a604748 <line:600:5, col:11> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x28b8a6046c0 <col:5> 'u64':'unsigned long long' lvalue Var 0x28b8a604570 'low' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x28b8a604730 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x28b8a604718 <col:11> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x28b8a6046f8 <col:11> 'limb':'int' lvalue Var 0x28b8a604468 'a' 'limb':'int'
|   |-BinaryOperator 0x28b8a604838 <line:601:5, col:17> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x28b8a604768 <col:5> 'u64':'unsigned long long' lvalue Var 0x28b8a6044f8 'high' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x28b8a604820 <col:12, col:17> 'u64':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x28b8a604800 <col:12, col:17> 'limb':'int' '>>'
|   |     |-ImplicitCastExpr 0x28b8a6047e8 <col:12> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x28b8a6047a0 <col:12> 'limb':'int' lvalue Var 0x28b8a604468 'a' 'limb':'int'
|   |     `-IntegerLiteral 0x28b8a6047c0 <col:17> 'int' 64
|   |-BinaryOperator 0x28b8a604928 <line:602:5, col:14> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x28b8a6048b8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a6048a0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a604858 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a604130 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a604878 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x28b8a604910 <col:14> 'limb':'int' <IntegralCast>
|   |   `-ImplicitCastExpr 0x28b8a6048f8 <col:14> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-DeclRefExpr 0x28b8a6048d8 <col:14> 'u64':'unsigned long long' lvalue Var 0x28b8a604570 'low' 'u64':'unsigned long long'
|   |-BinaryOperator 0x28b8a604a18 <line:603:5, col:14> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x28b8a6049a8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a604990 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a604948 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a604130 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a604968 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x28b8a604a00 <col:14> 'limb':'int' <IntegralCast>
|   |   `-ImplicitCastExpr 0x28b8a6049e8 <col:14> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-DeclRefExpr 0x28b8a6049c8 <col:14> 'u64':'unsigned long long' lvalue Var 0x28b8a6044f8 'high' 'u64':'unsigned long long'
|   |-BinaryOperator 0x28b8a604b48 <line:606:5, col:11> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x28b8a604ad8 <col:5> 'u64':'unsigned long long' lvalue Var 0x28b8a604570 'low' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x28b8a604b30 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x28b8a604b18 <col:11> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x28b8a604af8 <col:11> 'limb':'int' lvalue Var 0x28b8a604468 'a' 'limb':'int'
|   |-BinaryOperator 0x28b8a604c20 <line:607:5, col:17> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x28b8a604b68 <col:5> 'u64':'unsigned long long' lvalue Var 0x28b8a6044f8 'high' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x28b8a604c08 <col:12, col:17> 'u64':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x28b8a604be8 <col:12, col:17> 'limb':'int' '>>'
|   |     |-ImplicitCastExpr 0x28b8a604bd0 <col:12> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x28b8a604b88 <col:12> 'limb':'int' lvalue Var 0x28b8a604468 'a' 'limb':'int'
|   |     `-IntegerLiteral 0x28b8a604ba8 <col:17> 'int' 64
|   |-CompoundAssignOperator 0x28b8a604cf8 <line:608:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x28b8a604ca0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a604c88 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a604c40 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a604130 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a604c60 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x28b8a604ce0 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x28b8a604cc0 <col:15> 'u64':'unsigned long long' lvalue Var 0x28b8a604570 'low' 'u64':'unsigned long long'
|   |-BinaryOperator 0x28b8a604df8 <line:609:5, col:14> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x28b8a604d88 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a604d70 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a604d28 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a604130 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a604d48 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x28b8a604de0 <col:14> 'limb':'int' <IntegralCast>
|   |   `-ImplicitCastExpr 0x28b8a604dc8 <col:14> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-DeclRefExpr 0x28b8a604da8 <col:14> 'u64':'unsigned long long' lvalue Var 0x28b8a6044f8 'high' 'u64':'unsigned long long'
|   |-BinaryOperator 0x28b8a604f28 <line:612:5, col:11> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x28b8a604eb8 <col:5> 'u64':'unsigned long long' lvalue Var 0x28b8a604570 'low' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x28b8a604f10 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x28b8a604ef8 <col:11> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x28b8a604ed8 <col:11> 'limb':'int' lvalue Var 0x28b8a604468 'a' 'limb':'int'
|   |-BinaryOperator 0x28b8a605000 <line:613:5, col:17> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x28b8a604f48 <col:5> 'u64':'unsigned long long' lvalue Var 0x28b8a6044f8 'high' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x28b8a604fe8 <col:12, col:17> 'u64':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x28b8a604fc8 <col:12, col:17> 'limb':'int' '>>'
|   |     |-ImplicitCastExpr 0x28b8a604fb0 <col:12> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x28b8a604f68 <col:12> 'limb':'int' lvalue Var 0x28b8a604468 'a' 'limb':'int'
|   |     `-IntegerLiteral 0x28b8a604f88 <col:17> 'int' 64
|   |-CompoundAssignOperator 0x28b8a6050f8 <line:614:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x28b8a6050a0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a605088 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a605040 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a604130 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a605060 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x28b8a6050e0 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x28b8a6050c0 <col:15> 'u64':'unsigned long long' lvalue Var 0x28b8a604570 'low' 'u64':'unsigned long long'
|   |-CompoundAssignOperator 0x28b8a6051e0 <line:615:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x28b8a605188 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a605170 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a605128 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a604130 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a605148 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x28b8a6051c8 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x28b8a6051a8 <col:15> 'u64':'unsigned long long' lvalue Var 0x28b8a6044f8 'high' 'u64':'unsigned long long'
|   |-BinaryOperator 0x28b8a605320 <line:618:5, col:11> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x28b8a6052b0 <col:5> 'u64':'unsigned long long' lvalue Var 0x28b8a604570 'low' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x28b8a605308 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x28b8a6052f0 <col:11> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x28b8a6052d0 <col:11> 'limb':'int' lvalue Var 0x28b8a604468 'a' 'limb':'int'
|   |-BinaryOperator 0x28b8a6053f8 <line:619:5, col:17> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x28b8a605340 <col:5> 'u64':'unsigned long long' lvalue Var 0x28b8a6044f8 'high' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x28b8a6053e0 <col:12, col:17> 'u64':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x28b8a6053c0 <col:12, col:17> 'limb':'int' '>>'
|   |     |-ImplicitCastExpr 0x28b8a6053a8 <col:12> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x28b8a605360 <col:12> 'limb':'int' lvalue Var 0x28b8a604468 'a' 'limb':'int'
|   |     `-IntegerLiteral 0x28b8a605380 <col:17> 'int' 64
|   |-CompoundAssignOperator 0x28b8a6054d0 <line:620:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x28b8a605478 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a605460 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a605418 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a604130 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a605438 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x28b8a6054b8 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x28b8a605498 <col:15> 'u64':'unsigned long long' lvalue Var 0x28b8a604570 'low' 'u64':'unsigned long long'
|   |-BinaryOperator 0x28b8a6055d0 <line:621:5, col:14> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x28b8a605560 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a605548 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a605500 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a604130 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a605520 <col:9> 'int' 3
|   | `-ImplicitCastExpr 0x28b8a6055b8 <col:14> 'limb':'int' <IntegralCast>
|   |   `-ImplicitCastExpr 0x28b8a6055a0 <col:14> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-DeclRefExpr 0x28b8a605580 <col:14> 'u64':'unsigned long long' lvalue Var 0x28b8a6044f8 'high' 'u64':'unsigned long long'
|   |-BinaryOperator 0x28b8a605700 <line:624:5, col:11> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x28b8a605690 <col:5> 'u64':'unsigned long long' lvalue Var 0x28b8a604570 'low' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x28b8a6056e8 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x28b8a6056d0 <col:11> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x28b8a6056b0 <col:11> 'limb':'int' lvalue Var 0x28b8a604468 'a' 'limb':'int'
|   |-BinaryOperator 0x28b8a6057d8 <line:625:5, col:17> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x28b8a605720 <col:5> 'u64':'unsigned long long' lvalue Var 0x28b8a6044f8 'high' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x28b8a6057c0 <col:12, col:17> 'u64':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x28b8a6057a0 <col:12, col:17> 'limb':'int' '>>'
|   |     |-ImplicitCastExpr 0x28b8a605788 <col:12> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x28b8a605740 <col:12> 'limb':'int' lvalue Var 0x28b8a604468 'a' 'limb':'int'
|   |     `-IntegerLiteral 0x28b8a605760 <col:17> 'int' 64
|   |-CompoundAssignOperator 0x28b8a6058b0 <line:626:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x28b8a605858 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a605840 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a6057f8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a604130 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a605818 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x28b8a605898 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x28b8a605878 <col:15> 'u64':'unsigned long long' lvalue Var 0x28b8a604570 'low' 'u64':'unsigned long long'
|   |-CompoundAssignOperator 0x28b8a605998 <line:627:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x28b8a605940 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a605928 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a6058e0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a604130 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a605900 <col:9> 'int' 3
|   | `-ImplicitCastExpr 0x28b8a605980 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x28b8a605960 <col:15> 'u64':'unsigned long long' lvalue Var 0x28b8a6044f8 'high' 'u64':'unsigned long long'
|   |-BinaryOperator 0x28b8a605ad8 <line:630:5, col:11> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x28b8a605a68 <col:5> 'u64':'unsigned long long' lvalue Var 0x28b8a604570 'low' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x28b8a605ac0 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x28b8a605aa8 <col:11> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x28b8a605a88 <col:11> 'limb':'int' lvalue Var 0x28b8a604468 'a' 'limb':'int'
|   |-BinaryOperator 0x28b8a605bb0 <line:631:5, col:17> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x28b8a605af8 <col:5> 'u64':'unsigned long long' lvalue Var 0x28b8a6044f8 'high' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x28b8a605b98 <col:12, col:17> 'u64':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x28b8a605b78 <col:12, col:17> 'limb':'int' '>>'
|   |     |-ImplicitCastExpr 0x28b8a605b60 <col:12> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x28b8a605b18 <col:12> 'limb':'int' lvalue Var 0x28b8a604468 'a' 'limb':'int'
|   |     `-IntegerLiteral 0x28b8a605b38 <col:17> 'int' 64
|   |-CompoundAssignOperator 0x28b8a605c88 <line:632:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x28b8a605c30 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a605c18 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a605bd0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a604130 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a605bf0 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x28b8a605c70 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x28b8a605c50 <col:15> 'u64':'unsigned long long' lvalue Var 0x28b8a604570 'low' 'u64':'unsigned long long'
|   |-CompoundAssignOperator 0x28b8a605d70 <line:633:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x28b8a605d18 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a605d00 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a605cb8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a604130 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a605cd8 <col:9> 'int' 3
|   | `-ImplicitCastExpr 0x28b8a605d58 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x28b8a605d38 <col:15> 'u64':'unsigned long long' lvalue Var 0x28b8a6044f8 'high' 'u64':'unsigned long long'
|   |-BinaryOperator 0x28b8a605eb0 <line:636:5, col:11> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x28b8a605e40 <col:5> 'u64':'unsigned long long' lvalue Var 0x28b8a604570 'low' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x28b8a605e98 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x28b8a605e80 <col:11> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x28b8a605e60 <col:11> 'limb':'int' lvalue Var 0x28b8a604468 'a' 'limb':'int'
|   |-BinaryOperator 0x28b8a605f88 <line:637:5, col:17> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x28b8a605ed0 <col:5> 'u64':'unsigned long long' lvalue Var 0x28b8a6044f8 'high' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x28b8a605f70 <col:12, col:17> 'u64':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x28b8a605f50 <col:12, col:17> 'limb':'int' '>>'
|   |     |-ImplicitCastExpr 0x28b8a605f38 <col:12> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x28b8a605ef0 <col:12> 'limb':'int' lvalue Var 0x28b8a604468 'a' 'limb':'int'
|   |     `-IntegerLiteral 0x28b8a605f10 <col:17> 'int' 64
|   |-CompoundAssignOperator 0x28b8a606060 <line:638:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x28b8a606008 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a605ff0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a605fa8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a604130 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a605fc8 <col:9> 'int' 3
|   | `-ImplicitCastExpr 0x28b8a606048 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x28b8a606028 <col:15> 'u64':'unsigned long long' lvalue Var 0x28b8a604570 'low' 'u64':'unsigned long long'
|   |-BinaryOperator 0x28b8a606160 <line:639:5, col:14> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x28b8a6060f0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a6060d8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a606090 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a604130 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a6060b0 <col:9> 'int' 4
|   | `-ImplicitCastExpr 0x28b8a606148 <col:14> 'limb':'int' <IntegralCast>
|   |   `-ImplicitCastExpr 0x28b8a606130 <col:14> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-DeclRefExpr 0x28b8a606110 <col:14> 'u64':'unsigned long long' lvalue Var 0x28b8a6044f8 'high' 'u64':'unsigned long long'
|   |-BinaryOperator 0x28b8a606290 <line:642:5, col:11> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x28b8a606220 <col:5> 'u64':'unsigned long long' lvalue Var 0x28b8a604570 'low' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x28b8a606278 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x28b8a606260 <col:11> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x28b8a606240 <col:11> 'limb':'int' lvalue Var 0x28b8a604468 'a' 'limb':'int'
|   |-BinaryOperator 0x28b8a606368 <line:643:5, col:17> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x28b8a6062b0 <col:5> 'u64':'unsigned long long' lvalue Var 0x28b8a6044f8 'high' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x28b8a606350 <col:12, col:17> 'u64':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x28b8a606330 <col:12, col:17> 'limb':'int' '>>'
|   |     |-ImplicitCastExpr 0x28b8a606318 <col:12> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x28b8a6062d0 <col:12> 'limb':'int' lvalue Var 0x28b8a604468 'a' 'limb':'int'
|   |     `-IntegerLiteral 0x28b8a6062f0 <col:17> 'int' 64
|   |-CompoundAssignOperator 0x28b8a606440 <line:644:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x28b8a6063e8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a6063d0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a606388 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a604130 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a6063a8 <col:9> 'int' 3
|   | `-ImplicitCastExpr 0x28b8a606428 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x28b8a606408 <col:15> 'u64':'unsigned long long' lvalue Var 0x28b8a604570 'low' 'u64':'unsigned long long'
|   |-CompoundAssignOperator 0x28b8a606528 <line:645:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x28b8a6064d0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a6064b8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a606470 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a604130 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a606490 <col:9> 'int' 4
|   | `-ImplicitCastExpr 0x28b8a606510 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x28b8a6064f0 <col:15> 'u64':'unsigned long long' lvalue Var 0x28b8a6044f8 'high' 'u64':'unsigned long long'
|   |-BinaryOperator 0x28b8a606668 <line:648:5, col:11> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x28b8a6065f8 <col:5> 'u64':'unsigned long long' lvalue Var 0x28b8a604570 'low' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x28b8a606650 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x28b8a606638 <col:11> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x28b8a606618 <col:11> 'limb':'int' lvalue Var 0x28b8a604468 'a' 'limb':'int'
|   |-BinaryOperator 0x28b8a606740 <line:649:5, col:17> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x28b8a606688 <col:5> 'u64':'unsigned long long' lvalue Var 0x28b8a6044f8 'high' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x28b8a606728 <col:12, col:17> 'u64':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x28b8a606708 <col:12, col:17> 'limb':'int' '>>'
|   |     |-ImplicitCastExpr 0x28b8a6066f0 <col:12> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x28b8a6066a8 <col:12> 'limb':'int' lvalue Var 0x28b8a604468 'a' 'limb':'int'
|   |     `-IntegerLiteral 0x28b8a6066c8 <col:17> 'int' 64
|   |-CompoundAssignOperator 0x28b8a606818 <line:650:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x28b8a6067c0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a6067a8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a606760 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a604130 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a606780 <col:9> 'int' 3
|   | `-ImplicitCastExpr 0x28b8a606800 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x28b8a6067e0 <col:15> 'u64':'unsigned long long' lvalue Var 0x28b8a604570 'low' 'u64':'unsigned long long'
|   |-CompoundAssignOperator 0x28b8a606900 <line:651:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x28b8a6068a8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a606890 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a606848 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a604130 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a606868 <col:9> 'int' 4
|   | `-ImplicitCastExpr 0x28b8a6068e8 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x28b8a6068c8 <col:15> 'u64':'unsigned long long' lvalue Var 0x28b8a6044f8 'high' 'u64':'unsigned long long'
|   |-BinaryOperator 0x28b8a606a40 <line:654:5, col:11> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x28b8a6069d0 <col:5> 'u64':'unsigned long long' lvalue Var 0x28b8a604570 'low' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x28b8a606a28 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x28b8a606a10 <col:11> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x28b8a6069f0 <col:11> 'limb':'int' lvalue Var 0x28b8a604468 'a' 'limb':'int'
|   |-BinaryOperator 0x28b8a606b18 <line:655:5, col:17> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x28b8a606a60 <col:5> 'u64':'unsigned long long' lvalue Var 0x28b8a6044f8 'high' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x28b8a606b00 <col:12, col:17> 'u64':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x28b8a606ae0 <col:12, col:17> 'limb':'int' '>>'
|   |     |-ImplicitCastExpr 0x28b8a606ac8 <col:12> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x28b8a606a80 <col:12> 'limb':'int' lvalue Var 0x28b8a604468 'a' 'limb':'int'
|   |     `-IntegerLiteral 0x28b8a606aa0 <col:17> 'int' 64
|   |-CompoundAssignOperator 0x28b8a606bf0 <line:656:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x28b8a606b98 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a606b80 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a606b38 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a604130 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a606b58 <col:9> 'int' 3
|   | `-ImplicitCastExpr 0x28b8a606bd8 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x28b8a606bb8 <col:15> 'u64':'unsigned long long' lvalue Var 0x28b8a604570 'low' 'u64':'unsigned long long'
|   |-CompoundAssignOperator 0x28b8a606cd8 <line:657:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x28b8a606c80 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a606c68 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a606c20 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a604130 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a606c40 <col:9> 'int' 4
|   | `-ImplicitCastExpr 0x28b8a606cc0 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x28b8a606ca0 <col:15> 'u64':'unsigned long long' lvalue Var 0x28b8a6044f8 'high' 'u64':'unsigned long long'
|   |-BinaryOperator 0x28b8a606e18 <line:660:5, col:11> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x28b8a606da8 <col:5> 'u64':'unsigned long long' lvalue Var 0x28b8a604570 'low' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x28b8a606e00 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x28b8a606de8 <col:11> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x28b8a606dc8 <col:11> 'limb':'int' lvalue Var 0x28b8a604468 'a' 'limb':'int'
|   |-BinaryOperator 0x28b8a606ef0 <line:661:5, col:17> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x28b8a606e38 <col:5> 'u64':'unsigned long long' lvalue Var 0x28b8a6044f8 'high' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x28b8a606ed8 <col:12, col:17> 'u64':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x28b8a606eb8 <col:12, col:17> 'limb':'int' '>>'
|   |     |-ImplicitCastExpr 0x28b8a606ea0 <col:12> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x28b8a606e58 <col:12> 'limb':'int' lvalue Var 0x28b8a604468 'a' 'limb':'int'
|   |     `-IntegerLiteral 0x28b8a606e78 <col:17> 'int' 64
|   |-CompoundAssignOperator 0x28b8a606fc8 <line:662:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x28b8a606f70 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a606f58 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a606f10 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a604130 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a606f30 <col:9> 'int' 4
|   | `-ImplicitCastExpr 0x28b8a606fb0 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x28b8a606f90 <col:15> 'u64':'unsigned long long' lvalue Var 0x28b8a604570 'low' 'u64':'unsigned long long'
|   |-BinaryOperator 0x28b8a6070d8 <line:663:5, col:14> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x28b8a607068 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a607050 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a606ff8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a604130 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a607018 <col:9> 'int' 5
|   | `-ImplicitCastExpr 0x28b8a6070c0 <col:14> 'limb':'int' <IntegralCast>
|   |   `-ImplicitCastExpr 0x28b8a6070a8 <col:14> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-DeclRefExpr 0x28b8a607088 <col:14> 'u64':'unsigned long long' lvalue Var 0x28b8a6044f8 'high' 'u64':'unsigned long long'
|   |-BinaryOperator 0x28b8a607208 <line:666:5, col:11> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x28b8a607198 <col:5> 'u64':'unsigned long long' lvalue Var 0x28b8a604570 'low' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x28b8a6071f0 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x28b8a6071d8 <col:11> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x28b8a6071b8 <col:11> 'limb':'int' lvalue Var 0x28b8a604468 'a' 'limb':'int'
|   |-BinaryOperator 0x28b8a6072e0 <line:667:5, col:17> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x28b8a607228 <col:5> 'u64':'unsigned long long' lvalue Var 0x28b8a6044f8 'high' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x28b8a6072c8 <col:12, col:17> 'u64':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x28b8a6072a8 <col:12, col:17> 'limb':'int' '>>'
|   |     |-ImplicitCastExpr 0x28b8a607290 <col:12> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x28b8a607248 <col:12> 'limb':'int' lvalue Var 0x28b8a604468 'a' 'limb':'int'
|   |     `-IntegerLiteral 0x28b8a607268 <col:17> 'int' 64
|   |-CompoundAssignOperator 0x28b8a6073b8 <line:668:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x28b8a607360 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a607348 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a607300 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a604130 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a607320 <col:9> 'int' 4
|   | `-ImplicitCastExpr 0x28b8a6073a0 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x28b8a607380 <col:15> 'u64':'unsigned long long' lvalue Var 0x28b8a604570 'low' 'u64':'unsigned long long'
|   |-CompoundAssignOperator 0x28b8a6074a0 <line:669:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x28b8a607448 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a607430 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a6073e8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a604130 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a607408 <col:9> 'int' 5
|   | `-ImplicitCastExpr 0x28b8a607488 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x28b8a607468 <col:15> 'u64':'unsigned long long' lvalue Var 0x28b8a6044f8 'high' 'u64':'unsigned long long'
|   |-BinaryOperator 0x28b8a6075e0 <line:672:5, col:11> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x28b8a607570 <col:5> 'u64':'unsigned long long' lvalue Var 0x28b8a604570 'low' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x28b8a6075c8 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x28b8a6075b0 <col:11> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x28b8a607590 <col:11> 'limb':'int' lvalue Var 0x28b8a604468 'a' 'limb':'int'
|   |-BinaryOperator 0x28b8a6076b8 <line:673:5, col:17> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x28b8a607600 <col:5> 'u64':'unsigned long long' lvalue Var 0x28b8a6044f8 'high' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x28b8a6076a0 <col:12, col:17> 'u64':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x28b8a607680 <col:12, col:17> 'limb':'int' '>>'
|   |     |-ImplicitCastExpr 0x28b8a607668 <col:12> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x28b8a607620 <col:12> 'limb':'int' lvalue Var 0x28b8a604468 'a' 'limb':'int'
|   |     `-IntegerLiteral 0x28b8a607640 <col:17> 'int' 64
|   |-CompoundAssignOperator 0x28b8a607790 <line:674:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x28b8a607738 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a607720 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a6076d8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a604130 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a6076f8 <col:9> 'int' 4
|   | `-ImplicitCastExpr 0x28b8a607778 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x28b8a607758 <col:15> 'u64':'unsigned long long' lvalue Var 0x28b8a604570 'low' 'u64':'unsigned long long'
|   |-CompoundAssignOperator 0x28b8a607878 <line:675:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x28b8a607820 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a607808 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a6077c0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a604130 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a6077e0 <col:9> 'int' 5
|   | `-ImplicitCastExpr 0x28b8a607860 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x28b8a607840 <col:15> 'u64':'unsigned long long' lvalue Var 0x28b8a6044f8 'high' 'u64':'unsigned long long'
|   |-BinaryOperator 0x28b8a6079b8 <line:678:5, col:11> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x28b8a607948 <col:5> 'u64':'unsigned long long' lvalue Var 0x28b8a604570 'low' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x28b8a6079a0 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x28b8a607988 <col:11> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x28b8a607968 <col:11> 'limb':'int' lvalue Var 0x28b8a604468 'a' 'limb':'int'
|   |-BinaryOperator 0x28b8a607a90 <line:679:5, col:17> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x28b8a6079d8 <col:5> 'u64':'unsigned long long' lvalue Var 0x28b8a6044f8 'high' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x28b8a607a78 <col:12, col:17> 'u64':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x28b8a607a58 <col:12, col:17> 'limb':'int' '>>'
|   |     |-ImplicitCastExpr 0x28b8a607a40 <col:12> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x28b8a6079f8 <col:12> 'limb':'int' lvalue Var 0x28b8a604468 'a' 'limb':'int'
|   |     `-IntegerLiteral 0x28b8a607a18 <col:17> 'int' 64
|   |-CompoundAssignOperator 0x28b8a607b68 <line:680:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x28b8a607b10 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a607af8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a607ab0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a604130 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a607ad0 <col:9> 'int' 5
|   | `-ImplicitCastExpr 0x28b8a607b50 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x28b8a607b30 <col:15> 'u64':'unsigned long long' lvalue Var 0x28b8a604570 'low' 'u64':'unsigned long long'
|   |-BinaryOperator 0x28b8a607c68 <line:681:5, col:14> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x28b8a607bf8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a607be0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a607b98 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a604130 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a607bb8 <col:9> 'int' 6
|   | `-ImplicitCastExpr 0x28b8a607c50 <col:14> 'limb':'int' <IntegralCast>
|   |   `-ImplicitCastExpr 0x28b8a607c38 <col:14> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-DeclRefExpr 0x28b8a607c18 <col:14> 'u64':'unsigned long long' lvalue Var 0x28b8a6044f8 'high' 'u64':'unsigned long long'
|   |-BinaryOperator 0x28b8a607d98 <line:684:5, col:11> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x28b8a607d28 <col:5> 'u64':'unsigned long long' lvalue Var 0x28b8a604570 'low' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x28b8a607d80 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x28b8a607d68 <col:11> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x28b8a607d48 <col:11> 'limb':'int' lvalue Var 0x28b8a604468 'a' 'limb':'int'
|   |-BinaryOperator 0x28b8a607e70 <line:685:5, col:17> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x28b8a607db8 <col:5> 'u64':'unsigned long long' lvalue Var 0x28b8a6044f8 'high' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x28b8a607e58 <col:12, col:17> 'u64':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x28b8a607e38 <col:12, col:17> 'limb':'int' '>>'
|   |     |-ImplicitCastExpr 0x28b8a607e20 <col:12> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x28b8a607dd8 <col:12> 'limb':'int' lvalue Var 0x28b8a604468 'a' 'limb':'int'
|   |     `-IntegerLiteral 0x28b8a607df8 <col:17> 'int' 64
|   |-CompoundAssignOperator 0x28b8a607f48 <line:686:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x28b8a607ef0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a607ed8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a607e90 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a604130 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a607eb0 <col:9> 'int' 5
|   | `-ImplicitCastExpr 0x28b8a607f30 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x28b8a607f10 <col:15> 'u64':'unsigned long long' lvalue Var 0x28b8a604570 'low' 'u64':'unsigned long long'
|   |-CompoundAssignOperator 0x28b8a608030 <line:687:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x28b8a607fd8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a607fc0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a607f78 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a604130 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a607f98 <col:9> 'int' 6
|   | `-ImplicitCastExpr 0x28b8a608018 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x28b8a607ff8 <col:15> 'u64':'unsigned long long' lvalue Var 0x28b8a6044f8 'high' 'u64':'unsigned long long'
|   |-BinaryOperator 0x28b8a608170 <line:690:5, col:11> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x28b8a608100 <col:5> 'u64':'unsigned long long' lvalue Var 0x28b8a604570 'low' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x28b8a608158 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x28b8a608140 <col:11> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x28b8a608120 <col:11> 'limb':'int' lvalue Var 0x28b8a604468 'a' 'limb':'int'
|   |-BinaryOperator 0x28b8a608248 <line:691:5, col:17> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x28b8a608190 <col:5> 'u64':'unsigned long long' lvalue Var 0x28b8a6044f8 'high' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x28b8a608230 <col:12, col:17> 'u64':'unsigned long long' <IntegralCast>
|   |   `-BinaryOperator 0x28b8a608210 <col:12, col:17> 'limb':'int' '>>'
|   |     |-ImplicitCastExpr 0x28b8a6081f8 <col:12> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x28b8a6081b0 <col:12> 'limb':'int' lvalue Var 0x28b8a604468 'a' 'limb':'int'
|   |     `-IntegerLiteral 0x28b8a6081d0 <col:17> 'int' 64
|   |-CompoundAssignOperator 0x28b8a608320 <line:692:5, col:15> 'limb':'int' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-ArraySubscriptExpr 0x28b8a6082c8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a6082b0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a608268 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a604130 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a608288 <col:9> 'int' 6
|   | `-ImplicitCastExpr 0x28b8a608308 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x28b8a6082e8 <col:15> 'u64':'unsigned long long' lvalue Var 0x28b8a604570 'low' 'u64':'unsigned long long'
|   `-BinaryOperator 0x28b8a608420 <line:693:5, col:14> 'limb':'int' '='
|     |-ArraySubscriptExpr 0x28b8a6083b0 <col:5, col:10> 'limb':'int' lvalue
|     | |-ImplicitCastExpr 0x28b8a608398 <col:5> 'limb *':'limb *' <LValueToRValue>
|     | | `-DeclRefExpr 0x28b8a608350 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a604130 'out' 'limb *':'limb *'
|     | `-IntegerLiteral 0x28b8a608370 <col:9> 'int' 7
|     `-ImplicitCastExpr 0x28b8a608408 <col:14> 'limb':'int' <IntegralCast>
|       `-ImplicitCastExpr 0x28b8a6083f0 <col:14> 'u64':'unsigned long long' <LValueToRValue>
|         `-DeclRefExpr 0x28b8a6083d0 <col:14> 'u64':'unsigned long long' lvalue Var 0x28b8a6044f8 'high' 'u64':'unsigned long long'
|-FunctionDecl 0x28b8a6088c8 <line:704:1, line:710:1> line:704:13 used felem_mul 'void (limb *, const limb *, const limb *)' static
| |-ParmVarDecl 0x28b8a608670 <col:23, col:33> col:33 used out 'limb *':'limb *'
| |-ParmVarDecl 0x28b8a6086e8 <col:38, col:50> col:50 used in1 'const limb *':'const limb *'
| |-ParmVarDecl 0x28b8a608760 <col:55, col:67> col:67 used in2 'const limb *':'const limb *'
| `-CompoundStmt 0x28b8a608e40 <line:705:1, line:710:1>
|   |-DeclStmt 0x28b8a608aa0 <line:706:5, col:30>
|   | |-VarDecl 0x28b8a6089a8 <col:5, col:16> col:16 used small1 'smallfelem':'u64 [4]'
|   | `-VarDecl 0x28b8a608a20 <col:5, col:24> col:24 used small2 'smallfelem':'u64 [4]'
|   |-CallExpr 0x28b8a608b48 <line:707:5, col:29> 'void'
|   | |-ImplicitCastExpr 0x28b8a608b30 <col:5> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a608ab8 <col:5> 'void (u64 *, const limb *)' Function 0x28b8a5fc378 'felem_shrink' 'void (u64 *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a608b78 <col:18> 'u64 *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a608ad8 <col:18> 'smallfelem':'u64 [4]' lvalue Var 0x28b8a6089a8 'small1' 'smallfelem':'u64 [4]'
|   | `-ImplicitCastExpr 0x28b8a608b90 <col:26> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x28b8a608b10 <col:26> 'const limb *':'const limb *' lvalue ParmVar 0x28b8a6086e8 'in1' 'const limb *':'const limb *'
|   |-CallExpr 0x28b8a608c38 <line:708:5, col:29> 'void'
|   | |-ImplicitCastExpr 0x28b8a608c20 <col:5> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a608ba8 <col:5> 'void (u64 *, const limb *)' Function 0x28b8a5fc378 'felem_shrink' 'void (u64 *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a608c68 <col:18> 'u64 *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a608bc8 <col:18> 'smallfelem':'u64 [4]' lvalue Var 0x28b8a608a20 'small2' 'smallfelem':'u64 [4]'
|   | `-ImplicitCastExpr 0x28b8a608c80 <col:26> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x28b8a608c00 <col:26> 'const limb *':'const limb *' lvalue ParmVar 0x28b8a608760 'in2' 'const limb *':'const limb *'
|   `-CallExpr 0x28b8a608d90 <line:709:5, col:39> 'void'
|     |-ImplicitCastExpr 0x28b8a608d78 <col:5> 'void (*)(limb *, const u64 *, const u64 *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x28b8a608c98 <col:5> 'void (limb *, const u64 *, const u64 *)' Function 0x28b8a604388 'smallfelem_mul' 'void (limb *, const u64 *, const u64 *)'
|     |-ImplicitCastExpr 0x28b8a608dc8 <col:20> 'limb *':'limb *' <LValueToRValue>
|     | `-DeclRefExpr 0x28b8a608cb8 <col:20> 'limb *':'limb *' lvalue ParmVar 0x28b8a608670 'out' 'limb *':'limb *'
|     |-ImplicitCastExpr 0x28b8a608df8 <col:25> 'const u64 *':'const u64 *' <NoOp>
|     | `-ImplicitCastExpr 0x28b8a608de0 <col:25> 'u64 *' <ArrayToPointerDecay>
|     |   `-DeclRefExpr 0x28b8a608cd8 <col:25> 'smallfelem':'u64 [4]' lvalue Var 0x28b8a6089a8 'small1' 'smallfelem':'u64 [4]'
|     `-ImplicitCastExpr 0x28b8a608e28 <col:33> 'const u64 *':'const u64 *' <NoOp>
|       `-ImplicitCastExpr 0x28b8a608e10 <col:33> 'u64 *' <ArrayToPointerDecay>
|         `-DeclRefExpr 0x28b8a608cf8 <col:33> 'smallfelem':'u64 [4]' lvalue Var 0x28b8a608a20 'small2' 'smallfelem':'u64 [4]'
|-FunctionDecl 0x28b8a6f0698 <line:720:1, line:726:1> line:720:13 used felem_small_mul 'void (limb *, const u64 *, const limb *)' static
| |-ParmVarDecl 0x28b8a608e80 <col:29, col:39> col:39 used out 'limb *':'limb *'
| |-ParmVarDecl 0x28b8a608ef8 <col:44, col:61> col:61 used small1 'const u64 *':'const u64 *'
| |-ParmVarDecl 0x28b8a608f70 <line:721:29, col:41> col:41 used in2 'const limb *':'const limb *'
| `-CompoundStmt 0x28b8a6f0a18 <line:722:1, line:726:1>
|   |-DeclStmt 0x28b8a6f07e0 <line:723:5, col:22>
|   | `-VarDecl 0x28b8a6f0778 <col:5, col:16> col:16 used small2 'smallfelem':'u64 [4]'
|   |-CallExpr 0x28b8a6f0888 <line:724:5, col:29> 'void'
|   | |-ImplicitCastExpr 0x28b8a6f0870 <col:5> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6f07f8 <col:5> 'void (u64 *, const limb *)' Function 0x28b8a5fc378 'felem_shrink' 'void (u64 *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a6f08b8 <col:18> 'u64 *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6f0818 <col:18> 'smallfelem':'u64 [4]' lvalue Var 0x28b8a6f0778 'small2' 'smallfelem':'u64 [4]'
|   | `-ImplicitCastExpr 0x28b8a6f08d0 <col:26> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x28b8a6f0850 <col:26> 'const limb *':'const limb *' lvalue ParmVar 0x28b8a608f70 'in2' 'const limb *':'const limb *'
|   `-CallExpr 0x28b8a6f0980 <line:725:5, col:39> 'void'
|     |-ImplicitCastExpr 0x28b8a6f0968 <col:5> 'void (*)(limb *, const u64 *, const u64 *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x28b8a6f08e8 <col:5> 'void (limb *, const u64 *, const u64 *)' Function 0x28b8a604388 'smallfelem_mul' 'void (limb *, const u64 *, const u64 *)'
|     |-ImplicitCastExpr 0x28b8a6f09b8 <col:20> 'limb *':'limb *' <LValueToRValue>
|     | `-DeclRefExpr 0x28b8a6f0908 <col:20> 'limb *':'limb *' lvalue ParmVar 0x28b8a608e80 'out' 'limb *':'limb *'
|     |-ImplicitCastExpr 0x28b8a6f09d0 <col:25> 'const u64 *':'const u64 *' <LValueToRValue>
|     | `-DeclRefExpr 0x28b8a6f0928 <col:25> 'const u64 *':'const u64 *' lvalue ParmVar 0x28b8a608ef8 'small1' 'const u64 *':'const u64 *'
|     `-ImplicitCastExpr 0x28b8a6f0a00 <col:33> 'const u64 *':'const u64 *' <NoOp>
|       `-ImplicitCastExpr 0x28b8a6f09e8 <col:33> 'u64 *' <ArrayToPointerDecay>
|         `-DeclRefExpr 0x28b8a6f0948 <col:33> 'smallfelem':'u64 [4]' lvalue Var 0x28b8a6f0778 'small2' 'smallfelem':'u64 [4]'
|-VarDecl 0x28b8a6f0a50 <line:732:1, line:733:53> line:732:20 used zero100 'const felem':'limb const[4]' static cinit
| `-InitListExpr 0x28b8a6f1510 <line:733:5, col:53> 'const felem':'limb const[4]'
|   |-BinaryOperator 0x28b8a6f0d90 <line:728:22, col:78> 'int' '-'
|   | |-BinaryOperator 0x28b8a6f0c88 <col:22, col:59> 'int' '-'
|   | | |-ParenExpr 0x28b8a6f0b80 <col:22, col:39> 'limb':'int'
|   | | | `-BinaryOperator 0x28b8a6f0b60 <col:23, col:36> 'limb':'int' '<<'
|   | | |   |-ParenExpr 0x28b8a6f0b18 <col:23, col:31> 'limb':'int'
|   | | |   | `-CStyleCastExpr 0x28b8a6f0af0 <col:24, col:30> 'limb':'int' <NoOp>
|   | | |   |   `-IntegerLiteral 0x28b8a6f0ab8 <col:30> 'int' 1
|   | | |   `-IntegerLiteral 0x28b8a6f0b38 <col:36> 'int' 100
|   | | `-ParenExpr 0x28b8a6f0c68 <col:43, col:59> 'limb':'int'
|   | |   `-BinaryOperator 0x28b8a6f0c48 <col:44, col:57> 'limb':'int' '<<'
|   | |     |-ParenExpr 0x28b8a6f0c00 <col:44, col:52> 'limb':'int'
|   | |     | `-CStyleCastExpr 0x28b8a6f0bd8 <col:45, col:51> 'limb':'int' <NoOp>
|   | |     |   `-IntegerLiteral 0x28b8a6f0ba0 <col:51> 'int' 1
|   | |     `-IntegerLiteral 0x28b8a6f0c20 <col:57> 'int' 36
|   | `-ParenExpr 0x28b8a6f0d70 <col:63, col:78> 'limb':'int'
|   |   `-BinaryOperator 0x28b8a6f0d50 <col:64, col:77> 'limb':'int' '<<'
|   |     |-ParenExpr 0x28b8a6f0d08 <col:64, col:72> 'limb':'int'
|   |     | `-CStyleCastExpr 0x28b8a6f0ce0 <col:65, col:71> 'limb':'int' <NoOp>
|   |     |   `-IntegerLiteral 0x28b8a6f0ca8 <col:71> 'int' 1
|   |     `-IntegerLiteral 0x28b8a6f0d28 <col:77> 'int' 4
|   |-ParenExpr 0x28b8a6f0e78 <line:729:17, col:34> 'limb':'int'
|   | `-BinaryOperator 0x28b8a6f0e58 <col:18, col:31> 'limb':'int' '<<'
|   |   |-ParenExpr 0x28b8a6f0e10 <col:18, col:26> 'limb':'int'
|   |   | `-CStyleCastExpr 0x28b8a6f0de8 <col:19, col:25> 'limb':'int' <NoOp>
|   |   |   `-IntegerLiteral 0x28b8a6f0db0 <col:25> 'int' 1
|   |   `-IntegerLiteral 0x28b8a6f0e30 <col:31> 'int' 100
|   |-BinaryOperator 0x28b8a6f1170 <line:730:22, col:78> 'int' '+'
|   | |-BinaryOperator 0x28b8a6f1068 <col:22, col:59> 'int' '-'
|   | | |-ParenExpr 0x28b8a6f0f60 <col:22, col:39> 'limb':'int'
|   | | | `-BinaryOperator 0x28b8a6f0f40 <col:23, col:36> 'limb':'int' '<<'
|   | | |   |-ParenExpr 0x28b8a6f0ef8 <col:23, col:31> 'limb':'int'
|   | | |   | `-CStyleCastExpr 0x28b8a6f0ed0 <col:24, col:30> 'limb':'int' <NoOp>
|   | | |   |   `-IntegerLiteral 0x28b8a6f0e98 <col:30> 'int' 1
|   | | |   `-IntegerLiteral 0x28b8a6f0f18 <col:36> 'int' 100
|   | | `-ParenExpr 0x28b8a6f1048 <col:43, col:59> 'limb':'int'
|   | |   `-BinaryOperator 0x28b8a6f1028 <col:44, col:57> 'limb':'int' '<<'
|   | |     |-ParenExpr 0x28b8a6f0fe0 <col:44, col:52> 'limb':'int'
|   | |     | `-CStyleCastExpr 0x28b8a6f0fb8 <col:45, col:51> 'limb':'int' <NoOp>
|   | |     |   `-IntegerLiteral 0x28b8a6f0f80 <col:51> 'int' 1
|   | |     `-IntegerLiteral 0x28b8a6f1000 <col:57> 'int' 36
|   | `-ParenExpr 0x28b8a6f1150 <col:63, col:78> 'limb':'int'
|   |   `-BinaryOperator 0x28b8a6f1130 <col:64, col:77> 'limb':'int' '<<'
|   |     |-ParenExpr 0x28b8a6f10e8 <col:64, col:72> 'limb':'int'
|   |     | `-CStyleCastExpr 0x28b8a6f10c0 <col:65, col:71> 'limb':'int' <NoOp>
|   |     |   `-IntegerLiteral 0x28b8a6f1088 <col:71> 'int' 1
|   |     `-IntegerLiteral 0x28b8a6f1108 <col:77> 'int' 4
|   `-BinaryOperator 0x28b8a6f1468 <col:22, col:78> 'int' '+'
|     |-BinaryOperator 0x28b8a6f1360 <col:22, col:59> 'int' '-'
|     | |-ParenExpr 0x28b8a6f1258 <col:22, col:39> 'limb':'int'
|     | | `-BinaryOperator 0x28b8a6f1238 <col:23, col:36> 'limb':'int' '<<'
|     | |   |-ParenExpr 0x28b8a6f11f0 <col:23, col:31> 'limb':'int'
|     | |   | `-CStyleCastExpr 0x28b8a6f11c8 <col:24, col:30> 'limb':'int' <NoOp>
|     | |   |   `-IntegerLiteral 0x28b8a6f1190 <col:30> 'int' 1
|     | |   `-IntegerLiteral 0x28b8a6f1210 <col:36> 'int' 100
|     | `-ParenExpr 0x28b8a6f1340 <col:43, col:59> 'limb':'int'
|     |   `-BinaryOperator 0x28b8a6f1320 <col:44, col:57> 'limb':'int' '<<'
|     |     |-ParenExpr 0x28b8a6f12d8 <col:44, col:52> 'limb':'int'
|     |     | `-CStyleCastExpr 0x28b8a6f12b0 <col:45, col:51> 'limb':'int' <NoOp>
|     |     |   `-IntegerLiteral 0x28b8a6f1278 <col:51> 'int' 1
|     |     `-IntegerLiteral 0x28b8a6f12f8 <col:57> 'int' 36
|     `-ParenExpr 0x28b8a6f1448 <col:63, col:78> 'limb':'int'
|       `-BinaryOperator 0x28b8a6f1428 <col:64, col:77> 'limb':'int' '<<'
|         |-ParenExpr 0x28b8a6f13e0 <col:64, col:72> 'limb':'int'
|         | `-CStyleCastExpr 0x28b8a6f13b8 <col:65, col:71> 'limb':'int' <NoOp>
|         |   `-IntegerLiteral 0x28b8a6f1380 <col:71> 'int' 1
|         `-IntegerLiteral 0x28b8a6f1400 <col:77> 'int' 4
|-FunctionDecl 0x28b8a6f16f8 <line:749:1, line:781:1> line:749:13 used felem_reduce_ 'void (limb *, const limb *)' static
| |-ParmVarDecl 0x28b8a6f1580 <col:27, col:33> col:33 used out 'limb *':'limb *'
| |-ParmVarDecl 0x28b8a6f15f8 <col:38, col:54> col:54 used in 'const limb *':'const limb *'
| `-CompoundStmt 0x28b8a6ed028 <line:750:1, line:781:1>
|   |-CompoundAssignOperator 0x28b8a6f1e48 <line:763:5, col:27> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x28b8a6f1d28 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a6f1d10 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a6f1cc8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a6f1580 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a6f1ce8 <col:9> 'int' 1
|   | `-ParenExpr 0x28b8a6f1e28 <col:15, col:27> 'limb':'int'
|   |   `-BinaryOperator 0x28b8a6f1e08 <col:16, col:25> 'limb':'int' '<<'
|   |     |-ImplicitCastExpr 0x28b8a6f1df0 <col:16, col:20> 'limb':'int' <LValueToRValue>
|   |     | `-ArraySubscriptExpr 0x28b8a6f1da8 <col:16, col:20> 'const limb':'const int' lvalue
|   |     |   |-ImplicitCastExpr 0x28b8a6f1d90 <col:16> 'const limb *':'const limb *' <LValueToRValue>
|   |     |   | `-DeclRefExpr 0x28b8a6f1d48 <col:16> 'const limb *':'const limb *' lvalue ParmVar 0x28b8a6f15f8 'in' 'const limb *':'const limb *'
|   |     |   `-IntegerLiteral 0x28b8a6f1d68 <col:19> 'int' 4
|   |     `-IntegerLiteral 0x28b8a6f1dc8 <col:25> 'int' 32
|   |-CompoundAssignOperator 0x28b8a6f1ff8 <line:764:5, col:27> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x28b8a6f1ed8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a6f1ec0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a6f1e78 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a6f1580 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a6f1e98 <col:9> 'int' 3
|   | `-ParenExpr 0x28b8a6f1fd8 <col:15, col:27> 'limb':'int'
|   |   `-BinaryOperator 0x28b8a6f1fb8 <col:16, col:25> 'limb':'int' '<<'
|   |     |-ImplicitCastExpr 0x28b8a6f1fa0 <col:16, col:20> 'limb':'int' <LValueToRValue>
|   |     | `-ArraySubscriptExpr 0x28b8a6f1f58 <col:16, col:20> 'const limb':'const int' lvalue
|   |     |   |-ImplicitCastExpr 0x28b8a6f1f40 <col:16> 'const limb *':'const limb *' <LValueToRValue>
|   |     |   | `-DeclRefExpr 0x28b8a6f1ef8 <col:16> 'const limb *':'const limb *' lvalue ParmVar 0x28b8a6f15f8 'in' 'const limb *':'const limb *'
|   |     |   `-IntegerLiteral 0x28b8a6f1f18 <col:19> 'int' 4
|   |     `-IntegerLiteral 0x28b8a6f1f78 <col:25> 'int' 32
|   |-CompoundAssignOperator 0x28b8a6f21a8 <line:767:5, col:27> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x28b8a6f2088 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a6f2070 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a6f2028 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a6f1580 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a6f2048 <col:9> 'int' 2
|   | `-ParenExpr 0x28b8a6f2188 <col:15, col:27> 'limb':'int'
|   |   `-BinaryOperator 0x28b8a6f2168 <col:16, col:25> 'limb':'int' '<<'
|   |     |-ImplicitCastExpr 0x28b8a6f2150 <col:16, col:20> 'limb':'int' <LValueToRValue>
|   |     | `-ArraySubscriptExpr 0x28b8a6f2108 <col:16, col:20> 'const limb':'const int' lvalue
|   |     |   |-ImplicitCastExpr 0x28b8a6f20f0 <col:16> 'const limb *':'const limb *' <LValueToRValue>
|   |     |   | `-DeclRefExpr 0x28b8a6f20a8 <col:16> 'const limb *':'const limb *' lvalue ParmVar 0x28b8a6f15f8 'in' 'const limb *':'const limb *'
|   |     |   `-IntegerLiteral 0x28b8a6f20c8 <col:19> 'int' 5
|   |     `-IntegerLiteral 0x28b8a6f2128 <col:25> 'int' 32
|   |-CompoundAssignOperator 0x28b8a6f22f0 <line:770:5, col:19> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x28b8a6f2238 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a6f2220 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a6f21d8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a6f1580 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a6f21f8 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x28b8a6f22d8 <col:15, col:19> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x28b8a6f22b8 <col:15, col:19> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x28b8a6f22a0 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x28b8a6f2258 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x28b8a6f15f8 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x28b8a6f2278 <col:18> 'int' 6
|   |-CompoundAssignOperator 0x28b8a6f24a0 <line:771:5, col:27> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x28b8a6f2380 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a6f2368 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a6f2320 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a6f1580 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a6f2340 <col:9> 'int' 0
|   | `-ParenExpr 0x28b8a6f2480 <col:15, col:27> 'limb':'int'
|   |   `-BinaryOperator 0x28b8a6f2460 <col:16, col:25> 'limb':'int' '<<'
|   |     |-ImplicitCastExpr 0x28b8a6f2448 <col:16, col:20> 'limb':'int' <LValueToRValue>
|   |     | `-ArraySubscriptExpr 0x28b8a6f2400 <col:16, col:20> 'const limb':'const int' lvalue
|   |     |   |-ImplicitCastExpr 0x28b8a6f23e8 <col:16> 'const limb *':'const limb *' <LValueToRValue>
|   |     |   | `-DeclRefExpr 0x28b8a6f23a0 <col:16> 'const limb *':'const limb *' lvalue ParmVar 0x28b8a6f15f8 'in' 'const limb *':'const limb *'
|   |     |   `-IntegerLiteral 0x28b8a6f23c0 <col:19> 'int' 6
|   |     `-IntegerLiteral 0x28b8a6f2420 <col:25> 'int' 32
|   |-CompoundAssignOperator 0x28b8a6ec640 <line:772:5, col:27> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x28b8a6f2530 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a6f2518 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a6f24d0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a6f1580 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a6f24f0 <col:9> 'int' 1
|   | `-ParenExpr 0x28b8a6ec620 <col:15, col:27> 'limb':'int'
|   |   `-BinaryOperator 0x28b8a6ec600 <col:16, col:25> 'limb':'int' '<<'
|   |     |-ImplicitCastExpr 0x28b8a6ec5e8 <col:16, col:20> 'limb':'int' <LValueToRValue>
|   |     | `-ArraySubscriptExpr 0x28b8a6f25b0 <col:16, col:20> 'const limb':'const int' lvalue
|   |     |   |-ImplicitCastExpr 0x28b8a6f2598 <col:16> 'const limb *':'const limb *' <LValueToRValue>
|   |     |   | `-DeclRefExpr 0x28b8a6f2550 <col:16> 'const limb *':'const limb *' lvalue ParmVar 0x28b8a6f15f8 'in' 'const limb *':'const limb *'
|   |     |   `-IntegerLiteral 0x28b8a6f2570 <col:19> 'int' 6
|   |     `-IntegerLiteral 0x28b8a6ec5c0 <col:25> 'int' 33
|   |-CompoundAssignOperator 0x28b8a6ec7f0 <line:773:5, col:25> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x28b8a6ec6d0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a6ec6b8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a6ec670 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a6f1580 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a6ec690 <col:9> 'int' 2
|   | `-ParenExpr 0x28b8a6ec7d0 <col:15, col:25> 'int'
|   |   `-BinaryOperator 0x28b8a6ec7b0 <col:16, col:24> 'int' '*'
|   |     |-ImplicitCastExpr 0x28b8a6ec798 <col:16, col:20> 'limb':'int' <LValueToRValue>
|   |     | `-ArraySubscriptExpr 0x28b8a6ec750 <col:16, col:20> 'const limb':'const int' lvalue
|   |     |   |-ImplicitCastExpr 0x28b8a6ec738 <col:16> 'const limb *':'const limb *' <LValueToRValue>
|   |     |   | `-DeclRefExpr 0x28b8a6ec6f0 <col:16> 'const limb *':'const limb *' lvalue ParmVar 0x28b8a6f15f8 'in' 'const limb *':'const limb *'
|   |     |   `-IntegerLiteral 0x28b8a6ec710 <col:19> 'int' 6
|   |     `-IntegerLiteral 0x28b8a6ec770 <col:24> 'int' 2
|   |-CompoundAssignOperator 0x28b8a6ec9a0 <line:774:5, col:27> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x28b8a6ec880 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a6ec868 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a6ec820 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a6f1580 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a6ec840 <col:9> 'int' 3
|   | `-ParenExpr 0x28b8a6ec980 <col:15, col:27> 'limb':'int'
|   |   `-BinaryOperator 0x28b8a6ec960 <col:16, col:25> 'limb':'int' '<<'
|   |     |-ImplicitCastExpr 0x28b8a6ec948 <col:16, col:20> 'limb':'int' <LValueToRValue>
|   |     | `-ArraySubscriptExpr 0x28b8a6ec900 <col:16, col:20> 'const limb':'const int' lvalue
|   |     |   |-ImplicitCastExpr 0x28b8a6ec8e8 <col:16> 'const limb *':'const limb *' <LValueToRValue>
|   |     |   | `-DeclRefExpr 0x28b8a6ec8a0 <col:16> 'const limb *':'const limb *' lvalue ParmVar 0x28b8a6f15f8 'in' 'const limb *':'const limb *'
|   |     |   `-IntegerLiteral 0x28b8a6ec8c0 <col:19> 'int' 6
|   |     `-IntegerLiteral 0x28b8a6ec920 <col:25> 'int' 32
|   |-CompoundAssignOperator 0x28b8a6ecae8 <line:777:5, col:19> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x28b8a6eca30 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a6eca18 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a6ec9d0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a6f1580 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a6ec9f0 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x28b8a6ecad0 <col:15, col:19> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x28b8a6ecab0 <col:15, col:19> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x28b8a6eca98 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x28b8a6eca50 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x28b8a6f15f8 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x28b8a6eca70 <col:18> 'int' 7
|   |-CompoundAssignOperator 0x28b8a6ecc98 <line:778:5, col:27> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x28b8a6ecb78 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a6ecb60 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a6ecb18 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a6f1580 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a6ecb38 <col:9> 'int' 0
|   | `-ParenExpr 0x28b8a6ecc78 <col:15, col:27> 'limb':'int'
|   |   `-BinaryOperator 0x28b8a6ecc58 <col:16, col:25> 'limb':'int' '<<'
|   |     |-ImplicitCastExpr 0x28b8a6ecc40 <col:16, col:20> 'limb':'int' <LValueToRValue>
|   |     | `-ArraySubscriptExpr 0x28b8a6ecbf8 <col:16, col:20> 'const limb':'const int' lvalue
|   |     |   |-ImplicitCastExpr 0x28b8a6ecbe0 <col:16> 'const limb *':'const limb *' <LValueToRValue>
|   |     |   | `-DeclRefExpr 0x28b8a6ecb98 <col:16> 'const limb *':'const limb *' lvalue ParmVar 0x28b8a6f15f8 'in' 'const limb *':'const limb *'
|   |     |   `-IntegerLiteral 0x28b8a6ecbb8 <col:19> 'int' 7
|   |     `-IntegerLiteral 0x28b8a6ecc18 <col:25> 'int' 32
|   |-CompoundAssignOperator 0x28b8a6ece48 <line:779:5, col:27> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x28b8a6ecd28 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a6ecd10 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a6eccc8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a6f1580 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a6ecce8 <col:9> 'int' 2
|   | `-ParenExpr 0x28b8a6ece28 <col:15, col:27> 'limb':'int'
|   |   `-BinaryOperator 0x28b8a6ece08 <col:16, col:25> 'limb':'int' '<<'
|   |     |-ImplicitCastExpr 0x28b8a6ecdf0 <col:16, col:20> 'limb':'int' <LValueToRValue>
|   |     | `-ArraySubscriptExpr 0x28b8a6ecda8 <col:16, col:20> 'const limb':'const int' lvalue
|   |     |   |-ImplicitCastExpr 0x28b8a6ecd90 <col:16> 'const limb *':'const limb *' <LValueToRValue>
|   |     |   | `-DeclRefExpr 0x28b8a6ecd48 <col:16> 'const limb *':'const limb *' lvalue ParmVar 0x28b8a6f15f8 'in' 'const limb *':'const limb *'
|   |     |   `-IntegerLiteral 0x28b8a6ecd68 <col:19> 'int' 7
|   |     `-IntegerLiteral 0x28b8a6ecdc8 <col:25> 'int' 33
|   `-CompoundAssignOperator 0x28b8a6ecff8 <line:780:5, col:25> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|     |-ArraySubscriptExpr 0x28b8a6eced8 <col:5, col:10> 'limb':'int' lvalue
|     | |-ImplicitCastExpr 0x28b8a6ecec0 <col:5> 'limb *':'limb *' <LValueToRValue>
|     | | `-DeclRefExpr 0x28b8a6ece78 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a6f1580 'out' 'limb *':'limb *'
|     | `-IntegerLiteral 0x28b8a6ece98 <col:9> 'int' 3
|     `-ParenExpr 0x28b8a6ecfd8 <col:15, col:25> 'int'
|       `-BinaryOperator 0x28b8a6ecfb8 <col:16, col:24> 'int' '*'
|         |-ImplicitCastExpr 0x28b8a6ecfa0 <col:16, col:20> 'limb':'int' <LValueToRValue>
|         | `-ArraySubscriptExpr 0x28b8a6ecf58 <col:16, col:20> 'const limb':'const int' lvalue
|         |   |-ImplicitCastExpr 0x28b8a6ecf40 <col:16> 'const limb *':'const limb *' <LValueToRValue>
|         |   | `-DeclRefExpr 0x28b8a6ecef8 <col:16> 'const limb *':'const limb *' lvalue ParmVar 0x28b8a6f15f8 'in' 'const limb *':'const limb *'
|         |   `-IntegerLiteral 0x28b8a6ecf18 <col:19> 'int' 7
|         `-IntegerLiteral 0x28b8a6ecf78 <col:24> 'int' 3
|-FunctionDecl 0x28b8a6ed1e8 <line:792:1, line:812:1> line:792:13 used felem_reduce 'void (limb *, const limb *)' static
| |-ParmVarDecl 0x28b8a6ed0a8 <col:26, col:32> col:32 used out 'limb *':'limb *'
| |-ParmVarDecl 0x28b8a6ed120 <col:37, col:53> col:53 used in 'const limb *':'const limb *'
| `-CompoundStmt 0x28b8a6edbf0 <line:793:1, line:812:1>
|   |-BinaryOperator 0x28b8a6ed480 <line:794:5, col:31> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x28b8a6ed310 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a6ed2f8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a6ed2b0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a6ed0a8 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a6ed2d0 <col:9> 'int' 0
|   | `-BinaryOperator 0x28b8a6ed460 <col:14, col:31> 'int' '+'
|   |   |-ImplicitCastExpr 0x28b8a6ed430 <col:14, col:23> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x28b8a6ed390 <col:14, col:23> 'const limb':'const int' lvalue
|   |   |   |-ImplicitCastExpr 0x28b8a6ed378 <col:14> 'const limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x28b8a6ed330 <col:14> 'const felem':'limb const[4]' lvalue Var 0x28b8a6f0a50 'zero100' 'const felem':'limb const[4]'
|   |   |   `-IntegerLiteral 0x28b8a6ed350 <col:22> 'int' 0
|   |   `-ImplicitCastExpr 0x28b8a6ed448 <col:27, col:31> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x28b8a6ed410 <col:27, col:31> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x28b8a6ed3f8 <col:27> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x28b8a6ed3b0 <col:27> 'const limb *':'const limb *' lvalue ParmVar 0x28b8a6ed120 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x28b8a6ed3d0 <col:30> 'int' 0
|   |-BinaryOperator 0x28b8a6ed6b8 <line:795:5, col:31> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x28b8a6ed548 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a6ed530 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a6ed4e8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a6ed0a8 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a6ed508 <col:9> 'int' 1
|   | `-BinaryOperator 0x28b8a6ed698 <col:14, col:31> 'int' '+'
|   |   |-ImplicitCastExpr 0x28b8a6ed668 <col:14, col:23> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x28b8a6ed5c8 <col:14, col:23> 'const limb':'const int' lvalue
|   |   |   |-ImplicitCastExpr 0x28b8a6ed5b0 <col:14> 'const limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x28b8a6ed568 <col:14> 'const felem':'limb const[4]' lvalue Var 0x28b8a6f0a50 'zero100' 'const felem':'limb const[4]'
|   |   |   `-IntegerLiteral 0x28b8a6ed588 <col:22> 'int' 1
|   |   `-ImplicitCastExpr 0x28b8a6ed680 <col:27, col:31> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x28b8a6ed648 <col:27, col:31> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x28b8a6ed630 <col:27> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x28b8a6ed5e8 <col:27> 'const limb *':'const limb *' lvalue ParmVar 0x28b8a6ed120 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x28b8a6ed608 <col:30> 'int' 1
|   |-BinaryOperator 0x28b8a6ed8a8 <line:796:5, col:31> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x28b8a6ed738 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a6ed720 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a6ed6d8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a6ed0a8 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a6ed6f8 <col:9> 'int' 2
|   | `-BinaryOperator 0x28b8a6ed888 <col:14, col:31> 'int' '+'
|   |   |-ImplicitCastExpr 0x28b8a6ed858 <col:14, col:23> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x28b8a6ed7b8 <col:14, col:23> 'const limb':'const int' lvalue
|   |   |   |-ImplicitCastExpr 0x28b8a6ed7a0 <col:14> 'const limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x28b8a6ed758 <col:14> 'const felem':'limb const[4]' lvalue Var 0x28b8a6f0a50 'zero100' 'const felem':'limb const[4]'
|   |   |   `-IntegerLiteral 0x28b8a6ed778 <col:22> 'int' 2
|   |   `-ImplicitCastExpr 0x28b8a6ed870 <col:27, col:31> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x28b8a6ed838 <col:27, col:31> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x28b8a6ed820 <col:27> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x28b8a6ed7d8 <col:27> 'const limb *':'const limb *' lvalue ParmVar 0x28b8a6ed120 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x28b8a6ed7f8 <col:30> 'int' 2
|   |-BinaryOperator 0x28b8a6eda98 <line:797:5, col:31> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x28b8a6ed928 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a6ed910 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a6ed8c8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a6ed0a8 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a6ed8e8 <col:9> 'int' 3
|   | `-BinaryOperator 0x28b8a6eda78 <col:14, col:31> 'int' '+'
|   |   |-ImplicitCastExpr 0x28b8a6eda48 <col:14, col:23> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x28b8a6ed9a8 <col:14, col:23> 'const limb':'const int' lvalue
|   |   |   |-ImplicitCastExpr 0x28b8a6ed990 <col:14> 'const limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x28b8a6ed948 <col:14> 'const felem':'limb const[4]' lvalue Var 0x28b8a6f0a50 'zero100' 'const felem':'limb const[4]'
|   |   |   `-IntegerLiteral 0x28b8a6ed968 <col:22> 'int' 3
|   |   `-ImplicitCastExpr 0x28b8a6eda60 <col:27, col:31> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x28b8a6eda28 <col:27, col:31> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x28b8a6eda10 <col:27> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x28b8a6ed9c8 <col:27> 'const limb *':'const limb *' lvalue ParmVar 0x28b8a6ed120 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x28b8a6ed9e8 <col:30> 'int' 3
|   `-CallExpr 0x28b8a6edb90 <line:799:5, col:26> 'void'
|     |-ImplicitCastExpr 0x28b8a6edb78 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x28b8a6edab8 <col:5> 'void (limb *, const limb *)' Function 0x28b8a6f16f8 'felem_reduce_' 'void (limb *, const limb *)'
|     |-ImplicitCastExpr 0x28b8a6edbc0 <col:19> 'limb *':'limb *' <LValueToRValue>
|     | `-DeclRefExpr 0x28b8a6edad8 <col:19> 'limb *':'limb *' lvalue ParmVar 0x28b8a6ed0a8 'out' 'limb *':'limb *'
|     `-ImplicitCastExpr 0x28b8a6edbd8 <col:24> 'const limb *':'const limb *' <LValueToRValue>
|       `-DeclRefExpr 0x28b8a6edaf8 <col:24> 'const limb *':'const limb *' lvalue ParmVar 0x28b8a6ed120 'in' 'const limb *':'const limb *'
|-FunctionDecl 0x28b8a6edd78 <line:821:1, line:841:1> line:821:13 used felem_reduce_zero105 'void (limb *, const limb *)' static
| |-ParmVarDecl 0x28b8a6edc38 <col:34, col:40> col:40 used out 'limb *':'limb *'
| |-ParmVarDecl 0x28b8a6edcb0 <col:45, col:61> col:61 used in 'const limb *':'const limb *'
| `-CompoundStmt 0x28b8a6f8738 <line:822:1, line:841:1>
|   |-BinaryOperator 0x28b8a6ee010 <line:823:5, col:31> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x28b8a6edea0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a6ede88 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a6ede40 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a6edc38 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a6ede60 <col:9> 'int' 0
|   | `-BinaryOperator 0x28b8a6edff0 <col:14, col:31> 'int' '+'
|   |   |-ImplicitCastExpr 0x28b8a6edfc0 <col:14, col:23> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x28b8a6edf20 <col:14, col:23> 'const limb':'const int' lvalue
|   |   |   |-ImplicitCastExpr 0x28b8a6edf08 <col:14> 'const limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x28b8a6edec0 <col:14> 'const felem':'limb const[4]' lvalue Var 0x28b8a5f5828 'zero105' 'const felem':'limb const[4]'
|   |   |   `-IntegerLiteral 0x28b8a6edee0 <col:22> 'int' 0
|   |   `-ImplicitCastExpr 0x28b8a6edfd8 <col:27, col:31> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x28b8a6edfa0 <col:27, col:31> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x28b8a6edf88 <col:27> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x28b8a6edf40 <col:27> 'const limb *':'const limb *' lvalue ParmVar 0x28b8a6edcb0 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x28b8a6edf60 <col:30> 'int' 0
|   |-BinaryOperator 0x28b8a6ee200 <line:824:5, col:31> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x28b8a6ee090 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a6ee078 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a6ee030 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a6edc38 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a6ee050 <col:9> 'int' 1
|   | `-BinaryOperator 0x28b8a6ee1e0 <col:14, col:31> 'int' '+'
|   |   |-ImplicitCastExpr 0x28b8a6ee1b0 <col:14, col:23> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x28b8a6ee110 <col:14, col:23> 'const limb':'const int' lvalue
|   |   |   |-ImplicitCastExpr 0x28b8a6ee0f8 <col:14> 'const limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x28b8a6ee0b0 <col:14> 'const felem':'limb const[4]' lvalue Var 0x28b8a5f5828 'zero105' 'const felem':'limb const[4]'
|   |   |   `-IntegerLiteral 0x28b8a6ee0d0 <col:22> 'int' 1
|   |   `-ImplicitCastExpr 0x28b8a6ee1c8 <col:27, col:31> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x28b8a6ee190 <col:27, col:31> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x28b8a6ee178 <col:27> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x28b8a6ee130 <col:27> 'const limb *':'const limb *' lvalue ParmVar 0x28b8a6edcb0 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x28b8a6ee150 <col:30> 'int' 1
|   |-BinaryOperator 0x28b8a6ee3f0 <line:825:5, col:31> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x28b8a6ee280 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a6ee268 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a6ee220 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a6edc38 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a6ee240 <col:9> 'int' 2
|   | `-BinaryOperator 0x28b8a6ee3d0 <col:14, col:31> 'int' '+'
|   |   |-ImplicitCastExpr 0x28b8a6ee3a0 <col:14, col:23> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x28b8a6ee300 <col:14, col:23> 'const limb':'const int' lvalue
|   |   |   |-ImplicitCastExpr 0x28b8a6ee2e8 <col:14> 'const limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x28b8a6ee2a0 <col:14> 'const felem':'limb const[4]' lvalue Var 0x28b8a5f5828 'zero105' 'const felem':'limb const[4]'
|   |   |   `-IntegerLiteral 0x28b8a6ee2c0 <col:22> 'int' 2
|   |   `-ImplicitCastExpr 0x28b8a6ee3b8 <col:27, col:31> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x28b8a6ee380 <col:27, col:31> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x28b8a6ee368 <col:27> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x28b8a6ee320 <col:27> 'const limb *':'const limb *' lvalue ParmVar 0x28b8a6edcb0 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x28b8a6ee340 <col:30> 'int' 2
|   |-BinaryOperator 0x28b8a6f8640 <line:826:5, col:31> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x28b8a6ee470 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x28b8a6ee458 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a6ee410 <col:5> 'limb *':'limb *' lvalue ParmVar 0x28b8a6edc38 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x28b8a6ee430 <col:9> 'int' 3
|   | `-BinaryOperator 0x28b8a6f8620 <col:14, col:31> 'int' '+'
|   |   |-ImplicitCastExpr 0x28b8a6ee590 <col:14, col:23> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x28b8a6ee4f0 <col:14, col:23> 'const limb':'const int' lvalue
|   |   |   |-ImplicitCastExpr 0x28b8a6ee4d8 <col:14> 'const limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x28b8a6ee490 <col:14> 'const felem':'limb const[4]' lvalue Var 0x28b8a5f5828 'zero105' 'const felem':'limb const[4]'
|   |   |   `-IntegerLiteral 0x28b8a6ee4b0 <col:22> 'int' 3
|   |   `-ImplicitCastExpr 0x28b8a6ee5a8 <col:27, col:31> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x28b8a6ee570 <col:27, col:31> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x28b8a6ee558 <col:27> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x28b8a6ee510 <col:27> 'const limb *':'const limb *' lvalue ParmVar 0x28b8a6edcb0 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x28b8a6ee530 <col:30> 'int' 3
|   `-CallExpr 0x28b8a6f86d8 <line:828:5, col:26> 'void'
|     |-ImplicitCastExpr 0x28b8a6f86c0 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x28b8a6f8660 <col:5> 'void (limb *, const limb *)' Function 0x28b8a6f16f8 'felem_reduce_' 'void (limb *, const limb *)'
|     |-ImplicitCastExpr 0x28b8a6f8708 <col:19> 'limb *':'limb *' <LValueToRValue>
|     | `-DeclRefExpr 0x28b8a6f8680 <col:19> 'limb *':'limb *' lvalue ParmVar 0x28b8a6edc38 'out' 'limb *':'limb *'
|     `-ImplicitCastExpr 0x28b8a6f8720 <col:24> 'const limb *':'const limb *' <LValueToRValue>
|       `-DeclRefExpr 0x28b8a6f86a0 <col:24> 'const limb *':'const limb *' lvalue ParmVar 0x28b8a6edcb0 'in' 'const limb *':'const limb *'
|-FunctionDecl 0x28b8a6f89d8 <line:847:1, line:853:1> line:847:13 used subtract_u64 'void (u64 *, u64 *, u64)' static
| |-ParmVarDecl 0x28b8a6f8780 <col:26, col:31> col:31 used result 'u64 *'
| |-ParmVarDecl 0x28b8a6f87f8 <col:39, col:44> col:44 used carry 'u64 *'
| |-ParmVarDecl 0x28b8a6f8870 <col:51, col:55> col:55 used v 'u64':'unsigned long long'
| `-CompoundStmt 0x28b8a6f8bb8 <line:848:1, line:853:1>
|-FunctionDecl 0x28b8a6f8d18 <line:859:1, line:920:1> line:859:13 used felem_contract 'void (u64 *, const limb *)' static
| |-ParmVarDecl 0x28b8a6f8bd8 <col:28, col:39> col:39 used out 'u64 *':'u64 *'
| |-ParmVarDecl 0x28b8a6f8c50 <col:44, col:56> col:56 used in 'const limb *':'const limb *'
| `-CompoundStmt 0x28b8a6eaf98 <line:860:1, line:920:1>
|   |-DeclStmt 0x28b8a6f8e60 <line:861:5, col:15>
|   | `-VarDecl 0x28b8a6f8df8 <col:5, col:14> col:14 used i 'unsigned int'
|   |-DeclStmt 0x28b8a6f9080 <line:862:5, col:48>
|   | |-VarDecl 0x28b8a6f8e88 <col:5, col:28> col:9 used all_equal_so_far 'u64':'unsigned long long' cinit
|   | | `-ImplicitCastExpr 0x28b8a6f8f18 <col:28> 'u64':'unsigned long long' <IntegralCast>
|   | |   `-IntegerLiteral 0x28b8a6f8ef0 <col:28> 'int' 0
|   | |-VarDecl 0x28b8a6f8f40 <col:5, col:40> col:31 used result 'u64':'unsigned long long' cinit
|   | | `-ImplicitCastExpr 0x28b8a6f8fd0 <col:40> 'u64':'unsigned long long' <IntegralCast>
|   | |   `-IntegerLiteral 0x28b8a6f8fa8 <col:40> 'int' 0
|   | `-VarDecl 0x28b8a6f8ff8 <col:5, col:43> col:43 used carry 'u64':'unsigned long long'
|   |-CallExpr 0x28b8a6f9110 <line:864:5, col:25> 'void'
|   | |-ImplicitCastExpr 0x28b8a6f90f8 <col:5> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6f9098 <col:5> 'void (u64 *, const limb *)' Function 0x28b8a5fc378 'felem_shrink' 'void (u64 *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a6f9140 <col:18> 'u64 *':'u64 *' <LValueToRValue>
|   | | `-DeclRefExpr 0x28b8a6f90b8 <col:18> 'u64 *':'u64 *' lvalue ParmVar 0x28b8a6f8bd8 'out' 'u64 *':'u64 *'
|   | `-ImplicitCastExpr 0x28b8a6f9158 <col:23> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x28b8a6f90d8 <col:23> 'const limb *':'const limb *' lvalue ParmVar 0x28b8a6f8c50 'in' 'const limb *':'const limb *'
|   |-UnaryOperator 0x28b8a6f91a8 <line:867:5, col:21> 'u64':'unsigned long long' postfix '--'
|   | `-DeclRefExpr 0x28b8a6f9170 <col:5> 'u64':'unsigned long long' lvalue Var 0x28b8a6f8e88 'all_equal_so_far' 'u64':'unsigned long long'
|   |-ForStmt 0x28b8a6f9d48 <line:874:5, line:898:5>
|   | |-BinaryOperator 0x28b8a6f9238 <line:874:10, col:14> 'unsigned int' '='
|   | | |-DeclRefExpr 0x28b8a6f91c0 <col:10> 'unsigned int' lvalue Var 0x28b8a6f8df8 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x28b8a6f9220 <col:14> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x28b8a6f91f8 <col:14> 'int' 3
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x28b8a6f92d0 <col:17, col:21> 'int' '<'
|   | | |-ImplicitCastExpr 0x28b8a6f92a0 <col:17> 'unsigned int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a6f9258 <col:17> 'unsigned int' lvalue Var 0x28b8a6f8df8 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x28b8a6f92b8 <col:21> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x28b8a6f9278 <col:21> 'int' 4
|   | |-UnaryOperator 0x28b8a6f9310 <col:24, col:25> 'unsigned int' postfix '--'
|   | | `-DeclRefExpr 0x28b8a6f92f0 <col:24> 'unsigned int' lvalue Var 0x28b8a6f8df8 'i' 'unsigned int'
|   | `-CompoundStmt 0x28b8a6f9ce0 <col:29, line:898:5>
|   |   |-DeclStmt 0x28b8a6f93a0 <line:875:9, col:18>
|   |   | `-VarDecl 0x28b8a6f9338 <col:9, col:13> col:13 used equal 'u64':'unsigned long long'
|   |   |-BinaryOperator 0x28b8a6f95e0 <line:887:9, col:34> 'u64':'unsigned long long' '='
|   |   | |-DeclRefExpr 0x28b8a6f9438 <col:9> 'u64':'unsigned long long' lvalue Var 0x28b8a6f9338 'equal' 'u64':'unsigned long long'
|   |   | `-BinaryOperator 0x28b8a6f95c0 <col:17, col:34> 'unsigned long long' '^'
|   |   |   |-ImplicitCastExpr 0x28b8a6f9590 <col:17, col:25> 'u64':'unsigned long long' <LValueToRValue>
|   |   |   | `-ArraySubscriptExpr 0x28b8a6f94e0 <col:17, col:25> 'const u64':'const unsigned long long' lvalue
|   |   |   |   |-ImplicitCastExpr 0x28b8a6f94b0 <col:17> 'const u64 *' <ArrayToPointerDecay>
|   |   |   |   | `-DeclRefExpr 0x28b8a6f9470 <col:17> 'const u64 [4]' lvalue Var 0x28b8a6e7928 'kPrime' 'const u64 [4]'
|   |   |   |   `-ImplicitCastExpr 0x28b8a6f94c8 <col:24> 'unsigned int' <LValueToRValue>
|   |   |   |     `-DeclRefExpr 0x28b8a6f9490 <col:24> 'unsigned int' lvalue Var 0x28b8a6f8df8 'i' 'unsigned int'
|   |   |   `-ImplicitCastExpr 0x28b8a6f95a8 <col:29, col:34> 'u64':'unsigned long long' <LValueToRValue>
|   |   |     `-ArraySubscriptExpr 0x28b8a6f9570 <col:29, col:34> 'u64':'unsigned long long' lvalue
|   |   |       |-ImplicitCastExpr 0x28b8a6f9540 <col:29> 'u64 *':'u64 *' <LValueToRValue>
|   |   |       | `-DeclRefExpr 0x28b8a6f9500 <col:29> 'u64 *':'u64 *' lvalue ParmVar 0x28b8a6f8bd8 'out' 'u64 *':'u64 *'
|   |   |       `-ImplicitCastExpr 0x28b8a6f9558 <col:33> 'unsigned int' <LValueToRValue>
|   |   |         `-DeclRefExpr 0x28b8a6f9520 <col:33> 'unsigned int' lvalue Var 0x28b8a6f8df8 'i' 'unsigned int'
|   |   |-UnaryOperator 0x28b8a6f9620 <line:888:9, col:14> 'u64':'unsigned long long' postfix '--'
|   |   | `-DeclRefExpr 0x28b8a6f9600 <col:9> 'u64':'unsigned long long' lvalue Var 0x28b8a6f9338 'equal' 'u64':'unsigned long long'
|   |   |-CompoundAssignOperator 0x28b8a6f96d8 <line:889:9, col:27> 'u64':'unsigned long long' '&=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |   | |-DeclRefExpr 0x28b8a6f9638 <col:9> 'u64':'unsigned long long' lvalue Var 0x28b8a6f9338 'equal' 'u64':'unsigned long long'
|   |   | `-BinaryOperator 0x28b8a6f96b8 <col:18, col:27> 'u64':'unsigned long long' '<<'
|   |   |   |-ImplicitCastExpr 0x28b8a6f96a0 <col:18> 'u64':'unsigned long long' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x28b8a6f9658 <col:18> 'u64':'unsigned long long' lvalue Var 0x28b8a6f9338 'equal' 'u64':'unsigned long long'
|   |   |   `-IntegerLiteral 0x28b8a6f9678 <col:27> 'int' 32
|   |   |-CompoundAssignOperator 0x28b8a6f97a8 <line:890:9, col:27> 'u64':'unsigned long long' '&=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |   | |-DeclRefExpr 0x28b8a6f9708 <col:9> 'u64':'unsigned long long' lvalue Var 0x28b8a6f9338 'equal' 'u64':'unsigned long long'
|   |   | `-BinaryOperator 0x28b8a6f9788 <col:18, col:27> 'u64':'unsigned long long' '<<'
|   |   |   |-ImplicitCastExpr 0x28b8a6f9770 <col:18> 'u64':'unsigned long long' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x28b8a6f9728 <col:18> 'u64':'unsigned long long' lvalue Var 0x28b8a6f9338 'equal' 'u64':'unsigned long long'
|   |   |   `-IntegerLiteral 0x28b8a6f9748 <col:27> 'int' 16
|   |   |-CompoundAssignOperator 0x28b8a6f9878 <line:891:9, col:27> 'u64':'unsigned long long' '&=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |   | |-DeclRefExpr 0x28b8a6f97d8 <col:9> 'u64':'unsigned long long' lvalue Var 0x28b8a6f9338 'equal' 'u64':'unsigned long long'
|   |   | `-BinaryOperator 0x28b8a6f9858 <col:18, col:27> 'u64':'unsigned long long' '<<'
|   |   |   |-ImplicitCastExpr 0x28b8a6f9840 <col:18> 'u64':'unsigned long long' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x28b8a6f97f8 <col:18> 'u64':'unsigned long long' lvalue Var 0x28b8a6f9338 'equal' 'u64':'unsigned long long'
|   |   |   `-IntegerLiteral 0x28b8a6f9818 <col:27> 'int' 8
|   |   |-CompoundAssignOperator 0x28b8a6f9948 <line:892:9, col:27> 'u64':'unsigned long long' '&=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |   | |-DeclRefExpr 0x28b8a6f98a8 <col:9> 'u64':'unsigned long long' lvalue Var 0x28b8a6f9338 'equal' 'u64':'unsigned long long'
|   |   | `-BinaryOperator 0x28b8a6f9928 <col:18, col:27> 'u64':'unsigned long long' '<<'
|   |   |   |-ImplicitCastExpr 0x28b8a6f9910 <col:18> 'u64':'unsigned long long' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x28b8a6f98c8 <col:18> 'u64':'unsigned long long' lvalue Var 0x28b8a6f9338 'equal' 'u64':'unsigned long long'
|   |   |   `-IntegerLiteral 0x28b8a6f98e8 <col:27> 'int' 4
|   |   |-CompoundAssignOperator 0x28b8a6f9a18 <line:893:9, col:27> 'u64':'unsigned long long' '&=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |   | |-DeclRefExpr 0x28b8a6f9978 <col:9> 'u64':'unsigned long long' lvalue Var 0x28b8a6f9338 'equal' 'u64':'unsigned long long'
|   |   | `-BinaryOperator 0x28b8a6f99f8 <col:18, col:27> 'u64':'unsigned long long' '<<'
|   |   |   |-ImplicitCastExpr 0x28b8a6f99e0 <col:18> 'u64':'unsigned long long' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x28b8a6f9998 <col:18> 'u64':'unsigned long long' lvalue Var 0x28b8a6f9338 'equal' 'u64':'unsigned long long'
|   |   |   `-IntegerLiteral 0x28b8a6f99b8 <col:27> 'int' 2
|   |   |-CompoundAssignOperator 0x28b8a6f9ae8 <line:894:9, col:27> 'u64':'unsigned long long' '&=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |   | |-DeclRefExpr 0x28b8a6f9a48 <col:9> 'u64':'unsigned long long' lvalue Var 0x28b8a6f9338 'equal' 'u64':'unsigned long long'
|   |   | `-BinaryOperator 0x28b8a6f9ac8 <col:18, col:27> 'u64':'unsigned long long' '<<'
|   |   |   |-ImplicitCastExpr 0x28b8a6f9ab0 <col:18> 'u64':'unsigned long long' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x28b8a6f9a68 <col:18> 'u64':'unsigned long long' lvalue Var 0x28b8a6f9338 'equal' 'u64':'unsigned long long'
|   |   |   `-IntegerLiteral 0x28b8a6f9a88 <col:27> 'int' 1
|   |   |-BinaryOperator 0x28b8a6f9c38 <line:895:9, col:33> 'u64':'unsigned long long' '='
|   |   | |-DeclRefExpr 0x28b8a6f9b18 <col:9> 'u64':'unsigned long long' lvalue Var 0x28b8a6f9338 'equal' 'u64':'unsigned long long'
|   |   | `-BinaryOperator 0x28b8a6f9c18 <col:17, col:33> 'unsigned long long' '-'
|   |   |   |-ImplicitCastExpr 0x28b8a6f9c00 <col:17> 'unsigned long long' <IntegralCast>
|   |   |   | `-IntegerLiteral 0x28b8a6f9b38 <col:17> 'int' 0
|   |   |   `-ParenExpr 0x28b8a6f9be0 <col:21, col:33> 'u64':'unsigned long long'
|   |   |     `-BinaryOperator 0x28b8a6f9bc0 <col:22, col:31> 'u64':'unsigned long long' '>>'
|   |   |       |-ImplicitCastExpr 0x28b8a6f9ba8 <col:22> 'u64':'unsigned long long' <LValueToRValue>
|   |   |       | `-DeclRefExpr 0x28b8a6f9b60 <col:22> 'u64':'unsigned long long' lvalue Var 0x28b8a6f9338 'equal' 'u64':'unsigned long long'
|   |   |       `-IntegerLiteral 0x28b8a6f9b80 <col:31> 'int' 63
|   |   `-CompoundAssignOperator 0x28b8a6f9cb0 <line:897:9, col:29> 'u64':'unsigned long long' '&=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |     |-DeclRefExpr 0x28b8a6f9c58 <col:9> 'u64':'unsigned long long' lvalue Var 0x28b8a6f8e88 'all_equal_so_far' 'u64':'unsigned long long'
|   |     `-ImplicitCastExpr 0x28b8a6f9c98 <col:29> 'u64':'unsigned long long' <LValueToRValue>
|   |       `-DeclRefExpr 0x28b8a6f9c78 <col:29> 'u64':'unsigned long long' lvalue Var 0x28b8a6f9338 'equal' 'u64':'unsigned long long'
|   |-CompoundAssignOperator 0x28b8a6f9dd8 <line:904:5, col:15> 'u64':'unsigned long long' '|=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-DeclRefExpr 0x28b8a6f9d80 <col:5> 'u64':'unsigned long long' lvalue Var 0x28b8a6f8f40 'result' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x28b8a6f9dc0 <col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x28b8a6f9da0 <col:15> 'u64':'unsigned long long' lvalue Var 0x28b8a6f8e88 'all_equal_so_far' 'u64':'unsigned long long'
|   |-CallExpr 0x28b8a6fa070 <line:907:5, col:53> 'void'
|   | |-ImplicitCastExpr 0x28b8a6fa058 <col:5> 'void (*)(u64 *, u64 *, u64)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6f9e08 <col:5> 'void (u64 *, u64 *, u64)' Function 0x28b8a6f89d8 'subtract_u64' 'void (u64 *, u64 *, u64)'
|   | |-UnaryOperator 0x28b8a6f9ea8 <col:18, col:24> 'u64 *' prefix '&' cannot overflow
|   | | `-ArraySubscriptExpr 0x28b8a6f9e88 <col:19, col:24> 'u64':'unsigned long long' lvalue
|   | |   |-ImplicitCastExpr 0x28b8a6f9e70 <col:19> 'u64 *':'u64 *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x28b8a6f9e28 <col:19> 'u64 *':'u64 *' lvalue ParmVar 0x28b8a6f8bd8 'out' 'u64 *':'u64 *'
|   | |   `-IntegerLiteral 0x28b8a6f9e48 <col:23> 'int' 0
|   | |-UnaryOperator 0x28b8a6f9ef8 <col:27, col:28> 'u64 *' prefix '&' cannot overflow
|   | | `-DeclRefExpr 0x28b8a6f9ec0 <col:28> 'u64':'unsigned long long' lvalue Var 0x28b8a6f8ff8 'carry' 'u64':'unsigned long long'
|   | `-BinaryOperator 0x28b8a6f9fe0 <col:35, col:52> 'unsigned long long' '&'
|   |   |-ImplicitCastExpr 0x28b8a6f9fb0 <col:35> 'u64':'unsigned long long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x28b8a6f9f10 <col:35> 'u64':'unsigned long long' lvalue Var 0x28b8a6f8f40 'result' 'u64':'unsigned long long'
|   |   `-ImplicitCastExpr 0x28b8a6f9fc8 <col:44, col:52> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x28b8a6f9f90 <col:44, col:52> 'const u64':'const unsigned long long' lvalue
|   |       |-ImplicitCastExpr 0x28b8a6f9f78 <col:44> 'const u64 *' <ArrayToPointerDecay>
|   |       | `-DeclRefExpr 0x28b8a6f9f30 <col:44> 'const u64 [4]' lvalue Var 0x28b8a6e7928 'kPrime' 'const u64 [4]'
|   |       `-IntegerLiteral 0x28b8a6f9f50 <col:51> 'int' 0
|   |-CallExpr 0x28b8a6fa1d0 <line:908:5, col:40> 'void'
|   | |-ImplicitCastExpr 0x28b8a6fa1b8 <col:5> 'void (*)(u64 *, u64 *, u64)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6fa0a8 <col:5> 'void (u64 *, u64 *, u64)' Function 0x28b8a6f89d8 'subtract_u64' 'void (u64 *, u64 *, u64)'
|   | |-UnaryOperator 0x28b8a6fa148 <col:18, col:24> 'u64 *' prefix '&' cannot overflow
|   | | `-ArraySubscriptExpr 0x28b8a6fa128 <col:19, col:24> 'u64':'unsigned long long' lvalue
|   | |   |-ImplicitCastExpr 0x28b8a6fa110 <col:19> 'u64 *':'u64 *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x28b8a6fa0c8 <col:19> 'u64 *':'u64 *' lvalue ParmVar 0x28b8a6f8bd8 'out' 'u64 *':'u64 *'
|   | |   `-IntegerLiteral 0x28b8a6fa0e8 <col:23> 'int' 1
|   | |-UnaryOperator 0x28b8a6fa180 <col:27, col:28> 'u64 *' prefix '&' cannot overflow
|   | | `-DeclRefExpr 0x28b8a6fa160 <col:28> 'u64':'unsigned long long' lvalue Var 0x28b8a6f8ff8 'carry' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x28b8a6fa208 <col:35> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x28b8a6fa198 <col:35> 'u64':'unsigned long long' lvalue Var 0x28b8a6f8ff8 'carry' 'u64':'unsigned long long'
|   |-CallExpr 0x28b8a6fa348 <line:909:5, col:40> 'void'
|   | |-ImplicitCastExpr 0x28b8a6fa330 <col:5> 'void (*)(u64 *, u64 *, u64)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6fa220 <col:5> 'void (u64 *, u64 *, u64)' Function 0x28b8a6f89d8 'subtract_u64' 'void (u64 *, u64 *, u64)'
|   | |-UnaryOperator 0x28b8a6fa2c0 <col:18, col:24> 'u64 *' prefix '&' cannot overflow
|   | | `-ArraySubscriptExpr 0x28b8a6fa2a0 <col:19, col:24> 'u64':'unsigned long long' lvalue
|   | |   |-ImplicitCastExpr 0x28b8a6fa288 <col:19> 'u64 *':'u64 *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x28b8a6fa240 <col:19> 'u64 *':'u64 *' lvalue ParmVar 0x28b8a6f8bd8 'out' 'u64 *':'u64 *'
|   | |   `-IntegerLiteral 0x28b8a6fa260 <col:23> 'int' 2
|   | |-UnaryOperator 0x28b8a6fa2f8 <col:27, col:28> 'u64 *' prefix '&' cannot overflow
|   | | `-DeclRefExpr 0x28b8a6fa2d8 <col:28> 'u64':'unsigned long long' lvalue Var 0x28b8a6f8ff8 'carry' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x28b8a6fa380 <col:35> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x28b8a6fa310 <col:35> 'u64':'unsigned long long' lvalue Var 0x28b8a6f8ff8 'carry' 'u64':'unsigned long long'
|   |-CallExpr 0x28b8a6fa4c0 <line:910:5, col:40> 'void'
|   | |-ImplicitCastExpr 0x28b8a6fa4a8 <col:5> 'void (*)(u64 *, u64 *, u64)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6fa398 <col:5> 'void (u64 *, u64 *, u64)' Function 0x28b8a6f89d8 'subtract_u64' 'void (u64 *, u64 *, u64)'
|   | |-UnaryOperator 0x28b8a6fa438 <col:18, col:24> 'u64 *' prefix '&' cannot overflow
|   | | `-ArraySubscriptExpr 0x28b8a6fa418 <col:19, col:24> 'u64':'unsigned long long' lvalue
|   | |   |-ImplicitCastExpr 0x28b8a6fa400 <col:19> 'u64 *':'u64 *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x28b8a6fa3b8 <col:19> 'u64 *':'u64 *' lvalue ParmVar 0x28b8a6f8bd8 'out' 'u64 *':'u64 *'
|   | |   `-IntegerLiteral 0x28b8a6fa3d8 <col:23> 'int' 3
|   | |-UnaryOperator 0x28b8a6fa470 <col:27, col:28> 'u64 *' prefix '&' cannot overflow
|   | | `-DeclRefExpr 0x28b8a6fa450 <col:28> 'u64':'unsigned long long' lvalue Var 0x28b8a6f8ff8 'carry' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x28b8a6fa4f8 <col:35> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x28b8a6fa488 <col:35> 'u64':'unsigned long long' lvalue Var 0x28b8a6f8ff8 'carry' 'u64':'unsigned long long'
|   |-CallExpr 0x28b8a6ea698 <line:912:5, col:53> 'void'
|   | |-ImplicitCastExpr 0x28b8a6ea680 <col:5> 'void (*)(u64 *, u64 *, u64)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6fa510 <col:5> 'void (u64 *, u64 *, u64)' Function 0x28b8a6f89d8 'subtract_u64' 'void (u64 *, u64 *, u64)'
|   | |-UnaryOperator 0x28b8a6fa5b0 <col:18, col:24> 'u64 *' prefix '&' cannot overflow
|   | | `-ArraySubscriptExpr 0x28b8a6fa590 <col:19, col:24> 'u64':'unsigned long long' lvalue
|   | |   |-ImplicitCastExpr 0x28b8a6fa578 <col:19> 'u64 *':'u64 *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x28b8a6fa530 <col:19> 'u64 *':'u64 *' lvalue ParmVar 0x28b8a6f8bd8 'out' 'u64 *':'u64 *'
|   | |   `-IntegerLiteral 0x28b8a6fa550 <col:23> 'int' 1
|   | |-UnaryOperator 0x28b8a6fa5e8 <col:27, col:28> 'u64 *' prefix '&' cannot overflow
|   | | `-DeclRefExpr 0x28b8a6fa5c8 <col:28> 'u64':'unsigned long long' lvalue Var 0x28b8a6f8ff8 'carry' 'u64':'unsigned long long'
|   | `-BinaryOperator 0x28b8a6ea660 <col:35, col:52> 'unsigned long long' '&'
|   |   |-ImplicitCastExpr 0x28b8a6ea630 <col:35> 'u64':'unsigned long long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x28b8a6fa600 <col:35> 'u64':'unsigned long long' lvalue Var 0x28b8a6f8f40 'result' 'u64':'unsigned long long'
|   |   `-ImplicitCastExpr 0x28b8a6ea648 <col:44, col:52> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x28b8a6ea610 <col:44, col:52> 'const u64':'const unsigned long long' lvalue
|   |       |-ImplicitCastExpr 0x28b8a6ea5f8 <col:44> 'const u64 *' <ArrayToPointerDecay>
|   |       | `-DeclRefExpr 0x28b8a6ea5b0 <col:44> 'const u64 [4]' lvalue Var 0x28b8a6e7928 'kPrime' 'const u64 [4]'
|   |       `-IntegerLiteral 0x28b8a6ea5d0 <col:51> 'int' 1
|   |-CallExpr 0x28b8a6ea7f8 <line:913:5, col:40> 'void'
|   | |-ImplicitCastExpr 0x28b8a6ea7e0 <col:5> 'void (*)(u64 *, u64 *, u64)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6ea6d0 <col:5> 'void (u64 *, u64 *, u64)' Function 0x28b8a6f89d8 'subtract_u64' 'void (u64 *, u64 *, u64)'
|   | |-UnaryOperator 0x28b8a6ea770 <col:18, col:24> 'u64 *' prefix '&' cannot overflow
|   | | `-ArraySubscriptExpr 0x28b8a6ea750 <col:19, col:24> 'u64':'unsigned long long' lvalue
|   | |   |-ImplicitCastExpr 0x28b8a6ea738 <col:19> 'u64 *':'u64 *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x28b8a6ea6f0 <col:19> 'u64 *':'u64 *' lvalue ParmVar 0x28b8a6f8bd8 'out' 'u64 *':'u64 *'
|   | |   `-IntegerLiteral 0x28b8a6ea710 <col:23> 'int' 2
|   | |-UnaryOperator 0x28b8a6ea7a8 <col:27, col:28> 'u64 *' prefix '&' cannot overflow
|   | | `-DeclRefExpr 0x28b8a6ea788 <col:28> 'u64':'unsigned long long' lvalue Var 0x28b8a6f8ff8 'carry' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x28b8a6ea830 <col:35> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x28b8a6ea7c0 <col:35> 'u64':'unsigned long long' lvalue Var 0x28b8a6f8ff8 'carry' 'u64':'unsigned long long'
|   |-CallExpr 0x28b8a6ea970 <line:914:5, col:40> 'void'
|   | |-ImplicitCastExpr 0x28b8a6ea958 <col:5> 'void (*)(u64 *, u64 *, u64)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6ea848 <col:5> 'void (u64 *, u64 *, u64)' Function 0x28b8a6f89d8 'subtract_u64' 'void (u64 *, u64 *, u64)'
|   | |-UnaryOperator 0x28b8a6ea8e8 <col:18, col:24> 'u64 *' prefix '&' cannot overflow
|   | | `-ArraySubscriptExpr 0x28b8a6ea8c8 <col:19, col:24> 'u64':'unsigned long long' lvalue
|   | |   |-ImplicitCastExpr 0x28b8a6ea8b0 <col:19> 'u64 *':'u64 *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x28b8a6ea868 <col:19> 'u64 *':'u64 *' lvalue ParmVar 0x28b8a6f8bd8 'out' 'u64 *':'u64 *'
|   | |   `-IntegerLiteral 0x28b8a6ea888 <col:23> 'int' 3
|   | |-UnaryOperator 0x28b8a6ea920 <col:27, col:28> 'u64 *' prefix '&' cannot overflow
|   | | `-DeclRefExpr 0x28b8a6ea900 <col:28> 'u64':'unsigned long long' lvalue Var 0x28b8a6f8ff8 'carry' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x28b8a6ea9a8 <col:35> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x28b8a6ea938 <col:35> 'u64':'unsigned long long' lvalue Var 0x28b8a6f8ff8 'carry' 'u64':'unsigned long long'
|   |-CallExpr 0x28b8a6eabb8 <line:916:5, col:53> 'void'
|   | |-ImplicitCastExpr 0x28b8a6eaba0 <col:5> 'void (*)(u64 *, u64 *, u64)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6ea9c0 <col:5> 'void (u64 *, u64 *, u64)' Function 0x28b8a6f89d8 'subtract_u64' 'void (u64 *, u64 *, u64)'
|   | |-UnaryOperator 0x28b8a6eaa60 <col:18, col:24> 'u64 *' prefix '&' cannot overflow
|   | | `-ArraySubscriptExpr 0x28b8a6eaa40 <col:19, col:24> 'u64':'unsigned long long' lvalue
|   | |   |-ImplicitCastExpr 0x28b8a6eaa28 <col:19> 'u64 *':'u64 *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x28b8a6ea9e0 <col:19> 'u64 *':'u64 *' lvalue ParmVar 0x28b8a6f8bd8 'out' 'u64 *':'u64 *'
|   | |   `-IntegerLiteral 0x28b8a6eaa00 <col:23> 'int' 2
|   | |-UnaryOperator 0x28b8a6eaa98 <col:27, col:28> 'u64 *' prefix '&' cannot overflow
|   | | `-DeclRefExpr 0x28b8a6eaa78 <col:28> 'u64':'unsigned long long' lvalue Var 0x28b8a6f8ff8 'carry' 'u64':'unsigned long long'
|   | `-BinaryOperator 0x28b8a6eab80 <col:35, col:52> 'unsigned long long' '&'
|   |   |-ImplicitCastExpr 0x28b8a6eab50 <col:35> 'u64':'unsigned long long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x28b8a6eaab0 <col:35> 'u64':'unsigned long long' lvalue Var 0x28b8a6f8f40 'result' 'u64':'unsigned long long'
|   |   `-ImplicitCastExpr 0x28b8a6eab68 <col:44, col:52> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x28b8a6eab30 <col:44, col:52> 'const u64':'const unsigned long long' lvalue
|   |       |-ImplicitCastExpr 0x28b8a6eab18 <col:44> 'const u64 *' <ArrayToPointerDecay>
|   |       | `-DeclRefExpr 0x28b8a6eaad0 <col:44> 'const u64 [4]' lvalue Var 0x28b8a6e7928 'kPrime' 'const u64 [4]'
|   |       `-IntegerLiteral 0x28b8a6eaaf0 <col:51> 'int' 2
|   |-CallExpr 0x28b8a6ead18 <line:917:5, col:40> 'void'
|   | |-ImplicitCastExpr 0x28b8a6ead00 <col:5> 'void (*)(u64 *, u64 *, u64)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6eabf0 <col:5> 'void (u64 *, u64 *, u64)' Function 0x28b8a6f89d8 'subtract_u64' 'void (u64 *, u64 *, u64)'
|   | |-UnaryOperator 0x28b8a6eac90 <col:18, col:24> 'u64 *' prefix '&' cannot overflow
|   | | `-ArraySubscriptExpr 0x28b8a6eac70 <col:19, col:24> 'u64':'unsigned long long' lvalue
|   | |   |-ImplicitCastExpr 0x28b8a6eac58 <col:19> 'u64 *':'u64 *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x28b8a6eac10 <col:19> 'u64 *':'u64 *' lvalue ParmVar 0x28b8a6f8bd8 'out' 'u64 *':'u64 *'
|   | |   `-IntegerLiteral 0x28b8a6eac30 <col:23> 'int' 3
|   | |-UnaryOperator 0x28b8a6eacc8 <col:27, col:28> 'u64 *' prefix '&' cannot overflow
|   | | `-DeclRefExpr 0x28b8a6eaca8 <col:28> 'u64':'unsigned long long' lvalue Var 0x28b8a6f8ff8 'carry' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x28b8a6ead50 <col:35> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x28b8a6eace0 <col:35> 'u64':'unsigned long long' lvalue Var 0x28b8a6f8ff8 'carry' 'u64':'unsigned long long'
|   `-CallExpr 0x28b8a6eaf60 <line:919:5, col:53> 'void'
|     |-ImplicitCastExpr 0x28b8a6eaf48 <col:5> 'void (*)(u64 *, u64 *, u64)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x28b8a6ead68 <col:5> 'void (u64 *, u64 *, u64)' Function 0x28b8a6f89d8 'subtract_u64' 'void (u64 *, u64 *, u64)'
|     |-UnaryOperator 0x28b8a6eae08 <col:18, col:24> 'u64 *' prefix '&' cannot overflow
|     | `-ArraySubscriptExpr 0x28b8a6eade8 <col:19, col:24> 'u64':'unsigned long long' lvalue
|     |   |-ImplicitCastExpr 0x28b8a6eadd0 <col:19> 'u64 *':'u64 *' <LValueToRValue>
|     |   | `-DeclRefExpr 0x28b8a6ead88 <col:19> 'u64 *':'u64 *' lvalue ParmVar 0x28b8a6f8bd8 'out' 'u64 *':'u64 *'
|     |   `-IntegerLiteral 0x28b8a6eada8 <col:23> 'int' 3
|     |-UnaryOperator 0x28b8a6eae40 <col:27, col:28> 'u64 *' prefix '&' cannot overflow
|     | `-DeclRefExpr 0x28b8a6eae20 <col:28> 'u64':'unsigned long long' lvalue Var 0x28b8a6f8ff8 'carry' 'u64':'unsigned long long'
|     `-BinaryOperator 0x28b8a6eaf28 <col:35, col:52> 'unsigned long long' '&'
|       |-ImplicitCastExpr 0x28b8a6eaef8 <col:35> 'u64':'unsigned long long' <LValueToRValue>
|       | `-DeclRefExpr 0x28b8a6eae58 <col:35> 'u64':'unsigned long long' lvalue Var 0x28b8a6f8f40 'result' 'u64':'unsigned long long'
|       `-ImplicitCastExpr 0x28b8a6eaf10 <col:44, col:52> 'u64':'unsigned long long' <LValueToRValue>
|         `-ArraySubscriptExpr 0x28b8a6eaed8 <col:44, col:52> 'const u64':'const unsigned long long' lvalue
|           |-ImplicitCastExpr 0x28b8a6eaec0 <col:44> 'const u64 *' <ArrayToPointerDecay>
|           | `-DeclRefExpr 0x28b8a6eae78 <col:44> 'const u64 [4]' lvalue Var 0x28b8a6e7928 'kPrime' 'const u64 [4]'
|           `-IntegerLiteral 0x28b8a6eae98 <col:51> 'int' 3
|-FunctionDecl 0x28b8a6eb178 <line:922:1, line:930:1> line:922:13 used smallfelem_square_contract 'void (u64 *, const u64 *)' static
| |-ParmVarDecl 0x28b8a6eb038 <col:40, col:51> col:51 used out 'u64 *':'u64 *'
| |-ParmVarDecl 0x28b8a6eb0b0 <col:56, col:73> col:73 used in 'const u64 *':'const u64 *'
| `-CompoundStmt 0x28b8a6eb648 <line:923:1, line:930:1>
|   |-DeclStmt 0x28b8a6eb2b8 <line:924:5, col:22>
|   | `-VarDecl 0x28b8a6eb250 <col:5, col:15> col:15 used longtmp 'longfelem':'limb [8]'
|   |-DeclStmt 0x28b8a6eb348 <line:925:5, col:14>
|   | `-VarDecl 0x28b8a6eb2e0 <col:5, col:11> col:11 used tmp 'felem':'limb [4]'
|   |-CallExpr 0x28b8a6eb3f0 <line:927:5, col:34> 'void'
|   | |-ImplicitCastExpr 0x28b8a6eb3d8 <col:5> 'void (*)(limb *, const u64 *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6eb360 <col:5> 'void (limb *, const u64 *)' Function 0x28b8a600ab8 'smallfelem_square' 'void (limb *, const u64 *)'
|   | |-ImplicitCastExpr 0x28b8a6eb420 <col:23> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6eb380 <col:23> 'longfelem':'limb [8]' lvalue Var 0x28b8a6eb250 'longtmp' 'longfelem':'limb [8]'
|   | `-ImplicitCastExpr 0x28b8a6eb438 <col:32> 'const u64 *':'const u64 *' <LValueToRValue>
|   |   `-DeclRefExpr 0x28b8a6eb3b8 <col:32> 'const u64 *':'const u64 *' lvalue ParmVar 0x28b8a6eb0b0 'in' 'const u64 *':'const u64 *'
|   |-CallExpr 0x28b8a6eb4e0 <line:928:5, col:30> 'void'
|   | |-ImplicitCastExpr 0x28b8a6eb4c8 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6eb450 <col:5> 'void (limb *, const limb *)' Function 0x28b8a6ed1e8 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a6eb510 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6eb470 <col:18> 'felem':'limb [4]' lvalue Var 0x28b8a6eb2e0 'tmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x28b8a6eb540 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a6eb528 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a6eb4a8 <col:23> 'longfelem':'limb [8]' lvalue Var 0x28b8a6eb250 'longtmp' 'longfelem':'limb [8]'
|   `-CallExpr 0x28b8a6eb5d0 <line:929:5, col:28> 'void'
|     |-ImplicitCastExpr 0x28b8a6eb5b8 <col:5> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x28b8a6eb558 <col:5> 'void (u64 *, const limb *)' Function 0x28b8a6f8d18 'felem_contract' 'void (u64 *, const limb *)'
|     |-ImplicitCastExpr 0x28b8a6eb600 <col:20> 'u64 *':'u64 *' <LValueToRValue>
|     | `-DeclRefExpr 0x28b8a6eb578 <col:20> 'u64 *':'u64 *' lvalue ParmVar 0x28b8a6eb038 'out' 'u64 *':'u64 *'
|     `-ImplicitCastExpr 0x28b8a6eb630 <col:25> 'const limb *':'const limb *' <NoOp>
|       `-ImplicitCastExpr 0x28b8a6eb618 <col:25> 'limb *' <ArrayToPointerDecay>
|         `-DeclRefExpr 0x28b8a6eb598 <col:25> 'felem':'limb [4]' lvalue Var 0x28b8a6eb2e0 'tmp' 'felem':'limb [4]'
|-FunctionDecl 0x28b8a6eb8e8 <line:932:1, line:941:1> line:932:13 used smallfelem_mul_contract 'void (u64 *, const u64 *, const u64 *)' static
| |-ParmVarDecl 0x28b8a6eb690 <col:37, col:48> col:48 used out 'u64 *':'u64 *'
| |-ParmVarDecl 0x28b8a6eb708 <col:53, col:70> col:70 used in1 'const u64 *':'const u64 *'
| |-ParmVarDecl 0x28b8a6eb780 <line:933:37, col:54> col:54 used in2 'const u64 *':'const u64 *'
| `-CompoundStmt 0x28b8a6ebe00 <line:934:1, line:941:1>
|   |-DeclStmt 0x28b8a6eba30 <line:935:5, col:22>
|   | `-VarDecl 0x28b8a6eb9c8 <col:5, col:15> col:15 used longtmp 'longfelem':'limb [8]'
|   |-DeclStmt 0x28b8a6ebac0 <line:936:5, col:14>
|   | `-VarDecl 0x28b8a6eba58 <col:5, col:11> col:11 used tmp 'felem':'limb [4]'
|   |-CallExpr 0x28b8a6ebb88 <line:938:5, col:37> 'void'
|   | |-ImplicitCastExpr 0x28b8a6ebb70 <col:5> 'void (*)(limb *, const u64 *, const u64 *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6ebad8 <col:5> 'void (limb *, const u64 *, const u64 *)' Function 0x28b8a604388 'smallfelem_mul' 'void (limb *, const u64 *, const u64 *)'
|   | |-ImplicitCastExpr 0x28b8a6ebbc0 <col:20> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6ebaf8 <col:20> 'longfelem':'limb [8]' lvalue Var 0x28b8a6eb9c8 'longtmp' 'longfelem':'limb [8]'
|   | |-ImplicitCastExpr 0x28b8a6ebbd8 <col:29> 'const u64 *':'const u64 *' <LValueToRValue>
|   | | `-DeclRefExpr 0x28b8a6ebb30 <col:29> 'const u64 *':'const u64 *' lvalue ParmVar 0x28b8a6eb708 'in1' 'const u64 *':'const u64 *'
|   | `-ImplicitCastExpr 0x28b8a6ebbf0 <col:34> 'const u64 *':'const u64 *' <LValueToRValue>
|   |   `-DeclRefExpr 0x28b8a6ebb50 <col:34> 'const u64 *':'const u64 *' lvalue ParmVar 0x28b8a6eb780 'in2' 'const u64 *':'const u64 *'
|   |-CallExpr 0x28b8a6ebc98 <line:939:5, col:30> 'void'
|   | |-ImplicitCastExpr 0x28b8a6ebc80 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6ebc08 <col:5> 'void (limb *, const limb *)' Function 0x28b8a6ed1e8 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a6ebcc8 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6ebc28 <col:18> 'felem':'limb [4]' lvalue Var 0x28b8a6eba58 'tmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x28b8a6ebcf8 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a6ebce0 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a6ebc60 <col:23> 'longfelem':'limb [8]' lvalue Var 0x28b8a6eb9c8 'longtmp' 'longfelem':'limb [8]'
|   `-CallExpr 0x28b8a6ebd88 <line:940:5, col:28> 'void'
|     |-ImplicitCastExpr 0x28b8a6ebd70 <col:5> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x28b8a6ebd10 <col:5> 'void (u64 *, const limb *)' Function 0x28b8a6f8d18 'felem_contract' 'void (u64 *, const limb *)'
|     |-ImplicitCastExpr 0x28b8a6ebdb8 <col:20> 'u64 *':'u64 *' <LValueToRValue>
|     | `-DeclRefExpr 0x28b8a6ebd30 <col:20> 'u64 *':'u64 *' lvalue ParmVar 0x28b8a6eb690 'out' 'u64 *':'u64 *'
|     `-ImplicitCastExpr 0x28b8a6ebde8 <col:25> 'const limb *':'const limb *' <NoOp>
|       `-ImplicitCastExpr 0x28b8a6ebdd0 <col:25> 'limb *' <ArrayToPointerDecay>
|         `-DeclRefExpr 0x28b8a6ebd50 <col:25> 'felem':'limb [4]' lvalue Var 0x28b8a6eba58 'tmp' 'felem':'limb [4]'
|-FunctionDecl 0x28b8a6ebf58 <line:949:1, line:981:1> line:949:13 used smallfelem_is_zero 'limb (const u64 *)' static
| |-ParmVarDecl 0x28b8a6ebe48 <col:32, col:49> col:49 used small 'const u64 *':'const u64 *'
| `-CompoundStmt 0x28b8a6efa90 <line:950:1, line:981:1>
|   |-DeclStmt 0x28b8a6ec090 <line:951:5, col:16>
|   | `-VarDecl 0x28b8a6ec028 <col:5, col:10> col:10 used result 'limb':'int'
|   |-DeclStmt 0x28b8a6ec120 <line:952:5, col:13>
|   | `-VarDecl 0x28b8a6ec0b8 <col:5, col:9> col:9 used is_p 'u64':'unsigned long long'
|   |-DeclStmt 0x28b8a6ec470 <line:954:5, col:60>
|   | `-VarDecl 0x28b8a6ec148 <col:5, col:59> col:9 used is_zero 'u64':'unsigned long long' cinit
|   |   `-BinaryOperator 0x28b8a6ec450 <col:19, col:59> 'unsigned long long' '|'
|   |     |-BinaryOperator 0x28b8a6ec398 <col:19, col:48> 'unsigned long long' '|'
|   |     | |-BinaryOperator 0x28b8a6ec2e0 <col:19, col:37> 'unsigned long long' '|'
|   |     | | |-ImplicitCastExpr 0x28b8a6ec2b0 <col:19, col:26> 'u64':'unsigned long long' <LValueToRValue>
|   |     | | | `-ArraySubscriptExpr 0x28b8a6ec210 <col:19, col:26> 'const u64':'const unsigned long long' lvalue
|   |     | | |   |-ImplicitCastExpr 0x28b8a6ec1f8 <col:19> 'const u64 *':'const u64 *' <LValueToRValue>
|   |     | | |   | `-DeclRefExpr 0x28b8a6ec1b0 <col:19> 'const u64 *':'const u64 *' lvalue ParmVar 0x28b8a6ebe48 'small' 'const u64 *':'const u64 *'
|   |     | | |   `-IntegerLiteral 0x28b8a6ec1d0 <col:25> 'int' 0
|   |     | | `-ImplicitCastExpr 0x28b8a6ec2c8 <col:30, col:37> 'u64':'unsigned long long' <LValueToRValue>
|   |     | |   `-ArraySubscriptExpr 0x28b8a6ec290 <col:30, col:37> 'const u64':'const unsigned long long' lvalue
|   |     | |     |-ImplicitCastExpr 0x28b8a6ec278 <col:30> 'const u64 *':'const u64 *' <LValueToRValue>
|   |     | |     | `-DeclRefExpr 0x28b8a6ec230 <col:30> 'const u64 *':'const u64 *' lvalue ParmVar 0x28b8a6ebe48 'small' 'const u64 *':'const u64 *'
|   |     | |     `-IntegerLiteral 0x28b8a6ec250 <col:36> 'int' 1
|   |     | `-ImplicitCastExpr 0x28b8a6ec380 <col:41, col:48> 'u64':'unsigned long long' <LValueToRValue>
|   |     |   `-ArraySubscriptExpr 0x28b8a6ec360 <col:41, col:48> 'const u64':'const unsigned long long' lvalue
|   |     |     |-ImplicitCastExpr 0x28b8a6ec348 <col:41> 'const u64 *':'const u64 *' <LValueToRValue>
|   |     |     | `-DeclRefExpr 0x28b8a6ec300 <col:41> 'const u64 *':'const u64 *' lvalue ParmVar 0x28b8a6ebe48 'small' 'const u64 *':'const u64 *'
|   |     |     `-IntegerLiteral 0x28b8a6ec320 <col:47> 'int' 2
|   |     `-ImplicitCastExpr 0x28b8a6ec438 <col:52, col:59> 'u64':'unsigned long long' <LValueToRValue>
|   |       `-ArraySubscriptExpr 0x28b8a6ec418 <col:52, col:59> 'const u64':'const unsigned long long' lvalue
|   |         |-ImplicitCastExpr 0x28b8a6ec400 <col:52> 'const u64 *':'const u64 *' <LValueToRValue>
|   |         | `-DeclRefExpr 0x28b8a6ec3b8 <col:52> 'const u64 *':'const u64 *' lvalue ParmVar 0x28b8a6ebe48 'small' 'const u64 *':'const u64 *'
|   |         `-IntegerLiteral 0x28b8a6ec3d8 <col:58> 'int' 3
|   |-UnaryOperator 0x28b8a6ec4c0 <line:955:5, col:12> 'u64':'unsigned long long' postfix '--'
|   | `-DeclRefExpr 0x28b8a6ec488 <col:5> 'u64':'unsigned long long' lvalue Var 0x28b8a6ec148 'is_zero' 'u64':'unsigned long long'
|   |-CompoundAssignOperator 0x28b8a6ec578 <line:956:5, col:27> 'u64':'unsigned long long' '&=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-DeclRefExpr 0x28b8a6ec4d8 <col:5> 'u64':'unsigned long long' lvalue Var 0x28b8a6ec148 'is_zero' 'u64':'unsigned long long'
|   | `-BinaryOperator 0x28b8a6ec558 <col:16, col:27> 'u64':'unsigned long long' '<<'
|   |   |-ImplicitCastExpr 0x28b8a6ec540 <col:16> 'u64':'unsigned long long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x28b8a6ec4f8 <col:16> 'u64':'unsigned long long' lvalue Var 0x28b8a6ec148 'is_zero' 'u64':'unsigned long long'
|   |   `-IntegerLiteral 0x28b8a6ec518 <col:27> 'int' 32
|   |-CompoundAssignOperator 0x28b8a6ee670 <line:957:5, col:27> 'u64':'unsigned long long' '&=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-DeclRefExpr 0x28b8a6ee5d0 <col:5> 'u64':'unsigned long long' lvalue Var 0x28b8a6ec148 'is_zero' 'u64':'unsigned long long'
|   | `-BinaryOperator 0x28b8a6ee650 <col:16, col:27> 'u64':'unsigned long long' '<<'
|   |   |-ImplicitCastExpr 0x28b8a6ee638 <col:16> 'u64':'unsigned long long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x28b8a6ee5f0 <col:16> 'u64':'unsigned long long' lvalue Var 0x28b8a6ec148 'is_zero' 'u64':'unsigned long long'
|   |   `-IntegerLiteral 0x28b8a6ee610 <col:27> 'int' 16
|   |-CompoundAssignOperator 0x28b8a6ee740 <line:958:5, col:27> 'u64':'unsigned long long' '&=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-DeclRefExpr 0x28b8a6ee6a0 <col:5> 'u64':'unsigned long long' lvalue Var 0x28b8a6ec148 'is_zero' 'u64':'unsigned long long'
|   | `-BinaryOperator 0x28b8a6ee720 <col:16, col:27> 'u64':'unsigned long long' '<<'
|   |   |-ImplicitCastExpr 0x28b8a6ee708 <col:16> 'u64':'unsigned long long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x28b8a6ee6c0 <col:16> 'u64':'unsigned long long' lvalue Var 0x28b8a6ec148 'is_zero' 'u64':'unsigned long long'
|   |   `-IntegerLiteral 0x28b8a6ee6e0 <col:27> 'int' 8
|   |-CompoundAssignOperator 0x28b8a6ee810 <line:959:5, col:27> 'u64':'unsigned long long' '&=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-DeclRefExpr 0x28b8a6ee770 <col:5> 'u64':'unsigned long long' lvalue Var 0x28b8a6ec148 'is_zero' 'u64':'unsigned long long'
|   | `-BinaryOperator 0x28b8a6ee7f0 <col:16, col:27> 'u64':'unsigned long long' '<<'
|   |   |-ImplicitCastExpr 0x28b8a6ee7d8 <col:16> 'u64':'unsigned long long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x28b8a6ee790 <col:16> 'u64':'unsigned long long' lvalue Var 0x28b8a6ec148 'is_zero' 'u64':'unsigned long long'
|   |   `-IntegerLiteral 0x28b8a6ee7b0 <col:27> 'int' 4
|   |-CompoundAssignOperator 0x28b8a6ee8e0 <line:960:5, col:27> 'u64':'unsigned long long' '&=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-DeclRefExpr 0x28b8a6ee840 <col:5> 'u64':'unsigned long long' lvalue Var 0x28b8a6ec148 'is_zero' 'u64':'unsigned long long'
|   | `-BinaryOperator 0x28b8a6ee8c0 <col:16, col:27> 'u64':'unsigned long long' '<<'
|   |   |-ImplicitCastExpr 0x28b8a6ee8a8 <col:16> 'u64':'unsigned long long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x28b8a6ee860 <col:16> 'u64':'unsigned long long' lvalue Var 0x28b8a6ec148 'is_zero' 'u64':'unsigned long long'
|   |   `-IntegerLiteral 0x28b8a6ee880 <col:27> 'int' 2
|   |-CompoundAssignOperator 0x28b8a6ee9b0 <line:961:5, col:27> 'u64':'unsigned long long' '&=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-DeclRefExpr 0x28b8a6ee910 <col:5> 'u64':'unsigned long long' lvalue Var 0x28b8a6ec148 'is_zero' 'u64':'unsigned long long'
|   | `-BinaryOperator 0x28b8a6ee990 <col:16, col:27> 'u64':'unsigned long long' '<<'
|   |   |-ImplicitCastExpr 0x28b8a6ee978 <col:16> 'u64':'unsigned long long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x28b8a6ee930 <col:16> 'u64':'unsigned long long' lvalue Var 0x28b8a6ec148 'is_zero' 'u64':'unsigned long long'
|   |   `-IntegerLiteral 0x28b8a6ee950 <col:27> 'int' 1
|   |-BinaryOperator 0x28b8a6eeb00 <line:962:5, col:33> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x28b8a6ee9e0 <col:5> 'u64':'unsigned long long' lvalue Var 0x28b8a6ec148 'is_zero' 'u64':'unsigned long long'
|   | `-BinaryOperator 0x28b8a6eeae0 <col:15, col:33> 'unsigned long long' '-'
|   |   |-ImplicitCastExpr 0x28b8a6eeac8 <col:15> 'unsigned long long' <IntegralCast>
|   |   | `-IntegerLiteral 0x28b8a6eea00 <col:15> 'int' 0
|   |   `-ParenExpr 0x28b8a6eeaa8 <col:19, col:33> 'u64':'unsigned long long'
|   |     `-BinaryOperator 0x28b8a6eea88 <col:20, col:31> 'u64':'unsigned long long' '>>'
|   |       |-ImplicitCastExpr 0x28b8a6eea70 <col:20> 'u64':'unsigned long long' <LValueToRValue>
|   |       | `-DeclRefExpr 0x28b8a6eea28 <col:20> 'u64':'unsigned long long' lvalue Var 0x28b8a6ec148 'is_zero' 'u64':'unsigned long long'
|   |       `-IntegerLiteral 0x28b8a6eea48 <col:31> 'int' 63
|   |-BinaryOperator 0x28b8a6ef178 <line:964:5, line:966:55> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x28b8a6eeb20 <line:964:5> 'u64':'unsigned long long' lvalue Var 0x28b8a6ec0b8 'is_p' 'u64':'unsigned long long'
|   | `-BinaryOperator 0x28b8a6ef158 <col:12, line:966:55> 'unsigned long long' '|'
|   |   |-BinaryOperator 0x28b8a6eefc8 <line:964:12, line:966:30> 'unsigned long long' '|'
|   |   | |-BinaryOperator 0x28b8a6eee38 <line:964:12, line:965:30> 'unsigned long long' '|'
|   |   | | |-ParenExpr 0x28b8a6eeca8 <line:964:12, col:33> 'unsigned long long'
|   |   | | | `-BinaryOperator 0x28b8a6eec88 <col:13, col:32> 'unsigned long long' '^'
|   |   | | |   |-ImplicitCastExpr 0x28b8a6eec58 <col:13, col:20> 'u64':'unsigned long long' <LValueToRValue>
|   |   | | |   | `-ArraySubscriptExpr 0x28b8a6eebb8 <col:13, col:20> 'const u64':'const unsigned long long' lvalue
|   |   | | |   |   |-ImplicitCastExpr 0x28b8a6eeba0 <col:13> 'const u64 *':'const u64 *' <LValueToRValue>
|   |   | | |   |   | `-DeclRefExpr 0x28b8a6eeb58 <col:13> 'const u64 *':'const u64 *' lvalue ParmVar 0x28b8a6ebe48 'small' 'const u64 *':'const u64 *'
|   |   | | |   |   `-IntegerLiteral 0x28b8a6eeb78 <col:19> 'int' 0
|   |   | | |   `-ImplicitCastExpr 0x28b8a6eec70 <col:24, col:32> 'u64':'unsigned long long' <LValueToRValue>
|   |   | | |     `-ArraySubscriptExpr 0x28b8a6eec38 <col:24, col:32> 'const u64':'const unsigned long long' lvalue
|   |   | | |       |-ImplicitCastExpr 0x28b8a6eec20 <col:24> 'const u64 *' <ArrayToPointerDecay>
|   |   | | |       | `-DeclRefExpr 0x28b8a6eebd8 <col:24> 'const u64 [4]' lvalue Var 0x28b8a6e7928 'kPrime' 'const u64 [4]'
|   |   | | |       `-IntegerLiteral 0x28b8a6eebf8 <col:31> 'int' 0
|   |   | | `-ParenExpr 0x28b8a6eee18 <line:965:9, col:30> 'unsigned long long'
|   |   | |   `-BinaryOperator 0x28b8a6eedf8 <col:10, col:29> 'unsigned long long' '^'
|   |   | |     |-ImplicitCastExpr 0x28b8a6eedc8 <col:10, col:17> 'u64':'unsigned long long' <LValueToRValue>
|   |   | |     | `-ArraySubscriptExpr 0x28b8a6eed28 <col:10, col:17> 'const u64':'const unsigned long long' lvalue
|   |   | |     |   |-ImplicitCastExpr 0x28b8a6eed10 <col:10> 'const u64 *':'const u64 *' <LValueToRValue>
|   |   | |     |   | `-DeclRefExpr 0x28b8a6eecc8 <col:10> 'const u64 *':'const u64 *' lvalue ParmVar 0x28b8a6ebe48 'small' 'const u64 *':'const u64 *'
|   |   | |     |   `-IntegerLiteral 0x28b8a6eece8 <col:16> 'int' 1
|   |   | |     `-ImplicitCastExpr 0x28b8a6eede0 <col:21, col:29> 'u64':'unsigned long long' <LValueToRValue>
|   |   | |       `-ArraySubscriptExpr 0x28b8a6eeda8 <col:21, col:29> 'const u64':'const unsigned long long' lvalue
|   |   | |         |-ImplicitCastExpr 0x28b8a6eed90 <col:21> 'const u64 *' <ArrayToPointerDecay>
|   |   | |         | `-DeclRefExpr 0x28b8a6eed48 <col:21> 'const u64 [4]' lvalue Var 0x28b8a6e7928 'kPrime' 'const u64 [4]'
|   |   | |         `-IntegerLiteral 0x28b8a6eed68 <col:28> 'int' 1
|   |   | `-ParenExpr 0x28b8a6eefa8 <line:966:9, col:30> 'unsigned long long'
|   |   |   `-BinaryOperator 0x28b8a6eef88 <col:10, col:29> 'unsigned long long' '^'
|   |   |     |-ImplicitCastExpr 0x28b8a6eef58 <col:10, col:17> 'u64':'unsigned long long' <LValueToRValue>
|   |   |     | `-ArraySubscriptExpr 0x28b8a6eeeb8 <col:10, col:17> 'const u64':'const unsigned long long' lvalue
|   |   |     |   |-ImplicitCastExpr 0x28b8a6eeea0 <col:10> 'const u64 *':'const u64 *' <LValueToRValue>
|   |   |     |   | `-DeclRefExpr 0x28b8a6eee58 <col:10> 'const u64 *':'const u64 *' lvalue ParmVar 0x28b8a6ebe48 'small' 'const u64 *':'const u64 *'
|   |   |     |   `-IntegerLiteral 0x28b8a6eee78 <col:16> 'int' 2
|   |   |     `-ImplicitCastExpr 0x28b8a6eef70 <col:21, col:29> 'u64':'unsigned long long' <LValueToRValue>
|   |   |       `-ArraySubscriptExpr 0x28b8a6eef38 <col:21, col:29> 'const u64':'const unsigned long long' lvalue
|   |   |         |-ImplicitCastExpr 0x28b8a6eef20 <col:21> 'const u64 *' <ArrayToPointerDecay>
|   |   |         | `-DeclRefExpr 0x28b8a6eeed8 <col:21> 'const u64 [4]' lvalue Var 0x28b8a6e7928 'kPrime' 'const u64 [4]'
|   |   |         `-IntegerLiteral 0x28b8a6eeef8 <col:28> 'int' 2
|   |   `-ParenExpr 0x28b8a6ef138 <col:34, col:55> 'unsigned long long'
|   |     `-BinaryOperator 0x28b8a6ef118 <col:35, col:54> 'unsigned long long' '^'
|   |       |-ImplicitCastExpr 0x28b8a6ef0e8 <col:35, col:42> 'u64':'unsigned long long' <LValueToRValue>
|   |       | `-ArraySubscriptExpr 0x28b8a6ef048 <col:35, col:42> 'const u64':'const unsigned long long' lvalue
|   |       |   |-ImplicitCastExpr 0x28b8a6ef030 <col:35> 'const u64 *':'const u64 *' <LValueToRValue>
|   |       |   | `-DeclRefExpr 0x28b8a6eefe8 <col:35> 'const u64 *':'const u64 *' lvalue ParmVar 0x28b8a6ebe48 'small' 'const u64 *':'const u64 *'
|   |       |   `-IntegerLiteral 0x28b8a6ef008 <col:41> 'int' 3
|   |       `-ImplicitCastExpr 0x28b8a6ef100 <col:46, col:54> 'u64':'unsigned long long' <LValueToRValue>
|   |         `-ArraySubscriptExpr 0x28b8a6ef0c8 <col:46, col:54> 'const u64':'const unsigned long long' lvalue
|   |           |-ImplicitCastExpr 0x28b8a6ef0b0 <col:46> 'const u64 *' <ArrayToPointerDecay>
|   |           | `-DeclRefExpr 0x28b8a6ef068 <col:46> 'const u64 [4]' lvalue Var 0x28b8a6e7928 'kPrime' 'const u64 [4]'
|   |           `-IntegerLiteral 0x28b8a6ef088 <col:53> 'int' 3
|   |-UnaryOperator 0x28b8a6ef1b8 <line:967:5, col:9> 'u64':'unsigned long long' postfix '--'
|   | `-DeclRefExpr 0x28b8a6ef198 <col:5> 'u64':'unsigned long long' lvalue Var 0x28b8a6ec0b8 'is_p' 'u64':'unsigned long long'
|   |-CompoundAssignOperator 0x28b8a6ef270 <line:968:5, col:21> 'u64':'unsigned long long' '&=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-DeclRefExpr 0x28b8a6ef1d0 <col:5> 'u64':'unsigned long long' lvalue Var 0x28b8a6ec0b8 'is_p' 'u64':'unsigned long long'
|   | `-BinaryOperator 0x28b8a6ef250 <col:13, col:21> 'u64':'unsigned long long' '<<'
|   |   |-ImplicitCastExpr 0x28b8a6ef238 <col:13> 'u64':'unsigned long long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x28b8a6ef1f0 <col:13> 'u64':'unsigned long long' lvalue Var 0x28b8a6ec0b8 'is_p' 'u64':'unsigned long long'
|   |   `-IntegerLiteral 0x28b8a6ef210 <col:21> 'int' 32
|   |-CompoundAssignOperator 0x28b8a6ef340 <line:969:5, col:21> 'u64':'unsigned long long' '&=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-DeclRefExpr 0x28b8a6ef2a0 <col:5> 'u64':'unsigned long long' lvalue Var 0x28b8a6ec0b8 'is_p' 'u64':'unsigned long long'
|   | `-BinaryOperator 0x28b8a6ef320 <col:13, col:21> 'u64':'unsigned long long' '<<'
|   |   |-ImplicitCastExpr 0x28b8a6ef308 <col:13> 'u64':'unsigned long long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x28b8a6ef2c0 <col:13> 'u64':'unsigned long long' lvalue Var 0x28b8a6ec0b8 'is_p' 'u64':'unsigned long long'
|   |   `-IntegerLiteral 0x28b8a6ef2e0 <col:21> 'int' 16
|   |-CompoundAssignOperator 0x28b8a6ef410 <line:970:5, col:21> 'u64':'unsigned long long' '&=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-DeclRefExpr 0x28b8a6ef370 <col:5> 'u64':'unsigned long long' lvalue Var 0x28b8a6ec0b8 'is_p' 'u64':'unsigned long long'
|   | `-BinaryOperator 0x28b8a6ef3f0 <col:13, col:21> 'u64':'unsigned long long' '<<'
|   |   |-ImplicitCastExpr 0x28b8a6ef3d8 <col:13> 'u64':'unsigned long long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x28b8a6ef390 <col:13> 'u64':'unsigned long long' lvalue Var 0x28b8a6ec0b8 'is_p' 'u64':'unsigned long long'
|   |   `-IntegerLiteral 0x28b8a6ef3b0 <col:21> 'int' 8
|   |-CompoundAssignOperator 0x28b8a6ef4e0 <line:971:5, col:21> 'u64':'unsigned long long' '&=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-DeclRefExpr 0x28b8a6ef440 <col:5> 'u64':'unsigned long long' lvalue Var 0x28b8a6ec0b8 'is_p' 'u64':'unsigned long long'
|   | `-BinaryOperator 0x28b8a6ef4c0 <col:13, col:21> 'u64':'unsigned long long' '<<'
|   |   |-ImplicitCastExpr 0x28b8a6ef4a8 <col:13> 'u64':'unsigned long long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x28b8a6ef460 <col:13> 'u64':'unsigned long long' lvalue Var 0x28b8a6ec0b8 'is_p' 'u64':'unsigned long long'
|   |   `-IntegerLiteral 0x28b8a6ef480 <col:21> 'int' 4
|   |-CompoundAssignOperator 0x28b8a6ef5b0 <line:972:5, col:21> 'u64':'unsigned long long' '&=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-DeclRefExpr 0x28b8a6ef510 <col:5> 'u64':'unsigned long long' lvalue Var 0x28b8a6ec0b8 'is_p' 'u64':'unsigned long long'
|   | `-BinaryOperator 0x28b8a6ef590 <col:13, col:21> 'u64':'unsigned long long' '<<'
|   |   |-ImplicitCastExpr 0x28b8a6ef578 <col:13> 'u64':'unsigned long long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x28b8a6ef530 <col:13> 'u64':'unsigned long long' lvalue Var 0x28b8a6ec0b8 'is_p' 'u64':'unsigned long long'
|   |   `-IntegerLiteral 0x28b8a6ef550 <col:21> 'int' 2
|   |-CompoundAssignOperator 0x28b8a6ef680 <line:973:5, col:21> 'u64':'unsigned long long' '&=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-DeclRefExpr 0x28b8a6ef5e0 <col:5> 'u64':'unsigned long long' lvalue Var 0x28b8a6ec0b8 'is_p' 'u64':'unsigned long long'
|   | `-BinaryOperator 0x28b8a6ef660 <col:13, col:21> 'u64':'unsigned long long' '<<'
|   |   |-ImplicitCastExpr 0x28b8a6ef648 <col:13> 'u64':'unsigned long long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x28b8a6ef600 <col:13> 'u64':'unsigned long long' lvalue Var 0x28b8a6ec0b8 'is_p' 'u64':'unsigned long long'
|   |   `-IntegerLiteral 0x28b8a6ef620 <col:21> 'int' 1
|   |-BinaryOperator 0x28b8a6ef7d0 <line:974:5, col:27> 'u64':'unsigned long long' '='
|   | |-DeclRefExpr 0x28b8a6ef6b0 <col:5> 'u64':'unsigned long long' lvalue Var 0x28b8a6ec0b8 'is_p' 'u64':'unsigned long long'
|   | `-BinaryOperator 0x28b8a6ef7b0 <col:12, col:27> 'unsigned long long' '-'
|   |   |-ImplicitCastExpr 0x28b8a6ef798 <col:12> 'unsigned long long' <IntegralCast>
|   |   | `-IntegerLiteral 0x28b8a6ef6d0 <col:12> 'int' 0
|   |   `-ParenExpr 0x28b8a6ef778 <col:16, col:27> 'u64':'unsigned long long'
|   |     `-BinaryOperator 0x28b8a6ef758 <col:17, col:25> 'u64':'unsigned long long' '>>'
|   |       |-ImplicitCastExpr 0x28b8a6ef740 <col:17> 'u64':'unsigned long long' <LValueToRValue>
|   |       | `-DeclRefExpr 0x28b8a6ef6f8 <col:17> 'u64':'unsigned long long' lvalue Var 0x28b8a6ec0b8 'is_p' 'u64':'unsigned long long'
|   |       `-IntegerLiteral 0x28b8a6ef718 <col:25> 'int' 63
|   |-CompoundAssignOperator 0x28b8a6ef848 <line:976:5, col:16> 'u64':'unsigned long long' '|=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-DeclRefExpr 0x28b8a6ef7f0 <col:5> 'u64':'unsigned long long' lvalue Var 0x28b8a6ec148 'is_zero' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x28b8a6ef830 <col:16> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x28b8a6ef810 <col:16> 'u64':'unsigned long long' lvalue Var 0x28b8a6ec0b8 'is_p' 'u64':'unsigned long long'
|   |-BinaryOperator 0x28b8a6ef900 <line:978:5, col:14> 'limb':'int' '='
|   | |-DeclRefExpr 0x28b8a6ef878 <col:5> 'limb':'int' lvalue Var 0x28b8a6ec028 'result' 'limb':'int'
|   | `-ImplicitCastExpr 0x28b8a6ef8e8 <col:14> 'limb':'int' <IntegralCast>
|   |   `-ImplicitCastExpr 0x28b8a6ef8d0 <col:14> 'u64':'unsigned long long' <LValueToRValue>
|   |     `-DeclRefExpr 0x28b8a6ef8b0 <col:14> 'u64':'unsigned long long' lvalue Var 0x28b8a6ec148 'is_zero' 'u64':'unsigned long long'
|   |-CompoundAssignOperator 0x28b8a6efa18 <line:979:5, col:35> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x28b8a6ef920 <col:5> 'limb':'int' lvalue Var 0x28b8a6ec028 'result' 'limb':'int'
|   | `-BinaryOperator 0x28b8a6ef9f8 <col:15, col:35> 'limb':'int' '<<'
|   |   |-ParenExpr 0x28b8a6ef9b0 <col:15, col:30> 'limb':'int'
|   |   | `-CStyleCastExpr 0x28b8a6ef988 <col:16, col:23> 'limb':'int' <IntegralCast>
|   |   |   `-ImplicitCastExpr 0x28b8a6ef970 <col:23> 'u64':'unsigned long long' <LValueToRValue> part_of_explicit_cast
|   |   |     `-DeclRefExpr 0x28b8a6ef940 <col:23> 'u64':'unsigned long long' lvalue Var 0x28b8a6ec148 'is_zero' 'u64':'unsigned long long'
|   |   `-IntegerLiteral 0x28b8a6ef9d0 <col:35> 'int' 64
|   `-ReturnStmt 0x28b8a6efa80 <line:980:5, col:12>
|     `-ImplicitCastExpr 0x28b8a6efa68 <col:12> 'limb':'int' <LValueToRValue>
|       `-DeclRefExpr 0x28b8a6efa48 <col:12> 'limb':'int' lvalue Var 0x28b8a6ec028 'result' 'limb':'int'
|-FunctionDecl 0x28b8a6efc28 <line:983:1, line:986:1> line:983:12 used smallfelem_is_zero_int 'int (const void *)' static
| |-ParmVarDecl 0x28b8a6efb78 <col:35, col:47> col:47 used small 'const void *'
| `-CompoundStmt 0x28b8a6eff28 <line:984:1, line:986:1>
|   `-ReturnStmt 0x28b8a6eff18 <line:985:5, col:56>
|     `-CStyleCastExpr 0x28b8a6efef0 <col:12, col:56> 'int' <NoOp>
|       `-ParenExpr 0x28b8a6efed0 <col:17, col:56> 'int'
|         `-BinaryOperator 0x28b8a6efe78 <col:18, col:55> 'int' '&'
|           |-CallExpr 0x28b8a6efda0 <col:18, col:42> 'limb':'int'
|           | |-ImplicitCastExpr 0x28b8a6efd88 <col:18> 'limb (*)(const u64 *)' <FunctionToPointerDecay>
|           | | `-DeclRefExpr 0x28b8a6efce8 <col:18> 'limb (const u64 *)' Function 0x28b8a6ebf58 'smallfelem_is_zero' 'limb (const u64 *)'
|           | `-ImplicitCastExpr 0x28b8a6efde0 <col:37> 'const u64 *':'const u64 *' <BitCast>
|           |   `-ImplicitCastExpr 0x28b8a6efdc8 <col:37> 'const void *' <LValueToRValue>
|           |     `-DeclRefExpr 0x28b8a6efd08 <col:37> 'const void *' lvalue ParmVar 0x28b8a6efb78 'small' 'const void *'
|           `-ParenExpr 0x28b8a6efe58 <col:46, col:55> 'limb':'int'
|             `-CStyleCastExpr 0x28b8a6efe30 <col:47, col:54> 'limb':'int' <NoOp>
|               `-IntegerLiteral 0x28b8a6efdf8 <col:54> 'int' 1
|-FunctionDecl 0x28b8a6f0090 <line:996:1, line:1088:1> line:996:13 used felem_inv 'void (limb *, const limb *)' static
| |-ParmVarDecl 0x28b8a6eff50 <col:23, col:29> col:29 used out 'limb *':'limb *'
| |-ParmVarDecl 0x28b8a6effc8 <col:34, col:46> col:46 used in 'const limb *':'const limb *'
| `-CompoundStmt 0x28b8a6f3830 <line:997:1, line:1088:1>
|   |-DeclStmt 0x28b8a6f0260 <line:998:5, col:22>
|   | |-VarDecl 0x28b8a6f0168 <col:5, col:11> col:11 used ftmp 'felem':'limb [4]'
|   | `-VarDecl 0x28b8a6f01e0 <col:5, col:17> col:17 used ftmp2 'felem':'limb [4]'
|   |-DeclStmt 0x28b8a6f0580 <line:1000:5, col:36>
|   | |-VarDecl 0x28b8a6f0288 <col:5, col:11> col:11 used e2 'felem':'limb [4]'
|   | |-VarDecl 0x28b8a6f0300 <col:5, col:15> col:15 used e4 'felem':'limb [4]'
|   | |-VarDecl 0x28b8a6f0378 <col:5, col:19> col:19 used e8 'felem':'limb [4]'
|   | |-VarDecl 0x28b8a6f03f0 <col:5, col:23> col:23 used e16 'felem':'limb [4]'
|   | |-VarDecl 0x28b8a6f0468 <col:5, col:28> col:28 used e32 'felem':'limb [4]'
|   | `-VarDecl 0x28b8a6f04e0 <col:5, col:33> col:33 used e64 'felem':'limb [4]'
|   |-DeclStmt 0x28b8a6fa698 <line:1001:5, col:18>
|   | `-VarDecl 0x28b8a6fa630 <col:5, col:15> col:15 used tmp 'longfelem':'limb [8]'
|   |-DeclStmt 0x28b8a6fa730 <line:1002:5, col:15>
|   | `-VarDecl 0x28b8a6fa6c8 <col:5, col:14> col:14 used i 'unsigned int'
|   |-CallExpr 0x28b8a6fa800 <line:1004:5, col:25> 'void'
|   | |-ImplicitCastExpr 0x28b8a6fa7e8 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6fa748 <col:5> 'void (limb *, const limb *)' Function 0x28b8a603cb8 'felem_square' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a6fa830 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6fa768 <col:18> 'longfelem':'limb [8]' lvalue Var 0x28b8a6fa630 'tmp' 'longfelem':'limb [8]'
|   | `-ImplicitCastExpr 0x28b8a6fa848 <col:23> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x28b8a6fa7a0 <col:23> 'const limb *':'const limb *' lvalue ParmVar 0x28b8a6effc8 'in' 'const limb *':'const limb *'
|   |-CallExpr 0x28b8a6fa8f0 <line:1005:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x28b8a6fa8d8 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6fa860 <col:5> 'void (limb *, const limb *)' Function 0x28b8a6ed1e8 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a6fa920 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6fa880 <col:18> 'felem':'limb [4]' lvalue Var 0x28b8a6f0168 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x28b8a6fa950 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a6fa938 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a6fa8b8 <col:24> 'longfelem':'limb [8]' lvalue Var 0x28b8a6fa630 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x28b8a6faa60 <line:1006:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x28b8a6faa48 <col:5> 'void (*)(limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6fa968 <col:5> 'void (limb *, const limb *, const limb *)' Function 0x28b8a6088c8 'felem_mul' 'void (limb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a6faa98 <col:15> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6fa988 <col:15> 'longfelem':'limb [8]' lvalue Var 0x28b8a6fa630 'tmp' 'longfelem':'limb [8]'
|   | |-ImplicitCastExpr 0x28b8a6faab0 <col:20> 'const limb *':'const limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x28b8a6fa9a8 <col:20> 'const limb *':'const limb *' lvalue ParmVar 0x28b8a6effc8 'in' 'const limb *':'const limb *'
|   | `-ImplicitCastExpr 0x28b8a6faae0 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a6faac8 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a6fa9c8 <col:24> 'felem':'limb [4]' lvalue Var 0x28b8a6f0168 'ftmp' 'felem':'limb [4]'
|   |-CallExpr 0x28b8a6fab70 <line:1007:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x28b8a6fab58 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6faaf8 <col:5> 'void (limb *, const limb *)' Function 0x28b8a6ed1e8 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a6faba0 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6fab18 <col:18> 'felem':'limb [4]' lvalue Var 0x28b8a6f0168 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x28b8a6fabd0 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a6fabb8 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a6fab38 <col:24> 'longfelem':'limb [8]' lvalue Var 0x28b8a6fa630 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x28b8a6faca0 <line:1008:5, col:26> 'void'
|   | |-ImplicitCastExpr 0x28b8a6fac88 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6fabe8 <col:5> 'void (limb *, const limb *)' Function 0x28b8a5f3218 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a6facd0 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6fac08 <col:18> 'felem':'limb [4]' lvalue Var 0x28b8a6f0288 'e2' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x28b8a6fad00 <col:22> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a6face8 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a6fac40 <col:22> 'felem':'limb [4]' lvalue Var 0x28b8a6f0168 'ftmp' 'felem':'limb [4]'
|   |-CallExpr 0x28b8a6fad90 <line:1009:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x28b8a6fad78 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6fad18 <col:5> 'void (limb *, const limb *)' Function 0x28b8a603cb8 'felem_square' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a6fadc0 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6fad38 <col:18> 'longfelem':'limb [8]' lvalue Var 0x28b8a6fa630 'tmp' 'longfelem':'limb [8]'
|   | `-ImplicitCastExpr 0x28b8a6fadf0 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a6fadd8 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a6fad58 <col:23> 'felem':'limb [4]' lvalue Var 0x28b8a6f0168 'ftmp' 'felem':'limb [4]'
|   |-CallExpr 0x28b8a6fae80 <line:1010:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x28b8a6fae68 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6fae08 <col:5> 'void (limb *, const limb *)' Function 0x28b8a6ed1e8 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a6faeb0 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6fae28 <col:18> 'felem':'limb [4]' lvalue Var 0x28b8a6f0168 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x28b8a6faee0 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a6faec8 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a6fae48 <col:24> 'longfelem':'limb [8]' lvalue Var 0x28b8a6fa630 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x28b8a6faf70 <line:1011:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x28b8a6faf58 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6faef8 <col:5> 'void (limb *, const limb *)' Function 0x28b8a603cb8 'felem_square' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a6fafa0 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6faf18 <col:18> 'longfelem':'limb [8]' lvalue Var 0x28b8a6fa630 'tmp' 'longfelem':'limb [8]'
|   | `-ImplicitCastExpr 0x28b8a6fafd0 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a6fafb8 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a6faf38 <col:23> 'felem':'limb [4]' lvalue Var 0x28b8a6f0168 'ftmp' 'felem':'limb [4]'
|   |-CallExpr 0x28b8a6fb060 <line:1012:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x28b8a6fb048 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6fafe8 <col:5> 'void (limb *, const limb *)' Function 0x28b8a6ed1e8 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a6fb090 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6fb008 <col:18> 'felem':'limb [4]' lvalue Var 0x28b8a6f0168 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x28b8a6fb0c0 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a6fb0a8 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a6fb028 <col:24> 'longfelem':'limb [8]' lvalue Var 0x28b8a6fa630 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x28b8a6fb170 <line:1013:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x28b8a6fb158 <col:5> 'void (*)(limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6fb0d8 <col:5> 'void (limb *, const limb *, const limb *)' Function 0x28b8a6088c8 'felem_mul' 'void (limb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a6fb1a8 <col:15> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6fb0f8 <col:15> 'longfelem':'limb [8]' lvalue Var 0x28b8a6fa630 'tmp' 'longfelem':'limb [8]'
|   | |-ImplicitCastExpr 0x28b8a6fb1d8 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x28b8a6fb1c0 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x28b8a6fb118 <col:20> 'felem':'limb [4]' lvalue Var 0x28b8a6f0168 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x28b8a6fb208 <col:26> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a6fb1f0 <col:26> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a6fb138 <col:26> 'felem':'limb [4]' lvalue Var 0x28b8a6f0288 'e2' 'felem':'limb [4]'
|   |-CallExpr 0x28b8a6fb298 <line:1014:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x28b8a6fb280 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6fb220 <col:5> 'void (limb *, const limb *)' Function 0x28b8a6ed1e8 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a6fb2c8 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6fb240 <col:18> 'felem':'limb [4]' lvalue Var 0x28b8a6f0168 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x28b8a6fb2f8 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a6fb2e0 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a6fb260 <col:24> 'longfelem':'limb [8]' lvalue Var 0x28b8a6fa630 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x28b8a6fb3a0 <line:1015:5, col:26> 'void'
|   | |-ImplicitCastExpr 0x28b8a6fb388 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6fb310 <col:5> 'void (limb *, const limb *)' Function 0x28b8a5f3218 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a6fb3d0 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6fb330 <col:18> 'felem':'limb [4]' lvalue Var 0x28b8a6f0300 'e4' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x28b8a6fb400 <col:22> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a6fb3e8 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a6fb368 <col:22> 'felem':'limb [4]' lvalue Var 0x28b8a6f0168 'ftmp' 'felem':'limb [4]'
|   |-CallExpr 0x28b8a6fb490 <line:1016:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x28b8a6fb478 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6fb418 <col:5> 'void (limb *, const limb *)' Function 0x28b8a603cb8 'felem_square' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a6fb4c0 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6fb438 <col:18> 'longfelem':'limb [8]' lvalue Var 0x28b8a6fa630 'tmp' 'longfelem':'limb [8]'
|   | `-ImplicitCastExpr 0x28b8a6fb4f0 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a6fb4d8 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a6fb458 <col:23> 'felem':'limb [4]' lvalue Var 0x28b8a6f0168 'ftmp' 'felem':'limb [4]'
|   |-CallExpr 0x28b8a6fb580 <line:1017:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x28b8a6fb568 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6fb508 <col:5> 'void (limb *, const limb *)' Function 0x28b8a6ed1e8 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a6fb5b0 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6fb528 <col:18> 'felem':'limb [4]' lvalue Var 0x28b8a6f0168 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x28b8a6fb5e0 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a6fb5c8 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a6fb548 <col:24> 'longfelem':'limb [8]' lvalue Var 0x28b8a6fa630 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x28b8a6fb670 <line:1018:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x28b8a6fb658 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6fb5f8 <col:5> 'void (limb *, const limb *)' Function 0x28b8a603cb8 'felem_square' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a6fb6a0 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6fb618 <col:18> 'longfelem':'limb [8]' lvalue Var 0x28b8a6fa630 'tmp' 'longfelem':'limb [8]'
|   | `-ImplicitCastExpr 0x28b8a6fb6d0 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a6fb6b8 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a6fb638 <col:23> 'felem':'limb [4]' lvalue Var 0x28b8a6f0168 'ftmp' 'felem':'limb [4]'
|   |-CallExpr 0x28b8a6fb760 <line:1019:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x28b8a6fb748 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6fb6e8 <col:5> 'void (limb *, const limb *)' Function 0x28b8a6ed1e8 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a6fb790 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6fb708 <col:18> 'felem':'limb [4]' lvalue Var 0x28b8a6f0168 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x28b8a6fb7c0 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a6fb7a8 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a6fb728 <col:24> 'longfelem':'limb [8]' lvalue Var 0x28b8a6fa630 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x28b8a6fb850 <line:1020:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x28b8a6fb838 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6fb7d8 <col:5> 'void (limb *, const limb *)' Function 0x28b8a603cb8 'felem_square' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a6fb880 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6fb7f8 <col:18> 'longfelem':'limb [8]' lvalue Var 0x28b8a6fa630 'tmp' 'longfelem':'limb [8]'
|   | `-ImplicitCastExpr 0x28b8a6fb8b0 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a6fb898 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a6fb818 <col:23> 'felem':'limb [4]' lvalue Var 0x28b8a6f0168 'ftmp' 'felem':'limb [4]'
|   |-CallExpr 0x28b8a6fb940 <line:1021:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x28b8a6fb928 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6fb8c8 <col:5> 'void (limb *, const limb *)' Function 0x28b8a6ed1e8 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a6fb970 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6fb8e8 <col:18> 'felem':'limb [4]' lvalue Var 0x28b8a6f0168 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x28b8a6fb9a0 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a6fb988 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a6fb908 <col:24> 'longfelem':'limb [8]' lvalue Var 0x28b8a6fa630 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x28b8a6fba30 <line:1022:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x28b8a6fba18 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6fb9b8 <col:5> 'void (limb *, const limb *)' Function 0x28b8a603cb8 'felem_square' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a6fba60 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6fb9d8 <col:18> 'longfelem':'limb [8]' lvalue Var 0x28b8a6fa630 'tmp' 'longfelem':'limb [8]'
|   | `-ImplicitCastExpr 0x28b8a6fba90 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a6fba78 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a6fb9f8 <col:23> 'felem':'limb [4]' lvalue Var 0x28b8a6f0168 'ftmp' 'felem':'limb [4]'
|   |-CallExpr 0x28b8a6fbb20 <line:1023:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x28b8a6fbb08 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6fbaa8 <col:5> 'void (limb *, const limb *)' Function 0x28b8a6ed1e8 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a6fbb50 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6fbac8 <col:18> 'felem':'limb [4]' lvalue Var 0x28b8a6f0168 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x28b8a6fbb80 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a6fbb68 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a6fbae8 <col:24> 'longfelem':'limb [8]' lvalue Var 0x28b8a6fa630 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x28b8a6fbc30 <line:1024:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x28b8a6fbc18 <col:5> 'void (*)(limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6fbb98 <col:5> 'void (limb *, const limb *, const limb *)' Function 0x28b8a6088c8 'felem_mul' 'void (limb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a6fbc68 <col:15> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6fbbb8 <col:15> 'longfelem':'limb [8]' lvalue Var 0x28b8a6fa630 'tmp' 'longfelem':'limb [8]'
|   | |-ImplicitCastExpr 0x28b8a6fbc98 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x28b8a6fbc80 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x28b8a6fbbd8 <col:20> 'felem':'limb [4]' lvalue Var 0x28b8a6f0168 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x28b8a6fbcc8 <col:26> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a6fbcb0 <col:26> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a6fbbf8 <col:26> 'felem':'limb [4]' lvalue Var 0x28b8a6f0300 'e4' 'felem':'limb [4]'
|   |-CallExpr 0x28b8a6fbd58 <line:1025:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x28b8a6fbd40 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6fbce0 <col:5> 'void (limb *, const limb *)' Function 0x28b8a6ed1e8 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a6fbd88 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6fbd00 <col:18> 'felem':'limb [4]' lvalue Var 0x28b8a6f0168 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x28b8a6fbdb8 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a6fbda0 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a6fbd20 <col:24> 'longfelem':'limb [8]' lvalue Var 0x28b8a6fa630 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x28b8a6fbe60 <line:1026:5, col:26> 'void'
|   | |-ImplicitCastExpr 0x28b8a6fbe48 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6fbdd0 <col:5> 'void (limb *, const limb *)' Function 0x28b8a5f3218 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a6fbe90 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6fbdf0 <col:18> 'felem':'limb [4]' lvalue Var 0x28b8a6f0378 'e8' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x28b8a6fbec0 <col:22> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a6fbea8 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a6fbe28 <col:22> 'felem':'limb [4]' lvalue Var 0x28b8a6f0168 'ftmp' 'felem':'limb [4]'
|   |-ForStmt 0x28b8a6fc240 <line:1027:5, line:1030:5>
|   | |-BinaryOperator 0x28b8a6fbf50 <line:1027:10, col:14> 'unsigned int' '='
|   | | |-DeclRefExpr 0x28b8a6fbed8 <col:10> 'unsigned int' lvalue Var 0x28b8a6fa6c8 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x28b8a6fbf38 <col:14> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x28b8a6fbf10 <col:14> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x28b8a6fbfe8 <col:17, col:21> 'int' '<'
|   | | |-ImplicitCastExpr 0x28b8a6fbfb8 <col:17> 'unsigned int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a6fbf70 <col:17> 'unsigned int' lvalue Var 0x28b8a6fa6c8 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x28b8a6fbfd0 <col:21> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x28b8a6fbf90 <col:21> 'int' 8
|   | |-UnaryOperator 0x28b8a6fc028 <col:24, col:25> 'unsigned int' postfix '++'
|   | | `-DeclRefExpr 0x28b8a6fc008 <col:24> 'unsigned int' lvalue Var 0x28b8a6fa6c8 'i' 'unsigned int'
|   | `-CompoundStmt 0x28b8a6fc220 <col:29, line:1030:5>
|   |   |-CallExpr 0x28b8a6fc0b8 <line:1028:9, col:31> 'void'
|   |   | |-ImplicitCastExpr 0x28b8a6fc0a0 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x28b8a6fc040 <col:9> 'void (limb *, const limb *)' Function 0x28b8a603cb8 'felem_square' 'void (limb *, const limb *)'
|   |   | |-ImplicitCastExpr 0x28b8a6fc0e8 <col:22> 'limb *' <ArrayToPointerDecay>
|   |   | | `-DeclRefExpr 0x28b8a6fc060 <col:22> 'longfelem':'limb [8]' lvalue Var 0x28b8a6fa630 'tmp' 'longfelem':'limb [8]'
|   |   | `-ImplicitCastExpr 0x28b8a6fc118 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   |   `-ImplicitCastExpr 0x28b8a6fc100 <col:27> 'limb *' <ArrayToPointerDecay>
|   |   |     `-DeclRefExpr 0x28b8a6fc080 <col:27> 'felem':'limb [4]' lvalue Var 0x28b8a6f0168 'ftmp' 'felem':'limb [4]'
|   |   `-CallExpr 0x28b8a6fc1a8 <line:1029:9, col:31> 'void'
|   |     |-ImplicitCastExpr 0x28b8a6fc190 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x28b8a6fc130 <col:9> 'void (limb *, const limb *)' Function 0x28b8a6ed1e8 'felem_reduce' 'void (limb *, const limb *)'
|   |     |-ImplicitCastExpr 0x28b8a6fc1d8 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x28b8a6fc150 <col:22> 'felem':'limb [4]' lvalue Var 0x28b8a6f0168 'ftmp' 'felem':'limb [4]'
|   |     `-ImplicitCastExpr 0x28b8a6fc208 <col:28> 'const limb *':'const limb *' <NoOp>
|   |       `-ImplicitCastExpr 0x28b8a6fc1f0 <col:28> 'limb *' <ArrayToPointerDecay>
|   |         `-DeclRefExpr 0x28b8a6fc170 <col:28> 'longfelem':'limb [8]' lvalue Var 0x28b8a6fa630 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x28b8a6fc310 <line:1031:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x28b8a6fc2f8 <col:5> 'void (*)(limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6fc278 <col:5> 'void (limb *, const limb *, const limb *)' Function 0x28b8a6088c8 'felem_mul' 'void (limb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a6fc348 <col:15> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6fc298 <col:15> 'longfelem':'limb [8]' lvalue Var 0x28b8a6fa630 'tmp' 'longfelem':'limb [8]'
|   | |-ImplicitCastExpr 0x28b8a6fc378 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x28b8a6fc360 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x28b8a6fc2b8 <col:20> 'felem':'limb [4]' lvalue Var 0x28b8a6f0168 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x28b8a6fc3a8 <col:26> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a6fc390 <col:26> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a6fc2d8 <col:26> 'felem':'limb [4]' lvalue Var 0x28b8a6f0378 'e8' 'felem':'limb [4]'
|   |-CallExpr 0x28b8a6fc438 <line:1032:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x28b8a6fc420 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6fc3c0 <col:5> 'void (limb *, const limb *)' Function 0x28b8a6ed1e8 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a6fc468 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6fc3e0 <col:18> 'felem':'limb [4]' lvalue Var 0x28b8a6f0168 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x28b8a6fc498 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a6fc480 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a6fc400 <col:24> 'longfelem':'limb [8]' lvalue Var 0x28b8a6fa630 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x28b8a6fc540 <line:1033:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x28b8a6fc528 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6fc4b0 <col:5> 'void (limb *, const limb *)' Function 0x28b8a5f3218 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a6fc570 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6fc4d0 <col:18> 'felem':'limb [4]' lvalue Var 0x28b8a6f03f0 'e16' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x28b8a6fc5a0 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a6fc588 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a6fc508 <col:23> 'felem':'limb [4]' lvalue Var 0x28b8a6f0168 'ftmp' 'felem':'limb [4]'
|   |-ForStmt 0x28b8a700950 <line:1034:5, line:1037:5>
|   | |-BinaryOperator 0x28b8a700660 <line:1034:10, col:14> 'unsigned int' '='
|   | | |-DeclRefExpr 0x28b8a6fc5b8 <col:10> 'unsigned int' lvalue Var 0x28b8a6fa6c8 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x28b8a6fc600 <col:14> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x28b8a6fc5d8 <col:14> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x28b8a7006f8 <col:17, col:21> 'int' '<'
|   | | |-ImplicitCastExpr 0x28b8a7006c8 <col:17> 'unsigned int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a700680 <col:17> 'unsigned int' lvalue Var 0x28b8a6fa6c8 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x28b8a7006e0 <col:21> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x28b8a7006a0 <col:21> 'int' 16
|   | |-UnaryOperator 0x28b8a700738 <col:25, col:26> 'unsigned int' postfix '++'
|   | | `-DeclRefExpr 0x28b8a700718 <col:25> 'unsigned int' lvalue Var 0x28b8a6fa6c8 'i' 'unsigned int'
|   | `-CompoundStmt 0x28b8a700930 <col:30, line:1037:5>
|   |   |-CallExpr 0x28b8a7007c8 <line:1035:9, col:31> 'void'
|   |   | |-ImplicitCastExpr 0x28b8a7007b0 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x28b8a700750 <col:9> 'void (limb *, const limb *)' Function 0x28b8a603cb8 'felem_square' 'void (limb *, const limb *)'
|   |   | |-ImplicitCastExpr 0x28b8a7007f8 <col:22> 'limb *' <ArrayToPointerDecay>
|   |   | | `-DeclRefExpr 0x28b8a700770 <col:22> 'longfelem':'limb [8]' lvalue Var 0x28b8a6fa630 'tmp' 'longfelem':'limb [8]'
|   |   | `-ImplicitCastExpr 0x28b8a700828 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   |   `-ImplicitCastExpr 0x28b8a700810 <col:27> 'limb *' <ArrayToPointerDecay>
|   |   |     `-DeclRefExpr 0x28b8a700790 <col:27> 'felem':'limb [4]' lvalue Var 0x28b8a6f0168 'ftmp' 'felem':'limb [4]'
|   |   `-CallExpr 0x28b8a7008b8 <line:1036:9, col:31> 'void'
|   |     |-ImplicitCastExpr 0x28b8a7008a0 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x28b8a700840 <col:9> 'void (limb *, const limb *)' Function 0x28b8a6ed1e8 'felem_reduce' 'void (limb *, const limb *)'
|   |     |-ImplicitCastExpr 0x28b8a7008e8 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x28b8a700860 <col:22> 'felem':'limb [4]' lvalue Var 0x28b8a6f0168 'ftmp' 'felem':'limb [4]'
|   |     `-ImplicitCastExpr 0x28b8a700918 <col:28> 'const limb *':'const limb *' <NoOp>
|   |       `-ImplicitCastExpr 0x28b8a700900 <col:28> 'limb *' <ArrayToPointerDecay>
|   |         `-DeclRefExpr 0x28b8a700880 <col:28> 'longfelem':'limb [8]' lvalue Var 0x28b8a6fa630 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x28b8a700a20 <line:1038:5, col:29> 'void'
|   | |-ImplicitCastExpr 0x28b8a700a08 <col:5> 'void (*)(limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a700988 <col:5> 'void (limb *, const limb *, const limb *)' Function 0x28b8a6088c8 'felem_mul' 'void (limb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a700a58 <col:15> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a7009a8 <col:15> 'longfelem':'limb [8]' lvalue Var 0x28b8a6fa630 'tmp' 'longfelem':'limb [8]'
|   | |-ImplicitCastExpr 0x28b8a700a88 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x28b8a700a70 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x28b8a7009c8 <col:20> 'felem':'limb [4]' lvalue Var 0x28b8a6f0168 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x28b8a700ab8 <col:26> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a700aa0 <col:26> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a7009e8 <col:26> 'felem':'limb [4]' lvalue Var 0x28b8a6f03f0 'e16' 'felem':'limb [4]'
|   |-CallExpr 0x28b8a700b48 <line:1039:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x28b8a700b30 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a700ad0 <col:5> 'void (limb *, const limb *)' Function 0x28b8a6ed1e8 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a700b78 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a700af0 <col:18> 'felem':'limb [4]' lvalue Var 0x28b8a6f0168 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x28b8a700ba8 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a700b90 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a700b10 <col:24> 'longfelem':'limb [8]' lvalue Var 0x28b8a6fa630 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x28b8a700c50 <line:1040:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x28b8a700c38 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a700bc0 <col:5> 'void (limb *, const limb *)' Function 0x28b8a5f3218 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a700c80 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a700be0 <col:18> 'felem':'limb [4]' lvalue Var 0x28b8a6f0468 'e32' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x28b8a700cb0 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a700c98 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a700c18 <col:23> 'felem':'limb [4]' lvalue Var 0x28b8a6f0168 'ftmp' 'felem':'limb [4]'
|   |-ForStmt 0x28b8a701018 <line:1041:5, line:1044:5>
|   | |-BinaryOperator 0x28b8a700d28 <line:1041:10, col:14> 'unsigned int' '='
|   | | |-DeclRefExpr 0x28b8a700cc8 <col:10> 'unsigned int' lvalue Var 0x28b8a6fa6c8 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x28b8a700d10 <col:14> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x28b8a700ce8 <col:14> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x28b8a700dc0 <col:17, col:21> 'int' '<'
|   | | |-ImplicitCastExpr 0x28b8a700d90 <col:17> 'unsigned int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a700d48 <col:17> 'unsigned int' lvalue Var 0x28b8a6fa6c8 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x28b8a700da8 <col:21> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x28b8a700d68 <col:21> 'int' 32
|   | |-UnaryOperator 0x28b8a700e00 <col:25, col:26> 'unsigned int' postfix '++'
|   | | `-DeclRefExpr 0x28b8a700de0 <col:25> 'unsigned int' lvalue Var 0x28b8a6fa6c8 'i' 'unsigned int'
|   | `-CompoundStmt 0x28b8a700ff8 <col:30, line:1044:5>
|   |   |-CallExpr 0x28b8a700e90 <line:1042:9, col:31> 'void'
|   |   | |-ImplicitCastExpr 0x28b8a700e78 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x28b8a700e18 <col:9> 'void (limb *, const limb *)' Function 0x28b8a603cb8 'felem_square' 'void (limb *, const limb *)'
|   |   | |-ImplicitCastExpr 0x28b8a700ec0 <col:22> 'limb *' <ArrayToPointerDecay>
|   |   | | `-DeclRefExpr 0x28b8a700e38 <col:22> 'longfelem':'limb [8]' lvalue Var 0x28b8a6fa630 'tmp' 'longfelem':'limb [8]'
|   |   | `-ImplicitCastExpr 0x28b8a700ef0 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   |   `-ImplicitCastExpr 0x28b8a700ed8 <col:27> 'limb *' <ArrayToPointerDecay>
|   |   |     `-DeclRefExpr 0x28b8a700e58 <col:27> 'felem':'limb [4]' lvalue Var 0x28b8a6f0168 'ftmp' 'felem':'limb [4]'
|   |   `-CallExpr 0x28b8a700f80 <line:1043:9, col:31> 'void'
|   |     |-ImplicitCastExpr 0x28b8a700f68 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x28b8a700f08 <col:9> 'void (limb *, const limb *)' Function 0x28b8a6ed1e8 'felem_reduce' 'void (limb *, const limb *)'
|   |     |-ImplicitCastExpr 0x28b8a700fb0 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x28b8a700f28 <col:22> 'felem':'limb [4]' lvalue Var 0x28b8a6f0168 'ftmp' 'felem':'limb [4]'
|   |     `-ImplicitCastExpr 0x28b8a700fe0 <col:28> 'const limb *':'const limb *' <NoOp>
|   |       `-ImplicitCastExpr 0x28b8a700fc8 <col:28> 'limb *' <ArrayToPointerDecay>
|   |         `-DeclRefExpr 0x28b8a700f48 <col:28> 'longfelem':'limb [8]' lvalue Var 0x28b8a6fa630 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x28b8a7010e0 <line:1045:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x28b8a7010c8 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a701050 <col:5> 'void (limb *, const limb *)' Function 0x28b8a5f3218 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a701110 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a701070 <col:18> 'felem':'limb [4]' lvalue Var 0x28b8a6f04e0 'e64' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x28b8a701140 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a701128 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a7010a8 <col:23> 'felem':'limb [4]' lvalue Var 0x28b8a6f0168 'ftmp' 'felem':'limb [4]'
|   |-CallExpr 0x28b8a7011f0 <line:1046:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x28b8a7011d8 <col:5> 'void (*)(limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a701158 <col:5> 'void (limb *, const limb *, const limb *)' Function 0x28b8a6088c8 'felem_mul' 'void (limb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a701228 <col:15> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a701178 <col:15> 'longfelem':'limb [8]' lvalue Var 0x28b8a6fa630 'tmp' 'longfelem':'limb [8]'
|   | |-ImplicitCastExpr 0x28b8a701258 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x28b8a701240 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x28b8a701198 <col:20> 'felem':'limb [4]' lvalue Var 0x28b8a6f0168 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x28b8a701270 <col:26> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x28b8a7011b8 <col:26> 'const limb *':'const limb *' lvalue ParmVar 0x28b8a6effc8 'in' 'const limb *':'const limb *'
|   |-CallExpr 0x28b8a701300 <line:1047:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x28b8a7012e8 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a701288 <col:5> 'void (limb *, const limb *)' Function 0x28b8a6ed1e8 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a701330 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a7012a8 <col:18> 'felem':'limb [4]' lvalue Var 0x28b8a6f0168 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x28b8a701360 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a701348 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a7012c8 <col:24> 'longfelem':'limb [8]' lvalue Var 0x28b8a6fa630 'tmp' 'longfelem':'limb [8]'
|   |-ForStmt 0x28b8a7016c8 <line:1048:5, line:1051:5>
|   | |-BinaryOperator 0x28b8a7013d8 <line:1048:10, col:14> 'unsigned int' '='
|   | | |-DeclRefExpr 0x28b8a701378 <col:10> 'unsigned int' lvalue Var 0x28b8a6fa6c8 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x28b8a7013c0 <col:14> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x28b8a701398 <col:14> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x28b8a701470 <col:17, col:21> 'int' '<'
|   | | |-ImplicitCastExpr 0x28b8a701440 <col:17> 'unsigned int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a7013f8 <col:17> 'unsigned int' lvalue Var 0x28b8a6fa6c8 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x28b8a701458 <col:21> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x28b8a701418 <col:21> 'int' 192
|   | |-UnaryOperator 0x28b8a7014b0 <col:26, col:27> 'unsigned int' postfix '++'
|   | | `-DeclRefExpr 0x28b8a701490 <col:26> 'unsigned int' lvalue Var 0x28b8a6fa6c8 'i' 'unsigned int'
|   | `-CompoundStmt 0x28b8a7016a8 <col:31, line:1051:5>
|   |   |-CallExpr 0x28b8a701540 <line:1049:9, col:31> 'void'
|   |   | |-ImplicitCastExpr 0x28b8a701528 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x28b8a7014c8 <col:9> 'void (limb *, const limb *)' Function 0x28b8a603cb8 'felem_square' 'void (limb *, const limb *)'
|   |   | |-ImplicitCastExpr 0x28b8a701570 <col:22> 'limb *' <ArrayToPointerDecay>
|   |   | | `-DeclRefExpr 0x28b8a7014e8 <col:22> 'longfelem':'limb [8]' lvalue Var 0x28b8a6fa630 'tmp' 'longfelem':'limb [8]'
|   |   | `-ImplicitCastExpr 0x28b8a7015a0 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   |   `-ImplicitCastExpr 0x28b8a701588 <col:27> 'limb *' <ArrayToPointerDecay>
|   |   |     `-DeclRefExpr 0x28b8a701508 <col:27> 'felem':'limb [4]' lvalue Var 0x28b8a6f0168 'ftmp' 'felem':'limb [4]'
|   |   `-CallExpr 0x28b8a701630 <line:1050:9, col:31> 'void'
|   |     |-ImplicitCastExpr 0x28b8a701618 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x28b8a7015b8 <col:9> 'void (limb *, const limb *)' Function 0x28b8a6ed1e8 'felem_reduce' 'void (limb *, const limb *)'
|   |     |-ImplicitCastExpr 0x28b8a701660 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x28b8a7015d8 <col:22> 'felem':'limb [4]' lvalue Var 0x28b8a6f0168 'ftmp' 'felem':'limb [4]'
|   |     `-ImplicitCastExpr 0x28b8a701690 <col:28> 'const limb *':'const limb *' <NoOp>
|   |       `-ImplicitCastExpr 0x28b8a701678 <col:28> 'limb *' <ArrayToPointerDecay>
|   |         `-DeclRefExpr 0x28b8a7015f8 <col:28> 'longfelem':'limb [8]' lvalue Var 0x28b8a6fa630 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x28b8a701798 <line:1053:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x28b8a701780 <col:5> 'void (*)(limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a701700 <col:5> 'void (limb *, const limb *, const limb *)' Function 0x28b8a6088c8 'felem_mul' 'void (limb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a7017d0 <col:15> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a701720 <col:15> 'longfelem':'limb [8]' lvalue Var 0x28b8a6fa630 'tmp' 'longfelem':'limb [8]'
|   | |-ImplicitCastExpr 0x28b8a701800 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x28b8a7017e8 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x28b8a701740 <col:20> 'felem':'limb [4]' lvalue Var 0x28b8a6f04e0 'e64' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x28b8a701830 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a701818 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a701760 <col:25> 'felem':'limb [4]' lvalue Var 0x28b8a6f0468 'e32' 'felem':'limb [4]'
|   |-CallExpr 0x28b8a7018d8 <line:1054:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x28b8a7018c0 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a701848 <col:5> 'void (limb *, const limb *)' Function 0x28b8a6ed1e8 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a701908 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a701868 <col:18> 'felem':'limb [4]' lvalue Var 0x28b8a6f01e0 'ftmp2' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x28b8a701938 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a701920 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a7018a0 <col:25> 'longfelem':'limb [8]' lvalue Var 0x28b8a6fa630 'tmp' 'longfelem':'limb [8]'
|   |-ForStmt 0x28b8a701ca0 <line:1055:5, line:1058:5>
|   | |-BinaryOperator 0x28b8a7019b0 <line:1055:10, col:14> 'unsigned int' '='
|   | | |-DeclRefExpr 0x28b8a701950 <col:10> 'unsigned int' lvalue Var 0x28b8a6fa6c8 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x28b8a701998 <col:14> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x28b8a701970 <col:14> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x28b8a701a48 <col:17, col:21> 'int' '<'
|   | | |-ImplicitCastExpr 0x28b8a701a18 <col:17> 'unsigned int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a7019d0 <col:17> 'unsigned int' lvalue Var 0x28b8a6fa6c8 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x28b8a701a30 <col:21> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x28b8a7019f0 <col:21> 'int' 16
|   | |-UnaryOperator 0x28b8a701a88 <col:25, col:26> 'unsigned int' postfix '++'
|   | | `-DeclRefExpr 0x28b8a701a68 <col:25> 'unsigned int' lvalue Var 0x28b8a6fa6c8 'i' 'unsigned int'
|   | `-CompoundStmt 0x28b8a701c80 <col:30, line:1058:5>
|   |   |-CallExpr 0x28b8a701b18 <line:1056:9, col:32> 'void'
|   |   | |-ImplicitCastExpr 0x28b8a701b00 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x28b8a701aa0 <col:9> 'void (limb *, const limb *)' Function 0x28b8a603cb8 'felem_square' 'void (limb *, const limb *)'
|   |   | |-ImplicitCastExpr 0x28b8a701b48 <col:22> 'limb *' <ArrayToPointerDecay>
|   |   | | `-DeclRefExpr 0x28b8a701ac0 <col:22> 'longfelem':'limb [8]' lvalue Var 0x28b8a6fa630 'tmp' 'longfelem':'limb [8]'
|   |   | `-ImplicitCastExpr 0x28b8a701b78 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   |   `-ImplicitCastExpr 0x28b8a701b60 <col:27> 'limb *' <ArrayToPointerDecay>
|   |   |     `-DeclRefExpr 0x28b8a701ae0 <col:27> 'felem':'limb [4]' lvalue Var 0x28b8a6f01e0 'ftmp2' 'felem':'limb [4]'
|   |   `-CallExpr 0x28b8a701c08 <line:1057:9, col:32> 'void'
|   |     |-ImplicitCastExpr 0x28b8a701bf0 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x28b8a701b90 <col:9> 'void (limb *, const limb *)' Function 0x28b8a6ed1e8 'felem_reduce' 'void (limb *, const limb *)'
|   |     |-ImplicitCastExpr 0x28b8a701c38 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x28b8a701bb0 <col:22> 'felem':'limb [4]' lvalue Var 0x28b8a6f01e0 'ftmp2' 'felem':'limb [4]'
|   |     `-ImplicitCastExpr 0x28b8a701c68 <col:29> 'const limb *':'const limb *' <NoOp>
|   |       `-ImplicitCastExpr 0x28b8a701c50 <col:29> 'limb *' <ArrayToPointerDecay>
|   |         `-DeclRefExpr 0x28b8a701bd0 <col:29> 'longfelem':'limb [8]' lvalue Var 0x28b8a6fa630 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x28b8a701d70 <line:1059:5, col:30> 'void'
|   | |-ImplicitCastExpr 0x28b8a701d58 <col:5> 'void (*)(limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a701cd8 <col:5> 'void (limb *, const limb *, const limb *)' Function 0x28b8a6088c8 'felem_mul' 'void (limb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a701da8 <col:15> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a701cf8 <col:15> 'longfelem':'limb [8]' lvalue Var 0x28b8a6fa630 'tmp' 'longfelem':'limb [8]'
|   | |-ImplicitCastExpr 0x28b8a701dd8 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x28b8a701dc0 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x28b8a701d18 <col:20> 'felem':'limb [4]' lvalue Var 0x28b8a6f01e0 'ftmp2' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x28b8a701e08 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a701df0 <col:27> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a701d38 <col:27> 'felem':'limb [4]' lvalue Var 0x28b8a6f03f0 'e16' 'felem':'limb [4]'
|   |-CallExpr 0x28b8a701e98 <line:1060:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x28b8a701e80 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a701e20 <col:5> 'void (limb *, const limb *)' Function 0x28b8a6ed1e8 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a701ec8 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a701e40 <col:18> 'felem':'limb [4]' lvalue Var 0x28b8a6f01e0 'ftmp2' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x28b8a701ef8 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a701ee0 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a701e60 <col:25> 'longfelem':'limb [8]' lvalue Var 0x28b8a6fa630 'tmp' 'longfelem':'limb [8]'
|   |-ForStmt 0x28b8a702260 <line:1061:5, line:1064:5>
|   | |-BinaryOperator 0x28b8a701f70 <line:1061:10, col:14> 'unsigned int' '='
|   | | |-DeclRefExpr 0x28b8a701f10 <col:10> 'unsigned int' lvalue Var 0x28b8a6fa6c8 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x28b8a701f58 <col:14> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x28b8a701f30 <col:14> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x28b8a702008 <col:17, col:21> 'int' '<'
|   | | |-ImplicitCastExpr 0x28b8a701fd8 <col:17> 'unsigned int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a701f90 <col:17> 'unsigned int' lvalue Var 0x28b8a6fa6c8 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x28b8a701ff0 <col:21> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x28b8a701fb0 <col:21> 'int' 8
|   | |-UnaryOperator 0x28b8a702048 <col:24, col:25> 'unsigned int' postfix '++'
|   | | `-DeclRefExpr 0x28b8a702028 <col:24> 'unsigned int' lvalue Var 0x28b8a6fa6c8 'i' 'unsigned int'
|   | `-CompoundStmt 0x28b8a702240 <col:29, line:1064:5>
|   |   |-CallExpr 0x28b8a7020d8 <line:1062:9, col:32> 'void'
|   |   | |-ImplicitCastExpr 0x28b8a7020c0 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x28b8a702060 <col:9> 'void (limb *, const limb *)' Function 0x28b8a603cb8 'felem_square' 'void (limb *, const limb *)'
|   |   | |-ImplicitCastExpr 0x28b8a702108 <col:22> 'limb *' <ArrayToPointerDecay>
|   |   | | `-DeclRefExpr 0x28b8a702080 <col:22> 'longfelem':'limb [8]' lvalue Var 0x28b8a6fa630 'tmp' 'longfelem':'limb [8]'
|   |   | `-ImplicitCastExpr 0x28b8a702138 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   |   `-ImplicitCastExpr 0x28b8a702120 <col:27> 'limb *' <ArrayToPointerDecay>
|   |   |     `-DeclRefExpr 0x28b8a7020a0 <col:27> 'felem':'limb [4]' lvalue Var 0x28b8a6f01e0 'ftmp2' 'felem':'limb [4]'
|   |   `-CallExpr 0x28b8a7021c8 <line:1063:9, col:32> 'void'
|   |     |-ImplicitCastExpr 0x28b8a7021b0 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x28b8a702150 <col:9> 'void (limb *, const limb *)' Function 0x28b8a6ed1e8 'felem_reduce' 'void (limb *, const limb *)'
|   |     |-ImplicitCastExpr 0x28b8a7021f8 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x28b8a702170 <col:22> 'felem':'limb [4]' lvalue Var 0x28b8a6f01e0 'ftmp2' 'felem':'limb [4]'
|   |     `-ImplicitCastExpr 0x28b8a702228 <col:29> 'const limb *':'const limb *' <NoOp>
|   |       `-ImplicitCastExpr 0x28b8a702210 <col:29> 'limb *' <ArrayToPointerDecay>
|   |         `-DeclRefExpr 0x28b8a702190 <col:29> 'longfelem':'limb [8]' lvalue Var 0x28b8a6fa630 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x28b8a702330 <line:1065:5, col:29> 'void'
|   | |-ImplicitCastExpr 0x28b8a702318 <col:5> 'void (*)(limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a702298 <col:5> 'void (limb *, const limb *, const limb *)' Function 0x28b8a6088c8 'felem_mul' 'void (limb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a702368 <col:15> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a7022b8 <col:15> 'longfelem':'limb [8]' lvalue Var 0x28b8a6fa630 'tmp' 'longfelem':'limb [8]'
|   | |-ImplicitCastExpr 0x28b8a702398 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x28b8a702380 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x28b8a7022d8 <col:20> 'felem':'limb [4]' lvalue Var 0x28b8a6f01e0 'ftmp2' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x28b8a7023c8 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a7023b0 <col:27> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a7022f8 <col:27> 'felem':'limb [4]' lvalue Var 0x28b8a6f0378 'e8' 'felem':'limb [4]'
|   |-CallExpr 0x28b8a702458 <line:1066:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x28b8a702440 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a7023e0 <col:5> 'void (limb *, const limb *)' Function 0x28b8a6ed1e8 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a702488 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a702400 <col:18> 'felem':'limb [4]' lvalue Var 0x28b8a6f01e0 'ftmp2' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x28b8a7024b8 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a7024a0 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a702420 <col:25> 'longfelem':'limb [8]' lvalue Var 0x28b8a6fa630 'tmp' 'longfelem':'limb [8]'
|   |-ForStmt 0x28b8a6f27b0 <line:1067:5, line:1070:5>
|   | |-BinaryOperator 0x28b8a702530 <line:1067:10, col:14> 'unsigned int' '='
|   | | |-DeclRefExpr 0x28b8a7024d0 <col:10> 'unsigned int' lvalue Var 0x28b8a6fa6c8 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x28b8a702518 <col:14> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x28b8a7024f0 <col:14> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x28b8a7025c8 <col:17, col:21> 'int' '<'
|   | | |-ImplicitCastExpr 0x28b8a702598 <col:17> 'unsigned int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a702550 <col:17> 'unsigned int' lvalue Var 0x28b8a6fa6c8 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x28b8a7025b0 <col:21> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x28b8a702570 <col:21> 'int' 4
|   | |-UnaryOperator 0x28b8a702608 <col:24, col:25> 'unsigned int' postfix '++'
|   | | `-DeclRefExpr 0x28b8a7025e8 <col:24> 'unsigned int' lvalue Var 0x28b8a6fa6c8 'i' 'unsigned int'
|   | `-CompoundStmt 0x28b8a6f2790 <col:29, line:1070:5>
|   |   |-CallExpr 0x28b8a6f2628 <line:1068:9, col:32> 'void'
|   |   | |-ImplicitCastExpr 0x28b8a6f2610 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x28b8a702620 <col:9> 'void (limb *, const limb *)' Function 0x28b8a603cb8 'felem_square' 'void (limb *, const limb *)'
|   |   | |-ImplicitCastExpr 0x28b8a6f2658 <col:22> 'limb *' <ArrayToPointerDecay>
|   |   | | `-DeclRefExpr 0x28b8a702640 <col:22> 'longfelem':'limb [8]' lvalue Var 0x28b8a6fa630 'tmp' 'longfelem':'limb [8]'
|   |   | `-ImplicitCastExpr 0x28b8a6f2688 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   |   `-ImplicitCastExpr 0x28b8a6f2670 <col:27> 'limb *' <ArrayToPointerDecay>
|   |   |     `-DeclRefExpr 0x28b8a6f25f0 <col:27> 'felem':'limb [4]' lvalue Var 0x28b8a6f01e0 'ftmp2' 'felem':'limb [4]'
|   |   `-CallExpr 0x28b8a6f2718 <line:1069:9, col:32> 'void'
|   |     |-ImplicitCastExpr 0x28b8a6f2700 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x28b8a6f26a0 <col:9> 'void (limb *, const limb *)' Function 0x28b8a6ed1e8 'felem_reduce' 'void (limb *, const limb *)'
|   |     |-ImplicitCastExpr 0x28b8a6f2748 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x28b8a6f26c0 <col:22> 'felem':'limb [4]' lvalue Var 0x28b8a6f01e0 'ftmp2' 'felem':'limb [4]'
|   |     `-ImplicitCastExpr 0x28b8a6f2778 <col:29> 'const limb *':'const limb *' <NoOp>
|   |       `-ImplicitCastExpr 0x28b8a6f2760 <col:29> 'limb *' <ArrayToPointerDecay>
|   |         `-DeclRefExpr 0x28b8a6f26e0 <col:29> 'longfelem':'limb [8]' lvalue Var 0x28b8a6fa630 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x28b8a6f2880 <line:1071:5, col:29> 'void'
|   | |-ImplicitCastExpr 0x28b8a6f2868 <col:5> 'void (*)(limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6f27e8 <col:5> 'void (limb *, const limb *, const limb *)' Function 0x28b8a6088c8 'felem_mul' 'void (limb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a6f28b8 <col:15> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6f2808 <col:15> 'longfelem':'limb [8]' lvalue Var 0x28b8a6fa630 'tmp' 'longfelem':'limb [8]'
|   | |-ImplicitCastExpr 0x28b8a6f28e8 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x28b8a6f28d0 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x28b8a6f2828 <col:20> 'felem':'limb [4]' lvalue Var 0x28b8a6f01e0 'ftmp2' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x28b8a6f2918 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a6f2900 <col:27> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a6f2848 <col:27> 'felem':'limb [4]' lvalue Var 0x28b8a6f0300 'e4' 'felem':'limb [4]'
|   |-CallExpr 0x28b8a6f29a8 <line:1072:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x28b8a6f2990 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6f2930 <col:5> 'void (limb *, const limb *)' Function 0x28b8a6ed1e8 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a6f29d8 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6f2950 <col:18> 'felem':'limb [4]' lvalue Var 0x28b8a6f01e0 'ftmp2' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x28b8a6f2a08 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a6f29f0 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a6f2970 <col:25> 'longfelem':'limb [8]' lvalue Var 0x28b8a6fa630 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x28b8a6f2a98 <line:1073:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x28b8a6f2a80 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6f2a20 <col:5> 'void (limb *, const limb *)' Function 0x28b8a603cb8 'felem_square' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a6f2ac8 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6f2a40 <col:18> 'longfelem':'limb [8]' lvalue Var 0x28b8a6fa630 'tmp' 'longfelem':'limb [8]'
|   | `-ImplicitCastExpr 0x28b8a6f2af8 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a6f2ae0 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a6f2a60 <col:23> 'felem':'limb [4]' lvalue Var 0x28b8a6f01e0 'ftmp2' 'felem':'limb [4]'
|   |-CallExpr 0x28b8a6f2b88 <line:1074:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x28b8a6f2b70 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6f2b10 <col:5> 'void (limb *, const limb *)' Function 0x28b8a6ed1e8 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a6f2bb8 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6f2b30 <col:18> 'felem':'limb [4]' lvalue Var 0x28b8a6f01e0 'ftmp2' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x28b8a6f2be8 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a6f2bd0 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a6f2b50 <col:25> 'longfelem':'limb [8]' lvalue Var 0x28b8a6fa630 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x28b8a6f2c78 <line:1075:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x28b8a6f2c60 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6f2c00 <col:5> 'void (limb *, const limb *)' Function 0x28b8a603cb8 'felem_square' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a6f2ca8 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6f2c20 <col:18> 'longfelem':'limb [8]' lvalue Var 0x28b8a6fa630 'tmp' 'longfelem':'limb [8]'
|   | `-ImplicitCastExpr 0x28b8a6f2cd8 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a6f2cc0 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a6f2c40 <col:23> 'felem':'limb [4]' lvalue Var 0x28b8a6f01e0 'ftmp2' 'felem':'limb [4]'
|   |-CallExpr 0x28b8a6f2d68 <line:1076:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x28b8a6f2d50 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6f2cf0 <col:5> 'void (limb *, const limb *)' Function 0x28b8a6ed1e8 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a6f2d98 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6f2d10 <col:18> 'felem':'limb [4]' lvalue Var 0x28b8a6f01e0 'ftmp2' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x28b8a6f2dc8 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a6f2db0 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a6f2d30 <col:25> 'longfelem':'limb [8]' lvalue Var 0x28b8a6fa630 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x28b8a6f2e78 <line:1077:5, col:29> 'void'
|   | |-ImplicitCastExpr 0x28b8a6f2e60 <col:5> 'void (*)(limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6f2de0 <col:5> 'void (limb *, const limb *, const limb *)' Function 0x28b8a6088c8 'felem_mul' 'void (limb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a6f2eb0 <col:15> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6f2e00 <col:15> 'longfelem':'limb [8]' lvalue Var 0x28b8a6fa630 'tmp' 'longfelem':'limb [8]'
|   | |-ImplicitCastExpr 0x28b8a6f2ee0 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x28b8a6f2ec8 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x28b8a6f2e20 <col:20> 'felem':'limb [4]' lvalue Var 0x28b8a6f01e0 'ftmp2' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x28b8a6f2f10 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a6f2ef8 <col:27> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a6f2e40 <col:27> 'felem':'limb [4]' lvalue Var 0x28b8a6f0288 'e2' 'felem':'limb [4]'
|   |-CallExpr 0x28b8a6f2fa0 <line:1078:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x28b8a6f2f88 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6f2f28 <col:5> 'void (limb *, const limb *)' Function 0x28b8a6ed1e8 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a6f2fd0 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6f2f48 <col:18> 'felem':'limb [4]' lvalue Var 0x28b8a6f01e0 'ftmp2' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x28b8a6f3000 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a6f2fe8 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a6f2f68 <col:25> 'longfelem':'limb [8]' lvalue Var 0x28b8a6fa630 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x28b8a6f3090 <line:1079:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x28b8a6f3078 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6f3018 <col:5> 'void (limb *, const limb *)' Function 0x28b8a603cb8 'felem_square' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a6f30c0 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6f3038 <col:18> 'longfelem':'limb [8]' lvalue Var 0x28b8a6fa630 'tmp' 'longfelem':'limb [8]'
|   | `-ImplicitCastExpr 0x28b8a6f30f0 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a6f30d8 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a6f3058 <col:23> 'felem':'limb [4]' lvalue Var 0x28b8a6f01e0 'ftmp2' 'felem':'limb [4]'
|   |-CallExpr 0x28b8a6f3180 <line:1080:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x28b8a6f3168 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6f3108 <col:5> 'void (limb *, const limb *)' Function 0x28b8a6ed1e8 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a6f31b0 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6f3128 <col:18> 'felem':'limb [4]' lvalue Var 0x28b8a6f01e0 'ftmp2' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x28b8a6f31e0 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a6f31c8 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a6f3148 <col:25> 'longfelem':'limb [8]' lvalue Var 0x28b8a6fa630 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x28b8a6f3270 <line:1081:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x28b8a6f3258 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6f31f8 <col:5> 'void (limb *, const limb *)' Function 0x28b8a603cb8 'felem_square' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a6f32a0 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6f3218 <col:18> 'longfelem':'limb [8]' lvalue Var 0x28b8a6fa630 'tmp' 'longfelem':'limb [8]'
|   | `-ImplicitCastExpr 0x28b8a6f32d0 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a6f32b8 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a6f3238 <col:23> 'felem':'limb [4]' lvalue Var 0x28b8a6f01e0 'ftmp2' 'felem':'limb [4]'
|   |-CallExpr 0x28b8a6f3360 <line:1082:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x28b8a6f3348 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6f32e8 <col:5> 'void (limb *, const limb *)' Function 0x28b8a6ed1e8 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a6f3390 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6f3308 <col:18> 'felem':'limb [4]' lvalue Var 0x28b8a6f01e0 'ftmp2' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x28b8a6f33c0 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a6f33a8 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a6f3328 <col:25> 'longfelem':'limb [8]' lvalue Var 0x28b8a6fa630 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x28b8a6f3470 <line:1083:5, col:29> 'void'
|   | |-ImplicitCastExpr 0x28b8a6f3458 <col:5> 'void (*)(limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6f33d8 <col:5> 'void (limb *, const limb *, const limb *)' Function 0x28b8a6088c8 'felem_mul' 'void (limb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a6f34a8 <col:15> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6f33f8 <col:15> 'longfelem':'limb [8]' lvalue Var 0x28b8a6fa630 'tmp' 'longfelem':'limb [8]'
|   | |-ImplicitCastExpr 0x28b8a6f34d8 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x28b8a6f34c0 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x28b8a6f3418 <col:20> 'felem':'limb [4]' lvalue Var 0x28b8a6f01e0 'ftmp2' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x28b8a6f34f0 <col:27> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x28b8a6f3438 <col:27> 'const limb *':'const limb *' lvalue ParmVar 0x28b8a6effc8 'in' 'const limb *':'const limb *'
|   |-CallExpr 0x28b8a6f3580 <line:1084:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x28b8a6f3568 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6f3508 <col:5> 'void (limb *, const limb *)' Function 0x28b8a6ed1e8 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a6f35b0 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6f3528 <col:18> 'felem':'limb [4]' lvalue Var 0x28b8a6f01e0 'ftmp2' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x28b8a6f35e0 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a6f35c8 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a6f3548 <col:25> 'longfelem':'limb [8]' lvalue Var 0x28b8a6fa630 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x28b8a6f3690 <line:1086:5, col:31> 'void'
|   | |-ImplicitCastExpr 0x28b8a6f3678 <col:5> 'void (*)(limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6f35f8 <col:5> 'void (limb *, const limb *, const limb *)' Function 0x28b8a6088c8 'felem_mul' 'void (limb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a6f36c8 <col:15> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6f3618 <col:15> 'longfelem':'limb [8]' lvalue Var 0x28b8a6fa630 'tmp' 'longfelem':'limb [8]'
|   | |-ImplicitCastExpr 0x28b8a6f36f8 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x28b8a6f36e0 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x28b8a6f3638 <col:20> 'felem':'limb [4]' lvalue Var 0x28b8a6f01e0 'ftmp2' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x28b8a6f3728 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a6f3710 <col:27> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a6f3658 <col:27> 'felem':'limb [4]' lvalue Var 0x28b8a6f0168 'ftmp' 'felem':'limb [4]'
|   `-CallExpr 0x28b8a6f37b8 <line:1087:5, col:26> 'void'
|     |-ImplicitCastExpr 0x28b8a6f37a0 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x28b8a6f3740 <col:5> 'void (limb *, const limb *)' Function 0x28b8a6ed1e8 'felem_reduce' 'void (limb *, const limb *)'
|     |-ImplicitCastExpr 0x28b8a6f37e8 <col:18> 'limb *':'limb *' <LValueToRValue>
|     | `-DeclRefExpr 0x28b8a6f3760 <col:18> 'limb *':'limb *' lvalue ParmVar 0x28b8a6eff50 'out' 'limb *':'limb *'
|     `-ImplicitCastExpr 0x28b8a6f3818 <col:23> 'const limb *':'const limb *' <NoOp>
|       `-ImplicitCastExpr 0x28b8a6f3800 <col:23> 'limb *' <ArrayToPointerDecay>
|         `-DeclRefExpr 0x28b8a6f3780 <col:23> 'longfelem':'limb [8]' lvalue Var 0x28b8a6fa630 'tmp' 'longfelem':'limb [8]'
|-FunctionDecl 0x28b8a6f3b98 <line:1090:1, line:1097:1> line:1090:13 used smallfelem_inv_contract 'void (u64 *, const u64 *)' static
| |-ParmVarDecl 0x28b8a6f3a58 <col:37, col:48> col:48 used out 'u64 *':'u64 *'
| |-ParmVarDecl 0x28b8a6f3ad0 <col:53, col:70> col:70 used in 'const u64 *':'const u64 *'
| `-CompoundStmt 0x28b8a6f3ff0 <line:1091:1, line:1097:1>
|   |-DeclStmt 0x28b8a6f3cd8 <line:1092:5, col:14>
|   | `-VarDecl 0x28b8a6f3c70 <col:5, col:11> col:11 used tmp 'felem':'limb [4]'
|   |-CallExpr 0x28b8a6f3db0 <line:1094:5, col:30> 'void'
|   | |-ImplicitCastExpr 0x28b8a6f3d98 <col:5> 'void (*)(limb *, const u64 *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6f3cf0 <col:5> 'void (limb *, const u64 *)' Function 0x28b8a6002f0 'smallfelem_expand' 'void (limb *, const u64 *)'
|   | |-ImplicitCastExpr 0x28b8a6f3de0 <col:23> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6f3d10 <col:23> 'felem':'limb [4]' lvalue Var 0x28b8a6f3c70 'tmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x28b8a6f3df8 <col:28> 'const u64 *':'const u64 *' <LValueToRValue>
|   |   `-DeclRefExpr 0x28b8a6f3d48 <col:28> 'const u64 *':'const u64 *' lvalue ParmVar 0x28b8a6f3ad0 'in' 'const u64 *':'const u64 *'
|   |-CallExpr 0x28b8a6f3e88 <line:1095:5, col:23> 'void'
|   | |-ImplicitCastExpr 0x28b8a6f3e70 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6f3e10 <col:5> 'void (limb *, const limb *)' Function 0x28b8a6f0090 'felem_inv' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a6f3eb8 <col:15> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6f3e30 <col:15> 'felem':'limb [4]' lvalue Var 0x28b8a6f3c70 'tmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x28b8a6f3ee8 <col:20> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a6f3ed0 <col:20> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a6f3e50 <col:20> 'felem':'limb [4]' lvalue Var 0x28b8a6f3c70 'tmp' 'felem':'limb [4]'
|   `-CallExpr 0x28b8a6f3f78 <line:1096:5, col:28> 'void'
|     |-ImplicitCastExpr 0x28b8a6f3f60 <col:5> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x28b8a6f3f00 <col:5> 'void (u64 *, const limb *)' Function 0x28b8a6f8d18 'felem_contract' 'void (u64 *, const limb *)'
|     |-ImplicitCastExpr 0x28b8a6f3fa8 <col:20> 'u64 *':'u64 *' <LValueToRValue>
|     | `-DeclRefExpr 0x28b8a6f3f20 <col:20> 'u64 *':'u64 *' lvalue ParmVar 0x28b8a6f3a58 'out' 'u64 *':'u64 *'
|     `-ImplicitCastExpr 0x28b8a6f3fd8 <col:25> 'const limb *':'const limb *' <NoOp>
|       `-ImplicitCastExpr 0x28b8a6f3fc0 <col:25> 'limb *' <ArrayToPointerDecay>
|         `-DeclRefExpr 0x28b8a6f3f40 <col:25> 'felem':'limb [4]' lvalue Var 0x28b8a6f3c70 'tmp' 'felem':'limb [4]'
|-FunctionDecl 0x28b8a6f4488 <line:1117:1, line:1193:1> line:1118:1 used point_double 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *)' static
| |-ParmVarDecl 0x28b8a6f4030 <col:14, col:20> col:20 used x_out 'limb *':'limb *'
| |-ParmVarDecl 0x28b8a6f40a8 <col:27, col:33> col:33 used y_out 'limb *':'limb *'
| |-ParmVarDecl 0x28b8a6f4120 <col:40, col:46> col:46 used z_out 'limb *':'limb *'
| |-ParmVarDecl 0x28b8a6f4198 <line:1119:14, col:26> col:26 used x_in 'const limb *':'const limb *'
| |-ParmVarDecl 0x28b8a6f4210 <col:32, col:44> col:44 used y_in 'const limb *':'const limb *'
| |-ParmVarDecl 0x28b8a6f4288 <col:50, col:62> col:62 used z_in 'const limb *':'const limb *'
| `-CompoundStmt 0x28b8a702c88 <line:1120:1, line:1193:1>
|   |-DeclStmt 0x28b8a6fc6d0 <line:1121:5, col:24>
|   | |-VarDecl 0x28b8a6f4580 <col:5, col:15> col:15 used tmp 'longfelem':'limb [8]'
|   | `-VarDecl 0x28b8a6fc650 <col:5, col:20> col:20 used tmp2 'longfelem':'limb [8]'
|   |-DeclStmt 0x28b8a6fc9f0 <line:1122:5, col:49>
|   | |-VarDecl 0x28b8a6fc6f8 <col:5, col:11> col:11 used delta 'felem':'limb [4]'
|   | |-VarDecl 0x28b8a6fc770 <col:5, col:18> col:18 used gamma 'felem':'limb [4]'
|   | |-VarDecl 0x28b8a6fc7e8 <col:5, col:25> col:25 used beta 'felem':'limb [4]'
|   | |-VarDecl 0x28b8a6fc860 <col:5, col:31> col:31 used alpha 'felem':'limb [4]'
|   | |-VarDecl 0x28b8a6fc8d8 <col:5, col:38> col:38 used ftmp 'felem':'limb [4]'
|   | `-VarDecl 0x28b8a6fc950 <col:5, col:44> col:44 used ftmp2 'felem':'limb [4]'
|   |-DeclStmt 0x28b8a6fcb10 <line:1123:5, col:30>
|   | |-VarDecl 0x28b8a6fca18 <col:5, col:16> col:16 used small1 'smallfelem':'u64 [4]'
|   | `-VarDecl 0x28b8a6fca90 <col:5, col:24> col:24 used small2 'smallfelem':'u64 [4]'
|   |-CallExpr 0x28b8a6fcbb8 <line:1125:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x28b8a6fcba0 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6fcb28 <col:5> 'void (limb *, const limb *)' Function 0x28b8a5f3218 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a6fcbe8 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6fcb48 <col:18> 'felem':'limb [4]' lvalue Var 0x28b8a6fc8d8 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x28b8a6fcc00 <col:24> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x28b8a6fcb80 <col:24> 'const limb *':'const limb *' lvalue ParmVar 0x28b8a6f4198 'x_in' 'const limb *':'const limb *'
|   |-CallExpr 0x28b8a6fcca8 <line:1127:5, col:29> 'void'
|   | |-ImplicitCastExpr 0x28b8a6fcc90 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6fcc18 <col:5> 'void (limb *, const limb *)' Function 0x28b8a5f3218 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a6fccd8 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6fcc38 <col:18> 'felem':'limb [4]' lvalue Var 0x28b8a6fc950 'ftmp2' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x28b8a6fccf0 <col:25> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x28b8a6fcc70 <col:25> 'const limb *':'const limb *' lvalue ParmVar 0x28b8a6f4198 'x_in' 'const limb *':'const limb *'
|   |-CallExpr 0x28b8a6fcd98 <line:1131:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x28b8a6fcd80 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6fcd08 <col:5> 'void (limb *, const limb *)' Function 0x28b8a603cb8 'felem_square' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a6fcdc8 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6fcd28 <col:18> 'longfelem':'limb [8]' lvalue Var 0x28b8a6f4580 'tmp' 'longfelem':'limb [8]'
|   | `-ImplicitCastExpr 0x28b8a6fcde0 <col:23> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x28b8a6fcd60 <col:23> 'const limb *':'const limb *' lvalue ParmVar 0x28b8a6f4288 'z_in' 'const limb *':'const limb *'
|   |-CallExpr 0x28b8a6fce88 <line:1132:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x28b8a6fce70 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6fcdf8 <col:5> 'void (limb *, const limb *)' Function 0x28b8a6ed1e8 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a6fceb8 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6fce18 <col:18> 'felem':'limb [4]' lvalue Var 0x28b8a6fc6f8 'delta' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x28b8a6fcee8 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a6fced0 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a6fce50 <col:25> 'longfelem':'limb [8]' lvalue Var 0x28b8a6f4580 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x28b8a6fcf78 <line:1136:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x28b8a6fcf60 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6fcf00 <col:5> 'void (limb *, const limb *)' Function 0x28b8a603cb8 'felem_square' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a6fcfa8 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6fcf20 <col:18> 'longfelem':'limb [8]' lvalue Var 0x28b8a6f4580 'tmp' 'longfelem':'limb [8]'
|   | `-ImplicitCastExpr 0x28b8a6fcfc0 <col:23> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x28b8a6fcf40 <col:23> 'const limb *':'const limb *' lvalue ParmVar 0x28b8a6f4210 'y_in' 'const limb *':'const limb *'
|   |-CallExpr 0x28b8a6fd068 <line:1137:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x28b8a6fd050 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6fcfd8 <col:5> 'void (limb *, const limb *)' Function 0x28b8a6ed1e8 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a6fd098 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6fcff8 <col:18> 'felem':'limb [4]' lvalue Var 0x28b8a6fc770 'gamma' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x28b8a6fd0c8 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a6fd0b0 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a6fd030 <col:25> 'longfelem':'limb [8]' lvalue Var 0x28b8a6f4580 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x28b8a6fd170 <line:1139:5, col:31> 'void'
|   | |-ImplicitCastExpr 0x28b8a6fd158 <col:5> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6fd0e0 <col:5> 'void (u64 *, const limb *)' Function 0x28b8a5fc378 'felem_shrink' 'void (u64 *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a6fd1a0 <col:18> 'u64 *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6fd100 <col:18> 'smallfelem':'u64 [4]' lvalue Var 0x28b8a6fca18 'small1' 'smallfelem':'u64 [4]'
|   | `-ImplicitCastExpr 0x28b8a6fd1d0 <col:26> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a6fd1b8 <col:26> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a6fd138 <col:26> 'felem':'limb [4]' lvalue Var 0x28b8a6fc770 'gamma' 'felem':'limb [4]'
|   |-CallExpr 0x28b8a6fd2e0 <line:1142:5, col:38> 'void'
|   | |-ImplicitCastExpr 0x28b8a6fd2c8 <col:5> 'void (*)(limb *, const u64 *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6fd1e8 <col:5> 'void (limb *, const u64 *, const limb *)' Function 0x28b8a6f0698 'felem_small_mul' 'void (limb *, const u64 *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a6fd318 <col:21> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6fd208 <col:21> 'longfelem':'limb [8]' lvalue Var 0x28b8a6f4580 'tmp' 'longfelem':'limb [8]'
|   | |-ImplicitCastExpr 0x28b8a6fd348 <col:26> 'const u64 *':'const u64 *' <NoOp>
|   | | `-ImplicitCastExpr 0x28b8a6fd330 <col:26> 'u64 *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x28b8a6fd228 <col:26> 'smallfelem':'u64 [4]' lvalue Var 0x28b8a6fca18 'small1' 'smallfelem':'u64 [4]'
|   | `-ImplicitCastExpr 0x28b8a6fd360 <col:34> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x28b8a6fd248 <col:34> 'const limb *':'const limb *' lvalue ParmVar 0x28b8a6f4198 'x_in' 'const limb *':'const limb *'
|   |-CallExpr 0x28b8a6fd408 <line:1143:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x28b8a6fd3f0 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6fd378 <col:5> 'void (limb *, const limb *)' Function 0x28b8a6ed1e8 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a6fd438 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6fd398 <col:18> 'felem':'limb [4]' lvalue Var 0x28b8a6fc7e8 'beta' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x28b8a6fd468 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a6fd450 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a6fd3d0 <col:24> 'longfelem':'limb [8]' lvalue Var 0x28b8a6f4580 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x28b8a6fd4f8 <line:1147:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x28b8a6fd4e0 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6fd480 <col:5> 'void (limb *, const limb *)' Function 0x28b8a5f6fd0 'felem_diff' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a6fd528 <col:16> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6fd4a0 <col:16> 'felem':'limb [4]' lvalue Var 0x28b8a6fc8d8 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x28b8a6fd558 <col:22> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a6fd540 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a6fd4c0 <col:22> 'felem':'limb [4]' lvalue Var 0x28b8a6fc6f8 'delta' 'felem':'limb [4]'
|   |-CallExpr 0x28b8a6fd5e8 <line:1149:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x28b8a6fd5d0 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6fd570 <col:5> 'void (limb *, const limb *)' Function 0x28b8a5f3940 'felem_sum' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a6fd618 <col:15> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6fd590 <col:15> 'felem':'limb [4]' lvalue Var 0x28b8a6fc950 'ftmp2' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x28b8a6fd648 <col:22> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a6fd630 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a6fd5b0 <col:22> 'felem':'limb [4]' lvalue Var 0x28b8a6fc6f8 'delta' 'felem':'limb [4]'
|   |-CallExpr 0x28b8a6fd740 <line:1151:5, col:26> 'void'
|   | |-ImplicitCastExpr 0x28b8a6fd728 <col:5> 'void (*)(limb *, const u64)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6fd660 <col:5> 'void (limb *, const u64)' Function 0x28b8a5f4908 'felem_scalar' 'void (limb *, const u64)'
|   | |-ImplicitCastExpr 0x28b8a6fd770 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6fd680 <col:18> 'felem':'limb [4]' lvalue Var 0x28b8a6fc950 'ftmp2' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x28b8a6fd788 <col:25> 'u64':'unsigned long long' <IntegralCast>
|   |   `-IntegerLiteral 0x28b8a6fd6a0 <col:25> 'int' 3
|   |-CallExpr 0x28b8a6fd838 <line:1153:5, col:31> 'void'
|   | |-ImplicitCastExpr 0x28b8a6fd820 <col:5> 'void (*)(limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6fd7a0 <col:5> 'void (limb *, const limb *, const limb *)' Function 0x28b8a6088c8 'felem_mul' 'void (limb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a6fd870 <col:15> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6fd7c0 <col:15> 'longfelem':'limb [8]' lvalue Var 0x28b8a6f4580 'tmp' 'longfelem':'limb [8]'
|   | |-ImplicitCastExpr 0x28b8a6fd8a0 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x28b8a6fd888 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x28b8a6fd7e0 <col:20> 'felem':'limb [4]' lvalue Var 0x28b8a6fc8d8 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x28b8a6fd8d0 <col:26> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a6fd8b8 <col:26> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a6fd800 <col:26> 'felem':'limb [4]' lvalue Var 0x28b8a6fc950 'ftmp2' 'felem':'limb [4]'
|   |-CallExpr 0x28b8a6fd978 <line:1154:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x28b8a6fd960 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6fd8e8 <col:5> 'void (limb *, const limb *)' Function 0x28b8a6ed1e8 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a6fd9a8 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6fd908 <col:18> 'felem':'limb [4]' lvalue Var 0x28b8a6fc860 'alpha' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x28b8a6fd9d8 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a6fd9c0 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a6fd940 <col:25> 'longfelem':'limb [8]' lvalue Var 0x28b8a6f4580 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x28b8a6fda80 <line:1156:5, col:31> 'void'
|   | |-ImplicitCastExpr 0x28b8a6fda68 <col:5> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6fd9f0 <col:5> 'void (u64 *, const limb *)' Function 0x28b8a5fc378 'felem_shrink' 'void (u64 *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a6fdab0 <col:18> 'u64 *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6fda10 <col:18> 'smallfelem':'u64 [4]' lvalue Var 0x28b8a6fca90 'small2' 'smallfelem':'u64 [4]'
|   | `-ImplicitCastExpr 0x28b8a6fdae0 <col:26> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a6fdac8 <col:26> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a6fda48 <col:26> 'felem':'limb [4]' lvalue Var 0x28b8a6fc860 'alpha' 'felem':'limb [4]'
|   |-CallExpr 0x28b8a6fdb70 <line:1159:5, col:34> 'void'
|   | |-ImplicitCastExpr 0x28b8a6fdb58 <col:5> 'void (*)(limb *, const u64 *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6fdaf8 <col:5> 'void (limb *, const u64 *)' Function 0x28b8a600ab8 'smallfelem_square' 'void (limb *, const u64 *)'
|   | |-ImplicitCastExpr 0x28b8a6fdba0 <col:23> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6fdb18 <col:23> 'longfelem':'limb [8]' lvalue Var 0x28b8a6f4580 'tmp' 'longfelem':'limb [8]'
|   | `-ImplicitCastExpr 0x28b8a6fdbd0 <col:28> 'const u64 *':'const u64 *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a6fdbb8 <col:28> 'u64 *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a6fdb38 <col:28> 'smallfelem':'u64 [4]' lvalue Var 0x28b8a6fca90 'small2' 'smallfelem':'u64 [4]'
|   |-CallExpr 0x28b8a6fdc60 <line:1160:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x28b8a6fdc48 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6fdbe8 <col:5> 'void (limb *, const limb *)' Function 0x28b8a6ed1e8 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a6fdc90 <col:18> 'limb *':'limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x28b8a6fdc08 <col:18> 'limb *':'limb *' lvalue ParmVar 0x28b8a6f4030 'x_out' 'limb *':'limb *'
|   | `-ImplicitCastExpr 0x28b8a6fdcc0 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a6fdca8 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a6fdc28 <col:25> 'longfelem':'limb [8]' lvalue Var 0x28b8a6f4580 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x28b8a6fdd50 <line:1161:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x28b8a6fdd38 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6fdcd8 <col:5> 'void (limb *, const limb *)' Function 0x28b8a5f3218 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a6fdd80 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6fdcf8 <col:18> 'felem':'limb [4]' lvalue Var 0x28b8a6fc8d8 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x28b8a6fddb0 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a6fdd98 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a6fdd18 <col:24> 'felem':'limb [4]' lvalue Var 0x28b8a6fc7e8 'beta' 'felem':'limb [4]'
|   |-CallExpr 0x28b8a6fde48 <line:1162:5, col:25> 'void'
|   | |-ImplicitCastExpr 0x28b8a6fde30 <col:5> 'void (*)(limb *, const u64)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6fddc8 <col:5> 'void (limb *, const u64)' Function 0x28b8a5f4908 'felem_scalar' 'void (limb *, const u64)'
|   | |-ImplicitCastExpr 0x28b8a6fde78 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6fdde8 <col:18> 'felem':'limb [4]' lvalue Var 0x28b8a6fc8d8 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x28b8a6fde90 <col:24> 'u64':'unsigned long long' <IntegralCast>
|   |   `-IntegerLiteral 0x28b8a6fde08 <col:24> 'int' 8
|   |-CallExpr 0x28b8a6fdf20 <line:1164:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x28b8a6fdf08 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6fdea8 <col:5> 'void (limb *, const limb *)' Function 0x28b8a5f6fd0 'felem_diff' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a6fdf50 <col:16> 'limb *':'limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x28b8a6fdec8 <col:16> 'limb *':'limb *' lvalue ParmVar 0x28b8a6f4030 'x_out' 'limb *':'limb *'
|   | `-ImplicitCastExpr 0x28b8a6fdf80 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a6fdf68 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a6fdee8 <col:23> 'felem':'limb [4]' lvalue Var 0x28b8a6fc8d8 'ftmp' 'felem':'limb [4]'
|   |-CallExpr 0x28b8a6fe010 <line:1168:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x28b8a6fdff8 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6fdf98 <col:5> 'void (limb *, const limb *)' Function 0x28b8a5f3940 'felem_sum' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a6fe040 <col:15> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6fdfb8 <col:15> 'felem':'limb [4]' lvalue Var 0x28b8a6fc6f8 'delta' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x28b8a6fe070 <col:22> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a6fe058 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a6fdfd8 <col:22> 'felem':'limb [4]' lvalue Var 0x28b8a6fc770 'gamma' 'felem':'limb [4]'
|   |-CallExpr 0x28b8a6fe100 <line:1170:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x28b8a6fe0e8 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6fe088 <col:5> 'void (limb *, const limb *)' Function 0x28b8a5f3218 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a6fe130 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6fe0a8 <col:18> 'felem':'limb [4]' lvalue Var 0x28b8a6fc8d8 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x28b8a6fe148 <col:24> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x28b8a6fe0c8 <col:24> 'const limb *':'const limb *' lvalue ParmVar 0x28b8a6f4210 'y_in' 'const limb *':'const limb *'
|   |-CallExpr 0x28b8a6fe1d8 <line:1171:5, col:25> 'void'
|   | |-ImplicitCastExpr 0x28b8a6fe1c0 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6fe160 <col:5> 'void (limb *, const limb *)' Function 0x28b8a5f3940 'felem_sum' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a6fe208 <col:15> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6fe180 <col:15> 'felem':'limb [4]' lvalue Var 0x28b8a6fc8d8 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x28b8a6fe220 <col:21> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x28b8a6fe1a0 <col:21> 'const limb *':'const limb *' lvalue ParmVar 0x28b8a6f4288 'z_in' 'const limb *':'const limb *'
|   |-CallExpr 0x28b8a6fe2b0 <line:1173:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x28b8a6fe298 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6fe238 <col:5> 'void (limb *, const limb *)' Function 0x28b8a603cb8 'felem_square' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a6fe2e0 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6fe258 <col:18> 'longfelem':'limb [8]' lvalue Var 0x28b8a6f4580 'tmp' 'longfelem':'limb [8]'
|   | `-ImplicitCastExpr 0x28b8a6fe310 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a6fe2f8 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a6fe278 <col:23> 'felem':'limb [4]' lvalue Var 0x28b8a6fc8d8 'ftmp' 'felem':'limb [4]'
|   |-CallExpr 0x28b8a6fe3a0 <line:1174:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x28b8a6fe388 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6fe328 <col:5> 'void (limb *, const limb *)' Function 0x28b8a6ed1e8 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a6fe3d0 <col:18> 'limb *':'limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x28b8a6fe348 <col:18> 'limb *':'limb *' lvalue ParmVar 0x28b8a6f4120 'z_out' 'limb *':'limb *'
|   | `-ImplicitCastExpr 0x28b8a6fe400 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a6fe3e8 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a6fe368 <col:25> 'longfelem':'limb [8]' lvalue Var 0x28b8a6f4580 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x28b8a6fe490 <line:1175:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x28b8a6fe478 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6fe418 <col:5> 'void (limb *, const limb *)' Function 0x28b8a5f6fd0 'felem_diff' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a6fe4c0 <col:16> 'limb *':'limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x28b8a6fe438 <col:16> 'limb *':'limb *' lvalue ParmVar 0x28b8a6f4120 'z_out' 'limb *':'limb *'
|   | `-ImplicitCastExpr 0x28b8a6fe4f0 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a6fe4d8 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a6fe458 <col:23> 'felem':'limb [4]' lvalue Var 0x28b8a6fc6f8 'delta' 'felem':'limb [4]'
|   |-CallExpr 0x28b8a6fe588 <line:1179:5, col:25> 'void'
|   | |-ImplicitCastExpr 0x28b8a6fe570 <col:5> 'void (*)(limb *, const u64)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6fe508 <col:5> 'void (limb *, const u64)' Function 0x28b8a5f4908 'felem_scalar' 'void (limb *, const u64)'
|   | |-ImplicitCastExpr 0x28b8a6fe5b8 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6fe528 <col:18> 'felem':'limb [4]' lvalue Var 0x28b8a6fc7e8 'beta' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x28b8a6fe5d0 <col:24> 'u64':'unsigned long long' <IntegralCast>
|   |   `-IntegerLiteral 0x28b8a6fe548 <col:24> 'int' 4
|   |-CallExpr 0x28b8a7026a8 <line:1181:5, col:35> 'void'
|   | |-ImplicitCastExpr 0x28b8a702690 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6fe5e8 <col:5> 'void (limb *, const limb *)' Function 0x28b8a5f87a8 'felem_diff_zero107' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a7026d8 <col:24> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6fe608 <col:24> 'felem':'limb [4]' lvalue Var 0x28b8a6fc7e8 'beta' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x28b8a702708 <col:30> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a7026f0 <col:30> 'limb *':'limb *' <LValueToRValue>
|   |     `-DeclRefExpr 0x28b8a702670 <col:30> 'limb *':'limb *' lvalue ParmVar 0x28b8a6f4030 'x_out' 'limb *':'limb *'
|   |-CallExpr 0x28b8a7027b8 <line:1183:5, col:38> 'void'
|   | |-ImplicitCastExpr 0x28b8a7027a0 <col:5> 'void (*)(limb *, const u64 *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a702720 <col:5> 'void (limb *, const u64 *, const limb *)' Function 0x28b8a6f0698 'felem_small_mul' 'void (limb *, const u64 *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a7027f0 <col:21> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a702740 <col:21> 'longfelem':'limb [8]' lvalue Var 0x28b8a6f4580 'tmp' 'longfelem':'limb [8]'
|   | |-ImplicitCastExpr 0x28b8a702820 <col:26> 'const u64 *':'const u64 *' <NoOp>
|   | | `-ImplicitCastExpr 0x28b8a702808 <col:26> 'u64 *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x28b8a702760 <col:26> 'smallfelem':'u64 [4]' lvalue Var 0x28b8a6fca90 'small2' 'smallfelem':'u64 [4]'
|   | `-ImplicitCastExpr 0x28b8a702850 <col:34> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a702838 <col:34> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a702780 <col:34> 'felem':'limb [4]' lvalue Var 0x28b8a6fc7e8 'beta' 'felem':'limb [4]'
|   |-CallExpr 0x28b8a7028f8 <line:1185:5, col:35> 'void'
|   | |-ImplicitCastExpr 0x28b8a7028e0 <col:5> 'void (*)(limb *, const u64 *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a702868 <col:5> 'void (limb *, const u64 *)' Function 0x28b8a600ab8 'smallfelem_square' 'void (limb *, const u64 *)'
|   | |-ImplicitCastExpr 0x28b8a702928 <col:23> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a702888 <col:23> 'longfelem':'limb [8]' lvalue Var 0x28b8a6fc650 'tmp2' 'longfelem':'limb [8]'
|   | `-ImplicitCastExpr 0x28b8a702958 <col:29> 'const u64 *':'const u64 *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a702940 <col:29> 'u64 *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a7028c0 <col:29> 'smallfelem':'u64 [4]' lvalue Var 0x28b8a6fca18 'small1' 'smallfelem':'u64 [4]'
|   |-CallExpr 0x28b8a702a20 <line:1187:5, col:29> 'void'
|   | |-ImplicitCastExpr 0x28b8a702a08 <col:5> 'void (*)(limb *, const u64)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a702970 <col:5> 'void (limb *, const u64)' Function 0x28b8a5f4fc0 'longfelem_scalar' 'void (limb *, const u64)'
|   | |-ImplicitCastExpr 0x28b8a702a50 <col:22> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a702990 <col:22> 'longfelem':'limb [8]' lvalue Var 0x28b8a6fc650 'tmp2' 'longfelem':'limb [8]'
|   | `-ImplicitCastExpr 0x28b8a702a68 <col:28> 'u64':'unsigned long long' <IntegralCast>
|   |   `-IntegerLiteral 0x28b8a7029b0 <col:28> 'int' 8
|   |-CallExpr 0x28b8a702b20 <line:1189:5, col:29> 'void'
|   | |-ImplicitCastExpr 0x28b8a702b08 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a702a80 <col:5> 'void (limb *, const limb *)' Function 0x28b8a5f9568 'longfelem_diff' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a702b50 <col:20> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a702aa0 <col:20> 'longfelem':'limb [8]' lvalue Var 0x28b8a6f4580 'tmp' 'longfelem':'limb [8]'
|   | `-ImplicitCastExpr 0x28b8a702b80 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a702b68 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a702ac0 <col:25> 'longfelem':'limb [8]' lvalue Var 0x28b8a6fc650 'tmp2' 'longfelem':'limb [8]'
|   `-CallExpr 0x28b8a702c10 <line:1191:5, col:36> 'void'
|     |-ImplicitCastExpr 0x28b8a702bf8 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x28b8a702b98 <col:5> 'void (limb *, const limb *)' Function 0x28b8a6edd78 'felem_reduce_zero105' 'void (limb *, const limb *)'
|     |-ImplicitCastExpr 0x28b8a702c40 <col:26> 'limb *':'limb *' <LValueToRValue>
|     | `-DeclRefExpr 0x28b8a702bb8 <col:26> 'limb *':'limb *' lvalue ParmVar 0x28b8a6f40a8 'y_out' 'limb *':'limb *'
|     `-ImplicitCastExpr 0x28b8a702c70 <col:33> 'const limb *':'const limb *' <NoOp>
|       `-ImplicitCastExpr 0x28b8a702c58 <col:33> 'limb *' <ArrayToPointerDecay>
|         `-DeclRefExpr 0x28b8a702bd8 <col:33> 'longfelem':'limb [8]' lvalue Var 0x28b8a6f4580 'tmp' 'longfelem':'limb [8]'
|-FunctionDecl 0x28b8a703228 <line:1199:1, line:1215:1> line:1200:1 used point_double_small 'void (u64 *, u64 *, u64 *, const u64 *, const u64 *, const u64 *)' static
| |-ParmVarDecl 0x28b8a702dc8 <col:20, col:31> col:31 used x_out 'u64 *':'u64 *'
| |-ParmVarDecl 0x28b8a702e40 <col:38, col:49> col:49 used y_out 'u64 *':'u64 *'
| |-ParmVarDecl 0x28b8a702eb8 <col:56, col:67> col:67 used z_out 'u64 *':'u64 *'
| |-ParmVarDecl 0x28b8a702f30 <line:1201:20, col:37> col:37 used x_in 'const u64 *':'const u64 *'
| |-ParmVarDecl 0x28b8a702fa8 <col:43, col:60> col:60 used y_in 'const u64 *':'const u64 *'
| |-ParmVarDecl 0x28b8a703020 <line:1202:20, col:37> col:37 used z_in 'const u64 *':'const u64 *'
| `-CompoundStmt 0x28b8a703eb8 <line:1203:1, line:1215:1>
|   |-DeclStmt 0x28b8a703498 <line:1204:5, col:48>
|   | |-VarDecl 0x28b8a703320 <col:5, col:11> col:11 used felem_x_out 'felem':'limb [4]'
|   | |-VarDecl 0x28b8a703398 <col:5, col:24> col:24 used felem_y_out 'felem':'limb [4]'
|   | `-VarDecl 0x28b8a703410 <col:5, col:37> col:37 used felem_z_out 'felem':'limb [4]'
|   |-DeclStmt 0x28b8a703638 <line:1205:5, col:45>
|   | |-VarDecl 0x28b8a7034c0 <col:5, col:11> col:11 used felem_x_in 'felem':'limb [4]'
|   | |-VarDecl 0x28b8a703538 <col:5, col:23> col:23 used felem_y_in 'felem':'limb [4]'
|   | `-VarDecl 0x28b8a7035b0 <col:5, col:35> col:35 used felem_z_in 'felem':'limb [4]'
|   |-CallExpr 0x28b8a7036e0 <line:1207:5, col:39> 'void'
|   | |-ImplicitCastExpr 0x28b8a7036c8 <col:5> 'void (*)(limb *, const u64 *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a703650 <col:5> 'void (limb *, const u64 *)' Function 0x28b8a6002f0 'smallfelem_expand' 'void (limb *, const u64 *)'
|   | |-ImplicitCastExpr 0x28b8a703710 <col:23> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a703670 <col:23> 'felem':'limb [4]' lvalue Var 0x28b8a7034c0 'felem_x_in' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x28b8a703728 <col:35> 'const u64 *':'const u64 *' <LValueToRValue>
|   |   `-DeclRefExpr 0x28b8a7036a8 <col:35> 'const u64 *':'const u64 *' lvalue ParmVar 0x28b8a702f30 'x_in' 'const u64 *':'const u64 *'
|   |-CallExpr 0x28b8a7037d0 <line:1208:5, col:39> 'void'
|   | |-ImplicitCastExpr 0x28b8a7037b8 <col:5> 'void (*)(limb *, const u64 *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a703740 <col:5> 'void (limb *, const u64 *)' Function 0x28b8a6002f0 'smallfelem_expand' 'void (limb *, const u64 *)'
|   | |-ImplicitCastExpr 0x28b8a703800 <col:23> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a703760 <col:23> 'felem':'limb [4]' lvalue Var 0x28b8a703538 'felem_y_in' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x28b8a703818 <col:35> 'const u64 *':'const u64 *' <LValueToRValue>
|   |   `-DeclRefExpr 0x28b8a703798 <col:35> 'const u64 *':'const u64 *' lvalue ParmVar 0x28b8a702fa8 'y_in' 'const u64 *':'const u64 *'
|   |-CallExpr 0x28b8a7038c0 <line:1209:5, col:39> 'void'
|   | |-ImplicitCastExpr 0x28b8a7038a8 <col:5> 'void (*)(limb *, const u64 *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a703830 <col:5> 'void (limb *, const u64 *)' Function 0x28b8a6002f0 'smallfelem_expand' 'void (limb *, const u64 *)'
|   | |-ImplicitCastExpr 0x28b8a7038f0 <col:23> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a703850 <col:23> 'felem':'limb [4]' lvalue Var 0x28b8a7035b0 'felem_z_in' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x28b8a703908 <col:35> 'const u64 *':'const u64 *' <LValueToRValue>
|   |   `-DeclRefExpr 0x28b8a703888 <col:35> 'const u64 *':'const u64 *' lvalue ParmVar 0x28b8a703020 'z_in' 'const u64 *':'const u64 *'
|   |-CallExpr 0x28b8a703ac0 <line:1210:5, line:1211:52> 'void'
|   | |-ImplicitCastExpr 0x28b8a703aa8 <line:1210:5> 'void (*)(limb *, limb *, limb *, const limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a703920 <col:5> 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *)' Function 0x28b8a6f4488 'point_double' 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a703b10 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a703940 <col:18> 'felem':'limb [4]' lvalue Var 0x28b8a703320 'felem_x_out' 'felem':'limb [4]'
|   | |-ImplicitCastExpr 0x28b8a703b28 <col:31> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a703978 <col:31> 'felem':'limb [4]' lvalue Var 0x28b8a703398 'felem_y_out' 'felem':'limb [4]'
|   | |-ImplicitCastExpr 0x28b8a703b40 <col:44> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a7039b0 <col:44> 'felem':'limb [4]' lvalue Var 0x28b8a703410 'felem_z_out' 'felem':'limb [4]'
|   | |-ImplicitCastExpr 0x28b8a703b70 <line:1211:18> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x28b8a703b58 <col:18> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x28b8a7039e8 <col:18> 'felem':'limb [4]' lvalue Var 0x28b8a7034c0 'felem_x_in' 'felem':'limb [4]'
|   | |-ImplicitCastExpr 0x28b8a703ba0 <col:30> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x28b8a703b88 <col:30> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x28b8a703a08 <col:30> 'felem':'limb [4]' lvalue Var 0x28b8a703538 'felem_y_in' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x28b8a703bd0 <col:42> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a703bb8 <col:42> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a703a28 <col:42> 'felem':'limb [4]' lvalue Var 0x28b8a7035b0 'felem_z_in' 'felem':'limb [4]'
|   |-CallExpr 0x28b8a703c60 <line:1212:5, col:36> 'void'
|   | |-ImplicitCastExpr 0x28b8a703c48 <col:5> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a703be8 <col:5> 'void (u64 *, const limb *)' Function 0x28b8a5fc378 'felem_shrink' 'void (u64 *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a703c90 <col:18> 'u64 *':'u64 *' <LValueToRValue>
|   | | `-DeclRefExpr 0x28b8a703c08 <col:18> 'u64 *':'u64 *' lvalue ParmVar 0x28b8a702dc8 'x_out' 'u64 *':'u64 *'
|   | `-ImplicitCastExpr 0x28b8a703cc0 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a703ca8 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a703c28 <col:25> 'felem':'limb [4]' lvalue Var 0x28b8a703320 'felem_x_out' 'felem':'limb [4]'
|   |-CallExpr 0x28b8a703d50 <line:1213:5, col:36> 'void'
|   | |-ImplicitCastExpr 0x28b8a703d38 <col:5> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a703cd8 <col:5> 'void (u64 *, const limb *)' Function 0x28b8a5fc378 'felem_shrink' 'void (u64 *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a703d80 <col:18> 'u64 *':'u64 *' <LValueToRValue>
|   | | `-DeclRefExpr 0x28b8a703cf8 <col:18> 'u64 *':'u64 *' lvalue ParmVar 0x28b8a702e40 'y_out' 'u64 *':'u64 *'
|   | `-ImplicitCastExpr 0x28b8a703db0 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a703d98 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a703d18 <col:25> 'felem':'limb [4]' lvalue Var 0x28b8a703398 'felem_y_out' 'felem':'limb [4]'
|   `-CallExpr 0x28b8a703e40 <line:1214:5, col:36> 'void'
|     |-ImplicitCastExpr 0x28b8a703e28 <col:5> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x28b8a703dc8 <col:5> 'void (u64 *, const limb *)' Function 0x28b8a5fc378 'felem_shrink' 'void (u64 *, const limb *)'
|     |-ImplicitCastExpr 0x28b8a703e70 <col:18> 'u64 *':'u64 *' <LValueToRValue>
|     | `-DeclRefExpr 0x28b8a703de8 <col:18> 'u64 *':'u64 *' lvalue ParmVar 0x28b8a702eb8 'z_out' 'u64 *':'u64 *'
|     `-ImplicitCastExpr 0x28b8a703ea0 <col:25> 'const limb *':'const limb *' <NoOp>
|       `-ImplicitCastExpr 0x28b8a703e88 <col:25> 'limb *' <ArrayToPointerDecay>
|         `-DeclRefExpr 0x28b8a703e08 <col:25> 'felem':'limb [4]' lvalue Var 0x28b8a703410 'felem_z_out' 'felem':'limb [4]'
|-FunctionDecl 0x28b8a704178 <line:1218:1, line:1225:1> line:1218:13 used copy_conditional 'void (limb *, const limb *, limb)' static
| |-ParmVarDecl 0x28b8a703f20 <col:30, col:36> col:36 used out 'limb *':'limb *'
| |-ParmVarDecl 0x28b8a703f98 <col:41, col:53> col:53 used in 'const limb *':'const limb *'
| |-ParmVarDecl 0x28b8a704010 <col:57, col:62> col:62 used mask 'limb':'int'
| `-CompoundStmt 0x28b8a6fe850 <line:1219:1, line:1225:1>
|   |-DeclStmt 0x28b8a7042c8 <line:1220:5, col:15>
|   | `-VarDecl 0x28b8a704260 <col:5, col:14> col:14 used i 'unsigned int'
|   `-ForStmt 0x28b8a6fe818 <line:1221:5, line:1224:5>
|     |-BinaryOperator 0x28b8a704358 <line:1221:10, col:14> 'unsigned int' '='
|     | |-DeclRefExpr 0x28b8a7042e0 <col:10> 'unsigned int' lvalue Var 0x28b8a704260 'i' 'unsigned int'
|     | `-ImplicitCastExpr 0x28b8a704340 <col:14> 'unsigned int' <IntegralCast>
|     |   `-IntegerLiteral 0x28b8a704318 <col:14> 'int' 0
|     |-<<<NULL>>>
|     |-BinaryOperator 0x28b8a7043f0 <col:17, line:113:17> 'int' '<'
|     | |-ImplicitCastExpr 0x28b8a7043c0 <line:1221:17> 'unsigned int' <LValueToRValue>
|     | | `-DeclRefExpr 0x28b8a704378 <col:17> 'unsigned int' lvalue Var 0x28b8a704260 'i' 'unsigned int'
|     | `-ImplicitCastExpr 0x28b8a7043d8 <line:113:17> 'unsigned int' <IntegralCast>
|     |   `-IntegerLiteral 0x28b8a704398 <col:17> 'int' 4
|     |-UnaryOperator 0x28b8a704430 <line:1221:29, col:31> 'unsigned int' prefix '++'
|     | `-DeclRefExpr 0x28b8a704410 <col:31> 'unsigned int' lvalue Var 0x28b8a704260 'i' 'unsigned int'
|     `-CompoundStmt 0x28b8a6fe7f8 <col:34, line:1224:5>
|       |-DeclStmt 0x28b8a6fe688 <line:1222:9, col:49>
|       | `-VarDecl 0x28b8a704458 <col:9, col:48> col:20 used tmp 'const limb':'const int' cinit
|       |   `-BinaryOperator 0x28b8a6fe668 <col:26, col:48> 'int' '&'
|       |     |-ImplicitCastExpr 0x28b8a6fe650 <col:26> 'limb':'int' <LValueToRValue>
|       |     | `-DeclRefExpr 0x28b8a7044c0 <col:26> 'limb':'int' lvalue ParmVar 0x28b8a704010 'mask' 'limb':'int'
|       |     `-ParenExpr 0x28b8a704650 <col:33, col:48> 'int'
|       |       `-BinaryOperator 0x28b8a704630 <col:34, col:47> 'int' '^'
|       |         |-ImplicitCastExpr 0x28b8a704600 <col:34, col:38> 'limb':'int' <LValueToRValue>
|       |         | `-ArraySubscriptExpr 0x28b8a704550 <col:34, col:38> 'const limb':'const int' lvalue
|       |         |   |-ImplicitCastExpr 0x28b8a704520 <col:34> 'const limb *':'const limb *' <LValueToRValue>
|       |         |   | `-DeclRefExpr 0x28b8a7044e0 <col:34> 'const limb *':'const limb *' lvalue ParmVar 0x28b8a703f98 'in' 'const limb *':'const limb *'
|       |         |   `-ImplicitCastExpr 0x28b8a704538 <col:37> 'unsigned int' <LValueToRValue>
|       |         |     `-DeclRefExpr 0x28b8a704500 <col:37> 'unsigned int' lvalue Var 0x28b8a704260 'i' 'unsigned int'
|       |         `-ImplicitCastExpr 0x28b8a704618 <col:42, col:47> 'limb':'int' <LValueToRValue>
|       |           `-ArraySubscriptExpr 0x28b8a7045e0 <col:42, col:47> 'limb':'int' lvalue
|       |             |-ImplicitCastExpr 0x28b8a7045b0 <col:42> 'limb *':'limb *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x28b8a704570 <col:42> 'limb *':'limb *' lvalue ParmVar 0x28b8a703f20 'out' 'limb *':'limb *'
|       |             `-ImplicitCastExpr 0x28b8a7045c8 <col:46> 'unsigned int' <LValueToRValue>
|       |               `-DeclRefExpr 0x28b8a704590 <col:46> 'unsigned int' lvalue Var 0x28b8a704260 'i' 'unsigned int'
|       `-CompoundAssignOperator 0x28b8a6fe780 <line:1223:9, col:19> 'limb':'int' '^=' ComputeLHSTy='int' ComputeResultTy='int'
|         |-ArraySubscriptExpr 0x28b8a6fe710 <col:9, col:14> 'limb':'int' lvalue
|         | |-ImplicitCastExpr 0x28b8a6fe6e0 <col:9> 'limb *':'limb *' <LValueToRValue>
|         | | `-DeclRefExpr 0x28b8a6fe6a0 <col:9> 'limb *':'limb *' lvalue ParmVar 0x28b8a703f20 'out' 'limb *':'limb *'
|         | `-ImplicitCastExpr 0x28b8a6fe6f8 <col:13> 'unsigned int' <LValueToRValue>
|         |   `-DeclRefExpr 0x28b8a6fe6c0 <col:13> 'unsigned int' lvalue Var 0x28b8a704260 'i' 'unsigned int'
|         `-ImplicitCastExpr 0x28b8a6fe768 <col:19> 'limb':'int' <LValueToRValue>
|           `-DeclRefExpr 0x28b8a6fe730 <col:19> 'const limb':'const int' lvalue Var 0x28b8a704458 'tmp' 'const limb':'const int'
|-FunctionDecl 0x28b8a6fead8 <line:1228:1, line:1235:1> line:1228:13 used copy_small_conditional 'void (limb *, const u64 *, limb)' static
| |-ParmVarDecl 0x28b8a6fe880 <col:36, col:42> col:42 used out 'limb *':'limb *'
| |-ParmVarDecl 0x28b8a6fe8f8 <col:47, col:64> col:64 used in 'const u64 *':'const u64 *'
| |-ParmVarDecl 0x28b8a6fe970 <col:68, col:73> col:73 used mask 'limb':'int'
| `-CompoundStmt 0x28b8a6ff2d8 <line:1229:1, line:1235:1>
|   |-DeclStmt 0x28b8a6fec28 <line:1230:5, col:15>
|   | `-VarDecl 0x28b8a6febc0 <col:5, col:14> col:14 used i 'unsigned int'
|   |-DeclStmt 0x28b8a6fed08 <line:1231:5, col:28>
|   | `-VarDecl 0x28b8a6fec50 <col:5, col:24> col:15 used mask64 'const u64':'const unsigned long long' cinit
|   |   `-ImplicitCastExpr 0x28b8a6fecf0 <col:24> 'u64':'unsigned long long' <IntegralCast>
|   |     `-ImplicitCastExpr 0x28b8a6fecd8 <col:24> 'limb':'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x28b8a6fecb8 <col:24> 'limb':'int' lvalue ParmVar 0x28b8a6fe970 'mask' 'limb':'int'
|   `-ForStmt 0x28b8a6ff2a0 <line:1232:5, line:1234:5>
|     |-BinaryOperator 0x28b8a6fed98 <line:1232:10, col:14> 'unsigned int' '='
|     | |-DeclRefExpr 0x28b8a6fed20 <col:10> 'unsigned int' lvalue Var 0x28b8a6febc0 'i' 'unsigned int'
|     | `-ImplicitCastExpr 0x28b8a6fed80 <col:14> 'unsigned int' <IntegralCast>
|     |   `-IntegerLiteral 0x28b8a6fed58 <col:14> 'int' 0
|     |-<<<NULL>>>
|     |-BinaryOperator 0x28b8a6fee30 <col:17, line:113:17> 'int' '<'
|     | |-ImplicitCastExpr 0x28b8a6fee00 <line:1232:17> 'unsigned int' <LValueToRValue>
|     | | `-DeclRefExpr 0x28b8a6fedb8 <col:17> 'unsigned int' lvalue Var 0x28b8a6febc0 'i' 'unsigned int'
|     | `-ImplicitCastExpr 0x28b8a6fee18 <line:113:17> 'unsigned int' <IntegralCast>
|     |   `-IntegerLiteral 0x28b8a6fedd8 <col:17> 'int' 4
|     |-UnaryOperator 0x28b8a6fee70 <line:1232:29, col:31> 'unsigned int' prefix '++'
|     | `-DeclRefExpr 0x28b8a6fee50 <col:31> 'unsigned int' lvalue Var 0x28b8a6febc0 'i' 'unsigned int'
|     `-CompoundStmt 0x28b8a6ff288 <col:34, line:1234:5>
|       `-BinaryOperator 0x28b8a6ff220 <line:1233:9, col:61> 'limb':'int' '='
|         |-ArraySubscriptExpr 0x28b8a6feef8 <col:9, col:14> 'limb':'int' lvalue
|         | |-ImplicitCastExpr 0x28b8a6feec8 <col:9> 'limb *':'limb *' <LValueToRValue>
|         | | `-DeclRefExpr 0x28b8a6fee88 <col:9> 'limb *':'limb *' lvalue ParmVar 0x28b8a6fe880 'out' 'limb *':'limb *'
|         | `-ImplicitCastExpr 0x28b8a6feee0 <col:13> 'unsigned int' <LValueToRValue>
|         |   `-DeclRefExpr 0x28b8a6feea8 <col:13> 'unsigned int' lvalue Var 0x28b8a6febc0 'i' 'unsigned int'
|         `-BinaryOperator 0x28b8a6ff200 <col:18, col:61> 'int' '|'
|           |-ParenExpr 0x28b8a6ff0a8 <col:18, col:42> 'limb':'int'
|           | `-CStyleCastExpr 0x28b8a6ff080 <col:19, col:41> 'limb':'int' <IntegralCast>
|           |   `-ParenExpr 0x28b8a6ff060 <col:26, col:41> 'unsigned long long'
|           |     `-BinaryOperator 0x28b8a6ff010 <col:27, col:35> 'unsigned long long' '&'
|           |       |-ImplicitCastExpr 0x28b8a6fefe0 <col:27, col:31> 'u64':'unsigned long long' <LValueToRValue>
|           |       | `-ArraySubscriptExpr 0x28b8a6fef88 <col:27, col:31> 'const u64':'const unsigned long long' lvalue
|           |       |   |-ImplicitCastExpr 0x28b8a6fef58 <col:27> 'const u64 *':'const u64 *' <LValueToRValue>
|           |       |   | `-DeclRefExpr 0x28b8a6fef18 <col:27> 'const u64 *':'const u64 *' lvalue ParmVar 0x28b8a6fe8f8 'in' 'const u64 *':'const u64 *'
|           |       |   `-ImplicitCastExpr 0x28b8a6fef70 <col:30> 'unsigned int' <LValueToRValue>
|           |       |     `-DeclRefExpr 0x28b8a6fef38 <col:30> 'unsigned int' lvalue Var 0x28b8a6febc0 'i' 'unsigned int'
|           |       `-ImplicitCastExpr 0x28b8a6feff8 <col:35> 'u64':'unsigned long long' <LValueToRValue>
|           |         `-DeclRefExpr 0x28b8a6fefa8 <col:35> 'const u64':'const unsigned long long' lvalue Var 0x28b8a6fec50 'mask64' 'const u64':'const unsigned long long'
|           `-ParenExpr 0x28b8a6ff1e0 <col:46, col:61> 'int'
|             `-BinaryOperator 0x28b8a6ff1c0 <col:47, col:57> 'int' '&'
|               |-ImplicitCastExpr 0x28b8a6ff1a8 <col:47, col:52> 'limb':'int' <LValueToRValue>
|               | `-ArraySubscriptExpr 0x28b8a6ff138 <col:47, col:52> 'limb':'int' lvalue
|               |   |-ImplicitCastExpr 0x28b8a6ff108 <col:47> 'limb *':'limb *' <LValueToRValue>
|               |   | `-DeclRefExpr 0x28b8a6ff0c8 <col:47> 'limb *':'limb *' lvalue ParmVar 0x28b8a6fe880 'out' 'limb *':'limb *'
|               |   `-ImplicitCastExpr 0x28b8a6ff120 <col:51> 'unsigned int' <LValueToRValue>
|               |     `-DeclRefExpr 0x28b8a6ff0e8 <col:51> 'unsigned int' lvalue Var 0x28b8a6febc0 'i' 'unsigned int'
|               `-UnaryOperator 0x28b8a6ff190 <col:56, col:57> 'limb':'int' prefix '~' cannot overflow
|                 `-ImplicitCastExpr 0x28b8a6ff178 <col:57> 'limb':'int' <LValueToRValue>
|                   `-DeclRefExpr 0x28b8a6ff158 <col:57> 'limb':'int' lvalue ParmVar 0x28b8a6fe970 'mask' 'limb':'int'
|-FunctionDecl 0x28b8a6ffa18 <line:1249:1, line:1408:1> line:1249:13 used point_add 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const u64 *, const u64 *, const u64 *)' static
| |-ParmVarDecl 0x28b8a6ff310 <col:23, col:29> col:29 used x3 'limb *':'limb *'
| |-ParmVarDecl 0x28b8a6ff388 <col:33, col:39> col:39 used y3 'limb *':'limb *'
| |-ParmVarDecl 0x28b8a6ff400 <col:43, col:49> col:49 used z3 'limb *':'limb *'
| |-ParmVarDecl 0x28b8a6ff478 <line:1250:23, col:35> col:35 used x1 'const limb *':'const limb *'
| |-ParmVarDecl 0x28b8a6ff4f0 <col:39, col:51> col:51 used y1 'const limb *':'const limb *'
| |-ParmVarDecl 0x28b8a6ff568 <col:55, col:67> col:67 used z1 'const limb *':'const limb *'
| |-ParmVarDecl 0x28b8a6ff5e8 <line:1251:23, col:33> col:33 used mixed 'const int'
| |-ParmVarDecl 0x28b8a6ff660 <col:40, col:57> col:57 used x2 'const u64 *':'const u64 *'
| |-ParmVarDecl 0x28b8a6ff6d8 <line:1252:23, col:40> col:40 used y2 'const u64 *':'const u64 *'
| |-ParmVarDecl 0x28b8a6ff750 <col:44, col:61> col:61 used z2 'const u64 *':'const u64 *'
| `-CompoundStmt 0x28b8a6f71e0 <line:1253:1, line:1408:1>
|   |-DeclStmt 0x28b8a6fffa8 <line:1254:5, col:71>
|   | |-VarDecl 0x28b8a6ffb30 <col:5, col:11> col:11 used ftmp 'felem':'limb [4]'
|   | |-VarDecl 0x28b8a6ffba8 <col:5, col:17> col:17 used ftmp2 'felem':'limb [4]'
|   | |-VarDecl 0x28b8a6ffc20 <col:5, col:24> col:24 used ftmp3 'felem':'limb [4]'
|   | |-VarDecl 0x28b8a6ffc98 <col:5, col:31> col:31 used ftmp4 'felem':'limb [4]'
|   | |-VarDecl 0x28b8a6ffd10 <col:5, col:38> col:38 used ftmp5 'felem':'limb [4]'
|   | |-VarDecl 0x28b8a6ffd88 <col:5, col:45> col:45 used ftmp6 'felem':'limb [4]'
|   | |-VarDecl 0x28b8a6ffe00 <col:5, col:52> col:52 used x_out 'felem':'limb [4]'
|   | |-VarDecl 0x28b8a6ffe78 <col:5, col:59> col:59 used y_out 'felem':'limb [4]'
|   | `-VarDecl 0x28b8a6ffef0 <col:5, col:66> col:66 used z_out 'felem':'limb [4]'
|   |-DeclStmt 0x28b8a7000c8 <line:1255:5, col:24>
|   | |-VarDecl 0x28b8a6fffd0 <col:5, col:15> col:15 used tmp 'longfelem':'limb [8]'
|   | `-VarDecl 0x28b8a700048 <col:5, col:20> col:20 used tmp2 'longfelem':'limb [8]'
|   |-DeclStmt 0x28b8a700368 <line:1256:5, col:54>
|   | |-VarDecl 0x28b8a7000f0 <col:5, col:16> col:16 used small1 'smallfelem':'u64 [4]'
|   | |-VarDecl 0x28b8a700168 <col:5, col:24> col:24 used small2 'smallfelem':'u64 [4]'
|   | |-VarDecl 0x28b8a7001e0 <col:5, col:32> col:32 used small3 'smallfelem':'u64 [4]'
|   | |-VarDecl 0x28b8a700258 <col:5, col:40> col:40 used small4 'smallfelem':'u64 [4]'
|   | `-VarDecl 0x28b8a7002d0 <col:5, col:48> col:48 used small5 'smallfelem':'u64 [4]'
|   |-DeclStmt 0x28b8a700588 <line:1257:5, col:50>
|   | |-VarDecl 0x28b8a700390 <col:5, col:10> col:10 used x_equal 'limb':'int'
|   | |-VarDecl 0x28b8a700408 <col:5, col:19> col:19 used y_equal 'limb':'int'
|   | |-VarDecl 0x28b8a700480 <col:5, col:28> col:28 used z1_is_zero 'limb':'int'
|   | `-VarDecl 0x28b8a7004f8 <col:5, col:40> col:40 used z2_is_zero 'limb':'int'
|   |-CallExpr 0x28b8a6f4600 <line:1259:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x28b8a700618 <col:5> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a7005a0 <col:5> 'void (u64 *, const limb *)' Function 0x28b8a5fc378 'felem_shrink' 'void (u64 *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a6f4630 <col:18> 'u64 *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a7005c0 <col:18> 'smallfelem':'u64 [4]' lvalue Var 0x28b8a7001e0 'small3' 'smallfelem':'u64 [4]'
|   | `-ImplicitCastExpr 0x28b8a6f4648 <col:26> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x28b8a7005f8 <col:26> 'const limb *':'const limb *' lvalue ParmVar 0x28b8a6ff568 'z1' 'const limb *':'const limb *'
|   |-BinaryOperator 0x28b8a6f4748 <line:1261:5, col:43> 'limb':'int' '='
|   | |-DeclRefExpr 0x28b8a6f4660 <col:5> 'limb':'int' lvalue Var 0x28b8a700480 'z1_is_zero' 'limb':'int'
|   | `-CallExpr 0x28b8a6f46f0 <col:18, col:43> 'limb':'int'
|   |   |-ImplicitCastExpr 0x28b8a6f46d8 <col:18> 'limb (*)(const u64 *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x28b8a6f4698 <col:18> 'limb (const u64 *)' Function 0x28b8a6ebf58 'smallfelem_is_zero' 'limb (const u64 *)'
|   |   `-ImplicitCastExpr 0x28b8a6f4730 <col:37> 'const u64 *':'const u64 *' <NoOp>
|   |     `-ImplicitCastExpr 0x28b8a6f4718 <col:37> 'u64 *' <ArrayToPointerDecay>
|   |       `-DeclRefExpr 0x28b8a6f46b8 <col:37> 'smallfelem':'u64 [4]' lvalue Var 0x28b8a7001e0 'small3' 'smallfelem':'u64 [4]'
|   |-BinaryOperator 0x28b8a6f4838 <line:1262:5, col:39> 'limb':'int' '='
|   | |-DeclRefExpr 0x28b8a6f4768 <col:5> 'limb':'int' lvalue Var 0x28b8a7004f8 'z2_is_zero' 'limb':'int'
|   | `-CallExpr 0x28b8a6f47f8 <col:18, col:39> 'limb':'int'
|   |   |-ImplicitCastExpr 0x28b8a6f47e0 <col:18> 'limb (*)(const u64 *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x28b8a6f47a0 <col:18> 'limb (const u64 *)' Function 0x28b8a6ebf58 'smallfelem_is_zero' 'limb (const u64 *)'
|   |   `-ImplicitCastExpr 0x28b8a6f4820 <col:37> 'const u64 *':'const u64 *' <LValueToRValue>
|   |     `-DeclRefExpr 0x28b8a6f47c0 <col:37> 'const u64 *':'const u64 *' lvalue ParmVar 0x28b8a6ff750 'z2' 'const u64 *':'const u64 *'
|   |-CallExpr 0x28b8a6f48e8 <line:1265:5, col:34> 'void'
|   | |-ImplicitCastExpr 0x28b8a6f48d0 <col:5> 'void (*)(limb *, const u64 *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6f4858 <col:5> 'void (limb *, const u64 *)' Function 0x28b8a600ab8 'smallfelem_square' 'void (limb *, const u64 *)'
|   | |-ImplicitCastExpr 0x28b8a6f4918 <col:23> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6f4878 <col:23> 'longfelem':'limb [8]' lvalue Var 0x28b8a6fffd0 'tmp' 'longfelem':'limb [8]'
|   | `-ImplicitCastExpr 0x28b8a6f4948 <col:28> 'const u64 *':'const u64 *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a6f4930 <col:28> 'u64 *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a6f48b0 <col:28> 'smallfelem':'u64 [4]' lvalue Var 0x28b8a7001e0 'small3' 'smallfelem':'u64 [4]'
|   |-CallExpr 0x28b8a6f49f0 <line:1266:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x28b8a6f49d8 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6f4960 <col:5> 'void (limb *, const limb *)' Function 0x28b8a6ed1e8 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a6f4a20 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6f4980 <col:18> 'felem':'limb [4]' lvalue Var 0x28b8a6ffb30 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x28b8a6f4a50 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a6f4a38 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a6f49b8 <col:24> 'longfelem':'limb [8]' lvalue Var 0x28b8a6fffd0 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x28b8a6f4af8 <line:1268:5, col:30> 'void'
|   | |-ImplicitCastExpr 0x28b8a6f4ae0 <col:5> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6f4a68 <col:5> 'void (u64 *, const limb *)' Function 0x28b8a5fc378 'felem_shrink' 'void (u64 *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a6f4b28 <col:18> 'u64 *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6f4a88 <col:18> 'smallfelem':'u64 [4]' lvalue Var 0x28b8a7000f0 'small1' 'smallfelem':'u64 [4]'
|   | `-ImplicitCastExpr 0x28b8a6f4b58 <col:26> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a6f4b40 <col:26> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a6f4ac0 <col:26> 'felem':'limb [4]' lvalue Var 0x28b8a6ffb30 'ftmp' 'felem':'limb [4]'
|   |-IfStmt 0x28b8a6f5ff0 <line:1270:5, line:1323:5> has_else
|   | |-UnaryOperator 0x28b8a6f4ba8 <line:1270:9, col:10> 'int' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x28b8a6f4b90 <col:10> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x28b8a6f4b70 <col:10> 'const int' lvalue ParmVar 0x28b8a6ff5e8 'mixed' 'const int'
|   | |-CompoundStmt 0x28b8a6f5bc8 <col:17, line:1306:5>
|   | | |-CallExpr 0x28b8a6f4c38 <line:1272:9, col:34> 'void'
|   | | | |-ImplicitCastExpr 0x28b8a6f4c20 <col:9> 'void (*)(limb *, const u64 *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x28b8a6f4bc0 <col:9> 'void (limb *, const u64 *)' Function 0x28b8a600ab8 'smallfelem_square' 'void (limb *, const u64 *)'
|   | | | |-ImplicitCastExpr 0x28b8a6f4c68 <col:27> 'limb *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x28b8a6f4be0 <col:27> 'longfelem':'limb [8]' lvalue Var 0x28b8a6fffd0 'tmp' 'longfelem':'limb [8]'
|   | | | `-ImplicitCastExpr 0x28b8a6f4c80 <col:32> 'const u64 *':'const u64 *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x28b8a6f4c00 <col:32> 'const u64 *':'const u64 *' lvalue ParmVar 0x28b8a6ff750 'z2' 'const u64 *':'const u64 *'
|   | | |-CallExpr 0x28b8a6f4d28 <line:1273:9, col:32> 'void'
|   | | | |-ImplicitCastExpr 0x28b8a6f4d10 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x28b8a6f4c98 <col:9> 'void (limb *, const limb *)' Function 0x28b8a6ed1e8 'felem_reduce' 'void (limb *, const limb *)'
|   | | | |-ImplicitCastExpr 0x28b8a6f4d58 <col:22> 'limb *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x28b8a6f4cb8 <col:22> 'felem':'limb [4]' lvalue Var 0x28b8a6ffba8 'ftmp2' 'felem':'limb [4]'
|   | | | `-ImplicitCastExpr 0x28b8a6f4d88 <col:29> 'const limb *':'const limb *' <NoOp>
|   | | |   `-ImplicitCastExpr 0x28b8a6f4d70 <col:29> 'limb *' <ArrayToPointerDecay>
|   | | |     `-DeclRefExpr 0x28b8a6f4cf0 <col:29> 'longfelem':'limb [8]' lvalue Var 0x28b8a6fffd0 'tmp' 'longfelem':'limb [8]'
|   | | |-CallExpr 0x28b8a6f4e30 <line:1275:9, col:35> 'void'
|   | | | |-ImplicitCastExpr 0x28b8a6f4e18 <col:9> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x28b8a6f4da0 <col:9> 'void (u64 *, const limb *)' Function 0x28b8a5fc378 'felem_shrink' 'void (u64 *, const limb *)'
|   | | | |-ImplicitCastExpr 0x28b8a6f4e60 <col:22> 'u64 *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x28b8a6f4dc0 <col:22> 'smallfelem':'u64 [4]' lvalue Var 0x28b8a700168 'small2' 'smallfelem':'u64 [4]'
|   | | | `-ImplicitCastExpr 0x28b8a6f4e90 <col:30> 'const limb *':'const limb *' <NoOp>
|   | | |   `-ImplicitCastExpr 0x28b8a6f4e78 <col:30> 'limb *' <ArrayToPointerDecay>
|   | | |     `-DeclRefExpr 0x28b8a6f4df8 <col:30> 'felem':'limb [4]' lvalue Var 0x28b8a6ffba8 'ftmp2' 'felem':'limb [4]'
|   | | |-CallExpr 0x28b8a6f4f38 <line:1277:9, col:32> 'void'
|   | | | |-ImplicitCastExpr 0x28b8a6f4f20 <col:9> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x28b8a6f4ea8 <col:9> 'void (u64 *, const limb *)' Function 0x28b8a5fc378 'felem_shrink' 'void (u64 *, const limb *)'
|   | | | |-ImplicitCastExpr 0x28b8a6f4f68 <col:22> 'u64 *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x28b8a6f4ec8 <col:22> 'smallfelem':'u64 [4]' lvalue Var 0x28b8a7002d0 'small5' 'smallfelem':'u64 [4]'
|   | | | `-ImplicitCastExpr 0x28b8a6f4f80 <col:30> 'const limb *':'const limb *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x28b8a6f4f00 <col:30> 'const limb *':'const limb *' lvalue ParmVar 0x28b8a6ff478 'x1' 'const limb *':'const limb *'
|   | | |-CallExpr 0x28b8a6f5030 <line:1280:9, col:43> 'void'
|   | | | |-ImplicitCastExpr 0x28b8a6f5018 <col:9> 'void (*)(limb *, const u64 *, const u64 *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x28b8a6f4f98 <col:9> 'void (limb *, const u64 *, const u64 *)' Function 0x28b8a604388 'smallfelem_mul' 'void (limb *, const u64 *, const u64 *)'
|   | | | |-ImplicitCastExpr 0x28b8a6f5068 <col:24> 'limb *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x28b8a6f4fb8 <col:24> 'longfelem':'limb [8]' lvalue Var 0x28b8a6fffd0 'tmp' 'longfelem':'limb [8]'
|   | | | |-ImplicitCastExpr 0x28b8a6f5098 <col:29> 'const u64 *':'const u64 *' <NoOp>
|   | | | | `-ImplicitCastExpr 0x28b8a6f5080 <col:29> 'u64 *' <ArrayToPointerDecay>
|   | | | |   `-DeclRefExpr 0x28b8a6f4fd8 <col:29> 'smallfelem':'u64 [4]' lvalue Var 0x28b8a7002d0 'small5' 'smallfelem':'u64 [4]'
|   | | | `-ImplicitCastExpr 0x28b8a6f50c8 <col:37> 'const u64 *':'const u64 *' <NoOp>
|   | | |   `-ImplicitCastExpr 0x28b8a6f50b0 <col:37> 'u64 *' <ArrayToPointerDecay>
|   | | |     `-DeclRefExpr 0x28b8a6f4ff8 <col:37> 'smallfelem':'u64 [4]' lvalue Var 0x28b8a700168 'small2' 'smallfelem':'u64 [4]'
|   | | |-CallExpr 0x28b8a6f5170 <line:1281:9, col:32> 'void'
|   | | | |-ImplicitCastExpr 0x28b8a6f5158 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x28b8a6f50e0 <col:9> 'void (limb *, const limb *)' Function 0x28b8a6ed1e8 'felem_reduce' 'void (limb *, const limb *)'
|   | | | |-ImplicitCastExpr 0x28b8a6f51a0 <col:22> 'limb *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x28b8a6f5100 <col:22> 'felem':'limb [4]' lvalue Var 0x28b8a6ffc20 'ftmp3' 'felem':'limb [4]'
|   | | | `-ImplicitCastExpr 0x28b8a6f51d0 <col:29> 'const limb *':'const limb *' <NoOp>
|   | | |   `-ImplicitCastExpr 0x28b8a6f51b8 <col:29> 'limb *' <ArrayToPointerDecay>
|   | | |     `-DeclRefExpr 0x28b8a6f5138 <col:29> 'longfelem':'limb [8]' lvalue Var 0x28b8a6fffd0 'tmp' 'longfelem':'limb [8]'
|   | | |-CallExpr 0x28b8a6f5278 <line:1285:9, col:31> 'void'
|   | | | |-ImplicitCastExpr 0x28b8a6f5260 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x28b8a6f51e8 <col:9> 'void (limb *, const limb *)' Function 0x28b8a5f3218 'felem_assign' 'void (limb *, const limb *)'
|   | | | |-ImplicitCastExpr 0x28b8a6f52a8 <col:22> 'limb *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x28b8a6f5208 <col:22> 'felem':'limb [4]' lvalue Var 0x28b8a6ffd10 'ftmp5' 'felem':'limb [4]'
|   | | | `-ImplicitCastExpr 0x28b8a6f52c0 <col:29> 'const limb *':'const limb *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x28b8a6f5240 <col:29> 'const limb *':'const limb *' lvalue ParmVar 0x28b8a6ff568 'z1' 'const limb *':'const limb *'
|   | | |-CallExpr 0x28b8a6f5350 <line:1286:9, col:34> 'void'
|   | | | |-ImplicitCastExpr 0x28b8a6f5338 <col:9> 'void (*)(limb *, const u64 *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x28b8a6f52d8 <col:9> 'void (limb *, const u64 *)' Function 0x28b8a5f4128 'felem_small_sum' 'void (limb *, const u64 *)'
|   | | | |-ImplicitCastExpr 0x28b8a6f5380 <col:25> 'limb *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x28b8a6f52f8 <col:25> 'felem':'limb [4]' lvalue Var 0x28b8a6ffd10 'ftmp5' 'felem':'limb [4]'
|   | | | `-ImplicitCastExpr 0x28b8a6f5398 <col:32> 'const u64 *':'const u64 *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x28b8a6f5318 <col:32> 'const u64 *':'const u64 *' lvalue ParmVar 0x28b8a6ff750 'z2' 'const u64 *':'const u64 *'
|   | | |-CallExpr 0x28b8a6f5428 <line:1290:9, col:32> 'void'
|   | | | |-ImplicitCastExpr 0x28b8a6f5410 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x28b8a6f53b0 <col:9> 'void (limb *, const limb *)' Function 0x28b8a603cb8 'felem_square' 'void (limb *, const limb *)'
|   | | | |-ImplicitCastExpr 0x28b8a6f5458 <col:22> 'limb *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x28b8a6f53d0 <col:22> 'longfelem':'limb [8]' lvalue Var 0x28b8a6fffd0 'tmp' 'longfelem':'limb [8]'
|   | | | `-ImplicitCastExpr 0x28b8a6f5488 <col:27> 'const limb *':'const limb *' <NoOp>
|   | | |   `-ImplicitCastExpr 0x28b8a6f5470 <col:27> 'limb *' <ArrayToPointerDecay>
|   | | |     `-DeclRefExpr 0x28b8a6f53f0 <col:27> 'felem':'limb [4]' lvalue Var 0x28b8a6ffd10 'ftmp5' 'felem':'limb [4]'
|   | | |-CallExpr 0x28b8a6f5518 <line:1291:9, col:32> 'void'
|   | | | |-ImplicitCastExpr 0x28b8a6f5500 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x28b8a6f54a0 <col:9> 'void (limb *, const limb *)' Function 0x28b8a6ed1e8 'felem_reduce' 'void (limb *, const limb *)'
|   | | | |-ImplicitCastExpr 0x28b8a6f5548 <col:22> 'limb *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x28b8a6f54c0 <col:22> 'felem':'limb [4]' lvalue Var 0x28b8a6ffd10 'ftmp5' 'felem':'limb [4]'
|   | | | `-ImplicitCastExpr 0x28b8a6f5578 <col:29> 'const limb *':'const limb *' <NoOp>
|   | | |   `-ImplicitCastExpr 0x28b8a6f5560 <col:29> 'limb *' <ArrayToPointerDecay>
|   | | |     `-DeclRefExpr 0x28b8a6f54e0 <col:29> 'longfelem':'limb [8]' lvalue Var 0x28b8a6fffd0 'tmp' 'longfelem':'limb [8]'
|   | | |-CallExpr 0x28b8a6f5608 <line:1293:9, col:30> 'void'
|   | | | |-ImplicitCastExpr 0x28b8a6f55f0 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x28b8a6f5590 <col:9> 'void (limb *, const limb *)' Function 0x28b8a5f3940 'felem_sum' 'void (limb *, const limb *)'
|   | | | |-ImplicitCastExpr 0x28b8a6f5638 <col:19> 'limb *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x28b8a6f55b0 <col:19> 'felem':'limb [4]' lvalue Var 0x28b8a6ffba8 'ftmp2' 'felem':'limb [4]'
|   | | | `-ImplicitCastExpr 0x28b8a6f5668 <col:26> 'const limb *':'const limb *' <NoOp>
|   | | |   `-ImplicitCastExpr 0x28b8a6f5650 <col:26> 'limb *' <ArrayToPointerDecay>
|   | | |     `-DeclRefExpr 0x28b8a6f55d0 <col:26> 'felem':'limb [4]' lvalue Var 0x28b8a6ffb30 'ftmp' 'felem':'limb [4]'
|   | | |-CallExpr 0x28b8a6f56f8 <line:1295:9, col:32> 'void'
|   | | | |-ImplicitCastExpr 0x28b8a6f56e0 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x28b8a6f5680 <col:9> 'void (limb *, const limb *)' Function 0x28b8a5f6fd0 'felem_diff' 'void (limb *, const limb *)'
|   | | | |-ImplicitCastExpr 0x28b8a6f5728 <col:20> 'limb *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x28b8a6f56a0 <col:20> 'felem':'limb [4]' lvalue Var 0x28b8a6ffd10 'ftmp5' 'felem':'limb [4]'
|   | | | `-ImplicitCastExpr 0x28b8a6f5758 <col:27> 'const limb *':'const limb *' <NoOp>
|   | | |   `-ImplicitCastExpr 0x28b8a6f5740 <col:27> 'limb *' <ArrayToPointerDecay>
|   | | |     `-DeclRefExpr 0x28b8a6f56c0 <col:27> 'felem':'limb [4]' lvalue Var 0x28b8a6ffba8 'ftmp2' 'felem':'limb [4]'
|   | | |-CallExpr 0x28b8a6f5808 <line:1299:9, col:39> 'void'
|   | | | |-ImplicitCastExpr 0x28b8a6f57f0 <col:9> 'void (*)(limb *, const u64 *, const u64 *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x28b8a6f5770 <col:9> 'void (limb *, const u64 *, const u64 *)' Function 0x28b8a604388 'smallfelem_mul' 'void (limb *, const u64 *, const u64 *)'
|   | | | |-ImplicitCastExpr 0x28b8a6f5840 <col:24> 'limb *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x28b8a6f5790 <col:24> 'longfelem':'limb [8]' lvalue Var 0x28b8a6fffd0 'tmp' 'longfelem':'limb [8]'
|   | | | |-ImplicitCastExpr 0x28b8a6f5870 <col:29> 'const u64 *':'const u64 *' <NoOp>
|   | | | | `-ImplicitCastExpr 0x28b8a6f5858 <col:29> 'u64 *' <ArrayToPointerDecay>
|   | | | |   `-DeclRefExpr 0x28b8a6f57b0 <col:29> 'smallfelem':'u64 [4]' lvalue Var 0x28b8a700168 'small2' 'smallfelem':'u64 [4]'
|   | | | `-ImplicitCastExpr 0x28b8a6f5888 <col:37> 'const u64 *':'const u64 *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x28b8a6f57d0 <col:37> 'const u64 *':'const u64 *' lvalue ParmVar 0x28b8a6ff750 'z2' 'const u64 *':'const u64 *'
|   | | |-CallExpr 0x28b8a6f5918 <line:1300:9, col:32> 'void'
|   | | | |-ImplicitCastExpr 0x28b8a6f5900 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x28b8a6f58a0 <col:9> 'void (limb *, const limb *)' Function 0x28b8a6ed1e8 'felem_reduce' 'void (limb *, const limb *)'
|   | | | |-ImplicitCastExpr 0x28b8a6f5948 <col:22> 'limb *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x28b8a6f58c0 <col:22> 'felem':'limb [4]' lvalue Var 0x28b8a6ffba8 'ftmp2' 'felem':'limb [4]'
|   | | | `-ImplicitCastExpr 0x28b8a6f5978 <col:29> 'const limb *':'const limb *' <NoOp>
|   | | |   `-ImplicitCastExpr 0x28b8a6f5960 <col:29> 'limb *' <ArrayToPointerDecay>
|   | | |     `-DeclRefExpr 0x28b8a6f58e0 <col:29> 'longfelem':'limb [8]' lvalue Var 0x28b8a6fffd0 'tmp' 'longfelem':'limb [8]'
|   | | |-CallExpr 0x28b8a6f5a28 <line:1303:9, col:33> 'void'
|   | | | |-ImplicitCastExpr 0x28b8a6f5a10 <col:9> 'void (*)(limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x28b8a6f5990 <col:9> 'void (limb *, const limb *, const limb *)' Function 0x28b8a6088c8 'felem_mul' 'void (limb *, const limb *, const limb *)'
|   | | | |-ImplicitCastExpr 0x28b8a6f5a60 <col:19> 'limb *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x28b8a6f59b0 <col:19> 'longfelem':'limb [8]' lvalue Var 0x28b8a6fffd0 'tmp' 'longfelem':'limb [8]'
|   | | | |-ImplicitCastExpr 0x28b8a6f5a78 <col:24> 'const limb *':'const limb *' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x28b8a6f59d0 <col:24> 'const limb *':'const limb *' lvalue ParmVar 0x28b8a6ff4f0 'y1' 'const limb *':'const limb *'
|   | | | `-ImplicitCastExpr 0x28b8a6f5aa8 <col:28> 'const limb *':'const limb *' <NoOp>
|   | | |   `-ImplicitCastExpr 0x28b8a6f5a90 <col:28> 'limb *' <ArrayToPointerDecay>
|   | | |     `-DeclRefExpr 0x28b8a6f59f0 <col:28> 'felem':'limb [4]' lvalue Var 0x28b8a6ffba8 'ftmp2' 'felem':'limb [4]'
|   | | `-CallExpr 0x28b8a6f5b50 <line:1304:9, col:32> 'void'
|   | |   |-ImplicitCastExpr 0x28b8a6f5b38 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x28b8a6f5ac0 <col:9> 'void (limb *, const limb *)' Function 0x28b8a6ed1e8 'felem_reduce' 'void (limb *, const limb *)'
|   | |   |-ImplicitCastExpr 0x28b8a6f5b80 <col:22> 'limb *' <ArrayToPointerDecay>
|   | |   | `-DeclRefExpr 0x28b8a6f5ae0 <col:22> 'felem':'limb [4]' lvalue Var 0x28b8a6ffd88 'ftmp6' 'felem':'limb [4]'
|   | |   `-ImplicitCastExpr 0x28b8a6f5bb0 <col:29> 'const limb *':'const limb *' <NoOp>
|   | |     `-ImplicitCastExpr 0x28b8a6f5b98 <col:29> 'limb *' <ArrayToPointerDecay>
|   | |       `-DeclRefExpr 0x28b8a6f5b18 <col:29> 'longfelem':'limb [8]' lvalue Var 0x28b8a6fffd0 'tmp' 'longfelem':'limb [8]'
|   | `-CompoundStmt 0x28b8a6f5fc0 <line:1306:12, line:1323:5>
|   |   |-CallExpr 0x28b8a6f5cd0 <line:1312:9, col:31> 'void'
|   |   | |-ImplicitCastExpr 0x28b8a6f5cb8 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x28b8a6f5c58 <col:9> 'void (limb *, const limb *)' Function 0x28b8a5f3218 'felem_assign' 'void (limb *, const limb *)'
|   |   | |-ImplicitCastExpr 0x28b8a6f5d00 <col:22> 'limb *' <ArrayToPointerDecay>
|   |   | | `-DeclRefExpr 0x28b8a6f5c78 <col:22> 'felem':'limb [4]' lvalue Var 0x28b8a6ffc20 'ftmp3' 'felem':'limb [4]'
|   |   | `-ImplicitCastExpr 0x28b8a6f5d18 <col:29> 'const limb *':'const limb *' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x28b8a6f5c98 <col:29> 'const limb *':'const limb *' lvalue ParmVar 0x28b8a6ff478 'x1' 'const limb *':'const limb *'
|   |   |-CallExpr 0x28b8a6f5da8 <line:1316:9, col:31> 'void'
|   |   | |-ImplicitCastExpr 0x28b8a6f5d90 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x28b8a6f5d30 <col:9> 'void (limb *, const limb *)' Function 0x28b8a5f3218 'felem_assign' 'void (limb *, const limb *)'
|   |   | |-ImplicitCastExpr 0x28b8a6f5dd8 <col:22> 'limb *' <ArrayToPointerDecay>
|   |   | | `-DeclRefExpr 0x28b8a6f5d50 <col:22> 'felem':'limb [4]' lvalue Var 0x28b8a6ffd10 'ftmp5' 'felem':'limb [4]'
|   |   | `-ImplicitCastExpr 0x28b8a6f5df0 <col:29> 'const limb *':'const limb *' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x28b8a6f5d70 <col:29> 'const limb *':'const limb *' lvalue ParmVar 0x28b8a6ff568 'z1' 'const limb *':'const limb *'
|   |   |-CallExpr 0x28b8a6f5e88 <line:1317:9, col:30> 'void'
|   |   | |-ImplicitCastExpr 0x28b8a6f5e70 <col:9> 'void (*)(limb *, const u64)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x28b8a6f5e08 <col:9> 'void (limb *, const u64)' Function 0x28b8a5f4908 'felem_scalar' 'void (limb *, const u64)'
|   |   | |-ImplicitCastExpr 0x28b8a6f5eb8 <col:22> 'limb *' <ArrayToPointerDecay>
|   |   | | `-DeclRefExpr 0x28b8a6f5e28 <col:22> 'felem':'limb [4]' lvalue Var 0x28b8a6ffd10 'ftmp5' 'felem':'limb [4]'
|   |   | `-ImplicitCastExpr 0x28b8a6f5ed0 <col:29> 'u64':'unsigned long long' <IntegralCast>
|   |   |   `-IntegerLiteral 0x28b8a6f5e48 <col:29> 'int' 2
|   |   `-CallExpr 0x28b8a6f5f60 <line:1321:9, col:31> 'void'
|   |     |-ImplicitCastExpr 0x28b8a6f5f48 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x28b8a6f5ee8 <col:9> 'void (limb *, const limb *)' Function 0x28b8a5f3218 'felem_assign' 'void (limb *, const limb *)'
|   |     |-ImplicitCastExpr 0x28b8a6f5f90 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x28b8a6f5f08 <col:22> 'felem':'limb [4]' lvalue Var 0x28b8a6ffd88 'ftmp6' 'felem':'limb [4]'
|   |     `-ImplicitCastExpr 0x28b8a6f5fa8 <col:29> 'const limb *':'const limb *' <LValueToRValue>
|   |       `-DeclRefExpr 0x28b8a6f5f28 <col:29> 'const limb *':'const limb *' lvalue ParmVar 0x28b8a6ff4f0 'y1' 'const limb *':'const limb *'
|   |-CallExpr 0x28b8a6f60b0 <line:1326:5, col:35> 'void'
|   | |-ImplicitCastExpr 0x28b8a6f6098 <col:5> 'void (*)(limb *, const u64 *, const u64 *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6f6018 <col:5> 'void (limb *, const u64 *, const u64 *)' Function 0x28b8a604388 'smallfelem_mul' 'void (limb *, const u64 *, const u64 *)'
|   | |-ImplicitCastExpr 0x28b8a6f60e8 <col:20> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6f6038 <col:20> 'longfelem':'limb [8]' lvalue Var 0x28b8a6fffd0 'tmp' 'longfelem':'limb [8]'
|   | |-ImplicitCastExpr 0x28b8a6f6100 <col:25> 'const u64 *':'const u64 *' <LValueToRValue>
|   | | `-DeclRefExpr 0x28b8a6f6058 <col:25> 'const u64 *':'const u64 *' lvalue ParmVar 0x28b8a6ff660 'x2' 'const u64 *':'const u64 *'
|   | `-ImplicitCastExpr 0x28b8a6f6130 <col:29> 'const u64 *':'const u64 *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a6f6118 <col:29> 'u64 *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a6f6078 <col:29> 'smallfelem':'u64 [4]' lvalue Var 0x28b8a7000f0 'small1' 'smallfelem':'u64 [4]'
|   |-CallExpr 0x28b8a6f61d8 <line:1327:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x28b8a6f61c0 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6f6148 <col:5> 'void (limb *, const limb *)' Function 0x28b8a6ed1e8 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a6f6208 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6f6168 <col:18> 'felem':'limb [4]' lvalue Var 0x28b8a6ffc98 'ftmp4' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x28b8a6f6238 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a6f6220 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a6f61a0 <col:25> 'longfelem':'limb [8]' lvalue Var 0x28b8a6fffd0 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x28b8a6f62c8 <line:1330:5, col:36> 'void'
|   | |-ImplicitCastExpr 0x28b8a6f62b0 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6f6250 <col:5> 'void (limb *, const limb *)' Function 0x28b8a5f87a8 'felem_diff_zero107' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a6f62f8 <col:24> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6f6270 <col:24> 'felem':'limb [4]' lvalue Var 0x28b8a6ffc98 'ftmp4' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x28b8a6f6328 <col:31> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a6f6310 <col:31> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a6f6290 <col:31> 'felem':'limb [4]' lvalue Var 0x28b8a6ffc20 'ftmp3' 'felem':'limb [4]'
|   |-CallExpr 0x28b8a6f63d0 <line:1332:5, col:31> 'void'
|   | |-ImplicitCastExpr 0x28b8a6f63b8 <col:5> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6f6340 <col:5> 'void (u64 *, const limb *)' Function 0x28b8a5fc378 'felem_shrink' 'void (u64 *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a6f6400 <col:18> 'u64 *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6f6360 <col:18> 'smallfelem':'u64 [4]' lvalue Var 0x28b8a700258 'small4' 'smallfelem':'u64 [4]'
|   | `-ImplicitCastExpr 0x28b8a6f6430 <col:26> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a6f6418 <col:26> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a6f6398 <col:26> 'felem':'limb [4]' lvalue Var 0x28b8a6ffc98 'ftmp4' 'felem':'limb [4]'
|   |-BinaryOperator 0x28b8a6f6530 <line:1334:5, col:40> 'limb':'int' '='
|   | |-DeclRefExpr 0x28b8a6f6448 <col:5> 'limb':'int' lvalue Var 0x28b8a700390 'x_equal' 'limb':'int'
|   | `-CallExpr 0x28b8a6f64d8 <col:15, col:40> 'limb':'int'
|   |   |-ImplicitCastExpr 0x28b8a6f64c0 <col:15> 'limb (*)(const u64 *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x28b8a6f6480 <col:15> 'limb (const u64 *)' Function 0x28b8a6ebf58 'smallfelem_is_zero' 'limb (const u64 *)'
|   |   `-ImplicitCastExpr 0x28b8a6f6518 <col:34> 'const u64 *':'const u64 *' <NoOp>
|   |     `-ImplicitCastExpr 0x28b8a6f6500 <col:34> 'u64 *' <ArrayToPointerDecay>
|   |       `-DeclRefExpr 0x28b8a6f64a0 <col:34> 'smallfelem':'u64 [4]' lvalue Var 0x28b8a700258 'small4' 'smallfelem':'u64 [4]'
|   |-CallExpr 0x28b8a704680 <line:1337:5, col:39> 'void'
|   | |-ImplicitCastExpr 0x28b8a6f65d0 <col:5> 'void (*)(limb *, const u64 *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6f6550 <col:5> 'void (limb *, const u64 *, const limb *)' Function 0x28b8a6f0698 'felem_small_mul' 'void (limb *, const u64 *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a7046b8 <col:21> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6f6570 <col:21> 'longfelem':'limb [8]' lvalue Var 0x28b8a6fffd0 'tmp' 'longfelem':'limb [8]'
|   | |-ImplicitCastExpr 0x28b8a7046e8 <col:26> 'const u64 *':'const u64 *' <NoOp>
|   | | `-ImplicitCastExpr 0x28b8a7046d0 <col:26> 'u64 *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x28b8a6f6590 <col:26> 'smallfelem':'u64 [4]' lvalue Var 0x28b8a700258 'small4' 'smallfelem':'u64 [4]'
|   | `-ImplicitCastExpr 0x28b8a704718 <col:34> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a704700 <col:34> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a6f65b0 <col:34> 'felem':'limb [4]' lvalue Var 0x28b8a6ffd10 'ftmp5' 'felem':'limb [4]'
|   |-CallExpr 0x28b8a7047c0 <line:1338:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x28b8a7047a8 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a704730 <col:5> 'void (limb *, const limb *)' Function 0x28b8a6ed1e8 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a7047f0 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a704750 <col:18> 'felem':'limb [4]' lvalue Var 0x28b8a6ffef0 'z_out' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x28b8a704820 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a704808 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a704788 <col:25> 'longfelem':'limb [8]' lvalue Var 0x28b8a6fffd0 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x28b8a7048d0 <line:1342:5, col:39> 'void'
|   | |-ImplicitCastExpr 0x28b8a7048b8 <col:5> 'void (*)(limb *, const u64 *, const u64 *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a704838 <col:5> 'void (limb *, const u64 *, const u64 *)' Function 0x28b8a604388 'smallfelem_mul' 'void (limb *, const u64 *, const u64 *)'
|   | |-ImplicitCastExpr 0x28b8a704908 <col:20> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a704858 <col:20> 'longfelem':'limb [8]' lvalue Var 0x28b8a6fffd0 'tmp' 'longfelem':'limb [8]'
|   | |-ImplicitCastExpr 0x28b8a704938 <col:25> 'const u64 *':'const u64 *' <NoOp>
|   | | `-ImplicitCastExpr 0x28b8a704920 <col:25> 'u64 *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x28b8a704878 <col:25> 'smallfelem':'u64 [4]' lvalue Var 0x28b8a7000f0 'small1' 'smallfelem':'u64 [4]'
|   | `-ImplicitCastExpr 0x28b8a704968 <col:33> 'const u64 *':'const u64 *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a704950 <col:33> 'u64 *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a704898 <col:33> 'smallfelem':'u64 [4]' lvalue Var 0x28b8a7001e0 'small3' 'smallfelem':'u64 [4]'
|   |-CallExpr 0x28b8a7049f8 <line:1343:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x28b8a7049e0 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a704980 <col:5> 'void (limb *, const limb *)' Function 0x28b8a6ed1e8 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a704a28 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a7049a0 <col:18> 'felem':'limb [4]' lvalue Var 0x28b8a6ffb30 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x28b8a704a58 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a704a40 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a7049c0 <col:24> 'longfelem':'limb [8]' lvalue Var 0x28b8a6fffd0 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x28b8a704b08 <line:1346:5, col:34> 'void'
|   | |-ImplicitCastExpr 0x28b8a704af0 <col:5> 'void (*)(limb *, const u64 *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a704a70 <col:5> 'void (limb *, const u64 *, const limb *)' Function 0x28b8a6f0698 'felem_small_mul' 'void (limb *, const u64 *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a704b40 <col:21> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a704a90 <col:21> 'longfelem':'limb [8]' lvalue Var 0x28b8a6fffd0 'tmp' 'longfelem':'limb [8]'
|   | |-ImplicitCastExpr 0x28b8a704b58 <col:26> 'const u64 *':'const u64 *' <LValueToRValue>
|   | | `-DeclRefExpr 0x28b8a704ab0 <col:26> 'const u64 *':'const u64 *' lvalue ParmVar 0x28b8a6ff6d8 'y2' 'const u64 *':'const u64 *'
|   | `-ImplicitCastExpr 0x28b8a704b88 <col:30> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a704b70 <col:30> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a704ad0 <col:30> 'felem':'limb [4]' lvalue Var 0x28b8a6ffb30 'ftmp' 'felem':'limb [4]'
|   |-CallExpr 0x28b8a704c18 <line:1347:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x28b8a704c00 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a704ba0 <col:5> 'void (limb *, const limb *)' Function 0x28b8a6ed1e8 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a704c48 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a704bc0 <col:18> 'felem':'limb [4]' lvalue Var 0x28b8a6ffd10 'ftmp5' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x28b8a704c78 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a704c60 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a704be0 <col:25> 'longfelem':'limb [8]' lvalue Var 0x28b8a6fffd0 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x28b8a704d08 <line:1350:5, col:36> 'void'
|   | |-ImplicitCastExpr 0x28b8a704cf0 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a704c90 <col:5> 'void (limb *, const limb *)' Function 0x28b8a5f87a8 'felem_diff_zero107' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a704d38 <col:24> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a704cb0 <col:24> 'felem':'limb [4]' lvalue Var 0x28b8a6ffd10 'ftmp5' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x28b8a704d68 <col:31> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a704d50 <col:31> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a704cd0 <col:31> 'felem':'limb [4]' lvalue Var 0x28b8a6ffd88 'ftmp6' 'felem':'limb [4]'
|   |-CallExpr 0x28b8a704e00 <line:1352:5, col:26> 'void'
|   | |-ImplicitCastExpr 0x28b8a704de8 <col:5> 'void (*)(limb *, const u64)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a704d80 <col:5> 'void (limb *, const u64)' Function 0x28b8a5f4908 'felem_scalar' 'void (limb *, const u64)'
|   | |-ImplicitCastExpr 0x28b8a704e30 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a704da0 <col:18> 'felem':'limb [4]' lvalue Var 0x28b8a6ffd10 'ftmp5' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x28b8a704e48 <col:25> 'u64':'unsigned long long' <IntegralCast>
|   |   `-IntegerLiteral 0x28b8a704dc0 <col:25> 'int' 2
|   |-CallExpr 0x28b8a704ed8 <line:1354:5, col:31> 'void'
|   | |-ImplicitCastExpr 0x28b8a704ec0 <col:5> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a704e60 <col:5> 'void (u64 *, const limb *)' Function 0x28b8a5fc378 'felem_shrink' 'void (u64 *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a704f08 <col:18> 'u64 *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a704e80 <col:18> 'smallfelem':'u64 [4]' lvalue Var 0x28b8a7000f0 'small1' 'smallfelem':'u64 [4]'
|   | `-ImplicitCastExpr 0x28b8a704f38 <col:26> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a704f20 <col:26> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a704ea0 <col:26> 'felem':'limb [4]' lvalue Var 0x28b8a6ffd10 'ftmp5' 'felem':'limb [4]'
|   |-BinaryOperator 0x28b8a705038 <line:1355:5, col:40> 'limb':'int' '='
|   | |-DeclRefExpr 0x28b8a704f50 <col:5> 'limb':'int' lvalue Var 0x28b8a700408 'y_equal' 'limb':'int'
|   | `-CallExpr 0x28b8a704fe0 <col:15, col:40> 'limb':'int'
|   |   |-ImplicitCastExpr 0x28b8a704fc8 <col:15> 'limb (*)(const u64 *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x28b8a704f88 <col:15> 'limb (const u64 *)' Function 0x28b8a6ebf58 'smallfelem_is_zero' 'limb (const u64 *)'
|   |   `-ImplicitCastExpr 0x28b8a705020 <col:34> 'const u64 *':'const u64 *' <NoOp>
|   |     `-ImplicitCastExpr 0x28b8a705008 <col:34> 'u64 *' <ArrayToPointerDecay>
|   |       `-DeclRefExpr 0x28b8a704fa8 <col:34> 'smallfelem':'u64 [4]' lvalue Var 0x28b8a7000f0 'small1' 'smallfelem':'u64 [4]'
|   |-IfStmt 0x28b8a7053d0 <line:1357:5, line:1360:5>
|   | |-BinaryOperator 0x28b8a7051a8 <line:1357:9, col:47> 'int' '&&'
|   | | |-BinaryOperator 0x28b8a705138 <col:9, col:32> 'int' '&&'
|   | | | |-BinaryOperator 0x28b8a7050c8 <col:9, col:20> 'int' '&&'
|   | | | | |-ImplicitCastExpr 0x28b8a705098 <col:9> 'limb':'int' <LValueToRValue>
|   | | | | | `-DeclRefExpr 0x28b8a705058 <col:9> 'limb':'int' lvalue Var 0x28b8a700390 'x_equal' 'limb':'int'
|   | | | | `-ImplicitCastExpr 0x28b8a7050b0 <col:20> 'limb':'int' <LValueToRValue>
|   | | | |   `-DeclRefExpr 0x28b8a705078 <col:20> 'limb':'int' lvalue Var 0x28b8a700408 'y_equal' 'limb':'int'
|   | | | `-UnaryOperator 0x28b8a705120 <col:31, col:32> 'int' prefix '!' cannot overflow
|   | | |   `-ImplicitCastExpr 0x28b8a705108 <col:32> 'limb':'int' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x28b8a7050e8 <col:32> 'limb':'int' lvalue Var 0x28b8a700480 'z1_is_zero' 'limb':'int'
|   | | `-UnaryOperator 0x28b8a705190 <col:46, col:47> 'int' prefix '!' cannot overflow
|   | |   `-ImplicitCastExpr 0x28b8a705178 <col:47> 'limb':'int' <LValueToRValue>
|   | |     `-DeclRefExpr 0x28b8a705158 <col:47> 'limb':'int' lvalue Var 0x28b8a7004f8 'z2_is_zero' 'limb':'int'
|   | `-CompoundStmt 0x28b8a7053b0 <col:59, line:1360:5>
|   |   |-CallExpr 0x28b8a7052c0 <line:1358:9, col:44> 'void'
|   |   | |-ImplicitCastExpr 0x28b8a7052a8 <col:9> 'void (*)(limb *, limb *, limb *, const limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x28b8a7051c8 <col:9> 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *)' Function 0x28b8a6f4488 'point_double' 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *)'
|   |   | |-ImplicitCastExpr 0x28b8a705310 <col:22> 'limb *':'limb *' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x28b8a7051e8 <col:22> 'limb *':'limb *' lvalue ParmVar 0x28b8a6ff310 'x3' 'limb *':'limb *'
|   |   | |-ImplicitCastExpr 0x28b8a705328 <col:26> 'limb *':'limb *' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x28b8a705208 <col:26> 'limb *':'limb *' lvalue ParmVar 0x28b8a6ff388 'y3' 'limb *':'limb *'
|   |   | |-ImplicitCastExpr 0x28b8a705340 <col:30> 'limb *':'limb *' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x28b8a705228 <col:30> 'limb *':'limb *' lvalue ParmVar 0x28b8a6ff400 'z3' 'limb *':'limb *'
|   |   | |-ImplicitCastExpr 0x28b8a705358 <col:34> 'const limb *':'const limb *' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x28b8a705248 <col:34> 'const limb *':'const limb *' lvalue ParmVar 0x28b8a6ff478 'x1' 'const limb *':'const limb *'
|   |   | |-ImplicitCastExpr 0x28b8a705370 <col:38> 'const limb *':'const limb *' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x28b8a705268 <col:38> 'const limb *':'const limb *' lvalue ParmVar 0x28b8a6ff4f0 'y1' 'const limb *':'const limb *'
|   |   | `-ImplicitCastExpr 0x28b8a705388 <col:42> 'const limb *':'const limb *' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x28b8a705288 <col:42> 'const limb *':'const limb *' lvalue ParmVar 0x28b8a6ff568 'z1' 'const limb *':'const limb *'
|   |   `-ReturnStmt 0x28b8a7053a0 <line:1359:9>
|   |-CallExpr 0x28b8a705460 <line:1363:5, col:29> 'void'
|   | |-ImplicitCastExpr 0x28b8a705448 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a7053e8 <col:5> 'void (limb *, const limb *)' Function 0x28b8a5f3218 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a705490 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a705408 <col:18> 'felem':'limb [4]' lvalue Var 0x28b8a6ffb30 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x28b8a7054c0 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a7054a8 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a705428 <col:24> 'felem':'limb [4]' lvalue Var 0x28b8a6ffc98 'ftmp4' 'felem':'limb [4]'
|   |-CallExpr 0x28b8a705558 <line:1364:5, col:25> 'void'
|   | |-ImplicitCastExpr 0x28b8a705540 <col:5> 'void (*)(limb *, const u64)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a7054d8 <col:5> 'void (limb *, const u64)' Function 0x28b8a5f4908 'felem_scalar' 'void (limb *, const u64)'
|   | |-ImplicitCastExpr 0x28b8a705588 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a7054f8 <col:18> 'felem':'limb [4]' lvalue Var 0x28b8a6ffb30 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x28b8a7055a0 <col:24> 'u64':'unsigned long long' <IntegralCast>
|   |   `-IntegerLiteral 0x28b8a705518 <col:24> 'int' 2
|   |-CallExpr 0x28b8a705630 <line:1366:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x28b8a705618 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a7055b8 <col:5> 'void (limb *, const limb *)' Function 0x28b8a603cb8 'felem_square' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a705660 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a7055d8 <col:18> 'longfelem':'limb [8]' lvalue Var 0x28b8a6fffd0 'tmp' 'longfelem':'limb [8]'
|   | `-ImplicitCastExpr 0x28b8a705690 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a705678 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a7055f8 <col:23> 'felem':'limb [4]' lvalue Var 0x28b8a6ffb30 'ftmp' 'felem':'limb [4]'
|   |-CallExpr 0x28b8a705720 <line:1367:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x28b8a705708 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a7056a8 <col:5> 'void (limb *, const limb *)' Function 0x28b8a6ed1e8 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a705750 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a7056c8 <col:18> 'felem':'limb [4]' lvalue Var 0x28b8a6ffb30 'ftmp' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x28b8a705780 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a705768 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a7056e8 <col:24> 'longfelem':'limb [8]' lvalue Var 0x28b8a6fffd0 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x28b8a705830 <line:1370:5, col:31> 'void'
|   | |-ImplicitCastExpr 0x28b8a705818 <col:5> 'void (*)(limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a705798 <col:5> 'void (limb *, const limb *, const limb *)' Function 0x28b8a6088c8 'felem_mul' 'void (limb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a705868 <col:15> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a7057b8 <col:15> 'longfelem':'limb [8]' lvalue Var 0x28b8a6fffd0 'tmp' 'longfelem':'limb [8]'
|   | |-ImplicitCastExpr 0x28b8a705898 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x28b8a705880 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x28b8a7057d8 <col:20> 'felem':'limb [4]' lvalue Var 0x28b8a6ffc98 'ftmp4' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x28b8a7058c8 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a7058b0 <col:27> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a7057f8 <col:27> 'felem':'limb [4]' lvalue Var 0x28b8a6ffb30 'ftmp' 'felem':'limb [4]'
|   |-CallExpr 0x28b8a705958 <line:1371:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x28b8a705940 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a7058e0 <col:5> 'void (limb *, const limb *)' Function 0x28b8a6ed1e8 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a705988 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a705900 <col:18> 'felem':'limb [4]' lvalue Var 0x28b8a6ffba8 'ftmp2' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x28b8a7059b8 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a7059a0 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a705920 <col:25> 'longfelem':'limb [8]' lvalue Var 0x28b8a6fffd0 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x28b8a705a68 <line:1374:5, col:31> 'void'
|   | |-ImplicitCastExpr 0x28b8a705a50 <col:5> 'void (*)(limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a7059d0 <col:5> 'void (limb *, const limb *, const limb *)' Function 0x28b8a6088c8 'felem_mul' 'void (limb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a705aa0 <col:15> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a7059f0 <col:15> 'longfelem':'limb [8]' lvalue Var 0x28b8a6fffd0 'tmp' 'longfelem':'limb [8]'
|   | |-ImplicitCastExpr 0x28b8a705ad0 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x28b8a705ab8 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x28b8a705a10 <col:20> 'felem':'limb [4]' lvalue Var 0x28b8a6ffc20 'ftmp3' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x28b8a705b00 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a705ae8 <col:27> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a705a30 <col:27> 'felem':'limb [4]' lvalue Var 0x28b8a6ffb30 'ftmp' 'felem':'limb [4]'
|   |-CallExpr 0x28b8a705b90 <line:1375:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x28b8a705b78 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a705b18 <col:5> 'void (limb *, const limb *)' Function 0x28b8a6ed1e8 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a705bc0 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a705b38 <col:18> 'felem':'limb [4]' lvalue Var 0x28b8a6ffc98 'ftmp4' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x28b8a705bf0 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a705bd8 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a705b58 <col:25> 'longfelem':'limb [8]' lvalue Var 0x28b8a6fffd0 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x28b8a705c80 <line:1378:5, col:34> 'void'
|   | |-ImplicitCastExpr 0x28b8a705c68 <col:5> 'void (*)(limb *, const u64 *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a705c08 <col:5> 'void (limb *, const u64 *)' Function 0x28b8a600ab8 'smallfelem_square' 'void (limb *, const u64 *)'
|   | |-ImplicitCastExpr 0x28b8a705cb0 <col:23> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a705c28 <col:23> 'longfelem':'limb [8]' lvalue Var 0x28b8a6fffd0 'tmp' 'longfelem':'limb [8]'
|   | `-ImplicitCastExpr 0x28b8a705ce0 <col:28> 'const u64 *':'const u64 *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a705cc8 <col:28> 'u64 *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a705c48 <col:28> 'smallfelem':'u64 [4]' lvalue Var 0x28b8a7000f0 'small1' 'smallfelem':'u64 [4]'
|   |-CallExpr 0x28b8a705d88 <line:1379:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x28b8a705d70 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a705cf8 <col:5> 'void (limb *, const limb *)' Function 0x28b8a6ed1e8 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a705db8 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a705d18 <col:18> 'felem':'limb [4]' lvalue Var 0x28b8a6ffe00 'x_out' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x28b8a705de8 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a705dd0 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a705d50 <col:25> 'longfelem':'limb [8]' lvalue Var 0x28b8a6fffd0 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x28b8a705e78 <line:1380:5, col:30> 'void'
|   | |-ImplicitCastExpr 0x28b8a705e60 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a705e00 <col:5> 'void (limb *, const limb *)' Function 0x28b8a5f3218 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a705ea8 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a705e20 <col:18> 'felem':'limb [4]' lvalue Var 0x28b8a6ffc20 'ftmp3' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x28b8a705ed8 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a705ec0 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a705e40 <col:25> 'felem':'limb [4]' lvalue Var 0x28b8a6ffc98 'ftmp4' 'felem':'limb [4]'
|   |-CallExpr 0x28b8a705f70 <line:1381:5, col:26> 'void'
|   | |-ImplicitCastExpr 0x28b8a705f58 <col:5> 'void (*)(limb *, const u64)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a705ef0 <col:5> 'void (limb *, const u64)' Function 0x28b8a5f4908 'felem_scalar' 'void (limb *, const u64)'
|   | |-ImplicitCastExpr 0x28b8a705fa0 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a705f10 <col:18> 'felem':'limb [4]' lvalue Var 0x28b8a6ffc98 'ftmp4' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x28b8a705fb8 <col:25> 'u64':'unsigned long long' <IntegralCast>
|   |   `-IntegerLiteral 0x28b8a705f30 <col:25> 'int' 2
|   |-CallExpr 0x28b8a706048 <line:1382:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x28b8a706030 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a705fd0 <col:5> 'void (limb *, const limb *)' Function 0x28b8a5f3940 'felem_sum' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a706078 <col:15> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a705ff0 <col:15> 'felem':'limb [4]' lvalue Var 0x28b8a6ffc98 'ftmp4' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x28b8a7060a8 <col:22> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a706090 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a706010 <col:22> 'felem':'limb [4]' lvalue Var 0x28b8a6ffba8 'ftmp2' 'felem':'limb [4]'
|   |-CallExpr 0x28b8a706138 <line:1384:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x28b8a706120 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a7060c0 <col:5> 'void (limb *, const limb *)' Function 0x28b8a5f6fd0 'felem_diff' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a706168 <col:16> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a7060e0 <col:16> 'felem':'limb [4]' lvalue Var 0x28b8a6ffe00 'x_out' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x28b8a706198 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a706180 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a706100 <col:23> 'felem':'limb [4]' lvalue Var 0x28b8a6ffc98 'ftmp4' 'felem':'limb [4]'
|   |-CallExpr 0x28b8a706228 <line:1388:5, col:36> 'void'
|   | |-ImplicitCastExpr 0x28b8a706210 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a7061b0 <col:5> 'void (limb *, const limb *)' Function 0x28b8a5f87a8 'felem_diff_zero107' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a706258 <col:24> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a7061d0 <col:24> 'felem':'limb [4]' lvalue Var 0x28b8a6ffc20 'ftmp3' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x28b8a706288 <col:31> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a706270 <col:31> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a7061f0 <col:31> 'felem':'limb [4]' lvalue Var 0x28b8a6ffe00 'x_out' 'felem':'limb [4]'
|   |-CallExpr 0x28b8a706338 <line:1390:5, col:39> 'void'
|   | |-ImplicitCastExpr 0x28b8a706320 <col:5> 'void (*)(limb *, const u64 *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a7062a0 <col:5> 'void (limb *, const u64 *, const limb *)' Function 0x28b8a6f0698 'felem_small_mul' 'void (limb *, const u64 *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a706370 <col:21> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a7062c0 <col:21> 'longfelem':'limb [8]' lvalue Var 0x28b8a6fffd0 'tmp' 'longfelem':'limb [8]'
|   | |-ImplicitCastExpr 0x28b8a7063a0 <col:26> 'const u64 *':'const u64 *' <NoOp>
|   | | `-ImplicitCastExpr 0x28b8a706388 <col:26> 'u64 *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x28b8a7062e0 <col:26> 'smallfelem':'u64 [4]' lvalue Var 0x28b8a7000f0 'small1' 'smallfelem':'u64 [4]'
|   | `-ImplicitCastExpr 0x28b8a7063d0 <col:34> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a7063b8 <col:34> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a706300 <col:34> 'felem':'limb [4]' lvalue Var 0x28b8a6ffc20 'ftmp3' 'felem':'limb [4]'
|   |-CallExpr 0x28b8a706498 <line:1391:5, col:33> 'void'
|   | |-ImplicitCastExpr 0x28b8a706480 <col:5> 'void (*)(limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a7063e8 <col:5> 'void (limb *, const limb *, const limb *)' Function 0x28b8a6088c8 'felem_mul' 'void (limb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a7064d0 <col:15> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a706408 <col:15> 'longfelem':'limb [8]' lvalue Var 0x28b8a700048 'tmp2' 'longfelem':'limb [8]'
|   | |-ImplicitCastExpr 0x28b8a706500 <col:21> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x28b8a7064e8 <col:21> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x28b8a706440 <col:21> 'felem':'limb [4]' lvalue Var 0x28b8a6ffd88 'ftmp6' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x28b8a706530 <col:28> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a706518 <col:28> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a706460 <col:28> 'felem':'limb [4]' lvalue Var 0x28b8a6ffba8 'ftmp2' 'felem':'limb [4]'
|   |-CallExpr 0x28b8a7065c8 <line:1392:5, col:29> 'void'
|   | |-ImplicitCastExpr 0x28b8a7065b0 <col:5> 'void (*)(limb *, const u64)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a706548 <col:5> 'void (limb *, const u64)' Function 0x28b8a5f4fc0 'longfelem_scalar' 'void (limb *, const u64)'
|   | |-ImplicitCastExpr 0x28b8a7065f8 <col:22> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a706568 <col:22> 'longfelem':'limb [8]' lvalue Var 0x28b8a700048 'tmp2' 'longfelem':'limb [8]'
|   | `-ImplicitCastExpr 0x28b8a706610 <col:28> 'u64':'unsigned long long' <IntegralCast>
|   |   `-IntegerLiteral 0x28b8a706588 <col:28> 'int' 2
|   |-CallExpr 0x28b8a6f6648 <line:1394:5, col:29> 'void'
|   | |-ImplicitCastExpr 0x28b8a6f6630 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a706628 <col:5> 'void (limb *, const limb *)' Function 0x28b8a5f9568 'longfelem_diff' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a6f6678 <col:20> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a706648 <col:20> 'longfelem':'limb [8]' lvalue Var 0x28b8a6fffd0 'tmp' 'longfelem':'limb [8]'
|   | `-ImplicitCastExpr 0x28b8a6f66a8 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a6f6690 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a6f6610 <col:25> 'longfelem':'limb [8]' lvalue Var 0x28b8a700048 'tmp2' 'longfelem':'limb [8]'
|   |-CallExpr 0x28b8a6f6750 <line:1396:5, col:36> 'void'
|   | |-ImplicitCastExpr 0x28b8a6f6738 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6f66c0 <col:5> 'void (limb *, const limb *)' Function 0x28b8a6edd78 'felem_reduce_zero105' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a6f6780 <col:26> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6f66e0 <col:26> 'felem':'limb [4]' lvalue Var 0x28b8a6ffe78 'y_out' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x28b8a6f67b0 <col:33> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a6f6798 <col:33> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a6f6718 <col:33> 'longfelem':'limb [8]' lvalue Var 0x28b8a6fffd0 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x28b8a6f68c0 <line:1399:5, col:49> 'void'
|   | |-ImplicitCastExpr 0x28b8a6f68a8 <col:5> 'void (*)(limb *, const u64 *, limb)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6f67c8 <col:5> 'void (limb *, const u64 *, limb)' Function 0x28b8a6fead8 'copy_small_conditional' 'void (limb *, const u64 *, limb)'
|   | |-ImplicitCastExpr 0x28b8a6f68f8 <col:28> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6f67e8 <col:28> 'felem':'limb [4]' lvalue Var 0x28b8a6ffe00 'x_out' 'felem':'limb [4]'
|   | |-ImplicitCastExpr 0x28b8a6f6910 <col:35> 'const u64 *':'const u64 *' <LValueToRValue>
|   | | `-DeclRefExpr 0x28b8a6f6808 <col:35> 'const u64 *':'const u64 *' lvalue ParmVar 0x28b8a6ff660 'x2' 'const u64 *':'const u64 *'
|   | `-ImplicitCastExpr 0x28b8a6f6928 <col:39> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x28b8a6f6828 <col:39> 'limb':'int' lvalue Var 0x28b8a700480 'z1_is_zero' 'limb':'int'
|   |-CallExpr 0x28b8a6f6a30 <line:1400:5, col:43> 'void'
|   | |-ImplicitCastExpr 0x28b8a6f6a18 <col:5> 'void (*)(limb *, const limb *, limb)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6f6940 <col:5> 'void (limb *, const limb *, limb)' Function 0x28b8a704178 'copy_conditional' 'void (limb *, const limb *, limb)'
|   | |-ImplicitCastExpr 0x28b8a6f6a68 <col:22> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6f6960 <col:22> 'felem':'limb [4]' lvalue Var 0x28b8a6ffe00 'x_out' 'felem':'limb [4]'
|   | |-ImplicitCastExpr 0x28b8a6f6a80 <col:29> 'const limb *':'const limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x28b8a6f6980 <col:29> 'const limb *':'const limb *' lvalue ParmVar 0x28b8a6ff478 'x1' 'const limb *':'const limb *'
|   | `-ImplicitCastExpr 0x28b8a6f6a98 <col:33> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x28b8a6f69a0 <col:33> 'limb':'int' lvalue Var 0x28b8a7004f8 'z2_is_zero' 'limb':'int'
|   |-CallExpr 0x28b8a6f6b48 <line:1401:5, col:49> 'void'
|   | |-ImplicitCastExpr 0x28b8a6f6b30 <col:5> 'void (*)(limb *, const u64 *, limb)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6f6ab0 <col:5> 'void (limb *, const u64 *, limb)' Function 0x28b8a6fead8 'copy_small_conditional' 'void (limb *, const u64 *, limb)'
|   | |-ImplicitCastExpr 0x28b8a6f6b80 <col:28> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6f6ad0 <col:28> 'felem':'limb [4]' lvalue Var 0x28b8a6ffe78 'y_out' 'felem':'limb [4]'
|   | |-ImplicitCastExpr 0x28b8a6f6b98 <col:35> 'const u64 *':'const u64 *' <LValueToRValue>
|   | | `-DeclRefExpr 0x28b8a6f6af0 <col:35> 'const u64 *':'const u64 *' lvalue ParmVar 0x28b8a6ff6d8 'y2' 'const u64 *':'const u64 *'
|   | `-ImplicitCastExpr 0x28b8a6f6bb0 <col:39> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x28b8a6f6b10 <col:39> 'limb':'int' lvalue Var 0x28b8a700480 'z1_is_zero' 'limb':'int'
|   |-CallExpr 0x28b8a6f6c60 <line:1402:5, col:43> 'void'
|   | |-ImplicitCastExpr 0x28b8a6f6c48 <col:5> 'void (*)(limb *, const limb *, limb)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6f6bc8 <col:5> 'void (limb *, const limb *, limb)' Function 0x28b8a704178 'copy_conditional' 'void (limb *, const limb *, limb)'
|   | |-ImplicitCastExpr 0x28b8a6f6c98 <col:22> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6f6be8 <col:22> 'felem':'limb [4]' lvalue Var 0x28b8a6ffe78 'y_out' 'felem':'limb [4]'
|   | |-ImplicitCastExpr 0x28b8a6f6cb0 <col:29> 'const limb *':'const limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x28b8a6f6c08 <col:29> 'const limb *':'const limb *' lvalue ParmVar 0x28b8a6ff4f0 'y1' 'const limb *':'const limb *'
|   | `-ImplicitCastExpr 0x28b8a6f6cc8 <col:33> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x28b8a6f6c28 <col:33> 'limb':'int' lvalue Var 0x28b8a7004f8 'z2_is_zero' 'limb':'int'
|   |-CallExpr 0x28b8a6f6d78 <line:1403:5, col:49> 'void'
|   | |-ImplicitCastExpr 0x28b8a6f6d60 <col:5> 'void (*)(limb *, const u64 *, limb)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6f6ce0 <col:5> 'void (limb *, const u64 *, limb)' Function 0x28b8a6fead8 'copy_small_conditional' 'void (limb *, const u64 *, limb)'
|   | |-ImplicitCastExpr 0x28b8a6f6db0 <col:28> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6f6d00 <col:28> 'felem':'limb [4]' lvalue Var 0x28b8a6ffef0 'z_out' 'felem':'limb [4]'
|   | |-ImplicitCastExpr 0x28b8a6f6dc8 <col:35> 'const u64 *':'const u64 *' <LValueToRValue>
|   | | `-DeclRefExpr 0x28b8a6f6d20 <col:35> 'const u64 *':'const u64 *' lvalue ParmVar 0x28b8a6ff750 'z2' 'const u64 *':'const u64 *'
|   | `-ImplicitCastExpr 0x28b8a6f6de0 <col:39> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x28b8a6f6d40 <col:39> 'limb':'int' lvalue Var 0x28b8a700480 'z1_is_zero' 'limb':'int'
|   |-CallExpr 0x28b8a6f6e90 <line:1404:5, col:43> 'void'
|   | |-ImplicitCastExpr 0x28b8a6f6e78 <col:5> 'void (*)(limb *, const limb *, limb)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6f6df8 <col:5> 'void (limb *, const limb *, limb)' Function 0x28b8a704178 'copy_conditional' 'void (limb *, const limb *, limb)'
|   | |-ImplicitCastExpr 0x28b8a6f6ec8 <col:22> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6f6e18 <col:22> 'felem':'limb [4]' lvalue Var 0x28b8a6ffef0 'z_out' 'felem':'limb [4]'
|   | |-ImplicitCastExpr 0x28b8a6f6ee0 <col:29> 'const limb *':'const limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x28b8a6f6e38 <col:29> 'const limb *':'const limb *' lvalue ParmVar 0x28b8a6ff568 'z1' 'const limb *':'const limb *'
|   | `-ImplicitCastExpr 0x28b8a6f6ef8 <col:33> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x28b8a6f6e58 <col:33> 'limb':'int' lvalue Var 0x28b8a7004f8 'z2_is_zero' 'limb':'int'
|   |-CallExpr 0x28b8a6f6f88 <line:1405:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x28b8a6f6f70 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6f6f10 <col:5> 'void (limb *, const limb *)' Function 0x28b8a5f3218 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a6f6fb8 <col:18> 'limb *':'limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x28b8a6f6f30 <col:18> 'limb *':'limb *' lvalue ParmVar 0x28b8a6ff310 'x3' 'limb *':'limb *'
|   | `-ImplicitCastExpr 0x28b8a6f6fe8 <col:22> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a6f6fd0 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a6f6f50 <col:22> 'felem':'limb [4]' lvalue Var 0x28b8a6ffe00 'x_out' 'felem':'limb [4]'
|   |-CallExpr 0x28b8a6f7078 <line:1406:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x28b8a6f7060 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6f7000 <col:5> 'void (limb *, const limb *)' Function 0x28b8a5f3218 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a6f70a8 <col:18> 'limb *':'limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x28b8a6f7020 <col:18> 'limb *':'limb *' lvalue ParmVar 0x28b8a6ff388 'y3' 'limb *':'limb *'
|   | `-ImplicitCastExpr 0x28b8a6f70d8 <col:22> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a6f70c0 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a6f7040 <col:22> 'felem':'limb [4]' lvalue Var 0x28b8a6ffe78 'y_out' 'felem':'limb [4]'
|   `-CallExpr 0x28b8a6f7168 <line:1407:5, col:27> 'void'
|     |-ImplicitCastExpr 0x28b8a6f7150 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x28b8a6f70f0 <col:5> 'void (limb *, const limb *)' Function 0x28b8a5f3218 'felem_assign' 'void (limb *, const limb *)'
|     |-ImplicitCastExpr 0x28b8a6f7198 <col:18> 'limb *':'limb *' <LValueToRValue>
|     | `-DeclRefExpr 0x28b8a6f7110 <col:18> 'limb *':'limb *' lvalue ParmVar 0x28b8a6ff400 'z3' 'limb *':'limb *'
|     `-ImplicitCastExpr 0x28b8a6f71c8 <col:22> 'const limb *':'const limb *' <NoOp>
|       `-ImplicitCastExpr 0x28b8a6f71b0 <col:22> 'limb *' <ArrayToPointerDecay>
|         `-DeclRefExpr 0x28b8a6f7130 <col:22> 'felem':'limb [4]' lvalue Var 0x28b8a6ffef0 'z_out' 'felem':'limb [4]'
|-FunctionDecl 0x28b8a6f7a08 <line:1414:1, line:1428:1> line:1414:13 used point_add_small 'void (u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *)' static
| |-ParmVarDecl 0x28b8a6f73c0 <col:29, col:40> col:40 used x3 'u64 *':'u64 *'
| |-ParmVarDecl 0x28b8a6f7438 <col:44, col:55> col:55 used y3 'u64 *':'u64 *'
| |-ParmVarDecl 0x28b8a6f74b0 <col:59, col:70> col:70 used z3 'u64 *':'u64 *'
| |-ParmVarDecl 0x28b8a6f7528 <line:1415:29, col:40> col:40 used x1 'u64 *':'u64 *'
| |-ParmVarDecl 0x28b8a6f75a0 <col:44, col:55> col:55 used y1 'u64 *':'u64 *'
| |-ParmVarDecl 0x28b8a6f7618 <col:59, col:70> col:70 used z1 'u64 *':'u64 *'
| |-ParmVarDecl 0x28b8a6f7690 <line:1416:29, col:40> col:40 used x2 'u64 *':'u64 *'
| |-ParmVarDecl 0x28b8a6f7708 <col:44, col:55> col:55 used y2 'u64 *':'u64 *'
| |-ParmVarDecl 0x28b8a6f7780 <col:59, col:70> col:70 used z2 'u64 *':'u64 *'
| `-CompoundStmt 0x28b8a7068b8 <line:1417:1, line:1428:1>
|   |-DeclStmt 0x28b8a6f7c90 <line:1418:5, col:39>
|   | |-VarDecl 0x28b8a6f7b18 <col:5, col:11> col:11 used felem_x3 'felem':'limb [4]'
|   | |-VarDecl 0x28b8a6f7b90 <col:5, col:21> col:21 used felem_y3 'felem':'limb [4]'
|   | `-VarDecl 0x28b8a6f7c08 <col:5, col:31> col:31 used felem_z3 'felem':'limb [4]'
|   |-DeclStmt 0x28b8a6f7e30 <line:1419:5, col:39>
|   | |-VarDecl 0x28b8a6f7cb8 <col:5, col:11> col:11 used felem_x1 'felem':'limb [4]'
|   | |-VarDecl 0x28b8a6f7d30 <col:5, col:21> col:21 used felem_y1 'felem':'limb [4]'
|   | `-VarDecl 0x28b8a6f7da8 <col:5, col:31> col:31 used felem_z1 'felem':'limb [4]'
|   |-CallExpr 0x28b8a6f7ed8 <line:1420:5, col:35> 'void'
|   | |-ImplicitCastExpr 0x28b8a6f7ec0 <col:5> 'void (*)(limb *, const u64 *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6f7e48 <col:5> 'void (limb *, const u64 *)' Function 0x28b8a6002f0 'smallfelem_expand' 'void (limb *, const u64 *)'
|   | |-ImplicitCastExpr 0x28b8a6f7f08 <col:23> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6f7e68 <col:23> 'felem':'limb [4]' lvalue Var 0x28b8a6f7cb8 'felem_x1' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x28b8a6f7f38 <col:33> 'const u64 *':'const u64 *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a6f7f20 <col:33> 'u64 *':'u64 *' <LValueToRValue>
|   |     `-DeclRefExpr 0x28b8a6f7ea0 <col:33> 'u64 *':'u64 *' lvalue ParmVar 0x28b8a6f7528 'x1' 'u64 *':'u64 *'
|   |-CallExpr 0x28b8a6f7fe0 <line:1421:5, col:35> 'void'
|   | |-ImplicitCastExpr 0x28b8a6f7fc8 <col:5> 'void (*)(limb *, const u64 *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6f7f50 <col:5> 'void (limb *, const u64 *)' Function 0x28b8a6002f0 'smallfelem_expand' 'void (limb *, const u64 *)'
|   | |-ImplicitCastExpr 0x28b8a6f8010 <col:23> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6f7f70 <col:23> 'felem':'limb [4]' lvalue Var 0x28b8a6f7d30 'felem_y1' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x28b8a6f8040 <col:33> 'const u64 *':'const u64 *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a6f8028 <col:33> 'u64 *':'u64 *' <LValueToRValue>
|   |     `-DeclRefExpr 0x28b8a6f7fa8 <col:33> 'u64 *':'u64 *' lvalue ParmVar 0x28b8a6f75a0 'y1' 'u64 *':'u64 *'
|   |-CallExpr 0x28b8a6f80e8 <line:1422:5, col:35> 'void'
|   | |-ImplicitCastExpr 0x28b8a6f80d0 <col:5> 'void (*)(limb *, const u64 *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6f8058 <col:5> 'void (limb *, const u64 *)' Function 0x28b8a6002f0 'smallfelem_expand' 'void (limb *, const u64 *)'
|   | |-ImplicitCastExpr 0x28b8a6f8118 <col:23> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6f8078 <col:23> 'felem':'limb [4]' lvalue Var 0x28b8a6f7da8 'felem_z1' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x28b8a6f8148 <col:33> 'const u64 *':'const u64 *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a6f8130 <col:33> 'u64 *':'u64 *' <LValueToRValue>
|   |     `-DeclRefExpr 0x28b8a6f80b0 <col:33> 'u64 *':'u64 *' lvalue ParmVar 0x28b8a6f7618 'z1' 'u64 *':'u64 *'
|   |-CallExpr 0x28b8a6f8380 <line:1423:5, line:1424:25> 'void'
|   | |-ImplicitCastExpr 0x28b8a6f8368 <line:1423:5> 'void (*)(limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const u64 *, const u64 *, const u64 *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6f8160 <col:5> 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const u64 *, const u64 *, const u64 *)' Function 0x28b8a6ffa18 'point_add' 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const u64 *, const u64 *, const u64 *)'
|   | |-ImplicitCastExpr 0x28b8a6f83f0 <col:15> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6f8180 <col:15> 'felem':'limb [4]' lvalue Var 0x28b8a6f7b18 'felem_x3' 'felem':'limb [4]'
|   | |-ImplicitCastExpr 0x28b8a6f8408 <col:25> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6f81b8 <col:25> 'felem':'limb [4]' lvalue Var 0x28b8a6f7b90 'felem_y3' 'felem':'limb [4]'
|   | |-ImplicitCastExpr 0x28b8a6f8420 <col:35> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6f81f0 <col:35> 'felem':'limb [4]' lvalue Var 0x28b8a6f7c08 'felem_z3' 'felem':'limb [4]'
|   | |-ImplicitCastExpr 0x28b8a6f8450 <col:45> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x28b8a6f8438 <col:45> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x28b8a6f8228 <col:45> 'felem':'limb [4]' lvalue Var 0x28b8a6f7cb8 'felem_x1' 'felem':'limb [4]'
|   | |-ImplicitCastExpr 0x28b8a6f8480 <col:55> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x28b8a6f8468 <col:55> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x28b8a6f8248 <col:55> 'felem':'limb [4]' lvalue Var 0x28b8a6f7d30 'felem_y1' 'felem':'limb [4]'
|   | |-ImplicitCastExpr 0x28b8a6f84b0 <col:65> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x28b8a6f8498 <col:65> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x28b8a6f8268 <col:65> 'felem':'limb [4]' lvalue Var 0x28b8a6f7da8 'felem_z1' 'felem':'limb [4]'
|   | |-IntegerLiteral 0x28b8a6f8288 <col:75> 'int' 0
|   | |-ImplicitCastExpr 0x28b8a6f84e0 <line:1424:15> 'const u64 *':'const u64 *' <NoOp>
|   | | `-ImplicitCastExpr 0x28b8a6f84c8 <col:15> 'u64 *':'u64 *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x28b8a6f82b0 <col:15> 'u64 *':'u64 *' lvalue ParmVar 0x28b8a6f7690 'x2' 'u64 *':'u64 *'
|   | |-ImplicitCastExpr 0x28b8a6f8510 <col:19> 'const u64 *':'const u64 *' <NoOp>
|   | | `-ImplicitCastExpr 0x28b8a6f84f8 <col:19> 'u64 *':'u64 *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x28b8a6f82d0 <col:19> 'u64 *':'u64 *' lvalue ParmVar 0x28b8a6f7708 'y2' 'u64 *':'u64 *'
|   | `-ImplicitCastExpr 0x28b8a6f8540 <col:23> 'const u64 *':'const u64 *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a6f8528 <col:23> 'u64 *':'u64 *' <LValueToRValue>
|   |     `-DeclRefExpr 0x28b8a6f82f0 <col:23> 'u64 *':'u64 *' lvalue ParmVar 0x28b8a6f7780 'z2' 'u64 *':'u64 *'
|   |-CallExpr 0x28b8a6f85d0 <line:1425:5, col:30> 'void'
|   | |-ImplicitCastExpr 0x28b8a6f85b8 <col:5> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a6f8558 <col:5> 'void (u64 *, const limb *)' Function 0x28b8a5fc378 'felem_shrink' 'void (u64 *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a706690 <col:18> 'u64 *':'u64 *' <LValueToRValue>
|   | | `-DeclRefExpr 0x28b8a6f8578 <col:18> 'u64 *':'u64 *' lvalue ParmVar 0x28b8a6f73c0 'x3' 'u64 *':'u64 *'
|   | `-ImplicitCastExpr 0x28b8a7066c0 <col:22> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a7066a8 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a6f8598 <col:22> 'felem':'limb [4]' lvalue Var 0x28b8a6f7b18 'felem_x3' 'felem':'limb [4]'
|   |-CallExpr 0x28b8a706750 <line:1426:5, col:30> 'void'
|   | |-ImplicitCastExpr 0x28b8a706738 <col:5> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a7066d8 <col:5> 'void (u64 *, const limb *)' Function 0x28b8a5fc378 'felem_shrink' 'void (u64 *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a706780 <col:18> 'u64 *':'u64 *' <LValueToRValue>
|   | | `-DeclRefExpr 0x28b8a7066f8 <col:18> 'u64 *':'u64 *' lvalue ParmVar 0x28b8a6f7438 'y3' 'u64 *':'u64 *'
|   | `-ImplicitCastExpr 0x28b8a7067b0 <col:22> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a706798 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a706718 <col:22> 'felem':'limb [4]' lvalue Var 0x28b8a6f7b90 'felem_y3' 'felem':'limb [4]'
|   `-CallExpr 0x28b8a706840 <line:1427:5, col:30> 'void'
|     |-ImplicitCastExpr 0x28b8a706828 <col:5> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x28b8a7067c8 <col:5> 'void (u64 *, const limb *)' Function 0x28b8a5fc378 'felem_shrink' 'void (u64 *, const limb *)'
|     |-ImplicitCastExpr 0x28b8a706870 <col:18> 'u64 *':'u64 *' <LValueToRValue>
|     | `-DeclRefExpr 0x28b8a7067e8 <col:18> 'u64 *':'u64 *' lvalue ParmVar 0x28b8a6f74b0 'z3' 'u64 *':'u64 *'
|     `-ImplicitCastExpr 0x28b8a7068a0 <col:22> 'const limb *':'const limb *' <NoOp>
|       `-ImplicitCastExpr 0x28b8a706888 <col:22> 'limb *' <ArrayToPointerDecay>
|         `-DeclRefExpr 0x28b8a706808 <col:22> 'felem':'limb [4]' lvalue Var 0x28b8a6f7c08 'felem_z3' 'felem':'limb [4]'
|-VarDecl 0x28b8a706b78 <line:1467:1, line:1624:1> line:1467:25 used gmul 'const smallfelem [2][16][3]' static cinit
| `-InitListExpr 0x28b8a7f4768 <col:42, line:1624:1> 'const smallfelem [2][16][3]'
|   |-InitListExpr 0x28b8a7f4ab8 <line:1468:5, line:1545:20> 'const smallfelem [16][3]'
|   | |-InitListExpr 0x28b8a7f4ba8 <line:1468:6, line:1470:19> 'const smallfelem [3]'
|   | | |-InitListExpr 0x28b8a7f4c10 <line:1468:7, col:18> 'const smallfelem':'u64 const[4]'
|   | | | |-ImplicitCastExpr 0x28b8a7f4c70 <col:8> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x28b8a706be0 <col:8> 'int' 0
|   | | | |-ImplicitCastExpr 0x28b8a7f4c88 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x28b8a706c08 <col:11> 'int' 0
|   | | | |-ImplicitCastExpr 0x28b8a7f4ca0 <col:14> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x28b8a706c30 <col:14> 'int' 0
|   | | | `-ImplicitCastExpr 0x28b8a7f4cb8 <col:17> 'u64':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x28b8a706c58 <col:17> 'int' 0
|   | | |-InitListExpr 0x28b8a7f4ce0 <line:1469:7, col:18> 'const smallfelem':'u64 const[4]'
|   | | | |-ImplicitCastExpr 0x28b8a7f4d40 <col:8> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x28b8a706ce0 <col:8> 'int' 0
|   | | | |-ImplicitCastExpr 0x28b8a7f4d58 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x28b8a706d08 <col:11> 'int' 0
|   | | | |-ImplicitCastExpr 0x28b8a7f4d70 <col:14> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x28b8a706d30 <col:14> 'int' 0
|   | | | `-ImplicitCastExpr 0x28b8a7f4d88 <col:17> 'u64':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x28b8a706d58 <col:17> 'int' 0
|   | | `-InitListExpr 0x28b8a7f4db0 <line:1470:7, col:18> 'const smallfelem':'u64 const[4]'
|   | |   |-ImplicitCastExpr 0x28b8a7f4e10 <col:8> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x28b8a706de0 <col:8> 'int' 0
|   | |   |-ImplicitCastExpr 0x28b8a7f4e28 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x28b8a706e08 <col:11> 'int' 0
|   | |   |-ImplicitCastExpr 0x28b8a7f4e40 <col:14> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x28b8a706e30 <col:14> 'int' 0
|   | |   `-ImplicitCastExpr 0x28b8a7f4e58 <col:17> 'u64':'unsigned long long' <IntegralCast>
|   | |     `-IntegerLiteral 0x28b8a706e58 <col:17> 'int' 0
|   | |-InitListExpr 0x28b8a7f4ea0 <line:1471:6, line:1475:19> 'const smallfelem [3]'
|   | | |-InitListExpr 0x28b8a7f0f00 <line:1471:7, line:1472:26> 'const smallfelem':'u64 const[4]'
|   | | | |-IntegerLiteral 0x28b8a706f38 <line:1471:8> 'unsigned long long' 17627433388654248598
|   | | | |-ImplicitCastExpr 0x28b8a7f0f60 <col:28> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x28b8a706f60 <col:28> 'long long' 8575836109218198432
|   | | | |-IntegerLiteral 0x28b8a706f88 <col:48> 'unsigned long long' 17923454489921339634
|   | | | `-ImplicitCastExpr 0x28b8a7f0f78 <line:1472:8> 'u64':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x28b8a706fb0 <col:8> 'long long' 7716867327612699207
|   | | |-InitListExpr 0x28b8a7f0fa0 <line:1473:7, line:1474:26> 'const smallfelem':'u64 const[4]'
|   | | | |-IntegerLiteral 0x28b8a707038 <line:1473:8> 'unsigned long long' 14678990851816772085
|   | | | |-ImplicitCastExpr 0x28b8a7f1000 <col:28> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x28b8a707060 <col:28> 'long long' 3156516839386865358
|   | | | |-IntegerLiteral 0x28b8a707088 <col:48> 'unsigned long long' 10297457778147434006
|   | | | `-ImplicitCastExpr 0x28b8a7f1018 <line:1474:8> 'u64':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x28b8a7070b0 <col:8> 'long long' 5756518291402817435
|   | | `-InitListExpr 0x28b8a7f1040 <line:1475:7, col:18> 'const smallfelem':'u64 const[4]'
|   | |   |-ImplicitCastExpr 0x28b8a7f10a0 <col:8> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x28b8a707138 <col:8> 'int' 1
|   | |   |-ImplicitCastExpr 0x28b8a7f10b8 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x28b8a707160 <col:11> 'int' 0
|   | |   |-ImplicitCastExpr 0x28b8a7f10d0 <col:14> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x28b8a707188 <col:14> 'int' 0
|   | |   `-ImplicitCastExpr 0x28b8a7f10e8 <col:17> 'u64':'unsigned long long' <IntegralCast>
|   | |     `-IntegerLiteral 0x28b8a7071b0 <col:17> 'int' 0
|   | |-InitListExpr 0x28b8a7f1130 <line:1476:6, line:1480:19> 'const smallfelem [3]'
|   | | |-InitListExpr 0x28b8a7f1198 <line:1476:7, line:1477:26> 'const smallfelem':'u64 const[4]'
|   | | | |-IntegerLiteral 0x28b8a707290 <line:1476:8> 'unsigned long long' 10441416191629384547
|   | | | |-ImplicitCastExpr 0x28b8a7f11f8 <col:28> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x28b8a7072b8 <col:28> 'long long' 2974974633094487934
|   | | | |-IntegerLiteral 0x28b8a7072e0 <col:48> 'unsigned long long' 9552795814555690462
|   | | | `-ImplicitCastExpr 0x28b8a7f1210 <line:1477:8> 'u64':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x28b8a707308 <col:8> 'long long' 1128189898177751717
|   | | |-InitListExpr 0x28b8a7f1238 <line:1478:7, line:1479:26> 'const smallfelem':'u64 const[4]'
|   | | | |-IntegerLiteral 0x28b8a707390 <line:1478:8> 'unsigned long long' 16433956460045938407
|   | | | |-ImplicitCastExpr 0x28b8a7f1298 <col:28> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x28b8a7073b8 <col:28> 'long long' 3796998824736490229
|   | | | |-ImplicitCastExpr 0x28b8a7f12b0 <col:48> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x28b8a7073e0 <col:48> 'long long' 8019455993423272075
|   | | | `-IntegerLiteral 0x28b8a707408 <line:1479:8> 'unsigned long long' 13831762719979317261
|   | | `-InitListExpr 0x28b8a7f12d8 <line:1480:7, col:18> 'const smallfelem':'u64 const[4]'
|   | |   |-ImplicitCastExpr 0x28b8a7f1338 <col:8> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x28b8a707490 <col:8> 'int' 1
|   | |   |-ImplicitCastExpr 0x28b8a7f1350 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x28b8a7074b8 <col:11> 'int' 0
|   | |   |-ImplicitCastExpr 0x28b8a7f1368 <col:14> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x28b8a7074e0 <col:14> 'int' 0
|   | |   `-ImplicitCastExpr 0x28b8a7f1380 <col:17> 'u64':'unsigned long long' <IntegralCast>
|   | |     `-IntegerLiteral 0x28b8a707508 <col:17> 'int' 0
|   | |-InitListExpr 0x28b8a7f13c8 <line:1481:6, line:1485:19> 'const smallfelem [3]'
|   | | |-InitListExpr 0x28b8a7f1430 <line:1481:7, line:1482:26> 'const smallfelem':'u64 const[4]'
|   | | | |-IntegerLiteral 0x28b8a7075e8 <line:1481:8> 'unsigned long long' 10608542154395062959
|   | | | |-IntegerLiteral 0x28b8a707610 <col:28> 'unsigned long long' 16819986920937746938
|   | | | |-IntegerLiteral 0x28b8a707638 <col:48> 'unsigned long long' 12850952123954767753
|   | | | `-ImplicitCastExpr 0x28b8a7f1490 <line:1482:8> 'u64':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x28b8a707660 <col:8> 'long long' 3461662536726114927
|   | | |-InitListExpr 0x28b8a7f14b8 <line:1483:7, line:1484:26> 'const smallfelem':'u64 const[4]'
|   | | | |-IntegerLiteral 0x28b8a7076e8 <line:1483:8> 'unsigned long long' 12273613631375091616
|   | | | |-ImplicitCastExpr 0x28b8a7f1518 <col:28> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x28b8a707710 <col:28> 'long long' 6607324557975488165
|   | | | |-ImplicitCastExpr 0x28b8a7f1530 <col:48> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x28b8a707738 <col:48> 'long long' 9159718173381901423
|   | | | `-ImplicitCastExpr 0x28b8a7f1548 <line:1484:8> 'u64':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x28b8a707760 <col:8> 'long long' 8262636234751034948
|   | | `-InitListExpr 0x28b8a7f1570 <line:1485:7, col:18> 'const smallfelem':'u64 const[4]'
|   | |   |-ImplicitCastExpr 0x28b8a7f15d0 <col:8> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x28b8a7077e8 <col:8> 'int' 1
|   | |   |-ImplicitCastExpr 0x28b8a7f15e8 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x28b8a707810 <col:11> 'int' 0
|   | |   |-ImplicitCastExpr 0x28b8a7f1600 <col:14> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x28b8a707838 <col:14> 'int' 0
|   | |   `-ImplicitCastExpr 0x28b8a7f1618 <col:17> 'u64':'unsigned long long' <IntegralCast>
|   | |     `-IntegerLiteral 0x28b8a707860 <col:17> 'int' 0
|   | |-InitListExpr 0x28b8a7f1660 <line:1486:6, line:1490:19> 'const smallfelem [3]'
|   | | |-InitListExpr 0x28b8a7f16c8 <line:1486:7, line:1487:26> 'const smallfelem':'u64 const[4]'
|   | | | |-ImplicitCastExpr 0x28b8a7f1728 <line:1486:8> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x28b8a707940 <col:8> 'long long' 6325393404965010821
|   | | | |-IntegerLiteral 0x28b8a707968 <col:28> 'unsigned long long' 18173712786924235459
|   | | | |-IntegerLiteral 0x28b8a707990 <col:48> 'unsigned long long' 18129292894149178990
|   | | | `-ImplicitCastExpr 0x28b8a7f1740 <line:1487:8> 'u64':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x28b8a7079b8 <col:8> 'long long' 4935227880232410727
|   | | |-InitListExpr 0x28b8a7f1768 <line:1488:7, line:1489:26> 'const smallfelem':'u64 const[4]'
|   | | | |-ImplicitCastExpr 0x28b8a7f17c8 <line:1488:8> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x28b8a707a40 <col:8> 'long long' 900213915829558066
|   | | | |-ImplicitCastExpr 0x28b8a7f17e0 <col:28> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x28b8a707a68 <col:28> 'long long' 4410321002173228288
|   | | | |-IntegerLiteral 0x28b8a707a90 <col:48> 'unsigned long long' 16226079771716136951
|   | | | `-ImplicitCastExpr 0x28b8a7f17f8 <line:1489:8> 'u64':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x28b8a707ab8 <col:8> 'long long' 3262899348601647598
|   | | `-InitListExpr 0x28b8a7f1820 <line:1490:7, col:18> 'const smallfelem':'u64 const[4]'
|   | |   |-ImplicitCastExpr 0x28b8a7f1880 <col:8> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x28b8a707b40 <col:8> 'int' 1
|   | |   |-ImplicitCastExpr 0x28b8a7f1898 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x28b8a707b68 <col:11> 'int' 0
|   | |   |-ImplicitCastExpr 0x28b8a7f18b0 <col:14> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x28b8a707b90 <col:14> 'int' 0
|   | |   `-ImplicitCastExpr 0x28b8a7f18c8 <col:17> 'u64':'unsigned long long' <IntegralCast>
|   | |     `-IntegerLiteral 0x28b8a707bb8 <col:17> 'int' 0
|   | |-InitListExpr 0x28b8a7f1910 <line:1491:6, line:1495:19> 'const smallfelem [3]'
|   | | |-InitListExpr 0x28b8a7f1978 <line:1491:7, line:1492:26> 'const smallfelem':'u64 const[4]'
|   | | | |-ImplicitCastExpr 0x28b8a7f19d8 <line:1491:8> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x28b8a707c98 <col:8> 'long long' 1410924739154491007
|   | | | |-IntegerLiteral 0x28b8a707cc0 <col:28> 'unsigned long long' 17257720289925140919
|   | | | |-IntegerLiteral 0x28b8a707ce8 <col:48> 'unsigned long long' 15980467524946754656
|   | | | `-IntegerLiteral 0x28b8a707d10 <line:1492:8> 'unsigned long long' 17263732451459232511
|   | | |-InitListExpr 0x28b8a7f1a00 <line:1493:7, line:1494:26> 'const smallfelem':'u64 const[4]'
|   | | | |-ImplicitCastExpr 0x28b8a7f1a60 <line:1493:8> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x28b8a707d98 <col:8> 'long long' 1828520442025400488
|   | | | |-ImplicitCastExpr 0x28b8a7f1a78 <col:28> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x28b8a707dc0 <col:28> 'long long' 2528836098827360064
|   | | | |-IntegerLiteral 0x28b8a707de8 <col:48> 'unsigned long long' 13974273849645867420
|   | | | `-ImplicitCastExpr 0x28b8a7f1a90 <line:1494:8> 'u64':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x28b8a707e10 <col:8> 'long long' 6998206532957187227
|   | | `-InitListExpr 0x28b8a7f1ab8 <line:1495:7, col:18> 'const smallfelem':'u64 const[4]'
|   | |   |-ImplicitCastExpr 0x28b8a7f1b18 <col:8> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x28b8a707e98 <col:8> 'int' 1
|   | |   |-ImplicitCastExpr 0x28b8a7f1b30 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x28b8a707ec0 <col:11> 'int' 0
|   | |   |-ImplicitCastExpr 0x28b8a7f1b48 <col:14> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x28b8a707ee8 <col:14> 'int' 0
|   | |   `-ImplicitCastExpr 0x28b8a7f1b60 <col:17> 'u64':'unsigned long long' <IntegralCast>
|   | |     `-IntegerLiteral 0x28b8a707f10 <col:17> 'int' 0
|   | |-InitListExpr 0x28b8a7f1ba8 <line:1496:6, line:1500:19> 'const smallfelem [3]'
|   | | |-InitListExpr 0x28b8a7f1c10 <line:1496:7, line:1497:26> 'const smallfelem':'u64 const[4]'
|   | | | |-IntegerLiteral 0x28b8a707ff0 <line:1496:8> 'unsigned long long' 14619442581211706556
|   | | | |-ImplicitCastExpr 0x28b8a7f1c70 <col:28> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x28b8a708018 <col:28> 'long long' 2969806602452450358
|   | | | |-ImplicitCastExpr 0x28b8a7f1c88 <col:48> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x28b8a708040 <col:48> 'long long' 9073174912575879359
|   | | | `-ImplicitCastExpr 0x28b8a7f1ca0 <line:1497:8> 'u64':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x28b8a708068 <col:8> 'long long' 6126693716495300056
|   | | |-InitListExpr 0x28b8a7f1cc8 <line:1498:7, line:1499:26> 'const smallfelem':'u64 const[4]'
|   | | | |-ImplicitCastExpr 0x28b8a7f1d28 <line:1498:8> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x28b8a7080f0 <col:8> 'long long' 4971941098638972492
|   | | | |-IntegerLiteral 0x28b8a708118 <col:28> 'unsigned long long' 11507776179333430241
|   | | | |-ImplicitCastExpr 0x28b8a7f1d40 <col:48> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x28b8a708140 <col:48> 'long long' 791015059971985637
|   | | | `-ImplicitCastExpr 0x28b8a7f1d58 <line:1499:8> 'u64':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x28b8a708168 <col:8> 'long long' 1545126667594020945
|   | | `-InitListExpr 0x28b8a7f1d80 <line:1500:7, col:18> 'const smallfelem':'u64 const[4]'
|   | |   |-ImplicitCastExpr 0x28b8a7f1de0 <col:8> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x28b8a7081f0 <col:8> 'int' 1
|   | |   |-ImplicitCastExpr 0x28b8a7f1df8 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x28b8a708218 <col:11> 'int' 0
|   | |   |-ImplicitCastExpr 0x28b8a7f1e10 <col:14> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x28b8a708240 <col:14> 'int' 0
|   | |   `-ImplicitCastExpr 0x28b8a7f1e28 <col:17> 'u64':'unsigned long long' <IntegralCast>
|   | |     `-IntegerLiteral 0x28b8a708268 <col:17> 'int' 0
|   | |-InitListExpr 0x28b8a7f1e70 <line:1501:6, line:1505:19> 'const smallfelem [3]'
|   | | |-InitListExpr 0x28b8a7f1ed8 <line:1501:7, line:1502:26> 'const smallfelem':'u64 const[4]'
|   | | | |-IntegerLiteral 0x28b8a708348 <line:1501:8> 'unsigned long long' 16469324088139898369
|   | | | |-ImplicitCastExpr 0x28b8a7f1f38 <col:28> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x28b8a708370 <col:28> 'long long' 8992990158826594086
|   | | | |-IntegerLiteral 0x28b8a708398 <col:48> 'unsigned long long' 11738901276316812177
|   | | | `-IntegerLiteral 0x28b8a7083c0 <line:1502:8> 'unsigned long long' 16959842912971080170
|   | | |-InitListExpr 0x28b8a7f1f60 <line:1503:7, line:1504:26> 'const smallfelem':'u64 const[4]'
|   | | | |-IntegerLiteral 0x28b8a708448 <line:1503:8> 'unsigned long long' 14612236727341429881
|   | | | |-IntegerLiteral 0x28b8a708470 <col:28> 'unsigned long long' 9651826421517301317
|   | | | |-ImplicitCastExpr 0x28b8a7f1fc0 <col:48> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x28b8a708498 <col:48> 'long long' 689304323628231918
|   | | | `-IntegerLiteral 0x28b8a7084c0 <line:1504:8> 'unsigned long long' 16932816531315540347
|   | | `-InitListExpr 0x28b8a7f1fe8 <line:1505:7, col:18> 'const smallfelem':'u64 const[4]'
|   | |   |-ImplicitCastExpr 0x28b8a7f2048 <col:8> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x28b8a708548 <col:8> 'int' 1
|   | |   |-ImplicitCastExpr 0x28b8a7f2060 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x28b8a708570 <col:11> 'int' 0
|   | |   |-ImplicitCastExpr 0x28b8a7f2078 <col:14> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x28b8a708598 <col:14> 'int' 0
|   | |   `-ImplicitCastExpr 0x28b8a7f2090 <col:17> 'u64':'unsigned long long' <IntegralCast>
|   | |     `-IntegerLiteral 0x28b8a7085c0 <col:17> 'int' 0
|   | |-InitListExpr 0x28b8a7f20d8 <line:1506:6, line:1510:19> 'const smallfelem [3]'
|   | | |-InitListExpr 0x28b8a7f2140 <line:1506:7, line:1507:26> 'const smallfelem':'u64 const[4]'
|   | | | |-ImplicitCastExpr 0x28b8a7f21a0 <line:1506:8> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x28b8a7f6f48 <col:8> 'long long' 7850354671997102270
|   | | | |-IntegerLiteral 0x28b8a7f6f70 <col:28> 'unsigned long long' 10827662381879310666
|   | | | |-ImplicitCastExpr 0x28b8a7f21b8 <col:48> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x28b8a7f6f98 <col:48> 'long long' 2825726755471450053
|   | | | `-IntegerLiteral 0x28b8a7f6fc0 <line:1507:8> 'unsigned long long' 12021117271037743734
|   | | |-InitListExpr 0x28b8a7f21e0 <line:1508:7, line:1509:26> 'const smallfelem':'u64 const[4]'
|   | | | |-IntegerLiteral 0x28b8a7f7048 <line:1508:8> 'unsigned long long' 17490494635306907124
|   | | | |-IntegerLiteral 0x28b8a7f7070 <col:28> 'unsigned long long' 9388476954023560603
|   | | | |-ImplicitCastExpr 0x28b8a7f2240 <col:48> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x28b8a7f7098 <col:48> 'long long' 7401871309252586719
|   | | | `-ImplicitCastExpr 0x28b8a7f2258 <line:1509:8> 'u64':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x28b8a7f70c0 <col:8> 'long long' 7444314345419016214
|   | | `-InitListExpr 0x28b8a7f2280 <line:1510:7, col:18> 'const smallfelem':'u64 const[4]'
|   | |   |-ImplicitCastExpr 0x28b8a7f22e0 <col:8> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x28b8a7f7148 <col:8> 'int' 1
|   | |   |-ImplicitCastExpr 0x28b8a7f22f8 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x28b8a7f7170 <col:11> 'int' 0
|   | |   |-ImplicitCastExpr 0x28b8a7f2310 <col:14> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x28b8a7f7198 <col:14> 'int' 0
|   | |   `-ImplicitCastExpr 0x28b8a7f2328 <col:17> 'u64':'unsigned long long' <IntegralCast>
|   | |     `-IntegerLiteral 0x28b8a7f71c0 <col:17> 'int' 0
|   | |-InitListExpr 0x28b8a7f2370 <line:1511:6, line:1515:19> 'const smallfelem [3]'
|   | | |-InitListExpr 0x28b8a7f23d8 <line:1511:7, line:1512:26> 'const smallfelem':'u64 const[4]'
|   | | | |-ImplicitCastExpr 0x28b8a7f2438 <line:1511:8> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x28b8a7f72a0 <col:8> 'long long' 3311425576568130110
|   | | | |-ImplicitCastExpr 0x28b8a7f2450 <col:28> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x28b8a7f72c8 <col:28> 'long long' 8421783014622864747
|   | | | |-ImplicitCastExpr 0x28b8a7f2468 <col:48> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x28b8a7f72f0 <col:48> 'long long' 3568363273336651483
|   | | | `-ImplicitCastExpr 0x28b8a7f2480 <line:1512:8> 'u64':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x28b8a7f7318 <col:8> 'long long' 5653880613779398061
|   | | |-InitListExpr 0x28b8a7f24a8 <line:1513:7, line:1514:26> 'const smallfelem':'u64 const[4]'
|   | | | |-IntegerLiteral 0x28b8a7f73a0 <line:1513:8> 'unsigned long long' 11872440132187765680
|   | | | |-IntegerLiteral 0x28b8a7f73c8 <col:28> 'unsigned long long' 18130051117790339749
|   | | | |-ImplicitCastExpr 0x28b8a7f2508 <col:48> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x28b8a7f73f0 <col:48> 'long long' 2215777003961086593
|   | | | `-ImplicitCastExpr 0x28b8a7f2520 <line:1514:8> 'u64':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x28b8a7f7418 <col:8> 'long long' 4808032968947992163
|   | | `-InitListExpr 0x28b8a7f2548 <line:1515:7, col:18> 'const smallfelem':'u64 const[4]'
|   | |   |-ImplicitCastExpr 0x28b8a7f25a8 <col:8> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x28b8a7f74a0 <col:8> 'int' 1
|   | |   |-ImplicitCastExpr 0x28b8a7f25c0 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x28b8a7f74c8 <col:11> 'int' 0
|   | |   |-ImplicitCastExpr 0x28b8a7f25d8 <col:14> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x28b8a7f74f0 <col:14> 'int' 0
|   | |   `-ImplicitCastExpr 0x28b8a7f25f0 <col:17> 'u64':'unsigned long long' <IntegralCast>
|   | |     `-IntegerLiteral 0x28b8a7f7518 <col:17> 'int' 0
|   | |-InitListExpr 0x28b8a7f2638 <line:1516:6, line:1520:19> 'const smallfelem [3]'
|   | | |-InitListExpr 0x28b8a7f26a0 <line:1516:7, line:1517:26> 'const smallfelem':'u64 const[4]'
|   | | | |-ImplicitCastExpr 0x28b8a7f2700 <line:1516:8> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x28b8a7f75f8 <col:8> 'long long' 7996512021131061433
|   | | | |-IntegerLiteral 0x28b8a7f7620 <col:28> 'unsigned long long' 15130017193297502513
|   | | | |-ImplicitCastExpr 0x28b8a7f2718 <col:48> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x28b8a7f7648 <col:48> 'long long' 9213270411358356600
|   | | | `-ImplicitCastExpr 0x28b8a7f2730 <line:1517:8> 'u64':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x28b8a7f7670 <col:8> 'long long' 8685067594097287245
|   | | |-InitListExpr 0x28b8a7f2758 <line:1518:7, line:1519:26> 'const smallfelem':'u64 const[4]'
|   | | | |-IntegerLiteral 0x28b8a7f76f8 <line:1518:8> 'unsigned long long' 11268772705129781622
|   | | | |-ImplicitCastExpr 0x28b8a7f27b8 <col:28> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x28b8a7f7720 <col:28> 'long long' 7696184534049525071
|   | | | |-IntegerLiteral 0x28b8a7f7748 <col:48> 'unsigned long long' 16020170479003278831
|   | | | `-IntegerLiteral 0x28b8a7f7770 <line:1519:8> 'unsigned long long' 13171691205910774561
|   | | `-InitListExpr 0x28b8a7f27e0 <line:1520:7, col:18> 'const smallfelem':'u64 const[4]'
|   | |   |-ImplicitCastExpr 0x28b8a7f2840 <col:8> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x28b8a7f77f8 <col:8> 'int' 1
|   | |   |-ImplicitCastExpr 0x28b8a7f2858 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x28b8a7f7820 <col:11> 'int' 0
|   | |   |-ImplicitCastExpr 0x28b8a7f2870 <col:14> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x28b8a7f7848 <col:14> 'int' 0
|   | |   `-ImplicitCastExpr 0x28b8a7f2888 <col:17> 'u64':'unsigned long long' <IntegralCast>
|   | |     `-IntegerLiteral 0x28b8a7f7870 <col:17> 'int' 0
|   | |-InitListExpr 0x28b8a7f28d0 <line:1521:6, line:1525:19> 'const smallfelem [3]'
|   | | |-InitListExpr 0x28b8a7f2938 <line:1521:7, line:1522:26> 'const smallfelem':'u64 const[4]'
|   | | | |-ImplicitCastExpr 0x28b8a7f2998 <line:1521:8> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x28b8a7f7950 <col:8> 'long long' 9194414004818818419
|   | | | |-ImplicitCastExpr 0x28b8a7f29b0 <col:28> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x28b8a7f7978 <col:28> 'long long' 6594076190914360470
|   | | | |-ImplicitCastExpr 0x28b8a7f29c8 <col:48> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x28b8a7f79a0 <col:48> 'long long' 6439111866792803502
|   | | | `-ImplicitCastExpr 0x28b8a7f29e0 <line:1522:8> 'u64':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x28b8a7f79c8 <col:8> 'long long' 903178766089130631
|   | | |-InitListExpr 0x28b8a7f2a08 <line:1523:7, line:1524:26> 'const smallfelem':'u64 const[4]'
|   | | | |-ImplicitCastExpr 0x28b8a7f2a68 <line:1523:8> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x28b8a7f7a50 <col:8> 'long long' 4204039210694913192
|   | | | |-ImplicitCastExpr 0x28b8a7f2a80 <col:28> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x28b8a7f7a78 <col:28> 'long long' 8971594821414511859
|   | | | |-ImplicitCastExpr 0x28b8a7f2a98 <col:48> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x28b8a7f7aa0 <col:48> 'long long' 1788410310064137898
|   | | | `-IntegerLiteral 0x28b8a7f7ac8 <line:1524:8> 'unsigned long long' 15951150250963508678
|   | | `-InitListExpr 0x28b8a7f2ac0 <line:1525:7, col:18> 'const smallfelem':'u64 const[4]'
|   | |   |-ImplicitCastExpr 0x28b8a7f2b20 <col:8> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x28b8a7f7b50 <col:8> 'int' 1
|   | |   |-ImplicitCastExpr 0x28b8a7f2b38 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x28b8a7f7b78 <col:11> 'int' 0
|   | |   |-ImplicitCastExpr 0x28b8a7f2b50 <col:14> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x28b8a7f7ba0 <col:14> 'int' 0
|   | |   `-ImplicitCastExpr 0x28b8a7f2b68 <col:17> 'u64':'unsigned long long' <IntegralCast>
|   | |     `-IntegerLiteral 0x28b8a7f7bc8 <col:17> 'int' 0
|   | |-InitListExpr 0x28b8a7f2bb0 <line:1526:6, line:1530:19> 'const smallfelem [3]'
|   | | |-InitListExpr 0x28b8a7f2c18 <line:1526:7, line:1527:26> 'const smallfelem':'u64 const[4]'
|   | | | |-IntegerLiteral 0x28b8a7f7ca8 <line:1526:8> 'unsigned long long' 16819389878359993612
|   | | | |-ImplicitCastExpr 0x28b8a7f2c78 <col:28> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x28b8a7f7cd0 <col:28> 'long long' 4873073520113514799
|   | | | |-IntegerLiteral 0x28b8a7f7cf8 <col:48> 'unsigned long long' 17284995840217074163
|   | | | `-ImplicitCastExpr 0x28b8a7f2c90 <line:1527:8> 'u64':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x28b8a7f7d20 <col:8> 'long long' 7562463719493563494
|   | | |-InitListExpr 0x28b8a7f2cb8 <line:1528:7, line:1529:26> 'const smallfelem':'u64 const[4]'
|   | | | |-IntegerLiteral 0x28b8a7f7da8 <line:1528:8> 'unsigned long long' 14843327652293659978
|   | | | |-ImplicitCastExpr 0x28b8a7f2d18 <col:28> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x28b8a7f7dd0 <col:28> 'long long' 7389276838502450726
|   | | | |-ImplicitCastExpr 0x28b8a7f2d30 <col:48> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x28b8a7f7df8 <col:48> 'long long' 6939722928163815411
|   | | | `-ImplicitCastExpr 0x28b8a7f2d48 <line:1529:8> 'u64':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x28b8a7f7e20 <col:8> 'long long' 3583110508470077984
|   | | `-InitListExpr 0x28b8a7f2d70 <line:1530:7, col:18> 'const smallfelem':'u64 const[4]'
|   | |   |-ImplicitCastExpr 0x28b8a7f2dd0 <col:8> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x28b8a7f7ea8 <col:8> 'int' 1
|   | |   |-ImplicitCastExpr 0x28b8a7f2de8 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x28b8a7f7ed0 <col:11> 'int' 0
|   | |   |-ImplicitCastExpr 0x28b8a7f2e00 <col:14> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x28b8a7f7ef8 <col:14> 'int' 0
|   | |   `-ImplicitCastExpr 0x28b8a7f2e18 <col:17> 'u64':'unsigned long long' <IntegralCast>
|   | |     `-IntegerLiteral 0x28b8a7f7f20 <col:17> 'int' 0
|   | |-InitListExpr 0x28b8a7f2e60 <line:1531:6, line:1535:19> 'const smallfelem [3]'
|   | | |-InitListExpr 0x28b8a7f4f20 <line:1531:7, line:1532:26> 'const smallfelem':'u64 const[4]'
|   | | | |-IntegerLiteral 0x28b8a7f8000 <line:1531:8> 'unsigned long long' 15234348820970614399
|   | | | |-ImplicitCastExpr 0x28b8a7f4f80 <col:28> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x28b8a7f8028 <col:28> 'long long' 944084751294372904
|   | | | |-ImplicitCastExpr 0x28b8a7f4f98 <col:48> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x28b8a7f8050 <col:48> 'long long' 7366871684117878688
|   | | | `-ImplicitCastExpr 0x28b8a7f4fb0 <line:1532:8> 'u64':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x28b8a7f8078 <col:8> 'long long' 4634977297227980217
|   | | |-InitListExpr 0x28b8a7f4fd8 <line:1533:7, line:1534:26> 'const smallfelem':'u64 const[4]'
|   | | | |-ImplicitCastExpr 0x28b8a7f5038 <line:1533:8> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x28b8a7f8100 <col:8> 'long long' 2547392258115446251
|   | | | |-IntegerLiteral 0x28b8a7f8128 <col:28> 'unsigned long long' 16655704750641106011
|   | | | |-IntegerLiteral 0x28b8a7f8150 <col:48> 'unsigned long long' 9668074726414027976
|   | | | `-IntegerLiteral 0x28b8a7f8178 <line:1534:8> 'unsigned long long' 18360979218528009313
|   | | `-InitListExpr 0x28b8a7f5060 <line:1535:7, col:18> 'const smallfelem':'u64 const[4]'
|   | |   |-ImplicitCastExpr 0x28b8a7f50c0 <col:8> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x28b8a7f8200 <col:8> 'int' 1
|   | |   |-ImplicitCastExpr 0x28b8a7f50d8 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x28b8a7f8228 <col:11> 'int' 0
|   | |   |-ImplicitCastExpr 0x28b8a7f50f0 <col:14> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x28b8a7f8250 <col:14> 'int' 0
|   | |   `-ImplicitCastExpr 0x28b8a7f5108 <col:17> 'u64':'unsigned long long' <IntegralCast>
|   | |     `-IntegerLiteral 0x28b8a7f8278 <col:17> 'int' 0
|   | |-InitListExpr 0x28b8a7f5150 <line:1536:6, line:1540:19> 'const smallfelem [3]'
|   | | |-InitListExpr 0x28b8a7f51b8 <line:1536:7, line:1537:26> 'const smallfelem':'u64 const[4]'
|   | | | |-ImplicitCastExpr 0x28b8a7f5218 <line:1536:8> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x28b8a7f8358 <col:8> 'long long' 8373436425878949804
|   | | | |-IntegerLiteral 0x28b8a7f8380 <col:28> 'unsigned long long' 12672949858381244324
|   | | | |-ImplicitCastExpr 0x28b8a7f5230 <col:48> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x28b8a7f83a8 <col:48> 'long long' 1311113366226075514
|   | | | `-ImplicitCastExpr 0x28b8a7f5248 <line:1537:8> 'u64':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x28b8a7f83d0 <col:8> 'long long' 2224139274171900954
|   | | |-InitListExpr 0x28b8a7f5270 <line:1538:7, line:1539:26> 'const smallfelem':'u64 const[4]'
|   | | | |-IntegerLiteral 0x28b8a7f8458 <line:1538:8> 'unsigned long long' 10349464555096373316
|   | | | |-ImplicitCastExpr 0x28b8a7f52d0 <col:28> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x28b8a7f8480 <col:28> 'long long' 3954278663023761687
|   | | | |-ImplicitCastExpr 0x28b8a7f52e8 <col:48> 'u64':'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x28b8a7f84a8 <col:48> 'long long' 884381536816411552
|   | | | `-ImplicitCastExpr 0x28b8a7f5300 <line:1539:8> 'u64':'unsigned long long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x28b8a7f84d0 <col:8> 'long long' 4832447639533305084
|   | | `-InitListExpr 0x28b8a7f5328 <line:1540:7, col:18> 'const smallfelem':'u64 const[4]'
|   | |   |-ImplicitCastExpr 0x28b8a7f5388 <col:8> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x28b8a7f8558 <col:8> 'int' 1
|   | |   |-ImplicitCastExpr 0x28b8a7f53a0 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x28b8a7f8580 <col:11> 'int' 0
|   | |   |-ImplicitCastExpr 0x28b8a7f53b8 <col:14> 'u64':'unsigned long long' <IntegralCast>
|   | |   | `-IntegerLiteral 0x28b8a7f85a8 <col:14> 'int' 0
|   | |   `-ImplicitCastExpr 0x28b8a7f53d0 <col:17> 'u64':'unsigned long long' <IntegralCast>
|   | |     `-IntegerLiteral 0x28b8a7f85d0 <col:17> 'int' 0
|   | `-InitListExpr 0x28b8a7f5418 <line:1541:6, line:1545:19> 'const smallfelem [3]'
|   |   |-InitListExpr 0x28b8a7f5480 <line:1541:7, line:1542:26> 'const smallfelem':'u64 const[4]'
|   |   | |-IntegerLiteral 0x28b8a7f86b0 <line:1541:8> 'unsigned long long' 10814749165039220965
|   |   | |-ImplicitCastExpr 0x28b8a7f54e0 <col:28> 'u64':'unsigned long long' <IntegralCast>
|   |   | | `-IntegerLiteral 0x28b8a7f86d8 <col:28> 'long long' 7399658494733087819
|   |   | |-ImplicitCastExpr 0x28b8a7f54f8 <col:48> 'u64':'unsigned long long' <IntegralCast>
|   |   | | `-IntegerLiteral 0x28b8a7f8700 <col:48> 'long long' 741483134296471098
|   |   | `-IntegerLiteral 0x28b8a7f8728 <line:1542:8> 'unsigned long long' 13010378930286731804
|   |   |-InitListExpr 0x28b8a7f5520 <line:1543:7, line:1544:26> 'const smallfelem':'u64 const[4]'
|   |   | |-ImplicitCastExpr 0x28b8a7f5580 <line:1543:8> 'u64':'unsigned long long' <IntegralCast>
|   |   | | `-IntegerLiteral 0x28b8a7f87b0 <col:8> 'long long' 498686754927156013
|   |   | |-IntegerLiteral 0x28b8a7f87d8 <col:28> 'unsigned long long' 13836434663360106392
|   |   | |-ImplicitCastExpr 0x28b8a7f5598 <col:48> 'u64':'unsigned long long' <IntegralCast>
|   |   | | `-IntegerLiteral 0x28b8a7f8800 <col:48> 'long long' 7211137999908042344
|   |   | `-IntegerLiteral 0x28b8a7f8828 <line:1544:8> 'unsigned long long' 18068465070929427883
|   |   `-InitListExpr 0x28b8a7f55c0 <line:1545:7, col:18> 'const smallfelem':'u64 const[4]'
|   |     |-ImplicitCastExpr 0x28b8a7f5620 <col:8> 'u64':'unsigned long long' <IntegralCast>
|   |     | `-IntegerLiteral 0x28b8a7f88b0 <col:8> 'int' 1
|   |     |-ImplicitCastExpr 0x28b8a7f5638 <col:11> 'u64':'unsigned long long' <IntegralCast>
|   |     | `-IntegerLiteral 0x28b8a7f88d8 <col:11> 'int' 0
|   |     |-ImplicitCastExpr 0x28b8a7f5650 <col:14> 'u64':'unsigned long long' <IntegralCast>
|   |     | `-IntegerLiteral 0x28b8a7f8900 <col:14> 'int' 0
|   |     `-ImplicitCastExpr 0x28b8a7f5668 <col:17> 'u64':'unsigned long long' <IntegralCast>
|   |       `-IntegerLiteral 0x28b8a7f8928 <col:17> 'int' 0
|   `-InitListExpr 0x28b8a7f5980 <line:1546:5, line:1623:20> 'const smallfelem [16][3]'
|     |-InitListExpr 0x28b8a7f5a70 <line:1546:6, line:1548:19> 'const smallfelem [3]'
|     | |-InitListExpr 0x28b8a7f5ad8 <line:1546:7, col:18> 'const smallfelem':'u64 const[4]'
|     | | |-ImplicitCastExpr 0x28b8a7f5b38 <col:8> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x28b8a7f8ac8 <col:8> 'int' 0
|     | | |-ImplicitCastExpr 0x28b8a7f5b50 <col:11> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x28b8a7f8af0 <col:11> 'int' 0
|     | | |-ImplicitCastExpr 0x28b8a7f5b68 <col:14> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x28b8a7f8b18 <col:14> 'int' 0
|     | | `-ImplicitCastExpr 0x28b8a7f5b80 <col:17> 'u64':'unsigned long long' <IntegralCast>
|     | |   `-IntegerLiteral 0x28b8a7f8b40 <col:17> 'int' 0
|     | |-InitListExpr 0x28b8a7f5ba8 <line:1547:7, col:18> 'const smallfelem':'u64 const[4]'
|     | | |-ImplicitCastExpr 0x28b8a7f5c08 <col:8> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x28b8a7f8bc8 <col:8> 'int' 0
|     | | |-ImplicitCastExpr 0x28b8a7f5c20 <col:11> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x28b8a7f8bf0 <col:11> 'int' 0
|     | | |-ImplicitCastExpr 0x28b8a7f5c38 <col:14> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x28b8a7f8c18 <col:14> 'int' 0
|     | | `-ImplicitCastExpr 0x28b8a7f5c50 <col:17> 'u64':'unsigned long long' <IntegralCast>
|     | |   `-IntegerLiteral 0x28b8a7f8c40 <col:17> 'int' 0
|     | `-InitListExpr 0x28b8a7f5c78 <line:1548:7, col:18> 'const smallfelem':'u64 const[4]'
|     |   |-ImplicitCastExpr 0x28b8a7f5cd8 <col:8> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x28b8a7f8cc8 <col:8> 'int' 0
|     |   |-ImplicitCastExpr 0x28b8a7f5cf0 <col:11> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x28b8a7f8cf0 <col:11> 'int' 0
|     |   |-ImplicitCastExpr 0x28b8a7f5d08 <col:14> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x28b8a7f8d18 <col:14> 'int' 0
|     |   `-ImplicitCastExpr 0x28b8a7f5d20 <col:17> 'u64':'unsigned long long' <IntegralCast>
|     |     `-IntegerLiteral 0x28b8a7f8d40 <col:17> 'int' 0
|     |-InitListExpr 0x28b8a7f5d68 <line:1549:6, line:1553:19> 'const smallfelem [3]'
|     | |-InitListExpr 0x28b8a7f5dd0 <line:1549:7, line:1550:26> 'const smallfelem':'u64 const[4]'
|     | | |-ImplicitCastExpr 0x28b8a7f5e30 <line:1549:8> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x28b8a7f8e20 <col:8> 'long long' 4204847071378430275
|     | | |-ImplicitCastExpr 0x28b8a7f5e48 <col:28> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x28b8a7f8e48 <col:28> 'long long' 1925598036946706358
|     | | |-ImplicitCastExpr 0x28b8a7f5e60 <col:48> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x28b8a7f8e70 <col:48> 'long long' 2406447439032381914
|     | | `-ImplicitCastExpr 0x28b8a7f5e78 <line:1550:8> 'u64':'unsigned long long' <IntegralCast>
|     | |   `-IntegerLiteral 0x28b8a7f8e98 <col:8> 'long long' 9215327188090531721
|     | |-InitListExpr 0x28b8a7f5ea0 <line:1551:7, line:1552:26> 'const smallfelem':'u64 const[4]'
|     | | |-IntegerLiteral 0x28b8a7fef70 <line:1551:8> 'unsigned long long' 15351949985270505729
|     | | |-ImplicitCastExpr 0x28b8a7f5f00 <col:28> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x28b8a7fef98 <col:28> 'long long' 8409299702805885458
|     | | |-IntegerLiteral 0x28b8a7fefc0 <col:48> 'unsigned long long' 11459959024969885425
|     | | `-IntegerLiteral 0x28b8a7fefe8 <line:1552:8> 'unsigned long long' 16615982825261643300
|     | `-InitListExpr 0x28b8a7f5f28 <line:1553:7, col:18> 'const smallfelem':'u64 const[4]'
|     |   |-ImplicitCastExpr 0x28b8a7f5f88 <col:8> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x28b8a7ff070 <col:8> 'int' 1
|     |   |-ImplicitCastExpr 0x28b8a7f5fa0 <col:11> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x28b8a7ff098 <col:11> 'int' 0
|     |   |-ImplicitCastExpr 0x28b8a7f5fb8 <col:14> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x28b8a7ff0c0 <col:14> 'int' 0
|     |   `-ImplicitCastExpr 0x28b8a7f5fd0 <col:17> 'u64':'unsigned long long' <IntegralCast>
|     |     `-IntegerLiteral 0x28b8a7ff0e8 <col:17> 'int' 0
|     |-InitListExpr 0x28b8a7f6018 <line:1554:6, line:1558:19> 'const smallfelem [3]'
|     | |-InitListExpr 0x28b8a7f6080 <line:1554:7, line:1555:26> 'const smallfelem':'u64 const[4]'
|     | | |-IntegerLiteral 0x28b8a7ff1c8 <line:1554:8> 'unsigned long long' 12126691010890834318
|     | | |-IntegerLiteral 0x28b8a7ff1f0 <col:28> 'unsigned long long' 16835899823751823681
|     | | |-ImplicitCastExpr 0x28b8a7f60e0 <col:48> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x28b8a7ff218 <col:48> 'long long' 6307303622281718018
|     | | `-ImplicitCastExpr 0x28b8a7f60f8 <line:1555:8> 'u64':'unsigned long long' <IntegralCast>
|     | |   `-IntegerLiteral 0x28b8a7ff240 <col:8> 'long long' 5357964581017122726
|     | |-InitListExpr 0x28b8a7f6120 <line:1556:7, line:1557:26> 'const smallfelem':'u64 const[4]'
|     | | |-ImplicitCastExpr 0x28b8a7f6180 <line:1556:8> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x28b8a7ff2c8 <col:8> 'long long' 858738897768626240
|     | | |-ImplicitCastExpr 0x28b8a7f6198 <col:28> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x28b8a7ff2f0 <col:28> 'long long' 7092519962948038045
|     | | |-IntegerLiteral 0x28b8a7ff318 <col:48> 'unsigned long long' 14133989960413510976
|     | | `-IntegerLiteral 0x28b8a7ff340 <line:1557:8> 'unsigned long long' 16938959713482082801
|     | `-InitListExpr 0x28b8a7f61c0 <line:1558:7, col:18> 'const smallfelem':'u64 const[4]'
|     |   |-ImplicitCastExpr 0x28b8a7f6220 <col:8> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x28b8a7ff3c8 <col:8> 'int' 1
|     |   |-ImplicitCastExpr 0x28b8a7f6238 <col:11> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x28b8a7ff3f0 <col:11> 'int' 0
|     |   |-ImplicitCastExpr 0x28b8a7f6250 <col:14> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x28b8a7ff418 <col:14> 'int' 0
|     |   `-ImplicitCastExpr 0x28b8a7f6268 <col:17> 'u64':'unsigned long long' <IntegralCast>
|     |     `-IntegerLiteral 0x28b8a7ff440 <col:17> 'int' 0
|     |-InitListExpr 0x28b8a7f62b0 <line:1559:6, line:1563:19> 'const smallfelem [3]'
|     | |-InitListExpr 0x28b8a7f6318 <line:1559:7, line:1560:26> 'const smallfelem':'u64 const[4]'
|     | | |-IntegerLiteral 0x28b8a7ff520 <line:1559:8> 'unsigned long long' 18012970283197280897
|     | | |-ImplicitCastExpr 0x28b8a7f6378 <col:28> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x28b8a7ff548 <col:28> 'long long' 6796710378924666044
|     | | |-IntegerLiteral 0x28b8a7ff570 <col:48> 'unsigned long long' 14069973639409027159
|     | | `-ImplicitCastExpr 0x28b8a7f6390 <line:1560:8> 'u64':'unsigned long long' <IntegralCast>
|     | |   `-IntegerLiteral 0x28b8a7ff598 <col:8> 'long long' 540915916971057674
|     | |-InitListExpr 0x28b8a7f63b8 <line:1561:7, line:1562:26> 'const smallfelem':'u64 const[4]'
|     | | |-ImplicitCastExpr 0x28b8a7f6418 <line:1561:8> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x28b8a7ff620 <col:8> 'long long' 6522131241343737728
|     | | |-IntegerLiteral 0x28b8a7ff648 <col:28> 'unsigned long long' 9869655002594280931
|     | | |-IntegerLiteral 0x28b8a7ff670 <col:48> 'unsigned long long' 10930976606567621684
|     | | `-ImplicitCastExpr 0x28b8a7f6430 <line:1562:8> 'u64':'unsigned long long' <IntegralCast>
|     | |   `-IntegerLiteral 0x28b8a7ff698 <col:8> 'long long' 7569669774902629779
|     | `-InitListExpr 0x28b8a7f6458 <line:1563:7, col:18> 'const smallfelem':'u64 const[4]'
|     |   |-ImplicitCastExpr 0x28b8a7f64b8 <col:8> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x28b8a7ff720 <col:8> 'int' 1
|     |   |-ImplicitCastExpr 0x28b8a7f64d0 <col:11> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x28b8a7ff748 <col:11> 'int' 0
|     |   |-ImplicitCastExpr 0x28b8a7f64e8 <col:14> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x28b8a7ff770 <col:14> 'int' 0
|     |   `-ImplicitCastExpr 0x28b8a7f6500 <col:17> 'u64':'unsigned long long' <IntegralCast>
|     |     `-IntegerLiteral 0x28b8a7ff798 <col:17> 'int' 0
|     |-InitListExpr 0x28b8a7f6548 <line:1564:6, line:1568:19> 'const smallfelem [3]'
|     | |-InitListExpr 0x28b8a7f65b0 <line:1564:7, line:1565:26> 'const smallfelem':'u64 const[4]'
|     | | |-IntegerLiteral 0x28b8a7ff878 <line:1564:8> 'unsigned long long' 12603824238579167018
|     | | |-IntegerLiteral 0x28b8a7ff8a0 <col:28> 'unsigned long long' 11406550811417637946
|     | | |-IntegerLiteral 0x28b8a7ff8c8 <col:48> 'unsigned long long' 17681745613931615014
|     | | `-IntegerLiteral 0x28b8a7ff8f0 <line:1565:8> 'unsigned long long' 9967415225131415063
|     | |-InitListExpr 0x28b8a7f6620 <line:1566:7, line:1567:26> 'const smallfelem':'u64 const[4]'
|     | | |-IntegerLiteral 0x28b8a7ff978 <line:1566:8> 'unsigned long long' 14265609955841184951
|     | | |-IntegerLiteral 0x28b8a7ff9a0 <col:28> 'unsigned long long' 14836321199344875113
|     | | |-ImplicitCastExpr 0x28b8a7f6680 <col:48> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x28b8a7ff9c8 <col:48> 'long long' 4026262154848670399
|     | | `-ImplicitCastExpr 0x28b8a7f6698 <line:1567:8> 'u64':'unsigned long long' <IntegralCast>
|     | |   `-IntegerLiteral 0x28b8a7ff9f0 <col:8> 'long long' 312367424096734167
|     | `-InitListExpr 0x28b8a7f66c0 <line:1568:7, col:18> 'const smallfelem':'u64 const[4]'
|     |   |-ImplicitCastExpr 0x28b8a7f6720 <col:8> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x28b8a7ffa78 <col:8> 'int' 1
|     |   |-ImplicitCastExpr 0x28b8a7f6738 <col:11> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x28b8a7ffaa0 <col:11> 'int' 0
|     |   |-ImplicitCastExpr 0x28b8a7f6750 <col:14> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x28b8a7ffac8 <col:14> 'int' 0
|     |   `-ImplicitCastExpr 0x28b8a7f6768 <col:17> 'u64':'unsigned long long' <IntegralCast>
|     |     `-IntegerLiteral 0x28b8a7ffaf0 <col:17> 'int' 0
|     |-InitListExpr 0x28b8a7f67b0 <line:1569:6, line:1573:19> 'const smallfelem [3]'
|     | |-InitListExpr 0x28b8a7f6818 <line:1569:7, line:1570:26> 'const smallfelem':'u64 const[4]'
|     | | |-ImplicitCastExpr 0x28b8a7f6878 <line:1569:8> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x28b8a7ffbd0 <col:8> 'long long' 867627015970731481
|     | | |-IntegerLiteral 0x28b8a7ffbf8 <col:28> 'unsigned long long' 17988713241524421700
|     | | |-ImplicitCastExpr 0x28b8a7f6890 <col:48> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x28b8a7ffc20 <col:48> 'long long' 5787311655235732089
|     | | `-ImplicitCastExpr 0x28b8a7f68a8 <line:1570:8> 'u64':'unsigned long long' <IntegralCast>
|     | |   `-IntegerLiteral 0x28b8a7ffc48 <col:8> 'long long' 484940130495201910
|     | |-InitListExpr 0x28b8a7f68d0 <line:1571:7, line:1572:26> 'const smallfelem':'u64 const[4]'
|     | | |-IntegerLiteral 0x28b8a7ffcd0 <line:1571:8> 'unsigned long long' 14462376519995546313
|     | | |-IntegerLiteral 0x28b8a7ffcf8 <col:28> 'unsigned long long' 16050136703869978383
|     | | |-ImplicitCastExpr 0x28b8a7f6930 <col:48> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x28b8a7ffd20 <col:48> 'long long' 4791065911985892208
|     | | `-ImplicitCastExpr 0x28b8a7f6948 <line:1572:8> 'u64':'unsigned long long' <IntegralCast>
|     | |   `-IntegerLiteral 0x28b8a7ffd48 <col:8> 'long long' 6577346714434056586
|     | `-InitListExpr 0x28b8a7f6970 <line:1573:7, col:18> 'const smallfelem':'u64 const[4]'
|     |   |-ImplicitCastExpr 0x28b8a7f69d0 <col:8> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x28b8a7ffdd0 <col:8> 'int' 1
|     |   |-ImplicitCastExpr 0x28b8a7f69e8 <col:11> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x28b8a7ffdf8 <col:11> 'int' 0
|     |   |-ImplicitCastExpr 0x28b8a7f6a00 <col:14> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x28b8a7ffe20 <col:14> 'int' 0
|     |   `-ImplicitCastExpr 0x28b8a7f6a18 <col:17> 'u64':'unsigned long long' <IntegralCast>
|     |     `-IntegerLiteral 0x28b8a7ffe48 <col:17> 'int' 0
|     |-InitListExpr 0x28b8a7f6a60 <line:1574:6, line:1578:19> 'const smallfelem [3]'
|     | |-InitListExpr 0x28b8a7f6ac8 <line:1574:7, line:1575:26> 'const smallfelem':'u64 const[4]'
|     | | |-ImplicitCastExpr 0x28b8a7f6b28 <line:1574:8> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x28b8a7fff28 <col:8> 'long long' 8961105821002642442
|     | | |-ImplicitCastExpr 0x28b8a7f6b40 <col:28> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x28b8a7fff50 <col:28> 'long long' 5572184639073054523
|     | | |-ImplicitCastExpr 0x28b8a7f6b58 <col:48> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x28b8a7fff78 <col:48> 'long long' 3001457500238366168
|     | | `-ImplicitCastExpr 0x28b8a7f6b70 <line:1575:8> 'u64':'unsigned long long' <IntegralCast>
|     | |   `-IntegerLiteral 0x28b8a7fffa0 <col:8> 'long long' 4479258976280561928
|     | |-InitListExpr 0x28b8a7f6b98 <line:1576:7, line:1577:26> 'const smallfelem':'u64 const[4]'
|     | | |-ImplicitCastExpr 0x28b8a7f6bf8 <line:1576:8> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x28b8a800028 <col:8> 'long long' 1453864872937502800
|     | | |-IntegerLiteral 0x28b8a800050 <col:28> 'unsigned long long' 12472513303615887232
|     | | |-ImplicitCastExpr 0x28b8a7f6c10 <col:48> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x28b8a800078 <col:48> 'long long' 2239712233336787437
|     | | `-ImplicitCastExpr 0x28b8a7f6c28 <line:1577:8> 'u64':'unsigned long long' <IntegralCast>
|     | |   `-IntegerLiteral 0x28b8a8000a0 <col:8> 'long long' 2565803748450573950
|     | `-InitListExpr 0x28b8a7f6c50 <line:1578:7, col:18> 'const smallfelem':'u64 const[4]'
|     |   |-ImplicitCastExpr 0x28b8a7f6cb0 <col:8> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x28b8a800128 <col:8> 'int' 1
|     |   |-ImplicitCastExpr 0x28b8a7f6cc8 <col:11> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x28b8a800150 <col:11> 'int' 0
|     |   |-ImplicitCastExpr 0x28b8a7f6ce0 <col:14> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x28b8a800178 <col:14> 'int' 0
|     |   `-ImplicitCastExpr 0x28b8a7f6cf8 <col:17> 'u64':'unsigned long long' <IntegralCast>
|     |     `-IntegerLiteral 0x28b8a8001a0 <col:17> 'int' 0
|     |-InitListExpr 0x28b8a7f6d40 <line:1579:6, line:1583:19> 'const smallfelem [3]'
|     | |-InitListExpr 0x28b8a7f6da8 <line:1579:7, line:1580:26> 'const smallfelem':'u64 const[4]'
|     | | |-ImplicitCastExpr 0x28b8a7f6e08 <line:1579:8> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x28b8a800280 <col:8> 'long long' 8702104923482042922
|     | | |-ImplicitCastExpr 0x28b8a7f6e20 <col:28> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x28b8a8002a8 <col:28> 'long long' 3485186220776451982
|     | | |-IntegerLiteral 0x28b8a8002d0 <col:48> 'unsigned long long' 15837672636651286228
|     | | `-IntegerLiteral 0x28b8a8002f8 <line:1580:8> 'unsigned long long' 9371794945225469943
|     | |-InitListExpr 0x28b8a7f6e48 <line:1581:7, line:1582:26> 'const smallfelem':'u64 const[4]'
|     | | |-ImplicitCastExpr 0x28b8a7f6ea8 <line:1581:8> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x28b8a800380 <col:8> 'long long' 7837746206991051732
|     | | |-ImplicitCastExpr 0x28b8a7f6ec0 <col:28> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x28b8a8003a8 <col:28> 'long long' 8484321636022914244
|     | | |-ImplicitCastExpr 0x28b8a7f6ed8 <col:48> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x28b8a8003d0 <col:48> 'long long' 1965851040684971219
|     | | `-ImplicitCastExpr 0x28b8a7f6ef0 <line:1582:8> 'u64':'unsigned long long' <IntegralCast>
|     | |   `-IntegerLiteral 0x28b8a8003f8 <col:8> 'long long' 1442285393364518380
|     | `-InitListExpr 0x28b8a7fcf60 <line:1583:7, col:18> 'const smallfelem':'u64 const[4]'
|     |   |-ImplicitCastExpr 0x28b8a7fcfc0 <col:8> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x28b8a800480 <col:8> 'int' 1
|     |   |-ImplicitCastExpr 0x28b8a7fcfd8 <col:11> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x28b8a8004a8 <col:11> 'int' 0
|     |   |-ImplicitCastExpr 0x28b8a7fcff0 <col:14> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x28b8a8004d0 <col:14> 'int' 0
|     |   `-ImplicitCastExpr 0x28b8a7fd008 <col:17> 'u64':'unsigned long long' <IntegralCast>
|     |     `-IntegerLiteral 0x28b8a8004f8 <col:17> 'int' 0
|     |-InitListExpr 0x28b8a7fd050 <line:1584:6, line:1588:19> 'const smallfelem [3]'
|     | |-InitListExpr 0x28b8a7fd0b8 <line:1584:7, line:1585:26> 'const smallfelem':'u64 const[4]'
|     | | |-ImplicitCastExpr 0x28b8a7fd118 <line:1584:8> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x28b8a8005d8 <col:8> 'long long' 7669699507266117383
|     | | |-IntegerLiteral 0x28b8a800600 <col:28> 'unsigned long long' 18263772118963940312
|     | | |-IntegerLiteral 0x28b8a800628 <col:48> 'unsigned long long' 16959156411216990206
|     | | `-ImplicitCastExpr 0x28b8a7fd130 <line:1585:8> 'u64':'unsigned long long' <IntegralCast>
|     | |   `-IntegerLiteral 0x28b8a800650 <col:8> 'long long' 7563435295795044334
|     | |-InitListExpr 0x28b8a7fd158 <line:1586:7, line:1587:26> 'const smallfelem':'u64 const[4]'
|     | | |-IntegerLiteral 0x28b8a8006d8 <line:1586:8> 'unsigned long long' 10432429702343894613
|     | | |-IntegerLiteral 0x28b8a800700 <col:28> 'unsigned long long' 14939165448171732863
|     | | |-IntegerLiteral 0x28b8a800728 <col:48> 'unsigned long long' 18142755831876440104
|     | | `-IntegerLiteral 0x28b8a800750 <line:1587:8> 'unsigned long long' 14691303536741059814
|     | `-InitListExpr 0x28b8a7fd1c8 <line:1588:7, col:18> 'const smallfelem':'u64 const[4]'
|     |   |-ImplicitCastExpr 0x28b8a7fd228 <col:8> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x28b8a8007d8 <col:8> 'int' 1
|     |   |-ImplicitCastExpr 0x28b8a7fd240 <col:11> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x28b8a800800 <col:11> 'int' 0
|     |   |-ImplicitCastExpr 0x28b8a7fd258 <col:14> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x28b8a800828 <col:14> 'int' 0
|     |   `-ImplicitCastExpr 0x28b8a7fd270 <col:17> 'u64':'unsigned long long' <IntegralCast>
|     |     `-IntegerLiteral 0x28b8a800850 <col:17> 'int' 0
|     |-InitListExpr 0x28b8a7fd2b8 <line:1589:6, line:1593:19> 'const smallfelem [3]'
|     | |-InitListExpr 0x28b8a7fd320 <line:1589:7, line:1590:26> 'const smallfelem':'u64 const[4]'
|     | | |-IntegerLiteral 0x28b8a800930 <line:1589:8> 'unsigned long long' 16832431112848860353
|     | | |-IntegerLiteral 0x28b8a800958 <col:28> 'unsigned long long' 18195368276845830772
|     | | |-ImplicitCastExpr 0x28b8a7fd380 <col:48> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x28b8a800980 <col:48> 'long long' 2526363943779232039
|     | | `-IntegerLiteral 0x28b8a8009a8 <line:1590:8> 'unsigned long long' 15038356215644160265
|     | |-InitListExpr 0x28b8a7fd3a8 <line:1591:7, line:1592:26> 'const smallfelem':'u64 const[4]'
|     | | |-ImplicitCastExpr 0x28b8a7fd408 <line:1591:8> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x28b8a800a30 <col:8> 'long long' 4829457343136483686
|     | | |-ImplicitCastExpr 0x28b8a7fd420 <col:28> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x28b8a800a58 <col:28> 'long long' 1204775539773815621
|     | | |-ImplicitCastExpr 0x28b8a7fd438 <col:48> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x28b8a800a80 <col:48> 'long long' 9057411091819482746
|     | | `-IntegerLiteral 0x28b8a800aa8 <line:1592:8> 'unsigned long long' 10886424616474450405
|     | `-InitListExpr 0x28b8a7fd460 <line:1593:7, col:18> 'const smallfelem':'u64 const[4]'
|     |   |-ImplicitCastExpr 0x28b8a7fd4c0 <col:8> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x28b8a800b30 <col:8> 'int' 1
|     |   |-ImplicitCastExpr 0x28b8a7fd4d8 <col:11> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x28b8a800b58 <col:11> 'int' 0
|     |   |-ImplicitCastExpr 0x28b8a7fd4f0 <col:14> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x28b8a800b80 <col:14> 'int' 0
|     |   `-ImplicitCastExpr 0x28b8a7fd508 <col:17> 'u64':'unsigned long long' <IntegralCast>
|     |     `-IntegerLiteral 0x28b8a800ba8 <col:17> 'int' 0
|     |-InitListExpr 0x28b8a7fd550 <line:1594:6, line:1598:19> 'const smallfelem [3]'
|     | |-InitListExpr 0x28b8a7fd5b8 <line:1594:7, line:1595:26> 'const smallfelem':'u64 const[4]'
|     | | |-ImplicitCastExpr 0x28b8a7fd618 <line:1594:8> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x28b8a800c88 <col:8> 'long long' 5464756572288098249
|     | | |-ImplicitCastExpr 0x28b8a7fd630 <col:28> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x28b8a800cb0 <col:28> 'long long' 6337288834372384886
|     | | |-IntegerLiteral 0x28b8a800cd8 <col:48> 'unsigned long long' 14039351322695960199
|     | | `-IntegerLiteral 0x28b8a800d00 <line:1595:8> 'unsigned long long' 10814849148613192378
|     | |-InitListExpr 0x28b8a7fd658 <line:1596:7, line:1597:26> 'const smallfelem':'u64 const[4]'
|     | | |-ImplicitCastExpr 0x28b8a7fd6b8 <line:1596:8> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x28b8a800d88 <col:8> 'long long' 5303406157379959390
|     | | |-ImplicitCastExpr 0x28b8a7fd6d0 <col:28> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x28b8a800db0 <col:28> 'long long' 7614207622125570852
|     | | |-ImplicitCastExpr 0x28b8a7fd6e8 <col:48> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x28b8a800dd8 <col:48> 'long long' 3238635979046982428
|     | | `-ImplicitCastExpr 0x28b8a7fd700 <line:1597:8> 'u64':'unsigned long long' <IntegralCast>
|     | |   `-IntegerLiteral 0x28b8a800e00 <col:8> 'long long' 8848341461748899396
|     | `-InitListExpr 0x28b8a7fd728 <line:1598:7, col:18> 'const smallfelem':'u64 const[4]'
|     |   |-ImplicitCastExpr 0x28b8a7fd788 <col:8> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x28b8a800e88 <col:8> 'int' 1
|     |   |-ImplicitCastExpr 0x28b8a7fd7a0 <col:11> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x28b8a800eb0 <col:11> 'int' 0
|     |   |-ImplicitCastExpr 0x28b8a7fd7b8 <col:14> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x28b8a800ed8 <col:14> 'int' 0
|     |   `-ImplicitCastExpr 0x28b8a7fd7d0 <col:17> 'u64':'unsigned long long' <IntegralCast>
|     |     `-IntegerLiteral 0x28b8a800f00 <col:17> 'int' 0
|     |-InitListExpr 0x28b8a7fd818 <line:1599:6, line:1603:19> 'const smallfelem [3]'
|     | |-InitListExpr 0x28b8a7fd880 <line:1599:7, line:1600:26> 'const smallfelem':'u64 const[4]'
|     | | |-ImplicitCastExpr 0x28b8a7fd8e0 <line:1599:8> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x28b8a7f2f88 <col:8> 'long long' 2688230699866182848
|     | | |-IntegerLiteral 0x28b8a7f2fb0 <col:28> 'unsigned long long' 17689871680306571355
|     | | |-IntegerLiteral 0x28b8a7f2fd8 <col:48> 'unsigned long long' 11965369384869145322
|     | | `-ImplicitCastExpr 0x28b8a7fd8f8 <line:1600:8> 'u64':'unsigned long long' <IntegralCast>
|     | |   `-IntegerLiteral 0x28b8a7f3000 <col:8> 'long long' 2660390208594493275
|     | |-InitListExpr 0x28b8a7fd920 <line:1601:7, line:1602:26> 'const smallfelem':'u64 const[4]'
|     | | |-IntegerLiteral 0x28b8a7f3088 <line:1601:8> 'unsigned long long' 16419645726685552106
|     | | |-IntegerLiteral 0x28b8a7f30b0 <col:28> 'unsigned long long' 18370063315756542799
|     | | |-ImplicitCastExpr 0x28b8a7fd980 <col:48> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x28b8a7f30d8 <col:48> 'long long' 8372514931683904589
|     | | `-ImplicitCastExpr 0x28b8a7fd998 <line:1602:8> 'u64':'unsigned long long' <IntegralCast>
|     | |   `-IntegerLiteral 0x28b8a7f3100 <col:8> 'long long' 7636013446400604620
|     | `-InitListExpr 0x28b8a7fd9c0 <line:1603:7, col:18> 'const smallfelem':'u64 const[4]'
|     |   |-ImplicitCastExpr 0x28b8a7fda20 <col:8> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x28b8a7f3188 <col:8> 'int' 1
|     |   |-ImplicitCastExpr 0x28b8a7fda38 <col:11> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x28b8a7f31b0 <col:11> 'int' 0
|     |   |-ImplicitCastExpr 0x28b8a7fda50 <col:14> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x28b8a7f31d8 <col:14> 'int' 0
|     |   `-ImplicitCastExpr 0x28b8a7fda68 <col:17> 'u64':'unsigned long long' <IntegralCast>
|     |     `-IntegerLiteral 0x28b8a7f3200 <col:17> 'int' 0
|     |-InitListExpr 0x28b8a7fdab0 <line:1604:6, line:1608:19> 'const smallfelem [3]'
|     | |-InitListExpr 0x28b8a7fdb18 <line:1604:7, line:1605:26> 'const smallfelem':'u64 const[4]'
|     | | |-IntegerLiteral 0x28b8a7f32e0 <line:1604:8> 'unsigned long long' 17213966368603666101
|     | | |-ImplicitCastExpr 0x28b8a7fdb78 <col:28> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x28b8a7f3308 <col:28> 'long long' 9137858211030508120
|     | | |-IntegerLiteral 0x28b8a7f3330 <col:48> 'unsigned long long' 12980167869281043732
|     | | `-IntegerLiteral 0x28b8a7f3358 <line:1605:8> 'unsigned long long' 16510007652016890119
|     | |-InitListExpr 0x28b8a7fdba0 <line:1606:7, line:1607:26> 'const smallfelem':'u64 const[4]'
|     | | |-IntegerLiteral 0x28b8a7f33e0 <line:1606:8> 'unsigned long long' 11699170337035859005
|     | | |-IntegerLiteral 0x28b8a7f3408 <col:28> 'unsigned long long' 10135670842130700366
|     | | |-IntegerLiteral 0x28b8a7f3430 <col:48> 'unsigned long long' 11974957831620041222
|     | | `-ImplicitCastExpr 0x28b8a7fdc00 <line:1607:8> 'u64':'unsigned long long' <IntegralCast>
|     | |   `-IntegerLiteral 0x28b8a7f3458 <col:8> 'long long' 2031292942051382151
|     | `-InitListExpr 0x28b8a7fdc28 <line:1608:7, col:18> 'const smallfelem':'u64 const[4]'
|     |   |-ImplicitCastExpr 0x28b8a7fdc88 <col:8> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x28b8a7f34e0 <col:8> 'int' 1
|     |   |-ImplicitCastExpr 0x28b8a7fdca0 <col:11> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x28b8a7f3508 <col:11> 'int' 0
|     |   |-ImplicitCastExpr 0x28b8a7fdcb8 <col:14> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x28b8a7f3530 <col:14> 'int' 0
|     |   `-ImplicitCastExpr 0x28b8a7fdcd0 <col:17> 'u64':'unsigned long long' <IntegralCast>
|     |     `-IntegerLiteral 0x28b8a7f3558 <col:17> 'int' 0
|     |-InitListExpr 0x28b8a7fdd18 <line:1609:6, line:1613:19> 'const smallfelem [3]'
|     | |-InitListExpr 0x28b8a7fdd80 <line:1609:7, line:1610:26> 'const smallfelem':'u64 const[4]'
|     | | |-IntegerLiteral 0x28b8a7f3638 <line:1609:8> 'unsigned long long' 10562590303857394777
|     | | |-IntegerLiteral 0x28b8a7f3660 <col:28> 'unsigned long long' 12682497754009880974
|     | | |-IntegerLiteral 0x28b8a7f3688 <col:48> 'unsigned long long' 14196638462869837864
|     | | `-ImplicitCastExpr 0x28b8a7fdde0 <line:1610:8> 'u64':'unsigned long long' <IntegralCast>
|     | |   `-IntegerLiteral 0x28b8a7f36b0 <col:8> 'long long' 2357770240294970627
|     | |-InitListExpr 0x28b8a7fde08 <line:1611:7, line:1612:26> 'const smallfelem':'u64 const[4]'
|     | | |-ImplicitCastExpr 0x28b8a7fde68 <line:1611:8> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x28b8a7f3738 <col:8> 'long long' 3486656228478141047
|     | | |-ImplicitCastExpr 0x28b8a7fde80 <col:28> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x28b8a7f3760 <col:28> 'long long' 2005572102683722461
|     | | |-ImplicitCastExpr 0x28b8a7fde98 <col:48> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x28b8a7f3788 <col:48> 'long long' 941725040706691140
|     | | `-IntegerLiteral 0x28b8a7f37b0 <line:1612:8> 'unsigned long long' 17710117778563233470
|     | `-InitListExpr 0x28b8a7fdec0 <line:1613:7, col:18> 'const smallfelem':'u64 const[4]'
|     |   |-ImplicitCastExpr 0x28b8a7fdf20 <col:8> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x28b8a7f3838 <col:8> 'int' 1
|     |   |-ImplicitCastExpr 0x28b8a7fdf38 <col:11> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x28b8a7f3860 <col:11> 'int' 0
|     |   |-ImplicitCastExpr 0x28b8a7fdf50 <col:14> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x28b8a7f3888 <col:14> 'int' 0
|     |   `-ImplicitCastExpr 0x28b8a7fdf68 <col:17> 'u64':'unsigned long long' <IntegralCast>
|     |     `-IntegerLiteral 0x28b8a7f38b0 <col:17> 'int' 0
|     |-InitListExpr 0x28b8a7fdfb0 <line:1614:6, line:1618:19> 'const smallfelem [3]'
|     | |-InitListExpr 0x28b8a7fe018 <line:1614:7, line:1615:26> 'const smallfelem':'u64 const[4]'
|     | | |-IntegerLiteral 0x28b8a7f3990 <line:1614:8> 'unsigned long long' 10129807730841853457
|     | | |-ImplicitCastExpr 0x28b8a7fe078 <col:28> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x28b8a7f39b8 <col:28> 'long long' 4068663205997555039
|     | | |-IntegerLiteral 0x28b8a7f39e0 <col:48> 'unsigned long long' 11841304802401167958
|     | | `-ImplicitCastExpr 0x28b8a7fe090 <line:1615:8> 'u64':'unsigned long long' <IntegralCast>
|     | |   `-IntegerLiteral 0x28b8a7f3a08 <col:8> 'long long' 2222475534487523513
|     | |-InitListExpr 0x28b8a7fe0b8 <line:1616:7, line:1617:26> 'const smallfelem':'u64 const[4]'
|     | | |-IntegerLiteral 0x28b8a7f3a90 <line:1616:8> 'unsigned long long' 11601582869891561609
|     | | |-ImplicitCastExpr 0x28b8a7fe118 <col:28> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x28b8a7f3ab8 <col:28> 'long long' 424693911077573444
|     | | |-ImplicitCastExpr 0x28b8a7fe130 <col:48> 'u64':'unsigned long long' <IntegralCast>
|     | | | `-IntegerLiteral 0x28b8a7f3ae0 <col:48> 'long long' 5959705901008562724
|     | | `-ImplicitCastExpr 0x28b8a7fe148 <line:1617:8> 'u64':'unsigned long long' <IntegralCast>
|     | |   `-IntegerLiteral 0x28b8a7f3b08 <col:8> 'long long' 4191448208365790586
|     | `-InitListExpr 0x28b8a7fe170 <line:1618:7, col:18> 'const smallfelem':'u64 const[4]'
|     |   |-ImplicitCastExpr 0x28b8a7fe1d0 <col:8> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x28b8a7f3b90 <col:8> 'int' 1
|     |   |-ImplicitCastExpr 0x28b8a7fe1e8 <col:11> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x28b8a7f3bb8 <col:11> 'int' 0
|     |   |-ImplicitCastExpr 0x28b8a7fe200 <col:14> 'u64':'unsigned long long' <IntegralCast>
|     |   | `-IntegerLiteral 0x28b8a7f3be0 <col:14> 'int' 0
|     |   `-ImplicitCastExpr 0x28b8a7fe218 <col:17> 'u64':'unsigned long long' <IntegralCast>
|     |     `-IntegerLiteral 0x28b8a7f3c08 <col:17> 'int' 0
|     `-InitListExpr 0x28b8a7fe260 <line:1619:6, line:1623:19> 'const smallfelem [3]'
|       |-InitListExpr 0x28b8a7fe2c8 <line:1619:7, line:1620:26> 'const smallfelem':'u64 const[4]'
|       | |-IntegerLiteral 0x28b8a7f3ce8 <line:1619:8> 'unsigned long long' 17442373942447506493
|       | |-IntegerLiteral 0x28b8a7f3d10 <col:28> 'unsigned long long' 17523545791397714530
|       | |-IntegerLiteral 0x28b8a7f3d38 <col:48> 'unsigned long long' 18193736125741632571
|       | `-ImplicitCastExpr 0x28b8a7fe328 <line:1620:8> 'u64':'unsigned long long' <IntegralCast>
|       |   `-IntegerLiteral 0x28b8a7f3d60 <col:8> 'long long' 1584956206744459766
|       |-InitListExpr 0x28b8a7fe350 <line:1621:7, line:1622:26> 'const smallfelem':'u64 const[4]'
|       | |-ImplicitCastExpr 0x28b8a7fe3b0 <line:1621:8> 'u64':'unsigned long long' <IntegralCast>
|       | | `-IntegerLiteral 0x28b8a7f3de8 <col:8> 'long long' 5773195294502653146
|       | |-ImplicitCastExpr 0x28b8a7fe3c8 <col:28> 'u64':'unsigned long long' <IntegralCast>
|       | | `-IntegerLiteral 0x28b8a7f3e10 <col:28> 'long long' 4751157856429321220
|       | |-ImplicitCastExpr 0x28b8a7fe3e0 <col:48> 'u64':'unsigned long long' <IntegralCast>
|       | | `-IntegerLiteral 0x28b8a7f3e38 <col:48> 'long long' 6160255002369724667
|       | `-ImplicitCastExpr 0x28b8a7fe3f8 <line:1622:8> 'u64':'unsigned long long' <IntegralCast>
|       |   `-IntegerLiteral 0x28b8a7f3e60 <col:8> 'long long' 5383409808306421633
|       `-InitListExpr 0x28b8a7fe420 <line:1623:7, col:18> 'const smallfelem':'u64 const[4]'
|         |-ImplicitCastExpr 0x28b8a7fe480 <col:8> 'u64':'unsigned long long' <IntegralCast>
|         | `-IntegerLiteral 0x28b8a7f3ee8 <col:8> 'int' 1
|         |-ImplicitCastExpr 0x28b8a7fe498 <col:11> 'u64':'unsigned long long' <IntegralCast>
|         | `-IntegerLiteral 0x28b8a7f3f10 <col:11> 'int' 0
|         |-ImplicitCastExpr 0x28b8a7fe4b0 <col:14> 'u64':'unsigned long long' <IntegralCast>
|         | `-IntegerLiteral 0x28b8a7f3f38 <col:14> 'int' 0
|         `-ImplicitCastExpr 0x28b8a7fe4c8 <col:17> 'u64':'unsigned long long' <IntegralCast>
|           `-IntegerLiteral 0x28b8a7f3f60 <col:17> 'int' 0
|-FunctionDecl 0x28b8a7fea68 <line:1630:1, line:1649:1> line:1630:13 used select_point 'void (const u64, unsigned int, const smallfelem (*)[3], smallfelem *)' static
| |-ParmVarDecl 0x28b8a7fe4f0 <col:26, col:36> col:36 used idx 'const u64':'const unsigned long long'
| |-ParmVarDecl 0x28b8a7fe570 <col:41, col:54> col:54 used size 'unsigned int'
| |-ParmVarDecl 0x28b8a7fe720 <line:1631:26, col:57> col:43 used pre_comp 'const smallfelem (*)[3]':'const smallfelem (*)[3]'
| |-ParmVarDecl 0x28b8a7fe8c0 <col:60, col:76> col:71 used out 'smallfelem *':'smallfelem *'
| `-CompoundStmt 0x28b8a801d08 <line:1632:1, line:1649:1>
|   |-DeclStmt 0x28b8a7fec58 <line:1633:5, col:18>
|   | |-VarDecl 0x28b8a7feb58 <col:5, col:14> col:14 used i 'unsigned int'
|   | `-VarDecl 0x28b8a7febd8 <col:5, col:17> col:17 used j 'unsigned int'
|   |-DeclStmt 0x28b8a7fede0 <line:1634:5, col:31>
|   | `-VarDecl 0x28b8a7fec80 <col:5, col:30> col:10 used outlimbs 'u64 *' cinit
|   |   `-UnaryOperator 0x28b8a7fedc8 <col:21, col:30> 'u64 *' prefix '&' cannot overflow
|   |     `-ArraySubscriptExpr 0x28b8a7feda8 <col:22, col:30> 'u64':'unsigned long long' lvalue
|   |       |-ImplicitCastExpr 0x28b8a7fed90 <col:22, col:27> 'u64 *' <ArrayToPointerDecay>
|   |       | `-ArraySubscriptExpr 0x28b8a7fed48 <col:22, col:27> 'smallfelem':'u64 [4]' lvalue
|   |       |   |-ImplicitCastExpr 0x28b8a7fed30 <col:22> 'smallfelem *':'smallfelem *' <LValueToRValue>
|   |       |   | `-DeclRefExpr 0x28b8a7fece8 <col:22> 'smallfelem *':'smallfelem *' lvalue ParmVar 0x28b8a7fe8c0 'out' 'smallfelem *':'smallfelem *'
|   |       |   `-IntegerLiteral 0x28b8a7fed08 <col:26> 'int' 0
|   |       `-IntegerLiteral 0x28b8a7fed68 <col:29> 'int' 0
|   |-CallExpr 0x28b8a800fb0 <line:1636:5, col:36> 'void *'
|   | |-ImplicitCastExpr 0x28b8a800f98 <col:5> 'void *(*)(void *, int, unsigned long long)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a7fedf8 <col:5> 'void *(void *, int, unsigned long long)' Function 0x28b8a5c2320 'memset' 'void *(void *, int, unsigned long long)'
|   | |-ImplicitCastExpr 0x28b8a801000 <col:12> 'void *' <BitCast>
|   | | `-ImplicitCastExpr 0x28b8a800fe8 <col:12> 'smallfelem *':'smallfelem *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x28b8a7fee18 <col:12> 'smallfelem *':'smallfelem *' lvalue ParmVar 0x28b8a7fe8c0 'out' 'smallfelem *':'smallfelem *'
|   | |-IntegerLiteral 0x28b8a7fee38 <col:17> 'int' 0
|   | `-BinaryOperator 0x28b8a7fef30 <col:20, col:35> 'unsigned long long' '*'
|   |   |-UnaryExprOrTypeTraitExpr 0x28b8a7feed0 <col:20, col:31> 'unsigned long long' sizeof
|   |   | `-ParenExpr 0x28b8a7feeb0 <col:26, col:31> 'smallfelem':'u64 [4]' lvalue
|   |   |   `-UnaryOperator 0x28b8a7fee98 <col:27, col:28> 'smallfelem':'u64 [4]' lvalue prefix '*' cannot overflow
|   |   |     `-ImplicitCastExpr 0x28b8a7fee80 <col:28> 'smallfelem *':'smallfelem *' <LValueToRValue>
|   |   |       `-DeclRefExpr 0x28b8a7fee60 <col:28> 'smallfelem *':'smallfelem *' lvalue ParmVar 0x28b8a7fe8c0 'out' 'smallfelem *':'smallfelem *' non_odr_use_unevaluated
|   |   `-ImplicitCastExpr 0x28b8a7fef18 <col:35> 'unsigned long long' <IntegralCast>
|   |     `-IntegerLiteral 0x28b8a7feef0 <col:35> 'int' 3
|   `-ForStmt 0x28b8a801cd0 <line:1638:5, line:1648:5>
|     |-BinaryOperator 0x28b8a801090 <line:1638:10, col:14> 'unsigned int' '='
|     | |-DeclRefExpr 0x28b8a801018 <col:10> 'unsigned int' lvalue Var 0x28b8a7feb58 'i' 'unsigned int'
|     | `-ImplicitCastExpr 0x28b8a801078 <col:14> 'unsigned int' <IntegralCast>
|     |   `-IntegerLiteral 0x28b8a801050 <col:14> 'int' 0
|     |-<<<NULL>>>
|     |-BinaryOperator 0x28b8a801120 <col:17, col:21> 'int' '<'
|     | |-ImplicitCastExpr 0x28b8a8010f0 <col:17> 'unsigned int' <LValueToRValue>
|     | | `-DeclRefExpr 0x28b8a8010b0 <col:17> 'unsigned int' lvalue Var 0x28b8a7feb58 'i' 'unsigned int'
|     | `-ImplicitCastExpr 0x28b8a801108 <col:21> 'unsigned int' <LValueToRValue>
|     |   `-DeclRefExpr 0x28b8a8010d0 <col:21> 'unsigned int' lvalue ParmVar 0x28b8a7fe570 'size' 'unsigned int'
|     |-UnaryOperator 0x28b8a801160 <col:27, col:28> 'unsigned int' postfix '++'
|     | `-DeclRefExpr 0x28b8a801140 <col:27> 'unsigned int' lvalue Var 0x28b8a7feb58 'i' 'unsigned int'
|     `-CompoundStmt 0x28b8a801c80 <col:32, line:1648:5>
|       |-DeclStmt 0x28b8a801408 <line:1639:9, col:55>
|       | `-VarDecl 0x28b8a801188 <col:9, col:54> col:20 used inlimbs 'const u64 *' cinit
|       |   `-ImplicitCastExpr 0x28b8a8013f0 <col:30, col:54> 'const u64 *' <NoOp>
|       |     `-CStyleCastExpr 0x28b8a8013c8 <col:30, col:54> 'u64 *' <NoOp>
|       |       `-UnaryOperator 0x28b8a8013a0 <col:37, col:54> 'const u64 *' prefix '&' cannot overflow
|       |         `-ArraySubscriptExpr 0x28b8a801380 <col:38, col:54> 'const u64':'const unsigned long long' lvalue
|       |           |-ImplicitCastExpr 0x28b8a801368 <col:38, col:51> 'const u64 *' <ArrayToPointerDecay>
|       |           | `-ArraySubscriptExpr 0x28b8a801320 <col:38, col:51> 'const smallfelem':'u64 const[4]' lvalue
|       |           |   |-ImplicitCastExpr 0x28b8a801308 <col:38, col:48> 'const smallfelem *' <ArrayToPointerDecay>
|       |           |   | `-ArraySubscriptExpr 0x28b8a801260 <col:38, col:48> 'const smallfelem [3]' lvalue
|       |           |   |   |-ImplicitCastExpr 0x28b8a801230 <col:38> 'const smallfelem (*)[3]':'const smallfelem (*)[3]' <LValueToRValue>
|       |           |   |   | `-DeclRefExpr 0x28b8a8011f0 <col:38> 'const smallfelem (*)[3]':'const smallfelem (*)[3]' lvalue ParmVar 0x28b8a7fe720 'pre_comp' 'const smallfelem (*)[3]':'const smallfelem (*)[3]'
|       |           |   |   `-ImplicitCastExpr 0x28b8a801248 <col:47> 'unsigned int' <LValueToRValue>
|       |           |   |     `-DeclRefExpr 0x28b8a801210 <col:47> 'unsigned int' lvalue Var 0x28b8a7feb58 'i' 'unsigned int'
|       |           |   `-IntegerLiteral 0x28b8a801280 <col:50> 'int' 0
|       |           `-IntegerLiteral 0x28b8a801340 <col:53> 'int' 0
|       |-DeclStmt 0x28b8a801540 <line:1640:9, col:27>
|       | `-VarDecl 0x28b8a801430 <col:9, col:24> col:13 used mask 'u64':'unsigned long long' cinit
|       |   `-BinaryOperator 0x28b8a801520 <col:20, col:24> 'unsigned long long' '^'
|       |     |-ImplicitCastExpr 0x28b8a801508 <col:20> 'unsigned long long' <IntegralCast>
|       |     | `-ImplicitCastExpr 0x28b8a8014d8 <col:20> 'unsigned int' <LValueToRValue>
|       |     |   `-DeclRefExpr 0x28b8a801498 <col:20> 'unsigned int' lvalue Var 0x28b8a7feb58 'i' 'unsigned int'
|       |     `-ImplicitCastExpr 0x28b8a8014f0 <col:24> 'u64':'unsigned long long' <LValueToRValue>
|       |       `-DeclRefExpr 0x28b8a8014b8 <col:24> 'const u64':'const unsigned long long' lvalue ParmVar 0x28b8a7fe4f0 'idx' 'const u64':'const unsigned long long'
|       |-CompoundAssignOperator 0x28b8a801610 <line:1641:9, col:25> 'u64':'unsigned long long' '|=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|       | |-DeclRefExpr 0x28b8a801558 <col:9> 'u64':'unsigned long long' lvalue Var 0x28b8a801430 'mask' 'u64':'unsigned long long'
|       | `-BinaryOperator 0x28b8a8015f0 <col:17, col:25> 'u64':'unsigned long long' '>>'
|       |   |-ImplicitCastExpr 0x28b8a8015d8 <col:17> 'u64':'unsigned long long' <LValueToRValue>
|       |   | `-DeclRefExpr 0x28b8a801590 <col:17> 'u64':'unsigned long long' lvalue Var 0x28b8a801430 'mask' 'u64':'unsigned long long'
|       |   `-IntegerLiteral 0x28b8a8015b0 <col:25> 'int' 4
|       |-CompoundAssignOperator 0x28b8a8016e0 <line:1642:9, col:25> 'u64':'unsigned long long' '|=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|       | |-DeclRefExpr 0x28b8a801640 <col:9> 'u64':'unsigned long long' lvalue Var 0x28b8a801430 'mask' 'u64':'unsigned long long'
|       | `-BinaryOperator 0x28b8a8016c0 <col:17, col:25> 'u64':'unsigned long long' '>>'
|       |   |-ImplicitCastExpr 0x28b8a8016a8 <col:17> 'u64':'unsigned long long' <LValueToRValue>
|       |   | `-DeclRefExpr 0x28b8a801660 <col:17> 'u64':'unsigned long long' lvalue Var 0x28b8a801430 'mask' 'u64':'unsigned long long'
|       |   `-IntegerLiteral 0x28b8a801680 <col:25> 'int' 2
|       |-CompoundAssignOperator 0x28b8a8017b0 <line:1643:9, col:25> 'u64':'unsigned long long' '|=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|       | |-DeclRefExpr 0x28b8a801710 <col:9> 'u64':'unsigned long long' lvalue Var 0x28b8a801430 'mask' 'u64':'unsigned long long'
|       | `-BinaryOperator 0x28b8a801790 <col:17, col:25> 'u64':'unsigned long long' '>>'
|       |   |-ImplicitCastExpr 0x28b8a801778 <col:17> 'u64':'unsigned long long' <LValueToRValue>
|       |   | `-DeclRefExpr 0x28b8a801730 <col:17> 'u64':'unsigned long long' lvalue Var 0x28b8a801430 'mask' 'u64':'unsigned long long'
|       |   `-IntegerLiteral 0x28b8a801750 <col:25> 'int' 1
|       |-CompoundAssignOperator 0x28b8a801840 <line:1644:9, col:17> 'u64':'unsigned long long' '&=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|       | |-DeclRefExpr 0x28b8a8017e0 <col:9> 'u64':'unsigned long long' lvalue Var 0x28b8a801430 'mask' 'u64':'unsigned long long'
|       | `-ImplicitCastExpr 0x28b8a801828 <col:17> 'unsigned long long' <IntegralCast>
|       |   `-IntegerLiteral 0x28b8a801800 <col:17> 'int' 1
|       |-UnaryOperator 0x28b8a801890 <line:1645:9, col:13> 'u64':'unsigned long long' postfix '--'
|       | `-DeclRefExpr 0x28b8a801870 <col:9> 'u64':'unsigned long long' lvalue Var 0x28b8a801430 'mask' 'u64':'unsigned long long'
|       `-ForStmt 0x28b8a801c48 <line:1646:9, line:1647:41>
|         |-BinaryOperator 0x28b8a801920 <line:1646:14, col:18> 'unsigned int' '='
|         | |-DeclRefExpr 0x28b8a8018a8 <col:14> 'unsigned int' lvalue Var 0x28b8a7febd8 'j' 'unsigned int'
|         | `-ImplicitCastExpr 0x28b8a801908 <col:18> 'unsigned int' <IntegralCast>
|         |   `-IntegerLiteral 0x28b8a8018e0 <col:18> 'int' 0
|         |-<<<NULL>>>
|         |-BinaryOperator 0x28b8a801a00 <col:21, col:34> 'int' '<'
|         | |-ImplicitCastExpr 0x28b8a8019d0 <col:21> 'unsigned int' <LValueToRValue>
|         | | `-DeclRefExpr 0x28b8a801940 <col:21> 'unsigned int' lvalue Var 0x28b8a7febd8 'j' 'unsigned int'
|         | `-ImplicitCastExpr 0x28b8a8019e8 <line:113:17, line:1646:34> 'unsigned int' <IntegralCast>
|         |   `-BinaryOperator 0x28b8a8019b0 <line:113:17, line:1646:34> 'int' '*'
|         |     |-IntegerLiteral 0x28b8a801960 <line:113:17> 'int' 4
|         |     `-IntegerLiteral 0x28b8a801988 <line:1646:34> 'int' 3
|         |-UnaryOperator 0x28b8a801a40 <col:37, col:38> 'unsigned int' postfix '++'
|         | `-DeclRefExpr 0x28b8a801a20 <col:37> 'unsigned int' lvalue Var 0x28b8a7febd8 'j' 'unsigned int'
|         `-CompoundAssignOperator 0x28b8a801c18 <line:1647:13, col:41> 'u64':'unsigned long long' '|=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|           |-ArraySubscriptExpr 0x28b8a801ae0 <col:13, col:23> 'u64':'unsigned long long' lvalue
|           | |-ImplicitCastExpr 0x28b8a801ab0 <col:13> 'u64 *' <LValueToRValue>
|           | | `-DeclRefExpr 0x28b8a801a58 <col:13> 'u64 *' lvalue Var 0x28b8a7fec80 'outlimbs' 'u64 *'
|           | `-ImplicitCastExpr 0x28b8a801ac8 <col:22> 'unsigned int' <LValueToRValue>
|           |   `-DeclRefExpr 0x28b8a801a90 <col:22> 'unsigned int' lvalue Var 0x28b8a7febd8 'j' 'unsigned int'
|           `-BinaryOperator 0x28b8a801bf8 <col:28, col:41> 'unsigned long long' '&'
|             |-ImplicitCastExpr 0x28b8a801bc8 <col:28, col:37> 'u64':'unsigned long long' <LValueToRValue>
|             | `-ArraySubscriptExpr 0x28b8a801b88 <col:28, col:37> 'const u64':'const unsigned long long' lvalue
|             |   |-ImplicitCastExpr 0x28b8a801b58 <col:28> 'const u64 *' <LValueToRValue>
|             |   | `-DeclRefExpr 0x28b8a801b00 <col:28> 'const u64 *' lvalue Var 0x28b8a801188 'inlimbs' 'const u64 *'
|             |   `-ImplicitCastExpr 0x28b8a801b70 <col:36> 'unsigned int' <LValueToRValue>
|             |     `-DeclRefExpr 0x28b8a801b38 <col:36> 'unsigned int' lvalue Var 0x28b8a7febd8 'j' 'unsigned int'
|             `-ImplicitCastExpr 0x28b8a801be0 <col:41> 'u64':'unsigned long long' <LValueToRValue>
|               `-DeclRefExpr 0x28b8a801ba8 <col:41> 'u64':'unsigned long long' lvalue Var 0x28b8a801430 'mask' 'u64':'unsigned long long'
|-FunctionDecl 0x28b8a801f48 <line:1652:1, line:1657:1> line:1652:13 used get_bit 'char (const u8 *, int)' static
| |-ParmVarDecl 0x28b8a801d80 <col:21, col:43> col:43 used in 'const u8 *':'const u8 *'
| |-ParmVarDecl 0x28b8a801e00 <col:47, col:51> col:51 used i 'int'
| `-CompoundStmt 0x28b8a802430 <line:1653:1, line:1657:1>
|   |-IfStmt 0x28b8a8021c0 <line:1654:5, line:1655:16>
|   | |-BinaryOperator 0x28b8a802150 <line:1654:9, col:29> 'int' '||'
|   | | |-ParenExpr 0x28b8a802090 <col:9, col:15> 'int'
|   | | | `-BinaryOperator 0x28b8a802070 <col:10, col:14> 'int' '<'
|   | | |   |-ImplicitCastExpr 0x28b8a802058 <col:10> 'int' <LValueToRValue>
|   | | |   | `-DeclRefExpr 0x28b8a802010 <col:10> 'int' lvalue ParmVar 0x28b8a801e00 'i' 'int'
|   | | |   `-IntegerLiteral 0x28b8a802030 <col:14> 'int' 0
|   | | `-ParenExpr 0x28b8a802130 <col:20, col:29> 'int'
|   | |   `-BinaryOperator 0x28b8a802110 <col:21, col:26> 'int' '>='
|   | |     |-ImplicitCastExpr 0x28b8a8020f8 <col:21> 'int' <LValueToRValue>
|   | |     | `-DeclRefExpr 0x28b8a8020b0 <col:21> 'int' lvalue ParmVar 0x28b8a801e00 'i' 'int'
|   | |     `-IntegerLiteral 0x28b8a8020d0 <col:26> 'int' 256
|   | `-ReturnStmt 0x28b8a8021b0 <line:1655:9, col:16>
|   |   `-ImplicitCastExpr 0x28b8a802198 <col:16> 'char' <IntegralCast>
|   |     `-IntegerLiteral 0x28b8a802170 <col:16> 'int' 0
|   `-ReturnStmt 0x28b8a802420 <line:1656:5, col:38>
|     `-ImplicitCastExpr 0x28b8a802408 <col:12, col:38> 'char' <IntegralCast>
|       `-BinaryOperator 0x28b8a8023e8 <col:12, col:38> 'int' '&'
|         |-ParenExpr 0x28b8a8023a0 <col:12, col:34> 'int'
|         | `-BinaryOperator 0x28b8a802380 <col:13, col:33> 'int' '>>'
|         |   |-ImplicitCastExpr 0x28b8a802368 <col:13, col:22> 'int' <IntegralCast>
|         |   | `-ImplicitCastExpr 0x28b8a802350 <col:13, col:22> 'u8':'unsigned char' <LValueToRValue>
|         |   |   `-ArraySubscriptExpr 0x28b8a802290 <col:13, col:22> 'const u8':'const unsigned char' lvalue
|         |   |     |-ImplicitCastExpr 0x28b8a802278 <col:13> 'const u8 *':'const u8 *' <LValueToRValue>
|         |   |     | `-DeclRefExpr 0x28b8a8021d8 <col:13> 'const u8 *':'const u8 *' lvalue ParmVar 0x28b8a801d80 'in' 'const u8 *':'const u8 *'
|         |   |     `-BinaryOperator 0x28b8a802258 <col:16, col:21> 'int' '>>'
|         |   |       |-ImplicitCastExpr 0x28b8a802240 <col:16> 'int' <LValueToRValue>
|         |   |       | `-DeclRefExpr 0x28b8a8021f8 <col:16> 'int' lvalue ParmVar 0x28b8a801e00 'i' 'int'
|         |   |       `-IntegerLiteral 0x28b8a802218 <col:21> 'int' 3
|         |   `-ParenExpr 0x28b8a802330 <col:27, col:33> 'int'
|         |     `-BinaryOperator 0x28b8a802310 <col:28, col:32> 'int' '&'
|         |       |-ImplicitCastExpr 0x28b8a8022f8 <col:28> 'int' <LValueToRValue>
|         |       | `-DeclRefExpr 0x28b8a8022b0 <col:28> 'int' lvalue ParmVar 0x28b8a801e00 'i' 'int'
|         |       `-IntegerLiteral 0x28b8a8022d0 <col:32> 'int' 7
|         `-IntegerLiteral 0x28b8a8023c0 <col:38> 'int' 1
|-FunctionDecl 0x28b8a802f90 <line:1666:1, line:1764:1> line:1666:13 used batch_mul 'void (limb *, limb *, limb *, const felem_bytearray *, const unsigned int, const u8 *, const int, const smallfelem (*)[17][3], const smallfelem (*)[16][3])' static
| |-ParmVarDecl 0x28b8a802460 <col:23, col:29> col:29 used x_out 'limb *':'limb *'
| |-ParmVarDecl 0x28b8a8024d8 <col:36, col:42> col:42 used y_out 'limb *':'limb *'
| |-ParmVarDecl 0x28b8a802550 <col:49, col:55> col:55 used z_out 'limb *':'limb *'
| |-ParmVarDecl 0x28b8a8026d0 <line:1667:23, col:53> col:45 used scalars 'const felem_bytearray *':'const felem_bytearray *'
| |-ParmVarDecl 0x28b8a802750 <line:1668:23, col:38> col:38 used num_points 'const unsigned int'
| |-ParmVarDecl 0x28b8a8027c8 <col:50, col:60> col:60 used g_scalar 'const u8 *'
| |-ParmVarDecl 0x28b8a802848 <line:1669:23, col:33> col:33 used mixed 'const int'
| |-ParmVarDecl 0x28b8a802ae0 <col:40, col:73> col:57 used pre_comp 'const smallfelem (*)[17][3]':'const smallfelem (*)[17][3]'
| |-ParmVarDecl 0x28b8a802ce0 <line:1670:23, col:59> col:40 used g_pre_comp 'const smallfelem (*)[16][3]':'const smallfelem (*)[16][3]'
| `-CompoundStmt 0x28b8a7fb3d0 <line:1671:1, line:1764:1>
|   |-DeclStmt 0x28b8a8031a8 <line:1672:5, col:16>
|   | |-VarDecl 0x28b8a8030a8 <col:5, col:9> col:9 used i 'int'
|   | `-VarDecl 0x28b8a803128 <col:5, col:12> col:12 used skip 'int'
|   |-DeclStmt 0x28b8a803408 <line:1673:5, col:47>
|   | |-VarDecl 0x28b8a8031d8 <col:5, col:14> col:14 used num 'unsigned int'
|   | `-VarDecl 0x28b8a803258 <col:5, col:46> col:19 used gen_mul 'unsigned int' cinit
|   |   `-ImplicitCastExpr 0x28b8a8033d8 <col:29, col:46> 'unsigned int' <IntegralCast>
|   |     `-ParenExpr 0x28b8a8033b8 <col:29, col:46> 'int'
|   |       `-BinaryOperator 0x28b8a803398 <col:30, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27> 'int' '!='
|   |         |-ImplicitCastExpr 0x28b8a803368 <.//openssl//file_jk/before\crypto\ec\ecp_nistp256.c:1673:30> 'const u8 *' <LValueToRValue>
|   |         | `-DeclRefExpr 0x28b8a8032c0 <col:30> 'const u8 *' lvalue ParmVar 0x28b8a8027c8 'g_scalar' 'const u8 *'
|   |         `-ImplicitCastExpr 0x28b8a803380 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'const u8 *' <BitCast>
|   |           `-ParenExpr 0x28b8a803348 <col:17, col:27> 'void *'
|   |             `-CStyleCastExpr 0x28b8a803320 <col:18, col:26> 'void *' <NullToPointer>
|   |               `-IntegerLiteral 0x28b8a8032e0 <col:26> 'int' 0
|   |-DeclStmt 0x28b8a8035f0 <.//openssl//file_jk/before\crypto\ec\ecp_nistp256.c:1674:5, col:22>
|   | |-VarDecl 0x28b8a8034f8 <col:5, col:15> col:11 used nq 'felem [3]'
|   | `-VarDecl 0x28b8a803570 <col:5, col:18> col:18 used ftmp 'felem':'limb [4]'
|   |-DeclStmt 0x28b8a8036d0 <line:1675:5, col:22>
|   | `-VarDecl 0x28b8a803668 <col:5, col:21> col:16 used tmp 'smallfelem [3]'
|   |-DeclStmt 0x28b8a803760 <line:1676:5, col:13>
|   | `-VarDecl 0x28b8a8036f8 <col:5, col:9> col:9 used bits 'u64':'unsigned long long'
|   |-DeclStmt 0x28b8a803880 <line:1677:5, col:19>
|   | |-VarDecl 0x28b8a803788 <col:5, col:8> col:8 used sign 'u8':'unsigned char'
|   | `-VarDecl 0x28b8a803800 <col:5, col:14> col:14 used digit 'u8':'unsigned char'
|   |-CallExpr 0x28b8a803a08 <line:1680:5, col:29> 'void *'
|   | |-ImplicitCastExpr 0x28b8a8039f0 <col:5> 'void *(*)(void *, int, unsigned long long)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a803898 <col:5> 'void *(void *, int, unsigned long long)' Function 0x28b8a5c2320 'memset' 'void *(void *, int, unsigned long long)'
|   | |-ImplicitCastExpr 0x28b8a803a58 <col:12> 'void *' <BitCast>
|   | | `-ImplicitCastExpr 0x28b8a803a40 <col:12> 'felem *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x28b8a8038b8 <col:12> 'felem [3]' lvalue Var 0x28b8a8034f8 'nq' 'felem [3]'
|   | |-IntegerLiteral 0x28b8a8038f0 <col:16> 'int' 0
|   | `-UnaryExprOrTypeTraitExpr 0x28b8a803958 <col:19, col:28> 'unsigned long long' sizeof
|   |   `-ParenExpr 0x28b8a803938 <col:25, col:28> 'felem [3]' lvalue
|   |     `-DeclRefExpr 0x28b8a803918 <col:26> 'felem [3]' lvalue Var 0x28b8a8034f8 'nq' 'felem [3]' non_odr_use_unevaluated
|   |-BinaryOperator 0x28b8a803ad0 <line:1687:5, col:12> 'int' '='
|   | |-DeclRefExpr 0x28b8a803a70 <col:5> 'int' lvalue Var 0x28b8a803128 'skip' 'int'
|   | `-IntegerLiteral 0x28b8a803aa8 <col:12> 'int' 1
|   |-ForStmt 0x28b8a7fafa8 <line:1689:5, line:1760:5>
|   | |-BinaryOperator 0x28b8a803c00 <line:1689:10, col:36> 'int' '='
|   | | |-DeclRefExpr 0x28b8a803af0 <col:10> 'int' lvalue Var 0x28b8a8030a8 'i' 'int'
|   | | `-ParenExpr 0x28b8a803be0 <col:14, col:36> 'int'
|   | |   `-ConditionalOperator 0x28b8a803bb0 <col:15, col:34> 'int'
|   | |     |-ImplicitCastExpr 0x28b8a803b98 <col:15> 'unsigned int' <LValueToRValue>
|   | |     | `-DeclRefExpr 0x28b8a803b28 <col:15> 'const unsigned int' lvalue ParmVar 0x28b8a802750 'num_points' 'const unsigned int'
|   | |     |-IntegerLiteral 0x28b8a803b48 <col:28> 'int' 255
|   | |     `-IntegerLiteral 0x28b8a803b70 <col:34> 'int' 31
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x28b8a803c80 <col:39, col:44> 'int' '>='
|   | | |-ImplicitCastExpr 0x28b8a803c68 <col:39> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a803c20 <col:39> 'int' lvalue Var 0x28b8a8030a8 'i' 'int'
|   | | `-IntegerLiteral 0x28b8a803c40 <col:44> 'int' 0
|   | |-UnaryOperator 0x28b8a803cc0 <col:47, col:49> 'int' prefix '--'
|   | | `-DeclRefExpr 0x28b8a803ca0 <col:49> 'int' lvalue Var 0x28b8a8030a8 'i' 'int'
|   | `-CompoundStmt 0x28b8a7faf80 <col:52, line:1760:5>
|   |   |-IfStmt 0x28b8a804188 <line:1691:9, line:1692:66>
|   |   | |-UnaryOperator 0x28b8a803d10 <line:1691:13, col:14> 'int' prefix '!' cannot overflow
|   |   | | `-ImplicitCastExpr 0x28b8a803cf8 <col:14> 'int' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x28b8a803cd8 <col:14> 'int' lvalue Var 0x28b8a803128 'skip' 'int'
|   |   | `-CallExpr 0x28b8a804060 <line:1692:13, col:66> 'void'
|   |   |   |-ImplicitCastExpr 0x28b8a804048 <col:13> 'void (*)(limb *, limb *, limb *, const limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   |   |   | `-DeclRefExpr 0x28b8a803d28 <col:13> 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *)' Function 0x28b8a6f4488 'point_double' 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *)'
|   |   |   |-ImplicitCastExpr 0x28b8a8040b0 <col:26, col:30> 'limb *' <ArrayToPointerDecay>
|   |   |   | `-ArraySubscriptExpr 0x28b8a803da8 <col:26, col:30> 'felem':'limb [4]' lvalue
|   |   |   |   |-ImplicitCastExpr 0x28b8a803d90 <col:26> 'felem *' <ArrayToPointerDecay>
|   |   |   |   | `-DeclRefExpr 0x28b8a803d48 <col:26> 'felem [3]' lvalue Var 0x28b8a8034f8 'nq' 'felem [3]'
|   |   |   |   `-IntegerLiteral 0x28b8a803d68 <col:29> 'int' 0
|   |   |   |-ImplicitCastExpr 0x28b8a8040c8 <col:33, col:37> 'limb *' <ArrayToPointerDecay>
|   |   |   | `-ArraySubscriptExpr 0x28b8a803e28 <col:33, col:37> 'felem':'limb [4]' lvalue
|   |   |   |   |-ImplicitCastExpr 0x28b8a803e10 <col:33> 'felem *' <ArrayToPointerDecay>
|   |   |   |   | `-DeclRefExpr 0x28b8a803dc8 <col:33> 'felem [3]' lvalue Var 0x28b8a8034f8 'nq' 'felem [3]'
|   |   |   |   `-IntegerLiteral 0x28b8a803de8 <col:36> 'int' 1
|   |   |   |-ImplicitCastExpr 0x28b8a8040e0 <col:40, col:44> 'limb *' <ArrayToPointerDecay>
|   |   |   | `-ArraySubscriptExpr 0x28b8a803ea8 <col:40, col:44> 'felem':'limb [4]' lvalue
|   |   |   |   |-ImplicitCastExpr 0x28b8a803e90 <col:40> 'felem *' <ArrayToPointerDecay>
|   |   |   |   | `-DeclRefExpr 0x28b8a803e48 <col:40> 'felem [3]' lvalue Var 0x28b8a8034f8 'nq' 'felem [3]'
|   |   |   |   `-IntegerLiteral 0x28b8a803e68 <col:43> 'int' 2
|   |   |   |-ImplicitCastExpr 0x28b8a804110 <col:47, col:51> 'const limb *':'const limb *' <NoOp>
|   |   |   | `-ImplicitCastExpr 0x28b8a8040f8 <col:47, col:51> 'limb *' <ArrayToPointerDecay>
|   |   |   |   `-ArraySubscriptExpr 0x28b8a803f28 <col:47, col:51> 'felem':'limb [4]' lvalue
|   |   |   |     |-ImplicitCastExpr 0x28b8a803f10 <col:47> 'felem *' <ArrayToPointerDecay>
|   |   |   |     | `-DeclRefExpr 0x28b8a803ec8 <col:47> 'felem [3]' lvalue Var 0x28b8a8034f8 'nq' 'felem [3]'
|   |   |   |     `-IntegerLiteral 0x28b8a803ee8 <col:50> 'int' 0
|   |   |   |-ImplicitCastExpr 0x28b8a804140 <col:54, col:58> 'const limb *':'const limb *' <NoOp>
|   |   |   | `-ImplicitCastExpr 0x28b8a804128 <col:54, col:58> 'limb *' <ArrayToPointerDecay>
|   |   |   |   `-ArraySubscriptExpr 0x28b8a803fa8 <col:54, col:58> 'felem':'limb [4]' lvalue
|   |   |   |     |-ImplicitCastExpr 0x28b8a803f90 <col:54> 'felem *' <ArrayToPointerDecay>
|   |   |   |     | `-DeclRefExpr 0x28b8a803f48 <col:54> 'felem [3]' lvalue Var 0x28b8a8034f8 'nq' 'felem [3]'
|   |   |   |     `-IntegerLiteral 0x28b8a803f68 <col:57> 'int' 1
|   |   |   `-ImplicitCastExpr 0x28b8a804170 <col:61, col:65> 'const limb *':'const limb *' <NoOp>
|   |   |     `-ImplicitCastExpr 0x28b8a804158 <col:61, col:65> 'limb *' <ArrayToPointerDecay>
|   |   |       `-ArraySubscriptExpr 0x28b8a804028 <col:61, col:65> 'felem':'limb [4]' lvalue
|   |   |         |-ImplicitCastExpr 0x28b8a804010 <col:61> 'felem *' <ArrayToPointerDecay>
|   |   |         | `-DeclRefExpr 0x28b8a803fc8 <col:61> 'felem [3]' lvalue Var 0x28b8a8034f8 'nq' 'felem [3]'
|   |   |         `-IntegerLiteral 0x28b8a803fe8 <col:64> 'int' 2
|   |   |-IfStmt 0x28b8a806970 <line:1695:9, line:1725:9>
|   |   | |-BinaryOperator 0x28b8a804290 <line:1695:13, col:32> 'int' '&&'
|   |   | | |-ImplicitCastExpr 0x28b8a804278 <col:13> 'unsigned int' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x28b8a8041a0 <col:13> 'unsigned int' lvalue Var 0x28b8a803258 'gen_mul' 'unsigned int'
|   |   | | `-ParenExpr 0x28b8a804258 <col:24, col:32> 'int'
|   |   | |   `-BinaryOperator 0x28b8a804238 <col:25, col:30> 'int' '<='
|   |   | |     |-ImplicitCastExpr 0x28b8a804220 <col:25> 'int' <LValueToRValue>
|   |   | |     | `-DeclRefExpr 0x28b8a8041d8 <col:25> 'int' lvalue Var 0x28b8a8030a8 'i' 'int'
|   |   | |     `-IntegerLiteral 0x28b8a8041f8 <col:30> 'int' 31
|   |   | `-CompoundStmt 0x28b8a806900 <col:35, line:1725:9>
|   |   |   |-BinaryOperator 0x28b8a8044e0 <line:1697:13, col:50> 'u64':'unsigned long long' '='
|   |   |   | |-DeclRefExpr 0x28b8a8042b0 <col:13> 'u64':'unsigned long long' lvalue Var 0x28b8a8036f8 'bits' 'u64':'unsigned long long'
|   |   |   | `-ImplicitCastExpr 0x28b8a8044c8 <col:20, col:50> 'u64':'unsigned long long' <IntegralCast>
|   |   |   |   `-BinaryOperator 0x28b8a8044a8 <col:20, col:50> 'int' '<<'
|   |   |   |     |-ImplicitCastExpr 0x28b8a804490 <col:20, col:45> 'int' <IntegralCast>
|   |   |   |     | `-CallExpr 0x28b8a804420 <col:20, col:45> 'char'
|   |   |   |     |   |-ImplicitCastExpr 0x28b8a804408 <col:20> 'char (*)(const u8 *, int)' <FunctionToPointerDecay>
|   |   |   |     |   | `-DeclRefExpr 0x28b8a8042e8 <col:20> 'char (const u8 *, int)' Function 0x28b8a801f48 'get_bit' 'char (const u8 *, int)'
|   |   |   |     |   |-ImplicitCastExpr 0x28b8a804450 <col:28> 'const u8 *' <LValueToRValue>
|   |   |   |     |   | `-DeclRefExpr 0x28b8a804308 <col:28> 'const u8 *' lvalue ParmVar 0x28b8a8027c8 'g_scalar' 'const u8 *'
|   |   |   |     |   `-BinaryOperator 0x28b8a804388 <col:38, col:42> 'int' '+'
|   |   |   |     |     |-ImplicitCastExpr 0x28b8a804370 <col:38> 'int' <LValueToRValue>
|   |   |   |     |     | `-DeclRefExpr 0x28b8a804328 <col:38> 'int' lvalue Var 0x28b8a8030a8 'i' 'int'
|   |   |   |     |     `-IntegerLiteral 0x28b8a804348 <col:42> 'int' 224
|   |   |   |     `-IntegerLiteral 0x28b8a804468 <col:50> 'int' 3
|   |   |   |-CompoundAssignOperator 0x28b8a8046b8 <line:1698:13, col:51> 'u64':'unsigned long long' '|=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |   |   | |-DeclRefExpr 0x28b8a804500 <col:13> 'u64':'unsigned long long' lvalue Var 0x28b8a8036f8 'bits' 'u64':'unsigned long long'
|   |   |   | `-ImplicitCastExpr 0x28b8a8046a0 <col:21, col:51> 'unsigned long long' <IntegralCast>
|   |   |   |   `-BinaryOperator 0x28b8a804680 <col:21, col:51> 'int' '<<'
|   |   |   |     |-ImplicitCastExpr 0x28b8a804668 <col:21, col:46> 'int' <IntegralCast>
|   |   |   |     | `-CallExpr 0x28b8a8045f8 <col:21, col:46> 'char'
|   |   |   |     |   |-ImplicitCastExpr 0x28b8a8045e0 <col:21> 'char (*)(const u8 *, int)' <FunctionToPointerDecay>
|   |   |   |     |   | `-DeclRefExpr 0x28b8a804520 <col:21> 'char (const u8 *, int)' Function 0x28b8a801f48 'get_bit' 'char (const u8 *, int)'
|   |   |   |     |   |-ImplicitCastExpr 0x28b8a804628 <col:29> 'const u8 *' <LValueToRValue>
|   |   |   |     |   | `-DeclRefExpr 0x28b8a804540 <col:29> 'const u8 *' lvalue ParmVar 0x28b8a8027c8 'g_scalar' 'const u8 *'
|   |   |   |     |   `-BinaryOperator 0x28b8a8045c0 <col:39, col:43> 'int' '+'
|   |   |   |     |     |-ImplicitCastExpr 0x28b8a8045a8 <col:39> 'int' <LValueToRValue>
|   |   |   |     |     | `-DeclRefExpr 0x28b8a804560 <col:39> 'int' lvalue Var 0x28b8a8030a8 'i' 'int'
|   |   |   |     |     `-IntegerLiteral 0x28b8a804580 <col:43> 'int' 160
|   |   |   |     `-IntegerLiteral 0x28b8a804640 <col:51> 'int' 2
|   |   |   |-CompoundAssignOperator 0x28b8a8048a0 <line:1699:13, col:50> 'u64':'unsigned long long' '|=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |   |   | |-DeclRefExpr 0x28b8a8046e8 <col:13> 'u64':'unsigned long long' lvalue Var 0x28b8a8036f8 'bits' 'u64':'unsigned long long'
|   |   |   | `-ImplicitCastExpr 0x28b8a804888 <col:21, col:50> 'unsigned long long' <IntegralCast>
|   |   |   |   `-BinaryOperator 0x28b8a804868 <col:21, col:50> 'int' '<<'
|   |   |   |     |-ImplicitCastExpr 0x28b8a804850 <col:21, col:45> 'int' <IntegralCast>
|   |   |   |     | `-CallExpr 0x28b8a8047e0 <col:21, col:45> 'char'
|   |   |   |     |   |-ImplicitCastExpr 0x28b8a8047c8 <col:21> 'char (*)(const u8 *, int)' <FunctionToPointerDecay>
|   |   |   |     |   | `-DeclRefExpr 0x28b8a804708 <col:21> 'char (const u8 *, int)' Function 0x28b8a801f48 'get_bit' 'char (const u8 *, int)'
|   |   |   |     |   |-ImplicitCastExpr 0x28b8a804810 <col:29> 'const u8 *' <LValueToRValue>
|   |   |   |     |   | `-DeclRefExpr 0x28b8a804728 <col:29> 'const u8 *' lvalue ParmVar 0x28b8a8027c8 'g_scalar' 'const u8 *'
|   |   |   |     |   `-BinaryOperator 0x28b8a8047a8 <col:39, col:43> 'int' '+'
|   |   |   |     |     |-ImplicitCastExpr 0x28b8a804790 <col:39> 'int' <LValueToRValue>
|   |   |   |     |     | `-DeclRefExpr 0x28b8a804748 <col:39> 'int' lvalue Var 0x28b8a8030a8 'i' 'int'
|   |   |   |     |     `-IntegerLiteral 0x28b8a804768 <col:43> 'int' 96
|   |   |   |     `-IntegerLiteral 0x28b8a804828 <col:50> 'int' 1
|   |   |   |-CompoundAssignOperator 0x28b8a804a28 <line:1700:13, col:45> 'u64':'unsigned long long' '|=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |   |   | |-DeclRefExpr 0x28b8a8048d0 <col:13> 'u64':'unsigned long long' lvalue Var 0x28b8a8036f8 'bits' 'u64':'unsigned long long'
|   |   |   | `-ImplicitCastExpr 0x28b8a804a10 <col:21, col:45> 'unsigned long long' <IntegralCast>
|   |   |   |   `-CallExpr 0x28b8a8049c8 <col:21, col:45> 'char'
|   |   |   |     |-ImplicitCastExpr 0x28b8a8049b0 <col:21> 'char (*)(const u8 *, int)' <FunctionToPointerDecay>
|   |   |   |     | `-DeclRefExpr 0x28b8a8048f0 <col:21> 'char (const u8 *, int)' Function 0x28b8a801f48 'get_bit' 'char (const u8 *, int)'
|   |   |   |     |-ImplicitCastExpr 0x28b8a8049f8 <col:29> 'const u8 *' <LValueToRValue>
|   |   |   |     | `-DeclRefExpr 0x28b8a804910 <col:29> 'const u8 *' lvalue ParmVar 0x28b8a8027c8 'g_scalar' 'const u8 *'
|   |   |   |     `-BinaryOperator 0x28b8a804990 <col:39, col:43> 'int' '+'
|   |   |   |       |-ImplicitCastExpr 0x28b8a804978 <col:39> 'int' <LValueToRValue>
|   |   |   |       | `-DeclRefExpr 0x28b8a804930 <col:39> 'int' lvalue Var 0x28b8a8030a8 'i' 'int'
|   |   |   |       `-IntegerLiteral 0x28b8a804950 <col:43> 'int' 32
|   |   |   |-CallExpr 0x28b8a804bf0 <line:1702:13, col:54> 'void'
|   |   |   | |-ImplicitCastExpr 0x28b8a804bd8 <col:13> 'void (*)(const u64, unsigned int, const smallfelem (*)[3], smallfelem *)' <FunctionToPointerDecay>
|   |   |   | | `-DeclRefExpr 0x28b8a804a58 <col:13> 'void (const u64, unsigned int, const smallfelem (*)[3], smallfelem *)' Function 0x28b8a7fea68 'select_point' 'void (const u64, unsigned int, const smallfelem (*)[3], smallfelem *)'
|   |   |   | |-ImplicitCastExpr 0x28b8a804c30 <col:26> 'u64':'unsigned long long' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x28b8a804a78 <col:26> 'u64':'unsigned long long' lvalue Var 0x28b8a8036f8 'bits' 'u64':'unsigned long long'
|   |   |   | |-ImplicitCastExpr 0x28b8a804c48 <col:32> 'unsigned int' <IntegralCast>
|   |   |   | | `-IntegerLiteral 0x28b8a804a98 <col:32> 'int' 16
|   |   |   | |-ImplicitCastExpr 0x28b8a804c60 <col:36, col:48> 'const smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |   | | `-ArraySubscriptExpr 0x28b8a804b20 <col:36, col:48> 'const smallfelem [16][3]' lvalue
|   |   |   | |   |-ImplicitCastExpr 0x28b8a804b08 <col:36> 'const smallfelem (*)[16][3]':'const smallfelem (*)[16][3]' <LValueToRValue>
|   |   |   | |   | `-DeclRefExpr 0x28b8a804ac0 <col:36> 'const smallfelem (*)[16][3]':'const smallfelem (*)[16][3]' lvalue ParmVar 0x28b8a802ce0 'g_pre_comp' 'const smallfelem (*)[16][3]':'const smallfelem (*)[16][3]'
|   |   |   | |   `-IntegerLiteral 0x28b8a804ae0 <col:47> 'int' 1
|   |   |   | `-ImplicitCastExpr 0x28b8a804c78 <col:51> 'smallfelem *' <ArrayToPointerDecay>
|   |   |   |   `-DeclRefExpr 0x28b8a804b40 <col:51> 'smallfelem [3]' lvalue Var 0x28b8a803668 'tmp' 'smallfelem [3]'
|   |   |   |-IfStmt 0x28b8a805978 <line:1704:13, line:1713:13> has_else
|   |   |   | |-UnaryOperator 0x28b8a804cc8 <line:1704:17, col:18> 'int' prefix '!' cannot overflow
|   |   |   | | `-ImplicitCastExpr 0x28b8a804cb0 <col:18> 'int' <LValueToRValue>
|   |   |   | |   `-DeclRefExpr 0x28b8a804c90 <col:18> 'int' lvalue Var 0x28b8a803128 'skip' 'int'
|   |   |   | |-CompoundStmt 0x28b8a8053b8 <col:24, line:1708:13>
|   |   |   | | `-CallExpr 0x28b8a8051e0 <line:1706:17, line:1707:73> 'void'
|   |   |   | |   |-ImplicitCastExpr 0x28b8a8051c8 <line:1706:17> 'void (*)(limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const u64 *, const u64 *, const u64 *)' <FunctionToPointerDecay>
|   |   |   | |   | `-DeclRefExpr 0x28b8a804ce0 <col:17> 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const u64 *, const u64 *, const u64 *)' Function 0x28b8a6ffa18 'point_add' 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const u64 *, const u64 *, const u64 *)'
|   |   |   | |   |-ImplicitCastExpr 0x28b8a805250 <col:27, col:31> 'limb *' <ArrayToPointerDecay>
|   |   |   | |   | `-ArraySubscriptExpr 0x28b8a804d60 <col:27, col:31> 'felem':'limb [4]' lvalue
|   |   |   | |   |   |-ImplicitCastExpr 0x28b8a804d48 <col:27> 'felem *' <ArrayToPointerDecay>
|   |   |   | |   |   | `-DeclRefExpr 0x28b8a804d00 <col:27> 'felem [3]' lvalue Var 0x28b8a8034f8 'nq' 'felem [3]'
|   |   |   | |   |   `-IntegerLiteral 0x28b8a804d20 <col:30> 'int' 0
|   |   |   | |   |-ImplicitCastExpr 0x28b8a805268 <col:34, col:38> 'limb *' <ArrayToPointerDecay>
|   |   |   | |   | `-ArraySubscriptExpr 0x28b8a804de0 <col:34, col:38> 'felem':'limb [4]' lvalue
|   |   |   | |   |   |-ImplicitCastExpr 0x28b8a804dc8 <col:34> 'felem *' <ArrayToPointerDecay>
|   |   |   | |   |   | `-DeclRefExpr 0x28b8a804d80 <col:34> 'felem [3]' lvalue Var 0x28b8a8034f8 'nq' 'felem [3]'
|   |   |   | |   |   `-IntegerLiteral 0x28b8a804da0 <col:37> 'int' 1
|   |   |   | |   |-ImplicitCastExpr 0x28b8a805280 <col:41, col:45> 'limb *' <ArrayToPointerDecay>
|   |   |   | |   | `-ArraySubscriptExpr 0x28b8a804e60 <col:41, col:45> 'felem':'limb [4]' lvalue
|   |   |   | |   |   |-ImplicitCastExpr 0x28b8a804e48 <col:41> 'felem *' <ArrayToPointerDecay>
|   |   |   | |   |   | `-DeclRefExpr 0x28b8a804e00 <col:41> 'felem [3]' lvalue Var 0x28b8a8034f8 'nq' 'felem [3]'
|   |   |   | |   |   `-IntegerLiteral 0x28b8a804e20 <col:44> 'int' 2
|   |   |   | |   |-ImplicitCastExpr 0x28b8a8052b0 <line:1707:27, col:31> 'const limb *':'const limb *' <NoOp>
|   |   |   | |   | `-ImplicitCastExpr 0x28b8a805298 <col:27, col:31> 'limb *' <ArrayToPointerDecay>
|   |   |   | |   |   `-ArraySubscriptExpr 0x28b8a804ee0 <col:27, col:31> 'felem':'limb [4]' lvalue
|   |   |   | |   |     |-ImplicitCastExpr 0x28b8a804ec8 <col:27> 'felem *' <ArrayToPointerDecay>
|   |   |   | |   |     | `-DeclRefExpr 0x28b8a804e80 <col:27> 'felem [3]' lvalue Var 0x28b8a8034f8 'nq' 'felem [3]'
|   |   |   | |   |     `-IntegerLiteral 0x28b8a804ea0 <col:30> 'int' 0
|   |   |   | |   |-ImplicitCastExpr 0x28b8a8052e0 <col:34, col:38> 'const limb *':'const limb *' <NoOp>
|   |   |   | |   | `-ImplicitCastExpr 0x28b8a8052c8 <col:34, col:38> 'limb *' <ArrayToPointerDecay>
|   |   |   | |   |   `-ArraySubscriptExpr 0x28b8a804f60 <col:34, col:38> 'felem':'limb [4]' lvalue
|   |   |   | |   |     |-ImplicitCastExpr 0x28b8a804f48 <col:34> 'felem *' <ArrayToPointerDecay>
|   |   |   | |   |     | `-DeclRefExpr 0x28b8a804f00 <col:34> 'felem [3]' lvalue Var 0x28b8a8034f8 'nq' 'felem [3]'
|   |   |   | |   |     `-IntegerLiteral 0x28b8a804f20 <col:37> 'int' 1
|   |   |   | |   |-ImplicitCastExpr 0x28b8a805310 <col:41, col:45> 'const limb *':'const limb *' <NoOp>
|   |   |   | |   | `-ImplicitCastExpr 0x28b8a8052f8 <col:41, col:45> 'limb *' <ArrayToPointerDecay>
|   |   |   | |   |   `-ArraySubscriptExpr 0x28b8a805000 <col:41, col:45> 'felem':'limb [4]' lvalue
|   |   |   | |   |     |-ImplicitCastExpr 0x28b8a804fe8 <col:41> 'felem *' <ArrayToPointerDecay>
|   |   |   | |   |     | `-DeclRefExpr 0x28b8a804fa0 <col:41> 'felem [3]' lvalue Var 0x28b8a8034f8 'nq' 'felem [3]'
|   |   |   | |   |     `-IntegerLiteral 0x28b8a804fc0 <col:44> 'int' 2
|   |   |   | |   |-IntegerLiteral 0x28b8a805020 <col:48> 'int' 1
|   |   |   | |   |-ImplicitCastExpr 0x28b8a805340 <col:51, col:56> 'const u64 *':'const u64 *' <NoOp>
|   |   |   | |   | `-ImplicitCastExpr 0x28b8a805328 <col:51, col:56> 'u64 *' <ArrayToPointerDecay>
|   |   |   | |   |   `-ArraySubscriptExpr 0x28b8a8050a8 <col:51, col:56> 'smallfelem':'u64 [4]' lvalue
|   |   |   | |   |     |-ImplicitCastExpr 0x28b8a805090 <col:51> 'smallfelem *' <ArrayToPointerDecay>
|   |   |   | |   |     | `-DeclRefExpr 0x28b8a805048 <col:51> 'smallfelem [3]' lvalue Var 0x28b8a803668 'tmp' 'smallfelem [3]'
|   |   |   | |   |     `-IntegerLiteral 0x28b8a805068 <col:55> 'int' 0
|   |   |   | |   |-ImplicitCastExpr 0x28b8a805370 <col:59, col:64> 'const u64 *':'const u64 *' <NoOp>
|   |   |   | |   | `-ImplicitCastExpr 0x28b8a805358 <col:59, col:64> 'u64 *' <ArrayToPointerDecay>
|   |   |   | |   |   `-ArraySubscriptExpr 0x28b8a805128 <col:59, col:64> 'smallfelem':'u64 [4]' lvalue
|   |   |   | |   |     |-ImplicitCastExpr 0x28b8a805110 <col:59> 'smallfelem *' <ArrayToPointerDecay>
|   |   |   | |   |     | `-DeclRefExpr 0x28b8a8050c8 <col:59> 'smallfelem [3]' lvalue Var 0x28b8a803668 'tmp' 'smallfelem [3]'
|   |   |   | |   |     `-IntegerLiteral 0x28b8a8050e8 <col:63> 'int' 1
|   |   |   | |   `-ImplicitCastExpr 0x28b8a8053a0 <col:67, col:72> 'const u64 *':'const u64 *' <NoOp>
|   |   |   | |     `-ImplicitCastExpr 0x28b8a805388 <col:67, col:72> 'u64 *' <ArrayToPointerDecay>
|   |   |   | |       `-ArraySubscriptExpr 0x28b8a8051a8 <col:67, col:72> 'smallfelem':'u64 [4]' lvalue
|   |   |   | |         |-ImplicitCastExpr 0x28b8a805190 <col:67> 'smallfelem *' <ArrayToPointerDecay>
|   |   |   | |         | `-DeclRefExpr 0x28b8a805148 <col:67> 'smallfelem [3]' lvalue Var 0x28b8a803668 'tmp' 'smallfelem [3]'
|   |   |   | |         `-IntegerLiteral 0x28b8a805168 <col:71> 'int' 2
|   |   |   | `-CompoundStmt 0x28b8a805948 <line:1708:20, line:1713:13>
|   |   |   |   |-CallExpr 0x28b8a805508 <line:1709:17, col:48> 'void'
|   |   |   |   | |-ImplicitCastExpr 0x28b8a8054f0 <col:17> 'void (*)(limb *, const u64 *)' <FunctionToPointerDecay>
|   |   |   |   | | `-DeclRefExpr 0x28b8a8053d0 <col:17> 'void (limb *, const u64 *)' Function 0x28b8a6002f0 'smallfelem_expand' 'void (limb *, const u64 *)'
|   |   |   |   | |-ImplicitCastExpr 0x28b8a805538 <col:35, col:39> 'limb *' <ArrayToPointerDecay>
|   |   |   |   | | `-ArraySubscriptExpr 0x28b8a805450 <col:35, col:39> 'felem':'limb [4]' lvalue
|   |   |   |   | |   |-ImplicitCastExpr 0x28b8a805438 <col:35> 'felem *' <ArrayToPointerDecay>
|   |   |   |   | |   | `-DeclRefExpr 0x28b8a8053f0 <col:35> 'felem [3]' lvalue Var 0x28b8a8034f8 'nq' 'felem [3]'
|   |   |   |   | |   `-IntegerLiteral 0x28b8a805410 <col:38> 'int' 0
|   |   |   |   | `-ImplicitCastExpr 0x28b8a805568 <col:42, col:47> 'const u64 *':'const u64 *' <NoOp>
|   |   |   |   |   `-ImplicitCastExpr 0x28b8a805550 <col:42, col:47> 'u64 *' <ArrayToPointerDecay>
|   |   |   |   |     `-ArraySubscriptExpr 0x28b8a8054d0 <col:42, col:47> 'smallfelem':'u64 [4]' lvalue
|   |   |   |   |       |-ImplicitCastExpr 0x28b8a8054b8 <col:42> 'smallfelem *' <ArrayToPointerDecay>
|   |   |   |   |       | `-DeclRefExpr 0x28b8a805470 <col:42> 'smallfelem [3]' lvalue Var 0x28b8a803668 'tmp' 'smallfelem [3]'
|   |   |   |   |       `-IntegerLiteral 0x28b8a805490 <col:46> 'int' 0
|   |   |   |   |-CallExpr 0x28b8a8056b8 <line:1710:17, col:48> 'void'
|   |   |   |   | |-ImplicitCastExpr 0x28b8a8056a0 <col:17> 'void (*)(limb *, const u64 *)' <FunctionToPointerDecay>
|   |   |   |   | | `-DeclRefExpr 0x28b8a805580 <col:17> 'void (limb *, const u64 *)' Function 0x28b8a6002f0 'smallfelem_expand' 'void (limb *, const u64 *)'
|   |   |   |   | |-ImplicitCastExpr 0x28b8a8056e8 <col:35, col:39> 'limb *' <ArrayToPointerDecay>
|   |   |   |   | | `-ArraySubscriptExpr 0x28b8a805600 <col:35, col:39> 'felem':'limb [4]' lvalue
|   |   |   |   | |   |-ImplicitCastExpr 0x28b8a8055e8 <col:35> 'felem *' <ArrayToPointerDecay>
|   |   |   |   | |   | `-DeclRefExpr 0x28b8a8055a0 <col:35> 'felem [3]' lvalue Var 0x28b8a8034f8 'nq' 'felem [3]'
|   |   |   |   | |   `-IntegerLiteral 0x28b8a8055c0 <col:38> 'int' 1
|   |   |   |   | `-ImplicitCastExpr 0x28b8a805718 <col:42, col:47> 'const u64 *':'const u64 *' <NoOp>
|   |   |   |   |   `-ImplicitCastExpr 0x28b8a805700 <col:42, col:47> 'u64 *' <ArrayToPointerDecay>
|   |   |   |   |     `-ArraySubscriptExpr 0x28b8a805680 <col:42, col:47> 'smallfelem':'u64 [4]' lvalue
|   |   |   |   |       |-ImplicitCastExpr 0x28b8a805668 <col:42> 'smallfelem *' <ArrayToPointerDecay>
|   |   |   |   |       | `-DeclRefExpr 0x28b8a805620 <col:42> 'smallfelem [3]' lvalue Var 0x28b8a803668 'tmp' 'smallfelem [3]'
|   |   |   |   |       `-IntegerLiteral 0x28b8a805640 <col:46> 'int' 1
|   |   |   |   |-CallExpr 0x28b8a805868 <line:1711:17, col:48> 'void'
|   |   |   |   | |-ImplicitCastExpr 0x28b8a805850 <col:17> 'void (*)(limb *, const u64 *)' <FunctionToPointerDecay>
|   |   |   |   | | `-DeclRefExpr 0x28b8a805730 <col:17> 'void (limb *, const u64 *)' Function 0x28b8a6002f0 'smallfelem_expand' 'void (limb *, const u64 *)'
|   |   |   |   | |-ImplicitCastExpr 0x28b8a805898 <col:35, col:39> 'limb *' <ArrayToPointerDecay>
|   |   |   |   | | `-ArraySubscriptExpr 0x28b8a8057b0 <col:35, col:39> 'felem':'limb [4]' lvalue
|   |   |   |   | |   |-ImplicitCastExpr 0x28b8a805798 <col:35> 'felem *' <ArrayToPointerDecay>
|   |   |   |   | |   | `-DeclRefExpr 0x28b8a805750 <col:35> 'felem [3]' lvalue Var 0x28b8a8034f8 'nq' 'felem [3]'
|   |   |   |   | |   `-IntegerLiteral 0x28b8a805770 <col:38> 'int' 2
|   |   |   |   | `-ImplicitCastExpr 0x28b8a8058c8 <col:42, col:47> 'const u64 *':'const u64 *' <NoOp>
|   |   |   |   |   `-ImplicitCastExpr 0x28b8a8058b0 <col:42, col:47> 'u64 *' <ArrayToPointerDecay>
|   |   |   |   |     `-ArraySubscriptExpr 0x28b8a805830 <col:42, col:47> 'smallfelem':'u64 [4]' lvalue
|   |   |   |   |       |-ImplicitCastExpr 0x28b8a805818 <col:42> 'smallfelem *' <ArrayToPointerDecay>
|   |   |   |   |       | `-DeclRefExpr 0x28b8a8057d0 <col:42> 'smallfelem [3]' lvalue Var 0x28b8a803668 'tmp' 'smallfelem [3]'
|   |   |   |   |       `-IntegerLiteral 0x28b8a8057f0 <col:46> 'int' 2
|   |   |   |   `-BinaryOperator 0x28b8a805928 <line:1712:17, col:24> 'int' '='
|   |   |   |     |-DeclRefExpr 0x28b8a8058e0 <col:17> 'int' lvalue Var 0x28b8a803128 'skip' 'int'
|   |   |   |     `-IntegerLiteral 0x28b8a805900 <col:24> 'int' 0
|   |   |   |-BinaryOperator 0x28b8a805b58 <line:1716:13, col:50> 'u64':'unsigned long long' '='
|   |   |   | |-DeclRefExpr 0x28b8a8059a0 <col:13> 'u64':'unsigned long long' lvalue Var 0x28b8a8036f8 'bits' 'u64':'unsigned long long'
|   |   |   | `-ImplicitCastExpr 0x28b8a805b40 <col:20, col:50> 'u64':'unsigned long long' <IntegralCast>
|   |   |   |   `-BinaryOperator 0x28b8a805b20 <col:20, col:50> 'int' '<<'
|   |   |   |     |-ImplicitCastExpr 0x28b8a805b08 <col:20, col:45> 'int' <IntegralCast>
|   |   |   |     | `-CallExpr 0x28b8a805a98 <col:20, col:45> 'char'
|   |   |   |     |   |-ImplicitCastExpr 0x28b8a805a80 <col:20> 'char (*)(const u8 *, int)' <FunctionToPointerDecay>
|   |   |   |     |   | `-DeclRefExpr 0x28b8a8059c0 <col:20> 'char (const u8 *, int)' Function 0x28b8a801f48 'get_bit' 'char (const u8 *, int)'
|   |   |   |     |   |-ImplicitCastExpr 0x28b8a805ac8 <col:28> 'const u8 *' <LValueToRValue>
|   |   |   |     |   | `-DeclRefExpr 0x28b8a8059e0 <col:28> 'const u8 *' lvalue ParmVar 0x28b8a8027c8 'g_scalar' 'const u8 *'
|   |   |   |     |   `-BinaryOperator 0x28b8a805a60 <col:38, col:42> 'int' '+'
|   |   |   |     |     |-ImplicitCastExpr 0x28b8a805a48 <col:38> 'int' <LValueToRValue>
|   |   |   |     |     | `-DeclRefExpr 0x28b8a805a00 <col:38> 'int' lvalue Var 0x28b8a8030a8 'i' 'int'
|   |   |   |     |     `-IntegerLiteral 0x28b8a805a20 <col:42> 'int' 192
|   |   |   |     `-IntegerLiteral 0x28b8a805ae0 <col:50> 'int' 3
|   |   |   |-CompoundAssignOperator 0x28b8a805d30 <line:1717:13, col:51> 'u64':'unsigned long long' '|=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |   |   | |-DeclRefExpr 0x28b8a805b78 <col:13> 'u64':'unsigned long long' lvalue Var 0x28b8a8036f8 'bits' 'u64':'unsigned long long'
|   |   |   | `-ImplicitCastExpr 0x28b8a805d18 <col:21, col:51> 'unsigned long long' <IntegralCast>
|   |   |   |   `-BinaryOperator 0x28b8a805cf8 <col:21, col:51> 'int' '<<'
|   |   |   |     |-ImplicitCastExpr 0x28b8a805ce0 <col:21, col:46> 'int' <IntegralCast>
|   |   |   |     | `-CallExpr 0x28b8a805c70 <col:21, col:46> 'char'
|   |   |   |     |   |-ImplicitCastExpr 0x28b8a805c58 <col:21> 'char (*)(const u8 *, int)' <FunctionToPointerDecay>
|   |   |   |     |   | `-DeclRefExpr 0x28b8a805b98 <col:21> 'char (const u8 *, int)' Function 0x28b8a801f48 'get_bit' 'char (const u8 *, int)'
|   |   |   |     |   |-ImplicitCastExpr 0x28b8a805ca0 <col:29> 'const u8 *' <LValueToRValue>
|   |   |   |     |   | `-DeclRefExpr 0x28b8a805bb8 <col:29> 'const u8 *' lvalue ParmVar 0x28b8a8027c8 'g_scalar' 'const u8 *'
|   |   |   |     |   `-BinaryOperator 0x28b8a805c38 <col:39, col:43> 'int' '+'
|   |   |   |     |     |-ImplicitCastExpr 0x28b8a805c20 <col:39> 'int' <LValueToRValue>
|   |   |   |     |     | `-DeclRefExpr 0x28b8a805bd8 <col:39> 'int' lvalue Var 0x28b8a8030a8 'i' 'int'
|   |   |   |     |     `-IntegerLiteral 0x28b8a805bf8 <col:43> 'int' 128
|   |   |   |     `-IntegerLiteral 0x28b8a805cb8 <col:51> 'int' 2
|   |   |   |-CompoundAssignOperator 0x28b8a805f18 <line:1718:13, col:50> 'u64':'unsigned long long' '|=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |   |   | |-DeclRefExpr 0x28b8a805d60 <col:13> 'u64':'unsigned long long' lvalue Var 0x28b8a8036f8 'bits' 'u64':'unsigned long long'
|   |   |   | `-ImplicitCastExpr 0x28b8a805f00 <col:21, col:50> 'unsigned long long' <IntegralCast>
|   |   |   |   `-BinaryOperator 0x28b8a805ee0 <col:21, col:50> 'int' '<<'
|   |   |   |     |-ImplicitCastExpr 0x28b8a805ec8 <col:21, col:45> 'int' <IntegralCast>
|   |   |   |     | `-CallExpr 0x28b8a805e58 <col:21, col:45> 'char'
|   |   |   |     |   |-ImplicitCastExpr 0x28b8a805e40 <col:21> 'char (*)(const u8 *, int)' <FunctionToPointerDecay>
|   |   |   |     |   | `-DeclRefExpr 0x28b8a805d80 <col:21> 'char (const u8 *, int)' Function 0x28b8a801f48 'get_bit' 'char (const u8 *, int)'
|   |   |   |     |   |-ImplicitCastExpr 0x28b8a805e88 <col:29> 'const u8 *' <LValueToRValue>
|   |   |   |     |   | `-DeclRefExpr 0x28b8a805da0 <col:29> 'const u8 *' lvalue ParmVar 0x28b8a8027c8 'g_scalar' 'const u8 *'
|   |   |   |     |   `-BinaryOperator 0x28b8a805e20 <col:39, col:43> 'int' '+'
|   |   |   |     |     |-ImplicitCastExpr 0x28b8a805e08 <col:39> 'int' <LValueToRValue>
|   |   |   |     |     | `-DeclRefExpr 0x28b8a805dc0 <col:39> 'int' lvalue Var 0x28b8a8030a8 'i' 'int'
|   |   |   |     |     `-IntegerLiteral 0x28b8a805de0 <col:43> 'int' 64
|   |   |   |     `-IntegerLiteral 0x28b8a805ea0 <col:50> 'int' 1
|   |   |   |-CompoundAssignOperator 0x28b8a806058 <line:1719:13, col:40> 'u64':'unsigned long long' '|=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |   |   | |-DeclRefExpr 0x28b8a805f48 <col:13> 'u64':'unsigned long long' lvalue Var 0x28b8a8036f8 'bits' 'u64':'unsigned long long'
|   |   |   | `-ImplicitCastExpr 0x28b8a806040 <col:21, col:40> 'unsigned long long' <IntegralCast>
|   |   |   |   `-CallExpr 0x28b8a805fe0 <col:21, col:40> 'char'
|   |   |   |     |-ImplicitCastExpr 0x28b8a805fc8 <col:21> 'char (*)(const u8 *, int)' <FunctionToPointerDecay>
|   |   |   |     | `-DeclRefExpr 0x28b8a805f68 <col:21> 'char (const u8 *, int)' Function 0x28b8a801f48 'get_bit' 'char (const u8 *, int)'
|   |   |   |     |-ImplicitCastExpr 0x28b8a806010 <col:29> 'const u8 *' <LValueToRValue>
|   |   |   |     | `-DeclRefExpr 0x28b8a805f88 <col:29> 'const u8 *' lvalue ParmVar 0x28b8a8027c8 'g_scalar' 'const u8 *'
|   |   |   |     `-ImplicitCastExpr 0x28b8a806028 <col:39> 'int' <LValueToRValue>
|   |   |   |       `-DeclRefExpr 0x28b8a805fa8 <col:39> 'int' lvalue Var 0x28b8a8030a8 'i' 'int'
|   |   |   |-CallExpr 0x28b8a8061a8 <line:1721:13, col:54> 'void'
|   |   |   | |-ImplicitCastExpr 0x28b8a806190 <col:13> 'void (*)(const u64, unsigned int, const smallfelem (*)[3], smallfelem *)' <FunctionToPointerDecay>
|   |   |   | | `-DeclRefExpr 0x28b8a806088 <col:13> 'void (const u64, unsigned int, const smallfelem (*)[3], smallfelem *)' Function 0x28b8a7fea68 'select_point' 'void (const u64, unsigned int, const smallfelem (*)[3], smallfelem *)'
|   |   |   | |-ImplicitCastExpr 0x28b8a8061e8 <col:26> 'u64':'unsigned long long' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x28b8a8060a8 <col:26> 'u64':'unsigned long long' lvalue Var 0x28b8a8036f8 'bits' 'u64':'unsigned long long'
|   |   |   | |-ImplicitCastExpr 0x28b8a806200 <col:32> 'unsigned int' <IntegralCast>
|   |   |   | | `-IntegerLiteral 0x28b8a8060c8 <col:32> 'int' 16
|   |   |   | |-ImplicitCastExpr 0x28b8a806218 <col:36, col:48> 'const smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |   | | `-ArraySubscriptExpr 0x28b8a806150 <col:36, col:48> 'const smallfelem [16][3]' lvalue
|   |   |   | |   |-ImplicitCastExpr 0x28b8a806138 <col:36> 'const smallfelem (*)[16][3]':'const smallfelem (*)[16][3]' <LValueToRValue>
|   |   |   | |   | `-DeclRefExpr 0x28b8a8060f0 <col:36> 'const smallfelem (*)[16][3]':'const smallfelem (*)[16][3]' lvalue ParmVar 0x28b8a802ce0 'g_pre_comp' 'const smallfelem (*)[16][3]':'const smallfelem (*)[16][3]'
|   |   |   | |   `-IntegerLiteral 0x28b8a806110 <col:47> 'int' 0
|   |   |   | `-ImplicitCastExpr 0x28b8a806230 <col:51> 'smallfelem *' <ArrayToPointerDecay>
|   |   |   |   `-DeclRefExpr 0x28b8a806170 <col:51> 'smallfelem [3]' lvalue Var 0x28b8a803668 'tmp' 'smallfelem [3]'
|   |   |   `-CallExpr 0x28b8a806728 <line:1723:13, line:1724:69> 'void'
|   |   |     |-ImplicitCastExpr 0x28b8a806710 <line:1723:13> 'void (*)(limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const u64 *, const u64 *, const u64 *)' <FunctionToPointerDecay>
|   |   |     | `-DeclRefExpr 0x28b8a806248 <col:13> 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const u64 *, const u64 *, const u64 *)' Function 0x28b8a6ffa18 'point_add' 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const u64 *, const u64 *, const u64 *)'
|   |   |     |-ImplicitCastExpr 0x28b8a806798 <col:23, col:27> 'limb *' <ArrayToPointerDecay>
|   |   |     | `-ArraySubscriptExpr 0x28b8a8062c8 <col:23, col:27> 'felem':'limb [4]' lvalue
|   |   |     |   |-ImplicitCastExpr 0x28b8a8062b0 <col:23> 'felem *' <ArrayToPointerDecay>
|   |   |     |   | `-DeclRefExpr 0x28b8a806268 <col:23> 'felem [3]' lvalue Var 0x28b8a8034f8 'nq' 'felem [3]'
|   |   |     |   `-IntegerLiteral 0x28b8a806288 <col:26> 'int' 0
|   |   |     |-ImplicitCastExpr 0x28b8a8067b0 <col:30, col:34> 'limb *' <ArrayToPointerDecay>
|   |   |     | `-ArraySubscriptExpr 0x28b8a806348 <col:30, col:34> 'felem':'limb [4]' lvalue
|   |   |     |   |-ImplicitCastExpr 0x28b8a806330 <col:30> 'felem *' <ArrayToPointerDecay>
|   |   |     |   | `-DeclRefExpr 0x28b8a8062e8 <col:30> 'felem [3]' lvalue Var 0x28b8a8034f8 'nq' 'felem [3]'
|   |   |     |   `-IntegerLiteral 0x28b8a806308 <col:33> 'int' 1
|   |   |     |-ImplicitCastExpr 0x28b8a8067c8 <col:37, col:41> 'limb *' <ArrayToPointerDecay>
|   |   |     | `-ArraySubscriptExpr 0x28b8a8063c8 <col:37, col:41> 'felem':'limb [4]' lvalue
|   |   |     |   |-ImplicitCastExpr 0x28b8a8063b0 <col:37> 'felem *' <ArrayToPointerDecay>
|   |   |     |   | `-DeclRefExpr 0x28b8a806368 <col:37> 'felem [3]' lvalue Var 0x28b8a8034f8 'nq' 'felem [3]'
|   |   |     |   `-IntegerLiteral 0x28b8a806388 <col:40> 'int' 2
|   |   |     |-ImplicitCastExpr 0x28b8a8067f8 <line:1724:23, col:27> 'const limb *':'const limb *' <NoOp>
|   |   |     | `-ImplicitCastExpr 0x28b8a8067e0 <col:23, col:27> 'limb *' <ArrayToPointerDecay>
|   |   |     |   `-ArraySubscriptExpr 0x28b8a806448 <col:23, col:27> 'felem':'limb [4]' lvalue
|   |   |     |     |-ImplicitCastExpr 0x28b8a806430 <col:23> 'felem *' <ArrayToPointerDecay>
|   |   |     |     | `-DeclRefExpr 0x28b8a8063e8 <col:23> 'felem [3]' lvalue Var 0x28b8a8034f8 'nq' 'felem [3]'
|   |   |     |     `-IntegerLiteral 0x28b8a806408 <col:26> 'int' 0
|   |   |     |-ImplicitCastExpr 0x28b8a806828 <col:30, col:34> 'const limb *':'const limb *' <NoOp>
|   |   |     | `-ImplicitCastExpr 0x28b8a806810 <col:30, col:34> 'limb *' <ArrayToPointerDecay>
|   |   |     |   `-ArraySubscriptExpr 0x28b8a8064c8 <col:30, col:34> 'felem':'limb [4]' lvalue
|   |   |     |     |-ImplicitCastExpr 0x28b8a8064b0 <col:30> 'felem *' <ArrayToPointerDecay>
|   |   |     |     | `-DeclRefExpr 0x28b8a806468 <col:30> 'felem [3]' lvalue Var 0x28b8a8034f8 'nq' 'felem [3]'
|   |   |     |     `-IntegerLiteral 0x28b8a806488 <col:33> 'int' 1
|   |   |     |-ImplicitCastExpr 0x28b8a806858 <col:37, col:41> 'const limb *':'const limb *' <NoOp>
|   |   |     | `-ImplicitCastExpr 0x28b8a806840 <col:37, col:41> 'limb *' <ArrayToPointerDecay>
|   |   |     |   `-ArraySubscriptExpr 0x28b8a806548 <col:37, col:41> 'felem':'limb [4]' lvalue
|   |   |     |     |-ImplicitCastExpr 0x28b8a806530 <col:37> 'felem *' <ArrayToPointerDecay>
|   |   |     |     | `-DeclRefExpr 0x28b8a8064e8 <col:37> 'felem [3]' lvalue Var 0x28b8a8034f8 'nq' 'felem [3]'
|   |   |     |     `-IntegerLiteral 0x28b8a806508 <col:40> 'int' 2
|   |   |     |-IntegerLiteral 0x28b8a806568 <col:44> 'int' 1
|   |   |     |-ImplicitCastExpr 0x28b8a806888 <col:47, col:52> 'const u64 *':'const u64 *' <NoOp>
|   |   |     | `-ImplicitCastExpr 0x28b8a806870 <col:47, col:52> 'u64 *' <ArrayToPointerDecay>
|   |   |     |   `-ArraySubscriptExpr 0x28b8a8065f0 <col:47, col:52> 'smallfelem':'u64 [4]' lvalue
|   |   |     |     |-ImplicitCastExpr 0x28b8a8065d8 <col:47> 'smallfelem *' <ArrayToPointerDecay>
|   |   |     |     | `-DeclRefExpr 0x28b8a806590 <col:47> 'smallfelem [3]' lvalue Var 0x28b8a803668 'tmp' 'smallfelem [3]'
|   |   |     |     `-IntegerLiteral 0x28b8a8065b0 <col:51> 'int' 0
|   |   |     |-ImplicitCastExpr 0x28b8a8068b8 <col:55, col:60> 'const u64 *':'const u64 *' <NoOp>
|   |   |     | `-ImplicitCastExpr 0x28b8a8068a0 <col:55, col:60> 'u64 *' <ArrayToPointerDecay>
|   |   |     |   `-ArraySubscriptExpr 0x28b8a806670 <col:55, col:60> 'smallfelem':'u64 [4]' lvalue
|   |   |     |     |-ImplicitCastExpr 0x28b8a806658 <col:55> 'smallfelem *' <ArrayToPointerDecay>
|   |   |     |     | `-DeclRefExpr 0x28b8a806610 <col:55> 'smallfelem [3]' lvalue Var 0x28b8a803668 'tmp' 'smallfelem [3]'
|   |   |     |     `-IntegerLiteral 0x28b8a806630 <col:59> 'int' 1
|   |   |     `-ImplicitCastExpr 0x28b8a8068e8 <col:63, col:68> 'const u64 *':'const u64 *' <NoOp>
|   |   |       `-ImplicitCastExpr 0x28b8a8068d0 <col:63, col:68> 'u64 *' <ArrayToPointerDecay>
|   |   |         `-ArraySubscriptExpr 0x28b8a8066f0 <col:63, col:68> 'smallfelem':'u64 [4]' lvalue
|   |   |           |-ImplicitCastExpr 0x28b8a8066d8 <col:63> 'smallfelem *' <ArrayToPointerDecay>
|   |   |           | `-DeclRefExpr 0x28b8a806690 <col:63> 'smallfelem [3]' lvalue Var 0x28b8a803668 'tmp' 'smallfelem [3]'
|   |   |           `-IntegerLiteral 0x28b8a8066b0 <col:67> 'int' 2
|   |   `-IfStmt 0x28b8a7faf68 <line:1728:9, line:1759:9>
|   |     |-BinaryOperator 0x28b8a806aa8 <line:1728:13, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x28b8a806a90 <col:13> 'unsigned int' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x28b8a806988 <col:13> 'const unsigned int' lvalue ParmVar 0x28b8a802750 'num_points' 'const unsigned int'
|   |     | `-ParenExpr 0x28b8a806a70 <col:27, col:38> 'int'
|   |     |   `-BinaryOperator 0x28b8a806a50 <col:28, col:37> 'int' '=='
|   |     |     |-BinaryOperator 0x28b8a806a08 <col:28, col:32> 'int' '%'
|   |     |     | |-ImplicitCastExpr 0x28b8a8069f0 <col:28> 'int' <LValueToRValue>
|   |     |     | | `-DeclRefExpr 0x28b8a8069a8 <col:28> 'int' lvalue Var 0x28b8a8030a8 'i' 'int'
|   |     |     | `-IntegerLiteral 0x28b8a8069c8 <col:32> 'int' 5
|   |     |     `-IntegerLiteral 0x28b8a806a28 <col:37> 'int' 0
|   |     `-CompoundStmt 0x28b8a7faf50 <col:41, line:1759:9>
|   |       `-ForStmt 0x28b8a808f78 <line:1730:13, line:1758:13>
|   |         |-BinaryOperator 0x28b8a806b40 <line:1730:18, col:24> 'unsigned int' '='
|   |         | |-DeclRefExpr 0x28b8a806ac8 <col:18> 'unsigned int' lvalue Var 0x28b8a8031d8 'num' 'unsigned int'
|   |         | `-ImplicitCastExpr 0x28b8a806b28 <col:24> 'unsigned int' <IntegralCast>
|   |         |   `-IntegerLiteral 0x28b8a806b00 <col:24> 'int' 0
|   |         |-<<<NULL>>>
|   |         |-BinaryOperator 0x28b8a806bd0 <col:27, col:33> 'int' '<'
|   |         | |-ImplicitCastExpr 0x28b8a806ba0 <col:27> 'unsigned int' <LValueToRValue>
|   |         | | `-DeclRefExpr 0x28b8a806b60 <col:27> 'unsigned int' lvalue Var 0x28b8a8031d8 'num' 'unsigned int'
|   |         | `-ImplicitCastExpr 0x28b8a806bb8 <col:33> 'unsigned int' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x28b8a806b80 <col:33> 'const unsigned int' lvalue ParmVar 0x28b8a802750 'num_points' 'const unsigned int'
|   |         |-UnaryOperator 0x28b8a806c10 <col:45, col:47> 'unsigned int' prefix '++'
|   |         | `-DeclRefExpr 0x28b8a806bf0 <col:47> 'unsigned int' lvalue Var 0x28b8a8031d8 'num' 'unsigned int'
|   |         `-CompoundStmt 0x28b8a808f08 <col:52, line:1758:13>
|   |           |-BinaryOperator 0x28b8a806e50 <line:1731:17, col:56> 'u64':'unsigned long long' '='
|   |           | |-DeclRefExpr 0x28b8a806c28 <col:17> 'u64':'unsigned long long' lvalue Var 0x28b8a8036f8 'bits' 'u64':'unsigned long long'
|   |           | `-ImplicitCastExpr 0x28b8a806e38 <col:24, col:56> 'u64':'unsigned long long' <IntegralCast>
|   |           |   `-BinaryOperator 0x28b8a806e18 <col:24, col:56> 'int' '<<'
|   |           |     |-ImplicitCastExpr 0x28b8a806e00 <col:24, col:51> 'int' <IntegralCast>
|   |           |     | `-CallExpr 0x28b8a806d90 <col:24, col:51> 'char'
|   |           |     |   |-ImplicitCastExpr 0x28b8a806d78 <col:24> 'char (*)(const u8 *, int)' <FunctionToPointerDecay>
|   |           |     |   | `-DeclRefExpr 0x28b8a806c48 <col:24> 'char (const u8 *, int)' Function 0x28b8a801f48 'get_bit' 'char (const u8 *, int)'
|   |           |     |   |-ImplicitCastExpr 0x28b8a806dc0 <col:32, col:43> 'const u8 *' <ArrayToPointerDecay>
|   |           |     |   | `-ArraySubscriptExpr 0x28b8a806cd8 <col:32, col:43> 'const felem_bytearray':'u8 const[32]' lvalue
|   |           |     |   |   |-ImplicitCastExpr 0x28b8a806ca8 <col:32> 'const felem_bytearray *':'const felem_bytearray *' <LValueToRValue>
|   |           |     |   |   | `-DeclRefExpr 0x28b8a806c68 <col:32> 'const felem_bytearray *':'const felem_bytearray *' lvalue ParmVar 0x28b8a8026d0 'scalars' 'const felem_bytearray *':'const felem_bytearray *'
|   |           |     |   |   `-ImplicitCastExpr 0x28b8a806cc0 <col:40> 'unsigned int' <LValueToRValue>
|   |           |     |   |     `-DeclRefExpr 0x28b8a806c88 <col:40> 'unsigned int' lvalue Var 0x28b8a8031d8 'num' 'unsigned int'
|   |           |     |   `-BinaryOperator 0x28b8a806d58 <col:46, col:50> 'int' '+'
|   |           |     |     |-ImplicitCastExpr 0x28b8a806d40 <col:46> 'int' <LValueToRValue>
|   |           |     |     | `-DeclRefExpr 0x28b8a806cf8 <col:46> 'int' lvalue Var 0x28b8a8030a8 'i' 'int'
|   |           |     |     `-IntegerLiteral 0x28b8a806d18 <col:50> 'int' 4
|   |           |     `-IntegerLiteral 0x28b8a806dd8 <col:56> 'int' 5
|   |           |-CompoundAssignOperator 0x28b8a8070a8 <line:1732:17, col:57> 'u64':'unsigned long long' '|=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |           | |-DeclRefExpr 0x28b8a806e70 <col:17> 'u64':'unsigned long long' lvalue Var 0x28b8a8036f8 'bits' 'u64':'unsigned long long'
|   |           | `-ImplicitCastExpr 0x28b8a807090 <col:25, col:57> 'unsigned long long' <IntegralCast>
|   |           |   `-BinaryOperator 0x28b8a807070 <col:25, col:57> 'int' '<<'
|   |           |     |-ImplicitCastExpr 0x28b8a807058 <col:25, col:52> 'int' <IntegralCast>
|   |           |     | `-CallExpr 0x28b8a806fe8 <col:25, col:52> 'char'
|   |           |     |   |-ImplicitCastExpr 0x28b8a806fd0 <col:25> 'char (*)(const u8 *, int)' <FunctionToPointerDecay>
|   |           |     |   | `-DeclRefExpr 0x28b8a806e90 <col:25> 'char (const u8 *, int)' Function 0x28b8a801f48 'get_bit' 'char (const u8 *, int)'
|   |           |     |   |-ImplicitCastExpr 0x28b8a807018 <col:33, col:44> 'const u8 *' <ArrayToPointerDecay>
|   |           |     |   | `-ArraySubscriptExpr 0x28b8a806f20 <col:33, col:44> 'const felem_bytearray':'u8 const[32]' lvalue
|   |           |     |   |   |-ImplicitCastExpr 0x28b8a806ef0 <col:33> 'const felem_bytearray *':'const felem_bytearray *' <LValueToRValue>
|   |           |     |   |   | `-DeclRefExpr 0x28b8a806eb0 <col:33> 'const felem_bytearray *':'const felem_bytearray *' lvalue ParmVar 0x28b8a8026d0 'scalars' 'const felem_bytearray *':'const felem_bytearray *'
|   |           |     |   |   `-ImplicitCastExpr 0x28b8a806f08 <col:41> 'unsigned int' <LValueToRValue>
|   |           |     |   |     `-DeclRefExpr 0x28b8a806ed0 <col:41> 'unsigned int' lvalue Var 0x28b8a8031d8 'num' 'unsigned int'
|   |           |     |   `-BinaryOperator 0x28b8a806fb0 <col:47, col:51> 'int' '+'
|   |           |     |     |-ImplicitCastExpr 0x28b8a806f88 <col:47> 'int' <LValueToRValue>
|   |           |     |     | `-DeclRefExpr 0x28b8a806f40 <col:47> 'int' lvalue Var 0x28b8a8030a8 'i' 'int'
|   |           |     |     `-IntegerLiteral 0x28b8a806f60 <col:51> 'int' 3
|   |           |     `-IntegerLiteral 0x28b8a807030 <col:57> 'int' 4
|   |           |-CompoundAssignOperator 0x28b8a807300 <line:1733:17, col:57> 'u64':'unsigned long long' '|=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |           | |-DeclRefExpr 0x28b8a8070d8 <col:17> 'u64':'unsigned long long' lvalue Var 0x28b8a8036f8 'bits' 'u64':'unsigned long long'
|   |           | `-ImplicitCastExpr 0x28b8a8072e8 <col:25, col:57> 'unsigned long long' <IntegralCast>
|   |           |   `-BinaryOperator 0x28b8a8072c8 <col:25, col:57> 'int' '<<'
|   |           |     |-ImplicitCastExpr 0x28b8a8072b0 <col:25, col:52> 'int' <IntegralCast>
|   |           |     | `-CallExpr 0x28b8a807240 <col:25, col:52> 'char'
|   |           |     |   |-ImplicitCastExpr 0x28b8a807228 <col:25> 'char (*)(const u8 *, int)' <FunctionToPointerDecay>
|   |           |     |   | `-DeclRefExpr 0x28b8a8070f8 <col:25> 'char (const u8 *, int)' Function 0x28b8a801f48 'get_bit' 'char (const u8 *, int)'
|   |           |     |   |-ImplicitCastExpr 0x28b8a807270 <col:33, col:44> 'const u8 *' <ArrayToPointerDecay>
|   |           |     |   | `-ArraySubscriptExpr 0x28b8a807188 <col:33, col:44> 'const felem_bytearray':'u8 const[32]' lvalue
|   |           |     |   |   |-ImplicitCastExpr 0x28b8a807158 <col:33> 'const felem_bytearray *':'const felem_bytearray *' <LValueToRValue>
|   |           |     |   |   | `-DeclRefExpr 0x28b8a807118 <col:33> 'const felem_bytearray *':'const felem_bytearray *' lvalue ParmVar 0x28b8a8026d0 'scalars' 'const felem_bytearray *':'const felem_bytearray *'
|   |           |     |   |   `-ImplicitCastExpr 0x28b8a807170 <col:41> 'unsigned int' <LValueToRValue>
|   |           |     |   |     `-DeclRefExpr 0x28b8a807138 <col:41> 'unsigned int' lvalue Var 0x28b8a8031d8 'num' 'unsigned int'
|   |           |     |   `-BinaryOperator 0x28b8a807208 <col:47, col:51> 'int' '+'
|   |           |     |     |-ImplicitCastExpr 0x28b8a8071f0 <col:47> 'int' <LValueToRValue>
|   |           |     |     | `-DeclRefExpr 0x28b8a8071a8 <col:47> 'int' lvalue Var 0x28b8a8030a8 'i' 'int'
|   |           |     |     `-IntegerLiteral 0x28b8a8071c8 <col:51> 'int' 2
|   |           |     `-IntegerLiteral 0x28b8a807288 <col:57> 'int' 3
|   |           |-CompoundAssignOperator 0x28b8a807558 <line:1734:17, col:57> 'u64':'unsigned long long' '|=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |           | |-DeclRefExpr 0x28b8a807330 <col:17> 'u64':'unsigned long long' lvalue Var 0x28b8a8036f8 'bits' 'u64':'unsigned long long'
|   |           | `-ImplicitCastExpr 0x28b8a807540 <col:25, col:57> 'unsigned long long' <IntegralCast>
|   |           |   `-BinaryOperator 0x28b8a807520 <col:25, col:57> 'int' '<<'
|   |           |     |-ImplicitCastExpr 0x28b8a807508 <col:25, col:52> 'int' <IntegralCast>
|   |           |     | `-CallExpr 0x28b8a807498 <col:25, col:52> 'char'
|   |           |     |   |-ImplicitCastExpr 0x28b8a807480 <col:25> 'char (*)(const u8 *, int)' <FunctionToPointerDecay>
|   |           |     |   | `-DeclRefExpr 0x28b8a807350 <col:25> 'char (const u8 *, int)' Function 0x28b8a801f48 'get_bit' 'char (const u8 *, int)'
|   |           |     |   |-ImplicitCastExpr 0x28b8a8074c8 <col:33, col:44> 'const u8 *' <ArrayToPointerDecay>
|   |           |     |   | `-ArraySubscriptExpr 0x28b8a8073e0 <col:33, col:44> 'const felem_bytearray':'u8 const[32]' lvalue
|   |           |     |   |   |-ImplicitCastExpr 0x28b8a8073b0 <col:33> 'const felem_bytearray *':'const felem_bytearray *' <LValueToRValue>
|   |           |     |   |   | `-DeclRefExpr 0x28b8a807370 <col:33> 'const felem_bytearray *':'const felem_bytearray *' lvalue ParmVar 0x28b8a8026d0 'scalars' 'const felem_bytearray *':'const felem_bytearray *'
|   |           |     |   |   `-ImplicitCastExpr 0x28b8a8073c8 <col:41> 'unsigned int' <LValueToRValue>
|   |           |     |   |     `-DeclRefExpr 0x28b8a807390 <col:41> 'unsigned int' lvalue Var 0x28b8a8031d8 'num' 'unsigned int'
|   |           |     |   `-BinaryOperator 0x28b8a807460 <col:47, col:51> 'int' '+'
|   |           |     |     |-ImplicitCastExpr 0x28b8a807448 <col:47> 'int' <LValueToRValue>
|   |           |     |     | `-DeclRefExpr 0x28b8a807400 <col:47> 'int' lvalue Var 0x28b8a8030a8 'i' 'int'
|   |           |     |     `-IntegerLiteral 0x28b8a807420 <col:51> 'int' 1
|   |           |     `-IntegerLiteral 0x28b8a8074e0 <col:57> 'int' 2
|   |           |-CompoundAssignOperator 0x28b8a807768 <line:1735:17, col:53> 'u64':'unsigned long long' '|=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |           | |-DeclRefExpr 0x28b8a807588 <col:17> 'u64':'unsigned long long' lvalue Var 0x28b8a8036f8 'bits' 'u64':'unsigned long long'
|   |           | `-ImplicitCastExpr 0x28b8a807750 <col:25, col:53> 'unsigned long long' <IntegralCast>
|   |           |   `-BinaryOperator 0x28b8a807730 <col:25, col:53> 'int' '<<'
|   |           |     |-ImplicitCastExpr 0x28b8a807718 <col:25, col:48> 'int' <IntegralCast>
|   |           |     | `-CallExpr 0x28b8a807690 <col:25, col:48> 'char'
|   |           |     |   |-ImplicitCastExpr 0x28b8a807678 <col:25> 'char (*)(const u8 *, int)' <FunctionToPointerDecay>
|   |           |     |   | `-DeclRefExpr 0x28b8a8075a8 <col:25> 'char (const u8 *, int)' Function 0x28b8a801f48 'get_bit' 'char (const u8 *, int)'
|   |           |     |   |-ImplicitCastExpr 0x28b8a8076c0 <col:33, col:44> 'const u8 *' <ArrayToPointerDecay>
|   |           |     |   | `-ArraySubscriptExpr 0x28b8a807638 <col:33, col:44> 'const felem_bytearray':'u8 const[32]' lvalue
|   |           |     |   |   |-ImplicitCastExpr 0x28b8a807608 <col:33> 'const felem_bytearray *':'const felem_bytearray *' <LValueToRValue>
|   |           |     |   |   | `-DeclRefExpr 0x28b8a8075c8 <col:33> 'const felem_bytearray *':'const felem_bytearray *' lvalue ParmVar 0x28b8a8026d0 'scalars' 'const felem_bytearray *':'const felem_bytearray *'
|   |           |     |   |   `-ImplicitCastExpr 0x28b8a807620 <col:41> 'unsigned int' <LValueToRValue>
|   |           |     |   |     `-DeclRefExpr 0x28b8a8075e8 <col:41> 'unsigned int' lvalue Var 0x28b8a8031d8 'num' 'unsigned int'
|   |           |     |   `-ImplicitCastExpr 0x28b8a8076d8 <col:47> 'int' <LValueToRValue>
|   |           |     |     `-DeclRefExpr 0x28b8a807658 <col:47> 'int' lvalue Var 0x28b8a8030a8 'i' 'int'
|   |           |     `-IntegerLiteral 0x28b8a8076f0 <col:53> 'int' 1
|   |           |-CompoundAssignOperator 0x28b8a807960 <line:1736:17, col:52> 'u64':'unsigned long long' '|=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |           | |-DeclRefExpr 0x28b8a807798 <col:17> 'u64':'unsigned long long' lvalue Var 0x28b8a8036f8 'bits' 'u64':'unsigned long long'
|   |           | `-ImplicitCastExpr 0x28b8a807948 <col:25, col:52> 'unsigned long long' <IntegralCast>
|   |           |   `-CallExpr 0x28b8a807900 <col:25, col:52> 'char'
|   |           |     |-ImplicitCastExpr 0x28b8a8078e8 <col:25> 'char (*)(const u8 *, int)' <FunctionToPointerDecay>
|   |           |     | `-DeclRefExpr 0x28b8a8077b8 <col:25> 'char (const u8 *, int)' Function 0x28b8a801f48 'get_bit' 'char (const u8 *, int)'
|   |           |     |-ImplicitCastExpr 0x28b8a807930 <col:33, col:44> 'const u8 *' <ArrayToPointerDecay>
|   |           |     | `-ArraySubscriptExpr 0x28b8a807848 <col:33, col:44> 'const felem_bytearray':'u8 const[32]' lvalue
|   |           |     |   |-ImplicitCastExpr 0x28b8a807818 <col:33> 'const felem_bytearray *':'const felem_bytearray *' <LValueToRValue>
|   |           |     |   | `-DeclRefExpr 0x28b8a8077d8 <col:33> 'const felem_bytearray *':'const felem_bytearray *' lvalue ParmVar 0x28b8a8026d0 'scalars' 'const felem_bytearray *':'const felem_bytearray *'
|   |           |     |   `-ImplicitCastExpr 0x28b8a807830 <col:41> 'unsigned int' <LValueToRValue>
|   |           |     |     `-DeclRefExpr 0x28b8a8077f8 <col:41> 'unsigned int' lvalue Var 0x28b8a8031d8 'num' 'unsigned int'
|   |           |     `-BinaryOperator 0x28b8a8078c8 <col:47, col:51> 'int' '-'
|   |           |       |-ImplicitCastExpr 0x28b8a8078b0 <col:47> 'int' <LValueToRValue>
|   |           |       | `-DeclRefExpr 0x28b8a807868 <col:47> 'int' lvalue Var 0x28b8a8030a8 'i' 'int'
|   |           |       `-IntegerLiteral 0x28b8a807888 <col:51> 'int' 1
|   |           |-CallExpr 0x28b8a807ab0 <line:1737:17, col:68> 'void'
|   |           | |-ImplicitCastExpr 0x28b8a807a98 <col:17> 'void (*)(unsigned char *, unsigned char *, unsigned char)' <FunctionToPointerDecay>
|   |           | | `-DeclRefExpr 0x28b8a807990 <col:17> 'void (unsigned char *, unsigned char *, unsigned char)' Function 0x28b8a6a8e18 'ec_GFp_nistp_recode_scalar_bits' 'void (unsigned char *, unsigned char *, unsigned char)'
|   |           | |-UnaryOperator 0x28b8a8079e8 <col:49, col:50> 'u8 *' prefix '&' cannot overflow
|   |           | | `-DeclRefExpr 0x28b8a8079b0 <col:50> 'u8':'unsigned char' lvalue Var 0x28b8a803788 'sign' 'u8':'unsigned char'
|   |           | |-UnaryOperator 0x28b8a807a38 <col:56, col:57> 'u8 *' prefix '&' cannot overflow
|   |           | | `-DeclRefExpr 0x28b8a807a00 <col:57> 'u8':'unsigned char' lvalue Var 0x28b8a803800 'digit' 'u8':'unsigned char'
|   |           | `-ImplicitCastExpr 0x28b8a807b00 <col:64> 'unsigned char' <IntegralCast>
|   |           |   `-ImplicitCastExpr 0x28b8a807ae8 <col:64> 'u64':'unsigned long long' <LValueToRValue>
|   |           |     `-DeclRefExpr 0x28b8a807a50 <col:64> 'u64':'unsigned long long' lvalue Var 0x28b8a8036f8 'bits' 'u64':'unsigned long long'
|   |           |-CallExpr 0x28b8a807c48 <line:1742:17, col:59> 'void'
|   |           | |-ImplicitCastExpr 0x28b8a807c30 <col:17> 'void (*)(const u64, unsigned int, const smallfelem (*)[3], smallfelem *)' <FunctionToPointerDecay>
|   |           | | `-DeclRefExpr 0x28b8a807b18 <col:17> 'void (const u64, unsigned int, const smallfelem (*)[3], smallfelem *)' Function 0x28b8a7fea68 'select_point' 'void (const u64, unsigned int, const smallfelem (*)[3], smallfelem *)'
|   |           | |-ImplicitCastExpr 0x28b8a807ca0 <col:30> 'u64':'unsigned long long' <IntegralCast>
|   |           | | `-ImplicitCastExpr 0x28b8a807c88 <col:30> 'u8':'unsigned char' <LValueToRValue>
|   |           | |   `-DeclRefExpr 0x28b8a807b38 <col:30> 'u8':'unsigned char' lvalue Var 0x28b8a803800 'digit' 'u8':'unsigned char'
|   |           | |-ImplicitCastExpr 0x28b8a807cb8 <col:37> 'unsigned int' <IntegralCast>
|   |           | | `-IntegerLiteral 0x28b8a807b58 <col:37> 'int' 17
|   |           | |-ImplicitCastExpr 0x28b8a807cd0 <col:41, col:53> 'const smallfelem (*)[3]' <ArrayToPointerDecay>
|   |           | | `-ArraySubscriptExpr 0x28b8a807bf0 <col:41, col:53> 'const smallfelem [17][3]' lvalue
|   |           | |   |-ImplicitCastExpr 0x28b8a807bc0 <col:41> 'const smallfelem (*)[17][3]':'const smallfelem (*)[17][3]' <LValueToRValue>
|   |           | |   | `-DeclRefExpr 0x28b8a807b80 <col:41> 'const smallfelem (*)[17][3]':'const smallfelem (*)[17][3]' lvalue ParmVar 0x28b8a802ae0 'pre_comp' 'const smallfelem (*)[17][3]':'const smallfelem (*)[17][3]'
|   |           | |   `-ImplicitCastExpr 0x28b8a807bd8 <col:50> 'unsigned int' <LValueToRValue>
|   |           | |     `-DeclRefExpr 0x28b8a807ba0 <col:50> 'unsigned int' lvalue Var 0x28b8a8031d8 'num' 'unsigned int'
|   |           | `-ImplicitCastExpr 0x28b8a807ce8 <col:56> 'smallfelem *' <ArrayToPointerDecay>
|   |           |   `-DeclRefExpr 0x28b8a807c10 <col:56> 'smallfelem [3]' lvalue Var 0x28b8a803668 'tmp' 'smallfelem [3]'
|   |           |-CallExpr 0x28b8a807df0 <line:1743:17, col:44> 'void'
|   |           | |-ImplicitCastExpr 0x28b8a807dd8 <col:17> 'void (*)(limb *, const u64 *)' <FunctionToPointerDecay>
|   |           | | `-DeclRefExpr 0x28b8a807d00 <col:17> 'void (limb *, const u64 *)' Function 0x28b8a5f6498 'smallfelem_neg' 'void (limb *, const u64 *)'
|   |           | |-ImplicitCastExpr 0x28b8a807e20 <col:32> 'limb *' <ArrayToPointerDecay>
|   |           | | `-DeclRefExpr 0x28b8a807d20 <col:32> 'felem':'limb [4]' lvalue Var 0x28b8a803570 'ftmp' 'felem':'limb [4]'
|   |           | `-ImplicitCastExpr 0x28b8a807e50 <col:38, col:43> 'const u64 *':'const u64 *' <NoOp>
|   |           |   `-ImplicitCastExpr 0x28b8a807e38 <col:38, col:43> 'u64 *' <ArrayToPointerDecay>
|   |           |     `-ArraySubscriptExpr 0x28b8a807db8 <col:38, col:43> 'smallfelem':'u64 [4]' lvalue
|   |           |       |-ImplicitCastExpr 0x28b8a807da0 <col:38> 'smallfelem *' <ArrayToPointerDecay>
|   |           |       | `-DeclRefExpr 0x28b8a807d58 <col:38> 'smallfelem [3]' lvalue Var 0x28b8a803668 'tmp' 'smallfelem [3]'
|   |           |       `-IntegerLiteral 0x28b8a807d78 <col:42> 'int' 1
|   |           |-CallExpr 0x28b8a808038 <line:1745:17, col:73> 'void'
|   |           | |-ImplicitCastExpr 0x28b8a808020 <col:17> 'void (*)(limb *, const u64 *, limb)' <FunctionToPointerDecay>
|   |           | | `-DeclRefExpr 0x28b8a807e68 <col:17> 'void (limb *, const u64 *, limb)' Function 0x28b8a6fead8 'copy_small_conditional' 'void (limb *, const u64 *, limb)'
|   |           | |-ImplicitCastExpr 0x28b8a808070 <col:40> 'limb *' <ArrayToPointerDecay>
|   |           | | `-DeclRefExpr 0x28b8a807e88 <col:40> 'felem':'limb [4]' lvalue Var 0x28b8a803570 'ftmp' 'felem':'limb [4]'
|   |           | |-ImplicitCastExpr 0x28b8a8080a0 <col:46, col:51> 'const u64 *':'const u64 *' <NoOp>
|   |           | | `-ImplicitCastExpr 0x28b8a808088 <col:46, col:51> 'u64 *' <ArrayToPointerDecay>
|   |           | |   `-ArraySubscriptExpr 0x28b8a807f08 <col:46, col:51> 'smallfelem':'u64 [4]' lvalue
|   |           | |     |-ImplicitCastExpr 0x28b8a807ef0 <col:46> 'smallfelem *' <ArrayToPointerDecay>
|   |           | |     | `-DeclRefExpr 0x28b8a807ea8 <col:46> 'smallfelem [3]' lvalue Var 0x28b8a803668 'tmp' 'smallfelem [3]'
|   |           | |     `-IntegerLiteral 0x28b8a807ec8 <col:50> 'int' 1
|   |           | `-ParenExpr 0x28b8a808000 <col:54, col:72> 'int'
|   |           |   `-BinaryOperator 0x28b8a807fe0 <col:55, col:71> 'int' '-'
|   |           |     |-ParenExpr 0x28b8a807f98 <col:55, col:67> 'limb':'int'
|   |           |     | `-CStyleCastExpr 0x28b8a807f70 <col:56, col:63> 'limb':'int' <IntegralCast>
|   |           |     |   `-ImplicitCastExpr 0x28b8a807f58 <col:63> 'u8':'unsigned char' <LValueToRValue> part_of_explicit_cast
|   |           |     |     `-DeclRefExpr 0x28b8a807f28 <col:63> 'u8':'unsigned char' lvalue Var 0x28b8a803788 'sign' 'u8':'unsigned char'
|   |           |     `-IntegerLiteral 0x28b8a807fb8 <col:71> 'int' 1
|   |           |-CallExpr 0x28b8a808190 <line:1746:17, col:44> 'void'
|   |           | |-ImplicitCastExpr 0x28b8a808178 <col:17> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|   |           | | `-DeclRefExpr 0x28b8a8080b8 <col:17> 'void (u64 *, const limb *)' Function 0x28b8a6f8d18 'felem_contract' 'void (u64 *, const limb *)'
|   |           | |-ImplicitCastExpr 0x28b8a8081c0 <col:32, col:37> 'u64 *' <ArrayToPointerDecay>
|   |           | | `-ArraySubscriptExpr 0x28b8a808138 <col:32, col:37> 'smallfelem':'u64 [4]' lvalue
|   |           | |   |-ImplicitCastExpr 0x28b8a808120 <col:32> 'smallfelem *' <ArrayToPointerDecay>
|   |           | |   | `-DeclRefExpr 0x28b8a8080d8 <col:32> 'smallfelem [3]' lvalue Var 0x28b8a803668 'tmp' 'smallfelem [3]'
|   |           | |   `-IntegerLiteral 0x28b8a8080f8 <col:36> 'int' 1
|   |           | `-ImplicitCastExpr 0x28b8a8081f0 <col:40> 'const limb *':'const limb *' <NoOp>
|   |           |   `-ImplicitCastExpr 0x28b8a8081d8 <col:40> 'limb *' <ArrayToPointerDecay>
|   |           |     `-DeclRefExpr 0x28b8a808158 <col:40> 'felem':'limb [4]' lvalue Var 0x28b8a803570 'ftmp' 'felem':'limb [4]'
|   |           `-IfStmt 0x28b8a808ee0 <line:1748:17, line:1757:17> has_else
|   |             |-UnaryOperator 0x28b8a808240 <line:1748:21, col:22> 'int' prefix '!' cannot overflow
|   |             | `-ImplicitCastExpr 0x28b8a808228 <col:22> 'int' <LValueToRValue>
|   |             |   `-DeclRefExpr 0x28b8a808208 <col:22> 'int' lvalue Var 0x28b8a803128 'skip' 'int'
|   |             |-CompoundStmt 0x28b8a808920 <col:28, line:1752:17>
|   |             | `-CallExpr 0x28b8a808730 <line:1749:21, line:1751:60> 'void'
|   |             |   |-ImplicitCastExpr 0x28b8a808718 <line:1749:21> 'void (*)(limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const u64 *, const u64 *, const u64 *)' <FunctionToPointerDecay>
|   |             |   | `-DeclRefExpr 0x28b8a808258 <col:21> 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const u64 *, const u64 *, const u64 *)' Function 0x28b8a6ffa18 'point_add' 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const u64 *, const u64 *, const u64 *)'
|   |             |   |-ImplicitCastExpr 0x28b8a8087a0 <col:31, col:35> 'limb *' <ArrayToPointerDecay>
|   |             |   | `-ArraySubscriptExpr 0x28b8a8082d8 <col:31, col:35> 'felem':'limb [4]' lvalue
|   |             |   |   |-ImplicitCastExpr 0x28b8a8082c0 <col:31> 'felem *' <ArrayToPointerDecay>
|   |             |   |   | `-DeclRefExpr 0x28b8a808278 <col:31> 'felem [3]' lvalue Var 0x28b8a8034f8 'nq' 'felem [3]'
|   |             |   |   `-IntegerLiteral 0x28b8a808298 <col:34> 'int' 0
|   |             |   |-ImplicitCastExpr 0x28b8a8087b8 <col:38, col:42> 'limb *' <ArrayToPointerDecay>
|   |             |   | `-ArraySubscriptExpr 0x28b8a808358 <col:38, col:42> 'felem':'limb [4]' lvalue
|   |             |   |   |-ImplicitCastExpr 0x28b8a808340 <col:38> 'felem *' <ArrayToPointerDecay>
|   |             |   |   | `-DeclRefExpr 0x28b8a8082f8 <col:38> 'felem [3]' lvalue Var 0x28b8a8034f8 'nq' 'felem [3]'
|   |             |   |   `-IntegerLiteral 0x28b8a808318 <col:41> 'int' 1
|   |             |   |-ImplicitCastExpr 0x28b8a8087d0 <col:45, col:49> 'limb *' <ArrayToPointerDecay>
|   |             |   | `-ArraySubscriptExpr 0x28b8a8083d8 <col:45, col:49> 'felem':'limb [4]' lvalue
|   |             |   |   |-ImplicitCastExpr 0x28b8a8083c0 <col:45> 'felem *' <ArrayToPointerDecay>
|   |             |   |   | `-DeclRefExpr 0x28b8a808378 <col:45> 'felem [3]' lvalue Var 0x28b8a8034f8 'nq' 'felem [3]'
|   |             |   |   `-IntegerLiteral 0x28b8a808398 <col:48> 'int' 2
|   |             |   |-ImplicitCastExpr 0x28b8a808800 <line:1750:31, col:35> 'const limb *':'const limb *' <NoOp>
|   |             |   | `-ImplicitCastExpr 0x28b8a8087e8 <col:31, col:35> 'limb *' <ArrayToPointerDecay>
|   |             |   |   `-ArraySubscriptExpr 0x28b8a808458 <col:31, col:35> 'felem':'limb [4]' lvalue
|   |             |   |     |-ImplicitCastExpr 0x28b8a808440 <col:31> 'felem *' <ArrayToPointerDecay>
|   |             |   |     | `-DeclRefExpr 0x28b8a8083f8 <col:31> 'felem [3]' lvalue Var 0x28b8a8034f8 'nq' 'felem [3]'
|   |             |   |     `-IntegerLiteral 0x28b8a808418 <col:34> 'int' 0
|   |             |   |-ImplicitCastExpr 0x28b8a808830 <col:38, col:42> 'const limb *':'const limb *' <NoOp>
|   |             |   | `-ImplicitCastExpr 0x28b8a808818 <col:38, col:42> 'limb *' <ArrayToPointerDecay>
|   |             |   |   `-ArraySubscriptExpr 0x28b8a8084d8 <col:38, col:42> 'felem':'limb [4]' lvalue
|   |             |   |     |-ImplicitCastExpr 0x28b8a8084c0 <col:38> 'felem *' <ArrayToPointerDecay>
|   |             |   |     | `-DeclRefExpr 0x28b8a808478 <col:38> 'felem [3]' lvalue Var 0x28b8a8034f8 'nq' 'felem [3]'
|   |             |   |     `-IntegerLiteral 0x28b8a808498 <col:41> 'int' 1
|   |             |   |-ImplicitCastExpr 0x28b8a808860 <col:45, col:49> 'const limb *':'const limb *' <NoOp>
|   |             |   | `-ImplicitCastExpr 0x28b8a808848 <col:45, col:49> 'limb *' <ArrayToPointerDecay>
|   |             |   |   `-ArraySubscriptExpr 0x28b8a808558 <col:45, col:49> 'felem':'limb [4]' lvalue
|   |             |   |     |-ImplicitCastExpr 0x28b8a808540 <col:45> 'felem *' <ArrayToPointerDecay>
|   |             |   |     | `-DeclRefExpr 0x28b8a8084f8 <col:45> 'felem [3]' lvalue Var 0x28b8a8034f8 'nq' 'felem [3]'
|   |             |   |     `-IntegerLiteral 0x28b8a808518 <col:48> 'int' 2
|   |             |   |-ImplicitCastExpr 0x28b8a808878 <line:1751:31> 'int' <LValueToRValue>
|   |             |   | `-DeclRefExpr 0x28b8a808578 <col:31> 'const int' lvalue ParmVar 0x28b8a802848 'mixed' 'const int'
|   |             |   |-ImplicitCastExpr 0x28b8a8088a8 <col:38, col:43> 'const u64 *':'const u64 *' <NoOp>
|   |             |   | `-ImplicitCastExpr 0x28b8a808890 <col:38, col:43> 'u64 *' <ArrayToPointerDecay>
|   |             |   |   `-ArraySubscriptExpr 0x28b8a8085f8 <col:38, col:43> 'smallfelem':'u64 [4]' lvalue
|   |             |   |     |-ImplicitCastExpr 0x28b8a8085e0 <col:38> 'smallfelem *' <ArrayToPointerDecay>
|   |             |   |     | `-DeclRefExpr 0x28b8a808598 <col:38> 'smallfelem [3]' lvalue Var 0x28b8a803668 'tmp' 'smallfelem [3]'
|   |             |   |     `-IntegerLiteral 0x28b8a8085b8 <col:42> 'int' 0
|   |             |   |-ImplicitCastExpr 0x28b8a8088d8 <col:46, col:51> 'const u64 *':'const u64 *' <NoOp>
|   |             |   | `-ImplicitCastExpr 0x28b8a8088c0 <col:46, col:51> 'u64 *' <ArrayToPointerDecay>
|   |             |   |   `-ArraySubscriptExpr 0x28b8a808678 <col:46, col:51> 'smallfelem':'u64 [4]' lvalue
|   |             |   |     |-ImplicitCastExpr 0x28b8a808660 <col:46> 'smallfelem *' <ArrayToPointerDecay>
|   |             |   |     | `-DeclRefExpr 0x28b8a808618 <col:46> 'smallfelem [3]' lvalue Var 0x28b8a803668 'tmp' 'smallfelem [3]'
|   |             |   |     `-IntegerLiteral 0x28b8a808638 <col:50> 'int' 1
|   |             |   `-ImplicitCastExpr 0x28b8a808908 <col:54, col:59> 'const u64 *':'const u64 *' <NoOp>
|   |             |     `-ImplicitCastExpr 0x28b8a8088f0 <col:54, col:59> 'u64 *' <ArrayToPointerDecay>
|   |             |       `-ArraySubscriptExpr 0x28b8a8086f8 <col:54, col:59> 'smallfelem':'u64 [4]' lvalue
|   |             |         |-ImplicitCastExpr 0x28b8a8086e0 <col:54> 'smallfelem *' <ArrayToPointerDecay>
|   |             |         | `-DeclRefExpr 0x28b8a808698 <col:54> 'smallfelem [3]' lvalue Var 0x28b8a803668 'tmp' 'smallfelem [3]'
|   |             |         `-IntegerLiteral 0x28b8a8086b8 <col:58> 'int' 2
|   |             `-CompoundStmt 0x28b8a808eb0 <line:1752:24, line:1757:17>
|   |               |-CallExpr 0x28b8a808a70 <line:1753:21, col:52> 'void'
|   |               | |-ImplicitCastExpr 0x28b8a808a58 <col:21> 'void (*)(limb *, const u64 *)' <FunctionToPointerDecay>
|   |               | | `-DeclRefExpr 0x28b8a808938 <col:21> 'void (limb *, const u64 *)' Function 0x28b8a6002f0 'smallfelem_expand' 'void (limb *, const u64 *)'
|   |               | |-ImplicitCastExpr 0x28b8a808aa0 <col:39, col:43> 'limb *' <ArrayToPointerDecay>
|   |               | | `-ArraySubscriptExpr 0x28b8a8089b8 <col:39, col:43> 'felem':'limb [4]' lvalue
|   |               | |   |-ImplicitCastExpr 0x28b8a8089a0 <col:39> 'felem *' <ArrayToPointerDecay>
|   |               | |   | `-DeclRefExpr 0x28b8a808958 <col:39> 'felem [3]' lvalue Var 0x28b8a8034f8 'nq' 'felem [3]'
|   |               | |   `-IntegerLiteral 0x28b8a808978 <col:42> 'int' 0
|   |               | `-ImplicitCastExpr 0x28b8a808ad0 <col:46, col:51> 'const u64 *':'const u64 *' <NoOp>
|   |               |   `-ImplicitCastExpr 0x28b8a808ab8 <col:46, col:51> 'u64 *' <ArrayToPointerDecay>
|   |               |     `-ArraySubscriptExpr 0x28b8a808a38 <col:46, col:51> 'smallfelem':'u64 [4]' lvalue
|   |               |       |-ImplicitCastExpr 0x28b8a808a20 <col:46> 'smallfelem *' <ArrayToPointerDecay>
|   |               |       | `-DeclRefExpr 0x28b8a8089d8 <col:46> 'smallfelem [3]' lvalue Var 0x28b8a803668 'tmp' 'smallfelem [3]'
|   |               |       `-IntegerLiteral 0x28b8a8089f8 <col:50> 'int' 0
|   |               |-CallExpr 0x28b8a808c20 <line:1754:21, col:52> 'void'
|   |               | |-ImplicitCastExpr 0x28b8a808c08 <col:21> 'void (*)(limb *, const u64 *)' <FunctionToPointerDecay>
|   |               | | `-DeclRefExpr 0x28b8a808ae8 <col:21> 'void (limb *, const u64 *)' Function 0x28b8a6002f0 'smallfelem_expand' 'void (limb *, const u64 *)'
|   |               | |-ImplicitCastExpr 0x28b8a808c50 <col:39, col:43> 'limb *' <ArrayToPointerDecay>
|   |               | | `-ArraySubscriptExpr 0x28b8a808b68 <col:39, col:43> 'felem':'limb [4]' lvalue
|   |               | |   |-ImplicitCastExpr 0x28b8a808b50 <col:39> 'felem *' <ArrayToPointerDecay>
|   |               | |   | `-DeclRefExpr 0x28b8a808b08 <col:39> 'felem [3]' lvalue Var 0x28b8a8034f8 'nq' 'felem [3]'
|   |               | |   `-IntegerLiteral 0x28b8a808b28 <col:42> 'int' 1
|   |               | `-ImplicitCastExpr 0x28b8a808c80 <col:46, col:51> 'const u64 *':'const u64 *' <NoOp>
|   |               |   `-ImplicitCastExpr 0x28b8a808c68 <col:46, col:51> 'u64 *' <ArrayToPointerDecay>
|   |               |     `-ArraySubscriptExpr 0x28b8a808be8 <col:46, col:51> 'smallfelem':'u64 [4]' lvalue
|   |               |       |-ImplicitCastExpr 0x28b8a808bd0 <col:46> 'smallfelem *' <ArrayToPointerDecay>
|   |               |       | `-DeclRefExpr 0x28b8a808b88 <col:46> 'smallfelem [3]' lvalue Var 0x28b8a803668 'tmp' 'smallfelem [3]'
|   |               |       `-IntegerLiteral 0x28b8a808ba8 <col:50> 'int' 1
|   |               |-CallExpr 0x28b8a808dd0 <line:1755:21, col:52> 'void'
|   |               | |-ImplicitCastExpr 0x28b8a808db8 <col:21> 'void (*)(limb *, const u64 *)' <FunctionToPointerDecay>
|   |               | | `-DeclRefExpr 0x28b8a808c98 <col:21> 'void (limb *, const u64 *)' Function 0x28b8a6002f0 'smallfelem_expand' 'void (limb *, const u64 *)'
|   |               | |-ImplicitCastExpr 0x28b8a808e00 <col:39, col:43> 'limb *' <ArrayToPointerDecay>
|   |               | | `-ArraySubscriptExpr 0x28b8a808d18 <col:39, col:43> 'felem':'limb [4]' lvalue
|   |               | |   |-ImplicitCastExpr 0x28b8a808d00 <col:39> 'felem *' <ArrayToPointerDecay>
|   |               | |   | `-DeclRefExpr 0x28b8a808cb8 <col:39> 'felem [3]' lvalue Var 0x28b8a8034f8 'nq' 'felem [3]'
|   |               | |   `-IntegerLiteral 0x28b8a808cd8 <col:42> 'int' 2
|   |               | `-ImplicitCastExpr 0x28b8a808e30 <col:46, col:51> 'const u64 *':'const u64 *' <NoOp>
|   |               |   `-ImplicitCastExpr 0x28b8a808e18 <col:46, col:51> 'u64 *' <ArrayToPointerDecay>
|   |               |     `-ArraySubscriptExpr 0x28b8a808d98 <col:46, col:51> 'smallfelem':'u64 [4]' lvalue
|   |               |       |-ImplicitCastExpr 0x28b8a808d80 <col:46> 'smallfelem *' <ArrayToPointerDecay>
|   |               |       | `-DeclRefExpr 0x28b8a808d38 <col:46> 'smallfelem [3]' lvalue Var 0x28b8a803668 'tmp' 'smallfelem [3]'
|   |               |       `-IntegerLiteral 0x28b8a808d58 <col:50> 'int' 2
|   |               `-BinaryOperator 0x28b8a808e90 <line:1756:21, col:28> 'int' '='
|   |                 |-DeclRefExpr 0x28b8a808e48 <col:21> 'int' lvalue Var 0x28b8a803128 'skip' 'int'
|   |                 `-IntegerLiteral 0x28b8a808e68 <col:28> 'int' 0
|   |-CallExpr 0x28b8a7fb0b8 <line:1761:5, col:30> 'void'
|   | |-ImplicitCastExpr 0x28b8a7fb0a0 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a7fafe0 <col:5> 'void (limb *, const limb *)' Function 0x28b8a5f3218 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a7fb0e8 <col:18> 'limb *':'limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x28b8a7fb000 <col:18> 'limb *':'limb *' lvalue ParmVar 0x28b8a802460 'x_out' 'limb *':'limb *'
|   | `-ImplicitCastExpr 0x28b8a7fb118 <col:25, col:29> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a7fb100 <col:25, col:29> 'limb *' <ArrayToPointerDecay>
|   |     `-ArraySubscriptExpr 0x28b8a7fb080 <col:25, col:29> 'felem':'limb [4]' lvalue
|   |       |-ImplicitCastExpr 0x28b8a7fb068 <col:25> 'felem *' <ArrayToPointerDecay>
|   |       | `-DeclRefExpr 0x28b8a7fb020 <col:25> 'felem [3]' lvalue Var 0x28b8a8034f8 'nq' 'felem [3]'
|   |       `-IntegerLiteral 0x28b8a7fb040 <col:28> 'int' 0
|   |-CallExpr 0x28b8a7fb208 <line:1762:5, col:30> 'void'
|   | |-ImplicitCastExpr 0x28b8a7fb1f0 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a7fb130 <col:5> 'void (limb *, const limb *)' Function 0x28b8a5f3218 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a7fb238 <col:18> 'limb *':'limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x28b8a7fb150 <col:18> 'limb *':'limb *' lvalue ParmVar 0x28b8a8024d8 'y_out' 'limb *':'limb *'
|   | `-ImplicitCastExpr 0x28b8a7fb268 <col:25, col:29> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a7fb250 <col:25, col:29> 'limb *' <ArrayToPointerDecay>
|   |     `-ArraySubscriptExpr 0x28b8a7fb1d0 <col:25, col:29> 'felem':'limb [4]' lvalue
|   |       |-ImplicitCastExpr 0x28b8a7fb1b8 <col:25> 'felem *' <ArrayToPointerDecay>
|   |       | `-DeclRefExpr 0x28b8a7fb170 <col:25> 'felem [3]' lvalue Var 0x28b8a8034f8 'nq' 'felem [3]'
|   |       `-IntegerLiteral 0x28b8a7fb190 <col:28> 'int' 1
|   `-CallExpr 0x28b8a7fb358 <line:1763:5, col:30> 'void'
|     |-ImplicitCastExpr 0x28b8a7fb340 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x28b8a7fb280 <col:5> 'void (limb *, const limb *)' Function 0x28b8a5f3218 'felem_assign' 'void (limb *, const limb *)'
|     |-ImplicitCastExpr 0x28b8a7fb388 <col:18> 'limb *':'limb *' <LValueToRValue>
|     | `-DeclRefExpr 0x28b8a7fb2a0 <col:18> 'limb *':'limb *' lvalue ParmVar 0x28b8a802550 'z_out' 'limb *':'limb *'
|     `-ImplicitCastExpr 0x28b8a7fb3b8 <col:25, col:29> 'const limb *':'const limb *' <NoOp>
|       `-ImplicitCastExpr 0x28b8a7fb3a0 <col:25, col:29> 'limb *' <ArrayToPointerDecay>
|         `-ArraySubscriptExpr 0x28b8a7fb320 <col:25, col:29> 'felem':'limb [4]' lvalue
|           |-ImplicitCastExpr 0x28b8a7fb308 <col:25> 'felem *' <ArrayToPointerDecay>
|           | `-DeclRefExpr 0x28b8a7fb2c0 <col:25> 'felem [3]' lvalue Var 0x28b8a8034f8 'nq' 'felem [3]'
|           `-IntegerLiteral 0x28b8a7fb2e0 <col:28> 'int' 2
|-RecordDecl 0x28b8a7fb440 prev 0x28b8a686838 <line:1767:1, line:1771:1> line:1767:8 invalid struct nistp256_pre_comp_st definition
| |-FieldDecl 0x28b8a7fb638 <line:1768:5, col:35> col:16 referenced g_pre_comp 'smallfelem [2][16][3]'
| |-FieldDecl 0x28b8a7fb6a8 <line:1769:5, col:9> col:9 referenced references 'int'
| `-FieldDecl 0x28b8a7fb718 <line:1770:5, col:20> col:20 invalid lock 'int *'
|-FunctionDecl 0x28b8a7fb840 <line:1773:1, line:1828:1> line:1773:18 invalid EC_GFp_nistp256_method 'const int *(void)'
| `-CompoundStmt 0x28b8a7fbb78 <line:1774:1, line:1828:1>
|   `-DeclStmt 0x28b8a7fbb30 <line:1775:5, line:1825:6>
|     `-VarDecl 0x28b8a7fb910 <line:1775:5, col:28> col:28 invalid ret 'const int' static
|-FunctionDecl 0x28b8a7fbc08 <line:1835:1, line:1853:1> line:1835:27 used nistp256_pre_comp_new 'NISTP256_PRE_COMP *()' static
| |-CompoundStmt 0x28b8a7fc700 <line:1836:1, line:1853:1>
| | |-DeclStmt 0x28b8a7fbf60 <line:1837:5, col:58>
| | | `-VarDecl 0x28b8a7fbcd0 <col:5, col:57> col:24 used ret 'NISTP256_PRE_COMP *' cinit
| | |   `-ImplicitCastExpr 0x28b8a7fbf48 <col:30, col:57> 'NISTP256_PRE_COMP *' <IntegralToPointer>
| | |     `-CallExpr 0x28b8a7fbf20 <col:30, col:57> 'int'
| | |       |-ImplicitCastExpr 0x28b8a7fbf08 <col:30> 'int (*)()' <FunctionToPointerDecay>
| | |       | `-DeclRefExpr 0x28b8a7fbe28 <col:30> 'int ()' Function 0x28b8a7fbd60 'OPENSSL_zalloc' 'int ()'
| | |       `-UnaryExprOrTypeTraitExpr 0x28b8a7fbeb8 <col:45, col:56> 'unsigned long long' sizeof
| | |         `-ParenExpr 0x28b8a7fbe98 <col:51, col:56> 'NISTP256_PRE_COMP':'struct nistp256_pre_comp_st' lvalue
| | |           `-UnaryOperator 0x28b8a7fbe80 <col:52, col:53> 'NISTP256_PRE_COMP':'struct nistp256_pre_comp_st' lvalue prefix '*' cannot overflow
| | |             `-ImplicitCastExpr 0x28b8a7fbe68 <col:53> 'NISTP256_PRE_COMP *' <LValueToRValue>
| | |               `-DeclRefExpr 0x28b8a7fbe48 <col:53> 'NISTP256_PRE_COMP *' lvalue Var 0x28b8a7fbcd0 'ret' 'NISTP256_PRE_COMP *' non_odr_use_unevaluated
| | |-IfStmt 0x28b8a7fc108 <line:1839:5, line:1842:5>
| | | |-BinaryOperator 0x28b8a7fc068 <line:1839:9, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27> 'int' '=='
| | | | |-ImplicitCastExpr 0x28b8a7fc038 <.//openssl//file_jk/before\crypto\ec\ecp_nistp256.c:1839:9> 'NISTP256_PRE_COMP *' <LValueToRValue>
| | | | | `-DeclRefExpr 0x28b8a7fbf78 <col:9> 'NISTP256_PRE_COMP *' lvalue Var 0x28b8a7fbcd0 'ret' 'NISTP256_PRE_COMP *'
| | | | `-ImplicitCastExpr 0x28b8a7fc050 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'NISTP256_PRE_COMP *' <BitCast>
| | | |   `-ParenExpr 0x28b8a7fc018 <col:17, col:27> 'void *'
| | | |     `-CStyleCastExpr 0x28b8a7fbff0 <col:18, col:26> 'void *' <NullToPointer>
| | | |       `-IntegerLiteral 0x28b8a7fbfb0 <col:26> 'int' 0
| | | `-CompoundStmt 0x28b8a7fc0f0 <.//openssl//file_jk/before\crypto\ec\ecp_nistp256.c:1839:22, line:1842:5>
| | |   `-ReturnStmt 0x28b8a7fc0e0 <line:1841:9, col:16>
| | |     `-ImplicitCastExpr 0x28b8a7fc0c8 <col:16> 'NISTP256_PRE_COMP *' <LValueToRValue>
| | |       `-DeclRefExpr 0x28b8a7fc0a8 <col:16> 'NISTP256_PRE_COMP *' lvalue Var 0x28b8a7fbcd0 'ret' 'NISTP256_PRE_COMP *'
| | |-BinaryOperator 0x28b8a7fc1b0 <line:1844:5, col:23> 'int' '='
| | | |-MemberExpr 0x28b8a7fc158 <col:5, col:10> 'int' lvalue ->references 0x28b8a7fb6a8
| | | | `-ImplicitCastExpr 0x28b8a7fc140 <col:5> 'NISTP256_PRE_COMP *' <LValueToRValue>
| | | |   `-DeclRefExpr 0x28b8a7fc120 <col:5> 'NISTP256_PRE_COMP *' lvalue Var 0x28b8a7fbcd0 'ret' 'NISTP256_PRE_COMP *'
| | | `-IntegerLiteral 0x28b8a7fc188 <col:23> 'int' 1
| | |-IfStmt 0x28b8a7fc6a0 <line:1847:5, line:1851:5>
| | | |-OpaqueValueExpr 0x28b8a7fc688 <<invalid sloc>> '_Bool'
| | | `-CompoundStmt 0x28b8a7fc668 <line:1847:28, line:1851:5>
| | |   |-CallExpr 0x28b8a7fc578 <line:1849:9, col:25> 'int'
| | |   | |-ImplicitCastExpr 0x28b8a7fc560 <col:9> 'int (*)()' <FunctionToPointerDecay>
| | |   | | `-DeclRefExpr 0x28b8a7fc520 <col:9> 'int ()' Function 0x28b8a7fc458 'OPENSSL_free' 'int ()'
| | |   | `-ImplicitCastExpr 0x28b8a7fc5a0 <col:22> 'NISTP256_PRE_COMP *' <LValueToRValue>
| | |   |   `-DeclRefExpr 0x28b8a7fc540 <col:22> 'NISTP256_PRE_COMP *' lvalue Var 0x28b8a7fbcd0 'ret' 'NISTP256_PRE_COMP *'
| | |   `-ReturnStmt 0x28b8a7fc658 <line:1850:9, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27>
| | |     `-ImplicitCastExpr 0x28b8a7fc640 <col:17, col:27> 'NISTP256_PRE_COMP *' <NullToPointer>
| | |       `-ParenExpr 0x28b8a7fc620 <col:17, col:27> 'void *'
| | |         `-CStyleCastExpr 0x28b8a7fc5f8 <col:18, col:26> 'void *' <NullToPointer>
| | |           `-IntegerLiteral 0x28b8a7fc5b8 <col:26> 'int' 0
| | `-ReturnStmt 0x28b8a7fc6f0 <.//openssl//file_jk/before\crypto\ec\ecp_nistp256.c:1852:5, col:12>
| |   `-ImplicitCastExpr 0x28b8a7fc6d8 <col:12> 'NISTP256_PRE_COMP *' <LValueToRValue>
| |     `-DeclRefExpr 0x28b8a7fc6b8 <col:12> 'NISTP256_PRE_COMP *' lvalue Var 0x28b8a7fbcd0 'ret' 'NISTP256_PRE_COMP *'
| `-FullComment 0x28b8a828008 <line:1830:4, col:78>
|   `-ParagraphComment 0x28b8a827fe0 <col:4, col:78>
|     `-TextComment 0x28b8a827fb8 <col:4, col:78> Text="***************************************************************************"
|-FunctionDecl 0x28b8a7fc7f0 prev 0x28b8a68e8b8 <line:1855:1, line:1861:1> line:1855:20 EC_nistp256_pre_comp_dup 'NISTP256_PRE_COMP *(NISTP256_PRE_COMP *)'
| |-ParmVarDecl 0x28b8a7fc748 <col:45, col:64> col:64 used p 'NISTP256_PRE_COMP *'
| `-CompoundStmt 0x28b8a7fccb0 <line:1856:1, line:1861:1>
|   |-DeclStmt 0x28b8a7fc918 <line:1857:5, col:10>
|   | `-VarDecl 0x28b8a7fc8b0 <col:5, col:9> col:9 used i 'int'
|   `-ReturnStmt 0x28b8a7fcca0 <line:1860:5, col:12>
|     `-ImplicitCastExpr 0x28b8a7fcc88 <col:12> 'NISTP256_PRE_COMP *' <LValueToRValue>
|       `-DeclRefExpr 0x28b8a7fcc68 <col:12> 'NISTP256_PRE_COMP *' lvalue ParmVar 0x28b8a7fc748 'p' 'NISTP256_PRE_COMP *'
|-FunctionDecl 0x28b8a7fcd88 prev 0x28b8a68ef38 <line:1863:1, line:1878:1> line:1863:6 used EC_nistp256_pre_comp_free 'void (NISTP256_PRE_COMP *)'
| |-ParmVarDecl 0x28b8a7fcce0 <col:32, col:51> col:51 used pre 'NISTP256_PRE_COMP *'
| `-CompoundStmt 0x28b8a7f9738 <line:1864:1, line:1878:1>
|   |-DeclStmt 0x28b8a7fceb0 <line:1865:5, col:10>
|   | `-VarDecl 0x28b8a7fce48 <col:5, col:9> col:9 used i 'int'
|   |-IfStmt 0x28b8a7f8fc0 <line:1867:5, line:1868:9>
|   | |-BinaryOperator 0x28b8a7f8f90 <line:1867:9, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27> 'int' '=='
|   | | |-ImplicitCastExpr 0x28b8a7f8f60 <.//openssl//file_jk/before\crypto\ec\ecp_nistp256.c:1867:9> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a7fcec8 <col:9> 'NISTP256_PRE_COMP *' lvalue ParmVar 0x28b8a7fcce0 'pre' 'NISTP256_PRE_COMP *'
|   | | `-ImplicitCastExpr 0x28b8a7f8f78 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'NISTP256_PRE_COMP *' <BitCast>
|   | |   `-ParenExpr 0x28b8a7f8f40 <col:17, col:27> 'void *'
|   | |     `-CStyleCastExpr 0x28b8a7fcf28 <col:18, col:26> 'void *' <NullToPointer>
|   | |       `-IntegerLiteral 0x28b8a7fcee8 <col:26> 'int' 0
|   | `-ReturnStmt 0x28b8a7f8fb0 <.//openssl//file_jk/before\crypto\ec\ecp_nistp256.c:1868:9>
|   |-IfStmt 0x28b8a7f9340 <line:1872:5, line:1873:9>
|   | |-BinaryOperator 0x28b8a7f9310 <line:1872:9, col:13> 'int' '>'
|   | | |-ImplicitCastExpr 0x28b8a7f92f8 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a7f92b0 <col:9> 'int' lvalue Var 0x28b8a7fce48 'i' 'int'
|   | | `-IntegerLiteral 0x28b8a7f92d0 <col:13> 'int' 0
|   | `-ReturnStmt 0x28b8a7f9330 <line:1873:9>
|   |-CallExpr 0x28b8a7f9500 <line:1874:5, col:26> 'int'
|   | |-ImplicitCastExpr 0x28b8a7f94e8 <col:5> 'int (*)()' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a7f9448 <col:5> 'int ()' Function 0x28b8a7f9380 'REF_ASSERT_ISNT' 'int ()'
|   | `-BinaryOperator 0x28b8a7f94c8 <col:21, col:25> 'int' '<'
|   |   |-ImplicitCastExpr 0x28b8a7f94b0 <col:21> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x28b8a7f9468 <col:21> 'int' lvalue Var 0x28b8a7fce48 'i' 'int'
|   |   `-IntegerLiteral 0x28b8a7f9488 <col:25> 'int' 0
|   `-CallExpr 0x28b8a7f96c8 <line:1877:5, col:21> 'int'
|     |-ImplicitCastExpr 0x28b8a7f96b0 <col:5> 'int (*)()' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x28b8a7f9670 <col:5> 'int ()' Function 0x28b8a7fc458 'OPENSSL_free' 'int ()'
|     `-ImplicitCastExpr 0x28b8a7f96f0 <col:18> 'NISTP256_PRE_COMP *' <LValueToRValue>
|       `-DeclRefExpr 0x28b8a7f9690 <col:18> 'NISTP256_PRE_COMP *' lvalue ParmVar 0x28b8a7fcce0 'pre' 'NISTP256_PRE_COMP *'
|-FunctionDecl 0x28b8a7f9820 <line:1885:1, line:1891:1> line:1885:5 invalid ec_GFp_nistp256_group_init 'int (int *)'
| |-ParmVarDecl 0x28b8a7f9788 <col:32, col:42> col:42 invalid group 'int *'
| |-CompoundStmt 0x28b8a7f9a20 <line:1886:1, line:1891:1>
| | |-DeclStmt 0x28b8a7f9960 <line:1887:5, col:12>
| | | `-VarDecl 0x28b8a7f98f8 <col:5, col:9> col:9 used ret 'int'
| | `-ReturnStmt 0x28b8a7f9a10 <line:1890:5, col:12>
| |   `-ImplicitCastExpr 0x28b8a7f99f8 <col:12> 'int' <LValueToRValue>
| |     `-DeclRefExpr 0x28b8a7f99d8 <col:12> 'int' lvalue Var 0x28b8a7f98f8 'ret' 'int'
| `-FullComment 0x28b8a8280d0 <line:1880:4, col:78>
|   `-ParagraphComment 0x28b8a8280a8 <col:4, col:78>
|     `-TextComment 0x28b8a828080 <col:4, col:78> Text="***************************************************************************"
|-FunctionDecl 0x28b8a7f9d10 <line:1893:1, line:1923:1> line:1893:5 invalid ec_GFp_nistp256_group_set_curve 'int (int *, const int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x28b8a7f9a58 <col:37, col:47> col:47 invalid group 'int *'
| |-ParmVarDecl 0x28b8a7f9ad8 <col:54, col:68> col:68 invalid p 'const int *'
| |-ParmVarDecl 0x28b8a7f9b58 <line:1894:37, col:51> col:51 invalid a 'const int *'
| |-ParmVarDecl 0x28b8a7f9bd8 <col:54, col:68> col:68 invalid b 'const int *'
| |-ParmVarDecl 0x28b8a7f9c58 <line:1895:37, col:45> col:45 invalid ctx 'int *'
| `-CompoundStmt 0x28b8a7fadb8 <line:1896:1, line:1923:1>
|   |-DeclStmt 0x28b8a7f9e98 <line:1897:5, col:16>
|   | `-VarDecl 0x28b8a7f9e08 <col:5, col:15> col:9 used ret 'int' cinit
|   |   `-IntegerLiteral 0x28b8a7f9e70 <col:15> 'int' 0
|   |-IfStmt 0x28b8a7fa210 <line:1901:5, line:1903:20>
|   | |-OpaqueValueExpr 0x28b8a7fa1f8 <<invalid sloc>> '_Bool'
|   | `-IfStmt 0x28b8a7fa1e0 <line:1902:9, line:1903:20>
|   |   |-OpaqueValueExpr 0x28b8a7fa1c8 <<invalid sloc>> '_Bool'
|   |   `-ReturnStmt 0x28b8a7fa1b8 <col:13, col:20>
|   |     `-IntegerLiteral 0x28b8a7fa190 <col:20> 'int' 0
|   |-IfStmt 0x28b8a7fa6a0 <line:1905:5, line:1908:14>
|   | |-OpaqueValueExpr 0x28b8a7fa688 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x28b8a7fa670 <col:9, col:14> 'err' 0x28b8a7fa620
|   |-IfStmt 0x28b8a7faae0 <line:1912:5, line:1916:5>
|   | |-OpaqueValueExpr 0x28b8a7faac8 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x28b8a7faab0 <line:1912:79, line:1916:5>
|   |   `-GotoStmt 0x28b8a7faa98 <line:1915:9, col:14> 'err' 0x28b8a7fa620
|   |-LabelStmt 0x28b8a7fac48 <line:1919:2, col:5> 'err'
|   | `-NullStmt 0x28b8a7fac40 <col:5>
|   `-ReturnStmt 0x28b8a7fada8 <line:1922:5, col:12>
|     `-ImplicitCastExpr 0x28b8a7fad90 <col:12> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x28b8a7fad70 <col:12> 'int' lvalue Var 0x28b8a7f9e08 'ret' 'int'
|-FunctionDecl 0x28b8a8131c8 <line:1929:1, line:1972:1> line:1929:5 invalid ec_GFp_nistp256_point_get_affine_coordinates 'int (const int *, const int *, int *, int *, int *)'
| |-ParmVarDecl 0x28b8a7fae10 <col:50, col:66> col:66 invalid group 'const int *'
| |-ParmVarDecl 0x28b8a7fae90 <line:1930:50, col:66> col:66 invalid point 'const int *'
| |-ParmVarDecl 0x28b8a813010 <line:1931:50, col:58> col:58 invalid x 'int *'
| |-ParmVarDecl 0x28b8a813090 <col:61, col:69> col:69 invalid y 'int *'
| |-ParmVarDecl 0x28b8a813110 <line:1932:50, col:58> col:58 invalid ctx 'int *'
| `-CompoundStmt 0x28b8a814848 <line:1933:1, line:1972:1>
|   |-DeclStmt 0x28b8a8134b0 <line:1934:5, col:29>
|   | |-VarDecl 0x28b8a8132b8 <col:5, col:11> col:11 used z1 'felem':'limb [4]'
|   | |-VarDecl 0x28b8a813330 <col:5, col:15> col:15 used z2 'felem':'limb [4]'
|   | |-VarDecl 0x28b8a8133a8 <col:5, col:19> col:19 used x_in 'felem':'limb [4]'
|   | `-VarDecl 0x28b8a813420 <col:5, col:25> col:25 used y_in 'felem':'limb [4]'
|   |-DeclStmt 0x28b8a8135d0 <line:1935:5, col:28>
|   | |-VarDecl 0x28b8a8134d8 <col:5, col:16> col:16 used x_out 'smallfelem':'u64 [4]'
|   | `-VarDecl 0x28b8a813550 <col:5, col:23> col:23 used y_out 'smallfelem':'u64 [4]'
|   |-DeclStmt 0x28b8a813660 <line:1936:5, col:18>
|   | `-VarDecl 0x28b8a8135f8 <col:5, col:15> col:15 used tmp 'longfelem':'limb [8]'
|   |-IfStmt 0x28b8a813810 <line:1938:5, line:1942:5>
|   | |-OpaqueValueExpr 0x28b8a8137f8 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x28b8a8137e0 <line:1938:48, line:1942:5>
|   |   `-ReturnStmt 0x28b8a8137d0 <line:1941:9, col:16>
|   |     `-IntegerLiteral 0x28b8a8137a8 <col:16> 'int' 0
|   |-IfStmt 0x28b8a813920 <line:1943:5, line:1945:16>
|   | |-OpaqueValueExpr 0x28b8a813908 <<invalid sloc>> '_Bool'
|   | `-ReturnStmt 0x28b8a8138f8 <col:9, col:16>
|   |   `-IntegerLiteral 0x28b8a8138d0 <col:16> 'int' 0
|   |-CallExpr 0x28b8a8139c8 <line:1946:5, col:21> 'void'
|   | |-ImplicitCastExpr 0x28b8a8139b0 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a813938 <col:5> 'void (limb *, const limb *)' Function 0x28b8a6f0090 'felem_inv' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a8139f8 <col:15> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a813958 <col:15> 'felem':'limb [4]' lvalue Var 0x28b8a813330 'z2' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x28b8a813a28 <col:19> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a813a10 <col:19> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a813990 <col:19> 'felem':'limb [4]' lvalue Var 0x28b8a8132b8 'z1' 'felem':'limb [4]'
|   |-CallExpr 0x28b8a813ad0 <line:1947:5, col:25> 'void'
|   | |-ImplicitCastExpr 0x28b8a813ab8 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a813a40 <col:5> 'void (limb *, const limb *)' Function 0x28b8a603cb8 'felem_square' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a813b00 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a813a60 <col:18> 'longfelem':'limb [8]' lvalue Var 0x28b8a8135f8 'tmp' 'longfelem':'limb [8]'
|   | `-ImplicitCastExpr 0x28b8a813b30 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a813b18 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a813a98 <col:23> 'felem':'limb [4]' lvalue Var 0x28b8a813330 'z2' 'felem':'limb [4]'
|   |-CallExpr 0x28b8a813bc0 <line:1948:5, col:25> 'void'
|   | |-ImplicitCastExpr 0x28b8a813ba8 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a813b48 <col:5> 'void (limb *, const limb *)' Function 0x28b8a6ed1e8 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a813bf0 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a813b68 <col:18> 'felem':'limb [4]' lvalue Var 0x28b8a8132b8 'z1' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x28b8a813c20 <col:22> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a813c08 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a813b88 <col:22> 'longfelem':'limb [8]' lvalue Var 0x28b8a8135f8 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x28b8a813cd0 <line:1949:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x28b8a813cb8 <col:5> 'void (*)(limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a813c38 <col:5> 'void (limb *, const limb *, const limb *)' Function 0x28b8a6088c8 'felem_mul' 'void (limb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a813d08 <col:15> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a813c58 <col:15> 'longfelem':'limb [8]' lvalue Var 0x28b8a8135f8 'tmp' 'longfelem':'limb [8]'
|   | |-ImplicitCastExpr 0x28b8a813d38 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x28b8a813d20 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x28b8a813c78 <col:20> 'felem':'limb [4]' lvalue Var 0x28b8a8133a8 'x_in' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x28b8a813d68 <col:26> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a813d50 <col:26> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a813c98 <col:26> 'felem':'limb [4]' lvalue Var 0x28b8a8132b8 'z1' 'felem':'limb [4]'
|   |-CallExpr 0x28b8a813df8 <line:1950:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x28b8a813de0 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a813d80 <col:5> 'void (limb *, const limb *)' Function 0x28b8a6ed1e8 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a813e28 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a813da0 <col:18> 'felem':'limb [4]' lvalue Var 0x28b8a8133a8 'x_in' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x28b8a813e58 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a813e40 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a813dc0 <col:24> 'longfelem':'limb [8]' lvalue Var 0x28b8a8135f8 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x28b8a813f00 <line:1951:5, col:31> 'void'
|   | |-ImplicitCastExpr 0x28b8a813ee8 <col:5> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a813e70 <col:5> 'void (u64 *, const limb *)' Function 0x28b8a6f8d18 'felem_contract' 'void (u64 *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a813f30 <col:20> 'u64 *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a813e90 <col:20> 'smallfelem':'u64 [4]' lvalue Var 0x28b8a8134d8 'x_out' 'smallfelem':'u64 [4]'
|   | `-ImplicitCastExpr 0x28b8a813f60 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a813f48 <col:27> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a813ec8 <col:27> 'felem':'limb [4]' lvalue Var 0x28b8a8133a8 'x_in' 'felem':'limb [4]'
|   |-IfStmt 0x28b8a8140f0 <line:1952:5, line:1958:5>
|   | |-OpaqueValueExpr 0x28b8a8140d8 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x28b8a8140c0 <line:1952:20, line:1958:5>
|   |   `-IfStmt 0x28b8a8140a8 <line:1953:9, line:1957:9>
|   |     |-OpaqueValueExpr 0x28b8a814090 <<invalid sloc>> '_Bool'
|   |     `-CompoundStmt 0x28b8a814078 <line:1953:42, line:1957:9>
|   |       `-ReturnStmt 0x28b8a814068 <line:1956:13, col:20>
|   |         `-IntegerLiteral 0x28b8a814040 <col:20> 'int' 0
|   |-CallExpr 0x28b8a8141a0 <line:1959:5, col:26> 'void'
|   | |-ImplicitCastExpr 0x28b8a814188 <col:5> 'void (*)(limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a814108 <col:5> 'void (limb *, const limb *, const limb *)' Function 0x28b8a6088c8 'felem_mul' 'void (limb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a8141d8 <col:15> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a814128 <col:15> 'longfelem':'limb [8]' lvalue Var 0x28b8a8135f8 'tmp' 'longfelem':'limb [8]'
|   | |-ImplicitCastExpr 0x28b8a814208 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x28b8a8141f0 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x28b8a814148 <col:20> 'felem':'limb [4]' lvalue Var 0x28b8a8132b8 'z1' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x28b8a814238 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a814220 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a814168 <col:24> 'felem':'limb [4]' lvalue Var 0x28b8a813330 'z2' 'felem':'limb [4]'
|   |-CallExpr 0x28b8a8142c8 <line:1960:5, col:25> 'void'
|   | |-ImplicitCastExpr 0x28b8a8142b0 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a814250 <col:5> 'void (limb *, const limb *)' Function 0x28b8a6ed1e8 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a8142f8 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a814270 <col:18> 'felem':'limb [4]' lvalue Var 0x28b8a8132b8 'z1' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x28b8a814328 <col:22> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a814310 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a814290 <col:22> 'longfelem':'limb [8]' lvalue Var 0x28b8a8135f8 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x28b8a8143d8 <line:1961:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x28b8a8143c0 <col:5> 'void (*)(limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a814340 <col:5> 'void (limb *, const limb *, const limb *)' Function 0x28b8a6088c8 'felem_mul' 'void (limb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a814410 <col:15> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a814360 <col:15> 'longfelem':'limb [8]' lvalue Var 0x28b8a8135f8 'tmp' 'longfelem':'limb [8]'
|   | |-ImplicitCastExpr 0x28b8a814440 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x28b8a814428 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x28b8a814380 <col:20> 'felem':'limb [4]' lvalue Var 0x28b8a813420 'y_in' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x28b8a814470 <col:26> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a814458 <col:26> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a8143a0 <col:26> 'felem':'limb [4]' lvalue Var 0x28b8a8132b8 'z1' 'felem':'limb [4]'
|   |-CallExpr 0x28b8a814500 <line:1962:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x28b8a8144e8 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a814488 <col:5> 'void (limb *, const limb *)' Function 0x28b8a6ed1e8 'felem_reduce' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a814530 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a8144a8 <col:18> 'felem':'limb [4]' lvalue Var 0x28b8a813420 'y_in' 'felem':'limb [4]'
|   | `-ImplicitCastExpr 0x28b8a814560 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a814548 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a8144c8 <col:24> 'longfelem':'limb [8]' lvalue Var 0x28b8a8135f8 'tmp' 'longfelem':'limb [8]'
|   |-CallExpr 0x28b8a814608 <line:1963:5, col:31> 'void'
|   | |-ImplicitCastExpr 0x28b8a8145f0 <col:5> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a814578 <col:5> 'void (u64 *, const limb *)' Function 0x28b8a6f8d18 'felem_contract' 'void (u64 *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a814638 <col:20> 'u64 *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a814598 <col:20> 'smallfelem':'u64 [4]' lvalue Var 0x28b8a813550 'y_out' 'smallfelem':'u64 [4]'
|   | `-ImplicitCastExpr 0x28b8a814668 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a814650 <col:27> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a8145d0 <col:27> 'felem':'limb [4]' lvalue Var 0x28b8a813420 'y_in' 'felem':'limb [4]'
|   |-IfStmt 0x28b8a8147f8 <line:1964:5, line:1970:5>
|   | |-OpaqueValueExpr 0x28b8a8147e0 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x28b8a8147c8 <line:1964:20, line:1970:5>
|   |   `-IfStmt 0x28b8a8147b0 <line:1965:9, line:1969:9>
|   |     |-OpaqueValueExpr 0x28b8a814798 <<invalid sloc>> '_Bool'
|   |     `-CompoundStmt 0x28b8a814780 <line:1965:42, line:1969:9>
|   |       `-ReturnStmt 0x28b8a814770 <line:1968:13, col:20>
|   |         `-IntegerLiteral 0x28b8a814748 <col:20> 'int' 0
|   `-ReturnStmt 0x28b8a814838 <line:1971:5, col:12>
|     `-IntegerLiteral 0x28b8a814810 <col:12> 'int' 1
|-FunctionDecl 0x28b8a814d58 <line:1975:1, line:2001:1> line:1975:13 used make_points_affine 'void (size_t, smallfelem (*)[3], smallfelem *)' static
| |-ParmVarDecl 0x28b8a814900 <col:32, col:39> col:39 used num 'size_t':'unsigned long long'
| |-ParmVarDecl 0x28b8a814ad0 <col:44, col:65> col:55 used points 'smallfelem (*)[3]':'smallfelem (*)[3]'
| |-ParmVarDecl 0x28b8a814bf0 <line:1976:32, col:59> col:43 used tmp_smallfelems 'smallfelem *':'smallfelem *'
| `-CompoundStmt 0x28b8a817b68 <line:1977:1, line:2001:1>
|   `-CallExpr 0x28b8a817a60 <line:1982:5, line:2000:63> 'void'
|     |-ImplicitCastExpr 0x28b8a817a48 <line:1982:5> 'void (*)(size_t, void *, size_t, void *, void (*)(void *), int (*)(const void *), void (*)(void *, const void *), void (*)(void *, const void *), void (*)(void *, const void *, const void *), void (*)(void *, const void *), void (*)(void *, const void *))' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x28b8a814e28 <col:5> 'void (size_t, void *, size_t, void *, void (*)(void *), int (*)(const void *), void (*)(void *, const void *), void (*)(void *, const void *), void (*)(void *, const void *, const void *), void (*)(void *, const void *), void (*)(void *, const void *))' Function 0x28b8a6a1a48 'ec_GFp_nistp_points_make_affine_internal' 'void (size_t, void *, size_t, void *, void (*)(void *), int (*)(const void *), void (*)(void *, const void *), void (*)(void *, const void *), void (*)(void *, const void *, const void *), void (*)(void *, const void *), void (*)(void *, const void *))'
|     |-ImplicitCastExpr 0x28b8a817ad8 <col:46> 'size_t':'unsigned long long' <LValueToRValue>
|     | `-DeclRefExpr 0x28b8a814e48 <col:46> 'size_t':'unsigned long long' lvalue ParmVar 0x28b8a814900 'num' 'size_t':'unsigned long long'
|     |-ImplicitCastExpr 0x28b8a817b08 <line:1983:46> 'void *' <BitCast>
|     | `-ImplicitCastExpr 0x28b8a817af0 <col:46> 'smallfelem (*)[3]':'smallfelem (*)[3]' <LValueToRValue>
|     |   `-DeclRefExpr 0x28b8a814e68 <col:46> 'smallfelem (*)[3]':'smallfelem (*)[3]' lvalue ParmVar 0x28b8a814ad0 'points' 'smallfelem (*)[3]':'smallfelem (*)[3]'
|     |-UnaryExprOrTypeTraitExpr 0x28b8a814e98 <line:1984:46, col:63> 'unsigned long long' sizeof 'smallfelem':'u64 [4]'
|     |-ImplicitCastExpr 0x28b8a817b38 <line:1985:46> 'void *' <BitCast>
|     | `-ImplicitCastExpr 0x28b8a817b20 <col:46> 'smallfelem *':'smallfelem *' <LValueToRValue>
|     |   `-DeclRefExpr 0x28b8a814eb8 <col:46> 'smallfelem *':'smallfelem *' lvalue ParmVar 0x28b8a814bf0 'tmp_smallfelems' 'smallfelem *':'smallfelem *'
|     |-CStyleCastExpr 0x28b8a817048 <line:1986:46, col:64> 'void (*)(void *)' <BitCast>
|     | `-ImplicitCastExpr 0x28b8a817030 <col:64> 'void (*)(u64 *)' <FunctionToPointerDecay> part_of_explicit_cast
|     |   `-DeclRefExpr 0x28b8a814f58 <col:64> 'void (u64 *)' Function 0x28b8a5f2338 'smallfelem_one' 'void (u64 *)'
|     |-ImplicitCastExpr 0x28b8a817b50 <line:1987:46> 'int (*)(const void *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x28b8a817070 <col:46> 'int (const void *)' Function 0x28b8a6efc28 'smallfelem_is_zero_int' 'int (const void *)'
|     |-CStyleCastExpr 0x28b8a817260 <line:1988:46, line:1989:46> 'void (*)(void *, const void *)' <BitCast>
|     | `-ImplicitCastExpr 0x28b8a817248 <col:46> 'void (*)(u64 *, const u64 *)' <FunctionToPointerDecay> part_of_explicit_cast
|     |   `-DeclRefExpr 0x28b8a817190 <col:46> 'void (u64 *, const u64 *)' Function 0x28b8a5f2978 'smallfelem_assign' 'void (u64 *, const u64 *)'
|     |-CStyleCastExpr 0x28b8a817400 <line:1990:46, line:1991:46> 'void (*)(void *, const void *)' <BitCast>
|     | `-ImplicitCastExpr 0x28b8a8173e8 <col:46> 'void (*)(u64 *, const u64 *)' <FunctionToPointerDecay> part_of_explicit_cast
|     |   `-DeclRefExpr 0x28b8a817388 <col:46> 'void (u64 *, const u64 *)' Function 0x28b8a6eb178 'smallfelem_square_contract' 'void (u64 *, const u64 *)'
|     |-CStyleCastExpr 0x28b8a817680 <line:1992:46, line:1995:46> 'void (*)(void *, const void *, const void *)' <BitCast>
|     | `-ImplicitCastExpr 0x28b8a817668 <col:46> 'void (*)(u64 *, const u64 *, const u64 *)' <FunctionToPointerDecay> part_of_explicit_cast
|     |   `-DeclRefExpr 0x28b8a8175a8 <col:46> 'void (u64 *, const u64 *, const u64 *)' Function 0x28b8a6eb8e8 'smallfelem_mul_contract' 'void (u64 *, const u64 *, const u64 *)'
|     |-CStyleCastExpr 0x28b8a817820 <line:1996:46, line:1997:46> 'void (*)(void *, const void *)' <BitCast>
|     | `-ImplicitCastExpr 0x28b8a817808 <col:46> 'void (*)(u64 *, const u64 *)' <FunctionToPointerDecay> part_of_explicit_cast
|     |   `-DeclRefExpr 0x28b8a8177a8 <col:46> 'void (u64 *, const u64 *)' Function 0x28b8a6f3b98 'smallfelem_inv_contract' 'void (u64 *, const u64 *)'
|     `-CStyleCastExpr 0x28b8a8179c0 <line:1999:46, line:2000:46> 'void (*)(void *, const void *)' <BitCast>
|       `-ImplicitCastExpr 0x28b8a8179a8 <col:46> 'void (*)(u64 *, const u64 *)' <FunctionToPointerDecay> part_of_explicit_cast
|         `-DeclRefExpr 0x28b8a817948 <col:46> 'void (u64 *, const u64 *)' Function 0x28b8a5f2978 'smallfelem_assign' 'void (u64 *, const u64 *)'
|-FunctionDecl 0x28b8a817f78 <line:2007:1, line:2208:1> line:2007:5 invalid ec_GFp_nistp256_points_mul 'int (const int *, int *, const int *, size_t, const int **, const int **, int *)'
| |-ParmVarDecl 0x28b8a817b98 <col:32, col:48> col:48 invalid group 'const int *'
| |-ParmVarDecl 0x28b8a817c18 <col:55, col:65> col:65 invalid r 'int *'
| |-ParmVarDecl 0x28b8a817c98 <line:2008:32, col:46> col:46 invalid scalar 'const int *'
| |-ParmVarDecl 0x28b8a817d10 <col:54, col:61> col:61 used num 'size_t':'unsigned long long'
| |-ParmVarDecl 0x28b8a817da0 <line:2009:32, <invalid sloc>> col:48 invalid points 'const int **':'const int **'
| |-ParmVarDecl 0x28b8a817e30 <line:2010:32, <invalid sloc>> col:46 invalid scalars 'const int **':'const int **'
| |-ParmVarDecl 0x28b8a817eb0 <col:57, col:65> col:65 invalid ctx 'int *'
| `-CompoundStmt 0x28b8a81a588 <line:2011:1, line:2208:1>
|   |-DeclStmt 0x28b8a818110 <line:2012:5, col:16>
|   | `-VarDecl 0x28b8a818080 <col:5, col:15> col:9 used ret 'int' cinit
|   |   `-IntegerLiteral 0x28b8a8180e8 <col:15> 'int' 0
|   |-DeclStmt 0x28b8a8181a8 <line:2013:5, col:10>
|   | `-VarDecl 0x28b8a818140 <col:5, col:9> col:9 used j 'int'
|   |-DeclStmt 0x28b8a818268 <line:2014:5, col:18>
|   | `-VarDecl 0x28b8a8181d8 <col:5, col:17> col:9 used mixed 'int' cinit
|   |   `-IntegerLiteral 0x28b8a818240 <col:17> 'int' 0
|   |-DeclStmt 0x28b8a818380 <line:2017:5, col:29>
|   | `-VarDecl 0x28b8a818318 <col:5, col:21> col:21 used g_secret 'felem_bytearray':'u8 [32]'
|   |-DeclStmt 0x28b8a818510 <line:2018:5, col:36>
|   | `-VarDecl 0x28b8a818408 <col:5, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27> .//openssl//file_jk/before\crypto\ec\ecp_nistp256.c:2018:22 used secrets 'felem_bytearray *' cinit
|   |   `-ImplicitCastExpr 0x28b8a8184f8 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'felem_bytearray *' <NullToPointer>
|   |     `-ParenExpr 0x28b8a8184d8 <col:17, col:27> 'void *'
|   |       `-CStyleCastExpr 0x28b8a8184b0 <col:18, col:26> 'void *' <NullToPointer>
|   |         `-IntegerLiteral 0x28b8a818470 <col:26> 'int' 0
|   |-DeclStmt 0x28b8a8187c0 <.//openssl//file_jk/before\crypto\ec\ecp_nistp256.c:2019:5, col:41>
|   | `-VarDecl 0x28b8a8186b8 <col:5, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27> .//openssl//file_jk/before\crypto\ec\ecp_nistp256.c:2019:18 used pre_comp 'smallfelem (*)[17][3]' cinit
|   |   `-ImplicitCastExpr 0x28b8a8187a8 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'smallfelem (*)[17][3]' <NullToPointer>
|   |     `-ParenExpr 0x28b8a818788 <col:17, col:27> 'void *'
|   |       `-CStyleCastExpr 0x28b8a818760 <col:18, col:26> 'void *' <NullToPointer>
|   |         `-IntegerLiteral 0x28b8a818720 <col:26> 'int' 0
|   |-DeclStmt 0x28b8a8188f0 <.//openssl//file_jk/before\crypto\ec\ecp_nistp256.c:2020:5, col:39>
|   | `-VarDecl 0x28b8a8187e8 <col:5, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27> .//openssl//file_jk/before\crypto\ec\ecp_nistp256.c:2020:17 used tmp_smallfelems 'smallfelem *' cinit
|   |   `-ImplicitCastExpr 0x28b8a8188d8 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'smallfelem *' <NullToPointer>
|   |     `-ParenExpr 0x28b8a8188b8 <col:17, col:27> 'void *'
|   |       `-CStyleCastExpr 0x28b8a818890 <col:18, col:26> 'void *' <NullToPointer>
|   |         `-IntegerLiteral 0x28b8a818850 <col:26> 'int' 0
|   |-DeclStmt 0x28b8a818980 <.//openssl//file_jk/before\crypto\ec\ecp_nistp256.c:2021:5, col:24>
|   | `-VarDecl 0x28b8a818918 <col:5, col:21> col:21 used tmp 'felem_bytearray':'u8 [32]'
|   |-DeclStmt 0x28b8a818ab0 <line:2022:5, col:26>
|   | |-VarDecl 0x28b8a8189b0 <col:5, col:14> col:14 used i 'unsigned int'
|   | `-VarDecl 0x28b8a818a30 <col:5, col:17> col:17 used num_bytes 'unsigned int'
|   |-DeclStmt 0x28b8a818b70 <line:2023:5, col:26>
|   | `-VarDecl 0x28b8a818ae0 <col:5, col:25> col:9 used have_pre_comp 'int' cinit
|   |   `-IntegerLiteral 0x28b8a818b48 <col:25> 'int' 0
|   |-DeclStmt 0x28b8a818c50 <line:2024:5, col:28>
|   | `-VarDecl 0x28b8a818b98 <col:5, col:25> col:12 used num_points 'size_t':'unsigned long long' cinit
|   |   `-ImplicitCastExpr 0x28b8a818c38 <col:25> 'size_t':'unsigned long long' <LValueToRValue>
|   |     `-DeclRefExpr 0x28b8a818c00 <col:25> 'size_t':'unsigned long long' lvalue ParmVar 0x28b8a817d10 'num' 'size_t':'unsigned long long'
|   |-DeclStmt 0x28b8a818df0 <line:2025:5, col:32>
|   | |-VarDecl 0x28b8a818c78 <col:5, col:16> col:16 used x_in 'smallfelem':'u64 [4]'
|   | |-VarDecl 0x28b8a818cf0 <col:5, col:22> col:22 used y_in 'smallfelem':'u64 [4]'
|   | `-VarDecl 0x28b8a818d68 <col:5, col:28> col:28 used z_in 'smallfelem':'u64 [4]'
|   |-DeclStmt 0x28b8a818f90 <line:2026:5, col:30>
|   | |-VarDecl 0x28b8a818e18 <col:5, col:11> col:11 used x_out 'felem':'limb [4]'
|   | |-VarDecl 0x28b8a818e90 <col:5, col:18> col:18 used y_out 'felem':'limb [4]'
|   | `-VarDecl 0x28b8a818f08 <col:5, col:25> col:25 used z_out 'felem':'limb [4]'
|   |-DeclStmt 0x28b8a8150c0 <line:2027:5, col:34>
|   | `-VarDecl 0x28b8a818fb8 <col:5, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27> .//openssl//file_jk/before\crypto\ec\ecp_nistp256.c:2027:24 used pre 'NISTP256_PRE_COMP *' cinit
|   |   `-ImplicitCastExpr 0x28b8a8150a8 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'NISTP256_PRE_COMP *' <NullToPointer>
|   |     `-ParenExpr 0x28b8a815088 <col:17, col:27> 'void *'
|   |       `-CStyleCastExpr 0x28b8a815060 <col:18, col:26> 'void *' <NullToPointer>
|   |         `-IntegerLiteral 0x28b8a815020 <col:26> 'int' 0
|   |-DeclStmt 0x28b8a815300 <.//openssl//file_jk/before\crypto\ec\ecp_nistp256.c:2028:5, col:48>
|   | `-VarDecl 0x28b8a8151f8 <col:5, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27> .//openssl//file_jk/before\crypto\ec\ecp_nistp256.c:2028:23 used g_pre_comp 'const smallfelem (*)[16][3]' cinit
|   |   `-ImplicitCastExpr 0x28b8a8152e8 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'const smallfelem (*)[16][3]' <NullToPointer>
|   |     `-ParenExpr 0x28b8a8152c8 <col:17, col:27> 'void *'
|   |       `-CStyleCastExpr 0x28b8a8152a0 <col:18, col:26> 'void *' <NullToPointer>
|   |         `-IntegerLiteral 0x28b8a815260 <col:26> 'int' 0
|   |-DeclStmt 0x28b8a8154a8 <.//openssl//file_jk/before\crypto\ec\ecp_nistp256.c:2030:5, col:29>
|   | `-VarDecl 0x28b8a8153b8 <col:5, col:21> col:21 invalid p 'const int *'
|   |-DeclStmt 0x28b8a8155c8 <line:2031:5, col:34>
|   | `-VarDecl 0x28b8a8154d8 <col:5, col:19> col:19 invalid p_scalar 'const int *'
|   |-IfStmt 0x28b8a8157c8 <line:2033:5, line:2035:20>
|   | |-OpaqueValueExpr 0x28b8a8157b0 <<invalid sloc>> '_Bool'
|   | `-IfStmt 0x28b8a815798 <line:2034:9, line:2035:20>
|   |   |-OpaqueValueExpr 0x28b8a815780 <<invalid sloc>> '_Bool'
|   |   `-ReturnStmt 0x28b8a815770 <col:13, col:20>
|   |     `-IntegerLiteral 0x28b8a815748 <col:20> 'int' 0
|   |-IfStmt 0x28b8a815b20 <line:2037:5, line:2041:14>
|   | |-OpaqueValueExpr 0x28b8a815b08 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x28b8a815af0 <col:9, col:14> 'err' 0x28b8a815aa0
|   |-IfStmt 0x28b8a816a10 <line:2043:5, line:2074:5>
|   | |-OpaqueValueExpr 0x28b8a8169f8 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x28b8a8169c0 <line:2043:25, line:2074:5>
|   |   |-IfStmt 0x28b8a815fd8 <line:2045:9, line:2050:33> has_else
|   |   | |-ImplicitCastExpr 0x28b8a815c18 <line:2045:13> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x28b8a815bf8 <col:13> 'NISTP256_PRE_COMP *' lvalue Var 0x28b8a818fb8 'pre' 'NISTP256_PRE_COMP *'
|   |   | |-BinaryOperator 0x28b8a815ee0 <line:2047:13, col:59> 'const smallfelem (*)[16][3]' '='
|   |   | | |-DeclRefExpr 0x28b8a815c30 <col:13> 'const smallfelem (*)[16][3]' lvalue Var 0x28b8a8151f8 'g_pre_comp' 'const smallfelem (*)[16][3]'
|   |   | | `-CStyleCastExpr 0x28b8a815eb8 <col:26, col:59> 'const smallfelem (*)[16][3]' <NoOp>
|   |   | |   `-ImplicitCastExpr 0x28b8a815de8 <col:54, col:59> 'smallfelem (*)[16][3]' <ArrayToPointerDecay> part_of_explicit_cast
|   |   | |     `-MemberExpr 0x28b8a815cf0 <col:54, col:59> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x28b8a7fb638
|   |   | |       `-ImplicitCastExpr 0x28b8a815cd8 <col:54> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |         `-DeclRefExpr 0x28b8a815cb8 <col:54> 'NISTP256_PRE_COMP *' lvalue Var 0x28b8a818fb8 'pre' 'NISTP256_PRE_COMP *'
|   |   | `-BinaryOperator 0x28b8a815fb8 <line:2050:13, col:33> 'const smallfelem (*)[16][3]' '='
|   |   |   |-DeclRefExpr 0x28b8a815f00 <col:13> 'const smallfelem (*)[16][3]' lvalue Var 0x28b8a8151f8 'g_pre_comp' 'const smallfelem (*)[16][3]'
|   |   |   `-UnaryOperator 0x28b8a815fa0 <col:26, col:33> 'const smallfelem (*)[16][3]' prefix '&' cannot overflow
|   |   |     `-ArraySubscriptExpr 0x28b8a815f80 <col:27, col:33> 'const smallfelem [16][3]' lvalue
|   |   |       |-ImplicitCastExpr 0x28b8a815f68 <col:27> 'const smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   |       | `-DeclRefExpr 0x28b8a815f20 <col:27> 'const smallfelem [2][16][3]' lvalue Var 0x28b8a706b78 'gmul' 'const smallfelem [2][16][3]'
|   |   |       `-IntegerLiteral 0x28b8a815f40 <col:32> 'int' 0
|   |   |-IfStmt 0x28b8a8161c8 <line:2052:9, line:2053:18>
|   |   | |-OpaqueValueExpr 0x28b8a8161b0 <<invalid sloc>> '_Bool'
|   |   | `-GotoStmt 0x28b8a816198 <col:13, col:18> 'err' 0x28b8a815aa0
|   |   |-IfStmt 0x28b8a816608 <line:2055:9, line:2060:9>
|   |   | |-OpaqueValueExpr 0x28b8a8165f0 <<invalid sloc>> '_Bool'
|   |   | `-CompoundStmt 0x28b8a8165d8 <line:2057:56, line:2060:9>
|   |   |   `-GotoStmt 0x28b8a8165c0 <line:2059:13, col:18> 'err' 0x28b8a815aa0
|   |   |-IfStmt 0x28b8a816760 <line:2061:9, line:2064:18>
|   |   | |-OpaqueValueExpr 0x28b8a816748 <<invalid sloc>> '_Bool'
|   |   | `-GotoStmt 0x28b8a816730 <col:13, col:18> 'err' 0x28b8a815aa0
|   |   `-IfStmt 0x28b8a816998 <line:2065:9, line:2073:23> has_else
|   |     |-OpaqueValueExpr 0x28b8a816980 <<invalid sloc>> '_Bool'
|   |     |-BinaryOperator 0x28b8a816910 <line:2067:13, col:29> 'int' '='
|   |     | |-DeclRefExpr 0x28b8a8168b0 <col:13> 'int' lvalue Var 0x28b8a818ae0 'have_pre_comp' 'int'
|   |     | `-IntegerLiteral 0x28b8a8168e8 <col:29> 'int' 1
|   |     `-UnaryOperator 0x28b8a816968 <line:2073:13, col:23> 'size_t':'unsigned long long' postfix '++'
|   |       `-DeclRefExpr 0x28b8a816930 <col:13> 'size_t':'unsigned long long' lvalue Var 0x28b8a818b98 'num_points' 'size_t':'unsigned long long'
|   |-IfStmt 0x28b8a80acf8 <line:2075:5, line:2160:5>
|   | |-BinaryOperator 0x28b8a816aa0 <line:2075:9, col:22> 'int' '>'
|   | | |-ImplicitCastExpr 0x28b8a816a70 <col:9> 'size_t':'unsigned long long' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a816a28 <col:9> 'size_t':'unsigned long long' lvalue Var 0x28b8a818b98 'num_points' 'size_t':'unsigned long long'
|   | | `-ImplicitCastExpr 0x28b8a816a88 <col:22> 'unsigned long long' <IntegralCast>
|   | |   `-IntegerLiteral 0x28b8a816a48 <col:22> 'int' 0
|   | `-CompoundStmt 0x28b8a80aca0 <col:25, line:2160:5>
|   |   |-IfStmt 0x28b8a816bf0 <line:2076:9, line:2082:9>
|   |   | |-BinaryOperator 0x28b8a816b38 <line:2076:13, col:27> 'int' '>='
|   |   | | |-ImplicitCastExpr 0x28b8a816b08 <col:13> 'size_t':'unsigned long long' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x28b8a816ac0 <col:13> 'size_t':'unsigned long long' lvalue Var 0x28b8a818b98 'num_points' 'size_t':'unsigned long long'
|   |   | | `-ImplicitCastExpr 0x28b8a816b20 <col:27> 'unsigned long long' <IntegralCast>
|   |   | |   `-IntegerLiteral 0x28b8a816ae0 <col:27> 'int' 3
|   |   | `-CompoundStmt 0x28b8a816bd8 <col:30, line:2082:9>
|   |   |   `-BinaryOperator 0x28b8a816bb8 <line:2081:13, col:21> 'int' '='
|   |   |     |-DeclRefExpr 0x28b8a816b58 <col:13> 'int' lvalue Var 0x28b8a8181d8 'mixed' 'int'
|   |   |     `-IntegerLiteral 0x28b8a816b90 <col:21> 'int' 1
|   |   |-BinaryOperator 0x28b8a816e90 <line:2083:9, col:63> 'felem_bytearray *' '='
|   |   | |-DeclRefExpr 0x28b8a816c08 <col:9> 'felem_bytearray *' lvalue Var 0x28b8a818408 'secrets' 'felem_bytearray *'
|   |   | `-ImplicitCastExpr 0x28b8a816e78 <col:19, col:63> 'felem_bytearray *' <IntegralToPointer>
|   |   |   `-CallExpr 0x28b8a816e50 <col:19, col:63> 'int'
|   |   |     |-ImplicitCastExpr 0x28b8a816e38 <col:19> 'int (*)()' <FunctionToPointerDecay>
|   |   |     | `-DeclRefExpr 0x28b8a816d30 <col:19> 'int ()' Function 0x28b8a816c68 'OPENSSL_malloc' 'int ()'
|   |   |     `-BinaryOperator 0x28b8a816e18 <col:34, col:53> 'unsigned long long' '*'
|   |   |       |-UnaryExprOrTypeTraitExpr 0x28b8a816dc0 <col:34, col:49> 'unsigned long long' sizeof
|   |   |       | `-ParenExpr 0x28b8a816da0 <col:40, col:49> 'felem_bytearray':'u8 [32]' lvalue
|   |   |       |   `-UnaryOperator 0x28b8a816d88 <col:41, col:42> 'felem_bytearray':'u8 [32]' lvalue prefix '*' cannot overflow
|   |   |       |     `-ImplicitCastExpr 0x28b8a816d70 <col:42> 'felem_bytearray *' <LValueToRValue>
|   |   |       |       `-DeclRefExpr 0x28b8a816d50 <col:42> 'felem_bytearray *' lvalue Var 0x28b8a818408 'secrets' 'felem_bytearray *' non_odr_use_unevaluated
|   |   |       `-ImplicitCastExpr 0x28b8a816e00 <col:53> 'size_t':'unsigned long long' <LValueToRValue>
|   |   |         `-DeclRefExpr 0x28b8a816de0 <col:53> 'size_t':'unsigned long long' lvalue Var 0x28b8a818b98 'num_points' 'size_t':'unsigned long long'
|   |   |-BinaryOperator 0x28b8a80f030 <line:2084:9, col:65> 'smallfelem (*)[17][3]' '='
|   |   | |-DeclRefExpr 0x28b8a816eb0 <col:9> 'smallfelem (*)[17][3]' lvalue Var 0x28b8a8186b8 'pre_comp' 'smallfelem (*)[17][3]'
|   |   | `-ImplicitCastExpr 0x28b8a80f018 <col:20, col:65> 'smallfelem (*)[17][3]' <IntegralToPointer>
|   |   |   `-CallExpr 0x28b8a80eff0 <col:20, col:65> 'int'
|   |   |     |-ImplicitCastExpr 0x28b8a816ff0 <col:20> 'int (*)()' <FunctionToPointerDecay>
|   |   |     | `-DeclRefExpr 0x28b8a816ee8 <col:20> 'int ()' Function 0x28b8a816c68 'OPENSSL_malloc' 'int ()'
|   |   |     `-BinaryOperator 0x28b8a816fd0 <col:35, col:55> 'unsigned long long' '*'
|   |   |       |-UnaryExprOrTypeTraitExpr 0x28b8a816f78 <col:35, col:51> 'unsigned long long' sizeof
|   |   |       | `-ParenExpr 0x28b8a816f58 <col:41, col:51> 'smallfelem [17][3]':'smallfelem [17][3]' lvalue
|   |   |       |   `-UnaryOperator 0x28b8a816f40 <col:42, col:43> 'smallfelem [17][3]':'smallfelem [17][3]' lvalue prefix '*' cannot overflow
|   |   |       |     `-ImplicitCastExpr 0x28b8a816f28 <col:43> 'smallfelem (*)[17][3]' <LValueToRValue>
|   |   |       |       `-DeclRefExpr 0x28b8a816f08 <col:43> 'smallfelem (*)[17][3]' lvalue Var 0x28b8a8186b8 'pre_comp' 'smallfelem (*)[17][3]' non_odr_use_unevaluated
|   |   |       `-ImplicitCastExpr 0x28b8a816fb8 <col:55> 'size_t':'unsigned long long' <LValueToRValue>
|   |   |         `-DeclRefExpr 0x28b8a816f98 <col:55> 'size_t':'unsigned long long' lvalue Var 0x28b8a818b98 'num_points' 'size_t':'unsigned long long'
|   |   |-IfStmt 0x28b8a80f320 <line:2085:9, line:2087:78>
|   |   | |-ImplicitCastExpr 0x28b8a80f070 <line:2085:13> 'int' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x28b8a80f050 <col:13> 'int' lvalue Var 0x28b8a8181d8 'mixed' 'int'
|   |   | `-BinaryOperator 0x28b8a80f300 <line:2086:13, line:2087:78> 'smallfelem *' '='
|   |   |   |-DeclRefExpr 0x28b8a80f088 <line:2086:13> 'smallfelem *' lvalue Var 0x28b8a8187e8 'tmp_smallfelems' 'smallfelem *'
|   |   |   `-ImplicitCastExpr 0x28b8a80f2e8 <line:2087:15, col:78> 'smallfelem *' <IntegralToPointer>
|   |   |     `-CallExpr 0x28b8a80f2c0 <col:15, col:78> 'int'
|   |   |       |-ImplicitCastExpr 0x28b8a80f2a8 <col:15> 'int (*)()' <FunctionToPointerDecay>
|   |   |       | `-DeclRefExpr 0x28b8a80f0c0 <col:15> 'int ()' Function 0x28b8a816c68 'OPENSSL_malloc' 'int ()'
|   |   |       `-BinaryOperator 0x28b8a80f288 <col:30, col:77> 'unsigned long long' '*'
|   |   |         |-UnaryExprOrTypeTraitExpr 0x28b8a80f150 <col:30, col:53> 'unsigned long long' sizeof
|   |   |         | `-ParenExpr 0x28b8a80f130 <col:36, col:53> 'smallfelem':'u64 [4]' lvalue
|   |   |         |   `-UnaryOperator 0x28b8a80f118 <col:37, col:38> 'smallfelem':'u64 [4]' lvalue prefix '*' cannot overflow
|   |   |         |     `-ImplicitCastExpr 0x28b8a80f100 <col:38> 'smallfelem *' <LValueToRValue>
|   |   |         |       `-DeclRefExpr 0x28b8a80f0e0 <col:38> 'smallfelem *' lvalue Var 0x28b8a8187e8 'tmp_smallfelems' 'smallfelem *' non_odr_use_unevaluated
|   |   |         `-ParenExpr 0x28b8a80f268 <col:57, col:77> 'unsigned long long'
|   |   |           `-BinaryOperator 0x28b8a80f248 <col:58, col:76> 'unsigned long long' '+'
|   |   |             |-BinaryOperator 0x28b8a80f1e8 <col:58, col:71> 'unsigned long long' '*'
|   |   |             | |-ImplicitCastExpr 0x28b8a80f1b8 <col:58> 'size_t':'unsigned long long' <LValueToRValue>
|   |   |             | | `-DeclRefExpr 0x28b8a80f170 <col:58> 'size_t':'unsigned long long' lvalue Var 0x28b8a818b98 'num_points' 'size_t':'unsigned long long'
|   |   |             | `-ImplicitCastExpr 0x28b8a80f1d0 <col:71> 'unsigned long long' <IntegralCast>
|   |   |             |   `-IntegerLiteral 0x28b8a80f190 <col:71> 'int' 17
|   |   |             `-ImplicitCastExpr 0x28b8a80f230 <col:76> 'unsigned long long' <IntegralCast>
|   |   |               `-IntegerLiteral 0x28b8a80f208 <col:76> 'int' 1
|   |   |-IfStmt 0x28b8a80f788 <line:2088:9, line:2092:9>
|   |   | |-BinaryOperator 0x28b8a80f718 <line:2088:13, line:2089:51> 'int' '||'
|   |   | | |-BinaryOperator 0x28b8a80f568 <line:2088:13, col:51> 'int' '||'
|   |   | | | |-ParenExpr 0x28b8a80f430 <col:13, col:29> 'int'
|   |   | | | | `-BinaryOperator 0x28b8a80f410 <col:14, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27> 'int' '=='
|   |   | | | |   |-ImplicitCastExpr 0x28b8a80f3e0 <.//openssl//file_jk/before\crypto\ec\ecp_nistp256.c:2088:14> 'felem_bytearray *' <LValueToRValue>
|   |   | | | |   | `-DeclRefExpr 0x28b8a80f338 <col:14> 'felem_bytearray *' lvalue Var 0x28b8a818408 'secrets' 'felem_bytearray *'
|   |   | | | |   `-ImplicitCastExpr 0x28b8a80f3f8 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'felem_bytearray *' <BitCast>
|   |   | | | |     `-ParenExpr 0x28b8a80f3c0 <col:17, col:27> 'void *'
|   |   | | | |       `-CStyleCastExpr 0x28b8a80f398 <col:18, col:26> 'void *' <NullToPointer>
|   |   | | | |         `-IntegerLiteral 0x28b8a80f358 <col:26> 'int' 0
|   |   | | | `-ParenExpr 0x28b8a80f548 <.//openssl//file_jk/before\crypto\ec\ecp_nistp256.c:2088:34, col:51> 'int'
|   |   | | |   `-BinaryOperator 0x28b8a80f528 <col:35, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27> 'int' '=='
|   |   | | |     |-ImplicitCastExpr 0x28b8a80f4f8 <.//openssl//file_jk/before\crypto\ec\ecp_nistp256.c:2088:35> 'smallfelem (*)[17][3]' <LValueToRValue>
|   |   | | |     | `-DeclRefExpr 0x28b8a80f450 <col:35> 'smallfelem (*)[17][3]' lvalue Var 0x28b8a8186b8 'pre_comp' 'smallfelem (*)[17][3]'
|   |   | | |     `-ImplicitCastExpr 0x28b8a80f510 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'smallfelem (*)[17][3]' <BitCast>
|   |   | | |       `-ParenExpr 0x28b8a80f4d8 <col:17, col:27> 'void *'
|   |   | | |         `-CStyleCastExpr 0x28b8a80f4b0 <col:18, col:26> 'void *' <NullToPointer>
|   |   | | |           `-IntegerLiteral 0x28b8a80f470 <col:26> 'int' 0
|   |   | | `-ParenExpr 0x28b8a80f6f8 <.//openssl//file_jk/before\crypto\ec\ecp_nistp256.c:2089:16, col:51> 'int'
|   |   | |   `-BinaryOperator 0x28b8a80f6d8 <col:17, col:50> 'int' '&&'
|   |   | |     |-ImplicitCastExpr 0x28b8a80f6c0 <col:17> 'int' <LValueToRValue>
|   |   | |     | `-DeclRefExpr 0x28b8a80f588 <col:17> 'int' lvalue Var 0x28b8a8181d8 'mixed' 'int'
|   |   | |     `-ParenExpr 0x28b8a80f6a0 <col:26, col:50> 'int'
|   |   | |       `-BinaryOperator 0x28b8a80f680 <col:27, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27> 'int' '=='
|   |   | |         |-ImplicitCastExpr 0x28b8a80f650 <.//openssl//file_jk/before\crypto\ec\ecp_nistp256.c:2089:27> 'smallfelem *' <LValueToRValue>
|   |   | |         | `-DeclRefExpr 0x28b8a80f5a8 <col:27> 'smallfelem *' lvalue Var 0x28b8a8187e8 'tmp_smallfelems' 'smallfelem *'
|   |   | |         `-ImplicitCastExpr 0x28b8a80f668 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'smallfelem *' <BitCast>
|   |   | |           `-ParenExpr 0x28b8a80f630 <col:17, col:27> 'void *'
|   |   | |             `-CStyleCastExpr 0x28b8a80f608 <col:18, col:26> 'void *' <NullToPointer>
|   |   | |               `-IntegerLiteral 0x28b8a80f5c8 <col:26> 'int' 0
|   |   | `-CompoundStmt 0x28b8a80f770 <.//openssl//file_jk/before\crypto\ec\ecp_nistp256.c:2089:54, line:2092:9>
|   |   |   `-GotoStmt 0x28b8a80f758 <line:2091:13, col:18> 'err' 0x28b8a815aa0
|   |   |-CallExpr 0x28b8a80f920 <line:2098:9, col:57> 'void *'
|   |   | |-ImplicitCastExpr 0x28b8a80f908 <col:9> 'void *(*)(void *, int, unsigned long long)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x28b8a80f7a0 <col:9> 'void *(void *, int, unsigned long long)' Function 0x28b8a5c2320 'memset' 'void *(void *, int, unsigned long long)'
|   |   | |-ImplicitCastExpr 0x28b8a80f970 <col:16> 'void *' <BitCast>
|   |   | | `-ImplicitCastExpr 0x28b8a80f958 <col:16> 'felem_bytearray *' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x28b8a80f7c0 <col:16> 'felem_bytearray *' lvalue Var 0x28b8a818408 'secrets' 'felem_bytearray *'
|   |   | |-IntegerLiteral 0x28b8a80f7e0 <col:25> 'int' 0
|   |   | `-BinaryOperator 0x28b8a80f8d0 <col:28, col:47> 'unsigned long long' '*'
|   |   |   |-UnaryExprOrTypeTraitExpr 0x28b8a80f878 <col:28, col:43> 'unsigned long long' sizeof
|   |   |   | `-ParenExpr 0x28b8a80f858 <col:34, col:43> 'felem_bytearray':'u8 [32]' lvalue
|   |   |   |   `-UnaryOperator 0x28b8a80f840 <col:35, col:36> 'felem_bytearray':'u8 [32]' lvalue prefix '*' cannot overflow
|   |   |   |     `-ImplicitCastExpr 0x28b8a80f828 <col:36> 'felem_bytearray *' <LValueToRValue>
|   |   |   |       `-DeclRefExpr 0x28b8a80f808 <col:36> 'felem_bytearray *' lvalue Var 0x28b8a818408 'secrets' 'felem_bytearray *' non_odr_use_unevaluated
|   |   |   `-ImplicitCastExpr 0x28b8a80f8b8 <col:47> 'size_t':'unsigned long long' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x28b8a80f898 <col:47> 'size_t':'unsigned long long' lvalue Var 0x28b8a818b98 'num_points' 'size_t':'unsigned long long'
|   |   |-CallExpr 0x28b8a80fb08 <line:2099:9, col:59> 'void *'
|   |   | |-ImplicitCastExpr 0x28b8a80faf0 <col:9> 'void *(*)(void *, int, unsigned long long)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x28b8a80f988 <col:9> 'void *(void *, int, unsigned long long)' Function 0x28b8a5c2320 'memset' 'void *(void *, int, unsigned long long)'
|   |   | |-ImplicitCastExpr 0x28b8a80fb58 <col:16> 'void *' <BitCast>
|   |   | | `-ImplicitCastExpr 0x28b8a80fb40 <col:16> 'smallfelem (*)[17][3]' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x28b8a80f9a8 <col:16> 'smallfelem (*)[17][3]' lvalue Var 0x28b8a8186b8 'pre_comp' 'smallfelem (*)[17][3]'
|   |   | |-IntegerLiteral 0x28b8a80f9c8 <col:26> 'int' 0
|   |   | `-BinaryOperator 0x28b8a80fab8 <col:29, col:49> 'unsigned long long' '*'
|   |   |   |-UnaryExprOrTypeTraitExpr 0x28b8a80fa60 <col:29, col:45> 'unsigned long long' sizeof
|   |   |   | `-ParenExpr 0x28b8a80fa40 <col:35, col:45> 'smallfelem [17][3]':'smallfelem [17][3]' lvalue
|   |   |   |   `-UnaryOperator 0x28b8a80fa28 <col:36, col:37> 'smallfelem [17][3]':'smallfelem [17][3]' lvalue prefix '*' cannot overflow
|   |   |   |     `-ImplicitCastExpr 0x28b8a80fa10 <col:37> 'smallfelem (*)[17][3]' <LValueToRValue>
|   |   |   |       `-DeclRefExpr 0x28b8a80f9f0 <col:37> 'smallfelem (*)[17][3]' lvalue Var 0x28b8a8186b8 'pre_comp' 'smallfelem (*)[17][3]' non_odr_use_unevaluated
|   |   |   `-ImplicitCastExpr 0x28b8a80faa0 <col:49> 'size_t':'unsigned long long' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x28b8a80fa80 <col:49> 'size_t':'unsigned long long' lvalue Var 0x28b8a818b98 'num_points' 'size_t':'unsigned long long'
|   |   |-ForStmt 0x28b8a80a9e0 <line:2100:9, line:2157:9>
|   |   | |-BinaryOperator 0x28b8a80fbe8 <line:2100:14, col:18> 'unsigned int' '='
|   |   | | |-DeclRefExpr 0x28b8a80fb70 <col:14> 'unsigned int' lvalue Var 0x28b8a8189b0 'i' 'unsigned int'
|   |   | | `-ImplicitCastExpr 0x28b8a80fbd0 <col:18> 'unsigned int' <IntegralCast>
|   |   | |   `-IntegerLiteral 0x28b8a80fba8 <col:18> 'int' 0
|   |   | |-<<<NULL>>>
|   |   | |-BinaryOperator 0x28b8a80fc90 <col:21, col:25> 'int' '<'
|   |   | | |-ImplicitCastExpr 0x28b8a80fc78 <col:21> 'unsigned long long' <IntegralCast>
|   |   | | | `-ImplicitCastExpr 0x28b8a80fc48 <col:21> 'unsigned int' <LValueToRValue>
|   |   | | |   `-DeclRefExpr 0x28b8a80fc08 <col:21> 'unsigned int' lvalue Var 0x28b8a8189b0 'i' 'unsigned int'
|   |   | | `-ImplicitCastExpr 0x28b8a80fc60 <col:25> 'size_t':'unsigned long long' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x28b8a80fc28 <col:25> 'size_t':'unsigned long long' lvalue Var 0x28b8a818b98 'num_points' 'size_t':'unsigned long long'
|   |   | |-UnaryOperator 0x28b8a80fcd0 <col:37, col:39> 'unsigned int' prefix '++'
|   |   | | `-DeclRefExpr 0x28b8a80fcb0 <col:39> 'unsigned int' lvalue Var 0x28b8a8189b0 'i' 'unsigned int'
|   |   | `-CompoundStmt 0x28b8a80a9c0 <col:42, line:2157:9>
|   |   |   |-IfStmt 0x28b8a80ff00 <line:2101:13, line:2114:13> has_else
|   |   |   | |-BinaryOperator 0x28b8a80fd70 <line:2101:17, col:22> 'int' '=='
|   |   |   | | |-ImplicitCastExpr 0x28b8a80fd58 <col:17> 'unsigned long long' <IntegralCast>
|   |   |   | | | `-ImplicitCastExpr 0x28b8a80fd28 <col:17> 'unsigned int' <LValueToRValue>
|   |   |   | | |   `-DeclRefExpr 0x28b8a80fce8 <col:17> 'unsigned int' lvalue Var 0x28b8a8189b0 'i' 'unsigned int'
|   |   |   | | `-ImplicitCastExpr 0x28b8a80fd40 <col:22> 'size_t':'unsigned long long' <LValueToRValue>
|   |   |   | |   `-DeclRefExpr 0x28b8a80fd08 <col:22> 'size_t':'unsigned long long' lvalue ParmVar 0x28b8a817d10 'num' 'size_t':'unsigned long long'
|   |   |   | |-CompoundStmt 0x28b8a80fea0 <line:2106:13, line:2109:13>
|   |   |   | `-CompoundStmt 0x28b8a80fef0 <line:2111:13, line:2114:13>
|   |   |   `-IfStmt 0x28b8a80a9a8 <line:2115:13, line:2156:13>
|   |   |     |-OpaqueValueExpr 0x28b8a80a990 <<invalid sloc>> '_Bool'
|   |   |     `-CompoundStmt 0x28b8a80a948 <line:2115:52, line:2156:13>
|   |   |       |-IfStmt 0x28b8a810448 <line:2117:17, line:2129:21> has_else
|   |   |       | |-OpaqueValueExpr 0x28b8a810430 <<invalid sloc>> '_Bool'
|   |   |       | |-CompoundStmt 0x28b8a8103b0 <line:2118:52, line:2128:17>
|   |   |       | | `-IfStmt 0x28b8a810308 <line:2123:21, line:2126:21>
|   |   |       | |   |-OpaqueValueExpr 0x28b8a8102f0 <<invalid sloc>> '_Bool'
|   |   |       | |   `-CompoundStmt 0x28b8a8102d8 <line:2123:77, line:2126:21>
|   |   |       | |     `-GotoStmt 0x28b8a8102c0 <line:2125:25, col:30> 'err' 0x28b8a815aa0
|   |   |       | `-NullStmt 0x28b8a810428 <line:2129:21>
|   |   |       |-CallExpr 0x28b8a810578 <line:2130:17, col:55> 'void'
|   |   |       | |-ImplicitCastExpr 0x28b8a810560 <col:17> 'void (*)(u8 *, const u8 *, unsigned int)' <FunctionToPointerDecay>
|   |   |       | | `-DeclRefExpr 0x28b8a810470 <col:17> 'void (u8 *, const u8 *, unsigned int)' Function 0x28b8a6e9548 'flip_endian' 'void (u8 *, const u8 *, unsigned int)'
|   |   |       | |-ImplicitCastExpr 0x28b8a8105b0 <col:29, col:38> 'u8 *' <ArrayToPointerDecay>
|   |   |       | | `-ArraySubscriptExpr 0x28b8a810500 <col:29, col:38> 'felem_bytearray':'u8 [32]' lvalue
|   |   |       | |   |-ImplicitCastExpr 0x28b8a8104d0 <col:29> 'felem_bytearray *' <LValueToRValue>
|   |   |       | |   | `-DeclRefExpr 0x28b8a810490 <col:29> 'felem_bytearray *' lvalue Var 0x28b8a818408 'secrets' 'felem_bytearray *'
|   |   |       | |   `-ImplicitCastExpr 0x28b8a8104e8 <col:37> 'unsigned int' <LValueToRValue>
|   |   |       | |     `-DeclRefExpr 0x28b8a8104b0 <col:37> 'unsigned int' lvalue Var 0x28b8a8189b0 'i' 'unsigned int'
|   |   |       | |-ImplicitCastExpr 0x28b8a8105e0 <col:41> 'const u8 *' <NoOp>
|   |   |       | | `-ImplicitCastExpr 0x28b8a8105c8 <col:41> 'u8 *' <ArrayToPointerDecay>
|   |   |       | |   `-DeclRefExpr 0x28b8a810520 <col:41> 'felem_bytearray':'u8 [32]' lvalue Var 0x28b8a818918 'tmp' 'felem_bytearray':'u8 [32]'
|   |   |       | `-ImplicitCastExpr 0x28b8a8105f8 <col:46> 'unsigned int' <LValueToRValue>
|   |   |       |   `-DeclRefExpr 0x28b8a810540 <col:46> 'unsigned int' lvalue Var 0x28b8a818a30 'num_bytes' 'unsigned int'
|   |   |       |-IfStmt 0x28b8a8106e8 <line:2132:17, line:2135:26>
|   |   |       | |-OpaqueValueExpr 0x28b8a8106d0 <<invalid sloc>> '_Bool'
|   |   |       | `-GotoStmt 0x28b8a8106b8 <col:21, col:26> 'err' 0x28b8a815aa0
|   |   |       |-CallExpr 0x28b8a8108a8 <line:2136:17, col:54> 'void'
|   |   |       | |-ImplicitCastExpr 0x28b8a810890 <col:17> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|   |   |       | | `-DeclRefExpr 0x28b8a810700 <col:17> 'void (u64 *, const limb *)' Function 0x28b8a5fc378 'felem_shrink' 'void (u64 *, const limb *)'
|   |   |       | |-ImplicitCastExpr 0x28b8a8108d8 <col:30, col:46> 'u64 *' <ArrayToPointerDecay>
|   |   |       | | `-ArraySubscriptExpr 0x28b8a810850 <col:30, col:46> 'smallfelem':'u64 [4]' lvalue
|   |   |       | |   |-ImplicitCastExpr 0x28b8a810838 <col:30, col:43> 'smallfelem *' <ArrayToPointerDecay>
|   |   |       | |   | `-ArraySubscriptExpr 0x28b8a8107f0 <col:30, col:43> 'smallfelem [3]' lvalue
|   |   |       | |   |   |-ImplicitCastExpr 0x28b8a8107d8 <col:30, col:40> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |       | |   |   | `-ArraySubscriptExpr 0x28b8a810790 <col:30, col:40> 'smallfelem [17][3]':'smallfelem [17][3]' lvalue
|   |   |       | |   |   |   |-ImplicitCastExpr 0x28b8a810760 <col:30> 'smallfelem (*)[17][3]' <LValueToRValue>
|   |   |       | |   |   |   | `-DeclRefExpr 0x28b8a810720 <col:30> 'smallfelem (*)[17][3]' lvalue Var 0x28b8a8186b8 'pre_comp' 'smallfelem (*)[17][3]'
|   |   |       | |   |   |   `-ImplicitCastExpr 0x28b8a810778 <col:39> 'unsigned int' <LValueToRValue>
|   |   |       | |   |   |     `-DeclRefExpr 0x28b8a810740 <col:39> 'unsigned int' lvalue Var 0x28b8a8189b0 'i' 'unsigned int'
|   |   |       | |   |   `-IntegerLiteral 0x28b8a8107b0 <col:42> 'int' 1
|   |   |       | |   `-IntegerLiteral 0x28b8a810810 <col:45> 'int' 0
|   |   |       | `-ImplicitCastExpr 0x28b8a810908 <col:49> 'const limb *':'const limb *' <NoOp>
|   |   |       |   `-ImplicitCastExpr 0x28b8a8108f0 <col:49> 'limb *' <ArrayToPointerDecay>
|   |   |       |     `-DeclRefExpr 0x28b8a810870 <col:49> 'felem':'limb [4]' lvalue Var 0x28b8a818e18 'x_out' 'felem':'limb [4]'
|   |   |       |-CallExpr 0x28b8a810ac8 <line:2137:17, col:54> 'void'
|   |   |       | |-ImplicitCastExpr 0x28b8a810ab0 <col:17> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|   |   |       | | `-DeclRefExpr 0x28b8a810920 <col:17> 'void (u64 *, const limb *)' Function 0x28b8a5fc378 'felem_shrink' 'void (u64 *, const limb *)'
|   |   |       | |-ImplicitCastExpr 0x28b8a810af8 <col:30, col:46> 'u64 *' <ArrayToPointerDecay>
|   |   |       | | `-ArraySubscriptExpr 0x28b8a810a70 <col:30, col:46> 'smallfelem':'u64 [4]' lvalue
|   |   |       | |   |-ImplicitCastExpr 0x28b8a810a58 <col:30, col:43> 'smallfelem *' <ArrayToPointerDecay>
|   |   |       | |   | `-ArraySubscriptExpr 0x28b8a810a10 <col:30, col:43> 'smallfelem [3]' lvalue
|   |   |       | |   |   |-ImplicitCastExpr 0x28b8a8109f8 <col:30, col:40> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |       | |   |   | `-ArraySubscriptExpr 0x28b8a8109b0 <col:30, col:40> 'smallfelem [17][3]':'smallfelem [17][3]' lvalue
|   |   |       | |   |   |   |-ImplicitCastExpr 0x28b8a810980 <col:30> 'smallfelem (*)[17][3]' <LValueToRValue>
|   |   |       | |   |   |   | `-DeclRefExpr 0x28b8a810940 <col:30> 'smallfelem (*)[17][3]' lvalue Var 0x28b8a8186b8 'pre_comp' 'smallfelem (*)[17][3]'
|   |   |       | |   |   |   `-ImplicitCastExpr 0x28b8a810998 <col:39> 'unsigned int' <LValueToRValue>
|   |   |       | |   |   |     `-DeclRefExpr 0x28b8a810960 <col:39> 'unsigned int' lvalue Var 0x28b8a8189b0 'i' 'unsigned int'
|   |   |       | |   |   `-IntegerLiteral 0x28b8a8109d0 <col:42> 'int' 1
|   |   |       | |   `-IntegerLiteral 0x28b8a810a30 <col:45> 'int' 1
|   |   |       | `-ImplicitCastExpr 0x28b8a810b28 <col:49> 'const limb *':'const limb *' <NoOp>
|   |   |       |   `-ImplicitCastExpr 0x28b8a810b10 <col:49> 'limb *' <ArrayToPointerDecay>
|   |   |       |     `-DeclRefExpr 0x28b8a810a90 <col:49> 'felem':'limb [4]' lvalue Var 0x28b8a818e90 'y_out' 'felem':'limb [4]'
|   |   |       |-CallExpr 0x28b8a810ce8 <line:2138:17, col:54> 'void'
|   |   |       | |-ImplicitCastExpr 0x28b8a810cd0 <col:17> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|   |   |       | | `-DeclRefExpr 0x28b8a810b40 <col:17> 'void (u64 *, const limb *)' Function 0x28b8a5fc378 'felem_shrink' 'void (u64 *, const limb *)'
|   |   |       | |-ImplicitCastExpr 0x28b8a810d18 <col:30, col:46> 'u64 *' <ArrayToPointerDecay>
|   |   |       | | `-ArraySubscriptExpr 0x28b8a810c90 <col:30, col:46> 'smallfelem':'u64 [4]' lvalue
|   |   |       | |   |-ImplicitCastExpr 0x28b8a810c78 <col:30, col:43> 'smallfelem *' <ArrayToPointerDecay>
|   |   |       | |   | `-ArraySubscriptExpr 0x28b8a810c30 <col:30, col:43> 'smallfelem [3]' lvalue
|   |   |       | |   |   |-ImplicitCastExpr 0x28b8a810c18 <col:30, col:40> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |       | |   |   | `-ArraySubscriptExpr 0x28b8a810bd0 <col:30, col:40> 'smallfelem [17][3]':'smallfelem [17][3]' lvalue
|   |   |       | |   |   |   |-ImplicitCastExpr 0x28b8a810ba0 <col:30> 'smallfelem (*)[17][3]' <LValueToRValue>
|   |   |       | |   |   |   | `-DeclRefExpr 0x28b8a810b60 <col:30> 'smallfelem (*)[17][3]' lvalue Var 0x28b8a8186b8 'pre_comp' 'smallfelem (*)[17][3]'
|   |   |       | |   |   |   `-ImplicitCastExpr 0x28b8a810bb8 <col:39> 'unsigned int' <LValueToRValue>
|   |   |       | |   |   |     `-DeclRefExpr 0x28b8a810b80 <col:39> 'unsigned int' lvalue Var 0x28b8a8189b0 'i' 'unsigned int'
|   |   |       | |   |   `-IntegerLiteral 0x28b8a810bf0 <col:42> 'int' 1
|   |   |       | |   `-IntegerLiteral 0x28b8a810c50 <col:45> 'int' 2
|   |   |       | `-ImplicitCastExpr 0x28b8a810d48 <col:49> 'const limb *':'const limb *' <NoOp>
|   |   |       |   `-ImplicitCastExpr 0x28b8a810d30 <col:49> 'limb *' <ArrayToPointerDecay>
|   |   |       |     `-DeclRefExpr 0x28b8a810cb0 <col:49> 'felem':'limb [4]' lvalue Var 0x28b8a818f08 'z_out' 'felem':'limb [4]'
|   |   |       `-ForStmt 0x28b8a80a910 <line:2139:17, line:2155:17>
|   |   |         |-BinaryOperator 0x28b8a810dc0 <line:2139:22, col:26> 'int' '='
|   |   |         | |-DeclRefExpr 0x28b8a810d60 <col:22> 'int' lvalue Var 0x28b8a818140 'j' 'int'
|   |   |         | `-IntegerLiteral 0x28b8a810d98 <col:26> 'int' 2
|   |   |         |-<<<NULL>>>
|   |   |         |-BinaryOperator 0x28b8a810e40 <col:29, col:34> 'int' '<='
|   |   |         | |-ImplicitCastExpr 0x28b8a810e28 <col:29> 'int' <LValueToRValue>
|   |   |         | | `-DeclRefExpr 0x28b8a810de0 <col:29> 'int' lvalue Var 0x28b8a818140 'j' 'int'
|   |   |         | `-IntegerLiteral 0x28b8a810e00 <col:34> 'int' 16
|   |   |         |-UnaryOperator 0x28b8a810e80 <col:38, col:40> 'int' prefix '++'
|   |   |         | `-DeclRefExpr 0x28b8a810e60 <col:40> 'int' lvalue Var 0x28b8a818140 'j' 'int'
|   |   |         `-CompoundStmt 0x28b8a80a8f8 <col:43, line:2155:17>
|   |   |           `-IfStmt 0x28b8a80a8d0 <line:2140:21, line:2154:21> has_else
|   |   |             |-BinaryOperator 0x28b8a810ef8 <line:2140:25, col:29> 'int' '&'
|   |   |             | |-ImplicitCastExpr 0x28b8a810ee0 <col:25> 'int' <LValueToRValue>
|   |   |             | | `-DeclRefExpr 0x28b8a810e98 <col:25> 'int' lvalue Var 0x28b8a818140 'j' 'int'
|   |   |             | `-IntegerLiteral 0x28b8a810eb8 <col:29> 'int' 1
|   |   |             |-CompoundStmt 0x28b8a809dd0 <col:32, line:2147:21>
|   |   |             | `-CallExpr 0x28b8a809c90 <line:2141:25, line:2146:62> 'void'
|   |   |             |   |-ImplicitCastExpr 0x28b8a809c78 <line:2141:25> 'void (*)(u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *)' <FunctionToPointerDecay>
|   |   |             |   | `-DeclRefExpr 0x28b8a810f18 <col:25> 'void (u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *)' Function 0x28b8a6f7a08 'point_add_small' 'void (u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *)'
|   |   |             |   |-ImplicitCastExpr 0x28b8a809cf8 <col:41, col:57> 'u64 *' <ArrayToPointerDecay>
|   |   |             |   | `-ArraySubscriptExpr 0x28b8a809050 <col:41, col:57> 'smallfelem':'u64 [4]' lvalue
|   |   |             |   |   |-ImplicitCastExpr 0x28b8a809038 <col:41, col:54> 'smallfelem *' <ArrayToPointerDecay>
|   |   |             |   |   | `-ArraySubscriptExpr 0x28b8a808ff0 <col:41, col:54> 'smallfelem [3]' lvalue
|   |   |             |   |   |   |-ImplicitCastExpr 0x28b8a808fc0 <col:41, col:51> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |             |   |   |   | `-ArraySubscriptExpr 0x28b8a810fa8 <col:41, col:51> 'smallfelem [17][3]':'smallfelem [17][3]' lvalue
|   |   |             |   |   |   |   |-ImplicitCastExpr 0x28b8a810f78 <col:41> 'smallfelem (*)[17][3]' <LValueToRValue>
|   |   |             |   |   |   |   | `-DeclRefExpr 0x28b8a810f38 <col:41> 'smallfelem (*)[17][3]' lvalue Var 0x28b8a8186b8 'pre_comp' 'smallfelem (*)[17][3]'
|   |   |             |   |   |   |   `-ImplicitCastExpr 0x28b8a810f90 <col:50> 'unsigned int' <LValueToRValue>
|   |   |             |   |   |   |     `-DeclRefExpr 0x28b8a810f58 <col:50> 'unsigned int' lvalue Var 0x28b8a8189b0 'i' 'unsigned int'
|   |   |             |   |   |   `-ImplicitCastExpr 0x28b8a808fd8 <col:53> 'int' <LValueToRValue>
|   |   |             |   |   |     `-DeclRefExpr 0x28b8a810fc8 <col:53> 'int' lvalue Var 0x28b8a818140 'j' 'int'
|   |   |             |   |   `-IntegerLiteral 0x28b8a809010 <col:56> 'int' 0
|   |   |             |   |-ImplicitCastExpr 0x28b8a809d10 <col:60, col:76> 'u64 *' <ArrayToPointerDecay>
|   |   |             |   | `-ArraySubscriptExpr 0x28b8a8091b0 <col:60, col:76> 'smallfelem':'u64 [4]' lvalue
|   |   |             |   |   |-ImplicitCastExpr 0x28b8a809198 <col:60, col:73> 'smallfelem *' <ArrayToPointerDecay>
|   |   |             |   |   | `-ArraySubscriptExpr 0x28b8a809150 <col:60, col:73> 'smallfelem [3]' lvalue
|   |   |             |   |   |   |-ImplicitCastExpr 0x28b8a809120 <col:60, col:70> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |             |   |   |   | `-ArraySubscriptExpr 0x28b8a8090e0 <col:60, col:70> 'smallfelem [17][3]':'smallfelem [17][3]' lvalue
|   |   |             |   |   |   |   |-ImplicitCastExpr 0x28b8a8090b0 <col:60> 'smallfelem (*)[17][3]' <LValueToRValue>
|   |   |             |   |   |   |   | `-DeclRefExpr 0x28b8a809070 <col:60> 'smallfelem (*)[17][3]' lvalue Var 0x28b8a8186b8 'pre_comp' 'smallfelem (*)[17][3]'
|   |   |             |   |   |   |   `-ImplicitCastExpr 0x28b8a8090c8 <col:69> 'unsigned int' <LValueToRValue>
|   |   |             |   |   |   |     `-DeclRefExpr 0x28b8a809090 <col:69> 'unsigned int' lvalue Var 0x28b8a8189b0 'i' 'unsigned int'
|   |   |             |   |   |   `-ImplicitCastExpr 0x28b8a809138 <col:72> 'int' <LValueToRValue>
|   |   |             |   |   |     `-DeclRefExpr 0x28b8a809100 <col:72> 'int' lvalue Var 0x28b8a818140 'j' 'int'
|   |   |             |   |   `-IntegerLiteral 0x28b8a809170 <col:75> 'int' 1
|   |   |             |   |-ImplicitCastExpr 0x28b8a809d28 <line:2142:41, col:57> 'u64 *' <ArrayToPointerDecay>
|   |   |             |   | `-ArraySubscriptExpr 0x28b8a809310 <col:41, col:57> 'smallfelem':'u64 [4]' lvalue
|   |   |             |   |   |-ImplicitCastExpr 0x28b8a8092f8 <col:41, col:54> 'smallfelem *' <ArrayToPointerDecay>
|   |   |             |   |   | `-ArraySubscriptExpr 0x28b8a8092b0 <col:41, col:54> 'smallfelem [3]' lvalue
|   |   |             |   |   |   |-ImplicitCastExpr 0x28b8a809280 <col:41, col:51> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |             |   |   |   | `-ArraySubscriptExpr 0x28b8a809240 <col:41, col:51> 'smallfelem [17][3]':'smallfelem [17][3]' lvalue
|   |   |             |   |   |   |   |-ImplicitCastExpr 0x28b8a809210 <col:41> 'smallfelem (*)[17][3]' <LValueToRValue>
|   |   |             |   |   |   |   | `-DeclRefExpr 0x28b8a8091d0 <col:41> 'smallfelem (*)[17][3]' lvalue Var 0x28b8a8186b8 'pre_comp' 'smallfelem (*)[17][3]'
|   |   |             |   |   |   |   `-ImplicitCastExpr 0x28b8a809228 <col:50> 'unsigned int' <LValueToRValue>
|   |   |             |   |   |   |     `-DeclRefExpr 0x28b8a8091f0 <col:50> 'unsigned int' lvalue Var 0x28b8a8189b0 'i' 'unsigned int'
|   |   |             |   |   |   `-ImplicitCastExpr 0x28b8a809298 <col:53> 'int' <LValueToRValue>
|   |   |             |   |   |     `-DeclRefExpr 0x28b8a809260 <col:53> 'int' lvalue Var 0x28b8a818140 'j' 'int'
|   |   |             |   |   `-IntegerLiteral 0x28b8a8092d0 <col:56> 'int' 2
|   |   |             |   |-ImplicitCastExpr 0x28b8a809d40 <col:60, col:76> 'u64 *' <ArrayToPointerDecay>
|   |   |             |   | `-ArraySubscriptExpr 0x28b8a809460 <col:60, col:76> 'smallfelem':'u64 [4]' lvalue
|   |   |             |   |   |-ImplicitCastExpr 0x28b8a809448 <col:60, col:73> 'smallfelem *' <ArrayToPointerDecay>
|   |   |             |   |   | `-ArraySubscriptExpr 0x28b8a809400 <col:60, col:73> 'smallfelem [3]' lvalue
|   |   |             |   |   |   |-ImplicitCastExpr 0x28b8a8093e8 <col:60, col:70> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |             |   |   |   | `-ArraySubscriptExpr 0x28b8a8093a0 <col:60, col:70> 'smallfelem [17][3]':'smallfelem [17][3]' lvalue
|   |   |             |   |   |   |   |-ImplicitCastExpr 0x28b8a809370 <col:60> 'smallfelem (*)[17][3]' <LValueToRValue>
|   |   |             |   |   |   |   | `-DeclRefExpr 0x28b8a809330 <col:60> 'smallfelem (*)[17][3]' lvalue Var 0x28b8a8186b8 'pre_comp' 'smallfelem (*)[17][3]'
|   |   |             |   |   |   |   `-ImplicitCastExpr 0x28b8a809388 <col:69> 'unsigned int' <LValueToRValue>
|   |   |             |   |   |   |     `-DeclRefExpr 0x28b8a809350 <col:69> 'unsigned int' lvalue Var 0x28b8a8189b0 'i' 'unsigned int'
|   |   |             |   |   |   `-IntegerLiteral 0x28b8a8093c0 <col:72> 'int' 1
|   |   |             |   |   `-IntegerLiteral 0x28b8a809420 <col:75> 'int' 0
|   |   |             |   |-ImplicitCastExpr 0x28b8a809d58 <line:2143:41, col:57> 'u64 *' <ArrayToPointerDecay>
|   |   |             |   | `-ArraySubscriptExpr 0x28b8a8095b0 <col:41, col:57> 'smallfelem':'u64 [4]' lvalue
|   |   |             |   |   |-ImplicitCastExpr 0x28b8a809598 <col:41, col:54> 'smallfelem *' <ArrayToPointerDecay>
|   |   |             |   |   | `-ArraySubscriptExpr 0x28b8a809550 <col:41, col:54> 'smallfelem [3]' lvalue
|   |   |             |   |   |   |-ImplicitCastExpr 0x28b8a809538 <col:41, col:51> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |             |   |   |   | `-ArraySubscriptExpr 0x28b8a8094f0 <col:41, col:51> 'smallfelem [17][3]':'smallfelem [17][3]' lvalue
|   |   |             |   |   |   |   |-ImplicitCastExpr 0x28b8a8094c0 <col:41> 'smallfelem (*)[17][3]' <LValueToRValue>
|   |   |             |   |   |   |   | `-DeclRefExpr 0x28b8a809480 <col:41> 'smallfelem (*)[17][3]' lvalue Var 0x28b8a8186b8 'pre_comp' 'smallfelem (*)[17][3]'
|   |   |             |   |   |   |   `-ImplicitCastExpr 0x28b8a8094d8 <col:50> 'unsigned int' <LValueToRValue>
|   |   |             |   |   |   |     `-DeclRefExpr 0x28b8a8094a0 <col:50> 'unsigned int' lvalue Var 0x28b8a8189b0 'i' 'unsigned int'
|   |   |             |   |   |   `-IntegerLiteral 0x28b8a809510 <col:53> 'int' 1
|   |   |             |   |   `-IntegerLiteral 0x28b8a809570 <col:56> 'int' 1
|   |   |             |   |-ImplicitCastExpr 0x28b8a809d70 <col:60, col:76> 'u64 *' <ArrayToPointerDecay>
|   |   |             |   | `-ArraySubscriptExpr 0x28b8a809700 <col:60, col:76> 'smallfelem':'u64 [4]' lvalue
|   |   |             |   |   |-ImplicitCastExpr 0x28b8a8096e8 <col:60, col:73> 'smallfelem *' <ArrayToPointerDecay>
|   |   |             |   |   | `-ArraySubscriptExpr 0x28b8a8096a0 <col:60, col:73> 'smallfelem [3]' lvalue
|   |   |             |   |   |   |-ImplicitCastExpr 0x28b8a809688 <col:60, col:70> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |             |   |   |   | `-ArraySubscriptExpr 0x28b8a809640 <col:60, col:70> 'smallfelem [17][3]':'smallfelem [17][3]' lvalue
|   |   |             |   |   |   |   |-ImplicitCastExpr 0x28b8a809610 <col:60> 'smallfelem (*)[17][3]' <LValueToRValue>
|   |   |             |   |   |   |   | `-DeclRefExpr 0x28b8a8095d0 <col:60> 'smallfelem (*)[17][3]' lvalue Var 0x28b8a8186b8 'pre_comp' 'smallfelem (*)[17][3]'
|   |   |             |   |   |   |   `-ImplicitCastExpr 0x28b8a809628 <col:69> 'unsigned int' <LValueToRValue>
|   |   |             |   |   |   |     `-DeclRefExpr 0x28b8a8095f0 <col:69> 'unsigned int' lvalue Var 0x28b8a8189b0 'i' 'unsigned int'
|   |   |             |   |   |   `-IntegerLiteral 0x28b8a809660 <col:72> 'int' 1
|   |   |             |   |   `-IntegerLiteral 0x28b8a8096c0 <col:75> 'int' 2
|   |   |             |   |-ImplicitCastExpr 0x28b8a809d88 <line:2144:41, col:61> 'u64 *' <ArrayToPointerDecay>
|   |   |             |   | `-ArraySubscriptExpr 0x28b8a8098a8 <col:41, col:61> 'smallfelem':'u64 [4]' lvalue
|   |   |             |   |   |-ImplicitCastExpr 0x28b8a809890 <col:41, col:58> 'smallfelem *' <ArrayToPointerDecay>
|   |   |             |   |   | `-ArraySubscriptExpr 0x28b8a809848 <col:41, col:58> 'smallfelem [3]' lvalue
|   |   |             |   |   |   |-ImplicitCastExpr 0x28b8a809830 <col:41, col:51> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |             |   |   |   | `-ArraySubscriptExpr 0x28b8a809790 <col:41, col:51> 'smallfelem [17][3]':'smallfelem [17][3]' lvalue
|   |   |             |   |   |   |   |-ImplicitCastExpr 0x28b8a809760 <col:41> 'smallfelem (*)[17][3]' <LValueToRValue>
|   |   |             |   |   |   |   | `-DeclRefExpr 0x28b8a809720 <col:41> 'smallfelem (*)[17][3]' lvalue Var 0x28b8a8186b8 'pre_comp' 'smallfelem (*)[17][3]'
|   |   |             |   |   |   |   `-ImplicitCastExpr 0x28b8a809778 <col:50> 'unsigned int' <LValueToRValue>
|   |   |             |   |   |   |     `-DeclRefExpr 0x28b8a809740 <col:50> 'unsigned int' lvalue Var 0x28b8a8189b0 'i' 'unsigned int'
|   |   |             |   |   |   `-BinaryOperator 0x28b8a809810 <col:53, col:57> 'int' '-'
|   |   |             |   |   |     |-ImplicitCastExpr 0x28b8a8097f8 <col:53> 'int' <LValueToRValue>
|   |   |             |   |   |     | `-DeclRefExpr 0x28b8a8097b0 <col:53> 'int' lvalue Var 0x28b8a818140 'j' 'int'
|   |   |             |   |   |     `-IntegerLiteral 0x28b8a8097d0 <col:57> 'int' 1
|   |   |             |   |   `-IntegerLiteral 0x28b8a809868 <col:60> 'int' 0
|   |   |             |   |-ImplicitCastExpr 0x28b8a809da0 <line:2145:41, col:61> 'u64 *' <ArrayToPointerDecay>
|   |   |             |   | `-ArraySubscriptExpr 0x28b8a809a50 <col:41, col:61> 'smallfelem':'u64 [4]' lvalue
|   |   |             |   |   |-ImplicitCastExpr 0x28b8a809a38 <col:41, col:58> 'smallfelem *' <ArrayToPointerDecay>
|   |   |             |   |   | `-ArraySubscriptExpr 0x28b8a8099f0 <col:41, col:58> 'smallfelem [3]' lvalue
|   |   |             |   |   |   |-ImplicitCastExpr 0x28b8a8099d8 <col:41, col:51> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |             |   |   |   | `-ArraySubscriptExpr 0x28b8a809938 <col:41, col:51> 'smallfelem [17][3]':'smallfelem [17][3]' lvalue
|   |   |             |   |   |   |   |-ImplicitCastExpr 0x28b8a809908 <col:41> 'smallfelem (*)[17][3]' <LValueToRValue>
|   |   |             |   |   |   |   | `-DeclRefExpr 0x28b8a8098c8 <col:41> 'smallfelem (*)[17][3]' lvalue Var 0x28b8a8186b8 'pre_comp' 'smallfelem (*)[17][3]'
|   |   |             |   |   |   |   `-ImplicitCastExpr 0x28b8a809920 <col:50> 'unsigned int' <LValueToRValue>
|   |   |             |   |   |   |     `-DeclRefExpr 0x28b8a8098e8 <col:50> 'unsigned int' lvalue Var 0x28b8a8189b0 'i' 'unsigned int'
|   |   |             |   |   |   `-BinaryOperator 0x28b8a8099b8 <col:53, col:57> 'int' '-'
|   |   |             |   |   |     |-ImplicitCastExpr 0x28b8a8099a0 <col:53> 'int' <LValueToRValue>
|   |   |             |   |   |     | `-DeclRefExpr 0x28b8a809958 <col:53> 'int' lvalue Var 0x28b8a818140 'j' 'int'
|   |   |             |   |   |     `-IntegerLiteral 0x28b8a809978 <col:57> 'int' 1
|   |   |             |   |   `-IntegerLiteral 0x28b8a809a10 <col:60> 'int' 1
|   |   |             |   `-ImplicitCastExpr 0x28b8a809db8 <line:2146:41, col:61> 'u64 *' <ArrayToPointerDecay>
|   |   |             |     `-ArraySubscriptExpr 0x28b8a809bf8 <col:41, col:61> 'smallfelem':'u64 [4]' lvalue
|   |   |             |       |-ImplicitCastExpr 0x28b8a809be0 <col:41, col:58> 'smallfelem *' <ArrayToPointerDecay>
|   |   |             |       | `-ArraySubscriptExpr 0x28b8a809b98 <col:41, col:58> 'smallfelem [3]' lvalue
|   |   |             |       |   |-ImplicitCastExpr 0x28b8a809b80 <col:41, col:51> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |             |       |   | `-ArraySubscriptExpr 0x28b8a809ae0 <col:41, col:51> 'smallfelem [17][3]':'smallfelem [17][3]' lvalue
|   |   |             |       |   |   |-ImplicitCastExpr 0x28b8a809ab0 <col:41> 'smallfelem (*)[17][3]' <LValueToRValue>
|   |   |             |       |   |   | `-DeclRefExpr 0x28b8a809a70 <col:41> 'smallfelem (*)[17][3]' lvalue Var 0x28b8a8186b8 'pre_comp' 'smallfelem (*)[17][3]'
|   |   |             |       |   |   `-ImplicitCastExpr 0x28b8a809ac8 <col:50> 'unsigned int' <LValueToRValue>
|   |   |             |       |   |     `-DeclRefExpr 0x28b8a809a90 <col:50> 'unsigned int' lvalue Var 0x28b8a8189b0 'i' 'unsigned int'
|   |   |             |       |   `-BinaryOperator 0x28b8a809b60 <col:53, col:57> 'int' '-'
|   |   |             |       |     |-ImplicitCastExpr 0x28b8a809b48 <col:53> 'int' <LValueToRValue>
|   |   |             |       |     | `-DeclRefExpr 0x28b8a809b00 <col:53> 'int' lvalue Var 0x28b8a818140 'j' 'int'
|   |   |             |       |     `-IntegerLiteral 0x28b8a809b20 <col:57> 'int' 1
|   |   |             |       `-IntegerLiteral 0x28b8a809bb8 <col:60> 'int' 2
|   |   |             `-CompoundStmt 0x28b8a80a8b8 <line:2147:28, line:2154:21>
|   |   |               `-CallExpr 0x28b8a80a790 <line:2148:25, line:2153:65> 'void'
|   |   |                 |-ImplicitCastExpr 0x28b8a80a778 <line:2148:25> 'void (*)(u64 *, u64 *, u64 *, const u64 *, const u64 *, const u64 *)' <FunctionToPointerDecay>
|   |   |                 | `-DeclRefExpr 0x28b8a809de8 <col:25> 'void (u64 *, u64 *, u64 *, const u64 *, const u64 *, const u64 *)' Function 0x28b8a703228 'point_double_small' 'void (u64 *, u64 *, u64 *, const u64 *, const u64 *, const u64 *)'
|   |   |                 |-ImplicitCastExpr 0x28b8a80a7e0 <col:44, col:60> 'u64 *' <ArrayToPointerDecay>
|   |   |                 | `-ArraySubscriptExpr 0x28b8a809f48 <col:44, col:60> 'smallfelem':'u64 [4]' lvalue
|   |   |                 |   |-ImplicitCastExpr 0x28b8a809f30 <col:44, col:57> 'smallfelem *' <ArrayToPointerDecay>
|   |   |                 |   | `-ArraySubscriptExpr 0x28b8a809ee8 <col:44, col:57> 'smallfelem [3]' lvalue
|   |   |                 |   |   |-ImplicitCastExpr 0x28b8a809eb8 <col:44, col:54> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |                 |   |   | `-ArraySubscriptExpr 0x28b8a809e78 <col:44, col:54> 'smallfelem [17][3]':'smallfelem [17][3]' lvalue
|   |   |                 |   |   |   |-ImplicitCastExpr 0x28b8a809e48 <col:44> 'smallfelem (*)[17][3]' <LValueToRValue>
|   |   |                 |   |   |   | `-DeclRefExpr 0x28b8a809e08 <col:44> 'smallfelem (*)[17][3]' lvalue Var 0x28b8a8186b8 'pre_comp' 'smallfelem (*)[17][3]'
|   |   |                 |   |   |   `-ImplicitCastExpr 0x28b8a809e60 <col:53> 'unsigned int' <LValueToRValue>
|   |   |                 |   |   |     `-DeclRefExpr 0x28b8a809e28 <col:53> 'unsigned int' lvalue Var 0x28b8a8189b0 'i' 'unsigned int'
|   |   |                 |   |   `-ImplicitCastExpr 0x28b8a809ed0 <col:56> 'int' <LValueToRValue>
|   |   |                 |   |     `-DeclRefExpr 0x28b8a809e98 <col:56> 'int' lvalue Var 0x28b8a818140 'j' 'int'
|   |   |                 |   `-IntegerLiteral 0x28b8a809f08 <col:59> 'int' 0
|   |   |                 |-ImplicitCastExpr 0x28b8a80a7f8 <line:2149:44, col:60> 'u64 *' <ArrayToPointerDecay>
|   |   |                 | `-ArraySubscriptExpr 0x28b8a80a0a8 <col:44, col:60> 'smallfelem':'u64 [4]' lvalue
|   |   |                 |   |-ImplicitCastExpr 0x28b8a80a090 <col:44, col:57> 'smallfelem *' <ArrayToPointerDecay>
|   |   |                 |   | `-ArraySubscriptExpr 0x28b8a80a048 <col:44, col:57> 'smallfelem [3]' lvalue
|   |   |                 |   |   |-ImplicitCastExpr 0x28b8a80a018 <col:44, col:54> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |                 |   |   | `-ArraySubscriptExpr 0x28b8a809fd8 <col:44, col:54> 'smallfelem [17][3]':'smallfelem [17][3]' lvalue
|   |   |                 |   |   |   |-ImplicitCastExpr 0x28b8a809fa8 <col:44> 'smallfelem (*)[17][3]' <LValueToRValue>
|   |   |                 |   |   |   | `-DeclRefExpr 0x28b8a809f68 <col:44> 'smallfelem (*)[17][3]' lvalue Var 0x28b8a8186b8 'pre_comp' 'smallfelem (*)[17][3]'
|   |   |                 |   |   |   `-ImplicitCastExpr 0x28b8a809fc0 <col:53> 'unsigned int' <LValueToRValue>
|   |   |                 |   |   |     `-DeclRefExpr 0x28b8a809f88 <col:53> 'unsigned int' lvalue Var 0x28b8a8189b0 'i' 'unsigned int'
|   |   |                 |   |   `-ImplicitCastExpr 0x28b8a80a030 <col:56> 'int' <LValueToRValue>
|   |   |                 |   |     `-DeclRefExpr 0x28b8a809ff8 <col:56> 'int' lvalue Var 0x28b8a818140 'j' 'int'
|   |   |                 |   `-IntegerLiteral 0x28b8a80a068 <col:59> 'int' 1
|   |   |                 |-ImplicitCastExpr 0x28b8a80a810 <line:2150:44, col:60> 'u64 *' <ArrayToPointerDecay>
|   |   |                 | `-ArraySubscriptExpr 0x28b8a80a208 <col:44, col:60> 'smallfelem':'u64 [4]' lvalue
|   |   |                 |   |-ImplicitCastExpr 0x28b8a80a1f0 <col:44, col:57> 'smallfelem *' <ArrayToPointerDecay>
|   |   |                 |   | `-ArraySubscriptExpr 0x28b8a80a1a8 <col:44, col:57> 'smallfelem [3]' lvalue
|   |   |                 |   |   |-ImplicitCastExpr 0x28b8a80a178 <col:44, col:54> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |                 |   |   | `-ArraySubscriptExpr 0x28b8a80a138 <col:44, col:54> 'smallfelem [17][3]':'smallfelem [17][3]' lvalue
|   |   |                 |   |   |   |-ImplicitCastExpr 0x28b8a80a108 <col:44> 'smallfelem (*)[17][3]' <LValueToRValue>
|   |   |                 |   |   |   | `-DeclRefExpr 0x28b8a80a0c8 <col:44> 'smallfelem (*)[17][3]' lvalue Var 0x28b8a8186b8 'pre_comp' 'smallfelem (*)[17][3]'
|   |   |                 |   |   |   `-ImplicitCastExpr 0x28b8a80a120 <col:53> 'unsigned int' <LValueToRValue>
|   |   |                 |   |   |     `-DeclRefExpr 0x28b8a80a0e8 <col:53> 'unsigned int' lvalue Var 0x28b8a8189b0 'i' 'unsigned int'
|   |   |                 |   |   `-ImplicitCastExpr 0x28b8a80a190 <col:56> 'int' <LValueToRValue>
|   |   |                 |   |     `-DeclRefExpr 0x28b8a80a158 <col:56> 'int' lvalue Var 0x28b8a818140 'j' 'int'
|   |   |                 |   `-IntegerLiteral 0x28b8a80a1c8 <col:59> 'int' 2
|   |   |                 |-ImplicitCastExpr 0x28b8a80a840 <line:2151:44, col:64> 'const u64 *':'const u64 *' <NoOp>
|   |   |                 | `-ImplicitCastExpr 0x28b8a80a828 <col:44, col:64> 'u64 *' <ArrayToPointerDecay>
|   |   |                 |   `-ArraySubscriptExpr 0x28b8a80a3b0 <col:44, col:64> 'smallfelem':'u64 [4]' lvalue
|   |   |                 |     |-ImplicitCastExpr 0x28b8a80a398 <col:44, col:61> 'smallfelem *' <ArrayToPointerDecay>
|   |   |                 |     | `-ArraySubscriptExpr 0x28b8a80a350 <col:44, col:61> 'smallfelem [3]' lvalue
|   |   |                 |     |   |-ImplicitCastExpr 0x28b8a80a338 <col:44, col:54> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |                 |     |   | `-ArraySubscriptExpr 0x28b8a80a298 <col:44, col:54> 'smallfelem [17][3]':'smallfelem [17][3]' lvalue
|   |   |                 |     |   |   |-ImplicitCastExpr 0x28b8a80a268 <col:44> 'smallfelem (*)[17][3]' <LValueToRValue>
|   |   |                 |     |   |   | `-DeclRefExpr 0x28b8a80a228 <col:44> 'smallfelem (*)[17][3]' lvalue Var 0x28b8a8186b8 'pre_comp' 'smallfelem (*)[17][3]'
|   |   |                 |     |   |   `-ImplicitCastExpr 0x28b8a80a280 <col:53> 'unsigned int' <LValueToRValue>
|   |   |                 |     |   |     `-DeclRefExpr 0x28b8a80a248 <col:53> 'unsigned int' lvalue Var 0x28b8a8189b0 'i' 'unsigned int'
|   |   |                 |     |   `-BinaryOperator 0x28b8a80a318 <col:56, col:60> 'int' '/'
|   |   |                 |     |     |-ImplicitCastExpr 0x28b8a80a300 <col:56> 'int' <LValueToRValue>
|   |   |                 |     |     | `-DeclRefExpr 0x28b8a80a2b8 <col:56> 'int' lvalue Var 0x28b8a818140 'j' 'int'
|   |   |                 |     |     `-IntegerLiteral 0x28b8a80a2d8 <col:60> 'int' 2
|   |   |                 |     `-IntegerLiteral 0x28b8a80a370 <col:63> 'int' 0
|   |   |                 |-ImplicitCastExpr 0x28b8a80a870 <line:2152:44, col:64> 'const u64 *':'const u64 *' <NoOp>
|   |   |                 | `-ImplicitCastExpr 0x28b8a80a858 <col:44, col:64> 'u64 *' <ArrayToPointerDecay>
|   |   |                 |   `-ArraySubscriptExpr 0x28b8a80a558 <col:44, col:64> 'smallfelem':'u64 [4]' lvalue
|   |   |                 |     |-ImplicitCastExpr 0x28b8a80a540 <col:44, col:61> 'smallfelem *' <ArrayToPointerDecay>
|   |   |                 |     | `-ArraySubscriptExpr 0x28b8a80a4f8 <col:44, col:61> 'smallfelem [3]' lvalue
|   |   |                 |     |   |-ImplicitCastExpr 0x28b8a80a4e0 <col:44, col:54> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |                 |     |   | `-ArraySubscriptExpr 0x28b8a80a440 <col:44, col:54> 'smallfelem [17][3]':'smallfelem [17][3]' lvalue
|   |   |                 |     |   |   |-ImplicitCastExpr 0x28b8a80a410 <col:44> 'smallfelem (*)[17][3]' <LValueToRValue>
|   |   |                 |     |   |   | `-DeclRefExpr 0x28b8a80a3d0 <col:44> 'smallfelem (*)[17][3]' lvalue Var 0x28b8a8186b8 'pre_comp' 'smallfelem (*)[17][3]'
|   |   |                 |     |   |   `-ImplicitCastExpr 0x28b8a80a428 <col:53> 'unsigned int' <LValueToRValue>
|   |   |                 |     |   |     `-DeclRefExpr 0x28b8a80a3f0 <col:53> 'unsigned int' lvalue Var 0x28b8a8189b0 'i' 'unsigned int'
|   |   |                 |     |   `-BinaryOperator 0x28b8a80a4c0 <col:56, col:60> 'int' '/'
|   |   |                 |     |     |-ImplicitCastExpr 0x28b8a80a4a8 <col:56> 'int' <LValueToRValue>
|   |   |                 |     |     | `-DeclRefExpr 0x28b8a80a460 <col:56> 'int' lvalue Var 0x28b8a818140 'j' 'int'
|   |   |                 |     |     `-IntegerLiteral 0x28b8a80a480 <col:60> 'int' 2
|   |   |                 |     `-IntegerLiteral 0x28b8a80a518 <col:63> 'int' 1
|   |   |                 `-ImplicitCastExpr 0x28b8a80a8a0 <line:2153:44, col:64> 'const u64 *':'const u64 *' <NoOp>
|   |   |                   `-ImplicitCastExpr 0x28b8a80a888 <col:44, col:64> 'u64 *' <ArrayToPointerDecay>
|   |   |                     `-ArraySubscriptExpr 0x28b8a80a700 <col:44, col:64> 'smallfelem':'u64 [4]' lvalue
|   |   |                       |-ImplicitCastExpr 0x28b8a80a6e8 <col:44, col:61> 'smallfelem *' <ArrayToPointerDecay>
|   |   |                       | `-ArraySubscriptExpr 0x28b8a80a6a0 <col:44, col:61> 'smallfelem [3]' lvalue
|   |   |                       |   |-ImplicitCastExpr 0x28b8a80a688 <col:44, col:54> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |                       |   | `-ArraySubscriptExpr 0x28b8a80a5e8 <col:44, col:54> 'smallfelem [17][3]':'smallfelem [17][3]' lvalue
|   |   |                       |   |   |-ImplicitCastExpr 0x28b8a80a5b8 <col:44> 'smallfelem (*)[17][3]' <LValueToRValue>
|   |   |                       |   |   | `-DeclRefExpr 0x28b8a80a578 <col:44> 'smallfelem (*)[17][3]' lvalue Var 0x28b8a8186b8 'pre_comp' 'smallfelem (*)[17][3]'
|   |   |                       |   |   `-ImplicitCastExpr 0x28b8a80a5d0 <col:53> 'unsigned int' <LValueToRValue>
|   |   |                       |   |     `-DeclRefExpr 0x28b8a80a598 <col:53> 'unsigned int' lvalue Var 0x28b8a8189b0 'i' 'unsigned int'
|   |   |                       |   `-BinaryOperator 0x28b8a80a668 <col:56, col:60> 'int' '/'
|   |   |                       |     |-ImplicitCastExpr 0x28b8a80a650 <col:56> 'int' <LValueToRValue>
|   |   |                       |     | `-DeclRefExpr 0x28b8a80a608 <col:56> 'int' lvalue Var 0x28b8a818140 'j' 'int'
|   |   |                       |     `-IntegerLiteral 0x28b8a80a628 <col:60> 'int' 2
|   |   |                       `-IntegerLiteral 0x28b8a80a6c0 <col:63> 'int' 2
|   |   `-IfStmt 0x28b8a80ac88 <line:2158:9, line:2159:77>
|   |     |-ImplicitCastExpr 0x28b8a80aa38 <line:2158:13> 'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x28b8a80aa18 <col:13> 'int' lvalue Var 0x28b8a8181d8 'mixed' 'int'
|   |     `-CallExpr 0x28b8a80ac20 <line:2159:13, col:77> 'void'
|   |       |-ImplicitCastExpr 0x28b8a80ac08 <col:13> 'void (*)(size_t, smallfelem (*)[3], smallfelem *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x28b8a80aa50 <col:13> 'void (size_t, smallfelem (*)[3], smallfelem *)' Function 0x28b8a814d58 'make_points_affine' 'void (size_t, smallfelem (*)[3], smallfelem *)'
|   |       |-BinaryOperator 0x28b8a80aae8 <col:32, col:45> 'unsigned long long' '*'
|   |       | |-ImplicitCastExpr 0x28b8a80aab8 <col:32> 'size_t':'unsigned long long' <LValueToRValue>
|   |       | | `-DeclRefExpr 0x28b8a80aa70 <col:32> 'size_t':'unsigned long long' lvalue Var 0x28b8a818b98 'num_points' 'size_t':'unsigned long long'
|   |       | `-ImplicitCastExpr 0x28b8a80aad0 <col:45> 'unsigned long long' <IntegralCast>
|   |       |   `-IntegerLiteral 0x28b8a80aa90 <col:45> 'int' 17
|   |       |-ImplicitCastExpr 0x28b8a80ac58 <col:49, col:59> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |       | `-ArraySubscriptExpr 0x28b8a80ab68 <col:49, col:59> 'smallfelem [17][3]':'smallfelem [17][3]' lvalue
|   |       |   |-ImplicitCastExpr 0x28b8a80ab50 <col:49> 'smallfelem (*)[17][3]' <LValueToRValue>
|   |       |   | `-DeclRefExpr 0x28b8a80ab08 <col:49> 'smallfelem (*)[17][3]' lvalue Var 0x28b8a8186b8 'pre_comp' 'smallfelem (*)[17][3]'
|   |       |   `-IntegerLiteral 0x28b8a80ab28 <col:58> 'int' 0
|   |       `-ImplicitCastExpr 0x28b8a80ac70 <col:62> 'smallfelem *' <LValueToRValue>
|   |         `-DeclRefExpr 0x28b8a80ab88 <col:62> 'smallfelem *' lvalue Var 0x28b8a8187e8 'tmp_smallfelems' 'smallfelem *'
|   |-IfStmt 0x28b8a819d90 <line:2163:5, line:2188:74> has_else
|   | |-OpaqueValueExpr 0x28b8a819d78 <<invalid sloc>> '_Bool'
|   | |-CompoundStmt 0x28b8a8198a0 <line:2163:46, line:2184:5>
|   | | |-CallExpr 0x28b8a80aee8 <line:2164:9, col:45> 'void *'
|   | | | |-ImplicitCastExpr 0x28b8a80aed0 <col:9> 'void *(*)(void *, int, unsigned long long)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x28b8a80add8 <col:9> 'void *(void *, int, unsigned long long)' Function 0x28b8a5c2320 'memset' 'void *(void *, int, unsigned long long)'
|   | | | |-ImplicitCastExpr 0x28b8a80af38 <col:16> 'void *' <BitCast>
|   | | | | `-ImplicitCastExpr 0x28b8a80af20 <col:16> 'u8 *' <ArrayToPointerDecay>
|   | | | |   `-DeclRefExpr 0x28b8a80adf8 <col:16> 'felem_bytearray':'u8 [32]' lvalue Var 0x28b8a818318 'g_secret' 'felem_bytearray':'u8 [32]'
|   | | | |-IntegerLiteral 0x28b8a80ae30 <col:26> 'int' 0
|   | | | `-UnaryExprOrTypeTraitExpr 0x28b8a80ae98 <col:29, col:44> 'unsigned long long' sizeof
|   | | |   `-ParenExpr 0x28b8a80ae78 <col:35, col:44> 'felem_bytearray':'u8 [32]' lvalue
|   | | |     `-DeclRefExpr 0x28b8a80ae58 <col:36> 'felem_bytearray':'u8 [32]' lvalue Var 0x28b8a818318 'g_secret' 'felem_bytearray':'u8 [32]' non_odr_use_unevaluated
|   | | |-IfStmt 0x28b8a8191d8 <line:2166:9, line:2177:13> has_else
|   | | | |-OpaqueValueExpr 0x28b8a8191c0 <<invalid sloc>> '_Bool'
|   | | | |-CompoundStmt 0x28b8a819140 <line:2166:70, line:2176:9>
|   | | | | `-IfStmt 0x28b8a8190c8 <line:2171:13, line:2174:13>
|   | | | |   |-OpaqueValueExpr 0x28b8a8190b0 <<invalid sloc>> '_Bool'
|   | | | |   `-CompoundStmt 0x28b8a819098 <line:2171:67, line:2174:13>
|   | | | |     `-GotoStmt 0x28b8a819080 <line:2173:17, col:22> 'err' 0x28b8a815aa0
|   | | | `-NullStmt 0x28b8a8191b8 <line:2177:13>
|   | | |-CallExpr 0x28b8a819298 <line:2178:9, col:45> 'void'
|   | | | |-ImplicitCastExpr 0x28b8a819280 <col:9> 'void (*)(u8 *, const u8 *, unsigned int)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x28b8a819200 <col:9> 'void (u8 *, const u8 *, unsigned int)' Function 0x28b8a6e9548 'flip_endian' 'void (u8 *, const u8 *, unsigned int)'
|   | | | |-ImplicitCastExpr 0x28b8a8192d0 <col:21> 'u8 *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x28b8a819220 <col:21> 'felem_bytearray':'u8 [32]' lvalue Var 0x28b8a818318 'g_secret' 'felem_bytearray':'u8 [32]'
|   | | | |-ImplicitCastExpr 0x28b8a819300 <col:31> 'const u8 *' <NoOp>
|   | | | | `-ImplicitCastExpr 0x28b8a8192e8 <col:31> 'u8 *' <ArrayToPointerDecay>
|   | | | |   `-DeclRefExpr 0x28b8a819240 <col:31> 'felem_bytearray':'u8 [32]' lvalue Var 0x28b8a818918 'tmp' 'felem_bytearray':'u8 [32]'
|   | | | `-ImplicitCastExpr 0x28b8a819318 <col:36> 'unsigned int' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x28b8a819260 <col:36> 'unsigned int' lvalue Var 0x28b8a818a30 'num_bytes' 'unsigned int'
|   | | `-CallExpr 0x28b8a819760 <line:2180:9, line:2183:74> 'void'
|   | |   |-ImplicitCastExpr 0x28b8a819748 <line:2180:9> 'void (*)(limb *, limb *, limb *, const felem_bytearray *, const unsigned int, const u8 *, const int, const smallfelem (*)[17][3], const smallfelem (*)[16][3])' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x28b8a819330 <col:9> 'void (limb *, limb *, limb *, const felem_bytearray *, const unsigned int, const u8 *, const int, const smallfelem (*)[17][3], const smallfelem (*)[16][3])' Function 0x28b8a802f90 'batch_mul' 'void (limb *, limb *, limb *, const felem_bytearray *, const unsigned int, const u8 *, const int, const smallfelem (*)[17][3], const smallfelem (*)[16][3])'
|   | |   |-ImplicitCastExpr 0x28b8a8197c8 <col:19> 'limb *' <ArrayToPointerDecay>
|   | |   | `-DeclRefExpr 0x28b8a819350 <col:19> 'felem':'limb [4]' lvalue Var 0x28b8a818e18 'x_out' 'felem':'limb [4]'
|   | |   |-ImplicitCastExpr 0x28b8a8197e0 <col:26> 'limb *' <ArrayToPointerDecay>
|   | |   | `-DeclRefExpr 0x28b8a819370 <col:26> 'felem':'limb [4]' lvalue Var 0x28b8a818e90 'y_out' 'felem':'limb [4]'
|   | |   |-ImplicitCastExpr 0x28b8a8197f8 <col:33> 'limb *' <ArrayToPointerDecay>
|   | |   | `-DeclRefExpr 0x28b8a819390 <col:33> 'felem':'limb [4]' lvalue Var 0x28b8a818f08 'z_out' 'felem':'limb [4]'
|   | |   |-CStyleCastExpr 0x28b8a819498 <line:2181:19, col:45> 'const felem_bytearray (*)' <NoOp>
|   | |   | `-ImplicitCastExpr 0x28b8a819440 <col:45> 'felem_bytearray *' <LValueToRValue> part_of_explicit_cast
|   | |   |   `-DeclRefExpr 0x28b8a8193b0 <col:45> 'felem_bytearray *' lvalue Var 0x28b8a818408 'secrets' 'felem_bytearray *'
|   | |   |-ImplicitCastExpr 0x28b8a819828 <col:54> 'unsigned int' <IntegralCast>
|   | |   | `-ImplicitCastExpr 0x28b8a819810 <col:54> 'size_t':'unsigned long long' <LValueToRValue>
|   | |   |   `-DeclRefExpr 0x28b8a8194c0 <col:54> 'size_t':'unsigned long long' lvalue Var 0x28b8a818b98 'num_points' 'size_t':'unsigned long long'
|   | |   |-ImplicitCastExpr 0x28b8a819858 <line:2182:19> 'const u8 *' <NoOp>
|   | |   | `-ImplicitCastExpr 0x28b8a819840 <col:19> 'u8 *' <ArrayToPointerDecay>
|   | |   |   `-DeclRefExpr 0x28b8a8194e0 <col:19> 'felem_bytearray':'u8 [32]' lvalue Var 0x28b8a818318 'g_secret' 'felem_bytearray':'u8 [32]'
|   | |   |-ImplicitCastExpr 0x28b8a819870 <line:2183:19> 'int' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x28b8a819500 <col:19> 'int' lvalue Var 0x28b8a8181d8 'mixed' 'int'
|   | |   |-CStyleCastExpr 0x28b8a8196a8 <col:26, col:54> 'const smallfelem (*)[17][3]' <NoOp>
|   | |   | `-ImplicitCastExpr 0x28b8a819658 <col:54> 'smallfelem (*)[17][3]' <LValueToRValue> part_of_explicit_cast
|   | |   |   `-DeclRefExpr 0x28b8a819570 <col:54> 'smallfelem (*)[17][3]' lvalue Var 0x28b8a8186b8 'pre_comp' 'smallfelem (*)[17][3]'
|   | |   `-ImplicitCastExpr 0x28b8a819888 <col:64> 'const smallfelem (*)[16][3]' <LValueToRValue>
|   | |     `-DeclRefExpr 0x28b8a8196d0 <col:64> 'const smallfelem (*)[16][3]' lvalue Var 0x28b8a8151f8 'g_pre_comp' 'const smallfelem (*)[16][3]'
|   | `-CallExpr 0x28b8a819c50 <line:2186:9, line:2188:74> 'void'
|   |   |-ImplicitCastExpr 0x28b8a819c38 <line:2186:9> 'void (*)(limb *, limb *, limb *, const felem_bytearray *, const unsigned int, const u8 *, const int, const smallfelem (*)[17][3], const smallfelem (*)[16][3])' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x28b8a8198d0 <col:9> 'void (limb *, limb *, limb *, const felem_bytearray *, const unsigned int, const u8 *, const int, const smallfelem (*)[17][3], const smallfelem (*)[16][3])' Function 0x28b8a802f90 'batch_mul' 'void (limb *, limb *, limb *, const felem_bytearray *, const unsigned int, const u8 *, const int, const smallfelem (*)[17][3], const smallfelem (*)[16][3])'
|   |   |-ImplicitCastExpr 0x28b8a819cb8 <col:19> 'limb *' <ArrayToPointerDecay>
|   |   | `-DeclRefExpr 0x28b8a8198f0 <col:19> 'felem':'limb [4]' lvalue Var 0x28b8a818e18 'x_out' 'felem':'limb [4]'
|   |   |-ImplicitCastExpr 0x28b8a819cd0 <col:26> 'limb *' <ArrayToPointerDecay>
|   |   | `-DeclRefExpr 0x28b8a819910 <col:26> 'felem':'limb [4]' lvalue Var 0x28b8a818e90 'y_out' 'felem':'limb [4]'
|   |   |-ImplicitCastExpr 0x28b8a819ce8 <col:33> 'limb *' <ArrayToPointerDecay>
|   |   | `-DeclRefExpr 0x28b8a819930 <col:33> 'felem':'limb [4]' lvalue Var 0x28b8a818f08 'z_out' 'felem':'limb [4]'
|   |   |-CStyleCastExpr 0x28b8a8199a0 <line:2187:19, col:45> 'const felem_bytearray (*)' <NoOp>
|   |   | `-ImplicitCastExpr 0x28b8a819988 <col:45> 'felem_bytearray *' <LValueToRValue> part_of_explicit_cast
|   |   |   `-DeclRefExpr 0x28b8a819950 <col:45> 'felem_bytearray *' lvalue Var 0x28b8a818408 'secrets' 'felem_bytearray *'
|   |   |-ImplicitCastExpr 0x28b8a819d18 <col:54> 'unsigned int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x28b8a819d00 <col:54> 'size_t':'unsigned long long' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x28b8a8199c8 <col:54> 'size_t':'unsigned long long' lvalue Var 0x28b8a818b98 'num_points' 'size_t':'unsigned long long'
|   |   |-ImplicitCastExpr 0x28b8a819d30 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'const u8 *' <NullToPointer>
|   |   | `-ParenExpr 0x28b8a819a50 <col:17, col:27> 'void *'
|   |   |   `-CStyleCastExpr 0x28b8a819a28 <col:18, col:26> 'void *' <NullToPointer>
|   |   |     `-IntegerLiteral 0x28b8a8199e8 <col:26> 'int' 0
|   |   |-ImplicitCastExpr 0x28b8a819d48 <.//openssl//file_jk/before\crypto\ec\ecp_nistp256.c:2188:25> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x28b8a819a70 <col:25> 'int' lvalue Var 0x28b8a8181d8 'mixed' 'int'
|   |   |-CStyleCastExpr 0x28b8a819b88 <col:32, col:60> 'const smallfelem (*)[17][3]' <NoOp>
|   |   | `-ImplicitCastExpr 0x28b8a819b70 <col:60> 'smallfelem (*)[17][3]' <LValueToRValue> part_of_explicit_cast
|   |   |   `-DeclRefExpr 0x28b8a819ae0 <col:60> 'smallfelem (*)[17][3]' lvalue Var 0x28b8a8186b8 'pre_comp' 'smallfelem (*)[17][3]'
|   |   `-ImplicitCastExpr 0x28b8a819d60 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'const smallfelem (*)[16][3]':'const smallfelem (*)[16][3]' <NullToPointer>
|   |     `-ParenExpr 0x28b8a819c18 <col:17, col:27> 'void *'
|   |       `-CStyleCastExpr 0x28b8a819bf0 <col:18, col:26> 'void *' <NullToPointer>
|   |         `-IntegerLiteral 0x28b8a819bb0 <col:26> 'int' 0
|   |-CallExpr 0x28b8a819e48 <.//openssl//file_jk/before\crypto\ec\ecp_nistp256.c:2190:5, col:31> 'void'
|   | |-ImplicitCastExpr 0x28b8a819e30 <col:5> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a819db8 <col:5> 'void (u64 *, const limb *)' Function 0x28b8a6f8d18 'felem_contract' 'void (u64 *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a819e78 <col:20> 'u64 *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a819dd8 <col:20> 'smallfelem':'u64 [4]' lvalue Var 0x28b8a818c78 'x_in' 'smallfelem':'u64 [4]'
|   | `-ImplicitCastExpr 0x28b8a819ea8 <col:26> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a819e90 <col:26> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a819e10 <col:26> 'felem':'limb [4]' lvalue Var 0x28b8a818e18 'x_out' 'felem':'limb [4]'
|   |-CallExpr 0x28b8a819f50 <line:2191:5, col:31> 'void'
|   | |-ImplicitCastExpr 0x28b8a819f38 <col:5> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a819ec0 <col:5> 'void (u64 *, const limb *)' Function 0x28b8a6f8d18 'felem_contract' 'void (u64 *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a819f80 <col:20> 'u64 *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a819ee0 <col:20> 'smallfelem':'u64 [4]' lvalue Var 0x28b8a818cf0 'y_in' 'smallfelem':'u64 [4]'
|   | `-ImplicitCastExpr 0x28b8a819fb0 <col:26> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a819f98 <col:26> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a819f18 <col:26> 'felem':'limb [4]' lvalue Var 0x28b8a818e90 'y_out' 'felem':'limb [4]'
|   |-CallExpr 0x28b8a81a058 <line:2192:5, col:31> 'void'
|   | |-ImplicitCastExpr 0x28b8a81a040 <col:5> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a819fc8 <col:5> 'void (u64 *, const limb *)' Function 0x28b8a6f8d18 'felem_contract' 'void (u64 *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a81a088 <col:20> 'u64 *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a819fe8 <col:20> 'smallfelem':'u64 [4]' lvalue Var 0x28b8a818d68 'z_in' 'smallfelem':'u64 [4]'
|   | `-ImplicitCastExpr 0x28b8a81a0b8 <col:26> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a81a0a0 <col:26> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a81a020 <col:26> 'felem':'limb [4]' lvalue Var 0x28b8a818f08 'z_out' 'felem':'limb [4]'
|   |-IfStmt 0x28b8a81a198 <line:2193:5, line:2197:5>
|   | |-OpaqueValueExpr 0x28b8a81a180 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x28b8a81a168 <line:2194:39, line:2197:5>
|   |   `-GotoStmt 0x28b8a81a150 <line:2196:9, col:14> 'err' 0x28b8a815aa0
|   |-LabelStmt 0x28b8a81a230 <line:2200:2, col:5> 'err'
|   | `-NullStmt 0x28b8a81a228 <col:5>
|   |-CallExpr 0x28b8a81a3d0 <line:2204:5, col:25> 'int'
|   | |-ImplicitCastExpr 0x28b8a81a3b8 <col:5> 'int (*)()' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a81a378 <col:5> 'int ()' Function 0x28b8a7fc458 'OPENSSL_free' 'int ()'
|   | `-ImplicitCastExpr 0x28b8a81a3f8 <col:18> 'felem_bytearray *' <LValueToRValue>
|   |   `-DeclRefExpr 0x28b8a81a398 <col:18> 'felem_bytearray *' lvalue Var 0x28b8a818408 'secrets' 'felem_bytearray *'
|   |-CallExpr 0x28b8a81a468 <line:2205:5, col:26> 'int'
|   | |-ImplicitCastExpr 0x28b8a81a450 <col:5> 'int (*)()' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a81a410 <col:5> 'int ()' Function 0x28b8a7fc458 'OPENSSL_free' 'int ()'
|   | `-ImplicitCastExpr 0x28b8a81a490 <col:18> 'smallfelem (*)[17][3]' <LValueToRValue>
|   |   `-DeclRefExpr 0x28b8a81a430 <col:18> 'smallfelem (*)[17][3]' lvalue Var 0x28b8a8186b8 'pre_comp' 'smallfelem (*)[17][3]'
|   |-CallExpr 0x28b8a81a500 <line:2206:5, col:33> 'int'
|   | |-ImplicitCastExpr 0x28b8a81a4e8 <col:5> 'int (*)()' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a81a4a8 <col:5> 'int ()' Function 0x28b8a7fc458 'OPENSSL_free' 'int ()'
|   | `-ImplicitCastExpr 0x28b8a81a528 <col:18> 'smallfelem *' <LValueToRValue>
|   |   `-DeclRefExpr 0x28b8a81a4c8 <col:18> 'smallfelem *' lvalue Var 0x28b8a8187e8 'tmp_smallfelems' 'smallfelem *'
|   `-ReturnStmt 0x28b8a81a578 <line:2207:5, col:12>
|     `-ImplicitCastExpr 0x28b8a81a560 <col:12> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x28b8a81a540 <col:12> 'int' lvalue Var 0x28b8a818080 'ret' 'int'
|-FunctionDecl 0x28b8a81a7c8 <line:2210:1, line:2344:1> line:2210:5 invalid ec_GFp_nistp256_precompute_mult 'int (int *, int *)'
| |-ParmVarDecl 0x28b8a81a6a8 <col:37, col:47> col:47 invalid group 'int *'
| |-ParmVarDecl 0x28b8a81a728 <col:54, col:62> col:62 invalid ctx 'int *'
| `-CompoundStmt 0x28b8a8218b8 <line:2211:1, line:2344:1>
|   |-DeclStmt 0x28b8a81a938 <line:2212:5, col:16>
|   | `-VarDecl 0x28b8a81a8a8 <col:5, col:15> col:9 used ret 'int' cinit
|   |   `-IntegerLiteral 0x28b8a81a910 <col:15> 'int' 0
|   |-DeclStmt 0x28b8a81aa68 <line:2213:5, col:34>
|   | `-VarDecl 0x28b8a81a960 <col:5, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27> .//openssl//file_jk/before\crypto\ec\ecp_nistp256.c:2213:24 used pre 'NISTP256_PRE_COMP *' cinit
|   |   `-ImplicitCastExpr 0x28b8a81aa50 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'NISTP256_PRE_COMP *' <NullToPointer>
|   |     `-ParenExpr 0x28b8a81aa30 <col:17, col:27> 'void *'
|   |       `-CStyleCastExpr 0x28b8a81aa08 <col:18, col:26> 'void *' <NullToPointer>
|   |         `-IntegerLiteral 0x28b8a81a9c8 <col:26> 'int' 0
|   |-DeclStmt 0x28b8a81ab98 <.//openssl//file_jk/before\crypto\ec\ecp_nistp256.c:2214:5, col:13>
|   | |-VarDecl 0x28b8a81aa98 <col:5, col:9> col:9 used i 'int'
|   | `-VarDecl 0x28b8a81ab18 <col:5, col:12> col:12 used j 'int'
|   |-DeclStmt 0x28b8a81ae00 <line:2218:5, col:35>
|   | `-VarDecl 0x28b8a81ad98 <col:5, col:34> col:16 used tmp_smallfelems 'smallfelem [32]'
|   |-DeclStmt 0x28b8a81afa0 <line:2219:5, col:30>
|   | |-VarDecl 0x28b8a81ae28 <col:5, col:11> col:11 used x_tmp 'felem':'limb [4]'
|   | |-VarDecl 0x28b8a81aea0 <col:5, col:18> col:18 used y_tmp 'felem':'limb [4]'
|   | `-VarDecl 0x28b8a81af18 <col:5, col:25> col:25 used z_tmp 'felem':'limb [4]'
|   |-IfStmt 0x28b8a811160 <line:2223:5, line:2225:20>
|   | |-OpaqueValueExpr 0x28b8a811148 <<invalid sloc>> '_Bool'
|   | `-IfStmt 0x28b8a811130 <line:2224:9, line:2225:20>
|   |   |-OpaqueValueExpr 0x28b8a811118 <<invalid sloc>> '_Bool'
|   |   `-ReturnStmt 0x28b8a811108 <col:13, col:20>
|   |     `-IntegerLiteral 0x28b8a8110e0 <col:20> 'int' 0
|   |-IfStmt 0x28b8a811368 <line:2227:5, line:2228:14>
|   | |-OpaqueValueExpr 0x28b8a811350 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x28b8a811338 <col:9, col:14> 'err' 0x28b8a8112e8
|   |-IfStmt 0x28b8a811438 <line:2230:5, line:2231:14>
|   | |-OpaqueValueExpr 0x28b8a811420 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x28b8a811408 <col:9, col:14> 'err' 0x28b8a8112e8
|   |-IfStmt 0x28b8a811528 <line:2233:5, line:2234:14>
|   | |-OpaqueValueExpr 0x28b8a811510 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x28b8a8114f8 <col:9, col:14> 'err' 0x28b8a8112e8
|   |-IfStmt 0x28b8a811820 <line:2237:5, line:2238:14>
|   | |-OpaqueValueExpr 0x28b8a811808 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x28b8a8117f0 <col:9, col:14> 'err' 0x28b8a8112e8
|   |-IfStmt 0x28b8a811a38 <line:2239:5, line:2240:14>
|   | |-BinaryOperator 0x28b8a811a00 <line:2239:9, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27> 'int' '=='
|   | | |-ParenExpr 0x28b8a811940 <.//openssl//file_jk/before\crypto\ec\ecp_nistp256.c:2239:9, col:39> 'NISTP256_PRE_COMP *'
|   | | | `-BinaryOperator 0x28b8a811920 <col:10, col:38> 'NISTP256_PRE_COMP *' '='
|   | | |   |-DeclRefExpr 0x28b8a811838 <col:10> 'NISTP256_PRE_COMP *' lvalue Var 0x28b8a81a960 'pre' 'NISTP256_PRE_COMP *'
|   | | |   `-CallExpr 0x28b8a811900 <col:16, col:38> 'NISTP256_PRE_COMP *'
|   | | |     `-ImplicitCastExpr 0x28b8a8118e8 <col:16> 'NISTP256_PRE_COMP *(*)()' <FunctionToPointerDecay>
|   | | |       `-DeclRefExpr 0x28b8a811870 <col:16> 'NISTP256_PRE_COMP *()' Function 0x28b8a7fbc08 'nistp256_pre_comp_new' 'NISTP256_PRE_COMP *()'
|   | | `-ImplicitCastExpr 0x28b8a8119e8 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'NISTP256_PRE_COMP *' <BitCast>
|   | |   `-ParenExpr 0x28b8a8119c8 <col:17, col:27> 'void *'
|   | |     `-CStyleCastExpr 0x28b8a8119a0 <col:18, col:26> 'void *' <NullToPointer>
|   | |       `-IntegerLiteral 0x28b8a811960 <col:26> 'int' 0
|   | `-GotoStmt 0x28b8a811a20 <.//openssl//file_jk/before\crypto\ec\ecp_nistp256.c:2240:9, col:14> 'err' 0x28b8a8112e8
|   |-IfStmt 0x28b8a811d98 <line:2244:5, line:2247:5>
|   | |-OpaqueValueExpr 0x28b8a811d80 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x28b8a811d60 <line:2244:69, line:2247:5>
|   |   |-CallExpr 0x28b8a811c60 <line:2245:9, col:62> 'void *'
|   |   | |-ImplicitCastExpr 0x28b8a811c48 <col:9> 'void *(*)(void *, const void *, unsigned long long)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x28b8a811a98 <col:9> 'void *(void *, const void *, unsigned long long)' Function 0x28b8a5bf898 'memcpy' 'void *(void *, const void *, unsigned long long)'
|   |   | |-ImplicitCastExpr 0x28b8a811cb0 <col:16, col:21> 'void *' <BitCast>
|   |   | | `-ImplicitCastExpr 0x28b8a811c98 <col:16, col:21> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   `-MemberExpr 0x28b8a811af0 <col:16, col:21> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x28b8a7fb638
|   |   | |     `-ImplicitCastExpr 0x28b8a811ad8 <col:16> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |       `-DeclRefExpr 0x28b8a811ab8 <col:16> 'NISTP256_PRE_COMP *' lvalue Var 0x28b8a81a960 'pre' 'NISTP256_PRE_COMP *'
|   |   | |-ImplicitCastExpr 0x28b8a811ce0 <col:33> 'const void *' <BitCast>
|   |   | | `-ImplicitCastExpr 0x28b8a811cc8 <col:33> 'const smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   `-DeclRefExpr 0x28b8a811b20 <col:33> 'const smallfelem [2][16][3]' lvalue Var 0x28b8a706b78 'gmul' 'const smallfelem [2][16][3]'
|   |   | `-UnaryExprOrTypeTraitExpr 0x28b8a811bc8 <col:39, col:61> 'unsigned long long' sizeof
|   |   |   `-ParenExpr 0x28b8a811ba8 <col:45, col:61> 'smallfelem [2][16][3]' lvalue
|   |   |     `-MemberExpr 0x28b8a811b78 <col:46, col:51> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x28b8a7fb638 non_odr_use_unevaluated
|   |   |       `-ImplicitCastExpr 0x28b8a811b60 <col:46> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   |         `-DeclRefExpr 0x28b8a811b40 <col:46> 'NISTP256_PRE_COMP *' lvalue Var 0x28b8a81a960 'pre' 'NISTP256_PRE_COMP *' non_odr_use_unevaluated
|   |   `-GotoStmt 0x28b8a811d48 <line:2246:9, col:14> 'done' 0x28b8a811cf8
|   |-IfStmt 0x28b8a811e88 <line:2248:5, line:2251:14>
|   | |-OpaqueValueExpr 0x28b8a811e70 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x28b8a811e58 <col:9, col:14> 'err' 0x28b8a8112e8
|   |-CallExpr 0x28b8a812080 <line:2252:5, col:49> 'void'
|   | |-ImplicitCastExpr 0x28b8a812068 <col:5> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a811ea0 <col:5> 'void (u64 *, const limb *)' Function 0x28b8a5fc378 'felem_shrink' 'void (u64 *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a8120b0 <col:18, col:41> 'u64 *' <ArrayToPointerDecay>
|   | | `-ArraySubscriptExpr 0x28b8a812028 <col:18, col:41> 'smallfelem':'u64 [4]' lvalue
|   | |   |-ImplicitCastExpr 0x28b8a812010 <col:18, col:38> 'smallfelem *' <ArrayToPointerDecay>
|   | |   | `-ArraySubscriptExpr 0x28b8a811fc8 <col:18, col:38> 'smallfelem [3]' lvalue
|   | |   |   |-ImplicitCastExpr 0x28b8a811fb0 <col:18, col:35> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   | |   |   | `-ArraySubscriptExpr 0x28b8a811f68 <col:18, col:35> 'smallfelem [16][3]' lvalue
|   | |   |   |   |-ImplicitCastExpr 0x28b8a811f50 <col:18, col:23> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   | |   |   |   | `-MemberExpr 0x28b8a811ef8 <col:18, col:23> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x28b8a7fb638
|   | |   |   |   |   `-ImplicitCastExpr 0x28b8a811ee0 <col:18> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   | |   |   |   |     `-DeclRefExpr 0x28b8a811ec0 <col:18> 'NISTP256_PRE_COMP *' lvalue Var 0x28b8a81a960 'pre' 'NISTP256_PRE_COMP *'
|   | |   |   |   `-IntegerLiteral 0x28b8a811f28 <col:34> 'int' 0
|   | |   |   `-IntegerLiteral 0x28b8a811f88 <col:37> 'int' 1
|   | |   `-IntegerLiteral 0x28b8a811fe8 <col:40> 'int' 0
|   | `-ImplicitCastExpr 0x28b8a8120e0 <col:44> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a8120c8 <col:44> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a812048 <col:44> 'felem':'limb [4]' lvalue Var 0x28b8a81ae28 'x_tmp' 'felem':'limb [4]'
|   |-CallExpr 0x28b8a8122d8 <line:2253:5, col:49> 'void'
|   | |-ImplicitCastExpr 0x28b8a8122c0 <col:5> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a8120f8 <col:5> 'void (u64 *, const limb *)' Function 0x28b8a5fc378 'felem_shrink' 'void (u64 *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a812308 <col:18, col:41> 'u64 *' <ArrayToPointerDecay>
|   | | `-ArraySubscriptExpr 0x28b8a812280 <col:18, col:41> 'smallfelem':'u64 [4]' lvalue
|   | |   |-ImplicitCastExpr 0x28b8a812268 <col:18, col:38> 'smallfelem *' <ArrayToPointerDecay>
|   | |   | `-ArraySubscriptExpr 0x28b8a812220 <col:18, col:38> 'smallfelem [3]' lvalue
|   | |   |   |-ImplicitCastExpr 0x28b8a812208 <col:18, col:35> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   | |   |   | `-ArraySubscriptExpr 0x28b8a8121c0 <col:18, col:35> 'smallfelem [16][3]' lvalue
|   | |   |   |   |-ImplicitCastExpr 0x28b8a8121a8 <col:18, col:23> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   | |   |   |   | `-MemberExpr 0x28b8a812150 <col:18, col:23> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x28b8a7fb638
|   | |   |   |   |   `-ImplicitCastExpr 0x28b8a812138 <col:18> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   | |   |   |   |     `-DeclRefExpr 0x28b8a812118 <col:18> 'NISTP256_PRE_COMP *' lvalue Var 0x28b8a81a960 'pre' 'NISTP256_PRE_COMP *'
|   | |   |   |   `-IntegerLiteral 0x28b8a812180 <col:34> 'int' 0
|   | |   |   `-IntegerLiteral 0x28b8a8121e0 <col:37> 'int' 1
|   | |   `-IntegerLiteral 0x28b8a812240 <col:40> 'int' 1
|   | `-ImplicitCastExpr 0x28b8a812338 <col:44> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a812320 <col:44> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a8122a0 <col:44> 'felem':'limb [4]' lvalue Var 0x28b8a81aea0 'y_tmp' 'felem':'limb [4]'
|   |-CallExpr 0x28b8a812530 <line:2254:5, col:49> 'void'
|   | |-ImplicitCastExpr 0x28b8a812518 <col:5> 'void (*)(u64 *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a812350 <col:5> 'void (u64 *, const limb *)' Function 0x28b8a5fc378 'felem_shrink' 'void (u64 *, const limb *)'
|   | |-ImplicitCastExpr 0x28b8a812560 <col:18, col:41> 'u64 *' <ArrayToPointerDecay>
|   | | `-ArraySubscriptExpr 0x28b8a8124d8 <col:18, col:41> 'smallfelem':'u64 [4]' lvalue
|   | |   |-ImplicitCastExpr 0x28b8a8124c0 <col:18, col:38> 'smallfelem *' <ArrayToPointerDecay>
|   | |   | `-ArraySubscriptExpr 0x28b8a812478 <col:18, col:38> 'smallfelem [3]' lvalue
|   | |   |   |-ImplicitCastExpr 0x28b8a812460 <col:18, col:35> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   | |   |   | `-ArraySubscriptExpr 0x28b8a812418 <col:18, col:35> 'smallfelem [16][3]' lvalue
|   | |   |   |   |-ImplicitCastExpr 0x28b8a812400 <col:18, col:23> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   | |   |   |   | `-MemberExpr 0x28b8a8123a8 <col:18, col:23> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x28b8a7fb638
|   | |   |   |   |   `-ImplicitCastExpr 0x28b8a812390 <col:18> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   | |   |   |   |     `-DeclRefExpr 0x28b8a812370 <col:18> 'NISTP256_PRE_COMP *' lvalue Var 0x28b8a81a960 'pre' 'NISTP256_PRE_COMP *'
|   | |   |   |   `-IntegerLiteral 0x28b8a8123d8 <col:34> 'int' 0
|   | |   |   `-IntegerLiteral 0x28b8a812438 <col:37> 'int' 1
|   | |   `-IntegerLiteral 0x28b8a812498 <col:40> 'int' 2
|   | `-ImplicitCastExpr 0x28b8a812590 <col:44> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x28b8a812578 <col:44> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x28b8a8124f8 <col:44> 'felem':'limb [4]' lvalue Var 0x28b8a81af18 'z_tmp' 'felem':'limb [4]'
|   |-ForStmt 0x28b8a81b9b8 <line:2259:5, line:2287:5>
|   | |-BinaryOperator 0x28b8a812608 <line:2259:10, col:14> 'int' '='
|   | | |-DeclRefExpr 0x28b8a8125a8 <col:10> 'int' lvalue Var 0x28b8a81aa98 'i' 'int'
|   | | `-IntegerLiteral 0x28b8a8125e0 <col:14> 'int' 1
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x28b8a812688 <col:17, col:22> 'int' '<='
|   | | |-ImplicitCastExpr 0x28b8a812670 <col:17> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a812628 <col:17> 'int' lvalue Var 0x28b8a81aa98 'i' 'int'
|   | | `-IntegerLiteral 0x28b8a812648 <col:22> 'int' 8
|   | |-CompoundAssignOperator 0x28b8a812708 <col:25, col:31> 'int' '<<=' ComputeLHSTy='int' ComputeResultTy='int'
|   | | |-DeclRefExpr 0x28b8a8126a8 <col:25> 'int' lvalue Var 0x28b8a81aa98 'i' 'int'
|   | | `-IntegerLiteral 0x28b8a8126c8 <col:31> 'int' 1
|   | `-CompoundStmt 0x28b8a81b980 <col:34, line:2287:5>
|   |   |-CallExpr 0x28b8a80b0d8 <line:2260:9, line:2263:52> 'void'
|   |   | |-ImplicitCastExpr 0x28b8a80b0c0 <line:2260:9> 'void (*)(u64 *, u64 *, u64 *, const u64 *, const u64 *, const u64 *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x28b8a812738 <col:9> 'void (u64 *, u64 *, u64 *, const u64 *, const u64 *, const u64 *)' Function 0x28b8a703228 'point_double_small' 'void (u64 *, u64 *, u64 *, const u64 *, const u64 *, const u64 *)'
|   |   | |-ImplicitCastExpr 0x28b8a80b128 <col:28, col:51> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x28b8a8128d0 <col:28, col:51> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x28b8a8128b8 <col:28, col:48> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x28b8a812870 <col:28, col:48> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x28b8a812840 <col:28, col:45> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x28b8a812800 <col:28, col:45> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x28b8a8127e8 <col:28, col:33> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x28b8a812790 <col:28, col:33> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x28b8a7fb638
|   |   | |   |   |   |   `-ImplicitCastExpr 0x28b8a812778 <col:28> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x28b8a812758 <col:28> 'NISTP256_PRE_COMP *' lvalue Var 0x28b8a81a960 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-IntegerLiteral 0x28b8a8127c0 <col:44> 'int' 1
|   |   | |   |   `-ImplicitCastExpr 0x28b8a812858 <col:47> 'int' <LValueToRValue>
|   |   | |   |     `-DeclRefExpr 0x28b8a812820 <col:47> 'int' lvalue Var 0x28b8a81aa98 'i' 'int'
|   |   | |   `-IntegerLiteral 0x28b8a812890 <col:50> 'int' 0
|   |   | |-ImplicitCastExpr 0x28b8a80b140 <col:54, col:77> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x28b8a812a68 <col:54, col:77> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x28b8a812a50 <col:54, col:74> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x28b8a812a08 <col:54, col:74> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x28b8a8129d8 <col:54, col:71> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x28b8a812998 <col:54, col:71> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x28b8a812980 <col:54, col:59> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x28b8a812928 <col:54, col:59> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x28b8a7fb638
|   |   | |   |   |   |   `-ImplicitCastExpr 0x28b8a812910 <col:54> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x28b8a8128f0 <col:54> 'NISTP256_PRE_COMP *' lvalue Var 0x28b8a81a960 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-IntegerLiteral 0x28b8a812958 <col:70> 'int' 1
|   |   | |   |   `-ImplicitCastExpr 0x28b8a8129f0 <col:73> 'int' <LValueToRValue>
|   |   | |   |     `-DeclRefExpr 0x28b8a8129b8 <col:73> 'int' lvalue Var 0x28b8a81aa98 'i' 'int'
|   |   | |   `-IntegerLiteral 0x28b8a812a28 <col:76> 'int' 1
|   |   | |-ImplicitCastExpr 0x28b8a80b158 <line:2261:28, col:51> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x28b8a812c00 <col:28, col:51> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x28b8a812be8 <col:28, col:48> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x28b8a812ba0 <col:28, col:48> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x28b8a812b70 <col:28, col:45> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x28b8a812b30 <col:28, col:45> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x28b8a812b18 <col:28, col:33> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x28b8a812ac0 <col:28, col:33> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x28b8a7fb638
|   |   | |   |   |   |   `-ImplicitCastExpr 0x28b8a812aa8 <col:28> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x28b8a812a88 <col:28> 'NISTP256_PRE_COMP *' lvalue Var 0x28b8a81a960 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-IntegerLiteral 0x28b8a812af0 <col:44> 'int' 1
|   |   | |   |   `-ImplicitCastExpr 0x28b8a812b88 <col:47> 'int' <LValueToRValue>
|   |   | |   |     `-DeclRefExpr 0x28b8a812b50 <col:47> 'int' lvalue Var 0x28b8a81aa98 'i' 'int'
|   |   | |   `-IntegerLiteral 0x28b8a812bc0 <col:50> 'int' 2
|   |   | |-ImplicitCastExpr 0x28b8a80b188 <col:54, col:77> 'const u64 *':'const u64 *' <NoOp>
|   |   | | `-ImplicitCastExpr 0x28b8a80b170 <col:54, col:77> 'u64 *' <ArrayToPointerDecay>
|   |   | |   `-ArraySubscriptExpr 0x28b8a812d98 <col:54, col:77> 'smallfelem':'u64 [4]' lvalue
|   |   | |     |-ImplicitCastExpr 0x28b8a812d80 <col:54, col:74> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |     | `-ArraySubscriptExpr 0x28b8a812d38 <col:54, col:74> 'smallfelem [3]' lvalue
|   |   | |     |   |-ImplicitCastExpr 0x28b8a812d08 <col:54, col:71> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |     |   | `-ArraySubscriptExpr 0x28b8a812cc8 <col:54, col:71> 'smallfelem [16][3]' lvalue
|   |   | |     |   |   |-ImplicitCastExpr 0x28b8a812cb0 <col:54, col:59> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |     |   |   | `-MemberExpr 0x28b8a812c58 <col:54, col:59> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x28b8a7fb638
|   |   | |     |   |   |   `-ImplicitCastExpr 0x28b8a812c40 <col:54> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |     |   |   |     `-DeclRefExpr 0x28b8a812c20 <col:54> 'NISTP256_PRE_COMP *' lvalue Var 0x28b8a81a960 'pre' 'NISTP256_PRE_COMP *'
|   |   | |     |   |   `-IntegerLiteral 0x28b8a812c88 <col:70> 'int' 0
|   |   | |     |   `-ImplicitCastExpr 0x28b8a812d20 <col:73> 'int' <LValueToRValue>
|   |   | |     |     `-DeclRefExpr 0x28b8a812ce8 <col:73> 'int' lvalue Var 0x28b8a81aa98 'i' 'int'
|   |   | |     `-IntegerLiteral 0x28b8a812d58 <col:76> 'int' 0
|   |   | |-ImplicitCastExpr 0x28b8a80b1b8 <line:2262:28, col:51> 'const u64 *':'const u64 *' <NoOp>
|   |   | | `-ImplicitCastExpr 0x28b8a80b1a0 <col:28, col:51> 'u64 *' <ArrayToPointerDecay>
|   |   | |   `-ArraySubscriptExpr 0x28b8a812f30 <col:28, col:51> 'smallfelem':'u64 [4]' lvalue
|   |   | |     |-ImplicitCastExpr 0x28b8a812f18 <col:28, col:48> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |     | `-ArraySubscriptExpr 0x28b8a812ed0 <col:28, col:48> 'smallfelem [3]' lvalue
|   |   | |     |   |-ImplicitCastExpr 0x28b8a812ea0 <col:28, col:45> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |     |   | `-ArraySubscriptExpr 0x28b8a812e60 <col:28, col:45> 'smallfelem [16][3]' lvalue
|   |   | |     |   |   |-ImplicitCastExpr 0x28b8a812e48 <col:28, col:33> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |     |   |   | `-MemberExpr 0x28b8a812df0 <col:28, col:33> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x28b8a7fb638
|   |   | |     |   |   |   `-ImplicitCastExpr 0x28b8a812dd8 <col:28> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |     |   |   |     `-DeclRefExpr 0x28b8a812db8 <col:28> 'NISTP256_PRE_COMP *' lvalue Var 0x28b8a81a960 'pre' 'NISTP256_PRE_COMP *'
|   |   | |     |   |   `-IntegerLiteral 0x28b8a812e20 <col:44> 'int' 0
|   |   | |     |   `-ImplicitCastExpr 0x28b8a812eb8 <col:47> 'int' <LValueToRValue>
|   |   | |     |     `-DeclRefExpr 0x28b8a812e80 <col:47> 'int' lvalue Var 0x28b8a81aa98 'i' 'int'
|   |   | |     `-IntegerLiteral 0x28b8a812ef0 <col:50> 'int' 1
|   |   | `-ImplicitCastExpr 0x28b8a80b1e8 <line:2263:28, col:51> 'const u64 *':'const u64 *' <NoOp>
|   |   |   `-ImplicitCastExpr 0x28b8a80b1d0 <col:28, col:51> 'u64 *' <ArrayToPointerDecay>
|   |   |     `-ArraySubscriptExpr 0x28b8a80b0a0 <col:28, col:51> 'smallfelem':'u64 [4]' lvalue
|   |   |       |-ImplicitCastExpr 0x28b8a80b088 <col:28, col:48> 'smallfelem *' <ArrayToPointerDecay>
|   |   |       | `-ArraySubscriptExpr 0x28b8a80b040 <col:28, col:48> 'smallfelem [3]' lvalue
|   |   |       |   |-ImplicitCastExpr 0x28b8a80b010 <col:28, col:45> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |       |   | `-ArraySubscriptExpr 0x28b8a80afd0 <col:28, col:45> 'smallfelem [16][3]' lvalue
|   |   |       |   |   |-ImplicitCastExpr 0x28b8a812fe0 <col:28, col:33> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   |       |   |   | `-MemberExpr 0x28b8a812f88 <col:28, col:33> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x28b8a7fb638
|   |   |       |   |   |   `-ImplicitCastExpr 0x28b8a812f70 <col:28> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   |       |   |   |     `-DeclRefExpr 0x28b8a812f50 <col:28> 'NISTP256_PRE_COMP *' lvalue Var 0x28b8a81a960 'pre' 'NISTP256_PRE_COMP *'
|   |   |       |   |   `-IntegerLiteral 0x28b8a812fb8 <col:44> 'int' 0
|   |   |       |   `-ImplicitCastExpr 0x28b8a80b028 <col:47> 'int' <LValueToRValue>
|   |   |       |     `-DeclRefExpr 0x28b8a80aff0 <col:47> 'int' lvalue Var 0x28b8a81aa98 'i' 'int'
|   |   |       `-IntegerLiteral 0x28b8a80b060 <col:50> 'int' 2
|   |   |-ForStmt 0x28b8a80be40 <line:2264:9, line:2271:9>
|   |   | |-BinaryOperator 0x28b8a80b260 <line:2264:14, col:18> 'int' '='
|   |   | | |-DeclRefExpr 0x28b8a80b200 <col:14> 'int' lvalue Var 0x28b8a81ab18 'j' 'int'
|   |   | | `-IntegerLiteral 0x28b8a80b238 <col:18> 'int' 0
|   |   | |-<<<NULL>>>
|   |   | |-BinaryOperator 0x28b8a80b2e0 <col:21, col:25> 'int' '<'
|   |   | | |-ImplicitCastExpr 0x28b8a80b2c8 <col:21> 'int' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x28b8a80b280 <col:21> 'int' lvalue Var 0x28b8a81ab18 'j' 'int'
|   |   | | `-IntegerLiteral 0x28b8a80b2a0 <col:25> 'int' 31
|   |   | |-UnaryOperator 0x28b8a80b320 <col:29, col:31> 'int' prefix '++'
|   |   | | `-DeclRefExpr 0x28b8a80b300 <col:31> 'int' lvalue Var 0x28b8a81ab18 'j' 'int'
|   |   | `-CompoundStmt 0x28b8a80be28 <col:34, line:2271:9>
|   |   |   `-CallExpr 0x28b8a80bd00 <line:2265:13, line:2270:56> 'void'
|   |   |     |-ImplicitCastExpr 0x28b8a80bce8 <line:2265:13> 'void (*)(u64 *, u64 *, u64 *, const u64 *, const u64 *, const u64 *)' <FunctionToPointerDecay>
|   |   |     | `-DeclRefExpr 0x28b8a80b338 <col:13> 'void (u64 *, u64 *, u64 *, const u64 *, const u64 *, const u64 *)' Function 0x28b8a703228 'point_double_small' 'void (u64 *, u64 *, u64 *, const u64 *, const u64 *, const u64 *)'
|   |   |     |-ImplicitCastExpr 0x28b8a80bd50 <col:32, col:55> 'u64 *' <ArrayToPointerDecay>
|   |   |     | `-ArraySubscriptExpr 0x28b8a80b4d0 <col:32, col:55> 'smallfelem':'u64 [4]' lvalue
|   |   |     |   |-ImplicitCastExpr 0x28b8a80b4b8 <col:32, col:52> 'smallfelem *' <ArrayToPointerDecay>
|   |   |     |   | `-ArraySubscriptExpr 0x28b8a80b470 <col:32, col:52> 'smallfelem [3]' lvalue
|   |   |     |   |   |-ImplicitCastExpr 0x28b8a80b440 <col:32, col:49> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |     |   |   | `-ArraySubscriptExpr 0x28b8a80b400 <col:32, col:49> 'smallfelem [16][3]' lvalue
|   |   |     |   |   |   |-ImplicitCastExpr 0x28b8a80b3e8 <col:32, col:37> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   |     |   |   |   | `-MemberExpr 0x28b8a80b390 <col:32, col:37> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x28b8a7fb638
|   |   |     |   |   |   |   `-ImplicitCastExpr 0x28b8a80b378 <col:32> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   |     |   |   |   |     `-DeclRefExpr 0x28b8a80b358 <col:32> 'NISTP256_PRE_COMP *' lvalue Var 0x28b8a81a960 'pre' 'NISTP256_PRE_COMP *'
|   |   |     |   |   |   `-IntegerLiteral 0x28b8a80b3c0 <col:48> 'int' 1
|   |   |     |   |   `-ImplicitCastExpr 0x28b8a80b458 <col:51> 'int' <LValueToRValue>
|   |   |     |   |     `-DeclRefExpr 0x28b8a80b420 <col:51> 'int' lvalue Var 0x28b8a81aa98 'i' 'int'
|   |   |     |   `-IntegerLiteral 0x28b8a80b490 <col:54> 'int' 0
|   |   |     |-ImplicitCastExpr 0x28b8a80bd68 <line:2266:32, col:55> 'u64 *' <ArrayToPointerDecay>
|   |   |     | `-ArraySubscriptExpr 0x28b8a80b668 <col:32, col:55> 'smallfelem':'u64 [4]' lvalue
|   |   |     |   |-ImplicitCastExpr 0x28b8a80b650 <col:32, col:52> 'smallfelem *' <ArrayToPointerDecay>
|   |   |     |   | `-ArraySubscriptExpr 0x28b8a80b608 <col:32, col:52> 'smallfelem [3]' lvalue
|   |   |     |   |   |-ImplicitCastExpr 0x28b8a80b5d8 <col:32, col:49> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |     |   |   | `-ArraySubscriptExpr 0x28b8a80b598 <col:32, col:49> 'smallfelem [16][3]' lvalue
|   |   |     |   |   |   |-ImplicitCastExpr 0x28b8a80b580 <col:32, col:37> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   |     |   |   |   | `-MemberExpr 0x28b8a80b528 <col:32, col:37> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x28b8a7fb638
|   |   |     |   |   |   |   `-ImplicitCastExpr 0x28b8a80b510 <col:32> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   |     |   |   |   |     `-DeclRefExpr 0x28b8a80b4f0 <col:32> 'NISTP256_PRE_COMP *' lvalue Var 0x28b8a81a960 'pre' 'NISTP256_PRE_COMP *'
|   |   |     |   |   |   `-IntegerLiteral 0x28b8a80b558 <col:48> 'int' 1
|   |   |     |   |   `-ImplicitCastExpr 0x28b8a80b5f0 <col:51> 'int' <LValueToRValue>
|   |   |     |   |     `-DeclRefExpr 0x28b8a80b5b8 <col:51> 'int' lvalue Var 0x28b8a81aa98 'i' 'int'
|   |   |     |   `-IntegerLiteral 0x28b8a80b628 <col:54> 'int' 1
|   |   |     |-ImplicitCastExpr 0x28b8a80bd80 <line:2267:32, col:55> 'u64 *' <ArrayToPointerDecay>
|   |   |     | `-ArraySubscriptExpr 0x28b8a80b800 <col:32, col:55> 'smallfelem':'u64 [4]' lvalue
|   |   |     |   |-ImplicitCastExpr 0x28b8a80b7e8 <col:32, col:52> 'smallfelem *' <ArrayToPointerDecay>
|   |   |     |   | `-ArraySubscriptExpr 0x28b8a80b7a0 <col:32, col:52> 'smallfelem [3]' lvalue
|   |   |     |   |   |-ImplicitCastExpr 0x28b8a80b770 <col:32, col:49> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |     |   |   | `-ArraySubscriptExpr 0x28b8a80b730 <col:32, col:49> 'smallfelem [16][3]' lvalue
|   |   |     |   |   |   |-ImplicitCastExpr 0x28b8a80b718 <col:32, col:37> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   |     |   |   |   | `-MemberExpr 0x28b8a80b6c0 <col:32, col:37> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x28b8a7fb638
|   |   |     |   |   |   |   `-ImplicitCastExpr 0x28b8a80b6a8 <col:32> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   |     |   |   |   |     `-DeclRefExpr 0x28b8a80b688 <col:32> 'NISTP256_PRE_COMP *' lvalue Var 0x28b8a81a960 'pre' 'NISTP256_PRE_COMP *'
|   |   |     |   |   |   `-IntegerLiteral 0x28b8a80b6f0 <col:48> 'int' 1
|   |   |     |   |   `-ImplicitCastExpr 0x28b8a80b788 <col:51> 'int' <LValueToRValue>
|   |   |     |   |     `-DeclRefExpr 0x28b8a80b750 <col:51> 'int' lvalue Var 0x28b8a81aa98 'i' 'int'
|   |   |     |   `-IntegerLiteral 0x28b8a80b7c0 <col:54> 'int' 2
|   |   |     |-ImplicitCastExpr 0x28b8a80bdb0 <line:2268:32, col:55> 'const u64 *':'const u64 *' <NoOp>
|   |   |     | `-ImplicitCastExpr 0x28b8a80bd98 <col:32, col:55> 'u64 *' <ArrayToPointerDecay>
|   |   |     |   `-ArraySubscriptExpr 0x28b8a80b998 <col:32, col:55> 'smallfelem':'u64 [4]' lvalue
|   |   |     |     |-ImplicitCastExpr 0x28b8a80b980 <col:32, col:52> 'smallfelem *' <ArrayToPointerDecay>
|   |   |     |     | `-ArraySubscriptExpr 0x28b8a80b938 <col:32, col:52> 'smallfelem [3]' lvalue
|   |   |     |     |   |-ImplicitCastExpr 0x28b8a80b908 <col:32, col:49> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |     |     |   | `-ArraySubscriptExpr 0x28b8a80b8c8 <col:32, col:49> 'smallfelem [16][3]' lvalue
|   |   |     |     |   |   |-ImplicitCastExpr 0x28b8a80b8b0 <col:32, col:37> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   |     |     |   |   | `-MemberExpr 0x28b8a80b858 <col:32, col:37> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x28b8a7fb638
|   |   |     |     |   |   |   `-ImplicitCastExpr 0x28b8a80b840 <col:32> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   |     |     |   |   |     `-DeclRefExpr 0x28b8a80b820 <col:32> 'NISTP256_PRE_COMP *' lvalue Var 0x28b8a81a960 'pre' 'NISTP256_PRE_COMP *'
|   |   |     |     |   |   `-IntegerLiteral 0x28b8a80b888 <col:48> 'int' 1
|   |   |     |     |   `-ImplicitCastExpr 0x28b8a80b920 <col:51> 'int' <LValueToRValue>
|   |   |     |     |     `-DeclRefExpr 0x28b8a80b8e8 <col:51> 'int' lvalue Var 0x28b8a81aa98 'i' 'int'
|   |   |     |     `-IntegerLiteral 0x28b8a80b958 <col:54> 'int' 0
|   |   |     |-ImplicitCastExpr 0x28b8a80bde0 <line:2269:32, col:55> 'const u64 *':'const u64 *' <NoOp>
|   |   |     | `-ImplicitCastExpr 0x28b8a80bdc8 <col:32, col:55> 'u64 *' <ArrayToPointerDecay>
|   |   |     |   `-ArraySubscriptExpr 0x28b8a80bb30 <col:32, col:55> 'smallfelem':'u64 [4]' lvalue
|   |   |     |     |-ImplicitCastExpr 0x28b8a80bb18 <col:32, col:52> 'smallfelem *' <ArrayToPointerDecay>
|   |   |     |     | `-ArraySubscriptExpr 0x28b8a80bad0 <col:32, col:52> 'smallfelem [3]' lvalue
|   |   |     |     |   |-ImplicitCastExpr 0x28b8a80baa0 <col:32, col:49> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |     |     |   | `-ArraySubscriptExpr 0x28b8a80ba60 <col:32, col:49> 'smallfelem [16][3]' lvalue
|   |   |     |     |   |   |-ImplicitCastExpr 0x28b8a80ba48 <col:32, col:37> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   |     |     |   |   | `-MemberExpr 0x28b8a80b9f0 <col:32, col:37> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x28b8a7fb638
|   |   |     |     |   |   |   `-ImplicitCastExpr 0x28b8a80b9d8 <col:32> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   |     |     |   |   |     `-DeclRefExpr 0x28b8a80b9b8 <col:32> 'NISTP256_PRE_COMP *' lvalue Var 0x28b8a81a960 'pre' 'NISTP256_PRE_COMP *'
|   |   |     |     |   |   `-IntegerLiteral 0x28b8a80ba20 <col:48> 'int' 1
|   |   |     |     |   `-ImplicitCastExpr 0x28b8a80bab8 <col:51> 'int' <LValueToRValue>
|   |   |     |     |     `-DeclRefExpr 0x28b8a80ba80 <col:51> 'int' lvalue Var 0x28b8a81aa98 'i' 'int'
|   |   |     |     `-IntegerLiteral 0x28b8a80baf0 <col:54> 'int' 1
|   |   |     `-ImplicitCastExpr 0x28b8a80be10 <line:2270:32, col:55> 'const u64 *':'const u64 *' <NoOp>
|   |   |       `-ImplicitCastExpr 0x28b8a80bdf8 <col:32, col:55> 'u64 *' <ArrayToPointerDecay>
|   |   |         `-ArraySubscriptExpr 0x28b8a80bcc8 <col:32, col:55> 'smallfelem':'u64 [4]' lvalue
|   |   |           |-ImplicitCastExpr 0x28b8a80bcb0 <col:32, col:52> 'smallfelem *' <ArrayToPointerDecay>
|   |   |           | `-ArraySubscriptExpr 0x28b8a80bc68 <col:32, col:52> 'smallfelem [3]' lvalue
|   |   |           |   |-ImplicitCastExpr 0x28b8a80bc38 <col:32, col:49> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |           |   | `-ArraySubscriptExpr 0x28b8a80bbf8 <col:32, col:49> 'smallfelem [16][3]' lvalue
|   |   |           |   |   |-ImplicitCastExpr 0x28b8a80bbe0 <col:32, col:37> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   |           |   |   | `-MemberExpr 0x28b8a80bb88 <col:32, col:37> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x28b8a7fb638
|   |   |           |   |   |   `-ImplicitCastExpr 0x28b8a80bb70 <col:32> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   |           |   |   |     `-DeclRefExpr 0x28b8a80bb50 <col:32> 'NISTP256_PRE_COMP *' lvalue Var 0x28b8a81a960 'pre' 'NISTP256_PRE_COMP *'
|   |   |           |   |   `-IntegerLiteral 0x28b8a80bbb8 <col:48> 'int' 1
|   |   |           |   `-ImplicitCastExpr 0x28b8a80bc50 <col:51> 'int' <LValueToRValue>
|   |   |           |     `-DeclRefExpr 0x28b8a80bc18 <col:51> 'int' lvalue Var 0x28b8a81aa98 'i' 'int'
|   |   |           `-IntegerLiteral 0x28b8a80bc88 <col:54> 'int' 2
|   |   |-IfStmt 0x28b8a80bf00 <line:2272:9, line:2273:13>
|   |   | |-BinaryOperator 0x28b8a80bed8 <line:2272:13, col:18> 'int' '=='
|   |   | | |-ImplicitCastExpr 0x28b8a80bec0 <col:13> 'int' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x28b8a80be78 <col:13> 'int' lvalue Var 0x28b8a81aa98 'i' 'int'
|   |   | | `-IntegerLiteral 0x28b8a80be98 <col:18> 'int' 8
|   |   | `-BreakStmt 0x28b8a80bef8 <line:2273:13>
|   |   |-CallExpr 0x28b8a80c9b8 <line:2274:9, line:2278:52> 'void'
|   |   | |-ImplicitCastExpr 0x28b8a80c9a0 <line:2274:9> 'void (*)(u64 *, u64 *, u64 *, const u64 *, const u64 *, const u64 *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x28b8a80bf18 <col:9> 'void (u64 *, u64 *, u64 *, const u64 *, const u64 *, const u64 *)' Function 0x28b8a703228 'point_double_small' 'void (u64 *, u64 *, u64 *, const u64 *, const u64 *, const u64 *)'
|   |   | |-ImplicitCastExpr 0x28b8a80ca08 <col:28, col:55> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x28b8a80c0f8 <col:28, col:55> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x28b8a80c0e0 <col:28, col:52> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x28b8a80c098 <col:28, col:52> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x28b8a80c080 <col:28, col:45> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x28b8a80bfe0 <col:28, col:45> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x28b8a80bfc8 <col:28, col:33> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x28b8a80bf70 <col:28, col:33> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x28b8a7fb638
|   |   | |   |   |   |   `-ImplicitCastExpr 0x28b8a80bf58 <col:28> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x28b8a80bf38 <col:28> 'NISTP256_PRE_COMP *' lvalue Var 0x28b8a81a960 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-IntegerLiteral 0x28b8a80bfa0 <col:44> 'int' 0
|   |   | |   |   `-BinaryOperator 0x28b8a80c060 <col:47, col:51> 'int' '*'
|   |   | |   |     |-IntegerLiteral 0x28b8a80c000 <col:47> 'int' 2
|   |   | |   |     `-ImplicitCastExpr 0x28b8a80c048 <col:51> 'int' <LValueToRValue>
|   |   | |   |       `-DeclRefExpr 0x28b8a80c028 <col:51> 'int' lvalue Var 0x28b8a81aa98 'i' 'int'
|   |   | |   `-IntegerLiteral 0x28b8a80c0b8 <col:54> 'int' 0
|   |   | |-ImplicitCastExpr 0x28b8a80ca20 <line:2275:28, col:55> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x28b8a80c2d8 <col:28, col:55> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x28b8a80c2c0 <col:28, col:52> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x28b8a80c278 <col:28, col:52> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x28b8a80c260 <col:28, col:45> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x28b8a80c1c0 <col:28, col:45> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x28b8a80c1a8 <col:28, col:33> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x28b8a80c150 <col:28, col:33> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x28b8a7fb638
|   |   | |   |   |   |   `-ImplicitCastExpr 0x28b8a80c138 <col:28> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x28b8a80c118 <col:28> 'NISTP256_PRE_COMP *' lvalue Var 0x28b8a81a960 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-IntegerLiteral 0x28b8a80c180 <col:44> 'int' 0
|   |   | |   |   `-BinaryOperator 0x28b8a80c240 <col:47, col:51> 'int' '*'
|   |   | |   |     |-IntegerLiteral 0x28b8a80c1e0 <col:47> 'int' 2
|   |   | |   |     `-ImplicitCastExpr 0x28b8a80c228 <col:51> 'int' <LValueToRValue>
|   |   | |   |       `-DeclRefExpr 0x28b8a80c208 <col:51> 'int' lvalue Var 0x28b8a81aa98 'i' 'int'
|   |   | |   `-IntegerLiteral 0x28b8a80c298 <col:54> 'int' 1
|   |   | |-ImplicitCastExpr 0x28b8a80ca38 <line:2276:28, col:55> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x28b8a80c4b8 <col:28, col:55> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x28b8a80c4a0 <col:28, col:52> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x28b8a80c458 <col:28, col:52> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x28b8a80c440 <col:28, col:45> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x28b8a80c3a0 <col:28, col:45> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x28b8a80c388 <col:28, col:33> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x28b8a80c330 <col:28, col:33> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x28b8a7fb638
|   |   | |   |   |   |   `-ImplicitCastExpr 0x28b8a80c318 <col:28> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x28b8a80c2f8 <col:28> 'NISTP256_PRE_COMP *' lvalue Var 0x28b8a81a960 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-IntegerLiteral 0x28b8a80c360 <col:44> 'int' 0
|   |   | |   |   `-BinaryOperator 0x28b8a80c420 <col:47, col:51> 'int' '*'
|   |   | |   |     |-IntegerLiteral 0x28b8a80c3c0 <col:47> 'int' 2
|   |   | |   |     `-ImplicitCastExpr 0x28b8a80c408 <col:51> 'int' <LValueToRValue>
|   |   | |   |       `-DeclRefExpr 0x28b8a80c3e8 <col:51> 'int' lvalue Var 0x28b8a81aa98 'i' 'int'
|   |   | |   `-IntegerLiteral 0x28b8a80c478 <col:54> 'int' 2
|   |   | |-ImplicitCastExpr 0x28b8a80ca68 <line:2277:28, col:51> 'const u64 *':'const u64 *' <NoOp>
|   |   | | `-ImplicitCastExpr 0x28b8a80ca50 <col:28, col:51> 'u64 *' <ArrayToPointerDecay>
|   |   | |   `-ArraySubscriptExpr 0x28b8a80c650 <col:28, col:51> 'smallfelem':'u64 [4]' lvalue
|   |   | |     |-ImplicitCastExpr 0x28b8a80c638 <col:28, col:48> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |     | `-ArraySubscriptExpr 0x28b8a80c5f0 <col:28, col:48> 'smallfelem [3]' lvalue
|   |   | |     |   |-ImplicitCastExpr 0x28b8a80c5c0 <col:28, col:45> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |     |   | `-ArraySubscriptExpr 0x28b8a80c580 <col:28, col:45> 'smallfelem [16][3]' lvalue
|   |   | |     |   |   |-ImplicitCastExpr 0x28b8a80c568 <col:28, col:33> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |     |   |   | `-MemberExpr 0x28b8a80c510 <col:28, col:33> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x28b8a7fb638
|   |   | |     |   |   |   `-ImplicitCastExpr 0x28b8a80c4f8 <col:28> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |     |   |   |     `-DeclRefExpr 0x28b8a80c4d8 <col:28> 'NISTP256_PRE_COMP *' lvalue Var 0x28b8a81a960 'pre' 'NISTP256_PRE_COMP *'
|   |   | |     |   |   `-IntegerLiteral 0x28b8a80c540 <col:44> 'int' 1
|   |   | |     |   `-ImplicitCastExpr 0x28b8a80c5d8 <col:47> 'int' <LValueToRValue>
|   |   | |     |     `-DeclRefExpr 0x28b8a80c5a0 <col:47> 'int' lvalue Var 0x28b8a81aa98 'i' 'int'
|   |   | |     `-IntegerLiteral 0x28b8a80c610 <col:50> 'int' 0
|   |   | |-ImplicitCastExpr 0x28b8a80ca98 <col:54, col:77> 'const u64 *':'const u64 *' <NoOp>
|   |   | | `-ImplicitCastExpr 0x28b8a80ca80 <col:54, col:77> 'u64 *' <ArrayToPointerDecay>
|   |   | |   `-ArraySubscriptExpr 0x28b8a80c7e8 <col:54, col:77> 'smallfelem':'u64 [4]' lvalue
|   |   | |     |-ImplicitCastExpr 0x28b8a80c7d0 <col:54, col:74> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |     | `-ArraySubscriptExpr 0x28b8a80c788 <col:54, col:74> 'smallfelem [3]' lvalue
|   |   | |     |   |-ImplicitCastExpr 0x28b8a80c758 <col:54, col:71> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |     |   | `-ArraySubscriptExpr 0x28b8a80c718 <col:54, col:71> 'smallfelem [16][3]' lvalue
|   |   | |     |   |   |-ImplicitCastExpr 0x28b8a80c700 <col:54, col:59> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |     |   |   | `-MemberExpr 0x28b8a80c6a8 <col:54, col:59> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x28b8a7fb638
|   |   | |     |   |   |   `-ImplicitCastExpr 0x28b8a80c690 <col:54> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |     |   |   |     `-DeclRefExpr 0x28b8a80c670 <col:54> 'NISTP256_PRE_COMP *' lvalue Var 0x28b8a81a960 'pre' 'NISTP256_PRE_COMP *'
|   |   | |     |   |   `-IntegerLiteral 0x28b8a80c6d8 <col:70> 'int' 1
|   |   | |     |   `-ImplicitCastExpr 0x28b8a80c770 <col:73> 'int' <LValueToRValue>
|   |   | |     |     `-DeclRefExpr 0x28b8a80c738 <col:73> 'int' lvalue Var 0x28b8a81aa98 'i' 'int'
|   |   | |     `-IntegerLiteral 0x28b8a80c7a8 <col:76> 'int' 1
|   |   | `-ImplicitCastExpr 0x28b8a80cac8 <line:2278:28, col:51> 'const u64 *':'const u64 *' <NoOp>
|   |   |   `-ImplicitCastExpr 0x28b8a80cab0 <col:28, col:51> 'u64 *' <ArrayToPointerDecay>
|   |   |     `-ArraySubscriptExpr 0x28b8a80c980 <col:28, col:51> 'smallfelem':'u64 [4]' lvalue
|   |   |       |-ImplicitCastExpr 0x28b8a80c968 <col:28, col:48> 'smallfelem *' <ArrayToPointerDecay>
|   |   |       | `-ArraySubscriptExpr 0x28b8a80c920 <col:28, col:48> 'smallfelem [3]' lvalue
|   |   |       |   |-ImplicitCastExpr 0x28b8a80c8f0 <col:28, col:45> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |       |   | `-ArraySubscriptExpr 0x28b8a80c8b0 <col:28, col:45> 'smallfelem [16][3]' lvalue
|   |   |       |   |   |-ImplicitCastExpr 0x28b8a80c898 <col:28, col:33> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   |       |   |   | `-MemberExpr 0x28b8a80c840 <col:28, col:33> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x28b8a7fb638
|   |   |       |   |   |   `-ImplicitCastExpr 0x28b8a80c828 <col:28> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   |       |   |   |     `-DeclRefExpr 0x28b8a80c808 <col:28> 'NISTP256_PRE_COMP *' lvalue Var 0x28b8a81a960 'pre' 'NISTP256_PRE_COMP *'
|   |   |       |   |   `-IntegerLiteral 0x28b8a80c870 <col:44> 'int' 1
|   |   |       |   `-ImplicitCastExpr 0x28b8a80c908 <col:47> 'int' <LValueToRValue>
|   |   |       |     `-DeclRefExpr 0x28b8a80c8d0 <col:47> 'int' lvalue Var 0x28b8a81aa98 'i' 'int'
|   |   |       `-IntegerLiteral 0x28b8a80c940 <col:50> 'int' 2
|   |   `-ForStmt 0x28b8a81b948 <line:2279:9, line:2286:9>
|   |     |-BinaryOperator 0x28b8a80cb28 <line:2279:14, col:18> 'int' '='
|   |     | |-DeclRefExpr 0x28b8a80cae0 <col:14> 'int' lvalue Var 0x28b8a81ab18 'j' 'int'
|   |     | `-IntegerLiteral 0x28b8a80cb00 <col:18> 'int' 0
|   |     |-<<<NULL>>>
|   |     |-BinaryOperator 0x28b8a80cba8 <col:21, col:25> 'int' '<'
|   |     | |-ImplicitCastExpr 0x28b8a80cb90 <col:21> 'int' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x28b8a80cb48 <col:21> 'int' lvalue Var 0x28b8a81ab18 'j' 'int'
|   |     | `-IntegerLiteral 0x28b8a80cb68 <col:25> 'int' 31
|   |     |-UnaryOperator 0x28b8a80cbe8 <col:29, col:31> 'int' prefix '++'
|   |     | `-DeclRefExpr 0x28b8a80cbc8 <col:31> 'int' lvalue Var 0x28b8a81ab18 'j' 'int'
|   |     `-CompoundStmt 0x28b8a81b930 <col:34, line:2286:9>
|   |       `-CallExpr 0x28b8a81b808 <line:2280:13, line:2285:60> 'void'
|   |         |-ImplicitCastExpr 0x28b8a81b7f0 <line:2280:13> 'void (*)(u64 *, u64 *, u64 *, const u64 *, const u64 *, const u64 *)' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x28b8a80cc00 <col:13> 'void (u64 *, u64 *, u64 *, const u64 *, const u64 *, const u64 *)' Function 0x28b8a703228 'point_double_small' 'void (u64 *, u64 *, u64 *, const u64 *, const u64 *, const u64 *)'
|   |         |-ImplicitCastExpr 0x28b8a81b858 <col:32, col:59> 'u64 *' <ArrayToPointerDecay>
|   |         | `-ArraySubscriptExpr 0x28b8a80cde0 <col:32, col:59> 'smallfelem':'u64 [4]' lvalue
|   |         |   |-ImplicitCastExpr 0x28b8a80cdc8 <col:32, col:56> 'smallfelem *' <ArrayToPointerDecay>
|   |         |   | `-ArraySubscriptExpr 0x28b8a80cd80 <col:32, col:56> 'smallfelem [3]' lvalue
|   |         |   |   |-ImplicitCastExpr 0x28b8a80cd68 <col:32, col:49> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |         |   |   | `-ArraySubscriptExpr 0x28b8a80ccc8 <col:32, col:49> 'smallfelem [16][3]' lvalue
|   |         |   |   |   |-ImplicitCastExpr 0x28b8a80ccb0 <col:32, col:37> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |         |   |   |   | `-MemberExpr 0x28b8a80cc58 <col:32, col:37> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x28b8a7fb638
|   |         |   |   |   |   `-ImplicitCastExpr 0x28b8a80cc40 <col:32> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |         |   |   |   |     `-DeclRefExpr 0x28b8a80cc20 <col:32> 'NISTP256_PRE_COMP *' lvalue Var 0x28b8a81a960 'pre' 'NISTP256_PRE_COMP *'
|   |         |   |   |   `-IntegerLiteral 0x28b8a80cc88 <col:48> 'int' 0
|   |         |   |   `-BinaryOperator 0x28b8a80cd48 <col:51, col:55> 'int' '*'
|   |         |   |     |-IntegerLiteral 0x28b8a80cce8 <col:51> 'int' 2
|   |         |   |     `-ImplicitCastExpr 0x28b8a80cd30 <col:55> 'int' <LValueToRValue>
|   |         |   |       `-DeclRefExpr 0x28b8a80cd10 <col:55> 'int' lvalue Var 0x28b8a81aa98 'i' 'int'
|   |         |   `-IntegerLiteral 0x28b8a80cda0 <col:58> 'int' 0
|   |         |-ImplicitCastExpr 0x28b8a81b870 <line:2281:32, col:59> 'u64 *' <ArrayToPointerDecay>
|   |         | `-ArraySubscriptExpr 0x28b8a81b050 <col:32, col:59> 'smallfelem':'u64 [4]' lvalue
|   |         |   |-ImplicitCastExpr 0x28b8a80cfa8 <col:32, col:56> 'smallfelem *' <ArrayToPointerDecay>
|   |         |   | `-ArraySubscriptExpr 0x28b8a80cf60 <col:32, col:56> 'smallfelem [3]' lvalue
|   |         |   |   |-ImplicitCastExpr 0x28b8a80cf48 <col:32, col:49> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |         |   |   | `-ArraySubscriptExpr 0x28b8a80cea8 <col:32, col:49> 'smallfelem [16][3]' lvalue
|   |         |   |   |   |-ImplicitCastExpr 0x28b8a80ce90 <col:32, col:37> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |         |   |   |   | `-MemberExpr 0x28b8a80ce38 <col:32, col:37> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x28b8a7fb638
|   |         |   |   |   |   `-ImplicitCastExpr 0x28b8a80ce20 <col:32> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |         |   |   |   |     `-DeclRefExpr 0x28b8a80ce00 <col:32> 'NISTP256_PRE_COMP *' lvalue Var 0x28b8a81a960 'pre' 'NISTP256_PRE_COMP *'
|   |         |   |   |   `-IntegerLiteral 0x28b8a80ce68 <col:48> 'int' 0
|   |         |   |   `-BinaryOperator 0x28b8a80cf28 <col:51, col:55> 'int' '*'
|   |         |   |     |-IntegerLiteral 0x28b8a80cec8 <col:51> 'int' 2
|   |         |   |     `-ImplicitCastExpr 0x28b8a80cf10 <col:55> 'int' <LValueToRValue>
|   |         |   |       `-DeclRefExpr 0x28b8a80cef0 <col:55> 'int' lvalue Var 0x28b8a81aa98 'i' 'int'
|   |         |   `-IntegerLiteral 0x28b8a80cf80 <col:58> 'int' 1
|   |         |-ImplicitCastExpr 0x28b8a81b888 <line:2282:32, col:59> 'u64 *' <ArrayToPointerDecay>
|   |         | `-ArraySubscriptExpr 0x28b8a81b230 <col:32, col:59> 'smallfelem':'u64 [4]' lvalue
|   |         |   |-ImplicitCastExpr 0x28b8a81b218 <col:32, col:56> 'smallfelem *' <ArrayToPointerDecay>
|   |         |   | `-ArraySubscriptExpr 0x28b8a81b1d0 <col:32, col:56> 'smallfelem [3]' lvalue
|   |         |   |   |-ImplicitCastExpr 0x28b8a81b1b8 <col:32, col:49> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |         |   |   | `-ArraySubscriptExpr 0x28b8a81b118 <col:32, col:49> 'smallfelem [16][3]' lvalue
|   |         |   |   |   |-ImplicitCastExpr 0x28b8a81b100 <col:32, col:37> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |         |   |   |   | `-MemberExpr 0x28b8a81b0a8 <col:32, col:37> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x28b8a7fb638
|   |         |   |   |   |   `-ImplicitCastExpr 0x28b8a81b090 <col:32> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |         |   |   |   |     `-DeclRefExpr 0x28b8a81b070 <col:32> 'NISTP256_PRE_COMP *' lvalue Var 0x28b8a81a960 'pre' 'NISTP256_PRE_COMP *'
|   |         |   |   |   `-IntegerLiteral 0x28b8a81b0d8 <col:48> 'int' 0
|   |         |   |   `-BinaryOperator 0x28b8a81b198 <col:51, col:55> 'int' '*'
|   |         |   |     |-IntegerLiteral 0x28b8a81b138 <col:51> 'int' 2
|   |         |   |     `-ImplicitCastExpr 0x28b8a81b180 <col:55> 'int' <LValueToRValue>
|   |         |   |       `-DeclRefExpr 0x28b8a81b160 <col:55> 'int' lvalue Var 0x28b8a81aa98 'i' 'int'
|   |         |   `-IntegerLiteral 0x28b8a81b1f0 <col:58> 'int' 2
|   |         |-ImplicitCastExpr 0x28b8a81b8b8 <line:2283:32, col:59> 'const u64 *':'const u64 *' <NoOp>
|   |         | `-ImplicitCastExpr 0x28b8a81b8a0 <col:32, col:59> 'u64 *' <ArrayToPointerDecay>
|   |         |   `-ArraySubscriptExpr 0x28b8a81b410 <col:32, col:59> 'smallfelem':'u64 [4]' lvalue
|   |         |     |-ImplicitCastExpr 0x28b8a81b3f8 <col:32, col:56> 'smallfelem *' <ArrayToPointerDecay>
|   |         |     | `-ArraySubscriptExpr 0x28b8a81b3b0 <col:32, col:56> 'smallfelem [3]' lvalue
|   |         |     |   |-ImplicitCastExpr 0x28b8a81b398 <col:32, col:49> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |         |     |   | `-ArraySubscriptExpr 0x28b8a81b2f8 <col:32, col:49> 'smallfelem [16][3]' lvalue
|   |         |     |   |   |-ImplicitCastExpr 0x28b8a81b2e0 <col:32, col:37> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |         |     |   |   | `-MemberExpr 0x28b8a81b288 <col:32, col:37> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x28b8a7fb638
|   |         |     |   |   |   `-ImplicitCastExpr 0x28b8a81b270 <col:32> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |         |     |   |   |     `-DeclRefExpr 0x28b8a81b250 <col:32> 'NISTP256_PRE_COMP *' lvalue Var 0x28b8a81a960 'pre' 'NISTP256_PRE_COMP *'
|   |         |     |   |   `-IntegerLiteral 0x28b8a81b2b8 <col:48> 'int' 0
|   |         |     |   `-BinaryOperator 0x28b8a81b378 <col:51, col:55> 'int' '*'
|   |         |     |     |-IntegerLiteral 0x28b8a81b318 <col:51> 'int' 2
|   |         |     |     `-ImplicitCastExpr 0x28b8a81b360 <col:55> 'int' <LValueToRValue>
|   |         |     |       `-DeclRefExpr 0x28b8a81b340 <col:55> 'int' lvalue Var 0x28b8a81aa98 'i' 'int'
|   |         |     `-IntegerLiteral 0x28b8a81b3d0 <col:58> 'int' 0
|   |         |-ImplicitCastExpr 0x28b8a81b8e8 <line:2284:32, col:59> 'const u64 *':'const u64 *' <NoOp>
|   |         | `-ImplicitCastExpr 0x28b8a81b8d0 <col:32, col:59> 'u64 *' <ArrayToPointerDecay>
|   |         |   `-ArraySubscriptExpr 0x28b8a81b5f0 <col:32, col:59> 'smallfelem':'u64 [4]' lvalue
|   |         |     |-ImplicitCastExpr 0x28b8a81b5d8 <col:32, col:56> 'smallfelem *' <ArrayToPointerDecay>
|   |         |     | `-ArraySubscriptExpr 0x28b8a81b590 <col:32, col:56> 'smallfelem [3]' lvalue
|   |         |     |   |-ImplicitCastExpr 0x28b8a81b578 <col:32, col:49> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |         |     |   | `-ArraySubscriptExpr 0x28b8a81b4d8 <col:32, col:49> 'smallfelem [16][3]' lvalue
|   |         |     |   |   |-ImplicitCastExpr 0x28b8a81b4c0 <col:32, col:37> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |         |     |   |   | `-MemberExpr 0x28b8a81b468 <col:32, col:37> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x28b8a7fb638
|   |         |     |   |   |   `-ImplicitCastExpr 0x28b8a81b450 <col:32> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |         |     |   |   |     `-DeclRefExpr 0x28b8a81b430 <col:32> 'NISTP256_PRE_COMP *' lvalue Var 0x28b8a81a960 'pre' 'NISTP256_PRE_COMP *'
|   |         |     |   |   `-IntegerLiteral 0x28b8a81b498 <col:48> 'int' 0
|   |         |     |   `-BinaryOperator 0x28b8a81b558 <col:51, col:55> 'int' '*'
|   |         |     |     |-IntegerLiteral 0x28b8a81b4f8 <col:51> 'int' 2
|   |         |     |     `-ImplicitCastExpr 0x28b8a81b540 <col:55> 'int' <LValueToRValue>
|   |         |     |       `-DeclRefExpr 0x28b8a81b520 <col:55> 'int' lvalue Var 0x28b8a81aa98 'i' 'int'
|   |         |     `-IntegerLiteral 0x28b8a81b5b0 <col:58> 'int' 1
|   |         `-ImplicitCastExpr 0x28b8a81b918 <line:2285:32, col:59> 'const u64 *':'const u64 *' <NoOp>
|   |           `-ImplicitCastExpr 0x28b8a81b900 <col:32, col:59> 'u64 *' <ArrayToPointerDecay>
|   |             `-ArraySubscriptExpr 0x28b8a81b7d0 <col:32, col:59> 'smallfelem':'u64 [4]' lvalue
|   |               |-ImplicitCastExpr 0x28b8a81b7b8 <col:32, col:56> 'smallfelem *' <ArrayToPointerDecay>
|   |               | `-ArraySubscriptExpr 0x28b8a81b770 <col:32, col:56> 'smallfelem [3]' lvalue
|   |               |   |-ImplicitCastExpr 0x28b8a81b758 <col:32, col:49> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |               |   | `-ArraySubscriptExpr 0x28b8a81b6b8 <col:32, col:49> 'smallfelem [16][3]' lvalue
|   |               |   |   |-ImplicitCastExpr 0x28b8a81b6a0 <col:32, col:37> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |               |   |   | `-MemberExpr 0x28b8a81b648 <col:32, col:37> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x28b8a7fb638
|   |               |   |   |   `-ImplicitCastExpr 0x28b8a81b630 <col:32> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |               |   |   |     `-DeclRefExpr 0x28b8a81b610 <col:32> 'NISTP256_PRE_COMP *' lvalue Var 0x28b8a81a960 'pre' 'NISTP256_PRE_COMP *'
|   |               |   |   `-IntegerLiteral 0x28b8a81b678 <col:48> 'int' 0
|   |               |   `-BinaryOperator 0x28b8a81b738 <col:51, col:55> 'int' '*'
|   |               |     |-IntegerLiteral 0x28b8a81b6d8 <col:51> 'int' 2
|   |               |     `-ImplicitCastExpr 0x28b8a81b720 <col:55> 'int' <LValueToRValue>
|   |               |       `-DeclRefExpr 0x28b8a81b700 <col:55> 'int' lvalue Var 0x28b8a81aa98 'i' 'int'
|   |               `-IntegerLiteral 0x28b8a81b790 <col:58> 'int' 2
|   |-ForStmt 0x28b8a8212a0 <line:2288:5, line:2330:5>
|   | |-BinaryOperator 0x28b8a81ba38 <line:2288:10, col:14> 'int' '='
|   | | |-DeclRefExpr 0x28b8a81b9f0 <col:10> 'int' lvalue Var 0x28b8a81aa98 'i' 'int'
|   | | `-IntegerLiteral 0x28b8a81ba10 <col:14> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x28b8a81bab8 <col:17, col:21> 'int' '<'
|   | | |-ImplicitCastExpr 0x28b8a81baa0 <col:17> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28b8a81ba58 <col:17> 'int' lvalue Var 0x28b8a81aa98 'i' 'int'
|   | | `-IntegerLiteral 0x28b8a81ba78 <col:21> 'int' 2
|   | |-UnaryOperator 0x28b8a81baf8 <col:24, col:25> 'int' postfix '++'
|   | | `-DeclRefExpr 0x28b8a81bad8 <col:24> 'int' lvalue Var 0x28b8a81aa98 'i' 'int'
|   | `-CompoundStmt 0x28b8a821260 <col:29, line:2330:5>
|   |   |-CallExpr 0x28b8a81be38 <line:2290:9, col:71> 'void *'
|   |   | |-ImplicitCastExpr 0x28b8a81be20 <col:9> 'void *(*)(void *, int, unsigned long long)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x28b8a81bb10 <col:9> 'void *(void *, int, unsigned long long)' Function 0x28b8a5c2320 'memset' 'void *(void *, int, unsigned long long)'
|   |   | |-ImplicitCastExpr 0x28b8a81be88 <col:16, col:36> 'void *' <BitCast>
|   |   | | `-ImplicitCastExpr 0x28b8a81be70 <col:16, col:36> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   `-ArraySubscriptExpr 0x28b8a81bc48 <col:16, col:36> 'smallfelem [3]' lvalue
|   |   | |     |-ImplicitCastExpr 0x28b8a81bc30 <col:16, col:33> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |     | `-ArraySubscriptExpr 0x28b8a81bbe8 <col:16, col:33> 'smallfelem [16][3]' lvalue
|   |   | |     |   |-ImplicitCastExpr 0x28b8a81bbb8 <col:16, col:21> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |     |   | `-MemberExpr 0x28b8a81bb68 <col:16, col:21> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x28b8a7fb638
|   |   | |     |   |   `-ImplicitCastExpr 0x28b8a81bb50 <col:16> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |     |   |     `-DeclRefExpr 0x28b8a81bb30 <col:16> 'NISTP256_PRE_COMP *' lvalue Var 0x28b8a81a960 'pre' 'NISTP256_PRE_COMP *'
|   |   | |     |   `-ImplicitCastExpr 0x28b8a81bbd0 <col:32> 'int' <LValueToRValue>
|   |   | |     |     `-DeclRefExpr 0x28b8a81bb98 <col:32> 'int' lvalue Var 0x28b8a81aa98 'i' 'int'
|   |   | |     `-IntegerLiteral 0x28b8a81bc08 <col:35> 'int' 0
|   |   | |-IntegerLiteral 0x28b8a81bc68 <col:39> 'int' 0
|   |   | `-UnaryExprOrTypeTraitExpr 0x28b8a81bde8 <col:42, col:70> 'unsigned long long' sizeof
|   |   |   `-ParenExpr 0x28b8a81bdc8 <col:48, col:70> 'smallfelem [3]' lvalue
|   |   |     `-ArraySubscriptExpr 0x28b8a81bda8 <col:49, col:69> 'smallfelem [3]' lvalue
|   |   |       |-ImplicitCastExpr 0x28b8a81bd90 <col:49, col:66> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |       | `-ArraySubscriptExpr 0x28b8a81bd48 <col:49, col:66> 'smallfelem [16][3]' lvalue
|   |   |       |   |-ImplicitCastExpr 0x28b8a81bd18 <col:49, col:54> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   |       |   | `-MemberExpr 0x28b8a81bcc8 <col:49, col:54> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x28b8a7fb638 non_odr_use_unevaluated
|   |   |       |   |   `-ImplicitCastExpr 0x28b8a81bcb0 <col:49> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   |       |   |     `-DeclRefExpr 0x28b8a81bc90 <col:49> 'NISTP256_PRE_COMP *' lvalue Var 0x28b8a81a960 'pre' 'NISTP256_PRE_COMP *' non_odr_use_unevaluated
|   |   |       |   `-ImplicitCastExpr 0x28b8a81bd30 <col:65> 'int' <LValueToRValue>
|   |   |       |     `-DeclRefExpr 0x28b8a81bcf8 <col:65> 'int' lvalue Var 0x28b8a81aa98 'i' 'int' non_odr_use_unevaluated
|   |   |       `-IntegerLiteral 0x28b8a81bd68 <col:68> 'int' 0
|   |   |-CallExpr 0x28b8a81cd30 <line:2293:9, line:2297:49> 'void'
|   |   | |-ImplicitCastExpr 0x28b8a81cd18 <line:2293:9> 'void (*)(u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x28b8a81bea0 <col:9> 'void (u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *)' Function 0x28b8a6f7a08 'point_add_small' 'void (u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *)'
|   |   | |-ImplicitCastExpr 0x28b8a81cd98 <col:25, col:48> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x28b8a81c038 <col:25, col:48> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x28b8a81c020 <col:25, col:45> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x28b8a81bfd8 <col:25, col:45> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x28b8a81bfc0 <col:25, col:42> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x28b8a81bf78 <col:25, col:42> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x28b8a81bf48 <col:25, col:30> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x28b8a81bef8 <col:25, col:30> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x28b8a7fb638
|   |   | |   |   |   |   `-ImplicitCastExpr 0x28b8a81bee0 <col:25> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x28b8a81bec0 <col:25> 'NISTP256_PRE_COMP *' lvalue Var 0x28b8a81a960 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x28b8a81bf60 <col:41> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x28b8a81bf28 <col:41> 'int' lvalue Var 0x28b8a81aa98 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x28b8a81bf98 <col:44> 'int' 6
|   |   | |   `-IntegerLiteral 0x28b8a81bff8 <col:47> 'int' 0
|   |   | |-ImplicitCastExpr 0x28b8a81cdb0 <col:51, col:74> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x28b8a81c1d0 <col:51, col:74> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x28b8a81c1b8 <col:51, col:71> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x28b8a81c170 <col:51, col:71> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x28b8a81c158 <col:51, col:68> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x28b8a81c110 <col:51, col:68> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x28b8a81c0e0 <col:51, col:56> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x28b8a81c090 <col:51, col:56> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x28b8a7fb638
|   |   | |   |   |   |   `-ImplicitCastExpr 0x28b8a81c078 <col:51> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x28b8a81c058 <col:51> 'NISTP256_PRE_COMP *' lvalue Var 0x28b8a81a960 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x28b8a81c0f8 <col:67> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x28b8a81c0c0 <col:67> 'int' lvalue Var 0x28b8a81aa98 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x28b8a81c130 <col:70> 'int' 6
|   |   | |   `-IntegerLiteral 0x28b8a81c190 <col:73> 'int' 1
|   |   | |-ImplicitCastExpr 0x28b8a81cdc8 <line:2294:25, col:48> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x28b8a81c368 <col:25, col:48> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x28b8a81c350 <col:25, col:45> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x28b8a81c308 <col:25, col:45> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x28b8a81c2f0 <col:25, col:42> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x28b8a81c2a8 <col:25, col:42> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x28b8a81c278 <col:25, col:30> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x28b8a81c228 <col:25, col:30> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x28b8a7fb638
|   |   | |   |   |   |   `-ImplicitCastExpr 0x28b8a81c210 <col:25> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x28b8a81c1f0 <col:25> 'NISTP256_PRE_COMP *' lvalue Var 0x28b8a81a960 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x28b8a81c290 <col:41> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x28b8a81c258 <col:41> 'int' lvalue Var 0x28b8a81aa98 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x28b8a81c2c8 <col:44> 'int' 6
|   |   | |   `-IntegerLiteral 0x28b8a81c328 <col:47> 'int' 2
|   |   | |-ImplicitCastExpr 0x28b8a81cde0 <col:51, col:74> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x28b8a81c500 <col:51, col:74> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x28b8a81c4e8 <col:51, col:71> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x28b8a81c4a0 <col:51, col:71> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x28b8a81c488 <col:51, col:68> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x28b8a81c440 <col:51, col:68> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x28b8a81c410 <col:51, col:56> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x28b8a81c3c0 <col:51, col:56> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x28b8a7fb638
|   |   | |   |   |   |   `-ImplicitCastExpr 0x28b8a81c3a8 <col:51> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x28b8a81c388 <col:51> 'NISTP256_PRE_COMP *' lvalue Var 0x28b8a81a960 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x28b8a81c428 <col:67> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x28b8a81c3f0 <col:67> 'int' lvalue Var 0x28b8a81aa98 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x28b8a81c460 <col:70> 'int' 4
|   |   | |   `-IntegerLiteral 0x28b8a81c4c0 <col:73> 'int' 0
|   |   | |-ImplicitCastExpr 0x28b8a81cdf8 <line:2295:25, col:48> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x28b8a81c698 <col:25, col:48> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x28b8a81c680 <col:25, col:45> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x28b8a81c638 <col:25, col:45> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x28b8a81c620 <col:25, col:42> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x28b8a81c5d8 <col:25, col:42> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x28b8a81c5a8 <col:25, col:30> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x28b8a81c558 <col:25, col:30> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x28b8a7fb638
|   |   | |   |   |   |   `-ImplicitCastExpr 0x28b8a81c540 <col:25> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x28b8a81c520 <col:25> 'NISTP256_PRE_COMP *' lvalue Var 0x28b8a81a960 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x28b8a81c5c0 <col:41> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x28b8a81c588 <col:41> 'int' lvalue Var 0x28b8a81aa98 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x28b8a81c5f8 <col:44> 'int' 4
|   |   | |   `-IntegerLiteral 0x28b8a81c658 <col:47> 'int' 1
|   |   | |-ImplicitCastExpr 0x28b8a81ce10 <col:51, col:74> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x28b8a81c830 <col:51, col:74> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x28b8a81c818 <col:51, col:71> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x28b8a81c7d0 <col:51, col:71> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x28b8a81c7b8 <col:51, col:68> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x28b8a81c770 <col:51, col:68> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x28b8a81c740 <col:51, col:56> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x28b8a81c6f0 <col:51, col:56> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x28b8a7fb638
|   |   | |   |   |   |   `-ImplicitCastExpr 0x28b8a81c6d8 <col:51> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x28b8a81c6b8 <col:51> 'NISTP256_PRE_COMP *' lvalue Var 0x28b8a81a960 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x28b8a81c758 <col:67> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x28b8a81c720 <col:67> 'int' lvalue Var 0x28b8a81aa98 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x28b8a81c790 <col:70> 'int' 4
|   |   | |   `-IntegerLiteral 0x28b8a81c7f0 <col:73> 'int' 2
|   |   | |-ImplicitCastExpr 0x28b8a81ce28 <line:2296:25, col:48> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x28b8a81c9c8 <col:25, col:48> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x28b8a81c9b0 <col:25, col:45> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x28b8a81c968 <col:25, col:45> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x28b8a81c950 <col:25, col:42> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x28b8a81c908 <col:25, col:42> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x28b8a81c8d8 <col:25, col:30> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x28b8a81c888 <col:25, col:30> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x28b8a7fb638
|   |   | |   |   |   |   `-ImplicitCastExpr 0x28b8a81c870 <col:25> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x28b8a81c850 <col:25> 'NISTP256_PRE_COMP *' lvalue Var 0x28b8a81a960 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x28b8a81c8f0 <col:41> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x28b8a81c8b8 <col:41> 'int' lvalue Var 0x28b8a81aa98 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x28b8a81c928 <col:44> 'int' 2
|   |   | |   `-IntegerLiteral 0x28b8a81c988 <col:47> 'int' 0
|   |   | |-ImplicitCastExpr 0x28b8a81ce40 <col:51, col:74> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x28b8a81cb60 <col:51, col:74> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x28b8a81cb48 <col:51, col:71> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x28b8a81cb00 <col:51, col:71> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x28b8a81cae8 <col:51, col:68> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x28b8a81caa0 <col:51, col:68> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x28b8a81ca70 <col:51, col:56> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x28b8a81ca20 <col:51, col:56> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x28b8a7fb638
|   |   | |   |   |   |   `-ImplicitCastExpr 0x28b8a81ca08 <col:51> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x28b8a81c9e8 <col:51> 'NISTP256_PRE_COMP *' lvalue Var 0x28b8a81a960 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x28b8a81ca88 <col:67> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x28b8a81ca50 <col:67> 'int' lvalue Var 0x28b8a81aa98 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x28b8a81cac0 <col:70> 'int' 2
|   |   | |   `-IntegerLiteral 0x28b8a81cb20 <col:73> 'int' 1
|   |   | `-ImplicitCastExpr 0x28b8a81ce58 <line:2297:25, col:48> 'u64 *' <ArrayToPointerDecay>
|   |   |   `-ArraySubscriptExpr 0x28b8a81ccf8 <col:25, col:48> 'smallfelem':'u64 [4]' lvalue
|   |   |     |-ImplicitCastExpr 0x28b8a81cce0 <col:25, col:45> 'smallfelem *' <ArrayToPointerDecay>
|   |   |     | `-ArraySubscriptExpr 0x28b8a81cc98 <col:25, col:45> 'smallfelem [3]' lvalue
|   |   |     |   |-ImplicitCastExpr 0x28b8a81cc80 <col:25, col:42> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |     |   | `-ArraySubscriptExpr 0x28b8a81cc38 <col:25, col:42> 'smallfelem [16][3]' lvalue
|   |   |     |   |   |-ImplicitCastExpr 0x28b8a81cc08 <col:25, col:30> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   |     |   |   | `-MemberExpr 0x28b8a81cbb8 <col:25, col:30> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x28b8a7fb638
|   |   |     |   |   |   `-ImplicitCastExpr 0x28b8a81cba0 <col:25> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   |     |   |   |     `-DeclRefExpr 0x28b8a81cb80 <col:25> 'NISTP256_PRE_COMP *' lvalue Var 0x28b8a81a960 'pre' 'NISTP256_PRE_COMP *'
|   |   |     |   |   `-ImplicitCastExpr 0x28b8a81cc20 <col:41> 'int' <LValueToRValue>
|   |   |     |   |     `-DeclRefExpr 0x28b8a81cbe8 <col:41> 'int' lvalue Var 0x28b8a81aa98 'i' 'int'
|   |   |     |   `-IntegerLiteral 0x28b8a81cc58 <col:44> 'int' 2
|   |   |     `-IntegerLiteral 0x28b8a81ccb8 <col:47> 'int' 2
|   |   |-CallExpr 0x28b8a80dc98 <line:2299:9, line:2303:49> 'void'
|   |   | |-ImplicitCastExpr 0x28b8a80dc80 <line:2299:9> 'void (*)(u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x28b8a81ce70 <col:9> 'void (u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *)' Function 0x28b8a6f7a08 'point_add_small' 'void (u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *)'
|   |   | |-ImplicitCastExpr 0x28b8a80dd00 <col:25, col:49> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x28b8a81d008 <col:25, col:49> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x28b8a81cff0 <col:25, col:46> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x28b8a81cfa8 <col:25, col:46> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x28b8a81cf90 <col:25, col:42> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x28b8a81cf48 <col:25, col:42> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x28b8a81cf18 <col:25, col:30> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x28b8a81cec8 <col:25, col:30> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x28b8a7fb638
|   |   | |   |   |   |   `-ImplicitCastExpr 0x28b8a81ceb0 <col:25> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x28b8a81ce90 <col:25> 'NISTP256_PRE_COMP *' lvalue Var 0x28b8a81a960 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x28b8a81cf30 <col:41> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x28b8a81cef8 <col:41> 'int' lvalue Var 0x28b8a81aa98 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x28b8a81cf68 <col:44> 'int' 10
|   |   | |   `-IntegerLiteral 0x28b8a81cfc8 <col:48> 'int' 0
|   |   | |-ImplicitCastExpr 0x28b8a80dd18 <col:52, col:76> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x28b8a80d138 <col:52, col:76> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x28b8a80d120 <col:52, col:73> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x28b8a80d0d8 <col:52, col:73> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x28b8a80d0c0 <col:52, col:69> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x28b8a80d078 <col:52, col:69> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x28b8a80d048 <col:52, col:57> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x28b8a80cff8 <col:52, col:57> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x28b8a7fb638
|   |   | |   |   |   |   `-ImplicitCastExpr 0x28b8a80cfe0 <col:52> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x28b8a81d028 <col:52> 'NISTP256_PRE_COMP *' lvalue Var 0x28b8a81a960 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x28b8a80d060 <col:68> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x28b8a80d028 <col:68> 'int' lvalue Var 0x28b8a81aa98 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x28b8a80d098 <col:71> 'int' 10
|   |   | |   `-IntegerLiteral 0x28b8a80d0f8 <col:75> 'int' 1
|   |   | |-ImplicitCastExpr 0x28b8a80dd30 <line:2300:25, col:49> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x28b8a80d2d0 <col:25, col:49> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x28b8a80d2b8 <col:25, col:46> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x28b8a80d270 <col:25, col:46> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x28b8a80d258 <col:25, col:42> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x28b8a80d210 <col:25, col:42> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x28b8a80d1e0 <col:25, col:30> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x28b8a80d190 <col:25, col:30> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x28b8a7fb638
|   |   | |   |   |   |   `-ImplicitCastExpr 0x28b8a80d178 <col:25> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x28b8a80d158 <col:25> 'NISTP256_PRE_COMP *' lvalue Var 0x28b8a81a960 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x28b8a80d1f8 <col:41> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x28b8a80d1c0 <col:41> 'int' lvalue Var 0x28b8a81aa98 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x28b8a80d230 <col:44> 'int' 10
|   |   | |   `-IntegerLiteral 0x28b8a80d290 <col:48> 'int' 2
|   |   | |-ImplicitCastExpr 0x28b8a80dd48 <col:52, col:75> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x28b8a80d468 <col:52, col:75> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x28b8a80d450 <col:52, col:72> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x28b8a80d408 <col:52, col:72> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x28b8a80d3f0 <col:52, col:69> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x28b8a80d3a8 <col:52, col:69> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x28b8a80d378 <col:52, col:57> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x28b8a80d328 <col:52, col:57> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x28b8a7fb638
|   |   | |   |   |   |   `-ImplicitCastExpr 0x28b8a80d310 <col:52> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x28b8a80d2f0 <col:52> 'NISTP256_PRE_COMP *' lvalue Var 0x28b8a81a960 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x28b8a80d390 <col:68> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x28b8a80d358 <col:68> 'int' lvalue Var 0x28b8a81aa98 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x28b8a80d3c8 <col:71> 'int' 8
|   |   | |   `-IntegerLiteral 0x28b8a80d428 <col:74> 'int' 0
|   |   | |-ImplicitCastExpr 0x28b8a80dd60 <line:2301:25, col:48> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x28b8a80d600 <col:25, col:48> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x28b8a80d5e8 <col:25, col:45> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x28b8a80d5a0 <col:25, col:45> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x28b8a80d588 <col:25, col:42> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x28b8a80d540 <col:25, col:42> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x28b8a80d510 <col:25, col:30> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x28b8a80d4c0 <col:25, col:30> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x28b8a7fb638
|   |   | |   |   |   |   `-ImplicitCastExpr 0x28b8a80d4a8 <col:25> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x28b8a80d488 <col:25> 'NISTP256_PRE_COMP *' lvalue Var 0x28b8a81a960 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x28b8a80d528 <col:41> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x28b8a80d4f0 <col:41> 'int' lvalue Var 0x28b8a81aa98 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x28b8a80d560 <col:44> 'int' 8
|   |   | |   `-IntegerLiteral 0x28b8a80d5c0 <col:47> 'int' 1
|   |   | |-ImplicitCastExpr 0x28b8a80dd78 <col:51, col:74> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x28b8a80d798 <col:51, col:74> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x28b8a80d780 <col:51, col:71> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x28b8a80d738 <col:51, col:71> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x28b8a80d720 <col:51, col:68> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x28b8a80d6d8 <col:51, col:68> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x28b8a80d6a8 <col:51, col:56> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x28b8a80d658 <col:51, col:56> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x28b8a7fb638
|   |   | |   |   |   |   `-ImplicitCastExpr 0x28b8a80d640 <col:51> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x28b8a80d620 <col:51> 'NISTP256_PRE_COMP *' lvalue Var 0x28b8a81a960 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x28b8a80d6c0 <col:67> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x28b8a80d688 <col:67> 'int' lvalue Var 0x28b8a81aa98 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x28b8a80d6f8 <col:70> 'int' 8
|   |   | |   `-IntegerLiteral 0x28b8a80d758 <col:73> 'int' 2
|   |   | |-ImplicitCastExpr 0x28b8a80dd90 <line:2302:25, col:48> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x28b8a80d930 <col:25, col:48> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x28b8a80d918 <col:25, col:45> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x28b8a80d8d0 <col:25, col:45> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x28b8a80d8b8 <col:25, col:42> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x28b8a80d870 <col:25, col:42> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x28b8a80d840 <col:25, col:30> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x28b8a80d7f0 <col:25, col:30> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x28b8a7fb638
|   |   | |   |   |   |   `-ImplicitCastExpr 0x28b8a80d7d8 <col:25> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x28b8a80d7b8 <col:25> 'NISTP256_PRE_COMP *' lvalue Var 0x28b8a81a960 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x28b8a80d858 <col:41> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x28b8a80d820 <col:41> 'int' lvalue Var 0x28b8a81aa98 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x28b8a80d890 <col:44> 'int' 2
|   |   | |   `-IntegerLiteral 0x28b8a80d8f0 <col:47> 'int' 0
|   |   | |-ImplicitCastExpr 0x28b8a80dda8 <col:51, col:74> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x28b8a80dac8 <col:51, col:74> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x28b8a80dab0 <col:51, col:71> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x28b8a80da68 <col:51, col:71> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x28b8a80da50 <col:51, col:68> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x28b8a80da08 <col:51, col:68> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x28b8a80d9d8 <col:51, col:56> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x28b8a80d988 <col:51, col:56> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x28b8a7fb638
|   |   | |   |   |   |   `-ImplicitCastExpr 0x28b8a80d970 <col:51> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x28b8a80d950 <col:51> 'NISTP256_PRE_COMP *' lvalue Var 0x28b8a81a960 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x28b8a80d9f0 <col:67> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x28b8a80d9b8 <col:67> 'int' lvalue Var 0x28b8a81aa98 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x28b8a80da28 <col:70> 'int' 2
|   |   | |   `-IntegerLiteral 0x28b8a80da88 <col:73> 'int' 1
|   |   | `-ImplicitCastExpr 0x28b8a80ddc0 <line:2303:25, col:48> 'u64 *' <ArrayToPointerDecay>
|   |   |   `-ArraySubscriptExpr 0x28b8a80dc60 <col:25, col:48> 'smallfelem':'u64 [4]' lvalue
|   |   |     |-ImplicitCastExpr 0x28b8a80dc48 <col:25, col:45> 'smallfelem *' <ArrayToPointerDecay>
|   |   |     | `-ArraySubscriptExpr 0x28b8a80dc00 <col:25, col:45> 'smallfelem [3]' lvalue
|   |   |     |   |-ImplicitCastExpr 0x28b8a80dbe8 <col:25, col:42> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |     |   | `-ArraySubscriptExpr 0x28b8a80dba0 <col:25, col:42> 'smallfelem [16][3]' lvalue
|   |   |     |   |   |-ImplicitCastExpr 0x28b8a80db70 <col:25, col:30> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   |     |   |   | `-MemberExpr 0x28b8a80db20 <col:25, col:30> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x28b8a7fb638
|   |   |     |   |   |   `-ImplicitCastExpr 0x28b8a80db08 <col:25> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   |     |   |   |     `-DeclRefExpr 0x28b8a80dae8 <col:25> 'NISTP256_PRE_COMP *' lvalue Var 0x28b8a81a960 'pre' 'NISTP256_PRE_COMP *'
|   |   |     |   |   `-ImplicitCastExpr 0x28b8a80db88 <col:41> 'int' <LValueToRValue>
|   |   |     |   |     `-DeclRefExpr 0x28b8a80db50 <col:41> 'int' lvalue Var 0x28b8a81aa98 'i' 'int'
|   |   |     |   `-IntegerLiteral 0x28b8a80dbc0 <col:44> 'int' 2
|   |   |     `-IntegerLiteral 0x28b8a80dc20 <col:47> 'int' 2
|   |   |-CallExpr 0x28b8a80ec68 <line:2305:9, line:2309:49> 'void'
|   |   | |-ImplicitCastExpr 0x28b8a80ec50 <line:2305:9> 'void (*)(u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x28b8a80ddd8 <col:9> 'void (u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *)' Function 0x28b8a6f7a08 'point_add_small' 'void (u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *)'
|   |   | |-ImplicitCastExpr 0x28b8a80ecd0 <col:25, col:49> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x28b8a80df70 <col:25, col:49> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x28b8a80df58 <col:25, col:46> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x28b8a80df10 <col:25, col:46> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x28b8a80def8 <col:25, col:42> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x28b8a80deb0 <col:25, col:42> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x28b8a80de80 <col:25, col:30> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x28b8a80de30 <col:25, col:30> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x28b8a7fb638
|   |   | |   |   |   |   `-ImplicitCastExpr 0x28b8a80de18 <col:25> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x28b8a80ddf8 <col:25> 'NISTP256_PRE_COMP *' lvalue Var 0x28b8a81a960 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x28b8a80de98 <col:41> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x28b8a80de60 <col:41> 'int' lvalue Var 0x28b8a81aa98 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x28b8a80ded0 <col:44> 'int' 12
|   |   | |   `-IntegerLiteral 0x28b8a80df30 <col:48> 'int' 0
|   |   | |-ImplicitCastExpr 0x28b8a80ece8 <col:52, col:76> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x28b8a80e108 <col:52, col:76> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x28b8a80e0f0 <col:52, col:73> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x28b8a80e0a8 <col:52, col:73> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x28b8a80e090 <col:52, col:69> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x28b8a80e048 <col:52, col:69> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x28b8a80e018 <col:52, col:57> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x28b8a80dfc8 <col:52, col:57> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x28b8a7fb638
|   |   | |   |   |   |   `-ImplicitCastExpr 0x28b8a80dfb0 <col:52> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x28b8a80df90 <col:52> 'NISTP256_PRE_COMP *' lvalue Var 0x28b8a81a960 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x28b8a80e030 <col:68> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x28b8a80dff8 <col:68> 'int' lvalue Var 0x28b8a81aa98 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x28b8a80e068 <col:71> 'int' 12
|   |   | |   `-IntegerLiteral 0x28b8a80e0c8 <col:75> 'int' 1
|   |   | |-ImplicitCastExpr 0x28b8a80ed00 <line:2306:25, col:49> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x28b8a80e2a0 <col:25, col:49> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x28b8a80e288 <col:25, col:46> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x28b8a80e240 <col:25, col:46> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x28b8a80e228 <col:25, col:42> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x28b8a80e1e0 <col:25, col:42> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x28b8a80e1b0 <col:25, col:30> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x28b8a80e160 <col:25, col:30> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x28b8a7fb638
|   |   | |   |   |   |   `-ImplicitCastExpr 0x28b8a80e148 <col:25> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x28b8a80e128 <col:25> 'NISTP256_PRE_COMP *' lvalue Var 0x28b8a81a960 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x28b8a80e1c8 <col:41> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x28b8a80e190 <col:41> 'int' lvalue Var 0x28b8a81aa98 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x28b8a80e200 <col:44> 'int' 12
|   |   | |   `-IntegerLiteral 0x28b8a80e260 <col:48> 'int' 2
|   |   | |-ImplicitCastExpr 0x28b8a80ed18 <col:52, col:75> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x28b8a80e438 <col:52, col:75> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x28b8a80e420 <col:52, col:72> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x28b8a80e3d8 <col:52, col:72> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x28b8a80e3c0 <col:52, col:69> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x28b8a80e378 <col:52, col:69> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x28b8a80e348 <col:52, col:57> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x28b8a80e2f8 <col:52, col:57> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x28b8a7fb638
|   |   | |   |   |   |   `-ImplicitCastExpr 0x28b8a80e2e0 <col:52> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x28b8a80e2c0 <col:52> 'NISTP256_PRE_COMP *' lvalue Var 0x28b8a81a960 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x28b8a80e360 <col:68> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x28b8a80e328 <col:68> 'int' lvalue Var 0x28b8a81aa98 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x28b8a80e398 <col:71> 'int' 8
|   |   | |   `-IntegerLiteral 0x28b8a80e3f8 <col:74> 'int' 0
|   |   | |-ImplicitCastExpr 0x28b8a80ed30 <line:2307:25, col:48> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x28b8a80e5d0 <col:25, col:48> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x28b8a80e5b8 <col:25, col:45> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x28b8a80e570 <col:25, col:45> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x28b8a80e558 <col:25, col:42> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x28b8a80e510 <col:25, col:42> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x28b8a80e4e0 <col:25, col:30> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x28b8a80e490 <col:25, col:30> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x28b8a7fb638
|   |   | |   |   |   |   `-ImplicitCastExpr 0x28b8a80e478 <col:25> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x28b8a80e458 <col:25> 'NISTP256_PRE_COMP *' lvalue Var 0x28b8a81a960 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x28b8a80e4f8 <col:41> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x28b8a80e4c0 <col:41> 'int' lvalue Var 0x28b8a81aa98 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x28b8a80e530 <col:44> 'int' 8
|   |   | |   `-IntegerLiteral 0x28b8a80e590 <col:47> 'int' 1
|   |   | |-ImplicitCastExpr 0x28b8a80ed48 <col:51, col:74> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x28b8a80e768 <col:51, col:74> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x28b8a80e750 <col:51, col:71> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x28b8a80e708 <col:51, col:71> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x28b8a80e6f0 <col:51, col:68> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x28b8a80e6a8 <col:51, col:68> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x28b8a80e678 <col:51, col:56> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x28b8a80e628 <col:51, col:56> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x28b8a7fb638
|   |   | |   |   |   |   `-ImplicitCastExpr 0x28b8a80e610 <col:51> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x28b8a80e5f0 <col:51> 'NISTP256_PRE_COMP *' lvalue Var 0x28b8a81a960 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x28b8a80e690 <col:67> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x28b8a80e658 <col:67> 'int' lvalue Var 0x28b8a81aa98 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x28b8a80e6c8 <col:70> 'int' 8
|   |   | |   `-IntegerLiteral 0x28b8a80e728 <col:73> 'int' 2
|   |   | |-ImplicitCastExpr 0x28b8a80ed60 <line:2308:25, col:48> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x28b8a80e900 <col:25, col:48> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x28b8a80e8e8 <col:25, col:45> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x28b8a80e8a0 <col:25, col:45> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x28b8a80e888 <col:25, col:42> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x28b8a80e840 <col:25, col:42> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x28b8a80e810 <col:25, col:30> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x28b8a80e7c0 <col:25, col:30> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x28b8a7fb638
|   |   | |   |   |   |   `-ImplicitCastExpr 0x28b8a80e7a8 <col:25> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x28b8a80e788 <col:25> 'NISTP256_PRE_COMP *' lvalue Var 0x28b8a81a960 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x28b8a80e828 <col:41> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x28b8a80e7f0 <col:41> 'int' lvalue Var 0x28b8a81aa98 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x28b8a80e860 <col:44> 'int' 4
|   |   | |   `-IntegerLiteral 0x28b8a80e8c0 <col:47> 'int' 0
|   |   | |-ImplicitCastExpr 0x28b8a80ed78 <col:51, col:74> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x28b8a80ea98 <col:51, col:74> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x28b8a80ea80 <col:51, col:71> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x28b8a80ea38 <col:51, col:71> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x28b8a80ea20 <col:51, col:68> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x28b8a80e9d8 <col:51, col:68> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x28b8a80e9a8 <col:51, col:56> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x28b8a80e958 <col:51, col:56> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x28b8a7fb638
|   |   | |   |   |   |   `-ImplicitCastExpr 0x28b8a80e940 <col:51> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x28b8a80e920 <col:51> 'NISTP256_PRE_COMP *' lvalue Var 0x28b8a81a960 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x28b8a80e9c0 <col:67> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x28b8a80e988 <col:67> 'int' lvalue Var 0x28b8a81aa98 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x28b8a80e9f8 <col:70> 'int' 4
|   |   | |   `-IntegerLiteral 0x28b8a80ea58 <col:73> 'int' 1
|   |   | `-ImplicitCastExpr 0x28b8a80ed90 <line:2309:25, col:48> 'u64 *' <ArrayToPointerDecay>
|   |   |   `-ArraySubscriptExpr 0x28b8a80ec30 <col:25, col:48> 'smallfelem':'u64 [4]' lvalue
|   |   |     |-ImplicitCastExpr 0x28b8a80ec18 <col:25, col:45> 'smallfelem *' <ArrayToPointerDecay>
|   |   |     | `-ArraySubscriptExpr 0x28b8a80ebd0 <col:25, col:45> 'smallfelem [3]' lvalue
|   |   |     |   |-ImplicitCastExpr 0x28b8a80ebb8 <col:25, col:42> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |     |   | `-ArraySubscriptExpr 0x28b8a80eb70 <col:25, col:42> 'smallfelem [16][3]' lvalue
|   |   |     |   |   |-ImplicitCastExpr 0x28b8a80eb40 <col:25, col:30> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   |     |   |   | `-MemberExpr 0x28b8a80eaf0 <col:25, col:30> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x28b8a7fb638
|   |   |     |   |   |   `-ImplicitCastExpr 0x28b8a80ead8 <col:25> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   |     |   |   |     `-DeclRefExpr 0x28b8a80eab8 <col:25> 'NISTP256_PRE_COMP *' lvalue Var 0x28b8a81a960 'pre' 'NISTP256_PRE_COMP *'
|   |   |     |   |   `-ImplicitCastExpr 0x28b8a80eb58 <col:41> 'int' <LValueToRValue>
|   |   |     |   |     `-DeclRefExpr 0x28b8a80eb20 <col:41> 'int' lvalue Var 0x28b8a81aa98 'i' 'int'
|   |   |     |   `-IntegerLiteral 0x28b8a80eb90 <col:44> 'int' 4
|   |   |     `-IntegerLiteral 0x28b8a80ebf0 <col:47> 'int' 2
|   |   |-CallExpr 0x28b8a82bd40 <line:2313:9, line:2317:49> 'void'
|   |   | |-ImplicitCastExpr 0x28b8a82bd28 <line:2313:9> 'void (*)(u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x28b8a80eda8 <col:9> 'void (u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *)' Function 0x28b8a6f7a08 'point_add_small' 'void (u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *)'
|   |   | |-ImplicitCastExpr 0x28b8a82bda8 <col:25, col:49> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x28b8a80ef40 <col:25, col:49> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x28b8a80ef28 <col:25, col:46> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x28b8a80eee0 <col:25, col:46> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x28b8a80eec8 <col:25, col:42> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x28b8a80ee80 <col:25, col:42> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x28b8a80ee50 <col:25, col:30> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x28b8a80ee00 <col:25, col:30> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x28b8a7fb638
|   |   | |   |   |   |   `-ImplicitCastExpr 0x28b8a80ede8 <col:25> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x28b8a80edc8 <col:25> 'NISTP256_PRE_COMP *' lvalue Var 0x28b8a81a960 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x28b8a80ee68 <col:41> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x28b8a80ee30 <col:41> 'int' lvalue Var 0x28b8a81aa98 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x28b8a80eea0 <col:44> 'int' 14
|   |   | |   `-IntegerLiteral 0x28b8a80ef00 <col:48> 'int' 0
|   |   | |-ImplicitCastExpr 0x28b8a82bdc0 <col:52, col:76> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x28b8a82b1e0 <col:52, col:76> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x28b8a82b1c8 <col:52, col:73> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x28b8a82b180 <col:52, col:73> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x28b8a82b168 <col:52, col:69> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x28b8a82b120 <col:52, col:69> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x28b8a82b0f0 <col:52, col:57> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x28b8a80ef98 <col:52, col:57> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x28b8a7fb638
|   |   | |   |   |   |   `-ImplicitCastExpr 0x28b8a80ef80 <col:52> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x28b8a80ef60 <col:52> 'NISTP256_PRE_COMP *' lvalue Var 0x28b8a81a960 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x28b8a82b108 <col:68> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x28b8a82b0d0 <col:68> 'int' lvalue Var 0x28b8a81aa98 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x28b8a82b140 <col:71> 'int' 14
|   |   | |   `-IntegerLiteral 0x28b8a82b1a0 <col:75> 'int' 1
|   |   | |-ImplicitCastExpr 0x28b8a82bdd8 <line:2314:25, col:49> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x28b8a82b378 <col:25, col:49> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x28b8a82b360 <col:25, col:46> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x28b8a82b318 <col:25, col:46> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x28b8a82b300 <col:25, col:42> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x28b8a82b2b8 <col:25, col:42> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x28b8a82b288 <col:25, col:30> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x28b8a82b238 <col:25, col:30> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x28b8a7fb638
|   |   | |   |   |   |   `-ImplicitCastExpr 0x28b8a82b220 <col:25> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x28b8a82b200 <col:25> 'NISTP256_PRE_COMP *' lvalue Var 0x28b8a81a960 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x28b8a82b2a0 <col:41> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x28b8a82b268 <col:41> 'int' lvalue Var 0x28b8a81aa98 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x28b8a82b2d8 <col:44> 'int' 14
|   |   | |   `-IntegerLiteral 0x28b8a82b338 <col:48> 'int' 2
|   |   | |-ImplicitCastExpr 0x28b8a82bdf0 <col:52, col:76> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x28b8a82b510 <col:52, col:76> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x28b8a82b4f8 <col:52, col:73> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x28b8a82b4b0 <col:52, col:73> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x28b8a82b498 <col:52, col:69> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x28b8a82b450 <col:52, col:69> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x28b8a82b420 <col:52, col:57> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x28b8a82b3d0 <col:52, col:57> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x28b8a7fb638
|   |   | |   |   |   |   `-ImplicitCastExpr 0x28b8a82b3b8 <col:52> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x28b8a82b398 <col:52> 'NISTP256_PRE_COMP *' lvalue Var 0x28b8a81a960 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x28b8a82b438 <col:68> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x28b8a82b400 <col:68> 'int' lvalue Var 0x28b8a81aa98 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x28b8a82b470 <col:71> 'int' 12
|   |   | |   `-IntegerLiteral 0x28b8a82b4d0 <col:75> 'int' 0
|   |   | |-ImplicitCastExpr 0x28b8a82be08 <line:2315:25, col:49> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x28b8a82b6a8 <col:25, col:49> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x28b8a82b690 <col:25, col:46> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x28b8a82b648 <col:25, col:46> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x28b8a82b630 <col:25, col:42> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x28b8a82b5e8 <col:25, col:42> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x28b8a82b5b8 <col:25, col:30> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x28b8a82b568 <col:25, col:30> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x28b8a7fb638
|   |   | |   |   |   |   `-ImplicitCastExpr 0x28b8a82b550 <col:25> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x28b8a82b530 <col:25> 'NISTP256_PRE_COMP *' lvalue Var 0x28b8a81a960 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x28b8a82b5d0 <col:41> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x28b8a82b598 <col:41> 'int' lvalue Var 0x28b8a81aa98 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x28b8a82b608 <col:44> 'int' 12
|   |   | |   `-IntegerLiteral 0x28b8a82b668 <col:48> 'int' 1
|   |   | |-ImplicitCastExpr 0x28b8a82be20 <col:52, col:76> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x28b8a82b840 <col:52, col:76> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x28b8a82b828 <col:52, col:73> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x28b8a82b7e0 <col:52, col:73> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x28b8a82b7c8 <col:52, col:69> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x28b8a82b780 <col:52, col:69> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x28b8a82b750 <col:52, col:57> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x28b8a82b700 <col:52, col:57> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x28b8a7fb638
|   |   | |   |   |   |   `-ImplicitCastExpr 0x28b8a82b6e8 <col:52> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x28b8a82b6c8 <col:52> 'NISTP256_PRE_COMP *' lvalue Var 0x28b8a81a960 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x28b8a82b768 <col:68> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x28b8a82b730 <col:68> 'int' lvalue Var 0x28b8a81aa98 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x28b8a82b7a0 <col:71> 'int' 12
|   |   | |   `-IntegerLiteral 0x28b8a82b800 <col:75> 'int' 2
|   |   | |-ImplicitCastExpr 0x28b8a82be38 <line:2316:25, col:48> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x28b8a82b9d8 <col:25, col:48> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x28b8a82b9c0 <col:25, col:45> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x28b8a82b978 <col:25, col:45> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x28b8a82b960 <col:25, col:42> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x28b8a82b918 <col:25, col:42> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x28b8a82b8e8 <col:25, col:30> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x28b8a82b898 <col:25, col:30> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x28b8a7fb638
|   |   | |   |   |   |   `-ImplicitCastExpr 0x28b8a82b880 <col:25> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x28b8a82b860 <col:25> 'NISTP256_PRE_COMP *' lvalue Var 0x28b8a81a960 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x28b8a82b900 <col:41> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x28b8a82b8c8 <col:41> 'int' lvalue Var 0x28b8a81aa98 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x28b8a82b938 <col:44> 'int' 2
|   |   | |   `-IntegerLiteral 0x28b8a82b998 <col:47> 'int' 0
|   |   | |-ImplicitCastExpr 0x28b8a82be50 <col:51, col:74> 'u64 *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x28b8a82bb70 <col:51, col:74> 'smallfelem':'u64 [4]' lvalue
|   |   | |   |-ImplicitCastExpr 0x28b8a82bb58 <col:51, col:71> 'smallfelem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x28b8a82bb10 <col:51, col:71> 'smallfelem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x28b8a82baf8 <col:51, col:68> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-ArraySubscriptExpr 0x28b8a82bab0 <col:51, col:68> 'smallfelem [16][3]' lvalue
|   |   | |   |   |   |-ImplicitCastExpr 0x28b8a82ba80 <col:51, col:56> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   | |   |   |   | `-MemberExpr 0x28b8a82ba30 <col:51, col:56> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x28b8a7fb638
|   |   | |   |   |   |   `-ImplicitCastExpr 0x28b8a82ba18 <col:51> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x28b8a82b9f8 <col:51> 'NISTP256_PRE_COMP *' lvalue Var 0x28b8a81a960 'pre' 'NISTP256_PRE_COMP *'
|   |   | |   |   |   `-ImplicitCastExpr 0x28b8a82ba98 <col:67> 'int' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x28b8a82ba60 <col:67> 'int' lvalue Var 0x28b8a81aa98 'i' 'int'
|   |   | |   |   `-IntegerLiteral 0x28b8a82bad0 <col:70> 'int' 2
|   |   | |   `-IntegerLiteral 0x28b8a82bb30 <col:73> 'int' 1
|   |   | `-ImplicitCastExpr 0x28b8a82be68 <line:2317:25, col:48> 'u64 *' <ArrayToPointerDecay>
|   |   |   `-ArraySubscriptExpr 0x28b8a82bd08 <col:25, col:48> 'smallfelem':'u64 [4]' lvalue
|   |   |     |-ImplicitCastExpr 0x28b8a82bcf0 <col:25, col:45> 'smallfelem *' <ArrayToPointerDecay>
|   |   |     | `-ArraySubscriptExpr 0x28b8a82bca8 <col:25, col:45> 'smallfelem [3]' lvalue
|   |   |     |   |-ImplicitCastExpr 0x28b8a82bc90 <col:25, col:42> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |   |     |   | `-ArraySubscriptExpr 0x28b8a82bc48 <col:25, col:42> 'smallfelem [16][3]' lvalue
|   |   |     |   |   |-ImplicitCastExpr 0x28b8a82bc18 <col:25, col:30> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |   |     |   |   | `-MemberExpr 0x28b8a82bbc8 <col:25, col:30> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x28b8a7fb638
|   |   |     |   |   |   `-ImplicitCastExpr 0x28b8a82bbb0 <col:25> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   |     |   |   |     `-DeclRefExpr 0x28b8a82bb90 <col:25> 'NISTP256_PRE_COMP *' lvalue Var 0x28b8a81a960 'pre' 'NISTP256_PRE_COMP *'
|   |   |     |   |   `-ImplicitCastExpr 0x28b8a82bc30 <col:41> 'int' <LValueToRValue>
|   |   |     |   |     `-DeclRefExpr 0x28b8a82bbf8 <col:41> 'int' lvalue Var 0x28b8a81aa98 'i' 'int'
|   |   |     |   `-IntegerLiteral 0x28b8a82bc68 <col:44> 'int' 2
|   |   |     `-IntegerLiteral 0x28b8a82bcc8 <col:47> 'int' 2
|   |   `-ForStmt 0x28b8a821228 <line:2318:9, line:2329:9>
|   |     |-BinaryOperator 0x28b8a82bec8 <line:2318:14, col:18> 'int' '='
|   |     | |-DeclRefExpr 0x28b8a82be80 <col:14> 'int' lvalue Var 0x28b8a81ab18 'j' 'int'
|   |     | `-IntegerLiteral 0x28b8a82bea0 <col:18> 'int' 1
|   |     |-<<<NULL>>>
|   |     |-BinaryOperator 0x28b8a82bf48 <col:21, col:25> 'int' '<'
|   |     | |-ImplicitCastExpr 0x28b8a82bf30 <col:21> 'int' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x28b8a82bee8 <col:21> 'int' lvalue Var 0x28b8a81ab18 'j' 'int'
|   |     | `-IntegerLiteral 0x28b8a82bf08 <col:25> 'int' 8
|   |     |-UnaryOperator 0x28b8a82bf88 <col:28, col:30> 'int' prefix '++'
|   |     | `-DeclRefExpr 0x28b8a82bf68 <col:30> 'int' lvalue Var 0x28b8a81ab18 'j' 'int'
|   |     `-CompoundStmt 0x28b8a821210 <col:33, line:2329:9>
|   |       `-CallExpr 0x28b8a8210d0 <line:2320:13, line:2328:53> 'void'
|   |         |-ImplicitCastExpr 0x28b8a8210b8 <line:2320:13> 'void (*)(u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *)' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x28b8a82bfa0 <col:13> 'void (u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *)' Function 0x28b8a6f7a08 'point_add_small' 'void (u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *, u64 *)'
|   |         |-ImplicitCastExpr 0x28b8a821138 <col:29, col:60> 'u64 *' <ArrayToPointerDecay>
|   |         | `-ArraySubscriptExpr 0x28b8a82c1d8 <col:29, col:60> 'smallfelem':'u64 [4]' lvalue
|   |         |   |-ImplicitCastExpr 0x28b8a82c1c0 <col:29, col:57> 'smallfelem *' <ArrayToPointerDecay>
|   |         |   | `-ArraySubscriptExpr 0x28b8a82c178 <col:29, col:57> 'smallfelem [3]' lvalue
|   |         |   |   |-ImplicitCastExpr 0x28b8a82c160 <col:29, col:46> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |         |   |   | `-ArraySubscriptExpr 0x28b8a82c078 <col:29, col:46> 'smallfelem [16][3]' lvalue
|   |         |   |   |   |-ImplicitCastExpr 0x28b8a82c048 <col:29, col:34> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |         |   |   |   | `-MemberExpr 0x28b8a82bff8 <col:29, col:34> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x28b8a7fb638
|   |         |   |   |   |   `-ImplicitCastExpr 0x28b8a82bfe0 <col:29> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |         |   |   |   |     `-DeclRefExpr 0x28b8a82bfc0 <col:29> 'NISTP256_PRE_COMP *' lvalue Var 0x28b8a81a960 'pre' 'NISTP256_PRE_COMP *'
|   |         |   |   |   `-ImplicitCastExpr 0x28b8a82c060 <col:45> 'int' <LValueToRValue>
|   |         |   |   |     `-DeclRefExpr 0x28b8a82c028 <col:45> 'int' lvalue Var 0x28b8a81aa98 'i' 'int'
|   |         |   |   `-BinaryOperator 0x28b8a82c140 <col:48, col:56> 'int' '+'
|   |         |   |     |-BinaryOperator 0x28b8a82c0f8 <col:48, col:52> 'int' '*'
|   |         |   |     | |-IntegerLiteral 0x28b8a82c098 <col:48> 'int' 2
|   |         |   |     | `-ImplicitCastExpr 0x28b8a82c0e0 <col:52> 'int' <LValueToRValue>
|   |         |   |     |   `-DeclRefExpr 0x28b8a82c0c0 <col:52> 'int' lvalue Var 0x28b8a81ab18 'j' 'int'
|   |         |   |     `-IntegerLiteral 0x28b8a82c118 <col:56> 'int' 1
|   |         |   `-IntegerLiteral 0x28b8a82c198 <col:59> 'int' 0
|   |         |-ImplicitCastExpr 0x28b8a821150 <line:2321:29, col:60> 'u64 *' <ArrayToPointerDecay>
|   |         | `-ArraySubscriptExpr 0x28b8a82c410 <col:29, col:60> 'smallfelem':'u64 [4]' lvalue
|   |         |   |-ImplicitCastExpr 0x28b8a82c3f8 <col:29, col:57> 'smallfelem *' <ArrayToPointerDecay>
|   |         |   | `-ArraySubscriptExpr 0x28b8a82c3b0 <col:29, col:57> 'smallfelem [3]' lvalue
|   |         |   |   |-ImplicitCastExpr 0x28b8a82c398 <col:29, col:46> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |         |   |   | `-ArraySubscriptExpr 0x28b8a82c2b0 <col:29, col:46> 'smallfelem [16][3]' lvalue
|   |         |   |   |   |-ImplicitCastExpr 0x28b8a82c280 <col:29, col:34> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |         |   |   |   | `-MemberExpr 0x28b8a82c230 <col:29, col:34> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x28b8a7fb638
|   |         |   |   |   |   `-ImplicitCastExpr 0x28b8a82c218 <col:29> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |         |   |   |   |     `-DeclRefExpr 0x28b8a82c1f8 <col:29> 'NISTP256_PRE_COMP *' lvalue Var 0x28b8a81a960 'pre' 'NISTP256_PRE_COMP *'
|   |         |   |   |   `-ImplicitCastExpr 0x28b8a82c298 <col:45> 'int' <LValueToRValue>
|   |         |   |   |     `-DeclRefExpr 0x28b8a82c260 <col:45> 'int' lvalue Var 0x28b8a81aa98 'i' 'int'
|   |         |   |   `-BinaryOperator 0x28b8a82c378 <col:48, col:56> 'int' '+'
|   |         |   |     |-BinaryOperator 0x28b8a82c330 <col:48, col:52> 'int' '*'
|   |         |   |     | |-IntegerLiteral 0x28b8a82c2d0 <col:48> 'int' 2
|   |         |   |     | `-ImplicitCastExpr 0x28b8a82c318 <col:52> 'int' <LValueToRValue>
|   |         |   |     |   `-DeclRefExpr 0x28b8a82c2f8 <col:52> 'int' lvalue Var 0x28b8a81ab18 'j' 'int'
|   |         |   |     `-IntegerLiteral 0x28b8a82c350 <col:56> 'int' 1
|   |         |   `-IntegerLiteral 0x28b8a82c3d0 <col:59> 'int' 1
|   |         |-ImplicitCastExpr 0x28b8a821168 <line:2322:29, col:60> 'u64 *' <ArrayToPointerDecay>
|   |         | `-ArraySubscriptExpr 0x28b8a82c648 <col:29, col:60> 'smallfelem':'u64 [4]' lvalue
|   |         |   |-ImplicitCastExpr 0x28b8a82c630 <col:29, col:57> 'smallfelem *' <ArrayToPointerDecay>
|   |         |   | `-ArraySubscriptExpr 0x28b8a82c5e8 <col:29, col:57> 'smallfelem [3]' lvalue
|   |         |   |   |-ImplicitCastExpr 0x28b8a82c5d0 <col:29, col:46> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |         |   |   | `-ArraySubscriptExpr 0x28b8a82c4e8 <col:29, col:46> 'smallfelem [16][3]' lvalue
|   |         |   |   |   |-ImplicitCastExpr 0x28b8a82c4b8 <col:29, col:34> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |         |   |   |   | `-MemberExpr 0x28b8a82c468 <col:29, col:34> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x28b8a7fb638
|   |         |   |   |   |   `-ImplicitCastExpr 0x28b8a82c450 <col:29> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |         |   |   |   |     `-DeclRefExpr 0x28b8a82c430 <col:29> 'NISTP256_PRE_COMP *' lvalue Var 0x28b8a81a960 'pre' 'NISTP256_PRE_COMP *'
|   |         |   |   |   `-ImplicitCastExpr 0x28b8a82c4d0 <col:45> 'int' <LValueToRValue>
|   |         |   |   |     `-DeclRefExpr 0x28b8a82c498 <col:45> 'int' lvalue Var 0x28b8a81aa98 'i' 'int'
|   |         |   |   `-BinaryOperator 0x28b8a82c5b0 <col:48, col:56> 'int' '+'
|   |         |   |     |-BinaryOperator 0x28b8a82c568 <col:48, col:52> 'int' '*'
|   |         |   |     | |-IntegerLiteral 0x28b8a82c508 <col:48> 'int' 2
|   |         |   |     | `-ImplicitCastExpr 0x28b8a82c550 <col:52> 'int' <LValueToRValue>
|   |         |   |     |   `-DeclRefExpr 0x28b8a82c530 <col:52> 'int' lvalue Var 0x28b8a81ab18 'j' 'int'
|   |         |   |     `-IntegerLiteral 0x28b8a82c588 <col:56> 'int' 1
|   |         |   `-IntegerLiteral 0x28b8a82c608 <col:59> 'int' 2
|   |         |-ImplicitCastExpr 0x28b8a821180 <line:2323:29, col:56> 'u64 *' <ArrayToPointerDecay>
|   |         | `-ArraySubscriptExpr 0x28b8a82c838 <col:29, col:56> 'smallfelem':'u64 [4]' lvalue
|   |         |   |-ImplicitCastExpr 0x28b8a82c820 <col:29, col:53> 'smallfelem *' <ArrayToPointerDecay>
|   |         |   | `-ArraySubscriptExpr 0x28b8a82c7d8 <col:29, col:53> 'smallfelem [3]' lvalue
|   |         |   |   |-ImplicitCastExpr 0x28b8a82c7c0 <col:29, col:46> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |         |   |   | `-ArraySubscriptExpr 0x28b8a82c720 <col:29, col:46> 'smallfelem [16][3]' lvalue
|   |         |   |   |   |-ImplicitCastExpr 0x28b8a82c6f0 <col:29, col:34> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |         |   |   |   | `-MemberExpr 0x28b8a82c6a0 <col:29, col:34> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x28b8a7fb638
|   |         |   |   |   |   `-ImplicitCastExpr 0x28b8a82c688 <col:29> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |         |   |   |   |     `-DeclRefExpr 0x28b8a82c668 <col:29> 'NISTP256_PRE_COMP *' lvalue Var 0x28b8a81a960 'pre' 'NISTP256_PRE_COMP *'
|   |         |   |   |   `-ImplicitCastExpr 0x28b8a82c708 <col:45> 'int' <LValueToRValue>
|   |         |   |   |     `-DeclRefExpr 0x28b8a82c6d0 <col:45> 'int' lvalue Var 0x28b8a81aa98 'i' 'int'
|   |         |   |   `-BinaryOperator 0x28b8a82c7a0 <col:48, col:52> 'int' '*'
|   |         |   |     |-IntegerLiteral 0x28b8a82c740 <col:48> 'int' 2
|   |         |   |     `-ImplicitCastExpr 0x28b8a82c788 <col:52> 'int' <LValueToRValue>
|   |         |   |       `-DeclRefExpr 0x28b8a82c768 <col:52> 'int' lvalue Var 0x28b8a81ab18 'j' 'int'
|   |         |   `-IntegerLiteral 0x28b8a82c7f8 <col:55> 'int' 0
|   |         |-ImplicitCastExpr 0x28b8a821198 <line:2324:29, col:56> 'u64 *' <ArrayToPointerDecay>
|   |         | `-ArraySubscriptExpr 0x28b8a82ca28 <col:29, col:56> 'smallfelem':'u64 [4]' lvalue
|   |         |   |-ImplicitCastExpr 0x28b8a82ca10 <col:29, col:53> 'smallfelem *' <ArrayToPointerDecay>
|   |         |   | `-ArraySubscriptExpr 0x28b8a82c9c8 <col:29, col:53> 'smallfelem [3]' lvalue
|   |         |   |   |-ImplicitCastExpr 0x28b8a82c9b0 <col:29, col:46> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |         |   |   | `-ArraySubscriptExpr 0x28b8a82c910 <col:29, col:46> 'smallfelem [16][3]' lvalue
|   |         |   |   |   |-ImplicitCastExpr 0x28b8a82c8e0 <col:29, col:34> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |         |   |   |   | `-MemberExpr 0x28b8a82c890 <col:29, col:34> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x28b8a7fb638
|   |         |   |   |   |   `-ImplicitCastExpr 0x28b8a82c878 <col:29> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |         |   |   |   |     `-DeclRefExpr 0x28b8a82c858 <col:29> 'NISTP256_PRE_COMP *' lvalue Var 0x28b8a81a960 'pre' 'NISTP256_PRE_COMP *'
|   |         |   |   |   `-ImplicitCastExpr 0x28b8a82c8f8 <col:45> 'int' <LValueToRValue>
|   |         |   |   |     `-DeclRefExpr 0x28b8a82c8c0 <col:45> 'int' lvalue Var 0x28b8a81aa98 'i' 'int'
|   |         |   |   `-BinaryOperator 0x28b8a82c990 <col:48, col:52> 'int' '*'
|   |         |   |     |-IntegerLiteral 0x28b8a82c930 <col:48> 'int' 2
|   |         |   |     `-ImplicitCastExpr 0x28b8a82c978 <col:52> 'int' <LValueToRValue>
|   |         |   |       `-DeclRefExpr 0x28b8a82c958 <col:52> 'int' lvalue Var 0x28b8a81ab18 'j' 'int'
|   |         |   `-IntegerLiteral 0x28b8a82c9e8 <col:55> 'int' 1
|   |         |-ImplicitCastExpr 0x28b8a8211b0 <line:2325:29, col:56> 'u64 *' <ArrayToPointerDecay>
|   |         | `-ArraySubscriptExpr 0x28b8a82cc18 <col:29, col:56> 'smallfelem':'u64 [4]' lvalue
|   |         |   |-ImplicitCastExpr 0x28b8a82cc00 <col:29, col:53> 'smallfelem *' <ArrayToPointerDecay>
|   |         |   | `-ArraySubscriptExpr 0x28b8a82cbb8 <col:29, col:53> 'smallfelem [3]' lvalue
|   |         |   |   |-ImplicitCastExpr 0x28b8a82cba0 <col:29, col:46> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |         |   |   | `-ArraySubscriptExpr 0x28b8a82cb00 <col:29, col:46> 'smallfelem [16][3]' lvalue
|   |         |   |   |   |-ImplicitCastExpr 0x28b8a82cad0 <col:29, col:34> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |         |   |   |   | `-MemberExpr 0x28b8a82ca80 <col:29, col:34> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x28b8a7fb638
|   |         |   |   |   |   `-ImplicitCastExpr 0x28b8a82ca68 <col:29> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |         |   |   |   |     `-DeclRefExpr 0x28b8a82ca48 <col:29> 'NISTP256_PRE_COMP *' lvalue Var 0x28b8a81a960 'pre' 'NISTP256_PRE_COMP *'
|   |         |   |   |   `-ImplicitCastExpr 0x28b8a82cae8 <col:45> 'int' <LValueToRValue>
|   |         |   |   |     `-DeclRefExpr 0x28b8a82cab0 <col:45> 'int' lvalue Var 0x28b8a81aa98 'i' 'int'
|   |         |   |   `-BinaryOperator 0x28b8a82cb80 <col:48, col:52> 'int' '*'
|   |         |   |     |-IntegerLiteral 0x28b8a82cb20 <col:48> 'int' 2
|   |         |   |     `-ImplicitCastExpr 0x28b8a82cb68 <col:52> 'int' <LValueToRValue>
|   |         |   |       `-DeclRefExpr 0x28b8a82cb48 <col:52> 'int' lvalue Var 0x28b8a81ab18 'j' 'int'
|   |         |   `-IntegerLiteral 0x28b8a82cbd8 <col:55> 'int' 2
|   |         |-ImplicitCastExpr 0x28b8a8211c8 <line:2326:29, col:52> 'u64 *' <ArrayToPointerDecay>
|   |         | `-ArraySubscriptExpr 0x28b8a82cdb0 <col:29, col:52> 'smallfelem':'u64 [4]' lvalue
|   |         |   |-ImplicitCastExpr 0x28b8a82cd98 <col:29, col:49> 'smallfelem *' <ArrayToPointerDecay>
|   |         |   | `-ArraySubscriptExpr 0x28b8a82cd50 <col:29, col:49> 'smallfelem [3]' lvalue
|   |         |   |   |-ImplicitCastExpr 0x28b8a82cd38 <col:29, col:46> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |         |   |   | `-ArraySubscriptExpr 0x28b8a82ccf0 <col:29, col:46> 'smallfelem [16][3]' lvalue
|   |         |   |   |   |-ImplicitCastExpr 0x28b8a82ccc0 <col:29, col:34> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |         |   |   |   | `-MemberExpr 0x28b8a82cc70 <col:29, col:34> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x28b8a7fb638
|   |         |   |   |   |   `-ImplicitCastExpr 0x28b8a82cc58 <col:29> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |         |   |   |   |     `-DeclRefExpr 0x28b8a82cc38 <col:29> 'NISTP256_PRE_COMP *' lvalue Var 0x28b8a81a960 'pre' 'NISTP256_PRE_COMP *'
|   |         |   |   |   `-ImplicitCastExpr 0x28b8a82ccd8 <col:45> 'int' <LValueToRValue>
|   |         |   |   |     `-DeclRefExpr 0x28b8a82cca0 <col:45> 'int' lvalue Var 0x28b8a81aa98 'i' 'int'
|   |         |   |   `-IntegerLiteral 0x28b8a82cd10 <col:48> 'int' 1
|   |         |   `-IntegerLiteral 0x28b8a82cd70 <col:51> 'int' 0
|   |         |-ImplicitCastExpr 0x28b8a8211e0 <line:2327:29, col:52> 'u64 *' <ArrayToPointerDecay>
|   |         | `-ArraySubscriptExpr 0x28b8a82cf48 <col:29, col:52> 'smallfelem':'u64 [4]' lvalue
|   |         |   |-ImplicitCastExpr 0x28b8a82cf30 <col:29, col:49> 'smallfelem *' <ArrayToPointerDecay>
|   |         |   | `-ArraySubscriptExpr 0x28b8a82cee8 <col:29, col:49> 'smallfelem [3]' lvalue
|   |         |   |   |-ImplicitCastExpr 0x28b8a82ced0 <col:29, col:46> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |         |   |   | `-ArraySubscriptExpr 0x28b8a82ce88 <col:29, col:46> 'smallfelem [16][3]' lvalue
|   |         |   |   |   |-ImplicitCastExpr 0x28b8a82ce58 <col:29, col:34> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |         |   |   |   | `-MemberExpr 0x28b8a82ce08 <col:29, col:34> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x28b8a7fb638
|   |         |   |   |   |   `-ImplicitCastExpr 0x28b8a82cdf0 <col:29> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |         |   |   |   |     `-DeclRefExpr 0x28b8a82cdd0 <col:29> 'NISTP256_PRE_COMP *' lvalue Var 0x28b8a81a960 'pre' 'NISTP256_PRE_COMP *'
|   |         |   |   |   `-ImplicitCastExpr 0x28b8a82ce70 <col:45> 'int' <LValueToRValue>
|   |         |   |   |     `-DeclRefExpr 0x28b8a82ce38 <col:45> 'int' lvalue Var 0x28b8a81aa98 'i' 'int'
|   |         |   |   `-IntegerLiteral 0x28b8a82cea8 <col:48> 'int' 1
|   |         |   `-IntegerLiteral 0x28b8a82cf08 <col:51> 'int' 1
|   |         `-ImplicitCastExpr 0x28b8a8211f8 <line:2328:29, col:52> 'u64 *' <ArrayToPointerDecay>
|   |           `-ArraySubscriptExpr 0x28b8a821098 <col:29, col:52> 'smallfelem':'u64 [4]' lvalue
|   |             |-ImplicitCastExpr 0x28b8a821080 <col:29, col:49> 'smallfelem *' <ArrayToPointerDecay>
|   |             | `-ArraySubscriptExpr 0x28b8a82d080 <col:29, col:49> 'smallfelem [3]' lvalue
|   |             |   |-ImplicitCastExpr 0x28b8a82d068 <col:29, col:46> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   |             |   | `-ArraySubscriptExpr 0x28b8a82d020 <col:29, col:46> 'smallfelem [16][3]' lvalue
|   |             |   |   |-ImplicitCastExpr 0x28b8a82cff0 <col:29, col:34> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   |             |   |   | `-MemberExpr 0x28b8a82cfa0 <col:29, col:34> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x28b8a7fb638
|   |             |   |   |   `-ImplicitCastExpr 0x28b8a82cf88 <col:29> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |             |   |   |     `-DeclRefExpr 0x28b8a82cf68 <col:29> 'NISTP256_PRE_COMP *' lvalue Var 0x28b8a81a960 'pre' 'NISTP256_PRE_COMP *'
|   |             |   |   `-ImplicitCastExpr 0x28b8a82d008 <col:45> 'int' <LValueToRValue>
|   |             |   |     `-DeclRefExpr 0x28b8a82cfd0 <col:45> 'int' lvalue Var 0x28b8a81aa98 'i' 'int'
|   |             |   `-IntegerLiteral 0x28b8a82d040 <col:48> 'int' 1
|   |             `-IntegerLiteral 0x28b8a82d0a0 <col:51> 'int' 2
|   |-CallExpr 0x28b8a8214d0 <line:2331:5, col:69> 'void'
|   | |-ImplicitCastExpr 0x28b8a8214b8 <col:5> 'void (*)(size_t, smallfelem (*)[3], smallfelem *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a8212d8 <col:5> 'void (size_t, smallfelem (*)[3], smallfelem *)' Function 0x28b8a814d58 'make_points_affine' 'void (size_t, smallfelem (*)[3], smallfelem *)'
|   | |-ImplicitCastExpr 0x28b8a821508 <col:24> 'size_t':'unsigned long long' <IntegralCast>
|   | | `-IntegerLiteral 0x28b8a8212f8 <col:24> 'int' 31
|   | |-UnaryOperator 0x28b8a821468 <col:28, col:51> 'smallfelem (*)[3]' prefix '&' cannot overflow
|   | | `-ParenExpr 0x28b8a821448 <col:29, col:51> 'smallfelem [3]' lvalue
|   | |   `-ArraySubscriptExpr 0x28b8a821428 <col:30, col:50> 'smallfelem [3]' lvalue
|   | |     |-ImplicitCastExpr 0x28b8a821410 <col:30, col:47> 'smallfelem (*)[3]' <ArrayToPointerDecay>
|   | |     | `-ArraySubscriptExpr 0x28b8a8213c8 <col:30, col:47> 'smallfelem [16][3]' lvalue
|   | |     |   |-ImplicitCastExpr 0x28b8a8213b0 <col:30, col:35> 'smallfelem (*)[16][3]' <ArrayToPointerDecay>
|   | |     |   | `-MemberExpr 0x28b8a821358 <col:30, col:35> 'smallfelem [2][16][3]' lvalue ->g_pre_comp 0x28b8a7fb638
|   | |     |   |   `-ImplicitCastExpr 0x28b8a821340 <col:30> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   | |     |   |     `-DeclRefExpr 0x28b8a821320 <col:30> 'NISTP256_PRE_COMP *' lvalue Var 0x28b8a81a960 'pre' 'NISTP256_PRE_COMP *'
|   | |     |   `-IntegerLiteral 0x28b8a821388 <col:46> 'int' 0
|   | |     `-IntegerLiteral 0x28b8a8213e8 <col:49> 'int' 1
|   | `-ImplicitCastExpr 0x28b8a821520 <col:54> 'smallfelem *' <ArrayToPointerDecay>
|   |   `-DeclRefExpr 0x28b8a821480 <col:54> 'smallfelem [32]' lvalue Var 0x28b8a81ad98 'tmp_smallfelems' 'smallfelem [32]'
|   |-LabelStmt 0x28b8a821580 <line:2333:2, col:6> 'done'
|   | `-NullStmt 0x28b8a821578 <col:6>
|   |-BinaryOperator 0x28b8a821658 <line:2335:5, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27> 'NISTP256_PRE_COMP *' '='
|   | |-DeclRefExpr 0x28b8a821598 <.//openssl//file_jk/before\crypto\ec\ecp_nistp256.c:2335:5> 'NISTP256_PRE_COMP *' lvalue Var 0x28b8a81a960 'pre' 'NISTP256_PRE_COMP *'
|   | `-ImplicitCastExpr 0x28b8a821640 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'NISTP256_PRE_COMP *' <NullToPointer>
|   |   `-ParenExpr 0x28b8a821620 <col:17, col:27> 'void *'
|   |     `-CStyleCastExpr 0x28b8a8215f8 <col:18, col:26> 'void *' <NullToPointer>
|   |       `-IntegerLiteral 0x28b8a8215b8 <col:26> 'int' 0
|   |-BinaryOperator 0x28b8a8216d8 <.//openssl//file_jk/before\crypto\ec\ecp_nistp256.c:2336:5, col:11> 'int' '='
|   | |-DeclRefExpr 0x28b8a821678 <col:5> 'int' lvalue Var 0x28b8a81a8a8 'ret' 'int'
|   | `-IntegerLiteral 0x28b8a8216b0 <col:11> 'int' 1
|   |-LabelStmt 0x28b8a821720 <line:2338:2, col:5> 'err'
|   | `-NullStmt 0x28b8a821718 <col:5>
|   |-CallExpr 0x28b8a821830 <line:2342:5, col:34> 'void'
|   | |-ImplicitCastExpr 0x28b8a821818 <col:5> 'void (*)(NISTP256_PRE_COMP *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28b8a821778 <col:5> 'void (NISTP256_PRE_COMP *)' Function 0x28b8a7fcd88 'EC_nistp256_pre_comp_free' 'void (NISTP256_PRE_COMP *)'
|   | `-ImplicitCastExpr 0x28b8a821858 <col:31> 'NISTP256_PRE_COMP *' <LValueToRValue>
|   |   `-DeclRefExpr 0x28b8a821798 <col:31> 'NISTP256_PRE_COMP *' lvalue Var 0x28b8a81a960 'pre' 'NISTP256_PRE_COMP *'
|   `-ReturnStmt 0x28b8a8218a8 <line:2343:5, col:12>
|     `-ImplicitCastExpr 0x28b8a821890 <col:12> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x28b8a821870 <col:12> 'int' lvalue Var 0x28b8a81a8a8 'ret' 'int'
`-FunctionDecl 0x28b8a821a40 <line:2346:1, line:2349:1> line:2346:5 invalid ec_GFp_nistp256_have_precompute_mult 'int (const int *)'
  |-ParmVarDecl 0x28b8a8219a8 <col:42, col:58> col:58 invalid group 'const int *'
  `-CompoundStmt 0x28b8a821ba8 <line:2347:1, line:2349:1>
