TranslationUnitDecl 0x2214ee20a88 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x2214ee21320 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x2214ee21020 '__int128'
|-TypedefDecl 0x2214ee21390 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x2214ee21040 'unsigned __int128'
|-TypedefDecl 0x2214ee216c8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x2214ee21480 'struct __NSConstantString_tag'
|   `-Record 0x2214ee213e8 '__NSConstantString_tag'
|-TypedefDecl 0x2214ee21738 <<invalid sloc>> <invalid sloc> implicit size_t 'unsigned long long'
| `-BuiltinType 0x2214ee20c60 'unsigned long long'
|-TypedefDecl 0x2214ee217d0 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x2214ee21790 'char *'
|   `-BuiltinType 0x2214ee20b20 'char'
|-TypedefDecl 0x2214ee21840 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x2214ee21790 'char *'
|   `-BuiltinType 0x2214ee20b20 'char'
|-TypedefDecl 0x2214ee21900 <D:\Microsoft Visual Studio 12.0\VC\include\vadefs.h:48:1, col:29> col:29 referenced uintptr_t 'unsigned long long'
| `-BuiltinType 0x2214ee20c60 'unsigned long long'
|-TypedefDecl 0x2214ee21970 <line:59:1, col:17> col:17 referenced va_list 'char *'
| `-PointerType 0x2214ee21790 'char *'
|   `-BuiltinType 0x2214ee20b20 'char'
|-FunctionDecl 0x221508ae440 <line:119:21> col:21 implicit __va_start 'void (char **, ...)' extern
| |-ParmVarDecl 0x221508ae4e0 <<invalid sloc>> <invalid sloc> 'char **'
| `-NoThrowAttr 0x221508ae550 <col:21> Implicit
|-FunctionDecl 0x221508ae5a8 prev 0x221508ae440 <col:1, col:46> col:21 __va_start 'void (char **, ...)' extern
| |-ParmVarDecl 0x221508ae2d0 <col:32, col:40> col:41 'va_list *'
| `-NoThrowAttr 0x221508ae698 <col:21> Inherited Implicit
|-TypedefDecl 0x221508ae6d8 prev 0x2214ee21738 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:494:1, col:29> col:29 referenced size_t 'unsigned long long'
| `-BuiltinType 0x2214ee20c60 'unsigned long long'
|-TypedefDecl 0x221508ae780 <line:503:1, col:16> col:16 referenced rsize_t 'size_t':'unsigned long long'
| `-TypedefType 0x221508ae750 'size_t' sugar
|   |-Typedef 0x221508ae6d8 'size_t'
|   `-BuiltinType 0x2214ee20c60 'unsigned long long'
|-TypedefDecl 0x221508ae7f0 <line:510:1, col:29> col:29 intptr_t 'long long'
| `-BuiltinType 0x2214ee20bc0 'long long'
|-TypedefDecl 0x221508ae860 <line:528:1, col:29> col:29 ptrdiff_t 'long long'
| `-BuiltinType 0x2214ee20bc0 'long long'
|-TypedefDecl 0x221508ae8d0 <line:536:1, col:24> col:24 referenced wchar_t 'unsigned short'
| `-BuiltinType 0x2214ee20c00 'unsigned short'
|-TypedefDecl 0x221508ae940 <line:541:1, col:24> col:24 wint_t 'unsigned short'
| `-BuiltinType 0x2214ee20c00 'unsigned short'
|-TypedefDecl 0x221508ae9b0 <line:542:1, col:24> col:24 wctype_t 'unsigned short'
| `-BuiltinType 0x2214ee20c00 'unsigned short'
|-TypedefDecl 0x221508aea20 <line:563:1, col:13> col:13 referenced errno_t 'int'
| `-BuiltinType 0x2214ee20b80 'int'
|-TypedefDecl 0x221508aea90 <line:567:1, col:19> col:19 __time32_t 'long'
| `-BuiltinType 0x2214ee20ba0 'long'
|-TypedefDecl 0x221508aeb00 <line:572:1, col:17> col:17 referenced __time64_t 'long long'
| `-BuiltinType 0x2214ee20bc0 'long long'
|-TypedefDecl 0x221508aeb90 <line:580:1, col:20> col:20 time_t '__time64_t':'long long'
| `-TypedefType 0x221508aeb60 '__time64_t' sugar
|   |-Typedef 0x221508aeb00 '__time64_t'
|   `-BuiltinType 0x2214ee20bc0 'long long'
|-FunctionDecl 0x221508aed08 <line:637:10, col:53> col:23 _invalid_parameter_noinfo 'void (void) __attribute__((cdecl))':'void (void)'
|-FunctionDecl 0x221508aef28 <line:638:10, col:83> col:44 _invalid_parameter_noinfo_noreturn 'void (void) __attribute__((noreturn)) __attribute__((cdecl))':'void (void) __attribute__((noreturn))'
|-FunctionDecl 0x221508e8950 <line:641:9, line:642:136> col:14 _invoke_watson 'void (const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t) __attribute__((noreturn)) __attribute__((cdecl))':'void (const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t) __attribute__((noreturn))'
| |-ParmVarDecl 0x221508af068 <col:40, col:54> col:55 'const wchar_t *'
| |-ParmVarDecl 0x221508af0e0 <col:68, col:82> col:83 'const wchar_t *'
| |-ParmVarDecl 0x221508af158 <col:96, col:110> col:111 'const wchar_t *'
| |-ParmVarDecl 0x221508af1d8 <col:113, col:122> col:125 'unsigned int'
| `-ParmVarDecl 0x221508e86f0 <col:127> col:136 'uintptr_t':'unsigned long long'
|-RecordDecl 0x221508e8a30 <line:2072:1, col:8> col:8 struct threadlocaleinfostruct
|-RecordDecl 0x221508e8af0 <line:2073:1, col:8> col:8 struct threadmbcinfostruct
|-TypedefDecl 0x221508e8c60 <line:2074:1, col:41> col:41 referenced pthreadlocinfo 'struct threadlocaleinfostruct *'
| `-PointerType 0x221508e8c10 'struct threadlocaleinfostruct *'
|   `-ElaboratedType 0x221508e8bb0 'struct threadlocaleinfostruct' sugar
|     `-RecordType 0x221508e8ad0 'struct threadlocaleinfostruct'
|       `-Record 0x221508f0770 'threadlocaleinfostruct'
|-TypedefDecl 0x221508e8d70 <line:2075:1, col:38> col:38 referenced pthreadmbcinfo 'struct threadmbcinfostruct *'
| `-PointerType 0x221508e8d20 'struct threadmbcinfostruct *'
|   `-ElaboratedType 0x221508e8cc0 'struct threadmbcinfostruct' sugar
|     `-RecordType 0x221508e8b90 'struct threadmbcinfostruct'
|       `-Record 0x221508e8af0 'threadmbcinfostruct'
|-RecordDecl 0x221508e8dc8 <line:2076:1, col:8> col:8 struct __lc_time_data
|-RecordDecl 0x221508e8e80 <line:2078:9, line:2082:1> line:2078:16 struct localeinfo_struct definition
| |-MaxFieldAlignmentAttr 0x221508e8f40 <<invalid sloc>> Implicit 64
| |-FieldDecl 0x221508e8fd0 <line:2080:5, col:20> col:20 locinfo 'pthreadlocinfo':'struct threadlocaleinfostruct *'
| `-FieldDecl 0x221508e9060 <line:2081:5, col:20> col:20 mbcinfo 'pthreadmbcinfo':'struct threadmbcinfostruct *'
|-TypedefDecl 0x221508e9118 <line:2078:1, line:2082:3> col:3 _locale_tstruct 'struct localeinfo_struct':'struct localeinfo_struct'
| `-ElaboratedType 0x221508e90c0 'struct localeinfo_struct' sugar
|   `-RecordType 0x221508e8f20 'struct localeinfo_struct'
|     `-Record 0x221508e8e80 'localeinfo_struct'
|-TypedefDecl 0x221508e91f0 <line:2078:1, line:2082:21> col:21 referenced _locale_t 'struct localeinfo_struct *'
| `-PointerType 0x221508e91a0 'struct localeinfo_struct *'
|   `-ElaboratedType 0x221508e90c0 'struct localeinfo_struct' sugar
|     `-RecordType 0x221508e8f20 'struct localeinfo_struct'
|       `-Record 0x221508e8e80 'localeinfo_struct'
|-RecordDecl 0x221508e9268 <line:2085:9, line:2090:1> line:2085:16 struct localerefcount definition
| |-MaxFieldAlignmentAttr 0x221508e9320 <<invalid sloc>> Implicit 64
| |-FieldDecl 0x221508e9398 <line:2086:9, col:15> col:15 locale 'char *'
| |-FieldDecl 0x221508e9458 <line:2087:9, col:18> col:18 wlocale 'wchar_t *'
| |-FieldDecl 0x221508e94f0 <line:2088:9, col:14> col:14 refcount 'int *'
| `-FieldDecl 0x221508e9560 <line:2089:9, col:14> col:14 wrefcount 'int *'
|-TypedefDecl 0x221508e9618 <line:2085:1, line:2090:3> col:3 referenced locrefcount 'struct localerefcount':'struct localerefcount'
| `-ElaboratedType 0x221508e95c0 'struct localerefcount' sugar
|   `-RecordType 0x221508e9300 'struct localerefcount'
|     `-Record 0x221508e9268 'localerefcount'
|-RecordDecl 0x221508f0770 prev 0x221508e8a30 <line:2092:9, line:2111:1> line:2092:16 struct threadlocaleinfostruct definition
| |-MaxFieldAlignmentAttr 0x221508f07f0 <<invalid sloc>> Implicit 64
| |-FieldDecl 0x221508f0868 <line:2093:9, col:13> col:13 refcount 'int'
| |-FieldDecl 0x221508f08d8 <line:2094:9, col:22> col:22 lc_codepage 'unsigned int'
| |-FieldDecl 0x221508f0948 <line:2095:9, col:22> col:22 lc_collate_cp 'unsigned int'
| |-FieldDecl 0x221508f09b8 <line:2096:9, col:22> col:22 lc_time_cp 'unsigned int'
| |-FieldDecl 0x221508f0b78 <line:2097:9, col:34> col:21 lc_category 'locrefcount [6]'
| |-FieldDecl 0x221508f0be8 <line:2098:9, col:13> col:13 lc_clike 'int'
| |-FieldDecl 0x221508f0c58 <line:2099:9, col:13> col:13 mb_cur_max 'int'
| |-FieldDecl 0x221508f0cc8 <line:2100:9, col:15> col:15 lconv_intl_refcount 'int *'
| |-FieldDecl 0x221508f0d38 <line:2101:9, col:15> col:15 lconv_num_refcount 'int *'
| |-FieldDecl 0x221508f0da8 <line:2102:9, col:15> col:15 lconv_mon_refcount 'int *'
| |-RecordDecl 0x221508f0e00 parent 0x2214ee20a88 <line:2103:9, col:16> col:16 struct lconv
| |-FieldDecl 0x221508f0f90 <col:9, col:24> col:24 lconv 'struct lconv *'
| |-FieldDecl 0x221508f1000 <line:2104:9, col:15> col:15 ctype1_refcount 'int *'
| |-FieldDecl 0x221508f1070 <line:2105:9, col:26> col:26 ctype1 'unsigned short *'
| |-FieldDecl 0x221508f10e0 <line:2106:9, col:32> col:32 pctype 'const unsigned short *'
| |-FieldDecl 0x221508f1180 <line:2107:9, col:31> col:31 pclmap 'const unsigned char *'
| |-FieldDecl 0x221508f11f0 <line:2108:9, col:31> col:31 pcumap 'const unsigned char *'
| |-FieldDecl 0x221508f1300 <line:2109:9, col:33> col:33 lc_time_curr 'struct __lc_time_data *'
| `-FieldDecl 0x221508f1438 <line:2110:9, col:32> col:19 locale_name 'wchar_t *[6]'
|-TypedefDecl 0x221508f14e8 <line:2092:1, line:2111:3> col:3 threadlocinfo 'struct threadlocaleinfostruct':'struct threadlocaleinfostruct'
| `-ElaboratedType 0x221508f1490 'struct threadlocaleinfostruct' sugar
|   `-RecordType 0x221508e8ad0 'struct threadlocaleinfostruct'
|     `-Record 0x221508f0770 'threadlocaleinfostruct'
|-FunctionDecl 0x221508e9910 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:47:9, col:142> col:25 _memccpy 'void *(void *, const void *, int, size_t) __attribute__((cdecl))':'void *(void *, const void *, int, size_t)'
| |-ParmVarDecl 0x221508f1570 <col:69, col:76> col:76 _Dst 'void *'
| |-ParmVarDecl 0x221508f1620 <col:87, col:100> col:100 _Src 'const void *'
| |-ParmVarDecl 0x221508f16a0 <col:111, col:115> col:115 _Val 'int'
| `-ParmVarDecl 0x221508e9700 <col:126, col:133> col:133 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x221508e9cd8 <line:48:54> col:54 implicit memchr 'void *(const void *, int, unsigned long long)' extern
| |-ParmVarDecl 0x221508e9d78 <<invalid sloc>> <invalid sloc> 'const void *'
| |-ParmVarDecl 0x221508e9de0 <<invalid sloc>> <invalid sloc> 'int'
| `-ParmVarDecl 0x221508e9e48 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x221508e9ec8 prev 0x221508e9cd8 <col:38, col:150> col:54 memchr 'void *(const void *, int, unsigned long long)'
| |-ParmVarDecl 0x221508e9a00 <col:94, col:107> col:107 _Buf 'const void *'
| |-ParmVarDecl 0x221508e9a80 <col:119, col:123> col:123 _Val 'int'
| `-ParmVarDecl 0x221508e9af8 <col:134, col:141> col:141 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x221508ea288 <line:49:24, col:162> col:40 _memicmp 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
| |-ParmVarDecl 0x221508e9fb0 <col:77, col:90> col:90 _Buf1 'const void *'
| |-ParmVarDecl 0x221508ea030 <col:125, col:138> col:138 _Buf2 'const void *'
| `-ParmVarDecl 0x221508ea0a8 <col:150, col:157> col:157 _Size 'size_t':'unsigned long long'
|-FunctionDecl 0x221508f6820 <line:50:24, col:192> col:40 _memicmp_l 'int (const void *, const void *, size_t, _locale_t) __attribute__((cdecl))':'int (const void *, const void *, size_t, _locale_t)'
| |-ParmVarDecl 0x221508ea370 <col:79, col:92> col:92 _Buf1 'const void *'
| |-ParmVarDecl 0x221508ea3f0 <col:127, col:140> col:140 _Buf2 'const void *'
| |-ParmVarDecl 0x221508ea468 <col:152, col:159> col:159 _Size 'size_t':'unsigned long long'
| `-ParmVarDecl 0x221508ea500 <col:175, col:185> col:185 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x221508f6b28 <line:51:32> col:32 implicit memcmp 'int (const void *, const void *, unsigned long long)' extern
| |-ParmVarDecl 0x221508f6bc8 <<invalid sloc>> <invalid sloc> 'const void *'
| |-ParmVarDecl 0x221508f6c30 <<invalid sloc>> <invalid sloc> 'const void *'
| `-ParmVarDecl 0x221508f6c98 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x221508f6d18 prev 0x221508f6b28 <col:16, col:144> col:32 memcmp 'int (const void *, const void *, unsigned long long)'
| |-ParmVarDecl 0x221508f6910 <col:63, col:76> col:76 _Buf1 'const void *'
| |-ParmVarDecl 0x221508f6990 <col:107, col:120> col:120 _Buf2 'const void *'
| `-ParmVarDecl 0x221508f6a08 <col:132, col:139> col:139 _Size 'size_t':'unsigned long long'
|-FunctionDecl 0x221508f70d8 <line:55:17> col:17 implicit used memcpy 'void *(void *, const void *, unsigned long long)' extern
| |-ParmVarDecl 0x221508f7178 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x221508f71e0 <<invalid sloc>> <invalid sloc> 'const void *'
| `-ParmVarDecl 0x221508f7248 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x221508f72c8 prev 0x221508f70d8 <col:1, col:127> col:17 used memcpy 'void *(void *, const void *, unsigned long long)'
| |-ParmVarDecl 0x221508f6e00 <col:54, col:61> col:61 _Dst 'void *'
| |-ParmVarDecl 0x221508f6e80 <col:91, col:104> col:104 _Src 'const void *'
| `-ParmVarDecl 0x221508f6ef8 <col:115, col:122> col:122 _Size 'size_t':'unsigned long long'
|-FunctionDecl 0x221508f87f0 <line:57:9, col:191> col:26 memcpy_s 'errno_t (void *, rsize_t, const void *, rsize_t) __attribute__((cdecl))':'errno_t (void *, rsize_t, const void *, rsize_t)'
| |-ParmVarDecl 0x221508f73d8 <col:82, col:89> col:89 _Dst 'void *'
| |-ParmVarDecl 0x221508f7470 <col:100, col:108> col:108 _DstSize 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x221508f74f0 <col:150, col:163> col:163 _Src 'const void *'
| `-ParmVarDecl 0x221508f7568 <col:174, col:182> col:182 _MaxCount 'rsize_t':'unsigned long long'
|-FunctionDecl 0x221508f8bb8 <line:94:25> col:25 implicit used memset 'void *(void *, int, unsigned long long)' extern
| |-ParmVarDecl 0x221508f8c58 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x221508f8cc0 <<invalid sloc>> <invalid sloc> 'int'
| `-ParmVarDecl 0x221508f8d28 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x221508f8da8 prev 0x221508f8bb8 <col:9, col:107> col:25 used memset 'void *(void *, int, unsigned long long)'
| |-ParmVarDecl 0x221508f88e0 <col:62, col:69> col:69 _Dst 'void *'
| |-ParmVarDecl 0x221508f8960 <col:80, col:84> col:84 _Val 'int'
| `-ParmVarDecl 0x221508f89d8 <col:95, col:102> col:102 _Size 'size_t':'unsigned long long'
|-FunctionDecl 0x221508f9228 <line:98:57> col:57 implicit memccpy 'void *(void *, const void *, int, unsigned long long)' extern
| |-ParmVarDecl 0x221508f92c8 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x221508f9330 <<invalid sloc>> <invalid sloc> 'const void *'
| |-ParmVarDecl 0x221508f9398 <<invalid sloc>> <invalid sloc> 'int'
| `-ParmVarDecl 0x221508f9400 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x221508f9488 prev 0x221508f9228 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:98:187> col:57 memccpy 'void *(void *, const void *, int, unsigned long long)'
| |-ParmVarDecl 0x221508f8f70 <col:95, col:102> col:102 _Dst 'void *'
| |-ParmVarDecl 0x221508f8ff0 <col:136, col:149> col:149 _Src 'const void *'
| |-ParmVarDecl 0x221508f9070 <col:160, col:164> col:164 _Val 'int'
| |-ParmVarDecl 0x221508f90e8 <col:175, col:182> col:182 _Size 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x221508f9548 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _memccpy. See online help for details." ""
|-FunctionDecl 0x221508f7978 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:99:190> col:69 memicmp 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
| |-ParmVarDecl 0x221508f9710 <col:105, col:118> col:118 _Buf1 'const void *'
| |-ParmVarDecl 0x221508f77e0 <col:153, col:166> col:166 _Buf2 'const void *'
| |-ParmVarDecl 0x221508f7858 <col:178, col:185> col:185 _Size 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x221508f7a30 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _memicmp. See online help for details." ""
|-FunctionDecl 0x221508f7e20 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:105:40, col:144> col:56 _strset_s 'errno_t (char *, size_t, int) __attribute__((cdecl))':'errno_t (char *, size_t, int)'
| |-ParmVarDecl 0x221508f7b58 <col:94, col:101> col:101 _Dst 'char *'
| |-ParmVarDecl 0x221508f7bd0 <col:112, col:119> col:119 _DstSize 'size_t':'unsigned long long'
| `-ParmVarDecl 0x221508f7c50 <col:134, col:138> col:138 _Value 'int'
|-FunctionDecl 0x221508f81f0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:107:88 _strset 'char *(char *, int) __attribute__((cdecl))':'char *(char *, int)'
| |-ParmVarDecl 0x221508f8000 <col:108, col:114> col:114 _Dest 'char *'
| |-ParmVarDecl 0x221508f8080 <col:126, col:131> col:131 _Value 'int'
| `-DeprecatedAttr 0x221508f82a0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _strset_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x221508f86b0 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:109:40, col:158> col:56 strcpy_s 'errno_t (char *, rsize_t, const char *) __attribute__((cdecl))':'errno_t (char *, rsize_t, const char *)'
| |-ParmVarDecl 0x221508f83e8 <col:94, col:101> col:101 _Dst 'char *'
| |-ParmVarDecl 0x221508f8460 <col:112, col:120> col:120 _SizeInBytes 'rsize_t':'unsigned long long'
| `-ParmVarDecl 0x221508f84e0 <col:141, col:154> col:154 _Src 'const char *'
|-FunctionDecl 0x221508f4a70 <line:112:88> col:88 implicit strcpy 'char *(char *, const char *)' extern
| |-ParmVarDecl 0x221508f4b10 <<invalid sloc>> <invalid sloc> 'char *'
| `-ParmVarDecl 0x221508f4b78 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x221508f4bf0 prev 0x221508f4a70 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:112:88 strcpy 'char *(char *, const char *)'
| |-ParmVarDecl 0x221508f4888 <col:142, col:148> col:148 _Dest 'char *'
| |-ParmVarDecl 0x221508f4908 <col:162, col:176> col:176 _Source 'const char *'
| `-DeprecatedAttr 0x221508f4ca0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using strcpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x221508f4ff8 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:114:40, col:161> col:56 strcat_s 'errno_t (char *, rsize_t, const char *) __attribute__((cdecl))':'errno_t (char *, rsize_t, const char *)'
| |-ParmVarDecl 0x221508f4de8 <col:97, col:104> col:104 _Dst 'char *'
| |-ParmVarDecl 0x221508f4e60 <col:115, col:123> col:123 _SizeInBytes 'rsize_t':'unsigned long long'
| `-ParmVarDecl 0x221508f4ee0 <col:144, col:157> col:157 _Src 'const char *'
|-FunctionDecl 0x221508f5320 <line:118:88> col:88 implicit strcat 'char *(char *, const char *)' extern
| |-ParmVarDecl 0x221508f53c0 <<invalid sloc>> <invalid sloc> 'char *'
| `-ParmVarDecl 0x221508f5428 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x221508f54a0 prev 0x221508f5320 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:118:88 strcat 'char *(char *, const char *)'
| |-ParmVarDecl 0x221508f51a0 <col:170, col:176> col:176 _Dest 'char *'
| |-ParmVarDecl 0x221508f5220 <col:190, col:204> col:204 _Source 'const char *'
| `-DeprecatedAttr 0x221508f5550 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using strcat_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x221508f5890 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:120:32> col:32 implicit strcmp 'int (const char *, const char *)' extern
| |-ParmVarDecl 0x221508f5930 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x221508f5998 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x221508f5a10 prev 0x221508f5890 <col:16, col:91> col:32 strcmp 'int (const char *, const char *)'
| |-ParmVarDecl 0x221508f5698 <col:46, col:59> col:59 _Str1 'const char *'
| `-ParmVarDecl 0x221508f5718 <col:73, col:86> col:86 _Str2 'const char *'
|-FunctionDecl 0x221508f5c60 <line:121:32> col:32 implicit strlen 'unsigned long long (const char *)' extern
| `-ParmVarDecl 0x221508f5d00 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x221508f5d70 prev 0x221508f5c60 <col:16, col:63> col:32 strlen 'unsigned long long (const char *)'
| `-ParmVarDecl 0x221508f5af0 <col:46, col:59> col:59 _Str 'const char *'
|-FunctionDecl 0x221508f6068 <line:125:1, col:92> col:17 used strnlen 'size_t (const char *, size_t) __attribute__((cdecl))':'size_t (const char *, size_t)'
| |-ParmVarDecl 0x221508f5e48 <col:52, col:65> col:65 _Str 'const char *'
| `-ParmVarDecl 0x221508f5ec0 <col:76, col:83> col:83 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x221508f62b8 <line:127:16, line:133:1> line:130:19 strnlen_s 'size_t (const char *, size_t) __attribute__((cdecl))':'size_t (const char *, size_t)' static inline
| |-ParmVarDecl 0x221508f6148 <col:56, col:69> col:69 used _Str 'const char *'
| |-ParmVarDecl 0x221508f61c0 <col:80, col:87> col:87 used _MaxCount 'size_t':'unsigned long long'
| `-CompoundStmt 0x221508f65e8 <line:131:1, line:133:1>
|   `-ReturnStmt 0x221508f65d8 <line:132:5, col:51>
|     `-ConditionalOperator 0x221508f65a8 <col:12, col:51> 'unsigned long long'
|       |-ParenExpr 0x221508f6418 <col:12, col:20> 'int'
|       | `-BinaryOperator 0x221508f63f8 <col:13, col:19> 'int' '=='
|       |   |-ImplicitCastExpr 0x221508f63c8 <col:13> 'const char *' <LValueToRValue>
|       |   | `-DeclRefExpr 0x221508f6380 <col:13> 'const char *' lvalue ParmVar 0x221508f6148 '_Str' 'const char *'
|       |   `-ImplicitCastExpr 0x221508f63e0 <col:19> 'const char *' <NullToPointer>
|       |     `-IntegerLiteral 0x221508f63a0 <col:19> 'int' 0
|       |-ImplicitCastExpr 0x221508f6590 <col:24> 'unsigned long long' <IntegralCast>
|       | `-IntegerLiteral 0x221508f6438 <col:24> 'int' 0
|       `-CallExpr 0x221508f6530 <col:28, col:51> 'size_t':'unsigned long long'
|         |-ImplicitCastExpr 0x221508f6518 <col:28> 'size_t (*)(const char *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x221508f6460 <col:28> 'size_t (const char *, size_t) __attribute__((cdecl))':'size_t (const char *, size_t)' Function 0x221508f6068 'strnlen' 'size_t (const char *, size_t) __attribute__((cdecl))':'size_t (const char *, size_t)'
|         |-ImplicitCastExpr 0x221508f6560 <col:36> 'const char *' <LValueToRValue>
|         | `-DeclRefExpr 0x221508f6480 <col:36> 'const char *' lvalue ParmVar 0x221508f6148 '_Str' 'const char *'
|         `-ImplicitCastExpr 0x221508f6578 <col:42> 'size_t':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x221508f64a0 <col:42> 'size_t':'unsigned long long' lvalue ParmVar 0x221508f61c0 '_MaxCount' 'size_t':'unsigned long long'
|-FunctionDecl 0x221508f9938 <line:136:28, col:209> col:44 memmove_s 'errno_t (void *, rsize_t, const void *, rsize_t) __attribute__((cdecl))':'errno_t (void *, rsize_t, const void *, rsize_t)'
| |-ParmVarDecl 0x221508f6618 <col:100, col:107> col:107 _Dst 'void *'
| |-ParmVarDecl 0x221508f6690 <col:118, col:126> col:126 _DstSize 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x221508f6710 <col:168, col:181> col:181 _Src 'const void *'
| `-ParmVarDecl 0x221508f9800 <col:192, col:200> col:200 _MaxCount 'rsize_t':'unsigned long long'
|-FunctionDecl 0x221508f9c40 <line:139:67> col:67 implicit memmove 'void *(void *, const void *, unsigned long long)' extern
| |-ParmVarDecl 0x221508f9ce0 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x221508f9d48 <<invalid sloc>> <invalid sloc> 'const void *'
| `-ParmVarDecl 0x221508f9db0 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x221508f9e30 prev 0x221508f9c40 <col:51, col:186> col:67 memmove 'void *(void *, const void *, unsigned long long)'
| |-ParmVarDecl 0x221508f9a28 <col:109, col:116> col:116 _Dst 'void *'
| |-ParmVarDecl 0x221508f9aa8 <col:150, col:163> col:163 _Src 'const void *'
| `-ParmVarDecl 0x221508f9b20 <col:174, col:181> col:181 _Size 'size_t':'unsigned long long'
|-FunctionDecl 0x221508fa068 <line:146:24, col:76> col:40 _strdup 'char *(const char *) __attribute__((cdecl))':'char *(const char *)'
| `-ParmVarDecl 0x221508f9f18 <col:59, col:72> col:72 _Src 'const char *'
|-FunctionDecl 0x221508fa330 <line:152:54> col:54 implicit strchr 'char *(const char *, int)' extern
| |-ParmVarDecl 0x221508fa3d0 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x221508fa438 <<invalid sloc>> <invalid sloc> 'int'
|-FunctionDecl 0x221508fa4b0 prev 0x221508fa330 <col:38, col:100> col:54 strchr 'char *(const char *, int)'
| |-ParmVarDecl 0x221508fa140 <col:68, col:81> col:81 _Str 'const char *'
| `-ParmVarDecl 0x221508fa1c0 <col:92, col:96> col:96 _Val 'int'
|-FunctionDecl 0x221508fa710 <line:153:24, col:103> col:40 _stricmp 'int (const char *, const char *) __attribute__((cdecl))':'int (const char *, const char *)'
| |-ParmVarDecl 0x221508fa590 <col:57, col:70> col:70 _Str1 'const char *'
| `-ParmVarDecl 0x221508fa610 <col:85, col:98> col:98 _Str2 'const char *'
|-FunctionDecl 0x221508f2910 <line:154:24, col:103> col:40 _strcmpi 'int (const char *, const char *) __attribute__((cdecl))':'int (const char *, const char *)'
| |-ParmVarDecl 0x221508f2790 <col:57, col:70> col:70 _Str1 'const char *'
| `-ParmVarDecl 0x221508f2810 <col:85, col:98> col:98 _Str2 'const char *'
|-FunctionDecl 0x221508f2cc8 <line:155:24, col:133> col:40 _stricmp_l 'int (const char *, const char *, _locale_t) __attribute__((cdecl))':'int (const char *, const char *, _locale_t)'
| |-ParmVarDecl 0x221508f29f0 <col:59, col:72> col:72 _Str1 'const char *'
| |-ParmVarDecl 0x221508f2a70 <col:87, col:100> col:100 _Str2 'const char *'
| `-ParmVarDecl 0x221508f2ae8 <col:116, col:126> col:126 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x221508f2f30 <line:156:24, col:103> col:40 strcoll 'int (const char *, const char *) __attribute__((cdecl))':'int (const char *, const char *)'
| |-ParmVarDecl 0x221508f2db0 <col:56, col:69> col:69 _Str1 'const char *'
| `-ParmVarDecl 0x221508f2e30 <col:84, col:98> col:98 _Str2 'const char *'
|-FunctionDecl 0x221508f3228 <line:157:24, col:133> col:40 _strcoll_l 'int (const char *, const char *, _locale_t) __attribute__((cdecl))':'int (const char *, const char *, _locale_t)'
| |-ParmVarDecl 0x221508f3010 <col:59, col:72> col:72 _Str1 'const char *'
| |-ParmVarDecl 0x221508f3090 <col:87, col:100> col:100 _Str2 'const char *'
| `-ParmVarDecl 0x221508f3108 <col:116, col:126> col:126 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x221508f3490 <line:158:24, col:104> col:40 _stricoll 'int (const char *, const char *) __attribute__((cdecl))':'int (const char *, const char *)'
| |-ParmVarDecl 0x221508f3310 <col:58, col:71> col:71 _Str1 'const char *'
| `-ParmVarDecl 0x221508f3390 <col:86, col:99> col:99 _Str2 'const char *'
|-FunctionDecl 0x221508fa810 <line:159:24, col:134> col:40 _stricoll_l 'int (const char *, const char *, _locale_t) __attribute__((cdecl))':'int (const char *, const char *, _locale_t)'
| |-ParmVarDecl 0x221508f3570 <col:60, col:73> col:73 _Str1 'const char *'
| |-ParmVarDecl 0x221508f35f0 <col:88, col:101> col:101 _Str2 'const char *'
| `-ParmVarDecl 0x221508f3668 <col:117, col:127> col:127 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x221508fabc8 <line:160:24, col:167> col:40 _strncoll 'int (const char *, const char *, size_t) __attribute__((cdecl))':'int (const char *, const char *, size_t)'
| |-ParmVarDecl 0x221508fa8f8 <col:79, col:92> col:92 _Str1 'const char *'
| |-ParmVarDecl 0x221508fa978 <col:126, col:139> col:139 _Str2 'const char *'
| `-ParmVarDecl 0x221508fa9f0 <col:151, col:158> col:158 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x221508fb030 <line:161:24, col:195> col:40 _strncoll_l 'int (const char *, const char *, size_t, _locale_t) __attribute__((cdecl))':'int (const char *, const char *, size_t, _locale_t)'
| |-ParmVarDecl 0x221508facb0 <col:79, col:92> col:92 _Str1 'const char *'
| |-ParmVarDecl 0x221508fad30 <col:126, col:139> col:139 _Str2 'const char *'
| |-ParmVarDecl 0x221508fada8 <col:151, col:158> col:158 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x221508fae20 <col:178, col:188> col:188 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x221508fb338 <line:162:24, col:167> col:40 _strnicoll 'int (const char *, const char *, size_t) __attribute__((cdecl))':'int (const char *, const char *, size_t)'
| |-ParmVarDecl 0x221508fb120 <col:79, col:92> col:92 _Str1 'const char *'
| |-ParmVarDecl 0x221508fb1a0 <col:126, col:139> col:139 _Str2 'const char *'
| `-ParmVarDecl 0x221508fb218 <col:151, col:158> col:158 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x221508fb6d0 <line:163:24, col:196> col:40 _strnicoll_l 'int (const char *, const char *, size_t, _locale_t) __attribute__((cdecl))':'int (const char *, const char *, size_t, _locale_t)'
| |-ParmVarDecl 0x221508fb420 <col:80, col:93> col:93 _Str1 'const char *'
| |-ParmVarDecl 0x221508fb4a0 <col:127, col:140> col:140 _Str2 'const char *'
| |-ParmVarDecl 0x221508fb518 <col:152, col:159> col:159 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x221508fb590 <col:179, col:189> col:189 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x221508f39c8 <line:164:40> col:40 implicit strcspn 'unsigned long long (const char *, const char *)' extern
| |-ParmVarDecl 0x221508f3a68 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x221508f3ad0 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x221508f3b48 prev 0x221508f39c8 <col:24, col:104> col:40 strcspn 'unsigned long long (const char *, const char *)'
| |-ParmVarDecl 0x221508f37a0 <col:56, col:69> col:69 _Str 'const char *'
| `-ParmVarDecl 0x221508f3820 <col:83, col:96> col:96 _Control 'const char *'
|-FunctionDecl 0x221508f3e00 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:165:118> col:77 _strerror 'char *(const char *) __attribute__((cdecl))':'char *(const char *)'
| |-ParmVarDecl 0x221508f3d20 <col:98, col:111> col:111 _ErrMsg 'const char *'
| `-DeprecatedAttr 0x221508f3ea8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _strerror_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x221508f4280 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:166:28, col:155> col:44 _strerror_s 'errno_t (char *, size_t, const char *) __attribute__((cdecl))':'errno_t (char *, size_t, const char *)'
| |-ParmVarDecl 0x221508f3ff0 <col:85, col:92> col:92 _Buf 'char *'
| |-ParmVarDecl 0x221508f4068 <col:103, col:110> col:110 _SizeInBytes 'size_t':'unsigned long long'
| `-ParmVarDecl 0x221508f40e8 <col:135, col:148> col:148 _ErrMsg 'const char *'
|-FunctionDecl 0x221508f4598 <line:168:76> col:76 implicit strerror 'char *(int)' extern
| `-ParmVarDecl 0x221508f4638 <<invalid sloc>> <invalid sloc> 'int'
|-FunctionDecl 0x221508f46a8 prev 0x221508f4598 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:168:93> col:76 strerror 'char *(int)'
| |-ParmVarDecl 0x221508f4460 <col:90> col:93 'int'
| `-DeprecatedAttr 0x221508f4750 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using strerror_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x221508fbb30 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:170:28, col:139> col:44 strerror_s 'errno_t (char *, size_t, int) __attribute__((cdecl))':'errno_t (char *, size_t, int)'
| |-ParmVarDecl 0x221508fb920 <col:84, col:91> col:91 _Buf 'char *'
| |-ParmVarDecl 0x221508fb998 <col:102, col:109> col:109 _SizeInBytes 'size_t':'unsigned long long'
| `-ParmVarDecl 0x221508fba18 <col:128, col:132> col:132 _ErrNum 'int'
|-FunctionDecl 0x221508fbe38 <line:173:28, col:109> col:44 _strlwr_s 'errno_t (char *, size_t) __attribute__((cdecl))':'errno_t (char *, size_t)'
| |-ParmVarDecl 0x221508fbc18 <col:79, col:86> col:86 _Str 'char *'
| `-ParmVarDecl 0x221508fbc90 <col:97, col:104> col:104 _Size 'size_t':'unsigned long long'
|-FunctionDecl 0x221508fc128 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1933:117> D:\Microsoft Visual Studio 12.0\VC\include\string.h:175:79 _strlwr 'char *(char *) __attribute__((cdecl))':'char *(char *)'
| |-ParmVarDecl 0x221508fbfd8 <col:99, col:105> col:105 _String 'char *'
| `-DeprecatedAttr 0x221508fc1d0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _strlwr_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x221508fc5e0 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:176:28, col:139> col:44 _strlwr_s_l 'errno_t (char *, size_t, _locale_t) __attribute__((cdecl))':'errno_t (char *, size_t, _locale_t)'
| |-ParmVarDecl 0x221508fc318 <col:81, col:88> col:88 _Str 'char *'
| |-ParmVarDecl 0x221508fc390 <col:99, col:106> col:106 _Size 'size_t':'unsigned long long'
| `-ParmVarDecl 0x221508fc408 <col:122, col:132> col:132 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x221508fc9e0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:178:82 _strlwr_l 'char *(char *, _locale_t) __attribute__((cdecl))':'char *(char *, _locale_t)'
| |-ParmVarDecl 0x221508fc788 <col:148, col:154> col:154 _String 'char *'
| |-ParmVarDecl 0x221508fc830 <col:172, col:183> col:183 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x221508fca90 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _strlwr_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x221508fcf48 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:180:40, col:206> col:56 strncat_s 'errno_t (char *, rsize_t, const char *, rsize_t) __attribute__((cdecl))':'errno_t (char *, rsize_t, const char *, rsize_t)'
| |-ParmVarDecl 0x221508fcbd8 <col:98, col:105> col:105 _Dst 'char *'
| |-ParmVarDecl 0x221508fcc50 <col:116, col:124> col:124 _SizeInBytes 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x221508fccd0 <col:165, col:178> col:178 _Src 'const char *'
| `-ParmVarDecl 0x221508fcd48 <col:189, col:197> col:197 _MaxCount 'rsize_t':'unsigned long long'
|-FunctionDecl 0x221508fd3c8 <line:186:83> col:83 implicit strncat 'char *(char *, const char *, unsigned long long)' extern
| |-ParmVarDecl 0x221508fd468 <<invalid sloc>> <invalid sloc> 'char *'
| |-ParmVarDecl 0x221508fd4d0 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x221508fd538 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x221508fd5b8 prev 0x221508fd3c8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1980:149> D:\Microsoft Visual Studio 12.0\VC\include\string.h:186:83 strncat 'char *(char *, const char *, unsigned long long)'
| |-ParmVarDecl 0x221508fd0f8 <col:161, col:167> col:167 _Dest 'char *'
| |-ParmVarDecl 0x221508fd178 <col:198, col:212> col:212 _Source 'const char *'
| |-ParmVarDecl 0x221508fd1f0 <col:226, col:234> col:234 _Count 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x221508fd670 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using strncat_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x221508ffa10 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:188:40> col:40 implicit strncmp 'int (const char *, const char *, unsigned long long)' extern
| |-ParmVarDecl 0x221508ffab0 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x221508ffb18 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x221508ffb80 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x221508ffc00 prev 0x221508ffa10 <col:24, col:163> col:40 strncmp 'int (const char *, const char *, unsigned long long)'
| |-ParmVarDecl 0x221508fd7b8 <col:75, col:88> col:88 _Str1 'const char *'
| |-ParmVarDecl 0x221508ff878 <col:122, col:135> col:135 _Str2 'const char *'
| `-ParmVarDecl 0x221508ff8f0 <col:147, col:154> col:154 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x221508fff00 <line:189:24, col:165> col:40 _strnicmp 'int (const char *, const char *, size_t) __attribute__((cdecl))':'int (const char *, const char *, size_t)'
| |-ParmVarDecl 0x221508ffce8 <col:77, col:90> col:90 _Str1 'const char *'
| |-ParmVarDecl 0x221508ffd68 <col:124, col:137> col:137 _Str2 'const char *'
| `-ParmVarDecl 0x221508ffde0 <col:149, col:156> col:156 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x22150900298 <line:190:24, col:195> col:40 _strnicmp_l 'int (const char *, const char *, size_t, _locale_t) __attribute__((cdecl))':'int (const char *, const char *, size_t, _locale_t)'
| |-ParmVarDecl 0x221508fffe8 <col:79, col:92> col:92 _Str1 'const char *'
| |-ParmVarDecl 0x22150900068 <col:126, col:139> col:139 _Str2 'const char *'
| |-ParmVarDecl 0x221509000e0 <col:151, col:158> col:158 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x22150900158 <col:178, col:188> col:188 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x22150900630 <line:192:40, col:203> col:56 strncpy_s 'errno_t (char *, rsize_t, const char *, rsize_t) __attribute__((cdecl))':'errno_t (char *, rsize_t, const char *, rsize_t)'
| |-ParmVarDecl 0x22150900388 <col:95, col:102> col:102 _Dst 'char *'
| |-ParmVarDecl 0x22150900400 <col:113, col:121> col:121 _SizeInBytes 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x22150900480 <col:162, col:175> col:175 _Src 'const char *'
| `-ParmVarDecl 0x221509004f8 <col:186, col:194> col:194 _MaxCount 'rsize_t':'unsigned long long'
|-FunctionDecl 0x221508fd9d8 <line:195:83> col:83 implicit strncpy 'char *(char *, const char *, unsigned long long)' extern
| |-ParmVarDecl 0x221508fda78 <<invalid sloc>> <invalid sloc> 'char *'
| |-ParmVarDecl 0x221508fdae0 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x221508fdb48 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x221508fdbc8 prev 0x221508fd9d8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1980:149> D:\Microsoft Visual Studio 12.0\VC\include\string.h:195:83 strncpy 'char *(char *, const char *, unsigned long long)'
| |-ParmVarDecl 0x221509007e0 <col:167, col:173> col:173 _Dest 'char *'
| |-ParmVarDecl 0x221508fd840 <col:204, col:218> col:218 _Source 'const char *'
| |-ParmVarDecl 0x221508fd8b8 <col:232, col:240> col:240 _Count 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x221508fdc80 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using strncpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x221508fe138 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:196:40, col:174> col:56 _strnset_s 'errno_t (char *, size_t, int, size_t) __attribute__((cdecl))':'errno_t (char *, size_t, int, size_t)'
| |-ParmVarDecl 0x221508fddc8 <col:99, col:106> col:106 _Str 'char *'
| |-ParmVarDecl 0x221508fde40 <col:117, col:124> col:124 _SizeInBytes 'size_t':'unsigned long long'
| |-ParmVarDecl 0x221508fdec0 <col:143, col:147> col:147 _Val 'int'
| `-ParmVarDecl 0x221508fdf38 <col:158, col:165> col:165 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x221508fe5b8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1980:149> D:\Microsoft Visual Studio 12.0\VC\include\string.h:198:83 _strnset 'char *(char *, int, size_t) __attribute__((cdecl))':'char *(char *, int, size_t)'
| |-ParmVarDecl 0x221508fe2e8 <col:163, col:169> col:169 _Dest 'char *'
| |-ParmVarDecl 0x221508fe368 <col:181, col:186> col:186 _Val 'int'
| |-ParmVarDecl 0x221508fe3e0 <col:197, col:205> col:205 _Count 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x221508fe670 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _strnset_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x221508fe9c0 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:199:54> col:54 implicit strpbrk 'char *(const char *, const char *)' extern
| |-ParmVarDecl 0x221508fea60 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x221508feac8 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x221508feb40 prev 0x221508fe9c0 <col:38, col:116> col:54 strpbrk 'char *(const char *, const char *)'
| |-ParmVarDecl 0x221508fe7b8 <col:69, col:82> col:82 _Str 'const char *'
| `-ParmVarDecl 0x221508fe850 <col:95, col:108> col:108 _Control 'const char *'
|-FunctionDecl 0x221508feda0 <line:200:54> col:54 implicit strrchr 'char *(const char *, int)' extern
| |-ParmVarDecl 0x221508fee40 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x221508feea8 <<invalid sloc>> <invalid sloc> 'int'
|-FunctionDecl 0x221508fef20 prev 0x221508feda0 <col:38, col:100> col:54 strrchr 'char *(const char *, int)'
| |-ParmVarDecl 0x221508fec20 <col:69, col:82> col:82 _Str 'const char *'
| `-ParmVarDecl 0x221508feca0 <col:93, col:97> col:97 _Ch 'int'
|-FunctionDecl 0x221508ff0e0 <line:201:9, col:54> col:25 _strrev 'char *(char *) __attribute__((cdecl))':'char *(char *)'
| `-ParmVarDecl 0x221508ff000 <col:43, col:50> col:50 _Str 'char *'
|-FunctionDecl 0x221508ff330 <line:202:40> col:40 implicit strspn 'unsigned long long (const char *, const char *)' extern
| |-ParmVarDecl 0x221508ff3d0 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x221508ff438 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x221508ff4b0 prev 0x221508ff330 <col:24, col:101> col:40 strspn 'unsigned long long (const char *, const char *)'
| |-ParmVarDecl 0x221508ff1b8 <col:54, col:67> col:67 _Str 'const char *'
| `-ParmVarDecl 0x221508ff238 <col:80, col:93> col:93 _Control 'const char *'
|-FunctionDecl 0x221508ff710 <line:203:70> col:70 implicit strstr 'char *(const char *, const char *)' extern
| |-ParmVarDecl 0x221508ff7b0 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x22150974f50 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x22150974fc8 prev 0x221508ff710 <col:54, col:130> col:70 strstr 'char *(const char *, const char *)'
| |-ParmVarDecl 0x221508ff590 <col:84, col:97> col:97 _Str 'const char *'
| `-ParmVarDecl 0x221508ff610 <col:110, col:123> col:123 _SubStr 'const char *'
|-FunctionDecl 0x221509752e8 <line:204:74> col:74 implicit strtok 'char *(char *, const char *)' extern
| |-ParmVarDecl 0x22150975388 <<invalid sloc>> <invalid sloc> 'char *'
| `-ParmVarDecl 0x221509753f0 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x22150975468 prev 0x221509752e8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:204:134> col:74 strtok 'char *(char *, const char *)'
| |-ParmVarDecl 0x22150975168 <col:95, col:102> col:102 _Str 'char *'
| |-ParmVarDecl 0x221509751e8 <col:115, col:128> col:128 _Delim 'const char *'
| `-DeprecatedAttr 0x22150975518 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using strtok_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x221509758f8 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:206:36, col:162> col:52 strtok_s 'char *(char *, const char *, char **) __attribute__((cdecl))':'char *(char *, const char *, char **)'
| |-ParmVarDecl 0x22150975660 <col:75, col:82> col:82 _Str 'char *'
| |-ParmVarDecl 0x221509756e0 <col:95, col:108> col:108 _Delim 'const char *'
| `-ParmVarDecl 0x22150975760 <col:146, col:154> col:154 _Context 'char **'
|-FunctionDecl 0x22150975b50 <line:208:28, col:109> col:44 _strupr_s 'errno_t (char *, size_t) __attribute__((cdecl))':'errno_t (char *, size_t)'
| |-ParmVarDecl 0x221509759e0 <col:79, col:86> col:86 _Str 'char *'
| `-ParmVarDecl 0x22150975a58 <col:97, col:104> col:104 _Size 'size_t':'unsigned long long'
|-FunctionDecl 0x22150975dd0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1933:117> D:\Microsoft Visual Studio 12.0\VC\include\string.h:210:79 _strupr 'char *(char *) __attribute__((cdecl))':'char *(char *)'
| |-ParmVarDecl 0x22150975cf0 <col:99, col:105> col:105 _String 'char *'
| `-DeprecatedAttr 0x22150975e78 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _strupr_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x22150979298 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:211:28, col:130> col:44 _strupr_s_l 'errno_t (char *, size_t, _locale_t) __attribute__((cdecl))':'errno_t (char *, size_t, _locale_t)'
| |-ParmVarDecl 0x22150979090 <col:81, col:88> col:88 _Str 'char *'
| |-ParmVarDecl 0x22150979108 <col:99, col:106> col:106 _Size 'size_t':'unsigned long long'
| `-ParmVarDecl 0x22150979180 <col:113, col:123> col:123 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x221509795b8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:213:82 _strupr_l 'char *(char *, _locale_t) __attribute__((cdecl))':'char *(char *, _locale_t)'
| |-ParmVarDecl 0x22150979440 <col:148, col:154> col:154 _String 'char *'
| |-ParmVarDecl 0x221509794b8 <col:172, col:183> col:183 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x22150979668 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _strupr_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x22150979a80 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:214:44> col:44 implicit strxfrm 'unsigned long long (char *, const char *, unsigned long long)' extern
| |-ParmVarDecl 0x22150979b20 <<invalid sloc>> <invalid sloc> 'char *'
| |-ParmVarDecl 0x22150979b88 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x22150979bf0 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x22150979c70 prev 0x22150979a80 <col:28, col:155> col:44 strxfrm 'unsigned long long (char *, const char *, unsigned long long)'
| |-ParmVarDecl 0x221509797b0 <col:95, col:102> col:102 _Dst 'char *'
| |-ParmVarDecl 0x22150979830 <col:115, col:128> col:128 _Src 'const char *'
| `-ParmVarDecl 0x221509798a8 <col:139, col:146> col:146 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x22150976098 <line:215:28, col:185> col:44 _strxfrm_l 'size_t (char *, const char *, size_t, _locale_t) __attribute__((cdecl))':'size_t (char *, const char *, size_t, _locale_t)'
| |-ParmVarDecl 0x22150979d58 <col:97, col:104> col:104 _Dst 'char *'
| |-ParmVarDecl 0x22150979dd8 <col:117, col:130> col:130 _Src 'const char *'
| |-ParmVarDecl 0x22150979e50 <col:141, col:148> col:148 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x22150979ec8 <col:168, col:178> col:178 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x22150976340 <line:245:71> col:71 implicit strdup 'char *(const char *)' extern
| `-ParmVarDecl 0x221509763e0 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x22150976450 prev 0x22150976340 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:245:106> col:71 strdup 'char *(const char *)'
| |-ParmVarDecl 0x22150976260 <col:89, col:102> col:102 _Src 'const char *'
| `-DeprecatedAttr 0x221509764f8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strdup. See online help for details." ""
|-FunctionDecl 0x22150976840 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:252:129> col:69 strcmpi 'int (const char *, const char *) __attribute__((cdecl))':'int (const char *, const char *)'
| |-ParmVarDecl 0x221509766c0 <col:84, col:97> col:97 _Str1 'const char *'
| |-ParmVarDecl 0x22150976740 <col:111, col:124> col:124 _Str2 'const char *'
| `-DeprecatedAttr 0x221509768f0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strcmpi. See online help for details." ""
|-FunctionDecl 0x22150976c38 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:253:129> col:69 stricmp 'int (const char *, const char *) __attribute__((cdecl))':'int (const char *, const char *)'
| |-ParmVarDecl 0x22150976ab8 <col:84, col:97> col:97 _Str1 'const char *'
| |-ParmVarDecl 0x22150976b38 <col:111, col:124> col:124 _Str2 'const char *'
| `-DeprecatedAttr 0x22150976ce8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _stricmp. See online help for details." ""
|-FunctionDecl 0x22150979fd8 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:254:84> col:56 strlwr 'char *(char *) __attribute__((cdecl))':'char *(char *)'
| |-ParmVarDecl 0x22150976eb0 <col:73, col:80> col:80 _Str 'char *'
| `-DeprecatedAttr 0x2215097a080 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strlwr. See online help for details." ""
|-FunctionDecl 0x2215097a498 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:255:193> col:70 strnicmp 'int (const char *, const char *, size_t) __attribute__((cdecl))':'int (const char *, const char *, size_t)'
| |-ParmVarDecl 0x2215097a280 <col:106, col:119> col:119 _Str1 'const char *'
| |-ParmVarDecl 0x2215097a300 <col:153, col:166> col:166 _Str 'const char *'
| |-ParmVarDecl 0x2215097a378 <col:177, col:184> col:184 _MaxCount 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x2215097a550 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strnicmp. See online help for details." ""
|-FunctionDecl 0x2215097a930 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:256:143> col:57 strnset 'char *(char *, int, size_t) __attribute__((cdecl))':'char *(char *, int, size_t)'
| |-ParmVarDecl 0x2215097a718 <col:94, col:101> col:101 _Str 'char *'
| |-ParmVarDecl 0x2215097a798 <col:112, col:116> col:116 _Val 'int'
| |-ParmVarDecl 0x2215097a810 <col:127, col:134> col:134 _MaxCount 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x2215097a9e8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strnset. See online help for details." ""
|-FunctionDecl 0x2215097ac90 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:257:84> col:56 strrev 'char *(char *) __attribute__((cdecl))':'char *(char *)'
| |-ParmVarDecl 0x2215097abb0 <col:73, col:80> col:80 _Str 'char *'
| `-DeprecatedAttr 0x2215097ad38 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strrev. See online help for details." ""
|-FunctionDecl 0x22150977070 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:258:99> col:56 strset 'char *(char *, int) __attribute__((cdecl))':'char *(char *, int)'
| |-ParmVarDecl 0x2215097af00 <col:73, col:80> col:80 _Str 'char *'
| |-ParmVarDecl 0x22150976f70 <col:91, col:95> col:95 _Val 'int'
| `-DeprecatedAttr 0x22150977120 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strset. See online help for details." ""
|-FunctionDecl 0x221509773c8 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:259:84> col:56 strupr 'char *(char *) __attribute__((cdecl))':'char *(char *)'
| |-ParmVarDecl 0x221509772e8 <col:73, col:80> col:80 _Str 'char *'
| `-DeprecatedAttr 0x22150977470 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strupr. See online help for details." ""
|-FunctionDecl 0x22150977700 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:273:24, col:77> col:42 _wcsdup 'wchar_t *(const wchar_t *) __attribute__((cdecl))':'wchar_t *(const wchar_t *)'
| `-ParmVarDecl 0x22150977590 <col:57, col:73> col:73 _Str 'const wchar_t *'
|-FunctionDecl 0x22150977a90 <line:280:40, col:167> col:56 wcscat_s 'errno_t (wchar_t *, rsize_t, const wchar_t *) __attribute__((cdecl))':'errno_t (wchar_t *, rsize_t, const wchar_t *)'
| |-ParmVarDecl 0x221509777d0 <col:97, col:107> col:107 _Dst 'wchar_t *'
| |-ParmVarDecl 0x22150977848 <col:118, col:126> col:126 _SizeInWords 'rsize_t':'unsigned long long'
| `-ParmVarDecl 0x221509778c0 <col:147, col:163> col:163 _Src 'const wchar_t *'
|-FunctionDecl 0x22150977e48 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:284:82 wcscat 'wchar_t *(wchar_t *, const wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x22150977c30 <col:164, col:173> col:173 _Dest 'wchar_t *'
| |-ParmVarDecl 0x22150977ca8 <col:187, col:204> col:204 _Source 'const wchar_t *'
| `-DeprecatedAttr 0x22150977ef8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using wcscat_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x22150978298 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:288:41> col:41 implicit wcschr 'unsigned short *(const unsigned short *, unsigned short)' extern
| |-ParmVarDecl 0x22150978338 <<invalid sloc>> <invalid sloc> 'const unsigned short *'
| `-ParmVarDecl 0x221509783a0 <<invalid sloc>> <invalid sloc> 'unsigned short'
|-FunctionDecl 0x22150978418 prev 0x22150978298 <col:23, col:88> col:41 wcschr 'unsigned short *(const unsigned short *, unsigned short)'
| |-ParmVarDecl 0x22150978078 <col:55, col:71> col:71 _Str 'const wchar_t *'
| `-ParmVarDecl 0x221509780f0 <col:77, col:85> col:85 _Ch 'wchar_t':'unsigned short'
|-FunctionDecl 0x22150978710 <line:289:36> col:36 implicit wcscmp 'int (const unsigned short *, const unsigned short *)' extern
| |-ParmVarDecl 0x221509787b0 <<invalid sloc>> <invalid sloc> 'const unsigned short *'
| `-ParmVarDecl 0x22150978818 <<invalid sloc>> <invalid sloc> 'const unsigned short *'
|-FunctionDecl 0x22150978890 prev 0x22150978710 <col:24, col:101> col:36 wcscmp 'int (const unsigned short *, const unsigned short *)'
| |-ParmVarDecl 0x221509784f0 <col:50, col:66> col:66 _Str1 'const wchar_t *'
| `-ParmVarDecl 0x22150978568 <col:80, col:96> col:96 _Str2 'const wchar_t *'
|-FunctionDecl 0x22150978b70 <line:291:40, col:164> col:56 wcscpy_s 'errno_t (wchar_t *, rsize_t, const wchar_t *) __attribute__((cdecl))':'errno_t (wchar_t *, rsize_t, const wchar_t *)'
| |-ParmVarDecl 0x22150978968 <col:94, col:104> col:104 _Dst 'wchar_t *'
| |-ParmVarDecl 0x221509789e0 <col:115, col:123> col:123 _SizeInWords 'rsize_t':'unsigned long long'
| `-ParmVarDecl 0x22150978a58 <col:144, col:160> col:160 _Src 'const wchar_t *'
|-FunctionDecl 0x22150978e80 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:294:82 wcscpy 'wchar_t *(wchar_t *, const wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x22150978d10 <col:136, col:145> col:145 _Dest 'wchar_t *'
| |-ParmVarDecl 0x22150978d88 <col:159, col:176> col:176 _Source 'const wchar_t *'
| `-DeprecatedAttr 0x22150978f30 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using wcscpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x22150973248 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:295:24, col:107> col:39 wcscspn 'size_t (const wchar_t *, const wchar_t *) __attribute__((cdecl))':'size_t (const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x22150973028 <col:54, col:70> col:70 _Str 'const wchar_t *'
| `-ParmVarDecl 0x221509730a0 <col:83, col:99> col:99 _Control 'const wchar_t *'
|-FunctionDecl 0x22150973490 <line:296:39> col:39 implicit wcslen 'unsigned long long (const unsigned short *)' extern
| `-ParmVarDecl 0x22150973530 <<invalid sloc>> <invalid sloc> 'const unsigned short *'
|-FunctionDecl 0x221509735a0 prev 0x22150973490 <col:24, col:73> col:39 wcslen 'unsigned long long (const unsigned short *)'
| `-ParmVarDecl 0x22150973320 <col:53, col:69> col:69 _Str 'const wchar_t *'
|-FunctionDecl 0x22150973888 <line:300:1, col:94> col:16 used wcsnlen 'size_t (const wchar_t *, size_t) __attribute__((cdecl))':'size_t (const wchar_t *, size_t)'
| |-ParmVarDecl 0x22150973670 <col:51, col:67> col:67 _Src 'const wchar_t *'
| `-ParmVarDecl 0x221509736e8 <col:78, col:85> col:85 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x22150973ad0 <line:302:16, line:308:1> line:305:18 wcsnlen_s 'size_t (const wchar_t *, size_t) __attribute__((cdecl))':'size_t (const wchar_t *, size_t)' static inline
| |-ParmVarDecl 0x22150973960 <col:55, col:71> col:71 used _Src 'const wchar_t *'
| |-ParmVarDecl 0x221509739d8 <col:82, col:89> col:89 used _MaxCount 'size_t':'unsigned long long'
| `-CompoundStmt 0x22150973e68 <line:306:1, line:308:1>
|   `-ReturnStmt 0x22150973e58 <line:307:5, col:56>
|     `-ConditionalOperator 0x22150973e28 <col:12, col:56> 'unsigned long long'
|       |-ParenExpr 0x22150973c90 <col:12, col:25> 'int'
|       | `-BinaryOperator 0x22150973c70 <col:13, line:36:27> 'int' '=='
|       |   |-ImplicitCastExpr 0x22150973c40 <line:307:13> 'const wchar_t *' <LValueToRValue>
|       |   | `-DeclRefExpr 0x22150973b98 <col:13> 'const wchar_t *' lvalue ParmVar 0x22150973960 '_Src' 'const wchar_t *'
|       |   `-ImplicitCastExpr 0x22150973c58 <line:36:17, col:27> 'const wchar_t *' <BitCast>
|       |     `-ParenExpr 0x22150973c20 <col:17, col:27> 'void *'
|       |       `-CStyleCastExpr 0x22150973bf8 <col:18, col:26> 'void *' <NullToPointer>
|       |         `-IntegerLiteral 0x22150973bb8 <col:26> 'int' 0
|       |-ImplicitCastExpr 0x22150973e10 <line:307:29> 'unsigned long long' <IntegralCast>
|       | `-IntegerLiteral 0x22150973cb0 <col:29> 'int' 0
|       `-CallExpr 0x22150973db0 <col:33, col:56> 'size_t':'unsigned long long'
|         |-ImplicitCastExpr 0x22150973d98 <col:33> 'size_t (*)(const wchar_t *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x22150973cd8 <col:33> 'size_t (const wchar_t *, size_t) __attribute__((cdecl))':'size_t (const wchar_t *, size_t)' Function 0x22150973888 'wcsnlen' 'size_t (const wchar_t *, size_t) __attribute__((cdecl))':'size_t (const wchar_t *, size_t)'
|         |-ImplicitCastExpr 0x22150973de0 <col:41> 'const wchar_t *' <LValueToRValue>
|         | `-DeclRefExpr 0x22150973cf8 <col:41> 'const wchar_t *' lvalue ParmVar 0x22150973960 '_Src' 'const wchar_t *'
|         `-ImplicitCastExpr 0x22150973df8 <col:47> 'size_t':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x22150973d18 <col:47> 'size_t':'unsigned long long' lvalue ParmVar 0x221509739d8 '_MaxCount' 'size_t':'unsigned long long'
|-FunctionDecl 0x22150974238 <line:311:40, col:212> col:56 wcsncat_s 'errno_t (wchar_t *, rsize_t, const wchar_t *, rsize_t) __attribute__((cdecl))':'errno_t (wchar_t *, rsize_t, const wchar_t *, rsize_t)'
| |-ParmVarDecl 0x22150973e90 <col:98, col:108> col:108 _Dst 'wchar_t *'
| |-ParmVarDecl 0x22150973f40 <col:119, col:127> col:127 _SizeInWords 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x22150973fb8 <col:168, col:184> col:184 _Src 'const wchar_t *'
| `-ParmVarDecl 0x22150974030 <col:195, col:203> col:203 _MaxCount 'rsize_t':'unsigned long long'
|-FunctionDecl 0x221509746a0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1980:149> D:\Microsoft Visual Studio 12.0\VC\include\string.h:316:86 wcsncat 'wchar_t *(wchar_t *, const wchar_t *, size_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, const wchar_t *, size_t)'
| |-ParmVarDecl 0x221509743e0 <col:167, col:176> col:176 _Dest 'wchar_t *'
| |-ParmVarDecl 0x22150974458 <col:207, col:224> col:224 _Source 'const wchar_t *'
| |-ParmVarDecl 0x221509744d0 <col:238, col:246> col:246 _Count 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x22150974758 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using wcsncat_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x22150974b68 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:318:36> col:36 implicit wcsncmp 'int (const unsigned short *, const unsigned short *, unsigned long long)' extern
| |-ParmVarDecl 0x22150974c08 <<invalid sloc>> <invalid sloc> 'const unsigned short *'
| |-ParmVarDecl 0x22150974c70 <<invalid sloc>> <invalid sloc> 'const unsigned short *'
| `-ParmVarDecl 0x22150974cd8 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x22150974d58 prev 0x22150974b68 <col:24, col:165> col:36 wcsncmp 'int (const unsigned short *, const unsigned short *, unsigned long long)'
| |-ParmVarDecl 0x22150974898 <col:71, col:87> col:87 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x22150974910 <col:121, col:137> col:137 _Str2 'const wchar_t *'
| `-ParmVarDecl 0x22150974988 <col:149, col:156> col:156 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x221509821d0 <line:320:40, col:209> col:56 wcsncpy_s 'errno_t (wchar_t *, rsize_t, const wchar_t *, rsize_t) __attribute__((cdecl))':'errno_t (wchar_t *, rsize_t, const wchar_t *, rsize_t)'
| |-ParmVarDecl 0x22150974e38 <col:95, col:105> col:105 _Dst 'wchar_t *'
| |-ParmVarDecl 0x22150974eb0 <col:116, col:124> col:124 _SizeInWords 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x22150982020 <col:165, col:181> col:181 _Src 'const wchar_t *'
| `-ParmVarDecl 0x22150982098 <col:192, col:200> col:200 _MaxCount 'rsize_t':'unsigned long long'
|-FunctionDecl 0x22150982580 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1980:149> D:\Microsoft Visual Studio 12.0\VC\include\string.h:323:86 wcsncpy 'wchar_t *(wchar_t *, const wchar_t *, size_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, const wchar_t *, size_t)'
| |-ParmVarDecl 0x22150982378 <col:179, col:188> col:188 _Dest 'wchar_t *'
| |-ParmVarDecl 0x221509823f0 <col:219, col:236> col:236 _Source 'const wchar_t *'
| |-ParmVarDecl 0x22150982468 <col:250, col:258> col:258 _Count 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x22150982638 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using wcsncpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x22150982998 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:324:38, col:124> col:56 wcspbrk 'wchar_t *(const wchar_t *, const wchar_t *) __attribute__((cdecl))':'wchar_t *(const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x22150982778 <col:71, col:87> col:87 _Str 'const wchar_t *'
| `-ParmVarDecl 0x221509827f0 <col:100, col:116> col:116 _Control 'const wchar_t *'
|-FunctionDecl 0x22150982be0 <line:325:38, col:109> col:56 wcsrchr 'wchar_t *(const wchar_t *, wchar_t) __attribute__((cdecl))':'wchar_t *(const wchar_t *, wchar_t)'
| |-ParmVarDecl 0x22150982a70 <col:71, col:87> col:87 _Str 'const wchar_t *'
| `-ParmVarDecl 0x22150982ae8 <col:98, col:106> col:106 _Ch 'wchar_t':'unsigned short'
|-FunctionDecl 0x22150982e28 <line:326:24, col:106> col:39 wcsspn 'size_t (const wchar_t *, const wchar_t *) __attribute__((cdecl))':'size_t (const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x22150982cb8 <col:53, col:69> col:69 _Str 'const wchar_t *'
| `-ParmVarDecl 0x22150982d30 <col:82, col:98> col:98 _Control 'const wchar_t *'
|-FunctionDecl 0x22150981070 <line:329:23, col:107> col:41 wcsstr 'wchar_t *(const wchar_t *, const wchar_t *) __attribute__((cdecl))':'wchar_t *(const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x22150982f00 <col:55, col:71> col:71 _Str 'const wchar_t *'
| `-ParmVarDecl 0x22150982f78 <col:84, col:100> col:100 _SubStr 'const wchar_t *'
|-FunctionDecl 0x22150981378 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:330:142> col:76 wcstok 'wchar_t *(wchar_t *, const wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x22150981208 <col:97, col:107> col:107 _Str 'wchar_t *'
| |-ParmVarDecl 0x22150981280 <col:120, col:136> col:136 _Delim 'const wchar_t *'
| `-DeprecatedAttr 0x22150981428 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using wcstok_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x22150981890 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:332:36, col:173> col:54 wcstok_s 'wchar_t *(wchar_t *, const wchar_t *, wchar_t **) __attribute__((cdecl))':'wchar_t *(wchar_t *, const wchar_t *, wchar_t **)'
| |-ParmVarDecl 0x22150981568 <col:77, col:87> col:87 _Str 'wchar_t *'
| |-ParmVarDecl 0x221509815e0 <col:100, col:116> col:116 _Delim 'const wchar_t *'
| `-ParmVarDecl 0x221509816c0 <col:154, col:165> col:165 _Context 'wchar_t **'
|-FunctionDecl 0x22150981bb0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:334:105> col:79 _wcserror 'wchar_t *(int) __attribute__((cdecl))':'wchar_t *(int)'
| |-ParmVarDecl 0x22150981a38 <col:94, col:98> col:98 _ErrNum 'int'
| `-DeprecatedAttr 0x22150981c58 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wcserror_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2215097f060 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:335:28, col:147> col:44 _wcserror_s 'errno_t (wchar_t *, size_t, int) __attribute__((cdecl))':'errno_t (wchar_t *, size_t, int)'
| |-ParmVarDecl 0x22150981d98 <col:89, col:99> col:99 _Buf 'wchar_t *'
| |-ParmVarDecl 0x22150981e10 <col:110, col:117> col:117 _SizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x22150981e90 <col:136, col:140> col:140 _ErrNum 'int'
|-FunctionDecl 0x2215097f310 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:337:122> col:80 __wcserror 'wchar_t *(const wchar_t *) __attribute__((cdecl))':'wchar_t *(const wchar_t *)'
| |-ParmVarDecl 0x2215097f238 <col:102, col:118> col:118 _Str 'const wchar_t *'
| `-DeprecatedAttr 0x2215097f3b8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using __wcserror_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2215097f780 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:338:28, col:165> col:44 __wcserror_s 'errno_t (wchar_t *, size_t, const wchar_t *) __attribute__((cdecl))':'errno_t (wchar_t *, size_t, const wchar_t *)'
| |-ParmVarDecl 0x2215097f4f8 <col:90, col:100> col:100 _Buffer 'wchar_t *'
| |-ParmVarDecl 0x2215097f570 <col:114, col:121> col:121 _SizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x2215097f5e8 <col:142, col:158> col:158 _ErrMsg 'const wchar_t *'
|-FunctionDecl 0x2215097f9d8 <line:341:24, col:103> col:36 _wcsicmp 'int (const wchar_t *, const wchar_t *) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x2215097f860 <col:52, col:68> col:68 _Str1 'const wchar_t *'
| `-ParmVarDecl 0x2215097f8d8 <col:82, col:98> col:98 _Str2 'const wchar_t *'
|-FunctionDecl 0x2215097fd78 <line:342:24, col:133> col:36 _wcsicmp_l 'int (const wchar_t *, const wchar_t *, _locale_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, _locale_t)'
| |-ParmVarDecl 0x2215097fab0 <col:54, col:70> col:70 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x2215097fb28 <col:84, col:100> col:100 _Str2 'const wchar_t *'
| `-ParmVarDecl 0x2215097fba0 <col:116, col:126> col:126 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x221509830b8 <line:343:24, col:167> col:36 _wcsnicmp 'int (const wchar_t *, const wchar_t *, size_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, size_t)'
| |-ParmVarDecl 0x2215097fe58 <col:73, col:89> col:89 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x2215097fed0 <col:123, col:139> col:139 _Str2 'const wchar_t *'
| `-ParmVarDecl 0x2215097ff48 <col:151, col:158> col:158 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x22150983510 <line:344:24, col:197> col:36 _wcsnicmp_l 'int (const wchar_t *, const wchar_t *, size_t, _locale_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, size_t, _locale_t)'
| |-ParmVarDecl 0x22150983198 <col:75, col:91> col:91 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x22150983210 <col:125, col:141> col:141 _Str2 'const wchar_t *'
| |-ParmVarDecl 0x22150983288 <col:153, col:160> col:160 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x22150983300 <col:180, col:190> col:190 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x22150983968 <line:345:40, col:181> col:56 _wcsnset_s 'errno_t (wchar_t *, size_t, wchar_t, size_t) __attribute__((cdecl))':'errno_t (wchar_t *, size_t, wchar_t, size_t)'
| |-ParmVarDecl 0x221509835f8 <col:99, col:109> col:109 _Dst 'wchar_t *'
| |-ParmVarDecl 0x22150983670 <col:120, col:127> col:127 _SizeInWords 'size_t':'unsigned long long'
| |-ParmVarDecl 0x221509836e8 <col:146, col:154> col:154 _Val 'wchar_t':'unsigned short'
| `-ParmVarDecl 0x22150983760 <col:165, col:172> col:172 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x22150983dd0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1980:149> D:\Microsoft Visual Studio 12.0\VC\include\string.h:347:86 _wcsnset 'wchar_t *(wchar_t *, wchar_t, size_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, wchar_t, size_t)'
| |-ParmVarDecl 0x22150983b10 <col:172, col:181> col:181 _Str 'wchar_t *'
| |-ParmVarDecl 0x22150983b88 <col:187, col:196> col:196 _Val 'wchar_t':'unsigned short'
| |-ParmVarDecl 0x22150983c00 <col:207, col:215> col:215 _MaxCount 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x22150983e88 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wcsnset_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2215097e0f0 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:348:9, col:59> col:27 _wcsrev 'wchar_t *(wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *)'
| `-ParmVarDecl 0x22150983fc8 <col:45, col:55> col:55 _Str 'wchar_t *'
|-FunctionDecl 0x2215097e480 <line:349:40, col:159> col:56 _wcsset_s 'errno_t (wchar_t *, size_t, wchar_t) __attribute__((cdecl))':'errno_t (wchar_t *, size_t, wchar_t)'
| |-ParmVarDecl 0x2215097e1c0 <col:98, col:108> col:108 _Dst 'wchar_t *'
| |-ParmVarDecl 0x2215097e238 <col:119, col:126> col:126 _SizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x2215097e2b0 <col:145, col:153> col:153 _Value 'wchar_t':'unsigned short'
|-FunctionDecl 0x2215097e838 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:351:85 _wcsset 'wchar_t *(wchar_t *, wchar_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, wchar_t)'
| |-ParmVarDecl 0x2215097e620 <col:150, col:159> col:159 _Str 'wchar_t *'
| |-ParmVarDecl 0x2215097e698 <col:165, col:174> col:174 _Val 'wchar_t':'unsigned short'
| `-DeprecatedAttr 0x2215097e8e8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wcsset_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2215097ec48 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:353:28, col:126> col:44 _wcslwr_s 'errno_t (wchar_t *, size_t) __attribute__((cdecl))':'errno_t (wchar_t *, size_t)'
| |-ParmVarDecl 0x2215097ea28 <col:86, col:96> col:96 _Str 'wchar_t *'
| `-ParmVarDecl 0x2215097eaa0 <col:107, col:114> col:114 _SizeInWords 'size_t':'unsigned long long'
|-FunctionDecl 0x2215097eeb8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1933:117> D:\Microsoft Visual Studio 12.0\VC\include\string.h:355:82 _wcslwr 'wchar_t *(wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *)'
| |-ParmVarDecl 0x2215097ede0 <col:102, col:111> col:111 _String 'wchar_t *'
| `-DeprecatedAttr 0x2215097ef60 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wcslwr_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x221509803c0 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:356:28, col:156> col:44 _wcslwr_s_l 'errno_t (wchar_t *, size_t, _locale_t) __attribute__((cdecl))':'errno_t (wchar_t *, size_t, _locale_t)'
| |-ParmVarDecl 0x221509800f8 <col:88, col:98> col:98 _Str 'wchar_t *'
| |-ParmVarDecl 0x22150980170 <col:109, col:116> col:116 _SizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x221509801e8 <col:139, col:149> col:149 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x22150980778 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:358:85 _wcslwr_l 'wchar_t *(wchar_t *, _locale_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, _locale_t)'
| |-ParmVarDecl 0x22150980560 <col:154, col:163> col:163 _String 'wchar_t *'
| |-ParmVarDecl 0x221509805d8 <col:181, col:192> col:192 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x22150980828 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wcslwr_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x22150980ad8 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:359:28, col:112> col:44 _wcsupr_s 'errno_t (wchar_t *, size_t) __attribute__((cdecl))':'errno_t (wchar_t *, size_t)'
| |-ParmVarDecl 0x22150980968 <col:79, col:89> col:89 _Str 'wchar_t *'
| `-ParmVarDecl 0x221509809e0 <col:100, col:107> col:107 _Size 'size_t':'unsigned long long'
|-FunctionDecl 0x22150980d48 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1933:117> D:\Microsoft Visual Studio 12.0\VC\include\string.h:361:82 _wcsupr 'wchar_t *(wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *)'
| |-ParmVarDecl 0x22150980c70 <col:102, col:111> col:111 _String 'wchar_t *'
| `-DeprecatedAttr 0x22150980df0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wcsupr_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2215097c150 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:362:28, col:142> col:44 _wcsupr_s_l 'errno_t (wchar_t *, size_t, _locale_t) __attribute__((cdecl))':'errno_t (wchar_t *, size_t, _locale_t)'
| |-ParmVarDecl 0x22150980f30 <col:81, col:91> col:91 _Str 'wchar_t *'
| |-ParmVarDecl 0x2215097bfc0 <col:102, col:109> col:109 _Size 'size_t':'unsigned long long'
| `-ParmVarDecl 0x2215097c038 <col:125, col:135> col:135 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2215097c460 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:364:85 _wcsupr_l 'wchar_t *(wchar_t *, _locale_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, _locale_t)'
| |-ParmVarDecl 0x2215097c2f0 <col:154, col:163> col:163 _String 'wchar_t *'
| |-ParmVarDecl 0x2215097c368 <col:181, col:192> col:192 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x2215097c510 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wcsupr_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2215097c910 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:365:28, col:159> col:43 wcsxfrm 'size_t (wchar_t *, const wchar_t *, size_t) __attribute__((cdecl))':'size_t (wchar_t *, const wchar_t *, size_t)'
| |-ParmVarDecl 0x2215097c650 <col:93, col:103> col:103 _Dst 'wchar_t *'
| |-ParmVarDecl 0x2215097c6c8 <col:116, col:132> col:132 _Src 'const wchar_t *'
| `-ParmVarDecl 0x2215097c740 <col:143, col:150> col:150 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x2215097cd58 <line:366:28, col:189> col:43 _wcsxfrm_l 'size_t (wchar_t *, const wchar_t *, size_t, _locale_t) __attribute__((cdecl))':'size_t (wchar_t *, const wchar_t *, size_t, _locale_t)'
| |-ParmVarDecl 0x2215097c9f0 <col:96, col:106> col:106 _Dst 'wchar_t *'
| |-ParmVarDecl 0x2215097ca68 <col:119, col:134> col:134 _Src 'const wchar_t *'
| |-ParmVarDecl 0x2215097cae0 <col:145, col:152> col:152 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x2215097cb58 <col:172, col:182> col:182 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2215098a0a0 <line:367:24, col:102> col:36 wcscoll 'int (const wchar_t *, const wchar_t *) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x2215097ce40 <col:51, col:67> col:67 _Str1 'const wchar_t *'
| `-ParmVarDecl 0x2215097ceb8 <col:81, col:97> col:97 _Str2 'const wchar_t *'
|-FunctionDecl 0x2215098a388 <line:368:24, col:133> col:36 _wcscoll_l 'int (const wchar_t *, const wchar_t *, _locale_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, _locale_t)'
| |-ParmVarDecl 0x2215098a178 <col:54, col:70> col:70 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x2215098a1f0 <col:84, col:100> col:100 _Str2 'const wchar_t *'
| `-ParmVarDecl 0x2215098a268 <col:116, col:126> col:126 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2215098a5e0 <line:369:24, col:104> col:36 _wcsicoll 'int (const wchar_t *, const wchar_t *) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x2215098a468 <col:53, col:69> col:69 _Str1 'const wchar_t *'
| `-ParmVarDecl 0x2215098a4e0 <col:83, col:99> col:99 _Str2 'const wchar_t *'
|-FunctionDecl 0x2215098a8c8 <line:370:24, col:133> col:36 _wcsicoll_l 'int (const wchar_t *, const wchar_t *, _locale_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, _locale_t)'
| |-ParmVarDecl 0x2215098a6b8 <col:55, col:71> col:71 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x2215098a730 <col:85, col:100> col:100 _Str2 'const wchar_t *'
| `-ParmVarDecl 0x2215098a7a8 <col:116, col:126> col:126 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2215098abb8 <line:371:24, col:167> col:36 _wcsncoll 'int (const wchar_t *, const wchar_t *, size_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, size_t)'
| |-ParmVarDecl 0x2215098a9a8 <col:73, col:89> col:89 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x2215098aa20 <col:123, col:139> col:139 _Str2 'const wchar_t *'
| `-ParmVarDecl 0x2215098aa98 <col:151, col:158> col:158 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x2215098af40 <line:372:24, col:197> col:36 _wcsncoll_l 'int (const wchar_t *, const wchar_t *, size_t, _locale_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, size_t, _locale_t)'
| |-ParmVarDecl 0x2215098ac98 <col:75, col:91> col:91 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x2215098ad10 <col:125, col:141> col:141 _Str2 'const wchar_t *'
| |-ParmVarDecl 0x2215098ad88 <col:153, col:160> col:160 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x2215098ae00 <col:180, col:190> col:190 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x22150987208 <line:373:24, col:168> col:36 _wcsnicoll 'int (const wchar_t *, const wchar_t *, size_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, size_t)'
| |-ParmVarDecl 0x2215098b028 <col:74, col:90> col:90 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x22150987070 <col:124, col:140> col:140 _Str2 'const wchar_t *'
| `-ParmVarDecl 0x221509870e8 <col:152, col:159> col:159 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x22150987590 <line:374:24, col:198> col:36 _wcsnicoll_l 'int (const wchar_t *, const wchar_t *, size_t, _locale_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, size_t, _locale_t)'
| |-ParmVarDecl 0x221509872e8 <col:76, col:92> col:92 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x22150987360 <col:126, col:142> col:142 _Str2 'const wchar_t *'
| |-ParmVarDecl 0x221509873d8 <col:154, col:161> col:161 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x22150987450 <col:181, col:191> col:191 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x221509877f0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:403:108> col:74 wcsdup 'wchar_t *(const wchar_t *) __attribute__((cdecl))':'wchar_t *(const wchar_t *)'
| |-ParmVarDecl 0x22150987718 <col:88, col:104> col:104 _Str 'const wchar_t *'
| `-DeprecatedAttr 0x22150987898 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsdup. See online help for details." ""
|-FunctionDecl 0x22150987bd0 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:413:135> col:69 wcsicmp 'int (const wchar_t *, const wchar_t *) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x22150987a58 <col:84, col:100> col:100 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x22150987ad0 <col:114, col:130> col:130 _Str2 'const wchar_t *'
| `-DeprecatedAttr 0x22150987c80 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsicmp. See online help for details." ""
|-FunctionDecl 0x22150988080 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:414:200> col:70 wcsnicmp 'int (const wchar_t *, const wchar_t *, size_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, size_t)'
| |-ParmVarDecl 0x22150987e40 <col:106, col:122> col:122 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x22150987eb8 <col:156, col:172> col:172 _Str2 'const wchar_t *'
| |-ParmVarDecl 0x22150987f30 <col:184, col:191> col:191 _MaxCount 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x22150988138 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsnicmp. See online help for details." ""
|-FunctionDecl 0x22150988500 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:415:153> col:60 wcsnset 'wchar_t *(wchar_t *, wchar_t, size_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, wchar_t, size_t)'
| |-ParmVarDecl 0x221509882f8 <col:97, col:107> col:107 _Str 'wchar_t *'
| |-ParmVarDecl 0x22150988370 <col:118, col:126> col:126 _Val 'wchar_t':'unsigned short'
| |-ParmVarDecl 0x221509883e8 <col:137, col:144> col:144 _MaxCount 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x221509885b8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsnset. See online help for details." ""
|-FunctionDecl 0x22150988850 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:416:90> col:59 wcsrev 'wchar_t *(wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *)'
| |-ParmVarDecl 0x22150988778 <col:76, col:86> col:86 _Str 'wchar_t *'
| `-DeprecatedAttr 0x221509888f8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsrev. See online help for details." ""
|-FunctionDecl 0x22150988c28 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:417:104> col:59 wcsset 'wchar_t *(wchar_t *, wchar_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, wchar_t)'
| |-ParmVarDecl 0x22150988ab8 <col:76, col:86> col:86 _Str 'wchar_t *'
| |-ParmVarDecl 0x22150988b30 <col:92, col:100> col:100 _Val 'wchar_t':'unsigned short'
| `-DeprecatedAttr 0x22150988cd8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsset. See online help for details." ""
|-FunctionDecl 0x22150988f70 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:418:90> col:59 wcslwr 'wchar_t *(wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *)'
| |-ParmVarDecl 0x22150988e98 <col:76, col:86> col:86 _Str 'wchar_t *'
| `-DeprecatedAttr 0x22150989018 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcslwr. See online help for details." ""
|-FunctionDecl 0x2215098b300 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:419:90> col:59 wcsupr 'wchar_t *(wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *)'
| |-ParmVarDecl 0x2215098b228 <col:76, col:86> col:86 _Str 'wchar_t *'
| `-DeprecatedAttr 0x2215098b3a8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsupr. See online help for details." ""
|-FunctionDecl 0x2215098b6e0 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:420:137> col:70 wcsicoll 'int (const wchar_t *, const wchar_t *) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x2215098b568 <col:86, col:102> col:102 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x2215098b5e0 <col:116, col:132> col:132 _Str2 'const wchar_t *'
| `-DeprecatedAttr 0x2215098b790 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsicoll. See online help for details." ""
|-TypedefDecl 0x2215098ba88 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:52:1, col:24> col:24 referenced _onexit_t 'int (*)(void) __attribute__((cdecl))'
| `-PointerType 0x2215098ba20 'int (*)(void) __attribute__((cdecl))'
|   `-AttributedType 0x2215098b9c0 'int (void) __attribute__((cdecl))' sugar
|     |-ParenType 0x2215098b970 'int (void)' sugar
|     | `-FunctionProtoType 0x2215098b940 'int (void)' cdecl
|     |   `-BuiltinType 0x2214ee20b80 'int'
|     `-ParenType 0x2215098b970 'int (void)' sugar
|       `-FunctionProtoType 0x2215098b940 'int (void)' cdecl
|         `-BuiltinType 0x2214ee20b80 'int'
|-RecordDecl 0x2215098bae0 <line:75:9, line:78:1> line:75:16 struct _div_t definition
| |-MaxFieldAlignmentAttr 0x2215098bba0 <<invalid sloc>> Implicit 64
| |-FieldDecl 0x2215098bc18 <line:76:9, col:13> col:13 quot 'int'
| `-FieldDecl 0x2215098bc88 <line:77:9, col:13> col:13 rem 'int'
|-TypedefDecl 0x2215098bd38 <line:75:1, line:78:3> col:3 referenced div_t 'struct _div_t':'struct _div_t'
| `-ElaboratedType 0x2215098bce0 'struct _div_t' sugar
|   `-RecordType 0x2215098bb80 'struct _div_t'
|     `-Record 0x2215098bae0 '_div_t'
|-RecordDecl 0x2215098bda8 <line:80:9, line:83:1> line:80:16 struct _ldiv_t definition
| |-MaxFieldAlignmentAttr 0x2215098be60 <<invalid sloc>> Implicit 64
| |-FieldDecl 0x2215098bed8 <line:81:9, col:14> col:14 quot 'long'
| `-FieldDecl 0x2215098bf48 <line:82:9, col:14> col:14 rem 'long'
|-TypedefDecl 0x2215098bff8 <line:80:1, line:83:3> col:3 referenced ldiv_t 'struct _ldiv_t':'struct _ldiv_t'
| `-ElaboratedType 0x2215098bfa0 'struct _ldiv_t' sugar
|   `-RecordType 0x2215098be40 'struct _ldiv_t'
|     `-Record 0x2215098bda8 '_ldiv_t'
|-RecordDecl 0x2215098f0f0 <line:85:9, line:88:1> line:85:16 struct _lldiv_t definition
| |-MaxFieldAlignmentAttr 0x2215098f1b0 <<invalid sloc>> Implicit 64
| |-FieldDecl 0x2215098f228 <line:86:9, col:19> col:19 quot 'long long'
| `-FieldDecl 0x2215098f298 <line:87:9, col:19> col:19 rem 'long long'
|-TypedefDecl 0x2215098f348 <line:85:1, line:88:3> col:3 referenced lldiv_t 'struct _lldiv_t':'struct _lldiv_t'
| `-ElaboratedType 0x2215098f2f0 'struct _lldiv_t' sugar
|   `-RecordType 0x2215098f190 'struct _lldiv_t'
|     `-Record 0x2215098f0f0 '_lldiv_t'
|-RecordDecl 0x2215098f3e0 <line:103:9, line:105:1> line:103:9 struct definition
| |-MaxFieldAlignmentAttr 0x2215098f4a0 <<invalid sloc>> Implicit 32
| `-FieldDecl 0x2215098f5a0 <line:104:5, col:24> col:19 ld 'unsigned char [10]'
|-TypedefDecl 0x2215098f658 <line:103:1, line:105:3> col:3 referenced _LDOUBLE 'struct _LDOUBLE':'_LDOUBLE'
| `-ElaboratedType 0x2215098f600 'struct _LDOUBLE' sugar
|   `-RecordType 0x2215098f480 '_LDOUBLE'
|     `-Record 0x2215098f3e0 ''
|-RecordDecl 0x2215098f6c8 <line:122:9, line:124:1> line:122:9 struct definition
| `-FieldDecl 0x2215098f798 <line:123:9, col:16> col:16 x 'double'
|-TypedefDecl 0x2215098f848 <line:122:1, line:124:3> col:3 referenced _CRT_DOUBLE 'struct _CRT_DOUBLE':'_CRT_DOUBLE'
| `-ElaboratedType 0x2215098f7f0 'struct _CRT_DOUBLE' sugar
|   `-RecordType 0x2215098f760 '_CRT_DOUBLE'
|     `-Record 0x2215098f6c8 ''
|-RecordDecl 0x2215098f8b8 <line:126:9, line:128:1> line:126:9 struct definition
| `-FieldDecl 0x2215098f988 <line:127:5, col:11> col:11 f 'float'
|-TypedefDecl 0x2215098fa38 <line:126:1, line:128:3> col:3 referenced _CRT_FLOAT 'struct _CRT_FLOAT':'_CRT_FLOAT'
| `-ElaboratedType 0x2215098f9e0 'struct _CRT_FLOAT' sugar
|   `-RecordType 0x2215098f950 '_CRT_FLOAT'
|     `-Record 0x2215098f8b8 ''
|-RecordDecl 0x2215098faa8 <line:134:9, line:139:1> line:134:9 struct definition
| `-FieldDecl 0x2215098fb78 <line:138:9, col:21> col:21 x 'long double'
|-TypedefDecl 0x2215098fc28 <line:134:1, line:139:3> col:3 _LONGDOUBLE 'struct _LONGDOUBLE':'_LONGDOUBLE'
| `-ElaboratedType 0x2215098fbd0 'struct _LONGDOUBLE' sugar
|   `-RecordType 0x2215098fb40 '_LONGDOUBLE'
|     `-Record 0x2215098faa8 ''
|-RecordDecl 0x2215098fcc0 <line:144:9, line:146:1> line:144:9 struct definition
| |-MaxFieldAlignmentAttr 0x2215098fd80 <<invalid sloc>> Implicit 32
| `-FieldDecl 0x2215098fe80 <line:145:5, col:26> col:19 ld12 'unsigned char [12]'
|-TypedefDecl 0x2215098ff38 <line:144:1, line:146:3> col:3 _LDBL12 'struct _LDBL12':'_LDBL12'
| `-ElaboratedType 0x2215098fee0 'struct _LDBL12' sugar
|   `-RecordType 0x2215098fd60 '_LDBL12'
|     `-Record 0x2215098fcc0 ''
|-VarDecl 0x2215098ffc0 <line:170:9, col:20> col:20 __mb_cur_max 'int' extern
|-FunctionDecl 0x22150991170 <line:175:9, col:44> col:21 ___mb_cur_max_func 'int (void) __attribute__((cdecl))':'int (void)'
|-FunctionDecl 0x22150991398 <line:176:9, col:51> col:21 ___mb_cur_max_l_func 'int (_locale_t) __attribute__((cdecl))':'int (_locale_t)'
| `-ParmVarDecl 0x22150991238 <col:42> col:51 '_locale_t':'struct localeinfo_struct *'
|-TypedefDecl 0x221509915e0 <line:215:1, col:24> col:24 referenced _purecall_handler 'void (*)(void) __attribute__((cdecl))'
| `-PointerType 0x22150991580 'void (*)(void) __attribute__((cdecl))'
|   `-AttributedType 0x22150991520 'void (void) __attribute__((cdecl))' sugar
|     |-ParenType 0x221509914d0 'void (void)' sugar
|     | `-FunctionProtoType 0x221508aec60 'void (void)' cdecl
|     |   `-BuiltinType 0x2214ee20ae0 'void'
|     `-ParenType 0x221509914d0 'void (void)' sugar
|       `-FunctionProtoType 0x221508aec60 'void (void)' cdecl
|         `-BuiltinType 0x2214ee20ae0 'void'
|-FunctionDecl 0x221509917e0 <line:218:9, col:92> col:35 _set_purecall_handler '_purecall_handler (_purecall_handler) __attribute__((cdecl))':'_purecall_handler (_purecall_handler)'
| `-ParmVarDecl 0x22150991670 <col:66, col:84> col:84 _Handler '_purecall_handler':'void (*)(void) __attribute__((cdecl))'
|-FunctionDecl 0x221509919f8 <line:219:9, col:61> col:35 _get_purecall_handler '_purecall_handler (void) __attribute__((cdecl))':'_purecall_handler (void)'
|-TypedefDecl 0x22150991e48 <line:235:1, col:24> col:24 referenced _invalid_parameter_handler 'void (*)(const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t) __attribute__((cdecl))'
| `-PointerType 0x22150991dc0 'void (*)(const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t) __attribute__((cdecl))'
|   `-AttributedType 0x22150991d60 'void (const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t) __attribute__((cdecl))' sugar
|     |-ParenType 0x22150991d10 'void (const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t)' sugar
|     | `-FunctionProtoType 0x221508e87b0 'void (const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t)' cdecl
|     |   |-BuiltinType 0x2214ee20ae0 'void'
|     |   |-PointerType 0x221508af030 'const wchar_t *'
|     |   | `-QualType 0x221508aefe1 'const wchar_t' const
|     |   |   `-TypedefType 0x221508aefe0 'wchar_t' sugar
|     |   |     |-Typedef 0x221508ae8d0 'wchar_t'
|     |   |     `-BuiltinType 0x2214ee20c00 'unsigned short'
|     |   |-PointerType 0x221508af030 'const wchar_t *'
|     |   | `-QualType 0x221508aefe1 'const wchar_t' const
|     |   |   `-TypedefType 0x221508aefe0 'wchar_t' sugar
|     |   |     |-Typedef 0x221508ae8d0 'wchar_t'
|     |   |     `-BuiltinType 0x2214ee20c00 'unsigned short'
|     |   |-PointerType 0x221508af030 'const wchar_t *'
|     |   | `-QualType 0x221508aefe1 'const wchar_t' const
|     |   |   `-TypedefType 0x221508aefe0 'wchar_t' sugar
|     |   |     |-Typedef 0x221508ae8d0 'wchar_t'
|     |   |     `-BuiltinType 0x2214ee20c00 'unsigned short'
|     |   |-BuiltinType 0x2214ee20c20 'unsigned int'
|     |   `-TypedefType 0x221508af240 'uintptr_t' sugar
|     |     |-Typedef 0x2214ee21900 'uintptr_t'
|     |     `-BuiltinType 0x2214ee20c60 'unsigned long long'
|     `-ParenType 0x22150991d10 'void (const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t)' sugar
|       `-FunctionProtoType 0x221508e87b0 'void (const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t)' cdecl
|         |-BuiltinType 0x2214ee20ae0 'void'
|         |-PointerType 0x221508af030 'const wchar_t *'
|         | `-QualType 0x221508aefe1 'const wchar_t' const
|         |   `-TypedefType 0x221508aefe0 'wchar_t' sugar
|         |     |-Typedef 0x221508ae8d0 'wchar_t'
|         |     `-BuiltinType 0x2214ee20c00 'unsigned short'
|         |-PointerType 0x221508af030 'const wchar_t *'
|         | `-QualType 0x221508aefe1 'const wchar_t' const
|         |   `-TypedefType 0x221508aefe0 'wchar_t' sugar
|         |     |-Typedef 0x221508ae8d0 'wchar_t'
|         |     `-BuiltinType 0x2214ee20c00 'unsigned short'
|         |-PointerType 0x221508af030 'const wchar_t *'
|         | `-QualType 0x221508aefe1 'const wchar_t' const
|         |   `-TypedefType 0x221508aefe0 'wchar_t' sugar
|         |     |-Typedef 0x221508ae8d0 'wchar_t'
|         |     `-BuiltinType 0x2214ee20c00 'unsigned short'
|         |-BuiltinType 0x2214ee20c20 'unsigned int'
|         `-TypedefType 0x221508af240 'uintptr_t' sugar
|           |-Typedef 0x2214ee21900 'uintptr_t'
|           `-BuiltinType 0x2214ee20c60 'unsigned long long'
|-FunctionDecl 0x22150992040 <line:238:9, col:119> col:44 _set_invalid_parameter_handler '_invalid_parameter_handler (_invalid_parameter_handler) __attribute__((cdecl))':'_invalid_parameter_handler (_invalid_parameter_handler)'
| `-ParmVarDecl 0x22150991ed0 <col:84, col:111> col:111 _Handler '_invalid_parameter_handler':'void (*)(const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t) __attribute__((cdecl))'
|-FunctionDecl 0x22150990248 <line:239:9, col:79> col:44 _get_invalid_parameter_handler '_invalid_parameter_handler (void) __attribute__((cdecl))':'_invalid_parameter_handler (void)'
|-FunctionDecl 0x22150990430 <line:245:9, col:41> col:30 _errno 'int *(void) __attribute__((cdecl))':'int *(void)' extern
|-FunctionDecl 0x22150990670 <line:248:1, col:43> col:17 _set_errno 'errno_t (int) __attribute__((cdecl))':'errno_t (int)'
| `-ParmVarDecl 0x22150990500 <col:33, col:37> col:37 _Value 'int'
|-FunctionDecl 0x221509908c0 <line:249:1, col:46> col:17 _get_errno 'errno_t (int *) __attribute__((cdecl))':'errno_t (int *)'
| `-ParmVarDecl 0x22150990748 <col:34, col:40> col:40 _Value 'int *'
|-FunctionDecl 0x22150990ae0 <line:252:9, col:48> col:33 __doserrno 'unsigned long *(void) __attribute__((cdecl))':'unsigned long *(void)'
|-FunctionDecl 0x22150990d20 <line:255:1, col:56> col:17 _set_doserrno 'errno_t (unsigned long) __attribute__((cdecl))':'errno_t (unsigned long)'
| `-ParmVarDecl 0x22150990bb0 <col:36, col:50> col:50 _Value 'unsigned long'
|-FunctionDecl 0x22150990f70 <line:256:1, col:59> col:17 _get_doserrno 'errno_t (unsigned long *) __attribute__((cdecl))':'errno_t (unsigned long *)'
| `-ParmVarDecl 0x22150990df8 <col:37, col:53> col:53 _Value 'unsigned long *'
|-FunctionDecl 0x2215092d780 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:259:77> col:59 __sys_errlist 'char **(void) __attribute__((cdecl))':'char **(void)'
| `-DeprecatedAttr 0x2215092d820 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using strerror instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2215092dae0 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:262:72> col:57 __sys_nerr 'int *(void) __attribute__((cdecl))':'int *(void)'
| `-DeprecatedAttr 0x2215092db80 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using strerror instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-VarDecl 0x2215092dcc8 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:288:9, col:20> col:20 __argc 'int' extern
|-VarDecl 0x2215092dd60 <line:289:9, col:24> col:24 __argv 'char **' extern
|-VarDecl 0x2215092ddf8 <line:290:9, col:27> col:27 __wargv 'wchar_t **' extern
|-VarDecl 0x2215092de90 <line:306:9, col:24> col:24 _environ 'char **' extern
|-VarDecl 0x2215092df28 <line:307:9, col:27> col:27 _wenviron 'wchar_t **' extern
|-VarDecl 0x2215092e080 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:311:68> col:68 _pgmptr 'char *' extern
| `-DeprecatedAttr 0x2215092e0e8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _get_pgmptr instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-VarDecl 0x2215092e2e8 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:312:72> col:72 _wpgmptr 'wchar_t *' extern
| `-DeprecatedAttr 0x2215092e350 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _get_wpgmptr instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x221509326b0 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:339:1, col:61> col:17 _get_pgmptr 'errno_t (char **) __attribute__((cdecl))':'errno_t (char **)'
| `-ParmVarDecl 0x2215092e498 <col:47, col:55> col:55 _Value 'char **'
|-FunctionDecl 0x22150932900 <line:340:1, col:65> col:17 _get_wpgmptr 'errno_t (wchar_t **) __attribute__((cdecl))':'errno_t (wchar_t **)'
| `-ParmVarDecl 0x22150932788 <col:48, col:59> col:59 _Value 'wchar_t **'
|-VarDecl 0x22150932a98 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:346:64> col:64 _fmode 'int' extern
| `-DeprecatedAttr 0x22150932b00 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _get_fmode instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x22150932d20 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:353:9, col:50> col:25 _set_fmode 'errno_t (int) __attribute__((cdecl))':'errno_t (int)'
| `-ParmVarDecl 0x22150932c48 <col:41, col:45> col:45 _Mode 'int'
|-FunctionDecl 0x22150932ed0 <line:354:9, col:54> col:25 _get_fmode 'errno_t (int *) __attribute__((cdecl))':'errno_t (int *)'
| `-ParmVarDecl 0x22150932df8 <col:42, col:48> col:48 _PMode 'int *'
|-FunctionDecl 0x22150933120 <line:376:43> col:43 implicit exit 'void (int) __attribute__((noreturn))' extern
| `-ParmVarDecl 0x221509331c0 <<invalid sloc>> <invalid sloc> 'int'
|-FunctionDecl 0x22150933230 prev 0x22150933120 <col:9, col:62> col:43 exit 'void (int) __attribute__((noreturn))'
| `-ParmVarDecl 0x22150932fa8 <col:53, col:57> col:57 _Code 'int'
|-FunctionDecl 0x221509333e0 <line:378:43> col:43 implicit _exit 'void (int) __attribute__((noreturn))' extern
| `-ParmVarDecl 0x22150933480 <<invalid sloc>> <invalid sloc> 'int'
|-FunctionDecl 0x221509334f0 prev 0x221509333e0 <col:9, col:63> col:43 _exit 'void (int) __attribute__((noreturn))'
| `-ParmVarDecl 0x22150933308 <col:54, col:58> col:58 _Code 'int'
|-FunctionDecl 0x221509336c0 <line:379:43> col:43 implicit abort 'void (void) __attribute__((noreturn))' extern
|-FunctionDecl 0x22150933760 prev 0x221509336c0 <col:9, col:53> col:43 abort 'void (void) __attribute__((noreturn))'
|-FunctionDecl 0x22150933a20 <line:382:9, col:99> col:30 _set_abort_behavior 'unsigned int (unsigned int, unsigned int) __attribute__((cdecl))':'unsigned int (unsigned int, unsigned int)'
| |-ParmVarDecl 0x22150933830 <col:55, col:68> col:68 _Flags 'unsigned int'
| `-ParmVarDecl 0x221509338b0 <col:81, col:94> col:94 _Mask 'unsigned int'
|-FunctionDecl 0x22150933c18 <line:384:19> col:19 implicit abs 'int (int)' extern
| |-ParmVarDecl 0x22150933cb8 <<invalid sloc>> <invalid sloc> 'int'
| |-NoThrowAttr 0x22150933d28 <col:19> Implicit
| `-ConstAttr 0x22150933d80 <col:19> Implicit
|-FunctionDecl 0x22150933da8 prev 0x22150933c18 <col:1, col:34> col:19 abs 'int (int)'
| |-ParmVarDecl 0x22150933b00 <col:28, col:32> col:32 _X 'int'
| |-NoThrowAttr 0x22150933e98 <col:19> Inherited Implicit
| `-ConstAttr 0x22150933ec0 <col:19> Inherited Implicit
|-FunctionDecl 0x22150934048 <line:385:19> col:19 implicit labs 'long (long)' extern
| |-ParmVarDecl 0x221509340e8 <<invalid sloc>> <invalid sloc> 'long'
| |-NoThrowAttr 0x22150934158 <col:19> Implicit
| `-ConstAttr 0x221509341b0 <col:19> Implicit
|-FunctionDecl 0x221509341d8 prev 0x22150934048 <col:1, col:36> col:19 labs 'long (long)'
| |-ParmVarDecl 0x22150933f00 <col:29, col:34> col:34 _X 'long'
| |-NoThrowAttr 0x221509342c8 <col:19> Inherited Implicit
| `-ConstAttr 0x221509342f0 <col:19> Inherited Implicit
|-FunctionDecl 0x22150934478 <line:386:19> col:19 implicit llabs 'long long (long long)' extern
| |-ParmVarDecl 0x22150934518 <<invalid sloc>> <invalid sloc> 'long long'
| |-NoThrowAttr 0x22150934588 <col:19> Implicit
| `-ConstAttr 0x221509345e0 <col:19> Implicit
|-FunctionDecl 0x22150934608 prev 0x22150934478 <col:1, col:42> col:19 llabs 'long long (long long)'
| |-ParmVarDecl 0x22150934330 <col:30, col:40> col:40 _X 'long long'
| |-NoThrowAttr 0x2215092e6b8 <col:19> Inherited Implicit
| `-ConstAttr 0x2215092e6e0 <col:19> Inherited Implicit
|-FunctionDecl 0x2215092e7e8 <line:388:9, col:42> col:28 _abs64 'long long (long long) __attribute__((cdecl))':'long long (long long)'
| `-ParmVarDecl 0x2215092e720 <col:35> col:42 'long long'
|-FunctionDecl 0x2215092eae8 <line:426:9, col:53> col:24 atexit 'int (void (*)(void) __attribute__((cdecl))) __attribute__((cdecl))':'int (void (*)(void) __attribute__((cdecl)))'
| `-ParmVarDecl 0x2215092e980 <col:31, col:45> col:46 'void (*)(void) __attribute__((cdecl))'
|-FunctionDecl 0x2215092ed08 <line:428:24, col:71> col:40 atof 'double (const char *) __attribute__((cdecl))':'double (const char *)'
| `-ParmVarDecl 0x2215092ebc0 <col:52, col:64> col:64 _String 'const char *'
|-FunctionDecl 0x2215092f000 <line:429:24, col:102> col:40 _atof_l 'double (const char *, _locale_t) __attribute__((cdecl))':'double (const char *, _locale_t)'
| |-ParmVarDecl 0x2215092ede0 <col:55, col:67> col:67 _String 'const char *'
| `-ParmVarDecl 0x2215092ee58 <col:85, col:95> col:95 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2215092f228 <line:430:43, col:86> col:58 atoi 'int (const char *) __attribute__((cdecl))':'int (const char *)'
| `-ParmVarDecl 0x2215092f0e0 <col:70, col:82> col:82 _Str 'const char *'
|-FunctionDecl 0x2215092f520 <line:431:24, col:98> col:39 _atoi_l 'int (const char *, _locale_t) __attribute__((cdecl))':'int (const char *, _locale_t)'
| |-ParmVarDecl 0x2215092f300 <col:54, col:66> col:66 _Str 'const char *'
| `-ParmVarDecl 0x2215092f378 <col:81, col:91> col:91 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x221509367d8 <line:432:24, col:67> col:39 atol 'long (const char *) __attribute__((cdecl))':'long (const char *)'
| `-ParmVarDecl 0x2215092f600 <col:51, col:63> col:63 _Str 'const char *'
|-FunctionDecl 0x22150936ad0 <line:433:24, col:98> col:39 _atol_l 'long (const char *, _locale_t) __attribute__((cdecl))':'long (const char *, _locale_t)'
| |-ParmVarDecl 0x221509368b0 <col:54, col:66> col:66 _Str 'const char *'
| `-ParmVarDecl 0x22150936928 <col:81, col:91> col:91 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x22150936cf8 <line:434:24, col:71> col:42 atoll 'long long (const char *) __attribute__((cdecl))':'long long (const char *)'
| `-ParmVarDecl 0x22150936bb0 <col:55, col:67> col:67 _Str 'const char *'
|-FunctionDecl 0x22150936ff0 <line:435:24, col:102> col:42 _atoll_l 'long long (const char *, _locale_t) __attribute__((cdecl))':'long long (const char *, _locale_t)'
| |-ParmVarDecl 0x22150936dd0 <col:58, col:70> col:70 _Str 'const char *'
| `-ParmVarDecl 0x22150936e48 <col:85, col:95> col:95 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x22150930830 <line:439:24, line:441:97> line:439:39 bsearch_s 'void *(const void *, const void *, rsize_t, rsize_t, int (*)(void *, const void *, const void *) __attribute__((cdecl)), void *) __attribute__((cdecl))':'void *(const void *, const void *, rsize_t, rsize_t, int (*)(void *, const void *, const void *) __attribute__((cdecl)), void *)'
| |-ParmVarDecl 0x221509370d0 <col:54, col:67> col:67 _Key 'const void *'
| |-ParmVarDecl 0x22150937150 <col:124, col:137> col:137 _Base 'const void *'
| |-ParmVarDecl 0x221509371c8 <line:440:14, col:22> col:22 _NumOfElements 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x22150937240 <col:43, col:51> col:51 _SizeOfElements 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x221509375a0 <line:441:14, col:29> col:29 _PtFuncCompare 'int (*)(void *, const void *, const void *) __attribute__((cdecl))'
| `-ParmVarDecl 0x22150937620 <col:82, col:89> col:89 _Context 'void *'
|-FunctionDecl 0x22150930fb8 <line:443:24, line:445:72> line:443:39 bsearch 'void *(const void *, const void *, size_t, size_t, int (*)(const void *, const void *) __attribute__((cdecl))) __attribute__((cdecl))':'void *(const void *, const void *, size_t, size_t, int (*)(const void *, const void *) __attribute__((cdecl)))'
| |-ParmVarDecl 0x22150930930 <col:52, col:65> col:65 _Key 'const void *'
| |-ParmVarDecl 0x221509309b0 <col:122, col:135> col:135 _Base 'const void *'
| |-ParmVarDecl 0x22150930a28 <line:444:14, col:21> col:21 _NumOfElements 'size_t':'unsigned long long'
| |-ParmVarDecl 0x22150930aa0 <col:42, col:49> col:49 _SizeOfElements 'size_t':'unsigned long long'
| `-ParmVarDecl 0x22150930d78 <line:445:14, col:29> col:29 _PtFuncCompare 'int (*)(const void *, const void *) __attribute__((cdecl))'
|-FunctionDecl 0x2215092f6d0 <line:448:9, line:450:96> line:448:22 qsort_s 'void (void *, rsize_t, rsize_t, int (*)(void *, const void *, const void *) __attribute__((cdecl)), void *) __attribute__((cdecl))':'void (void *, rsize_t, rsize_t, int (*)(void *, const void *, const void *) __attribute__((cdecl)), void *)'
| |-ParmVarDecl 0x221509310b0 <col:85, col:92> col:92 _Base 'void *'
| |-ParmVarDecl 0x22150931128 <line:449:14, col:22> col:22 _NumOfElements 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x221509311a0 <col:43, col:51> col:51 _SizeOfElements 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x22150931408 <line:450:14, col:29> col:29 _PtFuncCompare 'int (*)(void *, const void *, const void *) __attribute__((cdecl))'
| `-ParmVarDecl 0x22150931488 <col:82, col:88> col:88 _Context 'void *'
|-FunctionDecl 0x2215092fc98 <line:452:9, line:454:72> line:452:22 qsort 'void (void *, size_t, size_t, int (*)(const void *, const void *) __attribute__((cdecl))) __attribute__((cdecl))':'void (void *, size_t, size_t, int (*)(const void *, const void *) __attribute__((cdecl)))'
| |-ParmVarDecl 0x2215092f7c8 <col:84, col:91> col:91 _Base 'void *'
| |-ParmVarDecl 0x2215092f840 <line:453:14, col:21> col:21 _NumOfElements 'size_t':'unsigned long long'
| |-ParmVarDecl 0x2215092f8b8 <col:42, col:49> col:49 _SizeOfElements 'size_t':'unsigned long long'
| `-ParmVarDecl 0x2215092fa98 <line:454:14, col:29> col:29 _PtFuncCompare 'int (*)(const void *, const void *) __attribute__((cdecl))'
|-FunctionDecl 0x2215092fed8 <line:456:47> col:47 implicit _byteswap_ushort 'unsigned short (unsigned short)' extern
| |-ParmVarDecl 0x2215092ff78 <<invalid sloc>> <invalid sloc> 'unsigned short'
| |-NoThrowAttr 0x2215092ffe8 <col:47> Implicit
| `-ConstAttr 0x22150930040 <col:47> Implicit
|-FunctionDecl 0x22150930068 prev 0x2215092fed8 <col:24, col:90> col:47 _byteswap_ushort 'unsigned short (unsigned short)'
| |-ParmVarDecl 0x2215092fd88 <col:69, col:84> col:84 _Short 'unsigned short'
| |-NoThrowAttr 0x22150930158 <col:47> Inherited Implicit
| `-ConstAttr 0x22150930180 <col:47> Inherited Implicit
|-FunctionDecl 0x22150930308 <line:457:47> col:47 implicit _byteswap_ulong 'unsigned long (unsigned long)' extern
| |-ParmVarDecl 0x221509303a8 <<invalid sloc>> <invalid sloc> 'unsigned long'
| |-NoThrowAttr 0x22150930418 <col:47> Implicit
| `-ConstAttr 0x22150930470 <col:47> Implicit
|-FunctionDecl 0x22150930498 prev 0x22150930308 <col:24, col:88> col:47 _byteswap_ulong 'unsigned long (unsigned long)'
| |-ParmVarDecl 0x221509301c0 <col:69, col:83> col:83 _Long 'unsigned long'
| |-NoThrowAttr 0x22150930588 <col:47> Inherited Implicit
| `-ConstAttr 0x221509305b0 <col:47> Inherited Implicit
|-FunctionDecl 0x221509387d8 <line:458:49> col:49 implicit _byteswap_uint64 'unsigned long long (unsigned long long)' extern
| |-ParmVarDecl 0x22150938878 <<invalid sloc>> <invalid sloc> 'unsigned long long'
| |-NoThrowAttr 0x221509388e8 <col:49> Implicit
| `-ConstAttr 0x22150938940 <col:49> Implicit
|-FunctionDecl 0x22150938968 prev 0x221509387d8 <col:24, col:94> col:49 _byteswap_uint64 'unsigned long long (unsigned long long)'
| |-ParmVarDecl 0x221509305f0 <col:71, col:88> col:88 _Int64 'unsigned long long'
| |-NoThrowAttr 0x22150938a58 <col:49> Inherited Implicit
| `-ConstAttr 0x22150938a80 <col:49> Inherited Implicit
|-FunctionDecl 0x22150938d08 <line:459:24, col:85> col:39 div 'div_t (int, int) __attribute__((cdecl))':'div_t (int, int)'
| |-ParmVarDecl 0x22150938ae8 <col:48, col:52> col:52 _Numerator 'int'
| `-ParmVarDecl 0x22150938b68 <col:69, col:73> col:73 _Denominator 'int'
|-FunctionDecl 0x22150938f88 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:462:109> col:74 getenv 'char *(const char *) __attribute__((cdecl))':'char *(const char *)'
| |-ParmVarDecl 0x22150938ea8 <col:88, col:101> col:101 _VarName 'const char *'
| `-DeprecatedAttr 0x22150939030 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _dupenv_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x22150939548 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:464:28, col:177> col:44 getenv_s 'errno_t (size_t *, char *, rsize_t, const char *) __attribute__((cdecl))':'errno_t (size_t *, char *, rsize_t, const char *)'
| |-ParmVarDecl 0x221509391c8 <col:59, col:68> col:68 _ReturnSize 'size_t *'
| |-ParmVarDecl 0x22150939248 <col:110, col:117> col:117 _DstBuf 'char *'
| |-ParmVarDecl 0x221509392c0 <col:131, col:139> col:139 _DstSize 'rsize_t':'unsigned long long'
| `-ParmVarDecl 0x22150939340 <col:156, col:169> col:169 _VarName 'const char *'
|-FunctionDecl 0x22150939970 <line:472:28, col:212> col:44 _dupenv_s 'errno_t (char **, size_t *, const char *) __attribute__((cdecl))':'errno_t (char **, size_t *, const char *)'
| |-ParmVarDecl 0x22150939638 <col:127, col:134> col:134 _PBuffer 'char **'
| |-ParmVarDecl 0x22150939720 <col:154, col:163> col:163 _PBufferSizeInBytes 'size_t *'
| `-ParmVarDecl 0x221509397a0 <col:191, col:204> col:204 _VarName 'const char *'
|-FunctionDecl 0x22150939dd8 <line:479:28, col:141> col:44 _itoa_s 'errno_t (int, char *, size_t, int) __attribute__((cdecl))':'errno_t (int, char *, size_t, int)'
| |-ParmVarDecl 0x22150939a58 <col:57, col:61> col:61 _Value 'int'
| |-ParmVarDecl 0x22150939ad8 <col:91, col:98> col:98 _DstBuf 'char *'
| |-ParmVarDecl 0x22150939b50 <col:112, col:119> col:119 _Size 'size_t':'unsigned long long'
| `-ParmVarDecl 0x22150939bd0 <col:131, col:135> col:135 _Radix 'int'
|-FunctionDecl 0x2215093a258 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1951:149> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:481:79 _itoa 'char *(int, char *, int) __attribute__((cdecl))':'char *(int, char *, int)'
| |-ParmVarDecl 0x22150939fc0 <col:91, col:96> col:96 _Value 'int'
| |-ParmVarDecl 0x2215093a040 <col:128, col:134> col:134 _Dest 'char *'
| |-ParmVarDecl 0x2215093a0c0 <col:146, col:151> col:151 _Radix 'int'
| `-DeprecatedAttr 0x2215093a310 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _itoa_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2215093b828 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:482:28, col:145> col:44 _i64toa_s 'errno_t (long long, char *, size_t, int) __attribute__((cdecl))':'errno_t (long long, char *, size_t, int)'
| |-ParmVarDecl 0x2215093a458 <col:59, col:67> col:67 _Val 'long long'
| |-ParmVarDecl 0x2215093a4d8 <col:95, col:102> col:102 _DstBuf 'char *'
| |-ParmVarDecl 0x2215093a550 <col:116, col:123> col:123 _Size 'size_t':'unsigned long long'
| `-ParmVarDecl 0x2215093a5d0 <col:135, col:139> col:139 _Radix 'int'
|-FunctionDecl 0x2215093bc78 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:483:140> col:59 _i64toa 'char *(long long, char *, int) __attribute__((cdecl))':'char *(long long, char *, int)'
| |-ParmVarDecl 0x2215093b9d8 <col:72, col:80> col:80 _Val 'long long'
| |-ParmVarDecl 0x2215093ba58 <col:109, col:116> col:116 _DstBuf 'char *'
| |-ParmVarDecl 0x2215093bad8 <col:130, col:134> col:134 _Radix 'int'
| `-DeprecatedAttr 0x2215093bd30 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _i64toa_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2215093c1f8 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:484:28, col:155> col:44 _ui64toa_s 'errno_t (unsigned long long, char *, size_t, int) __attribute__((cdecl))':'errno_t (unsigned long long, char *, size_t, int)'
| |-ParmVarDecl 0x2215093be78 <col:60, col:77> col:77 _Val 'unsigned long long'
| |-ParmVarDecl 0x2215093bef8 <col:105, col:112> col:112 _DstBuf 'char *'
| |-ParmVarDecl 0x2215093bf70 <col:126, col:133> col:133 _Size 'size_t':'unsigned long long'
| `-ParmVarDecl 0x2215093bff0 <col:145, col:149> col:149 _Radix 'int'
|-FunctionDecl 0x2215093c648 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:485:151> col:60 _ui64toa 'char *(unsigned long long, char *, int) __attribute__((cdecl))':'char *(unsigned long long, char *, int)'
| |-ParmVarDecl 0x2215093c3a8 <col:74, col:91> col:91 _Val 'unsigned long long'
| |-ParmVarDecl 0x2215093c428 <col:120, col:127> col:127 _DstBuf 'char *'
| |-ParmVarDecl 0x2215093c4a8 <col:141, col:145> col:145 _Radix 'int'
| `-DeprecatedAttr 0x2215093c750 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _ui64toa_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2215093c978 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:486:24, col:75> col:40 _atoi64 'long long (const char *) __attribute__((cdecl))':'long long (const char *)'
| `-ParmVarDecl 0x2215093c898 <col:55, col:68> col:68 _String 'const char *'
|-FunctionDecl 0x2215093cbc8 <line:487:24, col:105> col:40 _atoi64_l 'long long (const char *, _locale_t) __attribute__((cdecl))':'long long (const char *, _locale_t)'
| |-ParmVarDecl 0x2215093ca50 <col:57, col:70> col:70 _String 'const char *'
| `-ParmVarDecl 0x2215093cac8 <col:88, col:98> col:98 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2215093cf48 <line:488:24, col:136> col:40 _strtoi64 'long long (const char *, char **, int) __attribute__((cdecl))':'long long (const char *, char **, int)'
| |-ParmVarDecl 0x2215093cca8 <col:57, col:70> col:70 _String 'const char *'
| |-ParmVarDecl 0x2215093cd28 <col:104, col:112> col:112 _EndPtr 'char **'
| `-ParmVarDecl 0x2215093cda8 <col:126, col:130> col:130 _Radix 'int'
|-FunctionDecl 0x2215093d3b0 <line:489:24, col:166> col:40 _strtoi64_l 'long long (const char *, char **, int, _locale_t) __attribute__((cdecl))':'long long (const char *, char **, int, _locale_t)'
| |-ParmVarDecl 0x2215093d030 <col:59, col:72> col:72 _String 'const char *'
| |-ParmVarDecl 0x2215093d0b0 <col:106, col:114> col:114 _EndPtr 'char **'
| |-ParmVarDecl 0x2215093d130 <col:128, col:132> col:132 _Radix 'int'
| `-ParmVarDecl 0x2215093d1a8 <col:149, col:159> col:159 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2215093a730 <line:490:24, col:146> col:49 _strtoui64 'unsigned long long (const char *, char **, int) __attribute__((cdecl))':'unsigned long long (const char *, char **, int)'
| |-ParmVarDecl 0x2215093d4a0 <col:67, col:80> col:80 _String 'const char *'
| |-ParmVarDecl 0x2215093d520 <col:114, col:122> col:122 _EndPtr 'char **'
| `-ParmVarDecl 0x2215093d5a0 <col:136, col:140> col:140 _Radix 'int'
|-FunctionDecl 0x2215093aba0 <line:491:24, col:177> col:49 _strtoui64_l 'unsigned long long (const char *, char **, int, _locale_t) __attribute__((cdecl))':'unsigned long long (const char *, char **, int, _locale_t)'
| |-ParmVarDecl 0x2215093a818 <col:69, col:82> col:82 _String 'const char *'
| |-ParmVarDecl 0x2215093a898 <col:116, col:124> col:124 _EndPtr 'char **'
| |-ParmVarDecl 0x2215093a918 <col:138, col:143> col:143 _Radix 'int'
| `-ParmVarDecl 0x2215093a990 <col:160, col:170> col:170 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2215093aed8 <line:492:24, col:88> col:39 ldiv 'ldiv_t (long, long) __attribute__((cdecl))':'ldiv_t (long, long)'
| |-ParmVarDecl 0x2215093acb8 <col:49, col:54> col:54 _Numerator 'long'
| `-ParmVarDecl 0x2215093ad38 <col:71, col:76> col:76 _Denominator 'long'
|-FunctionDecl 0x2215093b1f8 <line:493:24, col:100> col:40 lldiv 'lldiv_t (long long, long long) __attribute__((cdecl))':'lldiv_t (long long, long long)'
| |-ParmVarDecl 0x2215093afd8 <col:51, col:61> col:61 _Numerator 'long long'
| `-ParmVarDecl 0x2215093b058 <col:78, col:88> col:88 _Denominator 'long long'
|-FunctionDecl 0x2215093b658 <line:515:28, col:140> col:44 _ltoa_s 'errno_t (long, char *, size_t, int) __attribute__((cdecl))':'errno_t (long, char *, size_t, int)'
| |-ParmVarDecl 0x2215093b2d8 <col:57, col:62> col:62 _Val 'long'
| |-ParmVarDecl 0x2215093b358 <col:90, col:97> col:97 _DstBuf 'char *'
| |-ParmVarDecl 0x2215093b3d0 <col:111, col:118> col:118 _Size 'size_t':'unsigned long long'
| `-ParmVarDecl 0x2215093b450 <col:130, col:134> col:134 _Radix 'int'
|-FunctionDecl 0x2215093eae8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1951:149> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:517:79 _ltoa 'char *(long, char *, int) __attribute__((cdecl))':'char *(long, char *, int)'
| |-ParmVarDecl 0x2215093e848 <col:91, col:97> col:97 _Value 'long'
| |-ParmVarDecl 0x2215093e8c8 <col:129, col:135> col:135 _Dest 'char *'
| |-ParmVarDecl 0x2215093e948 <col:147, col:152> col:152 _Radix 'int'
| `-DeprecatedAttr 0x2215093eba0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _ltoa_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2215093ef10 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:518:24, col:128> col:39 mblen 'int (const char *, size_t) __attribute__((cdecl))':'int (const char *, size_t)'
| |-ParmVarDecl 0x2215093ece8 <col:89, col:102> col:102 _Ch 'const char *'
| `-ParmVarDecl 0x2215093ed60 <col:112, col:119> col:119 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x2215093f2b8 <line:519:24, col:159> col:39 _mblen_l 'int (const char *, size_t, _locale_t) __attribute__((cdecl))':'int (const char *, size_t, _locale_t)'
| |-ParmVarDecl 0x2215093eff0 <col:92, col:105> col:105 _Ch 'const char *'
| |-ParmVarDecl 0x2215093f068 <col:115, col:122> col:122 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x2215093f0e0 <col:142, col:152> col:152 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2215093f478 <line:520:24, col:73> col:39 _mbstrlen 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)'
| `-ParmVarDecl 0x2215093f3a0 <col:56, col:69> col:69 _Str 'const char *'
|-FunctionDecl 0x22150937700 <line:521:24, col:102> col:39 _mbstrlen_l 'size_t (const char *, _locale_t) __attribute__((cdecl))':'size_t (const char *, _locale_t)'
| |-ParmVarDecl 0x2215093f550 <col:58, col:70> col:70 _Str 'const char *'
| `-ParmVarDecl 0x2215093f5c8 <col:85, col:95> col:95 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x22150937950 <line:522:24, col:96> col:39 _mbstrnlen 'size_t (const char *, size_t) __attribute__((cdecl))':'size_t (const char *, size_t)'
| |-ParmVarDecl 0x221509377e0 <col:57, col:69> col:69 _Str 'const char *'
| `-ParmVarDecl 0x22150937858 <col:80, col:87> col:87 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x22150937cf0 <line:523:24, col:126> col:39 _mbstrnlen_l 'size_t (const char *, size_t, _locale_t) __attribute__((cdecl))':'size_t (const char *, size_t, _locale_t)'
| |-ParmVarDecl 0x22150937a30 <col:59, col:71> col:71 _Str 'const char *'
| |-ParmVarDecl 0x22150937aa8 <col:82, col:89> col:89 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x22150937b20 <col:109, col:119> col:119 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x221509380a8 <line:524:9, col:170> col:24 mbtowc 'int (wchar_t *, const char *, size_t) __attribute__((cdecl))':'int (wchar_t *, const char *, size_t)'
| |-ParmVarDecl 0x22150937dd0 <col:54, col:64> col:64 _DstCh 'wchar_t *'
| |-ParmVarDecl 0x22150937e50 <col:122, col:135> col:135 _SrcCh 'const char *'
| `-ParmVarDecl 0x22150937ec8 <col:148, col:155> col:155 _SrcSizeInBytes 'size_t':'unsigned long long'
|-FunctionDecl 0x22150938500 <line:525:9, col:201> col:24 _mbtowc_l 'int (wchar_t *, const char *, size_t, _locale_t) __attribute__((cdecl))':'int (wchar_t *, const char *, size_t, _locale_t)'
| |-ParmVarDecl 0x22150938188 <col:57, col:67> col:67 _DstCh 'wchar_t *'
| |-ParmVarDecl 0x22150938208 <col:125, col:138> col:138 _SrcCh 'const char *'
| |-ParmVarDecl 0x22150938280 <col:151, col:158> col:158 _SrcSizeInBytes 'size_t':'unsigned long long'
| `-ParmVarDecl 0x221509382f8 <col:184, col:194> col:194 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x22150943af0 <line:526:28, col:271> col:44 mbstowcs_s 'errno_t (size_t *, wchar_t *, size_t, const char *, size_t) __attribute__((cdecl))':'errno_t (size_t *, wchar_t *, size_t, const char *, size_t)'
| |-ParmVarDecl 0x221509385e8 <col:65, col:74> col:74 _PtNumOfCharConverted 'size_t *'
| |-ParmVarDecl 0x22150938660 <col:155, col:165> col:165 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x221509437c0 <col:179, col:186> col:186 _SizeInWords 'size_t':'unsigned long long'
| |-ParmVarDecl 0x22150943840 <col:227, col:240> col:240 _SrcBuf 'const char *'
| `-ParmVarDecl 0x221509438b8 <col:254, col:261> col:261 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x22150943f70 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:2007:144> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:528:56 mbstowcs 'size_t (wchar_t *, const char *, size_t) __attribute__((cdecl))':'size_t (wchar_t *, const char *, size_t)'
| |-ParmVarDecl 0x22150943ca0 <col:97, col:106> col:106 _Dest 'wchar_t *'
| |-ParmVarDecl 0x22150943d20 <col:120, col:134> col:134 _Source 'const char *'
| |-ParmVarDecl 0x22150943d98 <col:148, col:156> col:156 _MaxCount 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x22150944028 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using mbstowcs_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x22150944628 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:530:28, col:301> col:44 _mbstowcs_s_l 'errno_t (size_t *, wchar_t *, size_t, const char *, size_t, _locale_t) __attribute__((cdecl))':'errno_t (size_t *, wchar_t *, size_t, const char *, size_t, _locale_t)'
| |-ParmVarDecl 0x22150944168 <col:68, col:77> col:77 _PtNumOfCharConverted 'size_t *'
| |-ParmVarDecl 0x221509441e0 <col:158, col:168> col:168 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x22150944258 <col:182, col:189> col:189 _SizeInWords 'size_t':'unsigned long long'
| |-ParmVarDecl 0x221509442d8 <col:230, col:243> col:243 _SrcBuf 'const char *'
| |-ParmVarDecl 0x22150944350 <col:257, col:264> col:264 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x221509443c8 <col:284, col:294> col:294 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x22150941be8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:2010:160> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:532:59 _mbstowcs_l 'size_t (wchar_t *, const char *, size_t, _locale_t) __attribute__((cdecl))':'size_t (wchar_t *, const char *, size_t, _locale_t)'
| |-ParmVarDecl 0x22150941870 <col:149, col:158> col:158 _Dest 'wchar_t *'
| |-ParmVarDecl 0x221509418f0 <col:172, col:186> col:186 _Source 'const char *'
| |-ParmVarDecl 0x22150941968 <col:200, col:208> col:208 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x221509419e0 <col:228, col:239> col:239 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x22150941ca8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _mbstowcs_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x22150941ea8 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:534:24, col:48> col:39 rand 'int (void) __attribute__((cdecl))':'int (void)'
|-FunctionDecl 0x22150942058 <line:539:28, col:73> col:43 _set_error_mode 'int (int) __attribute__((cdecl))':'int (int)'
| `-ParmVarDecl 0x22150941f78 <col:64, col:68> col:68 _Mode 'int'
|-FunctionDecl 0x22150942270 <line:541:9, col:53> col:24 srand 'void (unsigned int) __attribute__((cdecl))':'void (unsigned int)'
| `-ParmVarDecl 0x22150942130 <col:35, col:48> col:48 _Seed 'unsigned int'
|-FunctionDecl 0x22150942530 <line:542:39> col:39 implicit strtod 'double (const char *, char **)' extern
| |-ParmVarDecl 0x221509425d0 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x22150942638 <<invalid sloc>> <invalid sloc> 'char **'
|-FunctionDecl 0x221509426b0 prev 0x22150942530 <col:24, col:112> col:39 strtod 'double (const char *, char **)'
| |-ParmVarDecl 0x22150942348 <col:53, col:66> col:66 _Str 'const char *'
| `-ParmVarDecl 0x221509423c8 <col:97, col:105> col:105 _EndPtr 'char **'
|-FunctionDecl 0x22150944aa8 <line:543:24, col:143> col:39 _strtod_l 'double (const char *, char **, _locale_t) __attribute__((cdecl))':'double (const char *, char **, _locale_t)'
| |-ParmVarDecl 0x221509447d0 <col:56, col:69> col:69 _Str 'const char *'
| |-ParmVarDecl 0x22150944850 <col:100, col:108> col:108 _EndPtr 'char **'
| `-ParmVarDecl 0x221509448c8 <col:126, col:136> col:136 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x22150944e28 <line:544:39> col:39 implicit strtol 'long (const char *, char **, int)' extern
| |-ParmVarDecl 0x22150944ec8 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x22150944f30 <<invalid sloc>> <invalid sloc> 'char **'
| `-ParmVarDecl 0x22150944f98 <<invalid sloc>> <invalid sloc> 'int'
|-FunctionDecl 0x22150945018 prev 0x22150944e28 <col:24, col:130> col:39 strtol 'long (const char *, char **, int)'
| |-ParmVarDecl 0x22150944b90 <col:53, col:66> col:66 _Str 'const char *'
| |-ParmVarDecl 0x22150944c10 <col:97, col:105> col:105 _EndPtr 'char **'
| `-ParmVarDecl 0x22150944c90 <col:119, col:123> col:123 _Radix 'int'
|-FunctionDecl 0x22150945480 <line:545:24, col:158> col:39 _strtol_l 'long (const char *, char **, int, _locale_t) __attribute__((cdecl))':'long (const char *, char **, int, _locale_t)'
| |-ParmVarDecl 0x22150945100 <col:56, col:68> col:68 _Str 'const char *'
| |-ParmVarDecl 0x22150945180 <col:99, col:106> col:106 _EndPtr 'char **'
| |-ParmVarDecl 0x22150945200 <col:120, col:124> col:124 _Radix 'int'
| `-ParmVarDecl 0x22150945278 <col:141, col:151> col:151 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x22150940790 <line:546:43> col:43 implicit strtoll 'long long (const char *, char **, int)' extern
| |-ParmVarDecl 0x22150940830 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x22150940898 <<invalid sloc>> <invalid sloc> 'char **'
| `-ParmVarDecl 0x22150940900 <<invalid sloc>> <invalid sloc> 'int'
|-FunctionDecl 0x22150940980 prev 0x22150940790 <col:24, col:135> col:43 strtoll 'long long (const char *, char **, int)'
| |-ParmVarDecl 0x22150945570 <col:58, col:71> col:71 _Str 'const char *'
| |-ParmVarDecl 0x221509455f0 <col:102, col:110> col:110 _EndPtr 'char **'
| `-ParmVarDecl 0x22150945670 <col:124, col:128> col:128 _Radix 'int'
|-FunctionDecl 0x22150940d20 <line:547:24, col:166> col:43 _strtoll_l 'long long (const char *, char **, int, _locale_t) __attribute__((cdecl))':'long long (const char *, char **, int, _locale_t)'
| |-ParmVarDecl 0x22150940a68 <col:61, col:74> col:74 _Str 'const char *'
| |-ParmVarDecl 0x22150940ae8 <col:105, col:113> col:113 _EndPtr 'char **'
| |-ParmVarDecl 0x22150940b68 <col:127, col:131> col:131 _Radix 'int'
| `-ParmVarDecl 0x22150940be0 <col:148, col:158> col:158 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x221509410a8 <line:548:46> col:46 implicit strtoul 'unsigned long (const char *, char **, int)' extern
| |-ParmVarDecl 0x22150941148 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x221509411b0 <<invalid sloc>> <invalid sloc> 'char **'
| `-ParmVarDecl 0x22150941218 <<invalid sloc>> <invalid sloc> 'int'
|-FunctionDecl 0x22150941298 prev 0x221509410a8 <col:24, col:137> col:46 strtoul 'unsigned long (const char *, char **, int)'
| |-ParmVarDecl 0x22150940e10 <col:61, col:74> col:74 _Str 'const char *'
| |-ParmVarDecl 0x22150940e90 <col:105, col:113> col:113 _EndPtr 'char **'
| `-ParmVarDecl 0x22150940f10 <col:127, col:131> col:131 _Radix 'int'
|-FunctionDecl 0x221509467f0 <line:549:24, col:160> col:46 _strtoul_l 'unsigned long (const char *, char **, int, _locale_t) __attribute__((cdecl))':'unsigned long (const char *, char **, int, _locale_t)'
| |-ParmVarDecl 0x22150941380 <col:57, col:70> col:70 _Str 'const char *'
| |-ParmVarDecl 0x22150941400 <col:101, col:108> col:108 _EndPtr 'char **'
| |-ParmVarDecl 0x22150941480 <col:122, col:126> col:126 _Radix 'int'
| `-ParmVarDecl 0x221509414f8 <col:143, col:153> col:153 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x22150946b00 <line:550:51> col:51 implicit strtoull 'unsigned long long (const char *, char **, int)' extern
| |-ParmVarDecl 0x22150946ba0 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x22150946c08 <<invalid sloc>> <invalid sloc> 'char **'
| `-ParmVarDecl 0x22150946c70 <<invalid sloc>> <invalid sloc> 'int'
|-FunctionDecl 0x22150946cf0 prev 0x22150946b00 <col:24, col:143> col:51 strtoull 'unsigned long long (const char *, char **, int)'
| |-ParmVarDecl 0x221509468e0 <col:67, col:80> col:80 _Str 'const char *'
| |-ParmVarDecl 0x22150946960 <col:111, col:119> col:119 _EndPtr 'char **'
| `-ParmVarDecl 0x221509469e0 <col:133, col:137> col:137 _Radix 'int'
|-FunctionDecl 0x22150947090 <line:551:24, col:174> col:51 _strtoull_l 'unsigned long long (const char *, char **, int, _locale_t) __attribute__((cdecl))':'unsigned long long (const char *, char **, int, _locale_t)'
| |-ParmVarDecl 0x22150946dd8 <col:70, col:83> col:83 _Str 'const char *'
| |-ParmVarDecl 0x22150946e58 <col:114, col:122> col:122 _EndPtr 'char **'
| |-ParmVarDecl 0x22150946ed8 <col:136, col:140> col:140 _Radix 'int'
| `-ParmVarDecl 0x22150946f50 <col:157, col:167> col:167 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x22150947370 <line:552:44> col:44 implicit strtold 'long double (const char *, char **)' extern
| |-ParmVarDecl 0x22150947410 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x22150947478 <<invalid sloc>> <invalid sloc> 'char **'
|-FunctionDecl 0x221509474f0 prev 0x22150947370 <col:24, col:118> col:44 strtold 'long double (const char *, char **)'
| |-ParmVarDecl 0x22150947180 <col:59, col:72> col:72 _Str 'const char *'
| `-ParmVarDecl 0x22150947200 <col:103, col:111> col:111 _EndPtr 'char **'
|-FunctionDecl 0x221509458c8 <line:553:24, col:149> col:44 _strtold_l 'long double (const char *, char **, _locale_t) __attribute__((cdecl))':'long double (const char *, char **, _locale_t)'
| |-ParmVarDecl 0x221509475d0 <col:62, col:75> col:75 _Str 'const char *'
| |-ParmVarDecl 0x22150947650 <col:106, col:114> col:114 _EndPtr 'char **'
| `-ParmVarDecl 0x221509476c8 <col:132, col:142> col:142 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x22150945ba0 <line:554:38> col:38 implicit strtof 'float (const char *, char **)' extern
| |-ParmVarDecl 0x22150945c40 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x22150945ca8 <<invalid sloc>> <invalid sloc> 'char **'
|-FunctionDecl 0x22150945d20 prev 0x22150945ba0 <col:24, col:111> col:38 strtof 'float (const char *, char **)'
| |-ParmVarDecl 0x221509459b0 <col:52, col:65> col:65 _Str 'const char *'
| `-ParmVarDecl 0x22150945a30 <col:96, col:104> col:104 _EndPtr 'char **'
|-FunctionDecl 0x221509460d8 <line:555:24, col:142> col:38 _strtof_l 'float (const char *, char **, _locale_t) __attribute__((cdecl))':'float (const char *, char **, _locale_t)'
| |-ParmVarDecl 0x22150945e00 <col:55, col:68> col:68 _Str 'const char *'
| |-ParmVarDecl 0x22150945e80 <col:99, col:107> col:107 _EndPtr 'char **'
| `-ParmVarDecl 0x22150945ef8 <col:125, col:135> col:135 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x221509462a0 <line:560:9, col:60> col:21 system 'int (const char *) __attribute__((cdecl))':'int (const char *)'
| `-ParmVarDecl 0x221509461c0 <col:39, col:52> col:52 _Command 'const char *'
|-FunctionDecl 0x221509466f8 <line:564:28, col:150> col:44 _ultoa_s 'errno_t (unsigned long, char *, size_t, int) __attribute__((cdecl))':'errno_t (unsigned long, char *, size_t, int)'
| |-ParmVarDecl 0x22150946378 <col:58, col:72> col:72 _Val 'unsigned long'
| |-ParmVarDecl 0x221509463f8 <col:100, col:107> col:107 _DstBuf 'char *'
| |-ParmVarDecl 0x22150946470 <col:121, col:128> col:128 _Size 'size_t':'unsigned long long'
| `-ParmVarDecl 0x221509464f0 <col:140, col:144> col:144 _Radix 'int'
|-FunctionDecl 0x2215093faf8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1951:149> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:566:79 _ultoa 'char *(unsigned long, char *, int) __attribute__((cdecl))':'char *(unsigned long, char *, int)'
| |-ParmVarDecl 0x2215093f858 <col:92, col:107> col:107 _Value 'unsigned long'
| |-ParmVarDecl 0x2215093f8d8 <col:139, col:145> col:145 _Dest 'char *'
| |-ParmVarDecl 0x2215093f958 <col:157, col:162> col:162 _Radix 'int'
| `-DeprecatedAttr 0x2215093fbb0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _ultoa_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2215093ffe0 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:567:127> col:58 wctomb 'int (char *, wchar_t) __attribute__((cdecl))':'int (char *, wchar_t)'
| |-ParmVarDecl 0x2215093fdb8 <col:96, col:103> col:103 _MbCh 'char *'
| |-ParmVarDecl 0x2215093fe30 <col:115, col:123> col:123 _WCh 'wchar_t':'unsigned short'
| `-DeprecatedAttr 0x22150940090 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using wctomb_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x22150940568 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:568:155> col:61 _wctomb_l 'int (char *, wchar_t, _locale_t) __attribute__((cdecl))':'int (char *, wchar_t, _locale_t)'
| |-ParmVarDecl 0x22150940298 <col:96, col:103> col:103 _MbCh 'char *'
| |-ParmVarDecl 0x22150940310 <col:115, col:123> col:123 _WCh 'wchar_t':'unsigned short'
| |-ParmVarDecl 0x22150940388 <col:138, col:148> col:148 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x22150940620 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wctomb_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x22150948b88 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:570:28, col:200> col:44 wctomb_s 'errno_t (int *, char *, rsize_t, wchar_t) __attribute__((cdecl))':'errno_t (int *, char *, rsize_t, wchar_t)'
| |-ParmVarDecl 0x22150948810 <col:63, col:69> col:69 _SizeConverted 'int *'
| |-ParmVarDecl 0x22150948890 <col:142, col:149> col:149 _MbCh 'char *'
| |-ParmVarDecl 0x22150948908 <col:161, col:169> col:169 _SizeInBytes 'rsize_t':'unsigned long long'
| `-ParmVarDecl 0x22150948980 <col:188, col:196> col:196 _WCh 'wchar_t':'unsigned short'
|-FunctionDecl 0x22150949090 <line:572:28, col:206> col:44 _wctomb_s_l 'errno_t (int *, char *, size_t, wchar_t, _locale_t) __attribute__((cdecl))':'errno_t (int *, char *, size_t, wchar_t, _locale_t)'
| |-ParmVarDecl 0x22150948c78 <col:66, col:72> col:72 _SizeConverted 'int *'
| |-ParmVarDecl 0x22150948cf8 <col:121, col:128> col:128 _MbCh 'char *'
| |-ParmVarDecl 0x22150948d70 <col:140, col:147> col:147 _SizeInBytes 'size_t':'unsigned long long'
| |-ParmVarDecl 0x22150948de8 <col:166, col:174> col:174 _WCh 'wchar_t':'unsigned short'
| `-ParmVarDecl 0x22150948e60 <col:189, col:199> col:199 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x221509495a0 <line:573:28, col:263> col:44 wcstombs_s 'errno_t (size_t *, char *, size_t, const wchar_t *, size_t) __attribute__((cdecl))':'errno_t (size_t *, char *, size_t, const wchar_t *, size_t)'
| |-ParmVarDecl 0x22150949180 <col:65, col:74> col:74 _PtNumOfCharConverted 'size_t *'
| |-ParmVarDecl 0x22150949200 <col:164, col:171> col:171 _Dst 'char *'
| |-ParmVarDecl 0x22150949278 <col:182, col:189> col:189 _DstSizeInBytes 'size_t':'unsigned long long'
| |-ParmVarDecl 0x221509492f0 <col:213, col:229> col:229 _Src 'const wchar_t *'
| `-ParmVarDecl 0x22150949368 <col:240, col:247> col:247 _MaxCountInBytes 'size_t':'unsigned long long'
|-FunctionDecl 0x22150947a50 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:2007:144> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:575:56 wcstombs 'size_t (char *, const wchar_t *, size_t) __attribute__((cdecl))':'size_t (char *, const wchar_t *, size_t)'
| |-ParmVarDecl 0x22150949758 <col:97, col:103> col:103 _Dest 'char *'
| |-ParmVarDecl 0x22150947800 <col:117, col:134> col:134 _Source 'const wchar_t *'
| |-ParmVarDecl 0x22150947878 <col:148, col:156> col:156 _MaxCount 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x22150947b08 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using wcstombs_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x22150948108 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:576:28, col:294> col:44 _wcstombs_s_l 'errno_t (size_t *, char *, size_t, const wchar_t *, size_t, _locale_t) __attribute__((cdecl))':'errno_t (size_t *, char *, size_t, const wchar_t *, size_t, _locale_t)'
| |-ParmVarDecl 0x22150947c48 <col:68, col:77> col:77 _PtNumOfCharConverted 'size_t *'
| |-ParmVarDecl 0x22150947cc8 <col:167, col:174> col:174 _Dst 'char *'
| |-ParmVarDecl 0x22150947d40 <col:185, col:192> col:192 _DstSizeInBytes 'size_t':'unsigned long long'
| |-ParmVarDecl 0x22150947db8 <col:216, col:232> col:232 _Src 'const wchar_t *'
| |-ParmVarDecl 0x22150947e30 <col:243, col:250> col:250 _MaxCountInBytes 'size_t':'unsigned long long'
| `-ParmVarDecl 0x22150947ea8 <col:277, col:287> col:287 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x22150948638 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:2010:160> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:578:59 _wcstombs_l 'size_t (char *, const wchar_t *, size_t, _locale_t) __attribute__((cdecl))':'size_t (char *, const wchar_t *, size_t, _locale_t)'
| |-ParmVarDecl 0x221509482c8 <col:146, col:152> col:152 _Dest 'char *'
| |-ParmVarDecl 0x22150948340 <col:166, col:183> col:183 _Source 'const wchar_t *'
| |-ParmVarDecl 0x221509483b8 <col:197, col:205> col:205 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x22150948430 <col:225, col:236> col:236 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x221509486f8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wcstombs_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x22150949aa0 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:640:142> col:142 implicit calloc 'void *(unsigned long long, unsigned long long)' extern
| |-ParmVarDecl 0x22150949b40 <<invalid sloc>> <invalid sloc> 'unsigned long long'
| `-ParmVarDecl 0x22150949ba8 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x22150949c20 prev 0x22150949aa0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:21, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:640:224> col:142 calloc 'void *(unsigned long long, unsigned long long)'
| |-ParmVarDecl 0x22150949878 <col:173, col:180> col:180 _Count 'size_t':'unsigned long long'
| |-ParmVarDecl 0x221509498f0 <col:212, col:219> col:219 _Size 'size_t':'unsigned long long'
| |-NoAliasAttr 0x22150949cd0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:32>
| `-RestrictAttr 0x22150949d28 <line:615:33> restrict
|-FunctionDecl 0x22150949ec0 <line:611:21, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:641:182> col:132 free 'void (void *) __attribute__((cdecl))':'void (void *)'
| |-ParmVarDecl 0x22150949d80 <col:168, col:175> col:175 _Memory 'void *'
| `-NoAliasAttr 0x22150949f68 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:32>
|-FunctionDecl 0x2215094a168 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:642:161> col:161 implicit malloc 'void *(unsigned long long)' extern
| `-ParmVarDecl 0x2215094a208 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x2215094a278 prev 0x2215094a168 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:21, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:642:204> col:161 malloc 'void *(unsigned long long)'
| |-ParmVarDecl 0x22150949fe8 <col:192, col:199> col:199 _Size 'size_t':'unsigned long long'
| |-NoAliasAttr 0x2215094a320 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:32>
| `-RestrictAttr 0x2215094a378 <line:615:33> restrict
|-FunctionDecl 0x2215094a5f0 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:644:142> col:142 implicit realloc 'void *(void *, unsigned long long)' extern
| |-ParmVarDecl 0x2215094a690 <<invalid sloc>> <invalid sloc> 'void *'
| `-ParmVarDecl 0x2215094a6f8 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x2215094a770 prev 0x2215094a5f0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:21, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:644:236> col:142 realloc 'void *(void *, unsigned long long)'
| |-ParmVarDecl 0x2215094a3d0 <col:181, col:188> col:188 _Memory 'void *'
| |-ParmVarDecl 0x2215094a448 <col:221, col:228> col:228 _NewSize 'size_t':'unsigned long long'
| |-NoAliasAttr 0x221509427b0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:32>
| `-RestrictAttr 0x22150942808 <line:615:33> restrict
|-FunctionDecl 0x22150942b28 <line:611:21, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:646:274> col:142 _recalloc 'void *(void *, size_t, size_t) __attribute__((cdecl))':'void *(void *, size_t, size_t)'
| |-ParmVarDecl 0x22150942860 <col:183, col:190> col:190 _Memory 'void *'
| |-ParmVarDecl 0x221509428d8 <col:223, col:230> col:230 _Count 'size_t':'unsigned long long'
| |-ParmVarDecl 0x22150942950 <col:262, col:269> col:269 _Size 'size_t':'unsigned long long'
| |-NoAliasAttr 0x22150942be0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:32>
| `-RestrictAttr 0x22150942c38 <line:615:33> restrict
|-FunctionDecl 0x22150942d68 <line:611:21, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:647:191> col:132 _aligned_free 'void (void *) __attribute__((cdecl))':'void (void *)'
| |-ParmVarDecl 0x22150942c90 <col:177, col:184> col:184 _Memory 'void *'
| `-NoAliasAttr 0x22150942e10 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:32>
|-FunctionDecl 0x22150943008 <col:21, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:648:218> col:142 _aligned_malloc 'void *(size_t, size_t) __attribute__((cdecl))':'void *(size_t, size_t)'
| |-ParmVarDecl 0x22150942e90 <col:182, col:189> col:189 _Size 'size_t':'unsigned long long'
| |-ParmVarDecl 0x22150942f08 <col:201, col:208> col:208 _Alignment 'size_t':'unsigned long long'
| |-NoAliasAttr 0x221509430b8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:32>
| `-RestrictAttr 0x22150943110 <line:615:33> restrict
|-FunctionDecl 0x22150943428 <line:611:21, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:649:246> col:142 _aligned_offset_malloc 'void *(size_t, size_t, size_t) __attribute__((cdecl))':'void *(size_t, size_t, size_t)'
| |-ParmVarDecl 0x22150943160 <col:189, col:196> col:196 _Size 'size_t':'unsigned long long'
| |-ParmVarDecl 0x221509431d8 <col:208, col:215> col:215 _Alignment 'size_t':'unsigned long long'
| |-ParmVarDecl 0x22150943250 <col:232, col:239> col:239 _Offset 'size_t':'unsigned long long'
| |-NoAliasAttr 0x221509434e0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:32>
| `-RestrictAttr 0x22150943538 <line:615:33> restrict
|-FunctionDecl 0x2215094a830 <line:611:21, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:651:272> col:145 _aligned_realloc 'void *(void *, size_t, size_t) __attribute__((cdecl))':'void *(void *, size_t, size_t)'
| |-ParmVarDecl 0x22150943590 <col:193, col:200> col:200 _Memory 'void *'
| |-ParmVarDecl 0x22150943608 <col:233, col:240> col:240 _NewSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x22150943680 <col:255, col:262> col:262 _Alignment 'size_t':'unsigned long long'
| |-NoAliasAttr 0x2215094a8e8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:32>
| `-RestrictAttr 0x2215094a940 <line:615:33> restrict
|-FunctionDecl 0x2215094ad10 <line:611:21, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:653:306> col:142 _aligned_recalloc 'void *(void *, size_t, size_t, size_t) __attribute__((cdecl))':'void *(void *, size_t, size_t, size_t)'
| |-ParmVarDecl 0x2215094a998 <col:191, col:198> col:198 _Memory 'void *'
| |-ParmVarDecl 0x2215094aa10 <col:231, col:238> col:238 _Count 'size_t':'unsigned long long'
| |-ParmVarDecl 0x2215094aa88 <col:270, col:277> col:277 _Size 'size_t':'unsigned long long'
| |-ParmVarDecl 0x2215094ab00 <col:289, col:296> col:296 _Alignment 'size_t':'unsigned long long'
| |-NoAliasAttr 0x2215094add0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:32>
| `-RestrictAttr 0x2215094ae28 <line:615:33> restrict
|-FunctionDecl 0x2215094b128 <line:611:21, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:655:300> col:145 _aligned_offset_realloc 'void *(void *, size_t, size_t, size_t) __attribute__((cdecl))':'void *(void *, size_t, size_t, size_t)'
| |-ParmVarDecl 0x2215094ae80 <col:200, col:207> col:207 _Memory 'void *'
| |-ParmVarDecl 0x2215094aef8 <col:240, col:247> col:247 _NewSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x2215094af70 <col:262, col:269> col:269 _Alignment 'size_t':'unsigned long long'
| |-ParmVarDecl 0x2215094afe8 <col:286, col:293> col:293 _Offset 'size_t':'unsigned long long'
| |-NoAliasAttr 0x2215094b1e8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:32>
| `-RestrictAttr 0x2215094b240 <line:615:33> restrict
|-FunctionDecl 0x2215094b6b8 <line:611:21, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:657:334> col:142 _aligned_offset_recalloc 'void *(void *, size_t, size_t, size_t, size_t) __attribute__((cdecl))':'void *(void *, size_t, size_t, size_t, size_t)'
| |-ParmVarDecl 0x2215094b298 <col:198, col:205> col:205 _Memory 'void *'
| |-ParmVarDecl 0x2215094b310 <col:238, col:245> col:245 _Count 'size_t':'unsigned long long'
| |-ParmVarDecl 0x2215094b388 <col:277, col:284> col:284 _Size 'size_t':'unsigned long long'
| |-ParmVarDecl 0x2215094b400 <col:296, col:303> col:303 _Alignment 'size_t':'unsigned long long'
| |-ParmVarDecl 0x2215094b478 <col:320, col:327> col:327 _Offset 'size_t':'unsigned long long'
| |-NoAliasAttr 0x2215094b780 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:32>
| `-RestrictAttr 0x2215094b7d8 <line:615:33> restrict
|-FunctionDecl 0x22150994ca0 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:658:73, col:176> col:88 _aligned_msize 'size_t (void *, size_t, size_t) __attribute__((cdecl))':'size_t (void *, size_t, size_t)'
| |-ParmVarDecl 0x221509949e0 <col:117, col:124> col:124 _Memory 'void *'
| |-ParmVarDecl 0x22150994a58 <col:138, col:145> col:145 _Alignment 'size_t':'unsigned long long'
| `-ParmVarDecl 0x22150994ad0 <col:162, col:169> col:169 _Offset 'size_t':'unsigned long long'
|-FunctionDecl 0x221509950f8 <line:685:28, col:157> col:44 _itow_s 'errno_t (int, wchar_t *, size_t, int) __attribute__((cdecl))':'errno_t (int, wchar_t *, size_t, int)'
| |-ParmVarDecl 0x22150994d88 <col:58, col:62> col:62 _Val 'int'
| |-ParmVarDecl 0x22150994e00 <col:97, col:107> col:107 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x22150994e78 <col:121, col:128> col:128 _SizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x22150994ef8 <col:147, col:151> col:151 _Radix 'int'
|-FunctionDecl 0x22150995570 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1951:149> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:687:82 _itow 'wchar_t *(int, wchar_t *, int) __attribute__((cdecl))':'wchar_t *(int, wchar_t *, int)'
| |-ParmVarDecl 0x221509952a8 <col:94, col:99> col:99 _Value 'int'
| |-ParmVarDecl 0x22150995320 <col:131, col:140> col:140 _Dest 'wchar_t *'
| |-ParmVarDecl 0x221509953a0 <col:152, col:157> col:157 _Radix 'int'
| `-DeprecatedAttr 0x22150995628 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _itow_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x22150996b38 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:688:28, col:158> col:44 _ltow_s 'errno_t (long, wchar_t *, size_t, int) __attribute__((cdecl))':'errno_t (long, wchar_t *, size_t, int)'
| |-ParmVarDecl 0x22150995770 <col:58, col:63> col:63 _Val 'long'
| |-ParmVarDecl 0x221509957e8 <col:98, col:108> col:108 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x22150995860 <col:122, col:129> col:129 _SizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x221509958e0 <col:148, col:152> col:152 _Radix 'int'
|-FunctionDecl 0x22150996fb0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1951:149> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:690:82 _ltow 'wchar_t *(long, wchar_t *, int) __attribute__((cdecl))':'wchar_t *(long, wchar_t *, int)'
| |-ParmVarDecl 0x22150996ce8 <col:94, col:100> col:100 _Value 'long'
| |-ParmVarDecl 0x22150996d60 <col:132, col:141> col:141 _Dest 'wchar_t *'
| |-ParmVarDecl 0x22150996de0 <col:153, col:158> col:158 _Radix 'int'
| `-DeprecatedAttr 0x22150997068 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _ltow_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x22150997528 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:691:28, col:168> col:44 _ultow_s 'errno_t (unsigned long, wchar_t *, size_t, int) __attribute__((cdecl))':'errno_t (unsigned long, wchar_t *, size_t, int)'
| |-ParmVarDecl 0x221509971b0 <col:59, col:73> col:73 _Val 'unsigned long'
| |-ParmVarDecl 0x22150997228 <col:108, col:118> col:118 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x221509972a0 <col:132, col:139> col:139 _SizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x22150997320 <col:158, col:162> col:162 _Radix 'int'
|-FunctionDecl 0x221509939d0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1951:149> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:693:82 _ultow 'wchar_t *(unsigned long, wchar_t *, int) __attribute__((cdecl))':'wchar_t *(unsigned long, wchar_t *, int)'
| |-ParmVarDecl 0x221509976d8 <col:95, col:110> col:110 _Value 'unsigned long'
| |-ParmVarDecl 0x22150997750 <col:142, col:151> col:151 _Dest 'wchar_t *'
| |-ParmVarDecl 0x221509977d0 <col:163, col:168> col:168 _Radix 'int'
| `-DeprecatedAttr 0x22150993a88 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _ultow_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x22150993df0 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:694:24, col:118> col:39 wcstod 'double (const wchar_t *, wchar_t **) __attribute__((cdecl))':'double (const wchar_t *, wchar_t **)'
| |-ParmVarDecl 0x22150993bc8 <col:53, col:69> col:69 _Str 'const wchar_t *'
| `-ParmVarDecl 0x22150993c48 <col:100, col:111> col:111 _EndPtr 'wchar_t **'
|-FunctionDecl 0x22150994198 <line:695:24, col:148> col:39 _wcstod_l 'double (const wchar_t *, wchar_t **, _locale_t) __attribute__((cdecl))':'double (const wchar_t *, wchar_t **, _locale_t)'
| |-ParmVarDecl 0x22150993ec8 <col:56, col:71> col:71 _Str 'const wchar_t *'
| |-ParmVarDecl 0x22150993f48 <col:102, col:113> col:113 _EndPtr 'wchar_t **'
| `-ParmVarDecl 0x22150993fc0 <col:131, col:141> col:141 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x22150994558 <line:696:24, col:129> col:39 wcstol 'long (const wchar_t *, wchar_t **, int) __attribute__((cdecl))':'long (const wchar_t *, wchar_t **, int)'
| |-ParmVarDecl 0x22150994278 <col:53, col:68> col:68 _Str 'const wchar_t *'
| |-ParmVarDecl 0x221509942f8 <col:99, col:110> col:110 _EndPtr 'wchar_t **'
| `-ParmVarDecl 0x22150994378 <col:119, col:123> col:123 _Radix 'int'
|-FunctionDecl 0x2215099aa40 <line:697:24, col:159> col:39 _wcstol_l 'long (const wchar_t *, wchar_t **, int, _locale_t) __attribute__((cdecl))':'long (const wchar_t *, wchar_t **, int, _locale_t)'
| |-ParmVarDecl 0x22150994638 <col:56, col:71> col:71 _Str 'const wchar_t *'
| |-ParmVarDecl 0x221509946b8 <col:102, col:112> col:112 _EndPtr 'wchar_t **'
| |-ParmVarDecl 0x22150994738 <col:121, col:125> col:125 _Radix 'int'
| `-ParmVarDecl 0x221509947b0 <col:142, col:152> col:152 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2215099ae08 <line:698:24, col:133> col:43 wcstoll 'long long (const wchar_t *, wchar_t **, int) __attribute__((cdecl))':'long long (const wchar_t *, wchar_t **, int)'
| |-ParmVarDecl 0x2215099ab28 <col:58, col:73> col:73 _Str 'const wchar_t *'
| |-ParmVarDecl 0x2215099aba8 <col:104, col:114> col:114 _EndPtr 'wchar_t **'
| `-ParmVarDecl 0x2215099ac28 <col:123, col:127> col:127 _Radix 'int'
|-FunctionDecl 0x2215099b270 <line:699:24, col:164> col:43 _wcstoll_l 'long long (const wchar_t *, wchar_t **, int, _locale_t) __attribute__((cdecl))':'long long (const wchar_t *, wchar_t **, int, _locale_t)'
| |-ParmVarDecl 0x2215099aee8 <col:61, col:76> col:76 _Str 'const wchar_t *'
| |-ParmVarDecl 0x2215099af68 <col:107, col:117> col:117 _EndPtr 'wchar_t **'
| |-ParmVarDecl 0x2215099afe8 <col:126, col:130> col:130 _Radix 'int'
| `-ParmVarDecl 0x2215099b060 <col:147, col:157> col:157 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2215099b638 <line:700:24, col:137> col:46 wcstoul 'unsigned long (const wchar_t *, wchar_t **, int) __attribute__((cdecl))':'unsigned long (const wchar_t *, wchar_t **, int)'
| |-ParmVarDecl 0x2215099b358 <col:61, col:76> col:76 _Str 'const wchar_t *'
| |-ParmVarDecl 0x2215099b3d8 <col:107, col:118> col:118 _EndPtr 'wchar_t **'
| `-ParmVarDecl 0x2215099b458 <col:127, col:131> col:131 _Radix 'int'
|-FunctionDecl 0x22150997a90 <line:701:24, col:167> col:46 _wcstoul_l 'unsigned long (const wchar_t *, wchar_t **, int, _locale_t) __attribute__((cdecl))':'unsigned long (const wchar_t *, wchar_t **, int, _locale_t)'
| |-ParmVarDecl 0x2215099b718 <col:64, col:79> col:79 _Str 'const wchar_t *'
| |-ParmVarDecl 0x2215099b798 <col:110, col:120> col:120 _EndPtr 'wchar_t **'
| |-ParmVarDecl 0x2215099b818 <col:129, col:133> col:133 _Radix 'int'
| `-ParmVarDecl 0x2215099b890 <col:150, col:160> col:160 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x22150997e58 <line:702:24, col:143> col:51 wcstoull 'unsigned long long (const wchar_t *, wchar_t **, int) __attribute__((cdecl))':'unsigned long long (const wchar_t *, wchar_t **, int)'
| |-ParmVarDecl 0x22150997b78 <col:67, col:82> col:82 _Str 'const wchar_t *'
| |-ParmVarDecl 0x22150997bf8 <col:113, col:124> col:124 _EndPtr 'wchar_t **'
| `-ParmVarDecl 0x22150997c78 <col:133, col:137> col:137 _Radix 'int'
|-FunctionDecl 0x221509982c0 <line:703:24, col:174> col:51 _wcstoull_l 'unsigned long long (const wchar_t *, wchar_t **, int, _locale_t) __attribute__((cdecl))':'unsigned long long (const wchar_t *, wchar_t **, int, _locale_t)'
| |-ParmVarDecl 0x22150997f38 <col:70, col:85> col:85 _Str 'const wchar_t *'
| |-ParmVarDecl 0x22150997fb8 <col:116, col:127> col:127 _EndPtr 'wchar_t **'
| |-ParmVarDecl 0x22150998038 <col:136, col:140> col:140 _Radix 'int'
| `-ParmVarDecl 0x221509980b0 <col:157, col:167> col:167 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x221509985d0 <line:704:24, col:124> col:44 wcstold 'long double (const wchar_t *, wchar_t **) __attribute__((cdecl))':'long double (const wchar_t *, wchar_t **)'
| |-ParmVarDecl 0x221509983a8 <col:59, col:75> col:75 _Str 'const wchar_t *'
| `-ParmVarDecl 0x22150998428 <col:106, col:117> col:117 _EndPtr 'wchar_t **'
|-FunctionDecl 0x2215099ca60 <line:705:24, col:155> col:44 _wcstold_l 'long double (const wchar_t *, wchar_t **, _locale_t) __attribute__((cdecl))':'long double (const wchar_t *, wchar_t **, _locale_t)'
| |-ParmVarDecl 0x221509986a8 <col:62, col:78> col:78 _Str 'const wchar_t *'
| |-ParmVarDecl 0x22150998728 <col:109, col:120> col:120 _EndPtr 'wchar_t **'
| `-ParmVarDecl 0x221509987a0 <col:138, col:148> col:148 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2215099cd70 <line:706:24, col:117> col:38 wcstof 'float (const wchar_t *, wchar_t **) __attribute__((cdecl))':'float (const wchar_t *, wchar_t **)'
| |-ParmVarDecl 0x2215099cb40 <col:52, col:68> col:68 _Str 'const wchar_t *'
| `-ParmVarDecl 0x2215099cbc0 <col:99, col:110> col:110 _EndPtr 'wchar_t **'
|-FunctionDecl 0x2215099d118 <line:707:24, col:148> col:38 _wcstof_l 'float (const wchar_t *, wchar_t **, _locale_t) __attribute__((cdecl))':'float (const wchar_t *, wchar_t **, _locale_t)'
| |-ParmVarDecl 0x2215099ce48 <col:55, col:71> col:71 _Str 'const wchar_t *'
| |-ParmVarDecl 0x2215099cec8 <col:102, col:113> col:113 _EndPtr 'wchar_t **'
| `-ParmVarDecl 0x2215099cf40 <col:131, col:141> col:141 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2215099d390 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:711:118> col:78 _wgetenv 'wchar_t *(const wchar_t *) __attribute__((cdecl))':'wchar_t *(const wchar_t *)'
| |-ParmVarDecl 0x2215099d2b8 <col:94, col:110> col:110 _VarName 'const wchar_t *'
| `-DeprecatedAttr 0x2215099d438 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wdupenv_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2215099d8e8 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:712:28, col:198> col:44 _wgetenv_s 'errno_t (size_t *, wchar_t *, size_t, const wchar_t *) __attribute__((cdecl))':'errno_t (size_t *, wchar_t *, size_t, const wchar_t *)'
| |-ParmVarDecl 0x2215099d578 <col:61, col:70> col:70 _ReturnSize 'size_t *'
| |-ParmVarDecl 0x2215099d5f0 <col:119, col:129> col:129 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x2215099d668 <col:143, col:150> col:150 _DstSizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x2215099d6e0 <col:174, col:190> col:190 _VarName 'const wchar_t *'
|-FunctionDecl 0x22150995c40 <line:720:28, col:214> col:44 _wdupenv_s 'errno_t (wchar_t **, size_t *, const wchar_t *) __attribute__((cdecl))':'errno_t (wchar_t **, size_t *, const wchar_t *)'
| |-ParmVarDecl 0x2215099d9d8 <col:127, col:137> col:137 _Buffer 'wchar_t **'
| |-ParmVarDecl 0x221509959f0 <col:156, col:164> col:164 _BufferSizeInWords 'size_t *'
| `-ParmVarDecl 0x22150995a68 <col:191, col:206> col:206 _VarName 'const wchar_t *'
|-FunctionDecl 0x22150995e98 <line:728:9, col:65> col:21 _wsystem 'int (const wchar_t *) __attribute__((cdecl))':'int (const wchar_t *)'
| `-ParmVarDecl 0x22150995d20 <col:41, col:57> col:57 _Command 'const wchar_t *'
|-FunctionDecl 0x221509960e8 <line:733:24, col:71> col:39 _wtof 'double (const wchar_t *) __attribute__((cdecl))':'double (const wchar_t *)'
| `-ParmVarDecl 0x22150995f68 <col:52, col:67> col:67 _Str 'const wchar_t *'
|-FunctionDecl 0x221509963e0 <line:734:24, col:101> col:39 _wtof_l 'double (const wchar_t *, _locale_t) __attribute__((cdecl))':'double (const wchar_t *, _locale_t)'
| |-ParmVarDecl 0x221509961b8 <col:54, col:69> col:69 _Str 'const wchar_t *'
| `-ParmVarDecl 0x22150996230 <col:84, col:94> col:94 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x22150996598 <line:735:24, col:68> col:36 _wtoi 'int (const wchar_t *) __attribute__((cdecl))':'int (const wchar_t *)'
| `-ParmVarDecl 0x221509964b8 <col:49, col:64> col:64 _Str 'const wchar_t *'
|-FunctionDecl 0x22150996890 <line:736:24, col:98> col:36 _wtoi_l 'int (const wchar_t *, _locale_t) __attribute__((cdecl))':'int (const wchar_t *, _locale_t)'
| |-ParmVarDecl 0x22150996668 <col:51, col:66> col:66 _Str 'const wchar_t *'
| `-ParmVarDecl 0x221509966e0 <col:81, col:91> col:91 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2215099db68 <line:737:24, col:69> col:37 _wtol 'long (const wchar_t *) __attribute__((cdecl))':'long (const wchar_t *)'
| `-ParmVarDecl 0x22150996968 <col:50, col:65> col:65 _Str 'const wchar_t *'
|-FunctionDecl 0x2215099de60 <line:738:24, col:99> col:37 _wtol_l 'long (const wchar_t *, _locale_t) __attribute__((cdecl))':'long (const wchar_t *, _locale_t)'
| |-ParmVarDecl 0x2215099dc38 <col:52, col:67> col:67 _Str 'const wchar_t *'
| `-ParmVarDecl 0x2215099dcb0 <col:82, col:92> col:92 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2215099e0b8 <line:739:24, col:75> col:42 _wtoll 'long long (const wchar_t *) __attribute__((cdecl))':'long long (const wchar_t *)'
| `-ParmVarDecl 0x2215099df38 <col:56, col:71> col:71 _Str 'const wchar_t *'
|-FunctionDecl 0x2215099e3b0 <line:740:24, col:105> col:42 _wtoll_l 'long long (const wchar_t *, _locale_t) __attribute__((cdecl))':'long long (const wchar_t *, _locale_t)'
| |-ParmVarDecl 0x2215099e188 <col:58, col:73> col:73 _Str 'const wchar_t *'
| `-ParmVarDecl 0x2215099e200 <col:88, col:98> col:98 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2215099e808 <line:742:28, col:162> col:44 _i64tow_s 'errno_t (long long, wchar_t *, size_t, int) __attribute__((cdecl))':'errno_t (long long, wchar_t *, size_t, int)'
| |-ParmVarDecl 0x2215099e490 <col:59, col:67> col:67 _Val 'long long'
| |-ParmVarDecl 0x2215099e508 <col:102, col:112> col:112 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x2215099e580 <col:126, col:133> col:133 _SizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x2215099e600 <col:152, col:156> col:156 _Radix 'int'
|-FunctionDecl 0x2215099bca0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:743:146> col:62 _i64tow 'wchar_t *(long long, wchar_t *, int) __attribute__((cdecl))':'wchar_t *(long long, wchar_t *, int)'
| |-ParmVarDecl 0x2215099e9b8 <col:75, col:83> col:83 _Val 'long long'
| |-ParmVarDecl 0x2215099ba50 <col:112, col:122> col:122 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x2215099bad0 <col:136, col:140> col:140 _Radix 'int'
| `-DeprecatedAttr 0x2215099bd58 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _i64tow_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2215099c218 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:744:28, col:172> col:44 _ui64tow_s 'errno_t (unsigned long long, wchar_t *, size_t, int) __attribute__((cdecl))':'errno_t (unsigned long long, wchar_t *, size_t, int)'
| |-ParmVarDecl 0x2215099bea0 <col:60, col:77> col:77 _Val 'unsigned long long'
| |-ParmVarDecl 0x2215099bf18 <col:112, col:122> col:122 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x2215099bf90 <col:136, col:143> col:143 _SizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x2215099c010 <col:162, col:166> col:166 _Radix 'int'
|-FunctionDecl 0x2215099c690 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:745:157> col:63 _ui64tow 'wchar_t *(unsigned long long, wchar_t *, int) __attribute__((cdecl))':'wchar_t *(unsigned long long, wchar_t *, int)'
| |-ParmVarDecl 0x2215099c3c8 <col:77, col:94> col:94 _Val 'unsigned long long'
| |-ParmVarDecl 0x2215099c440 <col:123, col:133> col:133 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x2215099c4c0 <col:147, col:151> col:151 _Radix 'int'
| `-DeprecatedAttr 0x2215099c748 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _ui64tow_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x2215099c968 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:746:24, col:76> col:42 _wtoi64 'long long (const wchar_t *) __attribute__((cdecl))':'long long (const wchar_t *)'
| `-ParmVarDecl 0x2215099c888 <col:57, col:72> col:72 _Str 'const wchar_t *'
|-FunctionDecl 0x2215099ebf8 <line:747:24, col:106> col:42 _wtoi64_l 'long long (const wchar_t *, _locale_t) __attribute__((cdecl))':'long long (const wchar_t *, _locale_t)'
| |-ParmVarDecl 0x2215099ea80 <col:59, col:74> col:74 _Str 'const wchar_t *'
| `-ParmVarDecl 0x2215099eaf8 <col:89, col:99> col:99 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2215099eef0 <line:748:24, col:141> col:42 _wcstoi64 'long long (const wchar_t *, wchar_t **, int) __attribute__((cdecl))':'long long (const wchar_t *, wchar_t **, int)'
| |-ParmVarDecl 0x2215099ecd0 <col:59, col:75> col:75 _Str 'const wchar_t *'
| |-ParmVarDecl 0x2215099ed50 <col:106, col:117> col:117 _EndPtr 'wchar_t **'
| `-ParmVarDecl 0x2215099edd0 <col:131, col:135> col:135 _Radix 'int'
|-FunctionDecl 0x2215099f288 <line:749:24, col:171> col:42 _wcstoi64_l 'long long (const wchar_t *, wchar_t **, int, _locale_t) __attribute__((cdecl))':'long long (const wchar_t *, wchar_t **, int, _locale_t)'
| |-ParmVarDecl 0x2215099efd0 <col:61, col:77> col:77 _Str 'const wchar_t *'
| |-ParmVarDecl 0x2215099f050 <col:108, col:119> col:119 _EndPtr 'wchar_t **'
| |-ParmVarDecl 0x2215099f0d0 <col:133, col:137> col:137 _Radix 'int'
| `-ParmVarDecl 0x2215099f148 <col:154, col:164> col:164 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2215099f590 <line:750:24, col:150> col:50 _wcstoui64 'unsigned long long (const wchar_t *, wchar_t **, int) __attribute__((cdecl))':'unsigned long long (const wchar_t *, wchar_t **, int)'
| |-ParmVarDecl 0x2215099f370 <col:68, col:84> col:84 _Str 'const wchar_t *'
| |-ParmVarDecl 0x2215099f3f0 <col:115, col:126> col:126 _EndPtr 'wchar_t **'
| `-ParmVarDecl 0x2215099f470 <col:140, col:144> col:144 _Radix 'int'
|-FunctionDecl 0x2215099f928 <line:751:24, col:180> col:50 _wcstoui64_l 'unsigned long long (const wchar_t *, wchar_t **, int, _locale_t) __attribute__((cdecl))':'unsigned long long (const wchar_t *, wchar_t **, int, _locale_t)'
| |-ParmVarDecl 0x2215099f670 <col:70, col:85> col:85 _Str 'const wchar_t *'
| |-ParmVarDecl 0x2215099f6f0 <col:117, col:128> col:128 _EndPtr 'wchar_t **'
| |-ParmVarDecl 0x2215099f770 <col:142, col:146> col:146 _Radix 'int'
| `-ParmVarDecl 0x2215099f7e8 <col:163, col:173> col:173 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x2215099fc40 <line:770:24, col:151> col:39 _fullpath 'char *(char *, const char *, size_t) __attribute__((cdecl))':'char *(char *, const char *, size_t)'
| |-ParmVarDecl 0x2215099fa18 <col:82, col:89> col:89 _FullPath 'char *'
| |-ParmVarDecl 0x2215099faa8 <col:107, col:120> col:120 _Path 'const char *'
| `-ParmVarDecl 0x2215099fb20 <col:132, col:139> col:139 _SizeInBytes 'size_t':'unsigned long long'
|-FunctionDecl 0x221509a0208 <line:778:28, col:189> col:44 _ecvt_s 'errno_t (char *, size_t, double, int, int *, int *) __attribute__((cdecl))':'errno_t (char *, size_t, double, int, int *, int *)'
| |-ParmVarDecl 0x2215099fd28 <col:74, col:81> col:81 _DstBuf 'char *'
| |-ParmVarDecl 0x2215099fda0 <col:95, col:102> col:102 _Size 'size_t':'unsigned long long'
| |-ParmVarDecl 0x2215099fe20 <col:114, col:121> col:121 _Val 'double'
| |-ParmVarDecl 0x2215099fea0 <col:132, col:136> col:136 _NumOfDights 'int'
| |-ParmVarDecl 0x2215099ff20 <col:156, col:162> col:162 _PtDec 'int *'
| `-ParmVarDecl 0x2215099ffa0 <col:176, col:182> col:182 _PtSign 'int *'
|-FunctionDecl 0x221509a0700 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:780:158> col:72 _ecvt 'char *(double, int, int *, int *) __attribute__((cdecl))':'char *(double, int, int *, int *)'
| |-ParmVarDecl 0x221509a03c8 <col:83, col:90> col:90 _Val 'double'
| |-ParmVarDecl 0x221509a0448 <col:101, col:105> col:105 _NumOfDigits 'int'
| |-ParmVarDecl 0x221509a04c8 <col:125, col:131> col:131 _PtDec 'int *'
| |-ParmVarDecl 0x221509a0548 <col:145, col:151> col:151 _PtSign 'int *'
| `-DeprecatedAttr 0x221509a07c0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _ecvt_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x22150998c98 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:781:28, col:186> col:44 _fcvt_s 'errno_t (char *, size_t, double, int, int *, int *) __attribute__((cdecl))':'errno_t (char *, size_t, double, int, int *, int *)'
| |-ParmVarDecl 0x221509a0908 <col:74, col:81> col:81 _DstBuf 'char *'
| |-ParmVarDecl 0x221509a0980 <col:95, col:102> col:102 _Size 'size_t':'unsigned long long'
| |-ParmVarDecl 0x221509a0a00 <col:114, col:121> col:121 _Val 'double'
| |-ParmVarDecl 0x22150998a20 <col:132, col:136> col:136 _NumOfDec 'int'
| |-ParmVarDecl 0x22150998aa0 <col:153, col:159> col:159 _PtDec 'int *'
| `-ParmVarDecl 0x22150998b20 <col:173, col:179> col:179 _PtSign 'int *'
|-FunctionDecl 0x22150999118 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:783:155> col:72 _fcvt 'char *(double, int, int *, int *) __attribute__((cdecl))':'char *(double, int, int *, int *)'
| |-ParmVarDecl 0x22150998e58 <col:83, col:90> col:90 _Val 'double'
| |-ParmVarDecl 0x22150998ed8 <col:101, col:105> col:105 _NumOfDec 'int'
| |-ParmVarDecl 0x22150998f58 <col:122, col:128> col:128 _PtDec 'int *'
| |-ParmVarDecl 0x22150998fd8 <col:142, col:148> col:148 _PtSign 'int *'
| `-DeprecatedAttr 0x221509991d8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _fcvt_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x22150999698 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:784:9, col:129> col:25 _gcvt_s 'errno_t (char *, size_t, double, int) __attribute__((cdecl))':'errno_t (char *, size_t, double, int)'
| |-ParmVarDecl 0x22150999320 <col:55, col:62> col:62 _DstBuf 'char *'
| |-ParmVarDecl 0x22150999398 <col:76, col:83> col:83 _Size 'size_t':'unsigned long long'
| |-ParmVarDecl 0x22150999418 <col:95, col:102> col:102 _Val 'double'
| `-ParmVarDecl 0x22150999498 <col:113, col:117> col:117 _NumOfDigits 'int'
|-FunctionDecl 0x221509a4bc8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:786:141> col:57 _gcvt 'char *(double, int, char *) __attribute__((cdecl))':'char *(double, int, char *)'
| |-ParmVarDecl 0x22150999848 <col:68, col:75> col:75 _Val 'double'
| |-ParmVarDecl 0x221509998c8 <col:86, col:90> col:90 _NumOfDigits 'int'
| |-ParmVarDecl 0x22150999948 <col:127, col:134> col:134 _DstBuf 'char *'
| `-DeprecatedAttr 0x221509a4c80 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _gcvt_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x221509a5060 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:788:24, col:91> col:36 _atodbl 'int (_CRT_DOUBLE *, char *) __attribute__((cdecl))':'int (_CRT_DOUBLE *, char *)'
| |-ParmVarDecl 0x221509a4e38 <col:50, col:64> col:64 _Result '_CRT_DOUBLE *'
| `-ParmVarDecl 0x221509a4eb8 <col:80, col:87> col:87 _Str 'char *'
|-FunctionDecl 0x221509a53e0 <line:789:24, col:89> col:36 _atoldbl 'int (_LDOUBLE *, char *) __attribute__((cdecl))':'int (_LDOUBLE *, char *)'
| |-ParmVarDecl 0x221509a51b8 <col:51, col:62> col:62 _Result '_LDOUBLE *'
| `-ParmVarDecl 0x221509a5238 <col:78, col:85> col:85 _Str 'char *'
|-FunctionDecl 0x221509a5760 <line:790:24, col:96> col:36 _atoflt 'int (_CRT_FLOAT *, const char *) __attribute__((cdecl))':'int (_CRT_FLOAT *, const char *)'
| |-ParmVarDecl 0x221509a5538 <col:50, col:63> col:63 _Result '_CRT_FLOAT *'
| `-ParmVarDecl 0x221509a55b8 <col:79, col:92> col:92 _Str 'const char *'
|-FunctionDecl 0x221509a5b38 <line:791:24, col:121> col:36 _atodbl_l 'int (_CRT_DOUBLE *, char *, _locale_t) __attribute__((cdecl))':'int (_CRT_DOUBLE *, char *, _locale_t)'
| |-ParmVarDecl 0x221509a5838 <col:52, col:66> col:66 _Result '_CRT_DOUBLE *'
| |-ParmVarDecl 0x221509a58b8 <col:82, col:89> col:89 _Str 'char *'
| `-ParmVarDecl 0x221509a5930 <col:104, col:114> col:114 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x221509a5ee8 <line:792:24, col:119> col:36 _atoldbl_l 'int (_LDOUBLE *, char *, _locale_t) __attribute__((cdecl))':'int (_LDOUBLE *, char *, _locale_t)'
| |-ParmVarDecl 0x221509a5c18 <col:53, col:64> col:64 _Result '_LDOUBLE *'
| |-ParmVarDecl 0x221509a5c98 <col:80, col:87> col:87 _Str 'char *'
| `-ParmVarDecl 0x221509a5d10 <col:102, col:112> col:112 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x221509a6298 <line:793:24, col:126> col:36 _atoflt_l 'int (_CRT_FLOAT *, const char *, _locale_t) __attribute__((cdecl))':'int (_CRT_FLOAT *, const char *, _locale_t)'
| |-ParmVarDecl 0x221509a5fc8 <col:52, col:65> col:65 _Result '_CRT_FLOAT *'
| |-ParmVarDecl 0x221509a6048 <col:81, col:94> col:94 _Str 'const char *'
| `-ParmVarDecl 0x221509a60c0 <col:109, col:119> col:119 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x221509a6570 <line:794:46> col:46 implicit _lrotl 'unsigned long (unsigned long, int)' extern
| |-ParmVarDecl 0x221509a6610 <<invalid sloc>> <invalid sloc> 'unsigned long'
| |-ParmVarDecl 0x221509a6678 <<invalid sloc>> <invalid sloc> 'int'
| `-NoThrowAttr 0x221509a66f0 <col:46> Implicit
|-FunctionDecl 0x221509a6748 prev 0x221509a6570 <col:24, col:93> col:46 _lrotl 'unsigned long (unsigned long, int)'
| |-ParmVarDecl 0x221509a6380 <col:58, col:72> col:72 _Val 'unsigned long'
| |-ParmVarDecl 0x221509a6400 <col:83, col:87> col:87 _Shift 'int'
| `-NoThrowAttr 0x221509a6840 <col:46> Inherited Implicit
|-FunctionDecl 0x221509a6a00 <line:795:46> col:46 implicit _lrotr 'unsigned long (unsigned long, int)' extern
| |-ParmVarDecl 0x221509a0aa0 <<invalid sloc>> <invalid sloc> 'unsigned long'
| |-ParmVarDecl 0x221509a0b08 <<invalid sloc>> <invalid sloc> 'int'
| `-NoThrowAttr 0x221509a0b80 <col:46> Implicit
|-FunctionDecl 0x221509a0bd8 prev 0x221509a6a00 <col:24, col:93> col:46 _lrotr 'unsigned long (unsigned long, int)'
| |-ParmVarDecl 0x221509a6880 <col:58, col:72> col:72 _Val 'unsigned long'
| |-ParmVarDecl 0x221509a6900 <col:83, col:87> col:87 _Shift 'int'
| `-NoThrowAttr 0x221509a0cd0 <col:46> Inherited Implicit
|-FunctionDecl 0x221509a11e8 <line:796:40, line:797:37> line:796:58 _makepath_s 'errno_t (char *, size_t, const char *, const char *, const char *, const char *) __attribute__((cdecl))':'errno_t (char *, size_t, const char *, const char *, const char *, const char *)'
| |-ParmVarDecl 0x221509a0d10 <col:99, col:106> col:106 _PathResult 'char *'
| |-ParmVarDecl 0x221509a0d88 <col:124, col:131> col:131 _SizeInWords 'size_t':'unsigned long long'
| |-ParmVarDecl 0x221509a0e08 <col:156, col:169> col:169 _Drive 'const char *'
| |-ParmVarDecl 0x221509a0e88 <col:188, col:201> col:201 _Dir 'const char *'
| |-ParmVarDecl 0x221509a0f08 <col:218, col:231> col:231 _Filename 'const char *'
| `-ParmVarDecl 0x221509a0f88 <line:797:20, col:33> col:33 _Ext 'const char *'
|-FunctionDecl 0x221509a1790 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1948:181> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:799:78 _makepath 'void (char *, const char *, const char *, const char *, const char *) __attribute__((cdecl))':'void (char *, const char *, const char *, const char *, const char *)'
| |-ParmVarDecl 0x221509a13a8 <col:113, col:119> col:119 _Path 'char *'
| |-ParmVarDecl 0x221509a1428 <col:137, col:151> col:151 _Drive 'const char *'
| |-ParmVarDecl 0x221509a14a8 <col:170, col:184> col:184 _Dir 'const char *'
| |-ParmVarDecl 0x221509a1528 <col:201, col:215> col:215 _Filename 'const char *'
| |-ParmVarDecl 0x221509a15a8 <col:237, col:251> col:251 _Ext 'const char *'
| `-DeprecatedAttr 0x221509a1858 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _makepath_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x221509a8bb0 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:826:9, col:59> col:27 _onexit '_onexit_t (_onexit_t) __attribute__((cdecl))':'_onexit_t (_onexit_t)'
| `-ParmVarDecl 0x221509a19c0 <col:44, col:54> col:54 _Func '_onexit_t':'int (*)(void) __attribute__((cdecl))'
|-FunctionDecl 0x221509a8dd0 <line:831:9, col:60> col:22 perror 'void (const char *) __attribute__((cdecl))':'void (const char *)'
| `-ParmVarDecl 0x221509a8c88 <col:40, col:53> col:53 _ErrMsg 'const char *'
|-FunctionDecl 0x221509a8f88 <line:838:24, col:77> col:39 _putenv 'int (const char *) __attribute__((cdecl))':'int (const char *)'
| `-ParmVarDecl 0x221509a8ea8 <col:54, col:67> col:67 _EnvString 'const char *'
|-FunctionDecl 0x221509a9248 <line:839:28, col:107> col:44 _putenv_s 'errno_t (const char *, const char *) __attribute__((cdecl))':'errno_t (const char *, const char *)'
| |-ParmVarDecl 0x221509a9060 <col:61, col:74> col:74 _Name 'const char *'
| `-ParmVarDecl 0x221509a90e0 <col:88, col:101> col:101 _Value 'const char *'
|-FunctionDecl 0x221509a9510 <line:842:30> col:30 implicit _rotl 'unsigned int (unsigned int, int)' extern
| |-ParmVarDecl 0x221509a95b0 <<invalid sloc>> <invalid sloc> 'unsigned int'
| |-ParmVarDecl 0x221509a9618 <<invalid sloc>> <invalid sloc> 'int'
| `-NoThrowAttr 0x221509a9690 <col:30> Implicit
|-FunctionDecl 0x221509a96e8 prev 0x221509a9510 <col:9, col:75> col:30 _rotl 'unsigned int (unsigned int, int)'
| |-ParmVarDecl 0x221509a9328 <col:41, col:54> col:54 _Val 'unsigned int'
| |-ParmVarDecl 0x221509a93a8 <col:65, col:69> col:69 _Shift 'int'
| `-NoThrowAttr 0x221509a97e0 <col:30> Inherited Implicit
|-FunctionDecl 0x221509a9a10 <line:843:34> col:34 implicit _rotl64 'unsigned long long (unsigned long long, int)' extern
| |-ParmVarDecl 0x221509a9ab0 <<invalid sloc>> <invalid sloc> 'unsigned long long'
| |-ParmVarDecl 0x221509a1ab0 <<invalid sloc>> <invalid sloc> 'int'
| `-NoThrowAttr 0x221509a1b28 <col:34> Implicit
|-FunctionDecl 0x221509a1b80 prev 0x221509a9a10 <col:9, col:85> col:34 _rotl64 'unsigned long long (unsigned long long, int)'
| |-ParmVarDecl 0x221509a9820 <col:47, col:64> col:64 _Val 'unsigned long long'
| |-ParmVarDecl 0x221509a98a0 <col:75, col:79> col:79 _Shift 'int'
| `-NoThrowAttr 0x221509a1c78 <col:34> Inherited Implicit
|-FunctionDecl 0x221509a1e38 <line:844:30> col:30 implicit _rotr 'unsigned int (unsigned int, int)' extern
| |-ParmVarDecl 0x221509a1ed8 <<invalid sloc>> <invalid sloc> 'unsigned int'
| |-ParmVarDecl 0x221509a1f40 <<invalid sloc>> <invalid sloc> 'int'
| `-NoThrowAttr 0x221509a1fb8 <col:30> Implicit
|-FunctionDecl 0x221509a2010 prev 0x221509a1e38 <col:9, col:75> col:30 _rotr 'unsigned int (unsigned int, int)'
| |-ParmVarDecl 0x221509a1cb8 <col:41, col:54> col:54 _Val 'unsigned int'
| |-ParmVarDecl 0x221509a1d38 <col:65, col:69> col:69 _Shift 'int'
| `-NoThrowAttr 0x221509a2108 <col:30> Inherited Implicit
|-FunctionDecl 0x221509a22c8 <line:845:34> col:34 implicit _rotr64 'unsigned long long (unsigned long long, int)' extern
| |-ParmVarDecl 0x221509a2368 <<invalid sloc>> <invalid sloc> 'unsigned long long'
| |-ParmVarDecl 0x221509a23d0 <<invalid sloc>> <invalid sloc> 'int'
| `-NoThrowAttr 0x221509a2448 <col:34> Implicit
|-FunctionDecl 0x221509a24a0 prev 0x221509a22c8 <col:9, col:85> col:34 _rotr64 'unsigned long long (unsigned long long, int)'
| |-ParmVarDecl 0x221509a2148 <col:47, col:64> col:64 _Val 'unsigned long long'
| |-ParmVarDecl 0x221509a21c8 <col:75, col:79> col:79 _Shift 'int'
| `-NoThrowAttr 0x221509a2598 <col:34> Inherited Implicit
|-FunctionDecl 0x221509a2958 <line:849:9, col:171> col:25 _searchenv_s 'errno_t (const char *, const char *, char *, size_t) __attribute__((cdecl))':'errno_t (const char *, const char *, char *, size_t)'
| |-ParmVarDecl 0x221509a25d8 <col:45, col:58> col:58 _Filename 'const char *'
| |-ParmVarDecl 0x221509a2658 <col:76, col:89> col:89 _EnvVar 'const char *'
| |-ParmVarDecl 0x221509a26d8 <col:127, col:134> col:134 _ResultPath 'char *'
| `-ParmVarDecl 0x221509a2750 <col:152, col:159> col:159 _SizeInBytes 'size_t':'unsigned long long'
|-FunctionDecl 0x221509a3e40 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1954:149> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:851:78 _searchenv 'void (const char *, const char *, char *) __attribute__((cdecl))':'void (const char *, const char *, char *)'
| |-ParmVarDecl 0x221509a3ba8 <col:97, col:111> col:111 _Filename 'const char *'
| |-ParmVarDecl 0x221509a3c28 <col:129, col:143> col:143 _EnvVar 'const char *'
| |-ParmVarDecl 0x221509a3ca8 <col:176, col:182> col:182 _ResultPath 'char *'
| `-DeprecatedAttr 0x221509a3ef8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _searchenv_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x221509a44e0 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:854:261> col:62 _splitpath 'void (const char *, char *, char *, char *, char *) __attribute__((cdecl))':'void (const char *, char *, char *, char *, char *)'
| |-ParmVarDecl 0x221509a4100 <col:80, col:93> col:93 _FullPath 'const char *'
| |-ParmVarDecl 0x221509a4180 <col:129, col:136> col:136 _Drive 'char *'
| |-ParmVarDecl 0x221509a4200 <col:169, col:176> col:176 _Dir 'char *'
| |-ParmVarDecl 0x221509a4280 <col:207, col:214> col:214 _Filename 'char *'
| |-ParmVarDecl 0x221509a4300 <col:250, col:257> col:257 _Ext 'char *'
| `-DeprecatedAttr 0x221509a45a8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _splitpath_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x221509a2db0 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:855:40, line:859:79> line:855:57 _splitpath_s 'errno_t (const char *, char *, size_t, char *, size_t, char *, size_t, char *, size_t) __attribute__((cdecl))':'errno_t (const char *, char *, size_t, char *, size_t, char *, size_t, char *, size_t)'
| |-ParmVarDecl 0x221509a46f0 <col:77, col:90> col:90 _FullPath 'const char *'
| |-ParmVarDecl 0x221509a4770 <line:856:48, col:55> col:55 _Drive 'char *'
| |-ParmVarDecl 0x221509a47e8 <col:68, col:75> col:75 _DriveSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x221509a4868 <line:857:46, col:53> col:53 _Dir 'char *'
| |-ParmVarDecl 0x221509a48e0 <col:64, col:71> col:71 _DirSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x221509a4960 <line:858:51, col:58> col:58 _Filename 'char *'
| |-ParmVarDecl 0x221509a49d8 <col:74, col:81> col:81 _FilenameSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x221509a4a58 <line:859:46, col:53> col:53 _Ext 'char *'
| `-ParmVarDecl 0x221509a2ac0 <col:64, col:71> col:71 _ExtSize 'size_t':'unsigned long long'
|-FunctionDecl 0x221509a3160 <line:862:9, col:204> col:24 _swab 'void (char *, char *, int) __attribute__((cdecl))':'void (char *, char *, int)'
| |-ParmVarDecl 0x221509a2ec8 <col:95, col:102> col:102 _Buf1 'char *'
| |-ParmVarDecl 0x221509a2f48 <col:174, col:181> col:181 _Buf2 'char *'
| `-ParmVarDecl 0x221509a2fc8 <col:188, col:192> col:192 _SizeInBytes 'int'
|-FunctionDecl 0x221509a3448 <line:873:24, col:161> col:42 _wfullpath 'wchar_t *(wchar_t *, const wchar_t *, size_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, const wchar_t *, size_t)'
| |-ParmVarDecl 0x221509a3240 <col:86, col:96> col:96 _FullPath 'wchar_t *'
| |-ParmVarDecl 0x221509a32b8 <col:114, col:130> col:130 _Path 'const wchar_t *'
| `-ParmVarDecl 0x221509a3330 <col:142, col:149> col:149 _SizeInWords 'size_t':'unsigned long long'
|-FunctionDecl 0x221509a39e8 <line:879:40, line:880:40> line:879:56 _wmakepath_s 'errno_t (wchar_t *, size_t, const wchar_t *, const wchar_t *, const wchar_t *, const wchar_t *) __attribute__((cdecl))':'errno_t (wchar_t *, size_t, const wchar_t *, const wchar_t *, const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x221509a3528 <col:91, col:101> col:101 _PathResult 'wchar_t *'
| |-ParmVarDecl 0x221509a35a0 <col:119, col:126> col:126 _SIZE 'size_t':'unsigned long long'
| |-ParmVarDecl 0x221509a3618 <col:144, col:160> col:160 _Drive 'const wchar_t *'
| |-ParmVarDecl 0x221509a3690 <col:179, col:195> col:195 _Dir 'const wchar_t *'
| |-ParmVarDecl 0x221509a3708 <col:212, col:228> col:228 _Filename 'const wchar_t *'
| `-ParmVarDecl 0x221509a3780 <line:880:20, col:36> col:36 _Ext 'const wchar_t *'
|-FunctionDecl 0x221509aa030 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1948:181> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:882:78 _wmakepath 'void (wchar_t *, const wchar_t *, const wchar_t *, const wchar_t *, const wchar_t *) __attribute__((cdecl))':'void (wchar_t *, const wchar_t *, const wchar_t *, const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x221509a9c18 <col:114, col:123> col:123 _ResultPath 'wchar_t *'
| |-ParmVarDecl 0x221509a9c90 <col:147, col:164> col:164 _Drive 'const wchar_t *'
| |-ParmVarDecl 0x221509a9d08 <col:183, col:200> col:200 _Dir 'const wchar_t *'
| |-ParmVarDecl 0x221509a9d80 <col:217, col:234> col:234 _Filename 'const wchar_t *'
| |-ParmVarDecl 0x221509a9df8 <col:256, col:273> col:273 _Ext 'const wchar_t *'
| `-DeprecatedAttr 0x221509aa0f8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wmakepath_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x221509aa3b0 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:885:9, col:65> col:22 _wperror 'void (const wchar_t *) __attribute__((cdecl))':'void (const wchar_t *)'
| `-ParmVarDecl 0x221509aa238 <col:42, col:58> col:58 _ErrMsg 'const wchar_t *'
|-FunctionDecl 0x221509aa560 <line:889:24, col:81> col:39 _wputenv 'int (const wchar_t *) __attribute__((cdecl))':'int (const wchar_t *)'
| `-ParmVarDecl 0x221509aa480 <col:55, col:71> col:71 _EnvString 'const wchar_t *'
|-FunctionDecl 0x221509aa808 <line:890:28, col:114> col:44 _wputenv_s 'errno_t (const wchar_t *, const wchar_t *) __attribute__((cdecl))':'errno_t (const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x221509aa630 <col:62, col:78> col:78 _Name 'const wchar_t *'
| `-ParmVarDecl 0x221509aa6a8 <col:92, col:108> col:108 _Value 'const wchar_t *'
|-FunctionDecl 0x221509aac78 <line:891:9, col:181> col:25 _wsearchenv_s 'errno_t (const wchar_t *, const wchar_t *, wchar_t *, size_t) __attribute__((cdecl))':'errno_t (const wchar_t *, const wchar_t *, wchar_t *, size_t)'
| |-ParmVarDecl 0x221509aa8e0 <col:46, col:62> col:62 _Filename 'const wchar_t *'
| |-ParmVarDecl 0x221509aa958 <col:80, col:96> col:96 _EnvVar 'const wchar_t *'
| |-ParmVarDecl 0x221509aa9d0 <col:134, col:144> col:144 _ResultPath 'wchar_t *'
| `-ParmVarDecl 0x221509aaa48 <col:162, col:169> col:169 _SizeInWords 'size_t':'unsigned long long'
|-FunctionDecl 0x221509ab0e0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1954:149> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:893:78 _wsearchenv 'void (const wchar_t *, const wchar_t *, wchar_t *) __attribute__((cdecl))':'void (const wchar_t *, const wchar_t *, wchar_t *)'
| |-ParmVarDecl 0x221509aae20 <col:98, col:115> col:115 _Filename 'const wchar_t *'
| |-ParmVarDecl 0x221509aae98 <col:133, col:150> col:150 _EnvVar 'const wchar_t *'
| |-ParmVarDecl 0x221509aaf10 <col:183, col:192> col:192 _ResultPath 'wchar_t *'
| `-DeprecatedAttr 0x221509ab198 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wsearchenv_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x221509ab7b0 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:896:278> col:63 _wsplitpath 'void (const wchar_t *, wchar_t *, wchar_t *, wchar_t *, wchar_t *) __attribute__((cdecl))':'void (const wchar_t *, wchar_t *, wchar_t *, wchar_t *, wchar_t *)'
| |-ParmVarDecl 0x221509ab398 <col:82, col:98> col:98 _FullPath 'const wchar_t *'
| |-ParmVarDecl 0x221509ab410 <col:134, col:144> col:144 _Drive 'wchar_t *'
| |-ParmVarDecl 0x221509ab488 <col:177, col:187> col:187 _Dir 'wchar_t *'
| |-ParmVarDecl 0x221509ab500 <col:218, col:228> col:228 _Filename 'wchar_t *'
| |-ParmVarDecl 0x221509ab578 <col:264, col:274> col:274 _Ext 'wchar_t *'
| `-DeprecatedAttr 0x221509ab878 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wsplitpath_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x221509ac0a0 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:897:21, line:901:82> line:897:37 _wsplitpath_s 'errno_t (const wchar_t *, wchar_t *, size_t, wchar_t *, size_t, wchar_t *, size_t, wchar_t *, size_t) __attribute__((cdecl))':'errno_t (const wchar_t *, wchar_t *, size_t, wchar_t *, size_t, wchar_t *, size_t, wchar_t *, size_t)'
| |-ParmVarDecl 0x221509ab9b8 <col:58, col:74> col:74 _FullPath 'const wchar_t *'
| |-ParmVarDecl 0x221509aba30 <line:898:48, col:58> col:58 _Drive 'wchar_t *'
| |-ParmVarDecl 0x221509abaa8 <col:71, col:78> col:78 _DriveSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x221509abb50 <line:899:46, col:56> col:56 _Dir 'wchar_t *'
| |-ParmVarDecl 0x221509abbc8 <col:67, col:74> col:74 _DirSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x221509abc40 <line:900:51, col:61> col:61 _Filename 'wchar_t *'
| |-ParmVarDecl 0x221509abcb8 <col:77, col:84> col:84 _FilenameSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x221509abd30 <line:901:46, col:56> col:56 _Ext 'wchar_t *'
| `-ParmVarDecl 0x221509abda8 <col:67, col:74> col:74 _ExtSize 'size_t':'unsigned long long'
|-FunctionDecl 0x221509ac3c0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:909:78> col:50 _seterrormode 'void (int) __attribute__((cdecl))':'void (int)'
| |-ParmVarDecl 0x221509ac2b8 <col:69, col:73> col:73 _Mode 'int'
| `-DeprecatedAttr 0x221509ac468 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable has been superceded by newer library or operating system functionality. Consider using SetErrorMode instead. See online help for details." ""
|-FunctionDecl 0x221509ac858 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:910:97> col:42 _beep 'void (unsigned int, unsigned int) __attribute__((cdecl))':'void (unsigned int, unsigned int)'
| |-ParmVarDecl 0x221509ac678 <col:53, col:62> col:62 _Frequency 'unsigned int'
| |-ParmVarDecl 0x221509ac6f8 <col:79, col:88> col:88 _Duration 'unsigned int'
| `-DeprecatedAttr 0x221509ac908 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable has been superceded by newer library or operating system functionality. Consider using Beep instead. See online help for details." ""
|-FunctionDecl 0x221509adcb0 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:911:78> col:43 _sleep 'void (unsigned long) __attribute__((cdecl))':'void (unsigned long)'
| |-ParmVarDecl 0x221509adb70 <col:55, col:69> col:69 _Duration 'unsigned long'
| `-DeprecatedAttr 0x221509add58 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable has been superceded by newer library or operating system functionality. Consider using Sleep instead. See online help for details." ""
|-FunctionDecl 0x221509ae300 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:934:187> col:102 ecvt 'char *(double, int, int *, int *) __attribute__((cdecl))':'char *(double, int, int *, int *)'
| |-ParmVarDecl 0x221509ae040 <col:112, col:119> col:119 _Val 'double'
| |-ParmVarDecl 0x221509ae0c0 <col:130, col:134> col:134 _NumOfDigits 'int'
| |-ParmVarDecl 0x221509ae140 <col:154, col:160> col:160 _PtDec 'int *'
| |-ParmVarDecl 0x221509ae1c0 <col:174, col:180> col:180 _PtSign 'int *'
| |-DeprecatedAttr 0x221509ae3c0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _ecvt. See online help for details." ""
| `-DeprecatedAttr 0x221509ae4b8 <col:47, col:63> "This function or variable may be unsafe. Consider using _ecvt_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x221509ae9f0 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:935:184> col:102 fcvt 'char *(double, int, int *, int *) __attribute__((cdecl))':'char *(double, int, int *, int *)'
| |-ParmVarDecl 0x221509ae730 <col:112, col:119> col:119 _Val 'double'
| |-ParmVarDecl 0x221509ae7b0 <col:130, col:134> col:134 _NumOfDec 'int'
| |-ParmVarDecl 0x221509ae830 <col:151, col:157> col:157 _PtDec 'int *'
| |-ParmVarDecl 0x221509ae8b0 <col:171, col:177> col:177 _PtSign 'int *'
| |-DeprecatedAttr 0x221509aeab0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _fcvt. See online help for details." ""
| `-DeprecatedAttr 0x221509aec30 <col:47, col:63> "This function or variable may be unsafe. Consider using _fcvt_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x221509af0c8 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:936:179> col:96 gcvt 'char *(double, int, char *) __attribute__((cdecl))':'char *(double, int, char *)'
| |-ParmVarDecl 0x221509aeea8 <col:106, col:113> col:113 _Val 'double'
| |-ParmVarDecl 0x221509aef28 <col:124, col:128> col:128 _NumOfDigits 'int'
| |-ParmVarDecl 0x221509aefa8 <col:165, col:172> col:172 _DstBuf 'char *'
| |-DeprecatedAttr 0x221509af180 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _gcvt. See online help for details." ""
| `-DeprecatedAttr 0x221509af278 <col:47, col:63> "This function or variable may be unsafe. Consider using _fcvt_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x221509af710 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:937:170> col:96 itoa 'char *(int, char *, int) __attribute__((cdecl))':'char *(int, char *, int)'
| |-ParmVarDecl 0x221509af4f0 <col:106, col:110> col:110 _Val 'int'
| |-ParmVarDecl 0x221509af570 <col:139, col:146> col:146 _DstBuf 'char *'
| |-ParmVarDecl 0x221509af5f0 <col:160, col:164> col:164 _Radix 'int'
| |-DeprecatedAttr 0x221509af7c8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _itoa. See online help for details." ""
| `-DeprecatedAttr 0x221509af8c0 <col:47, col:63> "This function or variable may be unsafe. Consider using _itoa_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x221509a7d30 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:938:171> col:96 ltoa 'char *(long, char *, int) __attribute__((cdecl))':'char *(long, char *, int)'
| |-ParmVarDecl 0x221509a7b10 <col:106, col:111> col:111 _Val 'long'
| |-ParmVarDecl 0x221509a7b90 <col:140, col:147> col:147 _DstBuf 'char *'
| |-ParmVarDecl 0x221509a7c10 <col:161, col:165> col:165 _Radix 'int'
| |-DeprecatedAttr 0x221509a7de8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _ltoa. See online help for details." ""
| `-DeprecatedAttr 0x221509a7ee0 <col:47, col:63> "This function or variable may be unsafe. Consider using _ltoa_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x221509a8178 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:941:108> col:71 putenv 'int (const char *) __attribute__((cdecl))':'int (const char *)'
| |-ParmVarDecl 0x221509a8098 <col:85, col:98> col:98 _EnvString 'const char *'
| `-DeprecatedAttr 0x221509a8220 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _putenv. See online help for details." ""
|-FunctionDecl 0x221509a8600 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:944:245> col:128 swab 'void (char *, char *, int) __attribute__((cdecl))':'void (char *, char *, int)'
| |-ParmVarDecl 0x221509a83e8 <col:165, col:172> col:172 _Buf1 'char *'
| |-ParmVarDecl 0x221509a8468 <col:210, col:217> col:217 _Buf2 'char *'
| |-ParmVarDecl 0x221509a84e8 <col:229, col:233> col:233 _SizeInBytes 'int'
| `-DeprecatedAttr 0x221509a86b8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _swab. See online help for details." ""
|-FunctionDecl 0x221509b4c80 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:945:181> col:96 ultoa 'char *(unsigned long, char *, int) __attribute__((cdecl))':'char *(unsigned long, char *, int)'
| |-ParmVarDecl 0x221509a8980 <col:107, col:121> col:121 _Val 'unsigned long'
| |-ParmVarDecl 0x221509a8a00 <col:150, col:157> col:157 _Dstbuf 'char *'
| |-ParmVarDecl 0x221509a8a80 <col:171, col:175> col:175 _Radix 'int'
| |-DeprecatedAttr 0x221509b4d38 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _ultoa. See online help for details." ""
| `-DeprecatedAttr 0x221509b4e30 <col:47, col:63> "This function or variable may be unsafe. Consider using _ultoa_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x221509b5018 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:64:18, line:947:48> col:18 onexit '_onexit_t (_onexit_t) __attribute__((cdecl))':'_onexit_t (_onexit_t)'
| `-ParmVarDecl 0x221509b4f40 <line:64:18, line:947:43> col:43 _Func '_onexit_t':'int (*)(void) __attribute__((cdecl))'
|-RecordDecl 0x221509b50d8 <.//openssl//file_jk/before\crypto\ec/ec_lcl.h:52:1, line:173:1> line:52:8 struct ec_method_st definition
| |-FieldDecl 0x221509b51a8 <line:54:5, col:9> col:9 flags 'int'
| |-FieldDecl 0x221509b5218 <line:56:5, col:9> col:9 field_type 'int'
| |-FieldDecl 0x221509b53b8 <line:61:5, col:34> col:11 group_init 'int (*)(int *)'
| |-FieldDecl 0x221509b5580 <line:62:5, col:37> col:12 group_finish 'void (*)(int *)'
| |-FieldDecl 0x221509b5690 <line:63:5, col:43> col:12 group_clear_finish 'void (*)(int *)'
| |-FieldDecl 0x221509b5900 <line:64:5, col:52> col:11 group_copy 'int (*)(int *, const int *)'
| |-FieldDecl 0x221509b5d28 <line:67:5, line:68:54> line:67:11 group_set_curve 'int (*)(int *, const int *, const int *, const int *, int *)'
| |-FieldDecl 0x221509b6138 <line:69:5, line:70:37> line:69:11 group_get_curve 'int (*)(const int *, int *, int *, int *, int *)'
| |-FieldDecl 0x221509b6308 <line:72:5, col:46> col:11 group_get_degree 'int (*)(const int *)'
| |-FieldDecl 0x221509b6420 <line:73:5, col:46> col:11 group_order_bits 'int (*)(const int *)'
| |-FieldDecl 0x221509b6690 <line:75:5, col:64> col:11 group_check_discriminant 'int (*)(const int *, int *)'
| |-FieldDecl 0x221509b67a8 <line:80:5, col:34> col:11 point_init 'int (*)(int *)'
| |-FieldDecl 0x221509b68b8 <line:81:5, col:37> col:12 point_finish 'void (*)(int *)'
| |-FieldDecl 0x221509b69c8 <line:82:5, col:43> col:12 point_clear_finish 'void (*)(int *)'
| |-FieldDecl 0x221509b6b68 <line:83:5, col:52> col:11 point_copy 'int (*)(int *, const int *)'
| |-FieldDecl 0x221509b7d40 <line:92:5, col:63> col:11 point_set_to_infinity 'int (*)(const int *, int *)'
| |-FieldDecl 0x221509b81f0 <line:93:5, line:96:76> line:93:11 point_set_Jprojective_coordinates_GFp 'int (*)(const int *, int *, const int *, const int *, const int *, int *)'
| |-FieldDecl 0x221509b86a0 <line:97:5, line:100:59> line:97:11 point_get_Jprojective_coordinates_GFp 'int (*)(const int *, const int *, int *, int *, int *, int *)'
| |-FieldDecl 0x221509b8ab8 <line:101:5, line:103:50> line:101:11 point_set_affine_coordinates 'int (*)(const int *, int *, const int *, const int *, int *)'
| |-FieldDecl 0x221509b6eb8 <line:104:5, line:105:72> line:104:11 point_get_affine_coordinates 'int (*)(const int *, const int *, int *, int *, int *)'
| |-FieldDecl 0x221509b72c8 <line:106:5, line:108:54> line:106:11 point_set_compressed_coordinates 'int (*)(const int *, int *, const int *, int, int *)'
| |-FieldDecl 0x221509b77e8 <line:110:5, line:112:46> line:110:14 point2oct 'size_t (*)(const int *, const int *, int, unsigned char *, size_t, int *)'
| |-FieldDecl 0x221509b0c00 <line:113:5, line:114:43> line:113:11 oct2point 'int (*)(const int *, int *, const unsigned char *, size_t, int *)'
| |-FieldDecl 0x221509b0f38 <line:116:5, line:117:44> line:116:11 add 'int (*)(const int *, int *, const int *, const int *, int *)'
| |-FieldDecl 0x221509b12c0 <line:118:5, col:75> col:11 dbl 'int (*)(const int *, int *, const int *, int *)'
| |-FieldDecl 0x221509b15b8 <line:119:5, col:58> col:11 invert 'int (*)(const int *, int *, int *)'
| |-FieldDecl 0x221509b1820 <line:123:5, col:62> col:11 is_at_infinity 'int (*)(const int *, const int *)'
| |-FieldDecl 0x221509b1b18 <line:124:5, col:69> col:11 is_on_curve 'int (*)(const int *, const int *, int *)'
| |-FieldDecl 0x221509b8f40 <line:125:5, line:126:31> line:125:11 point_cmp 'int (*)(const int *, const int *, const int *, int *)'
| |-FieldDecl 0x221509b9168 <line:128:5, col:63> col:11 make_affine 'int (*)(const int *, int *, int *)'
| |-FieldDecl 0x221509b95e0 <line:129:5, line:130:40> line:129:11 points_make_affine 'int (*)(const int *, size_t, int **, int *)'
| |-FieldDecl 0x221509b9c30 <line:136:5, line:138:25> line:136:11 mul 'int (*)(const int *, int *, const int *, size_t, const int **, const int **, int *)'
| |-FieldDecl 0x221509b9ea0 <line:139:5, col:54> col:11 precompute_mult 'int (*)(int *, int *)'
| |-FieldDecl 0x221509b9fb8 <line:140:5, col:55> col:11 have_precompute_mult 'int (*)(const int *)'
| |-FieldDecl 0x221509ba2f0 <line:148:5, line:149:48> line:148:11 field_mul 'int (*)(const int *, int *, const int *, const int *, int *)'
| |-FieldDecl 0x221509ba5a0 <line:150:5, col:77> col:11 field_sqr 'int (*)(const int *, int *, const int *, int *)'
| |-FieldDecl 0x221509ba8d8 <line:151:5, line:152:48> line:151:11 field_div 'int (*)(const int *, int *, const int *, const int *, int *)'
| |-FieldDecl 0x221509bab88 <line:154:5, line:155:34> line:154:11 field_encode 'int (*)(const int *, int *, const int *, int *)'
| |-FieldDecl 0x221509b2e00 <line:157:5, line:158:34> line:157:11 field_decode 'int (*)(const int *, int *, const int *, int *)'
| |-FieldDecl 0x221509b3028 <line:159:5, col:67> col:11 field_set_to_one 'int (*)(const int *, int *, int *)'
| |-FieldDecl 0x221509b3350 <line:161:5, col:75> col:14 priv2oct 'size_t (*)(const int *, unsigned char *, size_t)'
| |-FieldDecl 0x221509b3678 <line:162:5, col:72> col:11 oct2priv 'int (*)(int *, const unsigned char *, size_t)'
| |-FieldDecl 0x221509b3818 <line:163:5, col:61> col:11 set_private 'int (*)(int *, const int *)'
| |-FieldDecl 0x221509b3930 <line:164:5, col:32> col:11 keygen 'int (*)(int *)'
| |-FieldDecl 0x221509b3a48 <line:165:5, col:40> col:11 keycheck 'int (*)(const int *)'
| |-FieldDecl 0x221509b3b60 <line:166:5, col:35> col:11 keygenpub 'int (*)(int *)'
| |-FieldDecl 0x221509b3d18 <line:167:5, col:50> col:11 keycopy 'int (*)(int *, const int *)'
| |-FieldDecl 0x221509b3e28 <line:168:5, col:36> col:12 keyfinish 'void (*)(int *)'
| |-FieldDecl 0x221509b4230 <line:170:5, line:171:72> line:170:11 ecdh_compute_key 'int (*)(unsigned char **, size_t *, const int *, const int *)'
| `-FieldDecl 0x221509b4458 <line:172:5, col:77> col:11 blind_coordinates 'int (*)(const int *, int *, int *)'
|-RecordDecl 0x221509b44b0 <line:178:9, col:16> col:16 struct nistp224_pre_comp_st
|-TypedefDecl 0x221509b45c8 <col:1, col:37> col:37 referenced NISTP224_PRE_COMP 'struct nistp224_pre_comp_st':'struct nistp224_pre_comp_st'
| `-ElaboratedType 0x221509b4570 'struct nistp224_pre_comp_st' sugar
|   `-RecordType 0x221509b4550 'struct nistp224_pre_comp_st'
|     `-Record 0x221509b44b0 'nistp224_pre_comp_st'
|-RecordDecl 0x221509b4638 <line:179:9, col:16> col:16 struct nistp256_pre_comp_st
|-TypedefDecl 0x221509b4748 <col:1, col:37> col:37 referenced NISTP256_PRE_COMP 'struct nistp256_pre_comp_st':'struct nistp256_pre_comp_st'
| `-ElaboratedType 0x221509b46f0 'struct nistp256_pre_comp_st' sugar
|   `-RecordType 0x221509b46d0 'struct nistp256_pre_comp_st'
|     `-Record 0x221509b4638 'nistp256_pre_comp_st'
|-RecordDecl 0x221509b47b8 <line:180:9, col:16> col:16 struct nistp521_pre_comp_st
|-TypedefDecl 0x221509b48c8 <col:1, col:37> col:37 referenced NISTP521_PRE_COMP 'struct nistp521_pre_comp_st':'struct nistp521_pre_comp_st'
| `-ElaboratedType 0x221509b4870 'struct nistp521_pre_comp_st' sugar
|   `-RecordType 0x221509b4850 'struct nistp521_pre_comp_st'
|     `-Record 0x22150b3bdc8 'nistp521_pre_comp_st'
|-RecordDecl 0x221509b4938 <line:181:9, col:16> col:16 struct nistz256_pre_comp_st
|-TypedefDecl 0x221509b4a48 <col:1, col:37> col:37 referenced NISTZ256_PRE_COMP 'struct nistz256_pre_comp_st':'struct nistz256_pre_comp_st'
| `-ElaboratedType 0x221509b49f0 'struct nistz256_pre_comp_st' sugar
|   `-RecordType 0x221509b49d0 'struct nistz256_pre_comp_st'
|     `-Record 0x221509b4938 'nistz256_pre_comp_st'
|-RecordDecl 0x221509b4ab8 <line:182:9, col:16> col:16 struct ec_pre_comp_st
|-TypedefDecl 0x221509c1cb0 <col:1, col:31> col:31 referenced EC_PRE_COMP 'struct ec_pre_comp_st':'struct ec_pre_comp_st'
| `-ElaboratedType 0x221509b4b70 'struct ec_pre_comp_st' sugar
|   `-RecordType 0x221509b4b50 'struct ec_pre_comp_st'
|     `-Record 0x221509b4ab8 'ec_pre_comp_st'
|-RecordDecl 0x221509c1d20 <line:184:1, line:249:1> line:184:8 invalid struct ec_group_st definition
| |-FieldDecl 0x221509c1df8 <line:185:5, col:22> col:22 invalid meth 'const int *'
| |-FieldDecl 0x221509c1e68 <line:186:5, col:15> col:15 invalid generator 'int *'
| |-FieldDecl 0x221509c1ed8 <line:187:5, col:13> col:13 invalid order 'int *'
| |-FieldDecl 0x221509c1f48 <col:5, col:21> col:21 invalid cofactor 'int *'
| |-FieldDecl 0x221509c1fb8 <line:188:5, col:9> col:9 curve_name 'int'
| |-FieldDecl 0x221509c2028 <line:189:5, col:9> col:9 asn1_flag 'int'
| |-FieldDecl 0x221509c2098 <line:190:5, col:29> col:29 invalid asn1_form 'int'
| |-FieldDecl 0x221509c2108 <line:191:5, col:20> col:20 seed 'unsigned char *'
| |-FieldDecl 0x221509c2170 <line:193:5, col:12> col:12 seed_len 'size_t':'unsigned long long'
| |-FieldDecl 0x221509c21e0 <line:203:5, col:13> col:13 invalid field 'int *'
| |-FieldDecl 0x221509c22e0 <line:211:5, col:15> col:9 poly 'int [6]'
| |-FieldDecl 0x221509c2350 <line:219:5, col:13> col:13 invalid a 'int *'
| |-FieldDecl 0x221509c23c0 <col:5, col:17> col:17 invalid b 'int *'
| |-FieldDecl 0x221509c2430 <line:221:5, col:9> col:9 a_is_minus3 'int'
| |-FieldDecl 0x221509c24a0 <line:223:5, col:11> col:11 field_data1 'void *'
| |-FieldDecl 0x221509c2510 <line:225:5, col:11> col:11 field_data2 'void *'
| |-FieldDecl 0x221509c28a0 <line:227:5, line:228:36> line:227:11 field_mod_func 'int (*)(int *, const int *, const int *, int *)'
| |-FieldDecl 0x221509c2910 <line:230:5, col:18> col:18 invalid mont_data 'int *'
| |-EnumDecl 0x221509c2968 <line:237:5, line:241:5> line:237:5
| | |-EnumConstantDecl 0x221509c2a40 <line:238:9> col:9 PCT_none 'int'
| | |-EnumConstantDecl 0x221509c2a98 <line:239:9> col:9 PCT_nistp224 'int'
| | |-EnumConstantDecl 0x221509c2af0 <col:23> col:23 PCT_nistp256 'int'
| | |-EnumConstantDecl 0x221509c2b48 <col:37> col:37 referenced PCT_nistp521 'int'
| | |-EnumConstantDecl 0x221509c2ba0 <col:51> col:51 PCT_nistz256 'int'
| | `-EnumConstantDecl 0x221509c2bf8 <line:240:9> col:9 PCT_ec 'int'
| |-FieldDecl 0x221509bdc70 <line:237:5, line:241:7> col:7 pre_comp_type 'enum (anonymous enum at .//openssl//file_jk/before\crypto\ec/ec_lcl.h:237:5)':'enum ec_group_st::(anonymous at .//openssl//file_jk/before\crypto\ec/ec_lcl.h:237:5)'
| |-RecordDecl 0x221509bdcc8 <line:242:5, line:248:5> line:242:5 union definition
| | |-FieldDecl 0x221509bde08 <line:243:9, col:28> col:28 nistp224 'NISTP224_PRE_COMP *'
| | |-FieldDecl 0x221509bdee8 <line:244:9, col:28> col:28 nistp256 'NISTP256_PRE_COMP *'
| | |-FieldDecl 0x221509bdfc8 <line:245:9, col:28> col:28 nistp521 'NISTP521_PRE_COMP *'
| | |-FieldDecl 0x221509be0a8 <line:246:9, col:28> col:28 nistz256 'NISTZ256_PRE_COMP *'
| | `-FieldDecl 0x221509be188 <line:247:9, col:22> col:22 ec 'EC_PRE_COMP *'
| `-FieldDecl 0x221509be238 <line:242:5, line:248:7> col:7 pre_comp 'union (anonymous union at .//openssl//file_jk/before\crypto\ec/ec_lcl.h:242:5)':'union ec_group_st::(anonymous at .//openssl//file_jk/before\crypto\ec/ec_lcl.h:242:5)'
|-RecordDecl 0x221509be290 <line:256:1, line:269:1> line:256:8 invalid struct ec_key_st definition
| |-FieldDecl 0x221509be368 <line:257:5, col:26> col:26 invalid meth 'const int *'
| |-FieldDecl 0x221509be3d8 <line:258:5, col:13> col:13 invalid engine 'int *'
| |-FieldDecl 0x221509be448 <line:259:5, col:9> col:9 version 'int'
| |-FieldDecl 0x221509be4b8 <line:260:5, col:15> col:15 invalid group 'int *'
| |-FieldDecl 0x221509be528 <line:261:5, col:15> col:15 invalid pub_key 'int *'
| |-FieldDecl 0x221509be598 <line:262:5, col:13> col:13 invalid priv_key 'int *'
| |-FieldDecl 0x221509be608 <line:263:5, col:18> col:18 enc_flag 'unsigned int'
| |-FieldDecl 0x221509be678 <line:264:5, col:29> col:29 invalid conv_form 'int'
| |-FieldDecl 0x221509be6e8 <line:265:5, col:9> col:9 references 'int'
| |-FieldDecl 0x221509be758 <line:266:5, col:9> col:9 flags 'int'
| |-FieldDecl 0x221509be7c8 <line:267:5, col:20> col:20 invalid ex_data 'int'
| `-FieldDecl 0x221509be838 <line:268:5, col:20> col:20 invalid lock 'int *'
|-RecordDecl 0x221509be890 <line:271:1, line:285:1> line:271:8 invalid struct ec_point_st definition
| |-FieldDecl 0x221509be968 <line:272:5, col:22> col:22 invalid meth 'const int *'
| |-FieldDecl 0x221509be9d8 <line:274:5, col:9> col:9 curve_name 'int'
| |-FieldDecl 0x221509bea48 <line:279:5, col:13> col:13 invalid X 'int *'
| |-FieldDecl 0x221509beab8 <line:280:5, col:13> col:13 invalid Y 'int *'
| |-FieldDecl 0x221509beb28 <line:281:5, col:13> col:13 invalid Z 'int *'
| `-FieldDecl 0x221509beb98 <line:283:5, col:9> col:9 Z_is_one 'int'
|-FunctionDecl 0x221509bfd48 <line:288:1, line:298:1> line:288:24 invalid ec_point_is_compat 'int (const int *, const int *)' static
| |-ParmVarDecl 0x221509bec08 <col:43, col:59> col:59 invalid point 'const int *'
| |-ParmVarDecl 0x221509bfca8 <line:289:43, col:59> col:59 invalid group 'const int *'
| `-CompoundStmt 0x221509bff00 <line:290:1, line:298:1>
|   |-IfStmt 0x221509bfeb0 <line:291:5, line:295:16>
|   | |-OpaqueValueExpr 0x221509bfe98 <<invalid sloc>> '_Bool'
|   | `-ReturnStmt 0x221509bfe88 <col:9, col:16>
|   |   `-IntegerLiteral 0x221509bfe60 <col:16> 'int' 0
|   `-ReturnStmt 0x221509bfef0 <line:297:5, col:12>
|     `-IntegerLiteral 0x221509bfec8 <col:12> 'int' 1
|-FunctionDecl 0x221509c0028 <line:301:1, col:64> col:20 EC_nistp224_pre_comp_dup 'NISTP224_PRE_COMP *(NISTP224_PRE_COMP *)'
| `-ParmVarDecl 0x221509bff30 <col:45, col:63> col:64 'NISTP224_PRE_COMP *'
|-FunctionDecl 0x221509c01e8 <line:302:1, col:64> col:20 EC_nistp256_pre_comp_dup 'NISTP256_PRE_COMP *(NISTP256_PRE_COMP *)'
| `-ParmVarDecl 0x221509c00f8 <col:45, col:63> col:64 'NISTP256_PRE_COMP *'
|-FunctionDecl 0x221509c03a8 <line:303:1, col:64> col:20 EC_nistp521_pre_comp_dup 'NISTP521_PRE_COMP *(NISTP521_PRE_COMP *)'
| `-ParmVarDecl 0x221509c02b8 <col:45, col:63> col:64 'NISTP521_PRE_COMP *'
|-FunctionDecl 0x221509c0568 <line:304:1, col:64> col:20 EC_nistz256_pre_comp_dup 'NISTZ256_PRE_COMP *(NISTZ256_PRE_COMP *)'
| `-ParmVarDecl 0x221509c0478 <col:45, col:63> col:64 'NISTZ256_PRE_COMP *'
|-FunctionDecl 0x221509c06c8 prev 0x221509c01e8 <line:305:1, col:64> col:20 EC_nistp256_pre_comp_dup 'NISTP256_PRE_COMP *(NISTP256_PRE_COMP *)'
| `-ParmVarDecl 0x221509c0638 <col:45, col:63> col:64 'NISTP256_PRE_COMP *'
|-FunctionDecl 0x221509c0878 <line:306:1, col:46> col:14 EC_ec_pre_comp_dup 'EC_PRE_COMP *(EC_PRE_COMP *)'
| `-ParmVarDecl 0x221509c0780 <col:33, col:45> col:46 'EC_PRE_COMP *'
|-FunctionDecl 0x221509c09e0 <line:308:1, col:38> col:6 invalid EC_pre_comp_free 'void (int *)'
| `-ParmVarDecl 0x221509c0950 <col:23, col:33> col:33 invalid group 'int *'
|-FunctionDecl 0x221509c0b88 <line:309:1, col:51> col:6 EC_nistp224_pre_comp_free 'void (NISTP224_PRE_COMP *)'
| `-ParmVarDecl 0x221509c0a98 <col:32, col:50> col:51 'NISTP224_PRE_COMP *'
|-FunctionDecl 0x221509bad38 <line:310:1, col:51> col:6 EC_nistp256_pre_comp_free 'void (NISTP256_PRE_COMP *)'
| `-ParmVarDecl 0x221509bac40 <col:32, col:50> col:51 'NISTP256_PRE_COMP *'
|-FunctionDecl 0x221509baef8 <line:311:1, col:51> col:6 used EC_nistp521_pre_comp_free 'void (NISTP521_PRE_COMP *)'
| `-ParmVarDecl 0x221509bae08 <col:32, col:50> col:51 'NISTP521_PRE_COMP *'
|-FunctionDecl 0x221509bb0b8 <line:312:1, col:51> col:6 EC_nistz256_pre_comp_free 'void (NISTZ256_PRE_COMP *)'
| `-ParmVarDecl 0x221509bafc8 <col:32, col:50> col:51 'NISTZ256_PRE_COMP *'
|-FunctionDecl 0x221509bb278 <line:313:1, col:39> col:6 EC_ec_pre_comp_free 'void (EC_PRE_COMP *)'
| `-ParmVarDecl 0x221509bb188 <col:26, col:38> col:39 'EC_PRE_COMP *'
|-FunctionDecl 0x221509bb730 <line:319:1, line:321:25> line:319:5 invalid ec_wNAF_mul 'int (const int *, int *, const int *, size_t, const int **, const int **, int *)'
| |-ParmVarDecl 0x221509bb350 <col:17, col:33> col:33 invalid group 'const int *'
| |-ParmVarDecl 0x221509bb3d0 <col:40, col:50> col:50 invalid r 'int *'
| |-ParmVarDecl 0x221509bb450 <col:53, col:67> col:67 invalid scalar 'const int *'
| |-ParmVarDecl 0x221509bb4c8 <line:320:17, col:24> col:24 num 'size_t':'unsigned long long'
| |-ParmVarDecl 0x221509bb558 <col:29, <invalid sloc>> col:45 invalid points 'const int **':'const int **'
| |-ParmVarDecl 0x221509bb5e8 <col:55, <invalid sloc>> col:69 invalid scalars 'const int **':'const int **'
| `-ParmVarDecl 0x221509bb668 <line:321:17, <invalid sloc>> col:25 invalid 'int *'
|-FunctionDecl 0x221509bb940 <line:322:1, col:54> col:5 invalid ec_wNAF_precompute_mult 'int (int *, int *)'
| |-ParmVarDecl 0x221509bb820 <col:29, col:39> col:39 invalid group 'int *'
| `-ParmVarDecl 0x221509bb8a0 <col:46, <invalid sloc>> col:54 invalid 'int *'
|-FunctionDecl 0x221509bbaa0 <line:323:1, col:55> col:5 invalid ec_wNAF_have_precompute_mult 'int (const int *)'
| `-ParmVarDecl 0x221509bba08 <col:34, col:50> col:50 invalid group 'const int *'
|-FunctionDecl 0x221509c3cd0 <line:326:1, col:40> col:5 invalid ec_GFp_simple_group_init 'int (int *)'
| `-ParmVarDecl 0x221509bbb60 <col:30, <invalid sloc>> col:40 invalid 'int *'
|-FunctionDecl 0x221509c3e20 <line:327:1, col:43> col:6 invalid ec_GFp_simple_group_finish 'void (int *)'
| `-ParmVarDecl 0x221509c3d90 <col:33, <invalid sloc>> col:43 invalid 'int *'
|-FunctionDecl 0x221509c3f70 <line:328:1, col:49> col:6 invalid ec_GFp_simple_group_clear_finish 'void (int *)'
| `-ParmVarDecl 0x221509c3ee0 <col:39, <invalid sloc>> col:49 invalid 'int *'
|-FunctionDecl 0x221509c4150 <line:329:1, col:58> col:5 invalid ec_GFp_simple_group_copy 'int (int *, const int *)'
| |-ParmVarDecl 0x221509c4030 <col:30, <invalid sloc>> col:40 invalid 'int *'
| `-ParmVarDecl 0x221509c40b0 <col:42, <invalid sloc>> col:58 invalid 'const int *'
|-FunctionDecl 0x221509c44d0 <line:330:1, line:331:77> line:330:5 invalid ec_GFp_simple_group_set_curve 'int (int *, const int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x221509c4218 <col:35, <invalid sloc>> col:45 invalid 'int *'
| |-ParmVarDecl 0x221509c4298 <col:47, col:61> col:61 invalid p 'const int *'
| |-ParmVarDecl 0x221509c4318 <line:331:35, col:49> col:49 invalid a 'const int *'
| |-ParmVarDecl 0x221509c4398 <col:52, col:66> col:66 invalid b 'const int *'
| `-ParmVarDecl 0x221509c4418 <col:69, <invalid sloc>> col:77 invalid 'int *'
|-FunctionDecl 0x221509c4868 <line:332:1, line:333:54> line:332:5 invalid ec_GFp_simple_group_get_curve 'int (const int *, int *, int *, int *, int *)'
| |-ParmVarDecl 0x221509c45b0 <col:35, <invalid sloc>> col:51 invalid 'const int *'
| |-ParmVarDecl 0x221509c4630 <col:53, col:61> col:61 invalid p 'int *'
| |-ParmVarDecl 0x221509c46b0 <col:64, col:72> col:72 invalid a 'int *'
| |-ParmVarDecl 0x221509c4730 <line:333:35, col:43> col:43 invalid b 'int *'
| `-ParmVarDecl 0x221509c47b0 <col:46, <invalid sloc>> col:54 invalid 'int *'
|-FunctionDecl 0x221509c49e0 <line:334:1, col:52> col:5 invalid ec_GFp_simple_group_get_degree 'int (const int *)'
| `-ParmVarDecl 0x221509c4948 <col:36, <invalid sloc>> col:52 invalid 'const int *'
|-FunctionDecl 0x221509c4bc0 <line:335:1, col:70> col:5 invalid ec_GFp_simple_group_check_discriminant 'int (const int *, int *)'
| |-ParmVarDecl 0x221509c4aa0 <col:44, <invalid sloc>> col:60 invalid 'const int *'
| `-ParmVarDecl 0x221509c4b20 <col:62, <invalid sloc>> col:70 invalid 'int *'
|-FunctionDecl 0x221509c2d58 <line:336:1, col:40> col:5 invalid ec_GFp_simple_point_init 'int (int *)'
| `-ParmVarDecl 0x221509c2cc0 <col:30, <invalid sloc>> col:40 invalid 'int *'
|-FunctionDecl 0x221509c2ea8 <line:337:1, col:43> col:6 invalid ec_GFp_simple_point_finish 'void (int *)'
| `-ParmVarDecl 0x221509c2e18 <col:33, <invalid sloc>> col:43 invalid 'int *'
|-FunctionDecl 0x221509c2ff8 <line:338:1, col:49> col:6 invalid ec_GFp_simple_point_clear_finish 'void (int *)'
| `-ParmVarDecl 0x221509c2f68 <col:39, <invalid sloc>> col:49 invalid 'int *'
|-FunctionDecl 0x221509c31d8 <line:339:1, col:58> col:5 invalid ec_GFp_simple_point_copy 'int (int *, const int *)'
| |-ParmVarDecl 0x221509c30b8 <col:30, <invalid sloc>> col:40 invalid 'int *'
| `-ParmVarDecl 0x221509c3138 <col:42, <invalid sloc>> col:58 invalid 'const int *'
|-FunctionDecl 0x221509c33c0 <line:340:1, col:69> col:5 invalid ec_GFp_simple_point_set_to_infinity 'int (const int *, int *)'
| |-ParmVarDecl 0x221509c32a0 <col:41, <invalid sloc>> col:57 invalid 'const int *'
| `-ParmVarDecl 0x221509c3320 <col:59, <invalid sloc>> col:69 invalid 'int *'
|-FunctionDecl 0x221509c37c8 <line:341:1, line:344:76> line:341:5 invalid ec_GFp_simple_set_Jprojective_coordinates_GFp 'int (const int *, int *, const int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x221509c3488 <col:51, <invalid sloc>> col:67 invalid 'const int *'
| |-ParmVarDecl 0x221509c3508 <line:342:51, <invalid sloc>> col:61 invalid 'int *'
| |-ParmVarDecl 0x221509c3588 <col:63, col:77> col:77 invalid x 'const int *'
| |-ParmVarDecl 0x221509c3608 <line:343:51, col:65> col:65 invalid y 'const int *'
| |-ParmVarDecl 0x221509c3688 <line:344:51, col:65> col:65 invalid z 'const int *'
| `-ParmVarDecl 0x221509c3708 <col:68, <invalid sloc>> col:76 invalid 'int *'
|-FunctionDecl 0x221509c3bf0 <line:345:1, line:348:59> line:345:5 invalid ec_GFp_simple_get_Jprojective_coordinates_GFp 'int (const int *, const int *, int *, int *, int *, int *)'
| |-ParmVarDecl 0x221509c38b0 <col:51, <invalid sloc>> col:67 invalid 'const int *'
| |-ParmVarDecl 0x221509c3930 <line:346:51, <invalid sloc>> col:67 invalid 'const int *'
| |-ParmVarDecl 0x221509c39b0 <col:69, col:77> col:77 invalid x 'int *'
| |-ParmVarDecl 0x221509c3a30 <line:347:51, col:59> col:59 invalid y 'int *'
| |-ParmVarDecl 0x221509c3ab0 <col:62, col:70> col:70 invalid z 'int *'
| `-ParmVarDecl 0x221509c3b30 <line:348:51, <invalid sloc>> col:59 invalid 'int *'
|-FunctionDecl 0x221509bcf30 <line:349:1, line:351:73> line:349:5 invalid ec_GFp_simple_point_set_affine_coordinates 'int (const int *, int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x221509bcc78 <col:48, <invalid sloc>> col:64 invalid 'const int *'
| |-ParmVarDecl 0x221509bccf8 <col:66, <invalid sloc>> col:76 invalid 'int *'
| |-ParmVarDecl 0x221509bcd78 <line:350:48, col:62> col:62 invalid x 'const int *'
| |-ParmVarDecl 0x221509bcdf8 <line:351:48, col:62> col:62 invalid y 'const int *'
| `-ParmVarDecl 0x221509bce78 <col:65, <invalid sloc>> col:73 invalid 'int *'
|-FunctionDecl 0x221509bd2c8 <line:352:1, line:354:67> line:352:5 invalid ec_GFp_simple_point_get_affine_coordinates 'int (const int *, const int *, int *, int *, int *)'
| |-ParmVarDecl 0x221509bd010 <col:48, <invalid sloc>> col:64 invalid 'const int *'
| |-ParmVarDecl 0x221509bd090 <line:353:48, <invalid sloc>> col:64 invalid 'const int *'
| |-ParmVarDecl 0x221509bd110 <col:66, col:74> col:74 invalid x 'int *'
| |-ParmVarDecl 0x221509bd190 <line:354:48, col:56> col:56 invalid y 'int *'
| `-ParmVarDecl 0x221509bd210 <col:59, <invalid sloc>> col:67 invalid 'int *'
|-FunctionDecl 0x221509bd660 <line:355:1, line:357:54> line:355:5 invalid ec_GFp_simple_set_compressed_coordinates 'int (const int *, int *, const int *, int, int *)'
| |-ParmVarDecl 0x221509bd3a8 <col:46, <invalid sloc>> col:62 invalid 'const int *'
| |-ParmVarDecl 0x221509bd428 <col:64, <invalid sloc>> col:74 invalid 'int *'
| |-ParmVarDecl 0x221509bd4a8 <line:356:46, col:60> col:60 invalid x 'const int *'
| |-ParmVarDecl 0x221509bd528 <col:63, col:67> col:67 y_bit 'int'
| `-ParmVarDecl 0x221509bd5a8 <line:357:46, <invalid sloc>> col:54 invalid 'int *'
|-FunctionDecl 0x221509bda70 <line:358:1, line:360:72> line:358:8 invalid ec_GFp_simple_point2oct 'size_t (const int *, const int *, int, unsigned char *, size_t, int *)'
| |-ParmVarDecl 0x221509bd740 <col:32, <invalid sloc>> col:48 invalid 'const int *'
| |-ParmVarDecl 0x221509bd7c0 <col:50, <invalid sloc>> col:66 invalid 'const int *'
| |-ParmVarDecl 0x221509bd840 <line:359:32, col:56> col:56 invalid form 'int'
| |-ParmVarDecl 0x221509bd8c0 <line:360:32, col:47> col:47 buf 'unsigned char *'
| |-ParmVarDecl 0x221509bd938 <col:52, col:59> col:59 len 'size_t':'unsigned long long'
| `-ParmVarDecl 0x221509bd9b8 <col:64, <invalid sloc>> col:72 invalid 'int *'
|-FunctionDecl 0x221509c5ea0 <line:361:1, line:362:75> line:361:5 invalid ec_GFp_simple_oct2point 'int (const int *, int *, const unsigned char *, size_t, int *)'
| |-ParmVarDecl 0x221509bdb58 <col:29, <invalid sloc>> col:45 invalid 'const int *'
| |-ParmVarDecl 0x221509bdbd8 <col:47, <invalid sloc>> col:57 invalid 'int *'
| |-ParmVarDecl 0x221509c5cf0 <line:362:29, col:50> col:50 buf 'const unsigned char *'
| |-ParmVarDecl 0x221509c5d68 <col:55, col:62> col:62 len 'size_t':'unsigned long long'
| `-ParmVarDecl 0x221509c5de8 <col:67, <invalid sloc>> col:75 invalid 'int *'
|-FunctionDecl 0x221509c6238 <line:363:1, line:364:50> line:363:5 invalid ec_GFp_simple_add 'int (const int *, int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x221509c5f80 <col:23, <invalid sloc>> col:39 invalid 'const int *'
| |-ParmVarDecl 0x221509c6000 <col:41, col:51> col:51 invalid r 'int *'
| |-ParmVarDecl 0x221509c6080 <col:54, col:70> col:70 invalid a 'const int *'
| |-ParmVarDecl 0x221509c6100 <line:364:23, col:39> col:39 invalid b 'const int *'
| `-ParmVarDecl 0x221509c6180 <col:42, <invalid sloc>> col:50 invalid 'int *'
|-FunctionDecl 0x221509c6548 <line:365:1, line:366:31> line:365:5 invalid ec_GFp_simple_dbl 'int (const int *, int *, const int *, int *)'
| |-ParmVarDecl 0x221509c6318 <col:23, <invalid sloc>> col:39 invalid 'const int *'
| |-ParmVarDecl 0x221509c6398 <col:41, col:51> col:51 invalid r 'int *'
| |-ParmVarDecl 0x221509c6418 <col:54, col:70> col:70 invalid a 'const int *'
| `-ParmVarDecl 0x221509c6498 <line:366:23, <invalid sloc>> col:31 invalid 'int *'
|-FunctionDecl 0x221509c67c8 <line:367:1, col:64> col:5 invalid ec_GFp_simple_invert 'int (const int *, int *, int *)'
| |-ParmVarDecl 0x221509c6620 <col:26, <invalid sloc>> col:42 invalid 'const int *'
| |-ParmVarDecl 0x221509c66a0 <col:44, <invalid sloc>> col:54 invalid 'int *'
| `-ParmVarDecl 0x221509c6720 <col:56, <invalid sloc>> col:64 invalid 'int *'
|-FunctionDecl 0x221509c69b8 <line:368:1, col:68> col:5 invalid ec_GFp_simple_is_at_infinity 'int (const int *, const int *)'
| |-ParmVarDecl 0x221509c6898 <col:34, <invalid sloc>> col:50 invalid 'const int *'
| `-ParmVarDecl 0x221509c6918 <col:52, <invalid sloc>> col:68 invalid 'const int *'
|-FunctionDecl 0x221509c6c28 <line:369:1, col:75> col:5 invalid ec_GFp_simple_is_on_curve 'int (const int *, const int *, int *)'
| |-ParmVarDecl 0x221509c6a80 <col:31, <invalid sloc>> col:47 invalid 'const int *'
| |-ParmVarDecl 0x221509c6b00 <col:49, <invalid sloc>> col:65 invalid 'const int *'
| `-ParmVarDecl 0x221509c6b80 <col:67, <invalid sloc>> col:75 invalid 'int *'
|-FunctionDecl 0x221509c6f48 <line:370:1, line:371:31> line:370:5 invalid ec_GFp_simple_cmp 'int (const int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x221509c6d18 <col:23, <invalid sloc>> col:39 invalid 'const int *'
| |-ParmVarDecl 0x221509c6d98 <col:41, col:57> col:57 invalid a 'const int *'
| |-ParmVarDecl 0x221509c6e18 <col:60, col:76> col:76 invalid b 'const int *'
| `-ParmVarDecl 0x221509c6e98 <line:371:23, <invalid sloc>> col:31 invalid 'int *'
|-FunctionDecl 0x221509c71c8 <line:372:1, col:69> col:5 invalid ec_GFp_simple_make_affine 'int (const int *, int *, int *)'
| |-ParmVarDecl 0x221509c7020 <col:31, <invalid sloc>> col:47 invalid 'const int *'
| |-ParmVarDecl 0x221509c70a0 <col:49, <invalid sloc>> col:59 invalid 'int *'
| `-ParmVarDecl 0x221509c7120 <col:61, <invalid sloc>> col:69 invalid 'int *'
|-FunctionDecl 0x221509c74d0 <line:373:1, line:374:60> line:373:5 invalid ec_GFp_simple_points_make_affine 'int (const int *, size_t, int **, int *)'
| |-ParmVarDecl 0x221509c7298 <col:38, <invalid sloc>> col:54 invalid 'const int *'
| |-ParmVarDecl 0x221509c7310 <col:56, col:63> col:63 num 'size_t':'unsigned long long'
| |-ParmVarDecl 0x221509c73a0 <line:374:38, <invalid sloc>> col:48 invalid 'int **':'int **'
| `-ParmVarDecl 0x221509c7420 <col:52, <invalid sloc>> col:60 invalid 'int *'
|-FunctionDecl 0x221509c7860 <line:375:1, line:376:54> line:375:5 invalid ec_GFp_simple_field_mul 'int (const int *, int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x221509c75a8 <col:29, <invalid sloc>> col:45 invalid 'const int *'
| |-ParmVarDecl 0x221509c7628 <col:47, col:55> col:55 invalid r 'int *'
| |-ParmVarDecl 0x221509c76a8 <col:58, col:72> col:72 invalid a 'const int *'
| |-ParmVarDecl 0x221509c7728 <line:376:29, col:43> col:43 invalid b 'const int *'
| `-ParmVarDecl 0x221509c77a8 <col:46, <invalid sloc>> col:54 invalid 'int *'
|-FunctionDecl 0x221509c7b70 <line:377:1, line:378:37> line:377:5 invalid ec_GFp_simple_field_sqr 'int (const int *, int *, const int *, int *)'
| |-ParmVarDecl 0x221509c7940 <col:29, <invalid sloc>> col:45 invalid 'const int *'
| |-ParmVarDecl 0x221509c79c0 <col:47, col:55> col:55 invalid r 'int *'
| |-ParmVarDecl 0x221509c7a40 <col:58, col:72> col:72 invalid a 'const int *'
| `-ParmVarDecl 0x221509c7ac0 <line:378:29, <invalid sloc>> col:37 invalid 'int *'
|-FunctionDecl 0x221509c4e08 <line:379:1, line:380:48> line:379:5 invalid ec_GFp_simple_blind_coordinates 'int (const int *, int *, int *)'
| |-ParmVarDecl 0x221509c7c48 <col:37, col:53> col:53 invalid group 'const int *'
| |-ParmVarDecl 0x221509c4ce0 <col:60, col:70> col:70 invalid p 'int *'
| `-ParmVarDecl 0x221509c4d60 <line:380:37, col:45> col:45 invalid ctx 'int *'
|-FunctionDecl 0x221509c4f70 <line:383:1, col:38> col:5 invalid ec_GFp_mont_group_init 'int (int *)'
| `-ParmVarDecl 0x221509c4ed8 <col:28, <invalid sloc>> col:38 invalid 'int *'
|-FunctionDecl 0x221509c52e8 <line:384:1, line:385:58> line:384:5 invalid ec_GFp_mont_group_set_curve 'int (int *, const int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x221509c5030 <col:33, <invalid sloc>> col:43 invalid 'int *'
| |-ParmVarDecl 0x221509c50b0 <col:45, col:59> col:59 invalid p 'const int *'
| |-ParmVarDecl 0x221509c5130 <col:62, col:76> col:76 invalid a 'const int *'
| |-ParmVarDecl 0x221509c51b0 <line:385:33, col:47> col:47 invalid b 'const int *'
| `-ParmVarDecl 0x221509c5230 <col:50, <invalid sloc>> col:58 invalid 'int *'
|-FunctionDecl 0x221509c5458 <line:386:1, col:41> col:6 invalid ec_GFp_mont_group_finish 'void (int *)'
| `-ParmVarDecl 0x221509c53c8 <col:31, <invalid sloc>> col:41 invalid 'int *'
|-FunctionDecl 0x221509c55a8 <line:387:1, col:47> col:6 invalid ec_GFp_mont_group_clear_finish 'void (int *)'
| `-ParmVarDecl 0x221509c5518 <col:37, <invalid sloc>> col:47 invalid 'int *'
|-FunctionDecl 0x221509c5788 <line:388:1, col:56> col:5 invalid ec_GFp_mont_group_copy 'int (int *, const int *)'
| |-ParmVarDecl 0x221509c5668 <col:28, <invalid sloc>> col:38 invalid 'int *'
| `-ParmVarDecl 0x221509c56e8 <col:40, <invalid sloc>> col:56 invalid 'const int *'
|-FunctionDecl 0x221509c5b08 <line:389:1, line:390:52> line:389:5 invalid ec_GFp_mont_field_mul 'int (const int *, int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x221509c5850 <col:27, <invalid sloc>> col:43 invalid 'const int *'
| |-ParmVarDecl 0x221509c58d0 <col:45, col:53> col:53 invalid r 'int *'
| |-ParmVarDecl 0x221509c5950 <col:56, col:70> col:70 invalid a 'const int *'
| |-ParmVarDecl 0x221509c59d0 <line:390:27, col:41> col:41 invalid b 'const int *'
| `-ParmVarDecl 0x221509c5a50 <col:44, <invalid sloc>> col:52 invalid 'int *'
|-FunctionDecl 0x221509c0de8 <line:391:1, line:392:35> line:391:5 invalid ec_GFp_mont_field_sqr 'int (const int *, int *, const int *, int *)'
| |-ParmVarDecl 0x221509c5be8 <col:27, <invalid sloc>> col:43 invalid 'const int *'
| |-ParmVarDecl 0x221509c5c68 <col:45, col:53> col:53 invalid r 'int *'
| |-ParmVarDecl 0x221509c0cb8 <col:56, col:70> col:70 invalid a 'const int *'
| `-ParmVarDecl 0x221509c0d38 <line:392:27, <invalid sloc>> col:35 invalid 'int *'
|-FunctionDecl 0x221509c10f0 <line:393:1, line:394:38> line:393:5 invalid ec_GFp_mont_field_encode 'int (const int *, int *, const int *, int *)'
| |-ParmVarDecl 0x221509c0ec0 <col:30, <invalid sloc>> col:46 invalid 'const int *'
| |-ParmVarDecl 0x221509c0f40 <col:48, col:56> col:56 invalid r 'int *'
| |-ParmVarDecl 0x221509c0fc0 <col:59, col:73> col:73 invalid a 'const int *'
| `-ParmVarDecl 0x221509c1040 <line:394:30, <invalid sloc>> col:38 invalid 'int *'
|-FunctionDecl 0x221509c13f8 <line:395:1, line:396:38> line:395:5 invalid ec_GFp_mont_field_decode 'int (const int *, int *, const int *, int *)'
| |-ParmVarDecl 0x221509c11c8 <col:30, <invalid sloc>> col:46 invalid 'const int *'
| |-ParmVarDecl 0x221509c1248 <col:48, col:56> col:56 invalid r 'int *'
| |-ParmVarDecl 0x221509c12c8 <col:59, col:73> col:73 invalid a 'const int *'
| `-ParmVarDecl 0x221509c1348 <line:396:30, <invalid sloc>> col:38 invalid 'int *'
|-FunctionDecl 0x221509c1678 <line:397:1, col:71> col:5 invalid ec_GFp_mont_field_set_to_one 'int (const int *, int *, int *)'
| |-ParmVarDecl 0x221509c14d0 <col:34, <invalid sloc>> col:50 invalid 'const int *'
| |-ParmVarDecl 0x221509c1550 <col:52, col:60> col:60 invalid r 'int *'
| `-ParmVarDecl 0x221509c15d0 <col:63, <invalid sloc>> col:71 invalid 'int *'
|-FunctionDecl 0x221509c1868 <line:400:1, col:63> col:5 invalid ec_GFp_nist_group_copy 'int (int *, const int *)'
| |-ParmVarDecl 0x221509c1748 <col:28, col:38> col:38 invalid dest 'int *'
| `-ParmVarDecl 0x221509c17c8 <col:44, col:60> col:60 invalid src 'const int *'
|-FunctionDecl 0x221509c1be8 <line:401:1, line:402:58> line:401:5 invalid ec_GFp_nist_group_set_curve 'int (int *, const int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x221509c1930 <col:33, <invalid sloc>> col:43 invalid 'int *'
| |-ParmVarDecl 0x221509c19b0 <col:45, col:59> col:59 invalid p 'const int *'
| |-ParmVarDecl 0x221509c1a30 <col:62, col:76> col:76 invalid a 'const int *'
| |-ParmVarDecl 0x221509c1ab0 <line:402:33, col:47> col:47 invalid b 'const int *'
| `-ParmVarDecl 0x221509c1b30 <col:50, <invalid sloc>> col:58 invalid 'int *'
|-FunctionDecl 0x221509cc048 <line:403:1, line:404:52> line:403:5 invalid ec_GFp_nist_field_mul 'int (const int *, int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x221509cbd90 <col:27, <invalid sloc>> col:43 invalid 'const int *'
| |-ParmVarDecl 0x221509cbe10 <col:45, col:53> col:53 invalid r 'int *'
| |-ParmVarDecl 0x221509cbe90 <col:56, col:70> col:70 invalid a 'const int *'
| |-ParmVarDecl 0x221509cbf10 <line:404:27, col:41> col:41 invalid b 'const int *'
| `-ParmVarDecl 0x221509cbf90 <col:44, <invalid sloc>> col:52 invalid 'int *'
|-FunctionDecl 0x221509cc358 <line:405:1, line:406:35> line:405:5 invalid ec_GFp_nist_field_sqr 'int (const int *, int *, const int *, int *)'
| |-ParmVarDecl 0x221509cc128 <col:27, <invalid sloc>> col:43 invalid 'const int *'
| |-ParmVarDecl 0x221509cc1a8 <col:45, col:53> col:53 invalid r 'int *'
| |-ParmVarDecl 0x221509cc228 <col:56, col:70> col:70 invalid a 'const int *'
| `-ParmVarDecl 0x221509cc2a8 <line:406:27, <invalid sloc>> col:35 invalid 'int *'
|-FunctionDecl 0x221509cc4c8 <line:409:1, col:41> col:5 invalid ec_GF2m_simple_group_init 'int (int *)'
| `-ParmVarDecl 0x221509cc430 <col:31, <invalid sloc>> col:41 invalid 'int *'
|-FunctionDecl 0x221509cc618 <line:410:1, col:44> col:6 invalid ec_GF2m_simple_group_finish 'void (int *)'
| `-ParmVarDecl 0x221509cc588 <col:34, <invalid sloc>> col:44 invalid 'int *'
|-FunctionDecl 0x221509cc768 <line:411:1, col:50> col:6 invalid ec_GF2m_simple_group_clear_finish 'void (int *)'
| `-ParmVarDecl 0x221509cc6d8 <col:40, <invalid sloc>> col:50 invalid 'int *'
|-FunctionDecl 0x221509cc948 <line:412:1, col:59> col:5 invalid ec_GF2m_simple_group_copy 'int (int *, const int *)'
| |-ParmVarDecl 0x221509cc828 <col:31, <invalid sloc>> col:41 invalid 'int *'
| `-ParmVarDecl 0x221509cc8a8 <col:43, <invalid sloc>> col:59 invalid 'const int *'
|-FunctionDecl 0x221509ccd60 <line:413:1, line:415:44> line:413:5 invalid ec_GF2m_simple_group_set_curve 'int (int *, const int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x221509cca10 <col:36, <invalid sloc>> col:46 invalid 'int *'
| |-ParmVarDecl 0x221509cca90 <col:48, col:62> col:62 invalid p 'const int *'
| |-ParmVarDecl 0x221509ccb10 <line:414:36, col:50> col:50 invalid a 'const int *'
| |-ParmVarDecl 0x221509ccb90 <col:53, col:67> col:67 invalid b 'const int *'
| `-ParmVarDecl 0x221509ccc10 <line:415:36, <invalid sloc>> col:44 invalid 'int *'
|-FunctionDecl 0x221509cd0f8 <line:416:1, line:417:55> line:416:5 invalid ec_GF2m_simple_group_get_curve 'int (const int *, int *, int *, int *, int *)'
| |-ParmVarDecl 0x221509cce40 <col:36, <invalid sloc>> col:52 invalid 'const int *'
| |-ParmVarDecl 0x221509ccec0 <col:54, col:62> col:62 invalid p 'int *'
| |-ParmVarDecl 0x221509ccf40 <col:65, col:73> col:73 invalid a 'int *'
| |-ParmVarDecl 0x221509ccfc0 <line:417:36, col:44> col:44 invalid b 'int *'
| `-ParmVarDecl 0x221509cd040 <col:47, <invalid sloc>> col:55 invalid 'int *'
|-FunctionDecl 0x221509cd270 <line:418:1, col:53> col:5 invalid ec_GF2m_simple_group_get_degree 'int (const int *)'
| `-ParmVarDecl 0x221509cd1d8 <col:37, <invalid sloc>> col:53 invalid 'const int *'
|-FunctionDecl 0x221509cd450 <line:419:1, col:71> col:5 invalid ec_GF2m_simple_group_check_discriminant 'int (const int *, int *)'
| |-ParmVarDecl 0x221509cd330 <col:45, <invalid sloc>> col:61 invalid 'const int *'
| `-ParmVarDecl 0x221509cd3b0 <col:63, <invalid sloc>> col:71 invalid 'int *'
|-FunctionDecl 0x221509cd5b0 <line:420:1, col:41> col:5 invalid ec_GF2m_simple_point_init 'int (int *)'
| `-ParmVarDecl 0x221509cd518 <col:31, <invalid sloc>> col:41 invalid 'int *'
|-FunctionDecl 0x221509cd700 <line:421:1, col:44> col:6 invalid ec_GF2m_simple_point_finish 'void (int *)'
| `-ParmVarDecl 0x221509cd670 <col:34, <invalid sloc>> col:44 invalid 'int *'
|-FunctionDecl 0x221509cd850 <line:422:1, col:50> col:6 invalid ec_GF2m_simple_point_clear_finish 'void (int *)'
| `-ParmVarDecl 0x221509cd7c0 <col:40, <invalid sloc>> col:50 invalid 'int *'
|-FunctionDecl 0x221509cda30 <line:423:1, col:59> col:5 invalid ec_GF2m_simple_point_copy 'int (int *, const int *)'
| |-ParmVarDecl 0x221509cd910 <col:31, <invalid sloc>> col:41 invalid 'int *'
| `-ParmVarDecl 0x221509cd990 <col:43, <invalid sloc>> col:59 invalid 'const int *'
|-FunctionDecl 0x221509cdc18 <line:424:1, col:70> col:5 invalid ec_GF2m_simple_point_set_to_infinity 'int (const int *, int *)'
| |-ParmVarDecl 0x221509cdaf8 <col:42, <invalid sloc>> col:58 invalid 'const int *'
| `-ParmVarDecl 0x221509cdb78 <col:60, <invalid sloc>> col:70 invalid 'int *'
|-FunctionDecl 0x221509cdfa8 <line:425:1, line:427:74> line:425:5 invalid ec_GF2m_simple_point_set_affine_coordinates 'int (const int *, int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x221509cdce0 <col:49, <invalid sloc>> col:65 invalid 'const int *'
| |-ParmVarDecl 0x221509cdd70 <col:67, <invalid sloc>> col:77 invalid 'int *'
| |-ParmVarDecl 0x221509cddf0 <line:426:49, col:63> col:63 invalid x 'const int *'
| |-ParmVarDecl 0x221509cde70 <line:427:49, col:63> col:63 invalid y 'const int *'
| `-ParmVarDecl 0x221509cdef0 <col:66, <invalid sloc>> col:74 invalid 'int *'
|-FunctionDecl 0x221509ce340 <line:428:1, line:430:68> line:428:5 invalid ec_GF2m_simple_point_get_affine_coordinates 'int (const int *, const int *, int *, int *, int *)'
| |-ParmVarDecl 0x221509ce088 <col:49, <invalid sloc>> col:65 invalid 'const int *'
| |-ParmVarDecl 0x221509ce108 <line:429:49, <invalid sloc>> col:65 invalid 'const int *'
| |-ParmVarDecl 0x221509ce188 <col:67, col:75> col:75 invalid x 'int *'
| |-ParmVarDecl 0x221509ce208 <line:430:49, col:57> col:57 invalid y 'int *'
| `-ParmVarDecl 0x221509ce288 <col:60, <invalid sloc>> col:68 invalid 'int *'
|-FunctionDecl 0x221509ce6d8 <line:431:1, line:433:55> line:431:5 invalid ec_GF2m_simple_set_compressed_coordinates 'int (const int *, int *, const int *, int, int *)'
| |-ParmVarDecl 0x221509ce420 <col:47, <invalid sloc>> col:63 invalid 'const int *'
| |-ParmVarDecl 0x221509ce4a0 <col:65, <invalid sloc>> col:75 invalid 'int *'
| |-ParmVarDecl 0x221509ce520 <line:432:47, col:61> col:61 invalid x 'const int *'
| |-ParmVarDecl 0x221509ce5a0 <col:64, col:68> col:68 y_bit 'int'
| `-ParmVarDecl 0x221509ce620 <line:433:47, <invalid sloc>> col:55 invalid 'int *'
|-FunctionDecl 0x221509ceae8 <line:434:1, line:436:73> line:434:8 invalid ec_GF2m_simple_point2oct 'size_t (const int *, const int *, int, unsigned char *, size_t, int *)'
| |-ParmVarDecl 0x221509ce7b8 <col:33, <invalid sloc>> col:49 invalid 'const int *'
| |-ParmVarDecl 0x221509ce838 <col:51, <invalid sloc>> col:67 invalid 'const int *'
| |-ParmVarDecl 0x221509ce8b8 <line:435:33, col:57> col:57 invalid form 'int'
| |-ParmVarDecl 0x221509ce938 <line:436:33, col:48> col:48 buf 'unsigned char *'
| |-ParmVarDecl 0x221509ce9b0 <col:53, col:60> col:60 len 'size_t':'unsigned long long'
| `-ParmVarDecl 0x221509cea30 <col:65, <invalid sloc>> col:73 invalid 'int *'
|-FunctionDecl 0x221509c8e58 <line:437:1, line:438:76> line:437:5 invalid ec_GF2m_simple_oct2point 'int (const int *, int *, const unsigned char *, size_t, int *)'
| |-ParmVarDecl 0x221509cebd0 <col:30, <invalid sloc>> col:46 invalid 'const int *'
| |-ParmVarDecl 0x221509cec50 <col:48, <invalid sloc>> col:58 invalid 'int *'
| |-ParmVarDecl 0x221509cecd0 <line:438:30, col:51> col:51 buf 'const unsigned char *'
| |-ParmVarDecl 0x221509c8d20 <col:56, col:63> col:63 len 'size_t':'unsigned long long'
| `-ParmVarDecl 0x221509c8da0 <col:68, <invalid sloc>> col:76 invalid 'int *'
|-FunctionDecl 0x221509c91f0 <line:439:1, line:440:51> line:439:5 invalid ec_GF2m_simple_add 'int (const int *, int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x221509c8f38 <col:24, <invalid sloc>> col:40 invalid 'const int *'
| |-ParmVarDecl 0x221509c8fb8 <col:42, col:52> col:52 invalid r 'int *'
| |-ParmVarDecl 0x221509c9038 <col:55, col:71> col:71 invalid a 'const int *'
| |-ParmVarDecl 0x221509c90b8 <line:440:24, col:40> col:40 invalid b 'const int *'
| `-ParmVarDecl 0x221509c9138 <col:43, <invalid sloc>> col:51 invalid 'int *'
|-FunctionDecl 0x221509c9500 <line:441:1, line:442:32> line:441:5 invalid ec_GF2m_simple_dbl 'int (const int *, int *, const int *, int *)'
| |-ParmVarDecl 0x221509c92d0 <col:24, <invalid sloc>> col:40 invalid 'const int *'
| |-ParmVarDecl 0x221509c9350 <col:42, col:52> col:52 invalid r 'int *'
| |-ParmVarDecl 0x221509c93d0 <col:55, col:71> col:71 invalid a 'const int *'
| `-ParmVarDecl 0x221509c9450 <line:442:24, <invalid sloc>> col:32 invalid 'int *'
|-FunctionDecl 0x221509c9780 <line:443:1, col:65> col:5 invalid ec_GF2m_simple_invert 'int (const int *, int *, int *)'
| |-ParmVarDecl 0x221509c95d8 <col:27, <invalid sloc>> col:43 invalid 'const int *'
| |-ParmVarDecl 0x221509c9658 <col:45, <invalid sloc>> col:55 invalid 'int *'
| `-ParmVarDecl 0x221509c96d8 <col:57, <invalid sloc>> col:65 invalid 'int *'
|-FunctionDecl 0x221509c9970 <line:444:1, col:69> col:5 invalid ec_GF2m_simple_is_at_infinity 'int (const int *, const int *)'
| |-ParmVarDecl 0x221509c9850 <col:35, <invalid sloc>> col:51 invalid 'const int *'
| `-ParmVarDecl 0x221509c98d0 <col:53, <invalid sloc>> col:69 invalid 'const int *'
|-FunctionDecl 0x221509c9be0 <line:445:1, col:76> col:5 invalid ec_GF2m_simple_is_on_curve 'int (const int *, const int *, int *)'
| |-ParmVarDecl 0x221509c9a38 <col:32, <invalid sloc>> col:48 invalid 'const int *'
| |-ParmVarDecl 0x221509c9ab8 <col:50, <invalid sloc>> col:66 invalid 'const int *'
| `-ParmVarDecl 0x221509c9b38 <col:68, <invalid sloc>> col:76 invalid 'int *'
|-FunctionDecl 0x221509cef48 <line:446:1, line:447:32> line:446:5 invalid ec_GF2m_simple_cmp 'int (const int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x221509c9cb0 <col:24, <invalid sloc>> col:40 invalid 'const int *'
| |-ParmVarDecl 0x221509ced98 <col:42, col:58> col:58 invalid a 'const int *'
| |-ParmVarDecl 0x221509cee18 <col:61, col:77> col:77 invalid b 'const int *'
| `-ParmVarDecl 0x221509cee98 <line:447:24, <invalid sloc>> col:32 invalid 'int *'
|-FunctionDecl 0x221509cf1c8 <line:448:1, col:70> col:5 invalid ec_GF2m_simple_make_affine 'int (const int *, int *, int *)'
| |-ParmVarDecl 0x221509cf020 <col:32, <invalid sloc>> col:48 invalid 'const int *'
| |-ParmVarDecl 0x221509cf0a0 <col:50, <invalid sloc>> col:60 invalid 'int *'
| `-ParmVarDecl 0x221509cf120 <col:62, <invalid sloc>> col:70 invalid 'int *'
|-FunctionDecl 0x221509cf4d0 <line:449:1, line:450:61> line:449:5 invalid ec_GF2m_simple_points_make_affine 'int (const int *, size_t, int **, int *)'
| |-ParmVarDecl 0x221509cf298 <col:39, <invalid sloc>> col:55 invalid 'const int *'
| |-ParmVarDecl 0x221509cf310 <col:57, col:64> col:64 num 'size_t':'unsigned long long'
| |-ParmVarDecl 0x221509cf3a0 <line:450:39, <invalid sloc>> col:49 invalid 'int **':'int **'
| `-ParmVarDecl 0x221509cf420 <col:53, <invalid sloc>> col:61 invalid 'int *'
|-FunctionDecl 0x221509cf860 <line:451:1, line:452:55> line:451:5 invalid ec_GF2m_simple_field_mul 'int (const int *, int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x221509cf5a8 <col:30, <invalid sloc>> col:46 invalid 'const int *'
| |-ParmVarDecl 0x221509cf628 <col:48, col:56> col:56 invalid r 'int *'
| |-ParmVarDecl 0x221509cf6a8 <col:59, col:73> col:73 invalid a 'const int *'
| |-ParmVarDecl 0x221509cf728 <line:452:30, col:44> col:44 invalid b 'const int *'
| `-ParmVarDecl 0x221509cf7a8 <col:47, <invalid sloc>> col:55 invalid 'int *'
|-FunctionDecl 0x221509cfb70 <line:453:1, line:454:38> line:453:5 invalid ec_GF2m_simple_field_sqr 'int (const int *, int *, const int *, int *)'
| |-ParmVarDecl 0x221509cf940 <col:30, <invalid sloc>> col:46 invalid 'const int *'
| |-ParmVarDecl 0x221509cf9c0 <col:48, col:56> col:56 invalid r 'int *'
| |-ParmVarDecl 0x221509cfa40 <col:59, col:73> col:73 invalid a 'const int *'
| `-ParmVarDecl 0x221509cfac0 <line:454:30, <invalid sloc>> col:38 invalid 'int *'
|-FunctionDecl 0x221509cff48 <line:455:1, line:456:55> line:455:5 invalid ec_GF2m_simple_field_div 'int (const int *, int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x221509cfc48 <col:30, <invalid sloc>> col:46 invalid 'const int *'
| |-ParmVarDecl 0x221509cfcc8 <col:48, col:56> col:56 invalid r 'int *'
| |-ParmVarDecl 0x221509cfd90 <col:59, col:73> col:73 invalid a 'const int *'
| |-ParmVarDecl 0x221509cfe10 <line:456:30, col:44> col:44 invalid b 'const int *'
| `-ParmVarDecl 0x221509cfe90 <col:47, <invalid sloc>> col:55 invalid 'int *'
|-FunctionDecl 0x221509d0408 <line:459:1, line:462:32> line:459:5 invalid ec_GF2m_simple_mul 'int (const int *, int *, const int *, size_t, const int **, const int **, int *)'
| |-ParmVarDecl 0x221509d0028 <col:24, col:40> col:40 invalid group 'const int *'
| |-ParmVarDecl 0x221509d00a8 <col:47, col:57> col:57 invalid r 'int *'
| |-ParmVarDecl 0x221509d0128 <line:460:24, col:38> col:38 invalid scalar 'const int *'
| |-ParmVarDecl 0x221509d01a0 <col:46, col:53> col:53 num 'size_t':'unsigned long long'
| |-ParmVarDecl 0x221509d0230 <line:461:24, <invalid sloc>> col:40 invalid points 'const int **':'const int **'
| |-ParmVarDecl 0x221509d02c0 <col:50, <invalid sloc>> col:64 invalid scalars 'const int **':'const int **'
| `-ParmVarDecl 0x221509d0340 <line:462:24, <invalid sloc>> col:32 invalid 'int *'
|-FunctionDecl 0x221509d0618 <line:463:1, col:57> col:5 invalid ec_GF2m_precompute_mult 'int (int *, int *)'
| |-ParmVarDecl 0x221509d04f8 <col:29, col:39> col:39 invalid group 'int *'
| `-ParmVarDecl 0x221509d0578 <col:46, col:54> col:54 invalid ctx 'int *'
|-FunctionDecl 0x221509d0778 <line:464:1, col:55> col:5 invalid ec_GF2m_have_precompute_mult 'int (const int *)'
| `-ParmVarDecl 0x221509d06e0 <col:34, col:50> col:50 invalid group 'const int *'
|-FunctionDecl 0x221509d08d0 <line:468:1, col:47> col:5 invalid ec_GFp_nistp224_group_init 'int (int *)'
| `-ParmVarDecl 0x221509d0838 <col:32, col:42> col:42 invalid group 'int *'
|-FunctionDecl 0x221509d0c48 <line:469:1, line:471:45> line:469:5 invalid ec_GFp_nistp224_group_set_curve 'int (int *, const int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x221509d0990 <col:37, col:47> col:47 invalid group 'int *'
| |-ParmVarDecl 0x221509d0a10 <col:54, col:68> col:68 invalid p 'const int *'
| |-ParmVarDecl 0x221509d0a90 <line:470:37, col:51> col:51 invalid a 'const int *'
| |-ParmVarDecl 0x221509d0b10 <col:54, col:68> col:68 invalid n 'const int *'
| `-ParmVarDecl 0x221509d0b90 <line:471:37, <invalid sloc>> col:45 invalid 'int *'
|-FunctionDecl 0x221509d0ff0 <line:472:1, line:475:61> line:472:5 invalid ec_GFp_nistp224_point_get_affine_coordinates 'int (const int *, const int *, int *, int *, int *)'
| |-ParmVarDecl 0x221509d0d28 <col:50, col:66> col:66 invalid group 'const int *'
| |-ParmVarDecl 0x221509d0db8 <line:473:50, col:66> col:66 invalid point 'const int *'
| |-ParmVarDecl 0x221509d0e38 <line:474:50, col:58> col:58 invalid x 'int *'
| |-ParmVarDecl 0x221509d0eb8 <col:61, col:69> col:69 invalid y 'int *'
| `-ParmVarDecl 0x221509d0f38 <line:475:50, col:58> col:58 invalid ctx 'int *'
|-FunctionDecl 0x221509d14b0 <line:476:1, line:479:33> line:476:5 invalid ec_GFp_nistp224_mul 'int (const int *, int *, const int *, size_t, const int **, const int **, int *)'
| |-ParmVarDecl 0x221509d10d0 <col:25, col:41> col:41 invalid group 'const int *'
| |-ParmVarDecl 0x221509d1150 <col:48, col:58> col:58 invalid r 'int *'
| |-ParmVarDecl 0x221509d11d0 <line:477:25, col:39> col:39 invalid scalar 'const int *'
| |-ParmVarDecl 0x221509d1248 <col:47, col:54> col:54 num 'size_t':'unsigned long long'
| |-ParmVarDecl 0x221509d12d8 <line:478:25, <invalid sloc>> col:41 invalid points 'const int **':'const int **'
| |-ParmVarDecl 0x221509d1368 <col:51, <invalid sloc>> col:65 invalid scalars 'const int **':'const int **'
| `-ParmVarDecl 0x221509d13e8 <line:479:25, <invalid sloc>> col:33 invalid 'int *'
|-FunctionDecl 0x221509d1980 <line:480:1, line:483:68> line:480:5 invalid ec_GFp_nistp224_points_mul 'int (const int *, int *, const int *, size_t, const int **, const int **, int *)'
| |-ParmVarDecl 0x221509d15a0 <col:32, col:48> col:48 invalid group 'const int *'
| |-ParmVarDecl 0x221509d1620 <col:55, col:65> col:65 invalid r 'int *'
| |-ParmVarDecl 0x221509d16a0 <line:481:32, col:46> col:46 invalid scalar 'const int *'
| |-ParmVarDecl 0x221509d1718 <col:54, col:61> col:61 num 'size_t':'unsigned long long'
| |-ParmVarDecl 0x221509d17a8 <line:482:32, <invalid sloc>> col:48 invalid points 'const int **':'const int **'
| |-ParmVarDecl 0x221509d1838 <line:483:32, <invalid sloc>> col:46 invalid scalars 'const int **':'const int **'
| `-ParmVarDecl 0x221509d18b8 <col:57, col:65> col:65 invalid ctx 'int *'
|-FunctionDecl 0x221509d1b90 <line:484:1, col:65> col:5 invalid ec_GFp_nistp224_precompute_mult 'int (int *, int *)'
| |-ParmVarDecl 0x221509d1a70 <col:37, col:47> col:47 invalid group 'int *'
| `-ParmVarDecl 0x221509d1af0 <col:54, col:62> col:62 invalid ctx 'int *'
|-FunctionDecl 0x221509d1cf0 <line:485:1, col:63> col:5 invalid ec_GFp_nistp224_have_precompute_mult 'int (const int *)'
| `-ParmVarDecl 0x221509d1c58 <col:42, col:58> col:58 invalid group 'const int *'
|-FunctionDecl 0x221509c9de0 <line:488:1, col:47> col:5 invalid ec_GFp_nistp256_group_init 'int (int *)'
| `-ParmVarDecl 0x221509c9d48 <col:32, col:42> col:42 invalid group 'int *'
|-FunctionDecl 0x221509ca158 <line:489:1, line:491:45> line:489:5 invalid ec_GFp_nistp256_group_set_curve 'int (int *, const int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x221509c9ea0 <col:37, col:47> col:47 invalid group 'int *'
| |-ParmVarDecl 0x221509c9f20 <col:54, col:68> col:68 invalid p 'const int *'
| |-ParmVarDecl 0x221509c9fa0 <line:490:37, col:51> col:51 invalid a 'const int *'
| |-ParmVarDecl 0x221509ca020 <col:54, col:68> col:68 invalid n 'const int *'
| `-ParmVarDecl 0x221509ca0a0 <line:491:37, <invalid sloc>> col:45 invalid 'int *'
|-FunctionDecl 0x221509ca4f0 <line:492:1, line:495:61> line:492:5 invalid ec_GFp_nistp256_point_get_affine_coordinates 'int (const int *, const int *, int *, int *, int *)'
| |-ParmVarDecl 0x221509ca238 <col:50, col:66> col:66 invalid group 'const int *'
| |-ParmVarDecl 0x221509ca2b8 <line:493:50, col:66> col:66 invalid point 'const int *'
| |-ParmVarDecl 0x221509ca338 <line:494:50, col:58> col:58 invalid x 'int *'
| |-ParmVarDecl 0x221509ca3b8 <col:61, col:69> col:69 invalid y 'int *'
| `-ParmVarDecl 0x221509ca438 <line:495:50, col:58> col:58 invalid ctx 'int *'
|-FunctionDecl 0x221509ca9b0 <line:496:1, line:499:33> line:496:5 invalid ec_GFp_nistp256_mul 'int (const int *, int *, const int *, size_t, const int **, const int **, int *)'
| |-ParmVarDecl 0x221509ca5d0 <col:25, col:41> col:41 invalid group 'const int *'
| |-ParmVarDecl 0x221509ca650 <col:48, col:58> col:58 invalid r 'int *'
| |-ParmVarDecl 0x221509ca6d0 <line:497:25, col:39> col:39 invalid scalar 'const int *'
| |-ParmVarDecl 0x221509ca748 <col:47, col:54> col:54 num 'size_t':'unsigned long long'
| |-ParmVarDecl 0x221509ca7d8 <line:498:25, <invalid sloc>> col:41 invalid points 'const int **':'const int **'
| |-ParmVarDecl 0x221509ca868 <col:51, <invalid sloc>> col:65 invalid scalars 'const int **':'const int **'
| `-ParmVarDecl 0x221509ca8e8 <line:499:25, <invalid sloc>> col:33 invalid 'int *'
|-FunctionDecl 0x221509d1f20 <line:500:1, line:503:68> line:500:5 invalid ec_GFp_nistp256_points_mul 'int (const int *, int *, const int *, size_t, const int **, const int **, int *)'
| |-ParmVarDecl 0x221509caaa0 <col:32, col:48> col:48 invalid group 'const int *'
| |-ParmVarDecl 0x221509cab20 <col:55, col:65> col:65 invalid r 'int *'
| |-ParmVarDecl 0x221509caba0 <line:501:32, col:46> col:46 invalid scalar 'const int *'
| |-ParmVarDecl 0x221509cac18 <col:54, col:61> col:61 num 'size_t':'unsigned long long'
| |-ParmVarDecl 0x221509caca8 <line:502:32, <invalid sloc>> col:48 invalid points 'const int **':'const int **'
| |-ParmVarDecl 0x221509d1dd8 <line:503:32, <invalid sloc>> col:46 invalid scalars 'const int **':'const int **'
| `-ParmVarDecl 0x221509d1e58 <col:57, col:65> col:65 invalid ctx 'int *'
|-FunctionDecl 0x221509d2130 <line:504:1, col:65> col:5 invalid ec_GFp_nistp256_precompute_mult 'int (int *, int *)'
| |-ParmVarDecl 0x221509d2010 <col:37, col:47> col:47 invalid group 'int *'
| `-ParmVarDecl 0x221509d2090 <col:54, col:62> col:62 invalid ctx 'int *'
|-FunctionDecl 0x221509d2290 <line:505:1, col:63> col:5 invalid ec_GFp_nistp256_have_precompute_mult 'int (const int *)'
| `-ParmVarDecl 0x221509d21f8 <col:42, col:58> col:58 invalid group 'const int *'
|-FunctionDecl 0x221509d23e8 <line:508:1, col:47> col:5 invalid ec_GFp_nistp521_group_init 'int (int *)'
| `-ParmVarDecl 0x221509d2350 <col:32, col:42> col:42 invalid group 'int *'
|-FunctionDecl 0x221509d2760 <line:509:1, line:511:45> line:509:5 invalid ec_GFp_nistp521_group_set_curve 'int (int *, const int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x221509d24a8 <col:37, col:47> col:47 invalid group 'int *'
| |-ParmVarDecl 0x221509d2528 <col:54, col:68> col:68 invalid p 'const int *'
| |-ParmVarDecl 0x221509d25a8 <line:510:37, col:51> col:51 invalid a 'const int *'
| |-ParmVarDecl 0x221509d2628 <col:54, col:68> col:68 invalid n 'const int *'
| `-ParmVarDecl 0x221509d26a8 <line:511:37, <invalid sloc>> col:45 invalid 'int *'
|-FunctionDecl 0x221509d2af8 <line:512:1, line:515:61> line:512:5 invalid ec_GFp_nistp521_point_get_affine_coordinates 'int (const int *, const int *, int *, int *, int *)'
| |-ParmVarDecl 0x221509d2840 <col:50, col:66> col:66 invalid group 'const int *'
| |-ParmVarDecl 0x221509d28c0 <line:513:50, col:66> col:66 invalid point 'const int *'
| |-ParmVarDecl 0x221509d2940 <line:514:50, col:58> col:58 invalid x 'int *'
| |-ParmVarDecl 0x221509d29c0 <col:61, col:69> col:69 invalid y 'int *'
| `-ParmVarDecl 0x221509d2a40 <line:515:50, col:58> col:58 invalid ctx 'int *'
|-FunctionDecl 0x221509cafa8 <line:516:1, line:519:33> line:516:5 invalid ec_GFp_nistp521_mul 'int (const int *, int *, const int *, size_t, const int **, const int **, int *)'
| |-ParmVarDecl 0x221509d2bd8 <col:25, col:41> col:41 invalid group 'const int *'
| |-ParmVarDecl 0x221509d2c58 <col:48, col:58> col:58 invalid r 'int *'
| |-ParmVarDecl 0x221509d2cd8 <line:517:25, col:39> col:39 invalid scalar 'const int *'
| |-ParmVarDecl 0x221509cad40 <col:47, col:54> col:54 num 'size_t':'unsigned long long'
| |-ParmVarDecl 0x221509cadd0 <line:518:25, <invalid sloc>> col:41 invalid points 'const int **':'const int **'
| |-ParmVarDecl 0x221509cae60 <col:51, <invalid sloc>> col:65 invalid scalars 'const int **':'const int **'
| `-ParmVarDecl 0x221509caee0 <line:519:25, <invalid sloc>> col:33 invalid 'int *'
|-FunctionDecl 0x221509cb478 <line:520:1, line:523:68> line:520:5 invalid ec_GFp_nistp521_points_mul 'int (const int *, int *, const int *, size_t, const int **, const int **, int *)'
| |-ParmVarDecl 0x221509cb098 <col:32, col:48> col:48 invalid group 'const int *'
| |-ParmVarDecl 0x221509cb118 <col:55, col:65> col:65 invalid r 'int *'
| |-ParmVarDecl 0x221509cb198 <line:521:32, col:46> col:46 invalid scalar 'const int *'
| |-ParmVarDecl 0x221509cb210 <col:54, col:61> col:61 num 'size_t':'unsigned long long'
| |-ParmVarDecl 0x221509cb2a0 <line:522:32, <invalid sloc>> col:48 invalid points 'const int **':'const int **'
| |-ParmVarDecl 0x221509cb330 <line:523:32, <invalid sloc>> col:46 invalid scalars 'const int **':'const int **'
| `-ParmVarDecl 0x221509cb3b0 <col:57, col:65> col:65 invalid ctx 'int *'
|-FunctionDecl 0x221509cb688 <line:524:1, col:65> col:5 invalid ec_GFp_nistp521_precompute_mult 'int (int *, int *)'
| |-ParmVarDecl 0x221509cb568 <col:37, col:47> col:47 invalid group 'int *'
| `-ParmVarDecl 0x221509cb5e8 <col:54, col:62> col:62 invalid ctx 'int *'
|-FunctionDecl 0x221509cb7e8 <line:525:1, col:63> col:5 invalid ec_GFp_nistp521_have_precompute_mult 'int (const int *)'
| `-ParmVarDecl 0x221509cb750 <col:42, col:58> col:58 invalid group 'const int *'
|-FunctionDecl 0x221509d3ca8 <line:528:1, line:552:75> line:528:6 used ec_GFp_nistp_points_make_affine_internal 'void (size_t, void *, size_t, void *, void (*)(void *), int (*)(const void *), void (*)(void *, const void *), void (*)(void *, const void *), void (*)(void *, const void *, const void *), void (*)(void *, const void *), void (*)(void *, const void *))'
| |-ParmVarDecl 0x221509cb8a0 <col:47, col:54> col:54 num 'size_t':'unsigned long long'
| |-ParmVarDecl 0x221509cb920 <col:59, col:65> col:65 point_array 'void *'
| |-ParmVarDecl 0x221509cb998 <line:529:47, col:54> col:54 felem_size 'size_t':'unsigned long long'
| |-ParmVarDecl 0x221509cba18 <line:530:47, col:53> col:53 tmp_felems 'void *'
| |-ParmVarDecl 0x221509cbbe0 <line:531:47, col:75> col:54 felem_one 'void (*)(void *)'
| |-ParmVarDecl 0x221509d2e58 <line:532:47, line:533:72> line:532:53 felem_is_zero 'int (*)(const void *)'
| |-ParmVarDecl 0x221509d30f8 <line:534:47, line:536:72> line:534:54 felem_assign 'void (*)(void *, const void *)'
| |-ParmVarDecl 0x221509d32d0 <line:537:47, line:539:72> line:537:54 felem_square 'void (*)(void *, const void *)'
| |-ParmVarDecl 0x221509d3610 <line:540:47, line:544:70> line:540:54 felem_mul 'void (*)(void *, const void *, const void *)'
| |-ParmVarDecl 0x221509d37e8 <line:545:47, line:547:69> line:545:54 felem_inv 'void (*)(void *, const void *)'
| `-ParmVarDecl 0x221509d39c0 <line:548:47, line:552:74> line:548:54 felem_contract 'void (*)(void *, const void *)'
|-FunctionDecl 0x221509318e8 <line:553:1, line:554:76> line:553:6 used ec_GFp_nistp_recode_scalar_bits 'void (unsigned char *, unsigned char *, unsigned char)'
| |-ParmVarDecl 0x221509316b8 <col:38, col:53> col:53 sign 'unsigned char *'
| |-ParmVarDecl 0x22150931738 <line:554:38, col:53> col:53 digit 'unsigned char *'
| `-ParmVarDecl 0x221509317b8 <col:60, col:74> col:74 in 'unsigned char'
|-FunctionDecl 0x22150931a68 <line:556:1, col:39> col:5 invalid ec_precompute_mont_data 'int (int *)'
| `-ParmVarDecl 0x221509319d0 <col:29, <invalid sloc>> col:39 invalid 'int *'
|-FunctionDecl 0x22150931bc0 <line:557:1, col:53> col:5 invalid ec_group_simple_order_bits 'int (const int *)'
| `-ParmVarDecl 0x22150931b28 <col:32, col:48> col:48 invalid group 'const int *'
|-FunctionDecl 0x22150931e18 <line:567:1, line:568:61> line:567:8 invalid ec_key_simple_priv2oct 'size_t (const int *, unsigned char *, size_t)'
| |-ParmVarDecl 0x22150931c80 <col:31, col:45> col:45 invalid eckey 'const int *'
| |-ParmVarDecl 0x22150931d00 <line:568:31, col:46> col:46 buf 'unsigned char *'
| `-ParmVarDecl 0x22150931d78 <col:51, col:58> col:58 len 'size_t':'unsigned long long'
|-FunctionDecl 0x22150932088 <line:569:1, col:79> col:5 invalid ec_key_simple_oct2priv 'int (int *, const unsigned char *, size_t)'
| |-ParmVarDecl 0x22150931ee8 <col:28, col:36> col:36 invalid eckey 'int *'
| |-ParmVarDecl 0x22150931f68 <col:43, col:64> col:64 buf 'const unsigned char *'
| `-ParmVarDecl 0x22150931fe0 <col:69, col:76> col:76 len 'size_t':'unsigned long long'
|-FunctionDecl 0x221509321f0 <line:570:1, col:45> col:5 invalid ec_key_simple_generate_key 'int (int *)'
| `-ParmVarDecl 0x22150932158 <col:32, col:40> col:40 invalid eckey 'int *'
|-FunctionDecl 0x22150932348 <line:571:1, col:52> col:5 invalid ec_key_simple_generate_public_key 'int (int *)'
| `-ParmVarDecl 0x221509322b0 <col:39, col:47> col:47 invalid eckey 'int *'
|-FunctionDecl 0x221509324a0 <line:572:1, col:48> col:5 invalid ec_key_simple_check_key 'int (const int *)'
| `-ParmVarDecl 0x22150932408 <col:29, col:43> col:43 invalid eckey 'const int *'
|-RecordDecl 0x22150932548 <line:576:1, line:601:1> line:576:8 invalid struct ec_key_method_st definition
| |-FieldDecl 0x22150932618 <line:577:5, col:17> col:17 name 'const char *'
| |-FieldDecl 0x221509eaf70 <line:578:5, col:13> col:13 invalid flags 'int'
| |-FieldDecl 0x221509eb088 <line:579:5, col:28> col:11 init 'int (*)(int *)'
| |-FieldDecl 0x221509eb198 <line:580:5, col:31> col:12 finish 'void (*)(int *)'
| |-FieldDecl 0x221509eb338 <line:581:5, col:48> col:11 copy 'int (*)(int *, const int *)'
| |-FieldDecl 0x221509eb4d8 <line:582:5, col:54> col:11 set_group 'int (*)(int *, const int *)'
| |-FieldDecl 0x221509eb678 <line:583:5, col:59> col:11 set_private 'int (*)(int *, const int *)'
| |-FieldDecl 0x221509eb818 <line:584:5, col:59> col:11 set_public 'int (*)(int *, const int *)'
| |-FieldDecl 0x221509eb930 <line:585:5, col:30> col:11 keygen 'int (*)(int *)'
| |-FieldDecl 0x221509ebbe0 <line:586:5, line:587:67> line:586:11 compute_key 'int (*)(unsigned char **, size_t *, const int *, const int *)'
| |-FieldDecl 0x221509e4170 <line:588:5, line:590:47> line:588:11 sign 'int (*)(int, const unsigned char *, int, unsigned char *, unsigned int *, const int *, const int *, int *)'
| |-FieldDecl 0x221509e4510 <line:591:5, line:592:34> line:591:11 sign_setup 'int (*)(int *, int *, int **, int **)'
| |-FieldDecl 0x221509e4928 <line:593:5, <invalid sloc>> col:18 invalid sign_sig 'int *(*)(const unsigned char *, int, const int *, const int *, int *)'
| |-FieldDecl 0x221509e4dd0 <line:597:5, line:598:74> line:597:11 verify 'int (*)(int, const unsigned char *, int, const unsigned char *, int, int *)'
| `-FieldDecl 0x221509e81e0 <line:599:5, line:600:58> line:599:11 verify_sig 'int (*)(const unsigned char *, int, const int *, int *)'
|-FunctionDecl 0x221509e82e8 <line:605:1, col:34> col:5 invalid ossl_ec_key_gen 'int (int *)'
| `-ParmVarDecl 0x221509e8250 <col:21, col:29> col:29 invalid eckey 'int *'
|-FunctionDecl 0x221509e85d8 <line:606:1, line:607:70> line:606:5 invalid ossl_ecdh_compute_key 'int (unsigned char **, size_t *, const int *, const int *)'
| |-ParmVarDecl 0x221509e83b0 <col:27, col:43> col:43 pout 'unsigned char **'
| |-ParmVarDecl 0x221509e8428 <col:49, col:57> col:57 poutlen 'size_t *'
| |-ParmVarDecl 0x221509e84a8 <line:607:27, col:43> col:43 invalid pub_key 'const int *'
| `-ParmVarDecl 0x221509e8528 <col:52, col:66> col:66 invalid ecdh 'const int *'
|-FunctionDecl 0x221509e88e0 <line:608:1, line:609:72> line:608:5 invalid ecdh_simple_compute_key 'int (unsigned char **, size_t *, const int *, const int *)'
| |-ParmVarDecl 0x221509e86b8 <col:29, col:45> col:45 pout 'unsigned char **'
| |-ParmVarDecl 0x221509e8730 <col:51, col:59> col:59 poutlen 'size_t *'
| |-ParmVarDecl 0x221509e87b0 <line:609:29, col:45> col:45 invalid pub_key 'const int *'
| `-ParmVarDecl 0x221509e8830 <col:54, col:68> col:68 invalid ecdh 'const int *'
|-RecordDecl 0x221509e89a0 <line:611:1, line:614:1> line:611:8 invalid struct ECDSA_SIG_st definition
| |-FieldDecl 0x221509e8a78 <line:612:5, col:13> col:13 invalid r 'int *'
| `-FieldDecl 0x221509e8ae8 <line:613:5, col:13> col:13 invalid s 'int *'
|-FunctionDecl 0x221509e8d98 <line:616:1, line:617:38> line:616:5 invalid ossl_ecdsa_sign_setup 'int (int *, int *, int **, int **)'
| |-ParmVarDecl 0x221509e8b58 <col:27, col:35> col:35 invalid eckey 'int *'
| |-ParmVarDecl 0x221509e8bd8 <col:42, col:50> col:50 invalid ctx_in 'int *'
| |-ParmVarDecl 0x221509e8c60 <col:58, col:67> col:67 invalid kinvp 'int **'
| `-ParmVarDecl 0x221509e8ce8 <line:617:27, col:36> col:36 invalid rp 'int **'
|-FunctionDecl 0x221509e9320 <line:618:1, line:620:71> line:618:5 invalid ossl_ecdsa_sign 'int (int, const unsigned char *, int, unsigned char *, unsigned int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x221509e8e70 <col:21, col:25> col:25 type 'int'
| |-ParmVarDecl 0x221509e8f50 <col:31, col:52> col:52 dgst 'const unsigned char *'
| |-ParmVarDecl 0x221509e8fd0 <col:58, col:62> col:62 dlen 'int'
| |-ParmVarDecl 0x221509e9050 <line:619:21, col:36> col:36 sig 'unsigned char *'
| |-ParmVarDecl 0x221509e90d0 <col:41, col:55> col:55 siglen 'unsigned int *'
| |-ParmVarDecl 0x221509e9150 <line:620:21, col:35> col:35 invalid kinv 'const int *'
| |-ParmVarDecl 0x221509e91d0 <col:41, col:55> col:55 invalid r 'const int *'
| `-ParmVarDecl 0x221509e9250 <col:58, col:66> col:66 invalid eckey 'int *'
|-FunctionDecl 0x221509e96d0 <line:621:1, line:623:45> line:621:12 invalid ossl_ecdsa_sign_sig 'int *(const unsigned char *, int, const int *, const int *, int *)'
| |-ParmVarDecl 0x221509e9418 <col:32, col:53> col:53 dgst 'const unsigned char *'
| |-ParmVarDecl 0x221509e9498 <col:59, col:63> col:63 dgst_len 'int'
| |-ParmVarDecl 0x221509e9518 <line:622:32, col:46> col:46 invalid in_kinv 'const int *'
| |-ParmVarDecl 0x221509e9598 <col:55, col:69> col:69 invalid in_r 'const int *'
| `-ParmVarDecl 0x221509e9618 <line:623:32, col:40> col:40 invalid eckey 'int *'
|-FunctionDecl 0x221509e9af0 <line:624:1, line:625:78> line:624:5 invalid ossl_ecdsa_verify 'int (int, const unsigned char *, int, const unsigned char *, int, int *)'
| |-ParmVarDecl 0x221509e97b0 <col:23, col:27> col:27 type 'int'
| |-ParmVarDecl 0x221509e9830 <col:33, col:54> col:54 dgst 'const unsigned char *'
| |-ParmVarDecl 0x221509e98b0 <col:60, col:64> col:64 dgst_len 'int'
| |-ParmVarDecl 0x221509e9930 <line:625:23, col:44> col:44 sigbuf 'const unsigned char *'
| |-ParmVarDecl 0x221509e99b0 <col:52, col:56> col:56 sig_len 'int'
| `-ParmVarDecl 0x221509e9a30 <col:65, col:73> col:73 invalid eckey 'int *'
|-FunctionDecl 0x221509e9e08 <line:626:1, line:627:62> line:626:5 invalid ossl_ecdsa_verify_sig 'int (const unsigned char *, int, const int *, int *)'
| |-ParmVarDecl 0x221509e9bd8 <col:27, col:48> col:48 dgst 'const unsigned char *'
| |-ParmVarDecl 0x221509e9c58 <col:54, col:58> col:58 dgst_len 'int'
| |-ParmVarDecl 0x221509e9cd8 <line:627:27, col:44> col:44 invalid sig 'const int *'
| `-ParmVarDecl 0x221509e9d58 <col:49, col:57> col:57 invalid eckey 'int *'
|-FunctionDecl 0x221509e0030 <line:629:1, line:630:47> line:629:5 invalid X25519 'int (int *, const int *, const int *)'
| |-ParmVarDecl 0x221509dfcf0 <col:12, <invalid sloc>> col:20 invalid out_shared_key 'int *':'int *'
| |-ParmVarDecl 0x221509dfe30 <col:40, <invalid sloc>> col:54 invalid private_key 'const int *':'const int *'
| `-ParmVarDecl 0x221509dff00 <line:630:12, <invalid sloc>> col:26 invalid peer_public_value 'const int *':'const int *'
|-FunctionDecl 0x221509e0338 <line:631:1, line:632:62> line:631:6 invalid X25519_public_from_private 'void (int *, const int *)'
| |-ParmVarDecl 0x221509e0150 <col:33, <invalid sloc>> col:41 invalid out_public_value 'int *':'int *'
| `-ParmVarDecl 0x221509e0220 <line:632:33, <invalid sloc>> col:47 invalid private_key 'const int *':'const int *'
|-FunctionDecl 0x221509e05a8 <line:634:1, col:79> col:5 invalid ec_point_blind_coordinates 'int (const int *, int *, int *)'
| |-ParmVarDecl 0x221509e0400 <col:32, col:48> col:48 invalid group 'const int *'
| |-ParmVarDecl 0x221509e0480 <col:55, col:65> col:65 invalid p 'int *'
| `-ParmVarDecl 0x221509e0500 <col:68, col:76> col:76 invalid ctx 'int *'
|-TypedefDecl 0x221509e0678 <.//openssl//file_jk/before\crypto\ec\ecp_nistp521.c:51:1, col:17> col:17 referenced invalid u8 'int'
| `-BuiltinType 0x2214ee20b80 'int'
|-TypedefDecl 0x221509e06e8 <line:52:1, col:18> col:18 referenced invalid u64 'int'
| `-BuiltinType 0x2214ee20b80 'int'
|-TypedefDecl 0x221509e0838 <line:60:1, col:30> col:12 referenced felem_bytearray 'u8 [66]'
| `-ConstantArrayType 0x221509e07e0 'u8 [66]' 66 
|   `-TypedefType 0x221509e0740 'u8' sugar
|     |-Typedef 0x221509e0678 'u8'
|     `-BuiltinType 0x2214ee20b80 'int'
|-VarDecl 0x221509e0988 <line:66:1, line:112:1> line:66:30 used nistp521_curve_params 'const felem_bytearray [5]' static cinit
| `-InitListExpr 0x22150954418 <col:57, line:112:1> 'const felem_bytearray [5]'
|   |-InitListExpr 0x22150954490 <line:67:5, line:75:16> 'const felem_bytearray':'u8 const[66]'
|   | |-IntegerLiteral 0x221509e09f0 <line:67:6> 'int' 1
|   | |-IntegerLiteral 0x221509e0a18 <col:12> 'int' 255
|   | |-IntegerLiteral 0x221509e0a40 <col:18> 'int' 255
|   | |-IntegerLiteral 0x221509e0a68 <col:24> 'int' 255
|   | |-IntegerLiteral 0x221509e0a90 <col:30> 'int' 255
|   | |-IntegerLiteral 0x221509e0ab8 <col:36> 'int' 255
|   | |-IntegerLiteral 0x221509e0ae0 <col:42> 'int' 255
|   | |-IntegerLiteral 0x221509e0b08 <col:48> 'int' 255
|   | |-IntegerLiteral 0x221509e0b30 <line:68:6> 'int' 255
|   | |-IntegerLiteral 0x221509e0b58 <col:12> 'int' 255
|   | |-IntegerLiteral 0x221509e0b80 <col:18> 'int' 255
|   | |-IntegerLiteral 0x221509e0ba8 <col:24> 'int' 255
|   | |-IntegerLiteral 0x221509e0bd0 <col:30> 'int' 255
|   | |-IntegerLiteral 0x221509e0bf8 <col:36> 'int' 255
|   | |-IntegerLiteral 0x221509e0c20 <col:42> 'int' 255
|   | |-IntegerLiteral 0x221509e0c48 <col:48> 'int' 255
|   | |-IntegerLiteral 0x221509e0c70 <line:69:6> 'int' 255
|   | |-IntegerLiteral 0x221509e0c98 <col:12> 'int' 255
|   | |-IntegerLiteral 0x221509e0cc0 <col:18> 'int' 255
|   | |-IntegerLiteral 0x221509e0ce8 <col:24> 'int' 255
|   | |-IntegerLiteral 0x221509e0d10 <col:30> 'int' 255
|   | |-IntegerLiteral 0x221509e0d38 <col:36> 'int' 255
|   | |-IntegerLiteral 0x221509e0d60 <col:42> 'int' 255
|   | |-IntegerLiteral 0x221509e0d88 <col:48> 'int' 255
|   | |-IntegerLiteral 0x221509e0db0 <line:70:6> 'int' 255
|   | |-IntegerLiteral 0x221509e0dd8 <col:12> 'int' 255
|   | |-IntegerLiteral 0x221509e0e00 <col:18> 'int' 255
|   | |-IntegerLiteral 0x221509e0e28 <col:24> 'int' 255
|   | |-IntegerLiteral 0x221509e0e50 <col:30> 'int' 255
|   | |-IntegerLiteral 0x221509e0e78 <col:36> 'int' 255
|   | |-IntegerLiteral 0x221509e0ea0 <col:42> 'int' 255
|   | |-IntegerLiteral 0x221509e0ec8 <col:48> 'int' 255
|   | |-IntegerLiteral 0x221509e0ef0 <line:71:6> 'int' 255
|   | |-IntegerLiteral 0x221509e0f18 <col:12> 'int' 255
|   | |-IntegerLiteral 0x221509e0f40 <col:18> 'int' 255
|   | |-IntegerLiteral 0x221509e0f68 <col:24> 'int' 255
|   | |-IntegerLiteral 0x221509e0f90 <col:30> 'int' 255
|   | |-IntegerLiteral 0x221509e0fb8 <col:36> 'int' 255
|   | |-IntegerLiteral 0x221509e0fe0 <col:42> 'int' 255
|   | |-IntegerLiteral 0x221509e1008 <col:48> 'int' 255
|   | |-IntegerLiteral 0x221509e1030 <line:72:6> 'int' 255
|   | |-IntegerLiteral 0x221509e1058 <col:12> 'int' 255
|   | |-IntegerLiteral 0x221509e1080 <col:18> 'int' 255
|   | |-IntegerLiteral 0x221509e10a8 <col:24> 'int' 255
|   | |-IntegerLiteral 0x221509e10d0 <col:30> 'int' 255
|   | |-IntegerLiteral 0x221509e10f8 <col:36> 'int' 255
|   | |-IntegerLiteral 0x221509e1120 <col:42> 'int' 255
|   | |-IntegerLiteral 0x221509e1148 <col:48> 'int' 255
|   | |-IntegerLiteral 0x221509e1170 <line:73:6> 'int' 255
|   | |-IntegerLiteral 0x221509e1198 <col:12> 'int' 255
|   | |-IntegerLiteral 0x221509e11c0 <col:18> 'int' 255
|   | |-IntegerLiteral 0x221509e11e8 <col:24> 'int' 255
|   | |-IntegerLiteral 0x221509e1210 <col:30> 'int' 255
|   | |-IntegerLiteral 0x221509e1238 <col:36> 'int' 255
|   | |-IntegerLiteral 0x221509e1260 <col:42> 'int' 255
|   | |-IntegerLiteral 0x221509e1288 <col:48> 'int' 255
|   | |-IntegerLiteral 0x221509e12b0 <line:74:6> 'int' 255
|   | |-IntegerLiteral 0x221509e12d8 <col:12> 'int' 255
|   | |-IntegerLiteral 0x221509e1300 <col:18> 'int' 255
|   | |-IntegerLiteral 0x221509e1328 <col:24> 'int' 255
|   | |-IntegerLiteral 0x221509e1350 <col:30> 'int' 255
|   | |-IntegerLiteral 0x221509e1378 <col:36> 'int' 255
|   | |-IntegerLiteral 0x221509e13a0 <col:42> 'int' 255
|   | |-IntegerLiteral 0x221509e13c8 <col:48> 'int' 255
|   | |-IntegerLiteral 0x221509e13f0 <line:75:6> 'int' 255
|   | `-IntegerLiteral 0x221509e1418 <col:12> 'int' 255
|   |-InitListExpr 0x221509546f0 <line:76:5, line:84:16> 'const felem_bytearray':'u8 const[66]'
|   | |-IntegerLiteral 0x221509e1690 <line:76:6> 'int' 1
|   | |-IntegerLiteral 0x221509e16b8 <col:12> 'int' 255
|   | |-IntegerLiteral 0x221509e16e0 <col:18> 'int' 255
|   | |-IntegerLiteral 0x221509e1708 <col:24> 'int' 255
|   | |-IntegerLiteral 0x221509e1730 <col:30> 'int' 255
|   | |-IntegerLiteral 0x221509e1758 <col:36> 'int' 255
|   | |-IntegerLiteral 0x221509e1780 <col:42> 'int' 255
|   | |-IntegerLiteral 0x221509e17a8 <col:48> 'int' 255
|   | |-IntegerLiteral 0x221509e17d0 <line:77:6> 'int' 255
|   | |-IntegerLiteral 0x221509e17f8 <col:12> 'int' 255
|   | |-IntegerLiteral 0x221509e1820 <col:18> 'int' 255
|   | |-IntegerLiteral 0x221509e1848 <col:24> 'int' 255
|   | |-IntegerLiteral 0x221509e1870 <col:30> 'int' 255
|   | |-IntegerLiteral 0x221509e1898 <col:36> 'int' 255
|   | |-IntegerLiteral 0x221509e18c0 <col:42> 'int' 255
|   | |-IntegerLiteral 0x221509e18e8 <col:48> 'int' 255
|   | |-IntegerLiteral 0x221509e1910 <line:78:6> 'int' 255
|   | |-IntegerLiteral 0x221509e1938 <col:12> 'int' 255
|   | |-IntegerLiteral 0x221509e1960 <col:18> 'int' 255
|   | |-IntegerLiteral 0x221509e1988 <col:24> 'int' 255
|   | |-IntegerLiteral 0x221509e19b0 <col:30> 'int' 255
|   | |-IntegerLiteral 0x221509e19d8 <col:36> 'int' 255
|   | |-IntegerLiteral 0x221509e1a00 <col:42> 'int' 255
|   | |-IntegerLiteral 0x221509e1a28 <col:48> 'int' 255
|   | |-IntegerLiteral 0x221509e1a50 <line:79:6> 'int' 255
|   | |-IntegerLiteral 0x221509e1a78 <col:12> 'int' 255
|   | |-IntegerLiteral 0x221509e1aa0 <col:18> 'int' 255
|   | |-IntegerLiteral 0x221509e1ac8 <col:24> 'int' 255
|   | |-IntegerLiteral 0x221509e1af0 <col:30> 'int' 255
|   | |-IntegerLiteral 0x221509e1b18 <col:36> 'int' 255
|   | |-IntegerLiteral 0x221509e1b40 <col:42> 'int' 255
|   | |-IntegerLiteral 0x221509e1b68 <col:48> 'int' 255
|   | |-IntegerLiteral 0x221509e1b90 <line:80:6> 'int' 255
|   | |-IntegerLiteral 0x221509e1bb8 <col:12> 'int' 255
|   | |-IntegerLiteral 0x221509e1be0 <col:18> 'int' 255
|   | |-IntegerLiteral 0x221509e1c08 <col:24> 'int' 255
|   | |-IntegerLiteral 0x221509e1c30 <col:30> 'int' 255
|   | |-IntegerLiteral 0x221509e1c58 <col:36> 'int' 255
|   | |-IntegerLiteral 0x22150951660 <col:42> 'int' 255
|   | |-IntegerLiteral 0x22150951688 <col:48> 'int' 255
|   | |-IntegerLiteral 0x221509516b0 <line:81:6> 'int' 255
|   | |-IntegerLiteral 0x221509516d8 <col:12> 'int' 255
|   | |-IntegerLiteral 0x22150951700 <col:18> 'int' 255
|   | |-IntegerLiteral 0x22150951728 <col:24> 'int' 255
|   | |-IntegerLiteral 0x22150951750 <col:30> 'int' 255
|   | |-IntegerLiteral 0x22150951778 <col:36> 'int' 255
|   | |-IntegerLiteral 0x221509517a0 <col:42> 'int' 255
|   | |-IntegerLiteral 0x221509517c8 <col:48> 'int' 255
|   | |-IntegerLiteral 0x221509517f0 <line:82:6> 'int' 255
|   | |-IntegerLiteral 0x22150951818 <col:12> 'int' 255
|   | |-IntegerLiteral 0x22150951840 <col:18> 'int' 255
|   | |-IntegerLiteral 0x22150951868 <col:24> 'int' 255
|   | |-IntegerLiteral 0x22150951890 <col:30> 'int' 255
|   | |-IntegerLiteral 0x221509518b8 <col:36> 'int' 255
|   | |-IntegerLiteral 0x221509518e0 <col:42> 'int' 255
|   | |-IntegerLiteral 0x22150951908 <col:48> 'int' 255
|   | |-IntegerLiteral 0x22150951930 <line:83:6> 'int' 255
|   | |-IntegerLiteral 0x22150951958 <col:12> 'int' 255
|   | |-IntegerLiteral 0x22150951980 <col:18> 'int' 255
|   | |-IntegerLiteral 0x221509519a8 <col:24> 'int' 255
|   | |-IntegerLiteral 0x221509519d0 <col:30> 'int' 255
|   | |-IntegerLiteral 0x221509519f8 <col:36> 'int' 255
|   | |-IntegerLiteral 0x22150951a20 <col:42> 'int' 255
|   | |-IntegerLiteral 0x22150951a48 <col:48> 'int' 255
|   | |-IntegerLiteral 0x22150951a70 <line:84:6> 'int' 255
|   | `-IntegerLiteral 0x22150951a98 <col:12> 'int' 252
|   |-InitListExpr 0x22150954950 <line:85:5, line:93:16> 'const felem_bytearray':'u8 const[66]'
|   | |-IntegerLiteral 0x22150951d10 <line:85:6> 'int' 0
|   | |-IntegerLiteral 0x22150951d38 <col:12> 'int' 81
|   | |-IntegerLiteral 0x22150951d60 <col:18> 'int' 149
|   | |-IntegerLiteral 0x22150951d88 <col:24> 'int' 62
|   | |-IntegerLiteral 0x22150951db0 <col:30> 'int' 185
|   | |-IntegerLiteral 0x22150951dd8 <col:36> 'int' 97
|   | |-IntegerLiteral 0x22150951e00 <col:42> 'int' 142
|   | |-IntegerLiteral 0x22150951e28 <col:48> 'int' 28
|   | |-IntegerLiteral 0x22150951e50 <line:86:6> 'int' 154
|   | |-IntegerLiteral 0x22150951e78 <col:12> 'int' 31
|   | |-IntegerLiteral 0x22150951ea0 <col:18> 'int' 146
|   | |-IntegerLiteral 0x22150951ec8 <col:24> 'int' 154
|   | |-IntegerLiteral 0x22150951ef0 <col:30> 'int' 33
|   | |-IntegerLiteral 0x22150951f18 <col:36> 'int' 160
|   | |-IntegerLiteral 0x22150951f40 <col:42> 'int' 182
|   | |-IntegerLiteral 0x22150951f68 <col:48> 'int' 133
|   | |-IntegerLiteral 0x22150951f90 <line:87:6> 'int' 64
|   | |-IntegerLiteral 0x22150951fb8 <col:12> 'int' 238
|   | |-IntegerLiteral 0x22150951fe0 <col:18> 'int' 162
|   | |-IntegerLiteral 0x22150952008 <col:24> 'int' 218
|   | |-IntegerLiteral 0x22150952030 <col:30> 'int' 114
|   | |-IntegerLiteral 0x22150952058 <col:36> 'int' 91
|   | |-IntegerLiteral 0x22150952080 <col:42> 'int' 153
|   | |-IntegerLiteral 0x221509520a8 <col:48> 'int' 179
|   | |-IntegerLiteral 0x221509520d0 <line:88:6> 'int' 21
|   | |-IntegerLiteral 0x221509520f8 <col:12> 'int' 243
|   | |-IntegerLiteral 0x22150952120 <col:18> 'int' 184
|   | |-IntegerLiteral 0x22150952148 <col:24> 'int' 180
|   | |-IntegerLiteral 0x22150952170 <col:30> 'int' 137
|   | |-IntegerLiteral 0x22150952198 <col:36> 'int' 145
|   | |-IntegerLiteral 0x221509521c0 <col:42> 'int' 142
|   | |-IntegerLiteral 0x221509521e8 <col:48> 'int' 241
|   | |-IntegerLiteral 0x22150952210 <line:89:6> 'int' 9
|   | |-IntegerLiteral 0x22150952238 <col:12> 'int' 225
|   | |-IntegerLiteral 0x22150952260 <col:18> 'int' 86
|   | |-IntegerLiteral 0x22150952288 <col:24> 'int' 25
|   | |-IntegerLiteral 0x221509522b0 <col:30> 'int' 57
|   | |-IntegerLiteral 0x221509522d8 <col:36> 'int' 81
|   | |-IntegerLiteral 0x22150952300 <col:42> 'int' 236
|   | |-IntegerLiteral 0x22150952328 <col:48> 'int' 126
|   | |-IntegerLiteral 0x22150952350 <line:90:6> 'int' 147
|   | |-IntegerLiteral 0x22150952378 <col:12> 'int' 123
|   | |-IntegerLiteral 0x221509523a0 <col:18> 'int' 22
|   | |-IntegerLiteral 0x221509523c8 <col:24> 'int' 82
|   | |-IntegerLiteral 0x221509523f0 <col:30> 'int' 192
|   | |-IntegerLiteral 0x22150952418 <col:36> 'int' 189
|   | |-IntegerLiteral 0x22150952440 <col:42> 'int' 59
|   | |-IntegerLiteral 0x22150952468 <col:48> 'int' 177
|   | |-IntegerLiteral 0x22150952490 <line:91:6> 'int' 191
|   | |-IntegerLiteral 0x221509524b8 <col:12> 'int' 7
|   | |-IntegerLiteral 0x221509524e0 <col:18> 'int' 53
|   | |-IntegerLiteral 0x22150952508 <col:24> 'int' 115
|   | |-IntegerLiteral 0x22150952530 <col:30> 'int' 223
|   | |-IntegerLiteral 0x22150952558 <col:36> 'int' 136
|   | |-IntegerLiteral 0x22150952580 <col:42> 'int' 61
|   | |-IntegerLiteral 0x221509525a8 <col:48> 'int' 44
|   | |-IntegerLiteral 0x221509525d0 <line:92:6> 'int' 52
|   | |-IntegerLiteral 0x221509525f8 <col:12> 'int' 241
|   | |-IntegerLiteral 0x22150952620 <col:18> 'int' 239
|   | |-IntegerLiteral 0x22150952648 <col:24> 'int' 69
|   | |-IntegerLiteral 0x22150952670 <col:30> 'int' 31
|   | |-IntegerLiteral 0x22150952698 <col:36> 'int' 212
|   | |-IntegerLiteral 0x221509526c0 <col:42> 'int' 107
|   | |-IntegerLiteral 0x221509526e8 <col:48> 'int' 80
|   | |-IntegerLiteral 0x22150952710 <line:93:6> 'int' 63
|   | `-IntegerLiteral 0x22150952738 <col:12> 'int' 0
|   |-InitListExpr 0x22150954bb0 <line:94:5, line:102:16> 'const felem_bytearray':'u8 const[66]'
|   | |-IntegerLiteral 0x221509529b0 <line:94:6> 'int' 0
|   | |-IntegerLiteral 0x221509529d8 <col:12> 'int' 198
|   | |-IntegerLiteral 0x22150952a00 <col:18> 'int' 133
|   | |-IntegerLiteral 0x22150952a28 <col:24> 'int' 142
|   | |-IntegerLiteral 0x22150952a50 <col:30> 'int' 6
|   | |-IntegerLiteral 0x22150952a78 <col:36> 'int' 183
|   | |-IntegerLiteral 0x22150952aa0 <col:42> 'int' 4
|   | |-IntegerLiteral 0x22150952ac8 <col:48> 'int' 4
|   | |-IntegerLiteral 0x22150952af0 <line:95:6> 'int' 233
|   | |-IntegerLiteral 0x22150952b18 <col:12> 'int' 205
|   | |-IntegerLiteral 0x22150952b40 <col:18> 'int' 158
|   | |-IntegerLiteral 0x22150952b68 <col:24> 'int' 62
|   | |-IntegerLiteral 0x22150952b90 <col:30> 'int' 203
|   | |-IntegerLiteral 0x22150952bb8 <col:36> 'int' 102
|   | |-IntegerLiteral 0x22150952be0 <col:42> 'int' 35
|   | |-IntegerLiteral 0x22150952c08 <col:48> 'int' 149
|   | |-IntegerLiteral 0x22150952c30 <line:96:6> 'int' 180
|   | |-IntegerLiteral 0x22150952c58 <col:12> 'int' 66
|   | |-IntegerLiteral 0x22150952c80 <col:18> 'int' 156
|   | |-IntegerLiteral 0x22150952ca8 <col:24> 'int' 100
|   | |-IntegerLiteral 0x22150952cd0 <col:30> 'int' 129
|   | |-IntegerLiteral 0x22150952cf8 <col:36> 'int' 57
|   | |-IntegerLiteral 0x22150952d20 <col:42> 'int' 5
|   | |-IntegerLiteral 0x22150952d48 <col:48> 'int' 63
|   | |-IntegerLiteral 0x22150952d70 <line:97:6> 'int' 181
|   | |-IntegerLiteral 0x22150952d98 <col:12> 'int' 33
|   | |-IntegerLiteral 0x22150952dc0 <col:18> 'int' 248
|   | |-IntegerLiteral 0x22150952de8 <col:24> 'int' 40
|   | |-IntegerLiteral 0x22150952e10 <col:30> 'int' 175
|   | |-IntegerLiteral 0x22150952e38 <col:36> 'int' 96
|   | |-IntegerLiteral 0x22150952e60 <col:42> 'int' 107
|   | |-IntegerLiteral 0x22150952e88 <col:48> 'int' 77
|   | |-IntegerLiteral 0x22150952eb0 <line:98:6> 'int' 61
|   | |-IntegerLiteral 0x22150952ed8 <col:12> 'int' 186
|   | |-IntegerLiteral 0x22150952f00 <col:18> 'int' 161
|   | |-IntegerLiteral 0x22150952f28 <col:24> 'int' 75
|   | |-IntegerLiteral 0x22150952f50 <col:30> 'int' 94
|   | |-IntegerLiteral 0x22150952f78 <col:36> 'int' 119
|   | |-IntegerLiteral 0x22150952fa0 <col:42> 'int' 239
|   | |-IntegerLiteral 0x22150952fc8 <col:48> 'int' 231
|   | |-IntegerLiteral 0x22150952ff0 <line:99:6> 'int' 89
|   | |-IntegerLiteral 0x22150953018 <col:12> 'int' 40
|   | |-IntegerLiteral 0x22150953040 <col:18> 'int' 254
|   | |-IntegerLiteral 0x22150953068 <col:24> 'int' 29
|   | |-IntegerLiteral 0x22150953090 <col:30> 'int' 193
|   | |-IntegerLiteral 0x221509530b8 <col:36> 'int' 39
|   | |-IntegerLiteral 0x221509530e0 <col:42> 'int' 162
|   | |-IntegerLiteral 0x22150953108 <col:48> 'int' 255
|   | |-IntegerLiteral 0x22150953130 <line:100:6> 'int' 168
|   | |-IntegerLiteral 0x22150953158 <col:12> 'int' 222
|   | |-IntegerLiteral 0x22150953180 <col:18> 'int' 51
|   | |-IntegerLiteral 0x221509531a8 <col:24> 'int' 72
|   | |-IntegerLiteral 0x221509531d0 <col:30> 'int' 179
|   | |-IntegerLiteral 0x221509531f8 <col:36> 'int' 193
|   | |-IntegerLiteral 0x22150953220 <col:42> 'int' 133
|   | |-IntegerLiteral 0x22150953248 <col:48> 'int' 106
|   | |-IntegerLiteral 0x22150953270 <line:101:6> 'int' 66
|   | |-IntegerLiteral 0x22150953298 <col:12> 'int' 155
|   | |-IntegerLiteral 0x221509532c0 <col:18> 'int' 249
|   | |-IntegerLiteral 0x221509532e8 <col:24> 'int' 126
|   | |-IntegerLiteral 0x22150953310 <col:30> 'int' 126
|   | |-IntegerLiteral 0x22150953338 <col:36> 'int' 49
|   | |-IntegerLiteral 0x22150953360 <col:42> 'int' 194
|   | |-IntegerLiteral 0x22150953388 <col:48> 'int' 229
|   | |-IntegerLiteral 0x221509533b0 <line:102:6> 'int' 189
|   | `-IntegerLiteral 0x221509533d8 <col:12> 'int' 102
|   `-InitListExpr 0x22150954e10 <line:103:5, line:111:16> 'const felem_bytearray':'u8 const[66]'
|     |-IntegerLiteral 0x22150953670 <line:103:6> 'int' 1
|     |-IntegerLiteral 0x22150953698 <col:12> 'int' 24
|     |-IntegerLiteral 0x221509536c0 <col:18> 'int' 57
|     |-IntegerLiteral 0x221509536e8 <col:24> 'int' 41
|     |-IntegerLiteral 0x22150953710 <col:30> 'int' 106
|     |-IntegerLiteral 0x22150953738 <col:36> 'int' 120
|     |-IntegerLiteral 0x22150953760 <col:42> 'int' 154
|     |-IntegerLiteral 0x22150953788 <col:48> 'int' 59
|     |-IntegerLiteral 0x221509537b0 <line:104:6> 'int' 192
|     |-IntegerLiteral 0x221509537d8 <col:12> 'int' 4
|     |-IntegerLiteral 0x22150953800 <col:18> 'int' 92
|     |-IntegerLiteral 0x22150953828 <col:24> 'int' 138
|     |-IntegerLiteral 0x22150953850 <col:30> 'int' 95
|     |-IntegerLiteral 0x22150953878 <col:36> 'int' 180
|     |-IntegerLiteral 0x221509538a0 <col:42> 'int' 44
|     |-IntegerLiteral 0x221509538c8 <col:48> 'int' 125
|     |-IntegerLiteral 0x221509538f0 <line:105:6> 'int' 27
|     |-IntegerLiteral 0x22150953918 <col:12> 'int' 217
|     |-IntegerLiteral 0x22150953940 <col:18> 'int' 152
|     |-IntegerLiteral 0x22150953968 <col:24> 'int' 245
|     |-IntegerLiteral 0x22150953990 <col:30> 'int' 68
|     |-IntegerLiteral 0x221509539b8 <col:36> 'int' 73
|     |-IntegerLiteral 0x221509539e0 <col:42> 'int' 87
|     |-IntegerLiteral 0x22150953a08 <col:48> 'int' 155
|     |-IntegerLiteral 0x22150953a30 <line:106:6> 'int' 68
|     |-IntegerLiteral 0x22150953a58 <col:12> 'int' 104
|     |-IntegerLiteral 0x22150953a80 <col:18> 'int' 23
|     |-IntegerLiteral 0x22150953aa8 <col:24> 'int' 175
|     |-IntegerLiteral 0x22150953ad0 <col:30> 'int' 189
|     |-IntegerLiteral 0x22150953af8 <col:36> 'int' 23
|     |-IntegerLiteral 0x22150953b20 <col:42> 'int' 39
|     |-IntegerLiteral 0x22150953b48 <col:48> 'int' 62
|     |-IntegerLiteral 0x22150953b70 <line:107:6> 'int' 102
|     |-IntegerLiteral 0x22150953b98 <col:12> 'int' 44
|     |-IntegerLiteral 0x22150953bc0 <col:18> 'int' 151
|     |-IntegerLiteral 0x22150953be8 <col:24> 'int' 238
|     |-IntegerLiteral 0x22150953c10 <col:30> 'int' 114
|     |-IntegerLiteral 0x22150953c38 <col:36> 'int' 153
|     |-IntegerLiteral 0x22150953c60 <col:42> 'int' 94
|     |-IntegerLiteral 0x22150953c88 <col:48> 'int' 244
|     |-IntegerLiteral 0x22150953cb0 <line:108:6> 'int' 38
|     |-IntegerLiteral 0x22150953cd8 <col:12> 'int' 64
|     |-IntegerLiteral 0x22150953d00 <col:18> 'int' 197
|     |-IntegerLiteral 0x22150953d28 <col:24> 'int' 80
|     |-IntegerLiteral 0x22150953d50 <col:30> 'int' 185
|     |-IntegerLiteral 0x22150953d78 <col:36> 'int' 1
|     |-IntegerLiteral 0x22150953da0 <col:42> 'int' 63
|     |-IntegerLiteral 0x22150953dc8 <col:48> 'int' 173
|     |-IntegerLiteral 0x22150953df0 <line:109:6> 'int' 7
|     |-IntegerLiteral 0x22150953e18 <col:12> 'int' 97
|     |-IntegerLiteral 0x22150953e40 <col:18> 'int' 53
|     |-IntegerLiteral 0x22150953e68 <col:24> 'int' 60
|     |-IntegerLiteral 0x22150953e90 <col:30> 'int' 112
|     |-IntegerLiteral 0x22150953eb8 <col:36> 'int' 134
|     |-IntegerLiteral 0x22150953ee0 <col:42> 'int' 162
|     |-IntegerLiteral 0x22150953f08 <col:48> 'int' 114
|     |-IntegerLiteral 0x22150953f30 <line:110:6> 'int' 194
|     |-IntegerLiteral 0x22150953f58 <col:12> 'int' 64
|     |-IntegerLiteral 0x22150953f80 <col:18> 'int' 136
|     |-IntegerLiteral 0x22150953fa8 <col:24> 'int' 190
|     |-IntegerLiteral 0x22150953fd0 <col:30> 'int' 148
|     |-IntegerLiteral 0x22150953ff8 <col:36> 'int' 118
|     |-IntegerLiteral 0x22150954020 <col:42> 'int' 159
|     |-IntegerLiteral 0x22150954048 <col:48> 'int' 209
|     |-IntegerLiteral 0x22150954070 <line:111:6> 'int' 102
|     `-IntegerLiteral 0x22150954098 <col:12> 'int' 80
|-TypedefDecl 0x22150955078 <line:130:1, col:18> col:18 referenced invalid limb 'int'
| `-BuiltinType 0x2214ee20b80 'int'
|-TypedefDecl 0x221509551c8 <line:131:1, col:26> col:14 referenced felem 'limb [9]'
| `-ConstantArrayType 0x22150955170 'limb [9]' 9 
|   `-TypedefType 0x221509550d0 'limb' sugar
|     |-Typedef 0x22150955078 'limb'
|     `-BuiltinType 0x2214ee20b80 'int'
|-TypedefDecl 0x22150955288 <line:132:1, <invalid sloc>> col:19 referenced invalid largefelem 'int [9]'
| `-ConstantArrayType 0x22150955130 'int [9]' 9 
|   `-BuiltinType 0x2214ee20b80 'int'
|-VarDecl 0x221509552f0 <line:134:1, col:34> col:19 used bottom57bits 'const limb':'const int' static cinit
| `-ImplicitCastExpr 0x22150955398 <col:34> 'limb':'int' <IntegralCast>
|   `-IntegerLiteral 0x22150955358 <col:34> 'long long' 144115188075855871
|-VarDecl 0x221509553c0 <line:135:1, col:34> col:19 used bottom58bits 'const limb':'const int' static cinit
| `-ImplicitCastExpr 0x22150955468 <col:34> 'limb':'int' <IntegralCast>
|   `-IntegerLiteral 0x22150955428 <col:34> 'long long' 288230376151711743
|-FunctionDecl 0x22150955788 <line:141:1, line:152:1> line:141:13 used bin66_to_felem 'void (limb *, const u8 *)' static
| |-ParmVarDecl 0x22150955510 <col:28, col:34> col:34 used out 'limb *':'limb *'
| |-ParmVarDecl 0x22150955680 <col:39, col:53> col:48 used in 'const u8 *':'const u8 *'
| `-CompoundStmt 0x22150956e88 <line:142:1, line:152:1>
|   |-BinaryOperator 0x22150955a68 <line:143:5, col:38> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x221509558b0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x22150955898 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x22150955850 <col:5> 'limb *':'limb *' lvalue ParmVar 0x22150955510 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x22150955870 <col:9> 'int' 0
|   | `-BinaryOperator 0x22150955a48 <col:14, col:38> 'int' '&'
|   |   |-ImplicitCastExpr 0x22150955a18 <col:14, col:34> 'limb':'int' <LValueToRValue>
|   |   | `-ParenExpr 0x221509559d8 <col:14, col:34> 'limb':'int' lvalue
|   |   |   `-UnaryOperator 0x221509559c0 <col:15, col:33> 'limb':'int' lvalue prefix '*' cannot overflow
|   |   |     `-ParenExpr 0x221509559a0 <col:16, col:33> 'limb *'
|   |   |       `-CStyleCastExpr 0x22150955978 <col:17, col:32> 'limb *' <NoOp>
|   |   |         `-UnaryOperator 0x22150955950 <col:26, col:32> 'const u8 *' prefix '&' cannot overflow
|   |   |           `-ArraySubscriptExpr 0x22150955930 <col:28, col:32> 'const u8':'const int' lvalue
|   |   |             |-ImplicitCastExpr 0x22150955918 <col:28> 'const u8 *':'const u8 *' <LValueToRValue>
|   |   |             | `-DeclRefExpr 0x221509558d0 <col:28> 'const u8 *':'const u8 *' lvalue ParmVar 0x22150955680 'in' 'const u8 *':'const u8 *'
|   |   |             `-IntegerLiteral 0x221509558f0 <col:31> 'int' 0
|   |   `-ImplicitCastExpr 0x22150955a30 <col:38> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x221509559f8 <col:38> 'const limb':'const int' lvalue Var 0x221509553c0 'bottom58bits' 'const limb':'const int'
|   |-BinaryOperator 0x22150955d30 <line:144:5, col:43> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x22150955b30 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x22150955b18 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x22150955ad0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x22150955510 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x22150955af0 <col:9> 'int' 1
|   | `-BinaryOperator 0x22150955d10 <col:14, col:43> 'int' '&'
|   |   |-ParenExpr 0x22150955cb8 <col:14, col:39> 'limb':'int'
|   |   | `-BinaryOperator 0x22150955c98 <col:15, col:38> 'limb':'int' '>>'
|   |   |   |-ImplicitCastExpr 0x22150955c80 <col:15, col:33> 'limb':'int' <LValueToRValue>
|   |   |   | `-UnaryOperator 0x22150955c40 <col:15, col:33> 'limb':'int' lvalue prefix '*' cannot overflow
|   |   |   |   `-ParenExpr 0x22150955c20 <col:16, col:33> 'limb *'
|   |   |   |     `-CStyleCastExpr 0x22150955bf8 <col:17, col:32> 'limb *' <NoOp>
|   |   |   |       `-UnaryOperator 0x22150955bd0 <col:26, col:32> 'const u8 *' prefix '&' cannot overflow
|   |   |   |         `-ArraySubscriptExpr 0x22150955bb0 <col:28, col:32> 'const u8':'const int' lvalue
|   |   |   |           |-ImplicitCastExpr 0x22150955b98 <col:28> 'const u8 *':'const u8 *' <LValueToRValue>
|   |   |   |           | `-DeclRefExpr 0x22150955b50 <col:28> 'const u8 *':'const u8 *' lvalue ParmVar 0x22150955680 'in' 'const u8 *':'const u8 *'
|   |   |   |           `-IntegerLiteral 0x22150955b70 <col:31> 'int' 7
|   |   |   `-IntegerLiteral 0x22150955c58 <col:38> 'int' 2
|   |   `-ImplicitCastExpr 0x22150955cf8 <col:43> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x22150955cd8 <col:43> 'const limb':'const int' lvalue Var 0x221509553c0 'bottom58bits' 'const limb':'const int'
|   |-BinaryOperator 0x22150955fb0 <line:145:5, col:44> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x22150955db0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x22150955d98 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x22150955d50 <col:5> 'limb *':'limb *' lvalue ParmVar 0x22150955510 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x22150955d70 <col:9> 'int' 2
|   | `-BinaryOperator 0x22150955f90 <col:14, col:44> 'int' '&'
|   |   |-ParenExpr 0x22150955f38 <col:14, col:40> 'limb':'int'
|   |   | `-BinaryOperator 0x22150955f18 <col:15, col:39> 'limb':'int' '>>'
|   |   |   |-ImplicitCastExpr 0x22150955f00 <col:15, col:34> 'limb':'int' <LValueToRValue>
|   |   |   | `-UnaryOperator 0x22150955ec0 <col:15, col:34> 'limb':'int' lvalue prefix '*' cannot overflow
|   |   |   |   `-ParenExpr 0x22150955ea0 <col:16, col:34> 'limb *'
|   |   |   |     `-CStyleCastExpr 0x22150955e78 <col:17, col:33> 'limb *' <NoOp>
|   |   |   |       `-UnaryOperator 0x22150955e50 <col:26, col:33> 'const u8 *' prefix '&' cannot overflow
|   |   |   |         `-ArraySubscriptExpr 0x22150955e30 <col:28, col:33> 'const u8':'const int' lvalue
|   |   |   |           |-ImplicitCastExpr 0x22150955e18 <col:28> 'const u8 *':'const u8 *' <LValueToRValue>
|   |   |   |           | `-DeclRefExpr 0x22150955dd0 <col:28> 'const u8 *':'const u8 *' lvalue ParmVar 0x22150955680 'in' 'const u8 *':'const u8 *'
|   |   |   |           `-IntegerLiteral 0x22150955df0 <col:31> 'int' 14
|   |   |   `-IntegerLiteral 0x22150955ed8 <col:39> 'int' 4
|   |   `-ImplicitCastExpr 0x22150955f78 <col:44> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x22150955f58 <col:44> 'const limb':'const int' lvalue Var 0x221509553c0 'bottom58bits' 'const limb':'const int'
|   |-BinaryOperator 0x22150956230 <line:146:5, col:44> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x22150956030 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x22150956018 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x22150955fd0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x22150955510 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x22150955ff0 <col:9> 'int' 3
|   | `-BinaryOperator 0x22150956210 <col:14, col:44> 'int' '&'
|   |   |-ParenExpr 0x221509561b8 <col:14, col:40> 'limb':'int'
|   |   | `-BinaryOperator 0x22150956198 <col:15, col:39> 'limb':'int' '>>'
|   |   |   |-ImplicitCastExpr 0x22150956180 <col:15, col:34> 'limb':'int' <LValueToRValue>
|   |   |   | `-UnaryOperator 0x22150956140 <col:15, col:34> 'limb':'int' lvalue prefix '*' cannot overflow
|   |   |   |   `-ParenExpr 0x22150956120 <col:16, col:34> 'limb *'
|   |   |   |     `-CStyleCastExpr 0x221509560f8 <col:17, col:33> 'limb *' <NoOp>
|   |   |   |       `-UnaryOperator 0x221509560d0 <col:26, col:33> 'const u8 *' prefix '&' cannot overflow
|   |   |   |         `-ArraySubscriptExpr 0x221509560b0 <col:28, col:33> 'const u8':'const int' lvalue
|   |   |   |           |-ImplicitCastExpr 0x22150956098 <col:28> 'const u8 *':'const u8 *' <LValueToRValue>
|   |   |   |           | `-DeclRefExpr 0x22150956050 <col:28> 'const u8 *':'const u8 *' lvalue ParmVar 0x22150955680 'in' 'const u8 *':'const u8 *'
|   |   |   |           `-IntegerLiteral 0x22150956070 <col:31> 'int' 21
|   |   |   `-IntegerLiteral 0x22150956158 <col:39> 'int' 6
|   |   `-ImplicitCastExpr 0x221509561f8 <col:44> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x221509561d8 <col:44> 'const limb':'const int' lvalue Var 0x221509553c0 'bottom58bits' 'const limb':'const int'
|   |-BinaryOperator 0x22150956468 <line:147:5, col:39> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x221509562b0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x22150956298 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x22150956250 <col:5> 'limb *':'limb *' lvalue ParmVar 0x22150955510 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x22150956270 <col:9> 'int' 4
|   | `-BinaryOperator 0x22150956448 <col:14, col:39> 'int' '&'
|   |   |-ImplicitCastExpr 0x22150956418 <col:14, col:35> 'limb':'int' <LValueToRValue>
|   |   | `-ParenExpr 0x221509563d8 <col:14, col:35> 'limb':'int' lvalue
|   |   |   `-UnaryOperator 0x221509563c0 <col:15, col:34> 'limb':'int' lvalue prefix '*' cannot overflow
|   |   |     `-ParenExpr 0x221509563a0 <col:16, col:34> 'limb *'
|   |   |       `-CStyleCastExpr 0x22150956378 <col:17, col:33> 'limb *' <NoOp>
|   |   |         `-UnaryOperator 0x22150956350 <col:26, col:33> 'const u8 *' prefix '&' cannot overflow
|   |   |           `-ArraySubscriptExpr 0x22150956330 <col:28, col:33> 'const u8':'const int' lvalue
|   |   |             |-ImplicitCastExpr 0x22150956318 <col:28> 'const u8 *':'const u8 *' <LValueToRValue>
|   |   |             | `-DeclRefExpr 0x221509562d0 <col:28> 'const u8 *':'const u8 *' lvalue ParmVar 0x22150955680 'in' 'const u8 *':'const u8 *'
|   |   |             `-IntegerLiteral 0x221509562f0 <col:31> 'int' 29
|   |   `-ImplicitCastExpr 0x22150956430 <col:39> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x221509563f8 <col:39> 'const limb':'const int' lvalue Var 0x221509553c0 'bottom58bits' 'const limb':'const int'
|   |-BinaryOperator 0x221509566e8 <line:148:5, col:44> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x221509564e8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x221509564d0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x22150956488 <col:5> 'limb *':'limb *' lvalue ParmVar 0x22150955510 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x221509564a8 <col:9> 'int' 5
|   | `-BinaryOperator 0x221509566c8 <col:14, col:44> 'int' '&'
|   |   |-ParenExpr 0x22150956670 <col:14, col:40> 'limb':'int'
|   |   | `-BinaryOperator 0x22150956650 <col:15, col:39> 'limb':'int' '>>'
|   |   |   |-ImplicitCastExpr 0x22150956638 <col:15, col:34> 'limb':'int' <LValueToRValue>
|   |   |   | `-UnaryOperator 0x221509565f8 <col:15, col:34> 'limb':'int' lvalue prefix '*' cannot overflow
|   |   |   |   `-ParenExpr 0x221509565d8 <col:16, col:34> 'limb *'
|   |   |   |     `-CStyleCastExpr 0x221509565b0 <col:17, col:33> 'limb *' <NoOp>
|   |   |   |       `-UnaryOperator 0x22150956588 <col:26, col:33> 'const u8 *' prefix '&' cannot overflow
|   |   |   |         `-ArraySubscriptExpr 0x22150956568 <col:28, col:33> 'const u8':'const int' lvalue
|   |   |   |           |-ImplicitCastExpr 0x22150956550 <col:28> 'const u8 *':'const u8 *' <LValueToRValue>
|   |   |   |           | `-DeclRefExpr 0x22150956508 <col:28> 'const u8 *':'const u8 *' lvalue ParmVar 0x22150955680 'in' 'const u8 *':'const u8 *'
|   |   |   |           `-IntegerLiteral 0x22150956528 <col:31> 'int' 36
|   |   |   `-IntegerLiteral 0x22150956610 <col:39> 'int' 2
|   |   `-ImplicitCastExpr 0x221509566b0 <col:44> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x22150956690 <col:44> 'const limb':'const int' lvalue Var 0x221509553c0 'bottom58bits' 'const limb':'const int'
|   |-BinaryOperator 0x22150956968 <line:149:5, col:44> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x22150956768 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x22150956750 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x22150956708 <col:5> 'limb *':'limb *' lvalue ParmVar 0x22150955510 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x22150956728 <col:9> 'int' 6
|   | `-BinaryOperator 0x22150956948 <col:14, col:44> 'int' '&'
|   |   |-ParenExpr 0x221509568f0 <col:14, col:40> 'limb':'int'
|   |   | `-BinaryOperator 0x221509568d0 <col:15, col:39> 'limb':'int' '>>'
|   |   |   |-ImplicitCastExpr 0x221509568b8 <col:15, col:34> 'limb':'int' <LValueToRValue>
|   |   |   | `-UnaryOperator 0x22150956878 <col:15, col:34> 'limb':'int' lvalue prefix '*' cannot overflow
|   |   |   |   `-ParenExpr 0x22150956858 <col:16, col:34> 'limb *'
|   |   |   |     `-CStyleCastExpr 0x22150956830 <col:17, col:33> 'limb *' <NoOp>
|   |   |   |       `-UnaryOperator 0x22150956808 <col:26, col:33> 'const u8 *' prefix '&' cannot overflow
|   |   |   |         `-ArraySubscriptExpr 0x221509567e8 <col:28, col:33> 'const u8':'const int' lvalue
|   |   |   |           |-ImplicitCastExpr 0x221509567d0 <col:28> 'const u8 *':'const u8 *' <LValueToRValue>
|   |   |   |           | `-DeclRefExpr 0x22150956788 <col:28> 'const u8 *':'const u8 *' lvalue ParmVar 0x22150955680 'in' 'const u8 *':'const u8 *'
|   |   |   |           `-IntegerLiteral 0x221509567a8 <col:31> 'int' 43
|   |   |   `-IntegerLiteral 0x22150956890 <col:39> 'int' 4
|   |   `-ImplicitCastExpr 0x22150956930 <col:44> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x22150956910 <col:44> 'const limb':'const int' lvalue Var 0x221509553c0 'bottom58bits' 'const limb':'const int'
|   |-BinaryOperator 0x22150956be8 <line:150:5, col:44> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x221509569e8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x221509569d0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x22150956988 <col:5> 'limb *':'limb *' lvalue ParmVar 0x22150955510 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x221509569a8 <col:9> 'int' 7
|   | `-BinaryOperator 0x22150956bc8 <col:14, col:44> 'int' '&'
|   |   |-ParenExpr 0x22150956b70 <col:14, col:40> 'limb':'int'
|   |   | `-BinaryOperator 0x22150956b50 <col:15, col:39> 'limb':'int' '>>'
|   |   |   |-ImplicitCastExpr 0x22150956b38 <col:15, col:34> 'limb':'int' <LValueToRValue>
|   |   |   | `-UnaryOperator 0x22150956af8 <col:15, col:34> 'limb':'int' lvalue prefix '*' cannot overflow
|   |   |   |   `-ParenExpr 0x22150956ad8 <col:16, col:34> 'limb *'
|   |   |   |     `-CStyleCastExpr 0x22150956ab0 <col:17, col:33> 'limb *' <NoOp>
|   |   |   |       `-UnaryOperator 0x22150956a88 <col:26, col:33> 'const u8 *' prefix '&' cannot overflow
|   |   |   |         `-ArraySubscriptExpr 0x22150956a68 <col:28, col:33> 'const u8':'const int' lvalue
|   |   |   |           |-ImplicitCastExpr 0x22150956a50 <col:28> 'const u8 *':'const u8 *' <LValueToRValue>
|   |   |   |           | `-DeclRefExpr 0x22150956a08 <col:28> 'const u8 *':'const u8 *' lvalue ParmVar 0x22150955680 'in' 'const u8 *':'const u8 *'
|   |   |   |           `-IntegerLiteral 0x22150956a28 <col:31> 'int' 50
|   |   |   `-IntegerLiteral 0x22150956b10 <col:39> 'int' 6
|   |   `-ImplicitCastExpr 0x22150956bb0 <col:44> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x22150956b90 <col:44> 'const limb':'const int' lvalue Var 0x221509553c0 'bottom58bits' 'const limb':'const int'
|   `-BinaryOperator 0x22150956e20 <line:151:5, col:39> 'limb':'int' '='
|     |-ArraySubscriptExpr 0x22150956c68 <col:5, col:10> 'limb':'int' lvalue
|     | |-ImplicitCastExpr 0x22150956c50 <col:5> 'limb *':'limb *' <LValueToRValue>
|     | | `-DeclRefExpr 0x22150956c08 <col:5> 'limb *':'limb *' lvalue ParmVar 0x22150955510 'out' 'limb *':'limb *'
|     | `-IntegerLiteral 0x22150956c28 <col:9> 'int' 8
|     `-BinaryOperator 0x22150956e00 <col:14, col:39> 'int' '&'
|       |-ImplicitCastExpr 0x22150956dd0 <col:14, col:35> 'limb':'int' <LValueToRValue>
|       | `-ParenExpr 0x22150956d90 <col:14, col:35> 'limb':'int' lvalue
|       |   `-UnaryOperator 0x22150956d78 <col:15, col:34> 'limb':'int' lvalue prefix '*' cannot overflow
|       |     `-ParenExpr 0x22150956d58 <col:16, col:34> 'limb *'
|       |       `-CStyleCastExpr 0x22150956d30 <col:17, col:33> 'limb *' <NoOp>
|       |         `-UnaryOperator 0x22150956d08 <col:26, col:33> 'const u8 *' prefix '&' cannot overflow
|       |           `-ArraySubscriptExpr 0x22150956ce8 <col:28, col:33> 'const u8':'const int' lvalue
|       |             |-ImplicitCastExpr 0x22150956cd0 <col:28> 'const u8 *':'const u8 *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x22150956c88 <col:28> 'const u8 *':'const u8 *' lvalue ParmVar 0x22150955680 'in' 'const u8 *':'const u8 *'
|       |             `-IntegerLiteral 0x22150956ca8 <col:31> 'int' 58
|       `-ImplicitCastExpr 0x22150956de8 <col:39> 'limb':'int' <LValueToRValue>
|         `-DeclRefExpr 0x22150956db0 <col:39> 'const limb':'const int' lvalue Var 0x221509552f0 'bottom57bits' 'const limb':'const int'
|-FunctionDecl 0x221509571c8 <line:158:1, line:170:1> line:158:13 used felem_to_bin66 'void (u8 *, const limb *)' static
| |-ParmVarDecl 0x22150956fa0 <col:28, col:37> col:31 used out 'u8 *':'u8 *'
| |-ParmVarDecl 0x221509570c0 <col:40, col:52> col:52 used in 'const limb *':'const limb *'
| `-CompoundStmt 0x22150958708 <line:159:1, line:170:1>
|   |-CallExpr 0x22150957380 <line:160:5, col:22> 'void *'
|   | |-ImplicitCastExpr 0x22150957368 <col:5> 'void *(*)(void *, int, unsigned long long)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150957290 <col:5> 'void *(void *, int, unsigned long long)' Function 0x221508f8da8 'memset' 'void *(void *, int, unsigned long long)'
|   | |-ImplicitCastExpr 0x221509573d0 <col:12> 'void *' <BitCast>
|   | | `-ImplicitCastExpr 0x221509573b8 <col:12> 'u8 *':'u8 *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x221509572b0 <col:12> 'u8 *':'u8 *' lvalue ParmVar 0x22150956fa0 'out' 'u8 *':'u8 *'
|   | |-IntegerLiteral 0x221509572d0 <col:17> 'int' 0
|   | `-ImplicitCastExpr 0x221509573e8 <col:20> 'unsigned long long' <IntegralCast>
|   |   `-IntegerLiteral 0x221509572f8 <col:20> 'int' 66
|   |-BinaryOperator 0x221509575c0 <line:161:5, col:34> 'limb':'int' '='
|   | |-ParenExpr 0x22150957508 <col:5, col:26> 'limb':'int' lvalue
|   | | `-UnaryOperator 0x221509574f0 <col:6, col:25> 'limb':'int' lvalue prefix '*' cannot overflow
|   | |   `-ParenExpr 0x221509574d0 <col:7, col:25> 'limb *'
|   | |     `-CStyleCastExpr 0x221509574a8 <col:8, col:24> 'limb *' <NoOp>
|   | |       `-UnaryOperator 0x22150957480 <col:17, col:24> 'u8 *' prefix '&' cannot overflow
|   | |         `-ArraySubscriptExpr 0x22150957460 <col:19, col:24> 'u8':'int' lvalue
|   | |           |-ImplicitCastExpr 0x22150957448 <col:19> 'u8 *':'u8 *' <LValueToRValue>
|   | |           | `-DeclRefExpr 0x22150957400 <col:19> 'u8 *':'u8 *' lvalue ParmVar 0x22150956fa0 'out' 'u8 *':'u8 *'
|   | |           `-IntegerLiteral 0x22150957420 <col:23> 'int' 0
|   | `-ImplicitCastExpr 0x221509575a8 <col:30, col:34> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x22150957588 <col:30, col:34> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x22150957570 <col:30> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x22150957528 <col:30> 'const limb *':'const limb *' lvalue ParmVar 0x221509570c0 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x22150957548 <col:33> 'int' 0
|   |-CompoundAssignOperator 0x22150957800 <line:162:5, col:40> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ParenExpr 0x22150957700 <col:5, col:26> 'limb':'int' lvalue
|   | | `-UnaryOperator 0x221509576e8 <col:6, col:25> 'limb':'int' lvalue prefix '*' cannot overflow
|   | |   `-ParenExpr 0x221509576c8 <col:7, col:25> 'limb *'
|   | |     `-CStyleCastExpr 0x221509576a0 <col:8, col:24> 'limb *' <NoOp>
|   | |       `-UnaryOperator 0x22150957660 <col:17, col:24> 'u8 *' prefix '&' cannot overflow
|   | |         `-ArraySubscriptExpr 0x22150957640 <col:19, col:24> 'u8':'int' lvalue
|   | |           |-ImplicitCastExpr 0x22150957628 <col:19> 'u8 *':'u8 *' <LValueToRValue>
|   | |           | `-DeclRefExpr 0x221509575e0 <col:19> 'u8 *':'u8 *' lvalue ParmVar 0x22150956fa0 'out' 'u8 *':'u8 *'
|   | |           `-IntegerLiteral 0x22150957600 <col:23> 'int' 7
|   | `-BinaryOperator 0x221509577e0 <col:31, col:40> 'limb':'int' '<<'
|   |   |-ImplicitCastExpr 0x221509577c8 <col:31, col:35> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x22150957780 <col:31, col:35> 'const limb':'const int' lvalue
|   |   |   |-ImplicitCastExpr 0x22150957768 <col:31> 'const limb *':'const limb *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x22150957720 <col:31> 'const limb *':'const limb *' lvalue ParmVar 0x221509570c0 'in' 'const limb *':'const limb *'
|   |   |   `-IntegerLiteral 0x22150957740 <col:34> 'int' 1
|   |   `-IntegerLiteral 0x221509577a0 <col:40> 'int' 2
|   |-CompoundAssignOperator 0x22150957a38 <line:163:5, col:41> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ParenExpr 0x22150957938 <col:5, col:27> 'limb':'int' lvalue
|   | | `-UnaryOperator 0x22150957920 <col:6, col:26> 'limb':'int' lvalue prefix '*' cannot overflow
|   | |   `-ParenExpr 0x22150957900 <col:7, col:26> 'limb *'
|   | |     `-CStyleCastExpr 0x221509578d8 <col:8, col:25> 'limb *' <NoOp>
|   | |       `-UnaryOperator 0x221509578b0 <col:17, col:25> 'u8 *' prefix '&' cannot overflow
|   | |         `-ArraySubscriptExpr 0x22150957890 <col:19, col:25> 'u8':'int' lvalue
|   | |           |-ImplicitCastExpr 0x22150957878 <col:19> 'u8 *':'u8 *' <LValueToRValue>
|   | |           | `-DeclRefExpr 0x22150957830 <col:19> 'u8 *':'u8 *' lvalue ParmVar 0x22150956fa0 'out' 'u8 *':'u8 *'
|   | |           `-IntegerLiteral 0x22150957850 <col:23> 'int' 14
|   | `-BinaryOperator 0x22150957a18 <col:32, col:41> 'limb':'int' '<<'
|   |   |-ImplicitCastExpr 0x22150957a00 <col:32, col:36> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x221509579b8 <col:32, col:36> 'const limb':'const int' lvalue
|   |   |   |-ImplicitCastExpr 0x221509579a0 <col:32> 'const limb *':'const limb *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x22150957958 <col:32> 'const limb *':'const limb *' lvalue ParmVar 0x221509570c0 'in' 'const limb *':'const limb *'
|   |   |   `-IntegerLiteral 0x22150957978 <col:35> 'int' 2
|   |   `-IntegerLiteral 0x221509579d8 <col:41> 'int' 4
|   |-CompoundAssignOperator 0x22150957c70 <line:164:5, col:41> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ParenExpr 0x22150957b70 <col:5, col:27> 'limb':'int' lvalue
|   | | `-UnaryOperator 0x22150957b58 <col:6, col:26> 'limb':'int' lvalue prefix '*' cannot overflow
|   | |   `-ParenExpr 0x22150957b38 <col:7, col:26> 'limb *'
|   | |     `-CStyleCastExpr 0x22150957b10 <col:8, col:25> 'limb *' <NoOp>
|   | |       `-UnaryOperator 0x22150957ae8 <col:17, col:25> 'u8 *' prefix '&' cannot overflow
|   | |         `-ArraySubscriptExpr 0x22150957ac8 <col:19, col:25> 'u8':'int' lvalue
|   | |           |-ImplicitCastExpr 0x22150957ab0 <col:19> 'u8 *':'u8 *' <LValueToRValue>
|   | |           | `-DeclRefExpr 0x22150957a68 <col:19> 'u8 *':'u8 *' lvalue ParmVar 0x22150956fa0 'out' 'u8 *':'u8 *'
|   | |           `-IntegerLiteral 0x22150957a88 <col:23> 'int' 21
|   | `-BinaryOperator 0x22150957c50 <col:32, col:41> 'limb':'int' '<<'
|   |   |-ImplicitCastExpr 0x22150957c38 <col:32, col:36> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x22150957bf0 <col:32, col:36> 'const limb':'const int' lvalue
|   |   |   |-ImplicitCastExpr 0x22150957bd8 <col:32> 'const limb *':'const limb *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x22150957b90 <col:32> 'const limb *':'const limb *' lvalue ParmVar 0x221509570c0 'in' 'const limb *':'const limb *'
|   |   |   `-IntegerLiteral 0x22150957bb0 <col:35> 'int' 3
|   |   `-IntegerLiteral 0x22150957c10 <col:41> 'int' 6
|   |-BinaryOperator 0x22150957e60 <line:165:5, col:35> 'limb':'int' '='
|   | |-ParenExpr 0x22150957da8 <col:5, col:27> 'limb':'int' lvalue
|   | | `-UnaryOperator 0x22150957d90 <col:6, col:26> 'limb':'int' lvalue prefix '*' cannot overflow
|   | |   `-ParenExpr 0x22150957d70 <col:7, col:26> 'limb *'
|   | |     `-CStyleCastExpr 0x22150957d48 <col:8, col:25> 'limb *' <NoOp>
|   | |       `-UnaryOperator 0x22150957d20 <col:17, col:25> 'u8 *' prefix '&' cannot overflow
|   | |         `-ArraySubscriptExpr 0x22150957d00 <col:19, col:25> 'u8':'int' lvalue
|   | |           |-ImplicitCastExpr 0x22150957ce8 <col:19> 'u8 *':'u8 *' <LValueToRValue>
|   | |           | `-DeclRefExpr 0x22150957ca0 <col:19> 'u8 *':'u8 *' lvalue ParmVar 0x22150956fa0 'out' 'u8 *':'u8 *'
|   | |           `-IntegerLiteral 0x22150957cc0 <col:23> 'int' 29
|   | `-ImplicitCastExpr 0x22150957e48 <col:31, col:35> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x22150957e28 <col:31, col:35> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x22150957e10 <col:31> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x22150957dc8 <col:31> 'const limb *':'const limb *' lvalue ParmVar 0x221509570c0 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x22150957de8 <col:34> 'int' 4
|   |-CompoundAssignOperator 0x22150958088 <line:166:5, col:41> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ParenExpr 0x22150957f88 <col:5, col:27> 'limb':'int' lvalue
|   | | `-UnaryOperator 0x22150957f70 <col:6, col:26> 'limb':'int' lvalue prefix '*' cannot overflow
|   | |   `-ParenExpr 0x22150957f50 <col:7, col:26> 'limb *'
|   | |     `-CStyleCastExpr 0x22150957f28 <col:8, col:25> 'limb *' <NoOp>
|   | |       `-UnaryOperator 0x22150957f00 <col:17, col:25> 'u8 *' prefix '&' cannot overflow
|   | |         `-ArraySubscriptExpr 0x22150957ee0 <col:19, col:25> 'u8':'int' lvalue
|   | |           |-ImplicitCastExpr 0x22150957ec8 <col:19> 'u8 *':'u8 *' <LValueToRValue>
|   | |           | `-DeclRefExpr 0x22150957e80 <col:19> 'u8 *':'u8 *' lvalue ParmVar 0x22150956fa0 'out' 'u8 *':'u8 *'
|   | |           `-IntegerLiteral 0x22150957ea0 <col:23> 'int' 36
|   | `-BinaryOperator 0x22150958068 <col:32, col:41> 'limb':'int' '<<'
|   |   |-ImplicitCastExpr 0x22150958050 <col:32, col:36> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x22150958008 <col:32, col:36> 'const limb':'const int' lvalue
|   |   |   |-ImplicitCastExpr 0x22150957ff0 <col:32> 'const limb *':'const limb *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x22150957fa8 <col:32> 'const limb *':'const limb *' lvalue ParmVar 0x221509570c0 'in' 'const limb *':'const limb *'
|   |   |   `-IntegerLiteral 0x22150957fc8 <col:35> 'int' 5
|   |   `-IntegerLiteral 0x22150958028 <col:41> 'int' 2
|   |-CompoundAssignOperator 0x221509582c0 <line:167:5, col:41> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ParenExpr 0x221509581c0 <col:5, col:27> 'limb':'int' lvalue
|   | | `-UnaryOperator 0x221509581a8 <col:6, col:26> 'limb':'int' lvalue prefix '*' cannot overflow
|   | |   `-ParenExpr 0x22150958188 <col:7, col:26> 'limb *'
|   | |     `-CStyleCastExpr 0x22150958160 <col:8, col:25> 'limb *' <NoOp>
|   | |       `-UnaryOperator 0x22150958138 <col:17, col:25> 'u8 *' prefix '&' cannot overflow
|   | |         `-ArraySubscriptExpr 0x22150958118 <col:19, col:25> 'u8':'int' lvalue
|   | |           |-ImplicitCastExpr 0x22150958100 <col:19> 'u8 *':'u8 *' <LValueToRValue>
|   | |           | `-DeclRefExpr 0x221509580b8 <col:19> 'u8 *':'u8 *' lvalue ParmVar 0x22150956fa0 'out' 'u8 *':'u8 *'
|   | |           `-IntegerLiteral 0x221509580d8 <col:23> 'int' 43
|   | `-BinaryOperator 0x221509582a0 <col:32, col:41> 'limb':'int' '<<'
|   |   |-ImplicitCastExpr 0x22150958288 <col:32, col:36> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x22150958240 <col:32, col:36> 'const limb':'const int' lvalue
|   |   |   |-ImplicitCastExpr 0x22150958228 <col:32> 'const limb *':'const limb *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x221509581e0 <col:32> 'const limb *':'const limb *' lvalue ParmVar 0x221509570c0 'in' 'const limb *':'const limb *'
|   |   |   `-IntegerLiteral 0x22150958200 <col:35> 'int' 6
|   |   `-IntegerLiteral 0x22150958260 <col:41> 'int' 4
|   |-CompoundAssignOperator 0x221509584f8 <line:168:5, col:41> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ParenExpr 0x221509583f8 <col:5, col:27> 'limb':'int' lvalue
|   | | `-UnaryOperator 0x221509583e0 <col:6, col:26> 'limb':'int' lvalue prefix '*' cannot overflow
|   | |   `-ParenExpr 0x221509583c0 <col:7, col:26> 'limb *'
|   | |     `-CStyleCastExpr 0x22150958398 <col:8, col:25> 'limb *' <NoOp>
|   | |       `-UnaryOperator 0x22150958370 <col:17, col:25> 'u8 *' prefix '&' cannot overflow
|   | |         `-ArraySubscriptExpr 0x22150958350 <col:19, col:25> 'u8':'int' lvalue
|   | |           |-ImplicitCastExpr 0x22150958338 <col:19> 'u8 *':'u8 *' <LValueToRValue>
|   | |           | `-DeclRefExpr 0x221509582f0 <col:19> 'u8 *':'u8 *' lvalue ParmVar 0x22150956fa0 'out' 'u8 *':'u8 *'
|   | |           `-IntegerLiteral 0x22150958310 <col:23> 'int' 50
|   | `-BinaryOperator 0x221509584d8 <col:32, col:41> 'limb':'int' '<<'
|   |   |-ImplicitCastExpr 0x221509584c0 <col:32, col:36> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x22150958478 <col:32, col:36> 'const limb':'const int' lvalue
|   |   |   |-ImplicitCastExpr 0x22150958460 <col:32> 'const limb *':'const limb *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x22150958418 <col:32> 'const limb *':'const limb *' lvalue ParmVar 0x221509570c0 'in' 'const limb *':'const limb *'
|   |   |   `-IntegerLiteral 0x22150958438 <col:35> 'int' 7
|   |   `-IntegerLiteral 0x22150958498 <col:41> 'int' 6
|   `-BinaryOperator 0x221509586e8 <line:169:5, col:35> 'limb':'int' '='
|     |-ParenExpr 0x22150958630 <col:5, col:27> 'limb':'int' lvalue
|     | `-UnaryOperator 0x22150958618 <col:6, col:26> 'limb':'int' lvalue prefix '*' cannot overflow
|     |   `-ParenExpr 0x221509585f8 <col:7, col:26> 'limb *'
|     |     `-CStyleCastExpr 0x221509585d0 <col:8, col:25> 'limb *' <NoOp>
|     |       `-UnaryOperator 0x221509585a8 <col:17, col:25> 'u8 *' prefix '&' cannot overflow
|     |         `-ArraySubscriptExpr 0x22150958588 <col:19, col:25> 'u8':'int' lvalue
|     |           |-ImplicitCastExpr 0x22150958570 <col:19> 'u8 *':'u8 *' <LValueToRValue>
|     |           | `-DeclRefExpr 0x22150958528 <col:19> 'u8 *':'u8 *' lvalue ParmVar 0x22150956fa0 'out' 'u8 *':'u8 *'
|     |           `-IntegerLiteral 0x22150958548 <col:23> 'int' 58
|     `-ImplicitCastExpr 0x221509586d0 <col:31, col:35> 'limb':'int' <LValueToRValue>
|       `-ArraySubscriptExpr 0x221509586b0 <col:31, col:35> 'const limb':'const int' lvalue
|         |-ImplicitCastExpr 0x22150958698 <col:31> 'const limb *':'const limb *' <LValueToRValue>
|         | `-DeclRefExpr 0x22150958650 <col:31> 'const limb *':'const limb *' lvalue ParmVar 0x221509570c0 'in' 'const limb *':'const limb *'
|         `-IntegerLiteral 0x22150958670 <col:34> 'int' 8
|-FunctionDecl 0x221509589d8 <line:173:1, line:178:1> line:173:13 used flip_endian 'void (u8 *, const u8 *, unsigned int)' static
| |-ParmVarDecl 0x22150958778 <col:25, col:29> col:29 used out 'u8 *'
| |-ParmVarDecl 0x221509587f0 <col:34, col:44> col:44 used in 'const u8 *'
| |-ParmVarDecl 0x22150958870 <col:48, col:57> col:57 used len 'unsigned int'
| `-CompoundStmt 0x22150958ee8 <line:174:1, line:178:1>
|   |-DeclStmt 0x22150958b28 <line:175:5, col:15>
|   | `-VarDecl 0x22150958ac0 <col:5, col:14> col:14 used i 'unsigned int'
|   `-ForStmt 0x22150958eb0 <line:176:5, line:177:32>
|     |-BinaryOperator 0x22150958bb8 <line:176:10, col:14> 'unsigned int' '='
|     | |-DeclRefExpr 0x22150958b40 <col:10> 'unsigned int' lvalue Var 0x22150958ac0 'i' 'unsigned int'
|     | `-ImplicitCastExpr 0x22150958ba0 <col:14> 'unsigned int' <IntegralCast>
|     |   `-IntegerLiteral 0x22150958b78 <col:14> 'int' 0
|     |-<<<NULL>>>
|     |-BinaryOperator 0x22150958c48 <col:17, col:21> 'int' '<'
|     | |-ImplicitCastExpr 0x22150958c18 <col:17> 'unsigned int' <LValueToRValue>
|     | | `-DeclRefExpr 0x22150958bd8 <col:17> 'unsigned int' lvalue Var 0x22150958ac0 'i' 'unsigned int'
|     | `-ImplicitCastExpr 0x22150958c30 <col:21> 'unsigned int' <LValueToRValue>
|     |   `-DeclRefExpr 0x22150958bf8 <col:21> 'unsigned int' lvalue ParmVar 0x22150958870 'len' 'unsigned int'
|     |-UnaryOperator 0x22150958c88 <col:26, col:28> 'unsigned int' prefix '++'
|     | `-DeclRefExpr 0x22150958c68 <col:28> 'unsigned int' lvalue Var 0x22150958ac0 'i' 'unsigned int'
|     `-BinaryOperator 0x22150958e90 <line:177:9, col:32> 'u8':'int' '='
|       |-ArraySubscriptExpr 0x22150958d10 <col:9, col:14> 'u8':'int' lvalue
|       | |-ImplicitCastExpr 0x22150958ce0 <col:9> 'u8 *' <LValueToRValue>
|       | | `-DeclRefExpr 0x22150958ca0 <col:9> 'u8 *' lvalue ParmVar 0x22150958778 'out' 'u8 *'
|       | `-ImplicitCastExpr 0x22150958cf8 <col:13> 'unsigned int' <LValueToRValue>
|       |   `-DeclRefExpr 0x22150958cc0 <col:13> 'unsigned int' lvalue Var 0x22150958ac0 'i' 'unsigned int'
|       `-ImplicitCastExpr 0x22150958e78 <col:18, col:32> 'u8':'int' <LValueToRValue>
|         `-ArraySubscriptExpr 0x22150958e58 <col:18, col:32> 'const u8':'const int' lvalue
|           |-ImplicitCastExpr 0x22150958e40 <col:18> 'const u8 *' <LValueToRValue>
|           | `-DeclRefExpr 0x22150958d30 <col:18> 'const u8 *' lvalue ParmVar 0x221509587f0 'in' 'const u8 *'
|           `-BinaryOperator 0x22150958e20 <col:21, col:31> 'unsigned int' '-'
|             |-BinaryOperator 0x22150958dc8 <col:21, col:27> 'unsigned int' '-'
|             | |-ImplicitCastExpr 0x22150958d98 <col:21> 'unsigned int' <LValueToRValue>
|             | | `-DeclRefExpr 0x22150958d50 <col:21> 'unsigned int' lvalue ParmVar 0x22150958870 'len' 'unsigned int'
|             | `-ImplicitCastExpr 0x22150958db0 <col:27> 'unsigned int' <IntegralCast>
|             |   `-IntegerLiteral 0x22150958d70 <col:27> 'int' 1
|             `-ImplicitCastExpr 0x22150958e08 <col:31> 'unsigned int' <LValueToRValue>
|               `-DeclRefExpr 0x22150958de8 <col:31> 'unsigned int' lvalue Var 0x22150958ac0 'i' 'unsigned int'
|-FunctionDecl 0x22150959070 <line:181:1, line:202:1> line:181:12 invalid BN_to_felem 'int (limb *, const int *)' static
| |-ParmVarDecl 0x22150958f18 <col:24, col:30> col:30 used out 'limb *':'limb *'
| |-ParmVarDecl 0x22150958f98 <col:35, col:49> col:49 invalid bn 'const int *'
| `-CompoundStmt 0x22150959e70 <line:182:1, line:202:1>
|   |-DeclStmt 0x221509591b0 <line:183:5, col:25>
|   | `-VarDecl 0x22150959148 <col:5, col:21> col:21 used b_in 'felem_bytearray':'u8 [66]'
|   |-DeclStmt 0x22150959240 <line:184:5, col:26>
|   | `-VarDecl 0x221509591d8 <col:5, col:21> col:21 used b_out 'felem_bytearray':'u8 [66]'
|   |-DeclStmt 0x221509592d8 <line:185:5, col:23>
|   | `-VarDecl 0x22150959270 <col:5, col:14> col:14 used num_bytes 'unsigned int'
|   |-CallExpr 0x22150959400 <line:188:5, col:35> 'void *'
|   | |-ImplicitCastExpr 0x221509593e8 <col:5> 'void *(*)(void *, int, unsigned long long)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x221509592f0 <col:5> 'void *(void *, int, unsigned long long)' Function 0x221508f8da8 'memset' 'void *(void *, int, unsigned long long)'
|   | |-ImplicitCastExpr 0x22150959450 <col:12> 'void *' <BitCast>
|   | | `-ImplicitCastExpr 0x22150959438 <col:12> 'u8 *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x22150959310 <col:12> 'felem_bytearray':'u8 [66]' lvalue Var 0x221509591d8 'b_out' 'felem_bytearray':'u8 [66]'
|   | |-IntegerLiteral 0x22150959348 <col:19> 'int' 0
|   | `-UnaryExprOrTypeTraitExpr 0x221509593b0 <col:22, col:34> 'unsigned long long' sizeof
|   |   `-ParenExpr 0x22150959390 <col:28, col:34> 'felem_bytearray':'u8 [66]' lvalue
|   |     `-DeclRefExpr 0x22150959370 <col:29> 'felem_bytearray':'u8 [66]' lvalue Var 0x221509591d8 'b_out' 'felem_bytearray':'u8 [66]' non_odr_use_unevaluated
|   |-IfStmt 0x22150959820 <line:190:5, line:193:5>
|   | |-BinaryOperator 0x221509596a0 <line:190:9, col:33> 'int' '>'
|   | | |-ImplicitCastExpr 0x22150959670 <col:9> 'unsigned long long' <IntegralCast>
|   | | | `-ImplicitCastExpr 0x22150959658 <col:9> 'unsigned int' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x221509595d8 <col:9> 'unsigned int' lvalue Var 0x22150959270 'num_bytes' 'unsigned int'
|   | | `-UnaryExprOrTypeTraitExpr 0x22150959638 <col:21, col:33> 'unsigned long long' sizeof
|   | |   `-ParenExpr 0x22150959618 <col:27, col:33> 'felem_bytearray':'u8 [66]' lvalue
|   | |     `-DeclRefExpr 0x221509595f8 <col:28> 'felem_bytearray':'u8 [66]' lvalue Var 0x221509591d8 'b_out' 'felem_bytearray':'u8 [66]' non_odr_use_unevaluated
|   | `-CompoundStmt 0x22150959808 <col:36, line:193:5>
|   |   `-ReturnStmt 0x221509597f8 <line:192:9, col:16>
|   |     `-IntegerLiteral 0x221509597d0 <col:16> 'int' 0
|   |-IfStmt 0x221509599d0 <line:194:5, line:197:5>
|   | |-OpaqueValueExpr 0x221509599b8 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x221509599a0 <line:194:29, line:197:5>
|   |   `-ReturnStmt 0x22150959990 <line:196:9, col:16>
|   |     `-IntegerLiteral 0x22150959968 <col:16> 'int' 0
|   |-CallExpr 0x22150959c40 <line:199:5, col:39> 'void'
|   | |-ImplicitCastExpr 0x22150959c28 <col:5> 'void (*)(u8 *, const u8 *, unsigned int)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150959b50 <col:5> 'void (u8 *, const u8 *, unsigned int)' Function 0x221509589d8 'flip_endian' 'void (u8 *, const u8 *, unsigned int)'
|   | |-ImplicitCastExpr 0x22150959c78 <col:17> 'u8 *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150959b70 <col:17> 'felem_bytearray':'u8 [66]' lvalue Var 0x221509591d8 'b_out' 'felem_bytearray':'u8 [66]'
|   | |-ImplicitCastExpr 0x22150959ca8 <col:24> 'const u8 *' <NoOp>
|   | | `-ImplicitCastExpr 0x22150959c90 <col:24> 'u8 *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x22150959b90 <col:24> 'felem_bytearray':'u8 [66]' lvalue Var 0x22150959148 'b_in' 'felem_bytearray':'u8 [66]'
|   | `-ImplicitCastExpr 0x22150959cc0 <col:30> 'unsigned int' <LValueToRValue>
|   |   `-DeclRefExpr 0x22150959bb0 <col:30> 'unsigned int' lvalue Var 0x22150959270 'num_bytes' 'unsigned int'
|   |-CallExpr 0x22150959dc0 <line:200:5, col:30> 'void'
|   | |-ImplicitCastExpr 0x22150959da8 <col:5> 'void (*)(limb *, const u8 *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150959cd8 <col:5> 'void (limb *, const u8 *)' Function 0x22150955788 'bin66_to_felem' 'void (limb *, const u8 *)'
|   | |-ImplicitCastExpr 0x22150959df0 <col:20> 'limb *':'limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x22150959cf8 <col:20> 'limb *':'limb *' lvalue ParmVar 0x22150958f18 'out' 'limb *':'limb *'
|   | `-ImplicitCastExpr 0x22150959e20 <col:25> 'const u8 *':'const u8 *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150959e08 <col:25> 'u8 *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x22150959d30 <col:25> 'felem_bytearray':'u8 [66]' lvalue Var 0x221509591d8 'b_out' 'felem_bytearray':'u8 [66]'
|   `-ReturnStmt 0x22150959e60 <line:201:5, col:12>
|     `-IntegerLiteral 0x22150959e38 <col:12> 'int' 1
|-FunctionDecl 0x2215095a070 <line:205:1, line:211:1> line:205:16 invalid felem_to_BN 'int *(int *, const limb *)' static
| |-ParmVarDecl 0x22150959ee0 <col:28, col:36> col:36 invalid out 'int *'
| |-ParmVarDecl 0x22150959f58 <col:41, col:53> col:53 used in 'const limb *':'const limb *'
| `-CompoundStmt 0x2215095a6a8 <line:206:1, line:211:1>
|   |-DeclStmt 0x2215095a240 <line:207:5, col:32>
|   | |-VarDecl 0x2215095a148 <col:5, col:21> col:21 used b_in 'felem_bytearray':'u8 [66]'
|   | `-VarDecl 0x2215095a1c0 <col:5, col:27> col:27 used b_out 'felem_bytearray':'u8 [66]'
|   |-CallExpr 0x2215095a330 <line:208:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x2215095a318 <col:5> 'void (*)(u8 *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x2215095a258 <col:5> 'void (u8 *, const limb *)' Function 0x221509571c8 'felem_to_bin66' 'void (u8 *, const limb *)'
|   | |-ImplicitCastExpr 0x2215095a360 <col:20> 'u8 *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x2215095a278 <col:20> 'felem_bytearray':'u8 [66]' lvalue Var 0x2215095a148 'b_in' 'felem_bytearray':'u8 [66]'
|   | `-ImplicitCastExpr 0x2215095a378 <col:26> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x2215095a2b0 <col:26> 'const limb *':'const limb *' lvalue ParmVar 0x22150959f58 'in' 'const limb *':'const limb *'
|   `-CallExpr 0x2215095a480 <line:209:5, col:43> 'void'
|     |-ImplicitCastExpr 0x2215095a468 <col:5> 'void (*)(u8 *, const u8 *, unsigned int)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x2215095a390 <col:5> 'void (u8 *, const u8 *, unsigned int)' Function 0x221509589d8 'flip_endian' 'void (u8 *, const u8 *, unsigned int)'
|     |-ImplicitCastExpr 0x2215095a4b8 <col:17> 'u8 *' <ArrayToPointerDecay>
|     | `-DeclRefExpr 0x2215095a3b0 <col:17> 'felem_bytearray':'u8 [66]' lvalue Var 0x2215095a1c0 'b_out' 'felem_bytearray':'u8 [66]'
|     |-ImplicitCastExpr 0x2215095a4e8 <col:24> 'const u8 *' <NoOp>
|     | `-ImplicitCastExpr 0x2215095a4d0 <col:24> 'u8 *' <ArrayToPointerDecay>
|     |   `-DeclRefExpr 0x2215095a3e8 <col:24> 'felem_bytearray':'u8 [66]' lvalue Var 0x2215095a148 'b_in' 'felem_bytearray':'u8 [66]'
|     `-ImplicitCastExpr 0x2215095a500 <col:30, col:42> 'unsigned int' <IntegralCast>
|       `-UnaryExprOrTypeTraitExpr 0x2215095a448 <col:30, col:42> 'unsigned long long' sizeof
|         `-ParenExpr 0x2215095a428 <col:36, col:42> 'felem_bytearray':'u8 [66]' lvalue
|           `-DeclRefExpr 0x2215095a408 <col:37> 'felem_bytearray':'u8 [66]' lvalue Var 0x2215095a1c0 'b_out' 'felem_bytearray':'u8 [66]' non_odr_use_unevaluated
|-FunctionDecl 0x2215095a7b8 <line:218:1, line:229:1> line:218:13 used felem_one 'void (limb *)' static
| |-ParmVarDecl 0x2215095a6e0 <col:23, col:29> col:29 used out 'limb *':'limb *'
| `-CompoundStmt 0x2215095af80 <line:219:1, line:229:1>
|   |-BinaryOperator 0x2215095a920 <line:220:5, col:14> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2215095a8d8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2215095a8c0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2215095a878 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2215095a6e0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2215095a898 <col:9> 'int' 0
|   | `-IntegerLiteral 0x2215095a8f8 <col:14> 'int' 1
|   |-BinaryOperator 0x2215095a9e8 <line:221:5, col:14> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2215095a9a0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2215095a988 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2215095a940 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2215095a6e0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2215095a960 <col:9> 'int' 1
|   | `-IntegerLiteral 0x2215095a9c0 <col:14> 'int' 0
|   |-BinaryOperator 0x2215095aab0 <line:222:5, col:14> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2215095aa68 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2215095aa50 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2215095aa08 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2215095a6e0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2215095aa28 <col:9> 'int' 2
|   | `-IntegerLiteral 0x2215095aa88 <col:14> 'int' 0
|   |-BinaryOperator 0x2215095ab78 <line:223:5, col:14> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2215095ab30 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2215095ab18 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2215095aad0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2215095a6e0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2215095aaf0 <col:9> 'int' 3
|   | `-IntegerLiteral 0x2215095ab50 <col:14> 'int' 0
|   |-BinaryOperator 0x2215095ac40 <line:224:5, col:14> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2215095abf8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2215095abe0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2215095ab98 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2215095a6e0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2215095abb8 <col:9> 'int' 4
|   | `-IntegerLiteral 0x2215095ac18 <col:14> 'int' 0
|   |-BinaryOperator 0x2215095ad08 <line:225:5, col:14> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2215095acc0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2215095aca8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2215095ac60 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2215095a6e0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2215095ac80 <col:9> 'int' 5
|   | `-IntegerLiteral 0x2215095ace0 <col:14> 'int' 0
|   |-BinaryOperator 0x2215095add0 <line:226:5, col:14> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2215095ad88 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2215095ad70 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2215095ad28 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2215095a6e0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2215095ad48 <col:9> 'int' 6
|   | `-IntegerLiteral 0x2215095ada8 <col:14> 'int' 0
|   |-BinaryOperator 0x2215095ae98 <line:227:5, col:14> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2215095ae50 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2215095ae38 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2215095adf0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2215095a6e0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2215095ae10 <col:9> 'int' 7
|   | `-IntegerLiteral 0x2215095ae70 <col:14> 'int' 0
|   `-BinaryOperator 0x2215095af60 <line:228:5, col:14> 'limb':'int' '='
|     |-ArraySubscriptExpr 0x2215095af18 <col:5, col:10> 'limb':'int' lvalue
|     | |-ImplicitCastExpr 0x2215095af00 <col:5> 'limb *':'limb *' <LValueToRValue>
|     | | `-DeclRefExpr 0x2215095aeb8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2215095a6e0 'out' 'limb *':'limb *'
|     | `-IntegerLiteral 0x2215095aed8 <col:9> 'int' 8
|     `-IntegerLiteral 0x2215095af38 <col:14> 'int' 0
|-FunctionDecl 0x2215095b168 <line:231:1, line:242:1> line:231:13 used felem_assign 'void (limb *, const limb *)' static
| |-ParmVarDecl 0x2215095afe8 <col:26, col:32> col:32 used out 'limb *':'limb *'
| |-ParmVarDecl 0x2215095b060 <col:37, col:49> col:49 used in 'const limb *':'const limb *'
| `-CompoundStmt 0x2215095bd38 <line:232:1, line:242:1>
|   |-BinaryOperator 0x2215095b348 <line:233:5, col:18> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2215095b290 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2215095b278 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2215095b230 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2215095afe8 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2215095b250 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x2215095b330 <col:14, col:18> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x2215095b310 <col:14, col:18> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x2215095b2f8 <col:14> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x2215095b2b0 <col:14> 'const limb *':'const limb *' lvalue ParmVar 0x2215095b060 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x2215095b2d0 <col:17> 'int' 0
|   |-BinaryOperator 0x2215095b480 <line:234:5, col:18> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2215095b3c8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2215095b3b0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2215095b368 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2215095afe8 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2215095b388 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x2215095b468 <col:14, col:18> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x2215095b448 <col:14, col:18> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x2215095b430 <col:14> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x2215095b3e8 <col:14> 'const limb *':'const limb *' lvalue ParmVar 0x2215095b060 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x2215095b408 <col:17> 'int' 1
|   |-BinaryOperator 0x2215095b5b8 <line:235:5, col:18> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2215095b500 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2215095b4e8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2215095b4a0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2215095afe8 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2215095b4c0 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x2215095b5a0 <col:14, col:18> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x2215095b580 <col:14, col:18> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x2215095b568 <col:14> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x2215095b520 <col:14> 'const limb *':'const limb *' lvalue ParmVar 0x2215095b060 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x2215095b540 <col:17> 'int' 2
|   |-BinaryOperator 0x2215095b700 <line:236:5, col:18> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2215095b638 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2215095b620 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2215095b5d8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2215095afe8 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2215095b5f8 <col:9> 'int' 3
|   | `-ImplicitCastExpr 0x2215095b6e8 <col:14, col:18> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x2215095b6c8 <col:14, col:18> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x2215095b6b0 <col:14> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x2215095b658 <col:14> 'const limb *':'const limb *' lvalue ParmVar 0x2215095b060 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x2215095b678 <col:17> 'int' 3
|   |-BinaryOperator 0x2215095b838 <line:237:5, col:18> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2215095b780 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2215095b768 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2215095b720 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2215095afe8 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2215095b740 <col:9> 'int' 4
|   | `-ImplicitCastExpr 0x2215095b820 <col:14, col:18> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x2215095b800 <col:14, col:18> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x2215095b7e8 <col:14> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x2215095b7a0 <col:14> 'const limb *':'const limb *' lvalue ParmVar 0x2215095b060 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x2215095b7c0 <col:17> 'int' 4
|   |-BinaryOperator 0x2215095b970 <line:238:5, col:18> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2215095b8b8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2215095b8a0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2215095b858 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2215095afe8 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2215095b878 <col:9> 'int' 5
|   | `-ImplicitCastExpr 0x2215095b958 <col:14, col:18> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x2215095b938 <col:14, col:18> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x2215095b920 <col:14> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x2215095b8d8 <col:14> 'const limb *':'const limb *' lvalue ParmVar 0x2215095b060 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x2215095b8f8 <col:17> 'int' 5
|   |-BinaryOperator 0x2215095baa8 <line:239:5, col:18> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2215095b9f0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2215095b9d8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2215095b990 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2215095afe8 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2215095b9b0 <col:9> 'int' 6
|   | `-ImplicitCastExpr 0x2215095ba90 <col:14, col:18> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x2215095ba70 <col:14, col:18> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x2215095ba58 <col:14> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x2215095ba10 <col:14> 'const limb *':'const limb *' lvalue ParmVar 0x2215095b060 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x2215095ba30 <col:17> 'int' 6
|   |-BinaryOperator 0x2215095bbe0 <line:240:5, col:18> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2215095bb28 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2215095bb10 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2215095bac8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2215095afe8 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2215095bae8 <col:9> 'int' 7
|   | `-ImplicitCastExpr 0x2215095bbc8 <col:14, col:18> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x2215095bba8 <col:14, col:18> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x2215095bb90 <col:14> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x2215095bb48 <col:14> 'const limb *':'const limb *' lvalue ParmVar 0x2215095b060 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x2215095bb68 <col:17> 'int' 7
|   `-BinaryOperator 0x2215095bd18 <line:241:5, col:18> 'limb':'int' '='
|     |-ArraySubscriptExpr 0x2215095bc60 <col:5, col:10> 'limb':'int' lvalue
|     | |-ImplicitCastExpr 0x2215095bc48 <col:5> 'limb *':'limb *' <LValueToRValue>
|     | | `-DeclRefExpr 0x2215095bc00 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2215095afe8 'out' 'limb *':'limb *'
|     | `-IntegerLiteral 0x2215095bc20 <col:9> 'int' 8
|     `-ImplicitCastExpr 0x2215095bd00 <col:14, col:18> 'limb':'int' <LValueToRValue>
|       `-ArraySubscriptExpr 0x2215095bce0 <col:14, col:18> 'const limb':'const int' lvalue
|         |-ImplicitCastExpr 0x2215095bcc8 <col:14> 'const limb *':'const limb *' <LValueToRValue>
|         | `-DeclRefExpr 0x2215095bc80 <col:14> 'const limb *':'const limb *' lvalue ParmVar 0x2215095b060 'in' 'const limb *':'const limb *'
|         `-IntegerLiteral 0x2215095bca0 <col:17> 'int' 8
|-FunctionDecl 0x2215095bee0 <line:245:1, line:256:1> line:245:13 used felem_sum64 'void (limb *, const limb *)' static
| |-ParmVarDecl 0x2215095bda0 <col:25, col:31> col:31 used out 'limb *':'limb *'
| |-ParmVarDecl 0x2215095be18 <col:36, col:48> col:48 used in 'const limb *':'const limb *'
| `-CompoundStmt 0x2215095cb30 <line:246:1, line:256:1>
|   |-CompoundAssignOperator 0x2215095c0c0 <line:247:5, col:19> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2215095c008 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2215095bff0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2215095bfa8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2215095bda0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2215095bfc8 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x2215095c0a8 <col:15, col:19> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x2215095c088 <col:15, col:19> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x2215095c070 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x2215095c028 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x2215095be18 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x2215095c048 <col:18> 'int' 0
|   |-CompoundAssignOperator 0x2215095c208 <line:248:5, col:19> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2215095c150 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2215095c138 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2215095c0f0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2215095bda0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2215095c110 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x2215095c1f0 <col:15, col:19> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x2215095c1d0 <col:15, col:19> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x2215095c1b8 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x2215095c170 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x2215095be18 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x2215095c190 <col:18> 'int' 1
|   |-CompoundAssignOperator 0x2215095c350 <line:249:5, col:19> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2215095c298 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2215095c280 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2215095c238 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2215095bda0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2215095c258 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x2215095c338 <col:15, col:19> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x2215095c318 <col:15, col:19> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x2215095c300 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x2215095c2b8 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x2215095be18 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x2215095c2d8 <col:18> 'int' 2
|   |-CompoundAssignOperator 0x2215095c498 <line:250:5, col:19> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2215095c3e0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2215095c3c8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2215095c380 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2215095bda0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2215095c3a0 <col:9> 'int' 3
|   | `-ImplicitCastExpr 0x2215095c480 <col:15, col:19> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x2215095c460 <col:15, col:19> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x2215095c448 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x2215095c400 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x2215095be18 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x2215095c420 <col:18> 'int' 3
|   |-CompoundAssignOperator 0x2215095c5e0 <line:251:5, col:19> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2215095c528 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2215095c510 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2215095c4c8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2215095bda0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2215095c4e8 <col:9> 'int' 4
|   | `-ImplicitCastExpr 0x2215095c5c8 <col:15, col:19> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x2215095c5a8 <col:15, col:19> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x2215095c590 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x2215095c548 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x2215095be18 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x2215095c568 <col:18> 'int' 4
|   |-CompoundAssignOperator 0x2215095c728 <line:252:5, col:19> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2215095c670 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2215095c658 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2215095c610 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2215095bda0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2215095c630 <col:9> 'int' 5
|   | `-ImplicitCastExpr 0x2215095c710 <col:15, col:19> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x2215095c6f0 <col:15, col:19> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x2215095c6d8 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x2215095c690 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x2215095be18 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x2215095c6b0 <col:18> 'int' 5
|   |-CompoundAssignOperator 0x2215095c870 <line:253:5, col:19> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2215095c7b8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2215095c7a0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2215095c758 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2215095bda0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2215095c778 <col:9> 'int' 6
|   | `-ImplicitCastExpr 0x2215095c858 <col:15, col:19> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x2215095c838 <col:15, col:19> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x2215095c820 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x2215095c7d8 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x2215095be18 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x2215095c7f8 <col:18> 'int' 6
|   |-CompoundAssignOperator 0x2215095c9b8 <line:254:5, col:19> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2215095c900 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2215095c8e8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2215095c8a0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2215095bda0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2215095c8c0 <col:9> 'int' 7
|   | `-ImplicitCastExpr 0x2215095c9a0 <col:15, col:19> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x2215095c980 <col:15, col:19> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x2215095c968 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x2215095c920 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x2215095be18 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x2215095c940 <col:18> 'int' 7
|   `-CompoundAssignOperator 0x2215095cb00 <line:255:5, col:19> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|     |-ArraySubscriptExpr 0x2215095ca48 <col:5, col:10> 'limb':'int' lvalue
|     | |-ImplicitCastExpr 0x2215095ca30 <col:5> 'limb *':'limb *' <LValueToRValue>
|     | | `-DeclRefExpr 0x2215095c9e8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2215095bda0 'out' 'limb *':'limb *'
|     | `-IntegerLiteral 0x2215095ca08 <col:9> 'int' 8
|     `-ImplicitCastExpr 0x2215095cae8 <col:15, col:19> 'limb':'int' <LValueToRValue>
|       `-ArraySubscriptExpr 0x2215095cac8 <col:15, col:19> 'const limb':'const int' lvalue
|         |-ImplicitCastExpr 0x2215095cab0 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|         | `-DeclRefExpr 0x2215095ca68 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x2215095be18 'in' 'const limb *':'const limb *'
|         `-IntegerLiteral 0x2215095ca88 <col:18> 'int' 8
|-FunctionDecl 0x2215095cdf8 <line:259:1, line:270:1> line:259:13 used felem_scalar 'void (limb *, const limb *, limb)' static
| |-ParmVarDecl 0x2215095cb98 <col:26, col:32> col:32 used out 'limb *':'limb *'
| |-ParmVarDecl 0x2215095cc10 <col:37, col:49> col:49 used in 'const limb *':'const limb *'
| |-ParmVarDecl 0x2215095cc88 <col:53, col:58> col:58 used scalar 'limb':'int'
| `-CompoundStmt 0x2215095dd00 <line:260:1, line:270:1>
|   |-BinaryOperator 0x2215095d038 <line:261:5, col:22> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2215095cf28 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2215095cf10 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2215095cec8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2215095cb98 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2215095cee8 <col:9> 'int' 0
|   | `-BinaryOperator 0x2215095d018 <col:14, col:22> 'int' '*'
|   |   |-ImplicitCastExpr 0x2215095cfe8 <col:14, col:18> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x2215095cfa8 <col:14, col:18> 'const limb':'const int' lvalue
|   |   |   |-ImplicitCastExpr 0x2215095cf90 <col:14> 'const limb *':'const limb *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x2215095cf48 <col:14> 'const limb *':'const limb *' lvalue ParmVar 0x2215095cc10 'in' 'const limb *':'const limb *'
|   |   |   `-IntegerLiteral 0x2215095cf68 <col:17> 'int' 0
|   |   `-ImplicitCastExpr 0x2215095d000 <col:22> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x2215095cfc8 <col:22> 'limb':'int' lvalue ParmVar 0x2215095cc88 'scalar' 'limb':'int'
|   |-BinaryOperator 0x2215095d1c8 <line:262:5, col:22> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2215095d0b8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2215095d0a0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2215095d058 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2215095cb98 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2215095d078 <col:9> 'int' 1
|   | `-BinaryOperator 0x2215095d1a8 <col:14, col:22> 'int' '*'
|   |   |-ImplicitCastExpr 0x2215095d178 <col:14, col:18> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x2215095d138 <col:14, col:18> 'const limb':'const int' lvalue
|   |   |   |-ImplicitCastExpr 0x2215095d120 <col:14> 'const limb *':'const limb *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x2215095d0d8 <col:14> 'const limb *':'const limb *' lvalue ParmVar 0x2215095cc10 'in' 'const limb *':'const limb *'
|   |   |   `-IntegerLiteral 0x2215095d0f8 <col:17> 'int' 1
|   |   `-ImplicitCastExpr 0x2215095d190 <col:22> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x2215095d158 <col:22> 'limb':'int' lvalue ParmVar 0x2215095cc88 'scalar' 'limb':'int'
|   |-BinaryOperator 0x2215095d358 <line:263:5, col:22> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2215095d248 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2215095d230 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2215095d1e8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2215095cb98 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2215095d208 <col:9> 'int' 2
|   | `-BinaryOperator 0x2215095d338 <col:14, col:22> 'int' '*'
|   |   |-ImplicitCastExpr 0x2215095d308 <col:14, col:18> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x2215095d2c8 <col:14, col:18> 'const limb':'const int' lvalue
|   |   |   |-ImplicitCastExpr 0x2215095d2b0 <col:14> 'const limb *':'const limb *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x2215095d268 <col:14> 'const limb *':'const limb *' lvalue ParmVar 0x2215095cc10 'in' 'const limb *':'const limb *'
|   |   |   `-IntegerLiteral 0x2215095d288 <col:17> 'int' 2
|   |   `-ImplicitCastExpr 0x2215095d320 <col:22> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x2215095d2e8 <col:22> 'limb':'int' lvalue ParmVar 0x2215095cc88 'scalar' 'limb':'int'
|   |-BinaryOperator 0x2215095d4e8 <line:264:5, col:22> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2215095d3d8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2215095d3c0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2215095d378 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2215095cb98 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2215095d398 <col:9> 'int' 3
|   | `-BinaryOperator 0x2215095d4c8 <col:14, col:22> 'int' '*'
|   |   |-ImplicitCastExpr 0x2215095d498 <col:14, col:18> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x2215095d458 <col:14, col:18> 'const limb':'const int' lvalue
|   |   |   |-ImplicitCastExpr 0x2215095d440 <col:14> 'const limb *':'const limb *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x2215095d3f8 <col:14> 'const limb *':'const limb *' lvalue ParmVar 0x2215095cc10 'in' 'const limb *':'const limb *'
|   |   |   `-IntegerLiteral 0x2215095d418 <col:17> 'int' 3
|   |   `-ImplicitCastExpr 0x2215095d4b0 <col:22> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x2215095d478 <col:22> 'limb':'int' lvalue ParmVar 0x2215095cc88 'scalar' 'limb':'int'
|   |-BinaryOperator 0x2215095d678 <line:265:5, col:22> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2215095d568 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2215095d550 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2215095d508 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2215095cb98 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2215095d528 <col:9> 'int' 4
|   | `-BinaryOperator 0x2215095d658 <col:14, col:22> 'int' '*'
|   |   |-ImplicitCastExpr 0x2215095d628 <col:14, col:18> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x2215095d5e8 <col:14, col:18> 'const limb':'const int' lvalue
|   |   |   |-ImplicitCastExpr 0x2215095d5d0 <col:14> 'const limb *':'const limb *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x2215095d588 <col:14> 'const limb *':'const limb *' lvalue ParmVar 0x2215095cc10 'in' 'const limb *':'const limb *'
|   |   |   `-IntegerLiteral 0x2215095d5a8 <col:17> 'int' 4
|   |   `-ImplicitCastExpr 0x2215095d640 <col:22> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x2215095d608 <col:22> 'limb':'int' lvalue ParmVar 0x2215095cc88 'scalar' 'limb':'int'
|   |-BinaryOperator 0x2215095d830 <line:266:5, col:22> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2215095d720 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2215095d708 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2215095d6c0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2215095cb98 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2215095d6e0 <col:9> 'int' 5
|   | `-BinaryOperator 0x2215095d810 <col:14, col:22> 'int' '*'
|   |   |-ImplicitCastExpr 0x2215095d7e0 <col:14, col:18> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x2215095d7a0 <col:14, col:18> 'const limb':'const int' lvalue
|   |   |   |-ImplicitCastExpr 0x2215095d788 <col:14> 'const limb *':'const limb *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x2215095d740 <col:14> 'const limb *':'const limb *' lvalue ParmVar 0x2215095cc10 'in' 'const limb *':'const limb *'
|   |   |   `-IntegerLiteral 0x2215095d760 <col:17> 'int' 5
|   |   `-ImplicitCastExpr 0x2215095d7f8 <col:22> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x2215095d7c0 <col:22> 'limb':'int' lvalue ParmVar 0x2215095cc88 'scalar' 'limb':'int'
|   |-BinaryOperator 0x2215095d9c0 <line:267:5, col:22> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2215095d8b0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2215095d898 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2215095d850 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2215095cb98 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2215095d870 <col:9> 'int' 6
|   | `-BinaryOperator 0x2215095d9a0 <col:14, col:22> 'int' '*'
|   |   |-ImplicitCastExpr 0x2215095d970 <col:14, col:18> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x2215095d930 <col:14, col:18> 'const limb':'const int' lvalue
|   |   |   |-ImplicitCastExpr 0x2215095d918 <col:14> 'const limb *':'const limb *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x2215095d8d0 <col:14> 'const limb *':'const limb *' lvalue ParmVar 0x2215095cc10 'in' 'const limb *':'const limb *'
|   |   |   `-IntegerLiteral 0x2215095d8f0 <col:17> 'int' 6
|   |   `-ImplicitCastExpr 0x2215095d988 <col:22> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x2215095d950 <col:22> 'limb':'int' lvalue ParmVar 0x2215095cc88 'scalar' 'limb':'int'
|   |-BinaryOperator 0x2215095db50 <line:268:5, col:22> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2215095da40 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2215095da28 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2215095d9e0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2215095cb98 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2215095da00 <col:9> 'int' 7
|   | `-BinaryOperator 0x2215095db30 <col:14, col:22> 'int' '*'
|   |   |-ImplicitCastExpr 0x2215095db00 <col:14, col:18> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x2215095dac0 <col:14, col:18> 'const limb':'const int' lvalue
|   |   |   |-ImplicitCastExpr 0x2215095daa8 <col:14> 'const limb *':'const limb *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x2215095da60 <col:14> 'const limb *':'const limb *' lvalue ParmVar 0x2215095cc10 'in' 'const limb *':'const limb *'
|   |   |   `-IntegerLiteral 0x2215095da80 <col:17> 'int' 7
|   |   `-ImplicitCastExpr 0x2215095db18 <col:22> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x2215095dae0 <col:22> 'limb':'int' lvalue ParmVar 0x2215095cc88 'scalar' 'limb':'int'
|   `-BinaryOperator 0x2215095dce0 <line:269:5, col:22> 'limb':'int' '='
|     |-ArraySubscriptExpr 0x2215095dbd0 <col:5, col:10> 'limb':'int' lvalue
|     | |-ImplicitCastExpr 0x2215095dbb8 <col:5> 'limb *':'limb *' <LValueToRValue>
|     | | `-DeclRefExpr 0x2215095db70 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2215095cb98 'out' 'limb *':'limb *'
|     | `-IntegerLiteral 0x2215095db90 <col:9> 'int' 8
|     `-BinaryOperator 0x2215095dcc0 <col:14, col:22> 'int' '*'
|       |-ImplicitCastExpr 0x2215095dc90 <col:14, col:18> 'limb':'int' <LValueToRValue>
|       | `-ArraySubscriptExpr 0x2215095dc50 <col:14, col:18> 'const limb':'const int' lvalue
|       |   |-ImplicitCastExpr 0x2215095dc38 <col:14> 'const limb *':'const limb *' <LValueToRValue>
|       |   | `-DeclRefExpr 0x2215095dbf0 <col:14> 'const limb *':'const limb *' lvalue ParmVar 0x2215095cc10 'in' 'const limb *':'const limb *'
|       |   `-IntegerLiteral 0x2215095dc10 <col:17> 'int' 8
|       `-ImplicitCastExpr 0x2215095dca8 <col:22> 'limb':'int' <LValueToRValue>
|         `-DeclRefExpr 0x2215095dc70 <col:22> 'limb':'int' lvalue ParmVar 0x2215095cc88 'scalar' 'limb':'int'
|-FunctionDecl 0x2215095df28 <line:273:1, line:284:1> line:273:13 used felem_scalar64 'void (limb *, limb)' static
| |-ParmVarDecl 0x2215095dd68 <col:28, col:34> col:34 used out 'limb *':'limb *'
| |-ParmVarDecl 0x2215095dde0 <col:39, col:44> col:44 used scalar 'limb':'int'
| `-CompoundStmt 0x2215095e818 <line:274:1, line:284:1>
|   |-CompoundAssignOperator 0x2215095e0a8 <line:275:5, col:15> 'limb':'int' '*=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2215095e050 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2215095e038 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2215095dff0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2215095dd68 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2215095e010 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x2215095e090 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x2215095e070 <col:15> 'limb':'int' lvalue ParmVar 0x2215095dde0 'scalar' 'limb':'int'
|   |-CompoundAssignOperator 0x2215095e190 <line:276:5, col:15> 'limb':'int' '*=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2215095e138 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2215095e120 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2215095e0d8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2215095dd68 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2215095e0f8 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x2215095e178 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x2215095e158 <col:15> 'limb':'int' lvalue ParmVar 0x2215095dde0 'scalar' 'limb':'int'
|   |-CompoundAssignOperator 0x2215095e278 <line:277:5, col:15> 'limb':'int' '*=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2215095e220 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2215095e208 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2215095e1c0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2215095dd68 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2215095e1e0 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x2215095e260 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x2215095e240 <col:15> 'limb':'int' lvalue ParmVar 0x2215095dde0 'scalar' 'limb':'int'
|   |-CompoundAssignOperator 0x2215095e360 <line:278:5, col:15> 'limb':'int' '*=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2215095e308 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2215095e2f0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2215095e2a8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2215095dd68 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2215095e2c8 <col:9> 'int' 3
|   | `-ImplicitCastExpr 0x2215095e348 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x2215095e328 <col:15> 'limb':'int' lvalue ParmVar 0x2215095dde0 'scalar' 'limb':'int'
|   |-CompoundAssignOperator 0x2215095e448 <line:279:5, col:15> 'limb':'int' '*=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2215095e3f0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2215095e3d8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2215095e390 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2215095dd68 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2215095e3b0 <col:9> 'int' 4
|   | `-ImplicitCastExpr 0x2215095e430 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x2215095e410 <col:15> 'limb':'int' lvalue ParmVar 0x2215095dde0 'scalar' 'limb':'int'
|   |-CompoundAssignOperator 0x2215095e530 <line:280:5, col:15> 'limb':'int' '*=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2215095e4d8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2215095e4c0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2215095e478 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2215095dd68 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2215095e498 <col:9> 'int' 5
|   | `-ImplicitCastExpr 0x2215095e518 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x2215095e4f8 <col:15> 'limb':'int' lvalue ParmVar 0x2215095dde0 'scalar' 'limb':'int'
|   |-CompoundAssignOperator 0x2215095e618 <line:281:5, col:15> 'limb':'int' '*=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2215095e5c0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2215095e5a8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2215095e560 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2215095dd68 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2215095e580 <col:9> 'int' 6
|   | `-ImplicitCastExpr 0x2215095e600 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x2215095e5e0 <col:15> 'limb':'int' lvalue ParmVar 0x2215095dde0 'scalar' 'limb':'int'
|   |-CompoundAssignOperator 0x2215095e700 <line:282:5, col:15> 'limb':'int' '*=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2215095e6a8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2215095e690 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2215095e648 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2215095dd68 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2215095e668 <col:9> 'int' 7
|   | `-ImplicitCastExpr 0x2215095e6e8 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x2215095e6c8 <col:15> 'limb':'int' lvalue ParmVar 0x2215095dde0 'scalar' 'limb':'int'
|   `-CompoundAssignOperator 0x2215095e7e8 <line:283:5, col:15> 'limb':'int' '*=' ComputeLHSTy='int' ComputeResultTy='int'
|     |-ArraySubscriptExpr 0x2215095e790 <col:5, col:10> 'limb':'int' lvalue
|     | |-ImplicitCastExpr 0x2215095e778 <col:5> 'limb *':'limb *' <LValueToRValue>
|     | | `-DeclRefExpr 0x2215095e730 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2215095dd68 'out' 'limb *':'limb *'
|     | `-IntegerLiteral 0x2215095e750 <col:9> 'int' 8
|     `-ImplicitCastExpr 0x2215095e7d0 <col:15> 'limb':'int' <LValueToRValue>
|       `-DeclRefExpr 0x2215095e7b0 <col:15> 'limb':'int' lvalue ParmVar 0x2215095dde0 'scalar' 'limb':'int'
|-FunctionDecl 0x2215095ea48 <line:287:1, line:298:1> line:287:13 used felem_scalar128 'void (int *, limb)' static
| |-ParmVarDecl 0x2215095e8d0 <col:29, col:40> col:40 used out 'int *':'int *'
| |-ParmVarDecl 0x2215095e948 <col:45, col:50> col:50 used scalar 'limb':'int'
| `-CompoundStmt 0x2215095f338 <line:288:1, line:298:1>
|   |-CompoundAssignOperator 0x2215095ebc8 <line:289:5, col:15> 'int' '*=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2215095eb70 <col:5, col:10> 'int' lvalue
|   | | |-ImplicitCastExpr 0x2215095eb58 <col:5> 'int *':'int *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2215095eb10 <col:5> 'int *':'int *' lvalue ParmVar 0x2215095e8d0 'out' 'int *':'int *'
|   | | `-IntegerLiteral 0x2215095eb30 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x2215095ebb0 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x2215095eb90 <col:15> 'limb':'int' lvalue ParmVar 0x2215095e948 'scalar' 'limb':'int'
|   |-CompoundAssignOperator 0x2215095ecb0 <line:290:5, col:15> 'int' '*=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2215095ec58 <col:5, col:10> 'int' lvalue
|   | | |-ImplicitCastExpr 0x2215095ec40 <col:5> 'int *':'int *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2215095ebf8 <col:5> 'int *':'int *' lvalue ParmVar 0x2215095e8d0 'out' 'int *':'int *'
|   | | `-IntegerLiteral 0x2215095ec18 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x2215095ec98 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x2215095ec78 <col:15> 'limb':'int' lvalue ParmVar 0x2215095e948 'scalar' 'limb':'int'
|   |-CompoundAssignOperator 0x2215095ed98 <line:291:5, col:15> 'int' '*=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2215095ed40 <col:5, col:10> 'int' lvalue
|   | | |-ImplicitCastExpr 0x2215095ed28 <col:5> 'int *':'int *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2215095ece0 <col:5> 'int *':'int *' lvalue ParmVar 0x2215095e8d0 'out' 'int *':'int *'
|   | | `-IntegerLiteral 0x2215095ed00 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x2215095ed80 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x2215095ed60 <col:15> 'limb':'int' lvalue ParmVar 0x2215095e948 'scalar' 'limb':'int'
|   |-CompoundAssignOperator 0x2215095ee80 <line:292:5, col:15> 'int' '*=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2215095ee28 <col:5, col:10> 'int' lvalue
|   | | |-ImplicitCastExpr 0x2215095ee10 <col:5> 'int *':'int *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2215095edc8 <col:5> 'int *':'int *' lvalue ParmVar 0x2215095e8d0 'out' 'int *':'int *'
|   | | `-IntegerLiteral 0x2215095ede8 <col:9> 'int' 3
|   | `-ImplicitCastExpr 0x2215095ee68 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x2215095ee48 <col:15> 'limb':'int' lvalue ParmVar 0x2215095e948 'scalar' 'limb':'int'
|   |-CompoundAssignOperator 0x2215095ef68 <line:293:5, col:15> 'int' '*=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2215095ef10 <col:5, col:10> 'int' lvalue
|   | | |-ImplicitCastExpr 0x2215095eef8 <col:5> 'int *':'int *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2215095eeb0 <col:5> 'int *':'int *' lvalue ParmVar 0x2215095e8d0 'out' 'int *':'int *'
|   | | `-IntegerLiteral 0x2215095eed0 <col:9> 'int' 4
|   | `-ImplicitCastExpr 0x2215095ef50 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x2215095ef30 <col:15> 'limb':'int' lvalue ParmVar 0x2215095e948 'scalar' 'limb':'int'
|   |-CompoundAssignOperator 0x2215095f050 <line:294:5, col:15> 'int' '*=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2215095eff8 <col:5, col:10> 'int' lvalue
|   | | |-ImplicitCastExpr 0x2215095efe0 <col:5> 'int *':'int *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2215095ef98 <col:5> 'int *':'int *' lvalue ParmVar 0x2215095e8d0 'out' 'int *':'int *'
|   | | `-IntegerLiteral 0x2215095efb8 <col:9> 'int' 5
|   | `-ImplicitCastExpr 0x2215095f038 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x2215095f018 <col:15> 'limb':'int' lvalue ParmVar 0x2215095e948 'scalar' 'limb':'int'
|   |-CompoundAssignOperator 0x2215095f138 <line:295:5, col:15> 'int' '*=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2215095f0e0 <col:5, col:10> 'int' lvalue
|   | | |-ImplicitCastExpr 0x2215095f0c8 <col:5> 'int *':'int *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2215095f080 <col:5> 'int *':'int *' lvalue ParmVar 0x2215095e8d0 'out' 'int *':'int *'
|   | | `-IntegerLiteral 0x2215095f0a0 <col:9> 'int' 6
|   | `-ImplicitCastExpr 0x2215095f120 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x2215095f100 <col:15> 'limb':'int' lvalue ParmVar 0x2215095e948 'scalar' 'limb':'int'
|   |-CompoundAssignOperator 0x2215095f220 <line:296:5, col:15> 'int' '*=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2215095f1c8 <col:5, col:10> 'int' lvalue
|   | | |-ImplicitCastExpr 0x2215095f1b0 <col:5> 'int *':'int *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2215095f168 <col:5> 'int *':'int *' lvalue ParmVar 0x2215095e8d0 'out' 'int *':'int *'
|   | | `-IntegerLiteral 0x2215095f188 <col:9> 'int' 7
|   | `-ImplicitCastExpr 0x2215095f208 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x2215095f1e8 <col:15> 'limb':'int' lvalue ParmVar 0x2215095e948 'scalar' 'limb':'int'
|   `-CompoundAssignOperator 0x2215095f308 <line:297:5, col:15> 'int' '*=' ComputeLHSTy='int' ComputeResultTy='int'
|     |-ArraySubscriptExpr 0x2215095f2b0 <col:5, col:10> 'int' lvalue
|     | |-ImplicitCastExpr 0x2215095f298 <col:5> 'int *':'int *' <LValueToRValue>
|     | | `-DeclRefExpr 0x2215095f250 <col:5> 'int *':'int *' lvalue ParmVar 0x2215095e8d0 'out' 'int *':'int *'
|     | `-IntegerLiteral 0x2215095f270 <col:9> 'int' 8
|     `-ImplicitCastExpr 0x2215095f2f0 <col:15> 'limb':'int' <LValueToRValue>
|       `-DeclRefExpr 0x2215095f2d0 <col:15> 'limb':'int' lvalue ParmVar 0x2215095e948 'scalar' 'limb':'int'
|-FunctionDecl 0x2215095f4e0 <line:307:1, line:322:1> line:307:13 used felem_neg 'void (limb *, const limb *)' static
| |-ParmVarDecl 0x2215095f3a0 <col:23, col:29> col:29 used out 'limb *':'limb *'
| |-ParmVarDecl 0x2215095f418 <col:34, col:46> col:46 used in 'const limb *':'const limb *'
| `-CompoundStmt 0x221509609a8 <line:308:1, line:322:1>
|   |-DeclStmt 0x2215095f840 <line:310:5, col:71>
|   | `-VarDecl 0x2215095f5b8 <col:5, col:70> col:23 used two62m3 'const limb':'const int' static cinit
|   |   `-BinaryOperator 0x2215095f820 <col:33, col:70> 'int' '-'
|   |     |-ParenExpr 0x2215095f718 <col:33, col:50> 'limb':'int'
|   |     | `-BinaryOperator 0x2215095f6f8 <col:34, col:48> 'limb':'int' '<<'
|   |     |   |-ParenExpr 0x2215095f680 <col:34, col:43> 'limb':'int'
|   |     |   | `-CStyleCastExpr 0x2215095f658 <col:35, col:42> 'limb':'int' <NoOp>
|   |     |   |   `-IntegerLiteral 0x2215095f620 <col:42> 'int' 1
|   |     |   `-IntegerLiteral 0x2215095f6d0 <col:48> 'int' 62
|   |     `-ParenExpr 0x2215095f800 <col:54, col:70> 'limb':'int'
|   |       `-BinaryOperator 0x2215095f7e0 <col:55, col:69> 'limb':'int' '<<'
|   |         |-ParenExpr 0x2215095f798 <col:55, col:64> 'limb':'int'
|   |         | `-CStyleCastExpr 0x2215095f770 <col:56, col:63> 'limb':'int' <NoOp>
|   |         |   `-IntegerLiteral 0x2215095f738 <col:63> 'int' 1
|   |         `-IntegerLiteral 0x2215095f7b8 <col:69> 'int' 5
|   |-DeclStmt 0x2215095fac0 <line:311:5, col:71>
|   | `-VarDecl 0x2215095f868 <col:5, col:70> col:23 used two62m2 'const limb':'const int' static cinit
|   |   `-BinaryOperator 0x2215095faa0 <col:33, col:70> 'int' '-'
|   |     |-ParenExpr 0x2215095f998 <col:33, col:50> 'limb':'int'
|   |     | `-BinaryOperator 0x2215095f978 <col:34, col:48> 'limb':'int' '<<'
|   |     |   |-ParenExpr 0x2215095f930 <col:34, col:43> 'limb':'int'
|   |     |   | `-CStyleCastExpr 0x2215095f908 <col:35, col:42> 'limb':'int' <NoOp>
|   |     |   |   `-IntegerLiteral 0x2215095f8d0 <col:42> 'int' 1
|   |     |   `-IntegerLiteral 0x2215095f950 <col:48> 'int' 62
|   |     `-ParenExpr 0x2215095fa80 <col:54, col:70> 'limb':'int'
|   |       `-BinaryOperator 0x2215095fa60 <col:55, col:69> 'limb':'int' '<<'
|   |         |-ParenExpr 0x2215095fa18 <col:55, col:64> 'limb':'int'
|   |         | `-CStyleCastExpr 0x2215095f9f0 <col:56, col:63> 'limb':'int' <NoOp>
|   |         |   `-IntegerLiteral 0x2215095f9b8 <col:63> 'int' 1
|   |         `-IntegerLiteral 0x2215095fa38 <col:69> 'int' 4
|   |-BinaryOperator 0x2215095fc60 <line:313:5, col:28> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2215095fb38 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2215095fb20 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2215095fad8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2215095f3a0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2215095faf8 <col:9> 'int' 0
|   | `-BinaryOperator 0x2215095fc40 <col:14, col:28> 'int' '-'
|   |   |-ImplicitCastExpr 0x2215095fc10 <col:14> 'limb':'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x2215095fb58 <col:14> 'const limb':'const int' lvalue Var 0x2215095f5b8 'two62m3' 'const limb':'const int'
|   |   `-ImplicitCastExpr 0x2215095fc28 <col:24, col:28> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x2215095fbf0 <col:24, col:28> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x2215095fbd8 <col:24> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x2215095fb90 <col:24> 'const limb *':'const limb *' lvalue ParmVar 0x2215095f418 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x2215095fbb0 <col:27> 'int' 0
|   |-BinaryOperator 0x2215095fe50 <line:314:5, col:28> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2215095fd28 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2215095fd10 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2215095fcc8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2215095f3a0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2215095fce8 <col:9> 'int' 1
|   | `-BinaryOperator 0x2215095fe30 <col:14, col:28> 'int' '-'
|   |   |-ImplicitCastExpr 0x2215095fe00 <col:14> 'limb':'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x2215095fd48 <col:14> 'const limb':'const int' lvalue Var 0x2215095f868 'two62m2' 'const limb':'const int'
|   |   `-ImplicitCastExpr 0x2215095fe18 <col:24, col:28> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x2215095fde0 <col:24, col:28> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x2215095fdc8 <col:24> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x2215095fd80 <col:24> 'const limb *':'const limb *' lvalue ParmVar 0x2215095f418 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x2215095fda0 <col:27> 'int' 1
|   |-BinaryOperator 0x22150960028 <line:315:5, col:28> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2215095ff18 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2215095ff00 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2215095feb8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2215095f3a0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2215095fed8 <col:9> 'int' 2
|   | `-BinaryOperator 0x22150960008 <col:14, col:28> 'int' '-'
|   |   |-ImplicitCastExpr 0x2215095ffd8 <col:14> 'limb':'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x2215095ff38 <col:14> 'const limb':'const int' lvalue Var 0x2215095f868 'two62m2' 'const limb':'const int'
|   |   `-ImplicitCastExpr 0x2215095fff0 <col:24, col:28> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x2215095ffb8 <col:24, col:28> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x2215095ffa0 <col:24> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x2215095ff58 <col:24> 'const limb *':'const limb *' lvalue ParmVar 0x2215095f418 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x2215095ff78 <col:27> 'int' 2
|   |-BinaryOperator 0x221509601b8 <line:316:5, col:28> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x221509600a8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x22150960090 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x22150960048 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2215095f3a0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x22150960068 <col:9> 'int' 3
|   | `-BinaryOperator 0x22150960198 <col:14, col:28> 'int' '-'
|   |   |-ImplicitCastExpr 0x22150960168 <col:14> 'limb':'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x221509600c8 <col:14> 'const limb':'const int' lvalue Var 0x2215095f868 'two62m2' 'const limb':'const int'
|   |   `-ImplicitCastExpr 0x22150960180 <col:24, col:28> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x22150960148 <col:24, col:28> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x22150960130 <col:24> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x221509600e8 <col:24> 'const limb *':'const limb *' lvalue ParmVar 0x2215095f418 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x22150960108 <col:27> 'int' 3
|   |-BinaryOperator 0x22150960348 <line:317:5, col:28> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x22150960238 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x22150960220 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x221509601d8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2215095f3a0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x221509601f8 <col:9> 'int' 4
|   | `-BinaryOperator 0x22150960328 <col:14, col:28> 'int' '-'
|   |   |-ImplicitCastExpr 0x221509602f8 <col:14> 'limb':'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x22150960258 <col:14> 'const limb':'const int' lvalue Var 0x2215095f868 'two62m2' 'const limb':'const int'
|   |   `-ImplicitCastExpr 0x22150960310 <col:24, col:28> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x221509602d8 <col:24, col:28> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x221509602c0 <col:24> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x22150960278 <col:24> 'const limb *':'const limb *' lvalue ParmVar 0x2215095f418 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x22150960298 <col:27> 'int' 4
|   |-BinaryOperator 0x221509604d8 <line:318:5, col:28> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x221509603c8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x221509603b0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x22150960368 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2215095f3a0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x22150960388 <col:9> 'int' 5
|   | `-BinaryOperator 0x221509604b8 <col:14, col:28> 'int' '-'
|   |   |-ImplicitCastExpr 0x22150960488 <col:14> 'limb':'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x221509603e8 <col:14> 'const limb':'const int' lvalue Var 0x2215095f868 'two62m2' 'const limb':'const int'
|   |   `-ImplicitCastExpr 0x221509604a0 <col:24, col:28> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x22150960468 <col:24, col:28> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x22150960450 <col:24> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x22150960408 <col:24> 'const limb *':'const limb *' lvalue ParmVar 0x2215095f418 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x22150960428 <col:27> 'int' 5
|   |-BinaryOperator 0x22150960668 <line:319:5, col:28> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x22150960558 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x22150960540 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x221509604f8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2215095f3a0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x22150960518 <col:9> 'int' 6
|   | `-BinaryOperator 0x22150960648 <col:14, col:28> 'int' '-'
|   |   |-ImplicitCastExpr 0x22150960618 <col:14> 'limb':'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x22150960578 <col:14> 'const limb':'const int' lvalue Var 0x2215095f868 'two62m2' 'const limb':'const int'
|   |   `-ImplicitCastExpr 0x22150960630 <col:24, col:28> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x221509605f8 <col:24, col:28> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x221509605e0 <col:24> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x22150960598 <col:24> 'const limb *':'const limb *' lvalue ParmVar 0x2215095f418 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x221509605b8 <col:27> 'int' 6
|   |-BinaryOperator 0x221509607f8 <line:320:5, col:28> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x221509606e8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x221509606d0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x22150960688 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2215095f3a0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x221509606a8 <col:9> 'int' 7
|   | `-BinaryOperator 0x221509607d8 <col:14, col:28> 'int' '-'
|   |   |-ImplicitCastExpr 0x221509607a8 <col:14> 'limb':'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x22150960708 <col:14> 'const limb':'const int' lvalue Var 0x2215095f868 'two62m2' 'const limb':'const int'
|   |   `-ImplicitCastExpr 0x221509607c0 <col:24, col:28> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x22150960788 <col:24, col:28> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x22150960770 <col:24> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x22150960728 <col:24> 'const limb *':'const limb *' lvalue ParmVar 0x2215095f418 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x22150960748 <col:27> 'int' 7
|   `-BinaryOperator 0x22150960988 <line:321:5, col:28> 'limb':'int' '='
|     |-ArraySubscriptExpr 0x22150960878 <col:5, col:10> 'limb':'int' lvalue
|     | |-ImplicitCastExpr 0x22150960860 <col:5> 'limb *':'limb *' <LValueToRValue>
|     | | `-DeclRefExpr 0x22150960818 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2215095f3a0 'out' 'limb *':'limb *'
|     | `-IntegerLiteral 0x22150960838 <col:9> 'int' 8
|     `-BinaryOperator 0x22150960968 <col:14, col:28> 'int' '-'
|       |-ImplicitCastExpr 0x22150960938 <col:14> 'limb':'int' <LValueToRValue>
|       | `-DeclRefExpr 0x22150960898 <col:14> 'const limb':'const int' lvalue Var 0x2215095f868 'two62m2' 'const limb':'const int'
|       `-ImplicitCastExpr 0x22150960950 <col:24, col:28> 'limb':'int' <LValueToRValue>
|         `-ArraySubscriptExpr 0x22150960918 <col:24, col:28> 'const limb':'const int' lvalue
|           |-ImplicitCastExpr 0x22150960900 <col:24> 'const limb *':'const limb *' <LValueToRValue>
|           | `-DeclRefExpr 0x221509608b8 <col:24> 'const limb *':'const limb *' lvalue ParmVar 0x2215095f418 'in' 'const limb *':'const limb *'
|           `-IntegerLiteral 0x221509608d8 <col:27> 'int' 8
|-FunctionDecl 0x22150960b60 <line:331:1, line:348:1> line:331:13 used felem_diff64 'void (limb *, const limb *)' static
| |-ParmVarDecl 0x22150960a20 <col:26, col:32> col:32 used out 'limb *':'limb *'
| |-ParmVarDecl 0x22150960a98 <col:37, col:49> col:49 used in 'const limb *':'const limb *'
| `-CompoundStmt 0x221509620a0 <line:332:1, line:348:1>
|   |-DeclStmt 0x22150960e90 <line:336:5, col:71>
|   | `-VarDecl 0x22150960c38 <col:5, col:70> col:23 used two62m3 'const limb':'const int' static cinit
|   |   `-BinaryOperator 0x22150960e70 <col:33, col:70> 'int' '-'
|   |     |-ParenExpr 0x22150960d68 <col:33, col:50> 'limb':'int'
|   |     | `-BinaryOperator 0x22150960d48 <col:34, col:48> 'limb':'int' '<<'
|   |     |   |-ParenExpr 0x22150960d00 <col:34, col:43> 'limb':'int'
|   |     |   | `-CStyleCastExpr 0x22150960cd8 <col:35, col:42> 'limb':'int' <NoOp>
|   |     |   |   `-IntegerLiteral 0x22150960ca0 <col:42> 'int' 1
|   |     |   `-IntegerLiteral 0x22150960d20 <col:48> 'int' 62
|   |     `-ParenExpr 0x22150960e50 <col:54, col:70> 'limb':'int'
|   |       `-BinaryOperator 0x22150960e30 <col:55, col:69> 'limb':'int' '<<'
|   |         |-ParenExpr 0x22150960de8 <col:55, col:64> 'limb':'int'
|   |         | `-CStyleCastExpr 0x22150960dc0 <col:56, col:63> 'limb':'int' <NoOp>
|   |         |   `-IntegerLiteral 0x22150960d88 <col:63> 'int' 1
|   |         `-IntegerLiteral 0x22150960e08 <col:69> 'int' 5
|   |-DeclStmt 0x22150961110 <line:337:5, col:71>
|   | `-VarDecl 0x22150960eb8 <col:5, col:70> col:23 used two62m2 'const limb':'const int' static cinit
|   |   `-BinaryOperator 0x221509610f0 <col:33, col:70> 'int' '-'
|   |     |-ParenExpr 0x22150960fe8 <col:33, col:50> 'limb':'int'
|   |     | `-BinaryOperator 0x22150960fc8 <col:34, col:48> 'limb':'int' '<<'
|   |     |   |-ParenExpr 0x22150960f80 <col:34, col:43> 'limb':'int'
|   |     |   | `-CStyleCastExpr 0x22150960f58 <col:35, col:42> 'limb':'int' <NoOp>
|   |     |   |   `-IntegerLiteral 0x22150960f20 <col:42> 'int' 1
|   |     |   `-IntegerLiteral 0x22150960fa0 <col:48> 'int' 62
|   |     `-ParenExpr 0x221509610d0 <col:54, col:70> 'limb':'int'
|   |       `-BinaryOperator 0x221509610b0 <col:55, col:69> 'limb':'int' '<<'
|   |         |-ParenExpr 0x22150961068 <col:55, col:64> 'limb':'int'
|   |         | `-CStyleCastExpr 0x22150961040 <col:56, col:63> 'limb':'int' <NoOp>
|   |         |   `-IntegerLiteral 0x22150961008 <col:63> 'int' 1
|   |         `-IntegerLiteral 0x22150961088 <col:69> 'int' 4
|   |-CompoundAssignOperator 0x221509612b0 <line:339:5, col:29> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x22150961188 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x22150961170 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x22150961128 <col:5> 'limb *':'limb *' lvalue ParmVar 0x22150960a20 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x22150961148 <col:9> 'int' 0
|   | `-BinaryOperator 0x22150961290 <col:15, col:29> 'int' '-'
|   |   |-ImplicitCastExpr 0x22150961260 <col:15> 'limb':'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x221509611a8 <col:15> 'const limb':'const int' lvalue Var 0x22150960c38 'two62m3' 'const limb':'const int'
|   |   `-ImplicitCastExpr 0x22150961278 <col:25, col:29> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x22150961240 <col:25, col:29> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x22150961228 <col:25> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x221509611e0 <col:25> 'const limb *':'const limb *' lvalue ParmVar 0x22150960a98 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x22150961200 <col:28> 'int' 0
|   |-CompoundAssignOperator 0x221509614b0 <line:340:5, col:29> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x22150961388 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x22150961370 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x22150961328 <col:5> 'limb *':'limb *' lvalue ParmVar 0x22150960a20 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x22150961348 <col:9> 'int' 1
|   | `-BinaryOperator 0x22150961490 <col:15, col:29> 'int' '-'
|   |   |-ImplicitCastExpr 0x22150961460 <col:15> 'limb':'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x221509613a8 <col:15> 'const limb':'const int' lvalue Var 0x22150960eb8 'two62m2' 'const limb':'const int'
|   |   `-ImplicitCastExpr 0x22150961478 <col:25, col:29> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x22150961440 <col:25, col:29> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x22150961428 <col:25> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x221509613e0 <col:25> 'const limb *':'const limb *' lvalue ParmVar 0x22150960a98 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x22150961400 <col:28> 'int' 1
|   |-CompoundAssignOperator 0x22150961698 <line:341:5, col:29> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x22150961588 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x22150961570 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x22150961528 <col:5> 'limb *':'limb *' lvalue ParmVar 0x22150960a20 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x22150961548 <col:9> 'int' 2
|   | `-BinaryOperator 0x22150961678 <col:15, col:29> 'int' '-'
|   |   |-ImplicitCastExpr 0x22150961648 <col:15> 'limb':'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x221509615a8 <col:15> 'const limb':'const int' lvalue Var 0x22150960eb8 'two62m2' 'const limb':'const int'
|   |   `-ImplicitCastExpr 0x22150961660 <col:25, col:29> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x22150961628 <col:25, col:29> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x22150961610 <col:25> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x221509615c8 <col:25> 'const limb *':'const limb *' lvalue ParmVar 0x22150960a98 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x221509615e8 <col:28> 'int' 2
|   |-CompoundAssignOperator 0x22150961850 <line:342:5, col:29> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x22150961740 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x22150961728 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x221509616e0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x22150960a20 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x22150961700 <col:9> 'int' 3
|   | `-BinaryOperator 0x22150961830 <col:15, col:29> 'int' '-'
|   |   |-ImplicitCastExpr 0x22150961800 <col:15> 'limb':'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x22150961760 <col:15> 'const limb':'const int' lvalue Var 0x22150960eb8 'two62m2' 'const limb':'const int'
|   |   `-ImplicitCastExpr 0x22150961818 <col:25, col:29> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x221509617e0 <col:25, col:29> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x221509617c8 <col:25> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x22150961780 <col:25> 'const limb *':'const limb *' lvalue ParmVar 0x22150960a98 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x221509617a0 <col:28> 'int' 3
|   |-CompoundAssignOperator 0x221509619f0 <line:343:5, col:29> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x221509618e0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x221509618c8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x22150961880 <col:5> 'limb *':'limb *' lvalue ParmVar 0x22150960a20 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x221509618a0 <col:9> 'int' 4
|   | `-BinaryOperator 0x221509619d0 <col:15, col:29> 'int' '-'
|   |   |-ImplicitCastExpr 0x221509619a0 <col:15> 'limb':'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x22150961900 <col:15> 'const limb':'const int' lvalue Var 0x22150960eb8 'two62m2' 'const limb':'const int'
|   |   `-ImplicitCastExpr 0x221509619b8 <col:25, col:29> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x22150961980 <col:25, col:29> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x22150961968 <col:25> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x22150961920 <col:25> 'const limb *':'const limb *' lvalue ParmVar 0x22150960a98 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x22150961940 <col:28> 'int' 4
|   |-CompoundAssignOperator 0x22150961b90 <line:344:5, col:29> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x22150961a80 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x22150961a68 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x22150961a20 <col:5> 'limb *':'limb *' lvalue ParmVar 0x22150960a20 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x22150961a40 <col:9> 'int' 5
|   | `-BinaryOperator 0x22150961b70 <col:15, col:29> 'int' '-'
|   |   |-ImplicitCastExpr 0x22150961b40 <col:15> 'limb':'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x22150961aa0 <col:15> 'const limb':'const int' lvalue Var 0x22150960eb8 'two62m2' 'const limb':'const int'
|   |   `-ImplicitCastExpr 0x22150961b58 <col:25, col:29> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x22150961b20 <col:25, col:29> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x22150961b08 <col:25> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x22150961ac0 <col:25> 'const limb *':'const limb *' lvalue ParmVar 0x22150960a98 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x22150961ae0 <col:28> 'int' 5
|   |-CompoundAssignOperator 0x22150961d30 <line:345:5, col:29> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x22150961c20 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x22150961c08 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x22150961bc0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x22150960a20 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x22150961be0 <col:9> 'int' 6
|   | `-BinaryOperator 0x22150961d10 <col:15, col:29> 'int' '-'
|   |   |-ImplicitCastExpr 0x22150961ce0 <col:15> 'limb':'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x22150961c40 <col:15> 'const limb':'const int' lvalue Var 0x22150960eb8 'two62m2' 'const limb':'const int'
|   |   `-ImplicitCastExpr 0x22150961cf8 <col:25, col:29> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x22150961cc0 <col:25, col:29> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x22150961ca8 <col:25> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x22150961c60 <col:25> 'const limb *':'const limb *' lvalue ParmVar 0x22150960a98 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x22150961c80 <col:28> 'int' 6
|   |-CompoundAssignOperator 0x22150961ed0 <line:346:5, col:29> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x22150961dc0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x22150961da8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x22150961d60 <col:5> 'limb *':'limb *' lvalue ParmVar 0x22150960a20 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x22150961d80 <col:9> 'int' 7
|   | `-BinaryOperator 0x22150961eb0 <col:15, col:29> 'int' '-'
|   |   |-ImplicitCastExpr 0x22150961e80 <col:15> 'limb':'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x22150961de0 <col:15> 'const limb':'const int' lvalue Var 0x22150960eb8 'two62m2' 'const limb':'const int'
|   |   `-ImplicitCastExpr 0x22150961e98 <col:25, col:29> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x22150961e60 <col:25, col:29> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x22150961e48 <col:25> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x22150961e00 <col:25> 'const limb *':'const limb *' lvalue ParmVar 0x22150960a98 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x22150961e20 <col:28> 'int' 7
|   `-CompoundAssignOperator 0x22150962070 <line:347:5, col:29> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|     |-ArraySubscriptExpr 0x22150961f60 <col:5, col:10> 'limb':'int' lvalue
|     | |-ImplicitCastExpr 0x22150961f48 <col:5> 'limb *':'limb *' <LValueToRValue>
|     | | `-DeclRefExpr 0x22150961f00 <col:5> 'limb *':'limb *' lvalue ParmVar 0x22150960a20 'out' 'limb *':'limb *'
|     | `-IntegerLiteral 0x22150961f20 <col:9> 'int' 8
|     `-BinaryOperator 0x22150962050 <col:15, col:29> 'int' '-'
|       |-ImplicitCastExpr 0x22150962020 <col:15> 'limb':'int' <LValueToRValue>
|       | `-DeclRefExpr 0x22150961f80 <col:15> 'const limb':'const int' lvalue Var 0x22150960eb8 'two62m2' 'const limb':'const int'
|       `-ImplicitCastExpr 0x22150962038 <col:25, col:29> 'limb':'int' <LValueToRValue>
|         `-ArraySubscriptExpr 0x22150962000 <col:25, col:29> 'const limb':'const int' lvalue
|           |-ImplicitCastExpr 0x22150961fe8 <col:25> 'const limb *':'const limb *' <LValueToRValue>
|           | `-DeclRefExpr 0x22150961fa0 <col:25> 'const limb *':'const limb *' lvalue ParmVar 0x22150960a98 'in' 'const limb *':'const limb *'
|           `-IntegerLiteral 0x22150961fc0 <col:28> 'int' 8
|-FunctionDecl 0x22150962298 <line:357:1, line:374:1> line:357:13 used felem_diff_128_64 'void (int *, const limb *)' static
| |-ParmVarDecl 0x22150962118 <col:31, col:42> col:42 used out 'int *':'int *'
| |-ParmVarDecl 0x22150962190 <col:47, col:59> col:59 used in 'const limb *':'const limb *'
| `-CompoundStmt 0x221509637d0 <line:358:1, line:374:1>
|   |-DeclStmt 0x221509625c8 <line:362:5, col:71>
|   | `-VarDecl 0x22150962370 <col:5, col:70> col:23 used two63m6 'const limb':'const int' static cinit
|   |   `-BinaryOperator 0x221509625a8 <col:33, col:70> 'int' '-'
|   |     |-ParenExpr 0x221509624a0 <col:33, col:50> 'limb':'int'
|   |     | `-BinaryOperator 0x22150962480 <col:34, col:48> 'limb':'int' '<<'
|   |     |   |-ParenExpr 0x22150962438 <col:34, col:43> 'limb':'int'
|   |     |   | `-CStyleCastExpr 0x22150962410 <col:35, col:42> 'limb':'int' <NoOp>
|   |     |   |   `-IntegerLiteral 0x221509623d8 <col:42> 'int' 1
|   |     |   `-IntegerLiteral 0x22150962458 <col:48> 'int' 62
|   |     `-ParenExpr 0x22150962588 <col:54, col:70> 'limb':'int'
|   |       `-BinaryOperator 0x22150962568 <col:55, col:69> 'limb':'int' '<<'
|   |         |-ParenExpr 0x22150962520 <col:55, col:64> 'limb':'int'
|   |         | `-CStyleCastExpr 0x221509624f8 <col:56, col:63> 'limb':'int' <NoOp>
|   |         |   `-IntegerLiteral 0x221509624c0 <col:63> 'int' 1
|   |         `-IntegerLiteral 0x22150962540 <col:69> 'int' 5
|   |-DeclStmt 0x22150962848 <line:363:5, col:71>
|   | `-VarDecl 0x221509625f0 <col:5, col:70> col:23 used two63m5 'const limb':'const int' static cinit
|   |   `-BinaryOperator 0x22150962828 <col:33, col:70> 'int' '-'
|   |     |-ParenExpr 0x22150962720 <col:33, col:50> 'limb':'int'
|   |     | `-BinaryOperator 0x22150962700 <col:34, col:48> 'limb':'int' '<<'
|   |     |   |-ParenExpr 0x221509626b8 <col:34, col:43> 'limb':'int'
|   |     |   | `-CStyleCastExpr 0x22150962690 <col:35, col:42> 'limb':'int' <NoOp>
|   |     |   |   `-IntegerLiteral 0x22150962658 <col:42> 'int' 1
|   |     |   `-IntegerLiteral 0x221509626d8 <col:48> 'int' 62
|   |     `-ParenExpr 0x22150962808 <col:54, col:70> 'limb':'int'
|   |       `-BinaryOperator 0x221509627e8 <col:55, col:69> 'limb':'int' '<<'
|   |         |-ParenExpr 0x221509627a0 <col:55, col:64> 'limb':'int'
|   |         | `-CStyleCastExpr 0x22150962778 <col:56, col:63> 'limb':'int' <NoOp>
|   |         |   `-IntegerLiteral 0x22150962740 <col:63> 'int' 1
|   |         `-IntegerLiteral 0x221509627c0 <col:69> 'int' 4
|   |-CompoundAssignOperator 0x221509629e8 <line:365:5, col:29> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x221509628c0 <col:5, col:10> 'int' lvalue
|   | | |-ImplicitCastExpr 0x221509628a8 <col:5> 'int *':'int *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x22150962860 <col:5> 'int *':'int *' lvalue ParmVar 0x22150962118 'out' 'int *':'int *'
|   | | `-IntegerLiteral 0x22150962880 <col:9> 'int' 0
|   | `-BinaryOperator 0x221509629c8 <col:15, col:29> 'int' '-'
|   |   |-ImplicitCastExpr 0x22150962998 <col:15> 'limb':'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x221509628e0 <col:15> 'const limb':'const int' lvalue Var 0x22150962370 'two63m6' 'const limb':'const int'
|   |   `-ImplicitCastExpr 0x221509629b0 <col:25, col:29> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x22150962978 <col:25, col:29> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x22150962960 <col:25> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x22150962918 <col:25> 'const limb *':'const limb *' lvalue ParmVar 0x22150962190 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x22150962938 <col:28> 'int' 0
|   |-CompoundAssignOperator 0x22150962be8 <line:366:5, col:29> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x22150962ac0 <col:5, col:10> 'int' lvalue
|   | | |-ImplicitCastExpr 0x22150962aa8 <col:5> 'int *':'int *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x22150962a60 <col:5> 'int *':'int *' lvalue ParmVar 0x22150962118 'out' 'int *':'int *'
|   | | `-IntegerLiteral 0x22150962a80 <col:9> 'int' 1
|   | `-BinaryOperator 0x22150962bc8 <col:15, col:29> 'int' '-'
|   |   |-ImplicitCastExpr 0x22150962b98 <col:15> 'limb':'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x22150962ae0 <col:15> 'const limb':'const int' lvalue Var 0x221509625f0 'two63m5' 'const limb':'const int'
|   |   `-ImplicitCastExpr 0x22150962bb0 <col:25, col:29> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x22150962b78 <col:25, col:29> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x22150962b60 <col:25> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x22150962b18 <col:25> 'const limb *':'const limb *' lvalue ParmVar 0x22150962190 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x22150962b38 <col:28> 'int' 1
|   |-CompoundAssignOperator 0x22150962dd0 <line:367:5, col:29> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x22150962cc0 <col:5, col:10> 'int' lvalue
|   | | |-ImplicitCastExpr 0x22150962ca8 <col:5> 'int *':'int *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x22150962c60 <col:5> 'int *':'int *' lvalue ParmVar 0x22150962118 'out' 'int *':'int *'
|   | | `-IntegerLiteral 0x22150962c80 <col:9> 'int' 2
|   | `-BinaryOperator 0x22150962db0 <col:15, col:29> 'int' '-'
|   |   |-ImplicitCastExpr 0x22150962d80 <col:15> 'limb':'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x22150962ce0 <col:15> 'const limb':'const int' lvalue Var 0x221509625f0 'two63m5' 'const limb':'const int'
|   |   `-ImplicitCastExpr 0x22150962d98 <col:25, col:29> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x22150962d60 <col:25, col:29> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x22150962d48 <col:25> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x22150962d00 <col:25> 'const limb *':'const limb *' lvalue ParmVar 0x22150962190 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x22150962d20 <col:28> 'int' 2
|   |-CompoundAssignOperator 0x22150962f70 <line:368:5, col:29> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x22150962e60 <col:5, col:10> 'int' lvalue
|   | | |-ImplicitCastExpr 0x22150962e48 <col:5> 'int *':'int *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x22150962e00 <col:5> 'int *':'int *' lvalue ParmVar 0x22150962118 'out' 'int *':'int *'
|   | | `-IntegerLiteral 0x22150962e20 <col:9> 'int' 3
|   | `-BinaryOperator 0x22150962f50 <col:15, col:29> 'int' '-'
|   |   |-ImplicitCastExpr 0x22150962f20 <col:15> 'limb':'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x22150962e80 <col:15> 'const limb':'const int' lvalue Var 0x221509625f0 'two63m5' 'const limb':'const int'
|   |   `-ImplicitCastExpr 0x22150962f38 <col:25, col:29> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x22150962f00 <col:25, col:29> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x22150962ee8 <col:25> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x22150962ea0 <col:25> 'const limb *':'const limb *' lvalue ParmVar 0x22150962190 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x22150962ec0 <col:28> 'int' 3
|   |-CompoundAssignOperator 0x22150963110 <line:369:5, col:29> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x22150963000 <col:5, col:10> 'int' lvalue
|   | | |-ImplicitCastExpr 0x22150962fe8 <col:5> 'int *':'int *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x22150962fa0 <col:5> 'int *':'int *' lvalue ParmVar 0x22150962118 'out' 'int *':'int *'
|   | | `-IntegerLiteral 0x22150962fc0 <col:9> 'int' 4
|   | `-BinaryOperator 0x221509630f0 <col:15, col:29> 'int' '-'
|   |   |-ImplicitCastExpr 0x221509630c0 <col:15> 'limb':'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x22150963020 <col:15> 'const limb':'const int' lvalue Var 0x221509625f0 'two63m5' 'const limb':'const int'
|   |   `-ImplicitCastExpr 0x221509630d8 <col:25, col:29> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x221509630a0 <col:25, col:29> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x22150963088 <col:25> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x22150963040 <col:25> 'const limb *':'const limb *' lvalue ParmVar 0x22150962190 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x22150963060 <col:28> 'int' 4
|   |-CompoundAssignOperator 0x221509632b0 <line:370:5, col:29> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x221509631a0 <col:5, col:10> 'int' lvalue
|   | | |-ImplicitCastExpr 0x22150963188 <col:5> 'int *':'int *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x22150963140 <col:5> 'int *':'int *' lvalue ParmVar 0x22150962118 'out' 'int *':'int *'
|   | | `-IntegerLiteral 0x22150963160 <col:9> 'int' 5
|   | `-BinaryOperator 0x22150963290 <col:15, col:29> 'int' '-'
|   |   |-ImplicitCastExpr 0x22150963260 <col:15> 'limb':'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x221509631c0 <col:15> 'const limb':'const int' lvalue Var 0x221509625f0 'two63m5' 'const limb':'const int'
|   |   `-ImplicitCastExpr 0x22150963278 <col:25, col:29> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x22150963240 <col:25, col:29> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x22150963228 <col:25> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x221509631e0 <col:25> 'const limb *':'const limb *' lvalue ParmVar 0x22150962190 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x22150963200 <col:28> 'int' 5
|   |-CompoundAssignOperator 0x22150963450 <line:371:5, col:29> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x22150963340 <col:5, col:10> 'int' lvalue
|   | | |-ImplicitCastExpr 0x22150963328 <col:5> 'int *':'int *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x221509632e0 <col:5> 'int *':'int *' lvalue ParmVar 0x22150962118 'out' 'int *':'int *'
|   | | `-IntegerLiteral 0x22150963300 <col:9> 'int' 6
|   | `-BinaryOperator 0x22150963430 <col:15, col:29> 'int' '-'
|   |   |-ImplicitCastExpr 0x22150963400 <col:15> 'limb':'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x22150963360 <col:15> 'const limb':'const int' lvalue Var 0x221509625f0 'two63m5' 'const limb':'const int'
|   |   `-ImplicitCastExpr 0x22150963418 <col:25, col:29> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x221509633e0 <col:25, col:29> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x221509633c8 <col:25> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x22150963380 <col:25> 'const limb *':'const limb *' lvalue ParmVar 0x22150962190 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x221509633a0 <col:28> 'int' 6
|   |-CompoundAssignOperator 0x221509635f0 <line:372:5, col:29> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x221509634e0 <col:5, col:10> 'int' lvalue
|   | | |-ImplicitCastExpr 0x221509634c8 <col:5> 'int *':'int *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x22150963480 <col:5> 'int *':'int *' lvalue ParmVar 0x22150962118 'out' 'int *':'int *'
|   | | `-IntegerLiteral 0x221509634a0 <col:9> 'int' 7
|   | `-BinaryOperator 0x221509635d0 <col:15, col:29> 'int' '-'
|   |   |-ImplicitCastExpr 0x221509635a0 <col:15> 'limb':'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x22150963500 <col:15> 'const limb':'const int' lvalue Var 0x221509625f0 'two63m5' 'const limb':'const int'
|   |   `-ImplicitCastExpr 0x221509635b8 <col:25, col:29> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x22150963580 <col:25, col:29> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x22150963568 <col:25> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x22150963520 <col:25> 'const limb *':'const limb *' lvalue ParmVar 0x22150962190 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x22150963540 <col:28> 'int' 7
|   `-CompoundAssignOperator 0x221509637a0 <line:373:5, col:29> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|     |-ArraySubscriptExpr 0x22150963680 <col:5, col:10> 'int' lvalue
|     | |-ImplicitCastExpr 0x22150963668 <col:5> 'int *':'int *' <LValueToRValue>
|     | | `-DeclRefExpr 0x22150963620 <col:5> 'int *':'int *' lvalue ParmVar 0x22150962118 'out' 'int *':'int *'
|     | `-IntegerLiteral 0x22150963640 <col:9> 'int' 8
|     `-BinaryOperator 0x22150963780 <col:15, col:29> 'int' '-'
|       |-ImplicitCastExpr 0x22150963750 <col:15> 'limb':'int' <LValueToRValue>
|       | `-DeclRefExpr 0x221509636a0 <col:15> 'const limb':'const int' lvalue Var 0x221509625f0 'two63m5' 'const limb':'const int'
|       `-ImplicitCastExpr 0x22150963768 <col:25, col:29> 'limb':'int' <LValueToRValue>
|         `-ArraySubscriptExpr 0x22150963730 <col:25, col:29> 'const limb':'const int' lvalue
|           |-ImplicitCastExpr 0x22150963718 <col:25> 'const limb *':'const limb *' <LValueToRValue>
|           | `-DeclRefExpr 0x221509636c0 <col:25> 'const limb *':'const limb *' lvalue ParmVar 0x22150962190 'in' 'const limb *':'const limb *'
|           `-IntegerLiteral 0x221509636f0 <col:28> 'int' 8
|-FunctionDecl 0x22150963a38 <line:383:1, line:402:1> line:383:13 used felem_diff128 'void (int *, const int *)' static
| |-ParmVarDecl 0x22150963848 <col:27, col:38> col:38 used out 'int *':'int *'
| |-ParmVarDecl 0x22150963930 <col:43, col:60> col:60 used in 'const int *':'const int *'
| `-CompoundStmt 0x221509645d0 <line:384:1, line:402:1>
|   |-DeclStmt 0x22150963bd0 <line:388:5, line:389:59>
|   | `-VarDecl 0x22150963b18 <line:388:5, col:28> col:28 invalid two127m70 'const int' static
|   `-DeclStmt 0x22150963cb8 <line:390:5, line:391:59>
|     `-VarDecl 0x22150963c00 <line:390:5, col:28> col:28 invalid two127m69 'const int' static
|-FunctionDecl 0x22150964740 <line:411:1, line:485:1> line:411:13 used felem_square 'void (int *, const limb *)' static
| |-ParmVarDecl 0x22150964600 <col:26, col:37> col:37 used out 'int *':'int *'
| |-ParmVarDecl 0x22150964678 <col:42, col:54> col:54 used in 'const limb *':'const limb *'
| `-CompoundStmt 0x22150966ae0 <line:412:1, line:485:1>
|   |-DeclStmt 0x22150964910 <line:413:5, col:21>
|   | |-VarDecl 0x22150964818 <col:5, col:11> col:11 used inx2 'felem':'limb [9]'
|   | `-VarDecl 0x22150964890 <col:5, col:17> col:17 used inx4 'felem':'limb [9]'
|   |-CallExpr 0x22150964a40 <line:414:5, col:29> 'void'
|   | |-ImplicitCastExpr 0x22150964a28 <col:5> 'void (*)(limb *, const limb *, limb)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150964928 <col:5> 'void (limb *, const limb *, limb)' Function 0x2215095cdf8 'felem_scalar' 'void (limb *, const limb *, limb)'
|   | |-ImplicitCastExpr 0x22150964a78 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150964948 <col:18> 'felem':'limb [9]' lvalue Var 0x22150964818 'inx2' 'felem':'limb [9]'
|   | |-ImplicitCastExpr 0x22150964a90 <col:24> 'const limb *':'const limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x22150964980 <col:24> 'const limb *':'const limb *' lvalue ParmVar 0x22150964678 'in' 'const limb *':'const limb *'
|   | `-IntegerLiteral 0x221509649a0 <col:28> 'int' 2
|   `-CallExpr 0x22150964b60 <line:415:5, col:29> 'void'
|     |-ImplicitCastExpr 0x22150964b48 <col:5> 'void (*)(limb *, const limb *, limb)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x22150964aa8 <col:5> 'void (limb *, const limb *, limb)' Function 0x2215095cdf8 'felem_scalar' 'void (limb *, const limb *, limb)'
|     |-ImplicitCastExpr 0x22150964b98 <col:18> 'limb *' <ArrayToPointerDecay>
|     | `-DeclRefExpr 0x22150964ac8 <col:18> 'felem':'limb [9]' lvalue Var 0x22150964890 'inx4' 'felem':'limb [9]'
|     |-ImplicitCastExpr 0x22150964bb0 <col:24> 'const limb *':'const limb *' <LValueToRValue>
|     | `-DeclRefExpr 0x22150964b00 <col:24> 'const limb *':'const limb *' lvalue ParmVar 0x22150964678 'in' 'const limb *':'const limb *'
|     `-IntegerLiteral 0x22150964b20 <col:28> 'int' 4
|-FunctionDecl 0x22150966d78 <line:495:1, line:599:1> line:495:13 used felem_mul 'void (int *, const limb *, const limb *)' static
| |-ParmVarDecl 0x22150966b18 <col:23, col:34> col:34 used out 'int *':'int *'
| |-ParmVarDecl 0x22150966b90 <col:39, col:51> col:51 in1 'const limb *':'const limb *'
| |-ParmVarDecl 0x22150966c08 <col:56, col:68> col:68 used in2 'const limb *':'const limb *'
| `-CompoundStmt 0x2215096a120 <line:496:1, line:599:1>
|   |-DeclStmt 0x22150966ec0 <line:497:5, col:16>
|   | `-VarDecl 0x22150966e58 <col:5, col:11> col:11 used in2x2 'felem':'limb [9]'
|   `-CallExpr 0x22150966f90 <line:498:5, col:31> 'void'
|     |-ImplicitCastExpr 0x22150966f78 <col:5> 'void (*)(limb *, const limb *, limb)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x22150966ed8 <col:5> 'void (limb *, const limb *, limb)' Function 0x2215095cdf8 'felem_scalar' 'void (limb *, const limb *, limb)'
|     |-ImplicitCastExpr 0x22150966fc8 <col:18> 'limb *' <ArrayToPointerDecay>
|     | `-DeclRefExpr 0x22150966ef8 <col:18> 'felem':'limb [9]' lvalue Var 0x22150966e58 'in2x2' 'felem':'limb [9]'
|     |-ImplicitCastExpr 0x22150966fe0 <col:25> 'const limb *':'const limb *' <LValueToRValue>
|     | `-DeclRefExpr 0x22150966f30 <col:25> 'const limb *':'const limb *' lvalue ParmVar 0x22150966c08 'in2' 'const limb *':'const limb *'
|     `-IntegerLiteral 0x22150966f50 <col:30> 'int' 2
|-VarDecl 0x2215096a150 <line:601:1, col:34> col:19 used bottom52bits 'const limb':'const int' static cinit
| `-ImplicitCastExpr 0x2215096a1f8 <col:34> 'limb':'int' <IntegralCast>
|   `-IntegerLiteral 0x2215096a1b8 <col:34> 'long long' 4503599627370495
|-FunctionDecl 0x2215096a398 <line:610:1, line:683:1> line:610:13 used felem_reduce 'void (limb *, const int *)' static
| |-ParmVarDecl 0x2215096a220 <col:26, col:32> col:32 used out 'limb *':'limb *'
| |-ParmVarDecl 0x2215096a298 <col:37, col:54> col:54 used in 'const int *':'const int *'
| `-CompoundStmt 0x22150a2d528 <line:611:1, line:683:1>
|   |-DeclStmt 0x2215096a588 <line:612:5, col:29>
|   | |-VarDecl 0x2215096a490 <col:5, col:9> col:9 used overflow1 'u64':'int'
|   | `-VarDecl 0x2215096a508 <col:5, col:20> col:20 used overflow2 'u64':'int'
|   |-BinaryOperator 0x2215096a768 <line:614:5, col:31> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2215096a600 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2215096a5e8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2215096a5a0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2215096a220 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2215096a5c0 <col:9> 'int' 0
|   | `-BinaryOperator 0x2215096a748 <col:14, col:31> 'int' '&'
|   |   |-ParenExpr 0x2215096a6f0 <col:14, col:27> 'limb':'int'
|   |   | `-CStyleCastExpr 0x2215096a6c8 <col:15, col:26> 'limb':'int' <NoOp>
|   |   |   `-ImplicitCastExpr 0x2215096a6b0 <col:22, col:26> 'int' <LValueToRValue> part_of_explicit_cast
|   |   |     `-ArraySubscriptExpr 0x2215096a680 <col:22, col:26> 'const int' lvalue
|   |   |       |-ImplicitCastExpr 0x2215096a668 <col:22> 'const int *':'const int *' <LValueToRValue>
|   |   |       | `-DeclRefExpr 0x2215096a620 <col:22> 'const int *':'const int *' lvalue ParmVar 0x2215096a298 'in' 'const int *':'const int *'
|   |   |       `-IntegerLiteral 0x2215096a640 <col:25> 'int' 0
|   |   `-ImplicitCastExpr 0x2215096a730 <col:31> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x2215096a710 <col:31> 'const limb':'const int' lvalue Var 0x221509553c0 'bottom58bits' 'const limb':'const int'
|   |-BinaryOperator 0x2215096a950 <line:615:5, col:31> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2215096a7e8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2215096a7d0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2215096a788 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2215096a220 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2215096a7a8 <col:9> 'int' 1
|   | `-BinaryOperator 0x2215096a930 <col:14, col:31> 'int' '&'
|   |   |-ParenExpr 0x2215096a8d8 <col:14, col:27> 'limb':'int'
|   |   | `-CStyleCastExpr 0x2215096a8b0 <col:15, col:26> 'limb':'int' <NoOp>
|   |   |   `-ImplicitCastExpr 0x2215096a898 <col:22, col:26> 'int' <LValueToRValue> part_of_explicit_cast
|   |   |     `-ArraySubscriptExpr 0x2215096a868 <col:22, col:26> 'const int' lvalue
|   |   |       |-ImplicitCastExpr 0x2215096a850 <col:22> 'const int *':'const int *' <LValueToRValue>
|   |   |       | `-DeclRefExpr 0x2215096a808 <col:22> 'const int *':'const int *' lvalue ParmVar 0x2215096a298 'in' 'const int *':'const int *'
|   |   |       `-IntegerLiteral 0x2215096a828 <col:25> 'int' 1
|   |   `-ImplicitCastExpr 0x2215096a918 <col:31> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x2215096a8f8 <col:31> 'const limb':'const int' lvalue Var 0x221509553c0 'bottom58bits' 'const limb':'const int'
|   |-BinaryOperator 0x2215096ab38 <line:616:5, col:31> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2215096a9d0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2215096a9b8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2215096a970 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2215096a220 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2215096a990 <col:9> 'int' 2
|   | `-BinaryOperator 0x2215096ab18 <col:14, col:31> 'int' '&'
|   |   |-ParenExpr 0x2215096aac0 <col:14, col:27> 'limb':'int'
|   |   | `-CStyleCastExpr 0x2215096aa98 <col:15, col:26> 'limb':'int' <NoOp>
|   |   |   `-ImplicitCastExpr 0x2215096aa80 <col:22, col:26> 'int' <LValueToRValue> part_of_explicit_cast
|   |   |     `-ArraySubscriptExpr 0x2215096aa50 <col:22, col:26> 'const int' lvalue
|   |   |       |-ImplicitCastExpr 0x2215096aa38 <col:22> 'const int *':'const int *' <LValueToRValue>
|   |   |       | `-DeclRefExpr 0x2215096a9f0 <col:22> 'const int *':'const int *' lvalue ParmVar 0x2215096a298 'in' 'const int *':'const int *'
|   |   |       `-IntegerLiteral 0x2215096aa10 <col:25> 'int' 2
|   |   `-ImplicitCastExpr 0x2215096ab00 <col:31> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x2215096aae0 <col:31> 'const limb':'const int' lvalue Var 0x221509553c0 'bottom58bits' 'const limb':'const int'
|   |-BinaryOperator 0x2215096ad20 <line:617:5, col:31> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2215096abb8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2215096aba0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2215096ab58 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2215096a220 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2215096ab78 <col:9> 'int' 3
|   | `-BinaryOperator 0x2215096ad00 <col:14, col:31> 'int' '&'
|   |   |-ParenExpr 0x2215096aca8 <col:14, col:27> 'limb':'int'
|   |   | `-CStyleCastExpr 0x2215096ac80 <col:15, col:26> 'limb':'int' <NoOp>
|   |   |   `-ImplicitCastExpr 0x2215096ac68 <col:22, col:26> 'int' <LValueToRValue> part_of_explicit_cast
|   |   |     `-ArraySubscriptExpr 0x2215096ac38 <col:22, col:26> 'const int' lvalue
|   |   |       |-ImplicitCastExpr 0x2215096ac20 <col:22> 'const int *':'const int *' <LValueToRValue>
|   |   |       | `-DeclRefExpr 0x2215096abd8 <col:22> 'const int *':'const int *' lvalue ParmVar 0x2215096a298 'in' 'const int *':'const int *'
|   |   |       `-IntegerLiteral 0x2215096abf8 <col:25> 'int' 3
|   |   `-ImplicitCastExpr 0x2215096ace8 <col:31> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x2215096acc8 <col:31> 'const limb':'const int' lvalue Var 0x221509553c0 'bottom58bits' 'const limb':'const int'
|   |-BinaryOperator 0x2215096af08 <line:618:5, col:31> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2215096ada0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2215096ad88 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2215096ad40 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2215096a220 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2215096ad60 <col:9> 'int' 4
|   | `-BinaryOperator 0x2215096aee8 <col:14, col:31> 'int' '&'
|   |   |-ParenExpr 0x2215096ae90 <col:14, col:27> 'limb':'int'
|   |   | `-CStyleCastExpr 0x2215096ae68 <col:15, col:26> 'limb':'int' <NoOp>
|   |   |   `-ImplicitCastExpr 0x2215096ae50 <col:22, col:26> 'int' <LValueToRValue> part_of_explicit_cast
|   |   |     `-ArraySubscriptExpr 0x2215096ae20 <col:22, col:26> 'const int' lvalue
|   |   |       |-ImplicitCastExpr 0x2215096ae08 <col:22> 'const int *':'const int *' <LValueToRValue>
|   |   |       | `-DeclRefExpr 0x2215096adc0 <col:22> 'const int *':'const int *' lvalue ParmVar 0x2215096a298 'in' 'const int *':'const int *'
|   |   |       `-IntegerLiteral 0x2215096ade0 <col:25> 'int' 4
|   |   `-ImplicitCastExpr 0x2215096aed0 <col:31> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x2215096aeb0 <col:31> 'const limb':'const int' lvalue Var 0x221509553c0 'bottom58bits' 'const limb':'const int'
|   |-BinaryOperator 0x2215096b0f0 <line:619:5, col:31> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2215096af88 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2215096af70 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2215096af28 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2215096a220 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2215096af48 <col:9> 'int' 5
|   | `-BinaryOperator 0x2215096b0d0 <col:14, col:31> 'int' '&'
|   |   |-ParenExpr 0x2215096b078 <col:14, col:27> 'limb':'int'
|   |   | `-CStyleCastExpr 0x2215096b050 <col:15, col:26> 'limb':'int' <NoOp>
|   |   |   `-ImplicitCastExpr 0x2215096b038 <col:22, col:26> 'int' <LValueToRValue> part_of_explicit_cast
|   |   |     `-ArraySubscriptExpr 0x2215096b008 <col:22, col:26> 'const int' lvalue
|   |   |       |-ImplicitCastExpr 0x2215096aff0 <col:22> 'const int *':'const int *' <LValueToRValue>
|   |   |       | `-DeclRefExpr 0x2215096afa8 <col:22> 'const int *':'const int *' lvalue ParmVar 0x2215096a298 'in' 'const int *':'const int *'
|   |   |       `-IntegerLiteral 0x2215096afc8 <col:25> 'int' 5
|   |   `-ImplicitCastExpr 0x2215096b0b8 <col:31> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x2215096b098 <col:31> 'const limb':'const int' lvalue Var 0x221509553c0 'bottom58bits' 'const limb':'const int'
|   |-BinaryOperator 0x2215096b2d8 <line:620:5, col:31> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2215096b170 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2215096b158 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2215096b110 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2215096a220 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2215096b130 <col:9> 'int' 6
|   | `-BinaryOperator 0x2215096b2b8 <col:14, col:31> 'int' '&'
|   |   |-ParenExpr 0x2215096b260 <col:14, col:27> 'limb':'int'
|   |   | `-CStyleCastExpr 0x2215096b238 <col:15, col:26> 'limb':'int' <NoOp>
|   |   |   `-ImplicitCastExpr 0x2215096b220 <col:22, col:26> 'int' <LValueToRValue> part_of_explicit_cast
|   |   |     `-ArraySubscriptExpr 0x2215096b1f0 <col:22, col:26> 'const int' lvalue
|   |   |       |-ImplicitCastExpr 0x2215096b1d8 <col:22> 'const int *':'const int *' <LValueToRValue>
|   |   |       | `-DeclRefExpr 0x2215096b190 <col:22> 'const int *':'const int *' lvalue ParmVar 0x2215096a298 'in' 'const int *':'const int *'
|   |   |       `-IntegerLiteral 0x2215096b1b0 <col:25> 'int' 6
|   |   `-ImplicitCastExpr 0x2215096b2a0 <col:31> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x2215096b280 <col:31> 'const limb':'const int' lvalue Var 0x221509553c0 'bottom58bits' 'const limb':'const int'
|   |-BinaryOperator 0x2215096b4c0 <line:621:5, col:31> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2215096b358 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2215096b340 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2215096b2f8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2215096a220 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2215096b318 <col:9> 'int' 7
|   | `-BinaryOperator 0x2215096b4a0 <col:14, col:31> 'int' '&'
|   |   |-ParenExpr 0x2215096b448 <col:14, col:27> 'limb':'int'
|   |   | `-CStyleCastExpr 0x2215096b420 <col:15, col:26> 'limb':'int' <NoOp>
|   |   |   `-ImplicitCastExpr 0x2215096b408 <col:22, col:26> 'int' <LValueToRValue> part_of_explicit_cast
|   |   |     `-ArraySubscriptExpr 0x2215096b3d8 <col:22, col:26> 'const int' lvalue
|   |   |       |-ImplicitCastExpr 0x2215096b3c0 <col:22> 'const int *':'const int *' <LValueToRValue>
|   |   |       | `-DeclRefExpr 0x2215096b378 <col:22> 'const int *':'const int *' lvalue ParmVar 0x2215096a298 'in' 'const int *':'const int *'
|   |   |       `-IntegerLiteral 0x2215096b398 <col:25> 'int' 7
|   |   `-ImplicitCastExpr 0x2215096b488 <col:31> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x2215096b468 <col:31> 'const limb':'const int' lvalue Var 0x221509553c0 'bottom58bits' 'const limb':'const int'
|   |-BinaryOperator 0x2215096b6a8 <line:622:5, col:31> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x2215096b540 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2215096b528 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2215096b4e0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2215096a220 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2215096b500 <col:9> 'int' 8
|   | `-BinaryOperator 0x2215096b688 <col:14, col:31> 'int' '&'
|   |   |-ParenExpr 0x2215096b630 <col:14, col:27> 'limb':'int'
|   |   | `-CStyleCastExpr 0x2215096b608 <col:15, col:26> 'limb':'int' <NoOp>
|   |   |   `-ImplicitCastExpr 0x2215096b5f0 <col:22, col:26> 'int' <LValueToRValue> part_of_explicit_cast
|   |   |     `-ArraySubscriptExpr 0x2215096b5c0 <col:22, col:26> 'const int' lvalue
|   |   |       |-ImplicitCastExpr 0x2215096b5a8 <col:22> 'const int *':'const int *' <LValueToRValue>
|   |   |       | `-DeclRefExpr 0x2215096b560 <col:22> 'const int *':'const int *' lvalue ParmVar 0x2215096a298 'in' 'const int *':'const int *'
|   |   |       `-IntegerLiteral 0x2215096b580 <col:25> 'int' 8
|   |   `-ImplicitCastExpr 0x2215096b670 <col:31> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x2215096b650 <col:31> 'const limb':'const int' lvalue Var 0x221509553c0 'bottom58bits' 'const limb':'const int'
|   |-CompoundAssignOperator 0x2215096b8a0 <line:626:5, col:33> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2215096b748 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2215096b730 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2215096b6c8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2215096a220 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2215096b6e8 <col:9> 'int' 1
|   | `-BinaryOperator 0x2215096b880 <col:15, col:33> 'limb':'int' '>>'
|   |   |-ParenExpr 0x2215096b838 <col:15, col:28> 'limb':'int'
|   |   | `-CStyleCastExpr 0x2215096b810 <col:16, col:27> 'limb':'int' <NoOp>
|   |   |   `-ImplicitCastExpr 0x2215096b7f8 <col:23, col:27> 'int' <LValueToRValue> part_of_explicit_cast
|   |   |     `-ArraySubscriptExpr 0x2215096b7c8 <col:23, col:27> 'const int' lvalue
|   |   |       |-ImplicitCastExpr 0x2215096b7b0 <col:23> 'const int *':'const int *' <LValueToRValue>
|   |   |       | `-DeclRefExpr 0x2215096b768 <col:23> 'const int *':'const int *' lvalue ParmVar 0x2215096a298 'in' 'const int *':'const int *'
|   |   |       `-IntegerLiteral 0x2215096b788 <col:26> 'int' 0
|   |   `-IntegerLiteral 0x2215096b858 <col:33> 'int' 58
|   |-CompoundAssignOperator 0x2215096bb88 <line:627:5, col:58> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2215096b930 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2215096b918 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2215096b8d0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2215096a220 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2215096b8f0 <col:9> 'int' 1
|   | `-BinaryOperator 0x2215096bb68 <col:15, col:58> 'int' '<<'
|   |   |-ParenExpr 0x2215096bb20 <col:15, col:53> 'int'
|   |   | `-BinaryOperator 0x2215096bb00 <col:16, col:41> 'int' '&'
|   |   |   |-ParenExpr 0x2215096baa8 <col:16, col:37> 'limb':'int'
|   |   |   | `-CStyleCastExpr 0x2215096ba80 <col:17, col:36> 'limb':'int' <NoOp>
|   |   |   |   `-ParenExpr 0x2215096ba60 <col:24, col:36> 'int'
|   |   |   |     `-BinaryOperator 0x2215096ba10 <col:25, col:34> 'int' '>>'
|   |   |   |       |-ImplicitCastExpr 0x2215096b9f8 <col:25, col:29> 'int' <LValueToRValue>
|   |   |   |       | `-ArraySubscriptExpr 0x2215096b9b0 <col:25, col:29> 'const int' lvalue
|   |   |   |       |   |-ImplicitCastExpr 0x2215096b998 <col:25> 'const int *':'const int *' <LValueToRValue>
|   |   |   |       |   | `-DeclRefExpr 0x2215096b950 <col:25> 'const int *':'const int *' lvalue ParmVar 0x2215096a298 'in' 'const int *':'const int *'
|   |   |   |       |   `-IntegerLiteral 0x2215096b970 <col:28> 'int' 0
|   |   |   |       `-IntegerLiteral 0x2215096b9d0 <col:34> 'int' 64
|   |   |   `-ImplicitCastExpr 0x2215096bae8 <col:41> 'limb':'int' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x2215096bac8 <col:41> 'const limb':'const int' lvalue Var 0x2215096a150 'bottom52bits' 'const limb':'const int'
|   |   `-IntegerLiteral 0x2215096bb40 <col:58> 'int' 6
|   |-CompoundAssignOperator 0x2215096be40 <line:632:5, col:41> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2215096bc60 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2215096bc48 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2215096bc00 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2215096a220 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2215096bc20 <col:9> 'int' 2
|   | `-BinaryOperator 0x2215096be20 <col:15, col:41> 'limb':'int' '>>'
|   |   |-ParenExpr 0x2215096bdd8 <col:15, col:36> 'limb':'int'
|   |   | `-CStyleCastExpr 0x2215096bdb0 <col:16, col:35> 'limb':'int' <NoOp>
|   |   |   `-ParenExpr 0x2215096bd90 <col:23, col:35> 'int'
|   |   |     `-BinaryOperator 0x2215096bd40 <col:24, col:33> 'int' '>>'
|   |   |       |-ImplicitCastExpr 0x2215096bd28 <col:24, col:28> 'int' <LValueToRValue>
|   |   |       | `-ArraySubscriptExpr 0x2215096bce0 <col:24, col:28> 'const int' lvalue
|   |   |       |   |-ImplicitCastExpr 0x2215096bcc8 <col:24> 'const int *':'const int *' <LValueToRValue>
|   |   |       |   | `-DeclRefExpr 0x2215096bc80 <col:24> 'const int *':'const int *' lvalue ParmVar 0x2215096a298 'in' 'const int *':'const int *'
|   |   |       |   `-IntegerLiteral 0x2215096bca0 <col:27> 'int' 0
|   |   |       `-IntegerLiteral 0x2215096bd00 <col:33> 'int' 64
|   |   `-IntegerLiteral 0x2215096bdf8 <col:41> 'int' 52
|   |-CompoundAssignOperator 0x2215096c028 <line:634:5, col:33> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2215096bed0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2215096beb8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2215096be70 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2215096a220 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2215096be90 <col:9> 'int' 2
|   | `-BinaryOperator 0x2215096c008 <col:15, col:33> 'limb':'int' '>>'
|   |   |-ParenExpr 0x2215096bfc0 <col:15, col:28> 'limb':'int'
|   |   | `-CStyleCastExpr 0x2215096bf98 <col:16, col:27> 'limb':'int' <NoOp>
|   |   |   `-ImplicitCastExpr 0x2215096bf80 <col:23, col:27> 'int' <LValueToRValue> part_of_explicit_cast
|   |   |     `-ArraySubscriptExpr 0x2215096bf50 <col:23, col:27> 'const int' lvalue
|   |   |       |-ImplicitCastExpr 0x2215096bf38 <col:23> 'const int *':'const int *' <LValueToRValue>
|   |   |       | `-DeclRefExpr 0x2215096bef0 <col:23> 'const int *':'const int *' lvalue ParmVar 0x2215096a298 'in' 'const int *':'const int *'
|   |   |       `-IntegerLiteral 0x2215096bf10 <col:26> 'int' 1
|   |   `-IntegerLiteral 0x2215096bfe0 <col:33> 'int' 58
|   |-CompoundAssignOperator 0x2215096c310 <line:635:5, col:58> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2215096c0b8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2215096c0a0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2215096c058 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2215096a220 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2215096c078 <col:9> 'int' 2
|   | `-BinaryOperator 0x2215096c2f0 <col:15, col:58> 'int' '<<'
|   |   |-ParenExpr 0x2215096c2a8 <col:15, col:53> 'int'
|   |   | `-BinaryOperator 0x2215096c288 <col:16, col:41> 'int' '&'
|   |   |   |-ParenExpr 0x2215096c230 <col:16, col:37> 'limb':'int'
|   |   |   | `-CStyleCastExpr 0x2215096c208 <col:17, col:36> 'limb':'int' <NoOp>
|   |   |   |   `-ParenExpr 0x2215096c1e8 <col:24, col:36> 'int'
|   |   |   |     `-BinaryOperator 0x2215096c198 <col:25, col:34> 'int' '>>'
|   |   |   |       |-ImplicitCastExpr 0x2215096c180 <col:25, col:29> 'int' <LValueToRValue>
|   |   |   |       | `-ArraySubscriptExpr 0x2215096c138 <col:25, col:29> 'const int' lvalue
|   |   |   |       |   |-ImplicitCastExpr 0x2215096c120 <col:25> 'const int *':'const int *' <LValueToRValue>
|   |   |   |       |   | `-DeclRefExpr 0x2215096c0d8 <col:25> 'const int *':'const int *' lvalue ParmVar 0x2215096a298 'in' 'const int *':'const int *'
|   |   |   |       |   `-IntegerLiteral 0x2215096c0f8 <col:28> 'int' 1
|   |   |   |       `-IntegerLiteral 0x2215096c158 <col:34> 'int' 64
|   |   |   `-ImplicitCastExpr 0x2215096c270 <col:41> 'limb':'int' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x2215096c250 <col:41> 'const limb':'const int' lvalue Var 0x2215096a150 'bottom52bits' 'const limb':'const int'
|   |   `-IntegerLiteral 0x2215096c2c8 <col:58> 'int' 6
|   |-CompoundAssignOperator 0x2215096c580 <line:636:5, col:41> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2215096c3a0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2215096c388 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2215096c340 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2215096a220 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2215096c360 <col:9> 'int' 3
|   | `-BinaryOperator 0x2215096c560 <col:15, col:41> 'limb':'int' '>>'
|   |   |-ParenExpr 0x2215096c518 <col:15, col:36> 'limb':'int'
|   |   | `-CStyleCastExpr 0x2215096c4f0 <col:16, col:35> 'limb':'int' <NoOp>
|   |   |   `-ParenExpr 0x2215096c4d0 <col:23, col:35> 'int'
|   |   |     `-BinaryOperator 0x2215096c480 <col:24, col:33> 'int' '>>'
|   |   |       |-ImplicitCastExpr 0x2215096c468 <col:24, col:28> 'int' <LValueToRValue>
|   |   |       | `-ArraySubscriptExpr 0x2215096c420 <col:24, col:28> 'const int' lvalue
|   |   |       |   |-ImplicitCastExpr 0x2215096c408 <col:24> 'const int *':'const int *' <LValueToRValue>
|   |   |       |   | `-DeclRefExpr 0x2215096c3c0 <col:24> 'const int *':'const int *' lvalue ParmVar 0x2215096a298 'in' 'const int *':'const int *'
|   |   |       |   `-IntegerLiteral 0x2215096c3e0 <col:27> 'int' 1
|   |   |       `-IntegerLiteral 0x2215096c440 <col:33> 'int' 64
|   |   `-IntegerLiteral 0x2215096c538 <col:41> 'int' 52
|   |-CompoundAssignOperator 0x2215096c768 <line:638:5, col:33> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2215096c610 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2215096c5f8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2215096c5b0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2215096a220 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2215096c5d0 <col:9> 'int' 3
|   | `-BinaryOperator 0x2215096c748 <col:15, col:33> 'limb':'int' '>>'
|   |   |-ParenExpr 0x2215096c700 <col:15, col:28> 'limb':'int'
|   |   | `-CStyleCastExpr 0x2215096c6d8 <col:16, col:27> 'limb':'int' <NoOp>
|   |   |   `-ImplicitCastExpr 0x2215096c6c0 <col:23, col:27> 'int' <LValueToRValue> part_of_explicit_cast
|   |   |     `-ArraySubscriptExpr 0x2215096c690 <col:23, col:27> 'const int' lvalue
|   |   |       |-ImplicitCastExpr 0x2215096c678 <col:23> 'const int *':'const int *' <LValueToRValue>
|   |   |       | `-DeclRefExpr 0x2215096c630 <col:23> 'const int *':'const int *' lvalue ParmVar 0x2215096a298 'in' 'const int *':'const int *'
|   |   |       `-IntegerLiteral 0x2215096c650 <col:26> 'int' 2
|   |   `-IntegerLiteral 0x2215096c720 <col:33> 'int' 58
|   |-CompoundAssignOperator 0x2215096ca50 <line:639:5, col:58> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2215096c7f8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2215096c7e0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2215096c798 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2215096a220 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2215096c7b8 <col:9> 'int' 3
|   | `-BinaryOperator 0x2215096ca30 <col:15, col:58> 'int' '<<'
|   |   |-ParenExpr 0x2215096c9e8 <col:15, col:53> 'int'
|   |   | `-BinaryOperator 0x2215096c9c8 <col:16, col:41> 'int' '&'
|   |   |   |-ParenExpr 0x2215096c970 <col:16, col:37> 'limb':'int'
|   |   |   | `-CStyleCastExpr 0x2215096c948 <col:17, col:36> 'limb':'int' <NoOp>
|   |   |   |   `-ParenExpr 0x2215096c928 <col:24, col:36> 'int'
|   |   |   |     `-BinaryOperator 0x2215096c8d8 <col:25, col:34> 'int' '>>'
|   |   |   |       |-ImplicitCastExpr 0x2215096c8c0 <col:25, col:29> 'int' <LValueToRValue>
|   |   |   |       | `-ArraySubscriptExpr 0x2215096c878 <col:25, col:29> 'const int' lvalue
|   |   |   |       |   |-ImplicitCastExpr 0x2215096c860 <col:25> 'const int *':'const int *' <LValueToRValue>
|   |   |   |       |   | `-DeclRefExpr 0x2215096c818 <col:25> 'const int *':'const int *' lvalue ParmVar 0x2215096a298 'in' 'const int *':'const int *'
|   |   |   |       |   `-IntegerLiteral 0x2215096c838 <col:28> 'int' 2
|   |   |   |       `-IntegerLiteral 0x2215096c898 <col:34> 'int' 64
|   |   |   `-ImplicitCastExpr 0x2215096c9b0 <col:41> 'limb':'int' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x2215096c990 <col:41> 'const limb':'const int' lvalue Var 0x2215096a150 'bottom52bits' 'const limb':'const int'
|   |   `-IntegerLiteral 0x2215096ca08 <col:58> 'int' 6
|   |-CompoundAssignOperator 0x2215096ccc0 <line:640:5, col:41> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2215096cae0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2215096cac8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2215096ca80 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2215096a220 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2215096caa0 <col:9> 'int' 4
|   | `-BinaryOperator 0x2215096cca0 <col:15, col:41> 'limb':'int' '>>'
|   |   |-ParenExpr 0x2215096cc58 <col:15, col:36> 'limb':'int'
|   |   | `-CStyleCastExpr 0x2215096cc30 <col:16, col:35> 'limb':'int' <NoOp>
|   |   |   `-ParenExpr 0x2215096cc10 <col:23, col:35> 'int'
|   |   |     `-BinaryOperator 0x2215096cbc0 <col:24, col:33> 'int' '>>'
|   |   |       |-ImplicitCastExpr 0x2215096cba8 <col:24, col:28> 'int' <LValueToRValue>
|   |   |       | `-ArraySubscriptExpr 0x2215096cb60 <col:24, col:28> 'const int' lvalue
|   |   |       |   |-ImplicitCastExpr 0x2215096cb48 <col:24> 'const int *':'const int *' <LValueToRValue>
|   |   |       |   | `-DeclRefExpr 0x2215096cb00 <col:24> 'const int *':'const int *' lvalue ParmVar 0x2215096a298 'in' 'const int *':'const int *'
|   |   |       |   `-IntegerLiteral 0x2215096cb20 <col:27> 'int' 2
|   |   |       `-IntegerLiteral 0x2215096cb80 <col:33> 'int' 64
|   |   `-IntegerLiteral 0x2215096cc78 <col:41> 'int' 52
|   |-CompoundAssignOperator 0x2215096cea8 <line:642:5, col:33> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2215096cd50 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2215096cd38 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2215096ccf0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2215096a220 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2215096cd10 <col:9> 'int' 4
|   | `-BinaryOperator 0x2215096ce88 <col:15, col:33> 'limb':'int' '>>'
|   |   |-ParenExpr 0x2215096ce40 <col:15, col:28> 'limb':'int'
|   |   | `-CStyleCastExpr 0x2215096ce18 <col:16, col:27> 'limb':'int' <NoOp>
|   |   |   `-ImplicitCastExpr 0x2215096ce00 <col:23, col:27> 'int' <LValueToRValue> part_of_explicit_cast
|   |   |     `-ArraySubscriptExpr 0x2215096cdd0 <col:23, col:27> 'const int' lvalue
|   |   |       |-ImplicitCastExpr 0x2215096cdb8 <col:23> 'const int *':'const int *' <LValueToRValue>
|   |   |       | `-DeclRefExpr 0x2215096cd70 <col:23> 'const int *':'const int *' lvalue ParmVar 0x2215096a298 'in' 'const int *':'const int *'
|   |   |       `-IntegerLiteral 0x2215096cd90 <col:26> 'int' 3
|   |   `-IntegerLiteral 0x2215096ce60 <col:33> 'int' 58
|   |-CompoundAssignOperator 0x2215096d190 <line:643:5, col:58> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2215096cf38 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2215096cf20 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2215096ced8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2215096a220 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2215096cef8 <col:9> 'int' 4
|   | `-BinaryOperator 0x2215096d170 <col:15, col:58> 'int' '<<'
|   |   |-ParenExpr 0x2215096d128 <col:15, col:53> 'int'
|   |   | `-BinaryOperator 0x2215096d108 <col:16, col:41> 'int' '&'
|   |   |   |-ParenExpr 0x2215096d0b0 <col:16, col:37> 'limb':'int'
|   |   |   | `-CStyleCastExpr 0x2215096d088 <col:17, col:36> 'limb':'int' <NoOp>
|   |   |   |   `-ParenExpr 0x2215096d068 <col:24, col:36> 'int'
|   |   |   |     `-BinaryOperator 0x2215096d018 <col:25, col:34> 'int' '>>'
|   |   |   |       |-ImplicitCastExpr 0x2215096d000 <col:25, col:29> 'int' <LValueToRValue>
|   |   |   |       | `-ArraySubscriptExpr 0x2215096cfb8 <col:25, col:29> 'const int' lvalue
|   |   |   |       |   |-ImplicitCastExpr 0x2215096cfa0 <col:25> 'const int *':'const int *' <LValueToRValue>
|   |   |   |       |   | `-DeclRefExpr 0x2215096cf58 <col:25> 'const int *':'const int *' lvalue ParmVar 0x2215096a298 'in' 'const int *':'const int *'
|   |   |   |       |   `-IntegerLiteral 0x2215096cf78 <col:28> 'int' 3
|   |   |   |       `-IntegerLiteral 0x2215096cfd8 <col:34> 'int' 64
|   |   |   `-ImplicitCastExpr 0x2215096d0f0 <col:41> 'limb':'int' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x2215096d0d0 <col:41> 'const limb':'const int' lvalue Var 0x2215096a150 'bottom52bits' 'const limb':'const int'
|   |   `-IntegerLiteral 0x2215096d148 <col:58> 'int' 6
|   |-CompoundAssignOperator 0x2215096d400 <line:644:5, col:41> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2215096d220 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2215096d208 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2215096d1c0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2215096a220 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2215096d1e0 <col:9> 'int' 5
|   | `-BinaryOperator 0x2215096d3e0 <col:15, col:41> 'limb':'int' '>>'
|   |   |-ParenExpr 0x2215096d398 <col:15, col:36> 'limb':'int'
|   |   | `-CStyleCastExpr 0x2215096d370 <col:16, col:35> 'limb':'int' <NoOp>
|   |   |   `-ParenExpr 0x2215096d350 <col:23, col:35> 'int'
|   |   |     `-BinaryOperator 0x2215096d300 <col:24, col:33> 'int' '>>'
|   |   |       |-ImplicitCastExpr 0x2215096d2e8 <col:24, col:28> 'int' <LValueToRValue>
|   |   |       | `-ArraySubscriptExpr 0x2215096d2a0 <col:24, col:28> 'const int' lvalue
|   |   |       |   |-ImplicitCastExpr 0x2215096d288 <col:24> 'const int *':'const int *' <LValueToRValue>
|   |   |       |   | `-DeclRefExpr 0x2215096d240 <col:24> 'const int *':'const int *' lvalue ParmVar 0x2215096a298 'in' 'const int *':'const int *'
|   |   |       |   `-IntegerLiteral 0x2215096d260 <col:27> 'int' 3
|   |   |       `-IntegerLiteral 0x2215096d2c0 <col:33> 'int' 64
|   |   `-IntegerLiteral 0x2215096d3b8 <col:41> 'int' 52
|   |-CompoundAssignOperator 0x2215096d5e8 <line:646:5, col:33> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2215096d490 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2215096d478 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2215096d430 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2215096a220 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2215096d450 <col:9> 'int' 5
|   | `-BinaryOperator 0x2215096d5c8 <col:15, col:33> 'limb':'int' '>>'
|   |   |-ParenExpr 0x2215096d580 <col:15, col:28> 'limb':'int'
|   |   | `-CStyleCastExpr 0x2215096d558 <col:16, col:27> 'limb':'int' <NoOp>
|   |   |   `-ImplicitCastExpr 0x2215096d540 <col:23, col:27> 'int' <LValueToRValue> part_of_explicit_cast
|   |   |     `-ArraySubscriptExpr 0x2215096d510 <col:23, col:27> 'const int' lvalue
|   |   |       |-ImplicitCastExpr 0x2215096d4f8 <col:23> 'const int *':'const int *' <LValueToRValue>
|   |   |       | `-DeclRefExpr 0x2215096d4b0 <col:23> 'const int *':'const int *' lvalue ParmVar 0x2215096a298 'in' 'const int *':'const int *'
|   |   |       `-IntegerLiteral 0x2215096d4d0 <col:26> 'int' 4
|   |   `-IntegerLiteral 0x2215096d5a0 <col:33> 'int' 58
|   |-CompoundAssignOperator 0x2215096d8f8 <line:647:5, col:58> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2215096d678 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2215096d660 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2215096d618 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2215096a220 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2215096d638 <col:9> 'int' 5
|   | `-BinaryOperator 0x2215096d8d8 <col:15, col:58> 'int' '<<'
|   |   |-ParenExpr 0x2215096d890 <col:15, col:53> 'int'
|   |   | `-BinaryOperator 0x2215096d870 <col:16, col:41> 'int' '&'
|   |   |   |-ParenExpr 0x2215096d818 <col:16, col:37> 'limb':'int'
|   |   |   | `-CStyleCastExpr 0x2215096d7f0 <col:17, col:36> 'limb':'int' <NoOp>
|   |   |   |   `-ParenExpr 0x2215096d7d0 <col:24, col:36> 'int'
|   |   |   |     `-BinaryOperator 0x2215096d780 <col:25, col:34> 'int' '>>'
|   |   |   |       |-ImplicitCastExpr 0x2215096d768 <col:25, col:29> 'int' <LValueToRValue>
|   |   |   |       | `-ArraySubscriptExpr 0x2215096d6f8 <col:25, col:29> 'const int' lvalue
|   |   |   |       |   |-ImplicitCastExpr 0x2215096d6e0 <col:25> 'const int *':'const int *' <LValueToRValue>
|   |   |   |       |   | `-DeclRefExpr 0x2215096d698 <col:25> 'const int *':'const int *' lvalue ParmVar 0x2215096a298 'in' 'const int *':'const int *'
|   |   |   |       |   `-IntegerLiteral 0x2215096d6b8 <col:28> 'int' 4
|   |   |   |       `-IntegerLiteral 0x2215096d740 <col:34> 'int' 64
|   |   |   `-ImplicitCastExpr 0x2215096d858 <col:41> 'limb':'int' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x2215096d838 <col:41> 'const limb':'const int' lvalue Var 0x2215096a150 'bottom52bits' 'const limb':'const int'
|   |   `-IntegerLiteral 0x2215096d8b0 <col:58> 'int' 6
|   |-CompoundAssignOperator 0x2215096db68 <line:648:5, col:41> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2215096d988 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2215096d970 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2215096d928 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2215096a220 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2215096d948 <col:9> 'int' 6
|   | `-BinaryOperator 0x2215096db48 <col:15, col:41> 'limb':'int' '>>'
|   |   |-ParenExpr 0x2215096db00 <col:15, col:36> 'limb':'int'
|   |   | `-CStyleCastExpr 0x2215096dad8 <col:16, col:35> 'limb':'int' <NoOp>
|   |   |   `-ParenExpr 0x2215096dab8 <col:23, col:35> 'int'
|   |   |     `-BinaryOperator 0x2215096da68 <col:24, col:33> 'int' '>>'
|   |   |       |-ImplicitCastExpr 0x2215096da50 <col:24, col:28> 'int' <LValueToRValue>
|   |   |       | `-ArraySubscriptExpr 0x2215096da08 <col:24, col:28> 'const int' lvalue
|   |   |       |   |-ImplicitCastExpr 0x2215096d9f0 <col:24> 'const int *':'const int *' <LValueToRValue>
|   |   |       |   | `-DeclRefExpr 0x2215096d9a8 <col:24> 'const int *':'const int *' lvalue ParmVar 0x2215096a298 'in' 'const int *':'const int *'
|   |   |       |   `-IntegerLiteral 0x2215096d9c8 <col:27> 'int' 4
|   |   |       `-IntegerLiteral 0x2215096da28 <col:33> 'int' 64
|   |   `-IntegerLiteral 0x2215096db20 <col:41> 'int' 52
|   |-CompoundAssignOperator 0x2215096dd50 <line:650:5, col:33> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2215096dbf8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2215096dbe0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2215096db98 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2215096a220 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2215096dbb8 <col:9> 'int' 6
|   | `-BinaryOperator 0x2215096dd30 <col:15, col:33> 'limb':'int' '>>'
|   |   |-ParenExpr 0x2215096dce8 <col:15, col:28> 'limb':'int'
|   |   | `-CStyleCastExpr 0x2215096dcc0 <col:16, col:27> 'limb':'int' <NoOp>
|   |   |   `-ImplicitCastExpr 0x2215096dca8 <col:23, col:27> 'int' <LValueToRValue> part_of_explicit_cast
|   |   |     `-ArraySubscriptExpr 0x2215096dc78 <col:23, col:27> 'const int' lvalue
|   |   |       |-ImplicitCastExpr 0x2215096dc60 <col:23> 'const int *':'const int *' <LValueToRValue>
|   |   |       | `-DeclRefExpr 0x2215096dc18 <col:23> 'const int *':'const int *' lvalue ParmVar 0x2215096a298 'in' 'const int *':'const int *'
|   |   |       `-IntegerLiteral 0x2215096dc38 <col:26> 'int' 5
|   |   `-IntegerLiteral 0x2215096dd08 <col:33> 'int' 58
|   |-CompoundAssignOperator 0x2215096e038 <line:651:5, col:58> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2215096dde0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2215096ddc8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2215096dd80 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2215096a220 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2215096dda0 <col:9> 'int' 6
|   | `-BinaryOperator 0x2215096e018 <col:15, col:58> 'int' '<<'
|   |   |-ParenExpr 0x2215096dfd0 <col:15, col:53> 'int'
|   |   | `-BinaryOperator 0x2215096dfb0 <col:16, col:41> 'int' '&'
|   |   |   |-ParenExpr 0x2215096df58 <col:16, col:37> 'limb':'int'
|   |   |   | `-CStyleCastExpr 0x2215096df30 <col:17, col:36> 'limb':'int' <NoOp>
|   |   |   |   `-ParenExpr 0x2215096df10 <col:24, col:36> 'int'
|   |   |   |     `-BinaryOperator 0x2215096dec0 <col:25, col:34> 'int' '>>'
|   |   |   |       |-ImplicitCastExpr 0x2215096dea8 <col:25, col:29> 'int' <LValueToRValue>
|   |   |   |       | `-ArraySubscriptExpr 0x2215096de60 <col:25, col:29> 'const int' lvalue
|   |   |   |       |   |-ImplicitCastExpr 0x2215096de48 <col:25> 'const int *':'const int *' <LValueToRValue>
|   |   |   |       |   | `-DeclRefExpr 0x2215096de00 <col:25> 'const int *':'const int *' lvalue ParmVar 0x2215096a298 'in' 'const int *':'const int *'
|   |   |   |       |   `-IntegerLiteral 0x2215096de20 <col:28> 'int' 5
|   |   |   |       `-IntegerLiteral 0x2215096de80 <col:34> 'int' 64
|   |   |   `-ImplicitCastExpr 0x2215096df98 <col:41> 'limb':'int' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x2215096df78 <col:41> 'const limb':'const int' lvalue Var 0x2215096a150 'bottom52bits' 'const limb':'const int'
|   |   `-IntegerLiteral 0x2215096dff0 <col:58> 'int' 6
|   |-CompoundAssignOperator 0x2215096e2a8 <line:652:5, col:41> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2215096e0c8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2215096e0b0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2215096e068 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2215096a220 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2215096e088 <col:9> 'int' 7
|   | `-BinaryOperator 0x2215096e288 <col:15, col:41> 'limb':'int' '>>'
|   |   |-ParenExpr 0x2215096e240 <col:15, col:36> 'limb':'int'
|   |   | `-CStyleCastExpr 0x2215096e218 <col:16, col:35> 'limb':'int' <NoOp>
|   |   |   `-ParenExpr 0x2215096e1f8 <col:23, col:35> 'int'
|   |   |     `-BinaryOperator 0x2215096e1a8 <col:24, col:33> 'int' '>>'
|   |   |       |-ImplicitCastExpr 0x2215096e190 <col:24, col:28> 'int' <LValueToRValue>
|   |   |       | `-ArraySubscriptExpr 0x2215096e148 <col:24, col:28> 'const int' lvalue
|   |   |       |   |-ImplicitCastExpr 0x2215096e130 <col:24> 'const int *':'const int *' <LValueToRValue>
|   |   |       |   | `-DeclRefExpr 0x2215096e0e8 <col:24> 'const int *':'const int *' lvalue ParmVar 0x2215096a298 'in' 'const int *':'const int *'
|   |   |       |   `-IntegerLiteral 0x2215096e108 <col:27> 'int' 5
|   |   |       `-IntegerLiteral 0x2215096e168 <col:33> 'int' 64
|   |   `-IntegerLiteral 0x2215096e260 <col:41> 'int' 52
|   |-CompoundAssignOperator 0x2215096e490 <line:654:5, col:33> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2215096e338 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2215096e320 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2215096e2d8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2215096a220 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2215096e2f8 <col:9> 'int' 7
|   | `-BinaryOperator 0x2215096e470 <col:15, col:33> 'limb':'int' '>>'
|   |   |-ParenExpr 0x2215096e428 <col:15, col:28> 'limb':'int'
|   |   | `-CStyleCastExpr 0x2215096e400 <col:16, col:27> 'limb':'int' <NoOp>
|   |   |   `-ImplicitCastExpr 0x2215096e3e8 <col:23, col:27> 'int' <LValueToRValue> part_of_explicit_cast
|   |   |     `-ArraySubscriptExpr 0x2215096e3b8 <col:23, col:27> 'const int' lvalue
|   |   |       |-ImplicitCastExpr 0x2215096e3a0 <col:23> 'const int *':'const int *' <LValueToRValue>
|   |   |       | `-DeclRefExpr 0x2215096e358 <col:23> 'const int *':'const int *' lvalue ParmVar 0x2215096a298 'in' 'const int *':'const int *'
|   |   |       `-IntegerLiteral 0x2215096e378 <col:26> 'int' 6
|   |   `-IntegerLiteral 0x2215096e448 <col:33> 'int' 58
|   |-CompoundAssignOperator 0x2215096e778 <line:655:5, col:58> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2215096e520 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2215096e508 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2215096e4c0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2215096a220 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2215096e4e0 <col:9> 'int' 7
|   | `-BinaryOperator 0x2215096e758 <col:15, col:58> 'int' '<<'
|   |   |-ParenExpr 0x2215096e710 <col:15, col:53> 'int'
|   |   | `-BinaryOperator 0x2215096e6f0 <col:16, col:41> 'int' '&'
|   |   |   |-ParenExpr 0x2215096e698 <col:16, col:37> 'limb':'int'
|   |   |   | `-CStyleCastExpr 0x2215096e670 <col:17, col:36> 'limb':'int' <NoOp>
|   |   |   |   `-ParenExpr 0x2215096e650 <col:24, col:36> 'int'
|   |   |   |     `-BinaryOperator 0x2215096e600 <col:25, col:34> 'int' '>>'
|   |   |   |       |-ImplicitCastExpr 0x2215096e5e8 <col:25, col:29> 'int' <LValueToRValue>
|   |   |   |       | `-ArraySubscriptExpr 0x2215096e5a0 <col:25, col:29> 'const int' lvalue
|   |   |   |       |   |-ImplicitCastExpr 0x2215096e588 <col:25> 'const int *':'const int *' <LValueToRValue>
|   |   |   |       |   | `-DeclRefExpr 0x2215096e540 <col:25> 'const int *':'const int *' lvalue ParmVar 0x2215096a298 'in' 'const int *':'const int *'
|   |   |   |       |   `-IntegerLiteral 0x2215096e560 <col:28> 'int' 6
|   |   |   |       `-IntegerLiteral 0x2215096e5c0 <col:34> 'int' 64
|   |   |   `-ImplicitCastExpr 0x2215096e6d8 <col:41> 'limb':'int' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x2215096e6b8 <col:41> 'const limb':'const int' lvalue Var 0x2215096a150 'bottom52bits' 'const limb':'const int'
|   |   `-IntegerLiteral 0x2215096e730 <col:58> 'int' 6
|   |-CompoundAssignOperator 0x2215096e9e8 <line:656:5, col:41> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2215096e808 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2215096e7f0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2215096e7a8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2215096a220 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2215096e7c8 <col:9> 'int' 8
|   | `-BinaryOperator 0x2215096e9c8 <col:15, col:41> 'limb':'int' '>>'
|   |   |-ParenExpr 0x2215096e980 <col:15, col:36> 'limb':'int'
|   |   | `-CStyleCastExpr 0x2215096e958 <col:16, col:35> 'limb':'int' <NoOp>
|   |   |   `-ParenExpr 0x2215096e938 <col:23, col:35> 'int'
|   |   |     `-BinaryOperator 0x2215096e8e8 <col:24, col:33> 'int' '>>'
|   |   |       |-ImplicitCastExpr 0x2215096e8d0 <col:24, col:28> 'int' <LValueToRValue>
|   |   |       | `-ArraySubscriptExpr 0x2215096e888 <col:24, col:28> 'const int' lvalue
|   |   |       |   |-ImplicitCastExpr 0x2215096e870 <col:24> 'const int *':'const int *' <LValueToRValue>
|   |   |       |   | `-DeclRefExpr 0x2215096e828 <col:24> 'const int *':'const int *' lvalue ParmVar 0x2215096a298 'in' 'const int *':'const int *'
|   |   |       |   `-IntegerLiteral 0x2215096e848 <col:27> 'int' 6
|   |   |       `-IntegerLiteral 0x2215096e8a8 <col:33> 'int' 64
|   |   `-IntegerLiteral 0x2215096e9a0 <col:41> 'int' 52
|   |-CompoundAssignOperator 0x2215096ebd0 <line:658:5, col:33> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2215096ea78 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2215096ea60 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2215096ea18 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2215096a220 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2215096ea38 <col:9> 'int' 8
|   | `-BinaryOperator 0x2215096ebb0 <col:15, col:33> 'limb':'int' '>>'
|   |   |-ParenExpr 0x2215096eb68 <col:15, col:28> 'limb':'int'
|   |   | `-CStyleCastExpr 0x2215096eb40 <col:16, col:27> 'limb':'int' <NoOp>
|   |   |   `-ImplicitCastExpr 0x2215096eb28 <col:23, col:27> 'int' <LValueToRValue> part_of_explicit_cast
|   |   |     `-ArraySubscriptExpr 0x2215096eaf8 <col:23, col:27> 'const int' lvalue
|   |   |       |-ImplicitCastExpr 0x2215096eae0 <col:23> 'const int *':'const int *' <LValueToRValue>
|   |   |       | `-DeclRefExpr 0x2215096ea98 <col:23> 'const int *':'const int *' lvalue ParmVar 0x2215096a298 'in' 'const int *':'const int *'
|   |   |       `-IntegerLiteral 0x2215096eab8 <col:26> 'int' 7
|   |   `-IntegerLiteral 0x2215096eb88 <col:33> 'int' 58
|   |-CompoundAssignOperator 0x2215096eeb8 <line:659:5, col:58> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x2215096ec60 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x2215096ec48 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2215096ec00 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2215096a220 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x2215096ec20 <col:9> 'int' 8
|   | `-BinaryOperator 0x2215096ee98 <col:15, col:58> 'int' '<<'
|   |   |-ParenExpr 0x2215096ee50 <col:15, col:53> 'int'
|   |   | `-BinaryOperator 0x2215096ee30 <col:16, col:41> 'int' '&'
|   |   |   |-ParenExpr 0x2215096edd8 <col:16, col:37> 'limb':'int'
|   |   |   | `-CStyleCastExpr 0x2215096edb0 <col:17, col:36> 'limb':'int' <NoOp>
|   |   |   |   `-ParenExpr 0x2215096ed90 <col:24, col:36> 'int'
|   |   |   |     `-BinaryOperator 0x2215096ed40 <col:25, col:34> 'int' '>>'
|   |   |   |       |-ImplicitCastExpr 0x2215096ed28 <col:25, col:29> 'int' <LValueToRValue>
|   |   |   |       | `-ArraySubscriptExpr 0x2215096ece0 <col:25, col:29> 'const int' lvalue
|   |   |   |       |   |-ImplicitCastExpr 0x2215096ecc8 <col:25> 'const int *':'const int *' <LValueToRValue>
|   |   |   |       |   | `-DeclRefExpr 0x2215096ec80 <col:25> 'const int *':'const int *' lvalue ParmVar 0x2215096a298 'in' 'const int *':'const int *'
|   |   |   |       |   `-IntegerLiteral 0x2215096eca0 <col:28> 'int' 7
|   |   |   |       `-IntegerLiteral 0x2215096ed00 <col:34> 'int' 64
|   |   |   `-ImplicitCastExpr 0x2215096ee18 <col:41> 'limb':'int' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x2215096edf8 <col:41> 'const limb':'const int' lvalue Var 0x2215096a150 'bottom52bits' 'const limb':'const int'
|   |   `-IntegerLiteral 0x2215096ee70 <col:58> 'int' 6
|   |-BinaryOperator 0x2215096f0e0 <line:664:5, col:43> 'u64':'int' '='
|   | |-DeclRefExpr 0x2215096eee8 <col:5> 'u64':'int' lvalue Var 0x2215096a490 'overflow1' 'u64':'int'
|   | `-BinaryOperator 0x2215096f0c0 <col:17, col:43> 'limb':'int' '>>'
|   |   |-ParenExpr 0x2215096f078 <col:17, col:38> 'limb':'int'
|   |   | `-CStyleCastExpr 0x2215096f050 <col:18, col:37> 'limb':'int' <NoOp>
|   |   |   `-ParenExpr 0x2215096f030 <col:25, col:37> 'int'
|   |   |     `-BinaryOperator 0x2215096efe0 <col:26, col:35> 'int' '>>'
|   |   |       |-ImplicitCastExpr 0x2215096efc8 <col:26, col:30> 'int' <LValueToRValue>
|   |   |       | `-ArraySubscriptExpr 0x2215096ef80 <col:26, col:30> 'const int' lvalue
|   |   |       |   |-ImplicitCastExpr 0x2215096ef68 <col:26> 'const int *':'const int *' <LValueToRValue>
|   |   |       |   | `-DeclRefExpr 0x2215096ef20 <col:26> 'const int *':'const int *' lvalue ParmVar 0x2215096a298 'in' 'const int *':'const int *'
|   |   |       |   `-IntegerLiteral 0x2215096ef40 <col:29> 'int' 7
|   |   |       `-IntegerLiteral 0x2215096efa0 <col:35> 'int' 64
|   |   `-IntegerLiteral 0x2215096f098 <col:43> 'int' 52
|   |-CompoundAssignOperator 0x2215096f258 <line:666:5, col:36> 'u64':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x2215096f100 <col:5> 'u64':'int' lvalue Var 0x2215096a490 'overflow1' 'u64':'int'
|   | `-BinaryOperator 0x2215096f238 <col:18, col:36> 'limb':'int' '>>'
|   |   |-ParenExpr 0x2215096f1f0 <col:18, col:31> 'limb':'int'
|   |   | `-CStyleCastExpr 0x2215096f1c8 <col:19, col:30> 'limb':'int' <NoOp>
|   |   |   `-ImplicitCastExpr 0x2215096f1b0 <col:26, col:30> 'int' <LValueToRValue> part_of_explicit_cast
|   |   |     `-ArraySubscriptExpr 0x2215096f180 <col:26, col:30> 'const int' lvalue
|   |   |       |-ImplicitCastExpr 0x2215096f168 <col:26> 'const int *':'const int *' <LValueToRValue>
|   |   |       | `-DeclRefExpr 0x2215096f120 <col:26> 'const int *':'const int *' lvalue ParmVar 0x2215096a298 'in' 'const int *':'const int *'
|   |   |       `-IntegerLiteral 0x2215096f140 <col:29> 'int' 8
|   |   `-IntegerLiteral 0x2215096f210 <col:36> 'int' 58
|   |-CompoundAssignOperator 0x2215096f4e0 <line:667:5, col:61> 'u64':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x2215096f288 <col:5> 'u64':'int' lvalue Var 0x2215096a490 'overflow1' 'u64':'int'
|   | `-BinaryOperator 0x2215096f4c0 <col:18, col:61> 'int' '<<'
|   |   |-ParenExpr 0x2215096f478 <col:18, col:56> 'int'
|   |   | `-BinaryOperator 0x2215096f458 <col:19, col:44> 'int' '&'
|   |   |   |-ParenExpr 0x2215096f400 <col:19, col:40> 'limb':'int'
|   |   |   | `-CStyleCastExpr 0x2215096f3d8 <col:20, col:39> 'limb':'int' <NoOp>
|   |   |   |   `-ParenExpr 0x2215096f3b8 <col:27, col:39> 'int'
|   |   |   |     `-BinaryOperator 0x2215096f368 <col:28, col:37> 'int' '>>'
|   |   |   |       |-ImplicitCastExpr 0x2215096f350 <col:28, col:32> 'int' <LValueToRValue>
|   |   |   |       | `-ArraySubscriptExpr 0x2215096f308 <col:28, col:32> 'const int' lvalue
|   |   |   |       |   |-ImplicitCastExpr 0x2215096f2f0 <col:28> 'const int *':'const int *' <LValueToRValue>
|   |   |   |       |   | `-DeclRefExpr 0x2215096f2a8 <col:28> 'const int *':'const int *' lvalue ParmVar 0x2215096a298 'in' 'const int *':'const int *'
|   |   |   |       |   `-IntegerLiteral 0x2215096f2c8 <col:31> 'int' 8
|   |   |   |       `-IntegerLiteral 0x2215096f328 <col:37> 'int' 64
|   |   |   `-ImplicitCastExpr 0x2215096f440 <col:44> 'limb':'int' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x2215096f420 <col:44> 'const limb':'const int' lvalue Var 0x2215096a150 'bottom52bits' 'const limb':'const int'
|   |   `-IntegerLiteral 0x2215096f498 <col:61> 'int' 6
|   |-BinaryOperator 0x2215096f708 <line:668:5, col:43> 'u64':'int' '='
|   | |-DeclRefExpr 0x2215096f510 <col:5> 'u64':'int' lvalue Var 0x2215096a508 'overflow2' 'u64':'int'
|   | `-BinaryOperator 0x2215096f6e8 <col:17, col:43> 'limb':'int' '>>'
|   |   |-ParenExpr 0x2215096f6a0 <col:17, col:38> 'limb':'int'
|   |   | `-CStyleCastExpr 0x2215096f678 <col:18, col:37> 'limb':'int' <NoOp>
|   |   |   `-ParenExpr 0x2215096f658 <col:25, col:37> 'int'
|   |   |     `-BinaryOperator 0x2215096f608 <col:26, col:35> 'int' '>>'
|   |   |       |-ImplicitCastExpr 0x2215096f5f0 <col:26, col:30> 'int' <LValueToRValue>
|   |   |       | `-ArraySubscriptExpr 0x2215096f5a8 <col:26, col:30> 'const int' lvalue
|   |   |       |   |-ImplicitCastExpr 0x2215096f590 <col:26> 'const int *':'const int *' <LValueToRValue>
|   |   |       |   | `-DeclRefExpr 0x2215096f548 <col:26> 'const int *':'const int *' lvalue ParmVar 0x2215096a298 'in' 'const int *':'const int *'
|   |   |       |   `-IntegerLiteral 0x2215096f568 <col:29> 'int' 8
|   |   |       `-IntegerLiteral 0x2215096f5c8 <col:35> 'int' 64
|   |   `-IntegerLiteral 0x2215096f6c0 <col:43> 'int' 52
|   |-CompoundAssignOperator 0x22150a2d020 <line:670:5, col:19> 'u64':'int' '<<=' ComputeLHSTy='u64':'int' ComputeResultTy='u64':'int'
|   | |-DeclRefExpr 0x22150a2cfc0 <col:5> 'u64':'int' lvalue Var 0x2215096a490 'overflow1' 'u64':'int'
|   | `-IntegerLiteral 0x22150a2cfe0 <col:19> 'int' 1
|   |-CompoundAssignOperator 0x22150a2d0b0 <line:671:5, col:19> 'u64':'int' '<<=' ComputeLHSTy='u64':'int' ComputeResultTy='u64':'int'
|   | |-DeclRefExpr 0x22150a2d050 <col:5> 'u64':'int' lvalue Var 0x2215096a508 'overflow2' 'u64':'int'
|   | `-IntegerLiteral 0x22150a2d070 <col:19> 'int' 1
|   |-CompoundAssignOperator 0x22150a2d198 <line:673:5, col:15> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x22150a2d140 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x22150a2d128 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x22150a2d0e0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2215096a220 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x22150a2d100 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x22150a2d180 <col:15> 'u64':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x22150a2d160 <col:15> 'u64':'int' lvalue Var 0x2215096a490 'overflow1' 'u64':'int'
|   |-CompoundAssignOperator 0x22150a2d280 <line:674:5, col:15> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x22150a2d228 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x22150a2d210 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x22150a2d1c8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2215096a220 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x22150a2d1e8 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x22150a2d268 <col:15> 'u64':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x22150a2d248 <col:15> 'u64':'int' lvalue Var 0x2215096a508 'overflow2' 'u64':'int'
|   |-CompoundAssignOperator 0x22150a2d410 <line:676:5, col:25> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x22150a2d310 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x22150a2d2f8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x22150a2d2b0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2215096a220 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x22150a2d2d0 <col:9> 'int' 1
|   | `-BinaryOperator 0x22150a2d3f0 <col:15, col:25> 'limb':'int' '>>'
|   |   |-ImplicitCastExpr 0x22150a2d3d8 <col:15, col:20> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x22150a2d390 <col:15, col:20> 'limb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x22150a2d378 <col:15> 'limb *':'limb *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x22150a2d330 <col:15> 'limb *':'limb *' lvalue ParmVar 0x2215096a220 'out' 'limb *':'limb *'
|   |   |   `-IntegerLiteral 0x22150a2d350 <col:19> 'int' 0
|   |   `-IntegerLiteral 0x22150a2d3b0 <col:25> 'int' 58
|   `-CompoundAssignOperator 0x22150a2d4f8 <line:677:5, col:15> 'limb':'int' '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |-ArraySubscriptExpr 0x22150a2d4a0 <col:5, col:10> 'limb':'int' lvalue
|     | |-ImplicitCastExpr 0x22150a2d488 <col:5> 'limb *':'limb *' <LValueToRValue>
|     | | `-DeclRefExpr 0x22150a2d440 <col:5> 'limb *':'limb *' lvalue ParmVar 0x2215096a220 'out' 'limb *':'limb *'
|     | `-IntegerLiteral 0x22150a2d460 <col:9> 'int' 0
|     `-ImplicitCastExpr 0x22150a2d4e0 <col:15> 'limb':'int' <LValueToRValue>
|       `-DeclRefExpr 0x22150a2d4c0 <col:15> 'const limb':'const int' lvalue Var 0x221509553c0 'bottom58bits' 'const limb':'const int'
|-FunctionDecl 0x22150a2d7e0 <line:685:1, line:690:1> line:685:13 used felem_square_reduce 'void (limb *, const limb *)' static
| |-ParmVarDecl 0x22150a2d6a0 <col:33, col:39> col:39 used out 'limb *':'limb *'
| |-ParmVarDecl 0x22150a2d718 <col:44, col:56> col:56 used in 'const limb *':'const limb *'
| `-CompoundStmt 0x22150a2db68 <line:686:1, line:690:1>
|   |-DeclStmt 0x22150a2d920 <line:687:5, col:19>
|   | `-VarDecl 0x22150a2d8b8 <col:5, col:16> col:16 used tmp 'largefelem':'int [9]'
|   |-CallExpr 0x22150a2d9f0 <line:688:5, col:25> 'void'
|   | |-ImplicitCastExpr 0x22150a2d9d8 <col:5> 'void (*)(int *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a2d938 <col:5> 'void (int *, const limb *)' Function 0x22150964740 'felem_square' 'void (int *, const limb *)'
|   | |-ImplicitCastExpr 0x22150a2da20 <col:18> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a2d958 <col:18> 'largefelem':'int [9]' lvalue Var 0x22150a2d8b8 'tmp' 'largefelem':'int [9]'
|   | `-ImplicitCastExpr 0x22150a2da38 <col:23> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x22150a2d990 <col:23> 'const limb *':'const limb *' lvalue ParmVar 0x22150a2d718 'in' 'const limb *':'const limb *'
|   `-CallExpr 0x22150a2daf0 <line:689:5, col:26> 'void'
|     |-ImplicitCastExpr 0x22150a2dad8 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x22150a2da50 <col:5> 'void (limb *, const int *)' Function 0x2215096a398 'felem_reduce' 'void (limb *, const int *)'
|     |-ImplicitCastExpr 0x22150a2db20 <col:18> 'limb *':'limb *' <LValueToRValue>
|     | `-DeclRefExpr 0x22150a2da70 <col:18> 'limb *':'limb *' lvalue ParmVar 0x22150a2d6a0 'out' 'limb *':'limb *'
|     `-ImplicitCastExpr 0x22150a2db50 <col:23> 'const int *':'const int *' <NoOp>
|       `-ImplicitCastExpr 0x22150a2db38 <col:23> 'int *' <ArrayToPointerDecay>
|         `-DeclRefExpr 0x22150a2da90 <col:23> 'largefelem':'int [9]' lvalue Var 0x22150a2d8b8 'tmp' 'largefelem':'int [9]'
|-FunctionDecl 0x22150a2ddb8 <line:692:1, line:697:1> line:692:13 used felem_mul_reduce 'void (limb *, const limb *, const limb *)' static
| |-ParmVarDecl 0x22150a2dba0 <col:30, col:36> col:36 used out 'limb *':'limb *'
| |-ParmVarDecl 0x22150a2dc18 <col:41, col:53> col:53 used in1 'const limb *':'const limb *'
| |-ParmVarDecl 0x22150a2dc90 <col:58, col:70> col:70 used in2 'const limb *':'const limb *'
| `-CompoundStmt 0x22150a2e190 <line:693:1, line:697:1>
|   |-DeclStmt 0x22150a2df00 <line:694:5, col:19>
|   | `-VarDecl 0x22150a2de98 <col:5, col:16> col:16 used tmp 'largefelem':'int [9]'
|   |-CallExpr 0x22150a2e020 <line:695:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x22150a2e008 <col:5> 'void (*)(int *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a2df18 <col:5> 'void (int *, const limb *, const limb *)' Function 0x22150966d78 'felem_mul' 'void (int *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x22150a2e058 <col:15> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a2df38 <col:15> 'largefelem':'int [9]' lvalue Var 0x22150a2de98 'tmp' 'largefelem':'int [9]'
|   | |-ImplicitCastExpr 0x22150a2e070 <col:20> 'const limb *':'const limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x22150a2df70 <col:20> 'const limb *':'const limb *' lvalue ParmVar 0x22150a2dc18 'in1' 'const limb *':'const limb *'
|   | `-ImplicitCastExpr 0x22150a2e088 <col:25> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x22150a2df90 <col:25> 'const limb *':'const limb *' lvalue ParmVar 0x22150a2dc90 'in2' 'const limb *':'const limb *'
|   `-CallExpr 0x22150a2e118 <line:696:5, col:26> 'void'
|     |-ImplicitCastExpr 0x22150a2e100 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x22150a2e0a0 <col:5> 'void (limb *, const int *)' Function 0x2215096a398 'felem_reduce' 'void (limb *, const int *)'
|     |-ImplicitCastExpr 0x22150a2e148 <col:18> 'limb *':'limb *' <LValueToRValue>
|     | `-DeclRefExpr 0x22150a2e0c0 <col:18> 'limb *':'limb *' lvalue ParmVar 0x22150a2dba0 'out' 'limb *':'limb *'
|     `-ImplicitCastExpr 0x22150a2e178 <col:23> 'const int *':'const int *' <NoOp>
|       `-ImplicitCastExpr 0x22150a2e160 <col:23> 'int *' <ArrayToPointerDecay>
|         `-DeclRefExpr 0x22150a2e0e0 <col:23> 'largefelem':'int [9]' lvalue Var 0x22150a2de98 'tmp' 'largefelem':'int [9]'
|-FunctionDecl 0x22150a2e308 <line:707:1, line:805:1> line:707:13 used felem_inv 'void (limb *, const limb *)' static
| |-ParmVarDecl 0x22150a2e1c8 <col:23, col:29> col:29 used out 'limb *':'limb *'
| |-ParmVarDecl 0x22150a2e240 <col:34, col:46> col:46 used in 'const limb *':'const limb *'
| `-CompoundStmt 0x22150a2f860 <line:708:1, line:805:1>
|   |-DeclStmt 0x22150a2e5d8 <line:709:5, col:36>
|   | |-VarDecl 0x22150a2e3e0 <col:5, col:11> col:11 used ftmp 'felem':'limb [9]'
|   | |-VarDecl 0x22150a2e458 <col:5, col:17> col:17 used ftmp2 'felem':'limb [9]'
|   | |-VarDecl 0x22150a2e4d0 <col:5, col:24> col:24 used ftmp3 'felem':'limb [9]'
|   | `-VarDecl 0x22150a2e548 <col:5, col:31> col:31 used ftmp4 'felem':'limb [9]'
|   |-DeclStmt 0x22150a2e668 <line:710:5, col:19>
|   | `-VarDecl 0x22150a2e600 <col:5, col:16> col:16 used tmp 'largefelem':'int [9]'
|   |-DeclStmt 0x22150a2e700 <line:711:5, col:15>
|   | `-VarDecl 0x22150a2e698 <col:5, col:14> col:14 used i 'unsigned int'
|   |-CallExpr 0x22150a2e7a8 <line:713:5, col:25> 'void'
|   | |-ImplicitCastExpr 0x22150a2e790 <col:5> 'void (*)(int *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a2e718 <col:5> 'void (int *, const limb *)' Function 0x22150964740 'felem_square' 'void (int *, const limb *)'
|   | |-ImplicitCastExpr 0x22150a2e7d8 <col:18> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a2e738 <col:18> 'largefelem':'int [9]' lvalue Var 0x22150a2e600 'tmp' 'largefelem':'int [9]'
|   | `-ImplicitCastExpr 0x22150a2e7f0 <col:23> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x22150a2e770 <col:23> 'const limb *':'const limb *' lvalue ParmVar 0x22150a2e240 'in' 'const limb *':'const limb *'
|   |-CallExpr 0x22150a2e898 <line:714:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x22150a2e880 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a2e808 <col:5> 'void (limb *, const int *)' Function 0x2215096a398 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x22150a2e8c8 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a2e828 <col:18> 'felem':'limb [9]' lvalue Var 0x22150a2e3e0 'ftmp' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x22150a2e8f8 <col:24> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150a2e8e0 <col:24> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x22150a2e860 <col:24> 'largefelem':'int [9]' lvalue Var 0x22150a2e600 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x22150a2e9a8 <line:715:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x22150a2e990 <col:5> 'void (*)(int *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a2e910 <col:5> 'void (int *, const limb *, const limb *)' Function 0x22150966d78 'felem_mul' 'void (int *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x22150a2e9e0 <col:15> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a2e930 <col:15> 'largefelem':'int [9]' lvalue Var 0x22150a2e600 'tmp' 'largefelem':'int [9]'
|   | |-ImplicitCastExpr 0x22150a2e9f8 <col:20> 'const limb *':'const limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x22150a2e950 <col:20> 'const limb *':'const limb *' lvalue ParmVar 0x22150a2e240 'in' 'const limb *':'const limb *'
|   | `-ImplicitCastExpr 0x22150a2ea28 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150a2ea10 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x22150a2e970 <col:24> 'felem':'limb [9]' lvalue Var 0x22150a2e3e0 'ftmp' 'felem':'limb [9]'
|   |-CallExpr 0x22150a2eab8 <line:716:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x22150a2eaa0 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a2ea40 <col:5> 'void (limb *, const int *)' Function 0x2215096a398 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x22150a2eae8 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a2ea60 <col:18> 'felem':'limb [9]' lvalue Var 0x22150a2e3e0 'ftmp' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x22150a2eb18 <col:24> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150a2eb00 <col:24> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x22150a2ea80 <col:24> 'largefelem':'int [9]' lvalue Var 0x22150a2e600 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x22150a2ebf0 <line:717:5, col:29> 'void'
|   | |-ImplicitCastExpr 0x22150a2ebd8 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a2eb30 <col:5> 'void (limb *, const limb *)' Function 0x2215095b168 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x22150a2ec20 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a2eb50 <col:18> 'felem':'limb [9]' lvalue Var 0x22150a2e458 'ftmp2' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x22150a2ec50 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150a2ec38 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x22150a2eb88 <col:25> 'felem':'limb [9]' lvalue Var 0x22150a2e3e0 'ftmp' 'felem':'limb [9]'
|   |-CallExpr 0x22150a2ece0 <line:718:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x22150a2ecc8 <col:5> 'void (*)(int *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a2ec68 <col:5> 'void (int *, const limb *)' Function 0x22150964740 'felem_square' 'void (int *, const limb *)'
|   | |-ImplicitCastExpr 0x22150a2ed10 <col:18> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a2ec88 <col:18> 'largefelem':'int [9]' lvalue Var 0x22150a2e600 'tmp' 'largefelem':'int [9]'
|   | `-ImplicitCastExpr 0x22150a2ed40 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150a2ed28 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x22150a2eca8 <col:23> 'felem':'limb [9]' lvalue Var 0x22150a2e3e0 'ftmp' 'felem':'limb [9]'
|   |-CallExpr 0x22150a2edd0 <line:719:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x22150a2edb8 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a2ed58 <col:5> 'void (limb *, const int *)' Function 0x2215096a398 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x22150a2ee00 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a2ed78 <col:18> 'felem':'limb [9]' lvalue Var 0x22150a2e3e0 'ftmp' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x22150a2ee30 <col:24> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150a2ee18 <col:24> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x22150a2ed98 <col:24> 'largefelem':'int [9]' lvalue Var 0x22150a2e600 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x22150a2eee0 <line:720:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x22150a2eec8 <col:5> 'void (*)(int *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a2ee48 <col:5> 'void (int *, const limb *, const limb *)' Function 0x22150966d78 'felem_mul' 'void (int *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x22150a2ef18 <col:15> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a2ee68 <col:15> 'largefelem':'int [9]' lvalue Var 0x22150a2e600 'tmp' 'largefelem':'int [9]'
|   | |-ImplicitCastExpr 0x22150a2ef30 <col:20> 'const limb *':'const limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x22150a2ee88 <col:20> 'const limb *':'const limb *' lvalue ParmVar 0x22150a2e240 'in' 'const limb *':'const limb *'
|   | `-ImplicitCastExpr 0x22150a2ef60 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150a2ef48 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x22150a2eea8 <col:24> 'felem':'limb [9]' lvalue Var 0x22150a2e3e0 'ftmp' 'felem':'limb [9]'
|   |-CallExpr 0x22150a26fc8 <line:721:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x22150a26fb0 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a2ef78 <col:5> 'void (limb *, const int *)' Function 0x2215096a398 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x22150a26ff8 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a2ef98 <col:18> 'felem':'limb [9]' lvalue Var 0x22150a2e3e0 'ftmp' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x22150a27028 <col:24> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150a27010 <col:24> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x22150a26f90 <col:24> 'largefelem':'int [9]' lvalue Var 0x22150a2e600 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x22150a270b8 <line:722:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x22150a270a0 <col:5> 'void (*)(int *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a27040 <col:5> 'void (int *, const limb *)' Function 0x22150964740 'felem_square' 'void (int *, const limb *)'
|   | |-ImplicitCastExpr 0x22150a270e8 <col:18> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a27060 <col:18> 'largefelem':'int [9]' lvalue Var 0x22150a2e600 'tmp' 'largefelem':'int [9]'
|   | `-ImplicitCastExpr 0x22150a27118 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150a27100 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x22150a27080 <col:23> 'felem':'limb [9]' lvalue Var 0x22150a2e3e0 'ftmp' 'felem':'limb [9]'
|   |-CallExpr 0x22150a271a8 <line:723:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x22150a27190 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a27130 <col:5> 'void (limb *, const int *)' Function 0x2215096a398 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x22150a271d8 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a27150 <col:18> 'felem':'limb [9]' lvalue Var 0x22150a2e3e0 'ftmp' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x22150a27208 <col:24> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150a271f0 <col:24> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x22150a27170 <col:24> 'largefelem':'int [9]' lvalue Var 0x22150a2e600 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x22150a27298 <line:725:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x22150a27280 <col:5> 'void (*)(int *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a27220 <col:5> 'void (int *, const limb *)' Function 0x22150964740 'felem_square' 'void (int *, const limb *)'
|   | |-ImplicitCastExpr 0x22150a272c8 <col:18> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a27240 <col:18> 'largefelem':'int [9]' lvalue Var 0x22150a2e600 'tmp' 'largefelem':'int [9]'
|   | `-ImplicitCastExpr 0x22150a272f8 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150a272e0 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x22150a27260 <col:23> 'felem':'limb [9]' lvalue Var 0x22150a2e458 'ftmp2' 'felem':'limb [9]'
|   |-CallExpr 0x22150a273a0 <line:726:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x22150a27388 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a27310 <col:5> 'void (limb *, const int *)' Function 0x2215096a398 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x22150a273d0 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a27330 <col:18> 'felem':'limb [9]' lvalue Var 0x22150a2e4d0 'ftmp3' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x22150a27400 <col:25> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150a273e8 <col:25> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x22150a27368 <col:25> 'largefelem':'int [9]' lvalue Var 0x22150a2e600 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x22150a27490 <line:727:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x22150a27478 <col:5> 'void (*)(int *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a27418 <col:5> 'void (int *, const limb *)' Function 0x22150964740 'felem_square' 'void (int *, const limb *)'
|   | |-ImplicitCastExpr 0x22150a274c0 <col:18> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a27438 <col:18> 'largefelem':'int [9]' lvalue Var 0x22150a2e600 'tmp' 'largefelem':'int [9]'
|   | `-ImplicitCastExpr 0x22150a274f0 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150a274d8 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x22150a27458 <col:23> 'felem':'limb [9]' lvalue Var 0x22150a2e4d0 'ftmp3' 'felem':'limb [9]'
|   |-CallExpr 0x22150a27580 <line:728:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x22150a27568 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a27508 <col:5> 'void (limb *, const int *)' Function 0x2215096a398 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x22150a275b0 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a27528 <col:18> 'felem':'limb [9]' lvalue Var 0x22150a2e4d0 'ftmp3' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x22150a275e0 <col:25> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150a275c8 <col:25> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x22150a27548 <col:25> 'largefelem':'int [9]' lvalue Var 0x22150a2e600 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x22150a27690 <line:729:5, col:32> 'void'
|   | |-ImplicitCastExpr 0x22150a27678 <col:5> 'void (*)(int *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a275f8 <col:5> 'void (int *, const limb *, const limb *)' Function 0x22150966d78 'felem_mul' 'void (int *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x22150a276c8 <col:15> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a27618 <col:15> 'largefelem':'int [9]' lvalue Var 0x22150a2e600 'tmp' 'largefelem':'int [9]'
|   | |-ImplicitCastExpr 0x22150a276f8 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x22150a276e0 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x22150a27638 <col:20> 'felem':'limb [9]' lvalue Var 0x22150a2e4d0 'ftmp3' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x22150a27728 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150a27710 <col:27> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x22150a27658 <col:27> 'felem':'limb [9]' lvalue Var 0x22150a2e458 'ftmp2' 'felem':'limb [9]'
|   |-CallExpr 0x22150a277b8 <line:730:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x22150a277a0 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a27740 <col:5> 'void (limb *, const int *)' Function 0x2215096a398 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x22150a277e8 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a27760 <col:18> 'felem':'limb [9]' lvalue Var 0x22150a2e4d0 'ftmp3' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x22150a27818 <col:25> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150a27800 <col:25> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x22150a27780 <col:25> 'largefelem':'int [9]' lvalue Var 0x22150a2e600 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x22150a278a8 <line:732:5, col:30> 'void'
|   | |-ImplicitCastExpr 0x22150a27890 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a27830 <col:5> 'void (limb *, const limb *)' Function 0x2215095b168 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x22150a278d8 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a27850 <col:18> 'felem':'limb [9]' lvalue Var 0x22150a2e458 'ftmp2' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x22150a27908 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150a278f0 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x22150a27870 <col:25> 'felem':'limb [9]' lvalue Var 0x22150a2e4d0 'ftmp3' 'felem':'limb [9]'
|   |-CallExpr 0x22150a27998 <line:733:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x22150a27980 <col:5> 'void (*)(int *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a27920 <col:5> 'void (int *, const limb *)' Function 0x22150964740 'felem_square' 'void (int *, const limb *)'
|   | |-ImplicitCastExpr 0x22150a279c8 <col:18> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a27940 <col:18> 'largefelem':'int [9]' lvalue Var 0x22150a2e600 'tmp' 'largefelem':'int [9]'
|   | `-ImplicitCastExpr 0x22150a279f8 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150a279e0 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x22150a27960 <col:23> 'felem':'limb [9]' lvalue Var 0x22150a2e4d0 'ftmp3' 'felem':'limb [9]'
|   |-CallExpr 0x22150a27a88 <line:734:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x22150a27a70 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a27a10 <col:5> 'void (limb *, const int *)' Function 0x2215096a398 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x22150a27ab8 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a27a30 <col:18> 'felem':'limb [9]' lvalue Var 0x22150a2e4d0 'ftmp3' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x22150a27ae8 <col:25> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150a27ad0 <col:25> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x22150a27a50 <col:25> 'largefelem':'int [9]' lvalue Var 0x22150a2e600 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x22150a27b78 <line:735:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x22150a27b60 <col:5> 'void (*)(int *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a27b00 <col:5> 'void (int *, const limb *)' Function 0x22150964740 'felem_square' 'void (int *, const limb *)'
|   | |-ImplicitCastExpr 0x22150a27ba8 <col:18> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a27b20 <col:18> 'largefelem':'int [9]' lvalue Var 0x22150a2e600 'tmp' 'largefelem':'int [9]'
|   | `-ImplicitCastExpr 0x22150a27bd8 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150a27bc0 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x22150a27b40 <col:23> 'felem':'limb [9]' lvalue Var 0x22150a2e4d0 'ftmp3' 'felem':'limb [9]'
|   |-CallExpr 0x22150a27c68 <line:736:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x22150a27c50 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a27bf0 <col:5> 'void (limb *, const int *)' Function 0x2215096a398 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x22150a27c98 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a27c10 <col:18> 'felem':'limb [9]' lvalue Var 0x22150a2e4d0 'ftmp3' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x22150a27cc8 <col:25> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150a27cb0 <col:25> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x22150a27c30 <col:25> 'largefelem':'int [9]' lvalue Var 0x22150a2e600 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x22150a27d58 <line:737:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x22150a27d40 <col:5> 'void (*)(int *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a27ce0 <col:5> 'void (int *, const limb *)' Function 0x22150964740 'felem_square' 'void (int *, const limb *)'
|   | |-ImplicitCastExpr 0x22150a27d88 <col:18> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a27d00 <col:18> 'largefelem':'int [9]' lvalue Var 0x22150a2e600 'tmp' 'largefelem':'int [9]'
|   | `-ImplicitCastExpr 0x22150a27db8 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150a27da0 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x22150a27d20 <col:23> 'felem':'limb [9]' lvalue Var 0x22150a2e4d0 'ftmp3' 'felem':'limb [9]'
|   |-CallExpr 0x22150a27e48 <line:738:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x22150a27e30 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a27dd0 <col:5> 'void (limb *, const int *)' Function 0x2215096a398 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x22150a27e78 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a27df0 <col:18> 'felem':'limb [9]' lvalue Var 0x22150a2e4d0 'ftmp3' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x22150a27ea8 <col:25> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150a27e90 <col:25> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x22150a27e10 <col:25> 'largefelem':'int [9]' lvalue Var 0x22150a2e600 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x22150a27f38 <line:739:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x22150a27f20 <col:5> 'void (*)(int *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a27ec0 <col:5> 'void (int *, const limb *)' Function 0x22150964740 'felem_square' 'void (int *, const limb *)'
|   | |-ImplicitCastExpr 0x22150a27f68 <col:18> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a27ee0 <col:18> 'largefelem':'int [9]' lvalue Var 0x22150a2e600 'tmp' 'largefelem':'int [9]'
|   | `-ImplicitCastExpr 0x22150a27f98 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150a27f80 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x22150a27f00 <col:23> 'felem':'limb [9]' lvalue Var 0x22150a2e4d0 'ftmp3' 'felem':'limb [9]'
|   |-CallExpr 0x22150a28028 <line:740:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x22150a28010 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a27fb0 <col:5> 'void (limb *, const int *)' Function 0x2215096a398 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x22150a28058 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a27fd0 <col:18> 'felem':'limb [9]' lvalue Var 0x22150a2e4d0 'ftmp3' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x22150a28088 <col:25> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150a28070 <col:25> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x22150a27ff0 <col:25> 'largefelem':'int [9]' lvalue Var 0x22150a2e600 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x22150a28130 <line:741:5, col:30> 'void'
|   | |-ImplicitCastExpr 0x22150a28118 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a280a0 <col:5> 'void (limb *, const limb *)' Function 0x2215095b168 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x22150a28160 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a280c0 <col:18> 'felem':'limb [9]' lvalue Var 0x22150a2e548 'ftmp4' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x22150a28190 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150a28178 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x22150a280f8 <col:25> 'felem':'limb [9]' lvalue Var 0x22150a2e4d0 'ftmp3' 'felem':'limb [9]'
|   |-CallExpr 0x22150a28240 <line:742:5, col:31> 'void'
|   | |-ImplicitCastExpr 0x22150a28228 <col:5> 'void (*)(int *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a281a8 <col:5> 'void (int *, const limb *, const limb *)' Function 0x22150966d78 'felem_mul' 'void (int *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x22150a28278 <col:15> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a281c8 <col:15> 'largefelem':'int [9]' lvalue Var 0x22150a2e600 'tmp' 'largefelem':'int [9]'
|   | |-ImplicitCastExpr 0x22150a282a8 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x22150a28290 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x22150a281e8 <col:20> 'felem':'limb [9]' lvalue Var 0x22150a2e4d0 'ftmp3' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x22150a282d8 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150a282c0 <col:27> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x22150a28208 <col:27> 'felem':'limb [9]' lvalue Var 0x22150a2e3e0 'ftmp' 'felem':'limb [9]'
|   |-CallExpr 0x22150a28368 <line:743:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x22150a28350 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a282f0 <col:5> 'void (limb *, const int *)' Function 0x2215096a398 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x22150a28398 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a28310 <col:18> 'felem':'limb [9]' lvalue Var 0x22150a2e548 'ftmp4' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x22150a283c8 <col:25> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150a283b0 <col:25> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x22150a28330 <col:25> 'largefelem':'int [9]' lvalue Var 0x22150a2e600 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x22150a28458 <line:744:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x22150a28440 <col:5> 'void (*)(int *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a283e0 <col:5> 'void (int *, const limb *)' Function 0x22150964740 'felem_square' 'void (int *, const limb *)'
|   | |-ImplicitCastExpr 0x22150a28488 <col:18> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a28400 <col:18> 'largefelem':'int [9]' lvalue Var 0x22150a2e600 'tmp' 'largefelem':'int [9]'
|   | `-ImplicitCastExpr 0x22150a284b8 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150a284a0 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x22150a28420 <col:23> 'felem':'limb [9]' lvalue Var 0x22150a2e548 'ftmp4' 'felem':'limb [9]'
|   |-CallExpr 0x22150a28548 <line:745:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x22150a28530 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a284d0 <col:5> 'void (limb *, const int *)' Function 0x2215096a398 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x22150a28578 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a284f0 <col:18> 'felem':'limb [9]' lvalue Var 0x22150a2e548 'ftmp4' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x22150a285a8 <col:25> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150a28590 <col:25> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x22150a28510 <col:25> 'largefelem':'int [9]' lvalue Var 0x22150a2e600 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x22150a28658 <line:746:5, col:32> 'void'
|   | |-ImplicitCastExpr 0x22150a28640 <col:5> 'void (*)(int *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a285c0 <col:5> 'void (int *, const limb *, const limb *)' Function 0x22150966d78 'felem_mul' 'void (int *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x22150a28690 <col:15> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a285e0 <col:15> 'largefelem':'int [9]' lvalue Var 0x22150a2e600 'tmp' 'largefelem':'int [9]'
|   | |-ImplicitCastExpr 0x22150a286c0 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x22150a286a8 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x22150a28600 <col:20> 'felem':'limb [9]' lvalue Var 0x22150a2e4d0 'ftmp3' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x22150a286f0 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150a286d8 <col:27> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x22150a28620 <col:27> 'felem':'limb [9]' lvalue Var 0x22150a2e458 'ftmp2' 'felem':'limb [9]'
|   |-CallExpr 0x22150a28780 <line:747:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x22150a28768 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a28708 <col:5> 'void (limb *, const int *)' Function 0x2215096a398 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x22150a287b0 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a28728 <col:18> 'felem':'limb [9]' lvalue Var 0x22150a2e4d0 'ftmp3' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x22150a287e0 <col:25> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150a287c8 <col:25> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x22150a28748 <col:25> 'largefelem':'int [9]' lvalue Var 0x22150a2e600 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x22150a28870 <line:748:5, col:30> 'void'
|   | |-ImplicitCastExpr 0x22150a28858 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a287f8 <col:5> 'void (limb *, const limb *)' Function 0x2215095b168 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x22150a288a0 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a28818 <col:18> 'felem':'limb [9]' lvalue Var 0x22150a2e458 'ftmp2' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x22150a288d0 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150a288b8 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x22150a28838 <col:25> 'felem':'limb [9]' lvalue Var 0x22150a2e4d0 'ftmp3' 'felem':'limb [9]'
|   |-ForStmt 0x22150a28c50 <line:750:5, line:753:5>
|   | |-BinaryOperator 0x22150a28960 <line:750:10, col:14> 'unsigned int' '='
|   | | |-DeclRefExpr 0x22150a288e8 <col:10> 'unsigned int' lvalue Var 0x22150a2e698 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x22150a28948 <col:14> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x22150a28920 <col:14> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x22150a289f8 <col:17, col:21> 'int' '<'
|   | | |-ImplicitCastExpr 0x22150a289c8 <col:17> 'unsigned int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x22150a28980 <col:17> 'unsigned int' lvalue Var 0x22150a2e698 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x22150a289e0 <col:21> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x22150a289a0 <col:21> 'int' 8
|   | |-UnaryOperator 0x22150a28a38 <col:24, col:25> 'unsigned int' postfix '++'
|   | | `-DeclRefExpr 0x22150a28a18 <col:24> 'unsigned int' lvalue Var 0x22150a2e698 'i' 'unsigned int'
|   | `-CompoundStmt 0x22150a28c30 <col:29, line:753:5>
|   |   |-CallExpr 0x22150a28ac8 <line:751:9, col:32> 'void'
|   |   | |-ImplicitCastExpr 0x22150a28ab0 <col:9> 'void (*)(int *, const limb *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x22150a28a50 <col:9> 'void (int *, const limb *)' Function 0x22150964740 'felem_square' 'void (int *, const limb *)'
|   |   | |-ImplicitCastExpr 0x22150a28af8 <col:22> 'int *' <ArrayToPointerDecay>
|   |   | | `-DeclRefExpr 0x22150a28a70 <col:22> 'largefelem':'int [9]' lvalue Var 0x22150a2e600 'tmp' 'largefelem':'int [9]'
|   |   | `-ImplicitCastExpr 0x22150a28b28 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   |   `-ImplicitCastExpr 0x22150a28b10 <col:27> 'limb *' <ArrayToPointerDecay>
|   |   |     `-DeclRefExpr 0x22150a28a90 <col:27> 'felem':'limb [9]' lvalue Var 0x22150a2e4d0 'ftmp3' 'felem':'limb [9]'
|   |   `-CallExpr 0x22150a28bb8 <line:752:9, col:32> 'void'
|   |     |-ImplicitCastExpr 0x22150a28ba0 <col:9> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x22150a28b40 <col:9> 'void (limb *, const int *)' Function 0x2215096a398 'felem_reduce' 'void (limb *, const int *)'
|   |     |-ImplicitCastExpr 0x22150a28be8 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x22150a28b60 <col:22> 'felem':'limb [9]' lvalue Var 0x22150a2e4d0 'ftmp3' 'felem':'limb [9]'
|   |     `-ImplicitCastExpr 0x22150a28c18 <col:29> 'const int *':'const int *' <NoOp>
|   |       `-ImplicitCastExpr 0x22150a28c00 <col:29> 'int *' <ArrayToPointerDecay>
|   |         `-DeclRefExpr 0x22150a28b80 <col:29> 'largefelem':'int [9]' lvalue Var 0x22150a2e600 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x22150a28d20 <line:754:5, col:32> 'void'
|   | |-ImplicitCastExpr 0x22150a28d08 <col:5> 'void (*)(int *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a28c88 <col:5> 'void (int *, const limb *, const limb *)' Function 0x22150966d78 'felem_mul' 'void (int *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x22150a28d58 <col:15> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a28ca8 <col:15> 'largefelem':'int [9]' lvalue Var 0x22150a2e600 'tmp' 'largefelem':'int [9]'
|   | |-ImplicitCastExpr 0x22150a28d88 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x22150a28d70 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x22150a28cc8 <col:20> 'felem':'limb [9]' lvalue Var 0x22150a2e4d0 'ftmp3' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x22150a28db8 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150a28da0 <col:27> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x22150a28ce8 <col:27> 'felem':'limb [9]' lvalue Var 0x22150a2e458 'ftmp2' 'felem':'limb [9]'
|   |-CallExpr 0x22150a28e48 <line:755:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x22150a28e30 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a28dd0 <col:5> 'void (limb *, const int *)' Function 0x2215096a398 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x22150a28e78 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a28df0 <col:18> 'felem':'limb [9]' lvalue Var 0x22150a2e4d0 'ftmp3' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x22150a28ea8 <col:25> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150a28e90 <col:25> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x22150a28e10 <col:25> 'largefelem':'int [9]' lvalue Var 0x22150a2e600 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x22150a28f38 <line:756:5, col:30> 'void'
|   | |-ImplicitCastExpr 0x22150a28f20 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a28ec0 <col:5> 'void (limb *, const limb *)' Function 0x2215095b168 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x22150a28f68 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a28ee0 <col:18> 'felem':'limb [9]' lvalue Var 0x22150a2e458 'ftmp2' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x22150a37028 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150a37010 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x22150a28f00 <col:25> 'felem':'limb [9]' lvalue Var 0x22150a2e4d0 'ftmp3' 'felem':'limb [9]'
|   |-ForStmt 0x22150a37390 <line:758:5, line:761:5>
|   | |-BinaryOperator 0x22150a370a0 <line:758:10, col:14> 'unsigned int' '='
|   | | |-DeclRefExpr 0x22150a37040 <col:10> 'unsigned int' lvalue Var 0x22150a2e698 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x22150a37088 <col:14> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x22150a37060 <col:14> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x22150a37138 <col:17, col:21> 'int' '<'
|   | | |-ImplicitCastExpr 0x22150a37108 <col:17> 'unsigned int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x22150a370c0 <col:17> 'unsigned int' lvalue Var 0x22150a2e698 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x22150a37120 <col:21> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x22150a370e0 <col:21> 'int' 16
|   | |-UnaryOperator 0x22150a37178 <col:25, col:26> 'unsigned int' postfix '++'
|   | | `-DeclRefExpr 0x22150a37158 <col:25> 'unsigned int' lvalue Var 0x22150a2e698 'i' 'unsigned int'
|   | `-CompoundStmt 0x22150a37370 <col:30, line:761:5>
|   |   |-CallExpr 0x22150a37208 <line:759:9, col:32> 'void'
|   |   | |-ImplicitCastExpr 0x22150a371f0 <col:9> 'void (*)(int *, const limb *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x22150a37190 <col:9> 'void (int *, const limb *)' Function 0x22150964740 'felem_square' 'void (int *, const limb *)'
|   |   | |-ImplicitCastExpr 0x22150a37238 <col:22> 'int *' <ArrayToPointerDecay>
|   |   | | `-DeclRefExpr 0x22150a371b0 <col:22> 'largefelem':'int [9]' lvalue Var 0x22150a2e600 'tmp' 'largefelem':'int [9]'
|   |   | `-ImplicitCastExpr 0x22150a37268 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   |   `-ImplicitCastExpr 0x22150a37250 <col:27> 'limb *' <ArrayToPointerDecay>
|   |   |     `-DeclRefExpr 0x22150a371d0 <col:27> 'felem':'limb [9]' lvalue Var 0x22150a2e4d0 'ftmp3' 'felem':'limb [9]'
|   |   `-CallExpr 0x22150a372f8 <line:760:9, col:32> 'void'
|   |     |-ImplicitCastExpr 0x22150a372e0 <col:9> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x22150a37280 <col:9> 'void (limb *, const int *)' Function 0x2215096a398 'felem_reduce' 'void (limb *, const int *)'
|   |     |-ImplicitCastExpr 0x22150a37328 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x22150a372a0 <col:22> 'felem':'limb [9]' lvalue Var 0x22150a2e4d0 'ftmp3' 'felem':'limb [9]'
|   |     `-ImplicitCastExpr 0x22150a37358 <col:29> 'const int *':'const int *' <NoOp>
|   |       `-ImplicitCastExpr 0x22150a37340 <col:29> 'int *' <ArrayToPointerDecay>
|   |         `-DeclRefExpr 0x22150a372c0 <col:29> 'largefelem':'int [9]' lvalue Var 0x22150a2e600 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x22150a37460 <line:762:5, col:32> 'void'
|   | |-ImplicitCastExpr 0x22150a37448 <col:5> 'void (*)(int *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a373c8 <col:5> 'void (int *, const limb *, const limb *)' Function 0x22150966d78 'felem_mul' 'void (int *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x22150a37498 <col:15> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a373e8 <col:15> 'largefelem':'int [9]' lvalue Var 0x22150a2e600 'tmp' 'largefelem':'int [9]'
|   | |-ImplicitCastExpr 0x22150a374c8 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x22150a374b0 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x22150a37408 <col:20> 'felem':'limb [9]' lvalue Var 0x22150a2e4d0 'ftmp3' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x22150a374f8 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150a374e0 <col:27> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x22150a37428 <col:27> 'felem':'limb [9]' lvalue Var 0x22150a2e458 'ftmp2' 'felem':'limb [9]'
|   |-CallExpr 0x22150a37588 <line:763:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x22150a37570 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a37510 <col:5> 'void (limb *, const int *)' Function 0x2215096a398 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x22150a375b8 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a37530 <col:18> 'felem':'limb [9]' lvalue Var 0x22150a2e4d0 'ftmp3' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x22150a375e8 <col:25> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150a375d0 <col:25> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x22150a37550 <col:25> 'largefelem':'int [9]' lvalue Var 0x22150a2e600 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x22150a37678 <line:764:5, col:30> 'void'
|   | |-ImplicitCastExpr 0x22150a37660 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a37600 <col:5> 'void (limb *, const limb *)' Function 0x2215095b168 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x22150a376a8 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a37620 <col:18> 'felem':'limb [9]' lvalue Var 0x22150a2e458 'ftmp2' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x22150a376d8 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150a376c0 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x22150a37640 <col:25> 'felem':'limb [9]' lvalue Var 0x22150a2e4d0 'ftmp3' 'felem':'limb [9]'
|   |-ForStmt 0x22150a37a40 <line:766:5, line:769:5>
|   | |-BinaryOperator 0x22150a37750 <line:766:10, col:14> 'unsigned int' '='
|   | | |-DeclRefExpr 0x22150a376f0 <col:10> 'unsigned int' lvalue Var 0x22150a2e698 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x22150a37738 <col:14> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x22150a37710 <col:14> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x22150a377e8 <col:17, col:21> 'int' '<'
|   | | |-ImplicitCastExpr 0x22150a377b8 <col:17> 'unsigned int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x22150a37770 <col:17> 'unsigned int' lvalue Var 0x22150a2e698 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x22150a377d0 <col:21> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x22150a37790 <col:21> 'int' 32
|   | |-UnaryOperator 0x22150a37828 <col:25, col:26> 'unsigned int' postfix '++'
|   | | `-DeclRefExpr 0x22150a37808 <col:25> 'unsigned int' lvalue Var 0x22150a2e698 'i' 'unsigned int'
|   | `-CompoundStmt 0x22150a37a20 <col:30, line:769:5>
|   |   |-CallExpr 0x22150a378b8 <line:767:9, col:32> 'void'
|   |   | |-ImplicitCastExpr 0x22150a378a0 <col:9> 'void (*)(int *, const limb *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x22150a37840 <col:9> 'void (int *, const limb *)' Function 0x22150964740 'felem_square' 'void (int *, const limb *)'
|   |   | |-ImplicitCastExpr 0x22150a378e8 <col:22> 'int *' <ArrayToPointerDecay>
|   |   | | `-DeclRefExpr 0x22150a37860 <col:22> 'largefelem':'int [9]' lvalue Var 0x22150a2e600 'tmp' 'largefelem':'int [9]'
|   |   | `-ImplicitCastExpr 0x22150a37918 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   |   `-ImplicitCastExpr 0x22150a37900 <col:27> 'limb *' <ArrayToPointerDecay>
|   |   |     `-DeclRefExpr 0x22150a37880 <col:27> 'felem':'limb [9]' lvalue Var 0x22150a2e4d0 'ftmp3' 'felem':'limb [9]'
|   |   `-CallExpr 0x22150a379a8 <line:768:9, col:32> 'void'
|   |     |-ImplicitCastExpr 0x22150a37990 <col:9> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x22150a37930 <col:9> 'void (limb *, const int *)' Function 0x2215096a398 'felem_reduce' 'void (limb *, const int *)'
|   |     |-ImplicitCastExpr 0x22150a379d8 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x22150a37950 <col:22> 'felem':'limb [9]' lvalue Var 0x22150a2e4d0 'ftmp3' 'felem':'limb [9]'
|   |     `-ImplicitCastExpr 0x22150a37a08 <col:29> 'const int *':'const int *' <NoOp>
|   |       `-ImplicitCastExpr 0x22150a379f0 <col:29> 'int *' <ArrayToPointerDecay>
|   |         `-DeclRefExpr 0x22150a37970 <col:29> 'largefelem':'int [9]' lvalue Var 0x22150a2e600 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x22150a37b10 <line:770:5, col:32> 'void'
|   | |-ImplicitCastExpr 0x22150a37af8 <col:5> 'void (*)(int *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a37a78 <col:5> 'void (int *, const limb *, const limb *)' Function 0x22150966d78 'felem_mul' 'void (int *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x22150a37b48 <col:15> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a37a98 <col:15> 'largefelem':'int [9]' lvalue Var 0x22150a2e600 'tmp' 'largefelem':'int [9]'
|   | |-ImplicitCastExpr 0x22150a37b78 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x22150a37b60 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x22150a37ab8 <col:20> 'felem':'limb [9]' lvalue Var 0x22150a2e4d0 'ftmp3' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x22150a37ba8 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150a37b90 <col:27> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x22150a37ad8 <col:27> 'felem':'limb [9]' lvalue Var 0x22150a2e458 'ftmp2' 'felem':'limb [9]'
|   |-CallExpr 0x22150a37c38 <line:771:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x22150a37c20 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a37bc0 <col:5> 'void (limb *, const int *)' Function 0x2215096a398 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x22150a37c68 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a37be0 <col:18> 'felem':'limb [9]' lvalue Var 0x22150a2e4d0 'ftmp3' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x22150a37c98 <col:25> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150a37c80 <col:25> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x22150a37c00 <col:25> 'largefelem':'int [9]' lvalue Var 0x22150a2e600 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x22150a37d28 <line:772:5, col:30> 'void'
|   | |-ImplicitCastExpr 0x22150a37d10 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a37cb0 <col:5> 'void (limb *, const limb *)' Function 0x2215095b168 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x22150a37d58 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a37cd0 <col:18> 'felem':'limb [9]' lvalue Var 0x22150a2e458 'ftmp2' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x22150a37d88 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150a37d70 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x22150a37cf0 <col:25> 'felem':'limb [9]' lvalue Var 0x22150a2e4d0 'ftmp3' 'felem':'limb [9]'
|   |-ForStmt 0x22150a380f0 <line:774:5, line:777:5>
|   | |-BinaryOperator 0x22150a37e00 <line:774:10, col:14> 'unsigned int' '='
|   | | |-DeclRefExpr 0x22150a37da0 <col:10> 'unsigned int' lvalue Var 0x22150a2e698 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x22150a37de8 <col:14> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x22150a37dc0 <col:14> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x22150a37e98 <col:17, col:21> 'int' '<'
|   | | |-ImplicitCastExpr 0x22150a37e68 <col:17> 'unsigned int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x22150a37e20 <col:17> 'unsigned int' lvalue Var 0x22150a2e698 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x22150a37e80 <col:21> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x22150a37e40 <col:21> 'int' 64
|   | |-UnaryOperator 0x22150a37ed8 <col:25, col:26> 'unsigned int' postfix '++'
|   | | `-DeclRefExpr 0x22150a37eb8 <col:25> 'unsigned int' lvalue Var 0x22150a2e698 'i' 'unsigned int'
|   | `-CompoundStmt 0x22150a380d0 <col:30, line:777:5>
|   |   |-CallExpr 0x22150a37f68 <line:775:9, col:32> 'void'
|   |   | |-ImplicitCastExpr 0x22150a37f50 <col:9> 'void (*)(int *, const limb *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x22150a37ef0 <col:9> 'void (int *, const limb *)' Function 0x22150964740 'felem_square' 'void (int *, const limb *)'
|   |   | |-ImplicitCastExpr 0x22150a37f98 <col:22> 'int *' <ArrayToPointerDecay>
|   |   | | `-DeclRefExpr 0x22150a37f10 <col:22> 'largefelem':'int [9]' lvalue Var 0x22150a2e600 'tmp' 'largefelem':'int [9]'
|   |   | `-ImplicitCastExpr 0x22150a37fc8 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   |   `-ImplicitCastExpr 0x22150a37fb0 <col:27> 'limb *' <ArrayToPointerDecay>
|   |   |     `-DeclRefExpr 0x22150a37f30 <col:27> 'felem':'limb [9]' lvalue Var 0x22150a2e4d0 'ftmp3' 'felem':'limb [9]'
|   |   `-CallExpr 0x22150a38058 <line:776:9, col:32> 'void'
|   |     |-ImplicitCastExpr 0x22150a38040 <col:9> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x22150a37fe0 <col:9> 'void (limb *, const int *)' Function 0x2215096a398 'felem_reduce' 'void (limb *, const int *)'
|   |     |-ImplicitCastExpr 0x22150a38088 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x22150a38000 <col:22> 'felem':'limb [9]' lvalue Var 0x22150a2e4d0 'ftmp3' 'felem':'limb [9]'
|   |     `-ImplicitCastExpr 0x22150a380b8 <col:29> 'const int *':'const int *' <NoOp>
|   |       `-ImplicitCastExpr 0x22150a380a0 <col:29> 'int *' <ArrayToPointerDecay>
|   |         `-DeclRefExpr 0x22150a38020 <col:29> 'largefelem':'int [9]' lvalue Var 0x22150a2e600 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x22150a381c0 <line:778:5, col:32> 'void'
|   | |-ImplicitCastExpr 0x22150a381a8 <col:5> 'void (*)(int *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a38128 <col:5> 'void (int *, const limb *, const limb *)' Function 0x22150966d78 'felem_mul' 'void (int *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x22150a381f8 <col:15> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a38148 <col:15> 'largefelem':'int [9]' lvalue Var 0x22150a2e600 'tmp' 'largefelem':'int [9]'
|   | |-ImplicitCastExpr 0x22150a38228 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x22150a38210 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x22150a38168 <col:20> 'felem':'limb [9]' lvalue Var 0x22150a2e4d0 'ftmp3' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x22150a38258 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150a38240 <col:27> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x22150a38188 <col:27> 'felem':'limb [9]' lvalue Var 0x22150a2e458 'ftmp2' 'felem':'limb [9]'
|   |-CallExpr 0x22150a382e8 <line:779:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x22150a382d0 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a38270 <col:5> 'void (limb *, const int *)' Function 0x2215096a398 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x22150a38318 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a38290 <col:18> 'felem':'limb [9]' lvalue Var 0x22150a2e4d0 'ftmp3' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x22150a38348 <col:25> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150a38330 <col:25> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x22150a382b0 <col:25> 'largefelem':'int [9]' lvalue Var 0x22150a2e600 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x22150a383d8 <line:780:5, col:30> 'void'
|   | |-ImplicitCastExpr 0x22150a383c0 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a38360 <col:5> 'void (limb *, const limb *)' Function 0x2215095b168 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x22150a38408 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a38380 <col:18> 'felem':'limb [9]' lvalue Var 0x22150a2e458 'ftmp2' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x22150a38438 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150a38420 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x22150a383a0 <col:25> 'felem':'limb [9]' lvalue Var 0x22150a2e4d0 'ftmp3' 'felem':'limb [9]'
|   |-ForStmt 0x22150a387a0 <line:782:5, line:785:5>
|   | |-BinaryOperator 0x22150a384b0 <line:782:10, col:14> 'unsigned int' '='
|   | | |-DeclRefExpr 0x22150a38450 <col:10> 'unsigned int' lvalue Var 0x22150a2e698 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x22150a38498 <col:14> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x22150a38470 <col:14> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x22150a38548 <col:17, col:21> 'int' '<'
|   | | |-ImplicitCastExpr 0x22150a38518 <col:17> 'unsigned int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x22150a384d0 <col:17> 'unsigned int' lvalue Var 0x22150a2e698 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x22150a38530 <col:21> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x22150a384f0 <col:21> 'int' 128
|   | |-UnaryOperator 0x22150a38588 <col:26, col:27> 'unsigned int' postfix '++'
|   | | `-DeclRefExpr 0x22150a38568 <col:26> 'unsigned int' lvalue Var 0x22150a2e698 'i' 'unsigned int'
|   | `-CompoundStmt 0x22150a38780 <col:31, line:785:5>
|   |   |-CallExpr 0x22150a38618 <line:783:9, col:32> 'void'
|   |   | |-ImplicitCastExpr 0x22150a38600 <col:9> 'void (*)(int *, const limb *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x22150a385a0 <col:9> 'void (int *, const limb *)' Function 0x22150964740 'felem_square' 'void (int *, const limb *)'
|   |   | |-ImplicitCastExpr 0x22150a38648 <col:22> 'int *' <ArrayToPointerDecay>
|   |   | | `-DeclRefExpr 0x22150a385c0 <col:22> 'largefelem':'int [9]' lvalue Var 0x22150a2e600 'tmp' 'largefelem':'int [9]'
|   |   | `-ImplicitCastExpr 0x22150a38678 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   |   `-ImplicitCastExpr 0x22150a38660 <col:27> 'limb *' <ArrayToPointerDecay>
|   |   |     `-DeclRefExpr 0x22150a385e0 <col:27> 'felem':'limb [9]' lvalue Var 0x22150a2e4d0 'ftmp3' 'felem':'limb [9]'
|   |   `-CallExpr 0x22150a38708 <line:784:9, col:32> 'void'
|   |     |-ImplicitCastExpr 0x22150a386f0 <col:9> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x22150a38690 <col:9> 'void (limb *, const int *)' Function 0x2215096a398 'felem_reduce' 'void (limb *, const int *)'
|   |     |-ImplicitCastExpr 0x22150a38738 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x22150a386b0 <col:22> 'felem':'limb [9]' lvalue Var 0x22150a2e4d0 'ftmp3' 'felem':'limb [9]'
|   |     `-ImplicitCastExpr 0x22150a38768 <col:29> 'const int *':'const int *' <NoOp>
|   |       `-ImplicitCastExpr 0x22150a38750 <col:29> 'int *' <ArrayToPointerDecay>
|   |         `-DeclRefExpr 0x22150a386d0 <col:29> 'largefelem':'int [9]' lvalue Var 0x22150a2e600 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x22150a38870 <line:786:5, col:32> 'void'
|   | |-ImplicitCastExpr 0x22150a38858 <col:5> 'void (*)(int *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a387d8 <col:5> 'void (int *, const limb *, const limb *)' Function 0x22150966d78 'felem_mul' 'void (int *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x22150a388a8 <col:15> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a387f8 <col:15> 'largefelem':'int [9]' lvalue Var 0x22150a2e600 'tmp' 'largefelem':'int [9]'
|   | |-ImplicitCastExpr 0x22150a388d8 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x22150a388c0 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x22150a38818 <col:20> 'felem':'limb [9]' lvalue Var 0x22150a2e4d0 'ftmp3' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x22150a38908 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150a388f0 <col:27> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x22150a38838 <col:27> 'felem':'limb [9]' lvalue Var 0x22150a2e458 'ftmp2' 'felem':'limb [9]'
|   |-CallExpr 0x22150a38998 <line:787:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x22150a38980 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a38920 <col:5> 'void (limb *, const int *)' Function 0x2215096a398 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x22150a389c8 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a38940 <col:18> 'felem':'limb [9]' lvalue Var 0x22150a2e4d0 'ftmp3' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x22150a389f8 <col:25> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150a389e0 <col:25> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x22150a38960 <col:25> 'largefelem':'int [9]' lvalue Var 0x22150a2e600 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x22150a38a88 <line:788:5, col:30> 'void'
|   | |-ImplicitCastExpr 0x22150a38a70 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a38a10 <col:5> 'void (limb *, const limb *)' Function 0x2215095b168 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x22150a38ab8 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a38a30 <col:18> 'felem':'limb [9]' lvalue Var 0x22150a2e458 'ftmp2' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x22150a38ae8 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150a38ad0 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x22150a38a50 <col:25> 'felem':'limb [9]' lvalue Var 0x22150a2e4d0 'ftmp3' 'felem':'limb [9]'
|   |-ForStmt 0x22150a38e50 <line:790:5, line:793:5>
|   | |-BinaryOperator 0x22150a38b60 <line:790:10, col:14> 'unsigned int' '='
|   | | |-DeclRefExpr 0x22150a38b00 <col:10> 'unsigned int' lvalue Var 0x22150a2e698 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x22150a38b48 <col:14> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x22150a38b20 <col:14> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x22150a38bf8 <col:17, col:21> 'int' '<'
|   | | |-ImplicitCastExpr 0x22150a38bc8 <col:17> 'unsigned int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x22150a38b80 <col:17> 'unsigned int' lvalue Var 0x22150a2e698 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x22150a38be0 <col:21> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x22150a38ba0 <col:21> 'int' 256
|   | |-UnaryOperator 0x22150a38c38 <col:26, col:27> 'unsigned int' postfix '++'
|   | | `-DeclRefExpr 0x22150a38c18 <col:26> 'unsigned int' lvalue Var 0x22150a2e698 'i' 'unsigned int'
|   | `-CompoundStmt 0x22150a38e30 <col:31, line:793:5>
|   |   |-CallExpr 0x22150a38cc8 <line:791:9, col:32> 'void'
|   |   | |-ImplicitCastExpr 0x22150a38cb0 <col:9> 'void (*)(int *, const limb *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x22150a38c50 <col:9> 'void (int *, const limb *)' Function 0x22150964740 'felem_square' 'void (int *, const limb *)'
|   |   | |-ImplicitCastExpr 0x22150a38cf8 <col:22> 'int *' <ArrayToPointerDecay>
|   |   | | `-DeclRefExpr 0x22150a38c70 <col:22> 'largefelem':'int [9]' lvalue Var 0x22150a2e600 'tmp' 'largefelem':'int [9]'
|   |   | `-ImplicitCastExpr 0x22150a38d28 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   |   `-ImplicitCastExpr 0x22150a38d10 <col:27> 'limb *' <ArrayToPointerDecay>
|   |   |     `-DeclRefExpr 0x22150a38c90 <col:27> 'felem':'limb [9]' lvalue Var 0x22150a2e4d0 'ftmp3' 'felem':'limb [9]'
|   |   `-CallExpr 0x22150a38db8 <line:792:9, col:32> 'void'
|   |     |-ImplicitCastExpr 0x22150a38da0 <col:9> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x22150a38d40 <col:9> 'void (limb *, const int *)' Function 0x2215096a398 'felem_reduce' 'void (limb *, const int *)'
|   |     |-ImplicitCastExpr 0x22150a38de8 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x22150a38d60 <col:22> 'felem':'limb [9]' lvalue Var 0x22150a2e4d0 'ftmp3' 'felem':'limb [9]'
|   |     `-ImplicitCastExpr 0x22150a38e18 <col:29> 'const int *':'const int *' <NoOp>
|   |       `-ImplicitCastExpr 0x22150a38e00 <col:29> 'int *' <ArrayToPointerDecay>
|   |         `-DeclRefExpr 0x22150a38d80 <col:29> 'largefelem':'int [9]' lvalue Var 0x22150a2e600 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x22150a38f20 <line:794:5, col:32> 'void'
|   | |-ImplicitCastExpr 0x22150a38f08 <col:5> 'void (*)(int *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a38e88 <col:5> 'void (int *, const limb *, const limb *)' Function 0x22150966d78 'felem_mul' 'void (int *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x22150a38f58 <col:15> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a38ea8 <col:15> 'largefelem':'int [9]' lvalue Var 0x22150a2e600 'tmp' 'largefelem':'int [9]'
|   | |-ImplicitCastExpr 0x22150a38f88 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x22150a38f70 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x22150a38ec8 <col:20> 'felem':'limb [9]' lvalue Var 0x22150a2e4d0 'ftmp3' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x22150a38fb8 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150a38fa0 <col:27> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x22150a38ee8 <col:27> 'felem':'limb [9]' lvalue Var 0x22150a2e458 'ftmp2' 'felem':'limb [9]'
|   |-CallExpr 0x22150a2f008 <line:795:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x22150a2eff0 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a38fd0 <col:5> 'void (limb *, const int *)' Function 0x2215096a398 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x22150a2f038 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a38ff0 <col:18> 'felem':'limb [9]' lvalue Var 0x22150a2e4d0 'ftmp3' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x22150a2f068 <col:25> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150a2f050 <col:25> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x22150a2efd0 <col:25> 'largefelem':'int [9]' lvalue Var 0x22150a2e600 'tmp' 'largefelem':'int [9]'
|   |-ForStmt 0x22150a2f3d0 <line:797:5, line:800:5>
|   | |-BinaryOperator 0x22150a2f0e0 <line:797:10, col:14> 'unsigned int' '='
|   | | |-DeclRefExpr 0x22150a2f080 <col:10> 'unsigned int' lvalue Var 0x22150a2e698 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x22150a2f0c8 <col:14> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x22150a2f0a0 <col:14> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x22150a2f178 <col:17, col:21> 'int' '<'
|   | | |-ImplicitCastExpr 0x22150a2f148 <col:17> 'unsigned int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x22150a2f100 <col:17> 'unsigned int' lvalue Var 0x22150a2e698 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x22150a2f160 <col:21> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x22150a2f120 <col:21> 'int' 9
|   | |-UnaryOperator 0x22150a2f1b8 <col:24, col:25> 'unsigned int' postfix '++'
|   | | `-DeclRefExpr 0x22150a2f198 <col:24> 'unsigned int' lvalue Var 0x22150a2e698 'i' 'unsigned int'
|   | `-CompoundStmt 0x22150a2f3b0 <col:29, line:800:5>
|   |   |-CallExpr 0x22150a2f248 <line:798:9, col:32> 'void'
|   |   | |-ImplicitCastExpr 0x22150a2f230 <col:9> 'void (*)(int *, const limb *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x22150a2f1d0 <col:9> 'void (int *, const limb *)' Function 0x22150964740 'felem_square' 'void (int *, const limb *)'
|   |   | |-ImplicitCastExpr 0x22150a2f278 <col:22> 'int *' <ArrayToPointerDecay>
|   |   | | `-DeclRefExpr 0x22150a2f1f0 <col:22> 'largefelem':'int [9]' lvalue Var 0x22150a2e600 'tmp' 'largefelem':'int [9]'
|   |   | `-ImplicitCastExpr 0x22150a2f2a8 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   |   `-ImplicitCastExpr 0x22150a2f290 <col:27> 'limb *' <ArrayToPointerDecay>
|   |   |     `-DeclRefExpr 0x22150a2f210 <col:27> 'felem':'limb [9]' lvalue Var 0x22150a2e4d0 'ftmp3' 'felem':'limb [9]'
|   |   `-CallExpr 0x22150a2f338 <line:799:9, col:32> 'void'
|   |     |-ImplicitCastExpr 0x22150a2f320 <col:9> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x22150a2f2c0 <col:9> 'void (limb *, const int *)' Function 0x2215096a398 'felem_reduce' 'void (limb *, const int *)'
|   |     |-ImplicitCastExpr 0x22150a2f368 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x22150a2f2e0 <col:22> 'felem':'limb [9]' lvalue Var 0x22150a2e4d0 'ftmp3' 'felem':'limb [9]'
|   |     `-ImplicitCastExpr 0x22150a2f398 <col:29> 'const int *':'const int *' <NoOp>
|   |       `-ImplicitCastExpr 0x22150a2f380 <col:29> 'int *' <ArrayToPointerDecay>
|   |         `-DeclRefExpr 0x22150a2f300 <col:29> 'largefelem':'int [9]' lvalue Var 0x22150a2e600 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x22150a2f4a0 <line:801:5, col:32> 'void'
|   | |-ImplicitCastExpr 0x22150a2f488 <col:5> 'void (*)(int *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a2f408 <col:5> 'void (int *, const limb *, const limb *)' Function 0x22150966d78 'felem_mul' 'void (int *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x22150a2f4d8 <col:15> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a2f428 <col:15> 'largefelem':'int [9]' lvalue Var 0x22150a2e600 'tmp' 'largefelem':'int [9]'
|   | |-ImplicitCastExpr 0x22150a2f508 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x22150a2f4f0 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x22150a2f448 <col:20> 'felem':'limb [9]' lvalue Var 0x22150a2e4d0 'ftmp3' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x22150a2f538 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150a2f520 <col:27> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x22150a2f468 <col:27> 'felem':'limb [9]' lvalue Var 0x22150a2e548 'ftmp4' 'felem':'limb [9]'
|   |-CallExpr 0x22150a2f5c8 <line:802:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x22150a2f5b0 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a2f550 <col:5> 'void (limb *, const int *)' Function 0x2215096a398 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x22150a2f5f8 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a2f570 <col:18> 'felem':'limb [9]' lvalue Var 0x22150a2e4d0 'ftmp3' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x22150a2f628 <col:25> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150a2f610 <col:25> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x22150a2f590 <col:25> 'largefelem':'int [9]' lvalue Var 0x22150a2e600 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x22150a2f6d8 <line:803:5, col:29> 'void'
|   | |-ImplicitCastExpr 0x22150a2f6c0 <col:5> 'void (*)(int *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a2f640 <col:5> 'void (int *, const limb *, const limb *)' Function 0x22150966d78 'felem_mul' 'void (int *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x22150a2f710 <col:15> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a2f660 <col:15> 'largefelem':'int [9]' lvalue Var 0x22150a2e600 'tmp' 'largefelem':'int [9]'
|   | |-ImplicitCastExpr 0x22150a2f740 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x22150a2f728 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x22150a2f680 <col:20> 'felem':'limb [9]' lvalue Var 0x22150a2e4d0 'ftmp3' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x22150a2f758 <col:27> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x22150a2f6a0 <col:27> 'const limb *':'const limb *' lvalue ParmVar 0x22150a2e240 'in' 'const limb *':'const limb *'
|   `-CallExpr 0x22150a2f7e8 <line:804:5, col:26> 'void'
|     |-ImplicitCastExpr 0x22150a2f7d0 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x22150a2f770 <col:5> 'void (limb *, const int *)' Function 0x2215096a398 'felem_reduce' 'void (limb *, const int *)'
|     |-ImplicitCastExpr 0x22150a2f818 <col:18> 'limb *':'limb *' <LValueToRValue>
|     | `-DeclRefExpr 0x22150a2f790 <col:18> 'limb *':'limb *' lvalue ParmVar 0x22150a2e1c8 'out' 'limb *':'limb *'
|     `-ImplicitCastExpr 0x22150a2f848 <col:23> 'const int *':'const int *' <NoOp>
|       `-ImplicitCastExpr 0x22150a2f830 <col:23> 'int *' <ArrayToPointerDecay>
|         `-DeclRefExpr 0x22150a2f7b0 <col:23> 'largefelem':'int [9]' lvalue Var 0x22150a2e600 'tmp' 'largefelem':'int [9]'
|-VarDecl 0x22150a2fa88 <line:808:1, line:812:1> line:808:20 used kPrime 'const felem':'limb const[9]' static cinit
| `-InitListExpr 0x22150a2fd08 <col:29, line:812:1> 'const felem':'limb const[9]'
|   |-ImplicitCastExpr 0x22150a2fd90 <line:809:5> 'limb':'int' <IntegralCast>
|   | `-IntegerLiteral 0x22150a2faf0 <col:5> 'long long' 288230376151711743
|   |-ImplicitCastExpr 0x22150a2fda8 <col:25> 'limb':'int' <IntegralCast>
|   | `-IntegerLiteral 0x22150a2fb18 <col:25> 'long long' 288230376151711743
|   |-ImplicitCastExpr 0x22150a2fdc0 <col:45> 'limb':'int' <IntegralCast>
|   | `-IntegerLiteral 0x22150a2fb40 <col:45> 'long long' 288230376151711743
|   |-ImplicitCastExpr 0x22150a2fdd8 <line:810:5> 'limb':'int' <IntegralCast>
|   | `-IntegerLiteral 0x22150a2fb68 <col:5> 'long long' 288230376151711743
|   |-ImplicitCastExpr 0x22150a2fdf0 <col:25> 'limb':'int' <IntegralCast>
|   | `-IntegerLiteral 0x22150a2fb90 <col:25> 'long long' 288230376151711743
|   |-ImplicitCastExpr 0x22150a2fe08 <col:45> 'limb':'int' <IntegralCast>
|   | `-IntegerLiteral 0x22150a2fbb8 <col:45> 'long long' 288230376151711743
|   |-ImplicitCastExpr 0x22150a2fe20 <line:811:5> 'limb':'int' <IntegralCast>
|   | `-IntegerLiteral 0x22150a2fbe0 <col:5> 'long long' 288230376151711743
|   |-ImplicitCastExpr 0x22150a2fe38 <col:25> 'limb':'int' <IntegralCast>
|   | `-IntegerLiteral 0x22150a2fc08 <col:25> 'long long' 288230376151711743
|   `-ImplicitCastExpr 0x22150a2fe50 <col:45> 'limb':'int' <IntegralCast>
|     `-IntegerLiteral 0x22150a2fc30 <col:45> 'long long' 144115188075855871
|-FunctionDecl 0x22150a2ff58 <line:820:1, line:886:1> line:820:13 used felem_is_zero 'limb (const limb *)' static
| |-ParmVarDecl 0x22150a2fe78 <col:27, col:39> col:39 used in 'const limb *':'const limb *'
| `-CompoundStmt 0x22150a33460 <line:821:1, line:886:1>
|   |-DeclStmt 0x22150a30090 <line:822:5, col:15>
|   | `-VarDecl 0x22150a30028 <col:5, col:11> col:11 used ftmp 'felem':'limb [9]'
|   |-DeclStmt 0x22150a301b0 <line:823:5, col:23>
|   | |-VarDecl 0x22150a300b8 <col:5, col:10> col:10 used is_zero 'limb':'int'
|   | `-VarDecl 0x22150a30130 <col:5, col:19> col:19 used is_p 'limb':'int'
|   |-CallExpr 0x22150a30258 <line:824:5, col:26> 'void'
|   | |-ImplicitCastExpr 0x22150a30240 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a301c8 <col:5> 'void (limb *, const limb *)' Function 0x2215095b168 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x22150a30288 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a301e8 <col:18> 'felem':'limb [9]' lvalue Var 0x22150a30028 'ftmp' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x22150a302a0 <col:24> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x22150a30220 <col:24> 'const limb *':'const limb *' lvalue ParmVar 0x22150a2fe78 'in' 'const limb *':'const limb *'
|   |-CompoundAssignOperator 0x22150a30418 <line:826:5, col:27> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x22150a30318 <col:5, col:11> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x22150a30300 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x22150a302b8 <col:5> 'felem':'limb [9]' lvalue Var 0x22150a30028 'ftmp' 'felem':'limb [9]'
|   | | `-IntegerLiteral 0x22150a302d8 <col:10> 'int' 0
|   | `-BinaryOperator 0x22150a303f8 <col:16, col:27> 'limb':'int' '>>'
|   |   |-ImplicitCastExpr 0x22150a303e0 <col:16, col:22> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x22150a30398 <col:16, col:22> 'limb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x22150a30380 <col:16> 'limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x22150a30338 <col:16> 'felem':'limb [9]' lvalue Var 0x22150a30028 'ftmp' 'felem':'limb [9]'
|   |   |   `-IntegerLiteral 0x22150a30358 <col:21> 'int' 8
|   |   `-IntegerLiteral 0x22150a303b8 <col:27> 'int' 57
|   |-CompoundAssignOperator 0x22150a30500 <line:827:5, col:16> 'limb':'int' '&=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x22150a304a8 <col:5, col:11> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x22150a30490 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x22150a30448 <col:5> 'felem':'limb [9]' lvalue Var 0x22150a30028 'ftmp' 'felem':'limb [9]'
|   | | `-IntegerLiteral 0x22150a30468 <col:10> 'int' 8
|   | `-ImplicitCastExpr 0x22150a304e8 <col:16> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x22150a304c8 <col:16> 'const limb':'const int' lvalue Var 0x221509552f0 'bottom57bits' 'const limb':'const int'
|   |-CompoundAssignOperator 0x22150a30690 <line:829:5, col:27> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x22150a30590 <col:5, col:11> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x22150a30578 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x22150a30530 <col:5> 'felem':'limb [9]' lvalue Var 0x22150a30028 'ftmp' 'felem':'limb [9]'
|   | | `-IntegerLiteral 0x22150a30550 <col:10> 'int' 1
|   | `-BinaryOperator 0x22150a30670 <col:16, col:27> 'limb':'int' '>>'
|   |   |-ImplicitCastExpr 0x22150a30658 <col:16, col:22> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x22150a30610 <col:16, col:22> 'limb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x22150a305f8 <col:16> 'limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x22150a305b0 <col:16> 'felem':'limb [9]' lvalue Var 0x22150a30028 'ftmp' 'felem':'limb [9]'
|   |   |   `-IntegerLiteral 0x22150a305d0 <col:21> 'int' 0
|   |   `-IntegerLiteral 0x22150a30630 <col:27> 'int' 58
|   |-CompoundAssignOperator 0x22150a30778 <line:830:5, col:16> 'limb':'int' '&=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x22150a30720 <col:5, col:11> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x22150a30708 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x22150a306c0 <col:5> 'felem':'limb [9]' lvalue Var 0x22150a30028 'ftmp' 'felem':'limb [9]'
|   | | `-IntegerLiteral 0x22150a306e0 <col:10> 'int' 0
|   | `-ImplicitCastExpr 0x22150a30760 <col:16> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x22150a30740 <col:16> 'const limb':'const int' lvalue Var 0x221509553c0 'bottom58bits' 'const limb':'const int'
|   |-CompoundAssignOperator 0x22150a30908 <line:831:5, col:27> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x22150a30808 <col:5, col:11> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x22150a307f0 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x22150a307a8 <col:5> 'felem':'limb [9]' lvalue Var 0x22150a30028 'ftmp' 'felem':'limb [9]'
|   | | `-IntegerLiteral 0x22150a307c8 <col:10> 'int' 2
|   | `-BinaryOperator 0x22150a308e8 <col:16, col:27> 'limb':'int' '>>'
|   |   |-ImplicitCastExpr 0x22150a308d0 <col:16, col:22> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x22150a30888 <col:16, col:22> 'limb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x22150a30870 <col:16> 'limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x22150a30828 <col:16> 'felem':'limb [9]' lvalue Var 0x22150a30028 'ftmp' 'felem':'limb [9]'
|   |   |   `-IntegerLiteral 0x22150a30848 <col:21> 'int' 1
|   |   `-IntegerLiteral 0x22150a308a8 <col:27> 'int' 58
|   |-CompoundAssignOperator 0x22150a309f0 <line:832:5, col:16> 'limb':'int' '&=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x22150a30998 <col:5, col:11> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x22150a30980 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x22150a30938 <col:5> 'felem':'limb [9]' lvalue Var 0x22150a30028 'ftmp' 'felem':'limb [9]'
|   | | `-IntegerLiteral 0x22150a30958 <col:10> 'int' 1
|   | `-ImplicitCastExpr 0x22150a309d8 <col:16> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x22150a309b8 <col:16> 'const limb':'const int' lvalue Var 0x221509553c0 'bottom58bits' 'const limb':'const int'
|   |-CompoundAssignOperator 0x22150a30b80 <line:833:5, col:27> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x22150a30a80 <col:5, col:11> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x22150a30a68 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x22150a30a20 <col:5> 'felem':'limb [9]' lvalue Var 0x22150a30028 'ftmp' 'felem':'limb [9]'
|   | | `-IntegerLiteral 0x22150a30a40 <col:10> 'int' 3
|   | `-BinaryOperator 0x22150a30b60 <col:16, col:27> 'limb':'int' '>>'
|   |   |-ImplicitCastExpr 0x22150a30b48 <col:16, col:22> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x22150a30b00 <col:16, col:22> 'limb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x22150a30ae8 <col:16> 'limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x22150a30aa0 <col:16> 'felem':'limb [9]' lvalue Var 0x22150a30028 'ftmp' 'felem':'limb [9]'
|   |   |   `-IntegerLiteral 0x22150a30ac0 <col:21> 'int' 2
|   |   `-IntegerLiteral 0x22150a30b20 <col:27> 'int' 58
|   |-CompoundAssignOperator 0x22150a30c68 <line:834:5, col:16> 'limb':'int' '&=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x22150a30c10 <col:5, col:11> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x22150a30bf8 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x22150a30bb0 <col:5> 'felem':'limb [9]' lvalue Var 0x22150a30028 'ftmp' 'felem':'limb [9]'
|   | | `-IntegerLiteral 0x22150a30bd0 <col:10> 'int' 2
|   | `-ImplicitCastExpr 0x22150a30c50 <col:16> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x22150a30c30 <col:16> 'const limb':'const int' lvalue Var 0x221509553c0 'bottom58bits' 'const limb':'const int'
|   |-CompoundAssignOperator 0x22150a30df8 <line:835:5, col:27> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x22150a30cf8 <col:5, col:11> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x22150a30ce0 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x22150a30c98 <col:5> 'felem':'limb [9]' lvalue Var 0x22150a30028 'ftmp' 'felem':'limb [9]'
|   | | `-IntegerLiteral 0x22150a30cb8 <col:10> 'int' 4
|   | `-BinaryOperator 0x22150a30dd8 <col:16, col:27> 'limb':'int' '>>'
|   |   |-ImplicitCastExpr 0x22150a30dc0 <col:16, col:22> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x22150a30d78 <col:16, col:22> 'limb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x22150a30d60 <col:16> 'limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x22150a30d18 <col:16> 'felem':'limb [9]' lvalue Var 0x22150a30028 'ftmp' 'felem':'limb [9]'
|   |   |   `-IntegerLiteral 0x22150a30d38 <col:21> 'int' 3
|   |   `-IntegerLiteral 0x22150a30d98 <col:27> 'int' 58
|   |-CompoundAssignOperator 0x22150a30ee0 <line:836:5, col:16> 'limb':'int' '&=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x22150a30e88 <col:5, col:11> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x22150a30e70 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x22150a30e28 <col:5> 'felem':'limb [9]' lvalue Var 0x22150a30028 'ftmp' 'felem':'limb [9]'
|   | | `-IntegerLiteral 0x22150a30e48 <col:10> 'int' 3
|   | `-ImplicitCastExpr 0x22150a30ec8 <col:16> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x22150a30ea8 <col:16> 'const limb':'const int' lvalue Var 0x221509553c0 'bottom58bits' 'const limb':'const int'
|   |-CompoundAssignOperator 0x22150a310a0 <line:837:5, col:27> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x22150a30f70 <col:5, col:11> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x22150a30f58 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x22150a30f10 <col:5> 'felem':'limb [9]' lvalue Var 0x22150a30028 'ftmp' 'felem':'limb [9]'
|   | | `-IntegerLiteral 0x22150a30f30 <col:10> 'int' 5
|   | `-BinaryOperator 0x22150a31080 <col:16, col:27> 'limb':'int' '>>'
|   |   |-ImplicitCastExpr 0x22150a31068 <col:16, col:22> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x22150a31020 <col:16, col:22> 'limb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x22150a31008 <col:16> 'limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x22150a30f90 <col:16> 'felem':'limb [9]' lvalue Var 0x22150a30028 'ftmp' 'felem':'limb [9]'
|   |   |   `-IntegerLiteral 0x22150a30fe0 <col:21> 'int' 4
|   |   `-IntegerLiteral 0x22150a31040 <col:27> 'int' 58
|   |-CompoundAssignOperator 0x22150a31188 <line:838:5, col:16> 'limb':'int' '&=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x22150a31130 <col:5, col:11> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x22150a31118 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x22150a310d0 <col:5> 'felem':'limb [9]' lvalue Var 0x22150a30028 'ftmp' 'felem':'limb [9]'
|   | | `-IntegerLiteral 0x22150a310f0 <col:10> 'int' 4
|   | `-ImplicitCastExpr 0x22150a31170 <col:16> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x22150a31150 <col:16> 'const limb':'const int' lvalue Var 0x221509553c0 'bottom58bits' 'const limb':'const int'
|   |-CompoundAssignOperator 0x22150a31318 <line:839:5, col:27> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x22150a31218 <col:5, col:11> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x22150a31200 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x22150a311b8 <col:5> 'felem':'limb [9]' lvalue Var 0x22150a30028 'ftmp' 'felem':'limb [9]'
|   | | `-IntegerLiteral 0x22150a311d8 <col:10> 'int' 6
|   | `-BinaryOperator 0x22150a312f8 <col:16, col:27> 'limb':'int' '>>'
|   |   |-ImplicitCastExpr 0x22150a312e0 <col:16, col:22> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x22150a31298 <col:16, col:22> 'limb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x22150a31280 <col:16> 'limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x22150a31238 <col:16> 'felem':'limb [9]' lvalue Var 0x22150a30028 'ftmp' 'felem':'limb [9]'
|   |   |   `-IntegerLiteral 0x22150a31258 <col:21> 'int' 5
|   |   `-IntegerLiteral 0x22150a312b8 <col:27> 'int' 58
|   |-CompoundAssignOperator 0x22150a31400 <line:840:5, col:16> 'limb':'int' '&=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x22150a313a8 <col:5, col:11> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x22150a31390 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x22150a31348 <col:5> 'felem':'limb [9]' lvalue Var 0x22150a30028 'ftmp' 'felem':'limb [9]'
|   | | `-IntegerLiteral 0x22150a31368 <col:10> 'int' 5
|   | `-ImplicitCastExpr 0x22150a313e8 <col:16> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x22150a313c8 <col:16> 'const limb':'const int' lvalue Var 0x221509553c0 'bottom58bits' 'const limb':'const int'
|   |-CompoundAssignOperator 0x22150a31590 <line:841:5, col:27> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x22150a31490 <col:5, col:11> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x22150a31478 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x22150a31430 <col:5> 'felem':'limb [9]' lvalue Var 0x22150a30028 'ftmp' 'felem':'limb [9]'
|   | | `-IntegerLiteral 0x22150a31450 <col:10> 'int' 7
|   | `-BinaryOperator 0x22150a31570 <col:16, col:27> 'limb':'int' '>>'
|   |   |-ImplicitCastExpr 0x22150a31558 <col:16, col:22> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x22150a31510 <col:16, col:22> 'limb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x22150a314f8 <col:16> 'limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x22150a314b0 <col:16> 'felem':'limb [9]' lvalue Var 0x22150a30028 'ftmp' 'felem':'limb [9]'
|   |   |   `-IntegerLiteral 0x22150a314d0 <col:21> 'int' 6
|   |   `-IntegerLiteral 0x22150a31530 <col:27> 'int' 58
|   |-CompoundAssignOperator 0x22150a31678 <line:842:5, col:16> 'limb':'int' '&=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x22150a31620 <col:5, col:11> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x22150a31608 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x22150a315c0 <col:5> 'felem':'limb [9]' lvalue Var 0x22150a30028 'ftmp' 'felem':'limb [9]'
|   | | `-IntegerLiteral 0x22150a315e0 <col:10> 'int' 6
|   | `-ImplicitCastExpr 0x22150a31660 <col:16> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x22150a31640 <col:16> 'const limb':'const int' lvalue Var 0x221509553c0 'bottom58bits' 'const limb':'const int'
|   |-CompoundAssignOperator 0x22150a31808 <line:843:5, col:27> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x22150a31708 <col:5, col:11> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x22150a316f0 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x22150a316a8 <col:5> 'felem':'limb [9]' lvalue Var 0x22150a30028 'ftmp' 'felem':'limb [9]'
|   | | `-IntegerLiteral 0x22150a316c8 <col:10> 'int' 8
|   | `-BinaryOperator 0x22150a317e8 <col:16, col:27> 'limb':'int' '>>'
|   |   |-ImplicitCastExpr 0x22150a317d0 <col:16, col:22> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x22150a31788 <col:16, col:22> 'limb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x22150a31770 <col:16> 'limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x22150a31728 <col:16> 'felem':'limb [9]' lvalue Var 0x22150a30028 'ftmp' 'felem':'limb [9]'
|   |   |   `-IntegerLiteral 0x22150a31748 <col:21> 'int' 7
|   |   `-IntegerLiteral 0x22150a317a8 <col:27> 'int' 58
|   |-CompoundAssignOperator 0x22150a318f0 <line:844:5, col:16> 'limb':'int' '&=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x22150a31898 <col:5, col:11> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x22150a31880 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x22150a31838 <col:5> 'felem':'limb [9]' lvalue Var 0x22150a30028 'ftmp' 'felem':'limb [9]'
|   | | `-IntegerLiteral 0x22150a31858 <col:10> 'int' 7
|   | `-ImplicitCastExpr 0x22150a318d8 <col:16> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x22150a318b8 <col:16> 'const limb':'const int' lvalue Var 0x221509553c0 'bottom58bits' 'const limb':'const int'
|   |-BinaryOperator 0x22150a31980 <line:853:5, col:15> 'limb':'int' '='
|   | |-DeclRefExpr 0x22150a31920 <col:5> 'limb':'int' lvalue Var 0x22150a300b8 'is_zero' 'limb':'int'
|   | `-IntegerLiteral 0x22150a31958 <col:15> 'int' 0
|   |-CompoundAssignOperator 0x22150a31a58 <line:854:5, col:22> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x22150a319a0 <col:5> 'limb':'int' lvalue Var 0x22150a300b8 'is_zero' 'limb':'int'
|   | `-ImplicitCastExpr 0x22150a31a40 <col:16, col:22> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x22150a31a20 <col:16, col:22> 'limb':'int' lvalue
|   |     |-ImplicitCastExpr 0x22150a31a08 <col:16> 'limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x22150a319c0 <col:16> 'felem':'limb [9]' lvalue Var 0x22150a30028 'ftmp' 'felem':'limb [9]'
|   |     `-IntegerLiteral 0x22150a319e0 <col:21> 'int' 0
|   |-CompoundAssignOperator 0x22150a31b40 <line:855:5, col:22> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x22150a31a88 <col:5> 'limb':'int' lvalue Var 0x22150a300b8 'is_zero' 'limb':'int'
|   | `-ImplicitCastExpr 0x22150a31b28 <col:16, col:22> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x22150a31b08 <col:16, col:22> 'limb':'int' lvalue
|   |     |-ImplicitCastExpr 0x22150a31af0 <col:16> 'limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x22150a31aa8 <col:16> 'felem':'limb [9]' lvalue Var 0x22150a30028 'ftmp' 'felem':'limb [9]'
|   |     `-IntegerLiteral 0x22150a31ac8 <col:21> 'int' 1
|   |-CompoundAssignOperator 0x22150a31c28 <line:856:5, col:22> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x22150a31b70 <col:5> 'limb':'int' lvalue Var 0x22150a300b8 'is_zero' 'limb':'int'
|   | `-ImplicitCastExpr 0x22150a31c10 <col:16, col:22> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x22150a31bf0 <col:16, col:22> 'limb':'int' lvalue
|   |     |-ImplicitCastExpr 0x22150a31bd8 <col:16> 'limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x22150a31b90 <col:16> 'felem':'limb [9]' lvalue Var 0x22150a30028 'ftmp' 'felem':'limb [9]'
|   |     `-IntegerLiteral 0x22150a31bb0 <col:21> 'int' 2
|   |-CompoundAssignOperator 0x22150a31d10 <line:857:5, col:22> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x22150a31c58 <col:5> 'limb':'int' lvalue Var 0x22150a300b8 'is_zero' 'limb':'int'
|   | `-ImplicitCastExpr 0x22150a31cf8 <col:16, col:22> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x22150a31cd8 <col:16, col:22> 'limb':'int' lvalue
|   |     |-ImplicitCastExpr 0x22150a31cc0 <col:16> 'limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x22150a31c78 <col:16> 'felem':'limb [9]' lvalue Var 0x22150a30028 'ftmp' 'felem':'limb [9]'
|   |     `-IntegerLiteral 0x22150a31c98 <col:21> 'int' 3
|   |-CompoundAssignOperator 0x22150a31df8 <line:858:5, col:22> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x22150a31d40 <col:5> 'limb':'int' lvalue Var 0x22150a300b8 'is_zero' 'limb':'int'
|   | `-ImplicitCastExpr 0x22150a31de0 <col:16, col:22> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x22150a31dc0 <col:16, col:22> 'limb':'int' lvalue
|   |     |-ImplicitCastExpr 0x22150a31da8 <col:16> 'limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x22150a31d60 <col:16> 'felem':'limb [9]' lvalue Var 0x22150a30028 'ftmp' 'felem':'limb [9]'
|   |     `-IntegerLiteral 0x22150a31d80 <col:21> 'int' 4
|   |-CompoundAssignOperator 0x22150a31ee0 <line:859:5, col:22> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x22150a31e28 <col:5> 'limb':'int' lvalue Var 0x22150a300b8 'is_zero' 'limb':'int'
|   | `-ImplicitCastExpr 0x22150a31ec8 <col:16, col:22> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x22150a31ea8 <col:16, col:22> 'limb':'int' lvalue
|   |     |-ImplicitCastExpr 0x22150a31e90 <col:16> 'limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x22150a31e48 <col:16> 'felem':'limb [9]' lvalue Var 0x22150a30028 'ftmp' 'felem':'limb [9]'
|   |     `-IntegerLiteral 0x22150a31e68 <col:21> 'int' 5
|   |-CompoundAssignOperator 0x22150a31fc8 <line:860:5, col:22> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x22150a31f10 <col:5> 'limb':'int' lvalue Var 0x22150a300b8 'is_zero' 'limb':'int'
|   | `-ImplicitCastExpr 0x22150a31fb0 <col:16, col:22> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x22150a31f90 <col:16, col:22> 'limb':'int' lvalue
|   |     |-ImplicitCastExpr 0x22150a31f78 <col:16> 'limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x22150a31f30 <col:16> 'felem':'limb [9]' lvalue Var 0x22150a30028 'ftmp' 'felem':'limb [9]'
|   |     `-IntegerLiteral 0x22150a31f50 <col:21> 'int' 6
|   |-CompoundAssignOperator 0x22150a320b0 <line:861:5, col:22> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x22150a31ff8 <col:5> 'limb':'int' lvalue Var 0x22150a300b8 'is_zero' 'limb':'int'
|   | `-ImplicitCastExpr 0x22150a32098 <col:16, col:22> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x22150a32078 <col:16, col:22> 'limb':'int' lvalue
|   |     |-ImplicitCastExpr 0x22150a32060 <col:16> 'limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x22150a32018 <col:16> 'felem':'limb [9]' lvalue Var 0x22150a30028 'ftmp' 'felem':'limb [9]'
|   |     `-IntegerLiteral 0x22150a32038 <col:21> 'int' 7
|   |-CompoundAssignOperator 0x22150a32198 <line:862:5, col:22> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x22150a320e0 <col:5> 'limb':'int' lvalue Var 0x22150a300b8 'is_zero' 'limb':'int'
|   | `-ImplicitCastExpr 0x22150a32180 <col:16, col:22> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x22150a32160 <col:16, col:22> 'limb':'int' lvalue
|   |     |-ImplicitCastExpr 0x22150a32148 <col:16> 'limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x22150a32100 <col:16> 'felem':'limb [9]' lvalue Var 0x22150a30028 'ftmp' 'felem':'limb [9]'
|   |     `-IntegerLiteral 0x22150a32120 <col:21> 'int' 8
|   |-UnaryOperator 0x22150a321e8 <line:864:5, col:12> 'limb':'int' postfix '--'
|   | `-DeclRefExpr 0x22150a321c8 <col:5> 'limb':'int' lvalue Var 0x22150a300b8 'is_zero' 'limb':'int'
|   |-BinaryOperator 0x22150a32308 <line:869:5, col:33> 'limb':'int' '='
|   | |-DeclRefExpr 0x22150a32200 <col:5> 'limb':'int' lvalue Var 0x22150a300b8 'is_zero' 'limb':'int'
|   | `-BinaryOperator 0x22150a322e8 <col:15, col:33> 'int' '-'
|   |   |-IntegerLiteral 0x22150a32220 <col:15> 'int' 0
|   |   `-ParenExpr 0x22150a322c8 <col:19, col:33> 'limb':'int'
|   |     `-BinaryOperator 0x22150a322a8 <col:20, col:31> 'limb':'int' '>>'
|   |       |-ImplicitCastExpr 0x22150a32290 <col:20> 'limb':'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x22150a32248 <col:20> 'limb':'int' lvalue Var 0x22150a300b8 'is_zero' 'limb':'int'
|   |       `-IntegerLiteral 0x22150a32268 <col:31> 'int' 63
|   |-BinaryOperator 0x22150a324b0 <line:871:5, col:30> 'limb':'int' '='
|   | |-DeclRefExpr 0x22150a32328 <col:5> 'limb':'int' lvalue Var 0x22150a30130 'is_p' 'limb':'int'
|   | `-BinaryOperator 0x22150a32490 <col:12, col:30> 'int' '^'
|   |   |-ImplicitCastExpr 0x22150a32460 <col:12, col:18> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x22150a323c0 <col:12, col:18> 'limb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x22150a323a8 <col:12> 'limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x22150a32360 <col:12> 'felem':'limb [9]' lvalue Var 0x22150a30028 'ftmp' 'felem':'limb [9]'
|   |   |   `-IntegerLiteral 0x22150a32380 <col:17> 'int' 0
|   |   `-ImplicitCastExpr 0x22150a32478 <col:22, col:30> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x22150a32440 <col:22, col:30> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x22150a32428 <col:22> 'const limb *' <ArrayToPointerDecay>
|   |       | `-DeclRefExpr 0x22150a323e0 <col:22> 'const felem':'limb const[9]' lvalue Var 0x22150a2fa88 'kPrime' 'const felem':'limb const[9]'
|   |       `-IntegerLiteral 0x22150a32400 <col:29> 'int' 0
|   |-CompoundAssignOperator 0x22150a32688 <line:872:5, col:31> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x22150a32518 <col:5> 'limb':'int' lvalue Var 0x22150a30130 'is_p' 'limb':'int'
|   | `-BinaryOperator 0x22150a32668 <col:13, col:31> 'int' '^'
|   |   |-ImplicitCastExpr 0x22150a32638 <col:13, col:19> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x22150a32598 <col:13, col:19> 'limb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x22150a32580 <col:13> 'limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x22150a32538 <col:13> 'felem':'limb [9]' lvalue Var 0x22150a30028 'ftmp' 'felem':'limb [9]'
|   |   |   `-IntegerLiteral 0x22150a32558 <col:18> 'int' 1
|   |   `-ImplicitCastExpr 0x22150a32650 <col:23, col:31> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x22150a32618 <col:23, col:31> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x22150a32600 <col:23> 'const limb *' <ArrayToPointerDecay>
|   |       | `-DeclRefExpr 0x22150a325b8 <col:23> 'const felem':'limb const[9]' lvalue Var 0x22150a2fa88 'kPrime' 'const felem':'limb const[9]'
|   |       `-IntegerLiteral 0x22150a325d8 <col:30> 'int' 1
|   |-CompoundAssignOperator 0x22150a32828 <line:873:5, col:31> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x22150a326b8 <col:5> 'limb':'int' lvalue Var 0x22150a30130 'is_p' 'limb':'int'
|   | `-BinaryOperator 0x22150a32808 <col:13, col:31> 'int' '^'
|   |   |-ImplicitCastExpr 0x22150a327d8 <col:13, col:19> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x22150a32738 <col:13, col:19> 'limb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x22150a32720 <col:13> 'limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x22150a326d8 <col:13> 'felem':'limb [9]' lvalue Var 0x22150a30028 'ftmp' 'felem':'limb [9]'
|   |   |   `-IntegerLiteral 0x22150a326f8 <col:18> 'int' 2
|   |   `-ImplicitCastExpr 0x22150a327f0 <col:23, col:31> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x22150a327b8 <col:23, col:31> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x22150a327a0 <col:23> 'const limb *' <ArrayToPointerDecay>
|   |       | `-DeclRefExpr 0x22150a32758 <col:23> 'const felem':'limb const[9]' lvalue Var 0x22150a2fa88 'kPrime' 'const felem':'limb const[9]'
|   |       `-IntegerLiteral 0x22150a32778 <col:30> 'int' 2
|   |-CompoundAssignOperator 0x22150a329c8 <line:874:5, col:31> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x22150a32858 <col:5> 'limb':'int' lvalue Var 0x22150a30130 'is_p' 'limb':'int'
|   | `-BinaryOperator 0x22150a329a8 <col:13, col:31> 'int' '^'
|   |   |-ImplicitCastExpr 0x22150a32978 <col:13, col:19> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x22150a328d8 <col:13, col:19> 'limb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x22150a328c0 <col:13> 'limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x22150a32878 <col:13> 'felem':'limb [9]' lvalue Var 0x22150a30028 'ftmp' 'felem':'limb [9]'
|   |   |   `-IntegerLiteral 0x22150a32898 <col:18> 'int' 3
|   |   `-ImplicitCastExpr 0x22150a32990 <col:23, col:31> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x22150a32958 <col:23, col:31> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x22150a32940 <col:23> 'const limb *' <ArrayToPointerDecay>
|   |       | `-DeclRefExpr 0x22150a328f8 <col:23> 'const felem':'limb const[9]' lvalue Var 0x22150a2fa88 'kPrime' 'const felem':'limb const[9]'
|   |       `-IntegerLiteral 0x22150a32918 <col:30> 'int' 3
|   |-CompoundAssignOperator 0x22150a32b68 <line:875:5, col:31> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x22150a329f8 <col:5> 'limb':'int' lvalue Var 0x22150a30130 'is_p' 'limb':'int'
|   | `-BinaryOperator 0x22150a32b48 <col:13, col:31> 'int' '^'
|   |   |-ImplicitCastExpr 0x22150a32b18 <col:13, col:19> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x22150a32a78 <col:13, col:19> 'limb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x22150a32a60 <col:13> 'limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x22150a32a18 <col:13> 'felem':'limb [9]' lvalue Var 0x22150a30028 'ftmp' 'felem':'limb [9]'
|   |   |   `-IntegerLiteral 0x22150a32a38 <col:18> 'int' 4
|   |   `-ImplicitCastExpr 0x22150a32b30 <col:23, col:31> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x22150a32af8 <col:23, col:31> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x22150a32ae0 <col:23> 'const limb *' <ArrayToPointerDecay>
|   |       | `-DeclRefExpr 0x22150a32a98 <col:23> 'const felem':'limb const[9]' lvalue Var 0x22150a2fa88 'kPrime' 'const felem':'limb const[9]'
|   |       `-IntegerLiteral 0x22150a32ab8 <col:30> 'int' 4
|   |-CompoundAssignOperator 0x22150a32d08 <line:876:5, col:31> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x22150a32b98 <col:5> 'limb':'int' lvalue Var 0x22150a30130 'is_p' 'limb':'int'
|   | `-BinaryOperator 0x22150a32ce8 <col:13, col:31> 'int' '^'
|   |   |-ImplicitCastExpr 0x22150a32cb8 <col:13, col:19> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x22150a32c18 <col:13, col:19> 'limb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x22150a32c00 <col:13> 'limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x22150a32bb8 <col:13> 'felem':'limb [9]' lvalue Var 0x22150a30028 'ftmp' 'felem':'limb [9]'
|   |   |   `-IntegerLiteral 0x22150a32bd8 <col:18> 'int' 5
|   |   `-ImplicitCastExpr 0x22150a32cd0 <col:23, col:31> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x22150a32c98 <col:23, col:31> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x22150a32c80 <col:23> 'const limb *' <ArrayToPointerDecay>
|   |       | `-DeclRefExpr 0x22150a32c38 <col:23> 'const felem':'limb const[9]' lvalue Var 0x22150a2fa88 'kPrime' 'const felem':'limb const[9]'
|   |       `-IntegerLiteral 0x22150a32c58 <col:30> 'int' 5
|   |-CompoundAssignOperator 0x22150a32ea8 <line:877:5, col:31> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x22150a32d38 <col:5> 'limb':'int' lvalue Var 0x22150a30130 'is_p' 'limb':'int'
|   | `-BinaryOperator 0x22150a32e88 <col:13, col:31> 'int' '^'
|   |   |-ImplicitCastExpr 0x22150a32e58 <col:13, col:19> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x22150a32db8 <col:13, col:19> 'limb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x22150a32da0 <col:13> 'limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x22150a32d58 <col:13> 'felem':'limb [9]' lvalue Var 0x22150a30028 'ftmp' 'felem':'limb [9]'
|   |   |   `-IntegerLiteral 0x22150a32d78 <col:18> 'int' 6
|   |   `-ImplicitCastExpr 0x22150a32e70 <col:23, col:31> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x22150a32e38 <col:23, col:31> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x22150a32e20 <col:23> 'const limb *' <ArrayToPointerDecay>
|   |       | `-DeclRefExpr 0x22150a32dd8 <col:23> 'const felem':'limb const[9]' lvalue Var 0x22150a2fa88 'kPrime' 'const felem':'limb const[9]'
|   |       `-IntegerLiteral 0x22150a32df8 <col:30> 'int' 6
|   |-CompoundAssignOperator 0x22150a33060 <line:878:5, col:31> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x22150a32ed8 <col:5> 'limb':'int' lvalue Var 0x22150a30130 'is_p' 'limb':'int'
|   | `-BinaryOperator 0x22150a33040 <col:13, col:31> 'int' '^'
|   |   |-ImplicitCastExpr 0x22150a33010 <col:13, col:19> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x22150a32f58 <col:13, col:19> 'limb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x22150a32f40 <col:13> 'limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x22150a32ef8 <col:13> 'felem':'limb [9]' lvalue Var 0x22150a30028 'ftmp' 'felem':'limb [9]'
|   |   |   `-IntegerLiteral 0x22150a32f18 <col:18> 'int' 7
|   |   `-ImplicitCastExpr 0x22150a33028 <col:23, col:31> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x22150a32ff0 <col:23, col:31> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x22150a32fc0 <col:23> 'const limb *' <ArrayToPointerDecay>
|   |       | `-DeclRefExpr 0x22150a32f78 <col:23> 'const felem':'limb const[9]' lvalue Var 0x22150a2fa88 'kPrime' 'const felem':'limb const[9]'
|   |       `-IntegerLiteral 0x22150a32f98 <col:30> 'int' 7
|   |-CompoundAssignOperator 0x22150a33200 <line:879:5, col:31> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x22150a33090 <col:5> 'limb':'int' lvalue Var 0x22150a30130 'is_p' 'limb':'int'
|   | `-BinaryOperator 0x22150a331e0 <col:13, col:31> 'int' '^'
|   |   |-ImplicitCastExpr 0x22150a331b0 <col:13, col:19> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x22150a33110 <col:13, col:19> 'limb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x22150a330f8 <col:13> 'limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x22150a330b0 <col:13> 'felem':'limb [9]' lvalue Var 0x22150a30028 'ftmp' 'felem':'limb [9]'
|   |   |   `-IntegerLiteral 0x22150a330d0 <col:18> 'int' 8
|   |   `-ImplicitCastExpr 0x22150a331c8 <col:23, col:31> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x22150a33190 <col:23, col:31> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x22150a33178 <col:23> 'const limb *' <ArrayToPointerDecay>
|   |       | `-DeclRefExpr 0x22150a33130 <col:23> 'const felem':'limb const[9]' lvalue Var 0x22150a2fa88 'kPrime' 'const felem':'limb const[9]'
|   |       `-IntegerLiteral 0x22150a33150 <col:30> 'int' 8
|   |-UnaryOperator 0x22150a33250 <line:881:5, col:9> 'limb':'int' postfix '--'
|   | `-DeclRefExpr 0x22150a33230 <col:5> 'limb':'int' lvalue Var 0x22150a30130 'is_p' 'limb':'int'
|   |-BinaryOperator 0x22150a33370 <line:882:5, col:27> 'limb':'int' '='
|   | |-DeclRefExpr 0x22150a33268 <col:5> 'limb':'int' lvalue Var 0x22150a30130 'is_p' 'limb':'int'
|   | `-BinaryOperator 0x22150a33350 <col:12, col:27> 'int' '-'
|   |   |-IntegerLiteral 0x22150a33288 <col:12> 'int' 0
|   |   `-ParenExpr 0x22150a33330 <col:16, col:27> 'limb':'int'
|   |     `-BinaryOperator 0x22150a33310 <col:17, col:25> 'limb':'int' '>>'
|   |       |-ImplicitCastExpr 0x22150a332f8 <col:17> 'limb':'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x22150a332b0 <col:17> 'limb':'int' lvalue Var 0x22150a30130 'is_p' 'limb':'int'
|   |       `-IntegerLiteral 0x22150a332d0 <col:25> 'int' 63
|   |-CompoundAssignOperator 0x22150a333e8 <line:884:5, col:16> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x22150a33390 <col:5> 'limb':'int' lvalue Var 0x22150a300b8 'is_zero' 'limb':'int'
|   | `-ImplicitCastExpr 0x22150a333d0 <col:16> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x22150a333b0 <col:16> 'limb':'int' lvalue Var 0x22150a30130 'is_p' 'limb':'int'
|   `-ReturnStmt 0x22150a33450 <line:885:5, col:12>
|     `-ImplicitCastExpr 0x22150a33438 <col:12> 'limb':'int' <LValueToRValue>
|       `-DeclRefExpr 0x22150a33418 <col:12> 'limb':'int' lvalue Var 0x22150a300b8 'is_zero' 'limb':'int'
|-FunctionDecl 0x22150a336a8 <line:888:1, line:891:1> line:888:12 used felem_is_zero_int 'int (const void *)' static
| |-ParmVarDecl 0x22150a335f8 <col:30, col:42> col:42 used in 'const void *'
| `-CompoundStmt 0x22150a33978 <line:889:1, line:891:1>
|   `-ReturnStmt 0x22150a33968 <line:890:5, col:48>
|     `-CStyleCastExpr 0x22150a33940 <col:12, col:48> 'int' <NoOp>
|       `-ParenExpr 0x22150a33920 <col:17, col:48> 'int'
|         `-BinaryOperator 0x22150a338c8 <col:18, col:47> 'int' '&'
|           |-CallExpr 0x22150a337f0 <col:18, col:34> 'limb':'int'
|           | |-ImplicitCastExpr 0x22150a337d8 <col:18> 'limb (*)(const limb *)' <FunctionToPointerDecay>
|           | | `-DeclRefExpr 0x22150a33768 <col:18> 'limb (const limb *)' Function 0x22150a2ff58 'felem_is_zero' 'limb (const limb *)'
|           | `-ImplicitCastExpr 0x22150a33830 <col:32> 'const limb *':'const limb *' <BitCast>
|           |   `-ImplicitCastExpr 0x22150a33818 <col:32> 'const void *' <LValueToRValue>
|           |     `-DeclRefExpr 0x22150a33788 <col:32> 'const void *' lvalue ParmVar 0x22150a335f8 'in' 'const void *'
|           `-ParenExpr 0x22150a338a8 <col:38, col:47> 'limb':'int'
|             `-CStyleCastExpr 0x22150a33880 <col:39, col:46> 'limb':'int' <NoOp>
|               `-IntegerLiteral 0x22150a33848 <col:46> 'int' 1
|-FunctionDecl 0x22150a33ae0 <line:898:1, line:1025:1> line:898:13 used felem_contract 'void (limb *, const limb *)' static
| |-ParmVarDecl 0x22150a339a0 <col:28, col:34> col:34 used out 'limb *':'limb *'
| |-ParmVarDecl 0x22150a33a18 <col:39, col:51> col:51 used in 'const limb *':'const limb *'
| `-CompoundStmt 0x22150a2b5e8 <line:899:1, line:1025:1>
|   |-DeclStmt 0x22150a33d30 <line:900:5, col:32>
|   | |-VarDecl 0x22150a33bb8 <col:5, col:10> col:10 used is_p 'limb':'int'
|   | |-VarDecl 0x22150a33c30 <col:5, col:16> col:16 used is_greater 'limb':'int'
|   | `-VarDecl 0x22150a33ca8 <col:5, col:28> col:28 used sign 'limb':'int'
|   |-DeclStmt 0x22150a33e88 <line:901:5, col:47>
|   | `-VarDecl 0x22150a33d58 <col:5, col:45> col:23 used two58 'const limb':'const int' static cinit
|   |   `-BinaryOperator 0x22150a33e68 <col:31, col:45> 'limb':'int' '<<'
|   |     |-ParenExpr 0x22150a33e20 <col:31, col:40> 'limb':'int'
|   |     | `-CStyleCastExpr 0x22150a33df8 <col:32, col:39> 'limb':'int' <NoOp>
|   |     |   `-IntegerLiteral 0x22150a33dc0 <col:39> 'int' 1
|   |     `-IntegerLiteral 0x22150a33e40 <col:45> 'int' 58
|   |-CallExpr 0x22150a33f18 <line:903:5, col:25> 'void'
|   | |-ImplicitCastExpr 0x22150a33f00 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a33ea0 <col:5> 'void (limb *, const limb *)' Function 0x2215095b168 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x22150a33f48 <col:18> 'limb *':'limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x22150a33ec0 <col:18> 'limb *':'limb *' lvalue ParmVar 0x22150a339a0 'out' 'limb *':'limb *'
|   | `-ImplicitCastExpr 0x22150a33f60 <col:23> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x22150a33ee0 <col:23> 'const limb *':'const limb *' lvalue ParmVar 0x22150a33a18 'in' 'const limb *':'const limb *'
|   |-CompoundAssignOperator 0x22150a340d8 <line:905:5, col:25> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x22150a33fd8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x22150a33fc0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x22150a33f78 <col:5> 'limb *':'limb *' lvalue ParmVar 0x22150a339a0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x22150a33f98 <col:9> 'int' 0
|   | `-BinaryOperator 0x22150a340b8 <col:15, col:25> 'limb':'int' '>>'
|   |   |-ImplicitCastExpr 0x22150a340a0 <col:15, col:20> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x22150a34058 <col:15, col:20> 'limb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x22150a34040 <col:15> 'limb *':'limb *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x22150a33ff8 <col:15> 'limb *':'limb *' lvalue ParmVar 0x22150a339a0 'out' 'limb *':'limb *'
|   |   |   `-IntegerLiteral 0x22150a34018 <col:19> 'int' 8
|   |   `-IntegerLiteral 0x22150a34078 <col:25> 'int' 57
|   |-CompoundAssignOperator 0x22150a341c0 <line:906:5, col:15> 'limb':'int' '&=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x22150a34168 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x22150a34150 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x22150a34108 <col:5> 'limb *':'limb *' lvalue ParmVar 0x22150a339a0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x22150a34128 <col:9> 'int' 8
|   | `-ImplicitCastExpr 0x22150a341a8 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x22150a34188 <col:15> 'const limb':'const int' lvalue Var 0x221509552f0 'bottom57bits' 'const limb':'const int'
|   |-CompoundAssignOperator 0x22150a34350 <line:908:5, col:25> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x22150a34250 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x22150a34238 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x22150a341f0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x22150a339a0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x22150a34210 <col:9> 'int' 1
|   | `-BinaryOperator 0x22150a34330 <col:15, col:25> 'limb':'int' '>>'
|   |   |-ImplicitCastExpr 0x22150a34318 <col:15, col:20> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x22150a342d0 <col:15, col:20> 'limb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x22150a342b8 <col:15> 'limb *':'limb *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x22150a34270 <col:15> 'limb *':'limb *' lvalue ParmVar 0x22150a339a0 'out' 'limb *':'limb *'
|   |   |   `-IntegerLiteral 0x22150a34290 <col:19> 'int' 0
|   |   `-IntegerLiteral 0x22150a342f0 <col:25> 'int' 58
|   |-CompoundAssignOperator 0x22150a34438 <line:909:5, col:15> 'limb':'int' '&=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x22150a343e0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x22150a343c8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x22150a34380 <col:5> 'limb *':'limb *' lvalue ParmVar 0x22150a339a0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x22150a343a0 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x22150a34420 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x22150a34400 <col:15> 'const limb':'const int' lvalue Var 0x221509553c0 'bottom58bits' 'const limb':'const int'
|   |-CompoundAssignOperator 0x22150a345c8 <line:910:5, col:25> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x22150a344c8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x22150a344b0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x22150a34468 <col:5> 'limb *':'limb *' lvalue ParmVar 0x22150a339a0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x22150a34488 <col:9> 'int' 2
|   | `-BinaryOperator 0x22150a345a8 <col:15, col:25> 'limb':'int' '>>'
|   |   |-ImplicitCastExpr 0x22150a34590 <col:15, col:20> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x22150a34548 <col:15, col:20> 'limb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x22150a34530 <col:15> 'limb *':'limb *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x22150a344e8 <col:15> 'limb *':'limb *' lvalue ParmVar 0x22150a339a0 'out' 'limb *':'limb *'
|   |   |   `-IntegerLiteral 0x22150a34508 <col:19> 'int' 1
|   |   `-IntegerLiteral 0x22150a34568 <col:25> 'int' 58
|   |-CompoundAssignOperator 0x22150a346b0 <line:911:5, col:15> 'limb':'int' '&=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x22150a34658 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x22150a34640 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x22150a345f8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x22150a339a0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x22150a34618 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x22150a34698 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x22150a34678 <col:15> 'const limb':'const int' lvalue Var 0x221509553c0 'bottom58bits' 'const limb':'const int'
|   |-CompoundAssignOperator 0x22150a34840 <line:912:5, col:25> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x22150a34740 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x22150a34728 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x22150a346e0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x22150a339a0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x22150a34700 <col:9> 'int' 3
|   | `-BinaryOperator 0x22150a34820 <col:15, col:25> 'limb':'int' '>>'
|   |   |-ImplicitCastExpr 0x22150a34808 <col:15, col:20> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x22150a347c0 <col:15, col:20> 'limb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x22150a347a8 <col:15> 'limb *':'limb *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x22150a34760 <col:15> 'limb *':'limb *' lvalue ParmVar 0x22150a339a0 'out' 'limb *':'limb *'
|   |   |   `-IntegerLiteral 0x22150a34780 <col:19> 'int' 2
|   |   `-IntegerLiteral 0x22150a347e0 <col:25> 'int' 58
|   |-CompoundAssignOperator 0x22150a34928 <line:913:5, col:15> 'limb':'int' '&=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x22150a348d0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x22150a348b8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x22150a34870 <col:5> 'limb *':'limb *' lvalue ParmVar 0x22150a339a0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x22150a34890 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x22150a34910 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x22150a348f0 <col:15> 'const limb':'const int' lvalue Var 0x221509553c0 'bottom58bits' 'const limb':'const int'
|   |-CompoundAssignOperator 0x22150a34ab8 <line:914:5, col:25> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x22150a349b8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x22150a349a0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x22150a34958 <col:5> 'limb *':'limb *' lvalue ParmVar 0x22150a339a0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x22150a34978 <col:9> 'int' 4
|   | `-BinaryOperator 0x22150a34a98 <col:15, col:25> 'limb':'int' '>>'
|   |   |-ImplicitCastExpr 0x22150a34a80 <col:15, col:20> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x22150a34a38 <col:15, col:20> 'limb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x22150a34a20 <col:15> 'limb *':'limb *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x22150a349d8 <col:15> 'limb *':'limb *' lvalue ParmVar 0x22150a339a0 'out' 'limb *':'limb *'
|   |   |   `-IntegerLiteral 0x22150a349f8 <col:19> 'int' 3
|   |   `-IntegerLiteral 0x22150a34a58 <col:25> 'int' 58
|   |-CompoundAssignOperator 0x22150a34ba0 <line:915:5, col:15> 'limb':'int' '&=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x22150a34b48 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x22150a34b30 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x22150a34ae8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x22150a339a0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x22150a34b08 <col:9> 'int' 3
|   | `-ImplicitCastExpr 0x22150a34b88 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x22150a34b68 <col:15> 'const limb':'const int' lvalue Var 0x221509553c0 'bottom58bits' 'const limb':'const int'
|   |-CompoundAssignOperator 0x22150a34d30 <line:916:5, col:25> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x22150a34c30 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x22150a34c18 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x22150a34bd0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x22150a339a0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x22150a34bf0 <col:9> 'int' 5
|   | `-BinaryOperator 0x22150a34d10 <col:15, col:25> 'limb':'int' '>>'
|   |   |-ImplicitCastExpr 0x22150a34cf8 <col:15, col:20> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x22150a34cb0 <col:15, col:20> 'limb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x22150a34c98 <col:15> 'limb *':'limb *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x22150a34c50 <col:15> 'limb *':'limb *' lvalue ParmVar 0x22150a339a0 'out' 'limb *':'limb *'
|   |   |   `-IntegerLiteral 0x22150a34c70 <col:19> 'int' 4
|   |   `-IntegerLiteral 0x22150a34cd0 <col:25> 'int' 58
|   |-CompoundAssignOperator 0x22150a34e18 <line:917:5, col:15> 'limb':'int' '&=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x22150a34dc0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x22150a34da8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x22150a34d60 <col:5> 'limb *':'limb *' lvalue ParmVar 0x22150a339a0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x22150a34d80 <col:9> 'int' 4
|   | `-ImplicitCastExpr 0x22150a34e00 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x22150a34de0 <col:15> 'const limb':'const int' lvalue Var 0x221509553c0 'bottom58bits' 'const limb':'const int'
|   |-CompoundAssignOperator 0x22150a34fa8 <line:918:5, col:25> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x22150a34ea8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x22150a34e90 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x22150a34e48 <col:5> 'limb *':'limb *' lvalue ParmVar 0x22150a339a0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x22150a34e68 <col:9> 'int' 6
|   | `-BinaryOperator 0x22150a34f88 <col:15, col:25> 'limb':'int' '>>'
|   |   |-ImplicitCastExpr 0x22150a34f70 <col:15, col:20> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x22150a34f28 <col:15, col:20> 'limb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x22150a34f10 <col:15> 'limb *':'limb *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x22150a34ec8 <col:15> 'limb *':'limb *' lvalue ParmVar 0x22150a339a0 'out' 'limb *':'limb *'
|   |   |   `-IntegerLiteral 0x22150a34ee8 <col:19> 'int' 5
|   |   `-IntegerLiteral 0x22150a34f48 <col:25> 'int' 58
|   |-CompoundAssignOperator 0x22150a350b8 <line:919:5, col:15> 'limb':'int' '&=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x22150a35060 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x22150a35048 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x22150a35000 <col:5> 'limb *':'limb *' lvalue ParmVar 0x22150a339a0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x22150a35020 <col:9> 'int' 5
|   | `-ImplicitCastExpr 0x22150a350a0 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x22150a35080 <col:15> 'const limb':'const int' lvalue Var 0x221509553c0 'bottom58bits' 'const limb':'const int'
|   |-CompoundAssignOperator 0x22150a35248 <line:920:5, col:25> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x22150a35148 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x22150a35130 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x22150a350e8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x22150a339a0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x22150a35108 <col:9> 'int' 7
|   | `-BinaryOperator 0x22150a35228 <col:15, col:25> 'limb':'int' '>>'
|   |   |-ImplicitCastExpr 0x22150a35210 <col:15, col:20> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x22150a351c8 <col:15, col:20> 'limb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x22150a351b0 <col:15> 'limb *':'limb *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x22150a35168 <col:15> 'limb *':'limb *' lvalue ParmVar 0x22150a339a0 'out' 'limb *':'limb *'
|   |   |   `-IntegerLiteral 0x22150a35188 <col:19> 'int' 6
|   |   `-IntegerLiteral 0x22150a351e8 <col:25> 'int' 58
|   |-CompoundAssignOperator 0x22150a35330 <line:921:5, col:15> 'limb':'int' '&=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x22150a352d8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x22150a352c0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x22150a35278 <col:5> 'limb *':'limb *' lvalue ParmVar 0x22150a339a0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x22150a35298 <col:9> 'int' 6
|   | `-ImplicitCastExpr 0x22150a35318 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x22150a352f8 <col:15> 'const limb':'const int' lvalue Var 0x221509553c0 'bottom58bits' 'const limb':'const int'
|   |-CompoundAssignOperator 0x22150a354c0 <line:922:5, col:25> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x22150a353c0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x22150a353a8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x22150a35360 <col:5> 'limb *':'limb *' lvalue ParmVar 0x22150a339a0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x22150a35380 <col:9> 'int' 8
|   | `-BinaryOperator 0x22150a354a0 <col:15, col:25> 'limb':'int' '>>'
|   |   |-ImplicitCastExpr 0x22150a35488 <col:15, col:20> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x22150a35440 <col:15, col:20> 'limb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x22150a35428 <col:15> 'limb *':'limb *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x22150a353e0 <col:15> 'limb *':'limb *' lvalue ParmVar 0x22150a339a0 'out' 'limb *':'limb *'
|   |   |   `-IntegerLiteral 0x22150a35400 <col:19> 'int' 7
|   |   `-IntegerLiteral 0x22150a35460 <col:25> 'int' 58
|   |-CompoundAssignOperator 0x22150a355a8 <line:923:5, col:15> 'limb':'int' '&=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x22150a35550 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x22150a35538 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x22150a354f0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x22150a339a0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x22150a35510 <col:9> 'int' 7
|   | `-ImplicitCastExpr 0x22150a35590 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x22150a35570 <col:15> 'const limb':'const int' lvalue Var 0x221509553c0 'bottom58bits' 'const limb':'const int'
|   |-BinaryOperator 0x22150a35760 <line:936:5, col:29> 'limb':'int' '='
|   | |-DeclRefExpr 0x22150a355d8 <col:5> 'limb':'int' lvalue Var 0x22150a33bb8 'is_p' 'limb':'int'
|   | `-BinaryOperator 0x22150a35740 <col:12, col:29> 'int' '^'
|   |   |-ImplicitCastExpr 0x22150a35710 <col:12, col:17> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x22150a35670 <col:12, col:17> 'limb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x22150a35658 <col:12> 'limb *':'limb *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x22150a35610 <col:12> 'limb *':'limb *' lvalue ParmVar 0x22150a339a0 'out' 'limb *':'limb *'
|   |   |   `-IntegerLiteral 0x22150a35630 <col:16> 'int' 0
|   |   `-ImplicitCastExpr 0x22150a35728 <col:21, col:29> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x22150a356f0 <col:21, col:29> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x22150a356d8 <col:21> 'const limb *' <ArrayToPointerDecay>
|   |       | `-DeclRefExpr 0x22150a35690 <col:21> 'const felem':'limb const[9]' lvalue Var 0x22150a2fa88 'kPrime' 'const felem':'limb const[9]'
|   |       `-IntegerLiteral 0x22150a356b0 <col:28> 'int' 0
|   |-CompoundAssignOperator 0x22150a358f0 <line:937:5, col:30> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x22150a35780 <col:5> 'limb':'int' lvalue Var 0x22150a33bb8 'is_p' 'limb':'int'
|   | `-BinaryOperator 0x22150a358d0 <col:13, col:30> 'int' '^'
|   |   |-ImplicitCastExpr 0x22150a358a0 <col:13, col:18> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x22150a35800 <col:13, col:18> 'limb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x22150a357e8 <col:13> 'limb *':'limb *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x22150a357a0 <col:13> 'limb *':'limb *' lvalue ParmVar 0x22150a339a0 'out' 'limb *':'limb *'
|   |   |   `-IntegerLiteral 0x22150a357c0 <col:17> 'int' 1
|   |   `-ImplicitCastExpr 0x22150a358b8 <col:22, col:30> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x22150a35880 <col:22, col:30> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x22150a35868 <col:22> 'const limb *' <ArrayToPointerDecay>
|   |       | `-DeclRefExpr 0x22150a35820 <col:22> 'const felem':'limb const[9]' lvalue Var 0x22150a2fa88 'kPrime' 'const felem':'limb const[9]'
|   |       `-IntegerLiteral 0x22150a35840 <col:29> 'int' 1
|   |-CompoundAssignOperator 0x22150a35a90 <line:938:5, col:30> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x22150a35920 <col:5> 'limb':'int' lvalue Var 0x22150a33bb8 'is_p' 'limb':'int'
|   | `-BinaryOperator 0x22150a35a70 <col:13, col:30> 'int' '^'
|   |   |-ImplicitCastExpr 0x22150a35a40 <col:13, col:18> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x22150a359a0 <col:13, col:18> 'limb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x22150a35988 <col:13> 'limb *':'limb *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x22150a35940 <col:13> 'limb *':'limb *' lvalue ParmVar 0x22150a339a0 'out' 'limb *':'limb *'
|   |   |   `-IntegerLiteral 0x22150a35960 <col:17> 'int' 2
|   |   `-ImplicitCastExpr 0x22150a35a58 <col:22, col:30> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x22150a35a20 <col:22, col:30> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x22150a35a08 <col:22> 'const limb *' <ArrayToPointerDecay>
|   |       | `-DeclRefExpr 0x22150a359c0 <col:22> 'const felem':'limb const[9]' lvalue Var 0x22150a2fa88 'kPrime' 'const felem':'limb const[9]'
|   |       `-IntegerLiteral 0x22150a359e0 <col:29> 'int' 2
|   |-CompoundAssignOperator 0x22150a35c30 <line:939:5, col:30> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x22150a35ac0 <col:5> 'limb':'int' lvalue Var 0x22150a33bb8 'is_p' 'limb':'int'
|   | `-BinaryOperator 0x22150a35c10 <col:13, col:30> 'int' '^'
|   |   |-ImplicitCastExpr 0x22150a35be0 <col:13, col:18> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x22150a35b40 <col:13, col:18> 'limb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x22150a35b28 <col:13> 'limb *':'limb *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x22150a35ae0 <col:13> 'limb *':'limb *' lvalue ParmVar 0x22150a339a0 'out' 'limb *':'limb *'
|   |   |   `-IntegerLiteral 0x22150a35b00 <col:17> 'int' 3
|   |   `-ImplicitCastExpr 0x22150a35bf8 <col:22, col:30> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x22150a35bc0 <col:22, col:30> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x22150a35ba8 <col:22> 'const limb *' <ArrayToPointerDecay>
|   |       | `-DeclRefExpr 0x22150a35b60 <col:22> 'const felem':'limb const[9]' lvalue Var 0x22150a2fa88 'kPrime' 'const felem':'limb const[9]'
|   |       `-IntegerLiteral 0x22150a35b80 <col:29> 'int' 3
|   |-CompoundAssignOperator 0x22150a35dd0 <line:940:5, col:30> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x22150a35c60 <col:5> 'limb':'int' lvalue Var 0x22150a33bb8 'is_p' 'limb':'int'
|   | `-BinaryOperator 0x22150a35db0 <col:13, col:30> 'int' '^'
|   |   |-ImplicitCastExpr 0x22150a35d80 <col:13, col:18> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x22150a35ce0 <col:13, col:18> 'limb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x22150a35cc8 <col:13> 'limb *':'limb *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x22150a35c80 <col:13> 'limb *':'limb *' lvalue ParmVar 0x22150a339a0 'out' 'limb *':'limb *'
|   |   |   `-IntegerLiteral 0x22150a35ca0 <col:17> 'int' 4
|   |   `-ImplicitCastExpr 0x22150a35d98 <col:22, col:30> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x22150a35d60 <col:22, col:30> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x22150a35d48 <col:22> 'const limb *' <ArrayToPointerDecay>
|   |       | `-DeclRefExpr 0x22150a35d00 <col:22> 'const felem':'limb const[9]' lvalue Var 0x22150a2fa88 'kPrime' 'const felem':'limb const[9]'
|   |       `-IntegerLiteral 0x22150a35d20 <col:29> 'int' 4
|   |-CompoundAssignOperator 0x22150a35f70 <line:941:5, col:30> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x22150a35e00 <col:5> 'limb':'int' lvalue Var 0x22150a33bb8 'is_p' 'limb':'int'
|   | `-BinaryOperator 0x22150a35f50 <col:13, col:30> 'int' '^'
|   |   |-ImplicitCastExpr 0x22150a35f20 <col:13, col:18> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x22150a35e80 <col:13, col:18> 'limb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x22150a35e68 <col:13> 'limb *':'limb *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x22150a35e20 <col:13> 'limb *':'limb *' lvalue ParmVar 0x22150a339a0 'out' 'limb *':'limb *'
|   |   |   `-IntegerLiteral 0x22150a35e40 <col:17> 'int' 5
|   |   `-ImplicitCastExpr 0x22150a35f38 <col:22, col:30> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x22150a35f00 <col:22, col:30> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x22150a35ee8 <col:22> 'const limb *' <ArrayToPointerDecay>
|   |       | `-DeclRefExpr 0x22150a35ea0 <col:22> 'const felem':'limb const[9]' lvalue Var 0x22150a2fa88 'kPrime' 'const felem':'limb const[9]'
|   |       `-IntegerLiteral 0x22150a35ec0 <col:29> 'int' 5
|   |-CompoundAssignOperator 0x22150a36110 <line:942:5, col:30> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x22150a35fa0 <col:5> 'limb':'int' lvalue Var 0x22150a33bb8 'is_p' 'limb':'int'
|   | `-BinaryOperator 0x22150a360f0 <col:13, col:30> 'int' '^'
|   |   |-ImplicitCastExpr 0x22150a360c0 <col:13, col:18> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x22150a36020 <col:13, col:18> 'limb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x22150a36008 <col:13> 'limb *':'limb *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x22150a35fc0 <col:13> 'limb *':'limb *' lvalue ParmVar 0x22150a339a0 'out' 'limb *':'limb *'
|   |   |   `-IntegerLiteral 0x22150a35fe0 <col:17> 'int' 6
|   |   `-ImplicitCastExpr 0x22150a360d8 <col:22, col:30> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x22150a360a0 <col:22, col:30> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x22150a36088 <col:22> 'const limb *' <ArrayToPointerDecay>
|   |       | `-DeclRefExpr 0x22150a36040 <col:22> 'const felem':'limb const[9]' lvalue Var 0x22150a2fa88 'kPrime' 'const felem':'limb const[9]'
|   |       `-IntegerLiteral 0x22150a36060 <col:29> 'int' 6
|   |-CompoundAssignOperator 0x22150a362b0 <line:943:5, col:30> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x22150a36140 <col:5> 'limb':'int' lvalue Var 0x22150a33bb8 'is_p' 'limb':'int'
|   | `-BinaryOperator 0x22150a36290 <col:13, col:30> 'int' '^'
|   |   |-ImplicitCastExpr 0x22150a36260 <col:13, col:18> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x22150a361c0 <col:13, col:18> 'limb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x22150a361a8 <col:13> 'limb *':'limb *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x22150a36160 <col:13> 'limb *':'limb *' lvalue ParmVar 0x22150a339a0 'out' 'limb *':'limb *'
|   |   |   `-IntegerLiteral 0x22150a36180 <col:17> 'int' 7
|   |   `-ImplicitCastExpr 0x22150a36278 <col:22, col:30> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x22150a36240 <col:22, col:30> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x22150a36228 <col:22> 'const limb *' <ArrayToPointerDecay>
|   |       | `-DeclRefExpr 0x22150a361e0 <col:22> 'const felem':'limb const[9]' lvalue Var 0x22150a2fa88 'kPrime' 'const felem':'limb const[9]'
|   |       `-IntegerLiteral 0x22150a36200 <col:29> 'int' 7
|   |-CompoundAssignOperator 0x22150a36450 <line:944:5, col:30> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x22150a362e0 <col:5> 'limb':'int' lvalue Var 0x22150a33bb8 'is_p' 'limb':'int'
|   | `-BinaryOperator 0x22150a36430 <col:13, col:30> 'int' '^'
|   |   |-ImplicitCastExpr 0x22150a36400 <col:13, col:18> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x22150a36360 <col:13, col:18> 'limb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x22150a36348 <col:13> 'limb *':'limb *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x22150a36300 <col:13> 'limb *':'limb *' lvalue ParmVar 0x22150a339a0 'out' 'limb *':'limb *'
|   |   |   `-IntegerLiteral 0x22150a36320 <col:17> 'int' 8
|   |   `-ImplicitCastExpr 0x22150a36418 <col:22, col:30> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x22150a363e0 <col:22, col:30> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x22150a363c8 <col:22> 'const limb *' <ArrayToPointerDecay>
|   |       | `-DeclRefExpr 0x22150a36380 <col:22> 'const felem':'limb const[9]' lvalue Var 0x22150a2fa88 'kPrime' 'const felem':'limb const[9]'
|   |       `-IntegerLiteral 0x22150a363a0 <col:29> 'int' 8
|   |-UnaryOperator 0x22150a364a0 <line:946:5, col:9> 'limb':'int' postfix '--'
|   | `-DeclRefExpr 0x22150a36480 <col:5> 'limb':'int' lvalue Var 0x22150a33bb8 'is_p' 'limb':'int'
|   |-CompoundAssignOperator 0x22150a36558 <line:947:5, col:21> 'limb':'int' '&=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x22150a364b8 <col:5> 'limb':'int' lvalue Var 0x22150a33bb8 'is_p' 'limb':'int'
|   | `-BinaryOperator 0x22150a36538 <col:13, col:21> 'limb':'int' '<<'
|   |   |-ImplicitCastExpr 0x22150a36520 <col:13> 'limb':'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x22150a364d8 <col:13> 'limb':'int' lvalue Var 0x22150a33bb8 'is_p' 'limb':'int'
|   |   `-IntegerLiteral 0x22150a364f8 <col:21> 'int' 32
|   |-CompoundAssignOperator 0x22150a36628 <line:948:5, col:21> 'limb':'int' '&=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x22150a36588 <col:5> 'limb':'int' lvalue Var 0x22150a33bb8 'is_p' 'limb':'int'
|   | `-BinaryOperator 0x22150a36608 <col:13, col:21> 'limb':'int' '<<'
|   |   |-ImplicitCastExpr 0x22150a365f0 <col:13> 'limb':'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x22150a365a8 <col:13> 'limb':'int' lvalue Var 0x22150a33bb8 'is_p' 'limb':'int'
|   |   `-IntegerLiteral 0x22150a365c8 <col:21> 'int' 16
|   |-CompoundAssignOperator 0x22150a366f8 <line:949:5, col:21> 'limb':'int' '&=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x22150a36658 <col:5> 'limb':'int' lvalue Var 0x22150a33bb8 'is_p' 'limb':'int'
|   | `-BinaryOperator 0x22150a366d8 <col:13, col:21> 'limb':'int' '<<'
|   |   |-ImplicitCastExpr 0x22150a366c0 <col:13> 'limb':'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x22150a36678 <col:13> 'limb':'int' lvalue Var 0x22150a33bb8 'is_p' 'limb':'int'
|   |   `-IntegerLiteral 0x22150a36698 <col:21> 'int' 8
|   |-CompoundAssignOperator 0x22150a367c8 <line:950:5, col:21> 'limb':'int' '&=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x22150a36728 <col:5> 'limb':'int' lvalue Var 0x22150a33bb8 'is_p' 'limb':'int'
|   | `-BinaryOperator 0x22150a367a8 <col:13, col:21> 'limb':'int' '<<'
|   |   |-ImplicitCastExpr 0x22150a36790 <col:13> 'limb':'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x22150a36748 <col:13> 'limb':'int' lvalue Var 0x22150a33bb8 'is_p' 'limb':'int'
|   |   `-IntegerLiteral 0x22150a36768 <col:21> 'int' 4
|   |-CompoundAssignOperator 0x22150a36898 <line:951:5, col:21> 'limb':'int' '&=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x22150a367f8 <col:5> 'limb':'int' lvalue Var 0x22150a33bb8 'is_p' 'limb':'int'
|   | `-BinaryOperator 0x22150a36878 <col:13, col:21> 'limb':'int' '<<'
|   |   |-ImplicitCastExpr 0x22150a36860 <col:13> 'limb':'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x22150a36818 <col:13> 'limb':'int' lvalue Var 0x22150a33bb8 'is_p' 'limb':'int'
|   |   `-IntegerLiteral 0x22150a36838 <col:21> 'int' 2
|   |-CompoundAssignOperator 0x22150a36968 <line:952:5, col:21> 'limb':'int' '&=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x22150a368c8 <col:5> 'limb':'int' lvalue Var 0x22150a33bb8 'is_p' 'limb':'int'
|   | `-BinaryOperator 0x22150a36948 <col:13, col:21> 'limb':'int' '<<'
|   |   |-ImplicitCastExpr 0x22150a36930 <col:13> 'limb':'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x22150a368e8 <col:13> 'limb':'int' lvalue Var 0x22150a33bb8 'is_p' 'limb':'int'
|   |   `-IntegerLiteral 0x22150a36908 <col:21> 'int' 1
|   |-BinaryOperator 0x22150a36aa0 <line:953:5, col:27> 'limb':'int' '='
|   | |-DeclRefExpr 0x22150a36998 <col:5> 'limb':'int' lvalue Var 0x22150a33bb8 'is_p' 'limb':'int'
|   | `-BinaryOperator 0x22150a36a80 <col:12, col:27> 'int' '-'
|   |   |-IntegerLiteral 0x22150a369b8 <col:12> 'int' 0
|   |   `-ParenExpr 0x22150a36a60 <col:16, col:27> 'limb':'int'
|   |     `-BinaryOperator 0x22150a36a40 <col:17, col:25> 'limb':'int' '>>'
|   |       |-ImplicitCastExpr 0x22150a36a28 <col:17> 'limb':'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x22150a369e0 <col:17> 'limb':'int' lvalue Var 0x22150a33bb8 'is_p' 'limb':'int'
|   |       `-IntegerLiteral 0x22150a36a00 <col:25> 'int' 63
|   |-BinaryOperator 0x22150a36b30 <line:954:5, col:13> 'limb':'int' '='
|   | |-DeclRefExpr 0x22150a36ac0 <col:5> 'limb':'int' lvalue Var 0x22150a33bb8 'is_p' 'limb':'int'
|   | `-UnaryOperator 0x22150a36b18 <col:12, col:13> 'limb':'int' prefix '~' cannot overflow
|   |   `-ImplicitCastExpr 0x22150a36b00 <col:13> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x22150a36ae0 <col:13> 'limb':'int' lvalue Var 0x22150a33bb8 'is_p' 'limb':'int'
|   |-CompoundAssignOperator 0x22150a36c08 <line:958:5, col:15> 'limb':'int' '&=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x22150a36bb0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x22150a36b98 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x22150a36b50 <col:5> 'limb *':'limb *' lvalue ParmVar 0x22150a339a0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x22150a36b70 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x22150a36bf0 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x22150a36bd0 <col:15> 'limb':'int' lvalue Var 0x22150a33bb8 'is_p' 'limb':'int'
|   |-CompoundAssignOperator 0x22150a36cf0 <line:959:5, col:15> 'limb':'int' '&=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x22150a36c98 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x22150a36c80 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x22150a36c38 <col:5> 'limb *':'limb *' lvalue ParmVar 0x22150a339a0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x22150a36c58 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x22150a36cd8 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x22150a36cb8 <col:15> 'limb':'int' lvalue Var 0x22150a33bb8 'is_p' 'limb':'int'
|   |-CompoundAssignOperator 0x22150a36dd8 <line:960:5, col:15> 'limb':'int' '&=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x22150a36d80 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x22150a36d68 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x22150a36d20 <col:5> 'limb *':'limb *' lvalue ParmVar 0x22150a339a0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x22150a36d40 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x22150a36dc0 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x22150a36da0 <col:15> 'limb':'int' lvalue Var 0x22150a33bb8 'is_p' 'limb':'int'
|   |-CompoundAssignOperator 0x22150a36ec0 <line:961:5, col:15> 'limb':'int' '&=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x22150a36e68 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x22150a36e50 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x22150a36e08 <col:5> 'limb *':'limb *' lvalue ParmVar 0x22150a339a0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x22150a36e28 <col:9> 'int' 3
|   | `-ImplicitCastExpr 0x22150a36ea8 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x22150a36e88 <col:15> 'limb':'int' lvalue Var 0x22150a33bb8 'is_p' 'limb':'int'
|   |-CompoundAssignOperator 0x22150a36fa8 <line:962:5, col:15> 'limb':'int' '&=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x22150a36f50 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x22150a36f38 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x22150a36ef0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x22150a339a0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x22150a36f10 <col:9> 'int' 4
|   | `-ImplicitCastExpr 0x22150a36f90 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x22150a36f70 <col:15> 'limb':'int' lvalue Var 0x22150a33bb8 'is_p' 'limb':'int'
|   |-CompoundAssignOperator 0x22150a29038 <line:963:5, col:15> 'limb':'int' '&=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x22150a28fe0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x22150a28fc8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x22150a36fd8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x22150a339a0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x22150a28fa0 <col:9> 'int' 5
|   | `-ImplicitCastExpr 0x22150a29020 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x22150a29000 <col:15> 'limb':'int' lvalue Var 0x22150a33bb8 'is_p' 'limb':'int'
|   |-CompoundAssignOperator 0x22150a29120 <line:964:5, col:15> 'limb':'int' '&=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x22150a290c8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x22150a290b0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x22150a29068 <col:5> 'limb *':'limb *' lvalue ParmVar 0x22150a339a0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x22150a29088 <col:9> 'int' 6
|   | `-ImplicitCastExpr 0x22150a29108 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x22150a290e8 <col:15> 'limb':'int' lvalue Var 0x22150a33bb8 'is_p' 'limb':'int'
|   |-CompoundAssignOperator 0x22150a29208 <line:965:5, col:15> 'limb':'int' '&=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x22150a291b0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x22150a29198 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x22150a29150 <col:5> 'limb *':'limb *' lvalue ParmVar 0x22150a339a0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x22150a29170 <col:9> 'int' 7
|   | `-ImplicitCastExpr 0x22150a291f0 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x22150a291d0 <col:15> 'limb':'int' lvalue Var 0x22150a33bb8 'is_p' 'limb':'int'
|   |-CompoundAssignOperator 0x22150a292f0 <line:966:5, col:15> 'limb':'int' '&=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x22150a29298 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x22150a29280 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x22150a29238 <col:5> 'limb *':'limb *' lvalue ParmVar 0x22150a339a0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x22150a29258 <col:9> 'int' 8
|   | `-ImplicitCastExpr 0x22150a292d8 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x22150a292b8 <col:15> 'limb':'int' lvalue Var 0x22150a33bb8 'is_p' 'limb':'int'
|   |-BinaryOperator 0x22150a29438 <line:972:5, col:28> 'limb':'int' '='
|   | |-DeclRefExpr 0x22150a29320 <col:5> 'limb':'int' lvalue Var 0x22150a33c30 'is_greater' 'limb':'int'
|   | `-BinaryOperator 0x22150a29418 <col:18, col:28> 'limb':'int' '>>'
|   |   |-ImplicitCastExpr 0x22150a29400 <col:18, col:23> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x22150a293b8 <col:18, col:23> 'limb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x22150a293a0 <col:18> 'limb *':'limb *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x22150a29358 <col:18> 'limb *':'limb *' lvalue ParmVar 0x22150a339a0 'out' 'limb *':'limb *'
|   |   |   `-IntegerLiteral 0x22150a29378 <col:22> 'int' 8
|   |   `-IntegerLiteral 0x22150a293d8 <col:28> 'int' 57
|   |-CompoundAssignOperator 0x22150a294f8 <line:973:5, col:33> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x22150a29458 <col:5> 'limb':'int' lvalue Var 0x22150a33c30 'is_greater' 'limb':'int'
|   | `-BinaryOperator 0x22150a294d8 <col:19, col:33> 'limb':'int' '<<'
|   |   |-ImplicitCastExpr 0x22150a294c0 <col:19> 'limb':'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x22150a29478 <col:19> 'limb':'int' lvalue Var 0x22150a33c30 'is_greater' 'limb':'int'
|   |   `-IntegerLiteral 0x22150a29498 <col:33> 'int' 32
|   |-CompoundAssignOperator 0x22150a295c8 <line:974:5, col:33> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x22150a29528 <col:5> 'limb':'int' lvalue Var 0x22150a33c30 'is_greater' 'limb':'int'
|   | `-BinaryOperator 0x22150a295a8 <col:19, col:33> 'limb':'int' '<<'
|   |   |-ImplicitCastExpr 0x22150a29590 <col:19> 'limb':'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x22150a29548 <col:19> 'limb':'int' lvalue Var 0x22150a33c30 'is_greater' 'limb':'int'
|   |   `-IntegerLiteral 0x22150a29568 <col:33> 'int' 16
|   |-CompoundAssignOperator 0x22150a29698 <line:975:5, col:33> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x22150a295f8 <col:5> 'limb':'int' lvalue Var 0x22150a33c30 'is_greater' 'limb':'int'
|   | `-BinaryOperator 0x22150a29678 <col:19, col:33> 'limb':'int' '<<'
|   |   |-ImplicitCastExpr 0x22150a29660 <col:19> 'limb':'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x22150a29618 <col:19> 'limb':'int' lvalue Var 0x22150a33c30 'is_greater' 'limb':'int'
|   |   `-IntegerLiteral 0x22150a29638 <col:33> 'int' 8
|   |-CompoundAssignOperator 0x22150a29768 <line:976:5, col:33> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x22150a296c8 <col:5> 'limb':'int' lvalue Var 0x22150a33c30 'is_greater' 'limb':'int'
|   | `-BinaryOperator 0x22150a29748 <col:19, col:33> 'limb':'int' '<<'
|   |   |-ImplicitCastExpr 0x22150a29730 <col:19> 'limb':'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x22150a296e8 <col:19> 'limb':'int' lvalue Var 0x22150a33c30 'is_greater' 'limb':'int'
|   |   `-IntegerLiteral 0x22150a29708 <col:33> 'int' 4
|   |-CompoundAssignOperator 0x22150a29838 <line:977:5, col:33> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x22150a29798 <col:5> 'limb':'int' lvalue Var 0x22150a33c30 'is_greater' 'limb':'int'
|   | `-BinaryOperator 0x22150a29818 <col:19, col:33> 'limb':'int' '<<'
|   |   |-ImplicitCastExpr 0x22150a29800 <col:19> 'limb':'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x22150a297b8 <col:19> 'limb':'int' lvalue Var 0x22150a33c30 'is_greater' 'limb':'int'
|   |   `-IntegerLiteral 0x22150a297d8 <col:33> 'int' 2
|   |-CompoundAssignOperator 0x22150a29908 <line:978:5, col:33> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x22150a29868 <col:5> 'limb':'int' lvalue Var 0x22150a33c30 'is_greater' 'limb':'int'
|   | `-BinaryOperator 0x22150a298e8 <col:19, col:33> 'limb':'int' '<<'
|   |   |-ImplicitCastExpr 0x22150a298d0 <col:19> 'limb':'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x22150a29888 <col:19> 'limb':'int' lvalue Var 0x22150a33c30 'is_greater' 'limb':'int'
|   |   `-IntegerLiteral 0x22150a298a8 <col:33> 'int' 1
|   |-BinaryOperator 0x22150a29a40 <line:979:5, col:39> 'limb':'int' '='
|   | |-DeclRefExpr 0x22150a29938 <col:5> 'limb':'int' lvalue Var 0x22150a33c30 'is_greater' 'limb':'int'
|   | `-BinaryOperator 0x22150a29a20 <col:18, col:39> 'int' '-'
|   |   |-IntegerLiteral 0x22150a29958 <col:18> 'int' 0
|   |   `-ParenExpr 0x22150a29a00 <col:22, col:39> 'limb':'int'
|   |     `-BinaryOperator 0x22150a299e0 <col:23, col:37> 'limb':'int' '>>'
|   |       |-ImplicitCastExpr 0x22150a299c8 <col:23> 'limb':'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x22150a29980 <col:23> 'limb':'int' lvalue Var 0x22150a33c30 'is_greater' 'limb':'int'
|   |       `-IntegerLiteral 0x22150a299a0 <col:37> 'int' 63
|   |-CompoundAssignOperator 0x22150a29bd0 <line:981:5, col:27> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x22150a29ac0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x22150a29aa8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x22150a29a60 <col:5> 'limb *':'limb *' lvalue ParmVar 0x22150a339a0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x22150a29a80 <col:9> 'int' 0
|   | `-BinaryOperator 0x22150a29bb0 <col:15, col:27> 'int' '&'
|   |   |-ImplicitCastExpr 0x22150a29b80 <col:15, col:23> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x22150a29b40 <col:15, col:23> 'const limb':'const int' lvalue
|   |   |   |-ImplicitCastExpr 0x22150a29b28 <col:15> 'const limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x22150a29ae0 <col:15> 'const felem':'limb const[9]' lvalue Var 0x22150a2fa88 'kPrime' 'const felem':'limb const[9]'
|   |   |   `-IntegerLiteral 0x22150a29b00 <col:22> 'int' 0
|   |   `-ImplicitCastExpr 0x22150a29b98 <col:27> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x22150a29b60 <col:27> 'limb':'int' lvalue Var 0x22150a33c30 'is_greater' 'limb':'int'
|   |-CompoundAssignOperator 0x22150a29d70 <line:982:5, col:27> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x22150a29c60 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x22150a29c48 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x22150a29c00 <col:5> 'limb *':'limb *' lvalue ParmVar 0x22150a339a0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x22150a29c20 <col:9> 'int' 1
|   | `-BinaryOperator 0x22150a29d50 <col:15, col:27> 'int' '&'
|   |   |-ImplicitCastExpr 0x22150a29d20 <col:15, col:23> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x22150a29ce0 <col:15, col:23> 'const limb':'const int' lvalue
|   |   |   |-ImplicitCastExpr 0x22150a29cc8 <col:15> 'const limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x22150a29c80 <col:15> 'const felem':'limb const[9]' lvalue Var 0x22150a2fa88 'kPrime' 'const felem':'limb const[9]'
|   |   |   `-IntegerLiteral 0x22150a29ca0 <col:22> 'int' 1
|   |   `-ImplicitCastExpr 0x22150a29d38 <col:27> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x22150a29d00 <col:27> 'limb':'int' lvalue Var 0x22150a33c30 'is_greater' 'limb':'int'
|   |-CompoundAssignOperator 0x22150a29f10 <line:983:5, col:27> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x22150a29e00 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x22150a29de8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x22150a29da0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x22150a339a0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x22150a29dc0 <col:9> 'int' 2
|   | `-BinaryOperator 0x22150a29ef0 <col:15, col:27> 'int' '&'
|   |   |-ImplicitCastExpr 0x22150a29ec0 <col:15, col:23> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x22150a29e80 <col:15, col:23> 'const limb':'const int' lvalue
|   |   |   |-ImplicitCastExpr 0x22150a29e68 <col:15> 'const limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x22150a29e20 <col:15> 'const felem':'limb const[9]' lvalue Var 0x22150a2fa88 'kPrime' 'const felem':'limb const[9]'
|   |   |   `-IntegerLiteral 0x22150a29e40 <col:22> 'int' 2
|   |   `-ImplicitCastExpr 0x22150a29ed8 <col:27> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x22150a29ea0 <col:27> 'limb':'int' lvalue Var 0x22150a33c30 'is_greater' 'limb':'int'
|   |-CompoundAssignOperator 0x22150a2a0b0 <line:984:5, col:27> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x22150a29fa0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x22150a29f88 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x22150a29f40 <col:5> 'limb *':'limb *' lvalue ParmVar 0x22150a339a0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x22150a29f60 <col:9> 'int' 3
|   | `-BinaryOperator 0x22150a2a090 <col:15, col:27> 'int' '&'
|   |   |-ImplicitCastExpr 0x22150a2a060 <col:15, col:23> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x22150a2a020 <col:15, col:23> 'const limb':'const int' lvalue
|   |   |   |-ImplicitCastExpr 0x22150a2a008 <col:15> 'const limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x22150a29fc0 <col:15> 'const felem':'limb const[9]' lvalue Var 0x22150a2fa88 'kPrime' 'const felem':'limb const[9]'
|   |   |   `-IntegerLiteral 0x22150a29fe0 <col:22> 'int' 3
|   |   `-ImplicitCastExpr 0x22150a2a078 <col:27> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x22150a2a040 <col:27> 'limb':'int' lvalue Var 0x22150a33c30 'is_greater' 'limb':'int'
|   |-CompoundAssignOperator 0x22150a2a250 <line:985:5, col:27> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x22150a2a140 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x22150a2a128 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x22150a2a0e0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x22150a339a0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x22150a2a100 <col:9> 'int' 4
|   | `-BinaryOperator 0x22150a2a230 <col:15, col:27> 'int' '&'
|   |   |-ImplicitCastExpr 0x22150a2a200 <col:15, col:23> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x22150a2a1c0 <col:15, col:23> 'const limb':'const int' lvalue
|   |   |   |-ImplicitCastExpr 0x22150a2a1a8 <col:15> 'const limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x22150a2a160 <col:15> 'const felem':'limb const[9]' lvalue Var 0x22150a2fa88 'kPrime' 'const felem':'limb const[9]'
|   |   |   `-IntegerLiteral 0x22150a2a180 <col:22> 'int' 4
|   |   `-ImplicitCastExpr 0x22150a2a218 <col:27> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x22150a2a1e0 <col:27> 'limb':'int' lvalue Var 0x22150a33c30 'is_greater' 'limb':'int'
|   |-CompoundAssignOperator 0x22150a2a3f0 <line:986:5, col:27> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x22150a2a2e0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x22150a2a2c8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x22150a2a280 <col:5> 'limb *':'limb *' lvalue ParmVar 0x22150a339a0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x22150a2a2a0 <col:9> 'int' 5
|   | `-BinaryOperator 0x22150a2a3d0 <col:15, col:27> 'int' '&'
|   |   |-ImplicitCastExpr 0x22150a2a3a0 <col:15, col:23> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x22150a2a360 <col:15, col:23> 'const limb':'const int' lvalue
|   |   |   |-ImplicitCastExpr 0x22150a2a348 <col:15> 'const limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x22150a2a300 <col:15> 'const felem':'limb const[9]' lvalue Var 0x22150a2fa88 'kPrime' 'const felem':'limb const[9]'
|   |   |   `-IntegerLiteral 0x22150a2a320 <col:22> 'int' 5
|   |   `-ImplicitCastExpr 0x22150a2a3b8 <col:27> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x22150a2a380 <col:27> 'limb':'int' lvalue Var 0x22150a33c30 'is_greater' 'limb':'int'
|   |-CompoundAssignOperator 0x22150a2a590 <line:987:5, col:27> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x22150a2a480 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x22150a2a468 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x22150a2a420 <col:5> 'limb *':'limb *' lvalue ParmVar 0x22150a339a0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x22150a2a440 <col:9> 'int' 6
|   | `-BinaryOperator 0x22150a2a570 <col:15, col:27> 'int' '&'
|   |   |-ImplicitCastExpr 0x22150a2a540 <col:15, col:23> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x22150a2a500 <col:15, col:23> 'const limb':'const int' lvalue
|   |   |   |-ImplicitCastExpr 0x22150a2a4e8 <col:15> 'const limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x22150a2a4a0 <col:15> 'const felem':'limb const[9]' lvalue Var 0x22150a2fa88 'kPrime' 'const felem':'limb const[9]'
|   |   |   `-IntegerLiteral 0x22150a2a4c0 <col:22> 'int' 6
|   |   `-ImplicitCastExpr 0x22150a2a558 <col:27> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x22150a2a520 <col:27> 'limb':'int' lvalue Var 0x22150a33c30 'is_greater' 'limb':'int'
|   |-CompoundAssignOperator 0x22150a2a730 <line:988:5, col:27> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x22150a2a620 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x22150a2a608 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x22150a2a5c0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x22150a339a0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x22150a2a5e0 <col:9> 'int' 7
|   | `-BinaryOperator 0x22150a2a710 <col:15, col:27> 'int' '&'
|   |   |-ImplicitCastExpr 0x22150a2a6e0 <col:15, col:23> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x22150a2a6a0 <col:15, col:23> 'const limb':'const int' lvalue
|   |   |   |-ImplicitCastExpr 0x22150a2a688 <col:15> 'const limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x22150a2a640 <col:15> 'const felem':'limb const[9]' lvalue Var 0x22150a2fa88 'kPrime' 'const felem':'limb const[9]'
|   |   |   `-IntegerLiteral 0x22150a2a660 <col:22> 'int' 7
|   |   `-ImplicitCastExpr 0x22150a2a6f8 <col:27> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x22150a2a6c0 <col:27> 'limb':'int' lvalue Var 0x22150a33c30 'is_greater' 'limb':'int'
|   |-CompoundAssignOperator 0x22150a2a8d0 <line:989:5, col:27> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x22150a2a7c0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x22150a2a7a8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x22150a2a760 <col:5> 'limb *':'limb *' lvalue ParmVar 0x22150a339a0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x22150a2a780 <col:9> 'int' 8
|   | `-BinaryOperator 0x22150a2a8b0 <col:15, col:27> 'int' '&'
|   |   |-ImplicitCastExpr 0x22150a2a880 <col:15, col:23> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x22150a2a840 <col:15, col:23> 'const limb':'const int' lvalue
|   |   |   |-ImplicitCastExpr 0x22150a2a828 <col:15> 'const limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x22150a2a7e0 <col:15> 'const felem':'limb const[9]' lvalue Var 0x22150a2fa88 'kPrime' 'const felem':'limb const[9]'
|   |   |   `-IntegerLiteral 0x22150a2a800 <col:22> 'int' 8
|   |   `-ImplicitCastExpr 0x22150a2a898 <col:27> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x22150a2a860 <col:27> 'limb':'int' lvalue Var 0x22150a33c30 'is_greater' 'limb':'int'
|   |-BinaryOperator 0x22150a2aa50 <line:992:5, col:26> 'limb':'int' '='
|   | |-DeclRefExpr 0x22150a2a900 <col:5> 'limb':'int' lvalue Var 0x22150a33ca8 'sign' 'limb':'int'
|   | `-UnaryOperator 0x22150a2aa38 <col:12, col:26> 'limb':'int' prefix '-'
|   |   `-ParenExpr 0x22150a2aa18 <col:13, col:26> 'limb':'int'
|   |     `-BinaryOperator 0x22150a2a9f8 <col:14, col:24> 'limb':'int' '>>'
|   |       |-ImplicitCastExpr 0x22150a2a9e0 <col:14, col:19> 'limb':'int' <LValueToRValue>
|   |       | `-ArraySubscriptExpr 0x22150a2a998 <col:14, col:19> 'limb':'int' lvalue
|   |       |   |-ImplicitCastExpr 0x22150a2a980 <col:14> 'limb *':'limb *' <LValueToRValue>
|   |       |   | `-DeclRefExpr 0x22150a2a938 <col:14> 'limb *':'limb *' lvalue ParmVar 0x22150a339a0 'out' 'limb *':'limb *'
|   |       |   `-IntegerLiteral 0x22150a2a958 <col:18> 'int' 0
|   |       `-IntegerLiteral 0x22150a2a9b8 <col:24> 'int' 63
|   |-CompoundAssignOperator 0x22150a2abb8 <line:993:5, col:28> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x22150a2aad0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x22150a2aab8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x22150a2aa70 <col:5> 'limb *':'limb *' lvalue ParmVar 0x22150a339a0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x22150a2aa90 <col:9> 'int' 0
|   | `-ParenExpr 0x22150a2ab98 <col:15, col:28> 'int'
|   |   `-BinaryOperator 0x22150a2ab78 <col:16, col:24> 'int' '&'
|   |     |-ImplicitCastExpr 0x22150a2ab48 <col:16> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x22150a2aaf0 <col:16> 'const limb':'const int' lvalue Var 0x22150a33d58 'two58' 'const limb':'const int'
|   |     `-ImplicitCastExpr 0x22150a2ab60 <col:24> 'limb':'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x22150a2ab28 <col:24> 'limb':'int' lvalue Var 0x22150a33ca8 'sign' 'limb':'int'
|   |-CompoundAssignOperator 0x22150a2ad50 <line:994:5, col:24> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x22150a2ac90 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x22150a2ac78 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x22150a2ac30 <col:5> 'limb *':'limb *' lvalue ParmVar 0x22150a339a0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x22150a2ac50 <col:9> 'int' 1
|   | `-ParenExpr 0x22150a2ad30 <col:15, col:24> 'int'
|   |   `-BinaryOperator 0x22150a2ad10 <col:16, col:20> 'int' '&'
|   |     |-IntegerLiteral 0x22150a2acb0 <col:16> 'int' 1
|   |     `-ImplicitCastExpr 0x22150a2acf8 <col:20> 'limb':'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x22150a2acd8 <col:20> 'limb':'int' lvalue Var 0x22150a33ca8 'sign' 'limb':'int'
|   |-BinaryOperator 0x22150a2aeb8 <line:995:5, col:26> 'limb':'int' '='
|   | |-DeclRefExpr 0x22150a2ad80 <col:5> 'limb':'int' lvalue Var 0x22150a33ca8 'sign' 'limb':'int'
|   | `-UnaryOperator 0x22150a2aea0 <col:12, col:26> 'limb':'int' prefix '-'
|   |   `-ParenExpr 0x22150a2ae80 <col:13, col:26> 'limb':'int'
|   |     `-BinaryOperator 0x22150a2ae60 <col:14, col:24> 'limb':'int' '>>'
|   |       |-ImplicitCastExpr 0x22150a2ae48 <col:14, col:19> 'limb':'int' <LValueToRValue>
|   |       | `-ArraySubscriptExpr 0x22150a2ae00 <col:14, col:19> 'limb':'int' lvalue
|   |       |   |-ImplicitCastExpr 0x22150a2ade8 <col:14> 'limb *':'limb *' <LValueToRValue>
|   |       |   | `-DeclRefExpr 0x22150a2ada0 <col:14> 'limb *':'limb *' lvalue ParmVar 0x22150a339a0 'out' 'limb *':'limb *'
|   |       |   `-IntegerLiteral 0x22150a2adc0 <col:18> 'int' 1
|   |       `-IntegerLiteral 0x22150a2ae20 <col:24> 'int' 63
|   |-CompoundAssignOperator 0x22150a39090 <line:996:5, col:28> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x22150a2af38 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x22150a2af20 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x22150a2aed8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x22150a339a0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x22150a2aef8 <col:9> 'int' 1
|   | `-ParenExpr 0x22150a39070 <col:15, col:28> 'int'
|   |   `-BinaryOperator 0x22150a39050 <col:16, col:24> 'int' '&'
|   |     |-ImplicitCastExpr 0x22150a39020 <col:16> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x22150a2af58 <col:16> 'const limb':'const int' lvalue Var 0x22150a33d58 'two58' 'const limb':'const int'
|   |     `-ImplicitCastExpr 0x22150a39038 <col:24> 'limb':'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x22150a2af78 <col:24> 'limb':'int' lvalue Var 0x22150a33ca8 'sign' 'limb':'int'
|   |-CompoundAssignOperator 0x22150a391e0 <line:997:5, col:24> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x22150a39120 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x22150a39108 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x22150a390c0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x22150a339a0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x22150a390e0 <col:9> 'int' 2
|   | `-ParenExpr 0x22150a391c0 <col:15, col:24> 'int'
|   |   `-BinaryOperator 0x22150a391a0 <col:16, col:20> 'int' '&'
|   |     |-IntegerLiteral 0x22150a39140 <col:16> 'int' 1
|   |     `-ImplicitCastExpr 0x22150a39188 <col:20> 'limb':'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x22150a39168 <col:20> 'limb':'int' lvalue Var 0x22150a33ca8 'sign' 'limb':'int'
|   |-BinaryOperator 0x22150a39348 <line:998:5, col:26> 'limb':'int' '='
|   | |-DeclRefExpr 0x22150a39210 <col:5> 'limb':'int' lvalue Var 0x22150a33ca8 'sign' 'limb':'int'
|   | `-UnaryOperator 0x22150a39330 <col:12, col:26> 'limb':'int' prefix '-'
|   |   `-ParenExpr 0x22150a39310 <col:13, col:26> 'limb':'int'
|   |     `-BinaryOperator 0x22150a392f0 <col:14, col:24> 'limb':'int' '>>'
|   |       |-ImplicitCastExpr 0x22150a392d8 <col:14, col:19> 'limb':'int' <LValueToRValue>
|   |       | `-ArraySubscriptExpr 0x22150a39290 <col:14, col:19> 'limb':'int' lvalue
|   |       |   |-ImplicitCastExpr 0x22150a39278 <col:14> 'limb *':'limb *' <LValueToRValue>
|   |       |   | `-DeclRefExpr 0x22150a39230 <col:14> 'limb *':'limb *' lvalue ParmVar 0x22150a339a0 'out' 'limb *':'limb *'
|   |       |   `-IntegerLiteral 0x22150a39250 <col:18> 'int' 2
|   |       `-IntegerLiteral 0x22150a392b0 <col:24> 'int' 63
|   |-CompoundAssignOperator 0x22150a39498 <line:999:5, col:28> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x22150a393c8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x22150a393b0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x22150a39368 <col:5> 'limb *':'limb *' lvalue ParmVar 0x22150a339a0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x22150a39388 <col:9> 'int' 2
|   | `-ParenExpr 0x22150a39478 <col:15, col:28> 'int'
|   |   `-BinaryOperator 0x22150a39458 <col:16, col:24> 'int' '&'
|   |     |-ImplicitCastExpr 0x22150a39428 <col:16> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x22150a393e8 <col:16> 'const limb':'const int' lvalue Var 0x22150a33d58 'two58' 'const limb':'const int'
|   |     `-ImplicitCastExpr 0x22150a39440 <col:24> 'limb':'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x22150a39408 <col:24> 'limb':'int' lvalue Var 0x22150a33ca8 'sign' 'limb':'int'
|   |-CompoundAssignOperator 0x22150a395e8 <line:1000:5, col:24> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x22150a39528 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x22150a39510 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x22150a394c8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x22150a339a0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x22150a394e8 <col:9> 'int' 3
|   | `-ParenExpr 0x22150a395c8 <col:15, col:24> 'int'
|   |   `-BinaryOperator 0x22150a395a8 <col:16, col:20> 'int' '&'
|   |     |-IntegerLiteral 0x22150a39548 <col:16> 'int' 1
|   |     `-ImplicitCastExpr 0x22150a39590 <col:20> 'limb':'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x22150a39570 <col:20> 'limb':'int' lvalue Var 0x22150a33ca8 'sign' 'limb':'int'
|   |-BinaryOperator 0x22150a39750 <line:1001:5, col:26> 'limb':'int' '='
|   | |-DeclRefExpr 0x22150a39618 <col:5> 'limb':'int' lvalue Var 0x22150a33ca8 'sign' 'limb':'int'
|   | `-UnaryOperator 0x22150a39738 <col:12, col:26> 'limb':'int' prefix '-'
|   |   `-ParenExpr 0x22150a39718 <col:13, col:26> 'limb':'int'
|   |     `-BinaryOperator 0x22150a396f8 <col:14, col:24> 'limb':'int' '>>'
|   |       |-ImplicitCastExpr 0x22150a396e0 <col:14, col:19> 'limb':'int' <LValueToRValue>
|   |       | `-ArraySubscriptExpr 0x22150a39698 <col:14, col:19> 'limb':'int' lvalue
|   |       |   |-ImplicitCastExpr 0x22150a39680 <col:14> 'limb *':'limb *' <LValueToRValue>
|   |       |   | `-DeclRefExpr 0x22150a39638 <col:14> 'limb *':'limb *' lvalue ParmVar 0x22150a339a0 'out' 'limb *':'limb *'
|   |       |   `-IntegerLiteral 0x22150a39658 <col:18> 'int' 3
|   |       `-IntegerLiteral 0x22150a396b8 <col:24> 'int' 63
|   |-CompoundAssignOperator 0x22150a398a0 <line:1002:5, col:28> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x22150a397d0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x22150a397b8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x22150a39770 <col:5> 'limb *':'limb *' lvalue ParmVar 0x22150a339a0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x22150a39790 <col:9> 'int' 3
|   | `-ParenExpr 0x22150a39880 <col:15, col:28> 'int'
|   |   `-BinaryOperator 0x22150a39860 <col:16, col:24> 'int' '&'
|   |     |-ImplicitCastExpr 0x22150a39830 <col:16> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x22150a397f0 <col:16> 'const limb':'const int' lvalue Var 0x22150a33d58 'two58' 'const limb':'const int'
|   |     `-ImplicitCastExpr 0x22150a39848 <col:24> 'limb':'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x22150a39810 <col:24> 'limb':'int' lvalue Var 0x22150a33ca8 'sign' 'limb':'int'
|   |-CompoundAssignOperator 0x22150a399f0 <line:1003:5, col:24> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x22150a39930 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x22150a39918 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x22150a398d0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x22150a339a0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x22150a398f0 <col:9> 'int' 4
|   | `-ParenExpr 0x22150a399d0 <col:15, col:24> 'int'
|   |   `-BinaryOperator 0x22150a399b0 <col:16, col:20> 'int' '&'
|   |     |-IntegerLiteral 0x22150a39950 <col:16> 'int' 1
|   |     `-ImplicitCastExpr 0x22150a39998 <col:20> 'limb':'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x22150a39978 <col:20> 'limb':'int' lvalue Var 0x22150a33ca8 'sign' 'limb':'int'
|   |-BinaryOperator 0x22150a39b58 <line:1004:5, col:26> 'limb':'int' '='
|   | |-DeclRefExpr 0x22150a39a20 <col:5> 'limb':'int' lvalue Var 0x22150a33ca8 'sign' 'limb':'int'
|   | `-UnaryOperator 0x22150a39b40 <col:12, col:26> 'limb':'int' prefix '-'
|   |   `-ParenExpr 0x22150a39b20 <col:13, col:26> 'limb':'int'
|   |     `-BinaryOperator 0x22150a39b00 <col:14, col:24> 'limb':'int' '>>'
|   |       |-ImplicitCastExpr 0x22150a39ae8 <col:14, col:19> 'limb':'int' <LValueToRValue>
|   |       | `-ArraySubscriptExpr 0x22150a39aa0 <col:14, col:19> 'limb':'int' lvalue
|   |       |   |-ImplicitCastExpr 0x22150a39a88 <col:14> 'limb *':'limb *' <LValueToRValue>
|   |       |   | `-DeclRefExpr 0x22150a39a40 <col:14> 'limb *':'limb *' lvalue ParmVar 0x22150a339a0 'out' 'limb *':'limb *'
|   |       |   `-IntegerLiteral 0x22150a39a60 <col:18> 'int' 4
|   |       `-IntegerLiteral 0x22150a39ac0 <col:24> 'int' 63
|   |-CompoundAssignOperator 0x22150a39ca8 <line:1005:5, col:28> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x22150a39bd8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x22150a39bc0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x22150a39b78 <col:5> 'limb *':'limb *' lvalue ParmVar 0x22150a339a0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x22150a39b98 <col:9> 'int' 4
|   | `-ParenExpr 0x22150a39c88 <col:15, col:28> 'int'
|   |   `-BinaryOperator 0x22150a39c68 <col:16, col:24> 'int' '&'
|   |     |-ImplicitCastExpr 0x22150a39c38 <col:16> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x22150a39bf8 <col:16> 'const limb':'const int' lvalue Var 0x22150a33d58 'two58' 'const limb':'const int'
|   |     `-ImplicitCastExpr 0x22150a39c50 <col:24> 'limb':'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x22150a39c18 <col:24> 'limb':'int' lvalue Var 0x22150a33ca8 'sign' 'limb':'int'
|   |-CompoundAssignOperator 0x22150a39df8 <line:1006:5, col:24> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x22150a39d38 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x22150a39d20 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x22150a39cd8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x22150a339a0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x22150a39cf8 <col:9> 'int' 5
|   | `-ParenExpr 0x22150a39dd8 <col:15, col:24> 'int'
|   |   `-BinaryOperator 0x22150a39db8 <col:16, col:20> 'int' '&'
|   |     |-IntegerLiteral 0x22150a39d58 <col:16> 'int' 1
|   |     `-ImplicitCastExpr 0x22150a39da0 <col:20> 'limb':'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x22150a39d80 <col:20> 'limb':'int' lvalue Var 0x22150a33ca8 'sign' 'limb':'int'
|   |-BinaryOperator 0x22150a39f60 <line:1007:5, col:26> 'limb':'int' '='
|   | |-DeclRefExpr 0x22150a39e28 <col:5> 'limb':'int' lvalue Var 0x22150a33ca8 'sign' 'limb':'int'
|   | `-UnaryOperator 0x22150a39f48 <col:12, col:26> 'limb':'int' prefix '-'
|   |   `-ParenExpr 0x22150a39f28 <col:13, col:26> 'limb':'int'
|   |     `-BinaryOperator 0x22150a39f08 <col:14, col:24> 'limb':'int' '>>'
|   |       |-ImplicitCastExpr 0x22150a39ef0 <col:14, col:19> 'limb':'int' <LValueToRValue>
|   |       | `-ArraySubscriptExpr 0x22150a39ea8 <col:14, col:19> 'limb':'int' lvalue
|   |       |   |-ImplicitCastExpr 0x22150a39e90 <col:14> 'limb *':'limb *' <LValueToRValue>
|   |       |   | `-DeclRefExpr 0x22150a39e48 <col:14> 'limb *':'limb *' lvalue ParmVar 0x22150a339a0 'out' 'limb *':'limb *'
|   |       |   `-IntegerLiteral 0x22150a39e68 <col:18> 'int' 0
|   |       `-IntegerLiteral 0x22150a39ec8 <col:24> 'int' 63
|   |-CompoundAssignOperator 0x22150a3a0b0 <line:1008:5, col:28> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x22150a39fe0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x22150a39fc8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x22150a39f80 <col:5> 'limb *':'limb *' lvalue ParmVar 0x22150a339a0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x22150a39fa0 <col:9> 'int' 5
|   | `-ParenExpr 0x22150a3a090 <col:15, col:28> 'int'
|   |   `-BinaryOperator 0x22150a3a070 <col:16, col:24> 'int' '&'
|   |     |-ImplicitCastExpr 0x22150a3a040 <col:16> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x22150a3a000 <col:16> 'const limb':'const int' lvalue Var 0x22150a33d58 'two58' 'const limb':'const int'
|   |     `-ImplicitCastExpr 0x22150a3a058 <col:24> 'limb':'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x22150a3a020 <col:24> 'limb':'int' lvalue Var 0x22150a33ca8 'sign' 'limb':'int'
|   |-CompoundAssignOperator 0x22150a3a200 <line:1009:5, col:24> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x22150a3a140 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x22150a3a128 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x22150a3a0e0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x22150a339a0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x22150a3a100 <col:9> 'int' 6
|   | `-ParenExpr 0x22150a3a1e0 <col:15, col:24> 'int'
|   |   `-BinaryOperator 0x22150a3a1c0 <col:16, col:20> 'int' '&'
|   |     |-IntegerLiteral 0x22150a3a160 <col:16> 'int' 1
|   |     `-ImplicitCastExpr 0x22150a3a1a8 <col:20> 'limb':'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x22150a3a188 <col:20> 'limb':'int' lvalue Var 0x22150a33ca8 'sign' 'limb':'int'
|   |-BinaryOperator 0x22150a3a368 <line:1010:5, col:26> 'limb':'int' '='
|   | |-DeclRefExpr 0x22150a3a230 <col:5> 'limb':'int' lvalue Var 0x22150a33ca8 'sign' 'limb':'int'
|   | `-UnaryOperator 0x22150a3a350 <col:12, col:26> 'limb':'int' prefix '-'
|   |   `-ParenExpr 0x22150a3a330 <col:13, col:26> 'limb':'int'
|   |     `-BinaryOperator 0x22150a3a310 <col:14, col:24> 'limb':'int' '>>'
|   |       |-ImplicitCastExpr 0x22150a3a2f8 <col:14, col:19> 'limb':'int' <LValueToRValue>
|   |       | `-ArraySubscriptExpr 0x22150a3a2b0 <col:14, col:19> 'limb':'int' lvalue
|   |       |   |-ImplicitCastExpr 0x22150a3a298 <col:14> 'limb *':'limb *' <LValueToRValue>
|   |       |   | `-DeclRefExpr 0x22150a3a250 <col:14> 'limb *':'limb *' lvalue ParmVar 0x22150a339a0 'out' 'limb *':'limb *'
|   |       |   `-IntegerLiteral 0x22150a3a270 <col:18> 'int' 6
|   |       `-IntegerLiteral 0x22150a3a2d0 <col:24> 'int' 63
|   |-CompoundAssignOperator 0x22150a3a4b8 <line:1011:5, col:28> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x22150a3a3e8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x22150a3a3d0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x22150a3a388 <col:5> 'limb *':'limb *' lvalue ParmVar 0x22150a339a0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x22150a3a3a8 <col:9> 'int' 6
|   | `-ParenExpr 0x22150a3a498 <col:15, col:28> 'int'
|   |   `-BinaryOperator 0x22150a3a478 <col:16, col:24> 'int' '&'
|   |     |-ImplicitCastExpr 0x22150a3a448 <col:16> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x22150a3a408 <col:16> 'const limb':'const int' lvalue Var 0x22150a33d58 'two58' 'const limb':'const int'
|   |     `-ImplicitCastExpr 0x22150a3a460 <col:24> 'limb':'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x22150a3a428 <col:24> 'limb':'int' lvalue Var 0x22150a33ca8 'sign' 'limb':'int'
|   |-CompoundAssignOperator 0x22150a3a608 <line:1012:5, col:24> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x22150a3a548 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x22150a3a530 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x22150a3a4e8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x22150a339a0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x22150a3a508 <col:9> 'int' 7
|   | `-ParenExpr 0x22150a3a5e8 <col:15, col:24> 'int'
|   |   `-BinaryOperator 0x22150a3a5c8 <col:16, col:20> 'int' '&'
|   |     |-IntegerLiteral 0x22150a3a568 <col:16> 'int' 1
|   |     `-ImplicitCastExpr 0x22150a3a5b0 <col:20> 'limb':'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x22150a3a590 <col:20> 'limb':'int' lvalue Var 0x22150a33ca8 'sign' 'limb':'int'
|   |-BinaryOperator 0x22150a3a770 <line:1013:5, col:26> 'limb':'int' '='
|   | |-DeclRefExpr 0x22150a3a638 <col:5> 'limb':'int' lvalue Var 0x22150a33ca8 'sign' 'limb':'int'
|   | `-UnaryOperator 0x22150a3a758 <col:12, col:26> 'limb':'int' prefix '-'
|   |   `-ParenExpr 0x22150a3a738 <col:13, col:26> 'limb':'int'
|   |     `-BinaryOperator 0x22150a3a718 <col:14, col:24> 'limb':'int' '>>'
|   |       |-ImplicitCastExpr 0x22150a3a700 <col:14, col:19> 'limb':'int' <LValueToRValue>
|   |       | `-ArraySubscriptExpr 0x22150a3a6b8 <col:14, col:19> 'limb':'int' lvalue
|   |       |   |-ImplicitCastExpr 0x22150a3a6a0 <col:14> 'limb *':'limb *' <LValueToRValue>
|   |       |   | `-DeclRefExpr 0x22150a3a658 <col:14> 'limb *':'limb *' lvalue ParmVar 0x22150a339a0 'out' 'limb *':'limb *'
|   |       |   `-IntegerLiteral 0x22150a3a678 <col:18> 'int' 7
|   |       `-IntegerLiteral 0x22150a3a6d8 <col:24> 'int' 63
|   |-CompoundAssignOperator 0x22150a3a8c0 <line:1014:5, col:28> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x22150a3a7f0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x22150a3a7d8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x22150a3a790 <col:5> 'limb *':'limb *' lvalue ParmVar 0x22150a339a0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x22150a3a7b0 <col:9> 'int' 7
|   | `-ParenExpr 0x22150a3a8a0 <col:15, col:28> 'int'
|   |   `-BinaryOperator 0x22150a3a880 <col:16, col:24> 'int' '&'
|   |     |-ImplicitCastExpr 0x22150a3a850 <col:16> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x22150a3a810 <col:16> 'const limb':'const int' lvalue Var 0x22150a33d58 'two58' 'const limb':'const int'
|   |     `-ImplicitCastExpr 0x22150a3a868 <col:24> 'limb':'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x22150a3a830 <col:24> 'limb':'int' lvalue Var 0x22150a33ca8 'sign' 'limb':'int'
|   |-CompoundAssignOperator 0x22150a3aa10 <line:1015:5, col:24> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x22150a3a950 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x22150a3a938 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x22150a3a8f0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x22150a339a0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x22150a3a910 <col:9> 'int' 8
|   | `-ParenExpr 0x22150a3a9f0 <col:15, col:24> 'int'
|   |   `-BinaryOperator 0x22150a3a9d0 <col:16, col:20> 'int' '&'
|   |     |-IntegerLiteral 0x22150a3a970 <col:16> 'int' 1
|   |     `-ImplicitCastExpr 0x22150a3a9b8 <col:20> 'limb':'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x22150a3a998 <col:20> 'limb':'int' lvalue Var 0x22150a33ca8 'sign' 'limb':'int'
|   |-BinaryOperator 0x22150a3ab78 <line:1016:5, col:26> 'limb':'int' '='
|   | |-DeclRefExpr 0x22150a3aa40 <col:5> 'limb':'int' lvalue Var 0x22150a33ca8 'sign' 'limb':'int'
|   | `-UnaryOperator 0x22150a3ab60 <col:12, col:26> 'limb':'int' prefix '-'
|   |   `-ParenExpr 0x22150a3ab40 <col:13, col:26> 'limb':'int'
|   |     `-BinaryOperator 0x22150a3ab20 <col:14, col:24> 'limb':'int' '>>'
|   |       |-ImplicitCastExpr 0x22150a3ab08 <col:14, col:19> 'limb':'int' <LValueToRValue>
|   |       | `-ArraySubscriptExpr 0x22150a3aac0 <col:14, col:19> 'limb':'int' lvalue
|   |       |   |-ImplicitCastExpr 0x22150a3aaa8 <col:14> 'limb *':'limb *' <LValueToRValue>
|   |       |   | `-DeclRefExpr 0x22150a3aa60 <col:14> 'limb *':'limb *' lvalue ParmVar 0x22150a339a0 'out' 'limb *':'limb *'
|   |       |   `-IntegerLiteral 0x22150a3aa80 <col:18> 'int' 5
|   |       `-IntegerLiteral 0x22150a3aae0 <col:24> 'int' 63
|   |-CompoundAssignOperator 0x22150a3acc8 <line:1017:5, col:28> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x22150a3abf8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x22150a3abe0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x22150a3ab98 <col:5> 'limb *':'limb *' lvalue ParmVar 0x22150a339a0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x22150a3abb8 <col:9> 'int' 5
|   | `-ParenExpr 0x22150a3aca8 <col:15, col:28> 'int'
|   |   `-BinaryOperator 0x22150a3ac88 <col:16, col:24> 'int' '&'
|   |     |-ImplicitCastExpr 0x22150a3ac58 <col:16> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x22150a3ac18 <col:16> 'const limb':'const int' lvalue Var 0x22150a33d58 'two58' 'const limb':'const int'
|   |     `-ImplicitCastExpr 0x22150a3ac70 <col:24> 'limb':'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x22150a3ac38 <col:24> 'limb':'int' lvalue Var 0x22150a33ca8 'sign' 'limb':'int'
|   |-CompoundAssignOperator 0x22150a3ae18 <line:1018:5, col:24> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x22150a3ad58 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x22150a3ad40 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x22150a3acf8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x22150a339a0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x22150a3ad18 <col:9> 'int' 6
|   | `-ParenExpr 0x22150a3adf8 <col:15, col:24> 'int'
|   |   `-BinaryOperator 0x22150a3add8 <col:16, col:20> 'int' '&'
|   |     |-IntegerLiteral 0x22150a3ad78 <col:16> 'int' 1
|   |     `-ImplicitCastExpr 0x22150a3adc0 <col:20> 'limb':'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x22150a3ada0 <col:20> 'limb':'int' lvalue Var 0x22150a33ca8 'sign' 'limb':'int'
|   |-BinaryOperator 0x22150a3af80 <line:1019:5, col:26> 'limb':'int' '='
|   | |-DeclRefExpr 0x22150a3ae48 <col:5> 'limb':'int' lvalue Var 0x22150a33ca8 'sign' 'limb':'int'
|   | `-UnaryOperator 0x22150a3af68 <col:12, col:26> 'limb':'int' prefix '-'
|   |   `-ParenExpr 0x22150a3af48 <col:13, col:26> 'limb':'int'
|   |     `-BinaryOperator 0x22150a3af28 <col:14, col:24> 'limb':'int' '>>'
|   |       |-ImplicitCastExpr 0x22150a3af10 <col:14, col:19> 'limb':'int' <LValueToRValue>
|   |       | `-ArraySubscriptExpr 0x22150a3aec8 <col:14, col:19> 'limb':'int' lvalue
|   |       |   |-ImplicitCastExpr 0x22150a3aeb0 <col:14> 'limb *':'limb *' <LValueToRValue>
|   |       |   | `-DeclRefExpr 0x22150a3ae68 <col:14> 'limb *':'limb *' lvalue ParmVar 0x22150a339a0 'out' 'limb *':'limb *'
|   |       |   `-IntegerLiteral 0x22150a3ae88 <col:18> 'int' 6
|   |       `-IntegerLiteral 0x22150a3aee8 <col:24> 'int' 63
|   |-CompoundAssignOperator 0x22150a2b060 <line:1020:5, col:28> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x22150a3b000 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x22150a3afe8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x22150a3afa0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x22150a339a0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x22150a3afc0 <col:9> 'int' 6
|   | `-ParenExpr 0x22150a2b040 <col:15, col:28> 'int'
|   |   `-BinaryOperator 0x22150a2b020 <col:16, col:24> 'int' '&'
|   |     |-ImplicitCastExpr 0x22150a2aff0 <col:16> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x22150a2afb0 <col:16> 'const limb':'const int' lvalue Var 0x22150a33d58 'two58' 'const limb':'const int'
|   |     `-ImplicitCastExpr 0x22150a2b008 <col:24> 'limb':'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x22150a2afd0 <col:24> 'limb':'int' lvalue Var 0x22150a33ca8 'sign' 'limb':'int'
|   |-CompoundAssignOperator 0x22150a2b1b0 <line:1021:5, col:24> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x22150a2b0f0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x22150a2b0d8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x22150a2b090 <col:5> 'limb *':'limb *' lvalue ParmVar 0x22150a339a0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x22150a2b0b0 <col:9> 'int' 7
|   | `-ParenExpr 0x22150a2b190 <col:15, col:24> 'int'
|   |   `-BinaryOperator 0x22150a2b170 <col:16, col:20> 'int' '&'
|   |     |-IntegerLiteral 0x22150a2b110 <col:16> 'int' 1
|   |     `-ImplicitCastExpr 0x22150a2b158 <col:20> 'limb':'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x22150a2b138 <col:20> 'limb':'int' lvalue Var 0x22150a33ca8 'sign' 'limb':'int'
|   |-BinaryOperator 0x22150a2b318 <line:1022:5, col:26> 'limb':'int' '='
|   | |-DeclRefExpr 0x22150a2b1e0 <col:5> 'limb':'int' lvalue Var 0x22150a33ca8 'sign' 'limb':'int'
|   | `-UnaryOperator 0x22150a2b300 <col:12, col:26> 'limb':'int' prefix '-'
|   |   `-ParenExpr 0x22150a2b2e0 <col:13, col:26> 'limb':'int'
|   |     `-BinaryOperator 0x22150a2b2c0 <col:14, col:24> 'limb':'int' '>>'
|   |       |-ImplicitCastExpr 0x22150a2b2a8 <col:14, col:19> 'limb':'int' <LValueToRValue>
|   |       | `-ArraySubscriptExpr 0x22150a2b260 <col:14, col:19> 'limb':'int' lvalue
|   |       |   |-ImplicitCastExpr 0x22150a2b248 <col:14> 'limb *':'limb *' <LValueToRValue>
|   |       |   | `-DeclRefExpr 0x22150a2b200 <col:14> 'limb *':'limb *' lvalue ParmVar 0x22150a339a0 'out' 'limb *':'limb *'
|   |       |   `-IntegerLiteral 0x22150a2b220 <col:18> 'int' 7
|   |       `-IntegerLiteral 0x22150a2b280 <col:24> 'int' 63
|   |-CompoundAssignOperator 0x22150a2b468 <line:1023:5, col:28> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x22150a2b398 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x22150a2b380 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x22150a2b338 <col:5> 'limb *':'limb *' lvalue ParmVar 0x22150a339a0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x22150a2b358 <col:9> 'int' 7
|   | `-ParenExpr 0x22150a2b448 <col:15, col:28> 'int'
|   |   `-BinaryOperator 0x22150a2b428 <col:16, col:24> 'int' '&'
|   |     |-ImplicitCastExpr 0x22150a2b3f8 <col:16> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x22150a2b3b8 <col:16> 'const limb':'const int' lvalue Var 0x22150a33d58 'two58' 'const limb':'const int'
|   |     `-ImplicitCastExpr 0x22150a2b410 <col:24> 'limb':'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x22150a2b3d8 <col:24> 'limb':'int' lvalue Var 0x22150a33ca8 'sign' 'limb':'int'
|   `-CompoundAssignOperator 0x22150a2b5b8 <line:1024:5, col:24> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|     |-ArraySubscriptExpr 0x22150a2b4f8 <col:5, col:10> 'limb':'int' lvalue
|     | |-ImplicitCastExpr 0x22150a2b4e0 <col:5> 'limb *':'limb *' <LValueToRValue>
|     | | `-DeclRefExpr 0x22150a2b498 <col:5> 'limb *':'limb *' lvalue ParmVar 0x22150a339a0 'out' 'limb *':'limb *'
|     | `-IntegerLiteral 0x22150a2b4b8 <col:9> 'int' 8
|     `-ParenExpr 0x22150a2b598 <col:15, col:24> 'int'
|       `-BinaryOperator 0x22150a2b578 <col:16, col:20> 'int' '&'
|         |-IntegerLiteral 0x22150a2b518 <col:16> 'int' 1
|         `-ImplicitCastExpr 0x22150a2b560 <col:20> 'limb':'int' <LValueToRValue>
|           `-DeclRefExpr 0x22150a2b540 <col:20> 'limb':'int' lvalue Var 0x22150a33ca8 'sign' 'limb':'int'
|-FunctionDecl 0x22150a2bd78 <line:1043:1, line:1139:1> line:1044:1 used point_double 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *)' static
| |-ParmVarDecl 0x22150a2b918 <col:14, col:20> col:20 used x_out 'limb *':'limb *'
| |-ParmVarDecl 0x22150a2b990 <col:27, col:33> col:33 used y_out 'limb *':'limb *'
| |-ParmVarDecl 0x22150a2ba08 <col:40, col:46> col:46 used z_out 'limb *':'limb *'
| |-ParmVarDecl 0x22150a2ba80 <line:1045:14, col:26> col:26 used x_in 'const limb *':'const limb *'
| |-ParmVarDecl 0x22150a2baf8 <col:32, col:44> col:44 used y_in 'const limb *':'const limb *'
| |-ParmVarDecl 0x22150a2bb70 <col:50, col:62> col:62 used z_in 'const limb *':'const limb *'
| `-CompoundStmt 0x22150a40198 <line:1046:1, line:1139:1>
|   |-DeclStmt 0x22150a2bf68 <line:1047:5, col:25>
|   | |-VarDecl 0x22150a2be70 <col:5, col:16> col:16 used tmp 'largefelem':'int [9]'
|   | `-VarDecl 0x22150a2bee8 <col:5, col:21> col:21 used tmp2 'largefelem':'int [9]'
|   |-DeclStmt 0x22150a2c288 <line:1048:5, col:49>
|   | |-VarDecl 0x22150a2bf90 <col:5, col:11> col:11 used delta 'felem':'limb [9]'
|   | |-VarDecl 0x22150a2c008 <col:5, col:18> col:18 used gamma 'felem':'limb [9]'
|   | |-VarDecl 0x22150a2c080 <col:5, col:25> col:25 used beta 'felem':'limb [9]'
|   | |-VarDecl 0x22150a2c0f8 <col:5, col:31> col:31 used alpha 'felem':'limb [9]'
|   | |-VarDecl 0x22150a2c170 <col:5, col:38> col:38 used ftmp 'felem':'limb [9]'
|   | `-VarDecl 0x22150a2c1e8 <col:5, col:44> col:44 used ftmp2 'felem':'limb [9]'
|   |-CallExpr 0x22150a2c330 <line:1050:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x22150a2c318 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a2c2a0 <col:5> 'void (limb *, const limb *)' Function 0x2215095b168 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x22150a2c360 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a2c2c0 <col:18> 'felem':'limb [9]' lvalue Var 0x22150a2c170 'ftmp' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x22150a2c378 <col:24> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x22150a2c2f8 <col:24> 'const limb *':'const limb *' lvalue ParmVar 0x22150a2ba80 'x_in' 'const limb *':'const limb *'
|   |-CallExpr 0x22150a2c420 <line:1051:5, col:29> 'void'
|   | |-ImplicitCastExpr 0x22150a2c408 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a2c390 <col:5> 'void (limb *, const limb *)' Function 0x2215095b168 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x22150a2c450 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a2c3b0 <col:18> 'felem':'limb [9]' lvalue Var 0x22150a2c1e8 'ftmp2' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x22150a2c468 <col:25> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x22150a2c3e8 <col:25> 'const limb *':'const limb *' lvalue ParmVar 0x22150a2ba80 'x_in' 'const limb *':'const limb *'
|   |-CallExpr 0x22150a2c510 <line:1054:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x22150a2c4f8 <col:5> 'void (*)(int *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a2c480 <col:5> 'void (int *, const limb *)' Function 0x22150964740 'felem_square' 'void (int *, const limb *)'
|   | |-ImplicitCastExpr 0x22150a2c540 <col:18> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a2c4a0 <col:18> 'largefelem':'int [9]' lvalue Var 0x22150a2be70 'tmp' 'largefelem':'int [9]'
|   | `-ImplicitCastExpr 0x22150a2c558 <col:23> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x22150a2c4d8 <col:23> 'const limb *':'const limb *' lvalue ParmVar 0x22150a2bb70 'z_in' 'const limb *':'const limb *'
|   |-CallExpr 0x22150a2c600 <line:1055:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x22150a2c5e8 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a2c570 <col:5> 'void (limb *, const int *)' Function 0x2215096a398 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x22150a2c630 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a2c590 <col:18> 'felem':'limb [9]' lvalue Var 0x22150a2bf90 'delta' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x22150a2c660 <col:25> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150a2c648 <col:25> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x22150a2c5c8 <col:25> 'largefelem':'int [9]' lvalue Var 0x22150a2be70 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x22150a2c6f0 <line:1058:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x22150a2c6d8 <col:5> 'void (*)(int *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a2c678 <col:5> 'void (int *, const limb *)' Function 0x22150964740 'felem_square' 'void (int *, const limb *)'
|   | |-ImplicitCastExpr 0x22150a2c720 <col:18> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a2c698 <col:18> 'largefelem':'int [9]' lvalue Var 0x22150a2be70 'tmp' 'largefelem':'int [9]'
|   | `-ImplicitCastExpr 0x22150a2c738 <col:23> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x22150a2c6b8 <col:23> 'const limb *':'const limb *' lvalue ParmVar 0x22150a2baf8 'y_in' 'const limb *':'const limb *'
|   |-CallExpr 0x22150a2c7e0 <line:1059:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x22150a2c7c8 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a2c750 <col:5> 'void (limb *, const int *)' Function 0x2215096a398 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x22150a2c810 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a2c770 <col:18> 'felem':'limb [9]' lvalue Var 0x22150a2c008 'gamma' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x22150a2c840 <col:25> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150a2c828 <col:25> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x22150a2c7a8 <col:25> 'largefelem':'int [9]' lvalue Var 0x22150a2be70 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x22150a2c8f0 <line:1062:5, col:31> 'void'
|   | |-ImplicitCastExpr 0x22150a2c8d8 <col:5> 'void (*)(int *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a2c858 <col:5> 'void (int *, const limb *, const limb *)' Function 0x22150966d78 'felem_mul' 'void (int *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x22150a2c928 <col:15> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a2c878 <col:15> 'largefelem':'int [9]' lvalue Var 0x22150a2be70 'tmp' 'largefelem':'int [9]'
|   | |-ImplicitCastExpr 0x22150a2c940 <col:20> 'const limb *':'const limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x22150a2c898 <col:20> 'const limb *':'const limb *' lvalue ParmVar 0x22150a2ba80 'x_in' 'const limb *':'const limb *'
|   | `-ImplicitCastExpr 0x22150a2c970 <col:26> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150a2c958 <col:26> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x22150a2c8b8 <col:26> 'felem':'limb [9]' lvalue Var 0x22150a2c008 'gamma' 'felem':'limb [9]'
|   |-CallExpr 0x22150a2ca18 <line:1063:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x22150a2ca00 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a2c988 <col:5> 'void (limb *, const int *)' Function 0x2215096a398 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x22150a2ca48 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a2c9a8 <col:18> 'felem':'limb [9]' lvalue Var 0x22150a2c080 'beta' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x22150a2ca78 <col:24> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150a2ca60 <col:24> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x22150a2c9e0 <col:24> 'largefelem':'int [9]' lvalue Var 0x22150a2be70 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x22150a2cb08 <line:1066:5, col:29> 'void'
|   | |-ImplicitCastExpr 0x22150a2caf0 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a2ca90 <col:5> 'void (limb *, const limb *)' Function 0x22150960b60 'felem_diff64' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x22150a2cb38 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a2cab0 <col:18> 'felem':'limb [9]' lvalue Var 0x22150a2c170 'ftmp' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x22150a2cb68 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150a2cb50 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x22150a2cad0 <col:24> 'felem':'limb [9]' lvalue Var 0x22150a2bf90 'delta' 'felem':'limb [9]'
|   |-CallExpr 0x22150a2cbf8 <line:1068:5, col:29> 'void'
|   | |-ImplicitCastExpr 0x22150a2cbe0 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a2cb80 <col:5> 'void (limb *, const limb *)' Function 0x2215095bee0 'felem_sum64' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x22150a2cc28 <col:17> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a2cba0 <col:17> 'felem':'limb [9]' lvalue Var 0x22150a2c1e8 'ftmp2' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x22150a2cc58 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150a2cc40 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x22150a2cbc0 <col:24> 'felem':'limb [9]' lvalue Var 0x22150a2bf90 'delta' 'felem':'limb [9]'
|   |-CallExpr 0x22150a2cd50 <line:1070:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x22150a2cd38 <col:5> 'void (*)(limb *, limb)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a2cc70 <col:5> 'void (limb *, limb)' Function 0x2215095df28 'felem_scalar64' 'void (limb *, limb)'
|   | |-ImplicitCastExpr 0x22150a2cd80 <col:20> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a2cc90 <col:20> 'felem':'limb [9]' lvalue Var 0x22150a2c1e8 'ftmp2' 'felem':'limb [9]'
|   | `-IntegerLiteral 0x22150a2ccb0 <col:27> 'int' 3
|   |-CallExpr 0x22150a2ce30 <line:1072:5, col:31> 'void'
|   | |-ImplicitCastExpr 0x22150a2ce18 <col:5> 'void (*)(int *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a2cd98 <col:5> 'void (int *, const limb *, const limb *)' Function 0x22150966d78 'felem_mul' 'void (int *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x22150a2ce68 <col:15> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a2cdb8 <col:15> 'largefelem':'int [9]' lvalue Var 0x22150a2be70 'tmp' 'largefelem':'int [9]'
|   | |-ImplicitCastExpr 0x22150a2ce98 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x22150a2ce80 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x22150a2cdd8 <col:20> 'felem':'limb [9]' lvalue Var 0x22150a2c170 'ftmp' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x22150a2cec8 <col:26> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150a2ceb0 <col:26> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x22150a2cdf8 <col:26> 'felem':'limb [9]' lvalue Var 0x22150a2c1e8 'ftmp2' 'felem':'limb [9]'
|   |-CallExpr 0x22150a2cf70 <line:1080:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x22150a2cf58 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a2cee0 <col:5> 'void (limb *, const int *)' Function 0x2215096a398 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x22150a3f050 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a2cf00 <col:18> 'felem':'limb [9]' lvalue Var 0x22150a2c0f8 'alpha' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x22150a3f080 <col:25> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150a3f068 <col:25> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x22150a2cf38 <col:25> 'largefelem':'int [9]' lvalue Var 0x22150a2be70 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x22150a3f110 <line:1083:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x22150a3f0f8 <col:5> 'void (*)(int *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a3f098 <col:5> 'void (int *, const limb *)' Function 0x22150964740 'felem_square' 'void (int *, const limb *)'
|   | |-ImplicitCastExpr 0x22150a3f140 <col:18> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a3f0b8 <col:18> 'largefelem':'int [9]' lvalue Var 0x22150a2be70 'tmp' 'largefelem':'int [9]'
|   | `-ImplicitCastExpr 0x22150a3f170 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150a3f158 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x22150a3f0d8 <col:23> 'felem':'limb [9]' lvalue Var 0x22150a2c0f8 'alpha' 'felem':'limb [9]'
|   |-CallExpr 0x22150a3f200 <line:1087:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x22150a3f1e8 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a3f188 <col:5> 'void (limb *, const limb *)' Function 0x2215095b168 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x22150a3f230 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a3f1a8 <col:18> 'felem':'limb [9]' lvalue Var 0x22150a2c170 'ftmp' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x22150a3f260 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150a3f248 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x22150a3f1c8 <col:24> 'felem':'limb [9]' lvalue Var 0x22150a2c080 'beta' 'felem':'limb [9]'
|   |-CallExpr 0x22150a3f2f8 <line:1088:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x22150a3f2e0 <col:5> 'void (*)(limb *, limb)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a3f278 <col:5> 'void (limb *, limb)' Function 0x2215095df28 'felem_scalar64' 'void (limb *, limb)'
|   | |-ImplicitCastExpr 0x22150a3f328 <col:20> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a3f298 <col:20> 'felem':'limb [9]' lvalue Var 0x22150a2c170 'ftmp' 'felem':'limb [9]'
|   | `-IntegerLiteral 0x22150a3f2b8 <col:26> 'int' 8
|   |-CallExpr 0x22150a3f3b8 <line:1090:5, col:32> 'void'
|   | |-ImplicitCastExpr 0x22150a3f3a0 <col:5> 'void (*)(int *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a3f340 <col:5> 'void (int *, const limb *)' Function 0x22150962298 'felem_diff_128_64' 'void (int *, const limb *)'
|   | |-ImplicitCastExpr 0x22150a3f3e8 <col:23> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a3f360 <col:23> 'largefelem':'int [9]' lvalue Var 0x22150a2be70 'tmp' 'largefelem':'int [9]'
|   | `-ImplicitCastExpr 0x22150a3f418 <col:28> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150a3f400 <col:28> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x22150a3f380 <col:28> 'felem':'limb [9]' lvalue Var 0x22150a2c170 'ftmp' 'felem':'limb [9]'
|   |-CallExpr 0x22150a3f4a8 <line:1092:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x22150a3f490 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a3f430 <col:5> 'void (limb *, const int *)' Function 0x2215096a398 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x22150a3f4d8 <col:18> 'limb *':'limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x22150a3f450 <col:18> 'limb *':'limb *' lvalue ParmVar 0x22150a2b918 'x_out' 'limb *':'limb *'
|   | `-ImplicitCastExpr 0x22150a3f508 <col:25> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150a3f4f0 <col:25> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x22150a3f470 <col:25> 'largefelem':'int [9]' lvalue Var 0x22150a2be70 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x22150a3f598 <line:1095:5, col:29> 'void'
|   | |-ImplicitCastExpr 0x22150a3f580 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a3f520 <col:5> 'void (limb *, const limb *)' Function 0x2215095bee0 'felem_sum64' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x22150a3f5c8 <col:17> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a3f540 <col:17> 'felem':'limb [9]' lvalue Var 0x22150a2bf90 'delta' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x22150a3f5f8 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150a3f5e0 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x22150a3f560 <col:24> 'felem':'limb [9]' lvalue Var 0x22150a2c008 'gamma' 'felem':'limb [9]'
|   |-CallExpr 0x22150a3f688 <line:1097:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x22150a3f670 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a3f610 <col:5> 'void (limb *, const limb *)' Function 0x2215095b168 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x22150a3f6b8 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a3f630 <col:18> 'felem':'limb [9]' lvalue Var 0x22150a2c170 'ftmp' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x22150a3f6d0 <col:24> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x22150a3f650 <col:24> 'const limb *':'const limb *' lvalue ParmVar 0x22150a2baf8 'y_in' 'const limb *':'const limb *'
|   |-CallExpr 0x22150a3f760 <line:1098:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x22150a3f748 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a3f6e8 <col:5> 'void (limb *, const limb *)' Function 0x2215095bee0 'felem_sum64' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x22150a3f790 <col:17> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a3f708 <col:17> 'felem':'limb [9]' lvalue Var 0x22150a2c170 'ftmp' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x22150a3f7a8 <col:23> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x22150a3f728 <col:23> 'const limb *':'const limb *' lvalue ParmVar 0x22150a2bb70 'z_in' 'const limb *':'const limb *'
|   |-CallExpr 0x22150a3f838 <line:1100:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x22150a3f820 <col:5> 'void (*)(int *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a3f7c0 <col:5> 'void (int *, const limb *)' Function 0x22150964740 'felem_square' 'void (int *, const limb *)'
|   | |-ImplicitCastExpr 0x22150a3f868 <col:18> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a3f7e0 <col:18> 'largefelem':'int [9]' lvalue Var 0x22150a2be70 'tmp' 'largefelem':'int [9]'
|   | `-ImplicitCastExpr 0x22150a3f898 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150a3f880 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x22150a3f800 <col:23> 'felem':'limb [9]' lvalue Var 0x22150a2c170 'ftmp' 'felem':'limb [9]'
|   |-CallExpr 0x22150a3f928 <line:1104:5, col:33> 'void'
|   | |-ImplicitCastExpr 0x22150a3f910 <col:5> 'void (*)(int *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a3f8b0 <col:5> 'void (int *, const limb *)' Function 0x22150962298 'felem_diff_128_64' 'void (int *, const limb *)'
|   | |-ImplicitCastExpr 0x22150a3f958 <col:23> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a3f8d0 <col:23> 'largefelem':'int [9]' lvalue Var 0x22150a2be70 'tmp' 'largefelem':'int [9]'
|   | `-ImplicitCastExpr 0x22150a3f988 <col:28> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150a3f970 <col:28> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x22150a3f8f0 <col:28> 'felem':'limb [9]' lvalue Var 0x22150a2bf90 'delta' 'felem':'limb [9]'
|   |-CallExpr 0x22150a3fa18 <line:1106:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x22150a3fa00 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a3f9a0 <col:5> 'void (limb *, const int *)' Function 0x2215096a398 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x22150a3fa48 <col:18> 'limb *':'limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x22150a3f9c0 <col:18> 'limb *':'limb *' lvalue ParmVar 0x22150a2ba08 'z_out' 'limb *':'limb *'
|   | `-ImplicitCastExpr 0x22150a3fa78 <col:25> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150a3fa60 <col:25> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x22150a3f9e0 <col:25> 'largefelem':'int [9]' lvalue Var 0x22150a2be70 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x22150a3fb10 <line:1109:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x22150a3faf8 <col:5> 'void (*)(limb *, limb)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a3fa90 <col:5> 'void (limb *, limb)' Function 0x2215095df28 'felem_scalar64' 'void (limb *, limb)'
|   | |-ImplicitCastExpr 0x22150a3fb40 <col:20> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a3fab0 <col:20> 'felem':'limb [9]' lvalue Var 0x22150a2c080 'beta' 'felem':'limb [9]'
|   | `-IntegerLiteral 0x22150a3fad0 <col:26> 'int' 4
|   |-CallExpr 0x22150a3fbd0 <line:1111:5, col:29> 'void'
|   | |-ImplicitCastExpr 0x22150a3fbb8 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a3fb58 <col:5> 'void (limb *, const limb *)' Function 0x22150960b60 'felem_diff64' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x22150a3fc00 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a3fb78 <col:18> 'felem':'limb [9]' lvalue Var 0x22150a2c080 'beta' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x22150a3fc30 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150a3fc18 <col:24> 'limb *':'limb *' <LValueToRValue>
|   |     `-DeclRefExpr 0x22150a3fb98 <col:24> 'limb *':'limb *' lvalue ParmVar 0x22150a2b918 'x_out' 'limb *':'limb *'
|   |-CallExpr 0x22150a3fce0 <line:1113:5, col:31> 'void'
|   | |-ImplicitCastExpr 0x22150a3fcc8 <col:5> 'void (*)(int *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a3fc48 <col:5> 'void (int *, const limb *, const limb *)' Function 0x22150966d78 'felem_mul' 'void (int *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x22150a3fd18 <col:15> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a3fc68 <col:15> 'largefelem':'int [9]' lvalue Var 0x22150a2be70 'tmp' 'largefelem':'int [9]'
|   | |-ImplicitCastExpr 0x22150a3fd48 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x22150a3fd30 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x22150a3fc88 <col:20> 'felem':'limb [9]' lvalue Var 0x22150a2c0f8 'alpha' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x22150a3fd78 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150a3fd60 <col:27> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x22150a3fca8 <col:27> 'felem':'limb [9]' lvalue Var 0x22150a2c080 'beta' 'felem':'limb [9]'
|   |-CallExpr 0x22150a3fe20 <line:1120:5, col:29> 'void'
|   | |-ImplicitCastExpr 0x22150a3fe08 <col:5> 'void (*)(int *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a3fd90 <col:5> 'void (int *, const limb *)' Function 0x22150964740 'felem_square' 'void (int *, const limb *)'
|   | |-ImplicitCastExpr 0x22150a3fe50 <col:18> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a3fdb0 <col:18> 'largefelem':'int [9]' lvalue Var 0x22150a2bee8 'tmp2' 'largefelem':'int [9]'
|   | `-ImplicitCastExpr 0x22150a3fe80 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150a3fe68 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x22150a3fde8 <col:24> 'felem':'limb [9]' lvalue Var 0x22150a2c008 'gamma' 'felem':'limb [9]'
|   |-CallExpr 0x22150a3ff40 <line:1125:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x22150a3ff28 <col:5> 'void (*)(int *, limb)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a3fe98 <col:5> 'void (int *, limb)' Function 0x2215095ea48 'felem_scalar128' 'void (int *, limb)'
|   | |-ImplicitCastExpr 0x22150a3ff70 <col:21> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a3feb8 <col:21> 'largefelem':'int [9]' lvalue Var 0x22150a2bee8 'tmp2' 'largefelem':'int [9]'
|   | `-IntegerLiteral 0x22150a3fed8 <col:27> 'int' 8
|   |-CallExpr 0x22150a40030 <line:1131:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x22150a40018 <col:5> 'void (*)(int *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a3ff88 <col:5> 'void (int *, const int *)' Function 0x22150963a38 'felem_diff128' 'void (int *, const int *)'
|   | |-ImplicitCastExpr 0x22150a40060 <col:19> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a3ffa8 <col:19> 'largefelem':'int [9]' lvalue Var 0x22150a2be70 'tmp' 'largefelem':'int [9]'
|   | `-ImplicitCastExpr 0x22150a40090 <col:24> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150a40078 <col:24> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x22150a3ffc8 <col:24> 'largefelem':'int [9]' lvalue Var 0x22150a2bee8 'tmp2' 'largefelem':'int [9]'
|   `-CallExpr 0x22150a40120 <line:1138:5, col:28> 'void'
|     |-ImplicitCastExpr 0x22150a40108 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x22150a400a8 <col:5> 'void (limb *, const int *)' Function 0x2215096a398 'felem_reduce' 'void (limb *, const int *)'
|     |-ImplicitCastExpr 0x22150a40150 <col:18> 'limb *':'limb *' <LValueToRValue>
|     | `-DeclRefExpr 0x22150a400c8 <col:18> 'limb *':'limb *' lvalue ParmVar 0x22150a2b990 'y_out' 'limb *':'limb *'
|     `-ImplicitCastExpr 0x22150a40180 <col:25> 'const int *':'const int *' <NoOp>
|       `-ImplicitCastExpr 0x22150a40168 <col:25> 'int *' <ArrayToPointerDecay>
|         `-DeclRefExpr 0x22150a400e8 <col:25> 'largefelem':'int [9]' lvalue Var 0x22150a2be70 'tmp' 'largefelem':'int [9]'
|-FunctionDecl 0x22150a40498 <line:1142:1, line:1149:1> line:1142:13 used copy_conditional 'void (limb *, const limb *, limb)' static
| |-ParmVarDecl 0x22150a402c0 <col:30, col:36> col:36 used out 'limb *':'limb *'
| |-ParmVarDecl 0x22150a40338 <col:41, col:53> col:53 used in 'const limb *':'const limb *'
| |-ParmVarDecl 0x22150a403b0 <col:57, col:62> col:62 used mask 'limb':'int'
| `-CompoundStmt 0x22150a40b90 <line:1143:1, line:1149:1>
|   |-DeclStmt 0x22150a405e8 <line:1144:5, col:15>
|   | `-VarDecl 0x22150a40580 <col:5, col:14> col:14 used i 'unsigned int'
|   `-ForStmt 0x22150a40b58 <line:1145:5, line:1148:5>
|     |-BinaryOperator 0x22150a40678 <line:1145:10, col:14> 'unsigned int' '='
|     | |-DeclRefExpr 0x22150a40600 <col:10> 'unsigned int' lvalue Var 0x22150a40580 'i' 'unsigned int'
|     | `-ImplicitCastExpr 0x22150a40660 <col:14> 'unsigned int' <IntegralCast>
|     |   `-IntegerLiteral 0x22150a40638 <col:14> 'int' 0
|     |-<<<NULL>>>
|     |-BinaryOperator 0x22150a40710 <col:17, line:128:17> 'int' '<'
|     | |-ImplicitCastExpr 0x22150a406e0 <line:1145:17> 'unsigned int' <LValueToRValue>
|     | | `-DeclRefExpr 0x22150a40698 <col:17> 'unsigned int' lvalue Var 0x22150a40580 'i' 'unsigned int'
|     | `-ImplicitCastExpr 0x22150a406f8 <line:128:17> 'unsigned int' <IntegralCast>
|     |   `-IntegerLiteral 0x22150a406b8 <col:17> 'int' 9
|     |-UnaryOperator 0x22150a40750 <line:1145:29, col:31> 'unsigned int' prefix '++'
|     | `-DeclRefExpr 0x22150a40730 <col:31> 'unsigned int' lvalue Var 0x22150a40580 'i' 'unsigned int'
|     `-CompoundStmt 0x22150a40b38 <col:34, line:1148:5>
|       |-DeclStmt 0x22150a409c8 <line:1146:9, col:49>
|       | `-VarDecl 0x22150a40778 <col:9, col:48> col:20 used tmp 'const limb':'const int' cinit
|       |   `-BinaryOperator 0x22150a409a8 <col:26, col:48> 'int' '&'
|       |     |-ImplicitCastExpr 0x22150a40990 <col:26> 'limb':'int' <LValueToRValue>
|       |     | `-DeclRefExpr 0x22150a407e0 <col:26> 'limb':'int' lvalue ParmVar 0x22150a403b0 'mask' 'limb':'int'
|       |     `-ParenExpr 0x22150a40970 <col:33, col:48> 'int'
|       |       `-BinaryOperator 0x22150a40950 <col:34, col:47> 'int' '^'
|       |         |-ImplicitCastExpr 0x22150a40920 <col:34, col:38> 'limb':'int' <LValueToRValue>
|       |         | `-ArraySubscriptExpr 0x22150a40870 <col:34, col:38> 'const limb':'const int' lvalue
|       |         |   |-ImplicitCastExpr 0x22150a40840 <col:34> 'const limb *':'const limb *' <LValueToRValue>
|       |         |   | `-DeclRefExpr 0x22150a40800 <col:34> 'const limb *':'const limb *' lvalue ParmVar 0x22150a40338 'in' 'const limb *':'const limb *'
|       |         |   `-ImplicitCastExpr 0x22150a40858 <col:37> 'unsigned int' <LValueToRValue>
|       |         |     `-DeclRefExpr 0x22150a40820 <col:37> 'unsigned int' lvalue Var 0x22150a40580 'i' 'unsigned int'
|       |         `-ImplicitCastExpr 0x22150a40938 <col:42, col:47> 'limb':'int' <LValueToRValue>
|       |           `-ArraySubscriptExpr 0x22150a40900 <col:42, col:47> 'limb':'int' lvalue
|       |             |-ImplicitCastExpr 0x22150a408d0 <col:42> 'limb *':'limb *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x22150a40890 <col:42> 'limb *':'limb *' lvalue ParmVar 0x22150a402c0 'out' 'limb *':'limb *'
|       |             `-ImplicitCastExpr 0x22150a408e8 <col:46> 'unsigned int' <LValueToRValue>
|       |               `-DeclRefExpr 0x22150a408b0 <col:46> 'unsigned int' lvalue Var 0x22150a40580 'i' 'unsigned int'
|       `-CompoundAssignOperator 0x22150a40ac0 <line:1147:9, col:19> 'limb':'int' '^=' ComputeLHSTy='int' ComputeResultTy='int'
|         |-ArraySubscriptExpr 0x22150a40a50 <col:9, col:14> 'limb':'int' lvalue
|         | |-ImplicitCastExpr 0x22150a40a20 <col:9> 'limb *':'limb *' <LValueToRValue>
|         | | `-DeclRefExpr 0x22150a409e0 <col:9> 'limb *':'limb *' lvalue ParmVar 0x22150a402c0 'out' 'limb *':'limb *'
|         | `-ImplicitCastExpr 0x22150a40a38 <col:13> 'unsigned int' <LValueToRValue>
|         |   `-DeclRefExpr 0x22150a40a00 <col:13> 'unsigned int' lvalue Var 0x22150a40580 'i' 'unsigned int'
|         `-ImplicitCastExpr 0x22150a40aa8 <col:19> 'limb':'int' <LValueToRValue>
|           `-DeclRefExpr 0x22150a40a70 <col:19> 'const limb':'const int' lvalue Var 0x22150a40778 'tmp' 'const limb':'const int'
|-FunctionDecl 0x22150a3d308 <line:1162:1, line:1315:1> line:1162:13 used point_add 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const limb *, const limb *, const limb *)' static
| |-ParmVarDecl 0x22150a40bc0 <col:23, col:29> col:29 used x3 'limb *':'limb *'
| |-ParmVarDecl 0x22150a40c38 <col:33, col:39> col:39 used y3 'limb *':'limb *'
| |-ParmVarDecl 0x22150a40cb0 <col:43, col:49> col:49 used z3 'limb *':'limb *'
| |-ParmVarDecl 0x22150a40d28 <line:1163:23, col:35> col:35 used x1 'const limb *':'const limb *'
| |-ParmVarDecl 0x22150a40da0 <col:39, col:51> col:51 used y1 'const limb *':'const limb *'
| |-ParmVarDecl 0x22150a40e18 <col:55, col:67> col:67 used z1 'const limb *':'const limb *'
| |-ParmVarDecl 0x22150a40e98 <line:1164:23, col:33> col:33 used mixed 'const int'
| |-ParmVarDecl 0x22150a40f10 <col:40, col:52> col:52 used x2 'const limb *':'const limb *'
| |-ParmVarDecl 0x22150a40f88 <col:56, col:68> col:68 used y2 'const limb *':'const limb *'
| |-ParmVarDecl 0x22150a3d040 <line:1165:23, col:35> col:35 used z2 'const limb *':'const limb *'
| `-CompoundStmt 0x22150a3c060 <line:1166:1, line:1315:1>
|   |-DeclStmt 0x22150a3d898 <line:1167:5, col:71>
|   | |-VarDecl 0x22150a3d420 <col:5, col:11> col:11 used ftmp 'felem':'limb [9]'
|   | |-VarDecl 0x22150a3d498 <col:5, col:17> col:17 used ftmp2 'felem':'limb [9]'
|   | |-VarDecl 0x22150a3d510 <col:5, col:24> col:24 used ftmp3 'felem':'limb [9]'
|   | |-VarDecl 0x22150a3d588 <col:5, col:31> col:31 used ftmp4 'felem':'limb [9]'
|   | |-VarDecl 0x22150a3d600 <col:5, col:38> col:38 used ftmp5 'felem':'limb [9]'
|   | |-VarDecl 0x22150a3d678 <col:5, col:45> col:45 used ftmp6 'felem':'limb [9]'
|   | |-VarDecl 0x22150a3d6f0 <col:5, col:52> col:52 used x_out 'felem':'limb [9]'
|   | |-VarDecl 0x22150a3d768 <col:5, col:59> col:59 used y_out 'felem':'limb [9]'
|   | `-VarDecl 0x22150a3d7e0 <col:5, col:66> col:66 used z_out 'felem':'limb [9]'
|   |-DeclStmt 0x22150a3d9b8 <line:1168:5, col:25>
|   | |-VarDecl 0x22150a3d8c0 <col:5, col:16> col:16 used tmp 'largefelem':'int [9]'
|   | `-VarDecl 0x22150a3d938 <col:5, col:21> col:21 used tmp2 'largefelem':'int [9]'
|   |-DeclStmt 0x22150a3dbd8 <line:1169:5, col:50>
|   | |-VarDecl 0x22150a3d9e0 <col:5, col:10> col:10 used x_equal 'limb':'int'
|   | |-VarDecl 0x22150a3da58 <col:5, col:19> col:19 used y_equal 'limb':'int'
|   | |-VarDecl 0x22150a3dad0 <col:5, col:28> col:28 used z1_is_zero 'limb':'int'
|   | `-VarDecl 0x22150a3db48 <col:5, col:40> col:40 used z2_is_zero 'limb':'int'
|   |-BinaryOperator 0x22150a3dcc0 <line:1171:5, col:34> 'limb':'int' '='
|   | |-DeclRefExpr 0x22150a3dbf0 <col:5> 'limb':'int' lvalue Var 0x22150a3dad0 'z1_is_zero' 'limb':'int'
|   | `-CallExpr 0x22150a3dc80 <col:18, col:34> 'limb':'int'
|   |   |-ImplicitCastExpr 0x22150a3dc68 <col:18> 'limb (*)(const limb *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x22150a3dc28 <col:18> 'limb (const limb *)' Function 0x22150a2ff58 'felem_is_zero' 'limb (const limb *)'
|   |   `-ImplicitCastExpr 0x22150a3dca8 <col:32> 'const limb *':'const limb *' <LValueToRValue>
|   |     `-DeclRefExpr 0x22150a3dc48 <col:32> 'const limb *':'const limb *' lvalue ParmVar 0x22150a40e18 'z1' 'const limb *':'const limb *'
|   |-BinaryOperator 0x22150a3ddb0 <line:1172:5, col:34> 'limb':'int' '='
|   | |-DeclRefExpr 0x22150a3dce0 <col:5> 'limb':'int' lvalue Var 0x22150a3db48 'z2_is_zero' 'limb':'int'
|   | `-CallExpr 0x22150a3dd70 <col:18, col:34> 'limb':'int'
|   |   |-ImplicitCastExpr 0x22150a3dd58 <col:18> 'limb (*)(const limb *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x22150a3dd18 <col:18> 'limb (const limb *)' Function 0x22150a2ff58 'felem_is_zero' 'limb (const limb *)'
|   |   `-ImplicitCastExpr 0x22150a3dd98 <col:32> 'const limb *':'const limb *' <LValueToRValue>
|   |     `-DeclRefExpr 0x22150a3dd38 <col:32> 'const limb *':'const limb *' lvalue ParmVar 0x22150a3d040 'z2' 'const limb *':'const limb *'
|   |-CallExpr 0x22150a3de60 <line:1175:5, col:25> 'void'
|   | |-ImplicitCastExpr 0x22150a3de48 <col:5> 'void (*)(int *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a3ddd0 <col:5> 'void (int *, const limb *)' Function 0x22150964740 'felem_square' 'void (int *, const limb *)'
|   | |-ImplicitCastExpr 0x22150a3de90 <col:18> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a3ddf0 <col:18> 'largefelem':'int [9]' lvalue Var 0x22150a3d8c0 'tmp' 'largefelem':'int [9]'
|   | `-ImplicitCastExpr 0x22150a3dea8 <col:23> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x22150a3de28 <col:23> 'const limb *':'const limb *' lvalue ParmVar 0x22150a40e18 'z1' 'const limb *':'const limb *'
|   |-CallExpr 0x22150a3df50 <line:1176:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x22150a3df38 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a3dec0 <col:5> 'void (limb *, const int *)' Function 0x2215096a398 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x22150a3df80 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a3dee0 <col:18> 'felem':'limb [9]' lvalue Var 0x22150a3d420 'ftmp' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x22150a3dfb0 <col:24> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150a3df98 <col:24> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x22150a3df18 <col:24> 'largefelem':'int [9]' lvalue Var 0x22150a3d8c0 'tmp' 'largefelem':'int [9]'
|   |-IfStmt 0x22150a41190 <line:1178:5, line:1221:5> has_else
|   | |-UnaryOperator 0x22150a3e000 <line:1178:9, col:10> 'int' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x22150a3dfe8 <col:10> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x22150a3dfc8 <col:10> 'const int' lvalue ParmVar 0x22150a40e98 'mixed' 'const int'
|   | |-CompoundStmt 0x22150a3ee10 <col:17, line:1208:5>
|   | | |-CallExpr 0x22150a3e090 <line:1180:9, col:29> 'void'
|   | | | |-ImplicitCastExpr 0x22150a3e078 <col:9> 'void (*)(int *, const limb *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x22150a3e018 <col:9> 'void (int *, const limb *)' Function 0x22150964740 'felem_square' 'void (int *, const limb *)'
|   | | | |-ImplicitCastExpr 0x22150a3e0c0 <col:22> 'int *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x22150a3e038 <col:22> 'largefelem':'int [9]' lvalue Var 0x22150a3d8c0 'tmp' 'largefelem':'int [9]'
|   | | | `-ImplicitCastExpr 0x22150a3e0d8 <col:27> 'const limb *':'const limb *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x22150a3e058 <col:27> 'const limb *':'const limb *' lvalue ParmVar 0x22150a3d040 'z2' 'const limb *':'const limb *'
|   | | |-CallExpr 0x22150a3e180 <line:1181:9, col:32> 'void'
|   | | | |-ImplicitCastExpr 0x22150a3e168 <col:9> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x22150a3e0f0 <col:9> 'void (limb *, const int *)' Function 0x2215096a398 'felem_reduce' 'void (limb *, const int *)'
|   | | | |-ImplicitCastExpr 0x22150a3e1b0 <col:22> 'limb *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x22150a3e110 <col:22> 'felem':'limb [9]' lvalue Var 0x22150a3d498 'ftmp2' 'felem':'limb [9]'
|   | | | `-ImplicitCastExpr 0x22150a3e1e0 <col:29> 'const int *':'const int *' <NoOp>
|   | | |   `-ImplicitCastExpr 0x22150a3e1c8 <col:29> 'int *' <ArrayToPointerDecay>
|   | | |     `-DeclRefExpr 0x22150a3e148 <col:29> 'largefelem':'int [9]' lvalue Var 0x22150a3d8c0 'tmp' 'largefelem':'int [9]'
|   | | |-CallExpr 0x22150a3e290 <line:1184:9, col:33> 'void'
|   | | | |-ImplicitCastExpr 0x22150a3e278 <col:9> 'void (*)(int *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x22150a3e1f8 <col:9> 'void (int *, const limb *, const limb *)' Function 0x22150966d78 'felem_mul' 'void (int *, const limb *, const limb *)'
|   | | | |-ImplicitCastExpr 0x22150a3e2c8 <col:19> 'int *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x22150a3e218 <col:19> 'largefelem':'int [9]' lvalue Var 0x22150a3d8c0 'tmp' 'largefelem':'int [9]'
|   | | | |-ImplicitCastExpr 0x22150a3e2e0 <col:24> 'const limb *':'const limb *' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x22150a3e238 <col:24> 'const limb *':'const limb *' lvalue ParmVar 0x22150a40d28 'x1' 'const limb *':'const limb *'
|   | | | `-ImplicitCastExpr 0x22150a3e310 <col:28> 'const limb *':'const limb *' <NoOp>
|   | | |   `-ImplicitCastExpr 0x22150a3e2f8 <col:28> 'limb *' <ArrayToPointerDecay>
|   | | |     `-DeclRefExpr 0x22150a3e258 <col:28> 'felem':'limb [9]' lvalue Var 0x22150a3d498 'ftmp2' 'felem':'limb [9]'
|   | | |-CallExpr 0x22150a3e3b8 <line:1185:9, col:32> 'void'
|   | | | |-ImplicitCastExpr 0x22150a3e3a0 <col:9> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x22150a3e328 <col:9> 'void (limb *, const int *)' Function 0x2215096a398 'felem_reduce' 'void (limb *, const int *)'
|   | | | |-ImplicitCastExpr 0x22150a3e3e8 <col:22> 'limb *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x22150a3e348 <col:22> 'felem':'limb [9]' lvalue Var 0x22150a3d510 'ftmp3' 'felem':'limb [9]'
|   | | | `-ImplicitCastExpr 0x22150a3e418 <col:29> 'const int *':'const int *' <NoOp>
|   | | |   `-ImplicitCastExpr 0x22150a3e400 <col:29> 'int *' <ArrayToPointerDecay>
|   | | |     `-DeclRefExpr 0x22150a3e380 <col:29> 'largefelem':'int [9]' lvalue Var 0x22150a3d8c0 'tmp' 'largefelem':'int [9]'
|   | | |-CallExpr 0x22150a3e4c0 <line:1188:9, col:31> 'void'
|   | | | |-ImplicitCastExpr 0x22150a3e4a8 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x22150a3e430 <col:9> 'void (limb *, const limb *)' Function 0x2215095b168 'felem_assign' 'void (limb *, const limb *)'
|   | | | |-ImplicitCastExpr 0x22150a3e4f0 <col:22> 'limb *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x22150a3e450 <col:22> 'felem':'limb [9]' lvalue Var 0x22150a3d600 'ftmp5' 'felem':'limb [9]'
|   | | | `-ImplicitCastExpr 0x22150a3e508 <col:29> 'const limb *':'const limb *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x22150a3e488 <col:29> 'const limb *':'const limb *' lvalue ParmVar 0x22150a40e18 'z1' 'const limb *':'const limb *'
|   | | |-CallExpr 0x22150a3e598 <line:1189:9, col:30> 'void'
|   | | | |-ImplicitCastExpr 0x22150a3e580 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x22150a3e520 <col:9> 'void (limb *, const limb *)' Function 0x2215095bee0 'felem_sum64' 'void (limb *, const limb *)'
|   | | | |-ImplicitCastExpr 0x22150a3e5c8 <col:21> 'limb *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x22150a3e540 <col:21> 'felem':'limb [9]' lvalue Var 0x22150a3d600 'ftmp5' 'felem':'limb [9]'
|   | | | `-ImplicitCastExpr 0x22150a3e5e0 <col:28> 'const limb *':'const limb *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x22150a3e560 <col:28> 'const limb *':'const limb *' lvalue ParmVar 0x22150a3d040 'z2' 'const limb *':'const limb *'
|   | | |-CallExpr 0x22150a3e670 <line:1193:9, col:32> 'void'
|   | | | |-ImplicitCastExpr 0x22150a3e658 <col:9> 'void (*)(int *, const limb *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x22150a3e5f8 <col:9> 'void (int *, const limb *)' Function 0x22150964740 'felem_square' 'void (int *, const limb *)'
|   | | | |-ImplicitCastExpr 0x22150a3e6a0 <col:22> 'int *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x22150a3e618 <col:22> 'largefelem':'int [9]' lvalue Var 0x22150a3d8c0 'tmp' 'largefelem':'int [9]'
|   | | | `-ImplicitCastExpr 0x22150a3e6d0 <col:27> 'const limb *':'const limb *' <NoOp>
|   | | |   `-ImplicitCastExpr 0x22150a3e6b8 <col:27> 'limb *' <ArrayToPointerDecay>
|   | | |     `-DeclRefExpr 0x22150a3e638 <col:27> 'felem':'limb [9]' lvalue Var 0x22150a3d600 'ftmp5' 'felem':'limb [9]'
|   | | |-CallExpr 0x22150a3e760 <line:1195:9, col:36> 'void'
|   | | | |-ImplicitCastExpr 0x22150a3e748 <col:9> 'void (*)(int *, const limb *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x22150a3e6e8 <col:9> 'void (int *, const limb *)' Function 0x22150962298 'felem_diff_128_64' 'void (int *, const limb *)'
|   | | | |-ImplicitCastExpr 0x22150a3e790 <col:27> 'int *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x22150a3e708 <col:27> 'largefelem':'int [9]' lvalue Var 0x22150a3d8c0 'tmp' 'largefelem':'int [9]'
|   | | | `-ImplicitCastExpr 0x22150a3e7c0 <col:32> 'const limb *':'const limb *' <NoOp>
|   | | |   `-ImplicitCastExpr 0x22150a3e7a8 <col:32> 'limb *' <ArrayToPointerDecay>
|   | | |     `-DeclRefExpr 0x22150a3e728 <col:32> 'felem':'limb [9]' lvalue Var 0x22150a3d420 'ftmp' 'felem':'limb [9]'
|   | | |-CallExpr 0x22150a3e850 <line:1197:9, col:37> 'void'
|   | | | |-ImplicitCastExpr 0x22150a3e838 <col:9> 'void (*)(int *, const limb *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x22150a3e7d8 <col:9> 'void (int *, const limb *)' Function 0x22150962298 'felem_diff_128_64' 'void (int *, const limb *)'
|   | | | |-ImplicitCastExpr 0x22150a3e880 <col:27> 'int *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x22150a3e7f8 <col:27> 'largefelem':'int [9]' lvalue Var 0x22150a3d8c0 'tmp' 'largefelem':'int [9]'
|   | | | `-ImplicitCastExpr 0x22150a3e8b0 <col:32> 'const limb *':'const limb *' <NoOp>
|   | | |   `-ImplicitCastExpr 0x22150a3e898 <col:32> 'limb *' <ArrayToPointerDecay>
|   | | |     `-DeclRefExpr 0x22150a3e818 <col:32> 'felem':'limb [9]' lvalue Var 0x22150a3d498 'ftmp2' 'felem':'limb [9]'
|   | | |-CallExpr 0x22150a3e940 <line:1199:9, col:32> 'void'
|   | | | |-ImplicitCastExpr 0x22150a3e928 <col:9> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x22150a3e8c8 <col:9> 'void (limb *, const int *)' Function 0x2215096a398 'felem_reduce' 'void (limb *, const int *)'
|   | | | |-ImplicitCastExpr 0x22150a3e970 <col:22> 'limb *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x22150a3e8e8 <col:22> 'felem':'limb [9]' lvalue Var 0x22150a3d600 'ftmp5' 'felem':'limb [9]'
|   | | | `-ImplicitCastExpr 0x22150a3e9a0 <col:29> 'const int *':'const int *' <NoOp>
|   | | |   `-ImplicitCastExpr 0x22150a3e988 <col:29> 'int *' <ArrayToPointerDecay>
|   | | |     `-DeclRefExpr 0x22150a3e908 <col:29> 'largefelem':'int [9]' lvalue Var 0x22150a3d8c0 'tmp' 'largefelem':'int [9]'
|   | | |-CallExpr 0x22150a3ea50 <line:1202:9, col:33> 'void'
|   | | | |-ImplicitCastExpr 0x22150a3ea38 <col:9> 'void (*)(int *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x22150a3e9b8 <col:9> 'void (int *, const limb *, const limb *)' Function 0x22150966d78 'felem_mul' 'void (int *, const limb *, const limb *)'
|   | | | |-ImplicitCastExpr 0x22150a3ea88 <col:19> 'int *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x22150a3e9d8 <col:19> 'largefelem':'int [9]' lvalue Var 0x22150a3d8c0 'tmp' 'largefelem':'int [9]'
|   | | | |-ImplicitCastExpr 0x22150a3eab8 <col:24> 'const limb *':'const limb *' <NoOp>
|   | | | | `-ImplicitCastExpr 0x22150a3eaa0 <col:24> 'limb *' <ArrayToPointerDecay>
|   | | | |   `-DeclRefExpr 0x22150a3e9f8 <col:24> 'felem':'limb [9]' lvalue Var 0x22150a3d498 'ftmp2' 'felem':'limb [9]'
|   | | | `-ImplicitCastExpr 0x22150a3ead0 <col:31> 'const limb *':'const limb *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x22150a3ea18 <col:31> 'const limb *':'const limb *' lvalue ParmVar 0x22150a3d040 'z2' 'const limb *':'const limb *'
|   | | |-CallExpr 0x22150a3eb60 <line:1203:9, col:32> 'void'
|   | | | |-ImplicitCastExpr 0x22150a3eb48 <col:9> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x22150a3eae8 <col:9> 'void (limb *, const int *)' Function 0x2215096a398 'felem_reduce' 'void (limb *, const int *)'
|   | | | |-ImplicitCastExpr 0x22150a3eb90 <col:22> 'limb *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x22150a3eb08 <col:22> 'felem':'limb [9]' lvalue Var 0x22150a3d498 'ftmp2' 'felem':'limb [9]'
|   | | | `-ImplicitCastExpr 0x22150a3ebc0 <col:29> 'const int *':'const int *' <NoOp>
|   | | |   `-ImplicitCastExpr 0x22150a3eba8 <col:29> 'int *' <ArrayToPointerDecay>
|   | | |     `-DeclRefExpr 0x22150a3eb28 <col:29> 'largefelem':'int [9]' lvalue Var 0x22150a3d8c0 'tmp' 'largefelem':'int [9]'
|   | | |-CallExpr 0x22150a3ec70 <line:1206:9, col:33> 'void'
|   | | | |-ImplicitCastExpr 0x22150a3ec58 <col:9> 'void (*)(int *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x22150a3ebd8 <col:9> 'void (int *, const limb *, const limb *)' Function 0x22150966d78 'felem_mul' 'void (int *, const limb *, const limb *)'
|   | | | |-ImplicitCastExpr 0x22150a3eca8 <col:19> 'int *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x22150a3ebf8 <col:19> 'largefelem':'int [9]' lvalue Var 0x22150a3d8c0 'tmp' 'largefelem':'int [9]'
|   | | | |-ImplicitCastExpr 0x22150a3ecc0 <col:24> 'const limb *':'const limb *' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x22150a3ec18 <col:24> 'const limb *':'const limb *' lvalue ParmVar 0x22150a40da0 'y1' 'const limb *':'const limb *'
|   | | | `-ImplicitCastExpr 0x22150a3ecf0 <col:28> 'const limb *':'const limb *' <NoOp>
|   | | |   `-ImplicitCastExpr 0x22150a3ecd8 <col:28> 'limb *' <ArrayToPointerDecay>
|   | | |     `-DeclRefExpr 0x22150a3ec38 <col:28> 'felem':'limb [9]' lvalue Var 0x22150a3d498 'ftmp2' 'felem':'limb [9]'
|   | | `-CallExpr 0x22150a3ed98 <line:1207:9, col:32> 'void'
|   | |   |-ImplicitCastExpr 0x22150a3ed80 <col:9> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x22150a3ed08 <col:9> 'void (limb *, const int *)' Function 0x2215096a398 'felem_reduce' 'void (limb *, const int *)'
|   | |   |-ImplicitCastExpr 0x22150a3edc8 <col:22> 'limb *' <ArrayToPointerDecay>
|   | |   | `-DeclRefExpr 0x22150a3ed28 <col:22> 'felem':'limb [9]' lvalue Var 0x22150a3d678 'ftmp6' 'felem':'limb [9]'
|   | |   `-ImplicitCastExpr 0x22150a3edf8 <col:29> 'const int *':'const int *' <NoOp>
|   | |     `-ImplicitCastExpr 0x22150a3ede0 <col:29> 'int *' <ArrayToPointerDecay>
|   | |       `-DeclRefExpr 0x22150a3ed60 <col:29> 'largefelem':'int [9]' lvalue Var 0x22150a3d8c0 'tmp' 'largefelem':'int [9]'
|   | `-CompoundStmt 0x22150a41168 <line:1208:12, line:1221:5>
|   |   |-CallExpr 0x22150a3ef08 <line:1214:9, col:31> 'void'
|   |   | |-ImplicitCastExpr 0x22150a3eef0 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x22150a3ee90 <col:9> 'void (limb *, const limb *)' Function 0x2215095b168 'felem_assign' 'void (limb *, const limb *)'
|   |   | |-ImplicitCastExpr 0x22150a3ef38 <col:22> 'limb *' <ArrayToPointerDecay>
|   |   | | `-DeclRefExpr 0x22150a3eeb0 <col:22> 'felem':'limb [9]' lvalue Var 0x22150a3d510 'ftmp3' 'felem':'limb [9]'
|   |   | `-ImplicitCastExpr 0x22150a3ef50 <col:29> 'const limb *':'const limb *' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x22150a3eed0 <col:29> 'const limb *':'const limb *' lvalue ParmVar 0x22150a40d28 'x1' 'const limb *':'const limb *'
|   |   |-CallExpr 0x22150a3f008 <line:1217:9, col:34> 'void'
|   |   | |-ImplicitCastExpr 0x22150a3eff0 <col:9> 'void (*)(limb *, const limb *, limb)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x22150a3ef68 <col:9> 'void (limb *, const limb *, limb)' Function 0x2215095cdf8 'felem_scalar' 'void (limb *, const limb *, limb)'
|   |   | |-ImplicitCastExpr 0x22150a41060 <col:22> 'limb *' <ArrayToPointerDecay>
|   |   | | `-DeclRefExpr 0x22150a3ef88 <col:22> 'felem':'limb [9]' lvalue Var 0x22150a3d600 'ftmp5' 'felem':'limb [9]'
|   |   | |-ImplicitCastExpr 0x22150a41078 <col:29> 'const limb *':'const limb *' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x22150a3efa8 <col:29> 'const limb *':'const limb *' lvalue ParmVar 0x22150a40e18 'z1' 'const limb *':'const limb *'
|   |   | `-IntegerLiteral 0x22150a3efc8 <col:33> 'int' 2
|   |   `-CallExpr 0x22150a41108 <line:1220:9, col:31> 'void'
|   |     |-ImplicitCastExpr 0x22150a410f0 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x22150a41090 <col:9> 'void (limb *, const limb *)' Function 0x2215095b168 'felem_assign' 'void (limb *, const limb *)'
|   |     |-ImplicitCastExpr 0x22150a41138 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x22150a410b0 <col:22> 'felem':'limb [9]' lvalue Var 0x22150a3d678 'ftmp6' 'felem':'limb [9]'
|   |     `-ImplicitCastExpr 0x22150a41150 <col:29> 'const limb *':'const limb *' <LValueToRValue>
|   |       `-DeclRefExpr 0x22150a410d0 <col:29> 'const limb *':'const limb *' lvalue ParmVar 0x22150a40da0 'y1' 'const limb *':'const limb *'
|   |-CallExpr 0x22150a41250 <line:1224:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x22150a41238 <col:5> 'void (*)(int *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a411b8 <col:5> 'void (int *, const limb *, const limb *)' Function 0x22150966d78 'felem_mul' 'void (int *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x22150a41288 <col:15> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a411d8 <col:15> 'largefelem':'int [9]' lvalue Var 0x22150a3d8c0 'tmp' 'largefelem':'int [9]'
|   | |-ImplicitCastExpr 0x22150a412a0 <col:20> 'const limb *':'const limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x22150a411f8 <col:20> 'const limb *':'const limb *' lvalue ParmVar 0x22150a40f10 'x2' 'const limb *':'const limb *'
|   | `-ImplicitCastExpr 0x22150a412d0 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150a412b8 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x22150a41218 <col:24> 'felem':'limb [9]' lvalue Var 0x22150a3d420 'ftmp' 'felem':'limb [9]'
|   |-CallExpr 0x22150a41360 <line:1228:5, col:33> 'void'
|   | |-ImplicitCastExpr 0x22150a41348 <col:5> 'void (*)(int *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a412e8 <col:5> 'void (int *, const limb *)' Function 0x22150962298 'felem_diff_128_64' 'void (int *, const limb *)'
|   | |-ImplicitCastExpr 0x22150a41390 <col:23> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a41308 <col:23> 'largefelem':'int [9]' lvalue Var 0x22150a3d8c0 'tmp' 'largefelem':'int [9]'
|   | `-ImplicitCastExpr 0x22150a413c0 <col:28> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150a413a8 <col:28> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x22150a41328 <col:28> 'felem':'limb [9]' lvalue Var 0x22150a3d510 'ftmp3' 'felem':'limb [9]'
|   |-CallExpr 0x22150a41468 <line:1230:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x22150a41450 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a413d8 <col:5> 'void (limb *, const int *)' Function 0x2215096a398 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x22150a41498 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a413f8 <col:18> 'felem':'limb [9]' lvalue Var 0x22150a3d588 'ftmp4' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x22150a414c8 <col:25> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150a414b0 <col:25> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x22150a41430 <col:25> 'largefelem':'int [9]' lvalue Var 0x22150a3d8c0 'tmp' 'largefelem':'int [9]'
|   |-BinaryOperator 0x22150a415c8 <line:1232:5, col:34> 'limb':'int' '='
|   | |-DeclRefExpr 0x22150a414e0 <col:5> 'limb':'int' lvalue Var 0x22150a3d9e0 'x_equal' 'limb':'int'
|   | `-CallExpr 0x22150a41570 <col:15, col:34> 'limb':'int'
|   |   |-ImplicitCastExpr 0x22150a41558 <col:15> 'limb (*)(const limb *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x22150a41518 <col:15> 'limb (const limb *)' Function 0x22150a2ff58 'felem_is_zero' 'limb (const limb *)'
|   |   `-ImplicitCastExpr 0x22150a415b0 <col:29> 'const limb *':'const limb *' <NoOp>
|   |     `-ImplicitCastExpr 0x22150a41598 <col:29> 'limb *' <ArrayToPointerDecay>
|   |       `-DeclRefExpr 0x22150a41538 <col:29> 'felem':'limb [9]' lvalue Var 0x22150a3d588 'ftmp4' 'felem':'limb [9]'
|   |-CallExpr 0x22150a41680 <line:1235:5, col:32> 'void'
|   | |-ImplicitCastExpr 0x22150a41668 <col:5> 'void (*)(int *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a415e8 <col:5> 'void (int *, const limb *, const limb *)' Function 0x22150966d78 'felem_mul' 'void (int *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x22150a416b8 <col:15> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a41608 <col:15> 'largefelem':'int [9]' lvalue Var 0x22150a3d8c0 'tmp' 'largefelem':'int [9]'
|   | |-ImplicitCastExpr 0x22150a416e8 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x22150a416d0 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x22150a41628 <col:20> 'felem':'limb [9]' lvalue Var 0x22150a3d600 'ftmp5' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x22150a41718 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150a41700 <col:27> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x22150a41648 <col:27> 'felem':'limb [9]' lvalue Var 0x22150a3d588 'ftmp4' 'felem':'limb [9]'
|   |-CallExpr 0x22150a417c0 <line:1236:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x22150a417a8 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a41730 <col:5> 'void (limb *, const int *)' Function 0x2215096a398 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x22150a417f0 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a41750 <col:18> 'felem':'limb [9]' lvalue Var 0x22150a3d7e0 'z_out' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x22150a41820 <col:25> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150a41808 <col:25> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x22150a41788 <col:25> 'largefelem':'int [9]' lvalue Var 0x22150a3d8c0 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x22150a418d0 <line:1239:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x22150a418b8 <col:5> 'void (*)(int *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a41838 <col:5> 'void (int *, const limb *, const limb *)' Function 0x22150966d78 'felem_mul' 'void (int *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x22150a41908 <col:15> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a41858 <col:15> 'largefelem':'int [9]' lvalue Var 0x22150a3d8c0 'tmp' 'largefelem':'int [9]'
|   | |-ImplicitCastExpr 0x22150a41938 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x22150a41920 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x22150a41878 <col:20> 'felem':'limb [9]' lvalue Var 0x22150a3d420 'ftmp' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x22150a41950 <col:26> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x22150a41898 <col:26> 'const limb *':'const limb *' lvalue ParmVar 0x22150a40e18 'z1' 'const limb *':'const limb *'
|   |-CallExpr 0x22150a419e0 <line:1240:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x22150a419c8 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a41968 <col:5> 'void (limb *, const int *)' Function 0x2215096a398 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x22150a41a10 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a41988 <col:18> 'felem':'limb [9]' lvalue Var 0x22150a3d420 'ftmp' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x22150a41a40 <col:24> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150a41a28 <col:24> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x22150a419a8 <col:24> 'largefelem':'int [9]' lvalue Var 0x22150a3d8c0 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x22150a41af0 <line:1243:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x22150a41ad8 <col:5> 'void (*)(int *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a41a58 <col:5> 'void (int *, const limb *, const limb *)' Function 0x22150966d78 'felem_mul' 'void (int *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x22150a41b28 <col:15> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a41a78 <col:15> 'largefelem':'int [9]' lvalue Var 0x22150a3d8c0 'tmp' 'largefelem':'int [9]'
|   | |-ImplicitCastExpr 0x22150a41b40 <col:20> 'const limb *':'const limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x22150a41a98 <col:20> 'const limb *':'const limb *' lvalue ParmVar 0x22150a40f88 'y2' 'const limb *':'const limb *'
|   | `-ImplicitCastExpr 0x22150a41b70 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150a41b58 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x22150a41ab8 <col:24> 'felem':'limb [9]' lvalue Var 0x22150a3d420 'ftmp' 'felem':'limb [9]'
|   |-CallExpr 0x22150a41c00 <line:1247:5, col:33> 'void'
|   | |-ImplicitCastExpr 0x22150a41be8 <col:5> 'void (*)(int *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a41b88 <col:5> 'void (int *, const limb *)' Function 0x22150962298 'felem_diff_128_64' 'void (int *, const limb *)'
|   | |-ImplicitCastExpr 0x22150a41c30 <col:23> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a41ba8 <col:23> 'largefelem':'int [9]' lvalue Var 0x22150a3d8c0 'tmp' 'largefelem':'int [9]'
|   | `-ImplicitCastExpr 0x22150a41c60 <col:28> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150a41c48 <col:28> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x22150a41bc8 <col:28> 'felem':'limb [9]' lvalue Var 0x22150a3d678 'ftmp6' 'felem':'limb [9]'
|   |-CallExpr 0x22150a41cf0 <line:1249:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x22150a41cd8 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a41c78 <col:5> 'void (limb *, const int *)' Function 0x2215096a398 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x22150a41d20 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a41c98 <col:18> 'felem':'limb [9]' lvalue Var 0x22150a3d600 'ftmp5' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x22150a41d50 <col:25> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150a41d38 <col:25> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x22150a41cb8 <col:25> 'largefelem':'int [9]' lvalue Var 0x22150a3d8c0 'tmp' 'largefelem':'int [9]'
|   |-BinaryOperator 0x22150a41e50 <line:1250:5, col:34> 'limb':'int' '='
|   | |-DeclRefExpr 0x22150a41d68 <col:5> 'limb':'int' lvalue Var 0x22150a3da58 'y_equal' 'limb':'int'
|   | `-CallExpr 0x22150a41df8 <col:15, col:34> 'limb':'int'
|   |   |-ImplicitCastExpr 0x22150a41de0 <col:15> 'limb (*)(const limb *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x22150a41da0 <col:15> 'limb (const limb *)' Function 0x22150a2ff58 'felem_is_zero' 'limb (const limb *)'
|   |   `-ImplicitCastExpr 0x22150a41e38 <col:29> 'const limb *':'const limb *' <NoOp>
|   |     `-ImplicitCastExpr 0x22150a41e20 <col:29> 'limb *' <ArrayToPointerDecay>
|   |       `-DeclRefExpr 0x22150a41dc0 <col:29> 'felem':'limb [9]' lvalue Var 0x22150a3d600 'ftmp5' 'felem':'limb [9]'
|   |-CallExpr 0x22150a41ef0 <line:1251:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x22150a41ed8 <col:5> 'void (*)(limb *, limb)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a41e70 <col:5> 'void (limb *, limb)' Function 0x2215095df28 'felem_scalar64' 'void (limb *, limb)'
|   | |-ImplicitCastExpr 0x22150a41f20 <col:20> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a41e90 <col:20> 'felem':'limb [9]' lvalue Var 0x22150a3d600 'ftmp5' 'felem':'limb [9]'
|   | `-IntegerLiteral 0x22150a41eb0 <col:27> 'int' 2
|   |-IfStmt 0x22150a42310 <line:1254:5, line:1257:5>
|   | |-BinaryOperator 0x22150a42088 <line:1254:9, col:47> 'int' '&&'
|   | | |-BinaryOperator 0x22150a42018 <col:9, col:32> 'int' '&&'
|   | | | |-BinaryOperator 0x22150a41fa8 <col:9, col:20> 'int' '&&'
|   | | | | |-ImplicitCastExpr 0x22150a41f78 <col:9> 'limb':'int' <LValueToRValue>
|   | | | | | `-DeclRefExpr 0x22150a41f38 <col:9> 'limb':'int' lvalue Var 0x22150a3d9e0 'x_equal' 'limb':'int'
|   | | | | `-ImplicitCastExpr 0x22150a41f90 <col:20> 'limb':'int' <LValueToRValue>
|   | | | |   `-DeclRefExpr 0x22150a41f58 <col:20> 'limb':'int' lvalue Var 0x22150a3da58 'y_equal' 'limb':'int'
|   | | | `-UnaryOperator 0x22150a42000 <col:31, col:32> 'int' prefix '!' cannot overflow
|   | | |   `-ImplicitCastExpr 0x22150a41fe8 <col:32> 'limb':'int' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x22150a41fc8 <col:32> 'limb':'int' lvalue Var 0x22150a3dad0 'z1_is_zero' 'limb':'int'
|   | | `-UnaryOperator 0x22150a42070 <col:46, col:47> 'int' prefix '!' cannot overflow
|   | |   `-ImplicitCastExpr 0x22150a42058 <col:47> 'limb':'int' <LValueToRValue>
|   | |     `-DeclRefExpr 0x22150a42038 <col:47> 'limb':'int' lvalue Var 0x22150a3db48 'z2_is_zero' 'limb':'int'
|   | `-CompoundStmt 0x22150a422f0 <col:59, line:1257:5>
|   |   |-CallExpr 0x22150a42200 <line:1255:9, col:44> 'void'
|   |   | |-ImplicitCastExpr 0x22150a421e8 <col:9> 'void (*)(limb *, limb *, limb *, const limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x22150a420a8 <col:9> 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *)' Function 0x22150a2bd78 'point_double' 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *)'
|   |   | |-ImplicitCastExpr 0x22150a42250 <col:22> 'limb *':'limb *' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x22150a420c8 <col:22> 'limb *':'limb *' lvalue ParmVar 0x22150a40bc0 'x3' 'limb *':'limb *'
|   |   | |-ImplicitCastExpr 0x22150a42268 <col:26> 'limb *':'limb *' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x22150a420e8 <col:26> 'limb *':'limb *' lvalue ParmVar 0x22150a40c38 'y3' 'limb *':'limb *'
|   |   | |-ImplicitCastExpr 0x22150a42280 <col:30> 'limb *':'limb *' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x22150a42108 <col:30> 'limb *':'limb *' lvalue ParmVar 0x22150a40cb0 'z3' 'limb *':'limb *'
|   |   | |-ImplicitCastExpr 0x22150a42298 <col:34> 'const limb *':'const limb *' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x22150a42128 <col:34> 'const limb *':'const limb *' lvalue ParmVar 0x22150a40d28 'x1' 'const limb *':'const limb *'
|   |   | |-ImplicitCastExpr 0x22150a422b0 <col:38> 'const limb *':'const limb *' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x22150a42148 <col:38> 'const limb *':'const limb *' lvalue ParmVar 0x22150a40da0 'y1' 'const limb *':'const limb *'
|   |   | `-ImplicitCastExpr 0x22150a422c8 <col:42> 'const limb *':'const limb *' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x22150a42168 <col:42> 'const limb *':'const limb *' lvalue ParmVar 0x22150a40e18 'z1' 'const limb *':'const limb *'
|   |   `-ReturnStmt 0x22150a422e0 <line:1256:9>
|   |-CallExpr 0x22150a423a0 <line:1260:5, col:29> 'void'
|   | |-ImplicitCastExpr 0x22150a42388 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a42328 <col:5> 'void (limb *, const limb *)' Function 0x2215095b168 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x22150a423d0 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a42348 <col:18> 'felem':'limb [9]' lvalue Var 0x22150a3d420 'ftmp' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x22150a42400 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150a423e8 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x22150a42368 <col:24> 'felem':'limb [9]' lvalue Var 0x22150a3d588 'ftmp4' 'felem':'limb [9]'
|   |-CallExpr 0x22150a42498 <line:1261:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x22150a42480 <col:5> 'void (*)(limb *, limb)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a42418 <col:5> 'void (limb *, limb)' Function 0x2215095df28 'felem_scalar64' 'void (limb *, limb)'
|   | |-ImplicitCastExpr 0x22150a424c8 <col:20> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a42438 <col:20> 'felem':'limb [9]' lvalue Var 0x22150a3d420 'ftmp' 'felem':'limb [9]'
|   | `-IntegerLiteral 0x22150a42458 <col:26> 'int' 2
|   |-CallExpr 0x22150a42558 <line:1263:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x22150a42540 <col:5> 'void (*)(int *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a424e0 <col:5> 'void (int *, const limb *)' Function 0x22150964740 'felem_square' 'void (int *, const limb *)'
|   | |-ImplicitCastExpr 0x22150a42588 <col:18> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a42500 <col:18> 'largefelem':'int [9]' lvalue Var 0x22150a3d8c0 'tmp' 'largefelem':'int [9]'
|   | `-ImplicitCastExpr 0x22150a425b8 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150a425a0 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x22150a42520 <col:23> 'felem':'limb [9]' lvalue Var 0x22150a3d420 'ftmp' 'felem':'limb [9]'
|   |-CallExpr 0x22150a42648 <line:1265:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x22150a42630 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a425d0 <col:5> 'void (limb *, const int *)' Function 0x2215096a398 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x22150a42678 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a425f0 <col:18> 'felem':'limb [9]' lvalue Var 0x22150a3d420 'ftmp' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x22150a426a8 <col:24> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150a42690 <col:24> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x22150a42610 <col:24> 'largefelem':'int [9]' lvalue Var 0x22150a3d8c0 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x22150a42758 <line:1268:5, col:31> 'void'
|   | |-ImplicitCastExpr 0x22150a42740 <col:5> 'void (*)(int *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a426c0 <col:5> 'void (int *, const limb *, const limb *)' Function 0x22150966d78 'felem_mul' 'void (int *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x22150a42790 <col:15> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a426e0 <col:15> 'largefelem':'int [9]' lvalue Var 0x22150a3d8c0 'tmp' 'largefelem':'int [9]'
|   | |-ImplicitCastExpr 0x22150a427c0 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x22150a427a8 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x22150a42700 <col:20> 'felem':'limb [9]' lvalue Var 0x22150a3d588 'ftmp4' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x22150a427f0 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150a427d8 <col:27> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x22150a42720 <col:27> 'felem':'limb [9]' lvalue Var 0x22150a3d420 'ftmp' 'felem':'limb [9]'
|   |-CallExpr 0x22150a42880 <line:1269:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x22150a42868 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a42808 <col:5> 'void (limb *, const int *)' Function 0x2215096a398 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x22150a428b0 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a42828 <col:18> 'felem':'limb [9]' lvalue Var 0x22150a3d498 'ftmp2' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x22150a428e0 <col:25> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150a428c8 <col:25> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x22150a42848 <col:25> 'largefelem':'int [9]' lvalue Var 0x22150a3d8c0 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x22150a42990 <line:1272:5, col:31> 'void'
|   | |-ImplicitCastExpr 0x22150a42978 <col:5> 'void (*)(int *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a428f8 <col:5> 'void (int *, const limb *, const limb *)' Function 0x22150966d78 'felem_mul' 'void (int *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x22150a429c8 <col:15> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a42918 <col:15> 'largefelem':'int [9]' lvalue Var 0x22150a3d8c0 'tmp' 'largefelem':'int [9]'
|   | |-ImplicitCastExpr 0x22150a429f8 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x22150a429e0 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x22150a42938 <col:20> 'felem':'limb [9]' lvalue Var 0x22150a3d510 'ftmp3' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x22150a42a28 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150a42a10 <col:27> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x22150a42958 <col:27> 'felem':'limb [9]' lvalue Var 0x22150a3d420 'ftmp' 'felem':'limb [9]'
|   |-CallExpr 0x22150a42ab8 <line:1273:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x22150a42aa0 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a42a40 <col:5> 'void (limb *, const int *)' Function 0x2215096a398 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x22150a42ae8 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a42a60 <col:18> 'felem':'limb [9]' lvalue Var 0x22150a3d588 'ftmp4' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x22150a42b18 <col:25> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150a42b00 <col:25> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x22150a42a80 <col:25> 'largefelem':'int [9]' lvalue Var 0x22150a3d8c0 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x22150a42ba8 <line:1276:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x22150a42b90 <col:5> 'void (*)(int *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a42b30 <col:5> 'void (int *, const limb *)' Function 0x22150964740 'felem_square' 'void (int *, const limb *)'
|   | |-ImplicitCastExpr 0x22150a42bd8 <col:18> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a42b50 <col:18> 'largefelem':'int [9]' lvalue Var 0x22150a3d8c0 'tmp' 'largefelem':'int [9]'
|   | `-ImplicitCastExpr 0x22150a42c08 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150a42bf0 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x22150a42b70 <col:23> 'felem':'limb [9]' lvalue Var 0x22150a3d600 'ftmp5' 'felem':'limb [9]'
|   |-CallExpr 0x22150a42c98 <line:1278:5, col:33> 'void'
|   | |-ImplicitCastExpr 0x22150a42c80 <col:5> 'void (*)(int *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a42c20 <col:5> 'void (int *, const limb *)' Function 0x22150962298 'felem_diff_128_64' 'void (int *, const limb *)'
|   | |-ImplicitCastExpr 0x22150a42cc8 <col:23> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a42c40 <col:23> 'largefelem':'int [9]' lvalue Var 0x22150a3d8c0 'tmp' 'largefelem':'int [9]'
|   | `-ImplicitCastExpr 0x22150a42cf8 <col:28> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150a42ce0 <col:28> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x22150a42c60 <col:28> 'felem':'limb [9]' lvalue Var 0x22150a3d498 'ftmp2' 'felem':'limb [9]'
|   |-CallExpr 0x22150a42d88 <line:1280:5, col:30> 'void'
|   | |-ImplicitCastExpr 0x22150a42d70 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a42d10 <col:5> 'void (limb *, const limb *)' Function 0x2215095b168 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x22150a42db8 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a42d30 <col:18> 'felem':'limb [9]' lvalue Var 0x22150a3d510 'ftmp3' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x22150a42de8 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150a42dd0 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x22150a42d50 <col:25> 'felem':'limb [9]' lvalue Var 0x22150a3d588 'ftmp4' 'felem':'limb [9]'
|   |-CallExpr 0x22150a42e80 <line:1281:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x22150a42e68 <col:5> 'void (*)(limb *, limb)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a42e00 <col:5> 'void (limb *, limb)' Function 0x2215095df28 'felem_scalar64' 'void (limb *, limb)'
|   | |-ImplicitCastExpr 0x22150a42eb0 <col:20> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a42e20 <col:20> 'felem':'limb [9]' lvalue Var 0x22150a3d588 'ftmp4' 'felem':'limb [9]'
|   | `-IntegerLiteral 0x22150a42e40 <col:27> 'int' 2
|   |-CallExpr 0x22150a42f40 <line:1283:5, col:33> 'void'
|   | |-ImplicitCastExpr 0x22150a42f28 <col:5> 'void (*)(int *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a42ec8 <col:5> 'void (int *, const limb *)' Function 0x22150962298 'felem_diff_128_64' 'void (int *, const limb *)'
|   | |-ImplicitCastExpr 0x22150a42f70 <col:23> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a42ee8 <col:23> 'largefelem':'int [9]' lvalue Var 0x22150a3d8c0 'tmp' 'largefelem':'int [9]'
|   | `-ImplicitCastExpr 0x22150a42fa0 <col:28> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150a42f88 <col:28> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x22150a42f08 <col:28> 'felem':'limb [9]' lvalue Var 0x22150a3d588 'ftmp4' 'felem':'limb [9]'
|   |-CallExpr 0x22150a3b030 <line:1285:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x22150a43030 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a42fb8 <col:5> 'void (limb *, const int *)' Function 0x2215096a398 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x22150a3b060 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a42fd8 <col:18> 'felem':'limb [9]' lvalue Var 0x22150a3d6f0 'x_out' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x22150a3b090 <col:25> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150a3b078 <col:25> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x22150a43010 <col:25> 'largefelem':'int [9]' lvalue Var 0x22150a3d8c0 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x22150a3b120 <line:1288:5, col:30> 'void'
|   | |-ImplicitCastExpr 0x22150a3b108 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a3b0a8 <col:5> 'void (limb *, const limb *)' Function 0x22150960b60 'felem_diff64' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x22150a3b150 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a3b0c8 <col:18> 'felem':'limb [9]' lvalue Var 0x22150a3d510 'ftmp3' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x22150a3b180 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150a3b168 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x22150a3b0e8 <col:25> 'felem':'limb [9]' lvalue Var 0x22150a3d6f0 'x_out' 'felem':'limb [9]'
|   |-CallExpr 0x22150a3b230 <line:1292:5, col:32> 'void'
|   | |-ImplicitCastExpr 0x22150a3b218 <col:5> 'void (*)(int *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a3b198 <col:5> 'void (int *, const limb *, const limb *)' Function 0x22150966d78 'felem_mul' 'void (int *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x22150a3b268 <col:15> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a3b1b8 <col:15> 'largefelem':'int [9]' lvalue Var 0x22150a3d8c0 'tmp' 'largefelem':'int [9]'
|   | |-ImplicitCastExpr 0x22150a3b298 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x22150a3b280 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x22150a3b1d8 <col:20> 'felem':'limb [9]' lvalue Var 0x22150a3d600 'ftmp5' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x22150a3b2c8 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150a3b2b0 <col:27> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x22150a3b1f8 <col:27> 'felem':'limb [9]' lvalue Var 0x22150a3d510 'ftmp3' 'felem':'limb [9]'
|   |-CallExpr 0x22150a3b390 <line:1294:5, col:33> 'void'
|   | |-ImplicitCastExpr 0x22150a3b378 <col:5> 'void (*)(int *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a3b2e0 <col:5> 'void (int *, const limb *, const limb *)' Function 0x22150966d78 'felem_mul' 'void (int *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x22150a3b3c8 <col:15> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a3b300 <col:15> 'largefelem':'int [9]' lvalue Var 0x22150a3d938 'tmp2' 'largefelem':'int [9]'
|   | |-ImplicitCastExpr 0x22150a3b3f8 <col:21> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x22150a3b3e0 <col:21> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x22150a3b338 <col:21> 'felem':'limb [9]' lvalue Var 0x22150a3d678 'ftmp6' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x22150a3b428 <col:28> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150a3b410 <col:28> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x22150a3b358 <col:28> 'felem':'limb [9]' lvalue Var 0x22150a3d498 'ftmp2' 'felem':'limb [9]'
|   |-CallExpr 0x22150a3b4c0 <line:1296:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x22150a3b4a8 <col:5> 'void (*)(int *, limb)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a3b440 <col:5> 'void (int *, limb)' Function 0x2215095ea48 'felem_scalar128' 'void (int *, limb)'
|   | |-ImplicitCastExpr 0x22150a3b4f0 <col:21> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a3b460 <col:21> 'largefelem':'int [9]' lvalue Var 0x22150a3d938 'tmp2' 'largefelem':'int [9]'
|   | `-IntegerLiteral 0x22150a3b480 <col:27> 'int' 2
|   |-CallExpr 0x22150a3b580 <line:1298:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x22150a3b568 <col:5> 'void (*)(int *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a3b508 <col:5> 'void (int *, const int *)' Function 0x22150963a38 'felem_diff128' 'void (int *, const int *)'
|   | |-ImplicitCastExpr 0x22150a3b5b0 <col:19> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a3b528 <col:19> 'largefelem':'int [9]' lvalue Var 0x22150a3d8c0 'tmp' 'largefelem':'int [9]'
|   | `-ImplicitCastExpr 0x22150a3b5e0 <col:24> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150a3b5c8 <col:24> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x22150a3b548 <col:24> 'largefelem':'int [9]' lvalue Var 0x22150a3d938 'tmp2' 'largefelem':'int [9]'
|   |-CallExpr 0x22150a3b688 <line:1304:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x22150a3b670 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a3b5f8 <col:5> 'void (limb *, const int *)' Function 0x2215096a398 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x22150a3b6b8 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a3b618 <col:18> 'felem':'limb [9]' lvalue Var 0x22150a3d768 'y_out' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x22150a3b6e8 <col:25> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150a3b6d0 <col:25> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x22150a3b650 <col:25> 'largefelem':'int [9]' lvalue Var 0x22150a3d8c0 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x22150a3b798 <line:1306:5, col:43> 'void'
|   | |-ImplicitCastExpr 0x22150a3b780 <col:5> 'void (*)(limb *, const limb *, limb)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a3b700 <col:5> 'void (limb *, const limb *, limb)' Function 0x22150a40498 'copy_conditional' 'void (limb *, const limb *, limb)'
|   | |-ImplicitCastExpr 0x22150a3b7d0 <col:22> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a3b720 <col:22> 'felem':'limb [9]' lvalue Var 0x22150a3d6f0 'x_out' 'felem':'limb [9]'
|   | |-ImplicitCastExpr 0x22150a3b7e8 <col:29> 'const limb *':'const limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x22150a3b740 <col:29> 'const limb *':'const limb *' lvalue ParmVar 0x22150a40f10 'x2' 'const limb *':'const limb *'
|   | `-ImplicitCastExpr 0x22150a3b800 <col:33> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x22150a3b760 <col:33> 'limb':'int' lvalue Var 0x22150a3dad0 'z1_is_zero' 'limb':'int'
|   |-CallExpr 0x22150a3b8b0 <line:1307:5, col:43> 'void'
|   | |-ImplicitCastExpr 0x22150a3b898 <col:5> 'void (*)(limb *, const limb *, limb)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a3b818 <col:5> 'void (limb *, const limb *, limb)' Function 0x22150a40498 'copy_conditional' 'void (limb *, const limb *, limb)'
|   | |-ImplicitCastExpr 0x22150a3b8e8 <col:22> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a3b838 <col:22> 'felem':'limb [9]' lvalue Var 0x22150a3d6f0 'x_out' 'felem':'limb [9]'
|   | |-ImplicitCastExpr 0x22150a3b900 <col:29> 'const limb *':'const limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x22150a3b858 <col:29> 'const limb *':'const limb *' lvalue ParmVar 0x22150a40d28 'x1' 'const limb *':'const limb *'
|   | `-ImplicitCastExpr 0x22150a3b918 <col:33> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x22150a3b878 <col:33> 'limb':'int' lvalue Var 0x22150a3db48 'z2_is_zero' 'limb':'int'
|   |-CallExpr 0x22150a3b9c8 <line:1308:5, col:43> 'void'
|   | |-ImplicitCastExpr 0x22150a3b9b0 <col:5> 'void (*)(limb *, const limb *, limb)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a3b930 <col:5> 'void (limb *, const limb *, limb)' Function 0x22150a40498 'copy_conditional' 'void (limb *, const limb *, limb)'
|   | |-ImplicitCastExpr 0x22150a3ba00 <col:22> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a3b950 <col:22> 'felem':'limb [9]' lvalue Var 0x22150a3d768 'y_out' 'felem':'limb [9]'
|   | |-ImplicitCastExpr 0x22150a3ba18 <col:29> 'const limb *':'const limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x22150a3b970 <col:29> 'const limb *':'const limb *' lvalue ParmVar 0x22150a40f88 'y2' 'const limb *':'const limb *'
|   | `-ImplicitCastExpr 0x22150a3ba30 <col:33> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x22150a3b990 <col:33> 'limb':'int' lvalue Var 0x22150a3dad0 'z1_is_zero' 'limb':'int'
|   |-CallExpr 0x22150a3bae0 <line:1309:5, col:43> 'void'
|   | |-ImplicitCastExpr 0x22150a3bac8 <col:5> 'void (*)(limb *, const limb *, limb)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a3ba48 <col:5> 'void (limb *, const limb *, limb)' Function 0x22150a40498 'copy_conditional' 'void (limb *, const limb *, limb)'
|   | |-ImplicitCastExpr 0x22150a3bb18 <col:22> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a3ba68 <col:22> 'felem':'limb [9]' lvalue Var 0x22150a3d768 'y_out' 'felem':'limb [9]'
|   | |-ImplicitCastExpr 0x22150a3bb30 <col:29> 'const limb *':'const limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x22150a3ba88 <col:29> 'const limb *':'const limb *' lvalue ParmVar 0x22150a40da0 'y1' 'const limb *':'const limb *'
|   | `-ImplicitCastExpr 0x22150a3bb48 <col:33> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x22150a3baa8 <col:33> 'limb':'int' lvalue Var 0x22150a3db48 'z2_is_zero' 'limb':'int'
|   |-CallExpr 0x22150a3bbf8 <line:1310:5, col:43> 'void'
|   | |-ImplicitCastExpr 0x22150a3bbe0 <col:5> 'void (*)(limb *, const limb *, limb)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a3bb60 <col:5> 'void (limb *, const limb *, limb)' Function 0x22150a40498 'copy_conditional' 'void (limb *, const limb *, limb)'
|   | |-ImplicitCastExpr 0x22150a3bc30 <col:22> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a3bb80 <col:22> 'felem':'limb [9]' lvalue Var 0x22150a3d7e0 'z_out' 'felem':'limb [9]'
|   | |-ImplicitCastExpr 0x22150a3bc48 <col:29> 'const limb *':'const limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x22150a3bba0 <col:29> 'const limb *':'const limb *' lvalue ParmVar 0x22150a3d040 'z2' 'const limb *':'const limb *'
|   | `-ImplicitCastExpr 0x22150a3bc60 <col:33> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x22150a3bbc0 <col:33> 'limb':'int' lvalue Var 0x22150a3dad0 'z1_is_zero' 'limb':'int'
|   |-CallExpr 0x22150a3bd10 <line:1311:5, col:43> 'void'
|   | |-ImplicitCastExpr 0x22150a3bcf8 <col:5> 'void (*)(limb *, const limb *, limb)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a3bc78 <col:5> 'void (limb *, const limb *, limb)' Function 0x22150a40498 'copy_conditional' 'void (limb *, const limb *, limb)'
|   | |-ImplicitCastExpr 0x22150a3bd48 <col:22> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150a3bc98 <col:22> 'felem':'limb [9]' lvalue Var 0x22150a3d7e0 'z_out' 'felem':'limb [9]'
|   | |-ImplicitCastExpr 0x22150a3bd60 <col:29> 'const limb *':'const limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x22150a3bcb8 <col:29> 'const limb *':'const limb *' lvalue ParmVar 0x22150a40e18 'z1' 'const limb *':'const limb *'
|   | `-ImplicitCastExpr 0x22150a3bd78 <col:33> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x22150a3bcd8 <col:33> 'limb':'int' lvalue Var 0x22150a3db48 'z2_is_zero' 'limb':'int'
|   |-CallExpr 0x22150a3be08 <line:1312:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x22150a3bdf0 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a3bd90 <col:5> 'void (limb *, const limb *)' Function 0x2215095b168 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x22150a3be38 <col:18> 'limb *':'limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x22150a3bdb0 <col:18> 'limb *':'limb *' lvalue ParmVar 0x22150a40bc0 'x3' 'limb *':'limb *'
|   | `-ImplicitCastExpr 0x22150a3be68 <col:22> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150a3be50 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x22150a3bdd0 <col:22> 'felem':'limb [9]' lvalue Var 0x22150a3d6f0 'x_out' 'felem':'limb [9]'
|   |-CallExpr 0x22150a3bef8 <line:1313:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x22150a3bee0 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150a3be80 <col:5> 'void (limb *, const limb *)' Function 0x2215095b168 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x22150a3bf28 <col:18> 'limb *':'limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x22150a3bea0 <col:18> 'limb *':'limb *' lvalue ParmVar 0x22150a40c38 'y3' 'limb *':'limb *'
|   | `-ImplicitCastExpr 0x22150a3bf58 <col:22> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150a3bf40 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x22150a3bec0 <col:22> 'felem':'limb [9]' lvalue Var 0x22150a3d768 'y_out' 'felem':'limb [9]'
|   `-CallExpr 0x22150a3bfe8 <line:1314:5, col:27> 'void'
|     |-ImplicitCastExpr 0x22150a3bfd0 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x22150a3bf70 <col:5> 'void (limb *, const limb *)' Function 0x2215095b168 'felem_assign' 'void (limb *, const limb *)'
|     |-ImplicitCastExpr 0x22150a3c018 <col:18> 'limb *':'limb *' <LValueToRValue>
|     | `-DeclRefExpr 0x22150a3bf90 <col:18> 'limb *':'limb *' lvalue ParmVar 0x22150a40cb0 'z3' 'limb *':'limb *'
|     `-ImplicitCastExpr 0x22150a3c048 <col:22> 'const limb *':'const limb *' <NoOp>
|       `-ImplicitCastExpr 0x22150a3c030 <col:22> 'limb *' <ArrayToPointerDecay>
|         `-DeclRefExpr 0x22150a3bfb0 <col:22> 'felem':'limb [9]' lvalue Var 0x22150a3d7e0 'z_out' 'felem':'limb [9]'
|-VarDecl 0x22150a3c3a8 <line:1352:1, line:1461:1> line:1352:20 used gmul 'const felem [16][3]' static cinit
| `-InitListExpr 0x22150b308b8 <col:34, line:1461:1> 'const felem [16][3]'
|   |-InitListExpr 0x22150b309a8 <line:1353:1, line:1355:29> 'const felem [3]'
|   | |-InitListExpr 0x22150b30a10 <line:1353:2, col:28> 'const felem':'limb const[9]'
|   | | |-IntegerLiteral 0x22150a3c410 <col:3> 'int' 0
|   | | |-IntegerLiteral 0x22150a3c438 <col:6> 'int' 0
|   | | |-IntegerLiteral 0x22150a3c460 <col:9> 'int' 0
|   | | |-IntegerLiteral 0x22150a3c488 <col:12> 'int' 0
|   | | |-IntegerLiteral 0x22150a3c4b0 <col:15> 'int' 0
|   | | |-IntegerLiteral 0x22150a3c4d8 <col:18> 'int' 0
|   | | |-IntegerLiteral 0x22150a3c500 <col:21> 'int' 0
|   | | |-IntegerLiteral 0x22150a3c528 <col:24> 'int' 0
|   | | `-IntegerLiteral 0x22150a3c550 <col:27> 'int' 0
|   | |-InitListExpr 0x22150b30aa8 <line:1354:2, col:28> 'const felem':'limb const[9]'
|   | | |-IntegerLiteral 0x22150a3c600 <col:3> 'int' 0
|   | | |-IntegerLiteral 0x22150a3c628 <col:6> 'int' 0
|   | | |-IntegerLiteral 0x22150a3c650 <col:9> 'int' 0
|   | | |-IntegerLiteral 0x22150a3c678 <col:12> 'int' 0
|   | | |-IntegerLiteral 0x22150a3c6a0 <col:15> 'int' 0
|   | | |-IntegerLiteral 0x22150a3c6c8 <col:18> 'int' 0
|   | | |-IntegerLiteral 0x22150a3c6f0 <col:21> 'int' 0
|   | | |-IntegerLiteral 0x22150a3c718 <col:24> 'int' 0
|   | | `-IntegerLiteral 0x22150a3c740 <col:27> 'int' 0
|   | `-InitListExpr 0x22150b30b40 <line:1355:2, col:28> 'const felem':'limb const[9]'
|   |   |-IntegerLiteral 0x22150a3c7f0 <col:3> 'int' 0
|   |   |-IntegerLiteral 0x22150a3c818 <col:6> 'int' 0
|   |   |-IntegerLiteral 0x22150a3c840 <col:9> 'int' 0
|   |   |-IntegerLiteral 0x22150a3c868 <col:12> 'int' 0
|   |   |-IntegerLiteral 0x22150a3c890 <col:15> 'int' 0
|   |   |-IntegerLiteral 0x22150a3c8b8 <col:18> 'int' 0
|   |   |-IntegerLiteral 0x22150a3c8e0 <col:21> 'int' 0
|   |   |-IntegerLiteral 0x22150a3c908 <col:24> 'int' 0
|   |   `-IntegerLiteral 0x22150a3c930 <col:27> 'int' 0
|   |-InitListExpr 0x22150b30bf8 <line:1356:1, line:1362:29> 'const felem [3]'
|   | |-InitListExpr 0x22150b30c60 <line:1356:2, line:1358:61> 'const felem':'limb const[9]'
|   | | |-ImplicitCastExpr 0x22150b30ce8 <line:1356:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150a3ca38 <col:3> 'long long' 107662193291804006
|   | | |-ImplicitCastExpr 0x22150b30d00 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150a3ca60 <col:23> 'long long' 156764387973048062
|   | | |-ImplicitCastExpr 0x22150b30d18 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150a3ca88 <col:43> 'long long' 5200896066446132
|   | | |-ImplicitCastExpr 0x22150b30d30 <line:1357:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150a3cab0 <col:3> 'long long' 135037196563642487
|   | | |-ImplicitCastExpr 0x22150b30d48 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150a3cad8 <col:23> 'long long' 30202750027516766
|   | | |-ImplicitCastExpr 0x22150b30d60 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150a3cb00 <col:43> 'long long' 94555012806093784
|   | | |-ImplicitCastExpr 0x22150b30d78 <line:1358:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150a3cb28 <col:3> 'long long' 97746763129557904
|   | | |-ImplicitCastExpr 0x22150b30d90 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150a3cb50 <col:23> 'long long' 263238996462508174
|   | | `-ImplicitCastExpr 0x22150b30da8 <col:43> 'limb':'int' <IntegralCast>
|   | |   `-IntegerLiteral 0x22150a3cb78 <col:43> 'long long' 55878890433217540
|   | |-InitListExpr 0x22150b30dd0 <line:1359:2, line:1361:61> 'const felem':'limb const[9]'
|   | | |-ImplicitCastExpr 0x22150b28e48 <line:1359:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150a3cc28 <col:3> 'long long' 53643482783376976
|   | | |-ImplicitCastExpr 0x22150b28e60 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150a3cc50 <col:23> 'long long' 224091089528721442
|   | | |-ImplicitCastExpr 0x22150b28e78 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150a3cc78 <col:43> 'long long' 256727146720269139
|   | | |-ImplicitCastExpr 0x22150b28e90 <line:1360:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150a3cca0 <col:3> 'long long' 172680296574162242
|   | | |-ImplicitCastExpr 0x22150b28ea8 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150a3ccc8 <col:23> 'long long' 227218914761240178
|   | | |-ImplicitCastExpr 0x22150b28ec0 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150a3ccf0 <col:43> 'long long' 137026748380081989
|   | | |-ImplicitCastExpr 0x22150b28ed8 <line:1361:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150a3cd18 <col:3> 'long long' 275209519478621333
|   | | |-ImplicitCastExpr 0x22150b28ef0 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150a3cd40 <col:23> 'long long' 216191964133904561
|   | | `-ImplicitCastExpr 0x22150b28f08 <col:43> 'limb':'int' <IntegralCast>
|   | |   `-IntegerLiteral 0x22150a3cd68 <col:43> 'long long' 78875843521714747
|   | `-InitListExpr 0x22150b28f30 <line:1362:2, col:28> 'const felem':'limb const[9]'
|   |   |-IntegerLiteral 0x22150a3ce18 <col:3> 'int' 1
|   |   |-IntegerLiteral 0x22150a3ce40 <col:6> 'int' 0
|   |   |-IntegerLiteral 0x22150a3ce68 <col:9> 'int' 0
|   |   |-IntegerLiteral 0x22150a3ce90 <col:12> 'int' 0
|   |   |-IntegerLiteral 0x22150a3ceb8 <col:15> 'int' 0
|   |   |-IntegerLiteral 0x22150a3cee0 <col:18> 'int' 0
|   |   |-IntegerLiteral 0x22150a3cf08 <col:21> 'int' 0
|   |   |-IntegerLiteral 0x22150a3cf30 <col:24> 'int' 0
|   |   `-IntegerLiteral 0x22150a3cf58 <col:27> 'int' 0
|   |-InitListExpr 0x22150b28fe8 <line:1363:1, line:1369:29> 'const felem [3]'
|   | |-InitListExpr 0x22150b29050 <line:1363:2, line:1365:61> 'const felem':'limb const[9]'
|   | | |-ImplicitCastExpr 0x22150b290d8 <line:1363:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150a430c8 <col:3> 'long long' 248818024239815598
|   | | |-ImplicitCastExpr 0x22150b290f0 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150a430f0 <col:23> 'long long' 68439110785812081
|   | | |-ImplicitCastExpr 0x22150b29108 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150a43118 <col:43> 'long long' 69356082119435693
|   | | |-ImplicitCastExpr 0x22150b29120 <line:1364:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150a43140 <col:3> 'long long' 118944220382269095
|   | | |-ImplicitCastExpr 0x22150b29138 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150a43168 <col:23> 'long long' 143109813876409467
|   | | |-ImplicitCastExpr 0x22150b29150 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150a43190 <col:43> 'long long' 269301167522018126
|   | | |-ImplicitCastExpr 0x22150b29168 <line:1365:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150a431b8 <col:3> 'long long' 89759470938176146
|   | | |-ImplicitCastExpr 0x22150b29180 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150a431e0 <col:23> 'long long' 185784475424510077
|   | | `-ImplicitCastExpr 0x22150b29198 <col:43> 'limb':'int' <IntegralCast>
|   | |   `-IntegerLiteral 0x22150a43208 <col:43> 'long long' 67432608270484965
|   | |-InitListExpr 0x22150b291c0 <line:1366:2, line:1368:61> 'const felem':'limb const[9]'
|   | | |-ImplicitCastExpr 0x22150b29248 <line:1366:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150a432b8 <col:3> 'long long' 76969611682492792
|   | | |-ImplicitCastExpr 0x22150b29260 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150a432e0 <col:23> 'long long' 164834918331809094
|   | | |-ImplicitCastExpr 0x22150b29278 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150a43308 <col:43> 'long long' 242045298884155992
|   | | |-ImplicitCastExpr 0x22150b29290 <line:1367:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150a43330 <col:3> 'long long' 70238746073538723
|   | | |-ImplicitCastExpr 0x22150b292a8 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150a43358 <col:23> 'long long' 72587413832712611
|   | | |-ImplicitCastExpr 0x22150b292c0 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150a43380 <col:43> 'long long' 117657050261535340
|   | | |-ImplicitCastExpr 0x22150b292d8 <line:1368:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150a433a8 <col:3> 'long long' 213926679015513749
|   | | |-ImplicitCastExpr 0x22150b292f0 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150a433d0 <col:23> 'long long' 126075467209511292
|   | | `-ImplicitCastExpr 0x22150b29308 <col:43> 'limb':'int' <IntegralCast>
|   | |   `-IntegerLiteral 0x22150a433f8 <col:43> 'long long' 99087220106255799
|   | `-InitListExpr 0x22150b29330 <line:1369:2, col:28> 'const felem':'limb const[9]'
|   |   |-IntegerLiteral 0x22150a434a8 <col:3> 'int' 1
|   |   |-IntegerLiteral 0x22150a434d0 <col:6> 'int' 0
|   |   |-IntegerLiteral 0x22150a434f8 <col:9> 'int' 0
|   |   |-IntegerLiteral 0x22150a43520 <col:12> 'int' 0
|   |   |-IntegerLiteral 0x22150a43548 <col:15> 'int' 0
|   |   |-IntegerLiteral 0x22150a43570 <col:18> 'int' 0
|   |   |-IntegerLiteral 0x22150a43598 <col:21> 'int' 0
|   |   |-IntegerLiteral 0x22150a435c0 <col:24> 'int' 0
|   |   `-IntegerLiteral 0x22150a435e8 <col:27> 'int' 0
|   |-InitListExpr 0x22150b293e8 <line:1370:1, line:1376:29> 'const felem [3]'
|   | |-InitListExpr 0x22150b29450 <line:1370:2, line:1372:61> 'const felem':'limb const[9]'
|   | | |-ImplicitCastExpr 0x22150b294d8 <line:1370:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150a436f0 <col:3> 'long long' 85357026627631931
|   | | |-ImplicitCastExpr 0x22150b294f0 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150a43718 <col:23> 'long long' 275799397262170618
|   | | |-ImplicitCastExpr 0x22150b29508 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150a43740 <col:43> 'long long' 193031651880102003
|   | | |-ImplicitCastExpr 0x22150b29520 <line:1371:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150a43768 <col:3> 'long long' 59801716978586923
|   | | |-ImplicitCastExpr 0x22150b29538 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150a43790 <col:23> 'long long' 83964301881446114
|   | | |-ImplicitCastExpr 0x22150b29550 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150a437b8 <col:43> 'long long' 22840256528202508
|   | | |-ImplicitCastExpr 0x22150b29568 <line:1372:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150a437e0 <col:3> 'long long' 194081837314414388
|   | | |-ImplicitCastExpr 0x22150b29580 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150a43808 <col:23> 'long long' 222286351153865994
|   | | `-ImplicitCastExpr 0x22150b29598 <col:43> 'limb':'int' <IntegralCast>
|   | |   `-IntegerLiteral 0x22150a43830 <col:43> 'long long' 46355154457181625
|   | |-InitListExpr 0x22150b295c0 <line:1373:2, line:1375:61> 'const felem':'limb const[9]'
|   | | |-ImplicitCastExpr 0x22150b29648 <line:1373:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150a438e0 <col:3> 'long long' 5957637048075716
|   | | |-ImplicitCastExpr 0x22150b29660 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150a43908 <col:23> 'long long' 217369084467200750
|   | | |-ImplicitCastExpr 0x22150b29678 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150a43930 <col:43> 'long long' 28572585110612818
|   | | |-ImplicitCastExpr 0x22150b29690 <line:1374:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150a43958 <col:3> 'long long' 20635594340375821
|   | | |-ImplicitCastExpr 0x22150b296a8 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150a43980 <col:23> 'long long' 45349996332084175
|   | | |-ImplicitCastExpr 0x22150b296c0 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150a439a8 <col:43> 'long long' 203498249684330542
|   | | |-ImplicitCastExpr 0x22150b296d8 <line:1375:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150a439d0 <col:3> 'long long' 162628157059821241
|   | | |-ImplicitCastExpr 0x22150b296f0 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150a439f8 <col:23> 'long long' 254051537796193181
|   | | `-ImplicitCastExpr 0x22150b29708 <col:43> 'limb':'int' <IntegralCast>
|   | |   `-IntegerLiteral 0x22150a43a20 <col:43> 'long long' 142008485808234430
|   | `-InitListExpr 0x22150b29730 <line:1376:2, col:28> 'const felem':'limb const[9]'
|   |   |-IntegerLiteral 0x22150a43ad0 <col:3> 'int' 1
|   |   |-IntegerLiteral 0x22150a43af8 <col:6> 'int' 0
|   |   |-IntegerLiteral 0x22150a43b20 <col:9> 'int' 0
|   |   |-IntegerLiteral 0x22150a43b48 <col:12> 'int' 0
|   |   |-IntegerLiteral 0x22150a43b70 <col:15> 'int' 0
|   |   |-IntegerLiteral 0x22150a43b98 <col:18> 'int' 0
|   |   |-IntegerLiteral 0x22150a43bc0 <col:21> 'int' 0
|   |   |-IntegerLiteral 0x22150a43be8 <col:24> 'int' 0
|   |   `-IntegerLiteral 0x22150a43c10 <col:27> 'int' 0
|   |-InitListExpr 0x22150b297e8 <line:1377:1, line:1383:29> 'const felem [3]'
|   | |-InitListExpr 0x22150b29850 <line:1377:2, line:1379:61> 'const felem':'limb const[9]'
|   | | |-ImplicitCastExpr 0x22150b298d8 <line:1377:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150a43d18 <col:3> 'long long' 115699669707084877
|   | | |-ImplicitCastExpr 0x22150b298f0 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150a43d40 <col:23> 'long long' 27658917167077339
|   | | |-ImplicitCastExpr 0x22150b29908 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150a43d68 <col:43> 'long long' 211173019325442770
|   | | |-ImplicitCastExpr 0x22150b29920 <line:1378:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150a43d90 <col:3> 'long long' 58508949711035917
|   | | |-ImplicitCastExpr 0x22150b29938 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150a43db8 <col:23> 'long long' 176133006176578449
|   | | |-ImplicitCastExpr 0x22150b29950 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150a43de0 <col:43> 'long long' 286004766719919457
|   | | |-ImplicitCastExpr 0x22150b29968 <line:1379:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150a43e08 <col:3> 'long long' 284694387565934236
|   | | |-ImplicitCastExpr 0x22150b29980 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150a43e30 <col:23> 'long long' 270764684126736341
|   | | `-ImplicitCastExpr 0x22150b29998 <col:43> 'limb':'int' <IntegralCast>
|   | |   `-IntegerLiteral 0x22150a43e58 <col:43> 'long long' 74608610647404645
|   | |-InitListExpr 0x22150b299c0 <line:1380:2, line:1382:61> 'const felem':'limb const[9]'
|   | | |-ImplicitCastExpr 0x22150b29a48 <line:1380:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150a43f08 <col:3> 'long long' 185427702470952429
|   | | |-ImplicitCastExpr 0x22150b29a60 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150a43f30 <col:23> 'long long' 222643017731418220
|   | | |-ImplicitCastExpr 0x22150b29a78 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150a43f58 <col:43> 'long long' 13522846395484314
|   | | |-ImplicitCastExpr 0x22150b29a90 <line:1381:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150a43f80 <col:3> 'long long' 186326058078407921
|   | | |-ImplicitCastExpr 0x22150b29aa8 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150a43fa8 <col:23> 'long long' 198419528161705339
|   | | |-ImplicitCastExpr 0x22150b29ac0 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150a43fd0 <col:43> 'long long' 100497259887215390
|   | | |-ImplicitCastExpr 0x22150b29ad8 <line:1382:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150a43ff8 <col:3> 'long long' 197206109416089806
|   | | |-ImplicitCastExpr 0x22150b29af0 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150a44020 <col:23> 'long long' 25672027167771401
|   | | `-ImplicitCastExpr 0x22150b29b08 <col:43> 'limb':'int' <IntegralCast>
|   | |   `-IntegerLiteral 0x22150a44048 <col:43> 'long long' 3406291878286628
|   | `-InitListExpr 0x22150b29b30 <line:1383:2, col:28> 'const felem':'limb const[9]'
|   |   |-IntegerLiteral 0x22150a440f8 <col:3> 'int' 1
|   |   |-IntegerLiteral 0x22150a44120 <col:6> 'int' 0
|   |   |-IntegerLiteral 0x22150a44148 <col:9> 'int' 0
|   |   |-IntegerLiteral 0x22150a44170 <col:12> 'int' 0
|   |   |-IntegerLiteral 0x22150a44198 <col:15> 'int' 0
|   |   |-IntegerLiteral 0x22150a441c0 <col:18> 'int' 0
|   |   |-IntegerLiteral 0x22150a441e8 <col:21> 'int' 0
|   |   |-IntegerLiteral 0x22150a44210 <col:24> 'int' 0
|   |   `-IntegerLiteral 0x22150a44238 <col:27> 'int' 0
|   |-InitListExpr 0x22150b29be8 <line:1384:1, line:1390:29> 'const felem [3]'
|   | |-InitListExpr 0x22150b29c50 <line:1384:2, line:1386:61> 'const felem':'limb const[9]'
|   | | |-ImplicitCastExpr 0x22150b29cd8 <line:1384:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150a44340 <col:3> 'long long' 182021676768147954
|   | | |-ImplicitCastExpr 0x22150b29cf0 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150a44368 <col:23> 'long long' 172930014546080759
|   | | |-ImplicitCastExpr 0x22150b29d08 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150a44390 <col:43> 'long long' 138895075991037654
|   | | |-ImplicitCastExpr 0x22150b29d20 <line:1385:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150a443b8 <col:3> 'long long' 235934697641172243
|   | | |-ImplicitCastExpr 0x22150b29d38 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150a443e0 <col:23> 'long long' 27730320196411543
|   | | |-ImplicitCastExpr 0x22150b29d50 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150a44408 <col:43> 'long long' 113022493050822225
|   | | |-ImplicitCastExpr 0x22150b29d68 <line:1386:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150a44430 <col:3> 'long long' 207878302801438681
|   | | |-ImplicitCastExpr 0x22150b29d80 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150a44458 <col:23> 'long long' 266313891404818042
|   | | `-ImplicitCastExpr 0x22150b29d98 <col:43> 'limb':'int' <IntegralCast>
|   | |   `-IntegerLiteral 0x22150a44480 <col:43> 'long long' 130891172683322366
|   | |-InitListExpr 0x22150b29dc0 <line:1387:2, line:1389:61> 'const felem':'limb const[9]'
|   | | |-ImplicitCastExpr 0x22150b29e48 <line:1387:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150a44530 <col:3> 'long long' 41168026354574463
|   | | |-ImplicitCastExpr 0x22150b29e60 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150a44558 <col:23> 'long long' 33680513507247361
|   | | |-ImplicitCastExpr 0x22150b29e78 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150a44580 <col:43> 'long long' 269413084887956749
|   | | |-ImplicitCastExpr 0x22150b29e90 <line:1388:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150a445a8 <col:3> 'long long' 242140931057620833
|   | | |-ImplicitCastExpr 0x22150b29ea8 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150a445d0 <col:23> 'long long' 128929932887871315
|   | | |-ImplicitCastExpr 0x22150b29ec0 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150a445f8 <col:43> 'long long' 48038932284854428
|   | | |-ImplicitCastExpr 0x22150b29ed8 <line:1389:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150a44620 <col:3> 'long long' 111303443934034199
|   | | |-ImplicitCastExpr 0x22150b29ef0 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150a44648 <col:23> 'long long' 170023492048506113
|   | | `-ImplicitCastExpr 0x22150b29f08 <col:43> 'limb':'int' <IntegralCast>
|   | |   `-IntegerLiteral 0x22150a44670 <col:43> 'long long' 143360740140998823
|   | `-InitListExpr 0x22150b29f30 <line:1390:2, col:28> 'const felem':'limb const[9]'
|   |   |-IntegerLiteral 0x22150a44720 <col:3> 'int' 1
|   |   |-IntegerLiteral 0x22150a44748 <col:6> 'int' 0
|   |   |-IntegerLiteral 0x22150a44770 <col:9> 'int' 0
|   |   |-IntegerLiteral 0x22150a44798 <col:12> 'int' 0
|   |   |-IntegerLiteral 0x22150a447c0 <col:15> 'int' 0
|   |   |-IntegerLiteral 0x22150a447e8 <col:18> 'int' 0
|   |   |-IntegerLiteral 0x22150a44810 <col:21> 'int' 0
|   |   |-IntegerLiteral 0x22150a44838 <col:24> 'int' 0
|   |   `-IntegerLiteral 0x22150a44860 <col:27> 'int' 0
|   |-InitListExpr 0x22150b29fe8 <line:1391:1, line:1397:29> 'const felem [3]'
|   | |-InitListExpr 0x22150b2a050 <line:1391:2, line:1393:61> 'const felem':'limb const[9]'
|   | | |-ImplicitCastExpr 0x22150b2a0d8 <line:1391:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150a44968 <col:3> 'long long' 134425189601320381
|   | | |-ImplicitCastExpr 0x22150b2a0f0 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150a44990 <col:23> 'long long' 260186432550402665
|   | | |-ImplicitCastExpr 0x22150b2a108 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150a449b8 <col:43> 'long long' 171678927283829543
|   | | |-ImplicitCastExpr 0x22150b2a120 <line:1392:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150a449e0 <col:3> 'long long' 252983222112544416
|   | | |-ImplicitCastExpr 0x22150b2a138 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150a44a08 <col:23> 'long long' 132305405591194105
|   | | |-ImplicitCastExpr 0x22150b2a150 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150a44a30 <col:43> 'long long' 270602171681501759
|   | | |-ImplicitCastExpr 0x22150b2a168 <line:1393:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150a44a58 <col:3> 'long long' 272296954479380013
|   | | |-ImplicitCastExpr 0x22150b2a180 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150a44a80 <col:23> 'long long' 104435921201057878
|   | | `-ImplicitCastExpr 0x22150b2a198 <col:43> 'limb':'int' <IntegralCast>
|   | |   `-IntegerLiteral 0x22150a44aa8 <col:43> 'long long' 108657865336312406
|   | |-InitListExpr 0x22150b2a1c0 <line:1394:2, line:1396:61> 'const felem':'limb const[9]'
|   | | |-ImplicitCastExpr 0x22150b2a248 <line:1394:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150a44b58 <col:3> 'long long' 114456331693404500
|   | | |-ImplicitCastExpr 0x22150b2a260 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150a44b80 <col:23> 'long long' 281139027592507440
|   | | |-ImplicitCastExpr 0x22150b2a278 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150a44ba8 <col:43> 'long long' 62416162571593130
|   | | |-ImplicitCastExpr 0x22150b2a290 <line:1395:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150a44bd0 <col:3> 'long long' 83096845865136584
|   | | |-ImplicitCastExpr 0x22150b2a2a8 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150a44bf8 <col:23> 'long long' 66402651191401000
|   | | |-ImplicitCastExpr 0x22150b2a2c0 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150a44c20 <col:43> 'long long' 165554388465669282
|   | | |-ImplicitCastExpr 0x22150b2a2d8 <line:1396:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150a44c48 <col:3> 'long long' 242878144236104974
|   | | |-ImplicitCastExpr 0x22150b2a2f0 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150a44c70 <col:23> 'long long' 11801559461345807
|   | | `-ImplicitCastExpr 0x22150b2a308 <col:43> 'limb':'int' <IntegralCast>
|   | |   `-IntegerLiteral 0x22150a44c98 <col:43> 'long long' 67258410132057789
|   | `-InitListExpr 0x22150b2a330 <line:1397:2, col:28> 'const felem':'limb const[9]'
|   |   |-IntegerLiteral 0x22150a44d48 <col:3> 'int' 1
|   |   |-IntegerLiteral 0x22150a44d70 <col:6> 'int' 0
|   |   |-IntegerLiteral 0x22150a44d98 <col:9> 'int' 0
|   |   |-IntegerLiteral 0x22150a44dc0 <col:12> 'int' 0
|   |   |-IntegerLiteral 0x22150a44de8 <col:15> 'int' 0
|   |   |-IntegerLiteral 0x22150a44e10 <col:18> 'int' 0
|   |   |-IntegerLiteral 0x22150a44e38 <col:21> 'int' 0
|   |   |-IntegerLiteral 0x22150a44e60 <col:24> 'int' 0
|   |   `-IntegerLiteral 0x22150a44e88 <col:27> 'int' 0
|   |-InitListExpr 0x22150b2a3e8 <line:1398:1, line:1404:29> 'const felem [3]'
|   | |-InitListExpr 0x22150b2a450 <line:1398:2, line:1400:61> 'const felem':'limb const[9]'
|   | | |-ImplicitCastExpr 0x22150b2a4d8 <line:1398:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150a44f90 <col:3> 'long long' 54921445886212921
|   | | |-ImplicitCastExpr 0x22150b2a4f0 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150a44fb8 <col:23> 'long long' 264010728307327571
|   | | |-ImplicitCastExpr 0x22150b2a508 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150a44fe0 <col:43> 'long long' 48540398146488464
|   | | |-ImplicitCastExpr 0x22150b2a520 <line:1399:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150a45008 <col:3> 'long long' 38046474206052097
|   | | |-ImplicitCastExpr 0x22150b2a538 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150a45030 <col:23> 'long long' 131018639621352187
|   | | |-ImplicitCastExpr 0x22150b2a550 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b26df0 <col:43> 'long long' 269269057993736052
|   | | |-ImplicitCastExpr 0x22150b2a568 <line:1400:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b26e18 <col:3> 'long long' 171604831092059514
|   | | |-ImplicitCastExpr 0x22150b2a580 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b26e40 <col:23> 'long long' 226502319611390201
|   | | `-ImplicitCastExpr 0x22150b2a598 <col:43> 'limb':'int' <IntegralCast>
|   | |   `-IntegerLiteral 0x22150b26e68 <col:43> 'long long' 40955853996707363
|   | |-InitListExpr 0x22150b2a5c0 <line:1401:2, line:1403:61> 'const felem':'limb const[9]'
|   | | |-ImplicitCastExpr 0x22150b2a648 <line:1401:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b26f18 <col:3> 'long long' 228496940765560023
|   | | |-ImplicitCastExpr 0x22150b2a660 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b26f40 <col:23> 'long long' 60915004430338246
|   | | |-ImplicitCastExpr 0x22150b2a678 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b26f68 <col:43> 'long long' 101679219507860758
|   | | |-ImplicitCastExpr 0x22150b2a690 <line:1402:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b26f90 <col:3> 'long long' 83983612521646248
|   | | |-ImplicitCastExpr 0x22150b2a6a8 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b26fb8 <col:23> 'long long' 74425713252203235
|   | | |-ImplicitCastExpr 0x22150b2a6c0 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b26fe0 <col:43> 'long long' 40674977338158817
|   | | |-ImplicitCastExpr 0x22150b2a6d8 <line:1403:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b27008 <col:3> 'long long' 232629268965117148
|   | | |-ImplicitCastExpr 0x22150b2a6f0 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b27030 <col:23> 'long long' 258202943948012181
|   | | `-ImplicitCastExpr 0x22150b2a708 <col:43> 'limb':'int' <IntegralCast>
|   | |   `-IntegerLiteral 0x22150b27058 <col:43> 'long long' 82501075909064286
|   | `-InitListExpr 0x22150b2a730 <line:1404:2, col:28> 'const felem':'limb const[9]'
|   |   |-IntegerLiteral 0x22150b27108 <col:3> 'int' 1
|   |   |-IntegerLiteral 0x22150b27130 <col:6> 'int' 0
|   |   |-IntegerLiteral 0x22150b27158 <col:9> 'int' 0
|   |   |-IntegerLiteral 0x22150b27180 <col:12> 'int' 0
|   |   |-IntegerLiteral 0x22150b271a8 <col:15> 'int' 0
|   |   |-IntegerLiteral 0x22150b271d0 <col:18> 'int' 0
|   |   |-IntegerLiteral 0x22150b271f8 <col:21> 'int' 0
|   |   |-IntegerLiteral 0x22150b27220 <col:24> 'int' 0
|   |   `-IntegerLiteral 0x22150b27248 <col:27> 'int' 0
|   |-InitListExpr 0x22150b2a7e8 <line:1405:1, line:1411:29> 'const felem [3]'
|   | |-InitListExpr 0x22150b2a850 <line:1405:2, line:1407:61> 'const felem':'limb const[9]'
|   | | |-ImplicitCastExpr 0x22150b2a8d8 <line:1405:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b27350 <col:3> 'long long' 5781481702552587
|   | | |-ImplicitCastExpr 0x22150b2a8f0 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b27378 <col:23> 'long long' 81936078708350940
|   | | |-ImplicitCastExpr 0x22150b2a908 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b273a0 <col:43> 'long long' 684428450673870
|   | | |-ImplicitCastExpr 0x22150b2a920 <line:1406:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b273c8 <col:3> 'long long' 133775839246670778
|   | | |-ImplicitCastExpr 0x22150b2a938 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b273f0 <col:23> 'long long' 187393766212496108
|   | | |-ImplicitCastExpr 0x22150b2a950 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b27418 <col:43> 'long long' 163607746850311095
|   | | |-ImplicitCastExpr 0x22150b2a968 <line:1407:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b27440 <col:3> 'long long' 104632887796117062
|   | | |-ImplicitCastExpr 0x22150b2a980 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b27468 <col:23> 'long long' 196249512117870923
|   | | `-ImplicitCastExpr 0x22150b2a998 <col:43> 'limb':'int' <IntegralCast>
|   | |   `-IntegerLiteral 0x22150b27490 <col:43> 'long long' 120194447878062517
|   | |-InitListExpr 0x22150b2a9c0 <line:1408:2, line:1410:61> 'const felem':'limb const[9]'
|   | | |-ImplicitCastExpr 0x22150b2aa48 <line:1408:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b27540 <col:3> 'long long' 253107672290978120
|   | | |-ImplicitCastExpr 0x22150b2aa60 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b27568 <col:23> 'long long' 39877908298150671
|   | | |-ImplicitCastExpr 0x22150b2aa78 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b27590 <col:43> 'long long' 243230812957569816
|   | | |-ImplicitCastExpr 0x22150b2aa90 <line:1409:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b275b8 <col:3> 'long long' 139146955128709334
|   | | |-ImplicitCastExpr 0x22150b2aaa8 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b275e0 <col:23> 'long long' 269377625756283059
|   | | |-ImplicitCastExpr 0x22150b2aac0 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b27608 <col:43> 'long long' 93147841917237891
|   | | |-ImplicitCastExpr 0x22150b2aad8 <line:1410:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b27630 <col:3> 'long long' 25559748171724610
|   | | |-ImplicitCastExpr 0x22150b2aaf0 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b27658 <col:23> 'long long' 256984472390645826
|   | | `-ImplicitCastExpr 0x22150b2ab08 <col:43> 'limb':'int' <IntegralCast>
|   | |   `-IntegerLiteral 0x22150b27680 <col:43> 'long long' 110805271569863234
|   | `-InitListExpr 0x22150b2ab30 <line:1411:2, col:28> 'const felem':'limb const[9]'
|   |   |-IntegerLiteral 0x22150b27730 <col:3> 'int' 1
|   |   |-IntegerLiteral 0x22150b27758 <col:6> 'int' 0
|   |   |-IntegerLiteral 0x22150b27780 <col:9> 'int' 0
|   |   |-IntegerLiteral 0x22150b277a8 <col:12> 'int' 0
|   |   |-IntegerLiteral 0x22150b277d0 <col:15> 'int' 0
|   |   |-IntegerLiteral 0x22150b277f8 <col:18> 'int' 0
|   |   |-IntegerLiteral 0x22150b27820 <col:21> 'int' 0
|   |   |-IntegerLiteral 0x22150b27848 <col:24> 'int' 0
|   |   `-IntegerLiteral 0x22150b27870 <col:27> 'int' 0
|   |-InitListExpr 0x22150b2abe8 <line:1412:1, line:1418:29> 'const felem [3]'
|   | |-InitListExpr 0x22150b2ac50 <line:1412:2, line:1414:61> 'const felem':'limb const[9]'
|   | | |-ImplicitCastExpr 0x22150b2acd8 <line:1412:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b27978 <col:3> 'long long' 83907952979223667
|   | | |-ImplicitCastExpr 0x22150b2acf0 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b279a0 <col:23> 'long long' 54203007381021646
|   | | |-ImplicitCastExpr 0x22150b2ad08 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b279c8 <col:43> 'long long' 160604902073304494
|   | | |-ImplicitCastExpr 0x22150b2ad20 <line:1413:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b279f0 <col:3> 'long long' 23256222146912600
|   | | |-ImplicitCastExpr 0x22150b2ad38 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b27a18 <col:23> 'long long' 182952255629341354
|   | | |-ImplicitCastExpr 0x22150b2ad50 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b27a40 <col:43> 'long long' 115033435942373103
|   | | |-ImplicitCastExpr 0x22150b2ad68 <line:1414:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b27a68 <col:3> 'long long' 20223102552038729
|   | | |-ImplicitCastExpr 0x22150b2ad80 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b27a90 <col:23> 'long long' 57575416695682744
|   | | `-ImplicitCastExpr 0x22150b2ad98 <col:43> 'limb':'int' <IntegralCast>
|   | |   `-IntegerLiteral 0x22150b27ab8 <col:43> 'long long' 5669819612697091
|   | |-InitListExpr 0x22150b2adc0 <line:1415:2, line:1417:61> 'const felem':'limb const[9]'
|   | | |-ImplicitCastExpr 0x22150b24e28 <line:1415:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b27b68 <col:3> 'long long' 168448660585422906
|   | | |-ImplicitCastExpr 0x22150b24e40 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b27b90 <col:23> 'long long' 239179205648869171
|   | | |-ImplicitCastExpr 0x22150b24e58 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b27bb8 <col:43> 'long long' 285900858825794631
|   | | |-ImplicitCastExpr 0x22150b24e70 <line:1416:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b27be0 <col:3> 'long long' 3096201469763925
|   | | |-ImplicitCastExpr 0x22150b24e88 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b27c08 <col:23> 'long long' 168713258819827008
|   | | |-ImplicitCastExpr 0x22150b24ea0 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b27c30 <col:43> 'long long' 1427068068807299
|   | | |-ImplicitCastExpr 0x22150b24eb8 <line:1417:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b27c58 <col:3> 'long long' 219126752609233260
|   | | |-ImplicitCastExpr 0x22150b24ed0 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b27c80 <col:23> 'long long' 21459001911328522
|   | | `-ImplicitCastExpr 0x22150b24ee8 <col:43> 'limb':'int' <IntegralCast>
|   | |   `-IntegerLiteral 0x22150b27ca8 <col:43> 'long long' 107764485524627839
|   | `-InitListExpr 0x22150b24f10 <line:1418:2, col:28> 'const felem':'limb const[9]'
|   |   |-IntegerLiteral 0x22150b27d58 <col:3> 'int' 1
|   |   |-IntegerLiteral 0x22150b27d80 <col:6> 'int' 0
|   |   |-IntegerLiteral 0x22150b27da8 <col:9> 'int' 0
|   |   |-IntegerLiteral 0x22150b27dd0 <col:12> 'int' 0
|   |   |-IntegerLiteral 0x22150b27df8 <col:15> 'int' 0
|   |   |-IntegerLiteral 0x22150b27e20 <col:18> 'int' 0
|   |   |-IntegerLiteral 0x22150b27e48 <col:21> 'int' 0
|   |   |-IntegerLiteral 0x22150b27e70 <col:24> 'int' 0
|   |   `-IntegerLiteral 0x22150b27e98 <col:27> 'int' 0
|   |-InitListExpr 0x22150b24fc8 <line:1419:1, line:1425:29> 'const felem [3]'
|   | |-InitListExpr 0x22150b25030 <line:1419:2, line:1421:61> 'const felem':'limb const[9]'
|   | | |-ImplicitCastExpr 0x22150b250b8 <line:1419:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b27fa0 <col:3> 'long long' 80472600425850483
|   | | |-ImplicitCastExpr 0x22150b250d0 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b27fc8 <col:23> 'long long' 224473061399101374
|   | | |-ImplicitCastExpr 0x22150b250e8 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b27ff0 <col:43> 'long long' 6388189075278565
|   | | |-ImplicitCastExpr 0x22150b25100 <line:1420:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b28018 <col:3> 'long long' 285031614597630631
|   | | |-ImplicitCastExpr 0x22150b25118 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b28040 <col:23> 'long long' 274421322182961254
|   | | |-ImplicitCastExpr 0x22150b25130 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b28068 <col:43> 'long long' 283887570695703148
|   | | |-ImplicitCastExpr 0x22150b25148 <line:1421:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b28090 <col:3> 'long long' 181479600993480562
|   | | |-ImplicitCastExpr 0x22150b25160 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b280b8 <col:23> 'long long' 102090085528419116
|   | | `-ImplicitCastExpr 0x22150b25178 <col:43> 'limb':'int' <IntegralCast>
|   | |   `-IntegerLiteral 0x22150b280e0 <col:43> 'long long' 106185979073531434
|   | |-InitListExpr 0x22150b251a0 <line:1422:2, line:1424:61> 'const felem':'limb const[9]'
|   | | |-ImplicitCastExpr 0x22150b25228 <line:1422:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b28190 <col:3> 'long long' 73824376971567759
|   | | |-ImplicitCastExpr 0x22150b25240 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b281b8 <col:23> 'long long' 128945964170724839
|   | | |-ImplicitCastExpr 0x22150b25258 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b281e0 <col:43> 'long long' 121577388434101727
|   | | |-ImplicitCastExpr 0x22150b25270 <line:1423:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b28208 <col:3> 'long long' 139989292724168369
|   | | |-ImplicitCastExpr 0x22150b25288 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b28230 <col:23> 'long long' 226558589893534708
|   | | |-ImplicitCastExpr 0x22150b252a0 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b28258 <col:43> 'long long' 204492623498446405
|   | | |-ImplicitCastExpr 0x22150b252b8 <line:1424:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b28280 <col:3> 'long long' 83195714170398631
|   | | |-ImplicitCastExpr 0x22150b252d0 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b282a8 <col:23> 'long long' 266701901401486980
|   | | `-ImplicitCastExpr 0x22150b252e8 <col:43> 'limb':'int' <IntegralCast>
|   | |   `-IntegerLiteral 0x22150b282d0 <col:43> 'long long' 38808386010626826
|   | `-InitListExpr 0x22150b25310 <line:1425:2, col:28> 'const felem':'limb const[9]'
|   |   |-IntegerLiteral 0x22150b28380 <col:3> 'int' 1
|   |   |-IntegerLiteral 0x22150b283a8 <col:6> 'int' 0
|   |   |-IntegerLiteral 0x22150b283d0 <col:9> 'int' 0
|   |   |-IntegerLiteral 0x22150b283f8 <col:12> 'int' 0
|   |   |-IntegerLiteral 0x22150b28420 <col:15> 'int' 0
|   |   |-IntegerLiteral 0x22150b28448 <col:18> 'int' 0
|   |   |-IntegerLiteral 0x22150b28470 <col:21> 'int' 0
|   |   |-IntegerLiteral 0x22150b28498 <col:24> 'int' 0
|   |   `-IntegerLiteral 0x22150b284c0 <col:27> 'int' 0
|   |-InitListExpr 0x22150b253c8 <line:1426:1, line:1432:29> 'const felem [3]'
|   | |-InitListExpr 0x22150b25430 <line:1426:2, line:1428:61> 'const felem':'limb const[9]'
|   | | |-ImplicitCastExpr 0x22150b254b8 <line:1426:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b285c8 <col:3> 'long long' 68456392460871366
|   | | |-ImplicitCastExpr 0x22150b254d0 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b285f0 <col:23> 'long long' 187178293677952462
|   | | |-ImplicitCastExpr 0x22150b254e8 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b28618 <col:43> 'long long' 126894947334365842
|   | | |-ImplicitCastExpr 0x22150b25500 <line:1427:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b28640 <col:3> 'long long' 147434772495009553
|   | | |-ImplicitCastExpr 0x22150b25518 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b28668 <col:23> 'long long' 201495664110630374
|   | | |-ImplicitCastExpr 0x22150b25530 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b28690 <col:43> 'long long' 5788334286214178
|   | | |-ImplicitCastExpr 0x22150b25548 <line:1428:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b286b8 <col:3> 'long long' 264555323551016548
|   | | |-ImplicitCastExpr 0x22150b25560 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b286e0 <col:23> 'long long' 201523436559516008
|   | | `-ImplicitCastExpr 0x22150b25578 <col:43> 'limb':'int' <IntegralCast>
|   | |   `-IntegerLiteral 0x22150b28708 <col:43> 'long long' 86612822398908315
|   | |-InitListExpr 0x22150b255a0 <line:1429:2, line:1431:61> 'const felem':'limb const[9]'
|   | | |-ImplicitCastExpr 0x22150b25628 <line:1429:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b287b8 <col:3> 'long long' 237190349179942813
|   | | |-ImplicitCastExpr 0x22150b25640 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b287e0 <col:23> 'long long' 57919897970055867
|   | | |-ImplicitCastExpr 0x22150b25658 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b28808 <col:43> 'long long' 259503898983505200
|   | | |-ImplicitCastExpr 0x22150b25670 <line:1430:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b28830 <col:3> 'long long' 240994968244069959
|   | | |-ImplicitCastExpr 0x22150b25688 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b28858 <col:23> 'long long' 197627180832108777
|   | | |-ImplicitCastExpr 0x22150b256a0 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b28880 <col:43> 'long long' 14909165662016715
|   | | |-ImplicitCastExpr 0x22150b256b8 <line:1431:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b288a8 <col:3> 'long long' 231275607518278278
|   | | |-ImplicitCastExpr 0x22150b256d0 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b288d0 <col:23> 'long long' 267691401609550987
|   | | `-ImplicitCastExpr 0x22150b256e8 <col:43> 'limb':'int' <IntegralCast>
|   | |   `-IntegerLiteral 0x22150b288f8 <col:43> 'long long' 6132280927674703
|   | `-InitListExpr 0x22150b25710 <line:1432:2, col:28> 'const felem':'limb const[9]'
|   |   |-IntegerLiteral 0x22150b289a8 <col:3> 'int' 1
|   |   |-IntegerLiteral 0x22150b289d0 <col:6> 'int' 0
|   |   |-IntegerLiteral 0x22150b289f8 <col:9> 'int' 0
|   |   |-IntegerLiteral 0x22150b28a20 <col:12> 'int' 0
|   |   |-IntegerLiteral 0x22150b28a48 <col:15> 'int' 0
|   |   |-IntegerLiteral 0x22150b28a70 <col:18> 'int' 0
|   |   |-IntegerLiteral 0x22150b28a98 <col:21> 'int' 0
|   |   |-IntegerLiteral 0x22150b28ac0 <col:24> 'int' 0
|   |   `-IntegerLiteral 0x22150b28ae8 <col:27> 'int' 0
|   |-InitListExpr 0x22150b257c8 <line:1433:1, line:1439:29> 'const felem [3]'
|   | |-InitListExpr 0x22150b25830 <line:1433:2, line:1435:61> 'const felem':'limb const[9]'
|   | | |-ImplicitCastExpr 0x22150b258b8 <line:1433:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b28bf0 <col:3> 'long long' 163949238868714069
|   | | |-ImplicitCastExpr 0x22150b258d0 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b28c18 <col:23> 'long long' 58905398262457208
|   | | |-ImplicitCastExpr 0x22150b258e8 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b28c40 <col:43> 'long long' 23410114530391911
|   | | |-ImplicitCastExpr 0x22150b25900 <line:1434:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b28c68 <col:3> 'long long' 143013967514063650
|   | | |-ImplicitCastExpr 0x22150b25918 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b28c90 <col:23> 'long long' 158564875852387944
|   | | |-ImplicitCastExpr 0x22150b25930 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b28cb8 <col:43> 'long long' 188561501915912131
|   | | |-ImplicitCastExpr 0x22150b25948 <line:1435:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b28ce0 <col:3> 'long long' 215199150119715708
|   | | |-ImplicitCastExpr 0x22150b25960 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b28d08 <col:23> 'long long' 206622526511148848
|   | | `-ImplicitCastExpr 0x22150b25978 <col:43> 'limb':'int' <IntegralCast>
|   | |   `-IntegerLiteral 0x22150b28d30 <col:43> 'long long' 89915256697746367
|   | |-InitListExpr 0x22150b259a0 <line:1436:2, line:1438:61> 'const felem':'limb const[9]'
|   | | |-ImplicitCastExpr 0x22150b25a28 <line:1436:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b2ee30 <col:3> 'long long' 235472781441274037
|   | | |-ImplicitCastExpr 0x22150b25a40 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b2ee58 <col:23> 'long long' 144389939058319050
|   | | |-ImplicitCastExpr 0x22150b25a58 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b2ee80 <col:43> 'long long' 169063410541876690
|   | | |-ImplicitCastExpr 0x22150b25a70 <line:1437:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b2eea8 <col:3> 'long long' 249173223097855798
|   | | |-ImplicitCastExpr 0x22150b25a88 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b2eed0 <col:23> 'long long' 170576668317566447
|   | | |-ImplicitCastExpr 0x22150b25aa0 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b2eef8 <col:43> 'long long' 219758551860586130
|   | | |-ImplicitCastExpr 0x22150b25ab8 <line:1438:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b2ef20 <col:3> 'long long' 106180284152399658
|   | | |-ImplicitCastExpr 0x22150b25ad0 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b2ef48 <col:23> 'long long' 282632998754084398
|   | | `-ImplicitCastExpr 0x22150b25ae8 <col:43> 'limb':'int' <IntegralCast>
|   | |   `-IntegerLiteral 0x22150b2ef70 <col:43> 'long long' 28517994447710861
|   | `-InitListExpr 0x22150b25b10 <line:1439:2, col:28> 'const felem':'limb const[9]'
|   |   |-IntegerLiteral 0x22150b2f020 <col:3> 'int' 1
|   |   |-IntegerLiteral 0x22150b2f048 <col:6> 'int' 0
|   |   |-IntegerLiteral 0x22150b2f070 <col:9> 'int' 0
|   |   |-IntegerLiteral 0x22150b2f098 <col:12> 'int' 0
|   |   |-IntegerLiteral 0x22150b2f0c0 <col:15> 'int' 0
|   |   |-IntegerLiteral 0x22150b2f0e8 <col:18> 'int' 0
|   |   |-IntegerLiteral 0x22150b2f110 <col:21> 'int' 0
|   |   |-IntegerLiteral 0x22150b2f138 <col:24> 'int' 0
|   |   `-IntegerLiteral 0x22150b2f160 <col:27> 'int' 0
|   |-InitListExpr 0x22150b25bc8 <line:1440:1, line:1446:29> 'const felem [3]'
|   | |-InitListExpr 0x22150b25c30 <line:1440:2, line:1442:61> 'const felem':'limb const[9]'
|   | | |-ImplicitCastExpr 0x22150b25cb8 <line:1440:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b2f268 <col:3> 'long long' 59660094509333031
|   | | |-ImplicitCastExpr 0x22150b25cd0 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b2f290 <col:23> 'long long' 40078737667398616
|   | | |-ImplicitCastExpr 0x22150b25ce8 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b2f2b8 <col:43> 'long long' 59594866337222579
|   | | |-ImplicitCastExpr 0x22150b25d00 <line:1441:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b2f2e0 <col:3> 'long long' 21701153162777097
|   | | |-ImplicitCastExpr 0x22150b25d18 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b2f308 <col:23> 'long long' 116340500610041056
|   | | |-ImplicitCastExpr 0x22150b25d30 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b2f330 <col:43> 'long long' 102768039285926622
|   | | |-ImplicitCastExpr 0x22150b25d48 <line:1442:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b2f358 <col:3> 'long long' 162621478236739094
|   | | |-ImplicitCastExpr 0x22150b25d60 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b2f380 <col:23> 'long long' 253440927871325083
|   | | `-ImplicitCastExpr 0x22150b25d78 <col:43> 'limb':'int' <IntegralCast>
|   | |   `-IntegerLiteral 0x22150b2f3a8 <col:43> 'long long' 22528988507453060
|   | |-InitListExpr 0x22150b25da0 <line:1443:2, line:1445:61> 'const felem':'limb const[9]'
|   | | |-ImplicitCastExpr 0x22150b25e28 <line:1443:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b2f458 <col:3> 'long long' 187831405429143038
|   | | |-ImplicitCastExpr 0x22150b25e40 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b2f480 <col:23> 'long long' 110453562439088903
|   | | |-ImplicitCastExpr 0x22150b25e58 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b2f4a8 <col:43> 'long long' 137990260688458424
|   | | |-ImplicitCastExpr 0x22150b25e70 <line:1444:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b2f4d0 <col:3> 'long long' 1698402127094515
|   | | |-ImplicitCastExpr 0x22150b25e88 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b2f4f8 <col:23> 'long long' 205917707824120335
|   | | |-ImplicitCastExpr 0x22150b25ea0 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b2f520 <col:43> 'long long' 108655472150581258
|   | | |-ImplicitCastExpr 0x22150b25eb8 <line:1445:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b2f548 <col:3> 'long long' 140144397608972274
|   | | |-ImplicitCastExpr 0x22150b25ed0 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b2f570 <col:23> 'long long' 151461723712079459
|   | | `-ImplicitCastExpr 0x22150b25ee8 <col:43> 'limb':'int' <IntegralCast>
|   | |   `-IntegerLiteral 0x22150b2f598 <col:43> 'long long' 90428809641917057
|   | `-InitListExpr 0x22150b25f10 <line:1446:2, col:28> 'const felem':'limb const[9]'
|   |   |-IntegerLiteral 0x22150b2f648 <col:3> 'int' 1
|   |   |-IntegerLiteral 0x22150b2f670 <col:6> 'int' 0
|   |   |-IntegerLiteral 0x22150b2f698 <col:9> 'int' 0
|   |   |-IntegerLiteral 0x22150b2f6c0 <col:12> 'int' 0
|   |   |-IntegerLiteral 0x22150b2f6e8 <col:15> 'int' 0
|   |   |-IntegerLiteral 0x22150b2f710 <col:18> 'int' 0
|   |   |-IntegerLiteral 0x22150b2f738 <col:21> 'int' 0
|   |   |-IntegerLiteral 0x22150b2f760 <col:24> 'int' 0
|   |   `-IntegerLiteral 0x22150b2f788 <col:27> 'int' 0
|   |-InitListExpr 0x22150b25fc8 <line:1447:1, line:1453:29> 'const felem [3]'
|   | |-InitListExpr 0x22150b26030 <line:1447:2, line:1449:61> 'const felem':'limb const[9]'
|   | | |-ImplicitCastExpr 0x22150b260b8 <line:1447:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b2f890 <col:3> 'long long' 99408195288972852
|   | | |-ImplicitCastExpr 0x22150b260d0 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b2f8b8 <col:23> 'long long' 252546355624683750
|   | | |-ImplicitCastExpr 0x22150b260e8 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b2f8e0 <col:43> 'long long' 156284726038664712
|   | | |-ImplicitCastExpr 0x22150b26100 <line:1448:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b2f908 <col:3> 'long long' 187814555657646027
|   | | |-ImplicitCastExpr 0x22150b26118 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b2f930 <col:23> 'long long' 253333639507146726
|   | | |-ImplicitCastExpr 0x22150b26130 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b2f958 <col:43> 'long long' 204421248249226768
|   | | |-ImplicitCastExpr 0x22150b26148 <line:1449:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b2f980 <col:3> 'long long' 185585298873836337
|   | | |-ImplicitCastExpr 0x22150b26160 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b2f9a8 <col:23> 'long long' 54122284901443166
|   | | `-ImplicitCastExpr 0x22150b26178 <col:43> 'limb':'int' <IntegralCast>
|   | |   `-IntegerLiteral 0x22150b2f9d0 <col:43> 'long long' 15606490642109597
|   | |-InitListExpr 0x22150b261a0 <line:1450:2, line:1452:61> 'const felem':'limb const[9]'
|   | | |-ImplicitCastExpr 0x22150b26228 <line:1450:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b2fa80 <col:3> 'long long' 202273776109261432
|   | | |-ImplicitCastExpr 0x22150b26240 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b2faa8 <col:23> 'long long' 249084945752482875
|   | | |-ImplicitCastExpr 0x22150b26258 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b2fad0 <col:43> 'long long' 85968979218604038
|   | | |-ImplicitCastExpr 0x22150b26270 <line:1451:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b2faf8 <col:3> 'long long' 25519703624199912
|   | | |-ImplicitCastExpr 0x22150b26288 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b2fb20 <col:23> 'long long' 11298581697006935
|   | | |-ImplicitCastExpr 0x22150b262a0 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b2fb48 <col:43> 'long long' 276104559392320902
|   | | |-ImplicitCastExpr 0x22150b262b8 <line:1452:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b2fb70 <col:3> 'long long' 110836315469364654
|   | | |-ImplicitCastExpr 0x22150b262d0 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x22150b2fb98 <col:23> 'long long' 232146578341713168
|   | | `-ImplicitCastExpr 0x22150b262e8 <col:43> 'limb':'int' <IntegralCast>
|   | |   `-IntegerLiteral 0x22150b2fbc0 <col:43> 'long long' 19823468322155842
|   | `-InitListExpr 0x22150b26310 <line:1453:2, col:28> 'const felem':'limb const[9]'
|   |   |-IntegerLiteral 0x22150b2fc70 <col:3> 'int' 1
|   |   |-IntegerLiteral 0x22150b2fc98 <col:6> 'int' 0
|   |   |-IntegerLiteral 0x22150b2fcc0 <col:9> 'int' 0
|   |   |-IntegerLiteral 0x22150b2fce8 <col:12> 'int' 0
|   |   |-IntegerLiteral 0x22150b2fd10 <col:15> 'int' 0
|   |   |-IntegerLiteral 0x22150b2fd38 <col:18> 'int' 0
|   |   |-IntegerLiteral 0x22150b2fd60 <col:21> 'int' 0
|   |   |-IntegerLiteral 0x22150b2fd88 <col:24> 'int' 0
|   |   `-IntegerLiteral 0x22150b2fdb0 <col:27> 'int' 0
|   `-InitListExpr 0x22150b263c8 <line:1454:1, line:1460:29> 'const felem [3]'
|     |-InitListExpr 0x22150b26430 <line:1454:2, line:1456:61> 'const felem':'limb const[9]'
|     | |-ImplicitCastExpr 0x22150b264b8 <line:1454:3> 'limb':'int' <IntegralCast>
|     | | `-IntegerLiteral 0x22150b2feb8 <col:3> 'long long' 35744586964765654
|     | |-ImplicitCastExpr 0x22150b264d0 <col:23> 'limb':'int' <IntegralCast>
|     | | `-IntegerLiteral 0x22150b2fee0 <col:23> 'long long' 163922703223845131
|     | |-ImplicitCastExpr 0x22150b264e8 <col:43> 'limb':'int' <IntegralCast>
|     | | `-IntegerLiteral 0x22150b2ff08 <col:43> 'long long' 14854816205463052
|     | |-ImplicitCastExpr 0x22150b26500 <line:1455:3> 'limb':'int' <IntegralCast>
|     | | `-IntegerLiteral 0x22150b2ff30 <col:3> 'long long' 102143583654246457
|     | |-ImplicitCastExpr 0x22150b26518 <col:23> 'limb':'int' <IntegralCast>
|     | | `-IntegerLiteral 0x22150b2ff58 <col:23> 'long long' 142452439656043030
|     | |-ImplicitCastExpr 0x22150b26530 <col:43> 'limb':'int' <IntegralCast>
|     | | `-IntegerLiteral 0x22150b2ff80 <col:43> 'long long' 112217592890821305
|     | |-ImplicitCastExpr 0x22150b26548 <line:1456:3> 'limb':'int' <IntegralCast>
|     | | `-IntegerLiteral 0x22150b2ffa8 <col:3> 'long long' 23787854062546502
|     | |-ImplicitCastExpr 0x22150b26560 <col:23> 'limb':'int' <IntegralCast>
|     | | `-IntegerLiteral 0x22150b2ffd0 <col:23> 'long long' 249179525718089087
|     | `-ImplicitCastExpr 0x22150b26578 <col:43> 'limb':'int' <IntegralCast>
|     |   `-IntegerLiteral 0x22150b2fff8 <col:43> 'long long' 26558462432025871
|     |-InitListExpr 0x22150b265a0 <line:1457:2, line:1459:61> 'const felem':'limb const[9]'
|     | |-ImplicitCastExpr 0x22150b26628 <line:1457:3> 'limb':'int' <IntegralCast>
|     | | `-IntegerLiteral 0x22150b300a8 <col:3> 'long long' 78779712580399778
|     | |-ImplicitCastExpr 0x22150b26640 <col:23> 'limb':'int' <IntegralCast>
|     | | `-IntegerLiteral 0x22150b300d0 <col:23> 'long long' 278917745207099588
|     | |-ImplicitCastExpr 0x22150b26658 <col:43> 'limb':'int' <IntegralCast>
|     | | `-IntegerLiteral 0x22150b300f8 <col:43> 'long long' 183813831278226615
|     | |-ImplicitCastExpr 0x22150b26670 <line:1458:3> 'limb':'int' <IntegralCast>
|     | | `-IntegerLiteral 0x22150b30120 <col:3> 'long long' 239336779130140502
|     | |-ImplicitCastExpr 0x22150b26688 <col:23> 'limb':'int' <IntegralCast>
|     | | `-IntegerLiteral 0x22150b30148 <col:23> 'long long' 161422671968267096
|     | |-ImplicitCastExpr 0x22150b266a0 <col:43> 'limb':'int' <IntegralCast>
|     | | `-IntegerLiteral 0x22150b30170 <col:43> 'long long' 106085547023527836
|     | |-ImplicitCastExpr 0x22150b266b8 <line:1459:3> 'limb':'int' <IntegralCast>
|     | | `-IntegerLiteral 0x22150b30198 <col:3> 'long long' 95793207021835882
|     | |-ImplicitCastExpr 0x22150b266d0 <col:23> 'limb':'int' <IntegralCast>
|     | | `-IntegerLiteral 0x22150b301c0 <col:23> 'long long' 250342103785073150
|     | `-ImplicitCastExpr 0x22150b266e8 <col:43> 'limb':'int' <IntegralCast>
|     |   `-IntegerLiteral 0x22150b301e8 <col:43> 'long long' 115330905904664661
|     `-InitListExpr 0x22150b26710 <line:1460:2, col:28> 'const felem':'limb const[9]'
|       |-IntegerLiteral 0x22150b30298 <col:3> 'int' 1
|       |-IntegerLiteral 0x22150b302c0 <col:6> 'int' 0
|       |-IntegerLiteral 0x22150b302e8 <col:9> 'int' 0
|       |-IntegerLiteral 0x22150b30310 <col:12> 'int' 0
|       |-IntegerLiteral 0x22150b30338 <col:15> 'int' 0
|       |-IntegerLiteral 0x22150b30360 <col:18> 'int' 0
|       |-IntegerLiteral 0x22150b30388 <col:21> 'int' 0
|       |-IntegerLiteral 0x22150b303b0 <col:24> 'int' 0
|       `-IntegerLiteral 0x22150b303d8 <col:27> 'int' 0
|-FunctionDecl 0x22150b26d38 <line:1468:1, line:1487:1> line:1468:13 used select_point 'void (const limb, unsigned int, const felem (*)[3], felem *)' static
| |-ParmVarDecl 0x22150b267a8 <col:26, col:37> col:37 used idx 'const limb':'const int'
| |-ParmVarDecl 0x22150b26828 <col:42, col:55> col:55 used size 'unsigned int'
| |-ParmVarDecl 0x22150b269f0 <line:1469:26, col:50> col:38 used pre_comp 'const felem (*)[3]':'const felem (*)[3]'
| |-ParmVarDecl 0x22150b26b90 <col:53, col:64> col:59 used out 'felem *':'felem *'
| `-CompoundStmt 0x22150b2bf88 <line:1470:1, line:1487:1>
|   |-DeclStmt 0x22150b2af60 <line:1471:5, col:18>
|   | |-VarDecl 0x22150b2ae60 <col:5, col:14> col:14 used i 'unsigned int'
|   | `-VarDecl 0x22150b2aee0 <col:5, col:17> col:17 used j 'unsigned int'
|   |-DeclStmt 0x22150b2b0e8 <line:1472:5, col:32>
|   | `-VarDecl 0x22150b2af88 <col:5, col:31> col:11 used outlimbs 'limb *' cinit
|   |   `-UnaryOperator 0x22150b2b0d0 <col:22, col:31> 'limb *' prefix '&' cannot overflow
|   |     `-ArraySubscriptExpr 0x22150b2b0b0 <col:23, col:31> 'limb':'int' lvalue
|   |       |-ImplicitCastExpr 0x22150b2b098 <col:23, col:28> 'limb *' <ArrayToPointerDecay>
|   |       | `-ArraySubscriptExpr 0x22150b2b050 <col:23, col:28> 'felem':'limb [9]' lvalue
|   |       |   |-ImplicitCastExpr 0x22150b2b038 <col:23> 'felem *':'felem *' <LValueToRValue>
|   |       |   | `-DeclRefExpr 0x22150b2aff0 <col:23> 'felem *':'felem *' lvalue ParmVar 0x22150b26b90 'out' 'felem *':'felem *'
|   |       |   `-IntegerLiteral 0x22150b2b010 <col:27> 'int' 0
|   |       `-IntegerLiteral 0x22150b2b070 <col:30> 'int' 0
|   |-CallExpr 0x22150b2b288 <line:1474:5, col:36> 'void *'
|   | |-ImplicitCastExpr 0x22150b2b270 <col:5> 'void *(*)(void *, int, unsigned long long)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150b2b100 <col:5> 'void *(void *, int, unsigned long long)' Function 0x221508f8da8 'memset' 'void *(void *, int, unsigned long long)'
|   | |-ImplicitCastExpr 0x22150b2b2d8 <col:12> 'void *' <BitCast>
|   | | `-ImplicitCastExpr 0x22150b2b2c0 <col:12> 'felem *':'felem *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x22150b2b120 <col:12> 'felem *':'felem *' lvalue ParmVar 0x22150b26b90 'out' 'felem *':'felem *'
|   | |-IntegerLiteral 0x22150b2b140 <col:17> 'int' 0
|   | `-BinaryOperator 0x22150b2b238 <col:20, col:35> 'unsigned long long' '*'
|   |   |-UnaryExprOrTypeTraitExpr 0x22150b2b1d8 <col:20, col:31> 'unsigned long long' sizeof
|   |   | `-ParenExpr 0x22150b2b1b8 <col:26, col:31> 'felem':'limb [9]' lvalue
|   |   |   `-UnaryOperator 0x22150b2b1a0 <col:27, col:28> 'felem':'limb [9]' lvalue prefix '*' cannot overflow
|   |   |     `-ImplicitCastExpr 0x22150b2b188 <col:28> 'felem *':'felem *' <LValueToRValue>
|   |   |       `-DeclRefExpr 0x22150b2b168 <col:28> 'felem *':'felem *' lvalue ParmVar 0x22150b26b90 'out' 'felem *':'felem *' non_odr_use_unevaluated
|   |   `-ImplicitCastExpr 0x22150b2b220 <col:35> 'unsigned long long' <IntegralCast>
|   |     `-IntegerLiteral 0x22150b2b1f8 <col:35> 'int' 3
|   `-ForStmt 0x22150b2bf50 <line:1476:5, line:1486:5>
|     |-BinaryOperator 0x22150b2b368 <line:1476:10, col:14> 'unsigned int' '='
|     | |-DeclRefExpr 0x22150b2b2f0 <col:10> 'unsigned int' lvalue Var 0x22150b2ae60 'i' 'unsigned int'
|     | `-ImplicitCastExpr 0x22150b2b350 <col:14> 'unsigned int' <IntegralCast>
|     |   `-IntegerLiteral 0x22150b2b328 <col:14> 'int' 0
|     |-<<<NULL>>>
|     |-BinaryOperator 0x22150b2b3f8 <col:17, col:21> 'int' '<'
|     | |-ImplicitCastExpr 0x22150b2b3c8 <col:17> 'unsigned int' <LValueToRValue>
|     | | `-DeclRefExpr 0x22150b2b388 <col:17> 'unsigned int' lvalue Var 0x22150b2ae60 'i' 'unsigned int'
|     | `-ImplicitCastExpr 0x22150b2b3e0 <col:21> 'unsigned int' <LValueToRValue>
|     |   `-DeclRefExpr 0x22150b2b3a8 <col:21> 'unsigned int' lvalue ParmVar 0x22150b26828 'size' 'unsigned int'
|     |-UnaryOperator 0x22150b2b438 <col:27, col:28> 'unsigned int' postfix '++'
|     | `-DeclRefExpr 0x22150b2b418 <col:27> 'unsigned int' lvalue Var 0x22150b2ae60 'i' 'unsigned int'
|     `-CompoundStmt 0x22150b2bf00 <col:32, line:1486:5>
|       |-DeclStmt 0x22150b2b688 <line:1477:9, col:49>
|       | `-VarDecl 0x22150b2b460 <col:9, col:48> col:21 used inlimbs 'const limb *' cinit
|       |   `-UnaryOperator 0x22150b2b670 <col:31, col:48> 'const limb *' prefix '&' cannot overflow
|       |     `-ArraySubscriptExpr 0x22150b2b650 <col:32, col:48> 'const limb':'const int' lvalue
|       |       |-ImplicitCastExpr 0x22150b2b638 <col:32, col:45> 'const limb *' <ArrayToPointerDecay>
|       |       | `-ArraySubscriptExpr 0x22150b2b5f0 <col:32, col:45> 'const felem':'limb const[9]' lvalue
|       |       |   |-ImplicitCastExpr 0x22150b2b5d8 <col:32, col:42> 'const felem *' <ArrayToPointerDecay>
|       |       |   | `-ArraySubscriptExpr 0x22150b2b538 <col:32, col:42> 'const felem [3]' lvalue
|       |       |   |   |-ImplicitCastExpr 0x22150b2b508 <col:32> 'const felem (*)[3]':'const felem (*)[3]' <LValueToRValue>
|       |       |   |   | `-DeclRefExpr 0x22150b2b4c8 <col:32> 'const felem (*)[3]':'const felem (*)[3]' lvalue ParmVar 0x22150b269f0 'pre_comp' 'const felem (*)[3]':'const felem (*)[3]'
|       |       |   |   `-ImplicitCastExpr 0x22150b2b520 <col:41> 'unsigned int' <LValueToRValue>
|       |       |   |     `-DeclRefExpr 0x22150b2b4e8 <col:41> 'unsigned int' lvalue Var 0x22150b2ae60 'i' 'unsigned int'
|       |       |   `-IntegerLiteral 0x22150b2b558 <col:44> 'int' 0
|       |       `-IntegerLiteral 0x22150b2b610 <col:47> 'int' 0
|       |-DeclStmt 0x22150b2b7d8 <line:1478:9, col:28>
|       | `-VarDecl 0x22150b2b6b0 <col:9, col:25> col:14 used mask 'limb':'int' cinit
|       |   `-ImplicitCastExpr 0x22150b2b7c0 <col:21, col:25> 'limb':'int' <IntegralCast>
|       |     `-BinaryOperator 0x22150b2b7a0 <col:21, col:25> 'unsigned int' '^'
|       |       |-ImplicitCastExpr 0x22150b2b758 <col:21> 'unsigned int' <LValueToRValue>
|       |       | `-DeclRefExpr 0x22150b2b718 <col:21> 'unsigned int' lvalue Var 0x22150b2ae60 'i' 'unsigned int'
|       |       `-ImplicitCastExpr 0x22150b2b788 <col:25> 'unsigned int' <IntegralCast>
|       |         `-ImplicitCastExpr 0x22150b2b770 <col:25> 'limb':'int' <LValueToRValue>
|       |           `-DeclRefExpr 0x22150b2b738 <col:25> 'const limb':'const int' lvalue ParmVar 0x22150b267a8 'idx' 'const limb':'const int'
|       |-CompoundAssignOperator 0x22150b2b8a8 <line:1479:9, col:25> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|       | |-DeclRefExpr 0x22150b2b7f0 <col:9> 'limb':'int' lvalue Var 0x22150b2b6b0 'mask' 'limb':'int'
|       | `-BinaryOperator 0x22150b2b888 <col:17, col:25> 'limb':'int' '>>'
|       |   |-ImplicitCastExpr 0x22150b2b870 <col:17> 'limb':'int' <LValueToRValue>
|       |   | `-DeclRefExpr 0x22150b2b828 <col:17> 'limb':'int' lvalue Var 0x22150b2b6b0 'mask' 'limb':'int'
|       |   `-IntegerLiteral 0x22150b2b848 <col:25> 'int' 4
|       |-CompoundAssignOperator 0x22150b2b978 <line:1480:9, col:25> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|       | |-DeclRefExpr 0x22150b2b8d8 <col:9> 'limb':'int' lvalue Var 0x22150b2b6b0 'mask' 'limb':'int'
|       | `-BinaryOperator 0x22150b2b958 <col:17, col:25> 'limb':'int' '>>'
|       |   |-ImplicitCastExpr 0x22150b2b940 <col:17> 'limb':'int' <LValueToRValue>
|       |   | `-DeclRefExpr 0x22150b2b8f8 <col:17> 'limb':'int' lvalue Var 0x22150b2b6b0 'mask' 'limb':'int'
|       |   `-IntegerLiteral 0x22150b2b918 <col:25> 'int' 2
|       |-CompoundAssignOperator 0x22150b2ba48 <line:1481:9, col:25> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|       | |-DeclRefExpr 0x22150b2b9a8 <col:9> 'limb':'int' lvalue Var 0x22150b2b6b0 'mask' 'limb':'int'
|       | `-BinaryOperator 0x22150b2ba28 <col:17, col:25> 'limb':'int' '>>'
|       |   |-ImplicitCastExpr 0x22150b2ba10 <col:17> 'limb':'int' <LValueToRValue>
|       |   | `-DeclRefExpr 0x22150b2b9c8 <col:17> 'limb':'int' lvalue Var 0x22150b2b6b0 'mask' 'limb':'int'
|       |   `-IntegerLiteral 0x22150b2b9e8 <col:25> 'int' 1
|       |-CompoundAssignOperator 0x22150b2bac0 <line:1482:9, col:17> 'limb':'int' '&=' ComputeLHSTy='int' ComputeResultTy='int'
|       | |-DeclRefExpr 0x22150b2ba78 <col:9> 'limb':'int' lvalue Var 0x22150b2b6b0 'mask' 'limb':'int'
|       | `-IntegerLiteral 0x22150b2ba98 <col:17> 'int' 1
|       |-UnaryOperator 0x22150b2bb10 <line:1483:9, col:13> 'limb':'int' postfix '--'
|       | `-DeclRefExpr 0x22150b2baf0 <col:9> 'limb':'int' lvalue Var 0x22150b2b6b0 'mask' 'limb':'int'
|       `-ForStmt 0x22150b2bec8 <line:1484:9, line:1485:41>
|         |-BinaryOperator 0x22150b2bba0 <line:1484:14, col:18> 'unsigned int' '='
|         | |-DeclRefExpr 0x22150b2bb28 <col:14> 'unsigned int' lvalue Var 0x22150b2aee0 'j' 'unsigned int'
|         | `-ImplicitCastExpr 0x22150b2bb88 <col:18> 'unsigned int' <IntegralCast>
|         |   `-IntegerLiteral 0x22150b2bb60 <col:18> 'int' 0
|         |-<<<NULL>>>
|         |-BinaryOperator 0x22150b2bc80 <col:21, col:34> 'int' '<'
|         | |-ImplicitCastExpr 0x22150b2bc50 <col:21> 'unsigned int' <LValueToRValue>
|         | | `-DeclRefExpr 0x22150b2bbc0 <col:21> 'unsigned int' lvalue Var 0x22150b2aee0 'j' 'unsigned int'
|         | `-ImplicitCastExpr 0x22150b2bc68 <line:128:17, line:1484:34> 'unsigned int' <IntegralCast>
|         |   `-BinaryOperator 0x22150b2bc30 <line:128:17, line:1484:34> 'int' '*'
|         |     |-IntegerLiteral 0x22150b2bbe0 <line:128:17> 'int' 9
|         |     `-IntegerLiteral 0x22150b2bc08 <line:1484:34> 'int' 3
|         |-UnaryOperator 0x22150b2bcc0 <col:37, col:38> 'unsigned int' postfix '++'
|         | `-DeclRefExpr 0x22150b2bca0 <col:37> 'unsigned int' lvalue Var 0x22150b2aee0 'j' 'unsigned int'
|         `-CompoundAssignOperator 0x22150b2be98 <line:1485:13, col:41> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|           |-ArraySubscriptExpr 0x22150b2bd60 <col:13, col:23> 'limb':'int' lvalue
|           | |-ImplicitCastExpr 0x22150b2bd30 <col:13> 'limb *' <LValueToRValue>
|           | | `-DeclRefExpr 0x22150b2bcd8 <col:13> 'limb *' lvalue Var 0x22150b2af88 'outlimbs' 'limb *'
|           | `-ImplicitCastExpr 0x22150b2bd48 <col:22> 'unsigned int' <LValueToRValue>
|           |   `-DeclRefExpr 0x22150b2bd10 <col:22> 'unsigned int' lvalue Var 0x22150b2aee0 'j' 'unsigned int'
|           `-BinaryOperator 0x22150b2be78 <col:28, col:41> 'int' '&'
|             |-ImplicitCastExpr 0x22150b2be48 <col:28, col:37> 'limb':'int' <LValueToRValue>
|             | `-ArraySubscriptExpr 0x22150b2be08 <col:28, col:37> 'const limb':'const int' lvalue
|             |   |-ImplicitCastExpr 0x22150b2bdd8 <col:28> 'const limb *' <LValueToRValue>
|             |   | `-DeclRefExpr 0x22150b2bd80 <col:28> 'const limb *' lvalue Var 0x22150b2b460 'inlimbs' 'const limb *'
|             |   `-ImplicitCastExpr 0x22150b2bdf0 <col:36> 'unsigned int' <LValueToRValue>
|             |     `-DeclRefExpr 0x22150b2bdb8 <col:36> 'unsigned int' lvalue Var 0x22150b2aee0 'j' 'unsigned int'
|             `-ImplicitCastExpr 0x22150b2be60 <col:41> 'limb':'int' <LValueToRValue>
|               `-DeclRefExpr 0x22150b2be28 <col:41> 'limb':'int' lvalue Var 0x22150b2b6b0 'mask' 'limb':'int'
|-FunctionDecl 0x22150b2c1c8 <line:1490:1, line:1495:1> line:1490:13 used get_bit 'char (const u8 *, int)' static
| |-ParmVarDecl 0x22150b2c000 <col:21, col:43> col:43 used in 'const u8 *':'const u8 *'
| |-ParmVarDecl 0x22150b2c080 <col:47, col:51> col:51 used i 'int'
| `-CompoundStmt 0x22150b2c5b8 <line:1491:1, line:1495:1>
|   |-IfStmt 0x22150b2c360 <line:1492:5, line:1493:16>
|   | |-BinaryOperator 0x22150b2c2f0 <line:1492:9, col:13> 'int' '<'
|   | | |-ImplicitCastExpr 0x22150b2c2d8 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x22150b2c290 <col:9> 'int' lvalue ParmVar 0x22150b2c080 'i' 'int'
|   | | `-IntegerLiteral 0x22150b2c2b0 <col:13> 'int' 0
|   | `-ReturnStmt 0x22150b2c350 <line:1493:9, col:16>
|   |   `-ImplicitCastExpr 0x22150b2c338 <col:16> 'char' <IntegralCast>
|   |     `-IntegerLiteral 0x22150b2c310 <col:16> 'int' 0
|   `-ReturnStmt 0x22150b2c5a8 <line:1494:5, col:38>
|     `-ImplicitCastExpr 0x22150b2c590 <col:12, col:38> 'char' <IntegralCast>
|       `-BinaryOperator 0x22150b2c570 <col:12, col:38> 'int' '&'
|         |-ParenExpr 0x22150b2c528 <col:12, col:34> 'u8':'int'
|         | `-BinaryOperator 0x22150b2c508 <col:13, col:33> 'u8':'int' '>>'
|         |   |-ImplicitCastExpr 0x22150b2c4f0 <col:13, col:22> 'u8':'int' <LValueToRValue>
|         |   | `-ArraySubscriptExpr 0x22150b2c430 <col:13, col:22> 'const u8':'const int' lvalue
|         |   |   |-ImplicitCastExpr 0x22150b2c418 <col:13> 'const u8 *':'const u8 *' <LValueToRValue>
|         |   |   | `-DeclRefExpr 0x22150b2c378 <col:13> 'const u8 *':'const u8 *' lvalue ParmVar 0x22150b2c000 'in' 'const u8 *':'const u8 *'
|         |   |   `-BinaryOperator 0x22150b2c3f8 <col:16, col:21> 'int' '>>'
|         |   |     |-ImplicitCastExpr 0x22150b2c3e0 <col:16> 'int' <LValueToRValue>
|         |   |     | `-DeclRefExpr 0x22150b2c398 <col:16> 'int' lvalue ParmVar 0x22150b2c080 'i' 'int'
|         |   |     `-IntegerLiteral 0x22150b2c3b8 <col:21> 'int' 3
|         |   `-ParenExpr 0x22150b2c4d0 <col:27, col:33> 'int'
|         |     `-BinaryOperator 0x22150b2c4b0 <col:28, col:32> 'int' '&'
|         |       |-ImplicitCastExpr 0x22150b2c498 <col:28> 'int' <LValueToRValue>
|         |       | `-DeclRefExpr 0x22150b2c450 <col:28> 'int' lvalue ParmVar 0x22150b2c080 'i' 'int'
|         |       `-IntegerLiteral 0x22150b2c470 <col:32> 'int' 7
|         `-IntegerLiteral 0x22150b2c548 <col:38> 'int' 1
|-FunctionDecl 0x22150b21048 <line:1504:1, line:1585:1> line:1504:13 used batch_mul 'void (limb *, limb *, limb *, const felem_bytearray *, const unsigned int, const u8 *, const int, const felem (*)[17][3], const felem (*)[3])' static
| |-ParmVarDecl 0x22150b2c5e8 <col:23, col:29> col:29 used x_out 'limb *':'limb *'
| |-ParmVarDecl 0x22150b2c660 <col:36, col:42> col:42 used y_out 'limb *':'limb *'
| |-ParmVarDecl 0x22150b2c6d8 <col:49, col:55> col:55 used z_out 'limb *':'limb *'
| |-ParmVarDecl 0x22150b2c850 <line:1505:23, col:53> col:45 used scalars 'const felem_bytearray *':'const felem_bytearray *'
| |-ParmVarDecl 0x22150b2c8d0 <line:1506:23, col:38> col:38 used num_points 'const unsigned int'
| |-ParmVarDecl 0x22150b2c948 <col:50, col:60> col:60 used g_scalar 'const u8 *'
| |-ParmVarDecl 0x22150b2c9c8 <line:1507:23, col:33> col:33 used mixed 'const int'
| |-ParmVarDecl 0x22150b2cc60 <col:40, col:68> col:52 used pre_comp 'const felem (*)[17][3]':'const felem (*)[17][3]'
| |-ParmVarDecl 0x22150b20dc0 <line:1508:23, col:51> col:35 used g_pre_comp 'const felem (*)[3]':'const felem (*)[3]'
| `-CompoundStmt 0x22150b3bd60 <line:1509:1, line:1585:1>
|   |-DeclStmt 0x22150b21260 <line:1510:5, col:16>
|   | |-VarDecl 0x22150b21160 <col:5, col:9> col:9 used i 'int'
|   | `-VarDecl 0x22150b211e0 <col:5, col:12> col:12 used skip 'int'
|   |-DeclStmt 0x22150b214c0 <line:1511:5, col:47>
|   | |-VarDecl 0x22150b21290 <col:5, col:14> col:14 used num 'unsigned int'
|   | `-VarDecl 0x22150b21310 <col:5, col:46> col:19 used gen_mul 'unsigned int' cinit
|   |   `-ImplicitCastExpr 0x22150b21490 <col:29, col:46> 'unsigned int' <IntegralCast>
|   |     `-ParenExpr 0x22150b21470 <col:29, col:46> 'int'
|   |       `-BinaryOperator 0x22150b21450 <col:30, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27> 'int' '!='
|   |         |-ImplicitCastExpr 0x22150b21420 <.//openssl//file_jk/before\crypto\ec\ecp_nistp521.c:1511:30> 'const u8 *' <LValueToRValue>
|   |         | `-DeclRefExpr 0x22150b21378 <col:30> 'const u8 *' lvalue ParmVar 0x22150b2c948 'g_scalar' 'const u8 *'
|   |         `-ImplicitCastExpr 0x22150b21438 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'const u8 *' <BitCast>
|   |           `-ParenExpr 0x22150b21400 <col:17, col:27> 'void *'
|   |             `-CStyleCastExpr 0x22150b213d8 <col:18, col:26> 'void *' <NullToPointer>
|   |               `-IntegerLiteral 0x22150b21398 <col:26> 'int' 0
|   |-DeclStmt 0x22150b216f8 <.//openssl//file_jk/before\crypto\ec\ecp_nistp521.c:1512:5, col:24>
|   | |-VarDecl 0x22150b21538 <col:5, col:15> col:11 used nq 'felem [3]'
|   | `-VarDecl 0x22150b21678 <col:5, col:23> col:18 used tmp 'felem [4]'
|   |-DeclStmt 0x22150b21788 <line:1513:5, col:14>
|   | `-VarDecl 0x22150b21720 <col:5, col:10> col:10 used bits 'limb':'int'
|   |-DeclStmt 0x22150b218a8 <line:1514:5, col:19>
|   | |-VarDecl 0x22150b217b0 <col:5, col:8> col:8 used sign 'u8':'int'
|   | `-VarDecl 0x22150b21828 <col:5, col:14> col:14 used digit 'u8':'int'
|   |-CallExpr 0x22150b219d0 <line:1517:5, col:29> 'void *'
|   | |-ImplicitCastExpr 0x22150b219b8 <col:5> 'void *(*)(void *, int, unsigned long long)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150b218c0 <col:5> 'void *(void *, int, unsigned long long)' Function 0x221508f8da8 'memset' 'void *(void *, int, unsigned long long)'
|   | |-ImplicitCastExpr 0x22150b21a20 <col:12> 'void *' <BitCast>
|   | | `-ImplicitCastExpr 0x22150b21a08 <col:12> 'felem *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x22150b218e0 <col:12> 'felem [3]' lvalue Var 0x22150b21538 'nq' 'felem [3]'
|   | |-IntegerLiteral 0x22150b21918 <col:16> 'int' 0
|   | `-UnaryExprOrTypeTraitExpr 0x22150b21980 <col:19, col:28> 'unsigned long long' sizeof
|   |   `-ParenExpr 0x22150b21960 <col:25, col:28> 'felem [3]' lvalue
|   |     `-DeclRefExpr 0x22150b21940 <col:26> 'felem [3]' lvalue Var 0x22150b21538 'nq' 'felem [3]' non_odr_use_unevaluated
|   |-BinaryOperator 0x22150b21a98 <line:1524:5, col:12> 'int' '='
|   | |-DeclRefExpr 0x22150b21a38 <col:5> 'int' lvalue Var 0x22150b211e0 'skip' 'int'
|   | `-IntegerLiteral 0x22150b21a70 <col:12> 'int' 1
|   |-ForStmt 0x22150b3b938 <line:1526:5, line:1581:5>
|   | |-BinaryOperator 0x22150b21bc8 <line:1526:10, col:37> 'int' '='
|   | | |-DeclRefExpr 0x22150b21ab8 <col:10> 'int' lvalue Var 0x22150b21160 'i' 'int'
|   | | `-ParenExpr 0x22150b21ba8 <col:14, col:37> 'int'
|   | |   `-ConditionalOperator 0x22150b21b78 <col:15, col:34> 'int'
|   | |     |-ImplicitCastExpr 0x22150b21b60 <col:15> 'unsigned int' <LValueToRValue>
|   | |     | `-DeclRefExpr 0x22150b21af0 <col:15> 'const unsigned int' lvalue ParmVar 0x22150b2c8d0 'num_points' 'const unsigned int'
|   | |     |-IntegerLiteral 0x22150b21b10 <col:28> 'int' 520
|   | |     `-IntegerLiteral 0x22150b21b38 <col:34> 'int' 130
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x22150b21c48 <col:40, col:45> 'int' '>='
|   | | |-ImplicitCastExpr 0x22150b21c30 <col:40> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x22150b21be8 <col:40> 'int' lvalue Var 0x22150b21160 'i' 'int'
|   | | `-IntegerLiteral 0x22150b21c08 <col:45> 'int' 0
|   | |-UnaryOperator 0x22150b21c88 <col:48, col:50> 'int' prefix '--'
|   | | `-DeclRefExpr 0x22150b21c68 <col:50> 'int' lvalue Var 0x22150b21160 'i' 'int'
|   | `-CompoundStmt 0x22150b3b910 <col:53, line:1581:5>
|   |   |-IfStmt 0x22150b22150 <line:1528:9, line:1529:66>
|   |   | |-UnaryOperator 0x22150b21cd8 <line:1528:13, col:14> 'int' prefix '!' cannot overflow
|   |   | | `-ImplicitCastExpr 0x22150b21cc0 <col:14> 'int' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x22150b21ca0 <col:14> 'int' lvalue Var 0x22150b211e0 'skip' 'int'
|   |   | `-CallExpr 0x22150b22028 <line:1529:13, col:66> 'void'
|   |   |   |-ImplicitCastExpr 0x22150b22010 <col:13> 'void (*)(limb *, limb *, limb *, const limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   |   |   | `-DeclRefExpr 0x22150b21cf0 <col:13> 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *)' Function 0x22150a2bd78 'point_double' 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *)'
|   |   |   |-ImplicitCastExpr 0x22150b22078 <col:26, col:30> 'limb *' <ArrayToPointerDecay>
|   |   |   | `-ArraySubscriptExpr 0x22150b21d70 <col:26, col:30> 'felem':'limb [9]' lvalue
|   |   |   |   |-ImplicitCastExpr 0x22150b21d58 <col:26> 'felem *' <ArrayToPointerDecay>
|   |   |   |   | `-DeclRefExpr 0x22150b21d10 <col:26> 'felem [3]' lvalue Var 0x22150b21538 'nq' 'felem [3]'
|   |   |   |   `-IntegerLiteral 0x22150b21d30 <col:29> 'int' 0
|   |   |   |-ImplicitCastExpr 0x22150b22090 <col:33, col:37> 'limb *' <ArrayToPointerDecay>
|   |   |   | `-ArraySubscriptExpr 0x22150b21df0 <col:33, col:37> 'felem':'limb [9]' lvalue
|   |   |   |   |-ImplicitCastExpr 0x22150b21dd8 <col:33> 'felem *' <ArrayToPointerDecay>
|   |   |   |   | `-DeclRefExpr 0x22150b21d90 <col:33> 'felem [3]' lvalue Var 0x22150b21538 'nq' 'felem [3]'
|   |   |   |   `-IntegerLiteral 0x22150b21db0 <col:36> 'int' 1
|   |   |   |-ImplicitCastExpr 0x22150b220a8 <col:40, col:44> 'limb *' <ArrayToPointerDecay>
|   |   |   | `-ArraySubscriptExpr 0x22150b21e70 <col:40, col:44> 'felem':'limb [9]' lvalue
|   |   |   |   |-ImplicitCastExpr 0x22150b21e58 <col:40> 'felem *' <ArrayToPointerDecay>
|   |   |   |   | `-DeclRefExpr 0x22150b21e10 <col:40> 'felem [3]' lvalue Var 0x22150b21538 'nq' 'felem [3]'
|   |   |   |   `-IntegerLiteral 0x22150b21e30 <col:43> 'int' 2
|   |   |   |-ImplicitCastExpr 0x22150b220d8 <col:47, col:51> 'const limb *':'const limb *' <NoOp>
|   |   |   | `-ImplicitCastExpr 0x22150b220c0 <col:47, col:51> 'limb *' <ArrayToPointerDecay>
|   |   |   |   `-ArraySubscriptExpr 0x22150b21ef0 <col:47, col:51> 'felem':'limb [9]' lvalue
|   |   |   |     |-ImplicitCastExpr 0x22150b21ed8 <col:47> 'felem *' <ArrayToPointerDecay>
|   |   |   |     | `-DeclRefExpr 0x22150b21e90 <col:47> 'felem [3]' lvalue Var 0x22150b21538 'nq' 'felem [3]'
|   |   |   |     `-IntegerLiteral 0x22150b21eb0 <col:50> 'int' 0
|   |   |   |-ImplicitCastExpr 0x22150b22108 <col:54, col:58> 'const limb *':'const limb *' <NoOp>
|   |   |   | `-ImplicitCastExpr 0x22150b220f0 <col:54, col:58> 'limb *' <ArrayToPointerDecay>
|   |   |   |   `-ArraySubscriptExpr 0x22150b21f70 <col:54, col:58> 'felem':'limb [9]' lvalue
|   |   |   |     |-ImplicitCastExpr 0x22150b21f58 <col:54> 'felem *' <ArrayToPointerDecay>
|   |   |   |     | `-DeclRefExpr 0x22150b21f10 <col:54> 'felem [3]' lvalue Var 0x22150b21538 'nq' 'felem [3]'
|   |   |   |     `-IntegerLiteral 0x22150b21f30 <col:57> 'int' 1
|   |   |   `-ImplicitCastExpr 0x22150b22138 <col:61, col:65> 'const limb *':'const limb *' <NoOp>
|   |   |     `-ImplicitCastExpr 0x22150b22120 <col:61, col:65> 'limb *' <ArrayToPointerDecay>
|   |   |       `-ArraySubscriptExpr 0x22150b21ff0 <col:61, col:65> 'felem':'limb [9]' lvalue
|   |   |         |-ImplicitCastExpr 0x22150b21fd8 <col:61> 'felem *' <ArrayToPointerDecay>
|   |   |         | `-DeclRefExpr 0x22150b21f90 <col:61> 'felem [3]' lvalue Var 0x22150b21538 'nq' 'felem [3]'
|   |   |         `-IntegerLiteral 0x22150b21fb0 <col:64> 'int' 2
|   |   |-IfStmt 0x22150b23698 <line:1532:9, line:1549:9>
|   |   | |-BinaryOperator 0x22150b22258 <line:1532:13, col:33> 'int' '&&'
|   |   | | |-ImplicitCastExpr 0x22150b22240 <col:13> 'unsigned int' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x22150b22168 <col:13> 'unsigned int' lvalue Var 0x22150b21310 'gen_mul' 'unsigned int'
|   |   | | `-ParenExpr 0x22150b22220 <col:24, col:33> 'int'
|   |   | |   `-BinaryOperator 0x22150b22200 <col:25, col:30> 'int' '<='
|   |   | |     |-ImplicitCastExpr 0x22150b221e8 <col:25> 'int' <LValueToRValue>
|   |   | |     | `-DeclRefExpr 0x22150b221a0 <col:25> 'int' lvalue Var 0x22150b21160 'i' 'int'
|   |   | |     `-IntegerLiteral 0x22150b221c0 <col:30> 'int' 130
|   |   | `-CompoundStmt 0x22150b23668 <col:36, line:1549:9>
|   |   |   |-BinaryOperator 0x22150b22488 <line:1533:13, col:50> 'limb':'int' '='
|   |   |   | |-DeclRefExpr 0x22150b22278 <col:13> 'limb':'int' lvalue Var 0x22150b21720 'bits' 'limb':'int'
|   |   |   | `-BinaryOperator 0x22150b22468 <col:20, col:50> 'int' '<<'
|   |   |   |   |-ImplicitCastExpr 0x22150b22450 <col:20, col:45> 'int' <IntegralCast>
|   |   |   |   | `-CallExpr 0x22150b223e0 <col:20, col:45> 'char'
|   |   |   |   |   |-ImplicitCastExpr 0x22150b223c8 <col:20> 'char (*)(const u8 *, int)' <FunctionToPointerDecay>
|   |   |   |   |   | `-DeclRefExpr 0x22150b222b0 <col:20> 'char (const u8 *, int)' Function 0x22150b2c1c8 'get_bit' 'char (const u8 *, int)'
|   |   |   |   |   |-ImplicitCastExpr 0x22150b22410 <col:28> 'const u8 *' <LValueToRValue>
|   |   |   |   |   | `-DeclRefExpr 0x22150b222d0 <col:28> 'const u8 *' lvalue ParmVar 0x22150b2c948 'g_scalar' 'const u8 *'
|   |   |   |   |   `-BinaryOperator 0x22150b22350 <col:38, col:42> 'int' '+'
|   |   |   |   |     |-ImplicitCastExpr 0x22150b22338 <col:38> 'int' <LValueToRValue>
|   |   |   |   |     | `-DeclRefExpr 0x22150b222f0 <col:38> 'int' lvalue Var 0x22150b21160 'i' 'int'
|   |   |   |   |     `-IntegerLiteral 0x22150b22310 <col:42> 'int' 390
|   |   |   |   `-IntegerLiteral 0x22150b22428 <col:50> 'int' 3
|   |   |   |-IfStmt 0x22150b22a30 <line:1534:13, line:1538:13>
|   |   |   | |-BinaryOperator 0x22150b22508 <line:1534:17, col:21> 'int' '<'
|   |   |   | | |-ImplicitCastExpr 0x22150b224f0 <col:17> 'int' <LValueToRValue>
|   |   |   | | | `-DeclRefExpr 0x22150b224a8 <col:17> 'int' lvalue Var 0x22150b21160 'i' 'int'
|   |   |   | | `-IntegerLiteral 0x22150b224c8 <col:21> 'int' 130
|   |   |   | `-CompoundStmt 0x22150b22a08 <col:26, line:1538:13>
|   |   |   |   |-CompoundAssignOperator 0x22150b226c8 <line:1535:17, col:55> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   |   |   |   | |-DeclRefExpr 0x22150b22528 <col:17> 'limb':'int' lvalue Var 0x22150b21720 'bits' 'limb':'int'
|   |   |   |   | `-BinaryOperator 0x22150b226a8 <col:25, col:55> 'int' '<<'
|   |   |   |   |   |-ImplicitCastExpr 0x22150b22690 <col:25, col:50> 'int' <IntegralCast>
|   |   |   |   |   | `-CallExpr 0x22150b22620 <col:25, col:50> 'char'
|   |   |   |   |   |   |-ImplicitCastExpr 0x22150b22608 <col:25> 'char (*)(const u8 *, int)' <FunctionToPointerDecay>
|   |   |   |   |   |   | `-DeclRefExpr 0x22150b22548 <col:25> 'char (const u8 *, int)' Function 0x22150b2c1c8 'get_bit' 'char (const u8 *, int)'
|   |   |   |   |   |   |-ImplicitCastExpr 0x22150b22650 <col:33> 'const u8 *' <LValueToRValue>
|   |   |   |   |   |   | `-DeclRefExpr 0x22150b22568 <col:33> 'const u8 *' lvalue ParmVar 0x22150b2c948 'g_scalar' 'const u8 *'
|   |   |   |   |   |   `-BinaryOperator 0x22150b225e8 <col:43, col:47> 'int' '+'
|   |   |   |   |   |     |-ImplicitCastExpr 0x22150b225d0 <col:43> 'int' <LValueToRValue>
|   |   |   |   |   |     | `-DeclRefExpr 0x22150b22588 <col:43> 'int' lvalue Var 0x22150b21160 'i' 'int'
|   |   |   |   |   |     `-IntegerLiteral 0x22150b225a8 <col:47> 'int' 260
|   |   |   |   |   `-IntegerLiteral 0x22150b22668 <col:55> 'int' 2
|   |   |   |   |-CompoundAssignOperator 0x22150b22898 <line:1536:17, col:55> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   |   |   |   | |-DeclRefExpr 0x22150b226f8 <col:17> 'limb':'int' lvalue Var 0x22150b21720 'bits' 'limb':'int'
|   |   |   |   | `-BinaryOperator 0x22150b22878 <col:25, col:55> 'int' '<<'
|   |   |   |   |   |-ImplicitCastExpr 0x22150b22860 <col:25, col:50> 'int' <IntegralCast>
|   |   |   |   |   | `-CallExpr 0x22150b227f0 <col:25, col:50> 'char'
|   |   |   |   |   |   |-ImplicitCastExpr 0x22150b227d8 <col:25> 'char (*)(const u8 *, int)' <FunctionToPointerDecay>
|   |   |   |   |   |   | `-DeclRefExpr 0x22150b22718 <col:25> 'char (const u8 *, int)' Function 0x22150b2c1c8 'get_bit' 'char (const u8 *, int)'
|   |   |   |   |   |   |-ImplicitCastExpr 0x22150b22820 <col:33> 'const u8 *' <LValueToRValue>
|   |   |   |   |   |   | `-DeclRefExpr 0x22150b22738 <col:33> 'const u8 *' lvalue ParmVar 0x22150b2c948 'g_scalar' 'const u8 *'
|   |   |   |   |   |   `-BinaryOperator 0x22150b227b8 <col:43, col:47> 'int' '+'
|   |   |   |   |   |     |-ImplicitCastExpr 0x22150b227a0 <col:43> 'int' <LValueToRValue>
|   |   |   |   |   |     | `-DeclRefExpr 0x22150b22758 <col:43> 'int' lvalue Var 0x22150b21160 'i' 'int'
|   |   |   |   |   |     `-IntegerLiteral 0x22150b22778 <col:47> 'int' 130
|   |   |   |   |   `-IntegerLiteral 0x22150b22838 <col:55> 'int' 1
|   |   |   |   `-CompoundAssignOperator 0x22150b229d8 <line:1537:17, col:44> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   |   |   |     |-DeclRefExpr 0x22150b228c8 <col:17> 'limb':'int' lvalue Var 0x22150b21720 'bits' 'limb':'int'
|   |   |   |     `-ImplicitCastExpr 0x22150b229c0 <col:25, col:44> 'int' <IntegralCast>
|   |   |   |       `-CallExpr 0x22150b22960 <col:25, col:44> 'char'
|   |   |   |         |-ImplicitCastExpr 0x22150b22948 <col:25> 'char (*)(const u8 *, int)' <FunctionToPointerDecay>
|   |   |   |         | `-DeclRefExpr 0x22150b228e8 <col:25> 'char (const u8 *, int)' Function 0x22150b2c1c8 'get_bit' 'char (const u8 *, int)'
|   |   |   |         |-ImplicitCastExpr 0x22150b22990 <col:33> 'const u8 *' <LValueToRValue>
|   |   |   |         | `-DeclRefExpr 0x22150b22908 <col:33> 'const u8 *' lvalue ParmVar 0x22150b2c948 'g_scalar' 'const u8 *'
|   |   |   |         `-ImplicitCastExpr 0x22150b229a8 <col:43> 'int' <LValueToRValue>
|   |   |   |           `-DeclRefExpr 0x22150b22928 <col:43> 'int' lvalue Var 0x22150b21160 'i' 'int'
|   |   |   |-CallExpr 0x22150b22b80 <line:1540:13, col:51> 'void'
|   |   |   | |-ImplicitCastExpr 0x22150b22b68 <col:13> 'void (*)(const limb, unsigned int, const felem (*)[3], felem *)' <FunctionToPointerDecay>
|   |   |   | | `-DeclRefExpr 0x22150b22a48 <col:13> 'void (const limb, unsigned int, const felem (*)[3], felem *)' Function 0x22150b26d38 'select_point' 'void (const limb, unsigned int, const felem (*)[3], felem *)'
|   |   |   | |-ImplicitCastExpr 0x22150b22bc0 <col:26> 'limb':'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x22150b22a68 <col:26> 'limb':'int' lvalue Var 0x22150b21720 'bits' 'limb':'int'
|   |   |   | |-ImplicitCastExpr 0x22150b22bd8 <col:32> 'unsigned int' <IntegralCast>
|   |   |   | | `-IntegerLiteral 0x22150b22a88 <col:32> 'int' 16
|   |   |   | |-ImplicitCastExpr 0x22150b22bf0 <col:36> 'const felem (*)[3]':'const felem (*)[3]' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x22150b22ab0 <col:36> 'const felem (*)[3]':'const felem (*)[3]' lvalue ParmVar 0x22150b20dc0 'g_pre_comp' 'const felem (*)[3]':'const felem (*)[3]'
|   |   |   | `-ImplicitCastExpr 0x22150b22c08 <col:48> 'felem *' <ArrayToPointerDecay>
|   |   |   |   `-DeclRefExpr 0x22150b22ad0 <col:48> 'felem [4]' lvalue Var 0x22150b21678 'tmp' 'felem [4]'
|   |   |   `-IfStmt 0x22150b23640 <line:1541:13, line:1548:13> has_else
|   |   |     |-UnaryOperator 0x22150b22c58 <line:1541:17, col:18> 'int' prefix '!' cannot overflow
|   |   |     | `-ImplicitCastExpr 0x22150b22c40 <col:18> 'int' <LValueToRValue>
|   |   |     |   `-DeclRefExpr 0x22150b22c20 <col:18> 'int' lvalue Var 0x22150b211e0 'skip' 'int'
|   |   |     |-CompoundStmt 0x22150b233a8 <col:24, line:1545:13>
|   |   |     | `-CallExpr 0x22150b231d0 <line:1543:17, line:1544:73> 'void'
|   |   |     |   |-ImplicitCastExpr 0x22150b231b8 <line:1543:17> 'void (*)(limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   |   |     |   | `-DeclRefExpr 0x22150b22c70 <col:17> 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const limb *, const limb *, const limb *)' Function 0x22150a3d308 'point_add' 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const limb *, const limb *, const limb *)'
|   |   |     |   |-ImplicitCastExpr 0x22150b23240 <col:27, col:31> 'limb *' <ArrayToPointerDecay>
|   |   |     |   | `-ArraySubscriptExpr 0x22150b22cf0 <col:27, col:31> 'felem':'limb [9]' lvalue
|   |   |     |   |   |-ImplicitCastExpr 0x22150b22cd8 <col:27> 'felem *' <ArrayToPointerDecay>
|   |   |     |   |   | `-DeclRefExpr 0x22150b22c90 <col:27> 'felem [3]' lvalue Var 0x22150b21538 'nq' 'felem [3]'
|   |   |     |   |   `-IntegerLiteral 0x22150b22cb0 <col:30> 'int' 0
|   |   |     |   |-ImplicitCastExpr 0x22150b23258 <col:34, col:38> 'limb *' <ArrayToPointerDecay>
|   |   |     |   | `-ArraySubscriptExpr 0x22150b22d70 <col:34, col:38> 'felem':'limb [9]' lvalue
|   |   |     |   |   |-ImplicitCastExpr 0x22150b22d58 <col:34> 'felem *' <ArrayToPointerDecay>
|   |   |     |   |   | `-DeclRefExpr 0x22150b22d10 <col:34> 'felem [3]' lvalue Var 0x22150b21538 'nq' 'felem [3]'
|   |   |     |   |   `-IntegerLiteral 0x22150b22d30 <col:37> 'int' 1
|   |   |     |   |-ImplicitCastExpr 0x22150b23270 <col:41, col:45> 'limb *' <ArrayToPointerDecay>
|   |   |     |   | `-ArraySubscriptExpr 0x22150b22e10 <col:41, col:45> 'felem':'limb [9]' lvalue
|   |   |     |   |   |-ImplicitCastExpr 0x22150b22df8 <col:41> 'felem *' <ArrayToPointerDecay>
|   |   |     |   |   | `-DeclRefExpr 0x22150b22d90 <col:41> 'felem [3]' lvalue Var 0x22150b21538 'nq' 'felem [3]'
|   |   |     |   |   `-IntegerLiteral 0x22150b22dd0 <col:44> 'int' 2
|   |   |     |   |-ImplicitCastExpr 0x22150b232a0 <line:1544:27, col:31> 'const limb *':'const limb *' <NoOp>
|   |   |     |   | `-ImplicitCastExpr 0x22150b23288 <col:27, col:31> 'limb *' <ArrayToPointerDecay>
|   |   |     |   |   `-ArraySubscriptExpr 0x22150b22e90 <col:27, col:31> 'felem':'limb [9]' lvalue
|   |   |     |   |     |-ImplicitCastExpr 0x22150b22e78 <col:27> 'felem *' <ArrayToPointerDecay>
|   |   |     |   |     | `-DeclRefExpr 0x22150b22e30 <col:27> 'felem [3]' lvalue Var 0x22150b21538 'nq' 'felem [3]'
|   |   |     |   |     `-IntegerLiteral 0x22150b22e50 <col:30> 'int' 0
|   |   |     |   |-ImplicitCastExpr 0x22150b232d0 <col:34, col:38> 'const limb *':'const limb *' <NoOp>
|   |   |     |   | `-ImplicitCastExpr 0x22150b232b8 <col:34, col:38> 'limb *' <ArrayToPointerDecay>
|   |   |     |   |   `-ArraySubscriptExpr 0x22150b22f10 <col:34, col:38> 'felem':'limb [9]' lvalue
|   |   |     |   |     |-ImplicitCastExpr 0x22150b22ef8 <col:34> 'felem *' <ArrayToPointerDecay>
|   |   |     |   |     | `-DeclRefExpr 0x22150b22eb0 <col:34> 'felem [3]' lvalue Var 0x22150b21538 'nq' 'felem [3]'
|   |   |     |   |     `-IntegerLiteral 0x22150b22ed0 <col:37> 'int' 1
|   |   |     |   |-ImplicitCastExpr 0x22150b23300 <col:41, col:45> 'const limb *':'const limb *' <NoOp>
|   |   |     |   | `-ImplicitCastExpr 0x22150b232e8 <col:41, col:45> 'limb *' <ArrayToPointerDecay>
|   |   |     |   |   `-ArraySubscriptExpr 0x22150b22f90 <col:41, col:45> 'felem':'limb [9]' lvalue
|   |   |     |   |     |-ImplicitCastExpr 0x22150b22f78 <col:41> 'felem *' <ArrayToPointerDecay>
|   |   |     |   |     | `-DeclRefExpr 0x22150b22f30 <col:41> 'felem [3]' lvalue Var 0x22150b21538 'nq' 'felem [3]'
|   |   |     |   |     `-IntegerLiteral 0x22150b22f50 <col:44> 'int' 2
|   |   |     |   |-IntegerLiteral 0x22150b22fb0 <col:48> 'int' 1
|   |   |     |   |-ImplicitCastExpr 0x22150b23330 <col:51, col:56> 'const limb *':'const limb *' <NoOp>
|   |   |     |   | `-ImplicitCastExpr 0x22150b23318 <col:51, col:56> 'limb *' <ArrayToPointerDecay>
|   |   |     |   |   `-ArraySubscriptExpr 0x22150b23038 <col:51, col:56> 'felem':'limb [9]' lvalue
|   |   |     |   |     |-ImplicitCastExpr 0x22150b23020 <col:51> 'felem *' <ArrayToPointerDecay>
|   |   |     |   |     | `-DeclRefExpr 0x22150b22fd8 <col:51> 'felem [4]' lvalue Var 0x22150b21678 'tmp' 'felem [4]'
|   |   |     |   |     `-IntegerLiteral 0x22150b22ff8 <col:55> 'int' 0
|   |   |     |   |-ImplicitCastExpr 0x22150b23360 <col:59, col:64> 'const limb *':'const limb *' <NoOp>
|   |   |     |   | `-ImplicitCastExpr 0x22150b23348 <col:59, col:64> 'limb *' <ArrayToPointerDecay>
|   |   |     |   |   `-ArraySubscriptExpr 0x22150b230b8 <col:59, col:64> 'felem':'limb [9]' lvalue
|   |   |     |   |     |-ImplicitCastExpr 0x22150b230a0 <col:59> 'felem *' <ArrayToPointerDecay>
|   |   |     |   |     | `-DeclRefExpr 0x22150b23058 <col:59> 'felem [4]' lvalue Var 0x22150b21678 'tmp' 'felem [4]'
|   |   |     |   |     `-IntegerLiteral 0x22150b23078 <col:63> 'int' 1
|   |   |     |   `-ImplicitCastExpr 0x22150b23390 <col:67, col:72> 'const limb *':'const limb *' <NoOp>
|   |   |     |     `-ImplicitCastExpr 0x22150b23378 <col:67, col:72> 'limb *' <ArrayToPointerDecay>
|   |   |     |       `-ArraySubscriptExpr 0x22150b23138 <col:67, col:72> 'felem':'limb [9]' lvalue
|   |   |     |         |-ImplicitCastExpr 0x22150b23120 <col:67> 'felem *' <ArrayToPointerDecay>
|   |   |     |         | `-DeclRefExpr 0x22150b230d8 <col:67> 'felem [4]' lvalue Var 0x22150b21678 'tmp' 'felem [4]'
|   |   |     |         `-IntegerLiteral 0x22150b230f8 <col:71> 'int' 2
|   |   |     `-CompoundStmt 0x22150b23620 <line:1545:20, line:1548:13>
|   |   |       |-CallExpr 0x22150b23520 <line:1546:17, col:50> 'void *'
|   |   |       | |-ImplicitCastExpr 0x22150b23508 <col:17> 'void *(*)(void *, const void *, unsigned long long)' <FunctionToPointerDecay>
|   |   |       | | `-DeclRefExpr 0x22150b233c0 <col:17> 'void *(void *, const void *, unsigned long long)' Function 0x221508f72c8 'memcpy' 'void *(void *, const void *, unsigned long long)'
|   |   |       | |-ImplicitCastExpr 0x22150b23570 <col:24> 'void *' <BitCast>
|   |   |       | | `-ImplicitCastExpr 0x22150b23558 <col:24> 'felem *' <ArrayToPointerDecay>
|   |   |       | |   `-DeclRefExpr 0x22150b233e0 <col:24> 'felem [3]' lvalue Var 0x22150b21538 'nq' 'felem [3]'
|   |   |       | |-ImplicitCastExpr 0x22150b235a0 <col:28> 'const void *' <BitCast>
|   |   |       | | `-ImplicitCastExpr 0x22150b23588 <col:28> 'felem *' <ArrayToPointerDecay>
|   |   |       | |   `-DeclRefExpr 0x22150b23400 <col:28> 'felem [4]' lvalue Var 0x22150b21678 'tmp' 'felem [4]'
|   |   |       | `-BinaryOperator 0x22150b23490 <col:33, col:49> 'unsigned long long' '*'
|   |   |       |   |-ImplicitCastExpr 0x22150b23478 <col:33> 'unsigned long long' <IntegralCast>
|   |   |       |   | `-IntegerLiteral 0x22150b23420 <col:33> 'int' 3
|   |   |       |   `-UnaryExprOrTypeTraitExpr 0x22150b23458 <col:37, col:49> 'unsigned long long' sizeof 'felem':'limb [9]'
|   |   |       `-BinaryOperator 0x22150b23600 <line:1547:17, col:24> 'int' '='
|   |   |         |-DeclRefExpr 0x22150b235b8 <col:17> 'int' lvalue Var 0x22150b211e0 'skip' 'int'
|   |   |         `-IntegerLiteral 0x22150b235d8 <col:24> 'int' 0
|   |   `-IfStmt 0x22150b3b8f8 <line:1552:9, line:1580:9>
|   |     |-BinaryOperator 0x22150b237d0 <line:1552:13, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x22150b237b8 <col:13> 'unsigned int' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x22150b236b0 <col:13> 'const unsigned int' lvalue ParmVar 0x22150b2c8d0 'num_points' 'const unsigned int'
|   |     | `-ParenExpr 0x22150b23798 <col:27, col:38> 'int'
|   |     |   `-BinaryOperator 0x22150b23778 <col:28, col:37> 'int' '=='
|   |     |     |-BinaryOperator 0x22150b23730 <col:28, col:32> 'int' '%'
|   |     |     | |-ImplicitCastExpr 0x22150b23718 <col:28> 'int' <LValueToRValue>
|   |     |     | | `-DeclRefExpr 0x22150b236d0 <col:28> 'int' lvalue Var 0x22150b21160 'i' 'int'
|   |     |     | `-IntegerLiteral 0x22150b236f0 <col:32> 'int' 5
|   |     |     `-IntegerLiteral 0x22150b23750 <col:37> 'int' 0
|   |     `-CompoundStmt 0x22150b3b8e0 <col:41, line:1580:9>
|   |       `-ForStmt 0x22150b3b8a8 <line:1554:13, line:1579:13>
|   |         |-BinaryOperator 0x22150b23868 <line:1554:18, col:24> 'unsigned int' '='
|   |         | |-DeclRefExpr 0x22150b237f0 <col:18> 'unsigned int' lvalue Var 0x22150b21290 'num' 'unsigned int'
|   |         | `-ImplicitCastExpr 0x22150b23850 <col:24> 'unsigned int' <IntegralCast>
|   |         |   `-IntegerLiteral 0x22150b23828 <col:24> 'int' 0
|   |         |-<<<NULL>>>
|   |         |-BinaryOperator 0x22150b238f8 <col:27, col:33> 'int' '<'
|   |         | |-ImplicitCastExpr 0x22150b238c8 <col:27> 'unsigned int' <LValueToRValue>
|   |         | | `-DeclRefExpr 0x22150b23888 <col:27> 'unsigned int' lvalue Var 0x22150b21290 'num' 'unsigned int'
|   |         | `-ImplicitCastExpr 0x22150b238e0 <col:33> 'unsigned int' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x22150b238a8 <col:33> 'const unsigned int' lvalue ParmVar 0x22150b2c8d0 'num_points' 'const unsigned int'
|   |         |-UnaryOperator 0x22150b23938 <col:45, col:47> 'unsigned int' prefix '++'
|   |         | `-DeclRefExpr 0x22150b23918 <col:47> 'unsigned int' lvalue Var 0x22150b21290 'num' 'unsigned int'
|   |         `-CompoundStmt 0x22150b3b840 <col:52, line:1579:13>
|   |           |-BinaryOperator 0x22150b23b60 <line:1555:17, col:56> 'limb':'int' '='
|   |           | |-DeclRefExpr 0x22150b23950 <col:17> 'limb':'int' lvalue Var 0x22150b21720 'bits' 'limb':'int'
|   |           | `-BinaryOperator 0x22150b23b40 <col:24, col:56> 'int' '<<'
|   |           |   |-ImplicitCastExpr 0x22150b23b28 <col:24, col:51> 'int' <IntegralCast>
|   |           |   | `-CallExpr 0x22150b23ab8 <col:24, col:51> 'char'
|   |           |   |   |-ImplicitCastExpr 0x22150b23aa0 <col:24> 'char (*)(const u8 *, int)' <FunctionToPointerDecay>
|   |           |   |   | `-DeclRefExpr 0x22150b23970 <col:24> 'char (const u8 *, int)' Function 0x22150b2c1c8 'get_bit' 'char (const u8 *, int)'
|   |           |   |   |-ImplicitCastExpr 0x22150b23ae8 <col:32, col:43> 'const u8 *' <ArrayToPointerDecay>
|   |           |   |   | `-ArraySubscriptExpr 0x22150b23a00 <col:32, col:43> 'const felem_bytearray':'u8 const[66]' lvalue
|   |           |   |   |   |-ImplicitCastExpr 0x22150b239d0 <col:32> 'const felem_bytearray *':'const felem_bytearray *' <LValueToRValue>
|   |           |   |   |   | `-DeclRefExpr 0x22150b23990 <col:32> 'const felem_bytearray *':'const felem_bytearray *' lvalue ParmVar 0x22150b2c850 'scalars' 'const felem_bytearray *':'const felem_bytearray *'
|   |           |   |   |   `-ImplicitCastExpr 0x22150b239e8 <col:40> 'unsigned int' <LValueToRValue>
|   |           |   |   |     `-DeclRefExpr 0x22150b239b0 <col:40> 'unsigned int' lvalue Var 0x22150b21290 'num' 'unsigned int'
|   |           |   |   `-BinaryOperator 0x22150b23a80 <col:46, col:50> 'int' '+'
|   |           |   |     |-ImplicitCastExpr 0x22150b23a68 <col:46> 'int' <LValueToRValue>
|   |           |   |     | `-DeclRefExpr 0x22150b23a20 <col:46> 'int' lvalue Var 0x22150b21160 'i' 'int'
|   |           |   |     `-IntegerLiteral 0x22150b23a40 <col:50> 'int' 4
|   |           |   `-IntegerLiteral 0x22150b23b00 <col:56> 'int' 5
|   |           |-CompoundAssignOperator 0x22150b23d90 <line:1556:17, col:57> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   |           | |-DeclRefExpr 0x22150b23b80 <col:17> 'limb':'int' lvalue Var 0x22150b21720 'bits' 'limb':'int'
|   |           | `-BinaryOperator 0x22150b23d70 <col:25, col:57> 'int' '<<'
|   |           |   |-ImplicitCastExpr 0x22150b23d58 <col:25, col:52> 'int' <IntegralCast>
|   |           |   | `-CallExpr 0x22150b23ce8 <col:25, col:52> 'char'
|   |           |   |   |-ImplicitCastExpr 0x22150b23cd0 <col:25> 'char (*)(const u8 *, int)' <FunctionToPointerDecay>
|   |           |   |   | `-DeclRefExpr 0x22150b23ba0 <col:25> 'char (const u8 *, int)' Function 0x22150b2c1c8 'get_bit' 'char (const u8 *, int)'
|   |           |   |   |-ImplicitCastExpr 0x22150b23d18 <col:33, col:44> 'const u8 *' <ArrayToPointerDecay>
|   |           |   |   | `-ArraySubscriptExpr 0x22150b23c30 <col:33, col:44> 'const felem_bytearray':'u8 const[66]' lvalue
|   |           |   |   |   |-ImplicitCastExpr 0x22150b23c00 <col:33> 'const felem_bytearray *':'const felem_bytearray *' <LValueToRValue>
|   |           |   |   |   | `-DeclRefExpr 0x22150b23bc0 <col:33> 'const felem_bytearray *':'const felem_bytearray *' lvalue ParmVar 0x22150b2c850 'scalars' 'const felem_bytearray *':'const felem_bytearray *'
|   |           |   |   |   `-ImplicitCastExpr 0x22150b23c18 <col:41> 'unsigned int' <LValueToRValue>
|   |           |   |   |     `-DeclRefExpr 0x22150b23be0 <col:41> 'unsigned int' lvalue Var 0x22150b21290 'num' 'unsigned int'
|   |           |   |   `-BinaryOperator 0x22150b23cb0 <col:47, col:51> 'int' '+'
|   |           |   |     |-ImplicitCastExpr 0x22150b23c98 <col:47> 'int' <LValueToRValue>
|   |           |   |     | `-DeclRefExpr 0x22150b23c50 <col:47> 'int' lvalue Var 0x22150b21160 'i' 'int'
|   |           |   |     `-IntegerLiteral 0x22150b23c70 <col:51> 'int' 3
|   |           |   `-IntegerLiteral 0x22150b23d30 <col:57> 'int' 4
|   |           |-CompoundAssignOperator 0x22150b23fd0 <line:1557:17, col:57> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   |           | |-DeclRefExpr 0x22150b23dc0 <col:17> 'limb':'int' lvalue Var 0x22150b21720 'bits' 'limb':'int'
|   |           | `-BinaryOperator 0x22150b23fb0 <col:25, col:57> 'int' '<<'
|   |           |   |-ImplicitCastExpr 0x22150b23f98 <col:25, col:52> 'int' <IntegralCast>
|   |           |   | `-CallExpr 0x22150b23f28 <col:25, col:52> 'char'
|   |           |   |   |-ImplicitCastExpr 0x22150b23f10 <col:25> 'char (*)(const u8 *, int)' <FunctionToPointerDecay>
|   |           |   |   | `-DeclRefExpr 0x22150b23de0 <col:25> 'char (const u8 *, int)' Function 0x22150b2c1c8 'get_bit' 'char (const u8 *, int)'
|   |           |   |   |-ImplicitCastExpr 0x22150b23f58 <col:33, col:44> 'const u8 *' <ArrayToPointerDecay>
|   |           |   |   | `-ArraySubscriptExpr 0x22150b23e70 <col:33, col:44> 'const felem_bytearray':'u8 const[66]' lvalue
|   |           |   |   |   |-ImplicitCastExpr 0x22150b23e40 <col:33> 'const felem_bytearray *':'const felem_bytearray *' <LValueToRValue>
|   |           |   |   |   | `-DeclRefExpr 0x22150b23e00 <col:33> 'const felem_bytearray *':'const felem_bytearray *' lvalue ParmVar 0x22150b2c850 'scalars' 'const felem_bytearray *':'const felem_bytearray *'
|   |           |   |   |   `-ImplicitCastExpr 0x22150b23e58 <col:41> 'unsigned int' <LValueToRValue>
|   |           |   |   |     `-DeclRefExpr 0x22150b23e20 <col:41> 'unsigned int' lvalue Var 0x22150b21290 'num' 'unsigned int'
|   |           |   |   `-BinaryOperator 0x22150b23ef0 <col:47, col:51> 'int' '+'
|   |           |   |     |-ImplicitCastExpr 0x22150b23ed8 <col:47> 'int' <LValueToRValue>
|   |           |   |     | `-DeclRefExpr 0x22150b23e90 <col:47> 'int' lvalue Var 0x22150b21160 'i' 'int'
|   |           |   |     `-IntegerLiteral 0x22150b23eb0 <col:51> 'int' 2
|   |           |   `-IntegerLiteral 0x22150b23f70 <col:57> 'int' 3
|   |           |-CompoundAssignOperator 0x22150b24210 <line:1558:17, col:57> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   |           | |-DeclRefExpr 0x22150b24000 <col:17> 'limb':'int' lvalue Var 0x22150b21720 'bits' 'limb':'int'
|   |           | `-BinaryOperator 0x22150b241f0 <col:25, col:57> 'int' '<<'
|   |           |   |-ImplicitCastExpr 0x22150b241d8 <col:25, col:52> 'int' <IntegralCast>
|   |           |   | `-CallExpr 0x22150b24168 <col:25, col:52> 'char'
|   |           |   |   |-ImplicitCastExpr 0x22150b24150 <col:25> 'char (*)(const u8 *, int)' <FunctionToPointerDecay>
|   |           |   |   | `-DeclRefExpr 0x22150b24020 <col:25> 'char (const u8 *, int)' Function 0x22150b2c1c8 'get_bit' 'char (const u8 *, int)'
|   |           |   |   |-ImplicitCastExpr 0x22150b24198 <col:33, col:44> 'const u8 *' <ArrayToPointerDecay>
|   |           |   |   | `-ArraySubscriptExpr 0x22150b240b0 <col:33, col:44> 'const felem_bytearray':'u8 const[66]' lvalue
|   |           |   |   |   |-ImplicitCastExpr 0x22150b24080 <col:33> 'const felem_bytearray *':'const felem_bytearray *' <LValueToRValue>
|   |           |   |   |   | `-DeclRefExpr 0x22150b24040 <col:33> 'const felem_bytearray *':'const felem_bytearray *' lvalue ParmVar 0x22150b2c850 'scalars' 'const felem_bytearray *':'const felem_bytearray *'
|   |           |   |   |   `-ImplicitCastExpr 0x22150b24098 <col:41> 'unsigned int' <LValueToRValue>
|   |           |   |   |     `-DeclRefExpr 0x22150b24060 <col:41> 'unsigned int' lvalue Var 0x22150b21290 'num' 'unsigned int'
|   |           |   |   `-BinaryOperator 0x22150b24130 <col:47, col:51> 'int' '+'
|   |           |   |     |-ImplicitCastExpr 0x22150b24118 <col:47> 'int' <LValueToRValue>
|   |           |   |     | `-DeclRefExpr 0x22150b240d0 <col:47> 'int' lvalue Var 0x22150b21160 'i' 'int'
|   |           |   |     `-IntegerLiteral 0x22150b240f0 <col:51> 'int' 1
|   |           |   `-IntegerLiteral 0x22150b241b0 <col:57> 'int' 2
|   |           |-CompoundAssignOperator 0x22150b24408 <line:1559:17, col:53> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   |           | |-DeclRefExpr 0x22150b24240 <col:17> 'limb':'int' lvalue Var 0x22150b21720 'bits' 'limb':'int'
|   |           | `-BinaryOperator 0x22150b243e8 <col:25, col:53> 'int' '<<'
|   |           |   |-ImplicitCastExpr 0x22150b243d0 <col:25, col:48> 'int' <IntegralCast>
|   |           |   | `-CallExpr 0x22150b24348 <col:25, col:48> 'char'
|   |           |   |   |-ImplicitCastExpr 0x22150b24330 <col:25> 'char (*)(const u8 *, int)' <FunctionToPointerDecay>
|   |           |   |   | `-DeclRefExpr 0x22150b24260 <col:25> 'char (const u8 *, int)' Function 0x22150b2c1c8 'get_bit' 'char (const u8 *, int)'
|   |           |   |   |-ImplicitCastExpr 0x22150b24378 <col:33, col:44> 'const u8 *' <ArrayToPointerDecay>
|   |           |   |   | `-ArraySubscriptExpr 0x22150b242f0 <col:33, col:44> 'const felem_bytearray':'u8 const[66]' lvalue
|   |           |   |   |   |-ImplicitCastExpr 0x22150b242c0 <col:33> 'const felem_bytearray *':'const felem_bytearray *' <LValueToRValue>
|   |           |   |   |   | `-DeclRefExpr 0x22150b24280 <col:33> 'const felem_bytearray *':'const felem_bytearray *' lvalue ParmVar 0x22150b2c850 'scalars' 'const felem_bytearray *':'const felem_bytearray *'
|   |           |   |   |   `-ImplicitCastExpr 0x22150b242d8 <col:41> 'unsigned int' <LValueToRValue>
|   |           |   |   |     `-DeclRefExpr 0x22150b242a0 <col:41> 'unsigned int' lvalue Var 0x22150b21290 'num' 'unsigned int'
|   |           |   |   `-ImplicitCastExpr 0x22150b24390 <col:47> 'int' <LValueToRValue>
|   |           |   |     `-DeclRefExpr 0x22150b24310 <col:47> 'int' lvalue Var 0x22150b21160 'i' 'int'
|   |           |   `-IntegerLiteral 0x22150b243a8 <col:53> 'int' 1
|   |           |-CompoundAssignOperator 0x22150b24600 <line:1560:17, col:52> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   |           | |-DeclRefExpr 0x22150b24438 <col:17> 'limb':'int' lvalue Var 0x22150b21720 'bits' 'limb':'int'
|   |           | `-ImplicitCastExpr 0x22150b245e8 <col:25, col:52> 'int' <IntegralCast>
|   |           |   `-CallExpr 0x22150b245a0 <col:25, col:52> 'char'
|   |           |     |-ImplicitCastExpr 0x22150b24588 <col:25> 'char (*)(const u8 *, int)' <FunctionToPointerDecay>
|   |           |     | `-DeclRefExpr 0x22150b24458 <col:25> 'char (const u8 *, int)' Function 0x22150b2c1c8 'get_bit' 'char (const u8 *, int)'
|   |           |     |-ImplicitCastExpr 0x22150b245d0 <col:33, col:44> 'const u8 *' <ArrayToPointerDecay>
|   |           |     | `-ArraySubscriptExpr 0x22150b244e8 <col:33, col:44> 'const felem_bytearray':'u8 const[66]' lvalue
|   |           |     |   |-ImplicitCastExpr 0x22150b244b8 <col:33> 'const felem_bytearray *':'const felem_bytearray *' <LValueToRValue>
|   |           |     |   | `-DeclRefExpr 0x22150b24478 <col:33> 'const felem_bytearray *':'const felem_bytearray *' lvalue ParmVar 0x22150b2c850 'scalars' 'const felem_bytearray *':'const felem_bytearray *'
|   |           |     |   `-ImplicitCastExpr 0x22150b244d0 <col:41> 'unsigned int' <LValueToRValue>
|   |           |     |     `-DeclRefExpr 0x22150b24498 <col:41> 'unsigned int' lvalue Var 0x22150b21290 'num' 'unsigned int'
|   |           |     `-BinaryOperator 0x22150b24568 <col:47, col:51> 'int' '-'
|   |           |       |-ImplicitCastExpr 0x22150b24550 <col:47> 'int' <LValueToRValue>
|   |           |       | `-DeclRefExpr 0x22150b24508 <col:47> 'int' lvalue Var 0x22150b21160 'i' 'int'
|   |           |       `-IntegerLiteral 0x22150b24528 <col:51> 'int' 1
|   |           |-CallExpr 0x22150b24750 <line:1561:17, col:68> 'void'
|   |           | |-ImplicitCastExpr 0x22150b24738 <col:17> 'void (*)(unsigned char *, unsigned char *, unsigned char)' <FunctionToPointerDecay>
|   |           | | `-DeclRefExpr 0x22150b24630 <col:17> 'void (unsigned char *, unsigned char *, unsigned char)' Function 0x221509318e8 'ec_GFp_nistp_recode_scalar_bits' 'void (unsigned char *, unsigned char *, unsigned char)'
|   |           | |-ImplicitCastExpr 0x22150b24788 <col:49, col:50> 'unsigned char *' <BitCast>
|   |           | | `-UnaryOperator 0x22150b24688 <col:49, col:50> 'u8 *' prefix '&' cannot overflow
|   |           | |   `-DeclRefExpr 0x22150b24650 <col:50> 'u8':'int' lvalue Var 0x22150b217b0 'sign' 'u8':'int'
|   |           | |-ImplicitCastExpr 0x22150b247a0 <col:56, col:57> 'unsigned char *' <BitCast>
|   |           | | `-UnaryOperator 0x22150b246d8 <col:56, col:57> 'u8 *' prefix '&' cannot overflow
|   |           | |   `-DeclRefExpr 0x22150b246a0 <col:57> 'u8':'int' lvalue Var 0x22150b21828 'digit' 'u8':'int'
|   |           | `-ImplicitCastExpr 0x22150b247d0 <col:64> 'unsigned char' <IntegralCast>
|   |           |   `-ImplicitCastExpr 0x22150b247b8 <col:64> 'limb':'int' <LValueToRValue>
|   |           |     `-DeclRefExpr 0x22150b246f0 <col:64> 'limb':'int' lvalue Var 0x22150b21720 'bits' 'limb':'int'
|   |           |-CallExpr 0x22150b24918 <line:1566:17, col:59> 'void'
|   |           | |-ImplicitCastExpr 0x22150b24900 <col:17> 'void (*)(const limb, unsigned int, const felem (*)[3], felem *)' <FunctionToPointerDecay>
|   |           | | `-DeclRefExpr 0x22150b247e8 <col:17> 'void (const limb, unsigned int, const felem (*)[3], felem *)' Function 0x22150b26d38 'select_point' 'void (const limb, unsigned int, const felem (*)[3], felem *)'
|   |           | |-ImplicitCastExpr 0x22150b24958 <col:30> 'u8':'int' <LValueToRValue>
|   |           | | `-DeclRefExpr 0x22150b24808 <col:30> 'u8':'int' lvalue Var 0x22150b21828 'digit' 'u8':'int'
|   |           | |-ImplicitCastExpr 0x22150b24970 <col:37> 'unsigned int' <IntegralCast>
|   |           | | `-IntegerLiteral 0x22150b24828 <col:37> 'int' 17
|   |           | |-ImplicitCastExpr 0x22150b24988 <col:41, col:53> 'const felem (*)[3]' <ArrayToPointerDecay>
|   |           | | `-ArraySubscriptExpr 0x22150b248c0 <col:41, col:53> 'const felem [17][3]' lvalue
|   |           | |   |-ImplicitCastExpr 0x22150b24890 <col:41> 'const felem (*)[17][3]':'const felem (*)[17][3]' <LValueToRValue>
|   |           | |   | `-DeclRefExpr 0x22150b24850 <col:41> 'const felem (*)[17][3]':'const felem (*)[17][3]' lvalue ParmVar 0x22150b2cc60 'pre_comp' 'const felem (*)[17][3]':'const felem (*)[17][3]'
|   |           | |   `-ImplicitCastExpr 0x22150b248a8 <col:50> 'unsigned int' <LValueToRValue>
|   |           | |     `-DeclRefExpr 0x22150b24870 <col:50> 'unsigned int' lvalue Var 0x22150b21290 'num' 'unsigned int'
|   |           | `-ImplicitCastExpr 0x22150b249a0 <col:56> 'felem *' <ArrayToPointerDecay>
|   |           |   `-DeclRefExpr 0x22150b248e0 <col:56> 'felem [4]' lvalue Var 0x22150b21678 'tmp' 'felem [4]'
|   |           |-CallExpr 0x22150b24af0 <line:1567:17, col:41> 'void'
|   |           | |-ImplicitCastExpr 0x22150b24ad8 <col:17> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   |           | | `-DeclRefExpr 0x22150b249b8 <col:17> 'void (limb *, const limb *)' Function 0x2215095f4e0 'felem_neg' 'void (limb *, const limb *)'
|   |           | |-ImplicitCastExpr 0x22150b24b20 <col:27, col:32> 'limb *' <ArrayToPointerDecay>
|   |           | | `-ArraySubscriptExpr 0x22150b24a38 <col:27, col:32> 'felem':'limb [9]' lvalue
|   |           | |   |-ImplicitCastExpr 0x22150b24a20 <col:27> 'felem *' <ArrayToPointerDecay>
|   |           | |   | `-DeclRefExpr 0x22150b249d8 <col:27> 'felem [4]' lvalue Var 0x22150b21678 'tmp' 'felem [4]'
|   |           | |   `-IntegerLiteral 0x22150b249f8 <col:31> 'int' 3
|   |           | `-ImplicitCastExpr 0x22150b24b50 <col:35, col:40> 'const limb *':'const limb *' <NoOp>
|   |           |   `-ImplicitCastExpr 0x22150b24b38 <col:35, col:40> 'limb *' <ArrayToPointerDecay>
|   |           |     `-ArraySubscriptExpr 0x22150b24ab8 <col:35, col:40> 'felem':'limb [9]' lvalue
|   |           |       |-ImplicitCastExpr 0x22150b24aa0 <col:35> 'felem *' <ArrayToPointerDecay>
|   |           |       | `-DeclRefExpr 0x22150b24a58 <col:35> 'felem [4]' lvalue Var 0x22150b21678 'tmp' 'felem [4]'
|   |           |       `-IntegerLiteral 0x22150b24a78 <col:39> 'int' 1
|   |           |-CallExpr 0x22150b24d48 <line:1569:17, col:64> 'void'
|   |           | |-ImplicitCastExpr 0x22150b24d30 <col:17> 'void (*)(limb *, const limb *, limb)' <FunctionToPointerDecay>
|   |           | | `-DeclRefExpr 0x22150b24b68 <col:17> 'void (limb *, const limb *, limb)' Function 0x22150a40498 'copy_conditional' 'void (limb *, const limb *, limb)'
|   |           | |-ImplicitCastExpr 0x22150b24d80 <col:34, col:39> 'limb *' <ArrayToPointerDecay>
|   |           | | `-ArraySubscriptExpr 0x22150b24be8 <col:34, col:39> 'felem':'limb [9]' lvalue
|   |           | |   |-ImplicitCastExpr 0x22150b24bd0 <col:34> 'felem *' <ArrayToPointerDecay>
|   |           | |   | `-DeclRefExpr 0x22150b24b88 <col:34> 'felem [4]' lvalue Var 0x22150b21678 'tmp' 'felem [4]'
|   |           | |   `-IntegerLiteral 0x22150b24ba8 <col:38> 'int' 1
|   |           | |-ImplicitCastExpr 0x22150b24db0 <col:42, col:47> 'const limb *':'const limb *' <NoOp>
|   |           | | `-ImplicitCastExpr 0x22150b24d98 <col:42, col:47> 'limb *' <ArrayToPointerDecay>
|   |           | |   `-ArraySubscriptExpr 0x22150b24c68 <col:42, col:47> 'felem':'limb [9]' lvalue
|   |           | |     |-ImplicitCastExpr 0x22150b24c50 <col:42> 'felem *' <ArrayToPointerDecay>
|   |           | |     | `-DeclRefExpr 0x22150b24c08 <col:42> 'felem [4]' lvalue Var 0x22150b21678 'tmp' 'felem [4]'
|   |           | |     `-IntegerLiteral 0x22150b24c28 <col:46> 'int' 3
|   |           | `-ParenExpr 0x22150b24d10 <col:50, col:63> 'limb':'int'
|   |           |   `-UnaryOperator 0x22150b24cf8 <col:51, col:59> 'limb':'int' prefix '-'
|   |           |     `-CStyleCastExpr 0x22150b24cd0 <col:52, col:59> 'limb':'int' <NoOp>
|   |           |       `-ImplicitCastExpr 0x22150b24cb8 <col:59> 'u8':'int' <LValueToRValue> part_of_explicit_cast
|   |           |         `-DeclRefExpr 0x22150b24c88 <col:59> 'u8':'int' lvalue Var 0x22150b217b0 'sign' 'u8':'int'
|   |           `-IfStmt 0x22150b3b818 <line:1571:17, line:1578:17> has_else
|   |             |-UnaryOperator 0x22150b3aec8 <line:1571:21, col:22> 'int' prefix '!' cannot overflow
|   |             | `-ImplicitCastExpr 0x22150b3aeb0 <col:22> 'int' <LValueToRValue>
|   |             |   `-DeclRefExpr 0x22150b3ae90 <col:22> 'int' lvalue Var 0x22150b211e0 'skip' 'int'
|   |             |-CompoundStmt 0x22150b3b5a8 <col:28, line:1575:17>
|   |             | `-CallExpr 0x22150b3b3b8 <line:1572:21, line:1574:60> 'void'
|   |             |   |-ImplicitCastExpr 0x22150b3b3a0 <line:1572:21> 'void (*)(limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   |             |   | `-DeclRefExpr 0x22150b3aee0 <col:21> 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const limb *, const limb *, const limb *)' Function 0x22150a3d308 'point_add' 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const limb *, const limb *, const limb *)'
|   |             |   |-ImplicitCastExpr 0x22150b3b428 <col:31, col:35> 'limb *' <ArrayToPointerDecay>
|   |             |   | `-ArraySubscriptExpr 0x22150b3af60 <col:31, col:35> 'felem':'limb [9]' lvalue
|   |             |   |   |-ImplicitCastExpr 0x22150b3af48 <col:31> 'felem *' <ArrayToPointerDecay>
|   |             |   |   | `-DeclRefExpr 0x22150b3af00 <col:31> 'felem [3]' lvalue Var 0x22150b21538 'nq' 'felem [3]'
|   |             |   |   `-IntegerLiteral 0x22150b3af20 <col:34> 'int' 0
|   |             |   |-ImplicitCastExpr 0x22150b3b440 <col:38, col:42> 'limb *' <ArrayToPointerDecay>
|   |             |   | `-ArraySubscriptExpr 0x22150b3afe0 <col:38, col:42> 'felem':'limb [9]' lvalue
|   |             |   |   |-ImplicitCastExpr 0x22150b3afc8 <col:38> 'felem *' <ArrayToPointerDecay>
|   |             |   |   | `-DeclRefExpr 0x22150b3af80 <col:38> 'felem [3]' lvalue Var 0x22150b21538 'nq' 'felem [3]'
|   |             |   |   `-IntegerLiteral 0x22150b3afa0 <col:41> 'int' 1
|   |             |   |-ImplicitCastExpr 0x22150b3b458 <col:45, col:49> 'limb *' <ArrayToPointerDecay>
|   |             |   | `-ArraySubscriptExpr 0x22150b3b060 <col:45, col:49> 'felem':'limb [9]' lvalue
|   |             |   |   |-ImplicitCastExpr 0x22150b3b048 <col:45> 'felem *' <ArrayToPointerDecay>
|   |             |   |   | `-DeclRefExpr 0x22150b3b000 <col:45> 'felem [3]' lvalue Var 0x22150b21538 'nq' 'felem [3]'
|   |             |   |   `-IntegerLiteral 0x22150b3b020 <col:48> 'int' 2
|   |             |   |-ImplicitCastExpr 0x22150b3b488 <line:1573:31, col:35> 'const limb *':'const limb *' <NoOp>
|   |             |   | `-ImplicitCastExpr 0x22150b3b470 <col:31, col:35> 'limb *' <ArrayToPointerDecay>
|   |             |   |   `-ArraySubscriptExpr 0x22150b3b0e0 <col:31, col:35> 'felem':'limb [9]' lvalue
|   |             |   |     |-ImplicitCastExpr 0x22150b3b0c8 <col:31> 'felem *' <ArrayToPointerDecay>
|   |             |   |     | `-DeclRefExpr 0x22150b3b080 <col:31> 'felem [3]' lvalue Var 0x22150b21538 'nq' 'felem [3]'
|   |             |   |     `-IntegerLiteral 0x22150b3b0a0 <col:34> 'int' 0
|   |             |   |-ImplicitCastExpr 0x22150b3b4b8 <col:38, col:42> 'const limb *':'const limb *' <NoOp>
|   |             |   | `-ImplicitCastExpr 0x22150b3b4a0 <col:38, col:42> 'limb *' <ArrayToPointerDecay>
|   |             |   |   `-ArraySubscriptExpr 0x22150b3b160 <col:38, col:42> 'felem':'limb [9]' lvalue
|   |             |   |     |-ImplicitCastExpr 0x22150b3b148 <col:38> 'felem *' <ArrayToPointerDecay>
|   |             |   |     | `-DeclRefExpr 0x22150b3b100 <col:38> 'felem [3]' lvalue Var 0x22150b21538 'nq' 'felem [3]'
|   |             |   |     `-IntegerLiteral 0x22150b3b120 <col:41> 'int' 1
|   |             |   |-ImplicitCastExpr 0x22150b3b4e8 <col:45, col:49> 'const limb *':'const limb *' <NoOp>
|   |             |   | `-ImplicitCastExpr 0x22150b3b4d0 <col:45, col:49> 'limb *' <ArrayToPointerDecay>
|   |             |   |   `-ArraySubscriptExpr 0x22150b3b1e0 <col:45, col:49> 'felem':'limb [9]' lvalue
|   |             |   |     |-ImplicitCastExpr 0x22150b3b1c8 <col:45> 'felem *' <ArrayToPointerDecay>
|   |             |   |     | `-DeclRefExpr 0x22150b3b180 <col:45> 'felem [3]' lvalue Var 0x22150b21538 'nq' 'felem [3]'
|   |             |   |     `-IntegerLiteral 0x22150b3b1a0 <col:48> 'int' 2
|   |             |   |-ImplicitCastExpr 0x22150b3b500 <line:1574:31> 'int' <LValueToRValue>
|   |             |   | `-DeclRefExpr 0x22150b3b200 <col:31> 'const int' lvalue ParmVar 0x22150b2c9c8 'mixed' 'const int'
|   |             |   |-ImplicitCastExpr 0x22150b3b530 <col:38, col:43> 'const limb *':'const limb *' <NoOp>
|   |             |   | `-ImplicitCastExpr 0x22150b3b518 <col:38, col:43> 'limb *' <ArrayToPointerDecay>
|   |             |   |   `-ArraySubscriptExpr 0x22150b3b280 <col:38, col:43> 'felem':'limb [9]' lvalue
|   |             |   |     |-ImplicitCastExpr 0x22150b3b268 <col:38> 'felem *' <ArrayToPointerDecay>
|   |             |   |     | `-DeclRefExpr 0x22150b3b220 <col:38> 'felem [4]' lvalue Var 0x22150b21678 'tmp' 'felem [4]'
|   |             |   |     `-IntegerLiteral 0x22150b3b240 <col:42> 'int' 0
|   |             |   |-ImplicitCastExpr 0x22150b3b560 <col:46, col:51> 'const limb *':'const limb *' <NoOp>
|   |             |   | `-ImplicitCastExpr 0x22150b3b548 <col:46, col:51> 'limb *' <ArrayToPointerDecay>
|   |             |   |   `-ArraySubscriptExpr 0x22150b3b300 <col:46, col:51> 'felem':'limb [9]' lvalue
|   |             |   |     |-ImplicitCastExpr 0x22150b3b2e8 <col:46> 'felem *' <ArrayToPointerDecay>
|   |             |   |     | `-DeclRefExpr 0x22150b3b2a0 <col:46> 'felem [4]' lvalue Var 0x22150b21678 'tmp' 'felem [4]'
|   |             |   |     `-IntegerLiteral 0x22150b3b2c0 <col:50> 'int' 1
|   |             |   `-ImplicitCastExpr 0x22150b3b590 <col:54, col:59> 'const limb *':'const limb *' <NoOp>
|   |             |     `-ImplicitCastExpr 0x22150b3b578 <col:54, col:59> 'limb *' <ArrayToPointerDecay>
|   |             |       `-ArraySubscriptExpr 0x22150b3b380 <col:54, col:59> 'felem':'limb [9]' lvalue
|   |             |         |-ImplicitCastExpr 0x22150b3b368 <col:54> 'felem *' <ArrayToPointerDecay>
|   |             |         | `-DeclRefExpr 0x22150b3b320 <col:54> 'felem [4]' lvalue Var 0x22150b21678 'tmp' 'felem [4]'
|   |             |         `-IntegerLiteral 0x22150b3b340 <col:58> 'int' 2
|   |             `-CompoundStmt 0x22150b3b7f8 <line:1575:24, line:1578:17>
|   |               |-CallExpr 0x22150b3b6f8 <line:1576:21, col:54> 'void *'
|   |               | |-ImplicitCastExpr 0x22150b3b6e0 <col:21> 'void *(*)(void *, const void *, unsigned long long)' <FunctionToPointerDecay>
|   |               | | `-DeclRefExpr 0x22150b3b5c0 <col:21> 'void *(void *, const void *, unsigned long long)' Function 0x221508f72c8 'memcpy' 'void *(void *, const void *, unsigned long long)'
|   |               | |-ImplicitCastExpr 0x22150b3b748 <col:28> 'void *' <BitCast>
|   |               | | `-ImplicitCastExpr 0x22150b3b730 <col:28> 'felem *' <ArrayToPointerDecay>
|   |               | |   `-DeclRefExpr 0x22150b3b5e0 <col:28> 'felem [3]' lvalue Var 0x22150b21538 'nq' 'felem [3]'
|   |               | |-ImplicitCastExpr 0x22150b3b778 <col:32> 'const void *' <BitCast>
|   |               | | `-ImplicitCastExpr 0x22150b3b760 <col:32> 'felem *' <ArrayToPointerDecay>
|   |               | |   `-DeclRefExpr 0x22150b3b600 <col:32> 'felem [4]' lvalue Var 0x22150b21678 'tmp' 'felem [4]'
|   |               | `-BinaryOperator 0x22150b3b690 <col:37, col:53> 'unsigned long long' '*'
|   |               |   |-ImplicitCastExpr 0x22150b3b678 <col:37> 'unsigned long long' <IntegralCast>
|   |               |   | `-IntegerLiteral 0x22150b3b620 <col:37> 'int' 3
|   |               |   `-UnaryExprOrTypeTraitExpr 0x22150b3b658 <col:41, col:53> 'unsigned long long' sizeof 'felem':'limb [9]'
|   |               `-BinaryOperator 0x22150b3b7d8 <line:1577:21, col:28> 'int' '='
|   |                 |-DeclRefExpr 0x22150b3b790 <col:21> 'int' lvalue Var 0x22150b211e0 'skip' 'int'
|   |                 `-IntegerLiteral 0x22150b3b7b0 <col:28> 'int' 0
|   |-CallExpr 0x22150b3ba48 <line:1582:5, col:30> 'void'
|   | |-ImplicitCastExpr 0x22150b3ba30 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150b3b970 <col:5> 'void (limb *, const limb *)' Function 0x2215095b168 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x22150b3ba78 <col:18> 'limb *':'limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x22150b3b990 <col:18> 'limb *':'limb *' lvalue ParmVar 0x22150b2c5e8 'x_out' 'limb *':'limb *'
|   | `-ImplicitCastExpr 0x22150b3baa8 <col:25, col:29> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150b3ba90 <col:25, col:29> 'limb *' <ArrayToPointerDecay>
|   |     `-ArraySubscriptExpr 0x22150b3ba10 <col:25, col:29> 'felem':'limb [9]' lvalue
|   |       |-ImplicitCastExpr 0x22150b3b9f8 <col:25> 'felem *' <ArrayToPointerDecay>
|   |       | `-DeclRefExpr 0x22150b3b9b0 <col:25> 'felem [3]' lvalue Var 0x22150b21538 'nq' 'felem [3]'
|   |       `-IntegerLiteral 0x22150b3b9d0 <col:28> 'int' 0
|   |-CallExpr 0x22150b3bb98 <line:1583:5, col:30> 'void'
|   | |-ImplicitCastExpr 0x22150b3bb80 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150b3bac0 <col:5> 'void (limb *, const limb *)' Function 0x2215095b168 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x22150b3bbc8 <col:18> 'limb *':'limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x22150b3bae0 <col:18> 'limb *':'limb *' lvalue ParmVar 0x22150b2c660 'y_out' 'limb *':'limb *'
|   | `-ImplicitCastExpr 0x22150b3bbf8 <col:25, col:29> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150b3bbe0 <col:25, col:29> 'limb *' <ArrayToPointerDecay>
|   |     `-ArraySubscriptExpr 0x22150b3bb60 <col:25, col:29> 'felem':'limb [9]' lvalue
|   |       |-ImplicitCastExpr 0x22150b3bb48 <col:25> 'felem *' <ArrayToPointerDecay>
|   |       | `-DeclRefExpr 0x22150b3bb00 <col:25> 'felem [3]' lvalue Var 0x22150b21538 'nq' 'felem [3]'
|   |       `-IntegerLiteral 0x22150b3bb20 <col:28> 'int' 1
|   `-CallExpr 0x22150b3bce8 <line:1584:5, col:30> 'void'
|     |-ImplicitCastExpr 0x22150b3bcd0 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x22150b3bc10 <col:5> 'void (limb *, const limb *)' Function 0x2215095b168 'felem_assign' 'void (limb *, const limb *)'
|     |-ImplicitCastExpr 0x22150b3bd18 <col:18> 'limb *':'limb *' <LValueToRValue>
|     | `-DeclRefExpr 0x22150b3bc30 <col:18> 'limb *':'limb *' lvalue ParmVar 0x22150b2c6d8 'z_out' 'limb *':'limb *'
|     `-ImplicitCastExpr 0x22150b3bd48 <col:25, col:29> 'const limb *':'const limb *' <NoOp>
|       `-ImplicitCastExpr 0x22150b3bd30 <col:25, col:29> 'limb *' <ArrayToPointerDecay>
|         `-ArraySubscriptExpr 0x22150b3bcb0 <col:25, col:29> 'felem':'limb [9]' lvalue
|           |-ImplicitCastExpr 0x22150b3bc98 <col:25> 'felem *' <ArrayToPointerDecay>
|           | `-DeclRefExpr 0x22150b3bc50 <col:25> 'felem [3]' lvalue Var 0x22150b21538 'nq' 'felem [3]'
|           `-IntegerLiteral 0x22150b3bc70 <col:28> 'int' 2
|-RecordDecl 0x22150b3bdc8 prev 0x221509b47b8 <line:1588:1, line:1592:1> line:1588:8 invalid struct nistp521_pre_comp_st definition
| |-FieldDecl 0x22150b3bf38 <line:1589:5, col:27> col:11 referenced g_pre_comp 'felem [16][3]'
| |-FieldDecl 0x22150b3bfa8 <line:1590:5, col:9> col:9 referenced references 'int'
| `-FieldDecl 0x22150b3c018 <line:1591:5, col:20> col:20 invalid lock 'int *'
|-FunctionDecl 0x22150b3c140 <line:1594:1, line:1650:1> line:1594:18 invalid EC_GFp_nistp521_method 'const int *(void)'
| `-CompoundStmt 0x22150b3c4a0 <line:1595:1, line:1650:1>
|   `-DeclStmt 0x22150b3c458 <line:1596:5, line:1647:6>
|     `-VarDecl 0x22150b3c210 <line:1596:5, col:28> col:28 invalid ret 'const int' static
|-FunctionDecl 0x22150b3c538 <line:1657:1, line:1675:1> line:1657:27 used nistp521_pre_comp_new 'NISTP521_PRE_COMP *()' static
| |-CompoundStmt 0x22150b30fe0 <line:1658:1, line:1675:1>
| | |-DeclStmt 0x22150b3c890 <line:1659:5, col:58>
| | | `-VarDecl 0x22150b3c600 <col:5, col:57> col:24 used ret 'NISTP521_PRE_COMP *' cinit
| | |   `-ImplicitCastExpr 0x22150b3c878 <col:30, col:57> 'NISTP521_PRE_COMP *' <IntegralToPointer>
| | |     `-CallExpr 0x22150b3c850 <col:30, col:57> 'int'
| | |       |-ImplicitCastExpr 0x22150b3c838 <col:30> 'int (*)()' <FunctionToPointerDecay>
| | |       | `-DeclRefExpr 0x22150b3c758 <col:30> 'int ()' Function 0x22150b3c690 'OPENSSL_zalloc' 'int ()'
| | |       `-UnaryExprOrTypeTraitExpr 0x22150b3c7e8 <col:45, col:56> 'unsigned long long' sizeof
| | |         `-ParenExpr 0x22150b3c7c8 <col:51, col:56> 'NISTP521_PRE_COMP':'struct nistp521_pre_comp_st' lvalue
| | |           `-UnaryOperator 0x22150b3c7b0 <col:52, col:53> 'NISTP521_PRE_COMP':'struct nistp521_pre_comp_st' lvalue prefix '*' cannot overflow
| | |             `-ImplicitCastExpr 0x22150b3c798 <col:53> 'NISTP521_PRE_COMP *' <LValueToRValue>
| | |               `-DeclRefExpr 0x22150b3c778 <col:53> 'NISTP521_PRE_COMP *' lvalue Var 0x22150b3c600 'ret' 'NISTP521_PRE_COMP *' non_odr_use_unevaluated
| | |-IfStmt 0x22150b3ca38 <line:1661:5, line:1664:5>
| | | |-BinaryOperator 0x22150b3c998 <line:1661:9, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27> 'int' '=='
| | | | |-ImplicitCastExpr 0x22150b3c968 <.//openssl//file_jk/before\crypto\ec\ecp_nistp521.c:1661:9> 'NISTP521_PRE_COMP *' <LValueToRValue>
| | | | | `-DeclRefExpr 0x22150b3c8a8 <col:9> 'NISTP521_PRE_COMP *' lvalue Var 0x22150b3c600 'ret' 'NISTP521_PRE_COMP *'
| | | | `-ImplicitCastExpr 0x22150b3c980 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'NISTP521_PRE_COMP *' <BitCast>
| | | |   `-ParenExpr 0x22150b3c948 <col:17, col:27> 'void *'
| | | |     `-CStyleCastExpr 0x22150b3c920 <col:18, col:26> 'void *' <NullToPointer>
| | | |       `-IntegerLiteral 0x22150b3c8e0 <col:26> 'int' 0
| | | `-CompoundStmt 0x22150b3ca20 <.//openssl//file_jk/before\crypto\ec\ecp_nistp521.c:1661:22, line:1664:5>
| | |   `-ReturnStmt 0x22150b3ca10 <line:1663:9, col:16>
| | |     `-ImplicitCastExpr 0x22150b3c9f8 <col:16> 'NISTP521_PRE_COMP *' <LValueToRValue>
| | |       `-DeclRefExpr 0x22150b3c9d8 <col:16> 'NISTP521_PRE_COMP *' lvalue Var 0x22150b3c600 'ret' 'NISTP521_PRE_COMP *'
| | |-BinaryOperator 0x22150b3cae0 <line:1666:5, col:23> 'int' '='
| | | |-MemberExpr 0x22150b3ca88 <col:5, col:10> 'int' lvalue ->references 0x22150b3bfa8
| | | | `-ImplicitCastExpr 0x22150b3ca70 <col:5> 'NISTP521_PRE_COMP *' <LValueToRValue>
| | | |   `-DeclRefExpr 0x22150b3ca50 <col:5> 'NISTP521_PRE_COMP *' lvalue Var 0x22150b3c600 'ret' 'NISTP521_PRE_COMP *'
| | | `-IntegerLiteral 0x22150b3cab8 <col:23> 'int' 1
| | |-IfStmt 0x22150b30f80 <line:1669:5, line:1673:5>
| | | |-OpaqueValueExpr 0x22150b30f68 <<invalid sloc>> '_Bool'
| | | `-CompoundStmt 0x22150b30f48 <line:1669:28, line:1673:5>
| | |   |-CallExpr 0x22150b30e58 <line:1671:9, col:25> 'int'
| | |   | |-ImplicitCastExpr 0x22150b30e40 <col:9> 'int (*)()' <FunctionToPointerDecay>
| | |   | | `-DeclRefExpr 0x22150b3ce50 <col:9> 'int ()' Function 0x22150b3cd88 'OPENSSL_free' 'int ()'
| | |   | `-ImplicitCastExpr 0x22150b30e80 <col:22> 'NISTP521_PRE_COMP *' <LValueToRValue>
| | |   |   `-DeclRefExpr 0x22150b3ce70 <col:22> 'NISTP521_PRE_COMP *' lvalue Var 0x22150b3c600 'ret' 'NISTP521_PRE_COMP *'
| | |   `-ReturnStmt 0x22150b30f38 <line:1672:9, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27>
| | |     `-ImplicitCastExpr 0x22150b30f20 <col:17, col:27> 'NISTP521_PRE_COMP *' <NullToPointer>
| | |       `-ParenExpr 0x22150b30f00 <col:17, col:27> 'void *'
| | |         `-CStyleCastExpr 0x22150b30ed8 <col:18, col:26> 'void *' <NullToPointer>
| | |           `-IntegerLiteral 0x22150b30e98 <col:26> 'int' 0
| | `-ReturnStmt 0x22150b30fd0 <.//openssl//file_jk/before\crypto\ec\ecp_nistp521.c:1674:5, col:12>
| |   `-ImplicitCastExpr 0x22150b30fb8 <col:12> 'NISTP521_PRE_COMP *' <LValueToRValue>
| |     `-DeclRefExpr 0x22150b30f98 <col:12> 'NISTP521_PRE_COMP *' lvalue Var 0x22150b3c600 'ret' 'NISTP521_PRE_COMP *'
| `-FullComment 0x22150b56c38 <line:1652:4, col:78>
|   `-ParagraphComment 0x22150b56c10 <col:4, col:78>
|     `-TextComment 0x22150b56be8 <col:4, col:78> Text="***************************************************************************"
|-FunctionDecl 0x22150b310d0 prev 0x221509c03a8 <line:1677:1, line:1683:1> line:1677:20 EC_nistp521_pre_comp_dup 'NISTP521_PRE_COMP *(NISTP521_PRE_COMP *)'
| |-ParmVarDecl 0x22150b31028 <col:45, col:64> col:64 used p 'NISTP521_PRE_COMP *'
| `-CompoundStmt 0x22150b31590 <line:1678:1, line:1683:1>
|   |-DeclStmt 0x22150b311f8 <line:1679:5, col:10>
|   | `-VarDecl 0x22150b31190 <col:5, col:9> col:9 used i 'int'
|   `-ReturnStmt 0x22150b31580 <line:1682:5, col:12>
|     `-ImplicitCastExpr 0x22150b31568 <col:12> 'NISTP521_PRE_COMP *' <LValueToRValue>
|       `-DeclRefExpr 0x22150b31548 <col:12> 'NISTP521_PRE_COMP *' lvalue ParmVar 0x22150b31028 'p' 'NISTP521_PRE_COMP *'
|-FunctionDecl 0x22150b31668 prev 0x221509baef8 <line:1685:1, line:1700:1> line:1685:6 used EC_nistp521_pre_comp_free 'void (NISTP521_PRE_COMP *)'
| |-ParmVarDecl 0x22150b315c0 <col:32, col:51> col:51 used p 'NISTP521_PRE_COMP *'
| `-CompoundStmt 0x22150b32028 <line:1686:1, line:1700:1>
|   |-DeclStmt 0x22150b31790 <line:1687:5, col:10>
|   | `-VarDecl 0x22150b31728 <col:5, col:9> col:9 used i 'int'
|   |-IfStmt 0x22150b318b0 <line:1689:5, line:1690:9>
|   | |-BinaryOperator 0x22150b31880 <line:1689:9, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27> 'int' '=='
|   | | |-ImplicitCastExpr 0x22150b31850 <.//openssl//file_jk/before\crypto\ec\ecp_nistp521.c:1689:9> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x22150b317a8 <col:9> 'NISTP521_PRE_COMP *' lvalue ParmVar 0x22150b315c0 'p' 'NISTP521_PRE_COMP *'
|   | | `-ImplicitCastExpr 0x22150b31868 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'NISTP521_PRE_COMP *' <BitCast>
|   | |   `-ParenExpr 0x22150b31830 <col:17, col:27> 'void *'
|   | |     `-CStyleCastExpr 0x22150b31808 <col:18, col:26> 'void *' <NullToPointer>
|   | |       `-IntegerLiteral 0x22150b317c8 <col:26> 'int' 0
|   | `-ReturnStmt 0x22150b318a0 <.//openssl//file_jk/before\crypto\ec\ecp_nistp521.c:1690:9>
|   |-IfStmt 0x22150b31c30 <line:1694:5, line:1695:9>
|   | |-BinaryOperator 0x22150b31c00 <line:1694:9, col:13> 'int' '>'
|   | | |-ImplicitCastExpr 0x22150b31be8 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x22150b31ba0 <col:9> 'int' lvalue Var 0x22150b31728 'i' 'int'
|   | | `-IntegerLiteral 0x22150b31bc0 <col:13> 'int' 0
|   | `-ReturnStmt 0x22150b31c20 <line:1695:9>
|   |-CallExpr 0x22150b31df0 <line:1696:5, col:26> 'int'
|   | |-ImplicitCastExpr 0x22150b31dd8 <col:5> 'int (*)()' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150b31d38 <col:5> 'int ()' Function 0x22150b31c70 'REF_ASSERT_ISNT' 'int ()'
|   | `-BinaryOperator 0x22150b31db8 <col:21, col:25> 'int' '<'
|   |   |-ImplicitCastExpr 0x22150b31da0 <col:21> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x22150b31d58 <col:21> 'int' lvalue Var 0x22150b31728 'i' 'int'
|   |   `-IntegerLiteral 0x22150b31d78 <col:25> 'int' 0
|   `-CallExpr 0x22150b31fb8 <line:1699:5, col:19> 'int'
|     |-ImplicitCastExpr 0x22150b31fa0 <col:5> 'int (*)()' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x22150b31f60 <col:5> 'int ()' Function 0x22150b3cd88 'OPENSSL_free' 'int ()'
|     `-ImplicitCastExpr 0x22150b31fe0 <col:18> 'NISTP521_PRE_COMP *' <LValueToRValue>
|       `-DeclRefExpr 0x22150b31f80 <col:18> 'NISTP521_PRE_COMP *' lvalue ParmVar 0x22150b315c0 'p' 'NISTP521_PRE_COMP *'
|-FunctionDecl 0x22150b32110 <line:1707:1, line:1713:1> line:1707:5 invalid ec_GFp_nistp521_group_init 'int (int *)'
| |-ParmVarDecl 0x22150b32078 <col:32, col:42> col:42 invalid group 'int *'
| |-CompoundStmt 0x22150b32310 <line:1708:1, line:1713:1>
| | |-DeclStmt 0x22150b32250 <line:1709:5, col:12>
| | | `-VarDecl 0x22150b321e8 <col:5, col:9> col:9 used ret 'int'
| | `-ReturnStmt 0x22150b32300 <line:1712:5, col:12>
| |   `-ImplicitCastExpr 0x22150b322e8 <col:12> 'int' <LValueToRValue>
| |     `-DeclRefExpr 0x22150b322c8 <col:12> 'int' lvalue Var 0x22150b321e8 'ret' 'int'
| `-FullComment 0x22150b56d00 <line:1702:4, col:78>
|   `-ParagraphComment 0x22150b56cd8 <col:4, col:78>
|     `-TextComment 0x22150b56cb0 <col:4, col:78> Text="***************************************************************************"
|-FunctionDecl 0x22150b32600 <line:1715:1, line:1745:1> line:1715:5 invalid ec_GFp_nistp521_group_set_curve 'int (int *, const int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x22150b32348 <col:37, col:47> col:47 invalid group 'int *'
| |-ParmVarDecl 0x22150b323c8 <col:54, col:68> col:68 invalid p 'const int *'
| |-ParmVarDecl 0x22150b32448 <line:1716:37, col:51> col:51 invalid a 'const int *'
| |-ParmVarDecl 0x22150b324c8 <col:54, col:68> col:68 invalid b 'const int *'
| |-ParmVarDecl 0x22150b32548 <line:1717:37, col:45> col:45 invalid ctx 'int *'
| `-CompoundStmt 0x22150b39708 <line:1718:1, line:1745:1>
|   |-DeclStmt 0x22150b32788 <line:1719:5, col:16>
|   | `-VarDecl 0x22150b326f8 <col:5, col:15> col:9 used ret 'int' cinit
|   |   `-IntegerLiteral 0x22150b32760 <col:15> 'int' 0
|   |-IfStmt 0x22150b32b00 <line:1723:5, line:1725:20>
|   | |-OpaqueValueExpr 0x22150b32ae8 <<invalid sloc>> '_Bool'
|   | `-IfStmt 0x22150b32ad0 <line:1724:9, line:1725:20>
|   |   |-OpaqueValueExpr 0x22150b32ab8 <<invalid sloc>> '_Bool'
|   |   `-ReturnStmt 0x22150b32aa8 <col:13, col:20>
|   |     `-IntegerLiteral 0x22150b32a80 <col:20> 'int' 0
|   |-IfStmt 0x22150b38ff0 <line:1727:5, line:1730:14>
|   | |-OpaqueValueExpr 0x22150b38fd8 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x22150b38fc0 <col:9, col:14> 'err' 0x22150b38f70
|   |-IfStmt 0x22150b39430 <line:1734:5, line:1738:5>
|   | |-OpaqueValueExpr 0x22150b39418 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x22150b39400 <line:1734:79, line:1738:5>
|   |   `-GotoStmt 0x22150b393e8 <line:1737:9, col:14> 'err' 0x22150b38f70
|   |-LabelStmt 0x22150b39598 <line:1741:2, col:5> 'err'
|   | `-NullStmt 0x22150b39590 <col:5>
|   `-ReturnStmt 0x22150b396f8 <line:1744:5, col:12>
|     `-ImplicitCastExpr 0x22150b396e0 <col:12> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x22150b396c0 <col:12> 'int' lvalue Var 0x22150b326f8 'ret' 'int'
|-FunctionDecl 0x22150b39a18 <line:1751:1, line:1793:1> line:1751:5 invalid ec_GFp_nistp521_point_get_affine_coordinates 'int (const int *, const int *, int *, int *, int *)'
| |-ParmVarDecl 0x22150b39760 <col:50, col:66> col:66 invalid group 'const int *'
| |-ParmVarDecl 0x22150b397e0 <line:1752:50, col:66> col:66 invalid point 'const int *'
| |-ParmVarDecl 0x22150b39860 <line:1753:50, col:58> col:58 invalid x 'int *'
| |-ParmVarDecl 0x22150b398e0 <col:61, col:69> col:69 invalid y 'int *'
| |-ParmVarDecl 0x22150b39960 <line:1754:50, col:58> col:58 invalid ctx 'int *'
| `-CompoundStmt 0x22150b33048 <line:1755:1, line:1793:1>
|   |-DeclStmt 0x22150b39e00 <line:1756:5, col:43>
|   | |-VarDecl 0x22150b39b08 <col:5, col:11> col:11 used z1 'felem':'limb [9]'
|   | |-VarDecl 0x22150b39b80 <col:5, col:15> col:15 used z2 'felem':'limb [9]'
|   | |-VarDecl 0x22150b39bf8 <col:5, col:19> col:19 used x_in 'felem':'limb [9]'
|   | |-VarDecl 0x22150b39c70 <col:5, col:25> col:25 used y_in 'felem':'limb [9]'
|   | |-VarDecl 0x22150b39ce8 <col:5, col:31> col:31 used x_out 'felem':'limb [9]'
|   | `-VarDecl 0x22150b39d60 <col:5, col:38> col:38 used y_out 'felem':'limb [9]'
|   |-DeclStmt 0x22150b39e90 <line:1757:5, col:19>
|   | `-VarDecl 0x22150b39e28 <col:5, col:16> col:16 used tmp 'largefelem':'int [9]'
|   |-IfStmt 0x22150b3a040 <line:1759:5, line:1763:5>
|   | |-OpaqueValueExpr 0x22150b3a028 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x22150b3a010 <line:1759:48, line:1763:5>
|   |   `-ReturnStmt 0x22150b3a000 <line:1762:9, col:16>
|   |     `-IntegerLiteral 0x22150b39fd8 <col:16> 'int' 0
|   |-IfStmt 0x22150b3a150 <line:1764:5, line:1766:16>
|   | |-OpaqueValueExpr 0x22150b3a138 <<invalid sloc>> '_Bool'
|   | `-ReturnStmt 0x22150b3a128 <col:9, col:16>
|   |   `-IntegerLiteral 0x22150b3a100 <col:16> 'int' 0
|   |-CallExpr 0x22150b3a1f8 <line:1767:5, col:21> 'void'
|   | |-ImplicitCastExpr 0x22150b3a1e0 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150b3a168 <col:5> 'void (limb *, const limb *)' Function 0x22150a2e308 'felem_inv' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x22150b3a228 <col:15> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150b3a188 <col:15> 'felem':'limb [9]' lvalue Var 0x22150b39b80 'z2' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x22150b3a258 <col:19> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150b3a240 <col:19> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x22150b3a1c0 <col:19> 'felem':'limb [9]' lvalue Var 0x22150b39b08 'z1' 'felem':'limb [9]'
|   |-CallExpr 0x22150b3a300 <line:1768:5, col:25> 'void'
|   | |-ImplicitCastExpr 0x22150b3a2e8 <col:5> 'void (*)(int *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150b3a270 <col:5> 'void (int *, const limb *)' Function 0x22150964740 'felem_square' 'void (int *, const limb *)'
|   | |-ImplicitCastExpr 0x22150b3a330 <col:18> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150b3a290 <col:18> 'largefelem':'int [9]' lvalue Var 0x22150b39e28 'tmp' 'largefelem':'int [9]'
|   | `-ImplicitCastExpr 0x22150b3a360 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150b3a348 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x22150b3a2c8 <col:23> 'felem':'limb [9]' lvalue Var 0x22150b39b80 'z2' 'felem':'limb [9]'
|   |-CallExpr 0x22150b3a3f0 <line:1769:5, col:25> 'void'
|   | |-ImplicitCastExpr 0x22150b3a3d8 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150b3a378 <col:5> 'void (limb *, const int *)' Function 0x2215096a398 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x22150b3a420 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150b3a398 <col:18> 'felem':'limb [9]' lvalue Var 0x22150b39b08 'z1' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x22150b3a450 <col:22> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150b3a438 <col:22> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x22150b3a3b8 <col:22> 'largefelem':'int [9]' lvalue Var 0x22150b39e28 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x22150b3a500 <line:1770:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x22150b3a4e8 <col:5> 'void (*)(int *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150b3a468 <col:5> 'void (int *, const limb *, const limb *)' Function 0x22150966d78 'felem_mul' 'void (int *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x22150b3a538 <col:15> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150b3a488 <col:15> 'largefelem':'int [9]' lvalue Var 0x22150b39e28 'tmp' 'largefelem':'int [9]'
|   | |-ImplicitCastExpr 0x22150b3a568 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x22150b3a550 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x22150b3a4a8 <col:20> 'felem':'limb [9]' lvalue Var 0x22150b39bf8 'x_in' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x22150b3a598 <col:26> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150b3a580 <col:26> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x22150b3a4c8 <col:26> 'felem':'limb [9]' lvalue Var 0x22150b39b08 'z1' 'felem':'limb [9]'
|   |-CallExpr 0x22150b3a628 <line:1771:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x22150b3a610 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150b3a5b0 <col:5> 'void (limb *, const int *)' Function 0x2215096a398 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x22150b3a658 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150b3a5d0 <col:18> 'felem':'limb [9]' lvalue Var 0x22150b39bf8 'x_in' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x22150b3a688 <col:24> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150b3a670 <col:24> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x22150b3a5f0 <col:24> 'largefelem':'int [9]' lvalue Var 0x22150b39e28 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x22150b3a730 <line:1772:5, col:31> 'void'
|   | |-ImplicitCastExpr 0x22150b3a718 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150b3a6a0 <col:5> 'void (limb *, const limb *)' Function 0x22150a33ae0 'felem_contract' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x22150b3a760 <col:20> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150b3a6c0 <col:20> 'felem':'limb [9]' lvalue Var 0x22150b39ce8 'x_out' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x22150b3a790 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150b3a778 <col:27> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x22150b3a6f8 <col:27> 'felem':'limb [9]' lvalue Var 0x22150b39bf8 'x_in' 'felem':'limb [9]'
|   |-IfStmt 0x22150b3a920 <line:1773:5, line:1779:5>
|   | |-OpaqueValueExpr 0x22150b3a908 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x22150b3a8f0 <line:1773:20, line:1779:5>
|   |   `-IfStmt 0x22150b3a8d8 <line:1774:9, line:1778:9>
|   |     |-OpaqueValueExpr 0x22150b3a8c0 <<invalid sloc>> '_Bool'
|   |     `-CompoundStmt 0x22150b3a8a8 <line:1774:37, line:1778:9>
|   |       `-ReturnStmt 0x22150b3a898 <line:1777:13, col:20>
|   |         `-IntegerLiteral 0x22150b3a870 <col:20> 'int' 0
|   |-CallExpr 0x22150b3a9d0 <line:1780:5, col:26> 'void'
|   | |-ImplicitCastExpr 0x22150b3a9b8 <col:5> 'void (*)(int *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150b3a938 <col:5> 'void (int *, const limb *, const limb *)' Function 0x22150966d78 'felem_mul' 'void (int *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x22150b3aa08 <col:15> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150b3a958 <col:15> 'largefelem':'int [9]' lvalue Var 0x22150b39e28 'tmp' 'largefelem':'int [9]'
|   | |-ImplicitCastExpr 0x22150b3aa38 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x22150b3aa20 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x22150b3a978 <col:20> 'felem':'limb [9]' lvalue Var 0x22150b39b08 'z1' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x22150b3aa68 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150b3aa50 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x22150b3a998 <col:24> 'felem':'limb [9]' lvalue Var 0x22150b39b80 'z2' 'felem':'limb [9]'
|   |-CallExpr 0x22150b3aaf8 <line:1781:5, col:25> 'void'
|   | |-ImplicitCastExpr 0x22150b3aae0 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150b3aa80 <col:5> 'void (limb *, const int *)' Function 0x2215096a398 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x22150b3ab28 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150b3aaa0 <col:18> 'felem':'limb [9]' lvalue Var 0x22150b39b08 'z1' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x22150b3ab58 <col:22> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150b3ab40 <col:22> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x22150b3aac0 <col:22> 'largefelem':'int [9]' lvalue Var 0x22150b39e28 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x22150b3ac08 <line:1782:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x22150b3abf0 <col:5> 'void (*)(int *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150b3ab70 <col:5> 'void (int *, const limb *, const limb *)' Function 0x22150966d78 'felem_mul' 'void (int *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x22150b3ac40 <col:15> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150b3ab90 <col:15> 'largefelem':'int [9]' lvalue Var 0x22150b39e28 'tmp' 'largefelem':'int [9]'
|   | |-ImplicitCastExpr 0x22150b3ac70 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x22150b3ac58 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x22150b3abb0 <col:20> 'felem':'limb [9]' lvalue Var 0x22150b39c70 'y_in' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x22150b3aca0 <col:26> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150b3ac88 <col:26> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x22150b3abd0 <col:26> 'felem':'limb [9]' lvalue Var 0x22150b39b08 'z1' 'felem':'limb [9]'
|   |-CallExpr 0x22150b3ad30 <line:1783:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x22150b3ad18 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150b3acb8 <col:5> 'void (limb *, const int *)' Function 0x2215096a398 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x22150b3ad60 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150b3acd8 <col:18> 'felem':'limb [9]' lvalue Var 0x22150b39c70 'y_in' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x22150b3ad90 <col:24> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150b3ad78 <col:24> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x22150b3acf8 <col:24> 'largefelem':'int [9]' lvalue Var 0x22150b39e28 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x22150b3ae38 <line:1784:5, col:31> 'void'
|   | |-ImplicitCastExpr 0x22150b3ae20 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150b3ada8 <col:5> 'void (limb *, const limb *)' Function 0x22150a33ae0 'felem_contract' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x22150b3ae68 <col:20> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150b3adc8 <col:20> 'felem':'limb [9]' lvalue Var 0x22150b39d60 'y_out' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x22150b32e68 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150b32e50 <col:27> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x22150b3ae00 <col:27> 'felem':'limb [9]' lvalue Var 0x22150b39c70 'y_in' 'felem':'limb [9]'
|   |-IfStmt 0x22150b32ff8 <line:1785:5, line:1791:5>
|   | |-OpaqueValueExpr 0x22150b32fe0 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x22150b32fc8 <line:1785:20, line:1791:5>
|   |   `-IfStmt 0x22150b32fb0 <line:1786:9, line:1790:9>
|   |     |-OpaqueValueExpr 0x22150b32f98 <<invalid sloc>> '_Bool'
|   |     `-CompoundStmt 0x22150b32f80 <line:1786:37, line:1790:9>
|   |       `-ReturnStmt 0x22150b32f70 <line:1789:13, col:20>
|   |         `-IntegerLiteral 0x22150b32f48 <col:20> 'int' 0
|   `-ReturnStmt 0x22150b33038 <line:1792:5, col:12>
|     `-IntegerLiteral 0x22150b33010 <col:12> 'int' 1
|-FunctionDecl 0x22150b33518 <line:1796:1, line:1823:1> line:1796:13 used make_points_affine 'void (size_t, felem (*)[3], felem *)' static
| |-ParmVarDecl 0x22150b330f8 <col:32, col:39> col:39 used num 'size_t':'unsigned long long'
| |-ParmVarDecl 0x22150b33290 <col:44, col:60> col:50 used points 'felem (*)[3]':'felem (*)[3]'
| |-ParmVarDecl 0x22150b333b0 <line:1797:32, col:49> col:38 used tmp_felems 'felem *':'felem *'
| `-CompoundStmt 0x22150b34248 <line:1798:1, line:1823:1>
|   `-CallExpr 0x22150b34140 <line:1803:5, line:1822:60> 'void'
|     |-ImplicitCastExpr 0x22150b34128 <line:1803:5> 'void (*)(size_t, void *, size_t, void *, void (*)(void *), int (*)(const void *), void (*)(void *, const void *), void (*)(void *, const void *), void (*)(void *, const void *, const void *), void (*)(void *, const void *), void (*)(void *, const void *))' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x22150b335e8 <col:5> 'void (size_t, void *, size_t, void *, void (*)(void *), int (*)(const void *), void (*)(void *, const void *), void (*)(void *, const void *), void (*)(void *, const void *, const void *), void (*)(void *, const void *), void (*)(void *, const void *))' Function 0x221509d3ca8 'ec_GFp_nistp_points_make_affine_internal' 'void (size_t, void *, size_t, void *, void (*)(void *), int (*)(const void *), void (*)(void *, const void *), void (*)(void *, const void *), void (*)(void *, const void *, const void *), void (*)(void *, const void *), void (*)(void *, const void *))'
|     |-ImplicitCastExpr 0x22150b341b8 <col:46> 'size_t':'unsigned long long' <LValueToRValue>
|     | `-DeclRefExpr 0x22150b33608 <col:46> 'size_t':'unsigned long long' lvalue ParmVar 0x22150b330f8 'num' 'size_t':'unsigned long long'
|     |-ImplicitCastExpr 0x22150b341e8 <line:1804:46> 'void *' <BitCast>
|     | `-ImplicitCastExpr 0x22150b341d0 <col:46> 'felem (*)[3]':'felem (*)[3]' <LValueToRValue>
|     |   `-DeclRefExpr 0x22150b33628 <col:46> 'felem (*)[3]':'felem (*)[3]' lvalue ParmVar 0x22150b33290 'points' 'felem (*)[3]':'felem (*)[3]'
|     |-UnaryExprOrTypeTraitExpr 0x22150b33658 <line:1805:46, col:58> 'unsigned long long' sizeof 'felem':'limb [9]'
|     |-ImplicitCastExpr 0x22150b34218 <line:1806:46> 'void *' <BitCast>
|     | `-ImplicitCastExpr 0x22150b34200 <col:46> 'felem *':'felem *' <LValueToRValue>
|     |   `-DeclRefExpr 0x22150b33678 <col:46> 'felem *':'felem *' lvalue ParmVar 0x22150b333b0 'tmp_felems' 'felem *':'felem *'
|     |-CStyleCastExpr 0x22150b337b0 <line:1807:46, col:64> 'void (*)(void *)' <BitCast>
|     | `-ImplicitCastExpr 0x22150b33798 <col:64> 'void (*)(limb *)' <FunctionToPointerDecay> part_of_explicit_cast
|     |   `-DeclRefExpr 0x22150b33718 <col:64> 'void (limb *)' Function 0x2215095a7b8 'felem_one' 'void (limb *)'
|     |-ImplicitCastExpr 0x22150b34230 <line:1808:46> 'int (*)(const void *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x22150b337d8 <col:46> 'int (const void *)' Function 0x22150a336a8 'felem_is_zero_int' 'int (const void *)'
|     |-CStyleCastExpr 0x22150b33970 <line:1809:46, line:1810:46> 'void (*)(void *, const void *)' <BitCast>
|     | `-ImplicitCastExpr 0x22150b33958 <col:46> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay> part_of_explicit_cast
|     |   `-DeclRefExpr 0x22150b338f8 <col:46> 'void (limb *, const limb *)' Function 0x2215095b168 'felem_assign' 'void (limb *, const limb *)'
|     |-CStyleCastExpr 0x22150b33b10 <line:1811:46, line:1812:46> 'void (*)(void *, const void *)' <BitCast>
|     | `-ImplicitCastExpr 0x22150b33af8 <col:46> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay> part_of_explicit_cast
|     |   `-DeclRefExpr 0x22150b33a98 <col:46> 'void (limb *, const limb *)' Function 0x22150a2d7e0 'felem_square_reduce' 'void (limb *, const limb *)'
|     |-CStyleCastExpr 0x22150b33d60 <col:67, line:1818:46> 'void (*)(void *, const void *, const void *)' <BitCast>
|     | `-ImplicitCastExpr 0x22150b33d48 <col:46> 'void (*)(limb *, const limb *, const limb *)' <FunctionToPointerDecay> part_of_explicit_cast
|     |   `-DeclRefExpr 0x22150b33cb8 <col:46> 'void (limb *, const limb *, const limb *)' Function 0x22150a2ddb8 'felem_mul_reduce' 'void (limb *, const limb *, const limb *)'
|     |-CStyleCastExpr 0x22150b33f00 <line:1819:46, line:1820:46> 'void (*)(void *, const void *)' <BitCast>
|     | `-ImplicitCastExpr 0x22150b33ee8 <col:46> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay> part_of_explicit_cast
|     |   `-DeclRefExpr 0x22150b33e88 <col:46> 'void (limb *, const limb *)' Function 0x22150a2e308 'felem_inv' 'void (limb *, const limb *)'
|     `-CStyleCastExpr 0x22150b340a0 <line:1821:46, line:1822:46> 'void (*)(void *, const void *)' <BitCast>
|       `-ImplicitCastExpr 0x22150b34088 <col:46> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay> part_of_explicit_cast
|         `-DeclRefExpr 0x22150b34028 <col:46> 'void (limb *, const limb *)' Function 0x22150a33ae0 'felem_contract' 'void (limb *, const limb *)'
|-FunctionDecl 0x22150b34658 <line:1829:1, line:2027:1> line:1829:5 invalid ec_GFp_nistp521_points_mul 'int (const int *, int *, const int *, size_t, const int **, const int **, int *)'
| |-ParmVarDecl 0x22150b34278 <col:32, col:48> col:48 invalid group 'const int *'
| |-ParmVarDecl 0x22150b342f8 <col:55, col:65> col:65 invalid r 'int *'
| |-ParmVarDecl 0x22150b34378 <line:1830:32, col:46> col:46 invalid scalar 'const int *'
| |-ParmVarDecl 0x22150b343f0 <col:54, col:61> col:61 used num 'size_t':'unsigned long long'
| |-ParmVarDecl 0x22150b34480 <line:1831:32, <invalid sloc>> col:48 invalid points 'const int **':'const int **'
| |-ParmVarDecl 0x22150b34510 <line:1832:32, <invalid sloc>> col:46 invalid scalars 'const int **':'const int **'
| |-ParmVarDecl 0x22150b34590 <col:57, col:65> col:65 invalid ctx 'int *'
| `-CompoundStmt 0x22150b428d0 <line:1833:1, line:2027:1>
|   |-DeclStmt 0x22150b347f0 <line:1834:5, col:16>
|   | `-VarDecl 0x22150b34760 <col:5, col:15> col:9 used ret 'int' cinit
|   |   `-IntegerLiteral 0x22150b347c8 <col:15> 'int' 0
|   |-DeclStmt 0x22150b34888 <line:1835:5, col:10>
|   | `-VarDecl 0x22150b34820 <col:5, col:9> col:9 used j 'int'
|   |-DeclStmt 0x22150b34948 <line:1836:5, col:18>
|   | `-VarDecl 0x22150b348b8 <col:5, col:17> col:9 used mixed 'int' cinit
|   |   `-IntegerLiteral 0x22150b34920 <col:17> 'int' 0
|   |-DeclStmt 0x22150b34a60 <line:1839:5, col:29>
|   | `-VarDecl 0x22150b349f8 <col:5, col:21> col:21 used g_secret 'felem_bytearray':'u8 [66]'
|   |-DeclStmt 0x22150b34bf0 <line:1840:5, col:36>
|   | `-VarDecl 0x22150b34ae8 <col:5, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27> .//openssl//file_jk/before\crypto\ec\ecp_nistp521.c:1840:22 used secrets 'felem_bytearray *' cinit
|   |   `-ImplicitCastExpr 0x22150b34bd8 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'felem_bytearray *' <NullToPointer>
|   |     `-ParenExpr 0x22150b34bb8 <col:17, col:27> 'void *'
|   |       `-CStyleCastExpr 0x22150b34b90 <col:18, col:26> 'void *' <NullToPointer>
|   |         `-IntegerLiteral 0x22150b34b50 <col:26> 'int' 0
|   |-DeclStmt 0x22150b2ce80 <.//openssl//file_jk/before\crypto\ec\ecp_nistp521.c:1841:5, col:36>
|   | `-VarDecl 0x22150b34d98 <col:5, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27> .//openssl//file_jk/before\crypto\ec\ecp_nistp521.c:1841:13 used pre_comp 'felem (*)[17][3]' cinit
|   |   `-ImplicitCastExpr 0x22150b2ce68 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'felem (*)[17][3]' <NullToPointer>
|   |     `-ParenExpr 0x22150b2ce48 <col:17, col:27> 'void *'
|   |       `-CStyleCastExpr 0x22150b2ce20 <col:18, col:26> 'void *' <NullToPointer>
|   |         `-IntegerLiteral 0x22150b34e00 <col:26> 'int' 0
|   |-DeclStmt 0x22150b2cfb0 <.//openssl//file_jk/before\crypto\ec\ecp_nistp521.c:1842:5, col:29>
|   | `-VarDecl 0x22150b2cea8 <col:5, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27> .//openssl//file_jk/before\crypto\ec\ecp_nistp521.c:1842:12 used tmp_felems 'felem *' cinit
|   |   `-ImplicitCastExpr 0x22150b2cf98 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'felem *' <NullToPointer>
|   |     `-ParenExpr 0x22150b2cf78 <col:17, col:27> 'void *'
|   |       `-CStyleCastExpr 0x22150b2cf50 <col:18, col:26> 'void *' <NullToPointer>
|   |         `-IntegerLiteral 0x22150b2cf10 <col:26> 'int' 0
|   |-DeclStmt 0x22150b2d040 <.//openssl//file_jk/before\crypto\ec\ecp_nistp521.c:1843:5, col:24>
|   | `-VarDecl 0x22150b2cfd8 <col:5, col:21> col:21 used tmp 'felem_bytearray':'u8 [66]'
|   |-DeclStmt 0x22150b2d170 <line:1844:5, col:26>
|   | |-VarDecl 0x22150b2d070 <col:5, col:14> col:14 used i 'unsigned int'
|   | `-VarDecl 0x22150b2d0f0 <col:5, col:17> col:17 used num_bytes 'unsigned int'
|   |-DeclStmt 0x22150b2d230 <line:1845:5, col:26>
|   | `-VarDecl 0x22150b2d1a0 <col:5, col:25> col:9 used have_pre_comp 'int' cinit
|   |   `-IntegerLiteral 0x22150b2d208 <col:25> 'int' 0
|   |-DeclStmt 0x22150b2d310 <line:1846:5, col:28>
|   | `-VarDecl 0x22150b2d258 <col:5, col:25> col:12 used num_points 'size_t':'unsigned long long' cinit
|   |   `-ImplicitCastExpr 0x22150b2d2f8 <col:25> 'size_t':'unsigned long long' <LValueToRValue>
|   |     `-DeclRefExpr 0x22150b2d2c0 <col:25> 'size_t':'unsigned long long' lvalue ParmVar 0x22150b343f0 'num' 'size_t':'unsigned long long'
|   |-DeclStmt 0x22150b2d630 <line:1847:5, col:48>
|   | |-VarDecl 0x22150b2d338 <col:5, col:11> col:11 used x_in 'felem':'limb [9]'
|   | |-VarDecl 0x22150b2d3b0 <col:5, col:17> col:17 used y_in 'felem':'limb [9]'
|   | |-VarDecl 0x22150b2d428 <col:5, col:23> col:23 used z_in 'felem':'limb [9]'
|   | |-VarDecl 0x22150b2d4a0 <col:5, col:29> col:29 used x_out 'felem':'limb [9]'
|   | |-VarDecl 0x22150b2d518 <col:5, col:36> col:36 used y_out 'felem':'limb [9]'
|   | `-VarDecl 0x22150b2d590 <col:5, col:43> col:43 used z_out 'felem':'limb [9]'
|   |-DeclStmt 0x22150b2d760 <line:1848:5, col:34>
|   | `-VarDecl 0x22150b2d658 <col:5, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27> .//openssl//file_jk/before\crypto\ec\ecp_nistp521.c:1848:24 used pre 'NISTP521_PRE_COMP *' cinit
|   |   `-ImplicitCastExpr 0x22150b2d748 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'NISTP521_PRE_COMP *' <NullToPointer>
|   |     `-ParenExpr 0x22150b2d728 <col:17, col:27> 'void *'
|   |       `-CStyleCastExpr 0x22150b2d700 <col:18, col:26> 'void *' <NullToPointer>
|   |         `-IntegerLiteral 0x22150b2d6c0 <col:26> 'int' 0
|   |-DeclStmt 0x22150b2d950 <.//openssl//file_jk/before\crypto\ec\ecp_nistp521.c:1849:5, col:33>
|   | `-VarDecl 0x22150b2d848 <col:5, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27> .//openssl//file_jk/before\crypto\ec\ecp_nistp521.c:1849:12 used g_pre_comp 'felem (*)[3]' cinit
|   |   `-ImplicitCastExpr 0x22150b2d938 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'felem (*)[3]' <NullToPointer>
|   |     `-ParenExpr 0x22150b2d918 <col:17, col:27> 'void *'
|   |       `-CStyleCastExpr 0x22150b2d8f0 <col:18, col:26> 'void *' <NullToPointer>
|   |         `-IntegerLiteral 0x22150b2d8b0 <col:26> 'int' 0
|   |-DeclStmt 0x22150b2daf8 <.//openssl//file_jk/before\crypto\ec\ecp_nistp521.c:1851:5, col:29>
|   | `-VarDecl 0x22150b2da08 <col:5, col:21> col:21 invalid p 'const int *'
|   |-DeclStmt 0x22150b2dc18 <line:1852:5, col:34>
|   | `-VarDecl 0x22150b2db28 <col:5, col:19> col:19 invalid p_scalar 'const int *'
|   |-IfStmt 0x22150b2de18 <line:1854:5, line:1856:20>
|   | |-OpaqueValueExpr 0x22150b2de00 <<invalid sloc>> '_Bool'
|   | `-IfStmt 0x22150b2dde8 <line:1855:9, line:1856:20>
|   |   |-OpaqueValueExpr 0x22150b2ddd0 <<invalid sloc>> '_Bool'
|   |   `-ReturnStmt 0x22150b2ddc0 <col:13, col:20>
|   |     `-IntegerLiteral 0x22150b2dd98 <col:20> 'int' 0
|   |-IfStmt 0x22150b2e170 <line:1858:5, line:1862:14>
|   | |-OpaqueValueExpr 0x22150b2e158 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x22150b2e140 <col:9, col:14> 'err' 0x22150b2e0f0
|   |-IfStmt 0x22150b3cea0 <line:1864:5, line:1895:5>
|   | |-OpaqueValueExpr 0x22150b2ee00 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x22150b2edc8 <line:1864:25, line:1895:5>
|   |   |-IfStmt 0x22150b2e500 <line:1866:9, line:1871:40> has_else
|   |   | |-ImplicitCastExpr 0x22150b2e268 <line:1866:13> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x22150b2e248 <col:13> 'NISTP521_PRE_COMP *' lvalue Var 0x22150b2d658 'pre' 'NISTP521_PRE_COMP *'
|   |   | |-BinaryOperator 0x22150b2e398 <line:1868:13, col:44> 'felem (*)[3]' '='
|   |   | | |-DeclRefExpr 0x22150b2e280 <col:13> 'felem (*)[3]' lvalue Var 0x22150b2d848 'g_pre_comp' 'felem (*)[3]'
|   |   | | `-UnaryOperator 0x22150b2e380 <col:26, col:44> 'felem (*)[3]' prefix '&' cannot overflow
|   |   | |   `-ArraySubscriptExpr 0x22150b2e360 <col:27, col:44> 'felem [3]' lvalue
|   |   | |     |-ImplicitCastExpr 0x22150b2e348 <col:27, col:32> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   | |     | `-MemberExpr 0x22150b2e2f0 <col:27, col:32> 'felem [16][3]' lvalue ->g_pre_comp 0x22150b3bf38
|   |   | |     |   `-ImplicitCastExpr 0x22150b2e2d8 <col:27> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   |   | |     |     `-DeclRefExpr 0x22150b2e2b8 <col:27> 'NISTP521_PRE_COMP *' lvalue Var 0x22150b2d658 'pre' 'NISTP521_PRE_COMP *'
|   |   | |     `-IntegerLiteral 0x22150b2e320 <col:43> 'int' 0
|   |   | `-BinaryOperator 0x22150b2e4e0 <line:1871:13, col:40> 'felem (*)[3]' '='
|   |   |   |-DeclRefExpr 0x22150b2e3b8 <col:13> 'felem (*)[3]' lvalue Var 0x22150b2d848 'g_pre_comp' 'felem (*)[3]'
|   |   |   `-CStyleCastExpr 0x22150b2e4b8 <col:26, col:40> 'felem (*)[3]' <NoOp>
|   |   |     `-ImplicitCastExpr 0x22150b2e468 <col:40> 'const felem (*)[3]' <ArrayToPointerDecay> part_of_explicit_cast
|   |   |       `-DeclRefExpr 0x22150b2e400 <col:40> 'const felem [16][3]' lvalue Var 0x22150a3c3a8 'gmul' 'const felem [16][3]'
|   |   |-IfStmt 0x22150b2e6f0 <line:1873:9, line:1874:18>
|   |   | |-OpaqueValueExpr 0x22150b2e6d8 <<invalid sloc>> '_Bool'
|   |   | `-GotoStmt 0x22150b2e6c0 <col:13, col:18> 'err' 0x22150b2e0f0
|   |   |-IfStmt 0x22150b2ea10 <line:1876:9, line:1881:9>
|   |   | |-OpaqueValueExpr 0x22150b2e9f8 <<invalid sloc>> '_Bool'
|   |   | `-CompoundStmt 0x22150b2e9e0 <line:1878:48, line:1881:9>
|   |   |   `-GotoStmt 0x22150b2e9c8 <line:1880:13, col:18> 'err' 0x22150b2e0f0
|   |   |-IfStmt 0x22150b2eb68 <line:1882:9, line:1885:18>
|   |   | |-OpaqueValueExpr 0x22150b2eb50 <<invalid sloc>> '_Bool'
|   |   | `-GotoStmt 0x22150b2eb38 <col:13, col:18> 'err' 0x22150b2e0f0
|   |   `-IfStmt 0x22150b2eda0 <line:1886:9, line:1894:23> has_else
|   |     |-OpaqueValueExpr 0x22150b2ed88 <<invalid sloc>> '_Bool'
|   |     |-BinaryOperator 0x22150b2ed18 <line:1888:13, col:29> 'int' '='
|   |     | |-DeclRefExpr 0x22150b2ecb8 <col:13> 'int' lvalue Var 0x22150b2d1a0 'have_pre_comp' 'int'
|   |     | `-IntegerLiteral 0x22150b2ecf0 <col:29> 'int' 1
|   |     `-UnaryOperator 0x22150b2ed70 <line:1894:13, col:23> 'size_t':'unsigned long long' postfix '++'
|   |       `-DeclRefExpr 0x22150b2ed38 <col:13> 'size_t':'unsigned long long' lvalue Var 0x22150b2d258 'num_points' 'size_t':'unsigned long long'
|   |-IfStmt 0x22150b40fc8 <line:1897:5, line:1978:5>
|   | |-BinaryOperator 0x22150b3cf30 <line:1897:9, col:22> 'int' '>'
|   | | |-ImplicitCastExpr 0x22150b3cf00 <col:9> 'size_t':'unsigned long long' <LValueToRValue>
|   | | | `-DeclRefExpr 0x22150b3ceb8 <col:9> 'size_t':'unsigned long long' lvalue Var 0x22150b2d258 'num_points' 'size_t':'unsigned long long'
|   | | `-ImplicitCastExpr 0x22150b3cf18 <col:22> 'unsigned long long' <IntegralCast>
|   | |   `-IntegerLiteral 0x22150b3ced8 <col:22> 'int' 0
|   | `-CompoundStmt 0x22150b40f80 <col:25, line:1978:5>
|   |   |-IfStmt 0x22150b3d080 <line:1898:9, line:1904:9>
|   |   | |-BinaryOperator 0x22150b3cfc8 <line:1898:13, col:27> 'int' '>='
|   |   | | |-ImplicitCastExpr 0x22150b3cf98 <col:13> 'size_t':'unsigned long long' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x22150b3cf50 <col:13> 'size_t':'unsigned long long' lvalue Var 0x22150b2d258 'num_points' 'size_t':'unsigned long long'
|   |   | | `-ImplicitCastExpr 0x22150b3cfb0 <col:27> 'unsigned long long' <IntegralCast>
|   |   | |   `-IntegerLiteral 0x22150b3cf70 <col:27> 'int' 2
|   |   | `-CompoundStmt 0x22150b3d068 <col:30, line:1904:9>
|   |   |   `-BinaryOperator 0x22150b3d048 <line:1903:13, col:21> 'int' '='
|   |   |     |-DeclRefExpr 0x22150b3cfe8 <col:13> 'int' lvalue Var 0x22150b348b8 'mixed' 'int'
|   |   |     `-IntegerLiteral 0x22150b3d020 <col:21> 'int' 1
|   |   |-BinaryOperator 0x22150b3d230 <line:1905:9, col:63> 'felem_bytearray *' '='
|   |   | |-DeclRefExpr 0x22150b3d098 <col:9> 'felem_bytearray *' lvalue Var 0x22150b34ae8 'secrets' 'felem_bytearray *'
|   |   | `-ImplicitCastExpr 0x22150b3d218 <col:19, col:63> 'felem_bytearray *' <IntegralToPointer>
|   |   |   `-CallExpr 0x22150b3d1f0 <col:19, col:63> 'int'
|   |   |     |-ImplicitCastExpr 0x22150b3d1d8 <col:19> 'int (*)()' <FunctionToPointerDecay>
|   |   |     | `-DeclRefExpr 0x22150b3d0d0 <col:19> 'int ()' Function 0x22150b3c690 'OPENSSL_zalloc' 'int ()'
|   |   |     `-BinaryOperator 0x22150b3d1b8 <col:34, col:53> 'unsigned long long' '*'
|   |   |       |-UnaryExprOrTypeTraitExpr 0x22150b3d160 <col:34, col:49> 'unsigned long long' sizeof
|   |   |       | `-ParenExpr 0x22150b3d140 <col:40, col:49> 'felem_bytearray':'u8 [66]' lvalue
|   |   |       |   `-UnaryOperator 0x22150b3d128 <col:41, col:42> 'felem_bytearray':'u8 [66]' lvalue prefix '*' cannot overflow
|   |   |       |     `-ImplicitCastExpr 0x22150b3d110 <col:42> 'felem_bytearray *' <LValueToRValue>
|   |   |       |       `-DeclRefExpr 0x22150b3d0f0 <col:42> 'felem_bytearray *' lvalue Var 0x22150b34ae8 'secrets' 'felem_bytearray *' non_odr_use_unevaluated
|   |   |       `-ImplicitCastExpr 0x22150b3d1a0 <col:53> 'size_t':'unsigned long long' <LValueToRValue>
|   |   |         `-DeclRefExpr 0x22150b3d180 <col:53> 'size_t':'unsigned long long' lvalue Var 0x22150b2d258 'num_points' 'size_t':'unsigned long long'
|   |   |-BinaryOperator 0x22150b3d3e8 <line:1906:9, col:65> 'felem (*)[17][3]' '='
|   |   | |-DeclRefExpr 0x22150b3d250 <col:9> 'felem (*)[17][3]' lvalue Var 0x22150b34d98 'pre_comp' 'felem (*)[17][3]'
|   |   | `-ImplicitCastExpr 0x22150b3d3d0 <col:20, col:65> 'felem (*)[17][3]' <IntegralToPointer>
|   |   |   `-CallExpr 0x22150b3d3a8 <col:20, col:65> 'int'
|   |   |     |-ImplicitCastExpr 0x22150b3d390 <col:20> 'int (*)()' <FunctionToPointerDecay>
|   |   |     | `-DeclRefExpr 0x22150b3d288 <col:20> 'int ()' Function 0x22150b3c690 'OPENSSL_zalloc' 'int ()'
|   |   |     `-BinaryOperator 0x22150b3d370 <col:35, col:55> 'unsigned long long' '*'
|   |   |       |-UnaryExprOrTypeTraitExpr 0x22150b3d318 <col:35, col:51> 'unsigned long long' sizeof
|   |   |       | `-ParenExpr 0x22150b3d2f8 <col:41, col:51> 'felem [17][3]':'felem [17][3]' lvalue
|   |   |       |   `-UnaryOperator 0x22150b3d2e0 <col:42, col:43> 'felem [17][3]':'felem [17][3]' lvalue prefix '*' cannot overflow
|   |   |       |     `-ImplicitCastExpr 0x22150b3d2c8 <col:43> 'felem (*)[17][3]' <LValueToRValue>
|   |   |       |       `-DeclRefExpr 0x22150b3d2a8 <col:43> 'felem (*)[17][3]' lvalue Var 0x22150b34d98 'pre_comp' 'felem (*)[17][3]' non_odr_use_unevaluated
|   |   |       `-ImplicitCastExpr 0x22150b3d358 <col:55> 'size_t':'unsigned long long' <LValueToRValue>
|   |   |         `-DeclRefExpr 0x22150b3d338 <col:55> 'size_t':'unsigned long long' lvalue Var 0x22150b2d258 'num_points' 'size_t':'unsigned long long'
|   |   |-IfStmt 0x22150b3d7c8 <line:1907:9, line:1909:75>
|   |   | |-ImplicitCastExpr 0x22150b3d428 <line:1907:13> 'int' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x22150b3d408 <col:13> 'int' lvalue Var 0x22150b348b8 'mixed' 'int'
|   |   | `-BinaryOperator 0x22150b3d7a8 <line:1908:13, line:1909:75> 'felem *' '='
|   |   |   |-DeclRefExpr 0x22150b3d440 <line:1908:13> 'felem *' lvalue Var 0x22150b2cea8 'tmp_felems' 'felem *'
|   |   |   `-ImplicitCastExpr 0x22150b3d790 <line:1909:17, col:75> 'felem *' <IntegralToPointer>
|   |   |     `-CallExpr 0x22150b3d768 <col:17, col:75> 'int'
|   |   |       |-ImplicitCastExpr 0x22150b3d750 <col:17> 'int (*)()' <FunctionToPointerDecay>
|   |   |       | `-DeclRefExpr 0x22150b3d568 <col:17> 'int ()' Function 0x22150b3d4a0 'OPENSSL_malloc' 'int ()'
|   |   |       `-BinaryOperator 0x22150b3d730 <col:32, col:74> 'unsigned long long' '*'
|   |   |         |-UnaryExprOrTypeTraitExpr 0x22150b3d5f8 <col:32, col:50> 'unsigned long long' sizeof
|   |   |         | `-ParenExpr 0x22150b3d5d8 <col:38, col:50> 'felem':'limb [9]' lvalue
|   |   |         |   `-UnaryOperator 0x22150b3d5c0 <col:39, col:40> 'felem':'limb [9]' lvalue prefix '*' cannot overflow
|   |   |         |     `-ImplicitCastExpr 0x22150b3d5a8 <col:40> 'felem *' <LValueToRValue>
|   |   |         |       `-DeclRefExpr 0x22150b3d588 <col:40> 'felem *' lvalue Var 0x22150b2cea8 'tmp_felems' 'felem *' non_odr_use_unevaluated
|   |   |         `-ParenExpr 0x22150b3d710 <col:54, col:74> 'unsigned long long'
|   |   |           `-BinaryOperator 0x22150b3d6f0 <col:55, col:73> 'unsigned long long' '+'
|   |   |             |-BinaryOperator 0x22150b3d690 <col:55, col:68> 'unsigned long long' '*'
|   |   |             | |-ImplicitCastExpr 0x22150b3d660 <col:55> 'size_t':'unsigned long long' <LValueToRValue>
|   |   |             | | `-DeclRefExpr 0x22150b3d618 <col:55> 'size_t':'unsigned long long' lvalue Var 0x22150b2d258 'num_points' 'size_t':'unsigned long long'
|   |   |             | `-ImplicitCastExpr 0x22150b3d678 <col:68> 'unsigned long long' <IntegralCast>
|   |   |             |   `-IntegerLiteral 0x22150b3d638 <col:68> 'int' 17
|   |   |             `-ImplicitCastExpr 0x22150b3d6d8 <col:73> 'unsigned long long' <IntegralCast>
|   |   |               `-IntegerLiteral 0x22150b3d6b0 <col:73> 'int' 1
|   |   |-IfStmt 0x22150b3dc30 <line:1910:9, line:1914:9>
|   |   | |-BinaryOperator 0x22150b3dbc0 <line:1910:13, line:1911:46> 'int' '||'
|   |   | | |-BinaryOperator 0x22150b3da10 <line:1910:13, col:51> 'int' '||'
|   |   | | | |-ParenExpr 0x22150b3d8d8 <col:13, col:29> 'int'
|   |   | | | | `-BinaryOperator 0x22150b3d8b8 <col:14, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27> 'int' '=='
|   |   | | | |   |-ImplicitCastExpr 0x22150b3d888 <.//openssl//file_jk/before\crypto\ec\ecp_nistp521.c:1910:14> 'felem_bytearray *' <LValueToRValue>
|   |   | | | |   | `-DeclRefExpr 0x22150b3d7e0 <col:14> 'felem_bytearray *' lvalue Var 0x22150b34ae8 'secrets' 'felem_bytearray *'
|   |   | | | |   `-ImplicitCastExpr 0x22150b3d8a0 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'felem_bytearray *' <BitCast>
|   |   | | | |     `-ParenExpr 0x22150b3d868 <col:17, col:27> 'void *'
|   |   | | | |       `-CStyleCastExpr 0x22150b3d840 <col:18, col:26> 'void *' <NullToPointer>
|   |   | | | |         `-IntegerLiteral 0x22150b3d800 <col:26> 'int' 0
|   |   | | | `-ParenExpr 0x22150b3d9f0 <.//openssl//file_jk/before\crypto\ec\ecp_nistp521.c:1910:34, col:51> 'int'
|   |   | | |   `-BinaryOperator 0x22150b3d9d0 <col:35, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27> 'int' '=='
|   |   | | |     |-ImplicitCastExpr 0x22150b3d9a0 <.//openssl//file_jk/before\crypto\ec\ecp_nistp521.c:1910:35> 'felem (*)[17][3]' <LValueToRValue>
|   |   | | |     | `-DeclRefExpr 0x22150b3d8f8 <col:35> 'felem (*)[17][3]' lvalue Var 0x22150b34d98 'pre_comp' 'felem (*)[17][3]'
|   |   | | |     `-ImplicitCastExpr 0x22150b3d9b8 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'felem (*)[17][3]' <BitCast>
|   |   | | |       `-ParenExpr 0x22150b3d980 <col:17, col:27> 'void *'
|   |   | | |         `-CStyleCastExpr 0x22150b3d958 <col:18, col:26> 'void *' <NullToPointer>
|   |   | | |           `-IntegerLiteral 0x22150b3d918 <col:26> 'int' 0
|   |   | | `-ParenExpr 0x22150b3dba0 <.//openssl//file_jk/before\crypto\ec\ecp_nistp521.c:1911:16, col:46> 'int'
|   |   | |   `-BinaryOperator 0x22150b3db80 <col:17, col:45> 'int' '&&'
|   |   | |     |-ImplicitCastExpr 0x22150b3db68 <col:17> 'int' <LValueToRValue>
|   |   | |     | `-DeclRefExpr 0x22150b3da30 <col:17> 'int' lvalue Var 0x22150b348b8 'mixed' 'int'
|   |   | |     `-ParenExpr 0x22150b3db48 <col:26, col:45> 'int'
|   |   | |       `-BinaryOperator 0x22150b3db28 <col:27, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27> 'int' '=='
|   |   | |         |-ImplicitCastExpr 0x22150b3daf8 <.//openssl//file_jk/before\crypto\ec\ecp_nistp521.c:1911:27> 'felem *' <LValueToRValue>
|   |   | |         | `-DeclRefExpr 0x22150b3da50 <col:27> 'felem *' lvalue Var 0x22150b2cea8 'tmp_felems' 'felem *'
|   |   | |         `-ImplicitCastExpr 0x22150b3db10 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'felem *' <BitCast>
|   |   | |           `-ParenExpr 0x22150b3dad8 <col:17, col:27> 'void *'
|   |   | |             `-CStyleCastExpr 0x22150b3dab0 <col:18, col:26> 'void *' <NullToPointer>
|   |   | |               `-IntegerLiteral 0x22150b3da70 <col:26> 'int' 0
|   |   | `-CompoundStmt 0x22150b3dc18 <.//openssl//file_jk/before\crypto\ec\ecp_nistp521.c:1911:49, line:1914:9>
|   |   |   `-GotoStmt 0x22150b3dc00 <line:1913:13, col:18> 'err' 0x22150b2e0f0
|   |   |-ForStmt 0x22150b40c90 <line:1920:9, line:1975:9>
|   |   | |-BinaryOperator 0x22150b3dcc0 <line:1920:14, col:18> 'unsigned int' '='
|   |   | | |-DeclRefExpr 0x22150b3dc48 <col:14> 'unsigned int' lvalue Var 0x22150b2d070 'i' 'unsigned int'
|   |   | | `-ImplicitCastExpr 0x22150b3dca8 <col:18> 'unsigned int' <IntegralCast>
|   |   | |   `-IntegerLiteral 0x22150b3dc80 <col:18> 'int' 0
|   |   | |-<<<NULL>>>
|   |   | |-BinaryOperator 0x22150b3dd68 <col:21, col:25> 'int' '<'
|   |   | | |-ImplicitCastExpr 0x22150b3dd50 <col:21> 'unsigned long long' <IntegralCast>
|   |   | | | `-ImplicitCastExpr 0x22150b3dd20 <col:21> 'unsigned int' <LValueToRValue>
|   |   | | |   `-DeclRefExpr 0x22150b3dce0 <col:21> 'unsigned int' lvalue Var 0x22150b2d070 'i' 'unsigned int'
|   |   | | `-ImplicitCastExpr 0x22150b3dd38 <col:25> 'size_t':'unsigned long long' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x22150b3dd00 <col:25> 'size_t':'unsigned long long' lvalue Var 0x22150b2d258 'num_points' 'size_t':'unsigned long long'
|   |   | |-UnaryOperator 0x22150b3dda8 <col:37, col:39> 'unsigned int' prefix '++'
|   |   | | `-DeclRefExpr 0x22150b3dd88 <col:39> 'unsigned int' lvalue Var 0x22150b2d070 'i' 'unsigned int'
|   |   | `-CompoundStmt 0x22150b40c70 <col:42, line:1975:9>
|   |   |   |-IfStmt 0x22150b3dfd8 <line:1921:13, line:1934:13> has_else
|   |   |   | |-BinaryOperator 0x22150b3de48 <line:1921:17, col:22> 'int' '=='
|   |   |   | | |-ImplicitCastExpr 0x22150b3de30 <col:17> 'unsigned long long' <IntegralCast>
|   |   |   | | | `-ImplicitCastExpr 0x22150b3de00 <col:17> 'unsigned int' <LValueToRValue>
|   |   |   | | |   `-DeclRefExpr 0x22150b3ddc0 <col:17> 'unsigned int' lvalue Var 0x22150b2d070 'i' 'unsigned int'
|   |   |   | | `-ImplicitCastExpr 0x22150b3de18 <col:22> 'size_t':'unsigned long long' <LValueToRValue>
|   |   |   | |   `-DeclRefExpr 0x22150b3dde0 <col:22> 'size_t':'unsigned long long' lvalue ParmVar 0x22150b343f0 'num' 'size_t':'unsigned long long'
|   |   |   | |-CompoundStmt 0x22150b3df78 <line:1926:13, line:1929:13>
|   |   |   | `-CompoundStmt 0x22150b3dfc8 <line:1931:13, line:1934:13>
|   |   |   `-IfStmt 0x22150b40c58 <line:1935:13, line:1974:13>
|   |   |     |-OpaqueValueExpr 0x22150b40c40 <<invalid sloc>> '_Bool'
|   |   |     `-CompoundStmt 0x22150b40bf8 <line:1935:52, line:1974:13>
|   |   |       |-IfStmt 0x22150b3e520 <line:1937:17, line:1949:21> has_else
|   |   |       | |-OpaqueValueExpr 0x22150b3e508 <<invalid sloc>> '_Bool'
|   |   |       | |-CompoundStmt 0x22150b3e488 <line:1938:52, line:1948:17>
|   |   |       | | `-IfStmt 0x22150b3e3e0 <line:1943:21, line:1946:21>
|   |   |       | |   |-OpaqueValueExpr 0x22150b3e3c8 <<invalid sloc>> '_Bool'
|   |   |       | |   `-CompoundStmt 0x22150b3e3b0 <line:1943:77, line:1946:21>
|   |   |       | |     `-GotoStmt 0x22150b3e398 <line:1945:25, col:30> 'err' 0x22150b2e0f0
|   |   |       | `-NullStmt 0x22150b3e500 <line:1949:21>
|   |   |       |-CallExpr 0x22150b3e650 <line:1950:17, col:55> 'void'
|   |   |       | |-ImplicitCastExpr 0x22150b3e638 <col:17> 'void (*)(u8 *, const u8 *, unsigned int)' <FunctionToPointerDecay>
|   |   |       | | `-DeclRefExpr 0x22150b3e548 <col:17> 'void (u8 *, const u8 *, unsigned int)' Function 0x221509589d8 'flip_endian' 'void (u8 *, const u8 *, unsigned int)'
|   |   |       | |-ImplicitCastExpr 0x22150b3e688 <col:29, col:38> 'u8 *' <ArrayToPointerDecay>
|   |   |       | | `-ArraySubscriptExpr 0x22150b3e5d8 <col:29, col:38> 'felem_bytearray':'u8 [66]' lvalue
|   |   |       | |   |-ImplicitCastExpr 0x22150b3e5a8 <col:29> 'felem_bytearray *' <LValueToRValue>
|   |   |       | |   | `-DeclRefExpr 0x22150b3e568 <col:29> 'felem_bytearray *' lvalue Var 0x22150b34ae8 'secrets' 'felem_bytearray *'
|   |   |       | |   `-ImplicitCastExpr 0x22150b3e5c0 <col:37> 'unsigned int' <LValueToRValue>
|   |   |       | |     `-DeclRefExpr 0x22150b3e588 <col:37> 'unsigned int' lvalue Var 0x22150b2d070 'i' 'unsigned int'
|   |   |       | |-ImplicitCastExpr 0x22150b3e6b8 <col:41> 'const u8 *' <NoOp>
|   |   |       | | `-ImplicitCastExpr 0x22150b3e6a0 <col:41> 'u8 *' <ArrayToPointerDecay>
|   |   |       | |   `-DeclRefExpr 0x22150b3e5f8 <col:41> 'felem_bytearray':'u8 [66]' lvalue Var 0x22150b2cfd8 'tmp' 'felem_bytearray':'u8 [66]'
|   |   |       | `-ImplicitCastExpr 0x22150b3e6d0 <col:46> 'unsigned int' <LValueToRValue>
|   |   |       |   `-DeclRefExpr 0x22150b3e618 <col:46> 'unsigned int' lvalue Var 0x22150b2d0f0 'num_bytes' 'unsigned int'
|   |   |       |-IfStmt 0x22150b3e7c0 <line:1952:17, line:1955:26>
|   |   |       | |-OpaqueValueExpr 0x22150b3e7a8 <<invalid sloc>> '_Bool'
|   |   |       | `-GotoStmt 0x22150b3e790 <col:21, col:26> 'err' 0x22150b2e0f0
|   |   |       |-CallExpr 0x22150b3e9e0 <line:1956:17, col:63> 'void *'
|   |   |       | |-ImplicitCastExpr 0x22150b3e9c8 <col:17> 'void *(*)(void *, const void *, unsigned long long)' <FunctionToPointerDecay>
|   |   |       | | `-DeclRefExpr 0x22150b3e7d8 <col:17> 'void *(void *, const void *, unsigned long long)' Function 0x221508f72c8 'memcpy' 'void *(void *, const void *, unsigned long long)'
|   |   |       | |-ImplicitCastExpr 0x22150b3ea30 <col:24, col:40> 'void *' <BitCast>
|   |   |       | | `-ImplicitCastExpr 0x22150b3ea18 <col:24, col:40> 'limb *' <ArrayToPointerDecay>
|   |   |       | |   `-ArraySubscriptExpr 0x22150b3e928 <col:24, col:40> 'felem':'limb [9]' lvalue
|   |   |       | |     |-ImplicitCastExpr 0x22150b3e910 <col:24, col:37> 'felem *' <ArrayToPointerDecay>
|   |   |       | |     | `-ArraySubscriptExpr 0x22150b3e8c8 <col:24, col:37> 'felem [3]' lvalue
|   |   |       | |     |   |-ImplicitCastExpr 0x22150b3e8b0 <col:24, col:34> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   |       | |     |   | `-ArraySubscriptExpr 0x22150b3e868 <col:24, col:34> 'felem [17][3]':'felem [17][3]' lvalue
|   |   |       | |     |   |   |-ImplicitCastExpr 0x22150b3e838 <col:24> 'felem (*)[17][3]' <LValueToRValue>
|   |   |       | |     |   |   | `-DeclRefExpr 0x22150b3e7f8 <col:24> 'felem (*)[17][3]' lvalue Var 0x22150b34d98 'pre_comp' 'felem (*)[17][3]'
|   |   |       | |     |   |   `-ImplicitCastExpr 0x22150b3e850 <col:33> 'unsigned int' <LValueToRValue>
|   |   |       | |     |   |     `-DeclRefExpr 0x22150b3e818 <col:33> 'unsigned int' lvalue Var 0x22150b2d070 'i' 'unsigned int'
|   |   |       | |     |   `-IntegerLiteral 0x22150b3e888 <col:36> 'int' 1
|   |   |       | |     `-IntegerLiteral 0x22150b3e8e8 <col:39> 'int' 0
|   |   |       | |-ImplicitCastExpr 0x22150b3ea60 <col:43> 'const void *' <BitCast>
|   |   |       | | `-ImplicitCastExpr 0x22150b3ea48 <col:43> 'limb *' <ArrayToPointerDecay>
|   |   |       | |   `-DeclRefExpr 0x22150b3e948 <col:43> 'felem':'limb [9]' lvalue Var 0x22150b2d4a0 'x_out' 'felem':'limb [9]'
|   |   |       | `-UnaryExprOrTypeTraitExpr 0x22150b3e978 <col:50, col:62> 'unsigned long long' sizeof 'felem':'limb [9]'
|   |   |       |-CallExpr 0x22150b3ec80 <line:1957:17, col:63> 'void *'
|   |   |       | |-ImplicitCastExpr 0x22150b3ec68 <col:17> 'void *(*)(void *, const void *, unsigned long long)' <FunctionToPointerDecay>
|   |   |       | | `-DeclRefExpr 0x22150b3ea78 <col:17> 'void *(void *, const void *, unsigned long long)' Function 0x221508f72c8 'memcpy' 'void *(void *, const void *, unsigned long long)'
|   |   |       | |-ImplicitCastExpr 0x22150b3ecd0 <col:24, col:40> 'void *' <BitCast>
|   |   |       | | `-ImplicitCastExpr 0x22150b3ecb8 <col:24, col:40> 'limb *' <ArrayToPointerDecay>
|   |   |       | |   `-ArraySubscriptExpr 0x22150b3ebc8 <col:24, col:40> 'felem':'limb [9]' lvalue
|   |   |       | |     |-ImplicitCastExpr 0x22150b3ebb0 <col:24, col:37> 'felem *' <ArrayToPointerDecay>
|   |   |       | |     | `-ArraySubscriptExpr 0x22150b3eb68 <col:24, col:37> 'felem [3]' lvalue
|   |   |       | |     |   |-ImplicitCastExpr 0x22150b3eb50 <col:24, col:34> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   |       | |     |   | `-ArraySubscriptExpr 0x22150b3eb08 <col:24, col:34> 'felem [17][3]':'felem [17][3]' lvalue
|   |   |       | |     |   |   |-ImplicitCastExpr 0x22150b3ead8 <col:24> 'felem (*)[17][3]' <LValueToRValue>
|   |   |       | |     |   |   | `-DeclRefExpr 0x22150b3ea98 <col:24> 'felem (*)[17][3]' lvalue Var 0x22150b34d98 'pre_comp' 'felem (*)[17][3]'
|   |   |       | |     |   |   `-ImplicitCastExpr 0x22150b3eaf0 <col:33> 'unsigned int' <LValueToRValue>
|   |   |       | |     |   |     `-DeclRefExpr 0x22150b3eab8 <col:33> 'unsigned int' lvalue Var 0x22150b2d070 'i' 'unsigned int'
|   |   |       | |     |   `-IntegerLiteral 0x22150b3eb28 <col:36> 'int' 1
|   |   |       | |     `-IntegerLiteral 0x22150b3eb88 <col:39> 'int' 1
|   |   |       | |-ImplicitCastExpr 0x22150b3ed00 <col:43> 'const void *' <BitCast>
|   |   |       | | `-ImplicitCastExpr 0x22150b3ece8 <col:43> 'limb *' <ArrayToPointerDecay>
|   |   |       | |   `-DeclRefExpr 0x22150b3ebe8 <col:43> 'felem':'limb [9]' lvalue Var 0x22150b2d518 'y_out' 'felem':'limb [9]'
|   |   |       | `-UnaryExprOrTypeTraitExpr 0x22150b3ec18 <col:50, col:62> 'unsigned long long' sizeof 'felem':'limb [9]'
|   |   |       |-CallExpr 0x22150b3ef48 <line:1958:17, col:63> 'void *'
|   |   |       | |-ImplicitCastExpr 0x22150b3ef30 <col:17> 'void *(*)(void *, const void *, unsigned long long)' <FunctionToPointerDecay>
|   |   |       | | `-DeclRefExpr 0x22150b3ed18 <col:17> 'void *(void *, const void *, unsigned long long)' Function 0x221508f72c8 'memcpy' 'void *(void *, const void *, unsigned long long)'
|   |   |       | |-ImplicitCastExpr 0x22150b3ef98 <col:24, col:40> 'void *' <BitCast>
|   |   |       | | `-ImplicitCastExpr 0x22150b3ef80 <col:24, col:40> 'limb *' <ArrayToPointerDecay>
|   |   |       | |   `-ArraySubscriptExpr 0x22150b3ee68 <col:24, col:40> 'felem':'limb [9]' lvalue
|   |   |       | |     |-ImplicitCastExpr 0x22150b3ee50 <col:24, col:37> 'felem *' <ArrayToPointerDecay>
|   |   |       | |     | `-ArraySubscriptExpr 0x22150b3ee08 <col:24, col:37> 'felem [3]' lvalue
|   |   |       | |     |   |-ImplicitCastExpr 0x22150b3edf0 <col:24, col:34> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   |       | |     |   | `-ArraySubscriptExpr 0x22150b3eda8 <col:24, col:34> 'felem [17][3]':'felem [17][3]' lvalue
|   |   |       | |     |   |   |-ImplicitCastExpr 0x22150b3ed78 <col:24> 'felem (*)[17][3]' <LValueToRValue>
|   |   |       | |     |   |   | `-DeclRefExpr 0x22150b3ed38 <col:24> 'felem (*)[17][3]' lvalue Var 0x22150b34d98 'pre_comp' 'felem (*)[17][3]'
|   |   |       | |     |   |   `-ImplicitCastExpr 0x22150b3ed90 <col:33> 'unsigned int' <LValueToRValue>
|   |   |       | |     |   |     `-DeclRefExpr 0x22150b3ed58 <col:33> 'unsigned int' lvalue Var 0x22150b2d070 'i' 'unsigned int'
|   |   |       | |     |   `-IntegerLiteral 0x22150b3edc8 <col:36> 'int' 1
|   |   |       | |     `-IntegerLiteral 0x22150b3ee28 <col:39> 'int' 2
|   |   |       | |-ImplicitCastExpr 0x22150b3efc8 <col:43> 'const void *' <BitCast>
|   |   |       | | `-ImplicitCastExpr 0x22150b3efb0 <col:43> 'limb *' <ArrayToPointerDecay>
|   |   |       | |   `-DeclRefExpr 0x22150b3eeb0 <col:43> 'felem':'limb [9]' lvalue Var 0x22150b2d590 'z_out' 'felem':'limb [9]'
|   |   |       | `-UnaryExprOrTypeTraitExpr 0x22150b3eee0 <col:50, col:62> 'unsigned long long' sizeof 'felem':'limb [9]'
|   |   |       `-ForStmt 0x22150b40bc0 <line:1959:17, line:1973:17>
|   |   |         |-BinaryOperator 0x22150b3f040 <line:1959:22, col:26> 'int' '='
|   |   |         | |-DeclRefExpr 0x22150b3efe0 <col:22> 'int' lvalue Var 0x22150b34820 'j' 'int'
|   |   |         | `-IntegerLiteral 0x22150b3f018 <col:26> 'int' 2
|   |   |         |-<<<NULL>>>
|   |   |         |-BinaryOperator 0x22150b3f0c0 <col:29, col:34> 'int' '<='
|   |   |         | |-ImplicitCastExpr 0x22150b3f0a8 <col:29> 'int' <LValueToRValue>
|   |   |         | | `-DeclRefExpr 0x22150b3f060 <col:29> 'int' lvalue Var 0x22150b34820 'j' 'int'
|   |   |         | `-IntegerLiteral 0x22150b3f080 <col:34> 'int' 16
|   |   |         |-UnaryOperator 0x22150b3f100 <col:38, col:40> 'int' prefix '++'
|   |   |         | `-DeclRefExpr 0x22150b3f0e0 <col:40> 'int' lvalue Var 0x22150b34820 'j' 'int'
|   |   |         `-CompoundStmt 0x22150b40ba8 <col:43, line:1973:17>
|   |   |           `-IfStmt 0x22150b40b80 <line:1960:21, line:1972:21> has_else
|   |   |             |-BinaryOperator 0x22150b3f178 <line:1960:25, col:29> 'int' '&'
|   |   |             | |-ImplicitCastExpr 0x22150b3f160 <col:25> 'int' <LValueToRValue>
|   |   |             | | `-DeclRefExpr 0x22150b3f118 <col:25> 'int' lvalue Var 0x22150b34820 'j' 'int'
|   |   |             | `-IntegerLiteral 0x22150b3f138 <col:29> 'int' 1
|   |   |             |-CompoundStmt 0x22150b400d8 <col:32, line:1967:21>
|   |   |             | `-CallExpr 0x22150b3ff00 <line:1961:25, line:1966:56> 'void'
|   |   |             |   |-ImplicitCastExpr 0x22150b3fee8 <line:1961:25> 'void (*)(limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   |   |             |   | `-DeclRefExpr 0x22150b3f198 <col:25> 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const limb *, const limb *, const limb *)' Function 0x22150a3d308 'point_add' 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const limb *, const limb *, const limb *)'
|   |   |             |   |-ImplicitCastExpr 0x22150b3ff70 <col:35, col:51> 'limb *' <ArrayToPointerDecay>
|   |   |             |   | `-ArraySubscriptExpr 0x22150b3f2f8 <col:35, col:51> 'felem':'limb [9]' lvalue
|   |   |             |   |   |-ImplicitCastExpr 0x22150b3f2e0 <col:35, col:48> 'felem *' <ArrayToPointerDecay>
|   |   |             |   |   | `-ArraySubscriptExpr 0x22150b3f298 <col:35, col:48> 'felem [3]' lvalue
|   |   |             |   |   |   |-ImplicitCastExpr 0x22150b3f268 <col:35, col:45> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   |             |   |   |   | `-ArraySubscriptExpr 0x22150b3f228 <col:35, col:45> 'felem [17][3]':'felem [17][3]' lvalue
|   |   |             |   |   |   |   |-ImplicitCastExpr 0x22150b3f1f8 <col:35> 'felem (*)[17][3]' <LValueToRValue>
|   |   |             |   |   |   |   | `-DeclRefExpr 0x22150b3f1b8 <col:35> 'felem (*)[17][3]' lvalue Var 0x22150b34d98 'pre_comp' 'felem (*)[17][3]'
|   |   |             |   |   |   |   `-ImplicitCastExpr 0x22150b3f210 <col:44> 'unsigned int' <LValueToRValue>
|   |   |             |   |   |   |     `-DeclRefExpr 0x22150b3f1d8 <col:44> 'unsigned int' lvalue Var 0x22150b2d070 'i' 'unsigned int'
|   |   |             |   |   |   `-ImplicitCastExpr 0x22150b3f280 <col:47> 'int' <LValueToRValue>
|   |   |             |   |   |     `-DeclRefExpr 0x22150b3f248 <col:47> 'int' lvalue Var 0x22150b34820 'j' 'int'
|   |   |             |   |   `-IntegerLiteral 0x22150b3f2b8 <col:50> 'int' 0
|   |   |             |   |-ImplicitCastExpr 0x22150b3ff88 <col:54, col:70> 'limb *' <ArrayToPointerDecay>
|   |   |             |   | `-ArraySubscriptExpr 0x22150b3f458 <col:54, col:70> 'felem':'limb [9]' lvalue
|   |   |             |   |   |-ImplicitCastExpr 0x22150b3f440 <col:54, col:67> 'felem *' <ArrayToPointerDecay>
|   |   |             |   |   | `-ArraySubscriptExpr 0x22150b3f3f8 <col:54, col:67> 'felem [3]' lvalue
|   |   |             |   |   |   |-ImplicitCastExpr 0x22150b3f3c8 <col:54, col:64> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   |             |   |   |   | `-ArraySubscriptExpr 0x22150b3f388 <col:54, col:64> 'felem [17][3]':'felem [17][3]' lvalue
|   |   |             |   |   |   |   |-ImplicitCastExpr 0x22150b3f358 <col:54> 'felem (*)[17][3]' <LValueToRValue>
|   |   |             |   |   |   |   | `-DeclRefExpr 0x22150b3f318 <col:54> 'felem (*)[17][3]' lvalue Var 0x22150b34d98 'pre_comp' 'felem (*)[17][3]'
|   |   |             |   |   |   |   `-ImplicitCastExpr 0x22150b3f370 <col:63> 'unsigned int' <LValueToRValue>
|   |   |             |   |   |   |     `-DeclRefExpr 0x22150b3f338 <col:63> 'unsigned int' lvalue Var 0x22150b2d070 'i' 'unsigned int'
|   |   |             |   |   |   `-ImplicitCastExpr 0x22150b3f3e0 <col:66> 'int' <LValueToRValue>
|   |   |             |   |   |     `-DeclRefExpr 0x22150b3f3a8 <col:66> 'int' lvalue Var 0x22150b34820 'j' 'int'
|   |   |             |   |   `-IntegerLiteral 0x22150b3f418 <col:69> 'int' 1
|   |   |             |   |-ImplicitCastExpr 0x22150b3ffa0 <line:1962:35, col:51> 'limb *' <ArrayToPointerDecay>
|   |   |             |   | `-ArraySubscriptExpr 0x22150b3f5b8 <col:35, col:51> 'felem':'limb [9]' lvalue
|   |   |             |   |   |-ImplicitCastExpr 0x22150b3f5a0 <col:35, col:48> 'felem *' <ArrayToPointerDecay>
|   |   |             |   |   | `-ArraySubscriptExpr 0x22150b3f558 <col:35, col:48> 'felem [3]' lvalue
|   |   |             |   |   |   |-ImplicitCastExpr 0x22150b3f528 <col:35, col:45> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   |             |   |   |   | `-ArraySubscriptExpr 0x22150b3f4e8 <col:35, col:45> 'felem [17][3]':'felem [17][3]' lvalue
|   |   |             |   |   |   |   |-ImplicitCastExpr 0x22150b3f4b8 <col:35> 'felem (*)[17][3]' <LValueToRValue>
|   |   |             |   |   |   |   | `-DeclRefExpr 0x22150b3f478 <col:35> 'felem (*)[17][3]' lvalue Var 0x22150b34d98 'pre_comp' 'felem (*)[17][3]'
|   |   |             |   |   |   |   `-ImplicitCastExpr 0x22150b3f4d0 <col:44> 'unsigned int' <LValueToRValue>
|   |   |             |   |   |   |     `-DeclRefExpr 0x22150b3f498 <col:44> 'unsigned int' lvalue Var 0x22150b2d070 'i' 'unsigned int'
|   |   |             |   |   |   `-ImplicitCastExpr 0x22150b3f540 <col:47> 'int' <LValueToRValue>
|   |   |             |   |   |     `-DeclRefExpr 0x22150b3f508 <col:47> 'int' lvalue Var 0x22150b34820 'j' 'int'
|   |   |             |   |   `-IntegerLiteral 0x22150b3f578 <col:50> 'int' 2
|   |   |             |   |-ImplicitCastExpr 0x22150b3ffd0 <col:54, col:70> 'const limb *':'const limb *' <NoOp>
|   |   |             |   | `-ImplicitCastExpr 0x22150b3ffb8 <col:54, col:70> 'limb *' <ArrayToPointerDecay>
|   |   |             |   |   `-ArraySubscriptExpr 0x22150b3f708 <col:54, col:70> 'felem':'limb [9]' lvalue
|   |   |             |   |     |-ImplicitCastExpr 0x22150b3f6f0 <col:54, col:67> 'felem *' <ArrayToPointerDecay>
|   |   |             |   |     | `-ArraySubscriptExpr 0x22150b3f6a8 <col:54, col:67> 'felem [3]' lvalue
|   |   |             |   |     |   |-ImplicitCastExpr 0x22150b3f690 <col:54, col:64> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   |             |   |     |   | `-ArraySubscriptExpr 0x22150b3f648 <col:54, col:64> 'felem [17][3]':'felem [17][3]' lvalue
|   |   |             |   |     |   |   |-ImplicitCastExpr 0x22150b3f618 <col:54> 'felem (*)[17][3]' <LValueToRValue>
|   |   |             |   |     |   |   | `-DeclRefExpr 0x22150b3f5d8 <col:54> 'felem (*)[17][3]' lvalue Var 0x22150b34d98 'pre_comp' 'felem (*)[17][3]'
|   |   |             |   |     |   |   `-ImplicitCastExpr 0x22150b3f630 <col:63> 'unsigned int' <LValueToRValue>
|   |   |             |   |     |   |     `-DeclRefExpr 0x22150b3f5f8 <col:63> 'unsigned int' lvalue Var 0x22150b2d070 'i' 'unsigned int'
|   |   |             |   |     |   `-IntegerLiteral 0x22150b3f668 <col:66> 'int' 1
|   |   |             |   |     `-IntegerLiteral 0x22150b3f6c8 <col:69> 'int' 0
|   |   |             |   |-ImplicitCastExpr 0x22150b40000 <line:1963:35, col:51> 'const limb *':'const limb *' <NoOp>
|   |   |             |   | `-ImplicitCastExpr 0x22150b3ffe8 <col:35, col:51> 'limb *' <ArrayToPointerDecay>
|   |   |             |   |   `-ArraySubscriptExpr 0x22150b3f858 <col:35, col:51> 'felem':'limb [9]' lvalue
|   |   |             |   |     |-ImplicitCastExpr 0x22150b3f840 <col:35, col:48> 'felem *' <ArrayToPointerDecay>
|   |   |             |   |     | `-ArraySubscriptExpr 0x22150b3f7f8 <col:35, col:48> 'felem [3]' lvalue
|   |   |             |   |     |   |-ImplicitCastExpr 0x22150b3f7e0 <col:35, col:45> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   |             |   |     |   | `-ArraySubscriptExpr 0x22150b3f798 <col:35, col:45> 'felem [17][3]':'felem [17][3]' lvalue
|   |   |             |   |     |   |   |-ImplicitCastExpr 0x22150b3f768 <col:35> 'felem (*)[17][3]' <LValueToRValue>
|   |   |             |   |     |   |   | `-DeclRefExpr 0x22150b3f728 <col:35> 'felem (*)[17][3]' lvalue Var 0x22150b34d98 'pre_comp' 'felem (*)[17][3]'
|   |   |             |   |     |   |   `-ImplicitCastExpr 0x22150b3f780 <col:44> 'unsigned int' <LValueToRValue>
|   |   |             |   |     |   |     `-DeclRefExpr 0x22150b3f748 <col:44> 'unsigned int' lvalue Var 0x22150b2d070 'i' 'unsigned int'
|   |   |             |   |     |   `-IntegerLiteral 0x22150b3f7b8 <col:47> 'int' 1
|   |   |             |   |     `-IntegerLiteral 0x22150b3f818 <col:50> 'int' 1
|   |   |             |   |-ImplicitCastExpr 0x22150b40030 <col:54, col:70> 'const limb *':'const limb *' <NoOp>
|   |   |             |   | `-ImplicitCastExpr 0x22150b40018 <col:54, col:70> 'limb *' <ArrayToPointerDecay>
|   |   |             |   |   `-ArraySubscriptExpr 0x22150b3f9a8 <col:54, col:70> 'felem':'limb [9]' lvalue
|   |   |             |   |     |-ImplicitCastExpr 0x22150b3f990 <col:54, col:67> 'felem *' <ArrayToPointerDecay>
|   |   |             |   |     | `-ArraySubscriptExpr 0x22150b3f948 <col:54, col:67> 'felem [3]' lvalue
|   |   |             |   |     |   |-ImplicitCastExpr 0x22150b3f930 <col:54, col:64> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   |             |   |     |   | `-ArraySubscriptExpr 0x22150b3f8e8 <col:54, col:64> 'felem [17][3]':'felem [17][3]' lvalue
|   |   |             |   |     |   |   |-ImplicitCastExpr 0x22150b3f8b8 <col:54> 'felem (*)[17][3]' <LValueToRValue>
|   |   |             |   |     |   |   | `-DeclRefExpr 0x22150b3f878 <col:54> 'felem (*)[17][3]' lvalue Var 0x22150b34d98 'pre_comp' 'felem (*)[17][3]'
|   |   |             |   |     |   |   `-ImplicitCastExpr 0x22150b3f8d0 <col:63> 'unsigned int' <LValueToRValue>
|   |   |             |   |     |   |     `-DeclRefExpr 0x22150b3f898 <col:63> 'unsigned int' lvalue Var 0x22150b2d070 'i' 'unsigned int'
|   |   |             |   |     |   `-IntegerLiteral 0x22150b3f908 <col:66> 'int' 1
|   |   |             |   |     `-IntegerLiteral 0x22150b3f968 <col:69> 'int' 2
|   |   |             |   |-IntegerLiteral 0x22150b3f9c8 <col:73> 'int' 0
|   |   |             |   |-ImplicitCastExpr 0x22150b40060 <line:1964:35, col:55> 'const limb *':'const limb *' <NoOp>
|   |   |             |   | `-ImplicitCastExpr 0x22150b40048 <col:35, col:55> 'limb *' <ArrayToPointerDecay>
|   |   |             |   |   `-ArraySubscriptExpr 0x22150b3fb78 <col:35, col:55> 'felem':'limb [9]' lvalue
|   |   |             |   |     |-ImplicitCastExpr 0x22150b3fb60 <col:35, col:52> 'felem *' <ArrayToPointerDecay>
|   |   |             |   |     | `-ArraySubscriptExpr 0x22150b3fb18 <col:35, col:52> 'felem [3]' lvalue
|   |   |             |   |     |   |-ImplicitCastExpr 0x22150b3fb00 <col:35, col:45> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   |             |   |     |   | `-ArraySubscriptExpr 0x22150b3fa60 <col:35, col:45> 'felem [17][3]':'felem [17][3]' lvalue
|   |   |             |   |     |   |   |-ImplicitCastExpr 0x22150b3fa30 <col:35> 'felem (*)[17][3]' <LValueToRValue>
|   |   |             |   |     |   |   | `-DeclRefExpr 0x22150b3f9f0 <col:35> 'felem (*)[17][3]' lvalue Var 0x22150b34d98 'pre_comp' 'felem (*)[17][3]'
|   |   |             |   |     |   |   `-ImplicitCastExpr 0x22150b3fa48 <col:44> 'unsigned int' <LValueToRValue>
|   |   |             |   |     |   |     `-DeclRefExpr 0x22150b3fa10 <col:44> 'unsigned int' lvalue Var 0x22150b2d070 'i' 'unsigned int'
|   |   |             |   |     |   `-BinaryOperator 0x22150b3fae0 <col:47, col:51> 'int' '-'
|   |   |             |   |     |     |-ImplicitCastExpr 0x22150b3fac8 <col:47> 'int' <LValueToRValue>
|   |   |             |   |     |     | `-DeclRefExpr 0x22150b3fa80 <col:47> 'int' lvalue Var 0x22150b34820 'j' 'int'
|   |   |             |   |     |     `-IntegerLiteral 0x22150b3faa0 <col:51> 'int' 1
|   |   |             |   |     `-IntegerLiteral 0x22150b3fb38 <col:54> 'int' 0
|   |   |             |   |-ImplicitCastExpr 0x22150b40090 <line:1965:35, col:55> 'const limb *':'const limb *' <NoOp>
|   |   |             |   | `-ImplicitCastExpr 0x22150b40078 <col:35, col:55> 'limb *' <ArrayToPointerDecay>
|   |   |             |   |   `-ArraySubscriptExpr 0x22150b3fd20 <col:35, col:55> 'felem':'limb [9]' lvalue
|   |   |             |   |     |-ImplicitCastExpr 0x22150b3fd08 <col:35, col:52> 'felem *' <ArrayToPointerDecay>
|   |   |             |   |     | `-ArraySubscriptExpr 0x22150b3fcc0 <col:35, col:52> 'felem [3]' lvalue
|   |   |             |   |     |   |-ImplicitCastExpr 0x22150b3fca8 <col:35, col:45> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   |             |   |     |   | `-ArraySubscriptExpr 0x22150b3fc08 <col:35, col:45> 'felem [17][3]':'felem [17][3]' lvalue
|   |   |             |   |     |   |   |-ImplicitCastExpr 0x22150b3fbd8 <col:35> 'felem (*)[17][3]' <LValueToRValue>
|   |   |             |   |     |   |   | `-DeclRefExpr 0x22150b3fb98 <col:35> 'felem (*)[17][3]' lvalue Var 0x22150b34d98 'pre_comp' 'felem (*)[17][3]'
|   |   |             |   |     |   |   `-ImplicitCastExpr 0x22150b3fbf0 <col:44> 'unsigned int' <LValueToRValue>
|   |   |             |   |     |   |     `-DeclRefExpr 0x22150b3fbb8 <col:44> 'unsigned int' lvalue Var 0x22150b2d070 'i' 'unsigned int'
|   |   |             |   |     |   `-BinaryOperator 0x22150b3fc88 <col:47, col:51> 'int' '-'
|   |   |             |   |     |     |-ImplicitCastExpr 0x22150b3fc70 <col:47> 'int' <LValueToRValue>
|   |   |             |   |     |     | `-DeclRefExpr 0x22150b3fc28 <col:47> 'int' lvalue Var 0x22150b34820 'j' 'int'
|   |   |             |   |     |     `-IntegerLiteral 0x22150b3fc48 <col:51> 'int' 1
|   |   |             |   |     `-IntegerLiteral 0x22150b3fce0 <col:54> 'int' 1
|   |   |             |   `-ImplicitCastExpr 0x22150b400c0 <line:1966:35, col:55> 'const limb *':'const limb *' <NoOp>
|   |   |             |     `-ImplicitCastExpr 0x22150b400a8 <col:35, col:55> 'limb *' <ArrayToPointerDecay>
|   |   |             |       `-ArraySubscriptExpr 0x22150b3fec8 <col:35, col:55> 'felem':'limb [9]' lvalue
|   |   |             |         |-ImplicitCastExpr 0x22150b3feb0 <col:35, col:52> 'felem *' <ArrayToPointerDecay>
|   |   |             |         | `-ArraySubscriptExpr 0x22150b3fe68 <col:35, col:52> 'felem [3]' lvalue
|   |   |             |         |   |-ImplicitCastExpr 0x22150b3fe50 <col:35, col:45> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   |             |         |   | `-ArraySubscriptExpr 0x22150b3fdb0 <col:35, col:45> 'felem [17][3]':'felem [17][3]' lvalue
|   |   |             |         |   |   |-ImplicitCastExpr 0x22150b3fd80 <col:35> 'felem (*)[17][3]' <LValueToRValue>
|   |   |             |         |   |   | `-DeclRefExpr 0x22150b3fd40 <col:35> 'felem (*)[17][3]' lvalue Var 0x22150b34d98 'pre_comp' 'felem (*)[17][3]'
|   |   |             |         |   |   `-ImplicitCastExpr 0x22150b3fd98 <col:44> 'unsigned int' <LValueToRValue>
|   |   |             |         |   |     `-DeclRefExpr 0x22150b3fd60 <col:44> 'unsigned int' lvalue Var 0x22150b2d070 'i' 'unsigned int'
|   |   |             |         |   `-BinaryOperator 0x22150b3fe30 <col:47, col:51> 'int' '-'
|   |   |             |         |     |-ImplicitCastExpr 0x22150b3fe18 <col:47> 'int' <LValueToRValue>
|   |   |             |         |     | `-DeclRefExpr 0x22150b3fdd0 <col:47> 'int' lvalue Var 0x22150b34820 'j' 'int'
|   |   |             |         |     `-IntegerLiteral 0x22150b3fdf0 <col:51> 'int' 1
|   |   |             |         `-IntegerLiteral 0x22150b3fe88 <col:54> 'int' 2
|   |   |             `-CompoundStmt 0x22150b40b68 <line:1967:28, line:1972:21>
|   |   |               `-CallExpr 0x22150b40a40 <line:1968:25, line:1971:59> 'void'
|   |   |                 |-ImplicitCastExpr 0x22150b40a28 <line:1968:25> 'void (*)(limb *, limb *, limb *, const limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   |   |                 | `-DeclRefExpr 0x22150b400f0 <col:25> 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *)' Function 0x22150a2bd78 'point_double' 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *)'
|   |   |                 |-ImplicitCastExpr 0x22150b40a90 <col:38, col:54> 'limb *' <ArrayToPointerDecay>
|   |   |                 | `-ArraySubscriptExpr 0x22150b40250 <col:38, col:54> 'felem':'limb [9]' lvalue
|   |   |                 |   |-ImplicitCastExpr 0x22150b40238 <col:38, col:51> 'felem *' <ArrayToPointerDecay>
|   |   |                 |   | `-ArraySubscriptExpr 0x22150b401f0 <col:38, col:51> 'felem [3]' lvalue
|   |   |                 |   |   |-ImplicitCastExpr 0x22150b401c0 <col:38, col:48> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   |                 |   |   | `-ArraySubscriptExpr 0x22150b40180 <col:38, col:48> 'felem [17][3]':'felem [17][3]' lvalue
|   |   |                 |   |   |   |-ImplicitCastExpr 0x22150b40150 <col:38> 'felem (*)[17][3]' <LValueToRValue>
|   |   |                 |   |   |   | `-DeclRefExpr 0x22150b40110 <col:38> 'felem (*)[17][3]' lvalue Var 0x22150b34d98 'pre_comp' 'felem (*)[17][3]'
|   |   |                 |   |   |   `-ImplicitCastExpr 0x22150b40168 <col:47> 'unsigned int' <LValueToRValue>
|   |   |                 |   |   |     `-DeclRefExpr 0x22150b40130 <col:47> 'unsigned int' lvalue Var 0x22150b2d070 'i' 'unsigned int'
|   |   |                 |   |   `-ImplicitCastExpr 0x22150b401d8 <col:50> 'int' <LValueToRValue>
|   |   |                 |   |     `-DeclRefExpr 0x22150b401a0 <col:50> 'int' lvalue Var 0x22150b34820 'j' 'int'
|   |   |                 |   `-IntegerLiteral 0x22150b40210 <col:53> 'int' 0
|   |   |                 |-ImplicitCastExpr 0x22150b40aa8 <col:57, col:73> 'limb *' <ArrayToPointerDecay>
|   |   |                 | `-ArraySubscriptExpr 0x22150b403b0 <col:57, col:73> 'felem':'limb [9]' lvalue
|   |   |                 |   |-ImplicitCastExpr 0x22150b40398 <col:57, col:70> 'felem *' <ArrayToPointerDecay>
|   |   |                 |   | `-ArraySubscriptExpr 0x22150b40350 <col:57, col:70> 'felem [3]' lvalue
|   |   |                 |   |   |-ImplicitCastExpr 0x22150b40320 <col:57, col:67> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   |                 |   |   | `-ArraySubscriptExpr 0x22150b402e0 <col:57, col:67> 'felem [17][3]':'felem [17][3]' lvalue
|   |   |                 |   |   |   |-ImplicitCastExpr 0x22150b402b0 <col:57> 'felem (*)[17][3]' <LValueToRValue>
|   |   |                 |   |   |   | `-DeclRefExpr 0x22150b40270 <col:57> 'felem (*)[17][3]' lvalue Var 0x22150b34d98 'pre_comp' 'felem (*)[17][3]'
|   |   |                 |   |   |   `-ImplicitCastExpr 0x22150b402c8 <col:66> 'unsigned int' <LValueToRValue>
|   |   |                 |   |   |     `-DeclRefExpr 0x22150b40290 <col:66> 'unsigned int' lvalue Var 0x22150b2d070 'i' 'unsigned int'
|   |   |                 |   |   `-ImplicitCastExpr 0x22150b40338 <col:69> 'int' <LValueToRValue>
|   |   |                 |   |     `-DeclRefExpr 0x22150b40300 <col:69> 'int' lvalue Var 0x22150b34820 'j' 'int'
|   |   |                 |   `-IntegerLiteral 0x22150b40370 <col:72> 'int' 1
|   |   |                 |-ImplicitCastExpr 0x22150b40ac0 <line:1969:38, col:54> 'limb *' <ArrayToPointerDecay>
|   |   |                 | `-ArraySubscriptExpr 0x22150b40510 <col:38, col:54> 'felem':'limb [9]' lvalue
|   |   |                 |   |-ImplicitCastExpr 0x22150b404f8 <col:38, col:51> 'felem *' <ArrayToPointerDecay>
|   |   |                 |   | `-ArraySubscriptExpr 0x22150b404b0 <col:38, col:51> 'felem [3]' lvalue
|   |   |                 |   |   |-ImplicitCastExpr 0x22150b40480 <col:38, col:48> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   |                 |   |   | `-ArraySubscriptExpr 0x22150b40440 <col:38, col:48> 'felem [17][3]':'felem [17][3]' lvalue
|   |   |                 |   |   |   |-ImplicitCastExpr 0x22150b40410 <col:38> 'felem (*)[17][3]' <LValueToRValue>
|   |   |                 |   |   |   | `-DeclRefExpr 0x22150b403d0 <col:38> 'felem (*)[17][3]' lvalue Var 0x22150b34d98 'pre_comp' 'felem (*)[17][3]'
|   |   |                 |   |   |   `-ImplicitCastExpr 0x22150b40428 <col:47> 'unsigned int' <LValueToRValue>
|   |   |                 |   |   |     `-DeclRefExpr 0x22150b403f0 <col:47> 'unsigned int' lvalue Var 0x22150b2d070 'i' 'unsigned int'
|   |   |                 |   |   `-ImplicitCastExpr 0x22150b40498 <col:50> 'int' <LValueToRValue>
|   |   |                 |   |     `-DeclRefExpr 0x22150b40460 <col:50> 'int' lvalue Var 0x22150b34820 'j' 'int'
|   |   |                 |   `-IntegerLiteral 0x22150b404d0 <col:53> 'int' 2
|   |   |                 |-ImplicitCastExpr 0x22150b40af0 <col:57, col:77> 'const limb *':'const limb *' <NoOp>
|   |   |                 | `-ImplicitCastExpr 0x22150b40ad8 <col:57, col:77> 'limb *' <ArrayToPointerDecay>
|   |   |                 |   `-ArraySubscriptExpr 0x22150b406b8 <col:57, col:77> 'felem':'limb [9]' lvalue
|   |   |                 |     |-ImplicitCastExpr 0x22150b406a0 <col:57, col:74> 'felem *' <ArrayToPointerDecay>
|   |   |                 |     | `-ArraySubscriptExpr 0x22150b40658 <col:57, col:74> 'felem [3]' lvalue
|   |   |                 |     |   |-ImplicitCastExpr 0x22150b40640 <col:57, col:67> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   |                 |     |   | `-ArraySubscriptExpr 0x22150b405a0 <col:57, col:67> 'felem [17][3]':'felem [17][3]' lvalue
|   |   |                 |     |   |   |-ImplicitCastExpr 0x22150b40570 <col:57> 'felem (*)[17][3]' <LValueToRValue>
|   |   |                 |     |   |   | `-DeclRefExpr 0x22150b40530 <col:57> 'felem (*)[17][3]' lvalue Var 0x22150b34d98 'pre_comp' 'felem (*)[17][3]'
|   |   |                 |     |   |   `-ImplicitCastExpr 0x22150b40588 <col:66> 'unsigned int' <LValueToRValue>
|   |   |                 |     |   |     `-DeclRefExpr 0x22150b40550 <col:66> 'unsigned int' lvalue Var 0x22150b2d070 'i' 'unsigned int'
|   |   |                 |     |   `-BinaryOperator 0x22150b40620 <col:69, col:73> 'int' '/'
|   |   |                 |     |     |-ImplicitCastExpr 0x22150b40608 <col:69> 'int' <LValueToRValue>
|   |   |                 |     |     | `-DeclRefExpr 0x22150b405c0 <col:69> 'int' lvalue Var 0x22150b34820 'j' 'int'
|   |   |                 |     |     `-IntegerLiteral 0x22150b405e0 <col:73> 'int' 2
|   |   |                 |     `-IntegerLiteral 0x22150b40678 <col:76> 'int' 0
|   |   |                 |-ImplicitCastExpr 0x22150b40b20 <line:1970:38, col:58> 'const limb *':'const limb *' <NoOp>
|   |   |                 | `-ImplicitCastExpr 0x22150b40b08 <col:38, col:58> 'limb *' <ArrayToPointerDecay>
|   |   |                 |   `-ArraySubscriptExpr 0x22150b40860 <col:38, col:58> 'felem':'limb [9]' lvalue
|   |   |                 |     |-ImplicitCastExpr 0x22150b40848 <col:38, col:55> 'felem *' <ArrayToPointerDecay>
|   |   |                 |     | `-ArraySubscriptExpr 0x22150b40800 <col:38, col:55> 'felem [3]' lvalue
|   |   |                 |     |   |-ImplicitCastExpr 0x22150b407e8 <col:38, col:48> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   |                 |     |   | `-ArraySubscriptExpr 0x22150b40748 <col:38, col:48> 'felem [17][3]':'felem [17][3]' lvalue
|   |   |                 |     |   |   |-ImplicitCastExpr 0x22150b40718 <col:38> 'felem (*)[17][3]' <LValueToRValue>
|   |   |                 |     |   |   | `-DeclRefExpr 0x22150b406d8 <col:38> 'felem (*)[17][3]' lvalue Var 0x22150b34d98 'pre_comp' 'felem (*)[17][3]'
|   |   |                 |     |   |   `-ImplicitCastExpr 0x22150b40730 <col:47> 'unsigned int' <LValueToRValue>
|   |   |                 |     |   |     `-DeclRefExpr 0x22150b406f8 <col:47> 'unsigned int' lvalue Var 0x22150b2d070 'i' 'unsigned int'
|   |   |                 |     |   `-BinaryOperator 0x22150b407c8 <col:50, col:54> 'int' '/'
|   |   |                 |     |     |-ImplicitCastExpr 0x22150b407b0 <col:50> 'int' <LValueToRValue>
|   |   |                 |     |     | `-DeclRefExpr 0x22150b40768 <col:50> 'int' lvalue Var 0x22150b34820 'j' 'int'
|   |   |                 |     |     `-IntegerLiteral 0x22150b40788 <col:54> 'int' 2
|   |   |                 |     `-IntegerLiteral 0x22150b40820 <col:57> 'int' 1
|   |   |                 `-ImplicitCastExpr 0x22150b40b50 <line:1971:38, col:58> 'const limb *':'const limb *' <NoOp>
|   |   |                   `-ImplicitCastExpr 0x22150b40b38 <col:38, col:58> 'limb *' <ArrayToPointerDecay>
|   |   |                     `-ArraySubscriptExpr 0x22150b40a08 <col:38, col:58> 'felem':'limb [9]' lvalue
|   |   |                       |-ImplicitCastExpr 0x22150b409f0 <col:38, col:55> 'felem *' <ArrayToPointerDecay>
|   |   |                       | `-ArraySubscriptExpr 0x22150b409a8 <col:38, col:55> 'felem [3]' lvalue
|   |   |                       |   |-ImplicitCastExpr 0x22150b40990 <col:38, col:48> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   |                       |   | `-ArraySubscriptExpr 0x22150b408f0 <col:38, col:48> 'felem [17][3]':'felem [17][3]' lvalue
|   |   |                       |   |   |-ImplicitCastExpr 0x22150b408c0 <col:38> 'felem (*)[17][3]' <LValueToRValue>
|   |   |                       |   |   | `-DeclRefExpr 0x22150b40880 <col:38> 'felem (*)[17][3]' lvalue Var 0x22150b34d98 'pre_comp' 'felem (*)[17][3]'
|   |   |                       |   |   `-ImplicitCastExpr 0x22150b408d8 <col:47> 'unsigned int' <LValueToRValue>
|   |   |                       |   |     `-DeclRefExpr 0x22150b408a0 <col:47> 'unsigned int' lvalue Var 0x22150b2d070 'i' 'unsigned int'
|   |   |                       |   `-BinaryOperator 0x22150b40970 <col:50, col:54> 'int' '/'
|   |   |                       |     |-ImplicitCastExpr 0x22150b40958 <col:50> 'int' <LValueToRValue>
|   |   |                       |     | `-DeclRefExpr 0x22150b40910 <col:50> 'int' lvalue Var 0x22150b34820 'j' 'int'
|   |   |                       |     `-IntegerLiteral 0x22150b40930 <col:54> 'int' 2
|   |   |                       `-IntegerLiteral 0x22150b409c8 <col:57> 'int' 2
|   |   `-IfStmt 0x22150b40f68 <line:1976:9, line:1977:72>
|   |     |-ImplicitCastExpr 0x22150b40ce8 <line:1976:13> 'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x22150b40cc8 <col:13> 'int' lvalue Var 0x22150b348b8 'mixed' 'int'
|   |     `-CallExpr 0x22150b40f00 <line:1977:13, col:72> 'void'
|   |       |-ImplicitCastExpr 0x22150b40ee8 <col:13> 'void (*)(size_t, felem (*)[3], felem *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x22150b40d00 <col:13> 'void (size_t, felem (*)[3], felem *)' Function 0x22150b33518 'make_points_affine' 'void (size_t, felem (*)[3], felem *)'
|   |       |-BinaryOperator 0x22150b40d98 <col:32, col:45> 'unsigned long long' '*'
|   |       | |-ImplicitCastExpr 0x22150b40d68 <col:32> 'size_t':'unsigned long long' <LValueToRValue>
|   |       | | `-DeclRefExpr 0x22150b40d20 <col:32> 'size_t':'unsigned long long' lvalue Var 0x22150b2d258 'num_points' 'size_t':'unsigned long long'
|   |       | `-ImplicitCastExpr 0x22150b40d80 <col:45> 'unsigned long long' <IntegralCast>
|   |       |   `-IntegerLiteral 0x22150b40d40 <col:45> 'int' 17
|   |       |-ImplicitCastExpr 0x22150b40f38 <col:49, col:59> 'felem (*)[3]' <ArrayToPointerDecay>
|   |       | `-ArraySubscriptExpr 0x22150b40e18 <col:49, col:59> 'felem [17][3]':'felem [17][3]' lvalue
|   |       |   |-ImplicitCastExpr 0x22150b40e00 <col:49> 'felem (*)[17][3]' <LValueToRValue>
|   |       |   | `-DeclRefExpr 0x22150b40db8 <col:49> 'felem (*)[17][3]' lvalue Var 0x22150b34d98 'pre_comp' 'felem (*)[17][3]'
|   |       |   `-IntegerLiteral 0x22150b40dd8 <col:58> 'int' 0
|   |       `-ImplicitCastExpr 0x22150b40f50 <col:62> 'felem *' <LValueToRValue>
|   |         `-DeclRefExpr 0x22150b40e38 <col:62> 'felem *' lvalue Var 0x22150b2cea8 'tmp_felems' 'felem *'
|   |-IfStmt 0x22150b420d8 <line:1981:5, line:2007:69> has_else
|   | |-OpaqueValueExpr 0x22150b420c0 <<invalid sloc>> '_Bool'
|   | |-CompoundStmt 0x22150b41be8 <line:1981:46, line:2003:5>
|   | | |-CallExpr 0x22150b411b8 <line:1982:9, col:45> 'void *'
|   | | | |-ImplicitCastExpr 0x22150b411a0 <col:9> 'void *(*)(void *, int, unsigned long long)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x22150b410a8 <col:9> 'void *(void *, int, unsigned long long)' Function 0x221508f8da8 'memset' 'void *(void *, int, unsigned long long)'
|   | | | |-ImplicitCastExpr 0x22150b41208 <col:16> 'void *' <BitCast>
|   | | | | `-ImplicitCastExpr 0x22150b411f0 <col:16> 'u8 *' <ArrayToPointerDecay>
|   | | | |   `-DeclRefExpr 0x22150b410c8 <col:16> 'felem_bytearray':'u8 [66]' lvalue Var 0x22150b349f8 'g_secret' 'felem_bytearray':'u8 [66]'
|   | | | |-IntegerLiteral 0x22150b41100 <col:26> 'int' 0
|   | | | `-UnaryExprOrTypeTraitExpr 0x22150b41168 <col:29, col:44> 'unsigned long long' sizeof
|   | | |   `-ParenExpr 0x22150b41148 <col:35, col:44> 'felem_bytearray':'u8 [66]' lvalue
|   | | |     `-DeclRefExpr 0x22150b41128 <col:36> 'felem_bytearray':'u8 [66]' lvalue Var 0x22150b349f8 'g_secret' 'felem_bytearray':'u8 [66]' non_odr_use_unevaluated
|   | | |-IfStmt 0x22150b41420 <line:1984:9, line:1995:13> has_else
|   | | | |-OpaqueValueExpr 0x22150b41408 <<invalid sloc>> '_Bool'
|   | | | |-CompoundStmt 0x22150b41388 <line:1984:70, line:1994:9>
|   | | | | `-IfStmt 0x22150b41310 <line:1989:13, line:1992:13>
|   | | | |   |-OpaqueValueExpr 0x22150b412f8 <<invalid sloc>> '_Bool'
|   | | | |   `-CompoundStmt 0x22150b412e0 <line:1989:67, line:1992:13>
|   | | | |     `-GotoStmt 0x22150b412c8 <line:1991:17, col:22> 'err' 0x22150b2e0f0
|   | | | `-NullStmt 0x22150b41400 <line:1995:13>
|   | | |-CallExpr 0x22150b414e0 <line:1996:9, col:45> 'void'
|   | | | |-ImplicitCastExpr 0x22150b414c8 <col:9> 'void (*)(u8 *, const u8 *, unsigned int)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x22150b41448 <col:9> 'void (u8 *, const u8 *, unsigned int)' Function 0x221509589d8 'flip_endian' 'void (u8 *, const u8 *, unsigned int)'
|   | | | |-ImplicitCastExpr 0x22150b41518 <col:21> 'u8 *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x22150b41468 <col:21> 'felem_bytearray':'u8 [66]' lvalue Var 0x22150b349f8 'g_secret' 'felem_bytearray':'u8 [66]'
|   | | | |-ImplicitCastExpr 0x22150b41548 <col:31> 'const u8 *' <NoOp>
|   | | | | `-ImplicitCastExpr 0x22150b41530 <col:31> 'u8 *' <ArrayToPointerDecay>
|   | | | |   `-DeclRefExpr 0x22150b41488 <col:31> 'felem_bytearray':'u8 [66]' lvalue Var 0x22150b2cfd8 'tmp' 'felem_bytearray':'u8 [66]'
|   | | | `-ImplicitCastExpr 0x22150b41560 <col:36> 'unsigned int' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x22150b414a8 <col:36> 'unsigned int' lvalue Var 0x22150b2d0f0 'num_bytes' 'unsigned int'
|   | | `-CallExpr 0x22150b41ac0 <line:1998:9, line:2002:48> 'void'
|   | |   |-ImplicitCastExpr 0x22150b41aa8 <line:1998:9> 'void (*)(limb *, limb *, limb *, const felem_bytearray *, const unsigned int, const u8 *, const int, const felem (*)[17][3], const felem (*)[3])' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x22150b41578 <col:9> 'void (limb *, limb *, limb *, const felem_bytearray *, const unsigned int, const u8 *, const int, const felem (*)[17][3], const felem (*)[3])' Function 0x22150b21048 'batch_mul' 'void (limb *, limb *, limb *, const felem_bytearray *, const unsigned int, const u8 *, const int, const felem (*)[17][3], const felem (*)[3])'
|   | |   |-ImplicitCastExpr 0x22150b41b28 <col:19> 'limb *' <ArrayToPointerDecay>
|   | |   | `-DeclRefExpr 0x22150b41598 <col:19> 'felem':'limb [9]' lvalue Var 0x22150b2d4a0 'x_out' 'felem':'limb [9]'
|   | |   |-ImplicitCastExpr 0x22150b41b40 <col:26> 'limb *' <ArrayToPointerDecay>
|   | |   | `-DeclRefExpr 0x22150b415b8 <col:26> 'felem':'limb [9]' lvalue Var 0x22150b2d518 'y_out' 'felem':'limb [9]'
|   | |   |-ImplicitCastExpr 0x22150b41b58 <col:33> 'limb *' <ArrayToPointerDecay>
|   | |   | `-DeclRefExpr 0x22150b415d8 <col:33> 'felem':'limb [9]' lvalue Var 0x22150b2d590 'z_out' 'felem':'limb [9]'
|   | |   |-CStyleCastExpr 0x22150b416e8 <line:1999:19, col:45> 'const felem_bytearray (*)' <NoOp>
|   | |   | `-ImplicitCastExpr 0x22150b41690 <col:45> 'felem_bytearray *' <LValueToRValue> part_of_explicit_cast
|   | |   |   `-DeclRefExpr 0x22150b415f8 <col:45> 'felem_bytearray *' lvalue Var 0x22150b34ae8 'secrets' 'felem_bytearray *'
|   | |   |-ImplicitCastExpr 0x22150b41b88 <col:54> 'unsigned int' <IntegralCast>
|   | |   | `-ImplicitCastExpr 0x22150b41b70 <col:54> 'size_t':'unsigned long long' <LValueToRValue>
|   | |   |   `-DeclRefExpr 0x22150b41710 <col:54> 'size_t':'unsigned long long' lvalue Var 0x22150b2d258 'num_points' 'size_t':'unsigned long long'
|   | |   |-ImplicitCastExpr 0x22150b41bb8 <line:2000:19> 'const u8 *' <NoOp>
|   | |   | `-ImplicitCastExpr 0x22150b41ba0 <col:19> 'u8 *' <ArrayToPointerDecay>
|   | |   |   `-DeclRefExpr 0x22150b41730 <col:19> 'felem_bytearray':'u8 [66]' lvalue Var 0x22150b349f8 'g_secret' 'felem_bytearray':'u8 [66]'
|   | |   |-ImplicitCastExpr 0x22150b41bd0 <line:2001:19> 'int' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x22150b41750 <col:19> 'int' lvalue Var 0x22150b348b8 'mixed' 'int'
|   | |   |-CStyleCastExpr 0x22150b418f8 <col:26, col:49> 'const felem (*)[17][3]' <NoOp>
|   | |   | `-ImplicitCastExpr 0x22150b418a8 <col:49> 'felem (*)[17][3]' <LValueToRValue> part_of_explicit_cast
|   | |   |   `-DeclRefExpr 0x22150b417c0 <col:49> 'felem (*)[17][3]' lvalue Var 0x22150b34d98 'pre_comp' 'felem (*)[17][3]'
|   | |   `-CStyleCastExpr 0x22150b41a20 <line:2002:19, col:38> 'const felem (*)[3]' <NoOp>
|   | |     `-ImplicitCastExpr 0x22150b41a08 <col:38> 'felem (*)[3]' <LValueToRValue> part_of_explicit_cast
|   | |       `-DeclRefExpr 0x22150b41948 <col:38> 'felem (*)[3]' lvalue Var 0x22150b2d848 'g_pre_comp' 'felem (*)[3]'
|   | `-CallExpr 0x22150b41f98 <line:2005:9, line:2007:69> 'void'
|   |   |-ImplicitCastExpr 0x22150b41f80 <line:2005:9> 'void (*)(limb *, limb *, limb *, const felem_bytearray *, const unsigned int, const u8 *, const int, const felem (*)[17][3], const felem (*)[3])' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x22150b41c18 <col:9> 'void (limb *, limb *, limb *, const felem_bytearray *, const unsigned int, const u8 *, const int, const felem (*)[17][3], const felem (*)[3])' Function 0x22150b21048 'batch_mul' 'void (limb *, limb *, limb *, const felem_bytearray *, const unsigned int, const u8 *, const int, const felem (*)[17][3], const felem (*)[3])'
|   |   |-ImplicitCastExpr 0x22150b42000 <col:19> 'limb *' <ArrayToPointerDecay>
|   |   | `-DeclRefExpr 0x22150b41c38 <col:19> 'felem':'limb [9]' lvalue Var 0x22150b2d4a0 'x_out' 'felem':'limb [9]'
|   |   |-ImplicitCastExpr 0x22150b42018 <col:26> 'limb *' <ArrayToPointerDecay>
|   |   | `-DeclRefExpr 0x22150b41c58 <col:26> 'felem':'limb [9]' lvalue Var 0x22150b2d518 'y_out' 'felem':'limb [9]'
|   |   |-ImplicitCastExpr 0x22150b42030 <col:33> 'limb *' <ArrayToPointerDecay>
|   |   | `-DeclRefExpr 0x22150b41c78 <col:33> 'felem':'limb [9]' lvalue Var 0x22150b2d590 'z_out' 'felem':'limb [9]'
|   |   |-CStyleCastExpr 0x22150b41ce8 <line:2006:19, col:45> 'const felem_bytearray (*)' <NoOp>
|   |   | `-ImplicitCastExpr 0x22150b41cd0 <col:45> 'felem_bytearray *' <LValueToRValue> part_of_explicit_cast
|   |   |   `-DeclRefExpr 0x22150b41c98 <col:45> 'felem_bytearray *' lvalue Var 0x22150b34ae8 'secrets' 'felem_bytearray *'
|   |   |-ImplicitCastExpr 0x22150b42060 <col:54> 'unsigned int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x22150b42048 <col:54> 'size_t':'unsigned long long' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x22150b41d10 <col:54> 'size_t':'unsigned long long' lvalue Var 0x22150b2d258 'num_points' 'size_t':'unsigned long long'
|   |   |-ImplicitCastExpr 0x22150b42078 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'const u8 *' <NullToPointer>
|   |   | `-ParenExpr 0x22150b41d98 <col:17, col:27> 'void *'
|   |   |   `-CStyleCastExpr 0x22150b41d70 <col:18, col:26> 'void *' <NullToPointer>
|   |   |     `-IntegerLiteral 0x22150b41d30 <col:26> 'int' 0
|   |   |-ImplicitCastExpr 0x22150b42090 <.//openssl//file_jk/before\crypto\ec\ecp_nistp521.c:2007:25> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x22150b41db8 <col:25> 'int' lvalue Var 0x22150b348b8 'mixed' 'int'
|   |   |-CStyleCastExpr 0x22150b41ed0 <col:32, col:55> 'const felem (*)[17][3]' <NoOp>
|   |   | `-ImplicitCastExpr 0x22150b41eb8 <col:55> 'felem (*)[17][3]' <LValueToRValue> part_of_explicit_cast
|   |   |   `-DeclRefExpr 0x22150b41e28 <col:55> 'felem (*)[17][3]' lvalue Var 0x22150b34d98 'pre_comp' 'felem (*)[17][3]'
|   |   `-ImplicitCastExpr 0x22150b420a8 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'const felem (*)[3]':'const felem (*)[3]' <NullToPointer>
|   |     `-ParenExpr 0x22150b41f60 <col:17, col:27> 'void *'
|   |       `-CStyleCastExpr 0x22150b41f38 <col:18, col:26> 'void *' <NullToPointer>
|   |         `-IntegerLiteral 0x22150b41ef8 <col:26> 'int' 0
|   |-CallExpr 0x22150b42190 <.//openssl//file_jk/before\crypto\ec\ecp_nistp521.c:2009:5, col:31> 'void'
|   | |-ImplicitCastExpr 0x22150b42178 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150b42100 <col:5> 'void (limb *, const limb *)' Function 0x22150a33ae0 'felem_contract' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x22150b421c0 <col:20> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150b42120 <col:20> 'felem':'limb [9]' lvalue Var 0x22150b2d338 'x_in' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x22150b421f0 <col:26> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150b421d8 <col:26> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x22150b42158 <col:26> 'felem':'limb [9]' lvalue Var 0x22150b2d4a0 'x_out' 'felem':'limb [9]'
|   |-CallExpr 0x22150b42298 <line:2010:5, col:31> 'void'
|   | |-ImplicitCastExpr 0x22150b42280 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150b42208 <col:5> 'void (limb *, const limb *)' Function 0x22150a33ae0 'felem_contract' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x22150b422c8 <col:20> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150b42228 <col:20> 'felem':'limb [9]' lvalue Var 0x22150b2d3b0 'y_in' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x22150b422f8 <col:26> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150b422e0 <col:26> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x22150b42260 <col:26> 'felem':'limb [9]' lvalue Var 0x22150b2d518 'y_out' 'felem':'limb [9]'
|   |-CallExpr 0x22150b423a0 <line:2011:5, col:31> 'void'
|   | |-ImplicitCastExpr 0x22150b42388 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150b42310 <col:5> 'void (limb *, const limb *)' Function 0x22150a33ae0 'felem_contract' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x22150b423d0 <col:20> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x22150b42330 <col:20> 'felem':'limb [9]' lvalue Var 0x22150b2d428 'z_in' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x22150b42400 <col:26> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150b423e8 <col:26> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x22150b42368 <col:26> 'felem':'limb [9]' lvalue Var 0x22150b2d590 'z_out' 'felem':'limb [9]'
|   |-IfStmt 0x22150b424e0 <line:2012:5, line:2016:5>
|   | |-OpaqueValueExpr 0x22150b424c8 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x22150b424b0 <line:2013:34, line:2016:5>
|   |   `-GotoStmt 0x22150b42498 <line:2015:9, col:14> 'err' 0x22150b2e0f0
|   |-LabelStmt 0x22150b42578 <line:2019:2, col:5> 'err'
|   | `-NullStmt 0x22150b42570 <col:5>
|   |-CallExpr 0x22150b42718 <line:2023:5, col:25> 'int'
|   | |-ImplicitCastExpr 0x22150b42700 <col:5> 'int (*)()' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150b426c0 <col:5> 'int ()' Function 0x22150b3cd88 'OPENSSL_free' 'int ()'
|   | `-ImplicitCastExpr 0x22150b42740 <col:18> 'felem_bytearray *' <LValueToRValue>
|   |   `-DeclRefExpr 0x22150b426e0 <col:18> 'felem_bytearray *' lvalue Var 0x22150b34ae8 'secrets' 'felem_bytearray *'
|   |-CallExpr 0x22150b427b0 <line:2024:5, col:26> 'int'
|   | |-ImplicitCastExpr 0x22150b42798 <col:5> 'int (*)()' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150b42758 <col:5> 'int ()' Function 0x22150b3cd88 'OPENSSL_free' 'int ()'
|   | `-ImplicitCastExpr 0x22150b427d8 <col:18> 'felem (*)[17][3]' <LValueToRValue>
|   |   `-DeclRefExpr 0x22150b42778 <col:18> 'felem (*)[17][3]' lvalue Var 0x22150b34d98 'pre_comp' 'felem (*)[17][3]'
|   |-CallExpr 0x22150b42848 <line:2025:5, col:28> 'int'
|   | |-ImplicitCastExpr 0x22150b42830 <col:5> 'int (*)()' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150b427f0 <col:5> 'int ()' Function 0x22150b3cd88 'OPENSSL_free' 'int ()'
|   | `-ImplicitCastExpr 0x22150b42870 <col:18> 'felem *' <LValueToRValue>
|   |   `-DeclRefExpr 0x22150b42810 <col:18> 'felem *' lvalue Var 0x22150b2cea8 'tmp_felems' 'felem *'
|   `-ReturnStmt 0x22150b428c0 <line:2026:5, col:12>
|     `-ImplicitCastExpr 0x22150b428a8 <col:12> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x22150b42888 <col:12> 'int' lvalue Var 0x22150b34760 'ret' 'int'
|-FunctionDecl 0x22150b42b08 <line:2029:1, line:2132:1> line:2029:5 invalid ec_GFp_nistp521_precompute_mult 'int (int *, int *)'
| |-ParmVarDecl 0x22150b429e8 <col:37, col:47> col:47 invalid group 'int *'
| |-ParmVarDecl 0x22150b42a68 <col:54, col:62> col:62 invalid ctx 'int *'
| `-CompoundStmt 0x22150b385e8 <line:2030:1, line:2132:1>
|   |-DeclStmt 0x22150b42c78 <line:2031:5, col:16>
|   | `-VarDecl 0x22150b42be8 <col:5, col:15> col:9 used ret 'int' cinit
|   |   `-IntegerLiteral 0x22150b42c50 <col:15> 'int' 0
|   |-DeclStmt 0x22150b42da8 <line:2032:5, col:34>
|   | `-VarDecl 0x22150b42ca0 <col:5, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27> .//openssl//file_jk/before\crypto\ec\ecp_nistp521.c:2032:24 used pre 'NISTP521_PRE_COMP *' cinit
|   |   `-ImplicitCastExpr 0x22150b42d90 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'NISTP521_PRE_COMP *' <NullToPointer>
|   |     `-ParenExpr 0x22150b42d70 <col:17, col:27> 'void *'
|   |       `-CStyleCastExpr 0x22150b42d48 <col:18, col:26> 'void *' <NullToPointer>
|   |         `-IntegerLiteral 0x22150b42d08 <col:26> 'int' 0
|   |-DeclStmt 0x22150b34e78 <.//openssl//file_jk/before\crypto\ec\ecp_nistp521.c:2033:5, col:13>
|   | |-VarDecl 0x22150b42dd8 <col:5, col:9> col:9 used i 'int'
|   | `-VarDecl 0x22150b42e58 <col:5, col:12> col:12 used j 'int'
|   |-DeclStmt 0x22150b350e0 <line:2037:5, col:25>
|   | `-VarDecl 0x22150b35078 <col:5, col:24> col:11 used tmp_felems 'felem [16]'
|   |-IfStmt 0x22150b352e0 <line:2041:5, line:2043:20>
|   | |-OpaqueValueExpr 0x22150b352c8 <<invalid sloc>> '_Bool'
|   | `-IfStmt 0x22150b352b0 <line:2042:9, line:2043:20>
|   |   |-OpaqueValueExpr 0x22150b35298 <<invalid sloc>> '_Bool'
|   |   `-ReturnStmt 0x22150b35288 <col:13, col:20>
|   |     `-IntegerLiteral 0x22150b35260 <col:20> 'int' 0
|   |-IfStmt 0x22150b354e8 <line:2045:5, line:2046:14>
|   | |-OpaqueValueExpr 0x22150b354d0 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x22150b354b8 <col:9, col:14> 'err' 0x22150b35468
|   |-IfStmt 0x22150b355b8 <line:2048:5, line:2049:14>
|   | |-OpaqueValueExpr 0x22150b355a0 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x22150b35588 <col:9, col:14> 'err' 0x22150b35468
|   |-IfStmt 0x22150b356a8 <line:2051:5, line:2052:14>
|   | |-OpaqueValueExpr 0x22150b35690 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x22150b35678 <col:9, col:14> 'err' 0x22150b35468
|   |-IfStmt 0x22150b359a0 <line:2055:5, line:2056:14>
|   | |-OpaqueValueExpr 0x22150b35988 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x22150b35970 <col:9, col:14> 'err' 0x22150b35468
|   |-IfStmt 0x22150b35bb8 <line:2057:5, line:2058:14>
|   | |-BinaryOperator 0x22150b35b80 <line:2057:9, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27> 'int' '=='
|   | | |-ParenExpr 0x22150b35ac0 <.//openssl//file_jk/before\crypto\ec\ecp_nistp521.c:2057:9, col:39> 'NISTP521_PRE_COMP *'
|   | | | `-BinaryOperator 0x22150b35aa0 <col:10, col:38> 'NISTP521_PRE_COMP *' '='
|   | | |   |-DeclRefExpr 0x22150b359b8 <col:10> 'NISTP521_PRE_COMP *' lvalue Var 0x22150b42ca0 'pre' 'NISTP521_PRE_COMP *'
|   | | |   `-CallExpr 0x22150b35a80 <col:16, col:38> 'NISTP521_PRE_COMP *'
|   | | |     `-ImplicitCastExpr 0x22150b35a68 <col:16> 'NISTP521_PRE_COMP *(*)()' <FunctionToPointerDecay>
|   | | |       `-DeclRefExpr 0x22150b359f0 <col:16> 'NISTP521_PRE_COMP *()' Function 0x22150b3c538 'nistp521_pre_comp_new' 'NISTP521_PRE_COMP *()'
|   | | `-ImplicitCastExpr 0x22150b35b68 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'NISTP521_PRE_COMP *' <BitCast>
|   | |   `-ParenExpr 0x22150b35b48 <col:17, col:27> 'void *'
|   | |     `-CStyleCastExpr 0x22150b35b20 <col:18, col:26> 'void *' <NullToPointer>
|   | |       `-IntegerLiteral 0x22150b35ae0 <col:26> 'int' 0
|   | `-GotoStmt 0x22150b35ba0 <.//openssl//file_jk/before\crypto\ec\ecp_nistp521.c:2058:9, col:14> 'err' 0x22150b35468
|   |-IfStmt 0x22150b35ee8 <line:2062:5, line:2065:5>
|   | |-OpaqueValueExpr 0x22150b35ed0 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x22150b35eb0 <line:2062:69, line:2065:5>
|   |   |-CallExpr 0x22150b35db0 <line:2063:9, col:62> 'void *'
|   |   | |-ImplicitCastExpr 0x22150b35d98 <col:9> 'void *(*)(void *, const void *, unsigned long long)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x22150b35c18 <col:9> 'void *(void *, const void *, unsigned long long)' Function 0x221508f72c8 'memcpy' 'void *(void *, const void *, unsigned long long)'
|   |   | |-ImplicitCastExpr 0x22150b35e00 <col:16, col:21> 'void *' <BitCast>
|   |   | | `-ImplicitCastExpr 0x22150b35de8 <col:16, col:21> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   | |   `-MemberExpr 0x22150b35c70 <col:16, col:21> 'felem [16][3]' lvalue ->g_pre_comp 0x22150b3bf38
|   |   | |     `-ImplicitCastExpr 0x22150b35c58 <col:16> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   |   | |       `-DeclRefExpr 0x22150b35c38 <col:16> 'NISTP521_PRE_COMP *' lvalue Var 0x22150b42ca0 'pre' 'NISTP521_PRE_COMP *'
|   |   | |-ImplicitCastExpr 0x22150b35e30 <col:33> 'const void *' <BitCast>
|   |   | | `-ImplicitCastExpr 0x22150b35e18 <col:33> 'const felem (*)[3]' <ArrayToPointerDecay>
|   |   | |   `-DeclRefExpr 0x22150b35ca0 <col:33> 'const felem [16][3]' lvalue Var 0x22150a3c3a8 'gmul' 'const felem [16][3]'
|   |   | `-UnaryExprOrTypeTraitExpr 0x22150b35d48 <col:39, col:61> 'unsigned long long' sizeof
|   |   |   `-ParenExpr 0x22150b35d28 <col:45, col:61> 'felem [16][3]' lvalue
|   |   |     `-MemberExpr 0x22150b35cf8 <col:46, col:51> 'felem [16][3]' lvalue ->g_pre_comp 0x22150b3bf38 non_odr_use_unevaluated
|   |   |       `-ImplicitCastExpr 0x22150b35ce0 <col:46> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   |   |         `-DeclRefExpr 0x22150b35cc0 <col:46> 'NISTP521_PRE_COMP *' lvalue Var 0x22150b42ca0 'pre' 'NISTP521_PRE_COMP *' non_odr_use_unevaluated
|   |   `-GotoStmt 0x22150b35e98 <line:2064:9, col:14> 'done' 0x22150b35e48
|   |-IfStmt 0x22150b362a8 <line:2066:5, line:2069:14>
|   | |-OpaqueValueExpr 0x22150b36290 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x22150b36278 <col:9, col:14> 'err' 0x22150b35468
|   |-ForStmt 0x22150b43a58 <line:2071:5, line:2083:5>
|   | |-BinaryOperator 0x22150b36320 <line:2071:10, col:14> 'int' '='
|   | | |-DeclRefExpr 0x22150b362c0 <col:10> 'int' lvalue Var 0x22150b42dd8 'i' 'int'
|   | | `-IntegerLiteral 0x22150b362f8 <col:14> 'int' 1
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x22150b363a0 <col:17, col:22> 'int' '<='
|   | | |-ImplicitCastExpr 0x22150b36388 <col:17> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x22150b36340 <col:17> 'int' lvalue Var 0x22150b42dd8 'i' 'int'
|   | | `-IntegerLiteral 0x22150b36360 <col:22> 'int' 4
|   | |-CompoundAssignOperator 0x22150b36420 <col:25, col:31> 'int' '<<=' ComputeLHSTy='int' ComputeResultTy='int'
|   | | |-DeclRefExpr 0x22150b363c0 <col:25> 'int' lvalue Var 0x22150b42dd8 'i' 'int'
|   | | `-IntegerLiteral 0x22150b363e0 <col:31> 'int' 1
|   | `-CompoundStmt 0x22150b43a38 <col:34, line:2083:5>
|   |   |-CallExpr 0x22150b36cb0 <line:2072:9, line:2074:66> 'void'
|   |   | |-ImplicitCastExpr 0x22150b36c98 <line:2072:9> 'void (*)(limb *, limb *, limb *, const limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x22150b36450 <col:9> 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *)' Function 0x22150a2bd78 'point_double' 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *)'
|   |   | |-ImplicitCastExpr 0x22150b36d00 <col:22, col:46> 'limb *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x22150b365d0 <col:22, col:46> 'felem':'limb [9]' lvalue
|   |   | |   |-ImplicitCastExpr 0x22150b365b8 <col:22, col:43> 'felem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x22150b36570 <col:22, col:43> 'felem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x22150b36558 <col:22, col:27> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-MemberExpr 0x22150b364a8 <col:22, col:27> 'felem [16][3]' lvalue ->g_pre_comp 0x22150b3bf38
|   |   | |   |   |   `-ImplicitCastExpr 0x22150b36490 <col:22> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x22150b36470 <col:22> 'NISTP521_PRE_COMP *' lvalue Var 0x22150b42ca0 'pre' 'NISTP521_PRE_COMP *'
|   |   | |   |   `-BinaryOperator 0x22150b36538 <col:38, col:42> 'int' '*'
|   |   | |   |     |-IntegerLiteral 0x22150b364d8 <col:38> 'int' 2
|   |   | |   |     `-ImplicitCastExpr 0x22150b36520 <col:42> 'int' <LValueToRValue>
|   |   | |   |       `-DeclRefExpr 0x22150b36500 <col:42> 'int' lvalue Var 0x22150b42dd8 'i' 'int'
|   |   | |   `-IntegerLiteral 0x22150b36590 <col:45> 'int' 0
|   |   | |-ImplicitCastExpr 0x22150b36d18 <col:49, col:73> 'limb *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x22150b36750 <col:49, col:73> 'felem':'limb [9]' lvalue
|   |   | |   |-ImplicitCastExpr 0x22150b36738 <col:49, col:70> 'felem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x22150b366f0 <col:49, col:70> 'felem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x22150b366d8 <col:49, col:54> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-MemberExpr 0x22150b36628 <col:49, col:54> 'felem [16][3]' lvalue ->g_pre_comp 0x22150b3bf38
|   |   | |   |   |   `-ImplicitCastExpr 0x22150b36610 <col:49> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x22150b365f0 <col:49> 'NISTP521_PRE_COMP *' lvalue Var 0x22150b42ca0 'pre' 'NISTP521_PRE_COMP *'
|   |   | |   |   `-BinaryOperator 0x22150b366b8 <col:65, col:69> 'int' '*'
|   |   | |   |     |-IntegerLiteral 0x22150b36658 <col:65> 'int' 2
|   |   | |   |     `-ImplicitCastExpr 0x22150b366a0 <col:69> 'int' <LValueToRValue>
|   |   | |   |       `-DeclRefExpr 0x22150b36680 <col:69> 'int' lvalue Var 0x22150b42dd8 'i' 'int'
|   |   | |   `-IntegerLiteral 0x22150b36710 <col:72> 'int' 1
|   |   | |-ImplicitCastExpr 0x22150b36d30 <line:2073:22, col:46> 'limb *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x22150b368d0 <col:22, col:46> 'felem':'limb [9]' lvalue
|   |   | |   |-ImplicitCastExpr 0x22150b368b8 <col:22, col:43> 'felem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x22150b36870 <col:22, col:43> 'felem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x22150b36858 <col:22, col:27> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-MemberExpr 0x22150b367a8 <col:22, col:27> 'felem [16][3]' lvalue ->g_pre_comp 0x22150b3bf38
|   |   | |   |   |   `-ImplicitCastExpr 0x22150b36790 <col:22> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x22150b36770 <col:22> 'NISTP521_PRE_COMP *' lvalue Var 0x22150b42ca0 'pre' 'NISTP521_PRE_COMP *'
|   |   | |   |   `-BinaryOperator 0x22150b36838 <col:38, col:42> 'int' '*'
|   |   | |   |     |-IntegerLiteral 0x22150b367d8 <col:38> 'int' 2
|   |   | |   |     `-ImplicitCastExpr 0x22150b36820 <col:42> 'int' <LValueToRValue>
|   |   | |   |       `-DeclRefExpr 0x22150b36800 <col:42> 'int' lvalue Var 0x22150b42dd8 'i' 'int'
|   |   | |   `-IntegerLiteral 0x22150b36890 <col:45> 'int' 2
|   |   | |-ImplicitCastExpr 0x22150b36d60 <col:49, col:69> 'const limb *':'const limb *' <NoOp>
|   |   | | `-ImplicitCastExpr 0x22150b36d48 <col:49, col:69> 'limb *' <ArrayToPointerDecay>
|   |   | |   `-ArraySubscriptExpr 0x22150b36a08 <col:49, col:69> 'felem':'limb [9]' lvalue
|   |   | |     |-ImplicitCastExpr 0x22150b369f0 <col:49, col:66> 'felem *' <ArrayToPointerDecay>
|   |   | |     | `-ArraySubscriptExpr 0x22150b369a8 <col:49, col:66> 'felem [3]' lvalue
|   |   | |     |   |-ImplicitCastExpr 0x22150b36978 <col:49, col:54> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   | |     |   | `-MemberExpr 0x22150b36928 <col:49, col:54> 'felem [16][3]' lvalue ->g_pre_comp 0x22150b3bf38
|   |   | |     |   |   `-ImplicitCastExpr 0x22150b36910 <col:49> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   |   | |     |   |     `-DeclRefExpr 0x22150b368f0 <col:49> 'NISTP521_PRE_COMP *' lvalue Var 0x22150b42ca0 'pre' 'NISTP521_PRE_COMP *'
|   |   | |     |   `-ImplicitCastExpr 0x22150b36990 <col:65> 'int' <LValueToRValue>
|   |   | |     |     `-DeclRefExpr 0x22150b36958 <col:65> 'int' lvalue Var 0x22150b42dd8 'i' 'int'
|   |   | |     `-IntegerLiteral 0x22150b369c8 <col:68> 'int' 0
|   |   | |-ImplicitCastExpr 0x22150b36d90 <line:2074:22, col:42> 'const limb *':'const limb *' <NoOp>
|   |   | | `-ImplicitCastExpr 0x22150b36d78 <col:22, col:42> 'limb *' <ArrayToPointerDecay>
|   |   | |   `-ArraySubscriptExpr 0x22150b36b40 <col:22, col:42> 'felem':'limb [9]' lvalue
|   |   | |     |-ImplicitCastExpr 0x22150b36b28 <col:22, col:39> 'felem *' <ArrayToPointerDecay>
|   |   | |     | `-ArraySubscriptExpr 0x22150b36ae0 <col:22, col:39> 'felem [3]' lvalue
|   |   | |     |   |-ImplicitCastExpr 0x22150b36ab0 <col:22, col:27> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   | |     |   | `-MemberExpr 0x22150b36a60 <col:22, col:27> 'felem [16][3]' lvalue ->g_pre_comp 0x22150b3bf38
|   |   | |     |   |   `-ImplicitCastExpr 0x22150b36a48 <col:22> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   |   | |     |   |     `-DeclRefExpr 0x22150b36a28 <col:22> 'NISTP521_PRE_COMP *' lvalue Var 0x22150b42ca0 'pre' 'NISTP521_PRE_COMP *'
|   |   | |     |   `-ImplicitCastExpr 0x22150b36ac8 <col:38> 'int' <LValueToRValue>
|   |   | |     |     `-DeclRefExpr 0x22150b36a90 <col:38> 'int' lvalue Var 0x22150b42dd8 'i' 'int'
|   |   | |     `-IntegerLiteral 0x22150b36b00 <col:41> 'int' 1
|   |   | `-ImplicitCastExpr 0x22150b36dc0 <col:45, col:65> 'const limb *':'const limb *' <NoOp>
|   |   |   `-ImplicitCastExpr 0x22150b36da8 <col:45, col:65> 'limb *' <ArrayToPointerDecay>
|   |   |     `-ArraySubscriptExpr 0x22150b36c78 <col:45, col:65> 'felem':'limb [9]' lvalue
|   |   |       |-ImplicitCastExpr 0x22150b36c60 <col:45, col:62> 'felem *' <ArrayToPointerDecay>
|   |   |       | `-ArraySubscriptExpr 0x22150b36c18 <col:45, col:62> 'felem [3]' lvalue
|   |   |       |   |-ImplicitCastExpr 0x22150b36be8 <col:45, col:50> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   |       |   | `-MemberExpr 0x22150b36b98 <col:45, col:50> 'felem [16][3]' lvalue ->g_pre_comp 0x22150b3bf38
|   |   |       |   |   `-ImplicitCastExpr 0x22150b36b80 <col:45> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   |   |       |   |     `-DeclRefExpr 0x22150b36b60 <col:45> 'NISTP521_PRE_COMP *' lvalue Var 0x22150b42ca0 'pre' 'NISTP521_PRE_COMP *'
|   |   |       |   `-ImplicitCastExpr 0x22150b36c00 <col:61> 'int' <LValueToRValue>
|   |   |       |     `-DeclRefExpr 0x22150b36bc8 <col:61> 'int' lvalue Var 0x22150b42dd8 'i' 'int'
|   |   |       `-IntegerLiteral 0x22150b36c38 <col:64> 'int' 2
|   |   `-ForStmt 0x22150b43a00 <line:2075:9, line:2082:9>
|   |     |-BinaryOperator 0x22150b36e38 <line:2075:14, col:18> 'int' '='
|   |     | |-DeclRefExpr 0x22150b36dd8 <col:14> 'int' lvalue Var 0x22150b42e58 'j' 'int'
|   |     | `-IntegerLiteral 0x22150b36e10 <col:18> 'int' 0
|   |     |-<<<NULL>>>
|   |     |-BinaryOperator 0x22150b42f30 <col:21, col:25> 'int' '<'
|   |     | |-ImplicitCastExpr 0x22150b42f18 <col:21> 'int' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x22150b42ed0 <col:21> 'int' lvalue Var 0x22150b42e58 'j' 'int'
|   |     | `-IntegerLiteral 0x22150b42ef0 <col:25> 'int' 129
|   |     |-UnaryOperator 0x22150b42f70 <col:30, col:32> 'int' prefix '++'
|   |     | `-DeclRefExpr 0x22150b42f50 <col:32> 'int' lvalue Var 0x22150b42e58 'j' 'int'
|   |     `-CompoundStmt 0x22150b439e8 <col:35, line:2082:9>
|   |       `-CallExpr 0x22150b438c0 <line:2076:13, line:2081:51> 'void'
|   |         |-ImplicitCastExpr 0x22150b438a8 <line:2076:13> 'void (*)(limb *, limb *, limb *, const limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x22150b42f88 <col:13> 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *)' Function 0x22150a2bd78 'point_double' 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *)'
|   |         |-ImplicitCastExpr 0x22150b43910 <col:26, col:50> 'limb *' <ArrayToPointerDecay>
|   |         | `-ArraySubscriptExpr 0x22150b43108 <col:26, col:50> 'felem':'limb [9]' lvalue
|   |         |   |-ImplicitCastExpr 0x22150b430f0 <col:26, col:47> 'felem *' <ArrayToPointerDecay>
|   |         |   | `-ArraySubscriptExpr 0x22150b430a8 <col:26, col:47> 'felem [3]' lvalue
|   |         |   |   |-ImplicitCastExpr 0x22150b43090 <col:26, col:31> 'felem (*)[3]' <ArrayToPointerDecay>
|   |         |   |   | `-MemberExpr 0x22150b42fe0 <col:26, col:31> 'felem [16][3]' lvalue ->g_pre_comp 0x22150b3bf38
|   |         |   |   |   `-ImplicitCastExpr 0x22150b42fc8 <col:26> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   |         |   |   |     `-DeclRefExpr 0x22150b42fa8 <col:26> 'NISTP521_PRE_COMP *' lvalue Var 0x22150b42ca0 'pre' 'NISTP521_PRE_COMP *'
|   |         |   |   `-BinaryOperator 0x22150b43070 <col:42, col:46> 'int' '*'
|   |         |   |     |-IntegerLiteral 0x22150b43010 <col:42> 'int' 2
|   |         |   |     `-ImplicitCastExpr 0x22150b43058 <col:46> 'int' <LValueToRValue>
|   |         |   |       `-DeclRefExpr 0x22150b43038 <col:46> 'int' lvalue Var 0x22150b42dd8 'i' 'int'
|   |         |   `-IntegerLiteral 0x22150b430c8 <col:49> 'int' 0
|   |         |-ImplicitCastExpr 0x22150b43928 <line:2077:26, col:50> 'limb *' <ArrayToPointerDecay>
|   |         | `-ArraySubscriptExpr 0x22150b43288 <col:26, col:50> 'felem':'limb [9]' lvalue
|   |         |   |-ImplicitCastExpr 0x22150b43270 <col:26, col:47> 'felem *' <ArrayToPointerDecay>
|   |         |   | `-ArraySubscriptExpr 0x22150b43228 <col:26, col:47> 'felem [3]' lvalue
|   |         |   |   |-ImplicitCastExpr 0x22150b43210 <col:26, col:31> 'felem (*)[3]' <ArrayToPointerDecay>
|   |         |   |   | `-MemberExpr 0x22150b43160 <col:26, col:31> 'felem [16][3]' lvalue ->g_pre_comp 0x22150b3bf38
|   |         |   |   |   `-ImplicitCastExpr 0x22150b43148 <col:26> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   |         |   |   |     `-DeclRefExpr 0x22150b43128 <col:26> 'NISTP521_PRE_COMP *' lvalue Var 0x22150b42ca0 'pre' 'NISTP521_PRE_COMP *'
|   |         |   |   `-BinaryOperator 0x22150b431f0 <col:42, col:46> 'int' '*'
|   |         |   |     |-IntegerLiteral 0x22150b43190 <col:42> 'int' 2
|   |         |   |     `-ImplicitCastExpr 0x22150b431d8 <col:46> 'int' <LValueToRValue>
|   |         |   |       `-DeclRefExpr 0x22150b431b8 <col:46> 'int' lvalue Var 0x22150b42dd8 'i' 'int'
|   |         |   `-IntegerLiteral 0x22150b43248 <col:49> 'int' 1
|   |         |-ImplicitCastExpr 0x22150b43940 <line:2078:26, col:50> 'limb *' <ArrayToPointerDecay>
|   |         | `-ArraySubscriptExpr 0x22150b43408 <col:26, col:50> 'felem':'limb [9]' lvalue
|   |         |   |-ImplicitCastExpr 0x22150b433f0 <col:26, col:47> 'felem *' <ArrayToPointerDecay>
|   |         |   | `-ArraySubscriptExpr 0x22150b433a8 <col:26, col:47> 'felem [3]' lvalue
|   |         |   |   |-ImplicitCastExpr 0x22150b43390 <col:26, col:31> 'felem (*)[3]' <ArrayToPointerDecay>
|   |         |   |   | `-MemberExpr 0x22150b432e0 <col:26, col:31> 'felem [16][3]' lvalue ->g_pre_comp 0x22150b3bf38
|   |         |   |   |   `-ImplicitCastExpr 0x22150b432c8 <col:26> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   |         |   |   |     `-DeclRefExpr 0x22150b432a8 <col:26> 'NISTP521_PRE_COMP *' lvalue Var 0x22150b42ca0 'pre' 'NISTP521_PRE_COMP *'
|   |         |   |   `-BinaryOperator 0x22150b43370 <col:42, col:46> 'int' '*'
|   |         |   |     |-IntegerLiteral 0x22150b43310 <col:42> 'int' 2
|   |         |   |     `-ImplicitCastExpr 0x22150b43358 <col:46> 'int' <LValueToRValue>
|   |         |   |       `-DeclRefExpr 0x22150b43338 <col:46> 'int' lvalue Var 0x22150b42dd8 'i' 'int'
|   |         |   `-IntegerLiteral 0x22150b433c8 <col:49> 'int' 2
|   |         |-ImplicitCastExpr 0x22150b43970 <line:2079:26, col:50> 'const limb *':'const limb *' <NoOp>
|   |         | `-ImplicitCastExpr 0x22150b43958 <col:26, col:50> 'limb *' <ArrayToPointerDecay>
|   |         |   `-ArraySubscriptExpr 0x22150b43588 <col:26, col:50> 'felem':'limb [9]' lvalue
|   |         |     |-ImplicitCastExpr 0x22150b43570 <col:26, col:47> 'felem *' <ArrayToPointerDecay>
|   |         |     | `-ArraySubscriptExpr 0x22150b43528 <col:26, col:47> 'felem [3]' lvalue
|   |         |     |   |-ImplicitCastExpr 0x22150b43510 <col:26, col:31> 'felem (*)[3]' <ArrayToPointerDecay>
|   |         |     |   | `-MemberExpr 0x22150b43460 <col:26, col:31> 'felem [16][3]' lvalue ->g_pre_comp 0x22150b3bf38
|   |         |     |   |   `-ImplicitCastExpr 0x22150b43448 <col:26> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   |         |     |   |     `-DeclRefExpr 0x22150b43428 <col:26> 'NISTP521_PRE_COMP *' lvalue Var 0x22150b42ca0 'pre' 'NISTP521_PRE_COMP *'
|   |         |     |   `-BinaryOperator 0x22150b434f0 <col:42, col:46> 'int' '*'
|   |         |     |     |-IntegerLiteral 0x22150b43490 <col:42> 'int' 2
|   |         |     |     `-ImplicitCastExpr 0x22150b434d8 <col:46> 'int' <LValueToRValue>
|   |         |     |       `-DeclRefExpr 0x22150b434b8 <col:46> 'int' lvalue Var 0x22150b42dd8 'i' 'int'
|   |         |     `-IntegerLiteral 0x22150b43548 <col:49> 'int' 0
|   |         |-ImplicitCastExpr 0x22150b439a0 <line:2080:26, col:50> 'const limb *':'const limb *' <NoOp>
|   |         | `-ImplicitCastExpr 0x22150b43988 <col:26, col:50> 'limb *' <ArrayToPointerDecay>
|   |         |   `-ArraySubscriptExpr 0x22150b43708 <col:26, col:50> 'felem':'limb [9]' lvalue
|   |         |     |-ImplicitCastExpr 0x22150b436f0 <col:26, col:47> 'felem *' <ArrayToPointerDecay>
|   |         |     | `-ArraySubscriptExpr 0x22150b436a8 <col:26, col:47> 'felem [3]' lvalue
|   |         |     |   |-ImplicitCastExpr 0x22150b43690 <col:26, col:31> 'felem (*)[3]' <ArrayToPointerDecay>
|   |         |     |   | `-MemberExpr 0x22150b435e0 <col:26, col:31> 'felem [16][3]' lvalue ->g_pre_comp 0x22150b3bf38
|   |         |     |   |   `-ImplicitCastExpr 0x22150b435c8 <col:26> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   |         |     |   |     `-DeclRefExpr 0x22150b435a8 <col:26> 'NISTP521_PRE_COMP *' lvalue Var 0x22150b42ca0 'pre' 'NISTP521_PRE_COMP *'
|   |         |     |   `-BinaryOperator 0x22150b43670 <col:42, col:46> 'int' '*'
|   |         |     |     |-IntegerLiteral 0x22150b43610 <col:42> 'int' 2
|   |         |     |     `-ImplicitCastExpr 0x22150b43658 <col:46> 'int' <LValueToRValue>
|   |         |     |       `-DeclRefExpr 0x22150b43638 <col:46> 'int' lvalue Var 0x22150b42dd8 'i' 'int'
|   |         |     `-IntegerLiteral 0x22150b436c8 <col:49> 'int' 1
|   |         `-ImplicitCastExpr 0x22150b439d0 <line:2081:26, col:50> 'const limb *':'const limb *' <NoOp>
|   |           `-ImplicitCastExpr 0x22150b439b8 <col:26, col:50> 'limb *' <ArrayToPointerDecay>
|   |             `-ArraySubscriptExpr 0x22150b43888 <col:26, col:50> 'felem':'limb [9]' lvalue
|   |               |-ImplicitCastExpr 0x22150b43870 <col:26, col:47> 'felem *' <ArrayToPointerDecay>
|   |               | `-ArraySubscriptExpr 0x22150b43828 <col:26, col:47> 'felem [3]' lvalue
|   |               |   |-ImplicitCastExpr 0x22150b43810 <col:26, col:31> 'felem (*)[3]' <ArrayToPointerDecay>
|   |               |   | `-MemberExpr 0x22150b43760 <col:26, col:31> 'felem [16][3]' lvalue ->g_pre_comp 0x22150b3bf38
|   |               |   |   `-ImplicitCastExpr 0x22150b43748 <col:26> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   |               |   |     `-DeclRefExpr 0x22150b43728 <col:26> 'NISTP521_PRE_COMP *' lvalue Var 0x22150b42ca0 'pre' 'NISTP521_PRE_COMP *'
|   |               |   `-BinaryOperator 0x22150b437f0 <col:42, col:46> 'int' '*'
|   |               |     |-IntegerLiteral 0x22150b43790 <col:42> 'int' 2
|   |               |     `-ImplicitCastExpr 0x22150b437d8 <col:46> 'int' <LValueToRValue>
|   |               |       `-DeclRefExpr 0x22150b437b8 <col:46> 'int' lvalue Var 0x22150b42dd8 'i' 'int'
|   |               `-IntegerLiteral 0x22150b43848 <col:49> 'int' 2
|   |-CallExpr 0x22150b43cd8 <line:2085:5, col:61> 'void *'
|   | |-ImplicitCastExpr 0x22150b43cc0 <col:5> 'void *(*)(void *, int, unsigned long long)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150b43a90 <col:5> 'void *(void *, int, unsigned long long)' Function 0x221508f8da8 'memset' 'void *(void *, int, unsigned long long)'
|   | |-ImplicitCastExpr 0x22150b43d28 <col:12, col:29> 'void *' <BitCast>
|   | | `-ImplicitCastExpr 0x22150b43d10 <col:12, col:29> 'felem *' <ArrayToPointerDecay>
|   | |   `-ArraySubscriptExpr 0x22150b43b58 <col:12, col:29> 'felem [3]' lvalue
|   | |     |-ImplicitCastExpr 0x22150b43b40 <col:12, col:17> 'felem (*)[3]' <ArrayToPointerDecay>
|   | |     | `-MemberExpr 0x22150b43ae8 <col:12, col:17> 'felem [16][3]' lvalue ->g_pre_comp 0x22150b3bf38
|   | |     |   `-ImplicitCastExpr 0x22150b43ad0 <col:12> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   | |     |     `-DeclRefExpr 0x22150b43ab0 <col:12> 'NISTP521_PRE_COMP *' lvalue Var 0x22150b42ca0 'pre' 'NISTP521_PRE_COMP *'
|   | |     `-IntegerLiteral 0x22150b43b18 <col:28> 'int' 0
|   | |-IntegerLiteral 0x22150b43b78 <col:32> 'int' 0
|   | `-UnaryExprOrTypeTraitExpr 0x22150b43c88 <col:35, col:60> 'unsigned long long' sizeof
|   |   `-ParenExpr 0x22150b43c68 <col:41, col:60> 'felem [3]' lvalue
|   |     `-ArraySubscriptExpr 0x22150b43c48 <col:42, col:59> 'felem [3]' lvalue
|   |       |-ImplicitCastExpr 0x22150b43c30 <col:42, col:47> 'felem (*)[3]' <ArrayToPointerDecay>
|   |       | `-MemberExpr 0x22150b43bd8 <col:42, col:47> 'felem [16][3]' lvalue ->g_pre_comp 0x22150b3bf38 non_odr_use_unevaluated
|   |       |   `-ImplicitCastExpr 0x22150b43bc0 <col:42> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x22150b43ba0 <col:42> 'NISTP521_PRE_COMP *' lvalue Var 0x22150b42ca0 'pre' 'NISTP521_PRE_COMP *' non_odr_use_unevaluated
|   |       `-IntegerLiteral 0x22150b43c08 <col:58> 'int' 0
|   |-CallExpr 0x22150b44808 <line:2088:5, line:2092:36> 'void'
|   | |-ImplicitCastExpr 0x22150b447f0 <line:2088:5> 'void (*)(limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150b43d40 <col:5> 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const limb *, const limb *, const limb *)' Function 0x22150a3d308 'point_add' 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const limb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x22150b44878 <col:15, col:35> 'limb *' <ArrayToPointerDecay>
|   | | `-ArraySubscriptExpr 0x22150b43e68 <col:15, col:35> 'felem':'limb [9]' lvalue
|   | |   |-ImplicitCastExpr 0x22150b43e50 <col:15, col:32> 'felem *' <ArrayToPointerDecay>
|   | |   | `-ArraySubscriptExpr 0x22150b43e08 <col:15, col:32> 'felem [3]' lvalue
|   | |   |   |-ImplicitCastExpr 0x22150b43df0 <col:15, col:20> 'felem (*)[3]' <ArrayToPointerDecay>
|   | |   |   | `-MemberExpr 0x22150b43d98 <col:15, col:20> 'felem [16][3]' lvalue ->g_pre_comp 0x22150b3bf38
|   | |   |   |   `-ImplicitCastExpr 0x22150b43d80 <col:15> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   | |   |   |     `-DeclRefExpr 0x22150b43d60 <col:15> 'NISTP521_PRE_COMP *' lvalue Var 0x22150b42ca0 'pre' 'NISTP521_PRE_COMP *'
|   | |   |   `-IntegerLiteral 0x22150b43dc8 <col:31> 'int' 6
|   | |   `-IntegerLiteral 0x22150b43e28 <col:34> 'int' 0
|   | |-ImplicitCastExpr 0x22150b44890 <col:38, col:58> 'limb *' <ArrayToPointerDecay>
|   | | `-ArraySubscriptExpr 0x22150b43f90 <col:38, col:58> 'felem':'limb [9]' lvalue
|   | |   |-ImplicitCastExpr 0x22150b43f78 <col:38, col:55> 'felem *' <ArrayToPointerDecay>
|   | |   | `-ArraySubscriptExpr 0x22150b43f30 <col:38, col:55> 'felem [3]' lvalue
|   | |   |   |-ImplicitCastExpr 0x22150b43f18 <col:38, col:43> 'felem (*)[3]' <ArrayToPointerDecay>
|   | |   |   | `-MemberExpr 0x22150b43ec0 <col:38, col:43> 'felem [16][3]' lvalue ->g_pre_comp 0x22150b3bf38
|   | |   |   |   `-ImplicitCastExpr 0x22150b43ea8 <col:38> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   | |   |   |     `-DeclRefExpr 0x22150b43e88 <col:38> 'NISTP521_PRE_COMP *' lvalue Var 0x22150b42ca0 'pre' 'NISTP521_PRE_COMP *'
|   | |   |   `-IntegerLiteral 0x22150b43ef0 <col:54> 'int' 6
|   | |   `-IntegerLiteral 0x22150b43f50 <col:57> 'int' 1
|   | |-ImplicitCastExpr 0x22150b448a8 <line:2089:15, col:35> 'limb *' <ArrayToPointerDecay>
|   | | `-ArraySubscriptExpr 0x22150b440b8 <col:15, col:35> 'felem':'limb [9]' lvalue
|   | |   |-ImplicitCastExpr 0x22150b440a0 <col:15, col:32> 'felem *' <ArrayToPointerDecay>
|   | |   | `-ArraySubscriptExpr 0x22150b44058 <col:15, col:32> 'felem [3]' lvalue
|   | |   |   |-ImplicitCastExpr 0x22150b44040 <col:15, col:20> 'felem (*)[3]' <ArrayToPointerDecay>
|   | |   |   | `-MemberExpr 0x22150b43fe8 <col:15, col:20> 'felem [16][3]' lvalue ->g_pre_comp 0x22150b3bf38
|   | |   |   |   `-ImplicitCastExpr 0x22150b43fd0 <col:15> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   | |   |   |     `-DeclRefExpr 0x22150b43fb0 <col:15> 'NISTP521_PRE_COMP *' lvalue Var 0x22150b42ca0 'pre' 'NISTP521_PRE_COMP *'
|   | |   |   `-IntegerLiteral 0x22150b44018 <col:31> 'int' 6
|   | |   `-IntegerLiteral 0x22150b44078 <col:34> 'int' 2
|   | |-ImplicitCastExpr 0x22150b448d8 <col:38, col:58> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x22150b448c0 <col:38, col:58> 'limb *' <ArrayToPointerDecay>
|   | |   `-ArraySubscriptExpr 0x22150b441e0 <col:38, col:58> 'felem':'limb [9]' lvalue
|   | |     |-ImplicitCastExpr 0x22150b441c8 <col:38, col:55> 'felem *' <ArrayToPointerDecay>
|   | |     | `-ArraySubscriptExpr 0x22150b44180 <col:38, col:55> 'felem [3]' lvalue
|   | |     |   |-ImplicitCastExpr 0x22150b44168 <col:38, col:43> 'felem (*)[3]' <ArrayToPointerDecay>
|   | |     |   | `-MemberExpr 0x22150b44110 <col:38, col:43> 'felem [16][3]' lvalue ->g_pre_comp 0x22150b3bf38
|   | |     |   |   `-ImplicitCastExpr 0x22150b440f8 <col:38> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   | |     |   |     `-DeclRefExpr 0x22150b440d8 <col:38> 'NISTP521_PRE_COMP *' lvalue Var 0x22150b42ca0 'pre' 'NISTP521_PRE_COMP *'
|   | |     |   `-IntegerLiteral 0x22150b44140 <col:54> 'int' 4
|   | |     `-IntegerLiteral 0x22150b441a0 <col:57> 'int' 0
|   | |-ImplicitCastExpr 0x22150b44908 <line:2090:15, col:35> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x22150b448f0 <col:15, col:35> 'limb *' <ArrayToPointerDecay>
|   | |   `-ArraySubscriptExpr 0x22150b44308 <col:15, col:35> 'felem':'limb [9]' lvalue
|   | |     |-ImplicitCastExpr 0x22150b442f0 <col:15, col:32> 'felem *' <ArrayToPointerDecay>
|   | |     | `-ArraySubscriptExpr 0x22150b442a8 <col:15, col:32> 'felem [3]' lvalue
|   | |     |   |-ImplicitCastExpr 0x22150b44290 <col:15, col:20> 'felem (*)[3]' <ArrayToPointerDecay>
|   | |     |   | `-MemberExpr 0x22150b44238 <col:15, col:20> 'felem [16][3]' lvalue ->g_pre_comp 0x22150b3bf38
|   | |     |   |   `-ImplicitCastExpr 0x22150b44220 <col:15> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   | |     |   |     `-DeclRefExpr 0x22150b44200 <col:15> 'NISTP521_PRE_COMP *' lvalue Var 0x22150b42ca0 'pre' 'NISTP521_PRE_COMP *'
|   | |     |   `-IntegerLiteral 0x22150b44268 <col:31> 'int' 4
|   | |     `-IntegerLiteral 0x22150b442c8 <col:34> 'int' 1
|   | |-ImplicitCastExpr 0x22150b44938 <col:38, col:58> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x22150b44920 <col:38, col:58> 'limb *' <ArrayToPointerDecay>
|   | |   `-ArraySubscriptExpr 0x22150b44430 <col:38, col:58> 'felem':'limb [9]' lvalue
|   | |     |-ImplicitCastExpr 0x22150b44418 <col:38, col:55> 'felem *' <ArrayToPointerDecay>
|   | |     | `-ArraySubscriptExpr 0x22150b443d0 <col:38, col:55> 'felem [3]' lvalue
|   | |     |   |-ImplicitCastExpr 0x22150b443b8 <col:38, col:43> 'felem (*)[3]' <ArrayToPointerDecay>
|   | |     |   | `-MemberExpr 0x22150b44360 <col:38, col:43> 'felem [16][3]' lvalue ->g_pre_comp 0x22150b3bf38
|   | |     |   |   `-ImplicitCastExpr 0x22150b44348 <col:38> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   | |     |   |     `-DeclRefExpr 0x22150b44328 <col:38> 'NISTP521_PRE_COMP *' lvalue Var 0x22150b42ca0 'pre' 'NISTP521_PRE_COMP *'
|   | |     |   `-IntegerLiteral 0x22150b44390 <col:54> 'int' 4
|   | |     `-IntegerLiteral 0x22150b443f0 <col:57> 'int' 2
|   | |-IntegerLiteral 0x22150b44450 <line:2091:15> 'int' 0
|   | |-ImplicitCastExpr 0x22150b44968 <col:18, col:38> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x22150b44950 <col:18, col:38> 'limb *' <ArrayToPointerDecay>
|   | |   `-ArraySubscriptExpr 0x22150b44580 <col:18, col:38> 'felem':'limb [9]' lvalue
|   | |     |-ImplicitCastExpr 0x22150b44568 <col:18, col:35> 'felem *' <ArrayToPointerDecay>
|   | |     | `-ArraySubscriptExpr 0x22150b44520 <col:18, col:35> 'felem [3]' lvalue
|   | |     |   |-ImplicitCastExpr 0x22150b44508 <col:18, col:23> 'felem (*)[3]' <ArrayToPointerDecay>
|   | |     |   | `-MemberExpr 0x22150b444b0 <col:18, col:23> 'felem [16][3]' lvalue ->g_pre_comp 0x22150b3bf38
|   | |     |   |   `-ImplicitCastExpr 0x22150b44498 <col:18> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   | |     |   |     `-DeclRefExpr 0x22150b44478 <col:18> 'NISTP521_PRE_COMP *' lvalue Var 0x22150b42ca0 'pre' 'NISTP521_PRE_COMP *'
|   | |     |   `-IntegerLiteral 0x22150b444e0 <col:34> 'int' 2
|   | |     `-IntegerLiteral 0x22150b44540 <col:37> 'int' 0
|   | |-ImplicitCastExpr 0x22150b44998 <col:41, col:61> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x22150b44980 <col:41, col:61> 'limb *' <ArrayToPointerDecay>
|   | |   `-ArraySubscriptExpr 0x22150b446a8 <col:41, col:61> 'felem':'limb [9]' lvalue
|   | |     |-ImplicitCastExpr 0x22150b44690 <col:41, col:58> 'felem *' <ArrayToPointerDecay>
|   | |     | `-ArraySubscriptExpr 0x22150b44648 <col:41, col:58> 'felem [3]' lvalue
|   | |     |   |-ImplicitCastExpr 0x22150b44630 <col:41, col:46> 'felem (*)[3]' <ArrayToPointerDecay>
|   | |     |   | `-MemberExpr 0x22150b445d8 <col:41, col:46> 'felem [16][3]' lvalue ->g_pre_comp 0x22150b3bf38
|   | |     |   |   `-ImplicitCastExpr 0x22150b445c0 <col:41> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   | |     |   |     `-DeclRefExpr 0x22150b445a0 <col:41> 'NISTP521_PRE_COMP *' lvalue Var 0x22150b42ca0 'pre' 'NISTP521_PRE_COMP *'
|   | |     |   `-IntegerLiteral 0x22150b44608 <col:57> 'int' 2
|   | |     `-IntegerLiteral 0x22150b44668 <col:60> 'int' 1
|   | `-ImplicitCastExpr 0x22150b449c8 <line:2092:15, col:35> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150b449b0 <col:15, col:35> 'limb *' <ArrayToPointerDecay>
|   |     `-ArraySubscriptExpr 0x22150b447d0 <col:15, col:35> 'felem':'limb [9]' lvalue
|   |       |-ImplicitCastExpr 0x22150b447b8 <col:15, col:32> 'felem *' <ArrayToPointerDecay>
|   |       | `-ArraySubscriptExpr 0x22150b44770 <col:15, col:32> 'felem [3]' lvalue
|   |       |   |-ImplicitCastExpr 0x22150b44758 <col:15, col:20> 'felem (*)[3]' <ArrayToPointerDecay>
|   |       |   | `-MemberExpr 0x22150b44700 <col:15, col:20> 'felem [16][3]' lvalue ->g_pre_comp 0x22150b3bf38
|   |       |   |   `-ImplicitCastExpr 0x22150b446e8 <col:15> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   |       |   |     `-DeclRefExpr 0x22150b446c8 <col:15> 'NISTP521_PRE_COMP *' lvalue Var 0x22150b42ca0 'pre' 'NISTP521_PRE_COMP *'
|   |       |   `-IntegerLiteral 0x22150b44730 <col:31> 'int' 2
|   |       `-IntegerLiteral 0x22150b44790 <col:34> 'int' 2
|   |-CallExpr 0x22150b454c8 <line:2094:5, line:2098:36> 'void'
|   | |-ImplicitCastExpr 0x22150b454b0 <line:2094:5> 'void (*)(limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150b449e0 <col:5> 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const limb *, const limb *, const limb *)' Function 0x22150a3d308 'point_add' 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const limb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x22150b45538 <col:15, col:36> 'limb *' <ArrayToPointerDecay>
|   | | `-ArraySubscriptExpr 0x22150b44b08 <col:15, col:36> 'felem':'limb [9]' lvalue
|   | |   |-ImplicitCastExpr 0x22150b44af0 <col:15, col:33> 'felem *' <ArrayToPointerDecay>
|   | |   | `-ArraySubscriptExpr 0x22150b44aa8 <col:15, col:33> 'felem [3]' lvalue
|   | |   |   |-ImplicitCastExpr 0x22150b44a90 <col:15, col:20> 'felem (*)[3]' <ArrayToPointerDecay>
|   | |   |   | `-MemberExpr 0x22150b44a38 <col:15, col:20> 'felem [16][3]' lvalue ->g_pre_comp 0x22150b3bf38
|   | |   |   |   `-ImplicitCastExpr 0x22150b44a20 <col:15> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   | |   |   |     `-DeclRefExpr 0x22150b44a00 <col:15> 'NISTP521_PRE_COMP *' lvalue Var 0x22150b42ca0 'pre' 'NISTP521_PRE_COMP *'
|   | |   |   `-IntegerLiteral 0x22150b44a68 <col:31> 'int' 10
|   | |   `-IntegerLiteral 0x22150b44ac8 <col:35> 'int' 0
|   | |-ImplicitCastExpr 0x22150b45550 <col:39, col:60> 'limb *' <ArrayToPointerDecay>
|   | | `-ArraySubscriptExpr 0x22150b44c30 <col:39, col:60> 'felem':'limb [9]' lvalue
|   | |   |-ImplicitCastExpr 0x22150b44c18 <col:39, col:57> 'felem *' <ArrayToPointerDecay>
|   | |   | `-ArraySubscriptExpr 0x22150b44bd0 <col:39, col:57> 'felem [3]' lvalue
|   | |   |   |-ImplicitCastExpr 0x22150b44bb8 <col:39, col:44> 'felem (*)[3]' <ArrayToPointerDecay>
|   | |   |   | `-MemberExpr 0x22150b44b60 <col:39, col:44> 'felem [16][3]' lvalue ->g_pre_comp 0x22150b3bf38
|   | |   |   |   `-ImplicitCastExpr 0x22150b44b48 <col:39> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   | |   |   |     `-DeclRefExpr 0x22150b44b28 <col:39> 'NISTP521_PRE_COMP *' lvalue Var 0x22150b42ca0 'pre' 'NISTP521_PRE_COMP *'
|   | |   |   `-IntegerLiteral 0x22150b44b90 <col:55> 'int' 10
|   | |   `-IntegerLiteral 0x22150b44bf0 <col:59> 'int' 1
|   | |-ImplicitCastExpr 0x22150b45568 <line:2095:15, col:36> 'limb *' <ArrayToPointerDecay>
|   | | `-ArraySubscriptExpr 0x22150b44d58 <col:15, col:36> 'felem':'limb [9]' lvalue
|   | |   |-ImplicitCastExpr 0x22150b44d40 <col:15, col:33> 'felem *' <ArrayToPointerDecay>
|   | |   | `-ArraySubscriptExpr 0x22150b44cf8 <col:15, col:33> 'felem [3]' lvalue
|   | |   |   |-ImplicitCastExpr 0x22150b44ce0 <col:15, col:20> 'felem (*)[3]' <ArrayToPointerDecay>
|   | |   |   | `-MemberExpr 0x22150b44c88 <col:15, col:20> 'felem [16][3]' lvalue ->g_pre_comp 0x22150b3bf38
|   | |   |   |   `-ImplicitCastExpr 0x22150b44c70 <col:15> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   | |   |   |     `-DeclRefExpr 0x22150b44c50 <col:15> 'NISTP521_PRE_COMP *' lvalue Var 0x22150b42ca0 'pre' 'NISTP521_PRE_COMP *'
|   | |   |   `-IntegerLiteral 0x22150b44cb8 <col:31> 'int' 10
|   | |   `-IntegerLiteral 0x22150b44d18 <col:35> 'int' 2
|   | |-ImplicitCastExpr 0x22150b45598 <col:39, col:59> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x22150b45580 <col:39, col:59> 'limb *' <ArrayToPointerDecay>
|   | |   `-ArraySubscriptExpr 0x22150b44e80 <col:39, col:59> 'felem':'limb [9]' lvalue
|   | |     |-ImplicitCastExpr 0x22150b44e68 <col:39, col:56> 'felem *' <ArrayToPointerDecay>
|   | |     | `-ArraySubscriptExpr 0x22150b44e20 <col:39, col:56> 'felem [3]' lvalue
|   | |     |   |-ImplicitCastExpr 0x22150b44e08 <col:39, col:44> 'felem (*)[3]' <ArrayToPointerDecay>
|   | |     |   | `-MemberExpr 0x22150b44db0 <col:39, col:44> 'felem [16][3]' lvalue ->g_pre_comp 0x22150b3bf38
|   | |     |   |   `-ImplicitCastExpr 0x22150b44d98 <col:39> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   | |     |   |     `-DeclRefExpr 0x22150b44d78 <col:39> 'NISTP521_PRE_COMP *' lvalue Var 0x22150b42ca0 'pre' 'NISTP521_PRE_COMP *'
|   | |     |   `-IntegerLiteral 0x22150b44de0 <col:55> 'int' 8
|   | |     `-IntegerLiteral 0x22150b44e40 <col:58> 'int' 0
|   | |-ImplicitCastExpr 0x22150b455c8 <line:2096:15, col:35> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x22150b455b0 <col:15, col:35> 'limb *' <ArrayToPointerDecay>
|   | |   `-ArraySubscriptExpr 0x22150b44fc8 <col:15, col:35> 'felem':'limb [9]' lvalue
|   | |     |-ImplicitCastExpr 0x22150b44fb0 <col:15, col:32> 'felem *' <ArrayToPointerDecay>
|   | |     | `-ArraySubscriptExpr 0x22150b44f68 <col:15, col:32> 'felem [3]' lvalue
|   | |     |   |-ImplicitCastExpr 0x22150b44f50 <col:15, col:20> 'felem (*)[3]' <ArrayToPointerDecay>
|   | |     |   | `-MemberExpr 0x22150b44ef8 <col:15, col:20> 'felem [16][3]' lvalue ->g_pre_comp 0x22150b3bf38
|   | |     |   |   `-ImplicitCastExpr 0x22150b44ee0 <col:15> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   | |     |   |     `-DeclRefExpr 0x22150b44ea0 <col:15> 'NISTP521_PRE_COMP *' lvalue Var 0x22150b42ca0 'pre' 'NISTP521_PRE_COMP *'
|   | |     |   `-IntegerLiteral 0x22150b44f28 <col:31> 'int' 8
|   | |     `-IntegerLiteral 0x22150b44f88 <col:34> 'int' 1
|   | |-ImplicitCastExpr 0x22150b455f8 <col:38, col:58> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x22150b455e0 <col:38, col:58> 'limb *' <ArrayToPointerDecay>
|   | |   `-ArraySubscriptExpr 0x22150b450f0 <col:38, col:58> 'felem':'limb [9]' lvalue
|   | |     |-ImplicitCastExpr 0x22150b450d8 <col:38, col:55> 'felem *' <ArrayToPointerDecay>
|   | |     | `-ArraySubscriptExpr 0x22150b45090 <col:38, col:55> 'felem [3]' lvalue
|   | |     |   |-ImplicitCastExpr 0x22150b45078 <col:38, col:43> 'felem (*)[3]' <ArrayToPointerDecay>
|   | |     |   | `-MemberExpr 0x22150b45020 <col:38, col:43> 'felem [16][3]' lvalue ->g_pre_comp 0x22150b3bf38
|   | |     |   |   `-ImplicitCastExpr 0x22150b45008 <col:38> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   | |     |   |     `-DeclRefExpr 0x22150b44fe8 <col:38> 'NISTP521_PRE_COMP *' lvalue Var 0x22150b42ca0 'pre' 'NISTP521_PRE_COMP *'
|   | |     |   `-IntegerLiteral 0x22150b45050 <col:54> 'int' 8
|   | |     `-IntegerLiteral 0x22150b450b0 <col:57> 'int' 2
|   | |-IntegerLiteral 0x22150b45110 <line:2097:15> 'int' 0
|   | |-ImplicitCastExpr 0x22150b45628 <col:18, col:38> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x22150b45610 <col:18, col:38> 'limb *' <ArrayToPointerDecay>
|   | |   `-ArraySubscriptExpr 0x22150b45240 <col:18, col:38> 'felem':'limb [9]' lvalue
|   | |     |-ImplicitCastExpr 0x22150b45228 <col:18, col:35> 'felem *' <ArrayToPointerDecay>
|   | |     | `-ArraySubscriptExpr 0x22150b451e0 <col:18, col:35> 'felem [3]' lvalue
|   | |     |   |-ImplicitCastExpr 0x22150b451c8 <col:18, col:23> 'felem (*)[3]' <ArrayToPointerDecay>
|   | |     |   | `-MemberExpr 0x22150b45170 <col:18, col:23> 'felem [16][3]' lvalue ->g_pre_comp 0x22150b3bf38
|   | |     |   |   `-ImplicitCastExpr 0x22150b45158 <col:18> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   | |     |   |     `-DeclRefExpr 0x22150b45138 <col:18> 'NISTP521_PRE_COMP *' lvalue Var 0x22150b42ca0 'pre' 'NISTP521_PRE_COMP *'
|   | |     |   `-IntegerLiteral 0x22150b451a0 <col:34> 'int' 2
|   | |     `-IntegerLiteral 0x22150b45200 <col:37> 'int' 0
|   | |-ImplicitCastExpr 0x22150b45658 <col:41, col:61> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x22150b45640 <col:41, col:61> 'limb *' <ArrayToPointerDecay>
|   | |   `-ArraySubscriptExpr 0x22150b45368 <col:41, col:61> 'felem':'limb [9]' lvalue
|   | |     |-ImplicitCastExpr 0x22150b45350 <col:41, col:58> 'felem *' <ArrayToPointerDecay>
|   | |     | `-ArraySubscriptExpr 0x22150b45308 <col:41, col:58> 'felem [3]' lvalue
|   | |     |   |-ImplicitCastExpr 0x22150b452f0 <col:41, col:46> 'felem (*)[3]' <ArrayToPointerDecay>
|   | |     |   | `-MemberExpr 0x22150b45298 <col:41, col:46> 'felem [16][3]' lvalue ->g_pre_comp 0x22150b3bf38
|   | |     |   |   `-ImplicitCastExpr 0x22150b45280 <col:41> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   | |     |   |     `-DeclRefExpr 0x22150b45260 <col:41> 'NISTP521_PRE_COMP *' lvalue Var 0x22150b42ca0 'pre' 'NISTP521_PRE_COMP *'
|   | |     |   `-IntegerLiteral 0x22150b452c8 <col:57> 'int' 2
|   | |     `-IntegerLiteral 0x22150b45328 <col:60> 'int' 1
|   | `-ImplicitCastExpr 0x22150b45688 <line:2098:15, col:35> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150b45670 <col:15, col:35> 'limb *' <ArrayToPointerDecay>
|   |     `-ArraySubscriptExpr 0x22150b45490 <col:15, col:35> 'felem':'limb [9]' lvalue
|   |       |-ImplicitCastExpr 0x22150b45478 <col:15, col:32> 'felem *' <ArrayToPointerDecay>
|   |       | `-ArraySubscriptExpr 0x22150b45430 <col:15, col:32> 'felem [3]' lvalue
|   |       |   |-ImplicitCastExpr 0x22150b45418 <col:15, col:20> 'felem (*)[3]' <ArrayToPointerDecay>
|   |       |   | `-MemberExpr 0x22150b453c0 <col:15, col:20> 'felem [16][3]' lvalue ->g_pre_comp 0x22150b3bf38
|   |       |   |   `-ImplicitCastExpr 0x22150b453a8 <col:15> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   |       |   |     `-DeclRefExpr 0x22150b45388 <col:15> 'NISTP521_PRE_COMP *' lvalue Var 0x22150b42ca0 'pre' 'NISTP521_PRE_COMP *'
|   |       |   `-IntegerLiteral 0x22150b453f0 <col:31> 'int' 2
|   |       `-IntegerLiteral 0x22150b45450 <col:34> 'int' 2
|   |-CallExpr 0x22150b46168 <line:2100:5, line:2104:36> 'void'
|   | |-ImplicitCastExpr 0x22150b46150 <line:2100:5> 'void (*)(limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150b456a0 <col:5> 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const limb *, const limb *, const limb *)' Function 0x22150a3d308 'point_add' 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const limb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x22150b461d8 <col:15, col:36> 'limb *' <ArrayToPointerDecay>
|   | | `-ArraySubscriptExpr 0x22150b457c8 <col:15, col:36> 'felem':'limb [9]' lvalue
|   | |   |-ImplicitCastExpr 0x22150b457b0 <col:15, col:33> 'felem *' <ArrayToPointerDecay>
|   | |   | `-ArraySubscriptExpr 0x22150b45768 <col:15, col:33> 'felem [3]' lvalue
|   | |   |   |-ImplicitCastExpr 0x22150b45750 <col:15, col:20> 'felem (*)[3]' <ArrayToPointerDecay>
|   | |   |   | `-MemberExpr 0x22150b456f8 <col:15, col:20> 'felem [16][3]' lvalue ->g_pre_comp 0x22150b3bf38
|   | |   |   |   `-ImplicitCastExpr 0x22150b456e0 <col:15> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   | |   |   |     `-DeclRefExpr 0x22150b456c0 <col:15> 'NISTP521_PRE_COMP *' lvalue Var 0x22150b42ca0 'pre' 'NISTP521_PRE_COMP *'
|   | |   |   `-IntegerLiteral 0x22150b45728 <col:31> 'int' 12
|   | |   `-IntegerLiteral 0x22150b45788 <col:35> 'int' 0
|   | |-ImplicitCastExpr 0x22150b461f0 <col:39, col:60> 'limb *' <ArrayToPointerDecay>
|   | | `-ArraySubscriptExpr 0x22150b458f0 <col:39, col:60> 'felem':'limb [9]' lvalue
|   | |   |-ImplicitCastExpr 0x22150b458d8 <col:39, col:57> 'felem *' <ArrayToPointerDecay>
|   | |   | `-ArraySubscriptExpr 0x22150b45890 <col:39, col:57> 'felem [3]' lvalue
|   | |   |   |-ImplicitCastExpr 0x22150b45878 <col:39, col:44> 'felem (*)[3]' <ArrayToPointerDecay>
|   | |   |   | `-MemberExpr 0x22150b45820 <col:39, col:44> 'felem [16][3]' lvalue ->g_pre_comp 0x22150b3bf38
|   | |   |   |   `-ImplicitCastExpr 0x22150b45808 <col:39> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   | |   |   |     `-DeclRefExpr 0x22150b457e8 <col:39> 'NISTP521_PRE_COMP *' lvalue Var 0x22150b42ca0 'pre' 'NISTP521_PRE_COMP *'
|   | |   |   `-IntegerLiteral 0x22150b45850 <col:55> 'int' 12
|   | |   `-IntegerLiteral 0x22150b458b0 <col:59> 'int' 1
|   | |-ImplicitCastExpr 0x22150b46208 <line:2101:15, col:36> 'limb *' <ArrayToPointerDecay>
|   | | `-ArraySubscriptExpr 0x22150b45a18 <col:15, col:36> 'felem':'limb [9]' lvalue
|   | |   |-ImplicitCastExpr 0x22150b45a00 <col:15, col:33> 'felem *' <ArrayToPointerDecay>
|   | |   | `-ArraySubscriptExpr 0x22150b459b8 <col:15, col:33> 'felem [3]' lvalue
|   | |   |   |-ImplicitCastExpr 0x22150b459a0 <col:15, col:20> 'felem (*)[3]' <ArrayToPointerDecay>
|   | |   |   | `-MemberExpr 0x22150b45948 <col:15, col:20> 'felem [16][3]' lvalue ->g_pre_comp 0x22150b3bf38
|   | |   |   |   `-ImplicitCastExpr 0x22150b45930 <col:15> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   | |   |   |     `-DeclRefExpr 0x22150b45910 <col:15> 'NISTP521_PRE_COMP *' lvalue Var 0x22150b42ca0 'pre' 'NISTP521_PRE_COMP *'
|   | |   |   `-IntegerLiteral 0x22150b45978 <col:31> 'int' 12
|   | |   `-IntegerLiteral 0x22150b459d8 <col:35> 'int' 2
|   | |-ImplicitCastExpr 0x22150b46238 <col:39, col:59> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x22150b46220 <col:39, col:59> 'limb *' <ArrayToPointerDecay>
|   | |   `-ArraySubscriptExpr 0x22150b45b40 <col:39, col:59> 'felem':'limb [9]' lvalue
|   | |     |-ImplicitCastExpr 0x22150b45b28 <col:39, col:56> 'felem *' <ArrayToPointerDecay>
|   | |     | `-ArraySubscriptExpr 0x22150b45ae0 <col:39, col:56> 'felem [3]' lvalue
|   | |     |   |-ImplicitCastExpr 0x22150b45ac8 <col:39, col:44> 'felem (*)[3]' <ArrayToPointerDecay>
|   | |     |   | `-MemberExpr 0x22150b45a70 <col:39, col:44> 'felem [16][3]' lvalue ->g_pre_comp 0x22150b3bf38
|   | |     |   |   `-ImplicitCastExpr 0x22150b45a58 <col:39> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   | |     |   |     `-DeclRefExpr 0x22150b45a38 <col:39> 'NISTP521_PRE_COMP *' lvalue Var 0x22150b42ca0 'pre' 'NISTP521_PRE_COMP *'
|   | |     |   `-IntegerLiteral 0x22150b45aa0 <col:55> 'int' 8
|   | |     `-IntegerLiteral 0x22150b45b00 <col:58> 'int' 0
|   | |-ImplicitCastExpr 0x22150b46268 <line:2102:15, col:35> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x22150b46250 <col:15, col:35> 'limb *' <ArrayToPointerDecay>
|   | |   `-ArraySubscriptExpr 0x22150b45c68 <col:15, col:35> 'felem':'limb [9]' lvalue
|   | |     |-ImplicitCastExpr 0x22150b45c50 <col:15, col:32> 'felem *' <ArrayToPointerDecay>
|   | |     | `-ArraySubscriptExpr 0x22150b45c08 <col:15, col:32> 'felem [3]' lvalue
|   | |     |   |-ImplicitCastExpr 0x22150b45bf0 <col:15, col:20> 'felem (*)[3]' <ArrayToPointerDecay>
|   | |     |   | `-MemberExpr 0x22150b45b98 <col:15, col:20> 'felem [16][3]' lvalue ->g_pre_comp 0x22150b3bf38
|   | |     |   |   `-ImplicitCastExpr 0x22150b45b80 <col:15> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   | |     |   |     `-DeclRefExpr 0x22150b45b60 <col:15> 'NISTP521_PRE_COMP *' lvalue Var 0x22150b42ca0 'pre' 'NISTP521_PRE_COMP *'
|   | |     |   `-IntegerLiteral 0x22150b45bc8 <col:31> 'int' 8
|   | |     `-IntegerLiteral 0x22150b45c28 <col:34> 'int' 1
|   | |-ImplicitCastExpr 0x22150b46298 <col:38, col:58> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x22150b46280 <col:38, col:58> 'limb *' <ArrayToPointerDecay>
|   | |   `-ArraySubscriptExpr 0x22150b45d90 <col:38, col:58> 'felem':'limb [9]' lvalue
|   | |     |-ImplicitCastExpr 0x22150b45d78 <col:38, col:55> 'felem *' <ArrayToPointerDecay>
|   | |     | `-ArraySubscriptExpr 0x22150b45d30 <col:38, col:55> 'felem [3]' lvalue
|   | |     |   |-ImplicitCastExpr 0x22150b45d18 <col:38, col:43> 'felem (*)[3]' <ArrayToPointerDecay>
|   | |     |   | `-MemberExpr 0x22150b45cc0 <col:38, col:43> 'felem [16][3]' lvalue ->g_pre_comp 0x22150b3bf38
|   | |     |   |   `-ImplicitCastExpr 0x22150b45ca8 <col:38> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   | |     |   |     `-DeclRefExpr 0x22150b45c88 <col:38> 'NISTP521_PRE_COMP *' lvalue Var 0x22150b42ca0 'pre' 'NISTP521_PRE_COMP *'
|   | |     |   `-IntegerLiteral 0x22150b45cf0 <col:54> 'int' 8
|   | |     `-IntegerLiteral 0x22150b45d50 <col:57> 'int' 2
|   | |-IntegerLiteral 0x22150b45db0 <line:2103:15> 'int' 0
|   | |-ImplicitCastExpr 0x22150b462c8 <col:18, col:38> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x22150b462b0 <col:18, col:38> 'limb *' <ArrayToPointerDecay>
|   | |   `-ArraySubscriptExpr 0x22150b45ee0 <col:18, col:38> 'felem':'limb [9]' lvalue
|   | |     |-ImplicitCastExpr 0x22150b45ec8 <col:18, col:35> 'felem *' <ArrayToPointerDecay>
|   | |     | `-ArraySubscriptExpr 0x22150b45e80 <col:18, col:35> 'felem [3]' lvalue
|   | |     |   |-ImplicitCastExpr 0x22150b45e68 <col:18, col:23> 'felem (*)[3]' <ArrayToPointerDecay>
|   | |     |   | `-MemberExpr 0x22150b45e10 <col:18, col:23> 'felem [16][3]' lvalue ->g_pre_comp 0x22150b3bf38
|   | |     |   |   `-ImplicitCastExpr 0x22150b45df8 <col:18> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   | |     |   |     `-DeclRefExpr 0x22150b45dd8 <col:18> 'NISTP521_PRE_COMP *' lvalue Var 0x22150b42ca0 'pre' 'NISTP521_PRE_COMP *'
|   | |     |   `-IntegerLiteral 0x22150b45e40 <col:34> 'int' 4
|   | |     `-IntegerLiteral 0x22150b45ea0 <col:37> 'int' 0
|   | |-ImplicitCastExpr 0x22150b462f8 <col:41, col:61> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x22150b462e0 <col:41, col:61> 'limb *' <ArrayToPointerDecay>
|   | |   `-ArraySubscriptExpr 0x22150b46008 <col:41, col:61> 'felem':'limb [9]' lvalue
|   | |     |-ImplicitCastExpr 0x22150b45ff0 <col:41, col:58> 'felem *' <ArrayToPointerDecay>
|   | |     | `-ArraySubscriptExpr 0x22150b45fa8 <col:41, col:58> 'felem [3]' lvalue
|   | |     |   |-ImplicitCastExpr 0x22150b45f90 <col:41, col:46> 'felem (*)[3]' <ArrayToPointerDecay>
|   | |     |   | `-MemberExpr 0x22150b45f38 <col:41, col:46> 'felem [16][3]' lvalue ->g_pre_comp 0x22150b3bf38
|   | |     |   |   `-ImplicitCastExpr 0x22150b45f20 <col:41> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   | |     |   |     `-DeclRefExpr 0x22150b45f00 <col:41> 'NISTP521_PRE_COMP *' lvalue Var 0x22150b42ca0 'pre' 'NISTP521_PRE_COMP *'
|   | |     |   `-IntegerLiteral 0x22150b45f68 <col:57> 'int' 4
|   | |     `-IntegerLiteral 0x22150b45fc8 <col:60> 'int' 1
|   | `-ImplicitCastExpr 0x22150b46328 <line:2104:15, col:35> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150b46310 <col:15, col:35> 'limb *' <ArrayToPointerDecay>
|   |     `-ArraySubscriptExpr 0x22150b46130 <col:15, col:35> 'felem':'limb [9]' lvalue
|   |       |-ImplicitCastExpr 0x22150b46118 <col:15, col:32> 'felem *' <ArrayToPointerDecay>
|   |       | `-ArraySubscriptExpr 0x22150b460d0 <col:15, col:32> 'felem [3]' lvalue
|   |       |   |-ImplicitCastExpr 0x22150b460b8 <col:15, col:20> 'felem (*)[3]' <ArrayToPointerDecay>
|   |       |   | `-MemberExpr 0x22150b46060 <col:15, col:20> 'felem [16][3]' lvalue ->g_pre_comp 0x22150b3bf38
|   |       |   |   `-ImplicitCastExpr 0x22150b46048 <col:15> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   |       |   |     `-DeclRefExpr 0x22150b46028 <col:15> 'NISTP521_PRE_COMP *' lvalue Var 0x22150b42ca0 'pre' 'NISTP521_PRE_COMP *'
|   |       |   `-IntegerLiteral 0x22150b46090 <col:31> 'int' 4
|   |       `-IntegerLiteral 0x22150b460f0 <col:34> 'int' 2
|   |-CallExpr 0x22150b46e08 <line:2106:5, line:2110:36> 'void'
|   | |-ImplicitCastExpr 0x22150b46df0 <line:2106:5> 'void (*)(limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150b46340 <col:5> 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const limb *, const limb *, const limb *)' Function 0x22150a3d308 'point_add' 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const limb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x22150b46e78 <col:15, col:36> 'limb *' <ArrayToPointerDecay>
|   | | `-ArraySubscriptExpr 0x22150b46468 <col:15, col:36> 'felem':'limb [9]' lvalue
|   | |   |-ImplicitCastExpr 0x22150b46450 <col:15, col:33> 'felem *' <ArrayToPointerDecay>
|   | |   | `-ArraySubscriptExpr 0x22150b46408 <col:15, col:33> 'felem [3]' lvalue
|   | |   |   |-ImplicitCastExpr 0x22150b463f0 <col:15, col:20> 'felem (*)[3]' <ArrayToPointerDecay>
|   | |   |   | `-MemberExpr 0x22150b46398 <col:15, col:20> 'felem [16][3]' lvalue ->g_pre_comp 0x22150b3bf38
|   | |   |   |   `-ImplicitCastExpr 0x22150b46380 <col:15> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   | |   |   |     `-DeclRefExpr 0x22150b46360 <col:15> 'NISTP521_PRE_COMP *' lvalue Var 0x22150b42ca0 'pre' 'NISTP521_PRE_COMP *'
|   | |   |   `-IntegerLiteral 0x22150b463c8 <col:31> 'int' 14
|   | |   `-IntegerLiteral 0x22150b46428 <col:35> 'int' 0
|   | |-ImplicitCastExpr 0x22150b46e90 <col:39, col:60> 'limb *' <ArrayToPointerDecay>
|   | | `-ArraySubscriptExpr 0x22150b46590 <col:39, col:60> 'felem':'limb [9]' lvalue
|   | |   |-ImplicitCastExpr 0x22150b46578 <col:39, col:57> 'felem *' <ArrayToPointerDecay>
|   | |   | `-ArraySubscriptExpr 0x22150b46530 <col:39, col:57> 'felem [3]' lvalue
|   | |   |   |-ImplicitCastExpr 0x22150b46518 <col:39, col:44> 'felem (*)[3]' <ArrayToPointerDecay>
|   | |   |   | `-MemberExpr 0x22150b464c0 <col:39, col:44> 'felem [16][3]' lvalue ->g_pre_comp 0x22150b3bf38
|   | |   |   |   `-ImplicitCastExpr 0x22150b464a8 <col:39> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   | |   |   |     `-DeclRefExpr 0x22150b46488 <col:39> 'NISTP521_PRE_COMP *' lvalue Var 0x22150b42ca0 'pre' 'NISTP521_PRE_COMP *'
|   | |   |   `-IntegerLiteral 0x22150b464f0 <col:55> 'int' 14
|   | |   `-IntegerLiteral 0x22150b46550 <col:59> 'int' 1
|   | |-ImplicitCastExpr 0x22150b46ea8 <line:2107:15, col:36> 'limb *' <ArrayToPointerDecay>
|   | | `-ArraySubscriptExpr 0x22150b466b8 <col:15, col:36> 'felem':'limb [9]' lvalue
|   | |   |-ImplicitCastExpr 0x22150b466a0 <col:15, col:33> 'felem *' <ArrayToPointerDecay>
|   | |   | `-ArraySubscriptExpr 0x22150b46658 <col:15, col:33> 'felem [3]' lvalue
|   | |   |   |-ImplicitCastExpr 0x22150b46640 <col:15, col:20> 'felem (*)[3]' <ArrayToPointerDecay>
|   | |   |   | `-MemberExpr 0x22150b465e8 <col:15, col:20> 'felem [16][3]' lvalue ->g_pre_comp 0x22150b3bf38
|   | |   |   |   `-ImplicitCastExpr 0x22150b465d0 <col:15> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   | |   |   |     `-DeclRefExpr 0x22150b465b0 <col:15> 'NISTP521_PRE_COMP *' lvalue Var 0x22150b42ca0 'pre' 'NISTP521_PRE_COMP *'
|   | |   |   `-IntegerLiteral 0x22150b46618 <col:31> 'int' 14
|   | |   `-IntegerLiteral 0x22150b46678 <col:35> 'int' 2
|   | |-ImplicitCastExpr 0x22150b36e70 <col:39, col:60> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x22150b46ec0 <col:39, col:60> 'limb *' <ArrayToPointerDecay>
|   | |   `-ArraySubscriptExpr 0x22150b467e0 <col:39, col:60> 'felem':'limb [9]' lvalue
|   | |     |-ImplicitCastExpr 0x22150b467c8 <col:39, col:57> 'felem *' <ArrayToPointerDecay>
|   | |     | `-ArraySubscriptExpr 0x22150b46780 <col:39, col:57> 'felem [3]' lvalue
|   | |     |   |-ImplicitCastExpr 0x22150b46768 <col:39, col:44> 'felem (*)[3]' <ArrayToPointerDecay>
|   | |     |   | `-MemberExpr 0x22150b46710 <col:39, col:44> 'felem [16][3]' lvalue ->g_pre_comp 0x22150b3bf38
|   | |     |   |   `-ImplicitCastExpr 0x22150b466f8 <col:39> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   | |     |   |     `-DeclRefExpr 0x22150b466d8 <col:39> 'NISTP521_PRE_COMP *' lvalue Var 0x22150b42ca0 'pre' 'NISTP521_PRE_COMP *'
|   | |     |   `-IntegerLiteral 0x22150b46740 <col:55> 'int' 12
|   | |     `-IntegerLiteral 0x22150b467a0 <col:59> 'int' 0
|   | |-ImplicitCastExpr 0x22150b36ea0 <line:2108:15, col:36> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x22150b36e88 <col:15, col:36> 'limb *' <ArrayToPointerDecay>
|   | |   `-ArraySubscriptExpr 0x22150b46908 <col:15, col:36> 'felem':'limb [9]' lvalue
|   | |     |-ImplicitCastExpr 0x22150b468f0 <col:15, col:33> 'felem *' <ArrayToPointerDecay>
|   | |     | `-ArraySubscriptExpr 0x22150b468a8 <col:15, col:33> 'felem [3]' lvalue
|   | |     |   |-ImplicitCastExpr 0x22150b46890 <col:15, col:20> 'felem (*)[3]' <ArrayToPointerDecay>
|   | |     |   | `-MemberExpr 0x22150b46838 <col:15, col:20> 'felem [16][3]' lvalue ->g_pre_comp 0x22150b3bf38
|   | |     |   |   `-ImplicitCastExpr 0x22150b46820 <col:15> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   | |     |   |     `-DeclRefExpr 0x22150b46800 <col:15> 'NISTP521_PRE_COMP *' lvalue Var 0x22150b42ca0 'pre' 'NISTP521_PRE_COMP *'
|   | |     |   `-IntegerLiteral 0x22150b46868 <col:31> 'int' 12
|   | |     `-IntegerLiteral 0x22150b468c8 <col:35> 'int' 1
|   | |-ImplicitCastExpr 0x22150b36ed0 <col:39, col:60> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x22150b36eb8 <col:39, col:60> 'limb *' <ArrayToPointerDecay>
|   | |   `-ArraySubscriptExpr 0x22150b46a30 <col:39, col:60> 'felem':'limb [9]' lvalue
|   | |     |-ImplicitCastExpr 0x22150b46a18 <col:39, col:57> 'felem *' <ArrayToPointerDecay>
|   | |     | `-ArraySubscriptExpr 0x22150b469d0 <col:39, col:57> 'felem [3]' lvalue
|   | |     |   |-ImplicitCastExpr 0x22150b469b8 <col:39, col:44> 'felem (*)[3]' <ArrayToPointerDecay>
|   | |     |   | `-MemberExpr 0x22150b46960 <col:39, col:44> 'felem [16][3]' lvalue ->g_pre_comp 0x22150b3bf38
|   | |     |   |   `-ImplicitCastExpr 0x22150b46948 <col:39> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   | |     |   |     `-DeclRefExpr 0x22150b46928 <col:39> 'NISTP521_PRE_COMP *' lvalue Var 0x22150b42ca0 'pre' 'NISTP521_PRE_COMP *'
|   | |     |   `-IntegerLiteral 0x22150b46990 <col:55> 'int' 12
|   | |     `-IntegerLiteral 0x22150b469f0 <col:59> 'int' 2
|   | |-IntegerLiteral 0x22150b46a50 <line:2109:15> 'int' 0
|   | |-ImplicitCastExpr 0x22150b36f00 <col:18, col:38> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x22150b36ee8 <col:18, col:38> 'limb *' <ArrayToPointerDecay>
|   | |   `-ArraySubscriptExpr 0x22150b46b80 <col:18, col:38> 'felem':'limb [9]' lvalue
|   | |     |-ImplicitCastExpr 0x22150b46b68 <col:18, col:35> 'felem *' <ArrayToPointerDecay>
|   | |     | `-ArraySubscriptExpr 0x22150b46b20 <col:18, col:35> 'felem [3]' lvalue
|   | |     |   |-ImplicitCastExpr 0x22150b46b08 <col:18, col:23> 'felem (*)[3]' <ArrayToPointerDecay>
|   | |     |   | `-MemberExpr 0x22150b46ab0 <col:18, col:23> 'felem [16][3]' lvalue ->g_pre_comp 0x22150b3bf38
|   | |     |   |   `-ImplicitCastExpr 0x22150b46a98 <col:18> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   | |     |   |     `-DeclRefExpr 0x22150b46a78 <col:18> 'NISTP521_PRE_COMP *' lvalue Var 0x22150b42ca0 'pre' 'NISTP521_PRE_COMP *'
|   | |     |   `-IntegerLiteral 0x22150b46ae0 <col:34> 'int' 2
|   | |     `-IntegerLiteral 0x22150b46b40 <col:37> 'int' 0
|   | |-ImplicitCastExpr 0x22150b36f30 <col:41, col:61> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x22150b36f18 <col:41, col:61> 'limb *' <ArrayToPointerDecay>
|   | |   `-ArraySubscriptExpr 0x22150b46ca8 <col:41, col:61> 'felem':'limb [9]' lvalue
|   | |     |-ImplicitCastExpr 0x22150b46c90 <col:41, col:58> 'felem *' <ArrayToPointerDecay>
|   | |     | `-ArraySubscriptExpr 0x22150b46c48 <col:41, col:58> 'felem [3]' lvalue
|   | |     |   |-ImplicitCastExpr 0x22150b46c30 <col:41, col:46> 'felem (*)[3]' <ArrayToPointerDecay>
|   | |     |   | `-MemberExpr 0x22150b46bd8 <col:41, col:46> 'felem [16][3]' lvalue ->g_pre_comp 0x22150b3bf38
|   | |     |   |   `-ImplicitCastExpr 0x22150b46bc0 <col:41> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   | |     |   |     `-DeclRefExpr 0x22150b46ba0 <col:41> 'NISTP521_PRE_COMP *' lvalue Var 0x22150b42ca0 'pre' 'NISTP521_PRE_COMP *'
|   | |     |   `-IntegerLiteral 0x22150b46c08 <col:57> 'int' 2
|   | |     `-IntegerLiteral 0x22150b46c68 <col:60> 'int' 1
|   | `-ImplicitCastExpr 0x22150b36f60 <line:2110:15, col:35> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x22150b36f48 <col:15, col:35> 'limb *' <ArrayToPointerDecay>
|   |     `-ArraySubscriptExpr 0x22150b46dd0 <col:15, col:35> 'felem':'limb [9]' lvalue
|   |       |-ImplicitCastExpr 0x22150b46db8 <col:15, col:32> 'felem *' <ArrayToPointerDecay>
|   |       | `-ArraySubscriptExpr 0x22150b46d70 <col:15, col:32> 'felem [3]' lvalue
|   |       |   |-ImplicitCastExpr 0x22150b46d58 <col:15, col:20> 'felem (*)[3]' <ArrayToPointerDecay>
|   |       |   | `-MemberExpr 0x22150b46d00 <col:15, col:20> 'felem [16][3]' lvalue ->g_pre_comp 0x22150b3bf38
|   |       |   |   `-ImplicitCastExpr 0x22150b46ce8 <col:15> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   |       |   |     `-DeclRefExpr 0x22150b46cc8 <col:15> 'NISTP521_PRE_COMP *' lvalue Var 0x22150b42ca0 'pre' 'NISTP521_PRE_COMP *'
|   |       |   `-IntegerLiteral 0x22150b46d30 <col:31> 'int' 2
|   |       `-IntegerLiteral 0x22150b46d90 <col:34> 'int' 2
|   |-ForStmt 0x22150b38038 <line:2111:5, line:2119:5>
|   | |-BinaryOperator 0x22150b36fc0 <line:2111:10, col:14> 'int' '='
|   | | |-DeclRefExpr 0x22150b36f78 <col:10> 'int' lvalue Var 0x22150b42dd8 'i' 'int'
|   | | `-IntegerLiteral 0x22150b36f98 <col:14> 'int' 1
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x22150b37040 <col:17, col:21> 'int' '<'
|   | | |-ImplicitCastExpr 0x22150b37028 <col:17> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x22150b36fe0 <col:17> 'int' lvalue Var 0x22150b42dd8 'i' 'int'
|   | | `-IntegerLiteral 0x22150b37000 <col:21> 'int' 8
|   | |-UnaryOperator 0x22150b37080 <col:24, col:26> 'int' prefix '++'
|   | | `-DeclRefExpr 0x22150b37060 <col:26> 'int' lvalue Var 0x22150b42dd8 'i' 'int'
|   | `-CompoundStmt 0x22150b38020 <col:29, line:2119:5>
|   |   `-CallExpr 0x22150b37e48 <line:2113:9, line:2118:40> 'void'
|   |     |-ImplicitCastExpr 0x22150b37e30 <line:2113:9> 'void (*)(limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x22150b37098 <col:9> 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const limb *, const limb *, const limb *)' Function 0x22150a3d308 'point_add' 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const limb *, const limb *, const limb *)'
|   |     |-ImplicitCastExpr 0x22150b37eb8 <col:19, col:47> 'limb *' <ArrayToPointerDecay>
|   |     | `-ArraySubscriptExpr 0x22150b37260 <col:19, col:47> 'felem':'limb [9]' lvalue
|   |     |   |-ImplicitCastExpr 0x22150b37248 <col:19, col:44> 'felem *' <ArrayToPointerDecay>
|   |     |   | `-ArraySubscriptExpr 0x22150b37200 <col:19, col:44> 'felem [3]' lvalue
|   |     |   |   |-ImplicitCastExpr 0x22150b371e8 <col:19, col:24> 'felem (*)[3]' <ArrayToPointerDecay>
|   |     |   |   | `-MemberExpr 0x22150b370f0 <col:19, col:24> 'felem [16][3]' lvalue ->g_pre_comp 0x22150b3bf38
|   |     |   |   |   `-ImplicitCastExpr 0x22150b370d8 <col:19> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   |     |   |   |     `-DeclRefExpr 0x22150b370b8 <col:19> 'NISTP521_PRE_COMP *' lvalue Var 0x22150b42ca0 'pre' 'NISTP521_PRE_COMP *'
|   |     |   |   `-BinaryOperator 0x22150b371c8 <col:35, col:43> 'int' '+'
|   |     |   |     |-BinaryOperator 0x22150b37180 <col:35, col:39> 'int' '*'
|   |     |   |     | |-IntegerLiteral 0x22150b37120 <col:35> 'int' 2
|   |     |   |     | `-ImplicitCastExpr 0x22150b37168 <col:39> 'int' <LValueToRValue>
|   |     |   |     |   `-DeclRefExpr 0x22150b37148 <col:39> 'int' lvalue Var 0x22150b42dd8 'i' 'int'
|   |     |   |     `-IntegerLiteral 0x22150b371a0 <col:43> 'int' 1
|   |     |   `-IntegerLiteral 0x22150b37220 <col:46> 'int' 0
|   |     |-ImplicitCastExpr 0x22150b37ed0 <line:2114:19, col:47> 'limb *' <ArrayToPointerDecay>
|   |     | `-ArraySubscriptExpr 0x22150b37428 <col:19, col:47> 'felem':'limb [9]' lvalue
|   |     |   |-ImplicitCastExpr 0x22150b37410 <col:19, col:44> 'felem *' <ArrayToPointerDecay>
|   |     |   | `-ArraySubscriptExpr 0x22150b373c8 <col:19, col:44> 'felem [3]' lvalue
|   |     |   |   |-ImplicitCastExpr 0x22150b373b0 <col:19, col:24> 'felem (*)[3]' <ArrayToPointerDecay>
|   |     |   |   | `-MemberExpr 0x22150b372b8 <col:19, col:24> 'felem [16][3]' lvalue ->g_pre_comp 0x22150b3bf38
|   |     |   |   |   `-ImplicitCastExpr 0x22150b372a0 <col:19> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   |     |   |   |     `-DeclRefExpr 0x22150b37280 <col:19> 'NISTP521_PRE_COMP *' lvalue Var 0x22150b42ca0 'pre' 'NISTP521_PRE_COMP *'
|   |     |   |   `-BinaryOperator 0x22150b37390 <col:35, col:43> 'int' '+'
|   |     |   |     |-BinaryOperator 0x22150b37348 <col:35, col:39> 'int' '*'
|   |     |   |     | |-IntegerLiteral 0x22150b372e8 <col:35> 'int' 2
|   |     |   |     | `-ImplicitCastExpr 0x22150b37330 <col:39> 'int' <LValueToRValue>
|   |     |   |     |   `-DeclRefExpr 0x22150b37310 <col:39> 'int' lvalue Var 0x22150b42dd8 'i' 'int'
|   |     |   |     `-IntegerLiteral 0x22150b37368 <col:43> 'int' 1
|   |     |   `-IntegerLiteral 0x22150b373e8 <col:46> 'int' 1
|   |     |-ImplicitCastExpr 0x22150b37ee8 <line:2115:19, col:47> 'limb *' <ArrayToPointerDecay>
|   |     | `-ArraySubscriptExpr 0x22150b375f0 <col:19, col:47> 'felem':'limb [9]' lvalue
|   |     |   |-ImplicitCastExpr 0x22150b375d8 <col:19, col:44> 'felem *' <ArrayToPointerDecay>
|   |     |   | `-ArraySubscriptExpr 0x22150b37590 <col:19, col:44> 'felem [3]' lvalue
|   |     |   |   |-ImplicitCastExpr 0x22150b37578 <col:19, col:24> 'felem (*)[3]' <ArrayToPointerDecay>
|   |     |   |   | `-MemberExpr 0x22150b37480 <col:19, col:24> 'felem [16][3]' lvalue ->g_pre_comp 0x22150b3bf38
|   |     |   |   |   `-ImplicitCastExpr 0x22150b37468 <col:19> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   |     |   |   |     `-DeclRefExpr 0x22150b37448 <col:19> 'NISTP521_PRE_COMP *' lvalue Var 0x22150b42ca0 'pre' 'NISTP521_PRE_COMP *'
|   |     |   |   `-BinaryOperator 0x22150b37558 <col:35, col:43> 'int' '+'
|   |     |   |     |-BinaryOperator 0x22150b37510 <col:35, col:39> 'int' '*'
|   |     |   |     | |-IntegerLiteral 0x22150b374b0 <col:35> 'int' 2
|   |     |   |     | `-ImplicitCastExpr 0x22150b374f8 <col:39> 'int' <LValueToRValue>
|   |     |   |     |   `-DeclRefExpr 0x22150b374d8 <col:39> 'int' lvalue Var 0x22150b42dd8 'i' 'int'
|   |     |   |     `-IntegerLiteral 0x22150b37530 <col:43> 'int' 1
|   |     |   `-IntegerLiteral 0x22150b375b0 <col:46> 'int' 2
|   |     |-ImplicitCastExpr 0x22150b37f18 <col:50, col:74> 'const limb *':'const limb *' <NoOp>
|   |     | `-ImplicitCastExpr 0x22150b37f00 <col:50, col:74> 'limb *' <ArrayToPointerDecay>
|   |     |   `-ArraySubscriptExpr 0x22150b37770 <col:50, col:74> 'felem':'limb [9]' lvalue
|   |     |     |-ImplicitCastExpr 0x22150b37758 <col:50, col:71> 'felem *' <ArrayToPointerDecay>
|   |     |     | `-ArraySubscriptExpr 0x22150b37710 <col:50, col:71> 'felem [3]' lvalue
|   |     |     |   |-ImplicitCastExpr 0x22150b376f8 <col:50, col:55> 'felem (*)[3]' <ArrayToPointerDecay>
|   |     |     |   | `-MemberExpr 0x22150b37648 <col:50, col:55> 'felem [16][3]' lvalue ->g_pre_comp 0x22150b3bf38
|   |     |     |   |   `-ImplicitCastExpr 0x22150b37630 <col:50> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   |     |     |   |     `-DeclRefExpr 0x22150b37610 <col:50> 'NISTP521_PRE_COMP *' lvalue Var 0x22150b42ca0 'pre' 'NISTP521_PRE_COMP *'
|   |     |     |   `-BinaryOperator 0x22150b376d8 <col:66, col:70> 'int' '*'
|   |     |     |     |-IntegerLiteral 0x22150b37678 <col:66> 'int' 2
|   |     |     |     `-ImplicitCastExpr 0x22150b376c0 <col:70> 'int' <LValueToRValue>
|   |     |     |       `-DeclRefExpr 0x22150b376a0 <col:70> 'int' lvalue Var 0x22150b42dd8 'i' 'int'
|   |     |     `-IntegerLiteral 0x22150b37730 <col:73> 'int' 0
|   |     |-ImplicitCastExpr 0x22150b37f48 <line:2116:19, col:43> 'const limb *':'const limb *' <NoOp>
|   |     | `-ImplicitCastExpr 0x22150b37f30 <col:19, col:43> 'limb *' <ArrayToPointerDecay>
|   |     |   `-ArraySubscriptExpr 0x22150b378f0 <col:19, col:43> 'felem':'limb [9]' lvalue
|   |     |     |-ImplicitCastExpr 0x22150b378d8 <col:19, col:40> 'felem *' <ArrayToPointerDecay>
|   |     |     | `-ArraySubscriptExpr 0x22150b37890 <col:19, col:40> 'felem [3]' lvalue
|   |     |     |   |-ImplicitCastExpr 0x22150b37878 <col:19, col:24> 'felem (*)[3]' <ArrayToPointerDecay>
|   |     |     |   | `-MemberExpr 0x22150b377c8 <col:19, col:24> 'felem [16][3]' lvalue ->g_pre_comp 0x22150b3bf38
|   |     |     |   |   `-ImplicitCastExpr 0x22150b377b0 <col:19> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   |     |     |   |     `-DeclRefExpr 0x22150b37790 <col:19> 'NISTP521_PRE_COMP *' lvalue Var 0x22150b42ca0 'pre' 'NISTP521_PRE_COMP *'
|   |     |     |   `-BinaryOperator 0x22150b37858 <col:35, col:39> 'int' '*'
|   |     |     |     |-IntegerLiteral 0x22150b377f8 <col:35> 'int' 2
|   |     |     |     `-ImplicitCastExpr 0x22150b37840 <col:39> 'int' <LValueToRValue>
|   |     |     |       `-DeclRefExpr 0x22150b37820 <col:39> 'int' lvalue Var 0x22150b42dd8 'i' 'int'
|   |     |     `-IntegerLiteral 0x22150b378b0 <col:42> 'int' 1
|   |     |-ImplicitCastExpr 0x22150b37f78 <col:46, col:70> 'const limb *':'const limb *' <NoOp>
|   |     | `-ImplicitCastExpr 0x22150b37f60 <col:46, col:70> 'limb *' <ArrayToPointerDecay>
|   |     |   `-ArraySubscriptExpr 0x22150b37a70 <col:46, col:70> 'felem':'limb [9]' lvalue
|   |     |     |-ImplicitCastExpr 0x22150b37a58 <col:46, col:67> 'felem *' <ArrayToPointerDecay>
|   |     |     | `-ArraySubscriptExpr 0x22150b37a10 <col:46, col:67> 'felem [3]' lvalue
|   |     |     |   |-ImplicitCastExpr 0x22150b379f8 <col:46, col:51> 'felem (*)[3]' <ArrayToPointerDecay>
|   |     |     |   | `-MemberExpr 0x22150b37948 <col:46, col:51> 'felem [16][3]' lvalue ->g_pre_comp 0x22150b3bf38
|   |     |     |   |   `-ImplicitCastExpr 0x22150b37930 <col:46> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   |     |     |   |     `-DeclRefExpr 0x22150b37910 <col:46> 'NISTP521_PRE_COMP *' lvalue Var 0x22150b42ca0 'pre' 'NISTP521_PRE_COMP *'
|   |     |     |   `-BinaryOperator 0x22150b379d8 <col:62, col:66> 'int' '*'
|   |     |     |     |-IntegerLiteral 0x22150b37978 <col:62> 'int' 2
|   |     |     |     `-ImplicitCastExpr 0x22150b379c0 <col:66> 'int' <LValueToRValue>
|   |     |     |       `-DeclRefExpr 0x22150b379a0 <col:66> 'int' lvalue Var 0x22150b42dd8 'i' 'int'
|   |     |     `-IntegerLiteral 0x22150b37a30 <col:69> 'int' 2
|   |     |-IntegerLiteral 0x22150b37a90 <col:73> 'int' 0
|   |     |-ImplicitCastExpr 0x22150b37fa8 <line:2117:19, col:39> 'const limb *':'const limb *' <NoOp>
|   |     | `-ImplicitCastExpr 0x22150b37f90 <col:19, col:39> 'limb *' <ArrayToPointerDecay>
|   |     |   `-ArraySubscriptExpr 0x22150b37bc0 <col:19, col:39> 'felem':'limb [9]' lvalue
|   |     |     |-ImplicitCastExpr 0x22150b37ba8 <col:19, col:36> 'felem *' <ArrayToPointerDecay>
|   |     |     | `-ArraySubscriptExpr 0x22150b37b60 <col:19, col:36> 'felem [3]' lvalue
|   |     |     |   |-ImplicitCastExpr 0x22150b37b48 <col:19, col:24> 'felem (*)[3]' <ArrayToPointerDecay>
|   |     |     |   | `-MemberExpr 0x22150b37af0 <col:19, col:24> 'felem [16][3]' lvalue ->g_pre_comp 0x22150b3bf38
|   |     |     |   |   `-ImplicitCastExpr 0x22150b37ad8 <col:19> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   |     |     |   |     `-DeclRefExpr 0x22150b37ab8 <col:19> 'NISTP521_PRE_COMP *' lvalue Var 0x22150b42ca0 'pre' 'NISTP521_PRE_COMP *'
|   |     |     |   `-IntegerLiteral 0x22150b37b20 <col:35> 'int' 1
|   |     |     `-IntegerLiteral 0x22150b37b80 <col:38> 'int' 0
|   |     |-ImplicitCastExpr 0x22150b37fd8 <col:42, col:62> 'const limb *':'const limb *' <NoOp>
|   |     | `-ImplicitCastExpr 0x22150b37fc0 <col:42, col:62> 'limb *' <ArrayToPointerDecay>
|   |     |   `-ArraySubscriptExpr 0x22150b37ce8 <col:42, col:62> 'felem':'limb [9]' lvalue
|   |     |     |-ImplicitCastExpr 0x22150b37cd0 <col:42, col:59> 'felem *' <ArrayToPointerDecay>
|   |     |     | `-ArraySubscriptExpr 0x22150b37c88 <col:42, col:59> 'felem [3]' lvalue
|   |     |     |   |-ImplicitCastExpr 0x22150b37c70 <col:42, col:47> 'felem (*)[3]' <ArrayToPointerDecay>
|   |     |     |   | `-MemberExpr 0x22150b37c18 <col:42, col:47> 'felem [16][3]' lvalue ->g_pre_comp 0x22150b3bf38
|   |     |     |   |   `-ImplicitCastExpr 0x22150b37c00 <col:42> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   |     |     |   |     `-DeclRefExpr 0x22150b37be0 <col:42> 'NISTP521_PRE_COMP *' lvalue Var 0x22150b42ca0 'pre' 'NISTP521_PRE_COMP *'
|   |     |     |   `-IntegerLiteral 0x22150b37c48 <col:58> 'int' 1
|   |     |     `-IntegerLiteral 0x22150b37ca8 <col:61> 'int' 1
|   |     `-ImplicitCastExpr 0x22150b38008 <line:2118:19, col:39> 'const limb *':'const limb *' <NoOp>
|   |       `-ImplicitCastExpr 0x22150b37ff0 <col:19, col:39> 'limb *' <ArrayToPointerDecay>
|   |         `-ArraySubscriptExpr 0x22150b37e10 <col:19, col:39> 'felem':'limb [9]' lvalue
|   |           |-ImplicitCastExpr 0x22150b37df8 <col:19, col:36> 'felem *' <ArrayToPointerDecay>
|   |           | `-ArraySubscriptExpr 0x22150b37db0 <col:19, col:36> 'felem [3]' lvalue
|   |           |   |-ImplicitCastExpr 0x22150b37d98 <col:19, col:24> 'felem (*)[3]' <ArrayToPointerDecay>
|   |           |   | `-MemberExpr 0x22150b37d40 <col:19, col:24> 'felem [16][3]' lvalue ->g_pre_comp 0x22150b3bf38
|   |           |   |   `-ImplicitCastExpr 0x22150b37d28 <col:19> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   |           |   |     `-DeclRefExpr 0x22150b37d08 <col:19> 'NISTP521_PRE_COMP *' lvalue Var 0x22150b42ca0 'pre' 'NISTP521_PRE_COMP *'
|   |           |   `-IntegerLiteral 0x22150b37d70 <col:35> 'int' 1
|   |           `-IntegerLiteral 0x22150b37dd0 <col:38> 'int' 2
|   |-CallExpr 0x22150b38208 <line:2120:5, col:61> 'void'
|   | |-ImplicitCastExpr 0x22150b381f0 <col:5> 'void (*)(size_t, felem (*)[3], felem *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150b38070 <col:5> 'void (size_t, felem (*)[3], felem *)' Function 0x22150b33518 'make_points_affine' 'void (size_t, felem (*)[3], felem *)'
|   | |-ImplicitCastExpr 0x22150b38240 <col:24> 'size_t':'unsigned long long' <IntegralCast>
|   | | `-IntegerLiteral 0x22150b38090 <col:24> 'int' 15
|   | |-UnaryOperator 0x22150b381a0 <col:28, col:48> 'felem (*)[3]' prefix '&' cannot overflow
|   | | `-ParenExpr 0x22150b38180 <col:29, col:48> 'felem [3]' lvalue
|   | |   `-ArraySubscriptExpr 0x22150b38160 <col:30, col:47> 'felem [3]' lvalue
|   | |     |-ImplicitCastExpr 0x22150b38148 <col:30, col:35> 'felem (*)[3]' <ArrayToPointerDecay>
|   | |     | `-MemberExpr 0x22150b380f0 <col:30, col:35> 'felem [16][3]' lvalue ->g_pre_comp 0x22150b3bf38
|   | |     |   `-ImplicitCastExpr 0x22150b380d8 <col:30> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   | |     |     `-DeclRefExpr 0x22150b380b8 <col:30> 'NISTP521_PRE_COMP *' lvalue Var 0x22150b42ca0 'pre' 'NISTP521_PRE_COMP *'
|   | |     `-IntegerLiteral 0x22150b38120 <col:46> 'int' 1
|   | `-ImplicitCastExpr 0x22150b38258 <col:51> 'felem *' <ArrayToPointerDecay>
|   |   `-DeclRefExpr 0x22150b381b8 <col:51> 'felem [16]' lvalue Var 0x22150b35078 'tmp_felems' 'felem [16]'
|   |-LabelStmt 0x22150b382b8 <line:2122:2, col:6> 'done'
|   | `-NullStmt 0x22150b382b0 <col:6>
|   |-BinaryOperator 0x22150b38330 <line:2124:5, col:11> 'int' '='
|   | |-DeclRefExpr 0x22150b382d0 <col:5> 'int' lvalue Var 0x22150b42be8 'ret' 'int'
|   | `-IntegerLiteral 0x22150b38308 <col:11> 'int' 1
|   |-BinaryOperator 0x22150b38410 <line:2125:5, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27> 'NISTP521_PRE_COMP *' '='
|   | |-DeclRefExpr 0x22150b38350 <.//openssl//file_jk/before\crypto\ec\ecp_nistp521.c:2125:5> 'NISTP521_PRE_COMP *' lvalue Var 0x22150b42ca0 'pre' 'NISTP521_PRE_COMP *'
|   | `-ImplicitCastExpr 0x22150b383f8 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'NISTP521_PRE_COMP *' <NullToPointer>
|   |   `-ParenExpr 0x22150b383d8 <col:17, col:27> 'void *'
|   |     `-CStyleCastExpr 0x22150b383b0 <col:18, col:26> 'void *' <NullToPointer>
|   |       `-IntegerLiteral 0x22150b38370 <col:26> 'int' 0
|   |-LabelStmt 0x22150b38458 <.//openssl//file_jk/before\crypto\ec\ecp_nistp521.c:2126:2, col:5> 'err'
|   | `-NullStmt 0x22150b38450 <col:5>
|   |-CallExpr 0x22150b38560 <line:2130:5, col:34> 'void'
|   | |-ImplicitCastExpr 0x22150b38548 <col:5> 'void (*)(NISTP521_PRE_COMP *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x22150b384b0 <col:5> 'void (NISTP521_PRE_COMP *)' Function 0x22150b31668 'EC_nistp521_pre_comp_free' 'void (NISTP521_PRE_COMP *)'
|   | `-ImplicitCastExpr 0x22150b38588 <col:31> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   |   `-DeclRefExpr 0x22150b384d0 <col:31> 'NISTP521_PRE_COMP *' lvalue Var 0x22150b42ca0 'pre' 'NISTP521_PRE_COMP *'
|   `-ReturnStmt 0x22150b385d8 <line:2131:5, col:12>
|     `-ImplicitCastExpr 0x22150b385c0 <col:12> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x22150b385a0 <col:12> 'int' lvalue Var 0x22150b42be8 'ret' 'int'
`-FunctionDecl 0x22150b38778 <line:2134:1, line:2137:1> line:2134:5 invalid ec_GFp_nistp521_have_precompute_mult 'int (const int *)'
  |-ParmVarDecl 0x22150b386e0 <col:42, col:58> col:58 invalid group 'const int *'
  `-CompoundStmt 0x22150b388e0 <line:2135:1, line:2137:1>
