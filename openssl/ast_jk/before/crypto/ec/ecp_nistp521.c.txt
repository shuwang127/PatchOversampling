TranslationUnitDecl 0x26de92ece98 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x26de92ed730 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x26de92ed430 '__int128'
|-TypedefDecl 0x26de92ed7a0 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x26de92ed450 'unsigned __int128'
|-TypedefDecl 0x26de92edad8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x26de92ed890 'struct __NSConstantString_tag'
|   `-Record 0x26de92ed7f8 '__NSConstantString_tag'
|-TypedefDecl 0x26de92edb48 <<invalid sloc>> <invalid sloc> implicit size_t 'unsigned long long'
| `-BuiltinType 0x26de92ed070 'unsigned long long'
|-TypedefDecl 0x26de92edbe0 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x26de92edba0 'char *'
|   `-BuiltinType 0x26de92ecf30 'char'
|-TypedefDecl 0x26de92edc50 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x26de92edba0 'char *'
|   `-BuiltinType 0x26de92ecf30 'char'
|-TypedefDecl 0x26de92edd10 <D:\Microsoft Visual Studio 12.0\VC\include\vadefs.h:48:1, col:29> col:29 referenced uintptr_t 'unsigned long long'
| `-BuiltinType 0x26de92ed070 'unsigned long long'
|-TypedefDecl 0x26de92edd80 <line:59:1, col:17> col:17 referenced va_list 'char *'
| `-PointerType 0x26de92edba0 'char *'
|   `-BuiltinType 0x26de92ecf30 'char'
|-FunctionDecl 0x26de94e5470 <line:119:21> col:21 implicit __va_start 'void (char **, ...)' extern
| |-ParmVarDecl 0x26de94e5510 <<invalid sloc>> <invalid sloc> 'char **'
| `-NoThrowAttr 0x26de94e5580 <col:21> Implicit
|-FunctionDecl 0x26de94e55d8 prev 0x26de94e5470 <col:1, col:46> col:21 __va_start 'void (char **, ...)' extern
| |-ParmVarDecl 0x26de94e5300 <col:32, col:40> col:41 'va_list *'
| `-NoThrowAttr 0x26de94e56c8 <col:21> Inherited Implicit
|-TypedefDecl 0x26de94e5708 prev 0x26de92edb48 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:494:1, col:29> col:29 referenced size_t 'unsigned long long'
| `-BuiltinType 0x26de92ed070 'unsigned long long'
|-TypedefDecl 0x26de94e57b0 <line:503:1, col:16> col:16 referenced rsize_t 'size_t':'unsigned long long'
| `-TypedefType 0x26de94e5780 'size_t' sugar
|   |-Typedef 0x26de94e5708 'size_t'
|   `-BuiltinType 0x26de92ed070 'unsigned long long'
|-TypedefDecl 0x26de94e5820 <line:510:1, col:29> col:29 intptr_t 'long long'
| `-BuiltinType 0x26de92ecfd0 'long long'
|-TypedefDecl 0x26de94e5890 <line:528:1, col:29> col:29 ptrdiff_t 'long long'
| `-BuiltinType 0x26de92ecfd0 'long long'
|-TypedefDecl 0x26de94e5900 <line:536:1, col:24> col:24 referenced wchar_t 'unsigned short'
| `-BuiltinType 0x26de92ed010 'unsigned short'
|-TypedefDecl 0x26de94e5970 <line:541:1, col:24> col:24 wint_t 'unsigned short'
| `-BuiltinType 0x26de92ed010 'unsigned short'
|-TypedefDecl 0x26de94e59e0 <line:542:1, col:24> col:24 wctype_t 'unsigned short'
| `-BuiltinType 0x26de92ed010 'unsigned short'
|-TypedefDecl 0x26de94e5a50 <line:563:1, col:13> col:13 referenced errno_t 'int'
| `-BuiltinType 0x26de92ecf90 'int'
|-TypedefDecl 0x26de94e5ac0 <line:567:1, col:19> col:19 __time32_t 'long'
| `-BuiltinType 0x26de92ecfb0 'long'
|-TypedefDecl 0x26de94e5b30 <line:572:1, col:17> col:17 referenced __time64_t 'long long'
| `-BuiltinType 0x26de92ecfd0 'long long'
|-TypedefDecl 0x26de94e5bc0 <line:580:1, col:20> col:20 time_t '__time64_t':'long long'
| `-TypedefType 0x26de94e5b90 '__time64_t' sugar
|   |-Typedef 0x26de94e5b30 '__time64_t'
|   `-BuiltinType 0x26de92ecfd0 'long long'
|-FunctionDecl 0x26de94e5d38 <line:637:10, col:53> col:23 _invalid_parameter_noinfo 'void (void) __attribute__((cdecl))':'void (void)'
|-FunctionDecl 0x26de94e5f58 <line:638:10, col:83> col:44 _invalid_parameter_noinfo_noreturn 'void (void) __attribute__((noreturn)) __attribute__((cdecl))':'void (void) __attribute__((noreturn))'
|-FunctionDecl 0x26de951c190 <line:641:9, line:642:136> col:14 _invoke_watson 'void (const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t) __attribute__((noreturn)) __attribute__((cdecl))':'void (const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t) __attribute__((noreturn))'
| |-ParmVarDecl 0x26de94e6098 <col:40, col:54> col:55 'const wchar_t *'
| |-ParmVarDecl 0x26de94e6110 <col:68, col:82> col:83 'const wchar_t *'
| |-ParmVarDecl 0x26de94e6188 <col:96, col:110> col:111 'const wchar_t *'
| |-ParmVarDecl 0x26de94e6208 <col:113, col:122> col:125 'unsigned int'
| `-ParmVarDecl 0x26de951bf30 <col:127> col:136 'uintptr_t':'unsigned long long'
|-RecordDecl 0x26de951c270 <line:2072:1, col:8> col:8 struct threadlocaleinfostruct
|-RecordDecl 0x26de951c330 <line:2073:1, col:8> col:8 struct threadmbcinfostruct
|-TypedefDecl 0x26de951c4a0 <line:2074:1, col:41> col:41 referenced pthreadlocinfo 'struct threadlocaleinfostruct *'
| `-PointerType 0x26de951c450 'struct threadlocaleinfostruct *'
|   `-ElaboratedType 0x26de951c3f0 'struct threadlocaleinfostruct' sugar
|     `-RecordType 0x26de951c310 'struct threadlocaleinfostruct'
|       `-Record 0x26de9520f80 'threadlocaleinfostruct'
|-TypedefDecl 0x26de951c5b0 <line:2075:1, col:38> col:38 referenced pthreadmbcinfo 'struct threadmbcinfostruct *'
| `-PointerType 0x26de951c560 'struct threadmbcinfostruct *'
|   `-ElaboratedType 0x26de951c500 'struct threadmbcinfostruct' sugar
|     `-RecordType 0x26de951c3d0 'struct threadmbcinfostruct'
|       `-Record 0x26de951c330 'threadmbcinfostruct'
|-RecordDecl 0x26de951c608 <line:2076:1, col:8> col:8 struct __lc_time_data
|-RecordDecl 0x26de951c6c0 <line:2078:9, line:2082:1> line:2078:16 struct localeinfo_struct definition
| |-MaxFieldAlignmentAttr 0x26de951c780 <<invalid sloc>> Implicit 64
| |-FieldDecl 0x26de951c810 <line:2080:5, col:20> col:20 locinfo 'pthreadlocinfo':'struct threadlocaleinfostruct *'
| `-FieldDecl 0x26de951c8a0 <line:2081:5, col:20> col:20 mbcinfo 'pthreadmbcinfo':'struct threadmbcinfostruct *'
|-TypedefDecl 0x26de951c958 <line:2078:1, line:2082:3> col:3 _locale_tstruct 'struct localeinfo_struct':'struct localeinfo_struct'
| `-ElaboratedType 0x26de951c900 'struct localeinfo_struct' sugar
|   `-RecordType 0x26de951c760 'struct localeinfo_struct'
|     `-Record 0x26de951c6c0 'localeinfo_struct'
|-TypedefDecl 0x26de951ca30 <line:2078:1, line:2082:21> col:21 referenced _locale_t 'struct localeinfo_struct *'
| `-PointerType 0x26de951c9e0 'struct localeinfo_struct *'
|   `-ElaboratedType 0x26de951c900 'struct localeinfo_struct' sugar
|     `-RecordType 0x26de951c760 'struct localeinfo_struct'
|       `-Record 0x26de951c6c0 'localeinfo_struct'
|-RecordDecl 0x26de951caa8 <line:2085:9, line:2090:1> line:2085:16 struct localerefcount definition
| |-MaxFieldAlignmentAttr 0x26de951cb60 <<invalid sloc>> Implicit 64
| |-FieldDecl 0x26de951cbd8 <line:2086:9, col:15> col:15 locale 'char *'
| |-FieldDecl 0x26de951cc98 <line:2087:9, col:18> col:18 wlocale 'wchar_t *'
| |-FieldDecl 0x26de951cd30 <line:2088:9, col:14> col:14 refcount 'int *'
| `-FieldDecl 0x26de951cda0 <line:2089:9, col:14> col:14 wrefcount 'int *'
|-TypedefDecl 0x26de951ce58 <line:2085:1, line:2090:3> col:3 referenced locrefcount 'struct localerefcount':'struct localerefcount'
| `-ElaboratedType 0x26de951ce00 'struct localerefcount' sugar
|   `-RecordType 0x26de951cb40 'struct localerefcount'
|     `-Record 0x26de951caa8 'localerefcount'
|-RecordDecl 0x26de9520f80 prev 0x26de951c270 <line:2092:9, line:2111:1> line:2092:16 struct threadlocaleinfostruct definition
| |-MaxFieldAlignmentAttr 0x26de9521000 <<invalid sloc>> Implicit 64
| |-FieldDecl 0x26de9521078 <line:2093:9, col:13> col:13 refcount 'int'
| |-FieldDecl 0x26de95210e8 <line:2094:9, col:22> col:22 lc_codepage 'unsigned int'
| |-FieldDecl 0x26de9521158 <line:2095:9, col:22> col:22 lc_collate_cp 'unsigned int'
| |-FieldDecl 0x26de95211c8 <line:2096:9, col:22> col:22 lc_time_cp 'unsigned int'
| |-FieldDecl 0x26de9521388 <line:2097:9, col:34> col:21 lc_category 'locrefcount [6]'
| |-FieldDecl 0x26de95213f8 <line:2098:9, col:13> col:13 lc_clike 'int'
| |-FieldDecl 0x26de9521468 <line:2099:9, col:13> col:13 mb_cur_max 'int'
| |-FieldDecl 0x26de95214d8 <line:2100:9, col:15> col:15 lconv_intl_refcount 'int *'
| |-FieldDecl 0x26de9521548 <line:2101:9, col:15> col:15 lconv_num_refcount 'int *'
| |-FieldDecl 0x26de95215b8 <line:2102:9, col:15> col:15 lconv_mon_refcount 'int *'
| |-RecordDecl 0x26de9521610 parent 0x26de92ece98 <line:2103:9, col:16> col:16 struct lconv
| |-FieldDecl 0x26de95217a0 <col:9, col:24> col:24 lconv 'struct lconv *'
| |-FieldDecl 0x26de9521810 <line:2104:9, col:15> col:15 ctype1_refcount 'int *'
| |-FieldDecl 0x26de9521880 <line:2105:9, col:26> col:26 ctype1 'unsigned short *'
| |-FieldDecl 0x26de95218f0 <line:2106:9, col:32> col:32 pctype 'const unsigned short *'
| |-FieldDecl 0x26de9521990 <line:2107:9, col:31> col:31 pclmap 'const unsigned char *'
| |-FieldDecl 0x26de9521a00 <line:2108:9, col:31> col:31 pcumap 'const unsigned char *'
| |-FieldDecl 0x26de9521b10 <line:2109:9, col:33> col:33 lc_time_curr 'struct __lc_time_data *'
| `-FieldDecl 0x26de9521c48 <line:2110:9, col:32> col:19 locale_name 'wchar_t *[6]'
|-TypedefDecl 0x26de9521cf8 <line:2092:1, line:2111:3> col:3 threadlocinfo 'struct threadlocaleinfostruct':'struct threadlocaleinfostruct'
| `-ElaboratedType 0x26de9521ca0 'struct threadlocaleinfostruct' sugar
|   `-RecordType 0x26de951c310 'struct threadlocaleinfostruct'
|     `-Record 0x26de9520f80 'threadlocaleinfostruct'
|-FunctionDecl 0x26de952b230 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:47:9, col:142> col:25 _memccpy 'void *(void *, const void *, int, size_t) __attribute__((cdecl))':'void *(void *, const void *, int, size_t)'
| |-ParmVarDecl 0x26de9521d80 <col:69, col:76> col:76 _Dst 'void *'
| |-ParmVarDecl 0x26de9521e30 <col:87, col:100> col:100 _Src 'const void *'
| |-ParmVarDecl 0x26de9521eb0 <col:111, col:115> col:115 _Val 'int'
| `-ParmVarDecl 0x26de952b020 <col:126, col:133> col:133 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x26de952b5f8 <line:48:54> col:54 implicit memchr 'void *(const void *, int, unsigned long long)' extern
| |-ParmVarDecl 0x26de952b698 <<invalid sloc>> <invalid sloc> 'const void *'
| |-ParmVarDecl 0x26de952b700 <<invalid sloc>> <invalid sloc> 'int'
| `-ParmVarDecl 0x26de952b768 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x26de952b7e8 prev 0x26de952b5f8 <col:38, col:150> col:54 memchr 'void *(const void *, int, unsigned long long)'
| |-ParmVarDecl 0x26de952b320 <col:94, col:107> col:107 _Buf 'const void *'
| |-ParmVarDecl 0x26de952b3a0 <col:119, col:123> col:123 _Val 'int'
| `-ParmVarDecl 0x26de952b418 <col:134, col:141> col:141 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x26de952bba8 <line:49:24, col:162> col:40 _memicmp 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
| |-ParmVarDecl 0x26de952b8d0 <col:77, col:90> col:90 _Buf1 'const void *'
| |-ParmVarDecl 0x26de952b950 <col:125, col:138> col:138 _Buf2 'const void *'
| `-ParmVarDecl 0x26de952b9c8 <col:150, col:157> col:157 _Size 'size_t':'unsigned long long'
|-FunctionDecl 0x26de9529050 <line:50:24, col:192> col:40 _memicmp_l 'int (const void *, const void *, size_t, _locale_t) __attribute__((cdecl))':'int (const void *, const void *, size_t, _locale_t)'
| |-ParmVarDecl 0x26de952bc90 <col:79, col:92> col:92 _Buf1 'const void *'
| |-ParmVarDecl 0x26de952bd10 <col:127, col:140> col:140 _Buf2 'const void *'
| |-ParmVarDecl 0x26de952bd88 <col:152, col:159> col:159 _Size 'size_t':'unsigned long long'
| `-ParmVarDecl 0x26de952be20 <col:175, col:185> col:185 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x26de9529358 <line:51:32> col:32 implicit memcmp 'int (const void *, const void *, unsigned long long)' extern
| |-ParmVarDecl 0x26de95293f8 <<invalid sloc>> <invalid sloc> 'const void *'
| |-ParmVarDecl 0x26de9529460 <<invalid sloc>> <invalid sloc> 'const void *'
| `-ParmVarDecl 0x26de95294c8 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x26de9529548 prev 0x26de9529358 <col:16, col:144> col:32 memcmp 'int (const void *, const void *, unsigned long long)'
| |-ParmVarDecl 0x26de9529140 <col:63, col:76> col:76 _Buf1 'const void *'
| |-ParmVarDecl 0x26de95291c0 <col:107, col:120> col:120 _Buf2 'const void *'
| `-ParmVarDecl 0x26de9529238 <col:132, col:139> col:139 _Size 'size_t':'unsigned long long'
|-FunctionDecl 0x26de9529908 <line:55:17> col:17 implicit used memcpy 'void *(void *, const void *, unsigned long long)' extern
| |-ParmVarDecl 0x26de95299a8 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x26de9529a10 <<invalid sloc>> <invalid sloc> 'const void *'
| `-ParmVarDecl 0x26de9529a78 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x26de9529af8 prev 0x26de9529908 <col:1, col:127> col:17 used memcpy 'void *(void *, const void *, unsigned long long)'
| |-ParmVarDecl 0x26de9529630 <col:54, col:61> col:61 _Dst 'void *'
| |-ParmVarDecl 0x26de95296b0 <col:91, col:104> col:104 _Src 'const void *'
| `-ParmVarDecl 0x26de9529728 <col:115, col:122> col:122 _Size 'size_t':'unsigned long long'
|-FunctionDecl 0x26de952a010 <line:57:9, col:191> col:26 memcpy_s 'errno_t (void *, rsize_t, const void *, rsize_t) __attribute__((cdecl))':'errno_t (void *, rsize_t, const void *, rsize_t)'
| |-ParmVarDecl 0x26de9529c08 <col:82, col:89> col:89 _Dst 'void *'
| |-ParmVarDecl 0x26de9529ca0 <col:100, col:108> col:108 _DstSize 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x26de9529d20 <col:150, col:163> col:163 _Src 'const void *'
| `-ParmVarDecl 0x26de9529d98 <col:174, col:182> col:182 _MaxCount 'rsize_t':'unsigned long long'
|-FunctionDecl 0x26de952a3d8 <line:94:25> col:25 implicit used memset 'void *(void *, int, unsigned long long)' extern
| |-ParmVarDecl 0x26de952a478 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x26de952a4e0 <<invalid sloc>> <invalid sloc> 'int'
| `-ParmVarDecl 0x26de952a548 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x26de952a5c8 prev 0x26de952a3d8 <col:9, col:107> col:25 used memset 'void *(void *, int, unsigned long long)'
| |-ParmVarDecl 0x26de952a100 <col:62, col:69> col:69 _Dst 'void *'
| |-ParmVarDecl 0x26de952a180 <col:80, col:84> col:84 _Val 'int'
| `-ParmVarDecl 0x26de952a1f8 <col:95, col:102> col:102 _Size 'size_t':'unsigned long long'
|-FunctionDecl 0x26de952aa48 <line:98:57> col:57 implicit memccpy 'void *(void *, const void *, int, unsigned long long)' extern
| |-ParmVarDecl 0x26de952aae8 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x26de952ab50 <<invalid sloc>> <invalid sloc> 'const void *'
| |-ParmVarDecl 0x26de952abb8 <<invalid sloc>> <invalid sloc> 'int'
| `-ParmVarDecl 0x26de952ac20 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x26de952aca8 prev 0x26de952aa48 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:98:187> col:57 memccpy 'void *(void *, const void *, int, unsigned long long)'
| |-ParmVarDecl 0x26de952a790 <col:95, col:102> col:102 _Dst 'void *'
| |-ParmVarDecl 0x26de952a810 <col:136, col:149> col:149 _Src 'const void *'
| |-ParmVarDecl 0x26de952a890 <col:160, col:164> col:164 _Val 'int'
| |-ParmVarDecl 0x26de952a908 <col:175, col:182> col:182 _Size 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x26de952ad68 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _memccpy. See online help for details." ""
|-FunctionDecl 0x26de9524148 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:99:190> col:69 memicmp 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
| |-ParmVarDecl 0x26de952af30 <col:105, col:118> col:118 _Buf1 'const void *'
| |-ParmVarDecl 0x26de9523fb0 <col:153, col:166> col:166 _Buf2 'const void *'
| |-ParmVarDecl 0x26de9524028 <col:178, col:185> col:185 _Size 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x26de9524200 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _memicmp. See online help for details." ""
|-FunctionDecl 0x26de95245f0 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:105:40, col:144> col:56 _strset_s 'errno_t (char *, size_t, int) __attribute__((cdecl))':'errno_t (char *, size_t, int)'
| |-ParmVarDecl 0x26de9524328 <col:94, col:101> col:101 _Dst 'char *'
| |-ParmVarDecl 0x26de95243a0 <col:112, col:119> col:119 _DstSize 'size_t':'unsigned long long'
| `-ParmVarDecl 0x26de9524420 <col:134, col:138> col:138 _Value 'int'
|-FunctionDecl 0x26de95249c0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:107:88 _strset 'char *(char *, int) __attribute__((cdecl))':'char *(char *, int)'
| |-ParmVarDecl 0x26de95247d0 <col:108, col:114> col:114 _Dest 'char *'
| |-ParmVarDecl 0x26de9524850 <col:126, col:131> col:131 _Value 'int'
| `-DeprecatedAttr 0x26de9524a70 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _strset_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x26de9524e80 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:109:40, col:158> col:56 strcpy_s 'errno_t (char *, rsize_t, const char *) __attribute__((cdecl))':'errno_t (char *, rsize_t, const char *)'
| |-ParmVarDecl 0x26de9524bb8 <col:94, col:101> col:101 _Dst 'char *'
| |-ParmVarDecl 0x26de9524c30 <col:112, col:120> col:120 _SizeInBytes 'rsize_t':'unsigned long long'
| `-ParmVarDecl 0x26de9524cb0 <col:141, col:154> col:154 _Src 'const char *'
|-FunctionDecl 0x26de952c2f0 <line:112:88> col:88 implicit strcpy 'char *(char *, const char *)' extern
| |-ParmVarDecl 0x26de952c390 <<invalid sloc>> <invalid sloc> 'char *'
| `-ParmVarDecl 0x26de952c3f8 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x26de952c470 prev 0x26de952c2f0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:112:88 strcpy 'char *(char *, const char *)'
| |-ParmVarDecl 0x26de952c108 <col:142, col:148> col:148 _Dest 'char *'
| |-ParmVarDecl 0x26de952c188 <col:162, col:176> col:176 _Source 'const char *'
| `-DeprecatedAttr 0x26de952c520 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using strcpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x26de952c878 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:114:40, col:161> col:56 strcat_s 'errno_t (char *, rsize_t, const char *) __attribute__((cdecl))':'errno_t (char *, rsize_t, const char *)'
| |-ParmVarDecl 0x26de952c668 <col:97, col:104> col:104 _Dst 'char *'
| |-ParmVarDecl 0x26de952c6e0 <col:115, col:123> col:123 _SizeInBytes 'rsize_t':'unsigned long long'
| `-ParmVarDecl 0x26de952c760 <col:144, col:157> col:157 _Src 'const char *'
|-FunctionDecl 0x26de952cba0 <line:118:88> col:88 implicit strcat 'char *(char *, const char *)' extern
| |-ParmVarDecl 0x26de952cc40 <<invalid sloc>> <invalid sloc> 'char *'
| `-ParmVarDecl 0x26de952cca8 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x26de952cd20 prev 0x26de952cba0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:118:88 strcat 'char *(char *, const char *)'
| |-ParmVarDecl 0x26de952ca20 <col:170, col:176> col:176 _Dest 'char *'
| |-ParmVarDecl 0x26de952caa0 <col:190, col:204> col:204 _Source 'const char *'
| `-DeprecatedAttr 0x26de952cdd0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using strcat_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x26de9533170 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:120:32> col:32 implicit strcmp 'int (const char *, const char *)' extern
| |-ParmVarDecl 0x26de9533210 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x26de9533278 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x26de95332f0 prev 0x26de9533170 <col:16, col:91> col:32 strcmp 'int (const char *, const char *)'
| |-ParmVarDecl 0x26de952cf18 <col:46, col:59> col:59 _Str1 'const char *'
| `-ParmVarDecl 0x26de952cf98 <col:73, col:86> col:86 _Str2 'const char *'
|-FunctionDecl 0x26de9533540 <line:121:32> col:32 implicit strlen 'unsigned long long (const char *)' extern
| `-ParmVarDecl 0x26de95335e0 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x26de9533650 prev 0x26de9533540 <col:16, col:63> col:32 strlen 'unsigned long long (const char *)'
| `-ParmVarDecl 0x26de95333d0 <col:46, col:59> col:59 _Str 'const char *'
|-FunctionDecl 0x26de9533948 <line:125:1, col:92> col:17 used strnlen 'size_t (const char *, size_t) __attribute__((cdecl))':'size_t (const char *, size_t)'
| |-ParmVarDecl 0x26de9533728 <col:52, col:65> col:65 _Str 'const char *'
| `-ParmVarDecl 0x26de95337a0 <col:76, col:83> col:83 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x26de9533b98 <line:127:16, line:133:1> line:130:19 strnlen_s 'size_t (const char *, size_t) __attribute__((cdecl))':'size_t (const char *, size_t)' static inline
| |-ParmVarDecl 0x26de9533a28 <col:56, col:69> col:69 used _Str 'const char *'
| |-ParmVarDecl 0x26de9533aa0 <col:80, col:87> col:87 used _MaxCount 'size_t':'unsigned long long'
| `-CompoundStmt 0x26de9533ec8 <line:131:1, line:133:1>
|   `-ReturnStmt 0x26de9533eb8 <line:132:5, col:51>
|     `-ConditionalOperator 0x26de9533e88 <col:12, col:51> 'unsigned long long'
|       |-ParenExpr 0x26de9533cf8 <col:12, col:20> 'int'
|       | `-BinaryOperator 0x26de9533cd8 <col:13, col:19> 'int' '=='
|       |   |-ImplicitCastExpr 0x26de9533ca8 <col:13> 'const char *' <LValueToRValue>
|       |   | `-DeclRefExpr 0x26de9533c60 <col:13> 'const char *' lvalue ParmVar 0x26de9533a28 '_Str' 'const char *'
|       |   `-ImplicitCastExpr 0x26de9533cc0 <col:19> 'const char *' <NullToPointer>
|       |     `-IntegerLiteral 0x26de9533c80 <col:19> 'int' 0
|       |-ImplicitCastExpr 0x26de9533e70 <col:24> 'unsigned long long' <IntegralCast>
|       | `-IntegerLiteral 0x26de9533d18 <col:24> 'int' 0
|       `-CallExpr 0x26de9533e10 <col:28, col:51> 'size_t':'unsigned long long'
|         |-ImplicitCastExpr 0x26de9533df8 <col:28> 'size_t (*)(const char *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x26de9533d40 <col:28> 'size_t (const char *, size_t) __attribute__((cdecl))':'size_t (const char *, size_t)' Function 0x26de9533948 'strnlen' 'size_t (const char *, size_t) __attribute__((cdecl))':'size_t (const char *, size_t)'
|         |-ImplicitCastExpr 0x26de9533e40 <col:36> 'const char *' <LValueToRValue>
|         | `-DeclRefExpr 0x26de9533d60 <col:36> 'const char *' lvalue ParmVar 0x26de9533a28 '_Str' 'const char *'
|         `-ImplicitCastExpr 0x26de9533e58 <col:42> 'size_t':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x26de9533d80 <col:42> 'size_t':'unsigned long long' lvalue ParmVar 0x26de9533aa0 '_MaxCount' 'size_t':'unsigned long long'
|-FunctionDecl 0x26de952e188 <line:136:28, col:209> col:44 memmove_s 'errno_t (void *, rsize_t, const void *, rsize_t) __attribute__((cdecl))':'errno_t (void *, rsize_t, const void *, rsize_t)'
| |-ParmVarDecl 0x26de9533ef8 <col:100, col:107> col:107 _Dst 'void *'
| |-ParmVarDecl 0x26de9533f70 <col:118, col:126> col:126 _DstSize 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x26de9533ff0 <col:168, col:181> col:181 _Src 'const void *'
| `-ParmVarDecl 0x26de952e050 <col:192, col:200> col:200 _MaxCount 'rsize_t':'unsigned long long'
|-FunctionDecl 0x26de952e490 <line:139:67> col:67 implicit memmove 'void *(void *, const void *, unsigned long long)' extern
| |-ParmVarDecl 0x26de952e530 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x26de952e598 <<invalid sloc>> <invalid sloc> 'const void *'
| `-ParmVarDecl 0x26de952e600 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x26de952e680 prev 0x26de952e490 <col:51, col:186> col:67 memmove 'void *(void *, const void *, unsigned long long)'
| |-ParmVarDecl 0x26de952e278 <col:109, col:116> col:116 _Dst 'void *'
| |-ParmVarDecl 0x26de952e2f8 <col:150, col:163> col:163 _Src 'const void *'
| `-ParmVarDecl 0x26de952e370 <col:174, col:181> col:181 _Size 'size_t':'unsigned long long'
|-FunctionDecl 0x26de952e8b8 <line:146:24, col:76> col:40 _strdup 'char *(const char *) __attribute__((cdecl))':'char *(const char *)'
| `-ParmVarDecl 0x26de952e768 <col:59, col:72> col:72 _Src 'const char *'
|-FunctionDecl 0x26de952eb80 <line:152:54> col:54 implicit strchr 'char *(const char *, int)' extern
| |-ParmVarDecl 0x26de952ec20 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x26de952ec88 <<invalid sloc>> <invalid sloc> 'int'
|-FunctionDecl 0x26de952ed00 prev 0x26de952eb80 <col:38, col:100> col:54 strchr 'char *(const char *, int)'
| |-ParmVarDecl 0x26de952e990 <col:68, col:81> col:81 _Str 'const char *'
| `-ParmVarDecl 0x26de952ea10 <col:92, col:96> col:96 _Val 'int'
|-FunctionDecl 0x26de952ef60 <line:153:24, col:103> col:40 _stricmp 'int (const char *, const char *) __attribute__((cdecl))':'int (const char *, const char *)'
| |-ParmVarDecl 0x26de952ede0 <col:57, col:70> col:70 _Str1 'const char *'
| `-ParmVarDecl 0x26de952ee60 <col:85, col:98> col:98 _Str2 'const char *'
|-FunctionDecl 0x26de9534230 <line:154:24, col:103> col:40 _strcmpi 'int (const char *, const char *) __attribute__((cdecl))':'int (const char *, const char *)'
| |-ParmVarDecl 0x26de95340b0 <col:57, col:70> col:70 _Str1 'const char *'
| `-ParmVarDecl 0x26de9534130 <col:85, col:98> col:98 _Str2 'const char *'
|-FunctionDecl 0x26de95345e8 <line:155:24, col:133> col:40 _stricmp_l 'int (const char *, const char *, _locale_t) __attribute__((cdecl))':'int (const char *, const char *, _locale_t)'
| |-ParmVarDecl 0x26de9534310 <col:59, col:72> col:72 _Str1 'const char *'
| |-ParmVarDecl 0x26de9534390 <col:87, col:100> col:100 _Str2 'const char *'
| `-ParmVarDecl 0x26de9534408 <col:116, col:126> col:126 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x26de9534850 <line:156:24, col:103> col:40 strcoll 'int (const char *, const char *) __attribute__((cdecl))':'int (const char *, const char *)'
| |-ParmVarDecl 0x26de95346d0 <col:56, col:69> col:69 _Str1 'const char *'
| `-ParmVarDecl 0x26de9534750 <col:84, col:98> col:98 _Str2 'const char *'
|-FunctionDecl 0x26de9534b48 <line:157:24, col:133> col:40 _strcoll_l 'int (const char *, const char *, _locale_t) __attribute__((cdecl))':'int (const char *, const char *, _locale_t)'
| |-ParmVarDecl 0x26de9534930 <col:59, col:72> col:72 _Str1 'const char *'
| |-ParmVarDecl 0x26de95349b0 <col:87, col:100> col:100 _Str2 'const char *'
| `-ParmVarDecl 0x26de9534a28 <col:116, col:126> col:126 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x26de9534db0 <line:158:24, col:104> col:40 _stricoll 'int (const char *, const char *) __attribute__((cdecl))':'int (const char *, const char *)'
| |-ParmVarDecl 0x26de9534c30 <col:58, col:71> col:71 _Str1 'const char *'
| `-ParmVarDecl 0x26de9534cb0 <col:86, col:99> col:99 _Str2 'const char *'
|-FunctionDecl 0x26de9532090 <line:159:24, col:134> col:40 _stricoll_l 'int (const char *, const char *, _locale_t) __attribute__((cdecl))':'int (const char *, const char *, _locale_t)'
| |-ParmVarDecl 0x26de9534e90 <col:60, col:73> col:73 _Str1 'const char *'
| |-ParmVarDecl 0x26de9534f10 <col:88, col:101> col:101 _Str2 'const char *'
| `-ParmVarDecl 0x26de9534f88 <col:117, col:127> col:127 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x26de9532448 <line:160:24, col:167> col:40 _strncoll 'int (const char *, const char *, size_t) __attribute__((cdecl))':'int (const char *, const char *, size_t)'
| |-ParmVarDecl 0x26de9532178 <col:79, col:92> col:92 _Str1 'const char *'
| |-ParmVarDecl 0x26de95321f8 <col:126, col:139> col:139 _Str2 'const char *'
| `-ParmVarDecl 0x26de9532270 <col:151, col:158> col:158 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x26de95328b0 <line:161:24, col:195> col:40 _strncoll_l 'int (const char *, const char *, size_t, _locale_t) __attribute__((cdecl))':'int (const char *, const char *, size_t, _locale_t)'
| |-ParmVarDecl 0x26de9532530 <col:79, col:92> col:92 _Str1 'const char *'
| |-ParmVarDecl 0x26de95325b0 <col:126, col:139> col:139 _Str2 'const char *'
| |-ParmVarDecl 0x26de9532628 <col:151, col:158> col:158 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x26de95326a0 <col:178, col:188> col:188 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x26de9532bb8 <line:162:24, col:167> col:40 _strnicoll 'int (const char *, const char *, size_t) __attribute__((cdecl))':'int (const char *, const char *, size_t)'
| |-ParmVarDecl 0x26de95329a0 <col:79, col:92> col:92 _Str1 'const char *'
| |-ParmVarDecl 0x26de9532a20 <col:126, col:139> col:139 _Str2 'const char *'
| `-ParmVarDecl 0x26de9532a98 <col:151, col:158> col:158 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x26de9532f50 <line:163:24, col:196> col:40 _strnicoll_l 'int (const char *, const char *, size_t, _locale_t) __attribute__((cdecl))':'int (const char *, const char *, size_t, _locale_t)'
| |-ParmVarDecl 0x26de9532ca0 <col:80, col:93> col:93 _Str1 'const char *'
| |-ParmVarDecl 0x26de9532d20 <col:127, col:140> col:140 _Str2 'const char *'
| |-ParmVarDecl 0x26de9532d98 <col:152, col:159> col:159 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x26de9532e10 <col:179, col:189> col:189 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x26de952f288 <line:164:40> col:40 implicit strcspn 'unsigned long long (const char *, const char *)' extern
| |-ParmVarDecl 0x26de952f328 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x26de952f390 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x26de952f408 prev 0x26de952f288 <col:24, col:104> col:40 strcspn 'unsigned long long (const char *, const char *)'
| |-ParmVarDecl 0x26de952f060 <col:56, col:69> col:69 _Str 'const char *'
| `-ParmVarDecl 0x26de952f0e0 <col:83, col:96> col:96 _Control 'const char *'
|-FunctionDecl 0x26de952f6c0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:165:118> col:77 _strerror 'char *(const char *) __attribute__((cdecl))':'char *(const char *)'
| |-ParmVarDecl 0x26de952f5e0 <col:98, col:111> col:111 _ErrMsg 'const char *'
| `-DeprecatedAttr 0x26de952f768 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _strerror_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x26de952fb40 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:166:28, col:155> col:44 _strerror_s 'errno_t (char *, size_t, const char *) __attribute__((cdecl))':'errno_t (char *, size_t, const char *)'
| |-ParmVarDecl 0x26de952f8b0 <col:85, col:92> col:92 _Buf 'char *'
| |-ParmVarDecl 0x26de952f928 <col:103, col:110> col:110 _SizeInBytes 'size_t':'unsigned long long'
| `-ParmVarDecl 0x26de952f9a8 <col:135, col:148> col:148 _ErrMsg 'const char *'
|-FunctionDecl 0x26de952fe58 <line:168:76> col:76 implicit strerror 'char *(int)' extern
| `-ParmVarDecl 0x26de952fef8 <<invalid sloc>> <invalid sloc> 'int'
|-FunctionDecl 0x26de952ff68 prev 0x26de952fe58 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:168:93> col:76 strerror 'char *(int)'
| |-ParmVarDecl 0x26de952fd20 <col:90> col:93 'int'
| `-DeprecatedAttr 0x26de9530010 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using strerror_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x26de952d350 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:170:28, col:139> col:44 strerror_s 'errno_t (char *, size_t, int) __attribute__((cdecl))':'errno_t (char *, size_t, int)'
| |-ParmVarDecl 0x26de952d140 <col:84, col:91> col:91 _Buf 'char *'
| |-ParmVarDecl 0x26de952d1b8 <col:102, col:109> col:109 _SizeInBytes 'size_t':'unsigned long long'
| `-ParmVarDecl 0x26de952d238 <col:128, col:132> col:132 _ErrNum 'int'
|-FunctionDecl 0x26de952d658 <line:173:28, col:109> col:44 _strlwr_s 'errno_t (char *, size_t) __attribute__((cdecl))':'errno_t (char *, size_t)'
| |-ParmVarDecl 0x26de952d438 <col:79, col:86> col:86 _Str 'char *'
| `-ParmVarDecl 0x26de952d4b0 <col:97, col:104> col:104 _Size 'size_t':'unsigned long long'
|-FunctionDecl 0x26de952d948 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1933:117> D:\Microsoft Visual Studio 12.0\VC\include\string.h:175:79 _strlwr 'char *(char *) __attribute__((cdecl))':'char *(char *)'
| |-ParmVarDecl 0x26de952d7f8 <col:99, col:105> col:105 _String 'char *'
| `-DeprecatedAttr 0x26de952d9f0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _strlwr_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x26de952de00 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:176:28, col:139> col:44 _strlwr_s_l 'errno_t (char *, size_t, _locale_t) __attribute__((cdecl))':'errno_t (char *, size_t, _locale_t)'
| |-ParmVarDecl 0x26de952db38 <col:81, col:88> col:88 _Str 'char *'
| |-ParmVarDecl 0x26de952dbb0 <col:99, col:106> col:106 _Size 'size_t':'unsigned long long'
| `-ParmVarDecl 0x26de952dc28 <col:122, col:132> col:132 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x26de9530220 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:178:82 _strlwr_l 'char *(char *, _locale_t) __attribute__((cdecl))':'char *(char *, _locale_t)'
| |-ParmVarDecl 0x26de952dfa8 <col:148, col:154> col:154 _String 'char *'
| |-ParmVarDecl 0x26de9530070 <col:172, col:183> col:183 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x26de95302d0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _strlwr_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x26de9530788 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:180:40, col:206> col:56 strncat_s 'errno_t (char *, rsize_t, const char *, rsize_t) __attribute__((cdecl))':'errno_t (char *, rsize_t, const char *, rsize_t)'
| |-ParmVarDecl 0x26de9530418 <col:98, col:105> col:105 _Dst 'char *'
| |-ParmVarDecl 0x26de9530490 <col:116, col:124> col:124 _SizeInBytes 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x26de9530510 <col:165, col:178> col:178 _Src 'const char *'
| `-ParmVarDecl 0x26de9530588 <col:189, col:197> col:197 _MaxCount 'rsize_t':'unsigned long long'
|-FunctionDecl 0x26de9530c08 <line:186:83> col:83 implicit strncat 'char *(char *, const char *, unsigned long long)' extern
| |-ParmVarDecl 0x26de9530ca8 <<invalid sloc>> <invalid sloc> 'char *'
| |-ParmVarDecl 0x26de9530d10 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x26de9530d78 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x26de9530df8 prev 0x26de9530c08 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1980:149> D:\Microsoft Visual Studio 12.0\VC\include\string.h:186:83 strncat 'char *(char *, const char *, unsigned long long)'
| |-ParmVarDecl 0x26de9530938 <col:161, col:167> col:167 _Dest 'char *'
| |-ParmVarDecl 0x26de95309b8 <col:198, col:212> col:212 _Source 'const char *'
| |-ParmVarDecl 0x26de9530a30 <col:226, col:234> col:234 _Count 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x26de9530eb0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using strncat_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x26de9535270 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:188:40> col:40 implicit strncmp 'int (const char *, const char *, unsigned long long)' extern
| |-ParmVarDecl 0x26de9535310 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x26de9535378 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x26de95353e0 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x26de9535460 prev 0x26de9535270 <col:24, col:163> col:40 strncmp 'int (const char *, const char *, unsigned long long)'
| |-ParmVarDecl 0x26de9530ff8 <col:75, col:88> col:88 _Str1 'const char *'
| |-ParmVarDecl 0x26de95350d8 <col:122, col:135> col:135 _Str2 'const char *'
| `-ParmVarDecl 0x26de9535150 <col:147, col:154> col:154 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x26de9535760 <line:189:24, col:165> col:40 _strnicmp 'int (const char *, const char *, size_t) __attribute__((cdecl))':'int (const char *, const char *, size_t)'
| |-ParmVarDecl 0x26de9535548 <col:77, col:90> col:90 _Str1 'const char *'
| |-ParmVarDecl 0x26de95355c8 <col:124, col:137> col:137 _Str2 'const char *'
| `-ParmVarDecl 0x26de9535640 <col:149, col:156> col:156 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x26de9535af8 <line:190:24, col:195> col:40 _strnicmp_l 'int (const char *, const char *, size_t, _locale_t) __attribute__((cdecl))':'int (const char *, const char *, size_t, _locale_t)'
| |-ParmVarDecl 0x26de9535848 <col:79, col:92> col:92 _Str1 'const char *'
| |-ParmVarDecl 0x26de95358c8 <col:126, col:139> col:139 _Str2 'const char *'
| |-ParmVarDecl 0x26de9535940 <col:151, col:158> col:158 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x26de95359b8 <col:178, col:188> col:188 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x26de9535e90 <line:192:40, col:203> col:56 strncpy_s 'errno_t (char *, rsize_t, const char *, rsize_t) __attribute__((cdecl))':'errno_t (char *, rsize_t, const char *, rsize_t)'
| |-ParmVarDecl 0x26de9535be8 <col:95, col:102> col:102 _Dst 'char *'
| |-ParmVarDecl 0x26de9535c60 <col:113, col:121> col:121 _SizeInBytes 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x26de9535ce0 <col:162, col:175> col:175 _Src 'const char *'
| `-ParmVarDecl 0x26de9535d58 <col:186, col:194> col:194 _MaxCount 'rsize_t':'unsigned long long'
|-FunctionDecl 0x26de9536268 <line:195:83> col:83 implicit strncpy 'char *(char *, const char *, unsigned long long)' extern
| |-ParmVarDecl 0x26de9536308 <<invalid sloc>> <invalid sloc> 'char *'
| |-ParmVarDecl 0x26de9536370 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x26de95363d8 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x26de9536458 prev 0x26de9536268 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1980:149> D:\Microsoft Visual Studio 12.0\VC\include\string.h:195:83 strncpy 'char *(char *, const char *, unsigned long long)'
| |-ParmVarDecl 0x26de9536040 <col:167, col:173> col:173 _Dest 'char *'
| |-ParmVarDecl 0x26de95360d0 <col:204, col:218> col:218 _Source 'const char *'
| |-ParmVarDecl 0x26de9536148 <col:232, col:240> col:240 _Count 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x26de9536510 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using strncpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x26de95369c8 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:196:40, col:174> col:56 _strnset_s 'errno_t (char *, size_t, int, size_t) __attribute__((cdecl))':'errno_t (char *, size_t, int, size_t)'
| |-ParmVarDecl 0x26de9536658 <col:99, col:106> col:106 _Str 'char *'
| |-ParmVarDecl 0x26de95366d0 <col:117, col:124> col:124 _SizeInBytes 'size_t':'unsigned long long'
| |-ParmVarDecl 0x26de9536750 <col:143, col:147> col:147 _Val 'int'
| `-ParmVarDecl 0x26de95367c8 <col:158, col:165> col:165 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x26de9536e48 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1980:149> D:\Microsoft Visual Studio 12.0\VC\include\string.h:198:83 _strnset 'char *(char *, int, size_t) __attribute__((cdecl))':'char *(char *, int, size_t)'
| |-ParmVarDecl 0x26de9536b78 <col:163, col:169> col:169 _Dest 'char *'
| |-ParmVarDecl 0x26de9536bf8 <col:181, col:186> col:186 _Val 'int'
| |-ParmVarDecl 0x26de9536c70 <col:197, col:205> col:205 _Count 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x26de9536f00 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _strnset_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x26de95b0050 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:199:54> col:54 implicit strpbrk 'char *(const char *, const char *)' extern
| |-ParmVarDecl 0x26de95b00f0 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x26de95b0158 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x26de95b01d0 prev 0x26de95b0050 <col:38, col:116> col:54 strpbrk 'char *(const char *, const char *)'
| |-ParmVarDecl 0x26de9537048 <col:69, col:82> col:82 _Str 'const char *'
| `-ParmVarDecl 0x26de95afee0 <col:95, col:108> col:108 _Control 'const char *'
|-FunctionDecl 0x26de95b0430 <line:200:54> col:54 implicit strrchr 'char *(const char *, int)' extern
| |-ParmVarDecl 0x26de95b04d0 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x26de95b0538 <<invalid sloc>> <invalid sloc> 'int'
|-FunctionDecl 0x26de95b05b0 prev 0x26de95b0430 <col:38, col:100> col:54 strrchr 'char *(const char *, int)'
| |-ParmVarDecl 0x26de95b02b0 <col:69, col:82> col:82 _Str 'const char *'
| `-ParmVarDecl 0x26de95b0330 <col:93, col:97> col:97 _Ch 'int'
|-FunctionDecl 0x26de95b0770 <line:201:9, col:54> col:25 _strrev 'char *(char *) __attribute__((cdecl))':'char *(char *)'
| `-ParmVarDecl 0x26de95b0690 <col:43, col:50> col:50 _Str 'char *'
|-FunctionDecl 0x26de95b09c0 <line:202:40> col:40 implicit strspn 'unsigned long long (const char *, const char *)' extern
| |-ParmVarDecl 0x26de95b0a60 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x26de95b0ac8 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x26de95b0b40 prev 0x26de95b09c0 <col:24, col:101> col:40 strspn 'unsigned long long (const char *, const char *)'
| |-ParmVarDecl 0x26de95b0848 <col:54, col:67> col:67 _Str 'const char *'
| `-ParmVarDecl 0x26de95b08c8 <col:80, col:93> col:93 _Control 'const char *'
|-FunctionDecl 0x26de95b0da0 <line:203:70> col:70 implicit strstr 'char *(const char *, const char *)' extern
| |-ParmVarDecl 0x26de95b0e40 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x26de95b0ef0 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x26de95b0f68 prev 0x26de95b0da0 <col:54, col:130> col:70 strstr 'char *(const char *, const char *)'
| |-ParmVarDecl 0x26de95b0c20 <col:84, col:97> col:97 _Str 'const char *'
| `-ParmVarDecl 0x26de95b0ca0 <col:110, col:123> col:123 _SubStr 'const char *'
|-FunctionDecl 0x26de95b1288 <line:204:74> col:74 implicit strtok 'char *(char *, const char *)' extern
| |-ParmVarDecl 0x26de95b1328 <<invalid sloc>> <invalid sloc> 'char *'
| `-ParmVarDecl 0x26de95b1390 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x26de95b1408 prev 0x26de95b1288 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:204:134> col:74 strtok 'char *(char *, const char *)'
| |-ParmVarDecl 0x26de95b1108 <col:95, col:102> col:102 _Str 'char *'
| |-ParmVarDecl 0x26de95b1188 <col:115, col:128> col:128 _Delim 'const char *'
| `-DeprecatedAttr 0x26de95b14b8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using strtok_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x26de95b1898 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:206:36, col:162> col:52 strtok_s 'char *(char *, const char *, char **) __attribute__((cdecl))':'char *(char *, const char *, char **)'
| |-ParmVarDecl 0x26de95b1600 <col:75, col:82> col:82 _Str 'char *'
| |-ParmVarDecl 0x26de95b1680 <col:95, col:108> col:108 _Delim 'const char *'
| `-ParmVarDecl 0x26de95b1700 <col:146, col:154> col:154 _Context 'char **'
|-FunctionDecl 0x26de95b1af0 <line:208:28, col:109> col:44 _strupr_s 'errno_t (char *, size_t) __attribute__((cdecl))':'errno_t (char *, size_t)'
| |-ParmVarDecl 0x26de95b1980 <col:79, col:86> col:86 _Str 'char *'
| `-ParmVarDecl 0x26de95b19f8 <col:97, col:104> col:104 _Size 'size_t':'unsigned long long'
|-FunctionDecl 0x26de95b1d70 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1933:117> D:\Microsoft Visual Studio 12.0\VC\include\string.h:210:79 _strupr 'char *(char *) __attribute__((cdecl))':'char *(char *)'
| |-ParmVarDecl 0x26de95b1c90 <col:99, col:105> col:105 _String 'char *'
| `-DeprecatedAttr 0x26de95b1e18 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _strupr_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x26de95aa188 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:211:28, col:130> col:44 _strupr_s_l 'errno_t (char *, size_t, _locale_t) __attribute__((cdecl))':'errno_t (char *, size_t, _locale_t)'
| |-ParmVarDecl 0x26de95a9f80 <col:81, col:88> col:88 _Str 'char *'
| |-ParmVarDecl 0x26de95a9ff8 <col:99, col:106> col:106 _Size 'size_t':'unsigned long long'
| `-ParmVarDecl 0x26de95aa070 <col:113, col:123> col:123 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x26de95aa4a8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:213:82 _strupr_l 'char *(char *, _locale_t) __attribute__((cdecl))':'char *(char *, _locale_t)'
| |-ParmVarDecl 0x26de95aa330 <col:148, col:154> col:154 _String 'char *'
| |-ParmVarDecl 0x26de95aa3a8 <col:172, col:183> col:183 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x26de95aa558 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _strupr_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x26de95aa970 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:214:44> col:44 implicit strxfrm 'unsigned long long (char *, const char *, unsigned long long)' extern
| |-ParmVarDecl 0x26de95aaa10 <<invalid sloc>> <invalid sloc> 'char *'
| |-ParmVarDecl 0x26de95aaa78 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x26de95aaae0 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x26de95aab60 prev 0x26de95aa970 <col:28, col:155> col:44 strxfrm 'unsigned long long (char *, const char *, unsigned long long)'
| |-ParmVarDecl 0x26de95aa6a0 <col:95, col:102> col:102 _Dst 'char *'
| |-ParmVarDecl 0x26de95aa720 <col:115, col:128> col:128 _Src 'const char *'
| `-ParmVarDecl 0x26de95aa798 <col:139, col:146> col:146 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x26de95af008 <line:215:28, col:185> col:44 _strxfrm_l 'size_t (char *, const char *, size_t, _locale_t) __attribute__((cdecl))':'size_t (char *, const char *, size_t, _locale_t)'
| |-ParmVarDecl 0x26de95aac48 <col:97, col:104> col:104 _Dst 'char *'
| |-ParmVarDecl 0x26de95aacc8 <col:117, col:130> col:130 _Src 'const char *'
| |-ParmVarDecl 0x26de95aad40 <col:141, col:148> col:148 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x26de95aadb8 <col:168, col:178> col:178 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x26de95af2b0 <line:245:71> col:71 implicit strdup 'char *(const char *)' extern
| `-ParmVarDecl 0x26de95af350 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x26de95af3c0 prev 0x26de95af2b0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:245:106> col:71 strdup 'char *(const char *)'
| |-ParmVarDecl 0x26de95af1d0 <col:89, col:102> col:102 _Src 'const char *'
| `-DeprecatedAttr 0x26de95af468 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strdup. See online help for details." ""
|-FunctionDecl 0x26de95af7b0 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:252:129> col:69 strcmpi 'int (const char *, const char *) __attribute__((cdecl))':'int (const char *, const char *)'
| |-ParmVarDecl 0x26de95af630 <col:84, col:97> col:97 _Str1 'const char *'
| |-ParmVarDecl 0x26de95af6b0 <col:111, col:124> col:124 _Str2 'const char *'
| `-DeprecatedAttr 0x26de95af860 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strcmpi. See online help for details." ""
|-FunctionDecl 0x26de95afba8 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:253:129> col:69 stricmp 'int (const char *, const char *) __attribute__((cdecl))':'int (const char *, const char *)'
| |-ParmVarDecl 0x26de95afa28 <col:84, col:97> col:97 _Str1 'const char *'
| |-ParmVarDecl 0x26de95afaa8 <col:111, col:124> col:124 _Str2 'const char *'
| `-DeprecatedAttr 0x26de95afc58 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _stricmp. See online help for details." ""
|-FunctionDecl 0x26de95abed8 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:254:84> col:56 strlwr 'char *(char *) __attribute__((cdecl))':'char *(char *)'
| |-ParmVarDecl 0x26de95afe20 <col:73, col:80> col:80 _Str 'char *'
| `-DeprecatedAttr 0x26de95abf80 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strlwr. See online help for details." ""
|-FunctionDecl 0x26de95ac398 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:255:193> col:70 strnicmp 'int (const char *, const char *, size_t) __attribute__((cdecl))':'int (const char *, const char *, size_t)'
| |-ParmVarDecl 0x26de95ac180 <col:106, col:119> col:119 _Str1 'const char *'
| |-ParmVarDecl 0x26de95ac200 <col:153, col:166> col:166 _Str 'const char *'
| |-ParmVarDecl 0x26de95ac278 <col:177, col:184> col:184 _MaxCount 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x26de95ac450 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strnicmp. See online help for details." ""
|-FunctionDecl 0x26de95ac830 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:256:143> col:57 strnset 'char *(char *, int, size_t) __attribute__((cdecl))':'char *(char *, int, size_t)'
| |-ParmVarDecl 0x26de95ac618 <col:94, col:101> col:101 _Str 'char *'
| |-ParmVarDecl 0x26de95ac698 <col:112, col:116> col:116 _Val 'int'
| |-ParmVarDecl 0x26de95ac710 <col:127, col:134> col:134 _MaxCount 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x26de95ac8e8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strnset. See online help for details." ""
|-FunctionDecl 0x26de95acb90 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:257:84> col:56 strrev 'char *(char *) __attribute__((cdecl))':'char *(char *)'
| |-ParmVarDecl 0x26de95acab0 <col:73, col:80> col:80 _Str 'char *'
| `-DeprecatedAttr 0x26de95acc38 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strrev. See online help for details." ""
|-FunctionDecl 0x26de95b2000 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:258:99> col:56 strset 'char *(char *, int) __attribute__((cdecl))':'char *(char *, int)'
| |-ParmVarDecl 0x26de95ace00 <col:73, col:80> col:80 _Str 'char *'
| |-ParmVarDecl 0x26de95b1f00 <col:91, col:95> col:95 _Val 'int'
| `-DeprecatedAttr 0x26de95b20b0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strset. See online help for details." ""
|-FunctionDecl 0x26de95b2358 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:259:84> col:56 strupr 'char *(char *) __attribute__((cdecl))':'char *(char *)'
| |-ParmVarDecl 0x26de95b2278 <col:73, col:80> col:80 _Str 'char *'
| `-DeprecatedAttr 0x26de95b2400 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strupr. See online help for details." ""
|-FunctionDecl 0x26de95b2690 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:273:24, col:77> col:42 _wcsdup 'wchar_t *(const wchar_t *) __attribute__((cdecl))':'wchar_t *(const wchar_t *)'
| `-ParmVarDecl 0x26de95b2520 <col:57, col:73> col:73 _Str 'const wchar_t *'
|-FunctionDecl 0x26de95b2a20 <line:280:40, col:167> col:56 wcscat_s 'errno_t (wchar_t *, rsize_t, const wchar_t *) __attribute__((cdecl))':'errno_t (wchar_t *, rsize_t, const wchar_t *)'
| |-ParmVarDecl 0x26de95b2760 <col:97, col:107> col:107 _Dst 'wchar_t *'
| |-ParmVarDecl 0x26de95b27d8 <col:118, col:126> col:126 _SizeInWords 'rsize_t':'unsigned long long'
| `-ParmVarDecl 0x26de95b2850 <col:147, col:163> col:163 _Src 'const wchar_t *'
|-FunctionDecl 0x26de95b2dd8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:284:82 wcscat 'wchar_t *(wchar_t *, const wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x26de95b2bc0 <col:164, col:173> col:173 _Dest 'wchar_t *'
| |-ParmVarDecl 0x26de95b2c38 <col:187, col:204> col:204 _Source 'const wchar_t *'
| `-DeprecatedAttr 0x26de95b2e88 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using wcscat_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x26de95ab1a8 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:288:41> col:41 implicit wcschr 'unsigned short *(const unsigned short *, unsigned short)' extern
| |-ParmVarDecl 0x26de95ab248 <<invalid sloc>> <invalid sloc> 'const unsigned short *'
| `-ParmVarDecl 0x26de95ab2b0 <<invalid sloc>> <invalid sloc> 'unsigned short'
|-FunctionDecl 0x26de95ab328 prev 0x26de95ab1a8 <col:23, col:88> col:41 wcschr 'unsigned short *(const unsigned short *, unsigned short)'
| |-ParmVarDecl 0x26de95aaf88 <col:55, col:71> col:71 _Str 'const wchar_t *'
| `-ParmVarDecl 0x26de95ab000 <col:77, col:85> col:85 _Ch 'wchar_t':'unsigned short'
|-FunctionDecl 0x26de95ab620 <line:289:36> col:36 implicit wcscmp 'int (const unsigned short *, const unsigned short *)' extern
| |-ParmVarDecl 0x26de95ab6c0 <<invalid sloc>> <invalid sloc> 'const unsigned short *'
| `-ParmVarDecl 0x26de95ab728 <<invalid sloc>> <invalid sloc> 'const unsigned short *'
|-FunctionDecl 0x26de95ab7a0 prev 0x26de95ab620 <col:24, col:101> col:36 wcscmp 'int (const unsigned short *, const unsigned short *)'
| |-ParmVarDecl 0x26de95ab400 <col:50, col:66> col:66 _Str1 'const wchar_t *'
| `-ParmVarDecl 0x26de95ab478 <col:80, col:96> col:96 _Str2 'const wchar_t *'
|-FunctionDecl 0x26de95aba80 <line:291:40, col:164> col:56 wcscpy_s 'errno_t (wchar_t *, rsize_t, const wchar_t *) __attribute__((cdecl))':'errno_t (wchar_t *, rsize_t, const wchar_t *)'
| |-ParmVarDecl 0x26de95ab878 <col:94, col:104> col:104 _Dst 'wchar_t *'
| |-ParmVarDecl 0x26de95ab8f0 <col:115, col:123> col:123 _SizeInWords 'rsize_t':'unsigned long long'
| `-ParmVarDecl 0x26de95ab968 <col:144, col:160> col:160 _Src 'const wchar_t *'
|-FunctionDecl 0x26de95abd90 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:294:82 wcscpy 'wchar_t *(wchar_t *, const wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x26de95abc20 <col:136, col:145> col:145 _Dest 'wchar_t *'
| |-ParmVarDecl 0x26de95abc98 <col:159, col:176> col:176 _Source 'const wchar_t *'
| `-DeprecatedAttr 0x26de95abe40 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using wcscpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x26de95ad1c8 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:295:24, col:107> col:39 wcscspn 'size_t (const wchar_t *, const wchar_t *) __attribute__((cdecl))':'size_t (const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x26de95acfa8 <col:54, col:70> col:70 _Str 'const wchar_t *'
| `-ParmVarDecl 0x26de95ad020 <col:83, col:99> col:99 _Control 'const wchar_t *'
|-FunctionDecl 0x26de95ad410 <line:296:39> col:39 implicit wcslen 'unsigned long long (const unsigned short *)' extern
| `-ParmVarDecl 0x26de95ad4b0 <<invalid sloc>> <invalid sloc> 'const unsigned short *'
|-FunctionDecl 0x26de95ad520 prev 0x26de95ad410 <col:24, col:73> col:39 wcslen 'unsigned long long (const unsigned short *)'
| `-ParmVarDecl 0x26de95ad2a0 <col:53, col:69> col:69 _Str 'const wchar_t *'
|-FunctionDecl 0x26de95ad808 <line:300:1, col:94> col:16 used wcsnlen 'size_t (const wchar_t *, size_t) __attribute__((cdecl))':'size_t (const wchar_t *, size_t)'
| |-ParmVarDecl 0x26de95ad5f0 <col:51, col:67> col:67 _Src 'const wchar_t *'
| `-ParmVarDecl 0x26de95ad668 <col:78, col:85> col:85 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x26de95ada50 <line:302:16, line:308:1> line:305:18 wcsnlen_s 'size_t (const wchar_t *, size_t) __attribute__((cdecl))':'size_t (const wchar_t *, size_t)' static inline
| |-ParmVarDecl 0x26de95ad8e0 <col:55, col:71> col:71 used _Src 'const wchar_t *'
| |-ParmVarDecl 0x26de95ad958 <col:82, col:89> col:89 used _MaxCount 'size_t':'unsigned long long'
| `-CompoundStmt 0x26de95adde8 <line:306:1, line:308:1>
|   `-ReturnStmt 0x26de95addd8 <line:307:5, col:56>
|     `-ConditionalOperator 0x26de95adda8 <col:12, col:56> 'unsigned long long'
|       |-ParenExpr 0x26de95adc10 <col:12, col:25> 'int'
|       | `-BinaryOperator 0x26de95adbf0 <col:13, line:36:27> 'int' '=='
|       |   |-ImplicitCastExpr 0x26de95adbc0 <line:307:13> 'const wchar_t *' <LValueToRValue>
|       |   | `-DeclRefExpr 0x26de95adb18 <col:13> 'const wchar_t *' lvalue ParmVar 0x26de95ad8e0 '_Src' 'const wchar_t *'
|       |   `-ImplicitCastExpr 0x26de95adbd8 <line:36:17, col:27> 'const wchar_t *' <BitCast>
|       |     `-ParenExpr 0x26de95adba0 <col:17, col:27> 'void *'
|       |       `-CStyleCastExpr 0x26de95adb78 <col:18, col:26> 'void *' <NullToPointer>
|       |         `-IntegerLiteral 0x26de95adb38 <col:26> 'int' 0
|       |-ImplicitCastExpr 0x26de95add90 <line:307:29> 'unsigned long long' <IntegralCast>
|       | `-IntegerLiteral 0x26de95adc30 <col:29> 'int' 0
|       `-CallExpr 0x26de95add30 <col:33, col:56> 'size_t':'unsigned long long'
|         |-ImplicitCastExpr 0x26de95add18 <col:33> 'size_t (*)(const wchar_t *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x26de95adc58 <col:33> 'size_t (const wchar_t *, size_t) __attribute__((cdecl))':'size_t (const wchar_t *, size_t)' Function 0x26de95ad808 'wcsnlen' 'size_t (const wchar_t *, size_t) __attribute__((cdecl))':'size_t (const wchar_t *, size_t)'
|         |-ImplicitCastExpr 0x26de95add60 <col:41> 'const wchar_t *' <LValueToRValue>
|         | `-DeclRefExpr 0x26de95adc78 <col:41> 'const wchar_t *' lvalue ParmVar 0x26de95ad8e0 '_Src' 'const wchar_t *'
|         `-ImplicitCastExpr 0x26de95add78 <col:47> 'size_t':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x26de95adc98 <col:47> 'size_t':'unsigned long long' lvalue ParmVar 0x26de95ad958 '_MaxCount' 'size_t':'unsigned long long'
|-FunctionDecl 0x26de95b3208 <line:311:40, col:212> col:56 wcsncat_s 'errno_t (wchar_t *, rsize_t, const wchar_t *, rsize_t) __attribute__((cdecl))':'errno_t (wchar_t *, rsize_t, const wchar_t *, rsize_t)'
| |-ParmVarDecl 0x26de95ade10 <col:98, col:108> col:108 _Dst 'wchar_t *'
| |-ParmVarDecl 0x26de95b2f10 <col:119, col:127> col:127 _SizeInWords 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x26de95b2f88 <col:168, col:184> col:184 _Src 'const wchar_t *'
| `-ParmVarDecl 0x26de95b3000 <col:195, col:203> col:203 _MaxCount 'rsize_t':'unsigned long long'
|-FunctionDecl 0x26de95b3670 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1980:149> D:\Microsoft Visual Studio 12.0\VC\include\string.h:316:86 wcsncat 'wchar_t *(wchar_t *, const wchar_t *, size_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, const wchar_t *, size_t)'
| |-ParmVarDecl 0x26de95b33b0 <col:167, col:176> col:176 _Dest 'wchar_t *'
| |-ParmVarDecl 0x26de95b3428 <col:207, col:224> col:224 _Source 'const wchar_t *'
| |-ParmVarDecl 0x26de95b34a0 <col:238, col:246> col:246 _Count 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x26de95b3728 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using wcsncat_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x26de95b3b38 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:318:36> col:36 implicit wcsncmp 'int (const unsigned short *, const unsigned short *, unsigned long long)' extern
| |-ParmVarDecl 0x26de95b3bd8 <<invalid sloc>> <invalid sloc> 'const unsigned short *'
| |-ParmVarDecl 0x26de95b3c40 <<invalid sloc>> <invalid sloc> 'const unsigned short *'
| `-ParmVarDecl 0x26de95b3ca8 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x26de95b3d28 prev 0x26de95b3b38 <col:24, col:165> col:36 wcsncmp 'int (const unsigned short *, const unsigned short *, unsigned long long)'
| |-ParmVarDecl 0x26de95b3868 <col:71, col:87> col:87 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x26de95b38e0 <col:121, col:137> col:137 _Str2 'const wchar_t *'
| `-ParmVarDecl 0x26de95b3958 <col:149, col:156> col:156 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x26de95b40d0 <line:320:40, col:209> col:56 wcsncpy_s 'errno_t (wchar_t *, rsize_t, const wchar_t *, rsize_t) __attribute__((cdecl))':'errno_t (wchar_t *, rsize_t, const wchar_t *, rsize_t)'
| |-ParmVarDecl 0x26de95b3e08 <col:95, col:105> col:105 _Dst 'wchar_t *'
| |-ParmVarDecl 0x26de95b3e80 <col:116, col:124> col:124 _SizeInWords 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x26de95b3f20 <col:165, col:181> col:181 _Src 'const wchar_t *'
| `-ParmVarDecl 0x26de95b3f98 <col:192, col:200> col:200 _MaxCount 'rsize_t':'unsigned long long'
|-FunctionDecl 0x26de95b4480 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1980:149> D:\Microsoft Visual Studio 12.0\VC\include\string.h:323:86 wcsncpy 'wchar_t *(wchar_t *, const wchar_t *, size_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, const wchar_t *, size_t)'
| |-ParmVarDecl 0x26de95b4278 <col:179, col:188> col:188 _Dest 'wchar_t *'
| |-ParmVarDecl 0x26de95b42f0 <col:219, col:236> col:236 _Source 'const wchar_t *'
| |-ParmVarDecl 0x26de95b4368 <col:250, col:258> col:258 _Count 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x26de95b4538 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using wcsncpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x26de95b4898 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:324:38, col:124> col:56 wcspbrk 'wchar_t *(const wchar_t *, const wchar_t *) __attribute__((cdecl))':'wchar_t *(const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x26de95b4678 <col:71, col:87> col:87 _Str 'const wchar_t *'
| `-ParmVarDecl 0x26de95b46f0 <col:100, col:116> col:116 _Control 'const wchar_t *'
|-FunctionDecl 0x26de95b4ae0 <line:325:38, col:109> col:56 wcsrchr 'wchar_t *(const wchar_t *, wchar_t) __attribute__((cdecl))':'wchar_t *(const wchar_t *, wchar_t)'
| |-ParmVarDecl 0x26de95b4970 <col:71, col:87> col:87 _Str 'const wchar_t *'
| `-ParmVarDecl 0x26de95b49e8 <col:98, col:106> col:106 _Ch 'wchar_t':'unsigned short'
|-FunctionDecl 0x26de95b4d28 <line:326:24, col:106> col:39 wcsspn 'size_t (const wchar_t *, const wchar_t *) __attribute__((cdecl))':'size_t (const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x26de95b4bb8 <col:53, col:69> col:69 _Str 'const wchar_t *'
| `-ParmVarDecl 0x26de95b4c30 <col:82, col:98> col:98 _Control 'const wchar_t *'
|-FunctionDecl 0x26de95adf20 <line:329:23, col:107> col:41 wcsstr 'wchar_t *(const wchar_t *, const wchar_t *) __attribute__((cdecl))':'wchar_t *(const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x26de95b4e00 <col:55, col:71> col:71 _Str 'const wchar_t *'
| `-ParmVarDecl 0x26de95b4e78 <col:84, col:100> col:100 _SubStr 'const wchar_t *'
|-FunctionDecl 0x26de95ae228 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:330:142> col:76 wcstok 'wchar_t *(wchar_t *, const wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x26de95ae0b8 <col:97, col:107> col:107 _Str 'wchar_t *'
| |-ParmVarDecl 0x26de95ae130 <col:120, col:136> col:136 _Delim 'const wchar_t *'
| `-DeprecatedAttr 0x26de95ae2d8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using wcstok_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x26de95ae740 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:332:36, col:173> col:54 wcstok_s 'wchar_t *(wchar_t *, const wchar_t *, wchar_t **) __attribute__((cdecl))':'wchar_t *(wchar_t *, const wchar_t *, wchar_t **)'
| |-ParmVarDecl 0x26de95ae418 <col:77, col:87> col:87 _Str 'wchar_t *'
| |-ParmVarDecl 0x26de95ae490 <col:100, col:116> col:116 _Delim 'const wchar_t *'
| `-ParmVarDecl 0x26de95ae570 <col:154, col:165> col:165 _Context 'wchar_t **'
|-FunctionDecl 0x26de95aea60 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:334:105> col:79 _wcserror 'wchar_t *(int) __attribute__((cdecl))':'wchar_t *(int)'
| |-ParmVarDecl 0x26de95ae8e8 <col:94, col:98> col:98 _ErrNum 'int'
| `-DeprecatedAttr 0x26de95aeb08 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wcserror_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x26de95b9ff0 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:335:28, col:147> col:44 _wcserror_s 'errno_t (wchar_t *, size_t, int) __attribute__((cdecl))':'errno_t (wchar_t *, size_t, int)'
| |-ParmVarDecl 0x26de95aec48 <col:89, col:99> col:99 _Buf 'wchar_t *'
| |-ParmVarDecl 0x26de95aecc0 <col:110, col:117> col:117 _SizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x26de95aed40 <col:136, col:140> col:140 _ErrNum 'int'
|-FunctionDecl 0x26de95ba2a0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:337:122> col:80 __wcserror 'wchar_t *(const wchar_t *) __attribute__((cdecl))':'wchar_t *(const wchar_t *)'
| |-ParmVarDecl 0x26de95ba1c8 <col:102, col:118> col:118 _Str 'const wchar_t *'
| `-DeprecatedAttr 0x26de95ba348 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using __wcserror_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x26de95ba710 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:338:28, col:165> col:44 __wcserror_s 'errno_t (wchar_t *, size_t, const wchar_t *) __attribute__((cdecl))':'errno_t (wchar_t *, size_t, const wchar_t *)'
| |-ParmVarDecl 0x26de95ba488 <col:90, col:100> col:100 _Buffer 'wchar_t *'
| |-ParmVarDecl 0x26de95ba500 <col:114, col:121> col:121 _SizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x26de95ba578 <col:142, col:158> col:158 _ErrMsg 'const wchar_t *'
|-FunctionDecl 0x26de95ba968 <line:341:24, col:103> col:36 _wcsicmp 'int (const wchar_t *, const wchar_t *) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x26de95ba7f0 <col:52, col:68> col:68 _Str1 'const wchar_t *'
| `-ParmVarDecl 0x26de95ba868 <col:82, col:98> col:98 _Str2 'const wchar_t *'
|-FunctionDecl 0x26de95bad08 <line:342:24, col:133> col:36 _wcsicmp_l 'int (const wchar_t *, const wchar_t *, _locale_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, _locale_t)'
| |-ParmVarDecl 0x26de95baa40 <col:54, col:70> col:70 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x26de95baab8 <col:84, col:100> col:100 _Str2 'const wchar_t *'
| `-ParmVarDecl 0x26de95bab30 <col:116, col:126> col:126 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x26de95b8ff8 <line:343:24, col:167> col:36 _wcsnicmp 'int (const wchar_t *, const wchar_t *, size_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, size_t)'
| |-ParmVarDecl 0x26de95bade8 <col:73, col:89> col:89 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x26de95bae60 <col:123, col:139> col:139 _Str2 'const wchar_t *'
| `-ParmVarDecl 0x26de95baed8 <col:151, col:158> col:158 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x26de95b9450 <line:344:24, col:197> col:36 _wcsnicmp_l 'int (const wchar_t *, const wchar_t *, size_t, _locale_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, size_t, _locale_t)'
| |-ParmVarDecl 0x26de95b90d8 <col:75, col:91> col:91 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x26de95b9150 <col:125, col:141> col:141 _Str2 'const wchar_t *'
| |-ParmVarDecl 0x26de95b91c8 <col:153, col:160> col:160 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x26de95b9240 <col:180, col:190> col:190 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x26de95b98a8 <line:345:40, col:181> col:56 _wcsnset_s 'errno_t (wchar_t *, size_t, wchar_t, size_t) __attribute__((cdecl))':'errno_t (wchar_t *, size_t, wchar_t, size_t)'
| |-ParmVarDecl 0x26de95b9538 <col:99, col:109> col:109 _Dst 'wchar_t *'
| |-ParmVarDecl 0x26de95b95b0 <col:120, col:127> col:127 _SizeInWords 'size_t':'unsigned long long'
| |-ParmVarDecl 0x26de95b9628 <col:146, col:154> col:154 _Val 'wchar_t':'unsigned short'
| `-ParmVarDecl 0x26de95b96a0 <col:165, col:172> col:172 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x26de95b9d10 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1980:149> D:\Microsoft Visual Studio 12.0\VC\include\string.h:347:86 _wcsnset 'wchar_t *(wchar_t *, wchar_t, size_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, wchar_t, size_t)'
| |-ParmVarDecl 0x26de95b9a50 <col:172, col:181> col:181 _Str 'wchar_t *'
| |-ParmVarDecl 0x26de95b9ac8 <col:187, col:196> col:196 _Val 'wchar_t':'unsigned short'
| |-ParmVarDecl 0x26de95b9b40 <col:207, col:215> col:215 _MaxCount 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x26de95b9dc8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wcsnset_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x26de95bb0a0 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:348:9, col:59> col:27 _wcsrev 'wchar_t *(wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *)'
| `-ParmVarDecl 0x26de95b9f08 <col:45, col:55> col:55 _Str 'wchar_t *'
|-FunctionDecl 0x26de95bb430 <line:349:40, col:159> col:56 _wcsset_s 'errno_t (wchar_t *, size_t, wchar_t) __attribute__((cdecl))':'errno_t (wchar_t *, size_t, wchar_t)'
| |-ParmVarDecl 0x26de95bb170 <col:98, col:108> col:108 _Dst 'wchar_t *'
| |-ParmVarDecl 0x26de95bb1e8 <col:119, col:126> col:126 _SizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x26de95bb260 <col:145, col:153> col:153 _Value 'wchar_t':'unsigned short'
|-FunctionDecl 0x26de95bb7e8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:351:85 _wcsset 'wchar_t *(wchar_t *, wchar_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, wchar_t)'
| |-ParmVarDecl 0x26de95bb5d0 <col:150, col:159> col:159 _Str 'wchar_t *'
| |-ParmVarDecl 0x26de95bb648 <col:165, col:174> col:174 _Val 'wchar_t':'unsigned short'
| `-DeprecatedAttr 0x26de95bb898 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wcsset_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x26de95bbbf8 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:353:28, col:126> col:44 _wcslwr_s 'errno_t (wchar_t *, size_t) __attribute__((cdecl))':'errno_t (wchar_t *, size_t)'
| |-ParmVarDecl 0x26de95bb9d8 <col:86, col:96> col:96 _Str 'wchar_t *'
| `-ParmVarDecl 0x26de95bba50 <col:107, col:114> col:114 _SizeInWords 'size_t':'unsigned long long'
|-FunctionDecl 0x26de95bbe68 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1933:117> D:\Microsoft Visual Studio 12.0\VC\include\string.h:355:82 _wcslwr 'wchar_t *(wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *)'
| |-ParmVarDecl 0x26de95bbd90 <col:102, col:111> col:111 _String 'wchar_t *'
| `-DeprecatedAttr 0x26de95bbf10 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wcslwr_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x26de95bd370 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:356:28, col:156> col:44 _wcslwr_s_l 'errno_t (wchar_t *, size_t, _locale_t) __attribute__((cdecl))':'errno_t (wchar_t *, size_t, _locale_t)'
| |-ParmVarDecl 0x26de95bd0a8 <col:88, col:98> col:98 _Str 'wchar_t *'
| |-ParmVarDecl 0x26de95bd120 <col:109, col:116> col:116 _SizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x26de95bd198 <col:139, col:149> col:149 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x26de95bd728 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:358:85 _wcslwr_l 'wchar_t *(wchar_t *, _locale_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, _locale_t)'
| |-ParmVarDecl 0x26de95bd510 <col:154, col:163> col:163 _String 'wchar_t *'
| |-ParmVarDecl 0x26de95bd588 <col:181, col:192> col:192 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x26de95bd7d8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wcslwr_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x26de95bda88 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:359:28, col:112> col:44 _wcsupr_s 'errno_t (wchar_t *, size_t) __attribute__((cdecl))':'errno_t (wchar_t *, size_t)'
| |-ParmVarDecl 0x26de95bd918 <col:79, col:89> col:89 _Str 'wchar_t *'
| `-ParmVarDecl 0x26de95bd990 <col:100, col:107> col:107 _Size 'size_t':'unsigned long long'
|-FunctionDecl 0x26de95bdcf8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1933:117> D:\Microsoft Visual Studio 12.0\VC\include\string.h:361:82 _wcsupr 'wchar_t *(wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *)'
| |-ParmVarDecl 0x26de95bdc20 <col:102, col:111> col:111 _String 'wchar_t *'
| `-DeprecatedAttr 0x26de95bdda0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wcsupr_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x26de95bc130 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:362:28, col:142> col:44 _wcsupr_s_l 'errno_t (wchar_t *, size_t, _locale_t) __attribute__((cdecl))':'errno_t (wchar_t *, size_t, _locale_t)'
| |-ParmVarDecl 0x26de95bdee0 <col:81, col:91> col:91 _Str 'wchar_t *'
| |-ParmVarDecl 0x26de95bbfa0 <col:102, col:109> col:109 _Size 'size_t':'unsigned long long'
| `-ParmVarDecl 0x26de95bc018 <col:125, col:135> col:135 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x26de95bc440 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:364:85 _wcsupr_l 'wchar_t *(wchar_t *, _locale_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, _locale_t)'
| |-ParmVarDecl 0x26de95bc2d0 <col:154, col:163> col:163 _String 'wchar_t *'
| |-ParmVarDecl 0x26de95bc348 <col:181, col:192> col:192 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x26de95bc4f0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wcsupr_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x26de95bc8f0 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:365:28, col:159> col:43 wcsxfrm 'size_t (wchar_t *, const wchar_t *, size_t) __attribute__((cdecl))':'size_t (wchar_t *, const wchar_t *, size_t)'
| |-ParmVarDecl 0x26de95bc630 <col:93, col:103> col:103 _Dst 'wchar_t *'
| |-ParmVarDecl 0x26de95bc6a8 <col:116, col:132> col:132 _Src 'const wchar_t *'
| `-ParmVarDecl 0x26de95bc720 <col:143, col:150> col:150 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x26de95bcd38 <line:366:28, col:189> col:43 _wcsxfrm_l 'size_t (wchar_t *, const wchar_t *, size_t, _locale_t) __attribute__((cdecl))':'size_t (wchar_t *, const wchar_t *, size_t, _locale_t)'
| |-ParmVarDecl 0x26de95bc9d0 <col:96, col:106> col:106 _Dst 'wchar_t *'
| |-ParmVarDecl 0x26de95bca48 <col:119, col:134> col:134 _Src 'const wchar_t *'
| |-ParmVarDecl 0x26de95bcac0 <col:145, col:152> col:152 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x26de95bcb38 <col:172, col:182> col:182 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x26de95bdfc0 <line:367:24, col:102> col:36 wcscoll 'int (const wchar_t *, const wchar_t *) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x26de95bce20 <col:51, col:67> col:67 _Str1 'const wchar_t *'
| `-ParmVarDecl 0x26de95bce98 <col:81, col:97> col:97 _Str2 'const wchar_t *'
|-FunctionDecl 0x26de95be2a8 <line:368:24, col:133> col:36 _wcscoll_l 'int (const wchar_t *, const wchar_t *, _locale_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, _locale_t)'
| |-ParmVarDecl 0x26de95be098 <col:54, col:70> col:70 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x26de95be110 <col:84, col:100> col:100 _Str2 'const wchar_t *'
| `-ParmVarDecl 0x26de95be188 <col:116, col:126> col:126 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x26de95be500 <line:369:24, col:104> col:36 _wcsicoll 'int (const wchar_t *, const wchar_t *) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x26de95be388 <col:53, col:69> col:69 _Str1 'const wchar_t *'
| `-ParmVarDecl 0x26de95be400 <col:83, col:99> col:99 _Str2 'const wchar_t *'
|-FunctionDecl 0x26de95be7e8 <line:370:24, col:133> col:36 _wcsicoll_l 'int (const wchar_t *, const wchar_t *, _locale_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, _locale_t)'
| |-ParmVarDecl 0x26de95be5d8 <col:55, col:71> col:71 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x26de95be650 <col:85, col:100> col:100 _Str2 'const wchar_t *'
| `-ParmVarDecl 0x26de95be6c8 <col:116, col:126> col:126 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x26de95bead8 <line:371:24, col:167> col:36 _wcsncoll 'int (const wchar_t *, const wchar_t *, size_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, size_t)'
| |-ParmVarDecl 0x26de95be8c8 <col:73, col:89> col:89 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x26de95be940 <col:123, col:139> col:139 _Str2 'const wchar_t *'
| `-ParmVarDecl 0x26de95be9b8 <col:151, col:158> col:158 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x26de95bee60 <line:372:24, col:197> col:36 _wcsncoll_l 'int (const wchar_t *, const wchar_t *, size_t, _locale_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, size_t, _locale_t)'
| |-ParmVarDecl 0x26de95bebb8 <col:75, col:91> col:91 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x26de95bec30 <col:125, col:141> col:141 _Str2 'const wchar_t *'
| |-ParmVarDecl 0x26de95beca8 <col:153, col:160> col:160 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x26de95bed20 <col:180, col:190> col:190 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x26de95b70e8 <line:373:24, col:168> col:36 _wcsnicoll 'int (const wchar_t *, const wchar_t *, size_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, size_t)'
| |-ParmVarDecl 0x26de95bef48 <col:74, col:90> col:90 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x26de95b6f50 <col:124, col:140> col:140 _Str2 'const wchar_t *'
| `-ParmVarDecl 0x26de95b6fc8 <col:152, col:159> col:159 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x26de95b7470 <line:374:24, col:198> col:36 _wcsnicoll_l 'int (const wchar_t *, const wchar_t *, size_t, _locale_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, size_t, _locale_t)'
| |-ParmVarDecl 0x26de95b71c8 <col:76, col:92> col:92 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x26de95b7240 <col:126, col:142> col:142 _Str2 'const wchar_t *'
| |-ParmVarDecl 0x26de95b72b8 <col:154, col:161> col:161 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x26de95b7330 <col:181, col:191> col:191 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x26de95b76d0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:403:108> col:74 wcsdup 'wchar_t *(const wchar_t *) __attribute__((cdecl))':'wchar_t *(const wchar_t *)'
| |-ParmVarDecl 0x26de95b75f8 <col:88, col:104> col:104 _Str 'const wchar_t *'
| `-DeprecatedAttr 0x26de95b7778 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsdup. See online help for details." ""
|-FunctionDecl 0x26de95b7ab0 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:413:135> col:69 wcsicmp 'int (const wchar_t *, const wchar_t *) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x26de95b7938 <col:84, col:100> col:100 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x26de95b79b0 <col:114, col:130> col:130 _Str2 'const wchar_t *'
| `-DeprecatedAttr 0x26de95b7b60 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsicmp. See online help for details." ""
|-FunctionDecl 0x26de95b7f60 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:414:200> col:70 wcsnicmp 'int (const wchar_t *, const wchar_t *, size_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, size_t)'
| |-ParmVarDecl 0x26de95b7d20 <col:106, col:122> col:122 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x26de95b7d98 <col:156, col:172> col:172 _Str2 'const wchar_t *'
| |-ParmVarDecl 0x26de95b7e10 <col:184, col:191> col:191 _MaxCount 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x26de95b8018 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsnicmp. See online help for details." ""
|-FunctionDecl 0x26de95b83e0 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:415:153> col:60 wcsnset 'wchar_t *(wchar_t *, wchar_t, size_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, wchar_t, size_t)'
| |-ParmVarDecl 0x26de95b81d8 <col:97, col:107> col:107 _Str 'wchar_t *'
| |-ParmVarDecl 0x26de95b8250 <col:118, col:126> col:126 _Val 'wchar_t':'unsigned short'
| |-ParmVarDecl 0x26de95b82c8 <col:137, col:144> col:144 _MaxCount 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x26de95b8498 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsnset. See online help for details." ""
|-FunctionDecl 0x26de95b8730 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:416:90> col:59 wcsrev 'wchar_t *(wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *)'
| |-ParmVarDecl 0x26de95b8658 <col:76, col:86> col:86 _Str 'wchar_t *'
| `-DeprecatedAttr 0x26de95b87d8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsrev. See online help for details." ""
|-FunctionDecl 0x26de95b8b08 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:417:104> col:59 wcsset 'wchar_t *(wchar_t *, wchar_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, wchar_t)'
| |-ParmVarDecl 0x26de95b8998 <col:76, col:86> col:86 _Str 'wchar_t *'
| |-ParmVarDecl 0x26de95b8a10 <col:92, col:100> col:100 _Val 'wchar_t':'unsigned short'
| `-DeprecatedAttr 0x26de95b8bb8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsset. See online help for details." ""
|-FunctionDecl 0x26de95b8e50 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:418:90> col:59 wcslwr 'wchar_t *(wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *)'
| |-ParmVarDecl 0x26de95b8d78 <col:76, col:86> col:86 _Str 'wchar_t *'
| `-DeprecatedAttr 0x26de95b8ef8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcslwr. See online help for details." ""
|-FunctionDecl 0x26de95c4270 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:419:90> col:59 wcsupr 'wchar_t *(wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *)'
| |-ParmVarDecl 0x26de95c4198 <col:76, col:86> col:86 _Str 'wchar_t *'
| `-DeprecatedAttr 0x26de95c4318 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsupr. See online help for details." ""
|-FunctionDecl 0x26de95c4650 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:420:137> col:70 wcsicoll 'int (const wchar_t *, const wchar_t *) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x26de95c44d8 <col:86, col:102> col:102 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x26de95c4550 <col:116, col:132> col:132 _Str2 'const wchar_t *'
| `-DeprecatedAttr 0x26de95c4700 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsicoll. See online help for details." ""
|-TypedefDecl 0x26de95c49f8 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:52:1, col:24> col:24 referenced _onexit_t 'int (*)(void) __attribute__((cdecl))'
| `-PointerType 0x26de95c4990 'int (*)(void) __attribute__((cdecl))'
|   `-AttributedType 0x26de95c4930 'int (void) __attribute__((cdecl))' sugar
|     |-ParenType 0x26de95c48e0 'int (void)' sugar
|     | `-FunctionProtoType 0x26de95c48b0 'int (void)' cdecl
|     |   `-BuiltinType 0x26de92ecf90 'int'
|     `-ParenType 0x26de95c48e0 'int (void)' sugar
|       `-FunctionProtoType 0x26de95c48b0 'int (void)' cdecl
|         `-BuiltinType 0x26de92ecf90 'int'
|-RecordDecl 0x26de95c4a50 <line:75:9, line:78:1> line:75:16 struct _div_t definition
| |-MaxFieldAlignmentAttr 0x26de95c4b10 <<invalid sloc>> Implicit 64
| |-FieldDecl 0x26de95c4b88 <line:76:9, col:13> col:13 quot 'int'
| `-FieldDecl 0x26de95c4bf8 <line:77:9, col:13> col:13 rem 'int'
|-TypedefDecl 0x26de95c4ca8 <line:75:1, line:78:3> col:3 referenced div_t 'struct _div_t':'struct _div_t'
| `-ElaboratedType 0x26de95c4c50 'struct _div_t' sugar
|   `-RecordType 0x26de95c4af0 'struct _div_t'
|     `-Record 0x26de95c4a50 '_div_t'
|-RecordDecl 0x26de95c4d18 <line:80:9, line:83:1> line:80:16 struct _ldiv_t definition
| |-MaxFieldAlignmentAttr 0x26de95c4dd0 <<invalid sloc>> Implicit 64
| |-FieldDecl 0x26de95c4e48 <line:81:9, col:14> col:14 quot 'long'
| `-FieldDecl 0x26de95c4eb8 <line:82:9, col:14> col:14 rem 'long'
|-TypedefDecl 0x26de95c4f68 <line:80:1, line:83:3> col:3 referenced ldiv_t 'struct _ldiv_t':'struct _ldiv_t'
| `-ElaboratedType 0x26de95c4f10 'struct _ldiv_t' sugar
|   `-RecordType 0x26de95c4db0 'struct _ldiv_t'
|     `-Record 0x26de95c4d18 '_ldiv_t'
|-RecordDecl 0x26de95c7050 <line:85:9, line:88:1> line:85:16 struct _lldiv_t definition
| |-MaxFieldAlignmentAttr 0x26de95c7110 <<invalid sloc>> Implicit 64
| |-FieldDecl 0x26de95c7188 <line:86:9, col:19> col:19 quot 'long long'
| `-FieldDecl 0x26de95c71f8 <line:87:9, col:19> col:19 rem 'long long'
|-TypedefDecl 0x26de95c72a8 <line:85:1, line:88:3> col:3 referenced lldiv_t 'struct _lldiv_t':'struct _lldiv_t'
| `-ElaboratedType 0x26de95c7250 'struct _lldiv_t' sugar
|   `-RecordType 0x26de95c70f0 'struct _lldiv_t'
|     `-Record 0x26de95c7050 '_lldiv_t'
|-RecordDecl 0x26de95c7340 <line:103:9, line:105:1> line:103:9 struct definition
| |-MaxFieldAlignmentAttr 0x26de95c7400 <<invalid sloc>> Implicit 32
| `-FieldDecl 0x26de95c7500 <line:104:5, col:24> col:19 ld 'unsigned char [10]'
|-TypedefDecl 0x26de95c75b8 <line:103:1, line:105:3> col:3 referenced _LDOUBLE 'struct _LDOUBLE':'_LDOUBLE'
| `-ElaboratedType 0x26de95c7560 'struct _LDOUBLE' sugar
|   `-RecordType 0x26de95c73e0 '_LDOUBLE'
|     `-Record 0x26de95c7340 ''
|-RecordDecl 0x26de95c7628 <line:122:9, line:124:1> line:122:9 struct definition
| `-FieldDecl 0x26de95c76f8 <line:123:9, col:16> col:16 x 'double'
|-TypedefDecl 0x26de95c77a8 <line:122:1, line:124:3> col:3 referenced _CRT_DOUBLE 'struct _CRT_DOUBLE':'_CRT_DOUBLE'
| `-ElaboratedType 0x26de95c7750 'struct _CRT_DOUBLE' sugar
|   `-RecordType 0x26de95c76c0 '_CRT_DOUBLE'
|     `-Record 0x26de95c7628 ''
|-RecordDecl 0x26de95c7818 <line:126:9, line:128:1> line:126:9 struct definition
| `-FieldDecl 0x26de95c78e8 <line:127:5, col:11> col:11 f 'float'
|-TypedefDecl 0x26de95c7998 <line:126:1, line:128:3> col:3 referenced _CRT_FLOAT 'struct _CRT_FLOAT':'_CRT_FLOAT'
| `-ElaboratedType 0x26de95c7940 'struct _CRT_FLOAT' sugar
|   `-RecordType 0x26de95c78b0 '_CRT_FLOAT'
|     `-Record 0x26de95c7818 ''
|-RecordDecl 0x26de95c7a08 <line:134:9, line:139:1> line:134:9 struct definition
| `-FieldDecl 0x26de95c7ad8 <line:138:9, col:21> col:21 x 'long double'
|-TypedefDecl 0x26de95c7b88 <line:134:1, line:139:3> col:3 _LONGDOUBLE 'struct _LONGDOUBLE':'_LONGDOUBLE'
| `-ElaboratedType 0x26de95c7b30 'struct _LONGDOUBLE' sugar
|   `-RecordType 0x26de95c7aa0 '_LONGDOUBLE'
|     `-Record 0x26de95c7a08 ''
|-RecordDecl 0x26de95c7c20 <line:144:9, line:146:1> line:144:9 struct definition
| |-MaxFieldAlignmentAttr 0x26de95c7ce0 <<invalid sloc>> Implicit 32
| `-FieldDecl 0x26de95c7de0 <line:145:5, col:26> col:19 ld12 'unsigned char [12]'
|-TypedefDecl 0x26de95c7e98 <line:144:1, line:146:3> col:3 _LDBL12 'struct _LDBL12':'_LDBL12'
| `-ElaboratedType 0x26de95c7e40 'struct _LDBL12' sugar
|   `-RecordType 0x26de95c7cc0 '_LDBL12'
|     `-Record 0x26de95c7c20 ''
|-VarDecl 0x26de95c7f20 <line:170:9, col:20> col:20 __mb_cur_max 'int' extern
|-FunctionDecl 0x26de95c0040 <line:175:9, col:44> col:21 ___mb_cur_max_func 'int (void) __attribute__((cdecl))':'int (void)'
|-FunctionDecl 0x26de95c0268 <line:176:9, col:51> col:21 ___mb_cur_max_l_func 'int (_locale_t) __attribute__((cdecl))':'int (_locale_t)'
| `-ParmVarDecl 0x26de95c0108 <col:42> col:51 '_locale_t':'struct localeinfo_struct *'
|-TypedefDecl 0x26de95c04b0 <line:215:1, col:24> col:24 referenced _purecall_handler 'void (*)(void) __attribute__((cdecl))'
| `-PointerType 0x26de95c0450 'void (*)(void) __attribute__((cdecl))'
|   `-AttributedType 0x26de95c03f0 'void (void) __attribute__((cdecl))' sugar
|     |-ParenType 0x26de95c03a0 'void (void)' sugar
|     | `-FunctionProtoType 0x26de94e5c90 'void (void)' cdecl
|     |   `-BuiltinType 0x26de92ecef0 'void'
|     `-ParenType 0x26de95c03a0 'void (void)' sugar
|       `-FunctionProtoType 0x26de94e5c90 'void (void)' cdecl
|         `-BuiltinType 0x26de92ecef0 'void'
|-FunctionDecl 0x26de95c06b0 <line:218:9, col:92> col:35 _set_purecall_handler '_purecall_handler (_purecall_handler) __attribute__((cdecl))':'_purecall_handler (_purecall_handler)'
| `-ParmVarDecl 0x26de95c0540 <col:66, col:84> col:84 _Handler '_purecall_handler':'void (*)(void) __attribute__((cdecl))'
|-FunctionDecl 0x26de95c08c8 <line:219:9, col:61> col:35 _get_purecall_handler '_purecall_handler (void) __attribute__((cdecl))':'_purecall_handler (void)'
|-TypedefDecl 0x26de95c0d18 <line:235:1, col:24> col:24 referenced _invalid_parameter_handler 'void (*)(const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t) __attribute__((cdecl))'
| `-PointerType 0x26de95c0c90 'void (*)(const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t) __attribute__((cdecl))'
|   `-AttributedType 0x26de95c0c30 'void (const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t) __attribute__((cdecl))' sugar
|     |-ParenType 0x26de95c0be0 'void (const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t)' sugar
|     | `-FunctionProtoType 0x26de951bff0 'void (const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t)' cdecl
|     |   |-BuiltinType 0x26de92ecef0 'void'
|     |   |-PointerType 0x26de94e6060 'const wchar_t *'
|     |   | `-QualType 0x26de94e6011 'const wchar_t' const
|     |   |   `-TypedefType 0x26de94e6010 'wchar_t' sugar
|     |   |     |-Typedef 0x26de94e5900 'wchar_t'
|     |   |     `-BuiltinType 0x26de92ed010 'unsigned short'
|     |   |-PointerType 0x26de94e6060 'const wchar_t *'
|     |   | `-QualType 0x26de94e6011 'const wchar_t' const
|     |   |   `-TypedefType 0x26de94e6010 'wchar_t' sugar
|     |   |     |-Typedef 0x26de94e5900 'wchar_t'
|     |   |     `-BuiltinType 0x26de92ed010 'unsigned short'
|     |   |-PointerType 0x26de94e6060 'const wchar_t *'
|     |   | `-QualType 0x26de94e6011 'const wchar_t' const
|     |   |   `-TypedefType 0x26de94e6010 'wchar_t' sugar
|     |   |     |-Typedef 0x26de94e5900 'wchar_t'
|     |   |     `-BuiltinType 0x26de92ed010 'unsigned short'
|     |   |-BuiltinType 0x26de92ed030 'unsigned int'
|     |   `-TypedefType 0x26de94e6270 'uintptr_t' sugar
|     |     |-Typedef 0x26de92edd10 'uintptr_t'
|     |     `-BuiltinType 0x26de92ed070 'unsigned long long'
|     `-ParenType 0x26de95c0be0 'void (const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t)' sugar
|       `-FunctionProtoType 0x26de951bff0 'void (const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t)' cdecl
|         |-BuiltinType 0x26de92ecef0 'void'
|         |-PointerType 0x26de94e6060 'const wchar_t *'
|         | `-QualType 0x26de94e6011 'const wchar_t' const
|         |   `-TypedefType 0x26de94e6010 'wchar_t' sugar
|         |     |-Typedef 0x26de94e5900 'wchar_t'
|         |     `-BuiltinType 0x26de92ed010 'unsigned short'
|         |-PointerType 0x26de94e6060 'const wchar_t *'
|         | `-QualType 0x26de94e6011 'const wchar_t' const
|         |   `-TypedefType 0x26de94e6010 'wchar_t' sugar
|         |     |-Typedef 0x26de94e5900 'wchar_t'
|         |     `-BuiltinType 0x26de92ed010 'unsigned short'
|         |-PointerType 0x26de94e6060 'const wchar_t *'
|         | `-QualType 0x26de94e6011 'const wchar_t' const
|         |   `-TypedefType 0x26de94e6010 'wchar_t' sugar
|         |     |-Typedef 0x26de94e5900 'wchar_t'
|         |     `-BuiltinType 0x26de92ed010 'unsigned short'
|         |-BuiltinType 0x26de92ed030 'unsigned int'
|         `-TypedefType 0x26de94e6270 'uintptr_t' sugar
|           |-Typedef 0x26de92edd10 'uintptr_t'
|           `-BuiltinType 0x26de92ed070 'unsigned long long'
|-FunctionDecl 0x26de95c0f10 <line:238:9, col:119> col:44 _set_invalid_parameter_handler '_invalid_parameter_handler (_invalid_parameter_handler) __attribute__((cdecl))':'_invalid_parameter_handler (_invalid_parameter_handler)'
| `-ParmVarDecl 0x26de95c0da0 <col:84, col:111> col:111 _Handler '_invalid_parameter_handler':'void (*)(const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t) __attribute__((cdecl))'
|-FunctionDecl 0x26de95671f8 <line:239:9, col:79> col:44 _get_invalid_parameter_handler '_invalid_parameter_handler (void) __attribute__((cdecl))':'_invalid_parameter_handler (void)'
|-FunctionDecl 0x26de95673e0 <line:245:9, col:41> col:30 _errno 'int *(void) __attribute__((cdecl))':'int *(void)' extern
|-FunctionDecl 0x26de9567620 <line:248:1, col:43> col:17 _set_errno 'errno_t (int) __attribute__((cdecl))':'errno_t (int)'
| `-ParmVarDecl 0x26de95674b0 <col:33, col:37> col:37 _Value 'int'
|-FunctionDecl 0x26de9567870 <line:249:1, col:46> col:17 _get_errno 'errno_t (int *) __attribute__((cdecl))':'errno_t (int *)'
| `-ParmVarDecl 0x26de95676f8 <col:34, col:40> col:40 _Value 'int *'
|-FunctionDecl 0x26de9567a90 <line:252:9, col:48> col:33 __doserrno 'unsigned long *(void) __attribute__((cdecl))':'unsigned long *(void)'
|-FunctionDecl 0x26de9567cd0 <line:255:1, col:56> col:17 _set_doserrno 'errno_t (unsigned long) __attribute__((cdecl))':'errno_t (unsigned long)'
| `-ParmVarDecl 0x26de9567b60 <col:36, col:50> col:50 _Value 'unsigned long'
|-FunctionDecl 0x26de9567f20 <line:256:1, col:59> col:17 _get_doserrno 'errno_t (unsigned long *) __attribute__((cdecl))':'errno_t (unsigned long *)'
| `-ParmVarDecl 0x26de9567da8 <col:37, col:53> col:53 _Value 'unsigned long *'
|-FunctionDecl 0x26de956e240 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:259:77> col:59 __sys_errlist 'char **(void) __attribute__((cdecl))':'char **(void)'
| `-DeprecatedAttr 0x26de956e2e0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using strerror instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x26de956e5a0 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:262:72> col:57 __sys_nerr 'int *(void) __attribute__((cdecl))':'int *(void)'
| `-DeprecatedAttr 0x26de956e640 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using strerror instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-VarDecl 0x26de956e788 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:288:9, col:20> col:20 __argc 'int' extern
|-VarDecl 0x26de956e820 <line:289:9, col:24> col:24 __argv 'char **' extern
|-VarDecl 0x26de956e8b8 <line:290:9, col:27> col:27 __wargv 'wchar_t **' extern
|-VarDecl 0x26de956e950 <line:306:9, col:24> col:24 _environ 'char **' extern
|-VarDecl 0x26de956e9e8 <line:307:9, col:27> col:27 _wenviron 'wchar_t **' extern
|-VarDecl 0x26de956eb40 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:311:68> col:68 _pgmptr 'char *' extern
| `-DeprecatedAttr 0x26de956eba8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _get_pgmptr instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-VarDecl 0x26de956eda8 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:312:72> col:72 _wpgmptr 'wchar_t *' extern
| `-DeprecatedAttr 0x26de956ee10 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _get_wpgmptr instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x26de956a0e0 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:339:1, col:61> col:17 _get_pgmptr 'errno_t (char **) __attribute__((cdecl))':'errno_t (char **)'
| `-ParmVarDecl 0x26de956ef58 <col:47, col:55> col:55 _Value 'char **'
|-FunctionDecl 0x26de956a330 <line:340:1, col:65> col:17 _get_wpgmptr 'errno_t (wchar_t **) __attribute__((cdecl))':'errno_t (wchar_t **)'
| `-ParmVarDecl 0x26de956a1b8 <col:48, col:59> col:59 _Value 'wchar_t **'
|-VarDecl 0x26de956a4c8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:346:64> col:64 _fmode 'int' extern
| `-DeprecatedAttr 0x26de956a530 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _get_fmode instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x26de956a750 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:353:9, col:50> col:25 _set_fmode 'errno_t (int) __attribute__((cdecl))':'errno_t (int)'
| `-ParmVarDecl 0x26de956a678 <col:41, col:45> col:45 _Mode 'int'
|-FunctionDecl 0x26de956a900 <line:354:9, col:54> col:25 _get_fmode 'errno_t (int *) __attribute__((cdecl))':'errno_t (int *)'
| `-ParmVarDecl 0x26de956a828 <col:42, col:48> col:48 _PMode 'int *'
|-FunctionDecl 0x26de956ab50 <line:376:43> col:43 implicit exit 'void (int) __attribute__((noreturn))' extern
| `-ParmVarDecl 0x26de956abf0 <<invalid sloc>> <invalid sloc> 'int'
|-FunctionDecl 0x26de956ac60 prev 0x26de956ab50 <col:9, col:62> col:43 exit 'void (int) __attribute__((noreturn))'
| `-ParmVarDecl 0x26de956a9d8 <col:53, col:57> col:57 _Code 'int'
|-FunctionDecl 0x26de956ae10 <line:378:43> col:43 implicit _exit 'void (int) __attribute__((noreturn))' extern
| `-ParmVarDecl 0x26de956aeb0 <<invalid sloc>> <invalid sloc> 'int'
|-FunctionDecl 0x26de956af20 prev 0x26de956ae10 <col:9, col:63> col:43 _exit 'void (int) __attribute__((noreturn))'
| `-ParmVarDecl 0x26de956ad38 <col:54, col:58> col:58 _Code 'int'
|-FunctionDecl 0x26de95690d0 <line:379:43> col:43 implicit abort 'void (void) __attribute__((noreturn))' extern
|-FunctionDecl 0x26de9569170 prev 0x26de95690d0 <col:9, col:53> col:43 abort 'void (void) __attribute__((noreturn))'
|-FunctionDecl 0x26de9569430 <line:382:9, col:99> col:30 _set_abort_behavior 'unsigned int (unsigned int, unsigned int) __attribute__((cdecl))':'unsigned int (unsigned int, unsigned int)'
| |-ParmVarDecl 0x26de9569240 <col:55, col:68> col:68 _Flags 'unsigned int'
| `-ParmVarDecl 0x26de95692c0 <col:81, col:94> col:94 _Mask 'unsigned int'
|-FunctionDecl 0x26de9569628 <line:384:19> col:19 implicit abs 'int (int)' extern
| |-ParmVarDecl 0x26de95696c8 <<invalid sloc>> <invalid sloc> 'int'
| |-NoThrowAttr 0x26de9569738 <col:19> Implicit
| `-ConstAttr 0x26de9569790 <col:19> Implicit
|-FunctionDecl 0x26de95697b8 prev 0x26de9569628 <col:1, col:34> col:19 abs 'int (int)'
| |-ParmVarDecl 0x26de9569510 <col:28, col:32> col:32 _X 'int'
| |-NoThrowAttr 0x26de95698a8 <col:19> Inherited Implicit
| `-ConstAttr 0x26de95698d0 <col:19> Inherited Implicit
|-FunctionDecl 0x26de9569a58 <line:385:19> col:19 implicit labs 'long (long)' extern
| |-ParmVarDecl 0x26de9569af8 <<invalid sloc>> <invalid sloc> 'long'
| |-NoThrowAttr 0x26de9569b68 <col:19> Implicit
| `-ConstAttr 0x26de9569bc0 <col:19> Implicit
|-FunctionDecl 0x26de9569be8 prev 0x26de9569a58 <col:1, col:36> col:19 labs 'long (long)'
| |-ParmVarDecl 0x26de9569910 <col:29, col:34> col:34 _X 'long'
| |-NoThrowAttr 0x26de9569cd8 <col:19> Inherited Implicit
| `-ConstAttr 0x26de9569d00 <col:19> Inherited Implicit
|-FunctionDecl 0x26de9569e88 <line:386:19> col:19 implicit llabs 'long long (long long)' extern
| |-ParmVarDecl 0x26de9569f28 <<invalid sloc>> <invalid sloc> 'long long'
| |-NoThrowAttr 0x26de9569f98 <col:19> Implicit
| `-ConstAttr 0x26de9569ff0 <col:19> Implicit
|-FunctionDecl 0x26de956a018 prev 0x26de9569e88 <col:1, col:42> col:19 llabs 'long long (long long)'
| |-ParmVarDecl 0x26de9569d40 <col:30, col:40> col:40 _X 'long long'
| |-NoThrowAttr 0x26de9568108 <col:19> Inherited Implicit
| `-ConstAttr 0x26de9568130 <col:19> Inherited Implicit
|-FunctionDecl 0x26de9568238 <line:388:9, col:42> col:28 _abs64 'long long (long long) __attribute__((cdecl))':'long long (long long)'
| `-ParmVarDecl 0x26de9568170 <col:35> col:42 'long long'
|-FunctionDecl 0x26de9568538 <line:426:9, col:53> col:24 atexit 'int (void (*)(void) __attribute__((cdecl))) __attribute__((cdecl))':'int (void (*)(void) __attribute__((cdecl)))'
| `-ParmVarDecl 0x26de95683d0 <col:31, col:45> col:46 'void (*)(void) __attribute__((cdecl))'
|-FunctionDecl 0x26de9568758 <line:428:24, col:71> col:40 atof 'double (const char *) __attribute__((cdecl))':'double (const char *)'
| `-ParmVarDecl 0x26de9568610 <col:52, col:64> col:64 _String 'const char *'
|-FunctionDecl 0x26de9568a50 <line:429:24, col:102> col:40 _atof_l 'double (const char *, _locale_t) __attribute__((cdecl))':'double (const char *, _locale_t)'
| |-ParmVarDecl 0x26de9568830 <col:55, col:67> col:67 _String 'const char *'
| `-ParmVarDecl 0x26de95688a8 <col:85, col:95> col:95 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x26de9568c78 <line:430:43, col:86> col:58 atoi 'int (const char *) __attribute__((cdecl))':'int (const char *)'
| `-ParmVarDecl 0x26de9568b30 <col:70, col:82> col:82 _Str 'const char *'
|-FunctionDecl 0x26de9568f70 <line:431:24, col:98> col:39 _atoi_l 'int (const char *, _locale_t) __attribute__((cdecl))':'int (const char *, _locale_t)'
| |-ParmVarDecl 0x26de9568d50 <col:54, col:66> col:66 _Str 'const char *'
| `-ParmVarDecl 0x26de9568dc8 <col:81, col:91> col:91 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x26de9570228 <line:432:24, col:67> col:39 atol 'long (const char *) __attribute__((cdecl))':'long (const char *)'
| `-ParmVarDecl 0x26de9569050 <col:51, col:63> col:63 _Str 'const char *'
|-FunctionDecl 0x26de9570520 <line:433:24, col:98> col:39 _atol_l 'long (const char *, _locale_t) __attribute__((cdecl))':'long (const char *, _locale_t)'
| |-ParmVarDecl 0x26de9570300 <col:54, col:66> col:66 _Str 'const char *'
| `-ParmVarDecl 0x26de9570378 <col:81, col:91> col:91 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x26de9570748 <line:434:24, col:71> col:42 atoll 'long long (const char *) __attribute__((cdecl))':'long long (const char *)'
| `-ParmVarDecl 0x26de9570600 <col:55, col:67> col:67 _Str 'const char *'
|-FunctionDecl 0x26de9570a40 <line:435:24, col:102> col:42 _atoll_l 'long long (const char *, _locale_t) __attribute__((cdecl))':'long long (const char *, _locale_t)'
| |-ParmVarDecl 0x26de9570820 <col:58, col:70> col:70 _Str 'const char *'
| `-ParmVarDecl 0x26de9570898 <col:85, col:95> col:95 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x26de95712f0 <line:439:24, line:441:97> line:439:39 bsearch_s 'void *(const void *, const void *, rsize_t, rsize_t, int (*)(void *, const void *, const void *) __attribute__((cdecl)), void *) __attribute__((cdecl))':'void *(const void *, const void *, rsize_t, rsize_t, int (*)(void *, const void *, const void *) __attribute__((cdecl)), void *)'
| |-ParmVarDecl 0x26de9570b20 <col:54, col:67> col:67 _Key 'const void *'
| |-ParmVarDecl 0x26de9570ba0 <col:124, col:137> col:137 _Base 'const void *'
| |-ParmVarDecl 0x26de9570c18 <line:440:14, col:22> col:22 _NumOfElements 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x26de9570c90 <col:43, col:51> col:51 _SizeOfElements 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x26de9570ff0 <line:441:14, col:29> col:29 _PtFuncCompare 'int (*)(void *, const void *, const void *) __attribute__((cdecl))'
| `-ParmVarDecl 0x26de9571070 <col:82, col:89> col:89 _Context 'void *'
|-FunctionDecl 0x26de9571a78 <line:443:24, line:445:72> line:443:39 bsearch 'void *(const void *, const void *, size_t, size_t, int (*)(const void *, const void *) __attribute__((cdecl))) __attribute__((cdecl))':'void *(const void *, const void *, size_t, size_t, int (*)(const void *, const void *) __attribute__((cdecl)))'
| |-ParmVarDecl 0x26de95713f0 <col:52, col:65> col:65 _Key 'const void *'
| |-ParmVarDecl 0x26de9571470 <col:122, col:135> col:135 _Base 'const void *'
| |-ParmVarDecl 0x26de95714e8 <line:444:14, col:21> col:21 _NumOfElements 'size_t':'unsigned long long'
| |-ParmVarDecl 0x26de9571560 <col:42, col:49> col:49 _SizeOfElements 'size_t':'unsigned long long'
| `-ParmVarDecl 0x26de9571838 <line:445:14, col:29> col:29 _PtFuncCompare 'int (*)(const void *, const void *) __attribute__((cdecl))'
|-FunctionDecl 0x26de95721b0 <line:448:9, line:450:96> line:448:22 qsort_s 'void (void *, rsize_t, rsize_t, int (*)(void *, const void *, const void *) __attribute__((cdecl)), void *) __attribute__((cdecl))':'void (void *, rsize_t, rsize_t, int (*)(void *, const void *, const void *) __attribute__((cdecl)), void *)'
| |-ParmVarDecl 0x26de9571b70 <col:85, col:92> col:92 _Base 'void *'
| |-ParmVarDecl 0x26de9571be8 <line:449:14, col:22> col:22 _NumOfElements 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x26de9571c60 <col:43, col:51> col:51 _SizeOfElements 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x26de9571ec8 <line:450:14, col:29> col:29 _PtFuncCompare 'int (*)(void *, const void *, const void *) __attribute__((cdecl))'
| `-ParmVarDecl 0x26de9571f48 <col:82, col:88> col:88 _Context 'void *'
|-FunctionDecl 0x26de9572778 <line:452:9, line:454:72> line:452:22 qsort 'void (void *, size_t, size_t, int (*)(const void *, const void *) __attribute__((cdecl))) __attribute__((cdecl))':'void (void *, size_t, size_t, int (*)(const void *, const void *) __attribute__((cdecl)))'
| |-ParmVarDecl 0x26de95722a8 <col:84, col:91> col:91 _Base 'void *'
| |-ParmVarDecl 0x26de9572320 <line:453:14, col:21> col:21 _NumOfElements 'size_t':'unsigned long long'
| |-ParmVarDecl 0x26de9572398 <col:42, col:49> col:49 _SizeOfElements 'size_t':'unsigned long long'
| `-ParmVarDecl 0x26de9572578 <line:454:14, col:29> col:29 _PtFuncCompare 'int (*)(const void *, const void *) __attribute__((cdecl))'
|-FunctionDecl 0x26de95729b8 <line:456:47> col:47 implicit _byteswap_ushort 'unsigned short (unsigned short)' extern
| |-ParmVarDecl 0x26de9572a58 <<invalid sloc>> <invalid sloc> 'unsigned short'
| |-NoThrowAttr 0x26de9572ac8 <col:47> Implicit
| `-ConstAttr 0x26de9572b20 <col:47> Implicit
|-FunctionDecl 0x26de9572b48 prev 0x26de95729b8 <col:24, col:90> col:47 _byteswap_ushort 'unsigned short (unsigned short)'
| |-ParmVarDecl 0x26de9572868 <col:69, col:84> col:84 _Short 'unsigned short'
| |-NoThrowAttr 0x26de9572c38 <col:47> Inherited Implicit
| `-ConstAttr 0x26de9572c60 <col:47> Inherited Implicit
|-FunctionDecl 0x26de9572de8 <line:457:47> col:47 implicit _byteswap_ulong 'unsigned long (unsigned long)' extern
| |-ParmVarDecl 0x26de9572e88 <<invalid sloc>> <invalid sloc> 'unsigned long'
| |-NoThrowAttr 0x26de9572ef8 <col:47> Implicit
| `-ConstAttr 0x26de9572f50 <col:47> Implicit
|-FunctionDecl 0x26de9572f78 prev 0x26de9572de8 <col:24, col:88> col:47 _byteswap_ulong 'unsigned long (unsigned long)'
| |-ParmVarDecl 0x26de9572ca0 <col:69, col:83> col:83 _Long 'unsigned long'
| |-NoThrowAttr 0x26de9573068 <col:47> Inherited Implicit
| `-ConstAttr 0x26de9573090 <col:47> Inherited Implicit
|-FunctionDecl 0x26de956b1b8 <line:458:49> col:49 implicit _byteswap_uint64 'unsigned long long (unsigned long long)' extern
| |-ParmVarDecl 0x26de956b258 <<invalid sloc>> <invalid sloc> 'unsigned long long'
| |-NoThrowAttr 0x26de956b2c8 <col:49> Implicit
| `-ConstAttr 0x26de956b320 <col:49> Implicit
|-FunctionDecl 0x26de956b348 prev 0x26de956b1b8 <col:24, col:94> col:49 _byteswap_uint64 'unsigned long long (unsigned long long)'
| |-ParmVarDecl 0x26de95730d0 <col:71, col:88> col:88 _Int64 'unsigned long long'
| |-NoThrowAttr 0x26de956b438 <col:49> Inherited Implicit
| `-ConstAttr 0x26de956b460 <col:49> Inherited Implicit
|-FunctionDecl 0x26de956b6e8 <line:459:24, col:85> col:39 div 'div_t (int, int) __attribute__((cdecl))':'div_t (int, int)'
| |-ParmVarDecl 0x26de956b4c8 <col:48, col:52> col:52 _Numerator 'int'
| `-ParmVarDecl 0x26de956b548 <col:69, col:73> col:73 _Denominator 'int'
|-FunctionDecl 0x26de956b968 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:462:109> col:74 getenv 'char *(const char *) __attribute__((cdecl))':'char *(const char *)'
| |-ParmVarDecl 0x26de956b888 <col:88, col:101> col:101 _VarName 'const char *'
| `-DeprecatedAttr 0x26de956ba10 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _dupenv_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x26de956bf28 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:464:28, col:177> col:44 getenv_s 'errno_t (size_t *, char *, rsize_t, const char *) __attribute__((cdecl))':'errno_t (size_t *, char *, rsize_t, const char *)'
| |-ParmVarDecl 0x26de956bba8 <col:59, col:68> col:68 _ReturnSize 'size_t *'
| |-ParmVarDecl 0x26de956bc28 <col:110, col:117> col:117 _DstBuf 'char *'
| |-ParmVarDecl 0x26de956bca0 <col:131, col:139> col:139 _DstSize 'rsize_t':'unsigned long long'
| `-ParmVarDecl 0x26de956bd20 <col:156, col:169> col:169 _VarName 'const char *'
|-FunctionDecl 0x26de957a430 <line:472:28, col:212> col:44 _dupenv_s 'errno_t (char **, size_t *, const char *) __attribute__((cdecl))':'errno_t (char **, size_t *, const char *)'
| |-ParmVarDecl 0x26de956c018 <col:127, col:134> col:134 _PBuffer 'char **'
| |-ParmVarDecl 0x26de957a1e0 <col:154, col:163> col:163 _PBufferSizeInBytes 'size_t *'
| `-ParmVarDecl 0x26de957a260 <col:191, col:204> col:204 _VarName 'const char *'
|-FunctionDecl 0x26de957a898 <line:479:28, col:141> col:44 _itoa_s 'errno_t (int, char *, size_t, int) __attribute__((cdecl))':'errno_t (int, char *, size_t, int)'
| |-ParmVarDecl 0x26de957a518 <col:57, col:61> col:61 _Value 'int'
| |-ParmVarDecl 0x26de957a598 <col:91, col:98> col:98 _DstBuf 'char *'
| |-ParmVarDecl 0x26de957a610 <col:112, col:119> col:119 _Size 'size_t':'unsigned long long'
| `-ParmVarDecl 0x26de957a690 <col:131, col:135> col:135 _Radix 'int'
|-FunctionDecl 0x26de957ad18 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1951:149> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:481:79 _itoa 'char *(int, char *, int) __attribute__((cdecl))':'char *(int, char *, int)'
| |-ParmVarDecl 0x26de957aa80 <col:91, col:96> col:96 _Value 'int'
| |-ParmVarDecl 0x26de957ab00 <col:128, col:134> col:134 _Dest 'char *'
| |-ParmVarDecl 0x26de957ab80 <col:146, col:151> col:151 _Radix 'int'
| `-DeprecatedAttr 0x26de957add0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _itoa_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x26de95782a8 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:482:28, col:145> col:44 _i64toa_s 'errno_t (long long, char *, size_t, int) __attribute__((cdecl))':'errno_t (long long, char *, size_t, int)'
| |-ParmVarDecl 0x26de957af18 <col:59, col:67> col:67 _Val 'long long'
| |-ParmVarDecl 0x26de957af98 <col:95, col:102> col:102 _DstBuf 'char *'
| |-ParmVarDecl 0x26de957b010 <col:116, col:123> col:123 _Size 'size_t':'unsigned long long'
| `-ParmVarDecl 0x26de957b090 <col:135, col:139> col:139 _Radix 'int'
|-FunctionDecl 0x26de95786f8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:483:140> col:59 _i64toa 'char *(long long, char *, int) __attribute__((cdecl))':'char *(long long, char *, int)'
| |-ParmVarDecl 0x26de9578458 <col:72, col:80> col:80 _Val 'long long'
| |-ParmVarDecl 0x26de95784d8 <col:109, col:116> col:116 _DstBuf 'char *'
| |-ParmVarDecl 0x26de9578558 <col:130, col:134> col:134 _Radix 'int'
| `-DeprecatedAttr 0x26de95787b0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _i64toa_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x26de9578c78 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:484:28, col:155> col:44 _ui64toa_s 'errno_t (unsigned long long, char *, size_t, int) __attribute__((cdecl))':'errno_t (unsigned long long, char *, size_t, int)'
| |-ParmVarDecl 0x26de95788f8 <col:60, col:77> col:77 _Val 'unsigned long long'
| |-ParmVarDecl 0x26de9578978 <col:105, col:112> col:112 _DstBuf 'char *'
| |-ParmVarDecl 0x26de95789f0 <col:126, col:133> col:133 _Size 'size_t':'unsigned long long'
| `-ParmVarDecl 0x26de9578a70 <col:145, col:149> col:149 _Radix 'int'
|-FunctionDecl 0x26de95790c8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:485:151> col:60 _ui64toa 'char *(unsigned long long, char *, int) __attribute__((cdecl))':'char *(unsigned long long, char *, int)'
| |-ParmVarDecl 0x26de9578e28 <col:74, col:91> col:91 _Val 'unsigned long long'
| |-ParmVarDecl 0x26de9578ea8 <col:120, col:127> col:127 _DstBuf 'char *'
| |-ParmVarDecl 0x26de9578f28 <col:141, col:145> col:145 _Radix 'int'
| `-DeprecatedAttr 0x26de9573170 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _ui64toa_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x26de9573398 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:486:24, col:75> col:40 _atoi64 'long long (const char *) __attribute__((cdecl))':'long long (const char *)'
| `-ParmVarDecl 0x26de95732b8 <col:55, col:68> col:68 _String 'const char *'
|-FunctionDecl 0x26de95735e8 <line:487:24, col:105> col:40 _atoi64_l 'long long (const char *, _locale_t) __attribute__((cdecl))':'long long (const char *, _locale_t)'
| |-ParmVarDecl 0x26de9573470 <col:57, col:70> col:70 _String 'const char *'
| `-ParmVarDecl 0x26de95734e8 <col:88, col:98> col:98 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x26de9573968 <line:488:24, col:136> col:40 _strtoi64 'long long (const char *, char **, int) __attribute__((cdecl))':'long long (const char *, char **, int)'
| |-ParmVarDecl 0x26de95736c8 <col:57, col:70> col:70 _String 'const char *'
| |-ParmVarDecl 0x26de9573748 <col:104, col:112> col:112 _EndPtr 'char **'
| `-ParmVarDecl 0x26de95737c8 <col:126, col:130> col:130 _Radix 'int'
|-FunctionDecl 0x26de9573dd0 <line:489:24, col:166> col:40 _strtoi64_l 'long long (const char *, char **, int, _locale_t) __attribute__((cdecl))':'long long (const char *, char **, int, _locale_t)'
| |-ParmVarDecl 0x26de9573a50 <col:59, col:72> col:72 _String 'const char *'
| |-ParmVarDecl 0x26de9573ad0 <col:106, col:114> col:114 _EndPtr 'char **'
| |-ParmVarDecl 0x26de9573b50 <col:128, col:132> col:132 _Radix 'int'
| `-ParmVarDecl 0x26de9573bc8 <col:149, col:159> col:159 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x26de9575190 <line:490:24, col:146> col:49 _strtoui64 'unsigned long long (const char *, char **, int) __attribute__((cdecl))':'unsigned long long (const char *, char **, int)'
| |-ParmVarDecl 0x26de9573ec0 <col:67, col:80> col:80 _String 'const char *'
| |-ParmVarDecl 0x26de9573f40 <col:114, col:122> col:122 _EndPtr 'char **'
| `-ParmVarDecl 0x26de9573fc0 <col:136, col:140> col:140 _Radix 'int'
|-FunctionDecl 0x26de9575600 <line:491:24, col:177> col:49 _strtoui64_l 'unsigned long long (const char *, char **, int, _locale_t) __attribute__((cdecl))':'unsigned long long (const char *, char **, int, _locale_t)'
| |-ParmVarDecl 0x26de9575278 <col:69, col:82> col:82 _String 'const char *'
| |-ParmVarDecl 0x26de95752f8 <col:116, col:124> col:124 _EndPtr 'char **'
| |-ParmVarDecl 0x26de9575378 <col:138, col:143> col:143 _Radix 'int'
| `-ParmVarDecl 0x26de95753f0 <col:160, col:170> col:170 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x26de9575938 <line:492:24, col:88> col:39 ldiv 'ldiv_t (long, long) __attribute__((cdecl))':'ldiv_t (long, long)'
| |-ParmVarDecl 0x26de9575718 <col:49, col:54> col:54 _Numerator 'long'
| `-ParmVarDecl 0x26de9575798 <col:71, col:76> col:76 _Denominator 'long'
|-FunctionDecl 0x26de9575c58 <line:493:24, col:100> col:40 lldiv 'lldiv_t (long long, long long) __attribute__((cdecl))':'lldiv_t (long long, long long)'
| |-ParmVarDecl 0x26de9575a38 <col:51, col:61> col:61 _Numerator 'long long'
| `-ParmVarDecl 0x26de9575ab8 <col:78, col:88> col:88 _Denominator 'long long'
|-FunctionDecl 0x26de95760b8 <line:515:28, col:140> col:44 _ltoa_s 'errno_t (long, char *, size_t, int) __attribute__((cdecl))':'errno_t (long, char *, size_t, int)'
| |-ParmVarDecl 0x26de9575d38 <col:57, col:62> col:62 _Val 'long'
| |-ParmVarDecl 0x26de9575db8 <col:90, col:97> col:97 _DstBuf 'char *'
| |-ParmVarDecl 0x26de9575e30 <col:111, col:118> col:118 _Size 'size_t':'unsigned long long'
| `-ParmVarDecl 0x26de9575eb0 <col:130, col:134> col:134 _Radix 'int'
|-FunctionDecl 0x26de9576518 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1951:149> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:517:79 _ltoa 'char *(long, char *, int) __attribute__((cdecl))':'char *(long, char *, int)'
| |-ParmVarDecl 0x26de9576278 <col:91, col:97> col:97 _Value 'long'
| |-ParmVarDecl 0x26de95762f8 <col:129, col:135> col:135 _Dest 'char *'
| |-ParmVarDecl 0x26de9576378 <col:147, col:152> col:152 _Radix 'int'
| `-DeprecatedAttr 0x26de95765d0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _ltoa_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x26de9576940 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:518:24, col:128> col:39 mblen 'int (const char *, size_t) __attribute__((cdecl))':'int (const char *, size_t)'
| |-ParmVarDecl 0x26de9576718 <col:89, col:102> col:102 _Ch 'const char *'
| `-ParmVarDecl 0x26de9576790 <col:112, col:119> col:119 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x26de9576ce8 <line:519:24, col:159> col:39 _mblen_l 'int (const char *, size_t, _locale_t) __attribute__((cdecl))':'int (const char *, size_t, _locale_t)'
| |-ParmVarDecl 0x26de9576a20 <col:92, col:105> col:105 _Ch 'const char *'
| |-ParmVarDecl 0x26de9576a98 <col:115, col:122> col:122 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x26de9576b10 <col:142, col:152> col:152 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x26de9576ea8 <line:520:24, col:73> col:39 _mbstrlen 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)'
| `-ParmVarDecl 0x26de9576dd0 <col:56, col:69> col:69 _Str 'const char *'
|-FunctionDecl 0x26de95791d0 <line:521:24, col:102> col:39 _mbstrlen_l 'size_t (const char *, _locale_t) __attribute__((cdecl))':'size_t (const char *, _locale_t)'
| |-ParmVarDecl 0x26de9576f80 <col:58, col:70> col:70 _Str 'const char *'
| `-ParmVarDecl 0x26de9576ff8 <col:85, col:95> col:95 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x26de9579420 <line:522:24, col:96> col:39 _mbstrnlen 'size_t (const char *, size_t) __attribute__((cdecl))':'size_t (const char *, size_t)'
| |-ParmVarDecl 0x26de95792b0 <col:57, col:69> col:69 _Str 'const char *'
| `-ParmVarDecl 0x26de9579328 <col:80, col:87> col:87 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x26de95797c0 <line:523:24, col:126> col:39 _mbstrnlen_l 'size_t (const char *, size_t, _locale_t) __attribute__((cdecl))':'size_t (const char *, size_t, _locale_t)'
| |-ParmVarDecl 0x26de9579500 <col:59, col:71> col:71 _Str 'const char *'
| |-ParmVarDecl 0x26de9579578 <col:82, col:89> col:89 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x26de95795f0 <col:109, col:119> col:119 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x26de9579b78 <line:524:9, col:170> col:24 mbtowc 'int (wchar_t *, const char *, size_t) __attribute__((cdecl))':'int (wchar_t *, const char *, size_t)'
| |-ParmVarDecl 0x26de95798a0 <col:54, col:64> col:64 _DstCh 'wchar_t *'
| |-ParmVarDecl 0x26de9579920 <col:122, col:135> col:135 _SrcCh 'const char *'
| `-ParmVarDecl 0x26de9579998 <col:148, col:155> col:155 _SrcSizeInBytes 'size_t':'unsigned long long'
|-FunctionDecl 0x26de9579fd0 <line:525:9, col:201> col:24 _mbtowc_l 'int (wchar_t *, const char *, size_t, _locale_t) __attribute__((cdecl))':'int (wchar_t *, const char *, size_t, _locale_t)'
| |-ParmVarDecl 0x26de9579c58 <col:57, col:67> col:67 _DstCh 'wchar_t *'
| |-ParmVarDecl 0x26de9579cd8 <col:125, col:138> col:138 _SrcCh 'const char *'
| |-ParmVarDecl 0x26de9579d50 <col:151, col:158> col:158 _SrcSizeInBytes 'size_t':'unsigned long long'
| `-ParmVarDecl 0x26de9579dc8 <col:184, col:194> col:194 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x26de957b520 <line:526:28, col:271> col:44 mbstowcs_s 'errno_t (size_t *, wchar_t *, size_t, const char *, size_t) __attribute__((cdecl))':'errno_t (size_t *, wchar_t *, size_t, const char *, size_t)'
| |-ParmVarDecl 0x26de957a0b8 <col:65, col:74> col:74 _PtNumOfCharConverted 'size_t *'
| |-ParmVarDecl 0x26de957a130 <col:155, col:165> col:165 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x26de957b1f0 <col:179, col:186> col:186 _SizeInWords 'size_t':'unsigned long long'
| |-ParmVarDecl 0x26de957b270 <col:227, col:240> col:240 _SrcBuf 'const char *'
| `-ParmVarDecl 0x26de957b2e8 <col:254, col:261> col:261 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x26de957b9a0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:2007:144> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:528:56 mbstowcs 'size_t (wchar_t *, const char *, size_t) __attribute__((cdecl))':'size_t (wchar_t *, const char *, size_t)'
| |-ParmVarDecl 0x26de957b6d0 <col:97, col:106> col:106 _Dest 'wchar_t *'
| |-ParmVarDecl 0x26de957b750 <col:120, col:134> col:134 _Source 'const char *'
| |-ParmVarDecl 0x26de957b7c8 <col:148, col:156> col:156 _MaxCount 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x26de957ba58 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using mbstowcs_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x26de957c058 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:530:28, col:301> col:44 _mbstowcs_s_l 'errno_t (size_t *, wchar_t *, size_t, const char *, size_t, _locale_t) __attribute__((cdecl))':'errno_t (size_t *, wchar_t *, size_t, const char *, size_t, _locale_t)'
| |-ParmVarDecl 0x26de957bb98 <col:68, col:77> col:77 _PtNumOfCharConverted 'size_t *'
| |-ParmVarDecl 0x26de957bc10 <col:158, col:168> col:168 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x26de957bc88 <col:182, col:189> col:189 _SizeInWords 'size_t':'unsigned long long'
| |-ParmVarDecl 0x26de957bd08 <col:230, col:243> col:243 _SrcBuf 'const char *'
| |-ParmVarDecl 0x26de957bd80 <col:257, col:264> col:264 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x26de957bdf8 <col:284, col:294> col:294 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x26de95745c8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:2010:160> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:532:59 _mbstowcs_l 'size_t (wchar_t *, const char *, size_t, _locale_t) __attribute__((cdecl))':'size_t (wchar_t *, const char *, size_t, _locale_t)'
| |-ParmVarDecl 0x26de9574250 <col:149, col:158> col:158 _Dest 'wchar_t *'
| |-ParmVarDecl 0x26de95742d0 <col:172, col:186> col:186 _Source 'const char *'
| |-ParmVarDecl 0x26de9574348 <col:200, col:208> col:208 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x26de95743c0 <col:228, col:239> col:239 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x26de9574688 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _mbstowcs_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x26de9574888 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:534:24, col:48> col:39 rand 'int (void) __attribute__((cdecl))':'int (void)'
|-FunctionDecl 0x26de9574a38 <line:539:28, col:73> col:43 _set_error_mode 'int (int) __attribute__((cdecl))':'int (int)'
| `-ParmVarDecl 0x26de9574958 <col:64, col:68> col:68 _Mode 'int'
|-FunctionDecl 0x26de9574c50 <line:541:9, col:53> col:24 srand 'void (unsigned int) __attribute__((cdecl))':'void (unsigned int)'
| `-ParmVarDecl 0x26de9574b10 <col:35, col:48> col:48 _Seed 'unsigned int'
|-FunctionDecl 0x26de9574f10 <line:542:39> col:39 implicit strtod 'double (const char *, char **)' extern
| |-ParmVarDecl 0x26de9574fb0 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x26de9575018 <<invalid sloc>> <invalid sloc> 'char **'
|-FunctionDecl 0x26de9575090 prev 0x26de9574f10 <col:24, col:112> col:39 strtod 'double (const char *, char **)'
| |-ParmVarDecl 0x26de9574d28 <col:53, col:66> col:66 _Str 'const char *'
| `-ParmVarDecl 0x26de9574da8 <col:97, col:105> col:105 _EndPtr 'char **'
|-FunctionDecl 0x26de9583548 <line:543:24, col:143> col:39 _strtod_l 'double (const char *, char **, _locale_t) __attribute__((cdecl))':'double (const char *, char **, _locale_t)'
| |-ParmVarDecl 0x26de9583270 <col:56, col:69> col:69 _Str 'const char *'
| |-ParmVarDecl 0x26de95832f0 <col:100, col:108> col:108 _EndPtr 'char **'
| `-ParmVarDecl 0x26de9583368 <col:126, col:136> col:136 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x26de95838c8 <line:544:39> col:39 implicit strtol 'long (const char *, char **, int)' extern
| |-ParmVarDecl 0x26de9583968 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x26de95839d0 <<invalid sloc>> <invalid sloc> 'char **'
| `-ParmVarDecl 0x26de9583a38 <<invalid sloc>> <invalid sloc> 'int'
|-FunctionDecl 0x26de9583ab8 prev 0x26de95838c8 <col:24, col:130> col:39 strtol 'long (const char *, char **, int)'
| |-ParmVarDecl 0x26de9583630 <col:53, col:66> col:66 _Str 'const char *'
| |-ParmVarDecl 0x26de95836b0 <col:97, col:105> col:105 _EndPtr 'char **'
| `-ParmVarDecl 0x26de9583730 <col:119, col:123> col:123 _Radix 'int'
|-FunctionDecl 0x26de9583f20 <line:545:24, col:158> col:39 _strtol_l 'long (const char *, char **, int, _locale_t) __attribute__((cdecl))':'long (const char *, char **, int, _locale_t)'
| |-ParmVarDecl 0x26de9583ba0 <col:56, col:68> col:68 _Str 'const char *'
| |-ParmVarDecl 0x26de9583c20 <col:99, col:106> col:106 _EndPtr 'char **'
| |-ParmVarDecl 0x26de9583ca0 <col:120, col:124> col:124 _Radix 'int'
| `-ParmVarDecl 0x26de9583d18 <col:141, col:151> col:151 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x26de957d210 <line:546:43> col:43 implicit strtoll 'long long (const char *, char **, int)' extern
| |-ParmVarDecl 0x26de957d2b0 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x26de957d318 <<invalid sloc>> <invalid sloc> 'char **'
| `-ParmVarDecl 0x26de957d380 <<invalid sloc>> <invalid sloc> 'int'
|-FunctionDecl 0x26de957d400 prev 0x26de957d210 <col:24, col:135> col:43 strtoll 'long long (const char *, char **, int)'
| |-ParmVarDecl 0x26de9584010 <col:58, col:71> col:71 _Str 'const char *'
| |-ParmVarDecl 0x26de9584090 <col:102, col:110> col:110 _EndPtr 'char **'
| `-ParmVarDecl 0x26de9584110 <col:124, col:128> col:128 _Radix 'int'
|-FunctionDecl 0x26de957d7a0 <line:547:24, col:166> col:43 _strtoll_l 'long long (const char *, char **, int, _locale_t) __attribute__((cdecl))':'long long (const char *, char **, int, _locale_t)'
| |-ParmVarDecl 0x26de957d4e8 <col:61, col:74> col:74 _Str 'const char *'
| |-ParmVarDecl 0x26de957d568 <col:105, col:113> col:113 _EndPtr 'char **'
| |-ParmVarDecl 0x26de957d5e8 <col:127, col:131> col:131 _Radix 'int'
| `-ParmVarDecl 0x26de957d660 <col:148, col:158> col:158 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x26de957db28 <line:548:46> col:46 implicit strtoul 'unsigned long (const char *, char **, int)' extern
| |-ParmVarDecl 0x26de957dbc8 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x26de957dc30 <<invalid sloc>> <invalid sloc> 'char **'
| `-ParmVarDecl 0x26de957dc98 <<invalid sloc>> <invalid sloc> 'int'
|-FunctionDecl 0x26de957dd18 prev 0x26de957db28 <col:24, col:137> col:46 strtoul 'unsigned long (const char *, char **, int)'
| |-ParmVarDecl 0x26de957d890 <col:61, col:74> col:74 _Str 'const char *'
| |-ParmVarDecl 0x26de957d910 <col:105, col:113> col:113 _EndPtr 'char **'
| `-ParmVarDecl 0x26de957d990 <col:127, col:131> col:131 _Radix 'int'
|-FunctionDecl 0x26de957c200 <line:549:24, col:160> col:46 _strtoul_l 'unsigned long (const char *, char **, int, _locale_t) __attribute__((cdecl))':'unsigned long (const char *, char **, int, _locale_t)'
| |-ParmVarDecl 0x26de957de00 <col:57, col:70> col:70 _Str 'const char *'
| |-ParmVarDecl 0x26de957de80 <col:101, col:108> col:108 _EndPtr 'char **'
| |-ParmVarDecl 0x26de957df00 <col:122, col:126> col:126 _Radix 'int'
| `-ParmVarDecl 0x26de957df78 <col:143, col:153> col:153 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x26de957c510 <line:550:51> col:51 implicit strtoull 'unsigned long long (const char *, char **, int)' extern
| |-ParmVarDecl 0x26de957c5b0 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x26de957c618 <<invalid sloc>> <invalid sloc> 'char **'
| `-ParmVarDecl 0x26de957c680 <<invalid sloc>> <invalid sloc> 'int'
|-FunctionDecl 0x26de957c700 prev 0x26de957c510 <col:24, col:143> col:51 strtoull 'unsigned long long (const char *, char **, int)'
| |-ParmVarDecl 0x26de957c2f0 <col:67, col:80> col:80 _Str 'const char *'
| |-ParmVarDecl 0x26de957c370 <col:111, col:119> col:119 _EndPtr 'char **'
| `-ParmVarDecl 0x26de957c3f0 <col:133, col:137> col:137 _Radix 'int'
|-FunctionDecl 0x26de957caa0 <line:551:24, col:174> col:51 _strtoull_l 'unsigned long long (const char *, char **, int, _locale_t) __attribute__((cdecl))':'unsigned long long (const char *, char **, int, _locale_t)'
| |-ParmVarDecl 0x26de957c7e8 <col:70, col:83> col:83 _Str 'const char *'
| |-ParmVarDecl 0x26de957c868 <col:114, col:122> col:122 _EndPtr 'char **'
| |-ParmVarDecl 0x26de957c8e8 <col:136, col:140> col:140 _Radix 'int'
| `-ParmVarDecl 0x26de957c960 <col:157, col:167> col:167 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x26de957cd80 <line:552:44> col:44 implicit strtold 'long double (const char *, char **)' extern
| |-ParmVarDecl 0x26de957ce20 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x26de957ce88 <<invalid sloc>> <invalid sloc> 'char **'
|-FunctionDecl 0x26de957cf00 prev 0x26de957cd80 <col:24, col:118> col:44 strtold 'long double (const char *, char **)'
| |-ParmVarDecl 0x26de957cb90 <col:59, col:72> col:72 _Str 'const char *'
| `-ParmVarDecl 0x26de957cc10 <col:103, col:111> col:111 _EndPtr 'char **'
|-FunctionDecl 0x26de9584368 <line:553:24, col:149> col:44 _strtold_l 'long double (const char *, char **, _locale_t) __attribute__((cdecl))':'long double (const char *, char **, _locale_t)'
| |-ParmVarDecl 0x26de957cfe0 <col:62, col:75> col:75 _Str 'const char *'
| |-ParmVarDecl 0x26de957d060 <col:106, col:114> col:114 _EndPtr 'char **'
| `-ParmVarDecl 0x26de957d0d8 <col:132, col:142> col:142 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x26de9584640 <line:554:38> col:38 implicit strtof 'float (const char *, char **)' extern
| |-ParmVarDecl 0x26de95846e0 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x26de9584748 <<invalid sloc>> <invalid sloc> 'char **'
|-FunctionDecl 0x26de95847c0 prev 0x26de9584640 <col:24, col:111> col:38 strtof 'float (const char *, char **)'
| |-ParmVarDecl 0x26de9584450 <col:52, col:65> col:65 _Str 'const char *'
| `-ParmVarDecl 0x26de95844d0 <col:96, col:104> col:104 _EndPtr 'char **'
|-FunctionDecl 0x26de9584b78 <line:555:24, col:142> col:38 _strtof_l 'float (const char *, char **, _locale_t) __attribute__((cdecl))':'float (const char *, char **, _locale_t)'
| |-ParmVarDecl 0x26de95848a0 <col:55, col:68> col:68 _Str 'const char *'
| |-ParmVarDecl 0x26de9584920 <col:99, col:107> col:107 _EndPtr 'char **'
| `-ParmVarDecl 0x26de9584998 <col:125, col:135> col:135 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x26de9584d40 <line:560:9, col:60> col:21 system 'int (const char *) __attribute__((cdecl))':'int (const char *)'
| `-ParmVarDecl 0x26de9584c60 <col:39, col:52> col:52 _Command 'const char *'
|-FunctionDecl 0x26de9585198 <line:564:28, col:150> col:44 _ultoa_s 'errno_t (unsigned long, char *, size_t, int) __attribute__((cdecl))':'errno_t (unsigned long, char *, size_t, int)'
| |-ParmVarDecl 0x26de9584e18 <col:58, col:72> col:72 _Val 'unsigned long'
| |-ParmVarDecl 0x26de9584e98 <col:100, col:107> col:107 _DstBuf 'char *'
| |-ParmVarDecl 0x26de9584f10 <col:121, col:128> col:128 _Size 'size_t':'unsigned long long'
| `-ParmVarDecl 0x26de9584f90 <col:140, col:144> col:144 _Radix 'int'
|-FunctionDecl 0x26de9585608 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1951:149> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:566:79 _ultoa 'char *(unsigned long, char *, int) __attribute__((cdecl))':'char *(unsigned long, char *, int)'
| |-ParmVarDecl 0x26de9585368 <col:92, col:107> col:107 _Value 'unsigned long'
| |-ParmVarDecl 0x26de95853e8 <col:139, col:145> col:145 _Dest 'char *'
| |-ParmVarDecl 0x26de9585468 <col:157, col:162> col:162 _Radix 'int'
| `-DeprecatedAttr 0x26de95856c0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _ultoa_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x26de9585af0 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:567:127> col:58 wctomb 'int (char *, wchar_t) __attribute__((cdecl))':'int (char *, wchar_t)'
| |-ParmVarDecl 0x26de95858c8 <col:96, col:103> col:103 _MbCh 'char *'
| |-ParmVarDecl 0x26de9585940 <col:115, col:123> col:123 _WCh 'wchar_t':'unsigned short'
| `-DeprecatedAttr 0x26de9585ba0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using wctomb_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x26de9586078 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:568:155> col:61 _wctomb_l 'int (char *, wchar_t, _locale_t) __attribute__((cdecl))':'int (char *, wchar_t, _locale_t)'
| |-ParmVarDecl 0x26de9585da8 <col:96, col:103> col:103 _MbCh 'char *'
| |-ParmVarDecl 0x26de9585e20 <col:115, col:123> col:123 _WCh 'wchar_t':'unsigned short'
| |-ParmVarDecl 0x26de9585e98 <col:138, col:148> col:148 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x26de9586130 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wctomb_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x26de957e598 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:570:28, col:200> col:44 wctomb_s 'errno_t (int *, char *, rsize_t, wchar_t) __attribute__((cdecl))':'errno_t (int *, char *, rsize_t, wchar_t)'
| |-ParmVarDecl 0x26de957e220 <col:63, col:69> col:69 _SizeConverted 'int *'
| |-ParmVarDecl 0x26de957e2a0 <col:142, col:149> col:149 _MbCh 'char *'
| |-ParmVarDecl 0x26de957e318 <col:161, col:169> col:169 _SizeInBytes 'rsize_t':'unsigned long long'
| `-ParmVarDecl 0x26de957e390 <col:188, col:196> col:196 _WCh 'wchar_t':'unsigned short'
|-FunctionDecl 0x26de957eaa0 <line:572:28, col:206> col:44 _wctomb_s_l 'errno_t (int *, char *, size_t, wchar_t, _locale_t) __attribute__((cdecl))':'errno_t (int *, char *, size_t, wchar_t, _locale_t)'
| |-ParmVarDecl 0x26de957e688 <col:66, col:72> col:72 _SizeConverted 'int *'
| |-ParmVarDecl 0x26de957e708 <col:121, col:128> col:128 _MbCh 'char *'
| |-ParmVarDecl 0x26de957e780 <col:140, col:147> col:147 _SizeInBytes 'size_t':'unsigned long long'
| |-ParmVarDecl 0x26de957e7f8 <col:166, col:174> col:174 _WCh 'wchar_t':'unsigned short'
| `-ParmVarDecl 0x26de957e870 <col:189, col:199> col:199 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x26de957efb0 <line:573:28, col:263> col:44 wcstombs_s 'errno_t (size_t *, char *, size_t, const wchar_t *, size_t) __attribute__((cdecl))':'errno_t (size_t *, char *, size_t, const wchar_t *, size_t)'
| |-ParmVarDecl 0x26de957eb90 <col:65, col:74> col:74 _PtNumOfCharConverted 'size_t *'
| |-ParmVarDecl 0x26de957ec10 <col:164, col:171> col:171 _Dst 'char *'
| |-ParmVarDecl 0x26de957ec88 <col:182, col:189> col:189 _DstSizeInBytes 'size_t':'unsigned long long'
| |-ParmVarDecl 0x26de957ed00 <col:213, col:229> col:229 _Src 'const wchar_t *'
| `-ParmVarDecl 0x26de957ed78 <col:240, col:247> col:247 _MaxCountInBytes 'size_t':'unsigned long long'
|-FunctionDecl 0x26de957f480 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:2007:144> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:575:56 wcstombs 'size_t (char *, const wchar_t *, size_t) __attribute__((cdecl))':'size_t (char *, const wchar_t *, size_t)'
| |-ParmVarDecl 0x26de957f168 <col:97, col:103> col:103 _Dest 'char *'
| |-ParmVarDecl 0x26de957f230 <col:117, col:134> col:134 _Source 'const wchar_t *'
| |-ParmVarDecl 0x26de957f2a8 <col:148, col:156> col:156 _MaxCount 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x26de957f538 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using wcstombs_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x26de957fb38 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:576:28, col:294> col:44 _wcstombs_s_l 'errno_t (size_t *, char *, size_t, const wchar_t *, size_t, _locale_t) __attribute__((cdecl))':'errno_t (size_t *, char *, size_t, const wchar_t *, size_t, _locale_t)'
| |-ParmVarDecl 0x26de957f678 <col:68, col:77> col:77 _PtNumOfCharConverted 'size_t *'
| |-ParmVarDecl 0x26de957f6f8 <col:167, col:174> col:174 _Dst 'char *'
| |-ParmVarDecl 0x26de957f770 <col:185, col:192> col:192 _DstSizeInBytes 'size_t':'unsigned long long'
| |-ParmVarDecl 0x26de957f7e8 <col:216, col:232> col:232 _Src 'const wchar_t *'
| |-ParmVarDecl 0x26de957f860 <col:243, col:250> col:250 _MaxCountInBytes 'size_t':'unsigned long long'
| `-ParmVarDecl 0x26de957f8d8 <col:277, col:287> col:287 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x26de9580068 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:2010:160> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:578:59 _wcstombs_l 'size_t (char *, const wchar_t *, size_t, _locale_t) __attribute__((cdecl))':'size_t (char *, const wchar_t *, size_t, _locale_t)'
| |-ParmVarDecl 0x26de957fcf8 <col:146, col:152> col:152 _Dest 'char *'
| |-ParmVarDecl 0x26de957fd70 <col:166, col:183> col:183 _Source 'const wchar_t *'
| |-ParmVarDecl 0x26de957fde8 <col:197, col:205> col:205 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x26de957fe60 <col:225, col:236> col:236 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x26de9580128 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wcstombs_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x26de95804c0 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:640:142> col:142 implicit calloc 'void *(unsigned long long, unsigned long long)' extern
| |-ParmVarDecl 0x26de9580560 <<invalid sloc>> <invalid sloc> 'unsigned long long'
| `-ParmVarDecl 0x26de95805c8 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x26de9580640 prev 0x26de95804c0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:21, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:640:224> col:142 calloc 'void *(unsigned long long, unsigned long long)'
| |-ParmVarDecl 0x26de9580298 <col:173, col:180> col:180 _Count 'size_t':'unsigned long long'
| |-ParmVarDecl 0x26de9580310 <col:212, col:219> col:219 _Size 'size_t':'unsigned long long'
| |-NoAliasAttr 0x26de95806f0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:32>
| `-RestrictAttr 0x26de9580748 <line:615:33> restrict
|-FunctionDecl 0x26de95808e0 <line:611:21, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:641:182> col:132 free 'void (void *) __attribute__((cdecl))':'void (void *)'
| |-ParmVarDecl 0x26de95807a0 <col:168, col:175> col:175 _Memory 'void *'
| `-NoAliasAttr 0x26de9580988 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:32>
|-FunctionDecl 0x26de9580b88 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:642:161> col:161 implicit malloc 'void *(unsigned long long)' extern
| `-ParmVarDecl 0x26de9580c28 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x26de9580c98 prev 0x26de9580b88 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:21, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:642:204> col:161 malloc 'void *(unsigned long long)'
| |-ParmVarDecl 0x26de9580a08 <col:192, col:199> col:199 _Size 'size_t':'unsigned long long'
| |-NoAliasAttr 0x26de9580d40 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:32>
| `-RestrictAttr 0x26de9580d98 <line:615:33> restrict
|-FunctionDecl 0x26de9581010 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:644:142> col:142 implicit realloc 'void *(void *, unsigned long long)' extern
| |-ParmVarDecl 0x26de95810b0 <<invalid sloc>> <invalid sloc> 'void *'
| `-ParmVarDecl 0x26de9581118 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x26de9581190 prev 0x26de9581010 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:21, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:644:236> col:142 realloc 'void *(void *, unsigned long long)'
| |-ParmVarDecl 0x26de9580df0 <col:181, col:188> col:188 _Memory 'void *'
| |-ParmVarDecl 0x26de9580e68 <col:221, col:228> col:228 _NewSize 'size_t':'unsigned long long'
| |-NoAliasAttr 0x26de9581250 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:32>
| `-RestrictAttr 0x26de95812a8 <line:615:33> restrict
|-FunctionDecl 0x26de95815c8 <line:611:21, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:646:274> col:142 _recalloc 'void *(void *, size_t, size_t) __attribute__((cdecl))':'void *(void *, size_t, size_t)'
| |-ParmVarDecl 0x26de9581300 <col:183, col:190> col:190 _Memory 'void *'
| |-ParmVarDecl 0x26de9581378 <col:223, col:230> col:230 _Count 'size_t':'unsigned long long'
| |-ParmVarDecl 0x26de95813f0 <col:262, col:269> col:269 _Size 'size_t':'unsigned long long'
| |-NoAliasAttr 0x26de9581680 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:32>
| `-RestrictAttr 0x26de95816d8 <line:615:33> restrict
|-FunctionDecl 0x26de9581808 <line:611:21, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:647:191> col:132 _aligned_free 'void (void *) __attribute__((cdecl))':'void (void *)'
| |-ParmVarDecl 0x26de9581730 <col:177, col:184> col:184 _Memory 'void *'
| `-NoAliasAttr 0x26de95818b0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:32>
|-FunctionDecl 0x26de9581aa8 <col:21, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:648:218> col:142 _aligned_malloc 'void *(size_t, size_t) __attribute__((cdecl))':'void *(size_t, size_t)'
| |-ParmVarDecl 0x26de9581930 <col:182, col:189> col:189 _Size 'size_t':'unsigned long long'
| |-ParmVarDecl 0x26de95819a8 <col:201, col:208> col:208 _Alignment 'size_t':'unsigned long long'
| |-NoAliasAttr 0x26de9581b58 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:32>
| `-RestrictAttr 0x26de9581bb0 <line:615:33> restrict
|-FunctionDecl 0x26de9581ec8 <line:611:21, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:649:246> col:142 _aligned_offset_malloc 'void *(size_t, size_t, size_t) __attribute__((cdecl))':'void *(size_t, size_t, size_t)'
| |-ParmVarDecl 0x26de9581c00 <col:189, col:196> col:196 _Size 'size_t':'unsigned long long'
| |-ParmVarDecl 0x26de9581c78 <col:208, col:215> col:215 _Alignment 'size_t':'unsigned long long'
| |-ParmVarDecl 0x26de9581cf0 <col:232, col:239> col:239 _Offset 'size_t':'unsigned long long'
| |-NoAliasAttr 0x26de9581f80 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:32>
| `-RestrictAttr 0x26de9581fd8 <line:615:33> restrict
|-FunctionDecl 0x26de9582260 <line:611:21, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:651:272> col:145 _aligned_realloc 'void *(void *, size_t, size_t) __attribute__((cdecl))':'void *(void *, size_t, size_t)'
| |-ParmVarDecl 0x26de9582030 <col:193, col:200> col:200 _Memory 'void *'
| |-ParmVarDecl 0x26de95820a8 <col:233, col:240> col:240 _NewSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x26de9582120 <col:255, col:262> col:262 _Alignment 'size_t':'unsigned long long'
| |-NoAliasAttr 0x26de9582318 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:32>
| `-RestrictAttr 0x26de9582370 <line:615:33> restrict
|-FunctionDecl 0x26de9582740 <line:611:21, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:653:306> col:142 _aligned_recalloc 'void *(void *, size_t, size_t, size_t) __attribute__((cdecl))':'void *(void *, size_t, size_t, size_t)'
| |-ParmVarDecl 0x26de95823c8 <col:191, col:198> col:198 _Memory 'void *'
| |-ParmVarDecl 0x26de9582440 <col:231, col:238> col:238 _Count 'size_t':'unsigned long long'
| |-ParmVarDecl 0x26de95824b8 <col:270, col:277> col:277 _Size 'size_t':'unsigned long long'
| |-ParmVarDecl 0x26de9582530 <col:289, col:296> col:296 _Alignment 'size_t':'unsigned long long'
| |-NoAliasAttr 0x26de9582800 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:32>
| `-RestrictAttr 0x26de9582858 <line:615:33> restrict
|-FunctionDecl 0x26de9582b58 <line:611:21, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:655:300> col:145 _aligned_offset_realloc 'void *(void *, size_t, size_t, size_t) __attribute__((cdecl))':'void *(void *, size_t, size_t, size_t)'
| |-ParmVarDecl 0x26de95828b0 <col:200, col:207> col:207 _Memory 'void *'
| |-ParmVarDecl 0x26de9582928 <col:240, col:247> col:247 _NewSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x26de95829a0 <col:262, col:269> col:269 _Alignment 'size_t':'unsigned long long'
| |-ParmVarDecl 0x26de9582a18 <col:286, col:293> col:293 _Offset 'size_t':'unsigned long long'
| |-NoAliasAttr 0x26de9582c18 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:32>
| `-RestrictAttr 0x26de9582c70 <line:615:33> restrict
|-FunctionDecl 0x26de95830e8 <line:611:21, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:657:334> col:142 _aligned_offset_recalloc 'void *(void *, size_t, size_t, size_t, size_t) __attribute__((cdecl))':'void *(void *, size_t, size_t, size_t, size_t)'
| |-ParmVarDecl 0x26de9582cc8 <col:198, col:205> col:205 _Memory 'void *'
| |-ParmVarDecl 0x26de9582d40 <col:238, col:245> col:245 _Count 'size_t':'unsigned long long'
| |-ParmVarDecl 0x26de9582db8 <col:277, col:284> col:284 _Size 'size_t':'unsigned long long'
| |-ParmVarDecl 0x26de9582e30 <col:296, col:303> col:303 _Alignment 'size_t':'unsigned long long'
| |-ParmVarDecl 0x26de9582ea8 <col:320, col:327> col:327 _Offset 'size_t':'unsigned long long'
| |-NoAliasAttr 0x26de95831b0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:32>
| `-RestrictAttr 0x26de9583208 <line:615:33> restrict
|-FunctionDecl 0x26de95ca960 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:658:73, col:176> col:88 _aligned_msize 'size_t (void *, size_t, size_t) __attribute__((cdecl))':'size_t (void *, size_t, size_t)'
| |-ParmVarDecl 0x26de95ca6a0 <col:117, col:124> col:124 _Memory 'void *'
| |-ParmVarDecl 0x26de95ca718 <col:138, col:145> col:145 _Alignment 'size_t':'unsigned long long'
| `-ParmVarDecl 0x26de95ca790 <col:162, col:169> col:169 _Offset 'size_t':'unsigned long long'
|-FunctionDecl 0x26de95cadb8 <line:685:28, col:157> col:44 _itow_s 'errno_t (int, wchar_t *, size_t, int) __attribute__((cdecl))':'errno_t (int, wchar_t *, size_t, int)'
| |-ParmVarDecl 0x26de95caa48 <col:58, col:62> col:62 _Val 'int'
| |-ParmVarDecl 0x26de95caac0 <col:97, col:107> col:107 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x26de95cab38 <col:121, col:128> col:128 _SizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x26de95cabb8 <col:147, col:151> col:151 _Radix 'int'
|-FunctionDecl 0x26de95cb230 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1951:149> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:687:82 _itow 'wchar_t *(int, wchar_t *, int) __attribute__((cdecl))':'wchar_t *(int, wchar_t *, int)'
| |-ParmVarDecl 0x26de95caf68 <col:94, col:99> col:99 _Value 'int'
| |-ParmVarDecl 0x26de95cafe0 <col:131, col:140> col:140 _Dest 'wchar_t *'
| |-ParmVarDecl 0x26de95cb060 <col:152, col:157> col:157 _Radix 'int'
| `-DeprecatedAttr 0x26de95cb2e8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _itow_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x26de95cc7f8 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:688:28, col:158> col:44 _ltow_s 'errno_t (long, wchar_t *, size_t, int) __attribute__((cdecl))':'errno_t (long, wchar_t *, size_t, int)'
| |-ParmVarDecl 0x26de95cb430 <col:58, col:63> col:63 _Val 'long'
| |-ParmVarDecl 0x26de95cb4a8 <col:98, col:108> col:108 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x26de95cb520 <col:122, col:129> col:129 _SizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x26de95cb5a0 <col:148, col:152> col:152 _Radix 'int'
|-FunctionDecl 0x26de95ccc70 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1951:149> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:690:82 _ltow 'wchar_t *(long, wchar_t *, int) __attribute__((cdecl))':'wchar_t *(long, wchar_t *, int)'
| |-ParmVarDecl 0x26de95cc9a8 <col:94, col:100> col:100 _Value 'long'
| |-ParmVarDecl 0x26de95cca20 <col:132, col:141> col:141 _Dest 'wchar_t *'
| |-ParmVarDecl 0x26de95ccaa0 <col:153, col:158> col:158 _Radix 'int'
| `-DeprecatedAttr 0x26de95ccd28 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _ltow_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x26de95cd1e8 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:691:28, col:168> col:44 _ultow_s 'errno_t (unsigned long, wchar_t *, size_t, int) __attribute__((cdecl))':'errno_t (unsigned long, wchar_t *, size_t, int)'
| |-ParmVarDecl 0x26de95cce70 <col:59, col:73> col:73 _Val 'unsigned long'
| |-ParmVarDecl 0x26de95ccee8 <col:108, col:118> col:118 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x26de95ccf60 <col:132, col:139> col:139 _SizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x26de95ccfe0 <col:158, col:162> col:162 _Radix 'int'
|-FunctionDecl 0x26de95ce6e0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1951:149> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:693:82 _ultow 'wchar_t *(unsigned long, wchar_t *, int) __attribute__((cdecl))':'wchar_t *(unsigned long, wchar_t *, int)'
| |-ParmVarDecl 0x26de95cd398 <col:95, col:110> col:110 _Value 'unsigned long'
| |-ParmVarDecl 0x26de95cd410 <col:142, col:151> col:151 _Dest 'wchar_t *'
| |-ParmVarDecl 0x26de95cd490 <col:163, col:168> col:168 _Radix 'int'
| `-DeprecatedAttr 0x26de95ce798 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _ultow_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x26de95ceb00 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:694:24, col:118> col:39 wcstod 'double (const wchar_t *, wchar_t **) __attribute__((cdecl))':'double (const wchar_t *, wchar_t **)'
| |-ParmVarDecl 0x26de95ce8d8 <col:53, col:69> col:69 _Str 'const wchar_t *'
| `-ParmVarDecl 0x26de95ce958 <col:100, col:111> col:111 _EndPtr 'wchar_t **'
|-FunctionDecl 0x26de95ceea8 <line:695:24, col:148> col:39 _wcstod_l 'double (const wchar_t *, wchar_t **, _locale_t) __attribute__((cdecl))':'double (const wchar_t *, wchar_t **, _locale_t)'
| |-ParmVarDecl 0x26de95cebd8 <col:56, col:71> col:71 _Str 'const wchar_t *'
| |-ParmVarDecl 0x26de95cec58 <col:102, col:113> col:113 _EndPtr 'wchar_t **'
| `-ParmVarDecl 0x26de95cecd0 <col:131, col:141> col:141 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x26de95cf268 <line:696:24, col:129> col:39 wcstol 'long (const wchar_t *, wchar_t **, int) __attribute__((cdecl))':'long (const wchar_t *, wchar_t **, int)'
| |-ParmVarDecl 0x26de95cef88 <col:53, col:68> col:68 _Str 'const wchar_t *'
| |-ParmVarDecl 0x26de95cf008 <col:99, col:110> col:110 _EndPtr 'wchar_t **'
| `-ParmVarDecl 0x26de95cf088 <col:119, col:123> col:123 _Radix 'int'
|-FunctionDecl 0x26de95cb6b0 <line:697:24, col:159> col:39 _wcstol_l 'long (const wchar_t *, wchar_t **, int, _locale_t) __attribute__((cdecl))':'long (const wchar_t *, wchar_t **, int, _locale_t)'
| |-ParmVarDecl 0x26de95cf348 <col:56, col:71> col:71 _Str 'const wchar_t *'
| |-ParmVarDecl 0x26de95cf3c8 <col:102, col:112> col:112 _EndPtr 'wchar_t **'
| |-ParmVarDecl 0x26de95cf448 <col:121, col:125> col:125 _Radix 'int'
| `-ParmVarDecl 0x26de95cf4c0 <col:142, col:152> col:152 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x26de95cba78 <line:698:24, col:133> col:43 wcstoll 'long long (const wchar_t *, wchar_t **, int) __attribute__((cdecl))':'long long (const wchar_t *, wchar_t **, int)'
| |-ParmVarDecl 0x26de95cb798 <col:58, col:73> col:73 _Str 'const wchar_t *'
| |-ParmVarDecl 0x26de95cb818 <col:104, col:114> col:114 _EndPtr 'wchar_t **'
| `-ParmVarDecl 0x26de95cb898 <col:123, col:127> col:127 _Radix 'int'
|-FunctionDecl 0x26de95cbee0 <line:699:24, col:164> col:43 _wcstoll_l 'long long (const wchar_t *, wchar_t **, int, _locale_t) __attribute__((cdecl))':'long long (const wchar_t *, wchar_t **, int, _locale_t)'
| |-ParmVarDecl 0x26de95cbb58 <col:61, col:76> col:76 _Str 'const wchar_t *'
| |-ParmVarDecl 0x26de95cbbd8 <col:107, col:117> col:117 _EndPtr 'wchar_t **'
| |-ParmVarDecl 0x26de95cbc58 <col:126, col:130> col:130 _Radix 'int'
| `-ParmVarDecl 0x26de95cbcd0 <col:147, col:157> col:157 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x26de95cc2a8 <line:700:24, col:137> col:46 wcstoul 'unsigned long (const wchar_t *, wchar_t **, int) __attribute__((cdecl))':'unsigned long (const wchar_t *, wchar_t **, int)'
| |-ParmVarDecl 0x26de95cbfc8 <col:61, col:76> col:76 _Str 'const wchar_t *'
| |-ParmVarDecl 0x26de95cc048 <col:107, col:118> col:118 _EndPtr 'wchar_t **'
| `-ParmVarDecl 0x26de95cc0c8 <col:127, col:131> col:131 _Radix 'int'
|-FunctionDecl 0x26de95d27a0 <line:701:24, col:167> col:46 _wcstoul_l 'unsigned long (const wchar_t *, wchar_t **, int, _locale_t) __attribute__((cdecl))':'unsigned long (const wchar_t *, wchar_t **, int, _locale_t)'
| |-ParmVarDecl 0x26de95cc388 <col:64, col:79> col:79 _Str 'const wchar_t *'
| |-ParmVarDecl 0x26de95cc408 <col:110, col:120> col:120 _EndPtr 'wchar_t **'
| |-ParmVarDecl 0x26de95cc488 <col:129, col:133> col:133 _Radix 'int'
| `-ParmVarDecl 0x26de95cc500 <col:150, col:160> col:160 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x26de95d2b68 <line:702:24, col:143> col:51 wcstoull 'unsigned long long (const wchar_t *, wchar_t **, int) __attribute__((cdecl))':'unsigned long long (const wchar_t *, wchar_t **, int)'
| |-ParmVarDecl 0x26de95d2888 <col:67, col:82> col:82 _Str 'const wchar_t *'
| |-ParmVarDecl 0x26de95d2908 <col:113, col:124> col:124 _EndPtr 'wchar_t **'
| `-ParmVarDecl 0x26de95d2988 <col:133, col:137> col:137 _Radix 'int'
|-FunctionDecl 0x26de95d2fd0 <line:703:24, col:174> col:51 _wcstoull_l 'unsigned long long (const wchar_t *, wchar_t **, int, _locale_t) __attribute__((cdecl))':'unsigned long long (const wchar_t *, wchar_t **, int, _locale_t)'
| |-ParmVarDecl 0x26de95d2c48 <col:70, col:85> col:85 _Str 'const wchar_t *'
| |-ParmVarDecl 0x26de95d2cc8 <col:116, col:127> col:127 _EndPtr 'wchar_t **'
| |-ParmVarDecl 0x26de95d2d48 <col:136, col:140> col:140 _Radix 'int'
| `-ParmVarDecl 0x26de95d2dc0 <col:157, col:167> col:167 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x26de95d32e0 <line:704:24, col:124> col:44 wcstold 'long double (const wchar_t *, wchar_t **) __attribute__((cdecl))':'long double (const wchar_t *, wchar_t **)'
| |-ParmVarDecl 0x26de95d30b8 <col:59, col:75> col:75 _Str 'const wchar_t *'
| `-ParmVarDecl 0x26de95d3138 <col:106, col:117> col:117 _EndPtr 'wchar_t **'
|-FunctionDecl 0x26de95d1710 <line:705:24, col:155> col:44 _wcstold_l 'long double (const wchar_t *, wchar_t **, _locale_t) __attribute__((cdecl))':'long double (const wchar_t *, wchar_t **, _locale_t)'
| |-ParmVarDecl 0x26de95d33b8 <col:62, col:78> col:78 _Str 'const wchar_t *'
| |-ParmVarDecl 0x26de95d3438 <col:109, col:120> col:120 _EndPtr 'wchar_t **'
| `-ParmVarDecl 0x26de95d34b0 <col:138, col:148> col:148 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x26de95d1a20 <line:706:24, col:117> col:38 wcstof 'float (const wchar_t *, wchar_t **) __attribute__((cdecl))':'float (const wchar_t *, wchar_t **)'
| |-ParmVarDecl 0x26de95d17f0 <col:52, col:68> col:68 _Str 'const wchar_t *'
| `-ParmVarDecl 0x26de95d1870 <col:99, col:110> col:110 _EndPtr 'wchar_t **'
|-FunctionDecl 0x26de95d1dc8 <line:707:24, col:148> col:38 _wcstof_l 'float (const wchar_t *, wchar_t **, _locale_t) __attribute__((cdecl))':'float (const wchar_t *, wchar_t **, _locale_t)'
| |-ParmVarDecl 0x26de95d1af8 <col:55, col:71> col:71 _Str 'const wchar_t *'
| |-ParmVarDecl 0x26de95d1b78 <col:102, col:113> col:113 _EndPtr 'wchar_t **'
| `-ParmVarDecl 0x26de95d1bf0 <col:131, col:141> col:141 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x26de95d2040 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:711:118> col:78 _wgetenv 'wchar_t *(const wchar_t *) __attribute__((cdecl))':'wchar_t *(const wchar_t *)'
| |-ParmVarDecl 0x26de95d1f68 <col:94, col:110> col:110 _VarName 'const wchar_t *'
| `-DeprecatedAttr 0x26de95d20e8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wdupenv_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x26de95d2598 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:712:28, col:198> col:44 _wgetenv_s 'errno_t (size_t *, wchar_t *, size_t, const wchar_t *) __attribute__((cdecl))':'errno_t (size_t *, wchar_t *, size_t, const wchar_t *)'
| |-ParmVarDecl 0x26de95d2228 <col:61, col:70> col:70 _ReturnSize 'size_t *'
| |-ParmVarDecl 0x26de95d22a0 <col:119, col:129> col:129 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x26de95d2318 <col:143, col:150> col:150 _DstSizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x26de95d2390 <col:174, col:190> col:190 _VarName 'const wchar_t *'
|-FunctionDecl 0x26de95d79c0 <line:720:28, col:214> col:44 _wdupenv_s 'errno_t (wchar_t **, size_t *, const wchar_t *) __attribute__((cdecl))':'errno_t (wchar_t **, size_t *, const wchar_t *)'
| |-ParmVarDecl 0x26de95d2688 <col:127, col:137> col:137 _Buffer 'wchar_t **'
| |-ParmVarDecl 0x26de95d7770 <col:156, col:164> col:164 _BufferSizeInWords 'size_t *'
| `-ParmVarDecl 0x26de95d77e8 <col:191, col:206> col:206 _VarName 'const wchar_t *'
|-FunctionDecl 0x26de95d7c18 <line:728:9, col:65> col:21 _wsystem 'int (const wchar_t *) __attribute__((cdecl))':'int (const wchar_t *)'
| `-ParmVarDecl 0x26de95d7aa0 <col:41, col:57> col:57 _Command 'const wchar_t *'
|-FunctionDecl 0x26de95d7e68 <line:733:24, col:71> col:39 _wtof 'double (const wchar_t *) __attribute__((cdecl))':'double (const wchar_t *)'
| `-ParmVarDecl 0x26de95d7ce8 <col:52, col:67> col:67 _Str 'const wchar_t *'
|-FunctionDecl 0x26de95d8160 <line:734:24, col:101> col:39 _wtof_l 'double (const wchar_t *, _locale_t) __attribute__((cdecl))':'double (const wchar_t *, _locale_t)'
| |-ParmVarDecl 0x26de95d7f38 <col:54, col:69> col:69 _Str 'const wchar_t *'
| `-ParmVarDecl 0x26de95d7fb0 <col:84, col:94> col:94 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x26de95d8318 <line:735:24, col:68> col:36 _wtoi 'int (const wchar_t *) __attribute__((cdecl))':'int (const wchar_t *)'
| `-ParmVarDecl 0x26de95d8238 <col:49, col:64> col:64 _Str 'const wchar_t *'
|-FunctionDecl 0x26de95d8610 <line:736:24, col:98> col:36 _wtoi_l 'int (const wchar_t *, _locale_t) __attribute__((cdecl))':'int (const wchar_t *, _locale_t)'
| |-ParmVarDecl 0x26de95d83e8 <col:51, col:66> col:66 _Str 'const wchar_t *'
| `-ParmVarDecl 0x26de95d8460 <col:81, col:91> col:91 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x26de95d6858 <line:737:24, col:69> col:37 _wtol 'long (const wchar_t *) __attribute__((cdecl))':'long (const wchar_t *)'
| `-ParmVarDecl 0x26de95d86e8 <col:50, col:65> col:65 _Str 'const wchar_t *'
|-FunctionDecl 0x26de95d6b50 <line:738:24, col:99> col:37 _wtol_l 'long (const wchar_t *, _locale_t) __attribute__((cdecl))':'long (const wchar_t *, _locale_t)'
| |-ParmVarDecl 0x26de95d6928 <col:52, col:67> col:67 _Str 'const wchar_t *'
| `-ParmVarDecl 0x26de95d69a0 <col:82, col:92> col:92 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x26de95d6da8 <line:739:24, col:75> col:42 _wtoll 'long long (const wchar_t *) __attribute__((cdecl))':'long long (const wchar_t *)'
| `-ParmVarDecl 0x26de95d6c28 <col:56, col:71> col:71 _Str 'const wchar_t *'
|-FunctionDecl 0x26de95d70a0 <line:740:24, col:105> col:42 _wtoll_l 'long long (const wchar_t *, _locale_t) __attribute__((cdecl))':'long long (const wchar_t *, _locale_t)'
| |-ParmVarDecl 0x26de95d6e78 <col:58, col:73> col:73 _Str 'const wchar_t *'
| `-ParmVarDecl 0x26de95d6ef0 <col:88, col:98> col:98 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x26de95d74f8 <line:742:28, col:162> col:44 _i64tow_s 'errno_t (long long, wchar_t *, size_t, int) __attribute__((cdecl))':'errno_t (long long, wchar_t *, size_t, int)'
| |-ParmVarDecl 0x26de95d7180 <col:59, col:67> col:67 _Val 'long long'
| |-ParmVarDecl 0x26de95d71f8 <col:102, col:112> col:112 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x26de95d7270 <col:126, col:133> col:133 _SizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x26de95d72f0 <col:152, col:156> col:156 _Radix 'int'
|-FunctionDecl 0x26de95d3980 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:743:146> col:62 _i64tow 'wchar_t *(long long, wchar_t *, int) __attribute__((cdecl))':'wchar_t *(long long, wchar_t *, int)'
| |-ParmVarDecl 0x26de95d76a8 <col:75, col:83> col:83 _Val 'long long'
| |-ParmVarDecl 0x26de95d3730 <col:112, col:122> col:122 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x26de95d37b0 <col:136, col:140> col:140 _Radix 'int'
| `-DeprecatedAttr 0x26de95d3a38 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _i64tow_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x26de95d3ef8 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:744:28, col:172> col:44 _ui64tow_s 'errno_t (unsigned long long, wchar_t *, size_t, int) __attribute__((cdecl))':'errno_t (unsigned long long, wchar_t *, size_t, int)'
| |-ParmVarDecl 0x26de95d3b80 <col:60, col:77> col:77 _Val 'unsigned long long'
| |-ParmVarDecl 0x26de95d3bf8 <col:112, col:122> col:122 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x26de95d3c70 <col:136, col:143> col:143 _SizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x26de95d3cf0 <col:162, col:166> col:166 _Radix 'int'
|-FunctionDecl 0x26de95d4370 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:745:157> col:63 _ui64tow 'wchar_t *(unsigned long long, wchar_t *, int) __attribute__((cdecl))':'wchar_t *(unsigned long long, wchar_t *, int)'
| |-ParmVarDecl 0x26de95d40a8 <col:77, col:94> col:94 _Val 'unsigned long long'
| |-ParmVarDecl 0x26de95d4120 <col:123, col:133> col:133 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x26de95d41a0 <col:147, col:151> col:151 _Radix 'int'
| `-DeprecatedAttr 0x26de95d4428 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _ui64tow_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x26de95d4648 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:746:24, col:76> col:42 _wtoi64 'long long (const wchar_t *) __attribute__((cdecl))':'long long (const wchar_t *)'
| `-ParmVarDecl 0x26de95d4568 <col:57, col:72> col:72 _Str 'const wchar_t *'
|-FunctionDecl 0x26de95d48b8 <line:747:24, col:106> col:42 _wtoi64_l 'long long (const wchar_t *, _locale_t) __attribute__((cdecl))':'long long (const wchar_t *, _locale_t)'
| |-ParmVarDecl 0x26de95d4740 <col:59, col:74> col:74 _Str 'const wchar_t *'
| `-ParmVarDecl 0x26de95d47b8 <col:89, col:99> col:99 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x26de95d4bb0 <line:748:24, col:141> col:42 _wcstoi64 'long long (const wchar_t *, wchar_t **, int) __attribute__((cdecl))':'long long (const wchar_t *, wchar_t **, int)'
| |-ParmVarDecl 0x26de95d4990 <col:59, col:75> col:75 _Str 'const wchar_t *'
| |-ParmVarDecl 0x26de95d4a10 <col:106, col:117> col:117 _EndPtr 'wchar_t **'
| `-ParmVarDecl 0x26de95d4a90 <col:131, col:135> col:135 _Radix 'int'
|-FunctionDecl 0x26de95d4f48 <line:749:24, col:171> col:42 _wcstoi64_l 'long long (const wchar_t *, wchar_t **, int, _locale_t) __attribute__((cdecl))':'long long (const wchar_t *, wchar_t **, int, _locale_t)'
| |-ParmVarDecl 0x26de95d4c90 <col:61, col:77> col:77 _Str 'const wchar_t *'
| |-ParmVarDecl 0x26de95d4d10 <col:108, col:119> col:119 _EndPtr 'wchar_t **'
| |-ParmVarDecl 0x26de95d4d90 <col:133, col:137> col:137 _Radix 'int'
| `-ParmVarDecl 0x26de95d4e08 <col:154, col:164> col:164 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x26de95d5250 <line:750:24, col:150> col:50 _wcstoui64 'unsigned long long (const wchar_t *, wchar_t **, int) __attribute__((cdecl))':'unsigned long long (const wchar_t *, wchar_t **, int)'
| |-ParmVarDecl 0x26de95d5030 <col:68, col:84> col:84 _Str 'const wchar_t *'
| |-ParmVarDecl 0x26de95d50b0 <col:115, col:126> col:126 _EndPtr 'wchar_t **'
| `-ParmVarDecl 0x26de95d5130 <col:140, col:144> col:144 _Radix 'int'
|-FunctionDecl 0x26de95d55e8 <line:751:24, col:180> col:50 _wcstoui64_l 'unsigned long long (const wchar_t *, wchar_t **, int, _locale_t) __attribute__((cdecl))':'unsigned long long (const wchar_t *, wchar_t **, int, _locale_t)'
| |-ParmVarDecl 0x26de95d5330 <col:70, col:85> col:85 _Str 'const wchar_t *'
| |-ParmVarDecl 0x26de95d53b0 <col:117, col:128> col:128 _EndPtr 'wchar_t **'
| |-ParmVarDecl 0x26de95d5430 <col:142, col:146> col:146 _Radix 'int'
| `-ParmVarDecl 0x26de95d54a8 <col:163, col:173> col:173 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x26de95d5900 <line:770:24, col:151> col:39 _fullpath 'char *(char *, const char *, size_t) __attribute__((cdecl))':'char *(char *, const char *, size_t)'
| |-ParmVarDecl 0x26de95d56d8 <col:82, col:89> col:89 _FullPath 'char *'
| |-ParmVarDecl 0x26de95d5768 <col:107, col:120> col:120 _Path 'const char *'
| `-ParmVarDecl 0x26de95d57e0 <col:132, col:139> col:139 _SizeInBytes 'size_t':'unsigned long long'
|-FunctionDecl 0x26de95d5ec8 <line:778:28, col:189> col:44 _ecvt_s 'errno_t (char *, size_t, double, int, int *, int *) __attribute__((cdecl))':'errno_t (char *, size_t, double, int, int *, int *)'
| |-ParmVarDecl 0x26de95d59e8 <col:74, col:81> col:81 _DstBuf 'char *'
| |-ParmVarDecl 0x26de95d5a60 <col:95, col:102> col:102 _Size 'size_t':'unsigned long long'
| |-ParmVarDecl 0x26de95d5ae0 <col:114, col:121> col:121 _Val 'double'
| |-ParmVarDecl 0x26de95d5b60 <col:132, col:136> col:136 _NumOfDights 'int'
| |-ParmVarDecl 0x26de95d5be0 <col:156, col:162> col:162 _PtDec 'int *'
| `-ParmVarDecl 0x26de95d5c60 <col:176, col:182> col:182 _PtSign 'int *'
|-FunctionDecl 0x26de95d63c0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:780:158> col:72 _ecvt 'char *(double, int, int *, int *) __attribute__((cdecl))':'char *(double, int, int *, int *)'
| |-ParmVarDecl 0x26de95d6088 <col:83, col:90> col:90 _Val 'double'
| |-ParmVarDecl 0x26de95d6108 <col:101, col:105> col:105 _NumOfDigits 'int'
| |-ParmVarDecl 0x26de95d6188 <col:125, col:131> col:131 _PtDec 'int *'
| |-ParmVarDecl 0x26de95d6208 <col:145, col:151> col:151 _PtSign 'int *'
| `-DeprecatedAttr 0x26de95d6480 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _ecvt_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x26de95d0978 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:781:28, col:186> col:44 _fcvt_s 'errno_t (char *, size_t, double, int, int *, int *) __attribute__((cdecl))':'errno_t (char *, size_t, double, int, int *, int *)'
| |-ParmVarDecl 0x26de95d65c8 <col:74, col:81> col:81 _DstBuf 'char *'
| |-ParmVarDecl 0x26de95d6640 <col:95, col:102> col:102 _Size 'size_t':'unsigned long long'
| |-ParmVarDecl 0x26de95d66c0 <col:114, col:121> col:121 _Val 'double'
| |-ParmVarDecl 0x26de95d0700 <col:132, col:136> col:136 _NumOfDec 'int'
| |-ParmVarDecl 0x26de95d0780 <col:153, col:159> col:159 _PtDec 'int *'
| `-ParmVarDecl 0x26de95d0800 <col:173, col:179> col:179 _PtSign 'int *'
|-FunctionDecl 0x26de95d0df8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:783:155> col:72 _fcvt 'char *(double, int, int *, int *) __attribute__((cdecl))':'char *(double, int, int *, int *)'
| |-ParmVarDecl 0x26de95d0b38 <col:83, col:90> col:90 _Val 'double'
| |-ParmVarDecl 0x26de95d0bb8 <col:101, col:105> col:105 _NumOfDec 'int'
| |-ParmVarDecl 0x26de95d0c38 <col:122, col:128> col:128 _PtDec 'int *'
| |-ParmVarDecl 0x26de95d0cb8 <col:142, col:148> col:148 _PtSign 'int *'
| `-DeprecatedAttr 0x26de95d0eb8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _fcvt_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x26de95d1378 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:784:9, col:129> col:25 _gcvt_s 'errno_t (char *, size_t, double, int) __attribute__((cdecl))':'errno_t (char *, size_t, double, int)'
| |-ParmVarDecl 0x26de95d1000 <col:55, col:62> col:62 _DstBuf 'char *'
| |-ParmVarDecl 0x26de95d1078 <col:76, col:83> col:83 _Size 'size_t':'unsigned long long'
| |-ParmVarDecl 0x26de95d10f8 <col:95, col:102> col:102 _Val 'double'
| `-ParmVarDecl 0x26de95d1178 <col:113, col:117> col:117 _NumOfDigits 'int'
|-FunctionDecl 0x26de95db898 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:786:141> col:57 _gcvt 'char *(double, int, char *) __attribute__((cdecl))':'char *(double, int, char *)'
| |-ParmVarDecl 0x26de95d1528 <col:68, col:75> col:75 _Val 'double'
| |-ParmVarDecl 0x26de95d15a8 <col:86, col:90> col:90 _NumOfDigits 'int'
| |-ParmVarDecl 0x26de95d1628 <col:127, col:134> col:134 _DstBuf 'char *'
| `-DeprecatedAttr 0x26de95db950 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _gcvt_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x26de95dbd30 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:788:24, col:91> col:36 _atodbl 'int (_CRT_DOUBLE *, char *) __attribute__((cdecl))':'int (_CRT_DOUBLE *, char *)'
| |-ParmVarDecl 0x26de95dbb08 <col:50, col:64> col:64 _Result '_CRT_DOUBLE *'
| `-ParmVarDecl 0x26de95dbb88 <col:80, col:87> col:87 _Str 'char *'
|-FunctionDecl 0x26de95dc0b0 <line:789:24, col:89> col:36 _atoldbl 'int (_LDOUBLE *, char *) __attribute__((cdecl))':'int (_LDOUBLE *, char *)'
| |-ParmVarDecl 0x26de95dbe88 <col:51, col:62> col:62 _Result '_LDOUBLE *'
| `-ParmVarDecl 0x26de95dbf08 <col:78, col:85> col:85 _Str 'char *'
|-FunctionDecl 0x26de95dc430 <line:790:24, col:96> col:36 _atoflt 'int (_CRT_FLOAT *, const char *) __attribute__((cdecl))':'int (_CRT_FLOAT *, const char *)'
| |-ParmVarDecl 0x26de95dc208 <col:50, col:63> col:63 _Result '_CRT_FLOAT *'
| `-ParmVarDecl 0x26de95dc288 <col:79, col:92> col:92 _Str 'const char *'
|-FunctionDecl 0x26de95d87c8 <line:791:24, col:121> col:36 _atodbl_l 'int (_CRT_DOUBLE *, char *, _locale_t) __attribute__((cdecl))':'int (_CRT_DOUBLE *, char *, _locale_t)'
| |-ParmVarDecl 0x26de95dc508 <col:52, col:66> col:66 _Result '_CRT_DOUBLE *'
| |-ParmVarDecl 0x26de95dc588 <col:82, col:89> col:89 _Str 'char *'
| `-ParmVarDecl 0x26de95dc600 <col:104, col:114> col:114 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x26de95d8b78 <line:792:24, col:119> col:36 _atoldbl_l 'int (_LDOUBLE *, char *, _locale_t) __attribute__((cdecl))':'int (_LDOUBLE *, char *, _locale_t)'
| |-ParmVarDecl 0x26de95d88a8 <col:53, col:64> col:64 _Result '_LDOUBLE *'
| |-ParmVarDecl 0x26de95d8928 <col:80, col:87> col:87 _Str 'char *'
| `-ParmVarDecl 0x26de95d89a0 <col:102, col:112> col:112 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x26de95d8f28 <line:793:24, col:126> col:36 _atoflt_l 'int (_CRT_FLOAT *, const char *, _locale_t) __attribute__((cdecl))':'int (_CRT_FLOAT *, const char *, _locale_t)'
| |-ParmVarDecl 0x26de95d8c58 <col:52, col:65> col:65 _Result '_CRT_FLOAT *'
| |-ParmVarDecl 0x26de95d8cd8 <col:81, col:94> col:94 _Str 'const char *'
| `-ParmVarDecl 0x26de95d8d50 <col:109, col:119> col:119 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x26de95d9200 <line:794:46> col:46 implicit _lrotl 'unsigned long (unsigned long, int)' extern
| |-ParmVarDecl 0x26de95d92a0 <<invalid sloc>> <invalid sloc> 'unsigned long'
| |-ParmVarDecl 0x26de95d9308 <<invalid sloc>> <invalid sloc> 'int'
| `-NoThrowAttr 0x26de95d9380 <col:46> Implicit
|-FunctionDecl 0x26de95d93d8 prev 0x26de95d9200 <col:24, col:93> col:46 _lrotl 'unsigned long (unsigned long, int)'
| |-ParmVarDecl 0x26de95d9010 <col:58, col:72> col:72 _Val 'unsigned long'
| |-ParmVarDecl 0x26de95d9090 <col:83, col:87> col:87 _Shift 'int'
| `-NoThrowAttr 0x26de95d94d0 <col:46> Inherited Implicit
|-FunctionDecl 0x26de95d9690 <line:795:46> col:46 implicit _lrotr 'unsigned long (unsigned long, int)' extern
| |-ParmVarDecl 0x26de95dd7d0 <<invalid sloc>> <invalid sloc> 'unsigned long'
| |-ParmVarDecl 0x26de95dd838 <<invalid sloc>> <invalid sloc> 'int'
| `-NoThrowAttr 0x26de95dd8b0 <col:46> Implicit
|-FunctionDecl 0x26de95dd908 prev 0x26de95d9690 <col:24, col:93> col:46 _lrotr 'unsigned long (unsigned long, int)'
| |-ParmVarDecl 0x26de95d9510 <col:58, col:72> col:72 _Val 'unsigned long'
| |-ParmVarDecl 0x26de95d9590 <col:83, col:87> col:87 _Shift 'int'
| `-NoThrowAttr 0x26de95dda00 <col:46> Inherited Implicit
|-FunctionDecl 0x26de95ddf18 <line:796:40, line:797:37> line:796:58 _makepath_s 'errno_t (char *, size_t, const char *, const char *, const char *, const char *) __attribute__((cdecl))':'errno_t (char *, size_t, const char *, const char *, const char *, const char *)'
| |-ParmVarDecl 0x26de95dda40 <col:99, col:106> col:106 _PathResult 'char *'
| |-ParmVarDecl 0x26de95ddab8 <col:124, col:131> col:131 _SizeInWords 'size_t':'unsigned long long'
| |-ParmVarDecl 0x26de95ddb38 <col:156, col:169> col:169 _Drive 'const char *'
| |-ParmVarDecl 0x26de95ddbb8 <col:188, col:201> col:201 _Dir 'const char *'
| |-ParmVarDecl 0x26de95ddc38 <col:218, col:231> col:231 _Filename 'const char *'
| `-ParmVarDecl 0x26de95ddcb8 <line:797:20, col:33> col:33 _Ext 'const char *'
|-FunctionDecl 0x26de95de4c0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1948:181> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:799:78 _makepath 'void (char *, const char *, const char *, const char *, const char *) __attribute__((cdecl))':'void (char *, const char *, const char *, const char *, const char *)'
| |-ParmVarDecl 0x26de95de0d8 <col:113, col:119> col:119 _Path 'char *'
| |-ParmVarDecl 0x26de95de158 <col:137, col:151> col:151 _Drive 'const char *'
| |-ParmVarDecl 0x26de95de1d8 <col:170, col:184> col:184 _Dir 'const char *'
| |-ParmVarDecl 0x26de95de258 <col:201, col:215> col:215 _Filename 'const char *'
| |-ParmVarDecl 0x26de95de2d8 <col:237, col:251> col:251 _Ext 'const char *'
| `-DeprecatedAttr 0x26de95de588 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _makepath_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x26de95e0890 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:826:9, col:59> col:27 _onexit '_onexit_t (_onexit_t) __attribute__((cdecl))':'_onexit_t (_onexit_t)'
| `-ParmVarDecl 0x26de95de6f0 <col:44, col:54> col:54 _Func '_onexit_t':'int (*)(void) __attribute__((cdecl))'
|-FunctionDecl 0x26de95e0ab0 <line:831:9, col:60> col:22 perror 'void (const char *) __attribute__((cdecl))':'void (const char *)'
| `-ParmVarDecl 0x26de95e0968 <col:40, col:53> col:53 _ErrMsg 'const char *'
|-FunctionDecl 0x26de95e0c68 <line:838:24, col:77> col:39 _putenv 'int (const char *) __attribute__((cdecl))':'int (const char *)'
| `-ParmVarDecl 0x26de95e0b88 <col:54, col:67> col:67 _EnvString 'const char *'
|-FunctionDecl 0x26de95e0f28 <line:839:28, col:107> col:44 _putenv_s 'errno_t (const char *, const char *) __attribute__((cdecl))':'errno_t (const char *, const char *)'
| |-ParmVarDecl 0x26de95e0d40 <col:61, col:74> col:74 _Name 'const char *'
| `-ParmVarDecl 0x26de95e0dc0 <col:88, col:101> col:101 _Value 'const char *'
|-FunctionDecl 0x26de95e11f0 <line:842:30> col:30 implicit _rotl 'unsigned int (unsigned int, int)' extern
| |-ParmVarDecl 0x26de95e1290 <<invalid sloc>> <invalid sloc> 'unsigned int'
| |-ParmVarDecl 0x26de95e12f8 <<invalid sloc>> <invalid sloc> 'int'
| `-NoThrowAttr 0x26de95e1370 <col:30> Implicit
|-FunctionDecl 0x26de95e13c8 prev 0x26de95e11f0 <col:9, col:75> col:30 _rotl 'unsigned int (unsigned int, int)'
| |-ParmVarDecl 0x26de95e1008 <col:41, col:54> col:54 _Val 'unsigned int'
| |-ParmVarDecl 0x26de95e1088 <col:65, col:69> col:69 _Shift 'int'
| `-NoThrowAttr 0x26de95e14c0 <col:30> Inherited Implicit
|-FunctionDecl 0x26de95e16f0 <line:843:34> col:34 implicit _rotl64 'unsigned long long (unsigned long long, int)' extern
| |-ParmVarDecl 0x26de95e1790 <<invalid sloc>> <invalid sloc> 'unsigned long long'
| |-ParmVarDecl 0x26de95d9790 <<invalid sloc>> <invalid sloc> 'int'
| `-NoThrowAttr 0x26de95d9808 <col:34> Implicit
|-FunctionDecl 0x26de95d9860 prev 0x26de95e16f0 <col:9, col:85> col:34 _rotl64 'unsigned long long (unsigned long long, int)'
| |-ParmVarDecl 0x26de95e1500 <col:47, col:64> col:64 _Val 'unsigned long long'
| |-ParmVarDecl 0x26de95e1580 <col:75, col:79> col:79 _Shift 'int'
| `-NoThrowAttr 0x26de95d9958 <col:34> Inherited Implicit
|-FunctionDecl 0x26de95d9b18 <line:844:30> col:30 implicit _rotr 'unsigned int (unsigned int, int)' extern
| |-ParmVarDecl 0x26de95d9bb8 <<invalid sloc>> <invalid sloc> 'unsigned int'
| |-ParmVarDecl 0x26de95d9c20 <<invalid sloc>> <invalid sloc> 'int'
| `-NoThrowAttr 0x26de95d9c98 <col:30> Implicit
|-FunctionDecl 0x26de95d9cf0 prev 0x26de95d9b18 <col:9, col:75> col:30 _rotr 'unsigned int (unsigned int, int)'
| |-ParmVarDecl 0x26de95d9998 <col:41, col:54> col:54 _Val 'unsigned int'
| |-ParmVarDecl 0x26de95d9a18 <col:65, col:69> col:69 _Shift 'int'
| `-NoThrowAttr 0x26de95d9de8 <col:30> Inherited Implicit
|-FunctionDecl 0x26de95d9fa8 <line:845:34> col:34 implicit _rotr64 'unsigned long long (unsigned long long, int)' extern
| |-ParmVarDecl 0x26de95da048 <<invalid sloc>> <invalid sloc> 'unsigned long long'
| |-ParmVarDecl 0x26de95da0b0 <<invalid sloc>> <invalid sloc> 'int'
| `-NoThrowAttr 0x26de95da128 <col:34> Implicit
|-FunctionDecl 0x26de95da180 prev 0x26de95d9fa8 <col:9, col:85> col:34 _rotr64 'unsigned long long (unsigned long long, int)'
| |-ParmVarDecl 0x26de95d9e28 <col:47, col:64> col:64 _Val 'unsigned long long'
| |-ParmVarDecl 0x26de95d9ea8 <col:75, col:79> col:79 _Shift 'int'
| `-NoThrowAttr 0x26de95da278 <col:34> Inherited Implicit
|-FunctionDecl 0x26de95da638 <line:849:9, col:171> col:25 _searchenv_s 'errno_t (const char *, const char *, char *, size_t) __attribute__((cdecl))':'errno_t (const char *, const char *, char *, size_t)'
| |-ParmVarDecl 0x26de95da2b8 <col:45, col:58> col:58 _Filename 'const char *'
| |-ParmVarDecl 0x26de95da338 <col:76, col:89> col:89 _EnvVar 'const char *'
| |-ParmVarDecl 0x26de95da3b8 <col:127, col:134> col:134 _ResultPath 'char *'
| `-ParmVarDecl 0x26de95da430 <col:152, col:159> col:159 _SizeInBytes 'size_t':'unsigned long long'
|-FunctionDecl 0x26de95dcb30 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1954:149> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:851:78 _searchenv 'void (const char *, const char *, char *) __attribute__((cdecl))':'void (const char *, const char *, char *)'
| |-ParmVarDecl 0x26de95dc898 <col:97, col:111> col:111 _Filename 'const char *'
| |-ParmVarDecl 0x26de95dc918 <col:129, col:143> col:143 _EnvVar 'const char *'
| |-ParmVarDecl 0x26de95dc998 <col:176, col:182> col:182 _ResultPath 'char *'
| `-DeprecatedAttr 0x26de95dcbe8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _searchenv_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x26de95dd1d0 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:854:261> col:62 _splitpath 'void (const char *, char *, char *, char *, char *) __attribute__((cdecl))':'void (const char *, char *, char *, char *, char *)'
| |-ParmVarDecl 0x26de95dcdf0 <col:80, col:93> col:93 _FullPath 'const char *'
| |-ParmVarDecl 0x26de95dce70 <col:129, col:136> col:136 _Drive 'char *'
| |-ParmVarDecl 0x26de95dcef0 <col:169, col:176> col:176 _Dir 'char *'
| |-ParmVarDecl 0x26de95dcf70 <col:207, col:214> col:214 _Filename 'char *'
| |-ParmVarDecl 0x26de95dcff0 <col:250, col:257> col:257 _Ext 'char *'
| `-DeprecatedAttr 0x26de95dd298 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _splitpath_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x26de95dead0 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:855:40, line:859:79> line:855:57 _splitpath_s 'errno_t (const char *, char *, size_t, char *, size_t, char *, size_t, char *, size_t) __attribute__((cdecl))':'errno_t (const char *, char *, size_t, char *, size_t, char *, size_t, char *, size_t)'
| |-ParmVarDecl 0x26de95dd3e0 <col:77, col:90> col:90 _FullPath 'const char *'
| |-ParmVarDecl 0x26de95dd460 <line:856:48, col:55> col:55 _Drive 'char *'
| |-ParmVarDecl 0x26de95dd4d8 <col:68, col:75> col:75 _DriveSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x26de95dd558 <line:857:46, col:53> col:53 _Dir 'char *'
| |-ParmVarDecl 0x26de95dd5d0 <col:64, col:71> col:71 _DirSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x26de95dd650 <line:858:51, col:58> col:58 _Filename 'char *'
| |-ParmVarDecl 0x26de95dd6c8 <col:74, col:81> col:81 _FilenameSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x26de95dd748 <line:859:46, col:53> col:53 _Ext 'char *'
| `-ParmVarDecl 0x26de95de7e0 <col:64, col:71> col:71 _ExtSize 'size_t':'unsigned long long'
|-FunctionDecl 0x26de95dee80 <line:862:9, col:204> col:24 _swab 'void (char *, char *, int) __attribute__((cdecl))':'void (char *, char *, int)'
| |-ParmVarDecl 0x26de95debe8 <col:95, col:102> col:102 _Buf1 'char *'
| |-ParmVarDecl 0x26de95dec68 <col:174, col:181> col:181 _Buf2 'char *'
| `-ParmVarDecl 0x26de95dece8 <col:188, col:192> col:192 _SizeInBytes 'int'
|-FunctionDecl 0x26de95df168 <line:873:24, col:161> col:42 _wfullpath 'wchar_t *(wchar_t *, const wchar_t *, size_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, const wchar_t *, size_t)'
| |-ParmVarDecl 0x26de95def60 <col:86, col:96> col:96 _FullPath 'wchar_t *'
| |-ParmVarDecl 0x26de95defd8 <col:114, col:130> col:130 _Path 'const wchar_t *'
| `-ParmVarDecl 0x26de95df050 <col:142, col:149> col:149 _SizeInWords 'size_t':'unsigned long long'
|-FunctionDecl 0x26de95df708 <line:879:40, line:880:40> line:879:56 _wmakepath_s 'errno_t (wchar_t *, size_t, const wchar_t *, const wchar_t *, const wchar_t *, const wchar_t *) __attribute__((cdecl))':'errno_t (wchar_t *, size_t, const wchar_t *, const wchar_t *, const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x26de95df248 <col:91, col:101> col:101 _PathResult 'wchar_t *'
| |-ParmVarDecl 0x26de95df2c0 <col:119, col:126> col:126 _SIZE 'size_t':'unsigned long long'
| |-ParmVarDecl 0x26de95df338 <col:144, col:160> col:160 _Drive 'const wchar_t *'
| |-ParmVarDecl 0x26de95df3b0 <col:179, col:195> col:195 _Dir 'const wchar_t *'
| |-ParmVarDecl 0x26de95df428 <col:212, col:228> col:228 _Filename 'const wchar_t *'
| `-ParmVarDecl 0x26de95df4a0 <line:880:20, col:36> col:36 _Ext 'const wchar_t *'
|-FunctionDecl 0x26de95dfcf0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1948:181> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:882:78 _wmakepath 'void (wchar_t *, const wchar_t *, const wchar_t *, const wchar_t *, const wchar_t *) __attribute__((cdecl))':'void (wchar_t *, const wchar_t *, const wchar_t *, const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x26de95df8d8 <col:114, col:123> col:123 _ResultPath 'wchar_t *'
| |-ParmVarDecl 0x26de95df950 <col:147, col:164> col:164 _Drive 'const wchar_t *'
| |-ParmVarDecl 0x26de95df9c8 <col:183, col:200> col:200 _Dir 'const wchar_t *'
| |-ParmVarDecl 0x26de95dfa40 <col:217, col:234> col:234 _Filename 'const wchar_t *'
| |-ParmVarDecl 0x26de95dfab8 <col:256, col:273> col:273 _Ext 'const wchar_t *'
| `-DeprecatedAttr 0x26de95dfdb8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wmakepath_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x26de95e0070 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:885:9, col:65> col:22 _wperror 'void (const wchar_t *) __attribute__((cdecl))':'void (const wchar_t *)'
| `-ParmVarDecl 0x26de95dfef8 <col:42, col:58> col:58 _ErrMsg 'const wchar_t *'
|-FunctionDecl 0x26de95e0220 <line:889:24, col:81> col:39 _wputenv 'int (const wchar_t *) __attribute__((cdecl))':'int (const wchar_t *)'
| `-ParmVarDecl 0x26de95e0140 <col:55, col:71> col:71 _EnvString 'const wchar_t *'
|-FunctionDecl 0x26de95e04c8 <line:890:28, col:114> col:44 _wputenv_s 'errno_t (const wchar_t *, const wchar_t *) __attribute__((cdecl))':'errno_t (const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x26de95e02f0 <col:62, col:78> col:78 _Name 'const wchar_t *'
| `-ParmVarDecl 0x26de95e0368 <col:92, col:108> col:108 _Value 'const wchar_t *'
|-FunctionDecl 0x26de95da8d8 <line:891:9, col:181> col:25 _wsearchenv_s 'errno_t (const wchar_t *, const wchar_t *, wchar_t *, size_t) __attribute__((cdecl))':'errno_t (const wchar_t *, const wchar_t *, wchar_t *, size_t)'
| |-ParmVarDecl 0x26de95e05a0 <col:46, col:62> col:62 _Filename 'const wchar_t *'
| |-ParmVarDecl 0x26de95e0618 <col:80, col:96> col:96 _EnvVar 'const wchar_t *'
| |-ParmVarDecl 0x26de95e0690 <col:134, col:144> col:144 _ResultPath 'wchar_t *'
| `-ParmVarDecl 0x26de95e0708 <col:162, col:169> col:169 _SizeInWords 'size_t':'unsigned long long'
|-FunctionDecl 0x26de95dad40 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1954:149> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:893:78 _wsearchenv 'void (const wchar_t *, const wchar_t *, wchar_t *) __attribute__((cdecl))':'void (const wchar_t *, const wchar_t *, wchar_t *)'
| |-ParmVarDecl 0x26de95daa80 <col:98, col:115> col:115 _Filename 'const wchar_t *'
| |-ParmVarDecl 0x26de95daaf8 <col:133, col:150> col:150 _EnvVar 'const wchar_t *'
| |-ParmVarDecl 0x26de95dab70 <col:183, col:192> col:192 _ResultPath 'wchar_t *'
| `-DeprecatedAttr 0x26de95dadf8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wsearchenv_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x26de95db410 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:896:278> col:63 _wsplitpath 'void (const wchar_t *, wchar_t *, wchar_t *, wchar_t *, wchar_t *) __attribute__((cdecl))':'void (const wchar_t *, wchar_t *, wchar_t *, wchar_t *, wchar_t *)'
| |-ParmVarDecl 0x26de95daff8 <col:82, col:98> col:98 _FullPath 'const wchar_t *'
| |-ParmVarDecl 0x26de95db070 <col:134, col:144> col:144 _Drive 'wchar_t *'
| |-ParmVarDecl 0x26de95db0e8 <col:177, col:187> col:187 _Dir 'wchar_t *'
| |-ParmVarDecl 0x26de95db160 <col:218, col:228> col:228 _Filename 'wchar_t *'
| |-ParmVarDecl 0x26de95db1d8 <col:264, col:274> col:274 _Ext 'wchar_t *'
| `-DeprecatedAttr 0x26de95db4d8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wsplitpath_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x26de95e6db0 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:897:21, line:901:82> line:897:37 _wsplitpath_s 'errno_t (const wchar_t *, wchar_t *, size_t, wchar_t *, size_t, wchar_t *, size_t, wchar_t *, size_t) __attribute__((cdecl))':'errno_t (const wchar_t *, wchar_t *, size_t, wchar_t *, size_t, wchar_t *, size_t, wchar_t *, size_t)'
| |-ParmVarDecl 0x26de95db618 <col:58, col:74> col:74 _FullPath 'const wchar_t *'
| |-ParmVarDecl 0x26de95db690 <line:898:48, col:58> col:58 _Drive 'wchar_t *'
| |-ParmVarDecl 0x26de95db708 <col:71, col:78> col:78 _DriveSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x26de95e6860 <line:899:46, col:56> col:56 _Dir 'wchar_t *'
| |-ParmVarDecl 0x26de95e68d8 <col:67, col:74> col:74 _DirSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x26de95e6950 <line:900:51, col:61> col:61 _Filename 'wchar_t *'
| |-ParmVarDecl 0x26de95e69c8 <col:77, col:84> col:84 _FilenameSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x26de95e6a40 <line:901:46, col:56> col:56 _Ext 'wchar_t *'
| `-ParmVarDecl 0x26de95e6ab8 <col:67, col:74> col:74 _ExtSize 'size_t':'unsigned long long'
|-FunctionDecl 0x26de95e70d0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:909:78> col:50 _seterrormode 'void (int) __attribute__((cdecl))':'void (int)'
| |-ParmVarDecl 0x26de95e6fc8 <col:69, col:73> col:73 _Mode 'int'
| `-DeprecatedAttr 0x26de95e7178 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable has been superceded by newer library or operating system functionality. Consider using SetErrorMode instead. See online help for details." ""
|-FunctionDecl 0x26de95e7568 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:910:97> col:42 _beep 'void (unsigned int, unsigned int) __attribute__((cdecl))':'void (unsigned int, unsigned int)'
| |-ParmVarDecl 0x26de95e7388 <col:53, col:62> col:62 _Frequency 'unsigned int'
| |-ParmVarDecl 0x26de95e7408 <col:79, col:88> col:88 _Duration 'unsigned int'
| `-DeprecatedAttr 0x26de95e7618 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable has been superceded by newer library or operating system functionality. Consider using Beep instead. See online help for details." ""
|-FunctionDecl 0x26de95e89c0 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:911:78> col:43 _sleep 'void (unsigned long) __attribute__((cdecl))':'void (unsigned long)'
| |-ParmVarDecl 0x26de95e8880 <col:55, col:69> col:69 _Duration 'unsigned long'
| `-DeprecatedAttr 0x26de95e8a68 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable has been superceded by newer library or operating system functionality. Consider using Sleep instead. See online help for details." ""
|-FunctionDecl 0x26de95e9010 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:934:187> col:102 ecvt 'char *(double, int, int *, int *) __attribute__((cdecl))':'char *(double, int, int *, int *)'
| |-ParmVarDecl 0x26de95e8d50 <col:112, col:119> col:119 _Val 'double'
| |-ParmVarDecl 0x26de95e8dd0 <col:130, col:134> col:134 _NumOfDigits 'int'
| |-ParmVarDecl 0x26de95e8e50 <col:154, col:160> col:160 _PtDec 'int *'
| |-ParmVarDecl 0x26de95e8ed0 <col:174, col:180> col:180 _PtSign 'int *'
| |-DeprecatedAttr 0x26de95e90d0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _ecvt. See online help for details." ""
| `-DeprecatedAttr 0x26de95e91c8 <col:47, col:63> "This function or variable may be unsafe. Consider using _ecvt_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x26de95e9700 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:935:184> col:102 fcvt 'char *(double, int, int *, int *) __attribute__((cdecl))':'char *(double, int, int *, int *)'
| |-ParmVarDecl 0x26de95e9440 <col:112, col:119> col:119 _Val 'double'
| |-ParmVarDecl 0x26de95e94c0 <col:130, col:134> col:134 _NumOfDec 'int'
| |-ParmVarDecl 0x26de95e9540 <col:151, col:157> col:157 _PtDec 'int *'
| |-ParmVarDecl 0x26de95e95c0 <col:171, col:177> col:177 _PtSign 'int *'
| |-DeprecatedAttr 0x26de95e97c0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _fcvt. See online help for details." ""
| `-DeprecatedAttr 0x26de95e7920 <col:47, col:63> "This function or variable may be unsafe. Consider using _fcvt_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x26de95e7db8 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:936:179> col:96 gcvt 'char *(double, int, char *) __attribute__((cdecl))':'char *(double, int, char *)'
| |-ParmVarDecl 0x26de95e7b98 <col:106, col:113> col:113 _Val 'double'
| |-ParmVarDecl 0x26de95e7c18 <col:124, col:128> col:128 _NumOfDigits 'int'
| |-ParmVarDecl 0x26de95e7c98 <col:165, col:172> col:172 _DstBuf 'char *'
| |-DeprecatedAttr 0x26de95e7e70 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _gcvt. See online help for details." ""
| `-DeprecatedAttr 0x26de95e7f68 <col:47, col:63> "This function or variable may be unsafe. Consider using _fcvt_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x26de95e8400 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:937:170> col:96 itoa 'char *(int, char *, int) __attribute__((cdecl))':'char *(int, char *, int)'
| |-ParmVarDecl 0x26de95e81e0 <col:106, col:110> col:110 _Val 'int'
| |-ParmVarDecl 0x26de95e8260 <col:139, col:146> col:146 _DstBuf 'char *'
| |-ParmVarDecl 0x26de95e82e0 <col:160, col:164> col:164 _Radix 'int'
| |-DeprecatedAttr 0x26de95e84b8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _itoa. See online help for details." ""
| `-DeprecatedAttr 0x26de95e85b0 <col:47, col:63> "This function or variable may be unsafe. Consider using _itoa_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x26de95e9ab0 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:938:171> col:96 ltoa 'char *(long, char *, int) __attribute__((cdecl))':'char *(long, char *, int)'
| |-ParmVarDecl 0x26de95e9890 <col:106, col:111> col:111 _Val 'long'
| |-ParmVarDecl 0x26de95e9910 <col:140, col:147> col:147 _DstBuf 'char *'
| |-ParmVarDecl 0x26de95e9990 <col:161, col:165> col:165 _Radix 'int'
| |-DeprecatedAttr 0x26de95e9b68 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _ltoa. See online help for details." ""
| `-DeprecatedAttr 0x26de95e9c60 <col:47, col:63> "This function or variable may be unsafe. Consider using _ltoa_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x26de95e9ef8 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:941:108> col:71 putenv 'int (const char *) __attribute__((cdecl))':'int (const char *)'
| |-ParmVarDecl 0x26de95e9e18 <col:85, col:98> col:98 _EnvString 'const char *'
| `-DeprecatedAttr 0x26de95e9fa0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _putenv. See online help for details." ""
|-FunctionDecl 0x26de95ea380 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:944:245> col:128 swab 'void (char *, char *, int) __attribute__((cdecl))':'void (char *, char *, int)'
| |-ParmVarDecl 0x26de95ea168 <col:165, col:172> col:172 _Buf1 'char *'
| |-ParmVarDecl 0x26de95ea1e8 <col:210, col:217> col:217 _Buf2 'char *'
| |-ParmVarDecl 0x26de95ea268 <col:229, col:233> col:233 _SizeInBytes 'int'
| `-DeprecatedAttr 0x26de95ea438 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _swab. See online help for details." ""
|-FunctionDecl 0x26de95ea940 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:945:181> col:96 ultoa 'char *(unsigned long, char *, int) __attribute__((cdecl))':'char *(unsigned long, char *, int)'
| |-ParmVarDecl 0x26de95ea700 <col:107, col:121> col:121 _Val 'unsigned long'
| |-ParmVarDecl 0x26de95ea780 <col:150, col:157> col:157 _Dstbuf 'char *'
| |-ParmVarDecl 0x26de95ea800 <col:171, col:175> col:175 _Radix 'int'
| |-DeprecatedAttr 0x26de95ea9f8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _ultoa. See online help for details." ""
| `-DeprecatedAttr 0x26de95eaaf0 <col:47, col:63> "This function or variable may be unsafe. Consider using _ultoa_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x26de95eacd8 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:64:18, line:947:48> col:18 onexit '_onexit_t (_onexit_t) __attribute__((cdecl))':'_onexit_t (_onexit_t)'
| `-ParmVarDecl 0x26de95eac00 <line:64:18, line:947:43> col:43 _Func '_onexit_t':'int (*)(void) __attribute__((cdecl))'
|-RecordDecl 0x26de95ead98 <.//openssl//file_jk/before\crypto\ec/ec_lcl.h:52:1, line:173:1> line:52:8 struct ec_method_st definition
| |-FieldDecl 0x26de95eae68 <line:54:5, col:9> col:9 flags 'int'
| |-FieldDecl 0x26de95eaed8 <line:56:5, col:9> col:9 field_type 'int'
| |-FieldDecl 0x26de95eb078 <line:61:5, col:34> col:11 group_init 'int (*)(int *)'
| |-FieldDecl 0x26de95eb240 <line:62:5, col:37> col:12 group_finish 'void (*)(int *)'
| |-FieldDecl 0x26de95eb350 <line:63:5, col:43> col:12 group_clear_finish 'void (*)(int *)'
| |-FieldDecl 0x26de95eb5c0 <line:64:5, col:52> col:11 group_copy 'int (*)(int *, const int *)'
| |-FieldDecl 0x26de95e3968 <line:67:5, line:68:54> line:67:11 group_set_curve 'int (*)(int *, const int *, const int *, const int *, int *)'
| |-FieldDecl 0x26de95e3d78 <line:69:5, line:70:37> line:69:11 group_get_curve 'int (*)(const int *, int *, int *, int *, int *)'
| |-FieldDecl 0x26de95e3f48 <line:72:5, col:46> col:11 group_get_degree 'int (*)(const int *)'
| |-FieldDecl 0x26de95e4060 <line:73:5, col:46> col:11 group_order_bits 'int (*)(const int *)'
| |-FieldDecl 0x26de95e42d0 <line:75:5, col:64> col:11 group_check_discriminant 'int (*)(const int *, int *)'
| |-FieldDecl 0x26de95e43e8 <line:80:5, col:34> col:11 point_init 'int (*)(int *)'
| |-FieldDecl 0x26de95e44f8 <line:81:5, col:37> col:12 point_finish 'void (*)(int *)'
| |-FieldDecl 0x26de95e4608 <line:82:5, col:43> col:12 point_clear_finish 'void (*)(int *)'
| |-FieldDecl 0x26de95e47a8 <line:83:5, col:52> col:11 point_copy 'int (*)(int *, const int *)'
| |-FieldDecl 0x26de95eb9e0 <line:92:5, col:63> col:11 point_set_to_infinity 'int (*)(const int *, int *)'
| |-FieldDecl 0x26de95ebe90 <line:93:5, line:96:76> line:93:11 point_set_Jprojective_coordinates_GFp 'int (*)(const int *, int *, const int *, const int *, const int *, int *)'
| |-FieldDecl 0x26de95ec340 <line:97:5, line:100:59> line:97:11 point_get_Jprojective_coordinates_GFp 'int (*)(const int *, const int *, int *, int *, int *, int *)'
| |-FieldDecl 0x26de95ec758 <line:101:5, line:103:50> line:101:11 point_set_affine_coordinates 'int (*)(const int *, int *, const int *, const int *, int *)'
| |-FieldDecl 0x26de95ecb78 <line:104:5, line:105:72> line:104:11 point_get_affine_coordinates 'int (*)(const int *, const int *, int *, int *, int *)'
| |-FieldDecl 0x26de95ecf88 <line:106:5, line:108:54> line:106:11 point_set_compressed_coordinates 'int (*)(const int *, int *, const int *, int, int *)'
| |-FieldDecl 0x26de95ed4a8 <line:110:5, line:112:46> line:110:14 point2oct 'size_t (*)(const int *, const int *, int, unsigned char *, size_t, int *)'
| |-FieldDecl 0x26de95ef950 <line:113:5, line:114:43> line:113:11 oct2point 'int (*)(const int *, int *, const unsigned char *, size_t, int *)'
| |-FieldDecl 0x26de95efc88 <line:116:5, line:117:44> line:116:11 add 'int (*)(const int *, int *, const int *, const int *, int *)'
| |-FieldDecl 0x26de95f0010 <line:118:5, col:75> col:11 dbl 'int (*)(const int *, int *, const int *, int *)'
| |-FieldDecl 0x26de95f0308 <line:119:5, col:58> col:11 invert 'int (*)(const int *, int *, int *)'
| |-FieldDecl 0x26de95f0570 <line:123:5, col:62> col:11 is_at_infinity 'int (*)(const int *, const int *)'
| |-FieldDecl 0x26de95f0868 <line:124:5, col:69> col:11 is_on_curve 'int (*)(const int *, const int *, int *)'
| |-FieldDecl 0x26de95f4c60 <line:125:5, line:126:31> line:125:11 point_cmp 'int (*)(const int *, const int *, const int *, int *)'
| |-FieldDecl 0x26de95f4e88 <line:128:5, col:63> col:11 make_affine 'int (*)(const int *, int *, int *)'
| |-FieldDecl 0x26de95f5300 <line:129:5, line:130:40> line:129:11 points_make_affine 'int (*)(const int *, size_t, int **, int *)'
| |-FieldDecl 0x26de95f0900 <line:136:5, line:138:25> line:136:11 mul 'int (*)(const int *, int *, const int *, size_t, const int **, const int **, int *)'
| |-FieldDecl 0x26de95f0b70 <line:139:5, col:54> col:11 precompute_mult 'int (*)(int *, int *)'
| |-FieldDecl 0x26de95f0c88 <line:140:5, col:55> col:11 have_precompute_mult 'int (*)(const int *)'
| |-FieldDecl 0x26de95f0fc0 <line:148:5, line:149:48> line:148:11 field_mul 'int (*)(const int *, int *, const int *, const int *, int *)'
| |-FieldDecl 0x26de95f1270 <line:150:5, col:77> col:11 field_sqr 'int (*)(const int *, int *, const int *, int *)'
| |-FieldDecl 0x26de95f15a8 <line:151:5, line:152:48> line:151:11 field_div 'int (*)(const int *, int *, const int *, const int *, int *)'
| |-FieldDecl 0x26de95f1858 <line:154:5, line:155:34> line:154:11 field_encode 'int (*)(const int *, int *, const int *, int *)'
| |-FieldDecl 0x26de95edb10 <line:157:5, line:158:34> line:157:11 field_decode 'int (*)(const int *, int *, const int *, int *)'
| |-FieldDecl 0x26de95edd38 <line:159:5, col:67> col:11 field_set_to_one 'int (*)(const int *, int *, int *)'
| |-FieldDecl 0x26de95ee060 <line:161:5, col:75> col:14 priv2oct 'size_t (*)(const int *, unsigned char *, size_t)'
| |-FieldDecl 0x26de95ee388 <line:162:5, col:72> col:11 oct2priv 'int (*)(int *, const unsigned char *, size_t)'
| |-FieldDecl 0x26de95ee528 <line:163:5, col:61> col:11 set_private 'int (*)(int *, const int *)'
| |-FieldDecl 0x26de95ee640 <line:164:5, col:32> col:11 keygen 'int (*)(int *)'
| |-FieldDecl 0x26de95ee758 <line:165:5, col:40> col:11 keycheck 'int (*)(const int *)'
| |-FieldDecl 0x26de95ee870 <line:166:5, col:35> col:11 keygenpub 'int (*)(int *)'
| |-FieldDecl 0x26de95f5a98 <line:167:5, col:50> col:11 keycopy 'int (*)(int *, const int *)'
| |-FieldDecl 0x26de95f5ba8 <line:168:5, col:36> col:12 keyfinish 'void (*)(int *)'
| |-FieldDecl 0x26de95f5fb0 <line:170:5, line:171:72> line:170:11 ecdh_compute_key 'int (*)(unsigned char **, size_t *, const int *, const int *)'
| `-FieldDecl 0x26de95f61d8 <line:172:5, col:77> col:11 blind_coordinates 'int (*)(const int *, int *, int *)'
|-RecordDecl 0x26de95f6230 <line:178:9, col:16> col:16 struct nistp224_pre_comp_st
|-TypedefDecl 0x26de95f6348 <col:1, col:37> col:37 referenced NISTP224_PRE_COMP 'struct nistp224_pre_comp_st':'struct nistp224_pre_comp_st'
| `-ElaboratedType 0x26de95f62f0 'struct nistp224_pre_comp_st' sugar
|   `-RecordType 0x26de95f62d0 'struct nistp224_pre_comp_st'
|     `-Record 0x26de95f6230 'nistp224_pre_comp_st'
|-RecordDecl 0x26de95f63b8 <line:179:9, col:16> col:16 struct nistp256_pre_comp_st
|-TypedefDecl 0x26de95f64c8 <col:1, col:37> col:37 referenced NISTP256_PRE_COMP 'struct nistp256_pre_comp_st':'struct nistp256_pre_comp_st'
| `-ElaboratedType 0x26de95f6470 'struct nistp256_pre_comp_st' sugar
|   `-RecordType 0x26de95f6450 'struct nistp256_pre_comp_st'
|     `-Record 0x26de95f63b8 'nistp256_pre_comp_st'
|-RecordDecl 0x26de95f6538 <line:180:9, col:16> col:16 struct nistp521_pre_comp_st
|-TypedefDecl 0x26de95f6648 <col:1, col:37> col:37 referenced NISTP521_PRE_COMP 'struct nistp521_pre_comp_st':'struct nistp521_pre_comp_st'
| `-ElaboratedType 0x26de95f65f0 'struct nistp521_pre_comp_st' sugar
|   `-RecordType 0x26de95f65d0 'struct nistp521_pre_comp_st'
|     `-Record 0x26de9753c98 'nistp521_pre_comp_st'
|-RecordDecl 0x26de95f66b8 <line:181:9, col:16> col:16 struct nistz256_pre_comp_st
|-TypedefDecl 0x26de95f67c8 <col:1, col:37> col:37 referenced NISTZ256_PRE_COMP 'struct nistz256_pre_comp_st':'struct nistz256_pre_comp_st'
| `-ElaboratedType 0x26de95f6770 'struct nistz256_pre_comp_st' sugar
|   `-RecordType 0x26de95f6750 'struct nistz256_pre_comp_st'
|     `-Record 0x26de95f66b8 'nistz256_pre_comp_st'
|-RecordDecl 0x26de95f6838 <line:182:9, col:16> col:16 struct ec_pre_comp_st
|-TypedefDecl 0x26de95f2920 <col:1, col:31> col:31 referenced EC_PRE_COMP 'struct ec_pre_comp_st':'struct ec_pre_comp_st'
| `-ElaboratedType 0x26de95f68f0 'struct ec_pre_comp_st' sugar
|   `-RecordType 0x26de95f68d0 'struct ec_pre_comp_st'
|     `-Record 0x26de95f6838 'ec_pre_comp_st'
|-RecordDecl 0x26de95f2990 <line:184:1, line:249:1> line:184:8 invalid struct ec_group_st definition
| |-FieldDecl 0x26de95f2a68 <line:185:5, col:22> col:22 invalid meth 'const int *'
| |-FieldDecl 0x26de95f2ad8 <line:186:5, col:15> col:15 invalid generator 'int *'
| |-FieldDecl 0x26de95f2b48 <line:187:5, col:13> col:13 invalid order 'int *'
| |-FieldDecl 0x26de95f2bb8 <col:5, col:21> col:21 invalid cofactor 'int *'
| |-FieldDecl 0x26de95f2c28 <line:188:5, col:9> col:9 curve_name 'int'
| |-FieldDecl 0x26de95f2c98 <line:189:5, col:9> col:9 asn1_flag 'int'
| |-FieldDecl 0x26de95f2d08 <line:190:5, col:29> col:29 invalid asn1_form 'int'
| |-FieldDecl 0x26de95f2d78 <line:191:5, col:20> col:20 seed 'unsigned char *'
| |-FieldDecl 0x26de95f2de0 <line:193:5, col:12> col:12 seed_len 'size_t':'unsigned long long'
| |-FieldDecl 0x26de95f2e50 <line:203:5, col:13> col:13 invalid field 'int *'
| |-FieldDecl 0x26de95f2f50 <line:211:5, col:15> col:9 poly 'int [6]'
| |-FieldDecl 0x26de95f2fc0 <line:219:5, col:13> col:13 invalid a 'int *'
| |-FieldDecl 0x26de95f3030 <col:5, col:17> col:17 invalid b 'int *'
| |-FieldDecl 0x26de95f30a0 <line:221:5, col:9> col:9 a_is_minus3 'int'
| |-FieldDecl 0x26de95f3110 <line:223:5, col:11> col:11 field_data1 'void *'
| |-FieldDecl 0x26de95f3180 <line:225:5, col:11> col:11 field_data2 'void *'
| |-FieldDecl 0x26de95f3510 <line:227:5, line:228:36> line:227:11 field_mod_func 'int (*)(int *, const int *, const int *, int *)'
| |-FieldDecl 0x26de95f3580 <line:230:5, col:18> col:18 invalid mont_data 'int *'
| |-EnumDecl 0x26de95f35d8 <line:237:5, line:241:5> line:237:5
| | |-EnumConstantDecl 0x26de95f36b0 <line:238:9> col:9 PCT_none 'int'
| | |-EnumConstantDecl 0x26de95f3708 <line:239:9> col:9 PCT_nistp224 'int'
| | |-EnumConstantDecl 0x26de95f3760 <col:23> col:23 PCT_nistp256 'int'
| | |-EnumConstantDecl 0x26de95f37b8 <col:37> col:37 referenced PCT_nistp521 'int'
| | |-EnumConstantDecl 0x26de95f3810 <col:51> col:51 PCT_nistz256 'int'
| | `-EnumConstantDecl 0x26de95f3868 <line:240:9> col:9 PCT_ec 'int'
| |-FieldDecl 0x26de95f6960 <line:237:5, line:241:7> col:7 pre_comp_type 'enum (anonymous enum at .//openssl//file_jk/before\crypto\ec/ec_lcl.h:237:5)':'enum ec_group_st::(anonymous at .//openssl//file_jk/before\crypto\ec/ec_lcl.h:237:5)'
| |-RecordDecl 0x26de95f69b8 <line:242:5, line:248:5> line:242:5 union definition
| | |-FieldDecl 0x26de95f6af8 <line:243:9, col:28> col:28 nistp224 'NISTP224_PRE_COMP *'
| | |-FieldDecl 0x26de95f6bd8 <line:244:9, col:28> col:28 nistp256 'NISTP256_PRE_COMP *'
| | |-FieldDecl 0x26de95f6cb8 <line:245:9, col:28> col:28 nistp521 'NISTP521_PRE_COMP *'
| | |-FieldDecl 0x26de95f6d98 <line:246:9, col:28> col:28 nistz256 'NISTZ256_PRE_COMP *'
| | `-FieldDecl 0x26de95f6e78 <line:247:9, col:22> col:22 ec 'EC_PRE_COMP *'
| `-FieldDecl 0x26de95f6f28 <line:242:5, line:248:7> col:7 pre_comp 'union (anonymous union at .//openssl//file_jk/before\crypto\ec/ec_lcl.h:242:5)':'union ec_group_st::(anonymous at .//openssl//file_jk/before\crypto\ec/ec_lcl.h:242:5)'
|-RecordDecl 0x26de95f6f80 <line:256:1, line:269:1> line:256:8 invalid struct ec_key_st definition
| |-FieldDecl 0x26de95f7058 <line:257:5, col:26> col:26 invalid meth 'const int *'
| |-FieldDecl 0x26de95f70c8 <line:258:5, col:13> col:13 invalid engine 'int *'
| |-FieldDecl 0x26de95f7138 <line:259:5, col:9> col:9 version 'int'
| |-FieldDecl 0x26de95f71a8 <line:260:5, col:15> col:15 invalid group 'int *'
| |-FieldDecl 0x26de95f7218 <line:261:5, col:15> col:15 invalid pub_key 'int *'
| |-FieldDecl 0x26de95f7288 <line:262:5, col:13> col:13 invalid priv_key 'int *'
| |-FieldDecl 0x26de95f72f8 <line:263:5, col:18> col:18 enc_flag 'unsigned int'
| |-FieldDecl 0x26de95f7368 <line:264:5, col:29> col:29 invalid conv_form 'int'
| |-FieldDecl 0x26de95f73d8 <line:265:5, col:9> col:9 references 'int'
| |-FieldDecl 0x26de95f7448 <line:266:5, col:9> col:9 flags 'int'
| |-FieldDecl 0x26de95f74b8 <line:267:5, col:20> col:20 invalid ex_data 'int'
| `-FieldDecl 0x26de95f7528 <line:268:5, col:20> col:20 invalid lock 'int *'
|-RecordDecl 0x26de95f7580 <line:271:1, line:285:1> line:271:8 invalid struct ec_point_st definition
| |-FieldDecl 0x26de95f7658 <line:272:5, col:22> col:22 invalid meth 'const int *'
| |-FieldDecl 0x26de95f76c8 <line:274:5, col:9> col:9 curve_name 'int'
| |-FieldDecl 0x26de95f7738 <line:279:5, col:13> col:13 invalid X 'int *'
| |-FieldDecl 0x26de95f77a8 <line:280:5, col:13> col:13 invalid Y 'int *'
| |-FieldDecl 0x26de95f7818 <line:281:5, col:13> col:13 invalid Z 'int *'
| `-FieldDecl 0x26de95f7888 <line:283:5, col:9> col:9 Z_is_one 'int'
|-FunctionDecl 0x26de95f7a28 <line:288:1, line:298:1> line:288:24 invalid ec_point_is_compat 'int (const int *, const int *)' static
| |-ParmVarDecl 0x26de95f78f8 <col:43, col:59> col:59 invalid point 'const int *'
| |-ParmVarDecl 0x26de95f7988 <line:289:43, col:59> col:59 invalid group 'const int *'
| `-CompoundStmt 0x26de95f7be0 <line:290:1, line:298:1>
|   |-IfStmt 0x26de95f7b90 <line:291:5, line:295:16>
|   | |-OpaqueValueExpr 0x26de95f7b78 <<invalid sloc>> '_Bool'
|   | `-ReturnStmt 0x26de95f7b68 <col:9, col:16>
|   |   `-IntegerLiteral 0x26de95f7b40 <col:16> 'int' 0
|   `-ReturnStmt 0x26de95f7bd0 <line:297:5, col:12>
|     `-IntegerLiteral 0x26de95f7ba8 <col:12> 'int' 1
|-FunctionDecl 0x26de95f7d08 <line:301:1, col:64> col:20 EC_nistp224_pre_comp_dup 'NISTP224_PRE_COMP *(NISTP224_PRE_COMP *)'
| `-ParmVarDecl 0x26de95f7c10 <col:45, col:63> col:64 'NISTP224_PRE_COMP *'
|-FunctionDecl 0x26de95f7ec8 <line:302:1, col:64> col:20 EC_nistp256_pre_comp_dup 'NISTP256_PRE_COMP *(NISTP256_PRE_COMP *)'
| `-ParmVarDecl 0x26de95f7dd8 <col:45, col:63> col:64 'NISTP256_PRE_COMP *'
|-FunctionDecl 0x26de95f8088 <line:303:1, col:64> col:20 EC_nistp521_pre_comp_dup 'NISTP521_PRE_COMP *(NISTP521_PRE_COMP *)'
| `-ParmVarDecl 0x26de95f7f98 <col:45, col:63> col:64 'NISTP521_PRE_COMP *'
|-FunctionDecl 0x26de95f8248 <line:304:1, col:64> col:20 EC_nistz256_pre_comp_dup 'NISTZ256_PRE_COMP *(NISTZ256_PRE_COMP *)'
| `-ParmVarDecl 0x26de95f8158 <col:45, col:63> col:64 'NISTZ256_PRE_COMP *'
|-FunctionDecl 0x26de95f83a8 prev 0x26de95f7ec8 <line:305:1, col:64> col:20 EC_nistp256_pre_comp_dup 'NISTP256_PRE_COMP *(NISTP256_PRE_COMP *)'
| `-ParmVarDecl 0x26de95f8318 <col:45, col:63> col:64 'NISTP256_PRE_COMP *'
|-FunctionDecl 0x26de95f8558 <line:306:1, col:46> col:14 EC_ec_pre_comp_dup 'EC_PRE_COMP *(EC_PRE_COMP *)'
| `-ParmVarDecl 0x26de95f8460 <col:33, col:45> col:46 'EC_PRE_COMP *'
|-FunctionDecl 0x26de95f86c0 <line:308:1, col:38> col:6 invalid EC_pre_comp_free 'void (int *)'
| `-ParmVarDecl 0x26de95f8630 <col:23, col:33> col:33 invalid group 'int *'
|-FunctionDecl 0x26de95f8868 <line:309:1, col:51> col:6 EC_nistp224_pre_comp_free 'void (NISTP224_PRE_COMP *)'
| `-ParmVarDecl 0x26de95f8778 <col:32, col:50> col:51 'NISTP224_PRE_COMP *'
|-FunctionDecl 0x26de95f1a08 <line:310:1, col:51> col:6 EC_nistp256_pre_comp_free 'void (NISTP256_PRE_COMP *)'
| `-ParmVarDecl 0x26de95f1910 <col:32, col:50> col:51 'NISTP256_PRE_COMP *'
|-FunctionDecl 0x26de95f1bc8 <line:311:1, col:51> col:6 used EC_nistp521_pre_comp_free 'void (NISTP521_PRE_COMP *)'
| `-ParmVarDecl 0x26de95f1ad8 <col:32, col:50> col:51 'NISTP521_PRE_COMP *'
|-FunctionDecl 0x26de95f1d88 <line:312:1, col:51> col:6 EC_nistz256_pre_comp_free 'void (NISTZ256_PRE_COMP *)'
| `-ParmVarDecl 0x26de95f1c98 <col:32, col:50> col:51 'NISTZ256_PRE_COMP *'
|-FunctionDecl 0x26de95f1f48 <line:313:1, col:39> col:6 EC_ec_pre_comp_free 'void (EC_PRE_COMP *)'
| `-ParmVarDecl 0x26de95f1e58 <col:26, col:38> col:39 'EC_PRE_COMP *'
|-FunctionDecl 0x26de95f2400 <line:319:1, line:321:25> line:319:5 invalid ec_wNAF_mul 'int (const int *, int *, const int *, size_t, const int **, const int **, int *)'
| |-ParmVarDecl 0x26de95f2020 <col:17, col:33> col:33 invalid group 'const int *'
| |-ParmVarDecl 0x26de95f20a0 <col:40, col:50> col:50 invalid r 'int *'
| |-ParmVarDecl 0x26de95f2120 <col:53, col:67> col:67 invalid scalar 'const int *'
| |-ParmVarDecl 0x26de95f2198 <line:320:17, col:24> col:24 num 'size_t':'unsigned long long'
| |-ParmVarDecl 0x26de95f2228 <col:29, <invalid sloc>> col:45 invalid points 'const int **':'const int **'
| |-ParmVarDecl 0x26de95f22b8 <col:55, <invalid sloc>> col:69 invalid scalars 'const int **':'const int **'
| `-ParmVarDecl 0x26de95f2338 <line:321:17, <invalid sloc>> col:25 invalid 'int *'
|-FunctionDecl 0x26de95f2610 <line:322:1, col:54> col:5 invalid ec_wNAF_precompute_mult 'int (int *, int *)'
| |-ParmVarDecl 0x26de95f24f0 <col:29, col:39> col:39 invalid group 'int *'
| `-ParmVarDecl 0x26de95f2570 <col:46, <invalid sloc>> col:54 invalid 'int *'
|-FunctionDecl 0x26de95f2770 <line:323:1, col:55> col:5 invalid ec_wNAF_have_precompute_mult 'int (const int *)'
| `-ParmVarDecl 0x26de95f26d8 <col:34, col:50> col:50 invalid group 'const int *'
|-FunctionDecl 0x26de95f3930 <line:326:1, col:40> col:5 invalid ec_GFp_simple_group_init 'int (int *)'
| `-ParmVarDecl 0x26de95f2830 <col:30, <invalid sloc>> col:40 invalid 'int *'
|-FunctionDecl 0x26de95f3a80 <line:327:1, col:43> col:6 invalid ec_GFp_simple_group_finish 'void (int *)'
| `-ParmVarDecl 0x26de95f39f0 <col:33, <invalid sloc>> col:43 invalid 'int *'
|-FunctionDecl 0x26de95f3bd0 <line:328:1, col:49> col:6 invalid ec_GFp_simple_group_clear_finish 'void (int *)'
| `-ParmVarDecl 0x26de95f3b40 <col:39, <invalid sloc>> col:49 invalid 'int *'
|-FunctionDecl 0x26de95f3db0 <line:329:1, col:58> col:5 invalid ec_GFp_simple_group_copy 'int (int *, const int *)'
| |-ParmVarDecl 0x26de95f3c90 <col:30, <invalid sloc>> col:40 invalid 'int *'
| `-ParmVarDecl 0x26de95f3d10 <col:42, <invalid sloc>> col:58 invalid 'const int *'
|-FunctionDecl 0x26de95f4130 <line:330:1, line:331:77> line:330:5 invalid ec_GFp_simple_group_set_curve 'int (int *, const int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x26de95f3e78 <col:35, <invalid sloc>> col:45 invalid 'int *'
| |-ParmVarDecl 0x26de95f3ef8 <col:47, col:61> col:61 invalid p 'const int *'
| |-ParmVarDecl 0x26de95f3f78 <line:331:35, col:49> col:49 invalid a 'const int *'
| |-ParmVarDecl 0x26de95f3ff8 <col:52, col:66> col:66 invalid b 'const int *'
| `-ParmVarDecl 0x26de95f4078 <col:69, <invalid sloc>> col:77 invalid 'int *'
|-FunctionDecl 0x26de95f44c8 <line:332:1, line:333:54> line:332:5 invalid ec_GFp_simple_group_get_curve 'int (const int *, int *, int *, int *, int *)'
| |-ParmVarDecl 0x26de95f4210 <col:35, <invalid sloc>> col:51 invalid 'const int *'
| |-ParmVarDecl 0x26de95f4290 <col:53, col:61> col:61 invalid p 'int *'
| |-ParmVarDecl 0x26de95f4310 <col:64, col:72> col:72 invalid a 'int *'
| |-ParmVarDecl 0x26de95f4390 <line:333:35, col:43> col:43 invalid b 'int *'
| `-ParmVarDecl 0x26de95f4410 <col:46, <invalid sloc>> col:54 invalid 'int *'
|-FunctionDecl 0x26de95f4640 <line:334:1, col:52> col:5 invalid ec_GFp_simple_group_get_degree 'int (const int *)'
| `-ParmVarDecl 0x26de95f45a8 <col:36, <invalid sloc>> col:52 invalid 'const int *'
|-FunctionDecl 0x26de95f4820 <line:335:1, col:70> col:5 invalid ec_GFp_simple_group_check_discriminant 'int (const int *, int *)'
| |-ParmVarDecl 0x26de95f4700 <col:44, <invalid sloc>> col:60 invalid 'const int *'
| `-ParmVarDecl 0x26de95f4780 <col:62, <invalid sloc>> col:70 invalid 'int *'
|-FunctionDecl 0x26de95fba48 <line:336:1, col:40> col:5 invalid ec_GFp_simple_point_init 'int (int *)'
| `-ParmVarDecl 0x26de95fb9b0 <col:30, <invalid sloc>> col:40 invalid 'int *'
|-FunctionDecl 0x26de95fbb98 <line:337:1, col:43> col:6 invalid ec_GFp_simple_point_finish 'void (int *)'
| `-ParmVarDecl 0x26de95fbb08 <col:33, <invalid sloc>> col:43 invalid 'int *'
|-FunctionDecl 0x26de95fbce8 <line:338:1, col:49> col:6 invalid ec_GFp_simple_point_clear_finish 'void (int *)'
| `-ParmVarDecl 0x26de95fbc58 <col:39, <invalid sloc>> col:49 invalid 'int *'
|-FunctionDecl 0x26de95fbec8 <line:339:1, col:58> col:5 invalid ec_GFp_simple_point_copy 'int (int *, const int *)'
| |-ParmVarDecl 0x26de95fbda8 <col:30, <invalid sloc>> col:40 invalid 'int *'
| `-ParmVarDecl 0x26de95fbe28 <col:42, <invalid sloc>> col:58 invalid 'const int *'
|-FunctionDecl 0x26de95fc0b0 <line:340:1, col:69> col:5 invalid ec_GFp_simple_point_set_to_infinity 'int (const int *, int *)'
| |-ParmVarDecl 0x26de95fbf90 <col:41, <invalid sloc>> col:57 invalid 'const int *'
| `-ParmVarDecl 0x26de95fc010 <col:59, <invalid sloc>> col:69 invalid 'int *'
|-FunctionDecl 0x26de95fc4b8 <line:341:1, line:344:76> line:341:5 invalid ec_GFp_simple_set_Jprojective_coordinates_GFp 'int (const int *, int *, const int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x26de95fc178 <col:51, <invalid sloc>> col:67 invalid 'const int *'
| |-ParmVarDecl 0x26de95fc1f8 <line:342:51, <invalid sloc>> col:61 invalid 'int *'
| |-ParmVarDecl 0x26de95fc278 <col:63, col:77> col:77 invalid x 'const int *'
| |-ParmVarDecl 0x26de95fc2f8 <line:343:51, col:65> col:65 invalid y 'const int *'
| |-ParmVarDecl 0x26de95fc378 <line:344:51, col:65> col:65 invalid z 'const int *'
| `-ParmVarDecl 0x26de95fc3f8 <col:68, <invalid sloc>> col:76 invalid 'int *'
|-FunctionDecl 0x26de95fc8e0 <line:345:1, line:348:59> line:345:5 invalid ec_GFp_simple_get_Jprojective_coordinates_GFp 'int (const int *, const int *, int *, int *, int *, int *)'
| |-ParmVarDecl 0x26de95fc5a0 <col:51, <invalid sloc>> col:67 invalid 'const int *'
| |-ParmVarDecl 0x26de95fc620 <line:346:51, <invalid sloc>> col:67 invalid 'const int *'
| |-ParmVarDecl 0x26de95fc6a0 <col:69, col:77> col:77 invalid x 'int *'
| |-ParmVarDecl 0x26de95fc720 <line:347:51, col:59> col:59 invalid y 'int *'
| |-ParmVarDecl 0x26de95fc7a0 <col:62, col:70> col:70 invalid z 'int *'
| `-ParmVarDecl 0x26de95fc820 <line:348:51, <invalid sloc>> col:59 invalid 'int *'
|-FunctionDecl 0x26de95f8c50 <line:349:1, line:351:73> line:349:5 invalid ec_GFp_simple_point_set_affine_coordinates 'int (const int *, int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x26de95f8998 <col:48, <invalid sloc>> col:64 invalid 'const int *'
| |-ParmVarDecl 0x26de95f8a18 <col:66, <invalid sloc>> col:76 invalid 'int *'
| |-ParmVarDecl 0x26de95f8a98 <line:350:48, col:62> col:62 invalid x 'const int *'
| |-ParmVarDecl 0x26de95f8b18 <line:351:48, col:62> col:62 invalid y 'const int *'
| `-ParmVarDecl 0x26de95f8b98 <col:65, <invalid sloc>> col:73 invalid 'int *'
|-FunctionDecl 0x26de95f8fe8 <line:352:1, line:354:67> line:352:5 invalid ec_GFp_simple_point_get_affine_coordinates 'int (const int *, const int *, int *, int *, int *)'
| |-ParmVarDecl 0x26de95f8d30 <col:48, <invalid sloc>> col:64 invalid 'const int *'
| |-ParmVarDecl 0x26de95f8db0 <line:353:48, <invalid sloc>> col:64 invalid 'const int *'
| |-ParmVarDecl 0x26de95f8e30 <col:66, col:74> col:74 invalid x 'int *'
| |-ParmVarDecl 0x26de95f8eb0 <line:354:48, col:56> col:56 invalid y 'int *'
| `-ParmVarDecl 0x26de95f8f30 <col:59, <invalid sloc>> col:67 invalid 'int *'
|-FunctionDecl 0x26de95f9380 <line:355:1, line:357:54> line:355:5 invalid ec_GFp_simple_set_compressed_coordinates 'int (const int *, int *, const int *, int, int *)'
| |-ParmVarDecl 0x26de95f90c8 <col:46, <invalid sloc>> col:62 invalid 'const int *'
| |-ParmVarDecl 0x26de95f9148 <col:64, <invalid sloc>> col:74 invalid 'int *'
| |-ParmVarDecl 0x26de95f91c8 <line:356:46, col:60> col:60 invalid x 'const int *'
| |-ParmVarDecl 0x26de95f9248 <col:63, col:67> col:67 y_bit 'int'
| `-ParmVarDecl 0x26de95f92c8 <line:357:46, <invalid sloc>> col:54 invalid 'int *'
|-FunctionDecl 0x26de95f9790 <line:358:1, line:360:72> line:358:8 invalid ec_GFp_simple_point2oct 'size_t (const int *, const int *, int, unsigned char *, size_t, int *)'
| |-ParmVarDecl 0x26de95f9460 <col:32, <invalid sloc>> col:48 invalid 'const int *'
| |-ParmVarDecl 0x26de95f94e0 <col:50, <invalid sloc>> col:66 invalid 'const int *'
| |-ParmVarDecl 0x26de95f9560 <line:359:32, col:56> col:56 invalid form 'int'
| |-ParmVarDecl 0x26de95f95e0 <line:360:32, col:47> col:47 buf 'unsigned char *'
| |-ParmVarDecl 0x26de95f9658 <col:52, col:59> col:59 len 'size_t':'unsigned long long'
| `-ParmVarDecl 0x26de95f96d8 <col:64, <invalid sloc>> col:72 invalid 'int *'
|-FunctionDecl 0x26de95fab50 <line:361:1, line:362:75> line:361:5 invalid ec_GFp_simple_oct2point 'int (const int *, int *, const unsigned char *, size_t, int *)'
| |-ParmVarDecl 0x26de95f9878 <col:29, <invalid sloc>> col:45 invalid 'const int *'
| |-ParmVarDecl 0x26de95f98f8 <col:47, <invalid sloc>> col:57 invalid 'int *'
| |-ParmVarDecl 0x26de95fa9a0 <line:362:29, col:50> col:50 buf 'const unsigned char *'
| |-ParmVarDecl 0x26de95faa18 <col:55, col:62> col:62 len 'size_t':'unsigned long long'
| `-ParmVarDecl 0x26de95faa98 <col:67, <invalid sloc>> col:75 invalid 'int *'
|-FunctionDecl 0x26de95faee8 <line:363:1, line:364:50> line:363:5 invalid ec_GFp_simple_add 'int (const int *, int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x26de95fac30 <col:23, <invalid sloc>> col:39 invalid 'const int *'
| |-ParmVarDecl 0x26de95facb0 <col:41, col:51> col:51 invalid r 'int *'
| |-ParmVarDecl 0x26de95fad30 <col:54, col:70> col:70 invalid a 'const int *'
| |-ParmVarDecl 0x26de95fadb0 <line:364:23, col:39> col:39 invalid b 'const int *'
| `-ParmVarDecl 0x26de95fae30 <col:42, <invalid sloc>> col:50 invalid 'int *'
|-FunctionDecl 0x26de95fb1f8 <line:365:1, line:366:31> line:365:5 invalid ec_GFp_simple_dbl 'int (const int *, int *, const int *, int *)'
| |-ParmVarDecl 0x26de95fafc8 <col:23, <invalid sloc>> col:39 invalid 'const int *'
| |-ParmVarDecl 0x26de95fb048 <col:41, col:51> col:51 invalid r 'int *'
| |-ParmVarDecl 0x26de95fb0c8 <col:54, col:70> col:70 invalid a 'const int *'
| `-ParmVarDecl 0x26de95fb148 <line:366:23, <invalid sloc>> col:31 invalid 'int *'
|-FunctionDecl 0x26de95fb478 <line:367:1, col:64> col:5 invalid ec_GFp_simple_invert 'int (const int *, int *, int *)'
| |-ParmVarDecl 0x26de95fb2d0 <col:26, <invalid sloc>> col:42 invalid 'const int *'
| |-ParmVarDecl 0x26de95fb350 <col:44, <invalid sloc>> col:54 invalid 'int *'
| `-ParmVarDecl 0x26de95fb3d0 <col:56, <invalid sloc>> col:64 invalid 'int *'
|-FunctionDecl 0x26de95fb668 <line:368:1, col:68> col:5 invalid ec_GFp_simple_is_at_infinity 'int (const int *, const int *)'
| |-ParmVarDecl 0x26de95fb548 <col:34, <invalid sloc>> col:50 invalid 'const int *'
| `-ParmVarDecl 0x26de95fb5c8 <col:52, <invalid sloc>> col:68 invalid 'const int *'
|-FunctionDecl 0x26de95fb8d8 <line:369:1, col:75> col:5 invalid ec_GFp_simple_is_on_curve 'int (const int *, const int *, int *)'
| |-ParmVarDecl 0x26de95fb730 <col:31, <invalid sloc>> col:47 invalid 'const int *'
| |-ParmVarDecl 0x26de95fb7b0 <col:49, <invalid sloc>> col:65 invalid 'const int *'
| `-ParmVarDecl 0x26de95fb830 <col:67, <invalid sloc>> col:75 invalid 'int *'
|-FunctionDecl 0x26de95fcc08 <line:370:1, line:371:31> line:370:5 invalid ec_GFp_simple_cmp 'int (const int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x26de95fc9d8 <col:23, <invalid sloc>> col:39 invalid 'const int *'
| |-ParmVarDecl 0x26de95fca58 <col:41, col:57> col:57 invalid a 'const int *'
| |-ParmVarDecl 0x26de95fcad8 <col:60, col:76> col:76 invalid b 'const int *'
| `-ParmVarDecl 0x26de95fcb58 <line:371:23, <invalid sloc>> col:31 invalid 'int *'
|-FunctionDecl 0x26de95fce88 <line:372:1, col:69> col:5 invalid ec_GFp_simple_make_affine 'int (const int *, int *, int *)'
| |-ParmVarDecl 0x26de95fcce0 <col:31, <invalid sloc>> col:47 invalid 'const int *'
| |-ParmVarDecl 0x26de95fcd60 <col:49, <invalid sloc>> col:59 invalid 'int *'
| `-ParmVarDecl 0x26de95fcde0 <col:61, <invalid sloc>> col:69 invalid 'int *'
|-FunctionDecl 0x26de95fd190 <line:373:1, line:374:60> line:373:5 invalid ec_GFp_simple_points_make_affine 'int (const int *, size_t, int **, int *)'
| |-ParmVarDecl 0x26de95fcf58 <col:38, <invalid sloc>> col:54 invalid 'const int *'
| |-ParmVarDecl 0x26de95fcfd0 <col:56, col:63> col:63 num 'size_t':'unsigned long long'
| |-ParmVarDecl 0x26de95fd060 <line:374:38, <invalid sloc>> col:48 invalid 'int **':'int **'
| `-ParmVarDecl 0x26de95fd0e0 <col:52, <invalid sloc>> col:60 invalid 'int *'
|-FunctionDecl 0x26de95fd520 <line:375:1, line:376:54> line:375:5 invalid ec_GFp_simple_field_mul 'int (const int *, int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x26de95fd268 <col:29, <invalid sloc>> col:45 invalid 'const int *'
| |-ParmVarDecl 0x26de95fd2e8 <col:47, col:55> col:55 invalid r 'int *'
| |-ParmVarDecl 0x26de95fd368 <col:58, col:72> col:72 invalid a 'const int *'
| |-ParmVarDecl 0x26de95fd3e8 <line:376:29, col:43> col:43 invalid b 'const int *'
| `-ParmVarDecl 0x26de95fd468 <col:46, <invalid sloc>> col:54 invalid 'int *'
|-FunctionDecl 0x26de95fd830 <line:377:1, line:378:37> line:377:5 invalid ec_GFp_simple_field_sqr 'int (const int *, int *, const int *, int *)'
| |-ParmVarDecl 0x26de95fd600 <col:29, <invalid sloc>> col:45 invalid 'const int *'
| |-ParmVarDecl 0x26de95fd680 <col:47, col:55> col:55 invalid r 'int *'
| |-ParmVarDecl 0x26de95fd700 <col:58, col:72> col:72 invalid a 'const int *'
| `-ParmVarDecl 0x26de95fd780 <line:378:29, <invalid sloc>> col:37 invalid 'int *'
|-FunctionDecl 0x26de9600b28 <line:379:1, line:380:48> line:379:5 invalid ec_GFp_simple_blind_coordinates 'int (const int *, int *, int *)'
| |-ParmVarDecl 0x26de95fd908 <col:37, col:53> col:53 invalid group 'const int *'
| |-ParmVarDecl 0x26de9600a00 <col:60, col:70> col:70 invalid p 'int *'
| `-ParmVarDecl 0x26de9600a80 <line:380:37, col:45> col:45 invalid ctx 'int *'
|-FunctionDecl 0x26de9600c90 <line:383:1, col:38> col:5 invalid ec_GFp_mont_group_init 'int (int *)'
| `-ParmVarDecl 0x26de9600bf8 <col:28, <invalid sloc>> col:38 invalid 'int *'
|-FunctionDecl 0x26de9601008 <line:384:1, line:385:58> line:384:5 invalid ec_GFp_mont_group_set_curve 'int (int *, const int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x26de9600d50 <col:33, <invalid sloc>> col:43 invalid 'int *'
| |-ParmVarDecl 0x26de9600dd0 <col:45, col:59> col:59 invalid p 'const int *'
| |-ParmVarDecl 0x26de9600e50 <col:62, col:76> col:76 invalid a 'const int *'
| |-ParmVarDecl 0x26de9600ed0 <line:385:33, col:47> col:47 invalid b 'const int *'
| `-ParmVarDecl 0x26de9600f50 <col:50, <invalid sloc>> col:58 invalid 'int *'
|-FunctionDecl 0x26de9601178 <line:386:1, col:41> col:6 invalid ec_GFp_mont_group_finish 'void (int *)'
| `-ParmVarDecl 0x26de96010e8 <col:31, <invalid sloc>> col:41 invalid 'int *'
|-FunctionDecl 0x26de96012c8 <line:387:1, col:47> col:6 invalid ec_GFp_mont_group_clear_finish 'void (int *)'
| `-ParmVarDecl 0x26de9601238 <col:37, <invalid sloc>> col:47 invalid 'int *'
|-FunctionDecl 0x26de96014a8 <line:388:1, col:56> col:5 invalid ec_GFp_mont_group_copy 'int (int *, const int *)'
| |-ParmVarDecl 0x26de9601388 <col:28, <invalid sloc>> col:38 invalid 'int *'
| `-ParmVarDecl 0x26de9601408 <col:40, <invalid sloc>> col:56 invalid 'const int *'
|-FunctionDecl 0x26de9601828 <line:389:1, line:390:52> line:389:5 invalid ec_GFp_mont_field_mul 'int (const int *, int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x26de9601570 <col:27, <invalid sloc>> col:43 invalid 'const int *'
| |-ParmVarDecl 0x26de96015f0 <col:45, col:53> col:53 invalid r 'int *'
| |-ParmVarDecl 0x26de9601670 <col:56, col:70> col:70 invalid a 'const int *'
| |-ParmVarDecl 0x26de96016f0 <line:390:27, col:41> col:41 invalid b 'const int *'
| `-ParmVarDecl 0x26de9601770 <col:44, <invalid sloc>> col:52 invalid 'int *'
|-FunctionDecl 0x26de95fdb18 <line:391:1, line:392:35> line:391:5 invalid ec_GFp_mont_field_sqr 'int (const int *, int *, const int *, int *)'
| |-ParmVarDecl 0x26de9601908 <col:27, <invalid sloc>> col:43 invalid 'const int *'
| |-ParmVarDecl 0x26de9601988 <col:45, col:53> col:53 invalid r 'int *'
| |-ParmVarDecl 0x26de95fd9e8 <col:56, col:70> col:70 invalid a 'const int *'
| `-ParmVarDecl 0x26de95fda68 <line:392:27, <invalid sloc>> col:35 invalid 'int *'
|-FunctionDecl 0x26de95fde20 <line:393:1, line:394:38> line:393:5 invalid ec_GFp_mont_field_encode 'int (const int *, int *, const int *, int *)'
| |-ParmVarDecl 0x26de95fdbf0 <col:30, <invalid sloc>> col:46 invalid 'const int *'
| |-ParmVarDecl 0x26de95fdc70 <col:48, col:56> col:56 invalid r 'int *'
| |-ParmVarDecl 0x26de95fdcf0 <col:59, col:73> col:73 invalid a 'const int *'
| `-ParmVarDecl 0x26de95fdd70 <line:394:30, <invalid sloc>> col:38 invalid 'int *'
|-FunctionDecl 0x26de95fe128 <line:395:1, line:396:38> line:395:5 invalid ec_GFp_mont_field_decode 'int (const int *, int *, const int *, int *)'
| |-ParmVarDecl 0x26de95fdef8 <col:30, <invalid sloc>> col:46 invalid 'const int *'
| |-ParmVarDecl 0x26de95fdf78 <col:48, col:56> col:56 invalid r 'int *'
| |-ParmVarDecl 0x26de95fdff8 <col:59, col:73> col:73 invalid a 'const int *'
| `-ParmVarDecl 0x26de95fe078 <line:396:30, <invalid sloc>> col:38 invalid 'int *'
|-FunctionDecl 0x26de95fe3a8 <line:397:1, col:71> col:5 invalid ec_GFp_mont_field_set_to_one 'int (const int *, int *, int *)'
| |-ParmVarDecl 0x26de95fe200 <col:34, <invalid sloc>> col:50 invalid 'const int *'
| |-ParmVarDecl 0x26de95fe280 <col:52, col:60> col:60 invalid r 'int *'
| `-ParmVarDecl 0x26de95fe300 <col:63, <invalid sloc>> col:71 invalid 'int *'
|-FunctionDecl 0x26de95fe598 <line:400:1, col:63> col:5 invalid ec_GFp_nist_group_copy 'int (int *, const int *)'
| |-ParmVarDecl 0x26de95fe478 <col:28, col:38> col:38 invalid dest 'int *'
| `-ParmVarDecl 0x26de95fe4f8 <col:44, col:60> col:60 invalid src 'const int *'
|-FunctionDecl 0x26de95fe918 <line:401:1, line:402:58> line:401:5 invalid ec_GFp_nist_group_set_curve 'int (int *, const int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x26de95fe660 <col:33, <invalid sloc>> col:43 invalid 'int *'
| |-ParmVarDecl 0x26de95fe6e0 <col:45, col:59> col:59 invalid p 'const int *'
| |-ParmVarDecl 0x26de95fe760 <col:62, col:76> col:76 invalid a 'const int *'
| |-ParmVarDecl 0x26de95fe7e0 <line:402:33, col:47> col:47 invalid b 'const int *'
| `-ParmVarDecl 0x26de95fe860 <col:50, <invalid sloc>> col:58 invalid 'int *'
|-FunctionDecl 0x26de9604d38 <line:403:1, line:404:52> line:403:5 invalid ec_GFp_nist_field_mul 'int (const int *, int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x26de9604a80 <col:27, <invalid sloc>> col:43 invalid 'const int *'
| |-ParmVarDecl 0x26de9604b00 <col:45, col:53> col:53 invalid r 'int *'
| |-ParmVarDecl 0x26de9604b80 <col:56, col:70> col:70 invalid a 'const int *'
| |-ParmVarDecl 0x26de9604c00 <line:404:27, col:41> col:41 invalid b 'const int *'
| `-ParmVarDecl 0x26de9604c80 <col:44, <invalid sloc>> col:52 invalid 'int *'
|-FunctionDecl 0x26de9605048 <line:405:1, line:406:35> line:405:5 invalid ec_GFp_nist_field_sqr 'int (const int *, int *, const int *, int *)'
| |-ParmVarDecl 0x26de9604e18 <col:27, <invalid sloc>> col:43 invalid 'const int *'
| |-ParmVarDecl 0x26de9604e98 <col:45, col:53> col:53 invalid r 'int *'
| |-ParmVarDecl 0x26de9604f18 <col:56, col:70> col:70 invalid a 'const int *'
| `-ParmVarDecl 0x26de9604f98 <line:406:27, <invalid sloc>> col:35 invalid 'int *'
|-FunctionDecl 0x26de96051b8 <line:409:1, col:41> col:5 invalid ec_GF2m_simple_group_init 'int (int *)'
| `-ParmVarDecl 0x26de9605120 <col:31, <invalid sloc>> col:41 invalid 'int *'
|-FunctionDecl 0x26de9605308 <line:410:1, col:44> col:6 invalid ec_GF2m_simple_group_finish 'void (int *)'
| `-ParmVarDecl 0x26de9605278 <col:34, <invalid sloc>> col:44 invalid 'int *'
|-FunctionDecl 0x26de9605458 <line:411:1, col:50> col:6 invalid ec_GF2m_simple_group_clear_finish 'void (int *)'
| `-ParmVarDecl 0x26de96053c8 <col:40, <invalid sloc>> col:50 invalid 'int *'
|-FunctionDecl 0x26de9605638 <line:412:1, col:59> col:5 invalid ec_GF2m_simple_group_copy 'int (int *, const int *)'
| |-ParmVarDecl 0x26de9605518 <col:31, <invalid sloc>> col:41 invalid 'int *'
| `-ParmVarDecl 0x26de9605598 <col:43, <invalid sloc>> col:59 invalid 'const int *'
|-FunctionDecl 0x26de9603a30 <line:413:1, line:415:44> line:413:5 invalid ec_GF2m_simple_group_set_curve 'int (int *, const int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x26de9605700 <col:36, <invalid sloc>> col:46 invalid 'int *'
| |-ParmVarDecl 0x26de9605780 <col:48, col:62> col:62 invalid p 'const int *'
| |-ParmVarDecl 0x26de9605800 <line:414:36, col:50> col:50 invalid a 'const int *'
| |-ParmVarDecl 0x26de9605880 <col:53, col:67> col:67 invalid b 'const int *'
| `-ParmVarDecl 0x26de9605900 <line:415:36, <invalid sloc>> col:44 invalid 'int *'
|-FunctionDecl 0x26de9603dc8 <line:416:1, line:417:55> line:416:5 invalid ec_GF2m_simple_group_get_curve 'int (const int *, int *, int *, int *, int *)'
| |-ParmVarDecl 0x26de9603b10 <col:36, <invalid sloc>> col:52 invalid 'const int *'
| |-ParmVarDecl 0x26de9603b90 <col:54, col:62> col:62 invalid p 'int *'
| |-ParmVarDecl 0x26de9603c10 <col:65, col:73> col:73 invalid a 'int *'
| |-ParmVarDecl 0x26de9603c90 <line:417:36, col:44> col:44 invalid b 'int *'
| `-ParmVarDecl 0x26de9603d10 <col:47, <invalid sloc>> col:55 invalid 'int *'
|-FunctionDecl 0x26de9603f40 <line:418:1, col:53> col:5 invalid ec_GF2m_simple_group_get_degree 'int (const int *)'
| `-ParmVarDecl 0x26de9603ea8 <col:37, <invalid sloc>> col:53 invalid 'const int *'
|-FunctionDecl 0x26de9604120 <line:419:1, col:71> col:5 invalid ec_GF2m_simple_group_check_discriminant 'int (const int *, int *)'
| |-ParmVarDecl 0x26de9604000 <col:45, <invalid sloc>> col:61 invalid 'const int *'
| `-ParmVarDecl 0x26de9604080 <col:63, <invalid sloc>> col:71 invalid 'int *'
|-FunctionDecl 0x26de9604280 <line:420:1, col:41> col:5 invalid ec_GF2m_simple_point_init 'int (int *)'
| `-ParmVarDecl 0x26de96041e8 <col:31, <invalid sloc>> col:41 invalid 'int *'
|-FunctionDecl 0x26de96043d0 <line:421:1, col:44> col:6 invalid ec_GF2m_simple_point_finish 'void (int *)'
| `-ParmVarDecl 0x26de9604340 <col:34, <invalid sloc>> col:44 invalid 'int *'
|-FunctionDecl 0x26de9604520 <line:422:1, col:50> col:6 invalid ec_GF2m_simple_point_clear_finish 'void (int *)'
| `-ParmVarDecl 0x26de9604490 <col:40, <invalid sloc>> col:50 invalid 'int *'
|-FunctionDecl 0x26de9604700 <line:423:1, col:59> col:5 invalid ec_GF2m_simple_point_copy 'int (int *, const int *)'
| |-ParmVarDecl 0x26de96045e0 <col:31, <invalid sloc>> col:41 invalid 'int *'
| `-ParmVarDecl 0x26de9604660 <col:43, <invalid sloc>> col:59 invalid 'const int *'
|-FunctionDecl 0x26de96048e8 <line:424:1, col:70> col:5 invalid ec_GF2m_simple_point_set_to_infinity 'int (const int *, int *)'
| |-ParmVarDecl 0x26de96047c8 <col:42, <invalid sloc>> col:58 invalid 'const int *'
| `-ParmVarDecl 0x26de9604848 <col:60, <invalid sloc>> col:70 invalid 'int *'
|-FunctionDecl 0x26de9605c88 <line:425:1, line:427:74> line:425:5 invalid ec_GF2m_simple_point_set_affine_coordinates 'int (const int *, int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x26de96049b0 <col:49, <invalid sloc>> col:65 invalid 'const int *'
| |-ParmVarDecl 0x26de9605a50 <col:67, <invalid sloc>> col:77 invalid 'int *'
| |-ParmVarDecl 0x26de9605ad0 <line:426:49, col:63> col:63 invalid x 'const int *'
| |-ParmVarDecl 0x26de9605b50 <line:427:49, col:63> col:63 invalid y 'const int *'
| `-ParmVarDecl 0x26de9605bd0 <col:66, <invalid sloc>> col:74 invalid 'int *'
|-FunctionDecl 0x26de9606020 <line:428:1, line:430:68> line:428:5 invalid ec_GF2m_simple_point_get_affine_coordinates 'int (const int *, const int *, int *, int *, int *)'
| |-ParmVarDecl 0x26de9605d68 <col:49, <invalid sloc>> col:65 invalid 'const int *'
| |-ParmVarDecl 0x26de9605de8 <line:429:49, <invalid sloc>> col:65 invalid 'const int *'
| |-ParmVarDecl 0x26de9605e68 <col:67, col:75> col:75 invalid x 'int *'
| |-ParmVarDecl 0x26de9605ee8 <line:430:49, col:57> col:57 invalid y 'int *'
| `-ParmVarDecl 0x26de9605f68 <col:60, <invalid sloc>> col:68 invalid 'int *'
|-FunctionDecl 0x26de96063b8 <line:431:1, line:433:55> line:431:5 invalid ec_GF2m_simple_set_compressed_coordinates 'int (const int *, int *, const int *, int, int *)'
| |-ParmVarDecl 0x26de9606100 <col:47, <invalid sloc>> col:63 invalid 'const int *'
| |-ParmVarDecl 0x26de9606180 <col:65, <invalid sloc>> col:75 invalid 'int *'
| |-ParmVarDecl 0x26de9606200 <line:432:47, col:61> col:61 invalid x 'const int *'
| |-ParmVarDecl 0x26de9606280 <col:64, col:68> col:68 y_bit 'int'
| `-ParmVarDecl 0x26de9606300 <line:433:47, <invalid sloc>> col:55 invalid 'int *'
|-FunctionDecl 0x26de96067c8 <line:434:1, line:436:73> line:434:8 invalid ec_GF2m_simple_point2oct 'size_t (const int *, const int *, int, unsigned char *, size_t, int *)'
| |-ParmVarDecl 0x26de9606498 <col:33, <invalid sloc>> col:49 invalid 'const int *'
| |-ParmVarDecl 0x26de9606518 <col:51, <invalid sloc>> col:67 invalid 'const int *'
| |-ParmVarDecl 0x26de9606598 <line:435:33, col:57> col:57 invalid form 'int'
| |-ParmVarDecl 0x26de9606618 <line:436:33, col:48> col:48 buf 'unsigned char *'
| |-ParmVarDecl 0x26de9606690 <col:53, col:60> col:60 len 'size_t':'unsigned long long'
| `-ParmVarDecl 0x26de9606710 <col:65, <invalid sloc>> col:73 invalid 'int *'
|-FunctionDecl 0x26de9601b48 <line:437:1, line:438:76> line:437:5 invalid ec_GF2m_simple_oct2point 'int (const int *, int *, const unsigned char *, size_t, int *)'
| |-ParmVarDecl 0x26de96068b0 <col:30, <invalid sloc>> col:46 invalid 'const int *'
| |-ParmVarDecl 0x26de9606930 <col:48, <invalid sloc>> col:58 invalid 'int *'
| |-ParmVarDecl 0x26de96069b0 <line:438:30, col:51> col:51 buf 'const unsigned char *'
| |-ParmVarDecl 0x26de9601a10 <col:56, col:63> col:63 len 'size_t':'unsigned long long'
| `-ParmVarDecl 0x26de9601a90 <col:68, <invalid sloc>> col:76 invalid 'int *'
|-FunctionDecl 0x26de9601ee0 <line:439:1, line:440:51> line:439:5 invalid ec_GF2m_simple_add 'int (const int *, int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x26de9601c28 <col:24, <invalid sloc>> col:40 invalid 'const int *'
| |-ParmVarDecl 0x26de9601ca8 <col:42, col:52> col:52 invalid r 'int *'
| |-ParmVarDecl 0x26de9601d28 <col:55, col:71> col:71 invalid a 'const int *'
| |-ParmVarDecl 0x26de9601da8 <line:440:24, col:40> col:40 invalid b 'const int *'
| `-ParmVarDecl 0x26de9601e28 <col:43, <invalid sloc>> col:51 invalid 'int *'
|-FunctionDecl 0x26de96021f0 <line:441:1, line:442:32> line:441:5 invalid ec_GF2m_simple_dbl 'int (const int *, int *, const int *, int *)'
| |-ParmVarDecl 0x26de9601fc0 <col:24, <invalid sloc>> col:40 invalid 'const int *'
| |-ParmVarDecl 0x26de9602040 <col:42, col:52> col:52 invalid r 'int *'
| |-ParmVarDecl 0x26de96020c0 <col:55, col:71> col:71 invalid a 'const int *'
| `-ParmVarDecl 0x26de9602140 <line:442:24, <invalid sloc>> col:32 invalid 'int *'
|-FunctionDecl 0x26de9602470 <line:443:1, col:65> col:5 invalid ec_GF2m_simple_invert 'int (const int *, int *, int *)'
| |-ParmVarDecl 0x26de96022c8 <col:27, <invalid sloc>> col:43 invalid 'const int *'
| |-ParmVarDecl 0x26de9602348 <col:45, <invalid sloc>> col:55 invalid 'int *'
| `-ParmVarDecl 0x26de96023c8 <col:57, <invalid sloc>> col:65 invalid 'int *'
|-FunctionDecl 0x26de9602660 <line:444:1, col:69> col:5 invalid ec_GF2m_simple_is_at_infinity 'int (const int *, const int *)'
| |-ParmVarDecl 0x26de9602540 <col:35, <invalid sloc>> col:51 invalid 'const int *'
| `-ParmVarDecl 0x26de96025c0 <col:53, <invalid sloc>> col:69 invalid 'const int *'
|-FunctionDecl 0x26de96028d0 <line:445:1, col:76> col:5 invalid ec_GF2m_simple_is_on_curve 'int (const int *, const int *, int *)'
| |-ParmVarDecl 0x26de9602728 <col:32, <invalid sloc>> col:48 invalid 'const int *'
| |-ParmVarDecl 0x26de96027a8 <col:50, <invalid sloc>> col:66 invalid 'const int *'
| `-ParmVarDecl 0x26de9602828 <col:68, <invalid sloc>> col:76 invalid 'int *'
|-FunctionDecl 0x26de9602be8 <line:446:1, line:447:32> line:446:5 invalid ec_GF2m_simple_cmp 'int (const int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x26de96029a0 <col:24, <invalid sloc>> col:40 invalid 'const int *'
| |-ParmVarDecl 0x26de9602a38 <col:42, col:58> col:58 invalid a 'const int *'
| |-ParmVarDecl 0x26de9602ab8 <col:61, col:77> col:77 invalid b 'const int *'
| `-ParmVarDecl 0x26de9602b38 <line:447:24, <invalid sloc>> col:32 invalid 'int *'
|-FunctionDecl 0x26de9602e68 <line:448:1, col:70> col:5 invalid ec_GF2m_simple_make_affine 'int (const int *, int *, int *)'
| |-ParmVarDecl 0x26de9602cc0 <col:32, <invalid sloc>> col:48 invalid 'const int *'
| |-ParmVarDecl 0x26de9602d40 <col:50, <invalid sloc>> col:60 invalid 'int *'
| `-ParmVarDecl 0x26de9602dc0 <col:62, <invalid sloc>> col:70 invalid 'int *'
|-FunctionDecl 0x26de9603170 <line:449:1, line:450:61> line:449:5 invalid ec_GF2m_simple_points_make_affine 'int (const int *, size_t, int **, int *)'
| |-ParmVarDecl 0x26de9602f38 <col:39, <invalid sloc>> col:55 invalid 'const int *'
| |-ParmVarDecl 0x26de9602fb0 <col:57, col:64> col:64 num 'size_t':'unsigned long long'
| |-ParmVarDecl 0x26de9603040 <line:450:39, <invalid sloc>> col:49 invalid 'int **':'int **'
| `-ParmVarDecl 0x26de96030c0 <col:53, <invalid sloc>> col:61 invalid 'int *'
|-FunctionDecl 0x26de9603500 <line:451:1, line:452:55> line:451:5 invalid ec_GF2m_simple_field_mul 'int (const int *, int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x26de9603248 <col:30, <invalid sloc>> col:46 invalid 'const int *'
| |-ParmVarDecl 0x26de96032c8 <col:48, col:56> col:56 invalid r 'int *'
| |-ParmVarDecl 0x26de9603348 <col:59, col:73> col:73 invalid a 'const int *'
| |-ParmVarDecl 0x26de96033c8 <line:452:30, col:44> col:44 invalid b 'const int *'
| `-ParmVarDecl 0x26de9603448 <col:47, <invalid sloc>> col:55 invalid 'int *'
|-FunctionDecl 0x26de9603810 <line:453:1, line:454:38> line:453:5 invalid ec_GF2m_simple_field_sqr 'int (const int *, int *, const int *, int *)'
| |-ParmVarDecl 0x26de96035e0 <col:30, <invalid sloc>> col:46 invalid 'const int *'
| |-ParmVarDecl 0x26de9603660 <col:48, col:56> col:56 invalid r 'int *'
| |-ParmVarDecl 0x26de96036e0 <col:59, col:73> col:73 invalid a 'const int *'
| `-ParmVarDecl 0x26de9603760 <line:454:30, <invalid sloc>> col:38 invalid 'int *'
|-FunctionDecl 0x26de9606c18 <line:455:1, line:456:55> line:455:5 invalid ec_GF2m_simple_field_div 'int (const int *, int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x26de96038e8 <col:30, <invalid sloc>> col:46 invalid 'const int *'
| |-ParmVarDecl 0x26de9603968 <col:48, col:56> col:56 invalid r 'int *'
| |-ParmVarDecl 0x26de9606a60 <col:59, col:73> col:73 invalid a 'const int *'
| |-ParmVarDecl 0x26de9606ae0 <line:456:30, col:44> col:44 invalid b 'const int *'
| `-ParmVarDecl 0x26de9606b60 <col:47, <invalid sloc>> col:55 invalid 'int *'
|-FunctionDecl 0x26de96070d8 <line:459:1, line:462:32> line:459:5 invalid ec_GF2m_simple_mul 'int (const int *, int *, const int *, size_t, const int **, const int **, int *)'
| |-ParmVarDecl 0x26de9606cf8 <col:24, col:40> col:40 invalid group 'const int *'
| |-ParmVarDecl 0x26de9606d78 <col:47, col:57> col:57 invalid r 'int *'
| |-ParmVarDecl 0x26de9606df8 <line:460:24, col:38> col:38 invalid scalar 'const int *'
| |-ParmVarDecl 0x26de9606e70 <col:46, col:53> col:53 num 'size_t':'unsigned long long'
| |-ParmVarDecl 0x26de9606f00 <line:461:24, <invalid sloc>> col:40 invalid points 'const int **':'const int **'
| |-ParmVarDecl 0x26de9606f90 <col:50, <invalid sloc>> col:64 invalid scalars 'const int **':'const int **'
| `-ParmVarDecl 0x26de9607010 <line:462:24, <invalid sloc>> col:32 invalid 'int *'
|-FunctionDecl 0x26de96072e8 <line:463:1, col:57> col:5 invalid ec_GF2m_precompute_mult 'int (int *, int *)'
| |-ParmVarDecl 0x26de96071c8 <col:29, col:39> col:39 invalid group 'int *'
| `-ParmVarDecl 0x26de9607248 <col:46, col:54> col:54 invalid ctx 'int *'
|-FunctionDecl 0x26de9607448 <line:464:1, col:55> col:5 invalid ec_GF2m_have_precompute_mult 'int (const int *)'
| `-ParmVarDecl 0x26de96073b0 <col:34, col:50> col:50 invalid group 'const int *'
|-FunctionDecl 0x26de96075a0 <line:468:1, col:47> col:5 invalid ec_GFp_nistp224_group_init 'int (int *)'
| `-ParmVarDecl 0x26de9607508 <col:32, col:42> col:42 invalid group 'int *'
|-FunctionDecl 0x26de9607918 <line:469:1, line:471:45> line:469:5 invalid ec_GFp_nistp224_group_set_curve 'int (int *, const int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x26de9607660 <col:37, col:47> col:47 invalid group 'int *'
| |-ParmVarDecl 0x26de96076e0 <col:54, col:68> col:68 invalid p 'const int *'
| |-ParmVarDecl 0x26de9607760 <line:470:37, col:51> col:51 invalid a 'const int *'
| |-ParmVarDecl 0x26de96077e0 <col:54, col:68> col:68 invalid n 'const int *'
| `-ParmVarDecl 0x26de9607860 <line:471:37, <invalid sloc>> col:45 invalid 'int *'
|-FunctionDecl 0x26de95ffc40 <line:472:1, line:475:61> line:472:5 invalid ec_GFp_nistp224_point_get_affine_coordinates 'int (const int *, const int *, int *, int *, int *)'
| |-ParmVarDecl 0x26de96079f8 <col:50, col:66> col:66 invalid group 'const int *'
| |-ParmVarDecl 0x26de95ffa08 <line:473:50, col:66> col:66 invalid point 'const int *'
| |-ParmVarDecl 0x26de95ffa88 <line:474:50, col:58> col:58 invalid x 'int *'
| |-ParmVarDecl 0x26de95ffb08 <col:61, col:69> col:69 invalid y 'int *'
| `-ParmVarDecl 0x26de95ffb88 <line:475:50, col:58> col:58 invalid ctx 'int *'
|-FunctionDecl 0x26de9600100 <line:476:1, line:479:33> line:476:5 invalid ec_GFp_nistp224_mul 'int (const int *, int *, const int *, size_t, const int **, const int **, int *)'
| |-ParmVarDecl 0x26de95ffd20 <col:25, col:41> col:41 invalid group 'const int *'
| |-ParmVarDecl 0x26de95ffda0 <col:48, col:58> col:58 invalid r 'int *'
| |-ParmVarDecl 0x26de95ffe20 <line:477:25, col:39> col:39 invalid scalar 'const int *'
| |-ParmVarDecl 0x26de95ffe98 <col:47, col:54> col:54 num 'size_t':'unsigned long long'
| |-ParmVarDecl 0x26de95fff28 <line:478:25, <invalid sloc>> col:41 invalid points 'const int **':'const int **'
| |-ParmVarDecl 0x26de95fffb8 <col:51, <invalid sloc>> col:65 invalid scalars 'const int **':'const int **'
| `-ParmVarDecl 0x26de9600038 <line:479:25, <invalid sloc>> col:33 invalid 'int *'
|-FunctionDecl 0x26de96005d0 <line:480:1, line:483:68> line:480:5 invalid ec_GFp_nistp224_points_mul 'int (const int *, int *, const int *, size_t, const int **, const int **, int *)'
| |-ParmVarDecl 0x26de96001f0 <col:32, col:48> col:48 invalid group 'const int *'
| |-ParmVarDecl 0x26de9600270 <col:55, col:65> col:65 invalid r 'int *'
| |-ParmVarDecl 0x26de96002f0 <line:481:32, col:46> col:46 invalid scalar 'const int *'
| |-ParmVarDecl 0x26de9600368 <col:54, col:61> col:61 num 'size_t':'unsigned long long'
| |-ParmVarDecl 0x26de96003f8 <line:482:32, <invalid sloc>> col:48 invalid points 'const int **':'const int **'
| |-ParmVarDecl 0x26de9600488 <line:483:32, <invalid sloc>> col:46 invalid scalars 'const int **':'const int **'
| `-ParmVarDecl 0x26de9600508 <col:57, col:65> col:65 invalid ctx 'int *'
|-FunctionDecl 0x26de96007e0 <line:484:1, col:65> col:5 invalid ec_GFp_nistp224_precompute_mult 'int (int *, int *)'
| |-ParmVarDecl 0x26de96006c0 <col:37, col:47> col:47 invalid group 'int *'
| `-ParmVarDecl 0x26de9600740 <col:54, col:62> col:62 invalid ctx 'int *'
|-FunctionDecl 0x26de9600940 <line:485:1, col:63> col:5 invalid ec_GFp_nistp224_have_precompute_mult 'int (const int *)'
| `-ParmVarDecl 0x26de96008a8 <col:42, col:58> col:58 invalid group 'const int *'
|-FunctionDecl 0x26de9607b20 <line:488:1, col:47> col:5 invalid ec_GFp_nistp256_group_init 'int (int *)'
| `-ParmVarDecl 0x26de9607a88 <col:32, col:42> col:42 invalid group 'int *'
|-FunctionDecl 0x26de9607e98 <line:489:1, line:491:45> line:489:5 invalid ec_GFp_nistp256_group_set_curve 'int (int *, const int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x26de9607be0 <col:37, col:47> col:47 invalid group 'int *'
| |-ParmVarDecl 0x26de9607c60 <col:54, col:68> col:68 invalid p 'const int *'
| |-ParmVarDecl 0x26de9607ce0 <line:490:37, col:51> col:51 invalid a 'const int *'
| |-ParmVarDecl 0x26de9607d60 <col:54, col:68> col:68 invalid n 'const int *'
| `-ParmVarDecl 0x26de9607de0 <line:491:37, <invalid sloc>> col:45 invalid 'int *'
|-FunctionDecl 0x26de9608230 <line:492:1, line:495:61> line:492:5 invalid ec_GFp_nistp256_point_get_affine_coordinates 'int (const int *, const int *, int *, int *, int *)'
| |-ParmVarDecl 0x26de9607f78 <col:50, col:66> col:66 invalid group 'const int *'
| |-ParmVarDecl 0x26de9607ff8 <line:493:50, col:66> col:66 invalid point 'const int *'
| |-ParmVarDecl 0x26de9608078 <line:494:50, col:58> col:58 invalid x 'int *'
| |-ParmVarDecl 0x26de96080f8 <col:61, col:69> col:69 invalid y 'int *'
| `-ParmVarDecl 0x26de9608178 <line:495:50, col:58> col:58 invalid ctx 'int *'
|-FunctionDecl 0x26de96086f0 <line:496:1, line:499:33> line:496:5 invalid ec_GFp_nistp256_mul 'int (const int *, int *, const int *, size_t, const int **, const int **, int *)'
| |-ParmVarDecl 0x26de9608310 <col:25, col:41> col:41 invalid group 'const int *'
| |-ParmVarDecl 0x26de9608390 <col:48, col:58> col:58 invalid r 'int *'
| |-ParmVarDecl 0x26de9608410 <line:497:25, col:39> col:39 invalid scalar 'const int *'
| |-ParmVarDecl 0x26de9608488 <col:47, col:54> col:54 num 'size_t':'unsigned long long'
| |-ParmVarDecl 0x26de9608518 <line:498:25, <invalid sloc>> col:41 invalid points 'const int **':'const int **'
| |-ParmVarDecl 0x26de96085a8 <col:51, <invalid sloc>> col:65 invalid scalars 'const int **':'const int **'
| `-ParmVarDecl 0x26de9608628 <line:499:25, <invalid sloc>> col:33 invalid 'int *'
|-FunctionDecl 0x26de9608bf0 <line:500:1, line:503:68> line:500:5 invalid ec_GFp_nistp256_points_mul 'int (const int *, int *, const int *, size_t, const int **, const int **, int *)'
| |-ParmVarDecl 0x26de96087e0 <col:32, col:48> col:48 invalid group 'const int *'
| |-ParmVarDecl 0x26de9608860 <col:55, col:65> col:65 invalid r 'int *'
| |-ParmVarDecl 0x26de96088e0 <line:501:32, col:46> col:46 invalid scalar 'const int *'
| |-ParmVarDecl 0x26de9608958 <col:54, col:61> col:61 num 'size_t':'unsigned long long'
| |-ParmVarDecl 0x26de96089e8 <line:502:32, <invalid sloc>> col:48 invalid points 'const int **':'const int **'
| |-ParmVarDecl 0x26de9608aa8 <line:503:32, <invalid sloc>> col:46 invalid scalars 'const int **':'const int **'
| `-ParmVarDecl 0x26de9608b28 <col:57, col:65> col:65 invalid ctx 'int *'
|-FunctionDecl 0x26de9608e00 <line:504:1, col:65> col:5 invalid ec_GFp_nistp256_precompute_mult 'int (int *, int *)'
| |-ParmVarDecl 0x26de9608ce0 <col:37, col:47> col:47 invalid group 'int *'
| `-ParmVarDecl 0x26de9608d60 <col:54, col:62> col:62 invalid ctx 'int *'
|-FunctionDecl 0x26de9608f60 <line:505:1, col:63> col:5 invalid ec_GFp_nistp256_have_precompute_mult 'int (const int *)'
| `-ParmVarDecl 0x26de9608ec8 <col:42, col:58> col:58 invalid group 'const int *'
|-FunctionDecl 0x26de96090b8 <line:508:1, col:47> col:5 invalid ec_GFp_nistp521_group_init 'int (int *)'
| `-ParmVarDecl 0x26de9609020 <col:32, col:42> col:42 invalid group 'int *'
|-FunctionDecl 0x26de9609430 <line:509:1, line:511:45> line:509:5 invalid ec_GFp_nistp521_group_set_curve 'int (int *, const int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x26de9609178 <col:37, col:47> col:47 invalid group 'int *'
| |-ParmVarDecl 0x26de96091f8 <col:54, col:68> col:68 invalid p 'const int *'
| |-ParmVarDecl 0x26de9609278 <line:510:37, col:51> col:51 invalid a 'const int *'
| |-ParmVarDecl 0x26de96092f8 <col:54, col:68> col:68 invalid n 'const int *'
| `-ParmVarDecl 0x26de9609378 <line:511:37, <invalid sloc>> col:45 invalid 'int *'
|-FunctionDecl 0x26de96097c8 <line:512:1, line:515:61> line:512:5 invalid ec_GFp_nistp521_point_get_affine_coordinates 'int (const int *, const int *, int *, int *, int *)'
| |-ParmVarDecl 0x26de9609510 <col:50, col:66> col:66 invalid group 'const int *'
| |-ParmVarDecl 0x26de9609590 <line:513:50, col:66> col:66 invalid point 'const int *'
| |-ParmVarDecl 0x26de9609610 <line:514:50, col:58> col:58 invalid x 'int *'
| |-ParmVarDecl 0x26de9609690 <col:61, col:69> col:69 invalid y 'int *'
| `-ParmVarDecl 0x26de9609710 <line:515:50, col:58> col:58 invalid ctx 'int *'
|-FunctionDecl 0x26de9609cf8 <line:516:1, line:519:33> line:516:5 invalid ec_GFp_nistp521_mul 'int (const int *, int *, const int *, size_t, const int **, const int **, int *)'
| |-ParmVarDecl 0x26de96098a8 <col:25, col:41> col:41 invalid group 'const int *'
| |-ParmVarDecl 0x26de9609928 <col:48, col:58> col:58 invalid r 'int *'
| |-ParmVarDecl 0x26de96099a8 <line:517:25, col:39> col:39 invalid scalar 'const int *'
| |-ParmVarDecl 0x26de9609a90 <col:47, col:54> col:54 num 'size_t':'unsigned long long'
| |-ParmVarDecl 0x26de9609b20 <line:518:25, <invalid sloc>> col:41 invalid points 'const int **':'const int **'
| |-ParmVarDecl 0x26de9609bb0 <col:51, <invalid sloc>> col:65 invalid scalars 'const int **':'const int **'
| `-ParmVarDecl 0x26de9609c30 <line:519:25, <invalid sloc>> col:33 invalid 'int *'
|-FunctionDecl 0x26de960a1c8 <line:520:1, line:523:68> line:520:5 invalid ec_GFp_nistp521_points_mul 'int (const int *, int *, const int *, size_t, const int **, const int **, int *)'
| |-ParmVarDecl 0x26de9609de8 <col:32, col:48> col:48 invalid group 'const int *'
| |-ParmVarDecl 0x26de9609e68 <col:55, col:65> col:65 invalid r 'int *'
| |-ParmVarDecl 0x26de9609ee8 <line:521:32, col:46> col:46 invalid scalar 'const int *'
| |-ParmVarDecl 0x26de9609f60 <col:54, col:61> col:61 num 'size_t':'unsigned long long'
| |-ParmVarDecl 0x26de9609ff0 <line:522:32, <invalid sloc>> col:48 invalid points 'const int **':'const int **'
| |-ParmVarDecl 0x26de960a080 <line:523:32, <invalid sloc>> col:46 invalid scalars 'const int **':'const int **'
| `-ParmVarDecl 0x26de960a100 <col:57, col:65> col:65 invalid ctx 'int *'
|-FunctionDecl 0x26de960a3d8 <line:524:1, col:65> col:5 invalid ec_GFp_nistp521_precompute_mult 'int (int *, int *)'
| |-ParmVarDecl 0x26de960a2b8 <col:37, col:47> col:47 invalid group 'int *'
| `-ParmVarDecl 0x26de960a338 <col:54, col:62> col:62 invalid ctx 'int *'
|-FunctionDecl 0x26de960a538 <line:525:1, col:63> col:5 invalid ec_GFp_nistp521_have_precompute_mult 'int (const int *)'
| `-ParmVarDecl 0x26de960a4a0 <col:42, col:58> col:58 invalid group 'const int *'
|-FunctionDecl 0x26de956dff8 <line:528:1, line:552:75> line:528:6 used ec_GFp_nistp_points_make_affine_internal 'void (size_t, void *, size_t, void *, void (*)(void *), int (*)(const void *), void (*)(void *, const void *), void (*)(void *, const void *), void (*)(void *, const void *, const void *), void (*)(void *, const void *), void (*)(void *, const void *))'
| |-ParmVarDecl 0x26de960a5f0 <col:47, col:54> col:54 num 'size_t':'unsigned long long'
| |-ParmVarDecl 0x26de960a670 <col:59, col:65> col:65 point_array 'void *'
| |-ParmVarDecl 0x26de960a6e8 <line:529:47, col:54> col:54 felem_size 'size_t':'unsigned long long'
| |-ParmVarDecl 0x26de960a768 <line:530:47, col:53> col:53 tmp_felems 'void *'
| |-ParmVarDecl 0x26de960a930 <line:531:47, col:75> col:54 felem_one 'void (*)(void *)'
| |-ParmVarDecl 0x26de956d1a8 <line:532:47, line:533:72> line:532:53 felem_is_zero 'int (*)(const void *)'
| |-ParmVarDecl 0x26de956d448 <line:534:47, line:536:72> line:534:54 felem_assign 'void (*)(void *, const void *)'
| |-ParmVarDecl 0x26de956d620 <line:537:47, line:539:72> line:537:54 felem_square 'void (*)(void *, const void *)'
| |-ParmVarDecl 0x26de956d960 <line:540:47, line:544:70> line:540:54 felem_mul 'void (*)(void *, const void *, const void *)'
| |-ParmVarDecl 0x26de956db38 <line:545:47, line:547:69> line:545:54 felem_inv 'void (*)(void *, const void *)'
| `-ParmVarDecl 0x26de956dd10 <line:548:47, line:552:74> line:548:54 felem_contract 'void (*)(void *, const void *)'
|-FunctionDecl 0x26de9621238 <line:553:1, line:554:76> line:553:6 used ec_GFp_nistp_recode_scalar_bits 'void (unsigned char *, unsigned char *, unsigned char)'
| |-ParmVarDecl 0x26de9621008 <col:38, col:53> col:53 sign 'unsigned char *'
| |-ParmVarDecl 0x26de9621088 <line:554:38, col:53> col:53 digit 'unsigned char *'
| `-ParmVarDecl 0x26de9621108 <col:60, col:74> col:74 in 'unsigned char'
|-FunctionDecl 0x26de96213b8 <line:556:1, col:39> col:5 invalid ec_precompute_mont_data 'int (int *)'
| `-ParmVarDecl 0x26de9621320 <col:29, <invalid sloc>> col:39 invalid 'int *'
|-FunctionDecl 0x26de9621510 <line:557:1, col:53> col:5 invalid ec_group_simple_order_bits 'int (const int *)'
| `-ParmVarDecl 0x26de9621478 <col:32, col:48> col:48 invalid group 'const int *'
|-FunctionDecl 0x26de9621768 <line:567:1, line:568:61> line:567:8 invalid ec_key_simple_priv2oct 'size_t (const int *, unsigned char *, size_t)'
| |-ParmVarDecl 0x26de96215d0 <col:31, col:45> col:45 invalid eckey 'const int *'
| |-ParmVarDecl 0x26de9621650 <line:568:31, col:46> col:46 buf 'unsigned char *'
| `-ParmVarDecl 0x26de96216c8 <col:51, col:58> col:58 len 'size_t':'unsigned long long'
|-FunctionDecl 0x26de96219d8 <line:569:1, col:79> col:5 invalid ec_key_simple_oct2priv 'int (int *, const unsigned char *, size_t)'
| |-ParmVarDecl 0x26de9621838 <col:28, col:36> col:36 invalid eckey 'int *'
| |-ParmVarDecl 0x26de96218b8 <col:43, col:64> col:64 buf 'const unsigned char *'
| `-ParmVarDecl 0x26de9621930 <col:69, col:76> col:76 len 'size_t':'unsigned long long'
|-FunctionDecl 0x26de9621b40 <line:570:1, col:45> col:5 invalid ec_key_simple_generate_key 'int (int *)'
| `-ParmVarDecl 0x26de9621aa8 <col:32, col:40> col:40 invalid eckey 'int *'
|-FunctionDecl 0x26de9621c98 <line:571:1, col:52> col:5 invalid ec_key_simple_generate_public_key 'int (int *)'
| `-ParmVarDecl 0x26de9621c00 <col:39, col:47> col:47 invalid eckey 'int *'
|-FunctionDecl 0x26de9621df0 <line:572:1, col:48> col:5 invalid ec_key_simple_check_key 'int (const int *)'
| `-ParmVarDecl 0x26de9621d58 <col:29, col:43> col:43 invalid eckey 'const int *'
|-RecordDecl 0x26de9621e98 <line:576:1, line:601:1> line:576:8 invalid struct ec_key_method_st definition
| |-FieldDecl 0x26de9621f68 <line:577:5, col:17> col:17 name 'const char *'
| |-FieldDecl 0x26de9622000 <line:578:5, col:13> col:13 invalid flags 'int'
| |-FieldDecl 0x26de9622118 <line:579:5, col:28> col:11 init 'int (*)(int *)'
| |-FieldDecl 0x26de9622228 <line:580:5, col:31> col:12 finish 'void (*)(int *)'
| |-FieldDecl 0x26de96223c8 <line:581:5, col:48> col:11 copy 'int (*)(int *, const int *)'
| |-FieldDecl 0x26de9622568 <line:582:5, col:54> col:11 set_group 'int (*)(int *, const int *)'
| |-FieldDecl 0x26de9622708 <line:583:5, col:59> col:11 set_private 'int (*)(int *, const int *)'
| |-FieldDecl 0x26de96228a8 <line:584:5, col:59> col:11 set_public 'int (*)(int *, const int *)'
| |-FieldDecl 0x26de96229c0 <line:585:5, col:30> col:11 keygen 'int (*)(int *)'
| |-FieldDecl 0x26de9622c70 <line:586:5, line:587:67> line:586:11 compute_key 'int (*)(unsigned char **, size_t *, const int *, const int *)'
| |-FieldDecl 0x26de961e230 <line:588:5, line:590:47> line:588:11 sign 'int (*)(int, const unsigned char *, int, unsigned char *, unsigned int *, const int *, const int *, int *)'
| |-FieldDecl 0x26de961e5d0 <line:591:5, line:592:34> line:591:11 sign_setup 'int (*)(int *, int *, int **, int **)'
| |-FieldDecl 0x26de961e9e8 <line:593:5, <invalid sloc>> col:18 invalid sign_sig 'int *(*)(const unsigned char *, int, const int *, const int *, int *)'
| |-FieldDecl 0x26de961ee90 <line:597:5, line:598:74> line:597:11 verify 'int (*)(int, const unsigned char *, int, const unsigned char *, int, int *)'
| `-FieldDecl 0x26de961c240 <line:599:5, line:600:58> line:599:11 verify_sig 'int (*)(const unsigned char *, int, const int *, int *)'
|-FunctionDecl 0x26de961c348 <line:605:1, col:34> col:5 invalid ossl_ec_key_gen 'int (int *)'
| `-ParmVarDecl 0x26de961c2b0 <col:21, col:29> col:29 invalid eckey 'int *'
|-FunctionDecl 0x26de961c638 <line:606:1, line:607:70> line:606:5 invalid ossl_ecdh_compute_key 'int (unsigned char **, size_t *, const int *, const int *)'
| |-ParmVarDecl 0x26de961c410 <col:27, col:43> col:43 pout 'unsigned char **'
| |-ParmVarDecl 0x26de961c488 <col:49, col:57> col:57 poutlen 'size_t *'
| |-ParmVarDecl 0x26de961c508 <line:607:27, col:43> col:43 invalid pub_key 'const int *'
| `-ParmVarDecl 0x26de961c588 <col:52, col:66> col:66 invalid ecdh 'const int *'
|-FunctionDecl 0x26de961c940 <line:608:1, line:609:72> line:608:5 invalid ecdh_simple_compute_key 'int (unsigned char **, size_t *, const int *, const int *)'
| |-ParmVarDecl 0x26de961c718 <col:29, col:45> col:45 pout 'unsigned char **'
| |-ParmVarDecl 0x26de961c790 <col:51, col:59> col:59 poutlen 'size_t *'
| |-ParmVarDecl 0x26de961c810 <line:609:29, col:45> col:45 invalid pub_key 'const int *'
| `-ParmVarDecl 0x26de961c890 <col:54, col:68> col:68 invalid ecdh 'const int *'
|-RecordDecl 0x26de961ca00 <line:611:1, line:614:1> line:611:8 invalid struct ECDSA_SIG_st definition
| |-FieldDecl 0x26de961cad8 <line:612:5, col:13> col:13 invalid r 'int *'
| `-FieldDecl 0x26de961cb48 <line:613:5, col:13> col:13 invalid s 'int *'
|-FunctionDecl 0x26de961cdf8 <line:616:1, line:617:38> line:616:5 invalid ossl_ecdsa_sign_setup 'int (int *, int *, int **, int **)'
| |-ParmVarDecl 0x26de961cbb8 <col:27, col:35> col:35 invalid eckey 'int *'
| |-ParmVarDecl 0x26de961cc38 <col:42, col:50> col:50 invalid ctx_in 'int *'
| |-ParmVarDecl 0x26de961ccc0 <col:58, col:67> col:67 invalid kinvp 'int **'
| `-ParmVarDecl 0x26de961cd48 <line:617:27, col:36> col:36 invalid rp 'int **'
|-FunctionDecl 0x26de96203b0 <line:618:1, line:620:71> line:618:5 invalid ossl_ecdsa_sign 'int (int, const unsigned char *, int, unsigned char *, unsigned int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x26de961ced0 <col:21, col:25> col:25 type 'int'
| |-ParmVarDecl 0x26de961ffe0 <col:31, col:52> col:52 dgst 'const unsigned char *'
| |-ParmVarDecl 0x26de9620060 <col:58, col:62> col:62 dlen 'int'
| |-ParmVarDecl 0x26de96200e0 <line:619:21, col:36> col:36 sig 'unsigned char *'
| |-ParmVarDecl 0x26de9620160 <col:41, col:55> col:55 siglen 'unsigned int *'
| |-ParmVarDecl 0x26de96201e0 <line:620:21, col:35> col:35 invalid kinv 'const int *'
| |-ParmVarDecl 0x26de9620260 <col:41, col:55> col:55 invalid r 'const int *'
| `-ParmVarDecl 0x26de96202e0 <col:58, col:66> col:66 invalid eckey 'int *'
|-FunctionDecl 0x26de9620760 <line:621:1, line:623:45> line:621:12 invalid ossl_ecdsa_sign_sig 'int *(const unsigned char *, int, const int *, const int *, int *)'
| |-ParmVarDecl 0x26de96204a8 <col:32, col:53> col:53 dgst 'const unsigned char *'
| |-ParmVarDecl 0x26de9620528 <col:59, col:63> col:63 dgst_len 'int'
| |-ParmVarDecl 0x26de96205a8 <line:622:32, col:46> col:46 invalid in_kinv 'const int *'
| |-ParmVarDecl 0x26de9620628 <col:55, col:69> col:69 invalid in_r 'const int *'
| `-ParmVarDecl 0x26de96206a8 <line:623:32, col:40> col:40 invalid eckey 'int *'
|-FunctionDecl 0x26de9620b80 <line:624:1, line:625:78> line:624:5 invalid ossl_ecdsa_verify 'int (int, const unsigned char *, int, const unsigned char *, int, int *)'
| |-ParmVarDecl 0x26de9620840 <col:23, col:27> col:27 type 'int'
| |-ParmVarDecl 0x26de96208c0 <col:33, col:54> col:54 dgst 'const unsigned char *'
| |-ParmVarDecl 0x26de9620940 <col:60, col:64> col:64 dgst_len 'int'
| |-ParmVarDecl 0x26de96209c0 <line:625:23, col:44> col:44 sigbuf 'const unsigned char *'
| |-ParmVarDecl 0x26de9620a40 <col:52, col:56> col:56 sig_len 'int'
| `-ParmVarDecl 0x26de9620ac0 <col:65, col:73> col:73 invalid eckey 'int *'
|-FunctionDecl 0x26de9620e98 <line:626:1, line:627:62> line:626:5 invalid ossl_ecdsa_verify_sig 'int (const unsigned char *, int, const int *, int *)'
| |-ParmVarDecl 0x26de9620c68 <col:27, col:48> col:48 dgst 'const unsigned char *'
| |-ParmVarDecl 0x26de9620ce8 <col:54, col:58> col:58 dgst_len 'int'
| |-ParmVarDecl 0x26de9620d68 <line:627:27, col:44> col:44 invalid sig 'const int *'
| `-ParmVarDecl 0x26de9620de8 <col:49, col:57> col:57 invalid eckey 'int *'
|-FunctionDecl 0x26de9617030 <line:629:1, line:630:47> line:629:5 invalid X25519 'int (int *, const int *, const int *)'
| |-ParmVarDecl 0x26de9616cf0 <col:12, <invalid sloc>> col:20 invalid out_shared_key 'int *':'int *'
| |-ParmVarDecl 0x26de9616e30 <col:40, <invalid sloc>> col:54 invalid private_key 'const int *':'const int *'
| `-ParmVarDecl 0x26de9616f00 <line:630:12, <invalid sloc>> col:26 invalid peer_public_value 'const int *':'const int *'
|-FunctionDecl 0x26de9617338 <line:631:1, line:632:62> line:631:6 invalid X25519_public_from_private 'void (int *, const int *)'
| |-ParmVarDecl 0x26de9617150 <col:33, <invalid sloc>> col:41 invalid out_public_value 'int *':'int *'
| `-ParmVarDecl 0x26de9617220 <line:632:33, <invalid sloc>> col:47 invalid private_key 'const int *':'const int *'
|-FunctionDecl 0x26de96175a8 <line:634:1, col:79> col:5 invalid ec_point_blind_coordinates 'int (const int *, int *, int *)'
| |-ParmVarDecl 0x26de9617400 <col:32, col:48> col:48 invalid group 'const int *'
| |-ParmVarDecl 0x26de9617480 <col:55, col:65> col:65 invalid p 'int *'
| `-ParmVarDecl 0x26de9617500 <col:68, col:76> col:76 invalid ctx 'int *'
|-TypedefDecl 0x26de9617678 <.//openssl//file_jk/before\crypto\ec\ecp_nistp521.c:51:1, col:17> col:17 referenced invalid u8 'int'
| `-BuiltinType 0x26de92ecf90 'int'
|-TypedefDecl 0x26de96176e8 <line:52:1, col:18> col:18 referenced invalid u64 'int'
| `-BuiltinType 0x26de92ecf90 'int'
|-TypedefDecl 0x26de9617838 <line:60:1, col:30> col:12 referenced felem_bytearray 'u8 [66]'
| `-ConstantArrayType 0x26de96177e0 'u8 [66]' 66 
|   `-TypedefType 0x26de9617740 'u8' sugar
|     |-Typedef 0x26de9617678 'u8'
|     `-BuiltinType 0x26de92ecf90 'int'
|-VarDecl 0x26de9617988 <line:66:1, line:112:1> line:66:30 used nistp521_curve_params 'const felem_bytearray [5]' static cinit
| `-InitListExpr 0x26de958de68 <col:57, line:112:1> 'const felem_bytearray [5]'
|   |-InitListExpr 0x26de958dee0 <line:67:5, line:75:16> 'const felem_bytearray':'u8 const[66]'
|   | |-IntegerLiteral 0x26de96179f0 <line:67:6> 'int' 1
|   | |-IntegerLiteral 0x26de9617a18 <col:12> 'int' 255
|   | |-IntegerLiteral 0x26de9617a40 <col:18> 'int' 255
|   | |-IntegerLiteral 0x26de9617a68 <col:24> 'int' 255
|   | |-IntegerLiteral 0x26de9617a90 <col:30> 'int' 255
|   | |-IntegerLiteral 0x26de9617ab8 <col:36> 'int' 255
|   | |-IntegerLiteral 0x26de9617ae0 <col:42> 'int' 255
|   | |-IntegerLiteral 0x26de9617b08 <col:48> 'int' 255
|   | |-IntegerLiteral 0x26de9617b30 <line:68:6> 'int' 255
|   | |-IntegerLiteral 0x26de9617b58 <col:12> 'int' 255
|   | |-IntegerLiteral 0x26de9617b80 <col:18> 'int' 255
|   | |-IntegerLiteral 0x26de9617ba8 <col:24> 'int' 255
|   | |-IntegerLiteral 0x26de9617bd0 <col:30> 'int' 255
|   | |-IntegerLiteral 0x26de9617bf8 <col:36> 'int' 255
|   | |-IntegerLiteral 0x26de9617c20 <col:42> 'int' 255
|   | |-IntegerLiteral 0x26de9617c48 <col:48> 'int' 255
|   | |-IntegerLiteral 0x26de9617c70 <line:69:6> 'int' 255
|   | |-IntegerLiteral 0x26de9617c98 <col:12> 'int' 255
|   | |-IntegerLiteral 0x26de9617cc0 <col:18> 'int' 255
|   | |-IntegerLiteral 0x26de9617ce8 <col:24> 'int' 255
|   | |-IntegerLiteral 0x26de9617d10 <col:30> 'int' 255
|   | |-IntegerLiteral 0x26de9617d38 <col:36> 'int' 255
|   | |-IntegerLiteral 0x26de9617d60 <col:42> 'int' 255
|   | |-IntegerLiteral 0x26de9617d88 <col:48> 'int' 255
|   | |-IntegerLiteral 0x26de9617db0 <line:70:6> 'int' 255
|   | |-IntegerLiteral 0x26de9617dd8 <col:12> 'int' 255
|   | |-IntegerLiteral 0x26de9617e00 <col:18> 'int' 255
|   | |-IntegerLiteral 0x26de9617e28 <col:24> 'int' 255
|   | |-IntegerLiteral 0x26de9617e50 <col:30> 'int' 255
|   | |-IntegerLiteral 0x26de9617e78 <col:36> 'int' 255
|   | |-IntegerLiteral 0x26de9617ea0 <col:42> 'int' 255
|   | |-IntegerLiteral 0x26de9617ec8 <col:48> 'int' 255
|   | |-IntegerLiteral 0x26de9617ef0 <line:71:6> 'int' 255
|   | |-IntegerLiteral 0x26de9617f18 <col:12> 'int' 255
|   | |-IntegerLiteral 0x26de9617f40 <col:18> 'int' 255
|   | |-IntegerLiteral 0x26de9617f68 <col:24> 'int' 255
|   | |-IntegerLiteral 0x26de9617f90 <col:30> 'int' 255
|   | |-IntegerLiteral 0x26de9617fb8 <col:36> 'int' 255
|   | |-IntegerLiteral 0x26de9617fe0 <col:42> 'int' 255
|   | |-IntegerLiteral 0x26de9618008 <col:48> 'int' 255
|   | |-IntegerLiteral 0x26de9618030 <line:72:6> 'int' 255
|   | |-IntegerLiteral 0x26de9618058 <col:12> 'int' 255
|   | |-IntegerLiteral 0x26de9618080 <col:18> 'int' 255
|   | |-IntegerLiteral 0x26de96180a8 <col:24> 'int' 255
|   | |-IntegerLiteral 0x26de96180d0 <col:30> 'int' 255
|   | |-IntegerLiteral 0x26de96180f8 <col:36> 'int' 255
|   | |-IntegerLiteral 0x26de9618120 <col:42> 'int' 255
|   | |-IntegerLiteral 0x26de9618148 <col:48> 'int' 255
|   | |-IntegerLiteral 0x26de9618170 <line:73:6> 'int' 255
|   | |-IntegerLiteral 0x26de9618198 <col:12> 'int' 255
|   | |-IntegerLiteral 0x26de96181c0 <col:18> 'int' 255
|   | |-IntegerLiteral 0x26de96181e8 <col:24> 'int' 255
|   | |-IntegerLiteral 0x26de9618210 <col:30> 'int' 255
|   | |-IntegerLiteral 0x26de9618238 <col:36> 'int' 255
|   | |-IntegerLiteral 0x26de9618260 <col:42> 'int' 255
|   | |-IntegerLiteral 0x26de9618288 <col:48> 'int' 255
|   | |-IntegerLiteral 0x26de96182b0 <line:74:6> 'int' 255
|   | |-IntegerLiteral 0x26de96182d8 <col:12> 'int' 255
|   | |-IntegerLiteral 0x26de9618300 <col:18> 'int' 255
|   | |-IntegerLiteral 0x26de9618328 <col:24> 'int' 255
|   | |-IntegerLiteral 0x26de9618350 <col:30> 'int' 255
|   | |-IntegerLiteral 0x26de9618378 <col:36> 'int' 255
|   | |-IntegerLiteral 0x26de96183a0 <col:42> 'int' 255
|   | |-IntegerLiteral 0x26de96183c8 <col:48> 'int' 255
|   | |-IntegerLiteral 0x26de96183f0 <line:75:6> 'int' 255
|   | `-IntegerLiteral 0x26de9618418 <col:12> 'int' 255
|   |-InitListExpr 0x26de958e140 <line:76:5, line:84:16> 'const felem_bytearray':'u8 const[66]'
|   | |-IntegerLiteral 0x26de9618690 <line:76:6> 'int' 1
|   | |-IntegerLiteral 0x26de96186b8 <col:12> 'int' 255
|   | |-IntegerLiteral 0x26de96186e0 <col:18> 'int' 255
|   | |-IntegerLiteral 0x26de9618708 <col:24> 'int' 255
|   | |-IntegerLiteral 0x26de9618730 <col:30> 'int' 255
|   | |-IntegerLiteral 0x26de9618758 <col:36> 'int' 255
|   | |-IntegerLiteral 0x26de9618780 <col:42> 'int' 255
|   | |-IntegerLiteral 0x26de96187a8 <col:48> 'int' 255
|   | |-IntegerLiteral 0x26de96187d0 <line:77:6> 'int' 255
|   | |-IntegerLiteral 0x26de96187f8 <col:12> 'int' 255
|   | |-IntegerLiteral 0x26de9618820 <col:18> 'int' 255
|   | |-IntegerLiteral 0x26de9618848 <col:24> 'int' 255
|   | |-IntegerLiteral 0x26de9618870 <col:30> 'int' 255
|   | |-IntegerLiteral 0x26de9618898 <col:36> 'int' 255
|   | |-IntegerLiteral 0x26de96188c0 <col:42> 'int' 255
|   | |-IntegerLiteral 0x26de96188e8 <col:48> 'int' 255
|   | |-IntegerLiteral 0x26de9618910 <line:78:6> 'int' 255
|   | |-IntegerLiteral 0x26de9618938 <col:12> 'int' 255
|   | |-IntegerLiteral 0x26de9618960 <col:18> 'int' 255
|   | |-IntegerLiteral 0x26de9618988 <col:24> 'int' 255
|   | |-IntegerLiteral 0x26de96189b0 <col:30> 'int' 255
|   | |-IntegerLiteral 0x26de96189d8 <col:36> 'int' 255
|   | |-IntegerLiteral 0x26de9618a00 <col:42> 'int' 255
|   | |-IntegerLiteral 0x26de9618a28 <col:48> 'int' 255
|   | |-IntegerLiteral 0x26de9618a50 <line:79:6> 'int' 255
|   | |-IntegerLiteral 0x26de9618a78 <col:12> 'int' 255
|   | |-IntegerLiteral 0x26de9618aa0 <col:18> 'int' 255
|   | |-IntegerLiteral 0x26de9618ac8 <col:24> 'int' 255
|   | |-IntegerLiteral 0x26de9618af0 <col:30> 'int' 255
|   | |-IntegerLiteral 0x26de9618b18 <col:36> 'int' 255
|   | |-IntegerLiteral 0x26de9618b40 <col:42> 'int' 255
|   | |-IntegerLiteral 0x26de9618b68 <col:48> 'int' 255
|   | |-IntegerLiteral 0x26de9618b90 <line:80:6> 'int' 255
|   | |-IntegerLiteral 0x26de9618bb8 <col:12> 'int' 255
|   | |-IntegerLiteral 0x26de9618be0 <col:18> 'int' 255
|   | |-IntegerLiteral 0x26de9618c08 <col:24> 'int' 255
|   | |-IntegerLiteral 0x26de9618c30 <col:30> 'int' 255
|   | |-IntegerLiteral 0x26de9618c58 <col:36> 'int' 255
|   | |-IntegerLiteral 0x26de958b0b0 <col:42> 'int' 255
|   | |-IntegerLiteral 0x26de958b0d8 <col:48> 'int' 255
|   | |-IntegerLiteral 0x26de958b100 <line:81:6> 'int' 255
|   | |-IntegerLiteral 0x26de958b128 <col:12> 'int' 255
|   | |-IntegerLiteral 0x26de958b150 <col:18> 'int' 255
|   | |-IntegerLiteral 0x26de958b178 <col:24> 'int' 255
|   | |-IntegerLiteral 0x26de958b1a0 <col:30> 'int' 255
|   | |-IntegerLiteral 0x26de958b1c8 <col:36> 'int' 255
|   | |-IntegerLiteral 0x26de958b1f0 <col:42> 'int' 255
|   | |-IntegerLiteral 0x26de958b218 <col:48> 'int' 255
|   | |-IntegerLiteral 0x26de958b240 <line:82:6> 'int' 255
|   | |-IntegerLiteral 0x26de958b268 <col:12> 'int' 255
|   | |-IntegerLiteral 0x26de958b290 <col:18> 'int' 255
|   | |-IntegerLiteral 0x26de958b2b8 <col:24> 'int' 255
|   | |-IntegerLiteral 0x26de958b2e0 <col:30> 'int' 255
|   | |-IntegerLiteral 0x26de958b308 <col:36> 'int' 255
|   | |-IntegerLiteral 0x26de958b330 <col:42> 'int' 255
|   | |-IntegerLiteral 0x26de958b358 <col:48> 'int' 255
|   | |-IntegerLiteral 0x26de958b380 <line:83:6> 'int' 255
|   | |-IntegerLiteral 0x26de958b3a8 <col:12> 'int' 255
|   | |-IntegerLiteral 0x26de958b3d0 <col:18> 'int' 255
|   | |-IntegerLiteral 0x26de958b3f8 <col:24> 'int' 255
|   | |-IntegerLiteral 0x26de958b420 <col:30> 'int' 255
|   | |-IntegerLiteral 0x26de958b448 <col:36> 'int' 255
|   | |-IntegerLiteral 0x26de958b470 <col:42> 'int' 255
|   | |-IntegerLiteral 0x26de958b498 <col:48> 'int' 255
|   | |-IntegerLiteral 0x26de958b4c0 <line:84:6> 'int' 255
|   | `-IntegerLiteral 0x26de958b4e8 <col:12> 'int' 252
|   |-InitListExpr 0x26de958e3a0 <line:85:5, line:93:16> 'const felem_bytearray':'u8 const[66]'
|   | |-IntegerLiteral 0x26de958b760 <line:85:6> 'int' 0
|   | |-IntegerLiteral 0x26de958b788 <col:12> 'int' 81
|   | |-IntegerLiteral 0x26de958b7b0 <col:18> 'int' 149
|   | |-IntegerLiteral 0x26de958b7d8 <col:24> 'int' 62
|   | |-IntegerLiteral 0x26de958b800 <col:30> 'int' 185
|   | |-IntegerLiteral 0x26de958b828 <col:36> 'int' 97
|   | |-IntegerLiteral 0x26de958b850 <col:42> 'int' 142
|   | |-IntegerLiteral 0x26de958b878 <col:48> 'int' 28
|   | |-IntegerLiteral 0x26de958b8a0 <line:86:6> 'int' 154
|   | |-IntegerLiteral 0x26de958b8c8 <col:12> 'int' 31
|   | |-IntegerLiteral 0x26de958b8f0 <col:18> 'int' 146
|   | |-IntegerLiteral 0x26de958b918 <col:24> 'int' 154
|   | |-IntegerLiteral 0x26de958b940 <col:30> 'int' 33
|   | |-IntegerLiteral 0x26de958b968 <col:36> 'int' 160
|   | |-IntegerLiteral 0x26de958b990 <col:42> 'int' 182
|   | |-IntegerLiteral 0x26de958b9b8 <col:48> 'int' 133
|   | |-IntegerLiteral 0x26de958b9e0 <line:87:6> 'int' 64
|   | |-IntegerLiteral 0x26de958ba08 <col:12> 'int' 238
|   | |-IntegerLiteral 0x26de958ba30 <col:18> 'int' 162
|   | |-IntegerLiteral 0x26de958ba58 <col:24> 'int' 218
|   | |-IntegerLiteral 0x26de958ba80 <col:30> 'int' 114
|   | |-IntegerLiteral 0x26de958baa8 <col:36> 'int' 91
|   | |-IntegerLiteral 0x26de958bad0 <col:42> 'int' 153
|   | |-IntegerLiteral 0x26de958baf8 <col:48> 'int' 179
|   | |-IntegerLiteral 0x26de958bb20 <line:88:6> 'int' 21
|   | |-IntegerLiteral 0x26de958bb48 <col:12> 'int' 243
|   | |-IntegerLiteral 0x26de958bb70 <col:18> 'int' 184
|   | |-IntegerLiteral 0x26de958bb98 <col:24> 'int' 180
|   | |-IntegerLiteral 0x26de958bbc0 <col:30> 'int' 137
|   | |-IntegerLiteral 0x26de958bbe8 <col:36> 'int' 145
|   | |-IntegerLiteral 0x26de958bc10 <col:42> 'int' 142
|   | |-IntegerLiteral 0x26de958bc38 <col:48> 'int' 241
|   | |-IntegerLiteral 0x26de958bc60 <line:89:6> 'int' 9
|   | |-IntegerLiteral 0x26de958bc88 <col:12> 'int' 225
|   | |-IntegerLiteral 0x26de958bcb0 <col:18> 'int' 86
|   | |-IntegerLiteral 0x26de958bcd8 <col:24> 'int' 25
|   | |-IntegerLiteral 0x26de958bd00 <col:30> 'int' 57
|   | |-IntegerLiteral 0x26de958bd28 <col:36> 'int' 81
|   | |-IntegerLiteral 0x26de958bd50 <col:42> 'int' 236
|   | |-IntegerLiteral 0x26de958bd78 <col:48> 'int' 126
|   | |-IntegerLiteral 0x26de958bda0 <line:90:6> 'int' 147
|   | |-IntegerLiteral 0x26de958bdc8 <col:12> 'int' 123
|   | |-IntegerLiteral 0x26de958bdf0 <col:18> 'int' 22
|   | |-IntegerLiteral 0x26de958be18 <col:24> 'int' 82
|   | |-IntegerLiteral 0x26de958be40 <col:30> 'int' 192
|   | |-IntegerLiteral 0x26de958be68 <col:36> 'int' 189
|   | |-IntegerLiteral 0x26de958be90 <col:42> 'int' 59
|   | |-IntegerLiteral 0x26de958beb8 <col:48> 'int' 177
|   | |-IntegerLiteral 0x26de958bee0 <line:91:6> 'int' 191
|   | |-IntegerLiteral 0x26de958bf08 <col:12> 'int' 7
|   | |-IntegerLiteral 0x26de958bf30 <col:18> 'int' 53
|   | |-IntegerLiteral 0x26de958bf58 <col:24> 'int' 115
|   | |-IntegerLiteral 0x26de958bf80 <col:30> 'int' 223
|   | |-IntegerLiteral 0x26de958bfa8 <col:36> 'int' 136
|   | |-IntegerLiteral 0x26de958bfd0 <col:42> 'int' 61
|   | |-IntegerLiteral 0x26de958bff8 <col:48> 'int' 44
|   | |-IntegerLiteral 0x26de958c020 <line:92:6> 'int' 52
|   | |-IntegerLiteral 0x26de958c048 <col:12> 'int' 241
|   | |-IntegerLiteral 0x26de958c070 <col:18> 'int' 239
|   | |-IntegerLiteral 0x26de958c098 <col:24> 'int' 69
|   | |-IntegerLiteral 0x26de958c0c0 <col:30> 'int' 31
|   | |-IntegerLiteral 0x26de958c0e8 <col:36> 'int' 212
|   | |-IntegerLiteral 0x26de958c110 <col:42> 'int' 107
|   | |-IntegerLiteral 0x26de958c138 <col:48> 'int' 80
|   | |-IntegerLiteral 0x26de958c160 <line:93:6> 'int' 63
|   | `-IntegerLiteral 0x26de958c188 <col:12> 'int' 0
|   |-InitListExpr 0x26de958e600 <line:94:5, line:102:16> 'const felem_bytearray':'u8 const[66]'
|   | |-IntegerLiteral 0x26de958c400 <line:94:6> 'int' 0
|   | |-IntegerLiteral 0x26de958c428 <col:12> 'int' 198
|   | |-IntegerLiteral 0x26de958c450 <col:18> 'int' 133
|   | |-IntegerLiteral 0x26de958c478 <col:24> 'int' 142
|   | |-IntegerLiteral 0x26de958c4a0 <col:30> 'int' 6
|   | |-IntegerLiteral 0x26de958c4c8 <col:36> 'int' 183
|   | |-IntegerLiteral 0x26de958c4f0 <col:42> 'int' 4
|   | |-IntegerLiteral 0x26de958c518 <col:48> 'int' 4
|   | |-IntegerLiteral 0x26de958c540 <line:95:6> 'int' 233
|   | |-IntegerLiteral 0x26de958c568 <col:12> 'int' 205
|   | |-IntegerLiteral 0x26de958c590 <col:18> 'int' 158
|   | |-IntegerLiteral 0x26de958c5b8 <col:24> 'int' 62
|   | |-IntegerLiteral 0x26de958c5e0 <col:30> 'int' 203
|   | |-IntegerLiteral 0x26de958c608 <col:36> 'int' 102
|   | |-IntegerLiteral 0x26de958c630 <col:42> 'int' 35
|   | |-IntegerLiteral 0x26de958c658 <col:48> 'int' 149
|   | |-IntegerLiteral 0x26de958c680 <line:96:6> 'int' 180
|   | |-IntegerLiteral 0x26de958c6a8 <col:12> 'int' 66
|   | |-IntegerLiteral 0x26de958c6d0 <col:18> 'int' 156
|   | |-IntegerLiteral 0x26de958c6f8 <col:24> 'int' 100
|   | |-IntegerLiteral 0x26de958c720 <col:30> 'int' 129
|   | |-IntegerLiteral 0x26de958c748 <col:36> 'int' 57
|   | |-IntegerLiteral 0x26de958c770 <col:42> 'int' 5
|   | |-IntegerLiteral 0x26de958c798 <col:48> 'int' 63
|   | |-IntegerLiteral 0x26de958c7c0 <line:97:6> 'int' 181
|   | |-IntegerLiteral 0x26de958c7e8 <col:12> 'int' 33
|   | |-IntegerLiteral 0x26de958c810 <col:18> 'int' 248
|   | |-IntegerLiteral 0x26de958c838 <col:24> 'int' 40
|   | |-IntegerLiteral 0x26de958c860 <col:30> 'int' 175
|   | |-IntegerLiteral 0x26de958c888 <col:36> 'int' 96
|   | |-IntegerLiteral 0x26de958c8b0 <col:42> 'int' 107
|   | |-IntegerLiteral 0x26de958c8d8 <col:48> 'int' 77
|   | |-IntegerLiteral 0x26de958c900 <line:98:6> 'int' 61
|   | |-IntegerLiteral 0x26de958c928 <col:12> 'int' 186
|   | |-IntegerLiteral 0x26de958c950 <col:18> 'int' 161
|   | |-IntegerLiteral 0x26de958c978 <col:24> 'int' 75
|   | |-IntegerLiteral 0x26de958c9a0 <col:30> 'int' 94
|   | |-IntegerLiteral 0x26de958c9c8 <col:36> 'int' 119
|   | |-IntegerLiteral 0x26de958c9f0 <col:42> 'int' 239
|   | |-IntegerLiteral 0x26de958ca18 <col:48> 'int' 231
|   | |-IntegerLiteral 0x26de958ca40 <line:99:6> 'int' 89
|   | |-IntegerLiteral 0x26de958ca68 <col:12> 'int' 40
|   | |-IntegerLiteral 0x26de958ca90 <col:18> 'int' 254
|   | |-IntegerLiteral 0x26de958cab8 <col:24> 'int' 29
|   | |-IntegerLiteral 0x26de958cae0 <col:30> 'int' 193
|   | |-IntegerLiteral 0x26de958cb08 <col:36> 'int' 39
|   | |-IntegerLiteral 0x26de958cb30 <col:42> 'int' 162
|   | |-IntegerLiteral 0x26de958cb58 <col:48> 'int' 255
|   | |-IntegerLiteral 0x26de958cb80 <line:100:6> 'int' 168
|   | |-IntegerLiteral 0x26de958cba8 <col:12> 'int' 222
|   | |-IntegerLiteral 0x26de958cbd0 <col:18> 'int' 51
|   | |-IntegerLiteral 0x26de958cbf8 <col:24> 'int' 72
|   | |-IntegerLiteral 0x26de958cc20 <col:30> 'int' 179
|   | |-IntegerLiteral 0x26de958cc48 <col:36> 'int' 193
|   | |-IntegerLiteral 0x26de958cc70 <col:42> 'int' 133
|   | |-IntegerLiteral 0x26de958cc98 <col:48> 'int' 106
|   | |-IntegerLiteral 0x26de958ccc0 <line:101:6> 'int' 66
|   | |-IntegerLiteral 0x26de958cce8 <col:12> 'int' 155
|   | |-IntegerLiteral 0x26de958cd10 <col:18> 'int' 249
|   | |-IntegerLiteral 0x26de958cd38 <col:24> 'int' 126
|   | |-IntegerLiteral 0x26de958cd60 <col:30> 'int' 126
|   | |-IntegerLiteral 0x26de958cd88 <col:36> 'int' 49
|   | |-IntegerLiteral 0x26de958cdb0 <col:42> 'int' 194
|   | |-IntegerLiteral 0x26de958cdd8 <col:48> 'int' 229
|   | |-IntegerLiteral 0x26de958ce00 <line:102:6> 'int' 189
|   | `-IntegerLiteral 0x26de958ce28 <col:12> 'int' 102
|   `-InitListExpr 0x26de958e860 <line:103:5, line:111:16> 'const felem_bytearray':'u8 const[66]'
|     |-IntegerLiteral 0x26de958d0c0 <line:103:6> 'int' 1
|     |-IntegerLiteral 0x26de958d0e8 <col:12> 'int' 24
|     |-IntegerLiteral 0x26de958d110 <col:18> 'int' 57
|     |-IntegerLiteral 0x26de958d138 <col:24> 'int' 41
|     |-IntegerLiteral 0x26de958d160 <col:30> 'int' 106
|     |-IntegerLiteral 0x26de958d188 <col:36> 'int' 120
|     |-IntegerLiteral 0x26de958d1b0 <col:42> 'int' 154
|     |-IntegerLiteral 0x26de958d1d8 <col:48> 'int' 59
|     |-IntegerLiteral 0x26de958d200 <line:104:6> 'int' 192
|     |-IntegerLiteral 0x26de958d228 <col:12> 'int' 4
|     |-IntegerLiteral 0x26de958d250 <col:18> 'int' 92
|     |-IntegerLiteral 0x26de958d278 <col:24> 'int' 138
|     |-IntegerLiteral 0x26de958d2a0 <col:30> 'int' 95
|     |-IntegerLiteral 0x26de958d2c8 <col:36> 'int' 180
|     |-IntegerLiteral 0x26de958d2f0 <col:42> 'int' 44
|     |-IntegerLiteral 0x26de958d318 <col:48> 'int' 125
|     |-IntegerLiteral 0x26de958d340 <line:105:6> 'int' 27
|     |-IntegerLiteral 0x26de958d368 <col:12> 'int' 217
|     |-IntegerLiteral 0x26de958d390 <col:18> 'int' 152
|     |-IntegerLiteral 0x26de958d3b8 <col:24> 'int' 245
|     |-IntegerLiteral 0x26de958d3e0 <col:30> 'int' 68
|     |-IntegerLiteral 0x26de958d408 <col:36> 'int' 73
|     |-IntegerLiteral 0x26de958d430 <col:42> 'int' 87
|     |-IntegerLiteral 0x26de958d458 <col:48> 'int' 155
|     |-IntegerLiteral 0x26de958d480 <line:106:6> 'int' 68
|     |-IntegerLiteral 0x26de958d4a8 <col:12> 'int' 104
|     |-IntegerLiteral 0x26de958d4d0 <col:18> 'int' 23
|     |-IntegerLiteral 0x26de958d4f8 <col:24> 'int' 175
|     |-IntegerLiteral 0x26de958d520 <col:30> 'int' 189
|     |-IntegerLiteral 0x26de958d548 <col:36> 'int' 23
|     |-IntegerLiteral 0x26de958d570 <col:42> 'int' 39
|     |-IntegerLiteral 0x26de958d598 <col:48> 'int' 62
|     |-IntegerLiteral 0x26de958d5c0 <line:107:6> 'int' 102
|     |-IntegerLiteral 0x26de958d5e8 <col:12> 'int' 44
|     |-IntegerLiteral 0x26de958d610 <col:18> 'int' 151
|     |-IntegerLiteral 0x26de958d638 <col:24> 'int' 238
|     |-IntegerLiteral 0x26de958d660 <col:30> 'int' 114
|     |-IntegerLiteral 0x26de958d688 <col:36> 'int' 153
|     |-IntegerLiteral 0x26de958d6b0 <col:42> 'int' 94
|     |-IntegerLiteral 0x26de958d6d8 <col:48> 'int' 244
|     |-IntegerLiteral 0x26de958d700 <line:108:6> 'int' 38
|     |-IntegerLiteral 0x26de958d728 <col:12> 'int' 64
|     |-IntegerLiteral 0x26de958d750 <col:18> 'int' 197
|     |-IntegerLiteral 0x26de958d778 <col:24> 'int' 80
|     |-IntegerLiteral 0x26de958d7a0 <col:30> 'int' 185
|     |-IntegerLiteral 0x26de958d7c8 <col:36> 'int' 1
|     |-IntegerLiteral 0x26de958d7f0 <col:42> 'int' 63
|     |-IntegerLiteral 0x26de958d818 <col:48> 'int' 173
|     |-IntegerLiteral 0x26de958d840 <line:109:6> 'int' 7
|     |-IntegerLiteral 0x26de958d868 <col:12> 'int' 97
|     |-IntegerLiteral 0x26de958d890 <col:18> 'int' 53
|     |-IntegerLiteral 0x26de958d8b8 <col:24> 'int' 60
|     |-IntegerLiteral 0x26de958d8e0 <col:30> 'int' 112
|     |-IntegerLiteral 0x26de958d908 <col:36> 'int' 134
|     |-IntegerLiteral 0x26de958d930 <col:42> 'int' 162
|     |-IntegerLiteral 0x26de958d958 <col:48> 'int' 114
|     |-IntegerLiteral 0x26de958d980 <line:110:6> 'int' 194
|     |-IntegerLiteral 0x26de958d9a8 <col:12> 'int' 64
|     |-IntegerLiteral 0x26de958d9d0 <col:18> 'int' 136
|     |-IntegerLiteral 0x26de958d9f8 <col:24> 'int' 190
|     |-IntegerLiteral 0x26de958da20 <col:30> 'int' 148
|     |-IntegerLiteral 0x26de958da48 <col:36> 'int' 118
|     |-IntegerLiteral 0x26de958da70 <col:42> 'int' 159
|     |-IntegerLiteral 0x26de958da98 <col:48> 'int' 209
|     |-IntegerLiteral 0x26de958dac0 <line:111:6> 'int' 102
|     `-IntegerLiteral 0x26de958dae8 <col:12> 'int' 80
|-TypedefDecl 0x26de958eac8 <line:130:1, col:18> col:18 referenced invalid limb 'int'
| `-BuiltinType 0x26de92ecf90 'int'
|-TypedefDecl 0x26de958ec18 <line:131:1, col:26> col:14 referenced felem 'limb [9]'
| `-ConstantArrayType 0x26de958ebc0 'limb [9]' 9 
|   `-TypedefType 0x26de958eb20 'limb' sugar
|     |-Typedef 0x26de958eac8 'limb'
|     `-BuiltinType 0x26de92ecf90 'int'
|-TypedefDecl 0x26de958ecd8 <line:132:1, <invalid sloc>> col:19 referenced invalid largefelem 'int [9]'
| `-ConstantArrayType 0x26de958eb80 'int [9]' 9 
|   `-BuiltinType 0x26de92ecf90 'int'
|-VarDecl 0x26de958ed40 <line:134:1, col:34> col:19 used bottom57bits 'const limb':'const int' static cinit
| `-ImplicitCastExpr 0x26de958ede8 <col:34> 'limb':'int' <IntegralCast>
|   `-IntegerLiteral 0x26de958eda8 <col:34> 'long long' 144115188075855871
|-VarDecl 0x26de958ee10 <line:135:1, col:34> col:19 used bottom58bits 'const limb':'const int' static cinit
| `-ImplicitCastExpr 0x26de958eeb8 <col:34> 'limb':'int' <IntegralCast>
|   `-IntegerLiteral 0x26de958ee78 <col:34> 'long long' 288230376151711743
|-FunctionDecl 0x26de958f1d8 <line:141:1, line:152:1> line:141:13 used bin66_to_felem 'void (limb *, const u8 *)' static
| |-ParmVarDecl 0x26de958ef60 <col:28, col:34> col:34 used out 'limb *':'limb *'
| |-ParmVarDecl 0x26de958f0d0 <col:39, col:53> col:48 used in 'const u8 *':'const u8 *'
| `-CompoundStmt 0x26de95908d8 <line:142:1, line:152:1>
|   |-BinaryOperator 0x26de958f4b8 <line:143:5, col:38> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x26de958f300 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de958f2e8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de958f2a0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de958ef60 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de958f2c0 <col:9> 'int' 0
|   | `-BinaryOperator 0x26de958f498 <col:14, col:38> 'int' '&'
|   |   |-ImplicitCastExpr 0x26de958f468 <col:14, col:34> 'limb':'int' <LValueToRValue>
|   |   | `-ParenExpr 0x26de958f428 <col:14, col:34> 'limb':'int' lvalue
|   |   |   `-UnaryOperator 0x26de958f410 <col:15, col:33> 'limb':'int' lvalue prefix '*' cannot overflow
|   |   |     `-ParenExpr 0x26de958f3f0 <col:16, col:33> 'limb *'
|   |   |       `-CStyleCastExpr 0x26de958f3c8 <col:17, col:32> 'limb *' <NoOp>
|   |   |         `-UnaryOperator 0x26de958f3a0 <col:26, col:32> 'const u8 *' prefix '&' cannot overflow
|   |   |           `-ArraySubscriptExpr 0x26de958f380 <col:28, col:32> 'const u8':'const int' lvalue
|   |   |             |-ImplicitCastExpr 0x26de958f368 <col:28> 'const u8 *':'const u8 *' <LValueToRValue>
|   |   |             | `-DeclRefExpr 0x26de958f320 <col:28> 'const u8 *':'const u8 *' lvalue ParmVar 0x26de958f0d0 'in' 'const u8 *':'const u8 *'
|   |   |             `-IntegerLiteral 0x26de958f340 <col:31> 'int' 0
|   |   `-ImplicitCastExpr 0x26de958f480 <col:38> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x26de958f448 <col:38> 'const limb':'const int' lvalue Var 0x26de958ee10 'bottom58bits' 'const limb':'const int'
|   |-BinaryOperator 0x26de958f780 <line:144:5, col:43> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x26de958f580 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de958f568 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de958f520 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de958ef60 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de958f540 <col:9> 'int' 1
|   | `-BinaryOperator 0x26de958f760 <col:14, col:43> 'int' '&'
|   |   |-ParenExpr 0x26de958f708 <col:14, col:39> 'limb':'int'
|   |   | `-BinaryOperator 0x26de958f6e8 <col:15, col:38> 'limb':'int' '>>'
|   |   |   |-ImplicitCastExpr 0x26de958f6d0 <col:15, col:33> 'limb':'int' <LValueToRValue>
|   |   |   | `-UnaryOperator 0x26de958f690 <col:15, col:33> 'limb':'int' lvalue prefix '*' cannot overflow
|   |   |   |   `-ParenExpr 0x26de958f670 <col:16, col:33> 'limb *'
|   |   |   |     `-CStyleCastExpr 0x26de958f648 <col:17, col:32> 'limb *' <NoOp>
|   |   |   |       `-UnaryOperator 0x26de958f620 <col:26, col:32> 'const u8 *' prefix '&' cannot overflow
|   |   |   |         `-ArraySubscriptExpr 0x26de958f600 <col:28, col:32> 'const u8':'const int' lvalue
|   |   |   |           |-ImplicitCastExpr 0x26de958f5e8 <col:28> 'const u8 *':'const u8 *' <LValueToRValue>
|   |   |   |           | `-DeclRefExpr 0x26de958f5a0 <col:28> 'const u8 *':'const u8 *' lvalue ParmVar 0x26de958f0d0 'in' 'const u8 *':'const u8 *'
|   |   |   |           `-IntegerLiteral 0x26de958f5c0 <col:31> 'int' 7
|   |   |   `-IntegerLiteral 0x26de958f6a8 <col:38> 'int' 2
|   |   `-ImplicitCastExpr 0x26de958f748 <col:43> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x26de958f728 <col:43> 'const limb':'const int' lvalue Var 0x26de958ee10 'bottom58bits' 'const limb':'const int'
|   |-BinaryOperator 0x26de958fa00 <line:145:5, col:44> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x26de958f800 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de958f7e8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de958f7a0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de958ef60 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de958f7c0 <col:9> 'int' 2
|   | `-BinaryOperator 0x26de958f9e0 <col:14, col:44> 'int' '&'
|   |   |-ParenExpr 0x26de958f988 <col:14, col:40> 'limb':'int'
|   |   | `-BinaryOperator 0x26de958f968 <col:15, col:39> 'limb':'int' '>>'
|   |   |   |-ImplicitCastExpr 0x26de958f950 <col:15, col:34> 'limb':'int' <LValueToRValue>
|   |   |   | `-UnaryOperator 0x26de958f910 <col:15, col:34> 'limb':'int' lvalue prefix '*' cannot overflow
|   |   |   |   `-ParenExpr 0x26de958f8f0 <col:16, col:34> 'limb *'
|   |   |   |     `-CStyleCastExpr 0x26de958f8c8 <col:17, col:33> 'limb *' <NoOp>
|   |   |   |       `-UnaryOperator 0x26de958f8a0 <col:26, col:33> 'const u8 *' prefix '&' cannot overflow
|   |   |   |         `-ArraySubscriptExpr 0x26de958f880 <col:28, col:33> 'const u8':'const int' lvalue
|   |   |   |           |-ImplicitCastExpr 0x26de958f868 <col:28> 'const u8 *':'const u8 *' <LValueToRValue>
|   |   |   |           | `-DeclRefExpr 0x26de958f820 <col:28> 'const u8 *':'const u8 *' lvalue ParmVar 0x26de958f0d0 'in' 'const u8 *':'const u8 *'
|   |   |   |           `-IntegerLiteral 0x26de958f840 <col:31> 'int' 14
|   |   |   `-IntegerLiteral 0x26de958f928 <col:39> 'int' 4
|   |   `-ImplicitCastExpr 0x26de958f9c8 <col:44> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x26de958f9a8 <col:44> 'const limb':'const int' lvalue Var 0x26de958ee10 'bottom58bits' 'const limb':'const int'
|   |-BinaryOperator 0x26de958fc80 <line:146:5, col:44> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x26de958fa80 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de958fa68 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de958fa20 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de958ef60 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de958fa40 <col:9> 'int' 3
|   | `-BinaryOperator 0x26de958fc60 <col:14, col:44> 'int' '&'
|   |   |-ParenExpr 0x26de958fc08 <col:14, col:40> 'limb':'int'
|   |   | `-BinaryOperator 0x26de958fbe8 <col:15, col:39> 'limb':'int' '>>'
|   |   |   |-ImplicitCastExpr 0x26de958fbd0 <col:15, col:34> 'limb':'int' <LValueToRValue>
|   |   |   | `-UnaryOperator 0x26de958fb90 <col:15, col:34> 'limb':'int' lvalue prefix '*' cannot overflow
|   |   |   |   `-ParenExpr 0x26de958fb70 <col:16, col:34> 'limb *'
|   |   |   |     `-CStyleCastExpr 0x26de958fb48 <col:17, col:33> 'limb *' <NoOp>
|   |   |   |       `-UnaryOperator 0x26de958fb20 <col:26, col:33> 'const u8 *' prefix '&' cannot overflow
|   |   |   |         `-ArraySubscriptExpr 0x26de958fb00 <col:28, col:33> 'const u8':'const int' lvalue
|   |   |   |           |-ImplicitCastExpr 0x26de958fae8 <col:28> 'const u8 *':'const u8 *' <LValueToRValue>
|   |   |   |           | `-DeclRefExpr 0x26de958faa0 <col:28> 'const u8 *':'const u8 *' lvalue ParmVar 0x26de958f0d0 'in' 'const u8 *':'const u8 *'
|   |   |   |           `-IntegerLiteral 0x26de958fac0 <col:31> 'int' 21
|   |   |   `-IntegerLiteral 0x26de958fba8 <col:39> 'int' 6
|   |   `-ImplicitCastExpr 0x26de958fc48 <col:44> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x26de958fc28 <col:44> 'const limb':'const int' lvalue Var 0x26de958ee10 'bottom58bits' 'const limb':'const int'
|   |-BinaryOperator 0x26de958feb8 <line:147:5, col:39> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x26de958fd00 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de958fce8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de958fca0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de958ef60 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de958fcc0 <col:9> 'int' 4
|   | `-BinaryOperator 0x26de958fe98 <col:14, col:39> 'int' '&'
|   |   |-ImplicitCastExpr 0x26de958fe68 <col:14, col:35> 'limb':'int' <LValueToRValue>
|   |   | `-ParenExpr 0x26de958fe28 <col:14, col:35> 'limb':'int' lvalue
|   |   |   `-UnaryOperator 0x26de958fe10 <col:15, col:34> 'limb':'int' lvalue prefix '*' cannot overflow
|   |   |     `-ParenExpr 0x26de958fdf0 <col:16, col:34> 'limb *'
|   |   |       `-CStyleCastExpr 0x26de958fdc8 <col:17, col:33> 'limb *' <NoOp>
|   |   |         `-UnaryOperator 0x26de958fda0 <col:26, col:33> 'const u8 *' prefix '&' cannot overflow
|   |   |           `-ArraySubscriptExpr 0x26de958fd80 <col:28, col:33> 'const u8':'const int' lvalue
|   |   |             |-ImplicitCastExpr 0x26de958fd68 <col:28> 'const u8 *':'const u8 *' <LValueToRValue>
|   |   |             | `-DeclRefExpr 0x26de958fd20 <col:28> 'const u8 *':'const u8 *' lvalue ParmVar 0x26de958f0d0 'in' 'const u8 *':'const u8 *'
|   |   |             `-IntegerLiteral 0x26de958fd40 <col:31> 'int' 29
|   |   `-ImplicitCastExpr 0x26de958fe80 <col:39> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x26de958fe48 <col:39> 'const limb':'const int' lvalue Var 0x26de958ee10 'bottom58bits' 'const limb':'const int'
|   |-BinaryOperator 0x26de9590138 <line:148:5, col:44> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x26de958ff38 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de958ff20 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de958fed8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de958ef60 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de958fef8 <col:9> 'int' 5
|   | `-BinaryOperator 0x26de9590118 <col:14, col:44> 'int' '&'
|   |   |-ParenExpr 0x26de95900c0 <col:14, col:40> 'limb':'int'
|   |   | `-BinaryOperator 0x26de95900a0 <col:15, col:39> 'limb':'int' '>>'
|   |   |   |-ImplicitCastExpr 0x26de9590088 <col:15, col:34> 'limb':'int' <LValueToRValue>
|   |   |   | `-UnaryOperator 0x26de9590048 <col:15, col:34> 'limb':'int' lvalue prefix '*' cannot overflow
|   |   |   |   `-ParenExpr 0x26de9590028 <col:16, col:34> 'limb *'
|   |   |   |     `-CStyleCastExpr 0x26de9590000 <col:17, col:33> 'limb *' <NoOp>
|   |   |   |       `-UnaryOperator 0x26de958ffd8 <col:26, col:33> 'const u8 *' prefix '&' cannot overflow
|   |   |   |         `-ArraySubscriptExpr 0x26de958ffb8 <col:28, col:33> 'const u8':'const int' lvalue
|   |   |   |           |-ImplicitCastExpr 0x26de958ffa0 <col:28> 'const u8 *':'const u8 *' <LValueToRValue>
|   |   |   |           | `-DeclRefExpr 0x26de958ff58 <col:28> 'const u8 *':'const u8 *' lvalue ParmVar 0x26de958f0d0 'in' 'const u8 *':'const u8 *'
|   |   |   |           `-IntegerLiteral 0x26de958ff78 <col:31> 'int' 36
|   |   |   `-IntegerLiteral 0x26de9590060 <col:39> 'int' 2
|   |   `-ImplicitCastExpr 0x26de9590100 <col:44> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x26de95900e0 <col:44> 'const limb':'const int' lvalue Var 0x26de958ee10 'bottom58bits' 'const limb':'const int'
|   |-BinaryOperator 0x26de95903b8 <line:149:5, col:44> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x26de95901b8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de95901a0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de9590158 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de958ef60 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de9590178 <col:9> 'int' 6
|   | `-BinaryOperator 0x26de9590398 <col:14, col:44> 'int' '&'
|   |   |-ParenExpr 0x26de9590340 <col:14, col:40> 'limb':'int'
|   |   | `-BinaryOperator 0x26de9590320 <col:15, col:39> 'limb':'int' '>>'
|   |   |   |-ImplicitCastExpr 0x26de9590308 <col:15, col:34> 'limb':'int' <LValueToRValue>
|   |   |   | `-UnaryOperator 0x26de95902c8 <col:15, col:34> 'limb':'int' lvalue prefix '*' cannot overflow
|   |   |   |   `-ParenExpr 0x26de95902a8 <col:16, col:34> 'limb *'
|   |   |   |     `-CStyleCastExpr 0x26de9590280 <col:17, col:33> 'limb *' <NoOp>
|   |   |   |       `-UnaryOperator 0x26de9590258 <col:26, col:33> 'const u8 *' prefix '&' cannot overflow
|   |   |   |         `-ArraySubscriptExpr 0x26de9590238 <col:28, col:33> 'const u8':'const int' lvalue
|   |   |   |           |-ImplicitCastExpr 0x26de9590220 <col:28> 'const u8 *':'const u8 *' <LValueToRValue>
|   |   |   |           | `-DeclRefExpr 0x26de95901d8 <col:28> 'const u8 *':'const u8 *' lvalue ParmVar 0x26de958f0d0 'in' 'const u8 *':'const u8 *'
|   |   |   |           `-IntegerLiteral 0x26de95901f8 <col:31> 'int' 43
|   |   |   `-IntegerLiteral 0x26de95902e0 <col:39> 'int' 4
|   |   `-ImplicitCastExpr 0x26de9590380 <col:44> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x26de9590360 <col:44> 'const limb':'const int' lvalue Var 0x26de958ee10 'bottom58bits' 'const limb':'const int'
|   |-BinaryOperator 0x26de9590638 <line:150:5, col:44> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x26de9590438 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de9590420 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de95903d8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de958ef60 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de95903f8 <col:9> 'int' 7
|   | `-BinaryOperator 0x26de9590618 <col:14, col:44> 'int' '&'
|   |   |-ParenExpr 0x26de95905c0 <col:14, col:40> 'limb':'int'
|   |   | `-BinaryOperator 0x26de95905a0 <col:15, col:39> 'limb':'int' '>>'
|   |   |   |-ImplicitCastExpr 0x26de9590588 <col:15, col:34> 'limb':'int' <LValueToRValue>
|   |   |   | `-UnaryOperator 0x26de9590548 <col:15, col:34> 'limb':'int' lvalue prefix '*' cannot overflow
|   |   |   |   `-ParenExpr 0x26de9590528 <col:16, col:34> 'limb *'
|   |   |   |     `-CStyleCastExpr 0x26de9590500 <col:17, col:33> 'limb *' <NoOp>
|   |   |   |       `-UnaryOperator 0x26de95904d8 <col:26, col:33> 'const u8 *' prefix '&' cannot overflow
|   |   |   |         `-ArraySubscriptExpr 0x26de95904b8 <col:28, col:33> 'const u8':'const int' lvalue
|   |   |   |           |-ImplicitCastExpr 0x26de95904a0 <col:28> 'const u8 *':'const u8 *' <LValueToRValue>
|   |   |   |           | `-DeclRefExpr 0x26de9590458 <col:28> 'const u8 *':'const u8 *' lvalue ParmVar 0x26de958f0d0 'in' 'const u8 *':'const u8 *'
|   |   |   |           `-IntegerLiteral 0x26de9590478 <col:31> 'int' 50
|   |   |   `-IntegerLiteral 0x26de9590560 <col:39> 'int' 6
|   |   `-ImplicitCastExpr 0x26de9590600 <col:44> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x26de95905e0 <col:44> 'const limb':'const int' lvalue Var 0x26de958ee10 'bottom58bits' 'const limb':'const int'
|   `-BinaryOperator 0x26de9590870 <line:151:5, col:39> 'limb':'int' '='
|     |-ArraySubscriptExpr 0x26de95906b8 <col:5, col:10> 'limb':'int' lvalue
|     | |-ImplicitCastExpr 0x26de95906a0 <col:5> 'limb *':'limb *' <LValueToRValue>
|     | | `-DeclRefExpr 0x26de9590658 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de958ef60 'out' 'limb *':'limb *'
|     | `-IntegerLiteral 0x26de9590678 <col:9> 'int' 8
|     `-BinaryOperator 0x26de9590850 <col:14, col:39> 'int' '&'
|       |-ImplicitCastExpr 0x26de9590820 <col:14, col:35> 'limb':'int' <LValueToRValue>
|       | `-ParenExpr 0x26de95907e0 <col:14, col:35> 'limb':'int' lvalue
|       |   `-UnaryOperator 0x26de95907c8 <col:15, col:34> 'limb':'int' lvalue prefix '*' cannot overflow
|       |     `-ParenExpr 0x26de95907a8 <col:16, col:34> 'limb *'
|       |       `-CStyleCastExpr 0x26de9590780 <col:17, col:33> 'limb *' <NoOp>
|       |         `-UnaryOperator 0x26de9590758 <col:26, col:33> 'const u8 *' prefix '&' cannot overflow
|       |           `-ArraySubscriptExpr 0x26de9590738 <col:28, col:33> 'const u8':'const int' lvalue
|       |             |-ImplicitCastExpr 0x26de9590720 <col:28> 'const u8 *':'const u8 *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x26de95906d8 <col:28> 'const u8 *':'const u8 *' lvalue ParmVar 0x26de958f0d0 'in' 'const u8 *':'const u8 *'
|       |             `-IntegerLiteral 0x26de95906f8 <col:31> 'int' 58
|       `-ImplicitCastExpr 0x26de9590838 <col:39> 'limb':'int' <LValueToRValue>
|         `-DeclRefExpr 0x26de9590800 <col:39> 'const limb':'const int' lvalue Var 0x26de958ed40 'bottom57bits' 'const limb':'const int'
|-FunctionDecl 0x26de9590c18 <line:158:1, line:170:1> line:158:13 used felem_to_bin66 'void (u8 *, const limb *)' static
| |-ParmVarDecl 0x26de95909f0 <col:28, col:37> col:31 used out 'u8 *':'u8 *'
| |-ParmVarDecl 0x26de9590b10 <col:40, col:52> col:52 used in 'const limb *':'const limb *'
| `-CompoundStmt 0x26de9592158 <line:159:1, line:170:1>
|   |-CallExpr 0x26de9590dd0 <line:160:5, col:22> 'void *'
|   | |-ImplicitCastExpr 0x26de9590db8 <col:5> 'void *(*)(void *, int, unsigned long long)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de9590ce0 <col:5> 'void *(void *, int, unsigned long long)' Function 0x26de952a5c8 'memset' 'void *(void *, int, unsigned long long)'
|   | |-ImplicitCastExpr 0x26de9590e20 <col:12> 'void *' <BitCast>
|   | | `-ImplicitCastExpr 0x26de9590e08 <col:12> 'u8 *':'u8 *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x26de9590d00 <col:12> 'u8 *':'u8 *' lvalue ParmVar 0x26de95909f0 'out' 'u8 *':'u8 *'
|   | |-IntegerLiteral 0x26de9590d20 <col:17> 'int' 0
|   | `-ImplicitCastExpr 0x26de9590e38 <col:20> 'unsigned long long' <IntegralCast>
|   |   `-IntegerLiteral 0x26de9590d48 <col:20> 'int' 66
|   |-BinaryOperator 0x26de9591010 <line:161:5, col:34> 'limb':'int' '='
|   | |-ParenExpr 0x26de9590f58 <col:5, col:26> 'limb':'int' lvalue
|   | | `-UnaryOperator 0x26de9590f40 <col:6, col:25> 'limb':'int' lvalue prefix '*' cannot overflow
|   | |   `-ParenExpr 0x26de9590f20 <col:7, col:25> 'limb *'
|   | |     `-CStyleCastExpr 0x26de9590ef8 <col:8, col:24> 'limb *' <NoOp>
|   | |       `-UnaryOperator 0x26de9590ed0 <col:17, col:24> 'u8 *' prefix '&' cannot overflow
|   | |         `-ArraySubscriptExpr 0x26de9590eb0 <col:19, col:24> 'u8':'int' lvalue
|   | |           |-ImplicitCastExpr 0x26de9590e98 <col:19> 'u8 *':'u8 *' <LValueToRValue>
|   | |           | `-DeclRefExpr 0x26de9590e50 <col:19> 'u8 *':'u8 *' lvalue ParmVar 0x26de95909f0 'out' 'u8 *':'u8 *'
|   | |           `-IntegerLiteral 0x26de9590e70 <col:23> 'int' 0
|   | `-ImplicitCastExpr 0x26de9590ff8 <col:30, col:34> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x26de9590fd8 <col:30, col:34> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x26de9590fc0 <col:30> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x26de9590f78 <col:30> 'const limb *':'const limb *' lvalue ParmVar 0x26de9590b10 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x26de9590f98 <col:33> 'int' 0
|   |-CompoundAssignOperator 0x26de9591250 <line:162:5, col:40> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ParenExpr 0x26de9591150 <col:5, col:26> 'limb':'int' lvalue
|   | | `-UnaryOperator 0x26de9591138 <col:6, col:25> 'limb':'int' lvalue prefix '*' cannot overflow
|   | |   `-ParenExpr 0x26de9591118 <col:7, col:25> 'limb *'
|   | |     `-CStyleCastExpr 0x26de95910f0 <col:8, col:24> 'limb *' <NoOp>
|   | |       `-UnaryOperator 0x26de95910b0 <col:17, col:24> 'u8 *' prefix '&' cannot overflow
|   | |         `-ArraySubscriptExpr 0x26de9591090 <col:19, col:24> 'u8':'int' lvalue
|   | |           |-ImplicitCastExpr 0x26de9591078 <col:19> 'u8 *':'u8 *' <LValueToRValue>
|   | |           | `-DeclRefExpr 0x26de9591030 <col:19> 'u8 *':'u8 *' lvalue ParmVar 0x26de95909f0 'out' 'u8 *':'u8 *'
|   | |           `-IntegerLiteral 0x26de9591050 <col:23> 'int' 7
|   | `-BinaryOperator 0x26de9591230 <col:31, col:40> 'limb':'int' '<<'
|   |   |-ImplicitCastExpr 0x26de9591218 <col:31, col:35> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x26de95911d0 <col:31, col:35> 'const limb':'const int' lvalue
|   |   |   |-ImplicitCastExpr 0x26de95911b8 <col:31> 'const limb *':'const limb *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x26de9591170 <col:31> 'const limb *':'const limb *' lvalue ParmVar 0x26de9590b10 'in' 'const limb *':'const limb *'
|   |   |   `-IntegerLiteral 0x26de9591190 <col:34> 'int' 1
|   |   `-IntegerLiteral 0x26de95911f0 <col:40> 'int' 2
|   |-CompoundAssignOperator 0x26de9591488 <line:163:5, col:41> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ParenExpr 0x26de9591388 <col:5, col:27> 'limb':'int' lvalue
|   | | `-UnaryOperator 0x26de9591370 <col:6, col:26> 'limb':'int' lvalue prefix '*' cannot overflow
|   | |   `-ParenExpr 0x26de9591350 <col:7, col:26> 'limb *'
|   | |     `-CStyleCastExpr 0x26de9591328 <col:8, col:25> 'limb *' <NoOp>
|   | |       `-UnaryOperator 0x26de9591300 <col:17, col:25> 'u8 *' prefix '&' cannot overflow
|   | |         `-ArraySubscriptExpr 0x26de95912e0 <col:19, col:25> 'u8':'int' lvalue
|   | |           |-ImplicitCastExpr 0x26de95912c8 <col:19> 'u8 *':'u8 *' <LValueToRValue>
|   | |           | `-DeclRefExpr 0x26de9591280 <col:19> 'u8 *':'u8 *' lvalue ParmVar 0x26de95909f0 'out' 'u8 *':'u8 *'
|   | |           `-IntegerLiteral 0x26de95912a0 <col:23> 'int' 14
|   | `-BinaryOperator 0x26de9591468 <col:32, col:41> 'limb':'int' '<<'
|   |   |-ImplicitCastExpr 0x26de9591450 <col:32, col:36> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x26de9591408 <col:32, col:36> 'const limb':'const int' lvalue
|   |   |   |-ImplicitCastExpr 0x26de95913f0 <col:32> 'const limb *':'const limb *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x26de95913a8 <col:32> 'const limb *':'const limb *' lvalue ParmVar 0x26de9590b10 'in' 'const limb *':'const limb *'
|   |   |   `-IntegerLiteral 0x26de95913c8 <col:35> 'int' 2
|   |   `-IntegerLiteral 0x26de9591428 <col:41> 'int' 4
|   |-CompoundAssignOperator 0x26de95916c0 <line:164:5, col:41> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ParenExpr 0x26de95915c0 <col:5, col:27> 'limb':'int' lvalue
|   | | `-UnaryOperator 0x26de95915a8 <col:6, col:26> 'limb':'int' lvalue prefix '*' cannot overflow
|   | |   `-ParenExpr 0x26de9591588 <col:7, col:26> 'limb *'
|   | |     `-CStyleCastExpr 0x26de9591560 <col:8, col:25> 'limb *' <NoOp>
|   | |       `-UnaryOperator 0x26de9591538 <col:17, col:25> 'u8 *' prefix '&' cannot overflow
|   | |         `-ArraySubscriptExpr 0x26de9591518 <col:19, col:25> 'u8':'int' lvalue
|   | |           |-ImplicitCastExpr 0x26de9591500 <col:19> 'u8 *':'u8 *' <LValueToRValue>
|   | |           | `-DeclRefExpr 0x26de95914b8 <col:19> 'u8 *':'u8 *' lvalue ParmVar 0x26de95909f0 'out' 'u8 *':'u8 *'
|   | |           `-IntegerLiteral 0x26de95914d8 <col:23> 'int' 21
|   | `-BinaryOperator 0x26de95916a0 <col:32, col:41> 'limb':'int' '<<'
|   |   |-ImplicitCastExpr 0x26de9591688 <col:32, col:36> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x26de9591640 <col:32, col:36> 'const limb':'const int' lvalue
|   |   |   |-ImplicitCastExpr 0x26de9591628 <col:32> 'const limb *':'const limb *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x26de95915e0 <col:32> 'const limb *':'const limb *' lvalue ParmVar 0x26de9590b10 'in' 'const limb *':'const limb *'
|   |   |   `-IntegerLiteral 0x26de9591600 <col:35> 'int' 3
|   |   `-IntegerLiteral 0x26de9591660 <col:41> 'int' 6
|   |-BinaryOperator 0x26de95918b0 <line:165:5, col:35> 'limb':'int' '='
|   | |-ParenExpr 0x26de95917f8 <col:5, col:27> 'limb':'int' lvalue
|   | | `-UnaryOperator 0x26de95917e0 <col:6, col:26> 'limb':'int' lvalue prefix '*' cannot overflow
|   | |   `-ParenExpr 0x26de95917c0 <col:7, col:26> 'limb *'
|   | |     `-CStyleCastExpr 0x26de9591798 <col:8, col:25> 'limb *' <NoOp>
|   | |       `-UnaryOperator 0x26de9591770 <col:17, col:25> 'u8 *' prefix '&' cannot overflow
|   | |         `-ArraySubscriptExpr 0x26de9591750 <col:19, col:25> 'u8':'int' lvalue
|   | |           |-ImplicitCastExpr 0x26de9591738 <col:19> 'u8 *':'u8 *' <LValueToRValue>
|   | |           | `-DeclRefExpr 0x26de95916f0 <col:19> 'u8 *':'u8 *' lvalue ParmVar 0x26de95909f0 'out' 'u8 *':'u8 *'
|   | |           `-IntegerLiteral 0x26de9591710 <col:23> 'int' 29
|   | `-ImplicitCastExpr 0x26de9591898 <col:31, col:35> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x26de9591878 <col:31, col:35> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x26de9591860 <col:31> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x26de9591818 <col:31> 'const limb *':'const limb *' lvalue ParmVar 0x26de9590b10 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x26de9591838 <col:34> 'int' 4
|   |-CompoundAssignOperator 0x26de9591ad8 <line:166:5, col:41> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ParenExpr 0x26de95919d8 <col:5, col:27> 'limb':'int' lvalue
|   | | `-UnaryOperator 0x26de95919c0 <col:6, col:26> 'limb':'int' lvalue prefix '*' cannot overflow
|   | |   `-ParenExpr 0x26de95919a0 <col:7, col:26> 'limb *'
|   | |     `-CStyleCastExpr 0x26de9591978 <col:8, col:25> 'limb *' <NoOp>
|   | |       `-UnaryOperator 0x26de9591950 <col:17, col:25> 'u8 *' prefix '&' cannot overflow
|   | |         `-ArraySubscriptExpr 0x26de9591930 <col:19, col:25> 'u8':'int' lvalue
|   | |           |-ImplicitCastExpr 0x26de9591918 <col:19> 'u8 *':'u8 *' <LValueToRValue>
|   | |           | `-DeclRefExpr 0x26de95918d0 <col:19> 'u8 *':'u8 *' lvalue ParmVar 0x26de95909f0 'out' 'u8 *':'u8 *'
|   | |           `-IntegerLiteral 0x26de95918f0 <col:23> 'int' 36
|   | `-BinaryOperator 0x26de9591ab8 <col:32, col:41> 'limb':'int' '<<'
|   |   |-ImplicitCastExpr 0x26de9591aa0 <col:32, col:36> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x26de9591a58 <col:32, col:36> 'const limb':'const int' lvalue
|   |   |   |-ImplicitCastExpr 0x26de9591a40 <col:32> 'const limb *':'const limb *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x26de95919f8 <col:32> 'const limb *':'const limb *' lvalue ParmVar 0x26de9590b10 'in' 'const limb *':'const limb *'
|   |   |   `-IntegerLiteral 0x26de9591a18 <col:35> 'int' 5
|   |   `-IntegerLiteral 0x26de9591a78 <col:41> 'int' 2
|   |-CompoundAssignOperator 0x26de9591d10 <line:167:5, col:41> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ParenExpr 0x26de9591c10 <col:5, col:27> 'limb':'int' lvalue
|   | | `-UnaryOperator 0x26de9591bf8 <col:6, col:26> 'limb':'int' lvalue prefix '*' cannot overflow
|   | |   `-ParenExpr 0x26de9591bd8 <col:7, col:26> 'limb *'
|   | |     `-CStyleCastExpr 0x26de9591bb0 <col:8, col:25> 'limb *' <NoOp>
|   | |       `-UnaryOperator 0x26de9591b88 <col:17, col:25> 'u8 *' prefix '&' cannot overflow
|   | |         `-ArraySubscriptExpr 0x26de9591b68 <col:19, col:25> 'u8':'int' lvalue
|   | |           |-ImplicitCastExpr 0x26de9591b50 <col:19> 'u8 *':'u8 *' <LValueToRValue>
|   | |           | `-DeclRefExpr 0x26de9591b08 <col:19> 'u8 *':'u8 *' lvalue ParmVar 0x26de95909f0 'out' 'u8 *':'u8 *'
|   | |           `-IntegerLiteral 0x26de9591b28 <col:23> 'int' 43
|   | `-BinaryOperator 0x26de9591cf0 <col:32, col:41> 'limb':'int' '<<'
|   |   |-ImplicitCastExpr 0x26de9591cd8 <col:32, col:36> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x26de9591c90 <col:32, col:36> 'const limb':'const int' lvalue
|   |   |   |-ImplicitCastExpr 0x26de9591c78 <col:32> 'const limb *':'const limb *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x26de9591c30 <col:32> 'const limb *':'const limb *' lvalue ParmVar 0x26de9590b10 'in' 'const limb *':'const limb *'
|   |   |   `-IntegerLiteral 0x26de9591c50 <col:35> 'int' 6
|   |   `-IntegerLiteral 0x26de9591cb0 <col:41> 'int' 4
|   |-CompoundAssignOperator 0x26de9591f48 <line:168:5, col:41> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ParenExpr 0x26de9591e48 <col:5, col:27> 'limb':'int' lvalue
|   | | `-UnaryOperator 0x26de9591e30 <col:6, col:26> 'limb':'int' lvalue prefix '*' cannot overflow
|   | |   `-ParenExpr 0x26de9591e10 <col:7, col:26> 'limb *'
|   | |     `-CStyleCastExpr 0x26de9591de8 <col:8, col:25> 'limb *' <NoOp>
|   | |       `-UnaryOperator 0x26de9591dc0 <col:17, col:25> 'u8 *' prefix '&' cannot overflow
|   | |         `-ArraySubscriptExpr 0x26de9591da0 <col:19, col:25> 'u8':'int' lvalue
|   | |           |-ImplicitCastExpr 0x26de9591d88 <col:19> 'u8 *':'u8 *' <LValueToRValue>
|   | |           | `-DeclRefExpr 0x26de9591d40 <col:19> 'u8 *':'u8 *' lvalue ParmVar 0x26de95909f0 'out' 'u8 *':'u8 *'
|   | |           `-IntegerLiteral 0x26de9591d60 <col:23> 'int' 50
|   | `-BinaryOperator 0x26de9591f28 <col:32, col:41> 'limb':'int' '<<'
|   |   |-ImplicitCastExpr 0x26de9591f10 <col:32, col:36> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x26de9591ec8 <col:32, col:36> 'const limb':'const int' lvalue
|   |   |   |-ImplicitCastExpr 0x26de9591eb0 <col:32> 'const limb *':'const limb *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x26de9591e68 <col:32> 'const limb *':'const limb *' lvalue ParmVar 0x26de9590b10 'in' 'const limb *':'const limb *'
|   |   |   `-IntegerLiteral 0x26de9591e88 <col:35> 'int' 7
|   |   `-IntegerLiteral 0x26de9591ee8 <col:41> 'int' 6
|   `-BinaryOperator 0x26de9592138 <line:169:5, col:35> 'limb':'int' '='
|     |-ParenExpr 0x26de9592080 <col:5, col:27> 'limb':'int' lvalue
|     | `-UnaryOperator 0x26de9592068 <col:6, col:26> 'limb':'int' lvalue prefix '*' cannot overflow
|     |   `-ParenExpr 0x26de9592048 <col:7, col:26> 'limb *'
|     |     `-CStyleCastExpr 0x26de9592020 <col:8, col:25> 'limb *' <NoOp>
|     |       `-UnaryOperator 0x26de9591ff8 <col:17, col:25> 'u8 *' prefix '&' cannot overflow
|     |         `-ArraySubscriptExpr 0x26de9591fd8 <col:19, col:25> 'u8':'int' lvalue
|     |           |-ImplicitCastExpr 0x26de9591fc0 <col:19> 'u8 *':'u8 *' <LValueToRValue>
|     |           | `-DeclRefExpr 0x26de9591f78 <col:19> 'u8 *':'u8 *' lvalue ParmVar 0x26de95909f0 'out' 'u8 *':'u8 *'
|     |           `-IntegerLiteral 0x26de9591f98 <col:23> 'int' 58
|     `-ImplicitCastExpr 0x26de9592120 <col:31, col:35> 'limb':'int' <LValueToRValue>
|       `-ArraySubscriptExpr 0x26de9592100 <col:31, col:35> 'const limb':'const int' lvalue
|         |-ImplicitCastExpr 0x26de95920e8 <col:31> 'const limb *':'const limb *' <LValueToRValue>
|         | `-DeclRefExpr 0x26de95920a0 <col:31> 'const limb *':'const limb *' lvalue ParmVar 0x26de9590b10 'in' 'const limb *':'const limb *'
|         `-IntegerLiteral 0x26de95920c0 <col:34> 'int' 8
|-FunctionDecl 0x26de9592428 <line:173:1, line:178:1> line:173:13 used flip_endian 'void (u8 *, const u8 *, unsigned int)' static
| |-ParmVarDecl 0x26de95921c8 <col:25, col:29> col:29 used out 'u8 *'
| |-ParmVarDecl 0x26de9592240 <col:34, col:44> col:44 used in 'const u8 *'
| |-ParmVarDecl 0x26de95922c0 <col:48, col:57> col:57 used len 'unsigned int'
| `-CompoundStmt 0x26de9592938 <line:174:1, line:178:1>
|   |-DeclStmt 0x26de9592578 <line:175:5, col:15>
|   | `-VarDecl 0x26de9592510 <col:5, col:14> col:14 used i 'unsigned int'
|   `-ForStmt 0x26de9592900 <line:176:5, line:177:32>
|     |-BinaryOperator 0x26de9592608 <line:176:10, col:14> 'unsigned int' '='
|     | |-DeclRefExpr 0x26de9592590 <col:10> 'unsigned int' lvalue Var 0x26de9592510 'i' 'unsigned int'
|     | `-ImplicitCastExpr 0x26de95925f0 <col:14> 'unsigned int' <IntegralCast>
|     |   `-IntegerLiteral 0x26de95925c8 <col:14> 'int' 0
|     |-<<<NULL>>>
|     |-BinaryOperator 0x26de9592698 <col:17, col:21> 'int' '<'
|     | |-ImplicitCastExpr 0x26de9592668 <col:17> 'unsigned int' <LValueToRValue>
|     | | `-DeclRefExpr 0x26de9592628 <col:17> 'unsigned int' lvalue Var 0x26de9592510 'i' 'unsigned int'
|     | `-ImplicitCastExpr 0x26de9592680 <col:21> 'unsigned int' <LValueToRValue>
|     |   `-DeclRefExpr 0x26de9592648 <col:21> 'unsigned int' lvalue ParmVar 0x26de95922c0 'len' 'unsigned int'
|     |-UnaryOperator 0x26de95926d8 <col:26, col:28> 'unsigned int' prefix '++'
|     | `-DeclRefExpr 0x26de95926b8 <col:28> 'unsigned int' lvalue Var 0x26de9592510 'i' 'unsigned int'
|     `-BinaryOperator 0x26de95928e0 <line:177:9, col:32> 'u8':'int' '='
|       |-ArraySubscriptExpr 0x26de9592760 <col:9, col:14> 'u8':'int' lvalue
|       | |-ImplicitCastExpr 0x26de9592730 <col:9> 'u8 *' <LValueToRValue>
|       | | `-DeclRefExpr 0x26de95926f0 <col:9> 'u8 *' lvalue ParmVar 0x26de95921c8 'out' 'u8 *'
|       | `-ImplicitCastExpr 0x26de9592748 <col:13> 'unsigned int' <LValueToRValue>
|       |   `-DeclRefExpr 0x26de9592710 <col:13> 'unsigned int' lvalue Var 0x26de9592510 'i' 'unsigned int'
|       `-ImplicitCastExpr 0x26de95928c8 <col:18, col:32> 'u8':'int' <LValueToRValue>
|         `-ArraySubscriptExpr 0x26de95928a8 <col:18, col:32> 'const u8':'const int' lvalue
|           |-ImplicitCastExpr 0x26de9592890 <col:18> 'const u8 *' <LValueToRValue>
|           | `-DeclRefExpr 0x26de9592780 <col:18> 'const u8 *' lvalue ParmVar 0x26de9592240 'in' 'const u8 *'
|           `-BinaryOperator 0x26de9592870 <col:21, col:31> 'unsigned int' '-'
|             |-BinaryOperator 0x26de9592818 <col:21, col:27> 'unsigned int' '-'
|             | |-ImplicitCastExpr 0x26de95927e8 <col:21> 'unsigned int' <LValueToRValue>
|             | | `-DeclRefExpr 0x26de95927a0 <col:21> 'unsigned int' lvalue ParmVar 0x26de95922c0 'len' 'unsigned int'
|             | `-ImplicitCastExpr 0x26de9592800 <col:27> 'unsigned int' <IntegralCast>
|             |   `-IntegerLiteral 0x26de95927c0 <col:27> 'int' 1
|             `-ImplicitCastExpr 0x26de9592858 <col:31> 'unsigned int' <LValueToRValue>
|               `-DeclRefExpr 0x26de9592838 <col:31> 'unsigned int' lvalue Var 0x26de9592510 'i' 'unsigned int'
|-FunctionDecl 0x26de9592ac0 <line:181:1, line:202:1> line:181:12 invalid BN_to_felem 'int (limb *, const int *)' static
| |-ParmVarDecl 0x26de9592968 <col:24, col:30> col:30 used out 'limb *':'limb *'
| |-ParmVarDecl 0x26de95929e8 <col:35, col:49> col:49 invalid bn 'const int *'
| `-CompoundStmt 0x26de95938c0 <line:182:1, line:202:1>
|   |-DeclStmt 0x26de9592c00 <line:183:5, col:25>
|   | `-VarDecl 0x26de9592b98 <col:5, col:21> col:21 used b_in 'felem_bytearray':'u8 [66]'
|   |-DeclStmt 0x26de9592c90 <line:184:5, col:26>
|   | `-VarDecl 0x26de9592c28 <col:5, col:21> col:21 used b_out 'felem_bytearray':'u8 [66]'
|   |-DeclStmt 0x26de9592d28 <line:185:5, col:23>
|   | `-VarDecl 0x26de9592cc0 <col:5, col:14> col:14 used num_bytes 'unsigned int'
|   |-CallExpr 0x26de9592e50 <line:188:5, col:35> 'void *'
|   | |-ImplicitCastExpr 0x26de9592e38 <col:5> 'void *(*)(void *, int, unsigned long long)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de9592d40 <col:5> 'void *(void *, int, unsigned long long)' Function 0x26de952a5c8 'memset' 'void *(void *, int, unsigned long long)'
|   | |-ImplicitCastExpr 0x26de9592ea0 <col:12> 'void *' <BitCast>
|   | | `-ImplicitCastExpr 0x26de9592e88 <col:12> 'u8 *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x26de9592d60 <col:12> 'felem_bytearray':'u8 [66]' lvalue Var 0x26de9592c28 'b_out' 'felem_bytearray':'u8 [66]'
|   | |-IntegerLiteral 0x26de9592d98 <col:19> 'int' 0
|   | `-UnaryExprOrTypeTraitExpr 0x26de9592e00 <col:22, col:34> 'unsigned long long' sizeof
|   |   `-ParenExpr 0x26de9592de0 <col:28, col:34> 'felem_bytearray':'u8 [66]' lvalue
|   |     `-DeclRefExpr 0x26de9592dc0 <col:29> 'felem_bytearray':'u8 [66]' lvalue Var 0x26de9592c28 'b_out' 'felem_bytearray':'u8 [66]' non_odr_use_unevaluated
|   |-IfStmt 0x26de9593270 <line:190:5, line:193:5>
|   | |-BinaryOperator 0x26de95930f0 <line:190:9, col:33> 'int' '>'
|   | | |-ImplicitCastExpr 0x26de95930c0 <col:9> 'unsigned long long' <IntegralCast>
|   | | | `-ImplicitCastExpr 0x26de95930a8 <col:9> 'unsigned int' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x26de9593028 <col:9> 'unsigned int' lvalue Var 0x26de9592cc0 'num_bytes' 'unsigned int'
|   | | `-UnaryExprOrTypeTraitExpr 0x26de9593088 <col:21, col:33> 'unsigned long long' sizeof
|   | |   `-ParenExpr 0x26de9593068 <col:27, col:33> 'felem_bytearray':'u8 [66]' lvalue
|   | |     `-DeclRefExpr 0x26de9593048 <col:28> 'felem_bytearray':'u8 [66]' lvalue Var 0x26de9592c28 'b_out' 'felem_bytearray':'u8 [66]' non_odr_use_unevaluated
|   | `-CompoundStmt 0x26de9593258 <col:36, line:193:5>
|   |   `-ReturnStmt 0x26de9593248 <line:192:9, col:16>
|   |     `-IntegerLiteral 0x26de9593220 <col:16> 'int' 0
|   |-IfStmt 0x26de9593420 <line:194:5, line:197:5>
|   | |-OpaqueValueExpr 0x26de9593408 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x26de95933f0 <line:194:29, line:197:5>
|   |   `-ReturnStmt 0x26de95933e0 <line:196:9, col:16>
|   |     `-IntegerLiteral 0x26de95933b8 <col:16> 'int' 0
|   |-CallExpr 0x26de9593690 <line:199:5, col:39> 'void'
|   | |-ImplicitCastExpr 0x26de9593678 <col:5> 'void (*)(u8 *, const u8 *, unsigned int)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de95935a0 <col:5> 'void (u8 *, const u8 *, unsigned int)' Function 0x26de9592428 'flip_endian' 'void (u8 *, const u8 *, unsigned int)'
|   | |-ImplicitCastExpr 0x26de95936c8 <col:17> 'u8 *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de95935c0 <col:17> 'felem_bytearray':'u8 [66]' lvalue Var 0x26de9592c28 'b_out' 'felem_bytearray':'u8 [66]'
|   | |-ImplicitCastExpr 0x26de95936f8 <col:24> 'const u8 *' <NoOp>
|   | | `-ImplicitCastExpr 0x26de95936e0 <col:24> 'u8 *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x26de95935e0 <col:24> 'felem_bytearray':'u8 [66]' lvalue Var 0x26de9592b98 'b_in' 'felem_bytearray':'u8 [66]'
|   | `-ImplicitCastExpr 0x26de9593710 <col:30> 'unsigned int' <LValueToRValue>
|   |   `-DeclRefExpr 0x26de9593600 <col:30> 'unsigned int' lvalue Var 0x26de9592cc0 'num_bytes' 'unsigned int'
|   |-CallExpr 0x26de9593810 <line:200:5, col:30> 'void'
|   | |-ImplicitCastExpr 0x26de95937f8 <col:5> 'void (*)(limb *, const u8 *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de9593728 <col:5> 'void (limb *, const u8 *)' Function 0x26de958f1d8 'bin66_to_felem' 'void (limb *, const u8 *)'
|   | |-ImplicitCastExpr 0x26de9593840 <col:20> 'limb *':'limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x26de9593748 <col:20> 'limb *':'limb *' lvalue ParmVar 0x26de9592968 'out' 'limb *':'limb *'
|   | `-ImplicitCastExpr 0x26de9593870 <col:25> 'const u8 *':'const u8 *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de9593858 <col:25> 'u8 *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x26de9593780 <col:25> 'felem_bytearray':'u8 [66]' lvalue Var 0x26de9592c28 'b_out' 'felem_bytearray':'u8 [66]'
|   `-ReturnStmt 0x26de95938b0 <line:201:5, col:12>
|     `-IntegerLiteral 0x26de9593888 <col:12> 'int' 1
|-FunctionDecl 0x26de9593ac0 <line:205:1, line:211:1> line:205:16 invalid felem_to_BN 'int *(int *, const limb *)' static
| |-ParmVarDecl 0x26de9593930 <col:28, col:36> col:36 invalid out 'int *'
| |-ParmVarDecl 0x26de95939a8 <col:41, col:53> col:53 used in 'const limb *':'const limb *'
| `-CompoundStmt 0x26de95940f8 <line:206:1, line:211:1>
|   |-DeclStmt 0x26de9593c90 <line:207:5, col:32>
|   | |-VarDecl 0x26de9593b98 <col:5, col:21> col:21 used b_in 'felem_bytearray':'u8 [66]'
|   | `-VarDecl 0x26de9593c10 <col:5, col:27> col:27 used b_out 'felem_bytearray':'u8 [66]'
|   |-CallExpr 0x26de9593d80 <line:208:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x26de9593d68 <col:5> 'void (*)(u8 *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de9593ca8 <col:5> 'void (u8 *, const limb *)' Function 0x26de9590c18 'felem_to_bin66' 'void (u8 *, const limb *)'
|   | |-ImplicitCastExpr 0x26de9593db0 <col:20> 'u8 *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de9593cc8 <col:20> 'felem_bytearray':'u8 [66]' lvalue Var 0x26de9593b98 'b_in' 'felem_bytearray':'u8 [66]'
|   | `-ImplicitCastExpr 0x26de9593dc8 <col:26> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x26de9593d00 <col:26> 'const limb *':'const limb *' lvalue ParmVar 0x26de95939a8 'in' 'const limb *':'const limb *'
|   `-CallExpr 0x26de9593ed0 <line:209:5, col:43> 'void'
|     |-ImplicitCastExpr 0x26de9593eb8 <col:5> 'void (*)(u8 *, const u8 *, unsigned int)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x26de9593de0 <col:5> 'void (u8 *, const u8 *, unsigned int)' Function 0x26de9592428 'flip_endian' 'void (u8 *, const u8 *, unsigned int)'
|     |-ImplicitCastExpr 0x26de9593f08 <col:17> 'u8 *' <ArrayToPointerDecay>
|     | `-DeclRefExpr 0x26de9593e00 <col:17> 'felem_bytearray':'u8 [66]' lvalue Var 0x26de9593c10 'b_out' 'felem_bytearray':'u8 [66]'
|     |-ImplicitCastExpr 0x26de9593f38 <col:24> 'const u8 *' <NoOp>
|     | `-ImplicitCastExpr 0x26de9593f20 <col:24> 'u8 *' <ArrayToPointerDecay>
|     |   `-DeclRefExpr 0x26de9593e38 <col:24> 'felem_bytearray':'u8 [66]' lvalue Var 0x26de9593b98 'b_in' 'felem_bytearray':'u8 [66]'
|     `-ImplicitCastExpr 0x26de9593f50 <col:30, col:42> 'unsigned int' <IntegralCast>
|       `-UnaryExprOrTypeTraitExpr 0x26de9593e98 <col:30, col:42> 'unsigned long long' sizeof
|         `-ParenExpr 0x26de9593e78 <col:36, col:42> 'felem_bytearray':'u8 [66]' lvalue
|           `-DeclRefExpr 0x26de9593e58 <col:37> 'felem_bytearray':'u8 [66]' lvalue Var 0x26de9593c10 'b_out' 'felem_bytearray':'u8 [66]' non_odr_use_unevaluated
|-FunctionDecl 0x26de9594208 <line:218:1, line:229:1> line:218:13 used felem_one 'void (limb *)' static
| |-ParmVarDecl 0x26de9594130 <col:23, col:29> col:29 used out 'limb *':'limb *'
| `-CompoundStmt 0x26de95949d0 <line:219:1, line:229:1>
|   |-BinaryOperator 0x26de9594370 <line:220:5, col:14> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x26de9594328 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de9594310 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de95942c8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de9594130 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de95942e8 <col:9> 'int' 0
|   | `-IntegerLiteral 0x26de9594348 <col:14> 'int' 1
|   |-BinaryOperator 0x26de9594438 <line:221:5, col:14> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x26de95943f0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de95943d8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de9594390 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de9594130 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de95943b0 <col:9> 'int' 1
|   | `-IntegerLiteral 0x26de9594410 <col:14> 'int' 0
|   |-BinaryOperator 0x26de9594500 <line:222:5, col:14> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x26de95944b8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de95944a0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de9594458 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de9594130 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de9594478 <col:9> 'int' 2
|   | `-IntegerLiteral 0x26de95944d8 <col:14> 'int' 0
|   |-BinaryOperator 0x26de95945c8 <line:223:5, col:14> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x26de9594580 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de9594568 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de9594520 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de9594130 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de9594540 <col:9> 'int' 3
|   | `-IntegerLiteral 0x26de95945a0 <col:14> 'int' 0
|   |-BinaryOperator 0x26de9594690 <line:224:5, col:14> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x26de9594648 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de9594630 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de95945e8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de9594130 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de9594608 <col:9> 'int' 4
|   | `-IntegerLiteral 0x26de9594668 <col:14> 'int' 0
|   |-BinaryOperator 0x26de9594758 <line:225:5, col:14> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x26de9594710 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de95946f8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de95946b0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de9594130 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de95946d0 <col:9> 'int' 5
|   | `-IntegerLiteral 0x26de9594730 <col:14> 'int' 0
|   |-BinaryOperator 0x26de9594820 <line:226:5, col:14> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x26de95947d8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de95947c0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de9594778 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de9594130 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de9594798 <col:9> 'int' 6
|   | `-IntegerLiteral 0x26de95947f8 <col:14> 'int' 0
|   |-BinaryOperator 0x26de95948e8 <line:227:5, col:14> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x26de95948a0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de9594888 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de9594840 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de9594130 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de9594860 <col:9> 'int' 7
|   | `-IntegerLiteral 0x26de95948c0 <col:14> 'int' 0
|   `-BinaryOperator 0x26de95949b0 <line:228:5, col:14> 'limb':'int' '='
|     |-ArraySubscriptExpr 0x26de9594968 <col:5, col:10> 'limb':'int' lvalue
|     | |-ImplicitCastExpr 0x26de9594950 <col:5> 'limb *':'limb *' <LValueToRValue>
|     | | `-DeclRefExpr 0x26de9594908 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de9594130 'out' 'limb *':'limb *'
|     | `-IntegerLiteral 0x26de9594928 <col:9> 'int' 8
|     `-IntegerLiteral 0x26de9594988 <col:14> 'int' 0
|-FunctionDecl 0x26de9594bb8 <line:231:1, line:242:1> line:231:13 used felem_assign 'void (limb *, const limb *)' static
| |-ParmVarDecl 0x26de9594a38 <col:26, col:32> col:32 used out 'limb *':'limb *'
| |-ParmVarDecl 0x26de9594ab0 <col:37, col:49> col:49 used in 'const limb *':'const limb *'
| `-CompoundStmt 0x26de9595788 <line:232:1, line:242:1>
|   |-BinaryOperator 0x26de9594d98 <line:233:5, col:18> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x26de9594ce0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de9594cc8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de9594c80 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de9594a38 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de9594ca0 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x26de9594d80 <col:14, col:18> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x26de9594d60 <col:14, col:18> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x26de9594d48 <col:14> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x26de9594d00 <col:14> 'const limb *':'const limb *' lvalue ParmVar 0x26de9594ab0 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x26de9594d20 <col:17> 'int' 0
|   |-BinaryOperator 0x26de9594ed0 <line:234:5, col:18> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x26de9594e18 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de9594e00 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de9594db8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de9594a38 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de9594dd8 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x26de9594eb8 <col:14, col:18> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x26de9594e98 <col:14, col:18> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x26de9594e80 <col:14> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x26de9594e38 <col:14> 'const limb *':'const limb *' lvalue ParmVar 0x26de9594ab0 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x26de9594e58 <col:17> 'int' 1
|   |-BinaryOperator 0x26de9595008 <line:235:5, col:18> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x26de9594f50 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de9594f38 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de9594ef0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de9594a38 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de9594f10 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x26de9594ff0 <col:14, col:18> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x26de9594fd0 <col:14, col:18> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x26de9594fb8 <col:14> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x26de9594f70 <col:14> 'const limb *':'const limb *' lvalue ParmVar 0x26de9594ab0 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x26de9594f90 <col:17> 'int' 2
|   |-BinaryOperator 0x26de9595150 <line:236:5, col:18> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x26de9595088 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de9595070 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de9595028 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de9594a38 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de9595048 <col:9> 'int' 3
|   | `-ImplicitCastExpr 0x26de9595138 <col:14, col:18> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x26de9595118 <col:14, col:18> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x26de9595100 <col:14> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x26de95950a8 <col:14> 'const limb *':'const limb *' lvalue ParmVar 0x26de9594ab0 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x26de95950c8 <col:17> 'int' 3
|   |-BinaryOperator 0x26de9595288 <line:237:5, col:18> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x26de95951d0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de95951b8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de9595170 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de9594a38 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de9595190 <col:9> 'int' 4
|   | `-ImplicitCastExpr 0x26de9595270 <col:14, col:18> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x26de9595250 <col:14, col:18> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x26de9595238 <col:14> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x26de95951f0 <col:14> 'const limb *':'const limb *' lvalue ParmVar 0x26de9594ab0 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x26de9595210 <col:17> 'int' 4
|   |-BinaryOperator 0x26de95953c0 <line:238:5, col:18> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x26de9595308 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de95952f0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de95952a8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de9594a38 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de95952c8 <col:9> 'int' 5
|   | `-ImplicitCastExpr 0x26de95953a8 <col:14, col:18> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x26de9595388 <col:14, col:18> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x26de9595370 <col:14> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x26de9595328 <col:14> 'const limb *':'const limb *' lvalue ParmVar 0x26de9594ab0 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x26de9595348 <col:17> 'int' 5
|   |-BinaryOperator 0x26de95954f8 <line:239:5, col:18> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x26de9595440 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de9595428 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de95953e0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de9594a38 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de9595400 <col:9> 'int' 6
|   | `-ImplicitCastExpr 0x26de95954e0 <col:14, col:18> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x26de95954c0 <col:14, col:18> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x26de95954a8 <col:14> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x26de9595460 <col:14> 'const limb *':'const limb *' lvalue ParmVar 0x26de9594ab0 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x26de9595480 <col:17> 'int' 6
|   |-BinaryOperator 0x26de9595630 <line:240:5, col:18> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x26de9595578 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de9595560 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de9595518 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de9594a38 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de9595538 <col:9> 'int' 7
|   | `-ImplicitCastExpr 0x26de9595618 <col:14, col:18> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x26de95955f8 <col:14, col:18> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x26de95955e0 <col:14> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x26de9595598 <col:14> 'const limb *':'const limb *' lvalue ParmVar 0x26de9594ab0 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x26de95955b8 <col:17> 'int' 7
|   `-BinaryOperator 0x26de9595768 <line:241:5, col:18> 'limb':'int' '='
|     |-ArraySubscriptExpr 0x26de95956b0 <col:5, col:10> 'limb':'int' lvalue
|     | |-ImplicitCastExpr 0x26de9595698 <col:5> 'limb *':'limb *' <LValueToRValue>
|     | | `-DeclRefExpr 0x26de9595650 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de9594a38 'out' 'limb *':'limb *'
|     | `-IntegerLiteral 0x26de9595670 <col:9> 'int' 8
|     `-ImplicitCastExpr 0x26de9595750 <col:14, col:18> 'limb':'int' <LValueToRValue>
|       `-ArraySubscriptExpr 0x26de9595730 <col:14, col:18> 'const limb':'const int' lvalue
|         |-ImplicitCastExpr 0x26de9595718 <col:14> 'const limb *':'const limb *' <LValueToRValue>
|         | `-DeclRefExpr 0x26de95956d0 <col:14> 'const limb *':'const limb *' lvalue ParmVar 0x26de9594ab0 'in' 'const limb *':'const limb *'
|         `-IntegerLiteral 0x26de95956f0 <col:17> 'int' 8
|-FunctionDecl 0x26de9595930 <line:245:1, line:256:1> line:245:13 used felem_sum64 'void (limb *, const limb *)' static
| |-ParmVarDecl 0x26de95957f0 <col:25, col:31> col:31 used out 'limb *':'limb *'
| |-ParmVarDecl 0x26de9595868 <col:36, col:48> col:48 used in 'const limb *':'const limb *'
| `-CompoundStmt 0x26de9596580 <line:246:1, line:256:1>
|   |-CompoundAssignOperator 0x26de9595b10 <line:247:5, col:19> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de9595a58 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de9595a40 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de95959f8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de95957f0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de9595a18 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x26de9595af8 <col:15, col:19> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x26de9595ad8 <col:15, col:19> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x26de9595ac0 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x26de9595a78 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x26de9595868 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x26de9595a98 <col:18> 'int' 0
|   |-CompoundAssignOperator 0x26de9595c58 <line:248:5, col:19> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de9595ba0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de9595b88 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de9595b40 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de95957f0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de9595b60 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x26de9595c40 <col:15, col:19> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x26de9595c20 <col:15, col:19> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x26de9595c08 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x26de9595bc0 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x26de9595868 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x26de9595be0 <col:18> 'int' 1
|   |-CompoundAssignOperator 0x26de9595da0 <line:249:5, col:19> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de9595ce8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de9595cd0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de9595c88 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de95957f0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de9595ca8 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x26de9595d88 <col:15, col:19> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x26de9595d68 <col:15, col:19> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x26de9595d50 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x26de9595d08 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x26de9595868 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x26de9595d28 <col:18> 'int' 2
|   |-CompoundAssignOperator 0x26de9595ee8 <line:250:5, col:19> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de9595e30 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de9595e18 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de9595dd0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de95957f0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de9595df0 <col:9> 'int' 3
|   | `-ImplicitCastExpr 0x26de9595ed0 <col:15, col:19> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x26de9595eb0 <col:15, col:19> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x26de9595e98 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x26de9595e50 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x26de9595868 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x26de9595e70 <col:18> 'int' 3
|   |-CompoundAssignOperator 0x26de9596030 <line:251:5, col:19> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de9595f78 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de9595f60 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de9595f18 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de95957f0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de9595f38 <col:9> 'int' 4
|   | `-ImplicitCastExpr 0x26de9596018 <col:15, col:19> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x26de9595ff8 <col:15, col:19> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x26de9595fe0 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x26de9595f98 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x26de9595868 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x26de9595fb8 <col:18> 'int' 4
|   |-CompoundAssignOperator 0x26de9596178 <line:252:5, col:19> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de95960c0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de95960a8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de9596060 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de95957f0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de9596080 <col:9> 'int' 5
|   | `-ImplicitCastExpr 0x26de9596160 <col:15, col:19> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x26de9596140 <col:15, col:19> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x26de9596128 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x26de95960e0 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x26de9595868 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x26de9596100 <col:18> 'int' 5
|   |-CompoundAssignOperator 0x26de95962c0 <line:253:5, col:19> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de9596208 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de95961f0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de95961a8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de95957f0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de95961c8 <col:9> 'int' 6
|   | `-ImplicitCastExpr 0x26de95962a8 <col:15, col:19> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x26de9596288 <col:15, col:19> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x26de9596270 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x26de9596228 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x26de9595868 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x26de9596248 <col:18> 'int' 6
|   |-CompoundAssignOperator 0x26de9596408 <line:254:5, col:19> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de9596350 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de9596338 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de95962f0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de95957f0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de9596310 <col:9> 'int' 7
|   | `-ImplicitCastExpr 0x26de95963f0 <col:15, col:19> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x26de95963d0 <col:15, col:19> 'const limb':'const int' lvalue
|   |     |-ImplicitCastExpr 0x26de95963b8 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x26de9596370 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x26de9595868 'in' 'const limb *':'const limb *'
|   |     `-IntegerLiteral 0x26de9596390 <col:18> 'int' 7
|   `-CompoundAssignOperator 0x26de9596550 <line:255:5, col:19> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|     |-ArraySubscriptExpr 0x26de9596498 <col:5, col:10> 'limb':'int' lvalue
|     | |-ImplicitCastExpr 0x26de9596480 <col:5> 'limb *':'limb *' <LValueToRValue>
|     | | `-DeclRefExpr 0x26de9596438 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de95957f0 'out' 'limb *':'limb *'
|     | `-IntegerLiteral 0x26de9596458 <col:9> 'int' 8
|     `-ImplicitCastExpr 0x26de9596538 <col:15, col:19> 'limb':'int' <LValueToRValue>
|       `-ArraySubscriptExpr 0x26de9596518 <col:15, col:19> 'const limb':'const int' lvalue
|         |-ImplicitCastExpr 0x26de9596500 <col:15> 'const limb *':'const limb *' <LValueToRValue>
|         | `-DeclRefExpr 0x26de95964b8 <col:15> 'const limb *':'const limb *' lvalue ParmVar 0x26de9595868 'in' 'const limb *':'const limb *'
|         `-IntegerLiteral 0x26de95964d8 <col:18> 'int' 8
|-FunctionDecl 0x26de9596848 <line:259:1, line:270:1> line:259:13 used felem_scalar 'void (limb *, const limb *, limb)' static
| |-ParmVarDecl 0x26de95965e8 <col:26, col:32> col:32 used out 'limb *':'limb *'
| |-ParmVarDecl 0x26de9596660 <col:37, col:49> col:49 used in 'const limb *':'const limb *'
| |-ParmVarDecl 0x26de95966d8 <col:53, col:58> col:58 used scalar 'limb':'int'
| `-CompoundStmt 0x26de9597750 <line:260:1, line:270:1>
|   |-BinaryOperator 0x26de9596a88 <line:261:5, col:22> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x26de9596978 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de9596960 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de9596918 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de95965e8 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de9596938 <col:9> 'int' 0
|   | `-BinaryOperator 0x26de9596a68 <col:14, col:22> 'int' '*'
|   |   |-ImplicitCastExpr 0x26de9596a38 <col:14, col:18> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x26de95969f8 <col:14, col:18> 'const limb':'const int' lvalue
|   |   |   |-ImplicitCastExpr 0x26de95969e0 <col:14> 'const limb *':'const limb *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x26de9596998 <col:14> 'const limb *':'const limb *' lvalue ParmVar 0x26de9596660 'in' 'const limb *':'const limb *'
|   |   |   `-IntegerLiteral 0x26de95969b8 <col:17> 'int' 0
|   |   `-ImplicitCastExpr 0x26de9596a50 <col:22> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x26de9596a18 <col:22> 'limb':'int' lvalue ParmVar 0x26de95966d8 'scalar' 'limb':'int'
|   |-BinaryOperator 0x26de9596c18 <line:262:5, col:22> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x26de9596b08 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de9596af0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de9596aa8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de95965e8 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de9596ac8 <col:9> 'int' 1
|   | `-BinaryOperator 0x26de9596bf8 <col:14, col:22> 'int' '*'
|   |   |-ImplicitCastExpr 0x26de9596bc8 <col:14, col:18> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x26de9596b88 <col:14, col:18> 'const limb':'const int' lvalue
|   |   |   |-ImplicitCastExpr 0x26de9596b70 <col:14> 'const limb *':'const limb *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x26de9596b28 <col:14> 'const limb *':'const limb *' lvalue ParmVar 0x26de9596660 'in' 'const limb *':'const limb *'
|   |   |   `-IntegerLiteral 0x26de9596b48 <col:17> 'int' 1
|   |   `-ImplicitCastExpr 0x26de9596be0 <col:22> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x26de9596ba8 <col:22> 'limb':'int' lvalue ParmVar 0x26de95966d8 'scalar' 'limb':'int'
|   |-BinaryOperator 0x26de9596da8 <line:263:5, col:22> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x26de9596c98 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de9596c80 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de9596c38 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de95965e8 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de9596c58 <col:9> 'int' 2
|   | `-BinaryOperator 0x26de9596d88 <col:14, col:22> 'int' '*'
|   |   |-ImplicitCastExpr 0x26de9596d58 <col:14, col:18> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x26de9596d18 <col:14, col:18> 'const limb':'const int' lvalue
|   |   |   |-ImplicitCastExpr 0x26de9596d00 <col:14> 'const limb *':'const limb *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x26de9596cb8 <col:14> 'const limb *':'const limb *' lvalue ParmVar 0x26de9596660 'in' 'const limb *':'const limb *'
|   |   |   `-IntegerLiteral 0x26de9596cd8 <col:17> 'int' 2
|   |   `-ImplicitCastExpr 0x26de9596d70 <col:22> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x26de9596d38 <col:22> 'limb':'int' lvalue ParmVar 0x26de95966d8 'scalar' 'limb':'int'
|   |-BinaryOperator 0x26de9596f38 <line:264:5, col:22> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x26de9596e28 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de9596e10 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de9596dc8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de95965e8 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de9596de8 <col:9> 'int' 3
|   | `-BinaryOperator 0x26de9596f18 <col:14, col:22> 'int' '*'
|   |   |-ImplicitCastExpr 0x26de9596ee8 <col:14, col:18> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x26de9596ea8 <col:14, col:18> 'const limb':'const int' lvalue
|   |   |   |-ImplicitCastExpr 0x26de9596e90 <col:14> 'const limb *':'const limb *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x26de9596e48 <col:14> 'const limb *':'const limb *' lvalue ParmVar 0x26de9596660 'in' 'const limb *':'const limb *'
|   |   |   `-IntegerLiteral 0x26de9596e68 <col:17> 'int' 3
|   |   `-ImplicitCastExpr 0x26de9596f00 <col:22> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x26de9596ec8 <col:22> 'limb':'int' lvalue ParmVar 0x26de95966d8 'scalar' 'limb':'int'
|   |-BinaryOperator 0x26de95970c8 <line:265:5, col:22> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x26de9596fb8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de9596fa0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de9596f58 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de95965e8 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de9596f78 <col:9> 'int' 4
|   | `-BinaryOperator 0x26de95970a8 <col:14, col:22> 'int' '*'
|   |   |-ImplicitCastExpr 0x26de9597078 <col:14, col:18> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x26de9597038 <col:14, col:18> 'const limb':'const int' lvalue
|   |   |   |-ImplicitCastExpr 0x26de9597020 <col:14> 'const limb *':'const limb *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x26de9596fd8 <col:14> 'const limb *':'const limb *' lvalue ParmVar 0x26de9596660 'in' 'const limb *':'const limb *'
|   |   |   `-IntegerLiteral 0x26de9596ff8 <col:17> 'int' 4
|   |   `-ImplicitCastExpr 0x26de9597090 <col:22> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x26de9597058 <col:22> 'limb':'int' lvalue ParmVar 0x26de95966d8 'scalar' 'limb':'int'
|   |-BinaryOperator 0x26de9597280 <line:266:5, col:22> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x26de9597170 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de9597158 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de9597110 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de95965e8 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de9597130 <col:9> 'int' 5
|   | `-BinaryOperator 0x26de9597260 <col:14, col:22> 'int' '*'
|   |   |-ImplicitCastExpr 0x26de9597230 <col:14, col:18> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x26de95971f0 <col:14, col:18> 'const limb':'const int' lvalue
|   |   |   |-ImplicitCastExpr 0x26de95971d8 <col:14> 'const limb *':'const limb *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x26de9597190 <col:14> 'const limb *':'const limb *' lvalue ParmVar 0x26de9596660 'in' 'const limb *':'const limb *'
|   |   |   `-IntegerLiteral 0x26de95971b0 <col:17> 'int' 5
|   |   `-ImplicitCastExpr 0x26de9597248 <col:22> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x26de9597210 <col:22> 'limb':'int' lvalue ParmVar 0x26de95966d8 'scalar' 'limb':'int'
|   |-BinaryOperator 0x26de9597410 <line:267:5, col:22> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x26de9597300 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de95972e8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de95972a0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de95965e8 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de95972c0 <col:9> 'int' 6
|   | `-BinaryOperator 0x26de95973f0 <col:14, col:22> 'int' '*'
|   |   |-ImplicitCastExpr 0x26de95973c0 <col:14, col:18> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x26de9597380 <col:14, col:18> 'const limb':'const int' lvalue
|   |   |   |-ImplicitCastExpr 0x26de9597368 <col:14> 'const limb *':'const limb *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x26de9597320 <col:14> 'const limb *':'const limb *' lvalue ParmVar 0x26de9596660 'in' 'const limb *':'const limb *'
|   |   |   `-IntegerLiteral 0x26de9597340 <col:17> 'int' 6
|   |   `-ImplicitCastExpr 0x26de95973d8 <col:22> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x26de95973a0 <col:22> 'limb':'int' lvalue ParmVar 0x26de95966d8 'scalar' 'limb':'int'
|   |-BinaryOperator 0x26de95975a0 <line:268:5, col:22> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x26de9597490 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de9597478 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de9597430 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de95965e8 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de9597450 <col:9> 'int' 7
|   | `-BinaryOperator 0x26de9597580 <col:14, col:22> 'int' '*'
|   |   |-ImplicitCastExpr 0x26de9597550 <col:14, col:18> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x26de9597510 <col:14, col:18> 'const limb':'const int' lvalue
|   |   |   |-ImplicitCastExpr 0x26de95974f8 <col:14> 'const limb *':'const limb *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x26de95974b0 <col:14> 'const limb *':'const limb *' lvalue ParmVar 0x26de9596660 'in' 'const limb *':'const limb *'
|   |   |   `-IntegerLiteral 0x26de95974d0 <col:17> 'int' 7
|   |   `-ImplicitCastExpr 0x26de9597568 <col:22> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x26de9597530 <col:22> 'limb':'int' lvalue ParmVar 0x26de95966d8 'scalar' 'limb':'int'
|   `-BinaryOperator 0x26de9597730 <line:269:5, col:22> 'limb':'int' '='
|     |-ArraySubscriptExpr 0x26de9597620 <col:5, col:10> 'limb':'int' lvalue
|     | |-ImplicitCastExpr 0x26de9597608 <col:5> 'limb *':'limb *' <LValueToRValue>
|     | | `-DeclRefExpr 0x26de95975c0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de95965e8 'out' 'limb *':'limb *'
|     | `-IntegerLiteral 0x26de95975e0 <col:9> 'int' 8
|     `-BinaryOperator 0x26de9597710 <col:14, col:22> 'int' '*'
|       |-ImplicitCastExpr 0x26de95976e0 <col:14, col:18> 'limb':'int' <LValueToRValue>
|       | `-ArraySubscriptExpr 0x26de95976a0 <col:14, col:18> 'const limb':'const int' lvalue
|       |   |-ImplicitCastExpr 0x26de9597688 <col:14> 'const limb *':'const limb *' <LValueToRValue>
|       |   | `-DeclRefExpr 0x26de9597640 <col:14> 'const limb *':'const limb *' lvalue ParmVar 0x26de9596660 'in' 'const limb *':'const limb *'
|       |   `-IntegerLiteral 0x26de9597660 <col:17> 'int' 8
|       `-ImplicitCastExpr 0x26de95976f8 <col:22> 'limb':'int' <LValueToRValue>
|         `-DeclRefExpr 0x26de95976c0 <col:22> 'limb':'int' lvalue ParmVar 0x26de95966d8 'scalar' 'limb':'int'
|-FunctionDecl 0x26de9597978 <line:273:1, line:284:1> line:273:13 used felem_scalar64 'void (limb *, limb)' static
| |-ParmVarDecl 0x26de95977b8 <col:28, col:34> col:34 used out 'limb *':'limb *'
| |-ParmVarDecl 0x26de9597830 <col:39, col:44> col:44 used scalar 'limb':'int'
| `-CompoundStmt 0x26de9598268 <line:274:1, line:284:1>
|   |-CompoundAssignOperator 0x26de9597af8 <line:275:5, col:15> 'limb':'int' '*=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de9597aa0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de9597a88 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de9597a40 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de95977b8 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de9597a60 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x26de9597ae0 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x26de9597ac0 <col:15> 'limb':'int' lvalue ParmVar 0x26de9597830 'scalar' 'limb':'int'
|   |-CompoundAssignOperator 0x26de9597be0 <line:276:5, col:15> 'limb':'int' '*=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de9597b88 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de9597b70 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de9597b28 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de95977b8 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de9597b48 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x26de9597bc8 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x26de9597ba8 <col:15> 'limb':'int' lvalue ParmVar 0x26de9597830 'scalar' 'limb':'int'
|   |-CompoundAssignOperator 0x26de9597cc8 <line:277:5, col:15> 'limb':'int' '*=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de9597c70 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de9597c58 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de9597c10 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de95977b8 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de9597c30 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x26de9597cb0 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x26de9597c90 <col:15> 'limb':'int' lvalue ParmVar 0x26de9597830 'scalar' 'limb':'int'
|   |-CompoundAssignOperator 0x26de9597db0 <line:278:5, col:15> 'limb':'int' '*=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de9597d58 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de9597d40 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de9597cf8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de95977b8 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de9597d18 <col:9> 'int' 3
|   | `-ImplicitCastExpr 0x26de9597d98 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x26de9597d78 <col:15> 'limb':'int' lvalue ParmVar 0x26de9597830 'scalar' 'limb':'int'
|   |-CompoundAssignOperator 0x26de9597e98 <line:279:5, col:15> 'limb':'int' '*=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de9597e40 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de9597e28 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de9597de0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de95977b8 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de9597e00 <col:9> 'int' 4
|   | `-ImplicitCastExpr 0x26de9597e80 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x26de9597e60 <col:15> 'limb':'int' lvalue ParmVar 0x26de9597830 'scalar' 'limb':'int'
|   |-CompoundAssignOperator 0x26de9597f80 <line:280:5, col:15> 'limb':'int' '*=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de9597f28 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de9597f10 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de9597ec8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de95977b8 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de9597ee8 <col:9> 'int' 5
|   | `-ImplicitCastExpr 0x26de9597f68 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x26de9597f48 <col:15> 'limb':'int' lvalue ParmVar 0x26de9597830 'scalar' 'limb':'int'
|   |-CompoundAssignOperator 0x26de9598068 <line:281:5, col:15> 'limb':'int' '*=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de9598010 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de9597ff8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de9597fb0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de95977b8 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de9597fd0 <col:9> 'int' 6
|   | `-ImplicitCastExpr 0x26de9598050 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x26de9598030 <col:15> 'limb':'int' lvalue ParmVar 0x26de9597830 'scalar' 'limb':'int'
|   |-CompoundAssignOperator 0x26de9598150 <line:282:5, col:15> 'limb':'int' '*=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de95980f8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de95980e0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de9598098 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de95977b8 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de95980b8 <col:9> 'int' 7
|   | `-ImplicitCastExpr 0x26de9598138 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x26de9598118 <col:15> 'limb':'int' lvalue ParmVar 0x26de9597830 'scalar' 'limb':'int'
|   `-CompoundAssignOperator 0x26de9598238 <line:283:5, col:15> 'limb':'int' '*=' ComputeLHSTy='int' ComputeResultTy='int'
|     |-ArraySubscriptExpr 0x26de95981e0 <col:5, col:10> 'limb':'int' lvalue
|     | |-ImplicitCastExpr 0x26de95981c8 <col:5> 'limb *':'limb *' <LValueToRValue>
|     | | `-DeclRefExpr 0x26de9598180 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de95977b8 'out' 'limb *':'limb *'
|     | `-IntegerLiteral 0x26de95981a0 <col:9> 'int' 8
|     `-ImplicitCastExpr 0x26de9598220 <col:15> 'limb':'int' <LValueToRValue>
|       `-DeclRefExpr 0x26de9598200 <col:15> 'limb':'int' lvalue ParmVar 0x26de9597830 'scalar' 'limb':'int'
|-FunctionDecl 0x26de9598498 <line:287:1, line:298:1> line:287:13 used felem_scalar128 'void (int *, limb)' static
| |-ParmVarDecl 0x26de9598320 <col:29, col:40> col:40 used out 'int *':'int *'
| |-ParmVarDecl 0x26de9598398 <col:45, col:50> col:50 used scalar 'limb':'int'
| `-CompoundStmt 0x26de9598d88 <line:288:1, line:298:1>
|   |-CompoundAssignOperator 0x26de9598618 <line:289:5, col:15> 'int' '*=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de95985c0 <col:5, col:10> 'int' lvalue
|   | | |-ImplicitCastExpr 0x26de95985a8 <col:5> 'int *':'int *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de9598560 <col:5> 'int *':'int *' lvalue ParmVar 0x26de9598320 'out' 'int *':'int *'
|   | | `-IntegerLiteral 0x26de9598580 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x26de9598600 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x26de95985e0 <col:15> 'limb':'int' lvalue ParmVar 0x26de9598398 'scalar' 'limb':'int'
|   |-CompoundAssignOperator 0x26de9598700 <line:290:5, col:15> 'int' '*=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de95986a8 <col:5, col:10> 'int' lvalue
|   | | |-ImplicitCastExpr 0x26de9598690 <col:5> 'int *':'int *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de9598648 <col:5> 'int *':'int *' lvalue ParmVar 0x26de9598320 'out' 'int *':'int *'
|   | | `-IntegerLiteral 0x26de9598668 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x26de95986e8 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x26de95986c8 <col:15> 'limb':'int' lvalue ParmVar 0x26de9598398 'scalar' 'limb':'int'
|   |-CompoundAssignOperator 0x26de95987e8 <line:291:5, col:15> 'int' '*=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de9598790 <col:5, col:10> 'int' lvalue
|   | | |-ImplicitCastExpr 0x26de9598778 <col:5> 'int *':'int *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de9598730 <col:5> 'int *':'int *' lvalue ParmVar 0x26de9598320 'out' 'int *':'int *'
|   | | `-IntegerLiteral 0x26de9598750 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x26de95987d0 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x26de95987b0 <col:15> 'limb':'int' lvalue ParmVar 0x26de9598398 'scalar' 'limb':'int'
|   |-CompoundAssignOperator 0x26de95988d0 <line:292:5, col:15> 'int' '*=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de9598878 <col:5, col:10> 'int' lvalue
|   | | |-ImplicitCastExpr 0x26de9598860 <col:5> 'int *':'int *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de9598818 <col:5> 'int *':'int *' lvalue ParmVar 0x26de9598320 'out' 'int *':'int *'
|   | | `-IntegerLiteral 0x26de9598838 <col:9> 'int' 3
|   | `-ImplicitCastExpr 0x26de95988b8 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x26de9598898 <col:15> 'limb':'int' lvalue ParmVar 0x26de9598398 'scalar' 'limb':'int'
|   |-CompoundAssignOperator 0x26de95989b8 <line:293:5, col:15> 'int' '*=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de9598960 <col:5, col:10> 'int' lvalue
|   | | |-ImplicitCastExpr 0x26de9598948 <col:5> 'int *':'int *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de9598900 <col:5> 'int *':'int *' lvalue ParmVar 0x26de9598320 'out' 'int *':'int *'
|   | | `-IntegerLiteral 0x26de9598920 <col:9> 'int' 4
|   | `-ImplicitCastExpr 0x26de95989a0 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x26de9598980 <col:15> 'limb':'int' lvalue ParmVar 0x26de9598398 'scalar' 'limb':'int'
|   |-CompoundAssignOperator 0x26de9598aa0 <line:294:5, col:15> 'int' '*=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de9598a48 <col:5, col:10> 'int' lvalue
|   | | |-ImplicitCastExpr 0x26de9598a30 <col:5> 'int *':'int *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de95989e8 <col:5> 'int *':'int *' lvalue ParmVar 0x26de9598320 'out' 'int *':'int *'
|   | | `-IntegerLiteral 0x26de9598a08 <col:9> 'int' 5
|   | `-ImplicitCastExpr 0x26de9598a88 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x26de9598a68 <col:15> 'limb':'int' lvalue ParmVar 0x26de9598398 'scalar' 'limb':'int'
|   |-CompoundAssignOperator 0x26de9598b88 <line:295:5, col:15> 'int' '*=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de9598b30 <col:5, col:10> 'int' lvalue
|   | | |-ImplicitCastExpr 0x26de9598b18 <col:5> 'int *':'int *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de9598ad0 <col:5> 'int *':'int *' lvalue ParmVar 0x26de9598320 'out' 'int *':'int *'
|   | | `-IntegerLiteral 0x26de9598af0 <col:9> 'int' 6
|   | `-ImplicitCastExpr 0x26de9598b70 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x26de9598b50 <col:15> 'limb':'int' lvalue ParmVar 0x26de9598398 'scalar' 'limb':'int'
|   |-CompoundAssignOperator 0x26de9598c70 <line:296:5, col:15> 'int' '*=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de9598c18 <col:5, col:10> 'int' lvalue
|   | | |-ImplicitCastExpr 0x26de9598c00 <col:5> 'int *':'int *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de9598bb8 <col:5> 'int *':'int *' lvalue ParmVar 0x26de9598320 'out' 'int *':'int *'
|   | | `-IntegerLiteral 0x26de9598bd8 <col:9> 'int' 7
|   | `-ImplicitCastExpr 0x26de9598c58 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x26de9598c38 <col:15> 'limb':'int' lvalue ParmVar 0x26de9598398 'scalar' 'limb':'int'
|   `-CompoundAssignOperator 0x26de9598d58 <line:297:5, col:15> 'int' '*=' ComputeLHSTy='int' ComputeResultTy='int'
|     |-ArraySubscriptExpr 0x26de9598d00 <col:5, col:10> 'int' lvalue
|     | |-ImplicitCastExpr 0x26de9598ce8 <col:5> 'int *':'int *' <LValueToRValue>
|     | | `-DeclRefExpr 0x26de9598ca0 <col:5> 'int *':'int *' lvalue ParmVar 0x26de9598320 'out' 'int *':'int *'
|     | `-IntegerLiteral 0x26de9598cc0 <col:9> 'int' 8
|     `-ImplicitCastExpr 0x26de9598d40 <col:15> 'limb':'int' <LValueToRValue>
|       `-DeclRefExpr 0x26de9598d20 <col:15> 'limb':'int' lvalue ParmVar 0x26de9598398 'scalar' 'limb':'int'
|-FunctionDecl 0x26de9598f30 <line:307:1, line:322:1> line:307:13 used felem_neg 'void (limb *, const limb *)' static
| |-ParmVarDecl 0x26de9598df0 <col:23, col:29> col:29 used out 'limb *':'limb *'
| |-ParmVarDecl 0x26de9598e68 <col:34, col:46> col:46 used in 'const limb *':'const limb *'
| `-CompoundStmt 0x26de959a3f8 <line:308:1, line:322:1>
|   |-DeclStmt 0x26de9599290 <line:310:5, col:71>
|   | `-VarDecl 0x26de9599008 <col:5, col:70> col:23 used two62m3 'const limb':'const int' static cinit
|   |   `-BinaryOperator 0x26de9599270 <col:33, col:70> 'int' '-'
|   |     |-ParenExpr 0x26de9599168 <col:33, col:50> 'limb':'int'
|   |     | `-BinaryOperator 0x26de9599148 <col:34, col:48> 'limb':'int' '<<'
|   |     |   |-ParenExpr 0x26de95990d0 <col:34, col:43> 'limb':'int'
|   |     |   | `-CStyleCastExpr 0x26de95990a8 <col:35, col:42> 'limb':'int' <NoOp>
|   |     |   |   `-IntegerLiteral 0x26de9599070 <col:42> 'int' 1
|   |     |   `-IntegerLiteral 0x26de9599120 <col:48> 'int' 62
|   |     `-ParenExpr 0x26de9599250 <col:54, col:70> 'limb':'int'
|   |       `-BinaryOperator 0x26de9599230 <col:55, col:69> 'limb':'int' '<<'
|   |         |-ParenExpr 0x26de95991e8 <col:55, col:64> 'limb':'int'
|   |         | `-CStyleCastExpr 0x26de95991c0 <col:56, col:63> 'limb':'int' <NoOp>
|   |         |   `-IntegerLiteral 0x26de9599188 <col:63> 'int' 1
|   |         `-IntegerLiteral 0x26de9599208 <col:69> 'int' 5
|   |-DeclStmt 0x26de9599510 <line:311:5, col:71>
|   | `-VarDecl 0x26de95992b8 <col:5, col:70> col:23 used two62m2 'const limb':'const int' static cinit
|   |   `-BinaryOperator 0x26de95994f0 <col:33, col:70> 'int' '-'
|   |     |-ParenExpr 0x26de95993e8 <col:33, col:50> 'limb':'int'
|   |     | `-BinaryOperator 0x26de95993c8 <col:34, col:48> 'limb':'int' '<<'
|   |     |   |-ParenExpr 0x26de9599380 <col:34, col:43> 'limb':'int'
|   |     |   | `-CStyleCastExpr 0x26de9599358 <col:35, col:42> 'limb':'int' <NoOp>
|   |     |   |   `-IntegerLiteral 0x26de9599320 <col:42> 'int' 1
|   |     |   `-IntegerLiteral 0x26de95993a0 <col:48> 'int' 62
|   |     `-ParenExpr 0x26de95994d0 <col:54, col:70> 'limb':'int'
|   |       `-BinaryOperator 0x26de95994b0 <col:55, col:69> 'limb':'int' '<<'
|   |         |-ParenExpr 0x26de9599468 <col:55, col:64> 'limb':'int'
|   |         | `-CStyleCastExpr 0x26de9599440 <col:56, col:63> 'limb':'int' <NoOp>
|   |         |   `-IntegerLiteral 0x26de9599408 <col:63> 'int' 1
|   |         `-IntegerLiteral 0x26de9599488 <col:69> 'int' 4
|   |-BinaryOperator 0x26de95996b0 <line:313:5, col:28> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x26de9599588 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de9599570 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de9599528 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de9598df0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de9599548 <col:9> 'int' 0
|   | `-BinaryOperator 0x26de9599690 <col:14, col:28> 'int' '-'
|   |   |-ImplicitCastExpr 0x26de9599660 <col:14> 'limb':'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x26de95995a8 <col:14> 'const limb':'const int' lvalue Var 0x26de9599008 'two62m3' 'const limb':'const int'
|   |   `-ImplicitCastExpr 0x26de9599678 <col:24, col:28> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x26de9599640 <col:24, col:28> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x26de9599628 <col:24> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x26de95995e0 <col:24> 'const limb *':'const limb *' lvalue ParmVar 0x26de9598e68 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x26de9599600 <col:27> 'int' 0
|   |-BinaryOperator 0x26de95998a0 <line:314:5, col:28> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x26de9599778 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de9599760 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de9599718 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de9598df0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de9599738 <col:9> 'int' 1
|   | `-BinaryOperator 0x26de9599880 <col:14, col:28> 'int' '-'
|   |   |-ImplicitCastExpr 0x26de9599850 <col:14> 'limb':'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x26de9599798 <col:14> 'const limb':'const int' lvalue Var 0x26de95992b8 'two62m2' 'const limb':'const int'
|   |   `-ImplicitCastExpr 0x26de9599868 <col:24, col:28> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x26de9599830 <col:24, col:28> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x26de9599818 <col:24> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x26de95997d0 <col:24> 'const limb *':'const limb *' lvalue ParmVar 0x26de9598e68 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x26de95997f0 <col:27> 'int' 1
|   |-BinaryOperator 0x26de9599a78 <line:315:5, col:28> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x26de9599968 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de9599950 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de9599908 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de9598df0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de9599928 <col:9> 'int' 2
|   | `-BinaryOperator 0x26de9599a58 <col:14, col:28> 'int' '-'
|   |   |-ImplicitCastExpr 0x26de9599a28 <col:14> 'limb':'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x26de9599988 <col:14> 'const limb':'const int' lvalue Var 0x26de95992b8 'two62m2' 'const limb':'const int'
|   |   `-ImplicitCastExpr 0x26de9599a40 <col:24, col:28> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x26de9599a08 <col:24, col:28> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x26de95999f0 <col:24> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x26de95999a8 <col:24> 'const limb *':'const limb *' lvalue ParmVar 0x26de9598e68 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x26de95999c8 <col:27> 'int' 2
|   |-BinaryOperator 0x26de9599c08 <line:316:5, col:28> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x26de9599af8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de9599ae0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de9599a98 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de9598df0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de9599ab8 <col:9> 'int' 3
|   | `-BinaryOperator 0x26de9599be8 <col:14, col:28> 'int' '-'
|   |   |-ImplicitCastExpr 0x26de9599bb8 <col:14> 'limb':'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x26de9599b18 <col:14> 'const limb':'const int' lvalue Var 0x26de95992b8 'two62m2' 'const limb':'const int'
|   |   `-ImplicitCastExpr 0x26de9599bd0 <col:24, col:28> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x26de9599b98 <col:24, col:28> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x26de9599b80 <col:24> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x26de9599b38 <col:24> 'const limb *':'const limb *' lvalue ParmVar 0x26de9598e68 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x26de9599b58 <col:27> 'int' 3
|   |-BinaryOperator 0x26de9599d98 <line:317:5, col:28> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x26de9599c88 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de9599c70 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de9599c28 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de9598df0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de9599c48 <col:9> 'int' 4
|   | `-BinaryOperator 0x26de9599d78 <col:14, col:28> 'int' '-'
|   |   |-ImplicitCastExpr 0x26de9599d48 <col:14> 'limb':'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x26de9599ca8 <col:14> 'const limb':'const int' lvalue Var 0x26de95992b8 'two62m2' 'const limb':'const int'
|   |   `-ImplicitCastExpr 0x26de9599d60 <col:24, col:28> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x26de9599d28 <col:24, col:28> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x26de9599d10 <col:24> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x26de9599cc8 <col:24> 'const limb *':'const limb *' lvalue ParmVar 0x26de9598e68 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x26de9599ce8 <col:27> 'int' 4
|   |-BinaryOperator 0x26de9599f28 <line:318:5, col:28> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x26de9599e18 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de9599e00 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de9599db8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de9598df0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de9599dd8 <col:9> 'int' 5
|   | `-BinaryOperator 0x26de9599f08 <col:14, col:28> 'int' '-'
|   |   |-ImplicitCastExpr 0x26de9599ed8 <col:14> 'limb':'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x26de9599e38 <col:14> 'const limb':'const int' lvalue Var 0x26de95992b8 'two62m2' 'const limb':'const int'
|   |   `-ImplicitCastExpr 0x26de9599ef0 <col:24, col:28> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x26de9599eb8 <col:24, col:28> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x26de9599ea0 <col:24> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x26de9599e58 <col:24> 'const limb *':'const limb *' lvalue ParmVar 0x26de9598e68 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x26de9599e78 <col:27> 'int' 5
|   |-BinaryOperator 0x26de959a0b8 <line:319:5, col:28> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x26de9599fa8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de9599f90 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de9599f48 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de9598df0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de9599f68 <col:9> 'int' 6
|   | `-BinaryOperator 0x26de959a098 <col:14, col:28> 'int' '-'
|   |   |-ImplicitCastExpr 0x26de959a068 <col:14> 'limb':'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x26de9599fc8 <col:14> 'const limb':'const int' lvalue Var 0x26de95992b8 'two62m2' 'const limb':'const int'
|   |   `-ImplicitCastExpr 0x26de959a080 <col:24, col:28> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x26de959a048 <col:24, col:28> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x26de959a030 <col:24> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x26de9599fe8 <col:24> 'const limb *':'const limb *' lvalue ParmVar 0x26de9598e68 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x26de959a008 <col:27> 'int' 6
|   |-BinaryOperator 0x26de959a248 <line:320:5, col:28> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x26de959a138 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de959a120 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de959a0d8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de9598df0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de959a0f8 <col:9> 'int' 7
|   | `-BinaryOperator 0x26de959a228 <col:14, col:28> 'int' '-'
|   |   |-ImplicitCastExpr 0x26de959a1f8 <col:14> 'limb':'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x26de959a158 <col:14> 'const limb':'const int' lvalue Var 0x26de95992b8 'two62m2' 'const limb':'const int'
|   |   `-ImplicitCastExpr 0x26de959a210 <col:24, col:28> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x26de959a1d8 <col:24, col:28> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x26de959a1c0 <col:24> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x26de959a178 <col:24> 'const limb *':'const limb *' lvalue ParmVar 0x26de9598e68 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x26de959a198 <col:27> 'int' 7
|   `-BinaryOperator 0x26de959a3d8 <line:321:5, col:28> 'limb':'int' '='
|     |-ArraySubscriptExpr 0x26de959a2c8 <col:5, col:10> 'limb':'int' lvalue
|     | |-ImplicitCastExpr 0x26de959a2b0 <col:5> 'limb *':'limb *' <LValueToRValue>
|     | | `-DeclRefExpr 0x26de959a268 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de9598df0 'out' 'limb *':'limb *'
|     | `-IntegerLiteral 0x26de959a288 <col:9> 'int' 8
|     `-BinaryOperator 0x26de959a3b8 <col:14, col:28> 'int' '-'
|       |-ImplicitCastExpr 0x26de959a388 <col:14> 'limb':'int' <LValueToRValue>
|       | `-DeclRefExpr 0x26de959a2e8 <col:14> 'const limb':'const int' lvalue Var 0x26de95992b8 'two62m2' 'const limb':'const int'
|       `-ImplicitCastExpr 0x26de959a3a0 <col:24, col:28> 'limb':'int' <LValueToRValue>
|         `-ArraySubscriptExpr 0x26de959a368 <col:24, col:28> 'const limb':'const int' lvalue
|           |-ImplicitCastExpr 0x26de959a350 <col:24> 'const limb *':'const limb *' <LValueToRValue>
|           | `-DeclRefExpr 0x26de959a308 <col:24> 'const limb *':'const limb *' lvalue ParmVar 0x26de9598e68 'in' 'const limb *':'const limb *'
|           `-IntegerLiteral 0x26de959a328 <col:27> 'int' 8
|-FunctionDecl 0x26de959a5b0 <line:331:1, line:348:1> line:331:13 used felem_diff64 'void (limb *, const limb *)' static
| |-ParmVarDecl 0x26de959a470 <col:26, col:32> col:32 used out 'limb *':'limb *'
| |-ParmVarDecl 0x26de959a4e8 <col:37, col:49> col:49 used in 'const limb *':'const limb *'
| `-CompoundStmt 0x26de959baf0 <line:332:1, line:348:1>
|   |-DeclStmt 0x26de959a8e0 <line:336:5, col:71>
|   | `-VarDecl 0x26de959a688 <col:5, col:70> col:23 used two62m3 'const limb':'const int' static cinit
|   |   `-BinaryOperator 0x26de959a8c0 <col:33, col:70> 'int' '-'
|   |     |-ParenExpr 0x26de959a7b8 <col:33, col:50> 'limb':'int'
|   |     | `-BinaryOperator 0x26de959a798 <col:34, col:48> 'limb':'int' '<<'
|   |     |   |-ParenExpr 0x26de959a750 <col:34, col:43> 'limb':'int'
|   |     |   | `-CStyleCastExpr 0x26de959a728 <col:35, col:42> 'limb':'int' <NoOp>
|   |     |   |   `-IntegerLiteral 0x26de959a6f0 <col:42> 'int' 1
|   |     |   `-IntegerLiteral 0x26de959a770 <col:48> 'int' 62
|   |     `-ParenExpr 0x26de959a8a0 <col:54, col:70> 'limb':'int'
|   |       `-BinaryOperator 0x26de959a880 <col:55, col:69> 'limb':'int' '<<'
|   |         |-ParenExpr 0x26de959a838 <col:55, col:64> 'limb':'int'
|   |         | `-CStyleCastExpr 0x26de959a810 <col:56, col:63> 'limb':'int' <NoOp>
|   |         |   `-IntegerLiteral 0x26de959a7d8 <col:63> 'int' 1
|   |         `-IntegerLiteral 0x26de959a858 <col:69> 'int' 5
|   |-DeclStmt 0x26de959ab60 <line:337:5, col:71>
|   | `-VarDecl 0x26de959a908 <col:5, col:70> col:23 used two62m2 'const limb':'const int' static cinit
|   |   `-BinaryOperator 0x26de959ab40 <col:33, col:70> 'int' '-'
|   |     |-ParenExpr 0x26de959aa38 <col:33, col:50> 'limb':'int'
|   |     | `-BinaryOperator 0x26de959aa18 <col:34, col:48> 'limb':'int' '<<'
|   |     |   |-ParenExpr 0x26de959a9d0 <col:34, col:43> 'limb':'int'
|   |     |   | `-CStyleCastExpr 0x26de959a9a8 <col:35, col:42> 'limb':'int' <NoOp>
|   |     |   |   `-IntegerLiteral 0x26de959a970 <col:42> 'int' 1
|   |     |   `-IntegerLiteral 0x26de959a9f0 <col:48> 'int' 62
|   |     `-ParenExpr 0x26de959ab20 <col:54, col:70> 'limb':'int'
|   |       `-BinaryOperator 0x26de959ab00 <col:55, col:69> 'limb':'int' '<<'
|   |         |-ParenExpr 0x26de959aab8 <col:55, col:64> 'limb':'int'
|   |         | `-CStyleCastExpr 0x26de959aa90 <col:56, col:63> 'limb':'int' <NoOp>
|   |         |   `-IntegerLiteral 0x26de959aa58 <col:63> 'int' 1
|   |         `-IntegerLiteral 0x26de959aad8 <col:69> 'int' 4
|   |-CompoundAssignOperator 0x26de959ad00 <line:339:5, col:29> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de959abd8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de959abc0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de959ab78 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de959a470 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de959ab98 <col:9> 'int' 0
|   | `-BinaryOperator 0x26de959ace0 <col:15, col:29> 'int' '-'
|   |   |-ImplicitCastExpr 0x26de959acb0 <col:15> 'limb':'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x26de959abf8 <col:15> 'const limb':'const int' lvalue Var 0x26de959a688 'two62m3' 'const limb':'const int'
|   |   `-ImplicitCastExpr 0x26de959acc8 <col:25, col:29> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x26de959ac90 <col:25, col:29> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x26de959ac78 <col:25> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x26de959ac30 <col:25> 'const limb *':'const limb *' lvalue ParmVar 0x26de959a4e8 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x26de959ac50 <col:28> 'int' 0
|   |-CompoundAssignOperator 0x26de959af00 <line:340:5, col:29> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de959add8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de959adc0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de959ad78 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de959a470 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de959ad98 <col:9> 'int' 1
|   | `-BinaryOperator 0x26de959aee0 <col:15, col:29> 'int' '-'
|   |   |-ImplicitCastExpr 0x26de959aeb0 <col:15> 'limb':'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x26de959adf8 <col:15> 'const limb':'const int' lvalue Var 0x26de959a908 'two62m2' 'const limb':'const int'
|   |   `-ImplicitCastExpr 0x26de959aec8 <col:25, col:29> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x26de959ae90 <col:25, col:29> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x26de959ae78 <col:25> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x26de959ae30 <col:25> 'const limb *':'const limb *' lvalue ParmVar 0x26de959a4e8 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x26de959ae50 <col:28> 'int' 1
|   |-CompoundAssignOperator 0x26de959b0e8 <line:341:5, col:29> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de959afd8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de959afc0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de959af78 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de959a470 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de959af98 <col:9> 'int' 2
|   | `-BinaryOperator 0x26de959b0c8 <col:15, col:29> 'int' '-'
|   |   |-ImplicitCastExpr 0x26de959b098 <col:15> 'limb':'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x26de959aff8 <col:15> 'const limb':'const int' lvalue Var 0x26de959a908 'two62m2' 'const limb':'const int'
|   |   `-ImplicitCastExpr 0x26de959b0b0 <col:25, col:29> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x26de959b078 <col:25, col:29> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x26de959b060 <col:25> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x26de959b018 <col:25> 'const limb *':'const limb *' lvalue ParmVar 0x26de959a4e8 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x26de959b038 <col:28> 'int' 2
|   |-CompoundAssignOperator 0x26de959b2a0 <line:342:5, col:29> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de959b190 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de959b178 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de959b130 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de959a470 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de959b150 <col:9> 'int' 3
|   | `-BinaryOperator 0x26de959b280 <col:15, col:29> 'int' '-'
|   |   |-ImplicitCastExpr 0x26de959b250 <col:15> 'limb':'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x26de959b1b0 <col:15> 'const limb':'const int' lvalue Var 0x26de959a908 'two62m2' 'const limb':'const int'
|   |   `-ImplicitCastExpr 0x26de959b268 <col:25, col:29> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x26de959b230 <col:25, col:29> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x26de959b218 <col:25> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x26de959b1d0 <col:25> 'const limb *':'const limb *' lvalue ParmVar 0x26de959a4e8 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x26de959b1f0 <col:28> 'int' 3
|   |-CompoundAssignOperator 0x26de959b440 <line:343:5, col:29> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de959b330 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de959b318 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de959b2d0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de959a470 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de959b2f0 <col:9> 'int' 4
|   | `-BinaryOperator 0x26de959b420 <col:15, col:29> 'int' '-'
|   |   |-ImplicitCastExpr 0x26de959b3f0 <col:15> 'limb':'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x26de959b350 <col:15> 'const limb':'const int' lvalue Var 0x26de959a908 'two62m2' 'const limb':'const int'
|   |   `-ImplicitCastExpr 0x26de959b408 <col:25, col:29> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x26de959b3d0 <col:25, col:29> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x26de959b3b8 <col:25> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x26de959b370 <col:25> 'const limb *':'const limb *' lvalue ParmVar 0x26de959a4e8 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x26de959b390 <col:28> 'int' 4
|   |-CompoundAssignOperator 0x26de959b5e0 <line:344:5, col:29> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de959b4d0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de959b4b8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de959b470 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de959a470 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de959b490 <col:9> 'int' 5
|   | `-BinaryOperator 0x26de959b5c0 <col:15, col:29> 'int' '-'
|   |   |-ImplicitCastExpr 0x26de959b590 <col:15> 'limb':'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x26de959b4f0 <col:15> 'const limb':'const int' lvalue Var 0x26de959a908 'two62m2' 'const limb':'const int'
|   |   `-ImplicitCastExpr 0x26de959b5a8 <col:25, col:29> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x26de959b570 <col:25, col:29> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x26de959b558 <col:25> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x26de959b510 <col:25> 'const limb *':'const limb *' lvalue ParmVar 0x26de959a4e8 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x26de959b530 <col:28> 'int' 5
|   |-CompoundAssignOperator 0x26de959b780 <line:345:5, col:29> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de959b670 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de959b658 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de959b610 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de959a470 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de959b630 <col:9> 'int' 6
|   | `-BinaryOperator 0x26de959b760 <col:15, col:29> 'int' '-'
|   |   |-ImplicitCastExpr 0x26de959b730 <col:15> 'limb':'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x26de959b690 <col:15> 'const limb':'const int' lvalue Var 0x26de959a908 'two62m2' 'const limb':'const int'
|   |   `-ImplicitCastExpr 0x26de959b748 <col:25, col:29> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x26de959b710 <col:25, col:29> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x26de959b6f8 <col:25> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x26de959b6b0 <col:25> 'const limb *':'const limb *' lvalue ParmVar 0x26de959a4e8 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x26de959b6d0 <col:28> 'int' 6
|   |-CompoundAssignOperator 0x26de959b920 <line:346:5, col:29> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de959b810 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de959b7f8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de959b7b0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de959a470 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de959b7d0 <col:9> 'int' 7
|   | `-BinaryOperator 0x26de959b900 <col:15, col:29> 'int' '-'
|   |   |-ImplicitCastExpr 0x26de959b8d0 <col:15> 'limb':'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x26de959b830 <col:15> 'const limb':'const int' lvalue Var 0x26de959a908 'two62m2' 'const limb':'const int'
|   |   `-ImplicitCastExpr 0x26de959b8e8 <col:25, col:29> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x26de959b8b0 <col:25, col:29> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x26de959b898 <col:25> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x26de959b850 <col:25> 'const limb *':'const limb *' lvalue ParmVar 0x26de959a4e8 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x26de959b870 <col:28> 'int' 7
|   `-CompoundAssignOperator 0x26de959bac0 <line:347:5, col:29> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|     |-ArraySubscriptExpr 0x26de959b9b0 <col:5, col:10> 'limb':'int' lvalue
|     | |-ImplicitCastExpr 0x26de959b998 <col:5> 'limb *':'limb *' <LValueToRValue>
|     | | `-DeclRefExpr 0x26de959b950 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de959a470 'out' 'limb *':'limb *'
|     | `-IntegerLiteral 0x26de959b970 <col:9> 'int' 8
|     `-BinaryOperator 0x26de959baa0 <col:15, col:29> 'int' '-'
|       |-ImplicitCastExpr 0x26de959ba70 <col:15> 'limb':'int' <LValueToRValue>
|       | `-DeclRefExpr 0x26de959b9d0 <col:15> 'const limb':'const int' lvalue Var 0x26de959a908 'two62m2' 'const limb':'const int'
|       `-ImplicitCastExpr 0x26de959ba88 <col:25, col:29> 'limb':'int' <LValueToRValue>
|         `-ArraySubscriptExpr 0x26de959ba50 <col:25, col:29> 'const limb':'const int' lvalue
|           |-ImplicitCastExpr 0x26de959ba38 <col:25> 'const limb *':'const limb *' <LValueToRValue>
|           | `-DeclRefExpr 0x26de959b9f0 <col:25> 'const limb *':'const limb *' lvalue ParmVar 0x26de959a4e8 'in' 'const limb *':'const limb *'
|           `-IntegerLiteral 0x26de959ba10 <col:28> 'int' 8
|-FunctionDecl 0x26de959bce8 <line:357:1, line:374:1> line:357:13 used felem_diff_128_64 'void (int *, const limb *)' static
| |-ParmVarDecl 0x26de959bb68 <col:31, col:42> col:42 used out 'int *':'int *'
| |-ParmVarDecl 0x26de959bbe0 <col:47, col:59> col:59 used in 'const limb *':'const limb *'
| `-CompoundStmt 0x26de959d220 <line:358:1, line:374:1>
|   |-DeclStmt 0x26de959c018 <line:362:5, col:71>
|   | `-VarDecl 0x26de959bdc0 <col:5, col:70> col:23 used two63m6 'const limb':'const int' static cinit
|   |   `-BinaryOperator 0x26de959bff8 <col:33, col:70> 'int' '-'
|   |     |-ParenExpr 0x26de959bef0 <col:33, col:50> 'limb':'int'
|   |     | `-BinaryOperator 0x26de959bed0 <col:34, col:48> 'limb':'int' '<<'
|   |     |   |-ParenExpr 0x26de959be88 <col:34, col:43> 'limb':'int'
|   |     |   | `-CStyleCastExpr 0x26de959be60 <col:35, col:42> 'limb':'int' <NoOp>
|   |     |   |   `-IntegerLiteral 0x26de959be28 <col:42> 'int' 1
|   |     |   `-IntegerLiteral 0x26de959bea8 <col:48> 'int' 62
|   |     `-ParenExpr 0x26de959bfd8 <col:54, col:70> 'limb':'int'
|   |       `-BinaryOperator 0x26de959bfb8 <col:55, col:69> 'limb':'int' '<<'
|   |         |-ParenExpr 0x26de959bf70 <col:55, col:64> 'limb':'int'
|   |         | `-CStyleCastExpr 0x26de959bf48 <col:56, col:63> 'limb':'int' <NoOp>
|   |         |   `-IntegerLiteral 0x26de959bf10 <col:63> 'int' 1
|   |         `-IntegerLiteral 0x26de959bf90 <col:69> 'int' 5
|   |-DeclStmt 0x26de959c298 <line:363:5, col:71>
|   | `-VarDecl 0x26de959c040 <col:5, col:70> col:23 used two63m5 'const limb':'const int' static cinit
|   |   `-BinaryOperator 0x26de959c278 <col:33, col:70> 'int' '-'
|   |     |-ParenExpr 0x26de959c170 <col:33, col:50> 'limb':'int'
|   |     | `-BinaryOperator 0x26de959c150 <col:34, col:48> 'limb':'int' '<<'
|   |     |   |-ParenExpr 0x26de959c108 <col:34, col:43> 'limb':'int'
|   |     |   | `-CStyleCastExpr 0x26de959c0e0 <col:35, col:42> 'limb':'int' <NoOp>
|   |     |   |   `-IntegerLiteral 0x26de959c0a8 <col:42> 'int' 1
|   |     |   `-IntegerLiteral 0x26de959c128 <col:48> 'int' 62
|   |     `-ParenExpr 0x26de959c258 <col:54, col:70> 'limb':'int'
|   |       `-BinaryOperator 0x26de959c238 <col:55, col:69> 'limb':'int' '<<'
|   |         |-ParenExpr 0x26de959c1f0 <col:55, col:64> 'limb':'int'
|   |         | `-CStyleCastExpr 0x26de959c1c8 <col:56, col:63> 'limb':'int' <NoOp>
|   |         |   `-IntegerLiteral 0x26de959c190 <col:63> 'int' 1
|   |         `-IntegerLiteral 0x26de959c210 <col:69> 'int' 4
|   |-CompoundAssignOperator 0x26de959c438 <line:365:5, col:29> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de959c310 <col:5, col:10> 'int' lvalue
|   | | |-ImplicitCastExpr 0x26de959c2f8 <col:5> 'int *':'int *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de959c2b0 <col:5> 'int *':'int *' lvalue ParmVar 0x26de959bb68 'out' 'int *':'int *'
|   | | `-IntegerLiteral 0x26de959c2d0 <col:9> 'int' 0
|   | `-BinaryOperator 0x26de959c418 <col:15, col:29> 'int' '-'
|   |   |-ImplicitCastExpr 0x26de959c3e8 <col:15> 'limb':'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x26de959c330 <col:15> 'const limb':'const int' lvalue Var 0x26de959bdc0 'two63m6' 'const limb':'const int'
|   |   `-ImplicitCastExpr 0x26de959c400 <col:25, col:29> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x26de959c3c8 <col:25, col:29> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x26de959c3b0 <col:25> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x26de959c368 <col:25> 'const limb *':'const limb *' lvalue ParmVar 0x26de959bbe0 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x26de959c388 <col:28> 'int' 0
|   |-CompoundAssignOperator 0x26de959c638 <line:366:5, col:29> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de959c510 <col:5, col:10> 'int' lvalue
|   | | |-ImplicitCastExpr 0x26de959c4f8 <col:5> 'int *':'int *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de959c4b0 <col:5> 'int *':'int *' lvalue ParmVar 0x26de959bb68 'out' 'int *':'int *'
|   | | `-IntegerLiteral 0x26de959c4d0 <col:9> 'int' 1
|   | `-BinaryOperator 0x26de959c618 <col:15, col:29> 'int' '-'
|   |   |-ImplicitCastExpr 0x26de959c5e8 <col:15> 'limb':'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x26de959c530 <col:15> 'const limb':'const int' lvalue Var 0x26de959c040 'two63m5' 'const limb':'const int'
|   |   `-ImplicitCastExpr 0x26de959c600 <col:25, col:29> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x26de959c5c8 <col:25, col:29> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x26de959c5b0 <col:25> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x26de959c568 <col:25> 'const limb *':'const limb *' lvalue ParmVar 0x26de959bbe0 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x26de959c588 <col:28> 'int' 1
|   |-CompoundAssignOperator 0x26de959c820 <line:367:5, col:29> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de959c710 <col:5, col:10> 'int' lvalue
|   | | |-ImplicitCastExpr 0x26de959c6f8 <col:5> 'int *':'int *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de959c6b0 <col:5> 'int *':'int *' lvalue ParmVar 0x26de959bb68 'out' 'int *':'int *'
|   | | `-IntegerLiteral 0x26de959c6d0 <col:9> 'int' 2
|   | `-BinaryOperator 0x26de959c800 <col:15, col:29> 'int' '-'
|   |   |-ImplicitCastExpr 0x26de959c7d0 <col:15> 'limb':'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x26de959c730 <col:15> 'const limb':'const int' lvalue Var 0x26de959c040 'two63m5' 'const limb':'const int'
|   |   `-ImplicitCastExpr 0x26de959c7e8 <col:25, col:29> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x26de959c7b0 <col:25, col:29> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x26de959c798 <col:25> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x26de959c750 <col:25> 'const limb *':'const limb *' lvalue ParmVar 0x26de959bbe0 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x26de959c770 <col:28> 'int' 2
|   |-CompoundAssignOperator 0x26de959c9c0 <line:368:5, col:29> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de959c8b0 <col:5, col:10> 'int' lvalue
|   | | |-ImplicitCastExpr 0x26de959c898 <col:5> 'int *':'int *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de959c850 <col:5> 'int *':'int *' lvalue ParmVar 0x26de959bb68 'out' 'int *':'int *'
|   | | `-IntegerLiteral 0x26de959c870 <col:9> 'int' 3
|   | `-BinaryOperator 0x26de959c9a0 <col:15, col:29> 'int' '-'
|   |   |-ImplicitCastExpr 0x26de959c970 <col:15> 'limb':'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x26de959c8d0 <col:15> 'const limb':'const int' lvalue Var 0x26de959c040 'two63m5' 'const limb':'const int'
|   |   `-ImplicitCastExpr 0x26de959c988 <col:25, col:29> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x26de959c950 <col:25, col:29> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x26de959c938 <col:25> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x26de959c8f0 <col:25> 'const limb *':'const limb *' lvalue ParmVar 0x26de959bbe0 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x26de959c910 <col:28> 'int' 3
|   |-CompoundAssignOperator 0x26de959cb60 <line:369:5, col:29> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de959ca50 <col:5, col:10> 'int' lvalue
|   | | |-ImplicitCastExpr 0x26de959ca38 <col:5> 'int *':'int *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de959c9f0 <col:5> 'int *':'int *' lvalue ParmVar 0x26de959bb68 'out' 'int *':'int *'
|   | | `-IntegerLiteral 0x26de959ca10 <col:9> 'int' 4
|   | `-BinaryOperator 0x26de959cb40 <col:15, col:29> 'int' '-'
|   |   |-ImplicitCastExpr 0x26de959cb10 <col:15> 'limb':'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x26de959ca70 <col:15> 'const limb':'const int' lvalue Var 0x26de959c040 'two63m5' 'const limb':'const int'
|   |   `-ImplicitCastExpr 0x26de959cb28 <col:25, col:29> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x26de959caf0 <col:25, col:29> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x26de959cad8 <col:25> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x26de959ca90 <col:25> 'const limb *':'const limb *' lvalue ParmVar 0x26de959bbe0 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x26de959cab0 <col:28> 'int' 4
|   |-CompoundAssignOperator 0x26de959cd00 <line:370:5, col:29> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de959cbf0 <col:5, col:10> 'int' lvalue
|   | | |-ImplicitCastExpr 0x26de959cbd8 <col:5> 'int *':'int *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de959cb90 <col:5> 'int *':'int *' lvalue ParmVar 0x26de959bb68 'out' 'int *':'int *'
|   | | `-IntegerLiteral 0x26de959cbb0 <col:9> 'int' 5
|   | `-BinaryOperator 0x26de959cce0 <col:15, col:29> 'int' '-'
|   |   |-ImplicitCastExpr 0x26de959ccb0 <col:15> 'limb':'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x26de959cc10 <col:15> 'const limb':'const int' lvalue Var 0x26de959c040 'two63m5' 'const limb':'const int'
|   |   `-ImplicitCastExpr 0x26de959ccc8 <col:25, col:29> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x26de959cc90 <col:25, col:29> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x26de959cc78 <col:25> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x26de959cc30 <col:25> 'const limb *':'const limb *' lvalue ParmVar 0x26de959bbe0 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x26de959cc50 <col:28> 'int' 5
|   |-CompoundAssignOperator 0x26de959cea0 <line:371:5, col:29> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de959cd90 <col:5, col:10> 'int' lvalue
|   | | |-ImplicitCastExpr 0x26de959cd78 <col:5> 'int *':'int *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de959cd30 <col:5> 'int *':'int *' lvalue ParmVar 0x26de959bb68 'out' 'int *':'int *'
|   | | `-IntegerLiteral 0x26de959cd50 <col:9> 'int' 6
|   | `-BinaryOperator 0x26de959ce80 <col:15, col:29> 'int' '-'
|   |   |-ImplicitCastExpr 0x26de959ce50 <col:15> 'limb':'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x26de959cdb0 <col:15> 'const limb':'const int' lvalue Var 0x26de959c040 'two63m5' 'const limb':'const int'
|   |   `-ImplicitCastExpr 0x26de959ce68 <col:25, col:29> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x26de959ce30 <col:25, col:29> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x26de959ce18 <col:25> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x26de959cdd0 <col:25> 'const limb *':'const limb *' lvalue ParmVar 0x26de959bbe0 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x26de959cdf0 <col:28> 'int' 6
|   |-CompoundAssignOperator 0x26de959d040 <line:372:5, col:29> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de959cf30 <col:5, col:10> 'int' lvalue
|   | | |-ImplicitCastExpr 0x26de959cf18 <col:5> 'int *':'int *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de959ced0 <col:5> 'int *':'int *' lvalue ParmVar 0x26de959bb68 'out' 'int *':'int *'
|   | | `-IntegerLiteral 0x26de959cef0 <col:9> 'int' 7
|   | `-BinaryOperator 0x26de959d020 <col:15, col:29> 'int' '-'
|   |   |-ImplicitCastExpr 0x26de959cff0 <col:15> 'limb':'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x26de959cf50 <col:15> 'const limb':'const int' lvalue Var 0x26de959c040 'two63m5' 'const limb':'const int'
|   |   `-ImplicitCastExpr 0x26de959d008 <col:25, col:29> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x26de959cfd0 <col:25, col:29> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x26de959cfb8 <col:25> 'const limb *':'const limb *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x26de959cf70 <col:25> 'const limb *':'const limb *' lvalue ParmVar 0x26de959bbe0 'in' 'const limb *':'const limb *'
|   |       `-IntegerLiteral 0x26de959cf90 <col:28> 'int' 7
|   `-CompoundAssignOperator 0x26de959d1f0 <line:373:5, col:29> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|     |-ArraySubscriptExpr 0x26de959d0d0 <col:5, col:10> 'int' lvalue
|     | |-ImplicitCastExpr 0x26de959d0b8 <col:5> 'int *':'int *' <LValueToRValue>
|     | | `-DeclRefExpr 0x26de959d070 <col:5> 'int *':'int *' lvalue ParmVar 0x26de959bb68 'out' 'int *':'int *'
|     | `-IntegerLiteral 0x26de959d090 <col:9> 'int' 8
|     `-BinaryOperator 0x26de959d1d0 <col:15, col:29> 'int' '-'
|       |-ImplicitCastExpr 0x26de959d1a0 <col:15> 'limb':'int' <LValueToRValue>
|       | `-DeclRefExpr 0x26de959d0f0 <col:15> 'const limb':'const int' lvalue Var 0x26de959c040 'two63m5' 'const limb':'const int'
|       `-ImplicitCastExpr 0x26de959d1b8 <col:25, col:29> 'limb':'int' <LValueToRValue>
|         `-ArraySubscriptExpr 0x26de959d180 <col:25, col:29> 'const limb':'const int' lvalue
|           |-ImplicitCastExpr 0x26de959d168 <col:25> 'const limb *':'const limb *' <LValueToRValue>
|           | `-DeclRefExpr 0x26de959d110 <col:25> 'const limb *':'const limb *' lvalue ParmVar 0x26de959bbe0 'in' 'const limb *':'const limb *'
|           `-IntegerLiteral 0x26de959d140 <col:28> 'int' 8
|-FunctionDecl 0x26de959d488 <line:383:1, line:402:1> line:383:13 used felem_diff128 'void (int *, const int *)' static
| |-ParmVarDecl 0x26de959d298 <col:27, col:38> col:38 used out 'int *':'int *'
| |-ParmVarDecl 0x26de959d380 <col:43, col:60> col:60 used in 'const int *':'const int *'
| `-CompoundStmt 0x26de959e020 <line:384:1, line:402:1>
|   |-DeclStmt 0x26de959d620 <line:388:5, line:389:59>
|   | `-VarDecl 0x26de959d568 <line:388:5, col:28> col:28 invalid two127m70 'const int' static
|   `-DeclStmt 0x26de959d708 <line:390:5, line:391:59>
|     `-VarDecl 0x26de959d650 <line:390:5, col:28> col:28 invalid two127m69 'const int' static
|-FunctionDecl 0x26de959e190 <line:411:1, line:485:1> line:411:13 used felem_square 'void (int *, const limb *)' static
| |-ParmVarDecl 0x26de959e050 <col:26, col:37> col:37 used out 'int *':'int *'
| |-ParmVarDecl 0x26de959e0c8 <col:42, col:54> col:54 used in 'const limb *':'const limb *'
| `-CompoundStmt 0x26de95a0530 <line:412:1, line:485:1>
|   |-DeclStmt 0x26de959e360 <line:413:5, col:21>
|   | |-VarDecl 0x26de959e268 <col:5, col:11> col:11 used inx2 'felem':'limb [9]'
|   | `-VarDecl 0x26de959e2e0 <col:5, col:17> col:17 used inx4 'felem':'limb [9]'
|   |-CallExpr 0x26de959e490 <line:414:5, col:29> 'void'
|   | |-ImplicitCastExpr 0x26de959e478 <col:5> 'void (*)(limb *, const limb *, limb)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de959e378 <col:5> 'void (limb *, const limb *, limb)' Function 0x26de9596848 'felem_scalar' 'void (limb *, const limb *, limb)'
|   | |-ImplicitCastExpr 0x26de959e4c8 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de959e398 <col:18> 'felem':'limb [9]' lvalue Var 0x26de959e268 'inx2' 'felem':'limb [9]'
|   | |-ImplicitCastExpr 0x26de959e4e0 <col:24> 'const limb *':'const limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x26de959e3d0 <col:24> 'const limb *':'const limb *' lvalue ParmVar 0x26de959e0c8 'in' 'const limb *':'const limb *'
|   | `-IntegerLiteral 0x26de959e3f0 <col:28> 'int' 2
|   `-CallExpr 0x26de959e5b0 <line:415:5, col:29> 'void'
|     |-ImplicitCastExpr 0x26de959e598 <col:5> 'void (*)(limb *, const limb *, limb)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x26de959e4f8 <col:5> 'void (limb *, const limb *, limb)' Function 0x26de9596848 'felem_scalar' 'void (limb *, const limb *, limb)'
|     |-ImplicitCastExpr 0x26de959e5e8 <col:18> 'limb *' <ArrayToPointerDecay>
|     | `-DeclRefExpr 0x26de959e518 <col:18> 'felem':'limb [9]' lvalue Var 0x26de959e2e0 'inx4' 'felem':'limb [9]'
|     |-ImplicitCastExpr 0x26de959e600 <col:24> 'const limb *':'const limb *' <LValueToRValue>
|     | `-DeclRefExpr 0x26de959e550 <col:24> 'const limb *':'const limb *' lvalue ParmVar 0x26de959e0c8 'in' 'const limb *':'const limb *'
|     `-IntegerLiteral 0x26de959e570 <col:28> 'int' 4
|-FunctionDecl 0x26de95a07c8 <line:495:1, line:599:1> line:495:13 used felem_mul 'void (int *, const limb *, const limb *)' static
| |-ParmVarDecl 0x26de95a0568 <col:23, col:34> col:34 used out 'int *':'int *'
| |-ParmVarDecl 0x26de95a05e0 <col:39, col:51> col:51 in1 'const limb *':'const limb *'
| |-ParmVarDecl 0x26de95a0658 <col:56, col:68> col:68 used in2 'const limb *':'const limb *'
| `-CompoundStmt 0x26de95a3b70 <line:496:1, line:599:1>
|   |-DeclStmt 0x26de95a0910 <line:497:5, col:16>
|   | `-VarDecl 0x26de95a08a8 <col:5, col:11> col:11 used in2x2 'felem':'limb [9]'
|   `-CallExpr 0x26de95a09e0 <line:498:5, col:31> 'void'
|     |-ImplicitCastExpr 0x26de95a09c8 <col:5> 'void (*)(limb *, const limb *, limb)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x26de95a0928 <col:5> 'void (limb *, const limb *, limb)' Function 0x26de9596848 'felem_scalar' 'void (limb *, const limb *, limb)'
|     |-ImplicitCastExpr 0x26de95a0a18 <col:18> 'limb *' <ArrayToPointerDecay>
|     | `-DeclRefExpr 0x26de95a0948 <col:18> 'felem':'limb [9]' lvalue Var 0x26de95a08a8 'in2x2' 'felem':'limb [9]'
|     |-ImplicitCastExpr 0x26de95a0a30 <col:25> 'const limb *':'const limb *' <LValueToRValue>
|     | `-DeclRefExpr 0x26de95a0980 <col:25> 'const limb *':'const limb *' lvalue ParmVar 0x26de95a0658 'in2' 'const limb *':'const limb *'
|     `-IntegerLiteral 0x26de95a09a0 <col:30> 'int' 2
|-VarDecl 0x26de95a3ba0 <line:601:1, col:34> col:19 used bottom52bits 'const limb':'const int' static cinit
| `-ImplicitCastExpr 0x26de95a3c48 <col:34> 'limb':'int' <IntegralCast>
|   `-IntegerLiteral 0x26de95a3c08 <col:34> 'long long' 4503599627370495
|-FunctionDecl 0x26de95a3de8 <line:610:1, line:683:1> line:610:13 used felem_reduce 'void (limb *, const int *)' static
| |-ParmVarDecl 0x26de95a3c70 <col:26, col:32> col:32 used out 'limb *':'limb *'
| |-ParmVarDecl 0x26de95a3ce8 <col:37, col:54> col:54 used in 'const int *':'const int *'
| `-CompoundStmt 0x26de9666388 <line:611:1, line:683:1>
|   |-DeclStmt 0x26de95a3fd8 <line:612:5, col:29>
|   | |-VarDecl 0x26de95a3ee0 <col:5, col:9> col:9 used overflow1 'u64':'int'
|   | `-VarDecl 0x26de95a3f58 <col:5, col:20> col:20 used overflow2 'u64':'int'
|   |-BinaryOperator 0x26de95a41b8 <line:614:5, col:31> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x26de95a4050 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de95a4038 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de95a3ff0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de95a3c70 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de95a4010 <col:9> 'int' 0
|   | `-BinaryOperator 0x26de95a4198 <col:14, col:31> 'int' '&'
|   |   |-ParenExpr 0x26de95a4140 <col:14, col:27> 'limb':'int'
|   |   | `-CStyleCastExpr 0x26de95a4118 <col:15, col:26> 'limb':'int' <NoOp>
|   |   |   `-ImplicitCastExpr 0x26de95a4100 <col:22, col:26> 'int' <LValueToRValue> part_of_explicit_cast
|   |   |     `-ArraySubscriptExpr 0x26de95a40d0 <col:22, col:26> 'const int' lvalue
|   |   |       |-ImplicitCastExpr 0x26de95a40b8 <col:22> 'const int *':'const int *' <LValueToRValue>
|   |   |       | `-DeclRefExpr 0x26de95a4070 <col:22> 'const int *':'const int *' lvalue ParmVar 0x26de95a3ce8 'in' 'const int *':'const int *'
|   |   |       `-IntegerLiteral 0x26de95a4090 <col:25> 'int' 0
|   |   `-ImplicitCastExpr 0x26de95a4180 <col:31> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x26de95a4160 <col:31> 'const limb':'const int' lvalue Var 0x26de958ee10 'bottom58bits' 'const limb':'const int'
|   |-BinaryOperator 0x26de95a43a0 <line:615:5, col:31> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x26de95a4238 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de95a4220 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de95a41d8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de95a3c70 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de95a41f8 <col:9> 'int' 1
|   | `-BinaryOperator 0x26de95a4380 <col:14, col:31> 'int' '&'
|   |   |-ParenExpr 0x26de95a4328 <col:14, col:27> 'limb':'int'
|   |   | `-CStyleCastExpr 0x26de95a4300 <col:15, col:26> 'limb':'int' <NoOp>
|   |   |   `-ImplicitCastExpr 0x26de95a42e8 <col:22, col:26> 'int' <LValueToRValue> part_of_explicit_cast
|   |   |     `-ArraySubscriptExpr 0x26de95a42b8 <col:22, col:26> 'const int' lvalue
|   |   |       |-ImplicitCastExpr 0x26de95a42a0 <col:22> 'const int *':'const int *' <LValueToRValue>
|   |   |       | `-DeclRefExpr 0x26de95a4258 <col:22> 'const int *':'const int *' lvalue ParmVar 0x26de95a3ce8 'in' 'const int *':'const int *'
|   |   |       `-IntegerLiteral 0x26de95a4278 <col:25> 'int' 1
|   |   `-ImplicitCastExpr 0x26de95a4368 <col:31> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x26de95a4348 <col:31> 'const limb':'const int' lvalue Var 0x26de958ee10 'bottom58bits' 'const limb':'const int'
|   |-BinaryOperator 0x26de95a4588 <line:616:5, col:31> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x26de95a4420 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de95a4408 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de95a43c0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de95a3c70 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de95a43e0 <col:9> 'int' 2
|   | `-BinaryOperator 0x26de95a4568 <col:14, col:31> 'int' '&'
|   |   |-ParenExpr 0x26de95a4510 <col:14, col:27> 'limb':'int'
|   |   | `-CStyleCastExpr 0x26de95a44e8 <col:15, col:26> 'limb':'int' <NoOp>
|   |   |   `-ImplicitCastExpr 0x26de95a44d0 <col:22, col:26> 'int' <LValueToRValue> part_of_explicit_cast
|   |   |     `-ArraySubscriptExpr 0x26de95a44a0 <col:22, col:26> 'const int' lvalue
|   |   |       |-ImplicitCastExpr 0x26de95a4488 <col:22> 'const int *':'const int *' <LValueToRValue>
|   |   |       | `-DeclRefExpr 0x26de95a4440 <col:22> 'const int *':'const int *' lvalue ParmVar 0x26de95a3ce8 'in' 'const int *':'const int *'
|   |   |       `-IntegerLiteral 0x26de95a4460 <col:25> 'int' 2
|   |   `-ImplicitCastExpr 0x26de95a4550 <col:31> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x26de95a4530 <col:31> 'const limb':'const int' lvalue Var 0x26de958ee10 'bottom58bits' 'const limb':'const int'
|   |-BinaryOperator 0x26de95a4770 <line:617:5, col:31> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x26de95a4608 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de95a45f0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de95a45a8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de95a3c70 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de95a45c8 <col:9> 'int' 3
|   | `-BinaryOperator 0x26de95a4750 <col:14, col:31> 'int' '&'
|   |   |-ParenExpr 0x26de95a46f8 <col:14, col:27> 'limb':'int'
|   |   | `-CStyleCastExpr 0x26de95a46d0 <col:15, col:26> 'limb':'int' <NoOp>
|   |   |   `-ImplicitCastExpr 0x26de95a46b8 <col:22, col:26> 'int' <LValueToRValue> part_of_explicit_cast
|   |   |     `-ArraySubscriptExpr 0x26de95a4688 <col:22, col:26> 'const int' lvalue
|   |   |       |-ImplicitCastExpr 0x26de95a4670 <col:22> 'const int *':'const int *' <LValueToRValue>
|   |   |       | `-DeclRefExpr 0x26de95a4628 <col:22> 'const int *':'const int *' lvalue ParmVar 0x26de95a3ce8 'in' 'const int *':'const int *'
|   |   |       `-IntegerLiteral 0x26de95a4648 <col:25> 'int' 3
|   |   `-ImplicitCastExpr 0x26de95a4738 <col:31> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x26de95a4718 <col:31> 'const limb':'const int' lvalue Var 0x26de958ee10 'bottom58bits' 'const limb':'const int'
|   |-BinaryOperator 0x26de95a4958 <line:618:5, col:31> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x26de95a47f0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de95a47d8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de95a4790 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de95a3c70 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de95a47b0 <col:9> 'int' 4
|   | `-BinaryOperator 0x26de95a4938 <col:14, col:31> 'int' '&'
|   |   |-ParenExpr 0x26de95a48e0 <col:14, col:27> 'limb':'int'
|   |   | `-CStyleCastExpr 0x26de95a48b8 <col:15, col:26> 'limb':'int' <NoOp>
|   |   |   `-ImplicitCastExpr 0x26de95a48a0 <col:22, col:26> 'int' <LValueToRValue> part_of_explicit_cast
|   |   |     `-ArraySubscriptExpr 0x26de95a4870 <col:22, col:26> 'const int' lvalue
|   |   |       |-ImplicitCastExpr 0x26de95a4858 <col:22> 'const int *':'const int *' <LValueToRValue>
|   |   |       | `-DeclRefExpr 0x26de95a4810 <col:22> 'const int *':'const int *' lvalue ParmVar 0x26de95a3ce8 'in' 'const int *':'const int *'
|   |   |       `-IntegerLiteral 0x26de95a4830 <col:25> 'int' 4
|   |   `-ImplicitCastExpr 0x26de95a4920 <col:31> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x26de95a4900 <col:31> 'const limb':'const int' lvalue Var 0x26de958ee10 'bottom58bits' 'const limb':'const int'
|   |-BinaryOperator 0x26de95a4b40 <line:619:5, col:31> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x26de95a49d8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de95a49c0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de95a4978 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de95a3c70 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de95a4998 <col:9> 'int' 5
|   | `-BinaryOperator 0x26de95a4b20 <col:14, col:31> 'int' '&'
|   |   |-ParenExpr 0x26de95a4ac8 <col:14, col:27> 'limb':'int'
|   |   | `-CStyleCastExpr 0x26de95a4aa0 <col:15, col:26> 'limb':'int' <NoOp>
|   |   |   `-ImplicitCastExpr 0x26de95a4a88 <col:22, col:26> 'int' <LValueToRValue> part_of_explicit_cast
|   |   |     `-ArraySubscriptExpr 0x26de95a4a58 <col:22, col:26> 'const int' lvalue
|   |   |       |-ImplicitCastExpr 0x26de95a4a40 <col:22> 'const int *':'const int *' <LValueToRValue>
|   |   |       | `-DeclRefExpr 0x26de95a49f8 <col:22> 'const int *':'const int *' lvalue ParmVar 0x26de95a3ce8 'in' 'const int *':'const int *'
|   |   |       `-IntegerLiteral 0x26de95a4a18 <col:25> 'int' 5
|   |   `-ImplicitCastExpr 0x26de95a4b08 <col:31> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x26de95a4ae8 <col:31> 'const limb':'const int' lvalue Var 0x26de958ee10 'bottom58bits' 'const limb':'const int'
|   |-BinaryOperator 0x26de95a4d28 <line:620:5, col:31> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x26de95a4bc0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de95a4ba8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de95a4b60 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de95a3c70 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de95a4b80 <col:9> 'int' 6
|   | `-BinaryOperator 0x26de95a4d08 <col:14, col:31> 'int' '&'
|   |   |-ParenExpr 0x26de95a4cb0 <col:14, col:27> 'limb':'int'
|   |   | `-CStyleCastExpr 0x26de95a4c88 <col:15, col:26> 'limb':'int' <NoOp>
|   |   |   `-ImplicitCastExpr 0x26de95a4c70 <col:22, col:26> 'int' <LValueToRValue> part_of_explicit_cast
|   |   |     `-ArraySubscriptExpr 0x26de95a4c40 <col:22, col:26> 'const int' lvalue
|   |   |       |-ImplicitCastExpr 0x26de95a4c28 <col:22> 'const int *':'const int *' <LValueToRValue>
|   |   |       | `-DeclRefExpr 0x26de95a4be0 <col:22> 'const int *':'const int *' lvalue ParmVar 0x26de95a3ce8 'in' 'const int *':'const int *'
|   |   |       `-IntegerLiteral 0x26de95a4c00 <col:25> 'int' 6
|   |   `-ImplicitCastExpr 0x26de95a4cf0 <col:31> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x26de95a4cd0 <col:31> 'const limb':'const int' lvalue Var 0x26de958ee10 'bottom58bits' 'const limb':'const int'
|   |-BinaryOperator 0x26de95a4f10 <line:621:5, col:31> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x26de95a4da8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de95a4d90 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de95a4d48 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de95a3c70 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de95a4d68 <col:9> 'int' 7
|   | `-BinaryOperator 0x26de95a4ef0 <col:14, col:31> 'int' '&'
|   |   |-ParenExpr 0x26de95a4e98 <col:14, col:27> 'limb':'int'
|   |   | `-CStyleCastExpr 0x26de95a4e70 <col:15, col:26> 'limb':'int' <NoOp>
|   |   |   `-ImplicitCastExpr 0x26de95a4e58 <col:22, col:26> 'int' <LValueToRValue> part_of_explicit_cast
|   |   |     `-ArraySubscriptExpr 0x26de95a4e28 <col:22, col:26> 'const int' lvalue
|   |   |       |-ImplicitCastExpr 0x26de95a4e10 <col:22> 'const int *':'const int *' <LValueToRValue>
|   |   |       | `-DeclRefExpr 0x26de95a4dc8 <col:22> 'const int *':'const int *' lvalue ParmVar 0x26de95a3ce8 'in' 'const int *':'const int *'
|   |   |       `-IntegerLiteral 0x26de95a4de8 <col:25> 'int' 7
|   |   `-ImplicitCastExpr 0x26de95a4ed8 <col:31> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x26de95a4eb8 <col:31> 'const limb':'const int' lvalue Var 0x26de958ee10 'bottom58bits' 'const limb':'const int'
|   |-BinaryOperator 0x26de95a50f8 <line:622:5, col:31> 'limb':'int' '='
|   | |-ArraySubscriptExpr 0x26de95a4f90 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de95a4f78 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de95a4f30 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de95a3c70 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de95a4f50 <col:9> 'int' 8
|   | `-BinaryOperator 0x26de95a50d8 <col:14, col:31> 'int' '&'
|   |   |-ParenExpr 0x26de95a5080 <col:14, col:27> 'limb':'int'
|   |   | `-CStyleCastExpr 0x26de95a5058 <col:15, col:26> 'limb':'int' <NoOp>
|   |   |   `-ImplicitCastExpr 0x26de95a5040 <col:22, col:26> 'int' <LValueToRValue> part_of_explicit_cast
|   |   |     `-ArraySubscriptExpr 0x26de95a5010 <col:22, col:26> 'const int' lvalue
|   |   |       |-ImplicitCastExpr 0x26de95a4ff8 <col:22> 'const int *':'const int *' <LValueToRValue>
|   |   |       | `-DeclRefExpr 0x26de95a4fb0 <col:22> 'const int *':'const int *' lvalue ParmVar 0x26de95a3ce8 'in' 'const int *':'const int *'
|   |   |       `-IntegerLiteral 0x26de95a4fd0 <col:25> 'int' 8
|   |   `-ImplicitCastExpr 0x26de95a50c0 <col:31> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x26de95a50a0 <col:31> 'const limb':'const int' lvalue Var 0x26de958ee10 'bottom58bits' 'const limb':'const int'
|   |-CompoundAssignOperator 0x26de95a52f0 <line:626:5, col:33> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de95a5198 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de95a5180 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de95a5118 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de95a3c70 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de95a5138 <col:9> 'int' 1
|   | `-BinaryOperator 0x26de95a52d0 <col:15, col:33> 'limb':'int' '>>'
|   |   |-ParenExpr 0x26de95a5288 <col:15, col:28> 'limb':'int'
|   |   | `-CStyleCastExpr 0x26de95a5260 <col:16, col:27> 'limb':'int' <NoOp>
|   |   |   `-ImplicitCastExpr 0x26de95a5248 <col:23, col:27> 'int' <LValueToRValue> part_of_explicit_cast
|   |   |     `-ArraySubscriptExpr 0x26de95a5218 <col:23, col:27> 'const int' lvalue
|   |   |       |-ImplicitCastExpr 0x26de95a5200 <col:23> 'const int *':'const int *' <LValueToRValue>
|   |   |       | `-DeclRefExpr 0x26de95a51b8 <col:23> 'const int *':'const int *' lvalue ParmVar 0x26de95a3ce8 'in' 'const int *':'const int *'
|   |   |       `-IntegerLiteral 0x26de95a51d8 <col:26> 'int' 0
|   |   `-IntegerLiteral 0x26de95a52a8 <col:33> 'int' 58
|   |-CompoundAssignOperator 0x26de95a55d8 <line:627:5, col:58> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de95a5380 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de95a5368 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de95a5320 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de95a3c70 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de95a5340 <col:9> 'int' 1
|   | `-BinaryOperator 0x26de95a55b8 <col:15, col:58> 'int' '<<'
|   |   |-ParenExpr 0x26de95a5570 <col:15, col:53> 'int'
|   |   | `-BinaryOperator 0x26de95a5550 <col:16, col:41> 'int' '&'
|   |   |   |-ParenExpr 0x26de95a54f8 <col:16, col:37> 'limb':'int'
|   |   |   | `-CStyleCastExpr 0x26de95a54d0 <col:17, col:36> 'limb':'int' <NoOp>
|   |   |   |   `-ParenExpr 0x26de95a54b0 <col:24, col:36> 'int'
|   |   |   |     `-BinaryOperator 0x26de95a5460 <col:25, col:34> 'int' '>>'
|   |   |   |       |-ImplicitCastExpr 0x26de95a5448 <col:25, col:29> 'int' <LValueToRValue>
|   |   |   |       | `-ArraySubscriptExpr 0x26de95a5400 <col:25, col:29> 'const int' lvalue
|   |   |   |       |   |-ImplicitCastExpr 0x26de95a53e8 <col:25> 'const int *':'const int *' <LValueToRValue>
|   |   |   |       |   | `-DeclRefExpr 0x26de95a53a0 <col:25> 'const int *':'const int *' lvalue ParmVar 0x26de95a3ce8 'in' 'const int *':'const int *'
|   |   |   |       |   `-IntegerLiteral 0x26de95a53c0 <col:28> 'int' 0
|   |   |   |       `-IntegerLiteral 0x26de95a5420 <col:34> 'int' 64
|   |   |   `-ImplicitCastExpr 0x26de95a5538 <col:41> 'limb':'int' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x26de95a5518 <col:41> 'const limb':'const int' lvalue Var 0x26de95a3ba0 'bottom52bits' 'const limb':'const int'
|   |   `-IntegerLiteral 0x26de95a5590 <col:58> 'int' 6
|   |-CompoundAssignOperator 0x26de95a5890 <line:632:5, col:41> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de95a56b0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de95a5698 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de95a5650 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de95a3c70 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de95a5670 <col:9> 'int' 2
|   | `-BinaryOperator 0x26de95a5870 <col:15, col:41> 'limb':'int' '>>'
|   |   |-ParenExpr 0x26de95a5828 <col:15, col:36> 'limb':'int'
|   |   | `-CStyleCastExpr 0x26de95a5800 <col:16, col:35> 'limb':'int' <NoOp>
|   |   |   `-ParenExpr 0x26de95a57e0 <col:23, col:35> 'int'
|   |   |     `-BinaryOperator 0x26de95a5790 <col:24, col:33> 'int' '>>'
|   |   |       |-ImplicitCastExpr 0x26de95a5778 <col:24, col:28> 'int' <LValueToRValue>
|   |   |       | `-ArraySubscriptExpr 0x26de95a5730 <col:24, col:28> 'const int' lvalue
|   |   |       |   |-ImplicitCastExpr 0x26de95a5718 <col:24> 'const int *':'const int *' <LValueToRValue>
|   |   |       |   | `-DeclRefExpr 0x26de95a56d0 <col:24> 'const int *':'const int *' lvalue ParmVar 0x26de95a3ce8 'in' 'const int *':'const int *'
|   |   |       |   `-IntegerLiteral 0x26de95a56f0 <col:27> 'int' 0
|   |   |       `-IntegerLiteral 0x26de95a5750 <col:33> 'int' 64
|   |   `-IntegerLiteral 0x26de95a5848 <col:41> 'int' 52
|   |-CompoundAssignOperator 0x26de95a5a78 <line:634:5, col:33> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de95a5920 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de95a5908 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de95a58c0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de95a3c70 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de95a58e0 <col:9> 'int' 2
|   | `-BinaryOperator 0x26de95a5a58 <col:15, col:33> 'limb':'int' '>>'
|   |   |-ParenExpr 0x26de95a5a10 <col:15, col:28> 'limb':'int'
|   |   | `-CStyleCastExpr 0x26de95a59e8 <col:16, col:27> 'limb':'int' <NoOp>
|   |   |   `-ImplicitCastExpr 0x26de95a59d0 <col:23, col:27> 'int' <LValueToRValue> part_of_explicit_cast
|   |   |     `-ArraySubscriptExpr 0x26de95a59a0 <col:23, col:27> 'const int' lvalue
|   |   |       |-ImplicitCastExpr 0x26de95a5988 <col:23> 'const int *':'const int *' <LValueToRValue>
|   |   |       | `-DeclRefExpr 0x26de95a5940 <col:23> 'const int *':'const int *' lvalue ParmVar 0x26de95a3ce8 'in' 'const int *':'const int *'
|   |   |       `-IntegerLiteral 0x26de95a5960 <col:26> 'int' 1
|   |   `-IntegerLiteral 0x26de95a5a30 <col:33> 'int' 58
|   |-CompoundAssignOperator 0x26de95a5d60 <line:635:5, col:58> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de95a5b08 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de95a5af0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de95a5aa8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de95a3c70 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de95a5ac8 <col:9> 'int' 2
|   | `-BinaryOperator 0x26de95a5d40 <col:15, col:58> 'int' '<<'
|   |   |-ParenExpr 0x26de95a5cf8 <col:15, col:53> 'int'
|   |   | `-BinaryOperator 0x26de95a5cd8 <col:16, col:41> 'int' '&'
|   |   |   |-ParenExpr 0x26de95a5c80 <col:16, col:37> 'limb':'int'
|   |   |   | `-CStyleCastExpr 0x26de95a5c58 <col:17, col:36> 'limb':'int' <NoOp>
|   |   |   |   `-ParenExpr 0x26de95a5c38 <col:24, col:36> 'int'
|   |   |   |     `-BinaryOperator 0x26de95a5be8 <col:25, col:34> 'int' '>>'
|   |   |   |       |-ImplicitCastExpr 0x26de95a5bd0 <col:25, col:29> 'int' <LValueToRValue>
|   |   |   |       | `-ArraySubscriptExpr 0x26de95a5b88 <col:25, col:29> 'const int' lvalue
|   |   |   |       |   |-ImplicitCastExpr 0x26de95a5b70 <col:25> 'const int *':'const int *' <LValueToRValue>
|   |   |   |       |   | `-DeclRefExpr 0x26de95a5b28 <col:25> 'const int *':'const int *' lvalue ParmVar 0x26de95a3ce8 'in' 'const int *':'const int *'
|   |   |   |       |   `-IntegerLiteral 0x26de95a5b48 <col:28> 'int' 1
|   |   |   |       `-IntegerLiteral 0x26de95a5ba8 <col:34> 'int' 64
|   |   |   `-ImplicitCastExpr 0x26de95a5cc0 <col:41> 'limb':'int' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x26de95a5ca0 <col:41> 'const limb':'const int' lvalue Var 0x26de95a3ba0 'bottom52bits' 'const limb':'const int'
|   |   `-IntegerLiteral 0x26de95a5d18 <col:58> 'int' 6
|   |-CompoundAssignOperator 0x26de95a5fd0 <line:636:5, col:41> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de95a5df0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de95a5dd8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de95a5d90 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de95a3c70 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de95a5db0 <col:9> 'int' 3
|   | `-BinaryOperator 0x26de95a5fb0 <col:15, col:41> 'limb':'int' '>>'
|   |   |-ParenExpr 0x26de95a5f68 <col:15, col:36> 'limb':'int'
|   |   | `-CStyleCastExpr 0x26de95a5f40 <col:16, col:35> 'limb':'int' <NoOp>
|   |   |   `-ParenExpr 0x26de95a5f20 <col:23, col:35> 'int'
|   |   |     `-BinaryOperator 0x26de95a5ed0 <col:24, col:33> 'int' '>>'
|   |   |       |-ImplicitCastExpr 0x26de95a5eb8 <col:24, col:28> 'int' <LValueToRValue>
|   |   |       | `-ArraySubscriptExpr 0x26de95a5e70 <col:24, col:28> 'const int' lvalue
|   |   |       |   |-ImplicitCastExpr 0x26de95a5e58 <col:24> 'const int *':'const int *' <LValueToRValue>
|   |   |       |   | `-DeclRefExpr 0x26de95a5e10 <col:24> 'const int *':'const int *' lvalue ParmVar 0x26de95a3ce8 'in' 'const int *':'const int *'
|   |   |       |   `-IntegerLiteral 0x26de95a5e30 <col:27> 'int' 1
|   |   |       `-IntegerLiteral 0x26de95a5e90 <col:33> 'int' 64
|   |   `-IntegerLiteral 0x26de95a5f88 <col:41> 'int' 52
|   |-CompoundAssignOperator 0x26de95a61b8 <line:638:5, col:33> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de95a6060 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de95a6048 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de95a6000 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de95a3c70 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de95a6020 <col:9> 'int' 3
|   | `-BinaryOperator 0x26de95a6198 <col:15, col:33> 'limb':'int' '>>'
|   |   |-ParenExpr 0x26de95a6150 <col:15, col:28> 'limb':'int'
|   |   | `-CStyleCastExpr 0x26de95a6128 <col:16, col:27> 'limb':'int' <NoOp>
|   |   |   `-ImplicitCastExpr 0x26de95a6110 <col:23, col:27> 'int' <LValueToRValue> part_of_explicit_cast
|   |   |     `-ArraySubscriptExpr 0x26de95a60e0 <col:23, col:27> 'const int' lvalue
|   |   |       |-ImplicitCastExpr 0x26de95a60c8 <col:23> 'const int *':'const int *' <LValueToRValue>
|   |   |       | `-DeclRefExpr 0x26de95a6080 <col:23> 'const int *':'const int *' lvalue ParmVar 0x26de95a3ce8 'in' 'const int *':'const int *'
|   |   |       `-IntegerLiteral 0x26de95a60a0 <col:26> 'int' 2
|   |   `-IntegerLiteral 0x26de95a6170 <col:33> 'int' 58
|   |-CompoundAssignOperator 0x26de95a64a0 <line:639:5, col:58> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de95a6248 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de95a6230 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de95a61e8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de95a3c70 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de95a6208 <col:9> 'int' 3
|   | `-BinaryOperator 0x26de95a6480 <col:15, col:58> 'int' '<<'
|   |   |-ParenExpr 0x26de95a6438 <col:15, col:53> 'int'
|   |   | `-BinaryOperator 0x26de95a6418 <col:16, col:41> 'int' '&'
|   |   |   |-ParenExpr 0x26de95a63c0 <col:16, col:37> 'limb':'int'
|   |   |   | `-CStyleCastExpr 0x26de95a6398 <col:17, col:36> 'limb':'int' <NoOp>
|   |   |   |   `-ParenExpr 0x26de95a6378 <col:24, col:36> 'int'
|   |   |   |     `-BinaryOperator 0x26de95a6328 <col:25, col:34> 'int' '>>'
|   |   |   |       |-ImplicitCastExpr 0x26de95a6310 <col:25, col:29> 'int' <LValueToRValue>
|   |   |   |       | `-ArraySubscriptExpr 0x26de95a62c8 <col:25, col:29> 'const int' lvalue
|   |   |   |       |   |-ImplicitCastExpr 0x26de95a62b0 <col:25> 'const int *':'const int *' <LValueToRValue>
|   |   |   |       |   | `-DeclRefExpr 0x26de95a6268 <col:25> 'const int *':'const int *' lvalue ParmVar 0x26de95a3ce8 'in' 'const int *':'const int *'
|   |   |   |       |   `-IntegerLiteral 0x26de95a6288 <col:28> 'int' 2
|   |   |   |       `-IntegerLiteral 0x26de95a62e8 <col:34> 'int' 64
|   |   |   `-ImplicitCastExpr 0x26de95a6400 <col:41> 'limb':'int' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x26de95a63e0 <col:41> 'const limb':'const int' lvalue Var 0x26de95a3ba0 'bottom52bits' 'const limb':'const int'
|   |   `-IntegerLiteral 0x26de95a6458 <col:58> 'int' 6
|   |-CompoundAssignOperator 0x26de95a6710 <line:640:5, col:41> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de95a6530 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de95a6518 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de95a64d0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de95a3c70 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de95a64f0 <col:9> 'int' 4
|   | `-BinaryOperator 0x26de95a66f0 <col:15, col:41> 'limb':'int' '>>'
|   |   |-ParenExpr 0x26de95a66a8 <col:15, col:36> 'limb':'int'
|   |   | `-CStyleCastExpr 0x26de95a6680 <col:16, col:35> 'limb':'int' <NoOp>
|   |   |   `-ParenExpr 0x26de95a6660 <col:23, col:35> 'int'
|   |   |     `-BinaryOperator 0x26de95a6610 <col:24, col:33> 'int' '>>'
|   |   |       |-ImplicitCastExpr 0x26de95a65f8 <col:24, col:28> 'int' <LValueToRValue>
|   |   |       | `-ArraySubscriptExpr 0x26de95a65b0 <col:24, col:28> 'const int' lvalue
|   |   |       |   |-ImplicitCastExpr 0x26de95a6598 <col:24> 'const int *':'const int *' <LValueToRValue>
|   |   |       |   | `-DeclRefExpr 0x26de95a6550 <col:24> 'const int *':'const int *' lvalue ParmVar 0x26de95a3ce8 'in' 'const int *':'const int *'
|   |   |       |   `-IntegerLiteral 0x26de95a6570 <col:27> 'int' 2
|   |   |       `-IntegerLiteral 0x26de95a65d0 <col:33> 'int' 64
|   |   `-IntegerLiteral 0x26de95a66c8 <col:41> 'int' 52
|   |-CompoundAssignOperator 0x26de95a68f8 <line:642:5, col:33> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de95a67a0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de95a6788 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de95a6740 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de95a3c70 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de95a6760 <col:9> 'int' 4
|   | `-BinaryOperator 0x26de95a68d8 <col:15, col:33> 'limb':'int' '>>'
|   |   |-ParenExpr 0x26de95a6890 <col:15, col:28> 'limb':'int'
|   |   | `-CStyleCastExpr 0x26de95a6868 <col:16, col:27> 'limb':'int' <NoOp>
|   |   |   `-ImplicitCastExpr 0x26de95a6850 <col:23, col:27> 'int' <LValueToRValue> part_of_explicit_cast
|   |   |     `-ArraySubscriptExpr 0x26de95a6820 <col:23, col:27> 'const int' lvalue
|   |   |       |-ImplicitCastExpr 0x26de95a6808 <col:23> 'const int *':'const int *' <LValueToRValue>
|   |   |       | `-DeclRefExpr 0x26de95a67c0 <col:23> 'const int *':'const int *' lvalue ParmVar 0x26de95a3ce8 'in' 'const int *':'const int *'
|   |   |       `-IntegerLiteral 0x26de95a67e0 <col:26> 'int' 3
|   |   `-IntegerLiteral 0x26de95a68b0 <col:33> 'int' 58
|   |-CompoundAssignOperator 0x26de95a6be0 <line:643:5, col:58> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de95a6988 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de95a6970 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de95a6928 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de95a3c70 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de95a6948 <col:9> 'int' 4
|   | `-BinaryOperator 0x26de95a6bc0 <col:15, col:58> 'int' '<<'
|   |   |-ParenExpr 0x26de95a6b78 <col:15, col:53> 'int'
|   |   | `-BinaryOperator 0x26de95a6b58 <col:16, col:41> 'int' '&'
|   |   |   |-ParenExpr 0x26de95a6b00 <col:16, col:37> 'limb':'int'
|   |   |   | `-CStyleCastExpr 0x26de95a6ad8 <col:17, col:36> 'limb':'int' <NoOp>
|   |   |   |   `-ParenExpr 0x26de95a6ab8 <col:24, col:36> 'int'
|   |   |   |     `-BinaryOperator 0x26de95a6a68 <col:25, col:34> 'int' '>>'
|   |   |   |       |-ImplicitCastExpr 0x26de95a6a50 <col:25, col:29> 'int' <LValueToRValue>
|   |   |   |       | `-ArraySubscriptExpr 0x26de95a6a08 <col:25, col:29> 'const int' lvalue
|   |   |   |       |   |-ImplicitCastExpr 0x26de95a69f0 <col:25> 'const int *':'const int *' <LValueToRValue>
|   |   |   |       |   | `-DeclRefExpr 0x26de95a69a8 <col:25> 'const int *':'const int *' lvalue ParmVar 0x26de95a3ce8 'in' 'const int *':'const int *'
|   |   |   |       |   `-IntegerLiteral 0x26de95a69c8 <col:28> 'int' 3
|   |   |   |       `-IntegerLiteral 0x26de95a6a28 <col:34> 'int' 64
|   |   |   `-ImplicitCastExpr 0x26de95a6b40 <col:41> 'limb':'int' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x26de95a6b20 <col:41> 'const limb':'const int' lvalue Var 0x26de95a3ba0 'bottom52bits' 'const limb':'const int'
|   |   `-IntegerLiteral 0x26de95a6b98 <col:58> 'int' 6
|   |-CompoundAssignOperator 0x26de95a6e50 <line:644:5, col:41> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de95a6c70 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de95a6c58 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de95a6c10 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de95a3c70 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de95a6c30 <col:9> 'int' 5
|   | `-BinaryOperator 0x26de95a6e30 <col:15, col:41> 'limb':'int' '>>'
|   |   |-ParenExpr 0x26de95a6de8 <col:15, col:36> 'limb':'int'
|   |   | `-CStyleCastExpr 0x26de95a6dc0 <col:16, col:35> 'limb':'int' <NoOp>
|   |   |   `-ParenExpr 0x26de95a6da0 <col:23, col:35> 'int'
|   |   |     `-BinaryOperator 0x26de95a6d50 <col:24, col:33> 'int' '>>'
|   |   |       |-ImplicitCastExpr 0x26de95a6d38 <col:24, col:28> 'int' <LValueToRValue>
|   |   |       | `-ArraySubscriptExpr 0x26de95a6cf0 <col:24, col:28> 'const int' lvalue
|   |   |       |   |-ImplicitCastExpr 0x26de95a6cd8 <col:24> 'const int *':'const int *' <LValueToRValue>
|   |   |       |   | `-DeclRefExpr 0x26de95a6c90 <col:24> 'const int *':'const int *' lvalue ParmVar 0x26de95a3ce8 'in' 'const int *':'const int *'
|   |   |       |   `-IntegerLiteral 0x26de95a6cb0 <col:27> 'int' 3
|   |   |       `-IntegerLiteral 0x26de95a6d10 <col:33> 'int' 64
|   |   `-IntegerLiteral 0x26de95a6e08 <col:41> 'int' 52
|   |-CompoundAssignOperator 0x26de95a7038 <line:646:5, col:33> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de95a6ee0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de95a6ec8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de95a6e80 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de95a3c70 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de95a6ea0 <col:9> 'int' 5
|   | `-BinaryOperator 0x26de95a7018 <col:15, col:33> 'limb':'int' '>>'
|   |   |-ParenExpr 0x26de95a6fd0 <col:15, col:28> 'limb':'int'
|   |   | `-CStyleCastExpr 0x26de95a6fa8 <col:16, col:27> 'limb':'int' <NoOp>
|   |   |   `-ImplicitCastExpr 0x26de95a6f90 <col:23, col:27> 'int' <LValueToRValue> part_of_explicit_cast
|   |   |     `-ArraySubscriptExpr 0x26de95a6f60 <col:23, col:27> 'const int' lvalue
|   |   |       |-ImplicitCastExpr 0x26de95a6f48 <col:23> 'const int *':'const int *' <LValueToRValue>
|   |   |       | `-DeclRefExpr 0x26de95a6f00 <col:23> 'const int *':'const int *' lvalue ParmVar 0x26de95a3ce8 'in' 'const int *':'const int *'
|   |   |       `-IntegerLiteral 0x26de95a6f20 <col:26> 'int' 4
|   |   `-IntegerLiteral 0x26de95a6ff0 <col:33> 'int' 58
|   |-CompoundAssignOperator 0x26de95a7348 <line:647:5, col:58> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de95a70c8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de95a70b0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de95a7068 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de95a3c70 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de95a7088 <col:9> 'int' 5
|   | `-BinaryOperator 0x26de95a7328 <col:15, col:58> 'int' '<<'
|   |   |-ParenExpr 0x26de95a72e0 <col:15, col:53> 'int'
|   |   | `-BinaryOperator 0x26de95a72c0 <col:16, col:41> 'int' '&'
|   |   |   |-ParenExpr 0x26de95a7268 <col:16, col:37> 'limb':'int'
|   |   |   | `-CStyleCastExpr 0x26de95a7240 <col:17, col:36> 'limb':'int' <NoOp>
|   |   |   |   `-ParenExpr 0x26de95a7220 <col:24, col:36> 'int'
|   |   |   |     `-BinaryOperator 0x26de95a71d0 <col:25, col:34> 'int' '>>'
|   |   |   |       |-ImplicitCastExpr 0x26de95a71b8 <col:25, col:29> 'int' <LValueToRValue>
|   |   |   |       | `-ArraySubscriptExpr 0x26de95a7148 <col:25, col:29> 'const int' lvalue
|   |   |   |       |   |-ImplicitCastExpr 0x26de95a7130 <col:25> 'const int *':'const int *' <LValueToRValue>
|   |   |   |       |   | `-DeclRefExpr 0x26de95a70e8 <col:25> 'const int *':'const int *' lvalue ParmVar 0x26de95a3ce8 'in' 'const int *':'const int *'
|   |   |   |       |   `-IntegerLiteral 0x26de95a7108 <col:28> 'int' 4
|   |   |   |       `-IntegerLiteral 0x26de95a7190 <col:34> 'int' 64
|   |   |   `-ImplicitCastExpr 0x26de95a72a8 <col:41> 'limb':'int' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x26de95a7288 <col:41> 'const limb':'const int' lvalue Var 0x26de95a3ba0 'bottom52bits' 'const limb':'const int'
|   |   `-IntegerLiteral 0x26de95a7300 <col:58> 'int' 6
|   |-CompoundAssignOperator 0x26de95a75b8 <line:648:5, col:41> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de95a73d8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de95a73c0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de95a7378 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de95a3c70 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de95a7398 <col:9> 'int' 6
|   | `-BinaryOperator 0x26de95a7598 <col:15, col:41> 'limb':'int' '>>'
|   |   |-ParenExpr 0x26de95a7550 <col:15, col:36> 'limb':'int'
|   |   | `-CStyleCastExpr 0x26de95a7528 <col:16, col:35> 'limb':'int' <NoOp>
|   |   |   `-ParenExpr 0x26de95a7508 <col:23, col:35> 'int'
|   |   |     `-BinaryOperator 0x26de95a74b8 <col:24, col:33> 'int' '>>'
|   |   |       |-ImplicitCastExpr 0x26de95a74a0 <col:24, col:28> 'int' <LValueToRValue>
|   |   |       | `-ArraySubscriptExpr 0x26de95a7458 <col:24, col:28> 'const int' lvalue
|   |   |       |   |-ImplicitCastExpr 0x26de95a7440 <col:24> 'const int *':'const int *' <LValueToRValue>
|   |   |       |   | `-DeclRefExpr 0x26de95a73f8 <col:24> 'const int *':'const int *' lvalue ParmVar 0x26de95a3ce8 'in' 'const int *':'const int *'
|   |   |       |   `-IntegerLiteral 0x26de95a7418 <col:27> 'int' 4
|   |   |       `-IntegerLiteral 0x26de95a7478 <col:33> 'int' 64
|   |   `-IntegerLiteral 0x26de95a7570 <col:41> 'int' 52
|   |-CompoundAssignOperator 0x26de95a77a0 <line:650:5, col:33> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de95a7648 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de95a7630 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de95a75e8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de95a3c70 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de95a7608 <col:9> 'int' 6
|   | `-BinaryOperator 0x26de95a7780 <col:15, col:33> 'limb':'int' '>>'
|   |   |-ParenExpr 0x26de95a7738 <col:15, col:28> 'limb':'int'
|   |   | `-CStyleCastExpr 0x26de95a7710 <col:16, col:27> 'limb':'int' <NoOp>
|   |   |   `-ImplicitCastExpr 0x26de95a76f8 <col:23, col:27> 'int' <LValueToRValue> part_of_explicit_cast
|   |   |     `-ArraySubscriptExpr 0x26de95a76c8 <col:23, col:27> 'const int' lvalue
|   |   |       |-ImplicitCastExpr 0x26de95a76b0 <col:23> 'const int *':'const int *' <LValueToRValue>
|   |   |       | `-DeclRefExpr 0x26de95a7668 <col:23> 'const int *':'const int *' lvalue ParmVar 0x26de95a3ce8 'in' 'const int *':'const int *'
|   |   |       `-IntegerLiteral 0x26de95a7688 <col:26> 'int' 5
|   |   `-IntegerLiteral 0x26de95a7758 <col:33> 'int' 58
|   |-CompoundAssignOperator 0x26de95a7a88 <line:651:5, col:58> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de95a7830 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de95a7818 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de95a77d0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de95a3c70 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de95a77f0 <col:9> 'int' 6
|   | `-BinaryOperator 0x26de95a7a68 <col:15, col:58> 'int' '<<'
|   |   |-ParenExpr 0x26de95a7a20 <col:15, col:53> 'int'
|   |   | `-BinaryOperator 0x26de95a7a00 <col:16, col:41> 'int' '&'
|   |   |   |-ParenExpr 0x26de95a79a8 <col:16, col:37> 'limb':'int'
|   |   |   | `-CStyleCastExpr 0x26de95a7980 <col:17, col:36> 'limb':'int' <NoOp>
|   |   |   |   `-ParenExpr 0x26de95a7960 <col:24, col:36> 'int'
|   |   |   |     `-BinaryOperator 0x26de95a7910 <col:25, col:34> 'int' '>>'
|   |   |   |       |-ImplicitCastExpr 0x26de95a78f8 <col:25, col:29> 'int' <LValueToRValue>
|   |   |   |       | `-ArraySubscriptExpr 0x26de95a78b0 <col:25, col:29> 'const int' lvalue
|   |   |   |       |   |-ImplicitCastExpr 0x26de95a7898 <col:25> 'const int *':'const int *' <LValueToRValue>
|   |   |   |       |   | `-DeclRefExpr 0x26de95a7850 <col:25> 'const int *':'const int *' lvalue ParmVar 0x26de95a3ce8 'in' 'const int *':'const int *'
|   |   |   |       |   `-IntegerLiteral 0x26de95a7870 <col:28> 'int' 5
|   |   |   |       `-IntegerLiteral 0x26de95a78d0 <col:34> 'int' 64
|   |   |   `-ImplicitCastExpr 0x26de95a79e8 <col:41> 'limb':'int' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x26de95a79c8 <col:41> 'const limb':'const int' lvalue Var 0x26de95a3ba0 'bottom52bits' 'const limb':'const int'
|   |   `-IntegerLiteral 0x26de95a7a40 <col:58> 'int' 6
|   |-CompoundAssignOperator 0x26de95a7cf8 <line:652:5, col:41> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de95a7b18 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de95a7b00 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de95a7ab8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de95a3c70 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de95a7ad8 <col:9> 'int' 7
|   | `-BinaryOperator 0x26de95a7cd8 <col:15, col:41> 'limb':'int' '>>'
|   |   |-ParenExpr 0x26de95a7c90 <col:15, col:36> 'limb':'int'
|   |   | `-CStyleCastExpr 0x26de95a7c68 <col:16, col:35> 'limb':'int' <NoOp>
|   |   |   `-ParenExpr 0x26de95a7c48 <col:23, col:35> 'int'
|   |   |     `-BinaryOperator 0x26de95a7bf8 <col:24, col:33> 'int' '>>'
|   |   |       |-ImplicitCastExpr 0x26de95a7be0 <col:24, col:28> 'int' <LValueToRValue>
|   |   |       | `-ArraySubscriptExpr 0x26de95a7b98 <col:24, col:28> 'const int' lvalue
|   |   |       |   |-ImplicitCastExpr 0x26de95a7b80 <col:24> 'const int *':'const int *' <LValueToRValue>
|   |   |       |   | `-DeclRefExpr 0x26de95a7b38 <col:24> 'const int *':'const int *' lvalue ParmVar 0x26de95a3ce8 'in' 'const int *':'const int *'
|   |   |       |   `-IntegerLiteral 0x26de95a7b58 <col:27> 'int' 5
|   |   |       `-IntegerLiteral 0x26de95a7bb8 <col:33> 'int' 64
|   |   `-IntegerLiteral 0x26de95a7cb0 <col:41> 'int' 52
|   |-CompoundAssignOperator 0x26de95a7ee0 <line:654:5, col:33> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de95a7d88 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de95a7d70 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de95a7d28 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de95a3c70 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de95a7d48 <col:9> 'int' 7
|   | `-BinaryOperator 0x26de95a7ec0 <col:15, col:33> 'limb':'int' '>>'
|   |   |-ParenExpr 0x26de95a7e78 <col:15, col:28> 'limb':'int'
|   |   | `-CStyleCastExpr 0x26de95a7e50 <col:16, col:27> 'limb':'int' <NoOp>
|   |   |   `-ImplicitCastExpr 0x26de95a7e38 <col:23, col:27> 'int' <LValueToRValue> part_of_explicit_cast
|   |   |     `-ArraySubscriptExpr 0x26de95a7e08 <col:23, col:27> 'const int' lvalue
|   |   |       |-ImplicitCastExpr 0x26de95a7df0 <col:23> 'const int *':'const int *' <LValueToRValue>
|   |   |       | `-DeclRefExpr 0x26de95a7da8 <col:23> 'const int *':'const int *' lvalue ParmVar 0x26de95a3ce8 'in' 'const int *':'const int *'
|   |   |       `-IntegerLiteral 0x26de95a7dc8 <col:26> 'int' 6
|   |   `-IntegerLiteral 0x26de95a7e98 <col:33> 'int' 58
|   |-CompoundAssignOperator 0x26de95a81c8 <line:655:5, col:58> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de95a7f70 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de95a7f58 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de95a7f10 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de95a3c70 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de95a7f30 <col:9> 'int' 7
|   | `-BinaryOperator 0x26de95a81a8 <col:15, col:58> 'int' '<<'
|   |   |-ParenExpr 0x26de95a8160 <col:15, col:53> 'int'
|   |   | `-BinaryOperator 0x26de95a8140 <col:16, col:41> 'int' '&'
|   |   |   |-ParenExpr 0x26de95a80e8 <col:16, col:37> 'limb':'int'
|   |   |   | `-CStyleCastExpr 0x26de95a80c0 <col:17, col:36> 'limb':'int' <NoOp>
|   |   |   |   `-ParenExpr 0x26de95a80a0 <col:24, col:36> 'int'
|   |   |   |     `-BinaryOperator 0x26de95a8050 <col:25, col:34> 'int' '>>'
|   |   |   |       |-ImplicitCastExpr 0x26de95a8038 <col:25, col:29> 'int' <LValueToRValue>
|   |   |   |       | `-ArraySubscriptExpr 0x26de95a7ff0 <col:25, col:29> 'const int' lvalue
|   |   |   |       |   |-ImplicitCastExpr 0x26de95a7fd8 <col:25> 'const int *':'const int *' <LValueToRValue>
|   |   |   |       |   | `-DeclRefExpr 0x26de95a7f90 <col:25> 'const int *':'const int *' lvalue ParmVar 0x26de95a3ce8 'in' 'const int *':'const int *'
|   |   |   |       |   `-IntegerLiteral 0x26de95a7fb0 <col:28> 'int' 6
|   |   |   |       `-IntegerLiteral 0x26de95a8010 <col:34> 'int' 64
|   |   |   `-ImplicitCastExpr 0x26de95a8128 <col:41> 'limb':'int' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x26de95a8108 <col:41> 'const limb':'const int' lvalue Var 0x26de95a3ba0 'bottom52bits' 'const limb':'const int'
|   |   `-IntegerLiteral 0x26de95a8180 <col:58> 'int' 6
|   |-CompoundAssignOperator 0x26de95a8438 <line:656:5, col:41> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de95a8258 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de95a8240 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de95a81f8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de95a3c70 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de95a8218 <col:9> 'int' 8
|   | `-BinaryOperator 0x26de95a8418 <col:15, col:41> 'limb':'int' '>>'
|   |   |-ParenExpr 0x26de95a83d0 <col:15, col:36> 'limb':'int'
|   |   | `-CStyleCastExpr 0x26de95a83a8 <col:16, col:35> 'limb':'int' <NoOp>
|   |   |   `-ParenExpr 0x26de95a8388 <col:23, col:35> 'int'
|   |   |     `-BinaryOperator 0x26de95a8338 <col:24, col:33> 'int' '>>'
|   |   |       |-ImplicitCastExpr 0x26de95a8320 <col:24, col:28> 'int' <LValueToRValue>
|   |   |       | `-ArraySubscriptExpr 0x26de95a82d8 <col:24, col:28> 'const int' lvalue
|   |   |       |   |-ImplicitCastExpr 0x26de95a82c0 <col:24> 'const int *':'const int *' <LValueToRValue>
|   |   |       |   | `-DeclRefExpr 0x26de95a8278 <col:24> 'const int *':'const int *' lvalue ParmVar 0x26de95a3ce8 'in' 'const int *':'const int *'
|   |   |       |   `-IntegerLiteral 0x26de95a8298 <col:27> 'int' 6
|   |   |       `-IntegerLiteral 0x26de95a82f8 <col:33> 'int' 64
|   |   `-IntegerLiteral 0x26de95a83f0 <col:41> 'int' 52
|   |-CompoundAssignOperator 0x26de95a8620 <line:658:5, col:33> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de95a84c8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de95a84b0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de95a8468 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de95a3c70 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de95a8488 <col:9> 'int' 8
|   | `-BinaryOperator 0x26de95a8600 <col:15, col:33> 'limb':'int' '>>'
|   |   |-ParenExpr 0x26de95a85b8 <col:15, col:28> 'limb':'int'
|   |   | `-CStyleCastExpr 0x26de95a8590 <col:16, col:27> 'limb':'int' <NoOp>
|   |   |   `-ImplicitCastExpr 0x26de95a8578 <col:23, col:27> 'int' <LValueToRValue> part_of_explicit_cast
|   |   |     `-ArraySubscriptExpr 0x26de95a8548 <col:23, col:27> 'const int' lvalue
|   |   |       |-ImplicitCastExpr 0x26de95a8530 <col:23> 'const int *':'const int *' <LValueToRValue>
|   |   |       | `-DeclRefExpr 0x26de95a84e8 <col:23> 'const int *':'const int *' lvalue ParmVar 0x26de95a3ce8 'in' 'const int *':'const int *'
|   |   |       `-IntegerLiteral 0x26de95a8508 <col:26> 'int' 7
|   |   `-IntegerLiteral 0x26de95a85d8 <col:33> 'int' 58
|   |-CompoundAssignOperator 0x26de95a8908 <line:659:5, col:58> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de95a86b0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de95a8698 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de95a8650 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de95a3c70 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de95a8670 <col:9> 'int' 8
|   | `-BinaryOperator 0x26de95a88e8 <col:15, col:58> 'int' '<<'
|   |   |-ParenExpr 0x26de95a88a0 <col:15, col:53> 'int'
|   |   | `-BinaryOperator 0x26de95a8880 <col:16, col:41> 'int' '&'
|   |   |   |-ParenExpr 0x26de95a8828 <col:16, col:37> 'limb':'int'
|   |   |   | `-CStyleCastExpr 0x26de95a8800 <col:17, col:36> 'limb':'int' <NoOp>
|   |   |   |   `-ParenExpr 0x26de95a87e0 <col:24, col:36> 'int'
|   |   |   |     `-BinaryOperator 0x26de95a8790 <col:25, col:34> 'int' '>>'
|   |   |   |       |-ImplicitCastExpr 0x26de95a8778 <col:25, col:29> 'int' <LValueToRValue>
|   |   |   |       | `-ArraySubscriptExpr 0x26de95a8730 <col:25, col:29> 'const int' lvalue
|   |   |   |       |   |-ImplicitCastExpr 0x26de95a8718 <col:25> 'const int *':'const int *' <LValueToRValue>
|   |   |   |       |   | `-DeclRefExpr 0x26de95a86d0 <col:25> 'const int *':'const int *' lvalue ParmVar 0x26de95a3ce8 'in' 'const int *':'const int *'
|   |   |   |       |   `-IntegerLiteral 0x26de95a86f0 <col:28> 'int' 7
|   |   |   |       `-IntegerLiteral 0x26de95a8750 <col:34> 'int' 64
|   |   |   `-ImplicitCastExpr 0x26de95a8868 <col:41> 'limb':'int' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x26de95a8848 <col:41> 'const limb':'const int' lvalue Var 0x26de95a3ba0 'bottom52bits' 'const limb':'const int'
|   |   `-IntegerLiteral 0x26de95a88c0 <col:58> 'int' 6
|   |-BinaryOperator 0x26de95a8b30 <line:664:5, col:43> 'u64':'int' '='
|   | |-DeclRefExpr 0x26de95a8938 <col:5> 'u64':'int' lvalue Var 0x26de95a3ee0 'overflow1' 'u64':'int'
|   | `-BinaryOperator 0x26de95a8b10 <col:17, col:43> 'limb':'int' '>>'
|   |   |-ParenExpr 0x26de95a8ac8 <col:17, col:38> 'limb':'int'
|   |   | `-CStyleCastExpr 0x26de95a8aa0 <col:18, col:37> 'limb':'int' <NoOp>
|   |   |   `-ParenExpr 0x26de95a8a80 <col:25, col:37> 'int'
|   |   |     `-BinaryOperator 0x26de95a8a30 <col:26, col:35> 'int' '>>'
|   |   |       |-ImplicitCastExpr 0x26de95a8a18 <col:26, col:30> 'int' <LValueToRValue>
|   |   |       | `-ArraySubscriptExpr 0x26de95a89d0 <col:26, col:30> 'const int' lvalue
|   |   |       |   |-ImplicitCastExpr 0x26de95a89b8 <col:26> 'const int *':'const int *' <LValueToRValue>
|   |   |       |   | `-DeclRefExpr 0x26de95a8970 <col:26> 'const int *':'const int *' lvalue ParmVar 0x26de95a3ce8 'in' 'const int *':'const int *'
|   |   |       |   `-IntegerLiteral 0x26de95a8990 <col:29> 'int' 7
|   |   |       `-IntegerLiteral 0x26de95a89f0 <col:35> 'int' 64
|   |   `-IntegerLiteral 0x26de95a8ae8 <col:43> 'int' 52
|   |-CompoundAssignOperator 0x26de95a8ca8 <line:666:5, col:36> 'u64':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x26de95a8b50 <col:5> 'u64':'int' lvalue Var 0x26de95a3ee0 'overflow1' 'u64':'int'
|   | `-BinaryOperator 0x26de95a8c88 <col:18, col:36> 'limb':'int' '>>'
|   |   |-ParenExpr 0x26de95a8c40 <col:18, col:31> 'limb':'int'
|   |   | `-CStyleCastExpr 0x26de95a8c18 <col:19, col:30> 'limb':'int' <NoOp>
|   |   |   `-ImplicitCastExpr 0x26de95a8c00 <col:26, col:30> 'int' <LValueToRValue> part_of_explicit_cast
|   |   |     `-ArraySubscriptExpr 0x26de95a8bd0 <col:26, col:30> 'const int' lvalue
|   |   |       |-ImplicitCastExpr 0x26de95a8bb8 <col:26> 'const int *':'const int *' <LValueToRValue>
|   |   |       | `-DeclRefExpr 0x26de95a8b70 <col:26> 'const int *':'const int *' lvalue ParmVar 0x26de95a3ce8 'in' 'const int *':'const int *'
|   |   |       `-IntegerLiteral 0x26de95a8b90 <col:29> 'int' 8
|   |   `-IntegerLiteral 0x26de95a8c60 <col:36> 'int' 58
|   |-CompoundAssignOperator 0x26de95a8f30 <line:667:5, col:61> 'u64':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x26de95a8cd8 <col:5> 'u64':'int' lvalue Var 0x26de95a3ee0 'overflow1' 'u64':'int'
|   | `-BinaryOperator 0x26de95a8f10 <col:18, col:61> 'int' '<<'
|   |   |-ParenExpr 0x26de95a8ec8 <col:18, col:56> 'int'
|   |   | `-BinaryOperator 0x26de95a8ea8 <col:19, col:44> 'int' '&'
|   |   |   |-ParenExpr 0x26de95a8e50 <col:19, col:40> 'limb':'int'
|   |   |   | `-CStyleCastExpr 0x26de95a8e28 <col:20, col:39> 'limb':'int' <NoOp>
|   |   |   |   `-ParenExpr 0x26de95a8e08 <col:27, col:39> 'int'
|   |   |   |     `-BinaryOperator 0x26de95a8db8 <col:28, col:37> 'int' '>>'
|   |   |   |       |-ImplicitCastExpr 0x26de95a8da0 <col:28, col:32> 'int' <LValueToRValue>
|   |   |   |       | `-ArraySubscriptExpr 0x26de95a8d58 <col:28, col:32> 'const int' lvalue
|   |   |   |       |   |-ImplicitCastExpr 0x26de95a8d40 <col:28> 'const int *':'const int *' <LValueToRValue>
|   |   |   |       |   | `-DeclRefExpr 0x26de95a8cf8 <col:28> 'const int *':'const int *' lvalue ParmVar 0x26de95a3ce8 'in' 'const int *':'const int *'
|   |   |   |       |   `-IntegerLiteral 0x26de95a8d18 <col:31> 'int' 8
|   |   |   |       `-IntegerLiteral 0x26de95a8d78 <col:37> 'int' 64
|   |   |   `-ImplicitCastExpr 0x26de95a8e90 <col:44> 'limb':'int' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x26de95a8e70 <col:44> 'const limb':'const int' lvalue Var 0x26de95a3ba0 'bottom52bits' 'const limb':'const int'
|   |   `-IntegerLiteral 0x26de95a8ee8 <col:61> 'int' 6
|   |-BinaryOperator 0x26de95a9158 <line:668:5, col:43> 'u64':'int' '='
|   | |-DeclRefExpr 0x26de95a8f60 <col:5> 'u64':'int' lvalue Var 0x26de95a3f58 'overflow2' 'u64':'int'
|   | `-BinaryOperator 0x26de95a9138 <col:17, col:43> 'limb':'int' '>>'
|   |   |-ParenExpr 0x26de95a90f0 <col:17, col:38> 'limb':'int'
|   |   | `-CStyleCastExpr 0x26de95a90c8 <col:18, col:37> 'limb':'int' <NoOp>
|   |   |   `-ParenExpr 0x26de95a90a8 <col:25, col:37> 'int'
|   |   |     `-BinaryOperator 0x26de95a9058 <col:26, col:35> 'int' '>>'
|   |   |       |-ImplicitCastExpr 0x26de95a9040 <col:26, col:30> 'int' <LValueToRValue>
|   |   |       | `-ArraySubscriptExpr 0x26de95a8ff8 <col:26, col:30> 'const int' lvalue
|   |   |       |   |-ImplicitCastExpr 0x26de95a8fe0 <col:26> 'const int *':'const int *' <LValueToRValue>
|   |   |       |   | `-DeclRefExpr 0x26de95a8f98 <col:26> 'const int *':'const int *' lvalue ParmVar 0x26de95a3ce8 'in' 'const int *':'const int *'
|   |   |       |   `-IntegerLiteral 0x26de95a8fb8 <col:29> 'int' 8
|   |   |       `-IntegerLiteral 0x26de95a9018 <col:35> 'int' 64
|   |   `-IntegerLiteral 0x26de95a9110 <col:43> 'int' 52
|   |-CompoundAssignOperator 0x26de9665e80 <line:670:5, col:19> 'u64':'int' '<<=' ComputeLHSTy='u64':'int' ComputeResultTy='u64':'int'
|   | |-DeclRefExpr 0x26de9665e20 <col:5> 'u64':'int' lvalue Var 0x26de95a3ee0 'overflow1' 'u64':'int'
|   | `-IntegerLiteral 0x26de9665e40 <col:19> 'int' 1
|   |-CompoundAssignOperator 0x26de9665f10 <line:671:5, col:19> 'u64':'int' '<<=' ComputeLHSTy='u64':'int' ComputeResultTy='u64':'int'
|   | |-DeclRefExpr 0x26de9665eb0 <col:5> 'u64':'int' lvalue Var 0x26de95a3f58 'overflow2' 'u64':'int'
|   | `-IntegerLiteral 0x26de9665ed0 <col:19> 'int' 1
|   |-CompoundAssignOperator 0x26de9665ff8 <line:673:5, col:15> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de9665fa0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de9665f88 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de9665f40 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de95a3c70 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de9665f60 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x26de9665fe0 <col:15> 'u64':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x26de9665fc0 <col:15> 'u64':'int' lvalue Var 0x26de95a3ee0 'overflow1' 'u64':'int'
|   |-CompoundAssignOperator 0x26de96660e0 <line:674:5, col:15> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de9666088 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de9666070 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de9666028 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de95a3c70 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de9666048 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x26de96660c8 <col:15> 'u64':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x26de96660a8 <col:15> 'u64':'int' lvalue Var 0x26de95a3f58 'overflow2' 'u64':'int'
|   |-CompoundAssignOperator 0x26de9666270 <line:676:5, col:25> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de9666170 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de9666158 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de9666110 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de95a3c70 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de9666130 <col:9> 'int' 1
|   | `-BinaryOperator 0x26de9666250 <col:15, col:25> 'limb':'int' '>>'
|   |   |-ImplicitCastExpr 0x26de9666238 <col:15, col:20> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x26de96661f0 <col:15, col:20> 'limb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x26de96661d8 <col:15> 'limb *':'limb *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x26de9666190 <col:15> 'limb *':'limb *' lvalue ParmVar 0x26de95a3c70 'out' 'limb *':'limb *'
|   |   |   `-IntegerLiteral 0x26de96661b0 <col:19> 'int' 0
|   |   `-IntegerLiteral 0x26de9666210 <col:25> 'int' 58
|   `-CompoundAssignOperator 0x26de9666358 <line:677:5, col:15> 'limb':'int' '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |-ArraySubscriptExpr 0x26de9666300 <col:5, col:10> 'limb':'int' lvalue
|     | |-ImplicitCastExpr 0x26de96662e8 <col:5> 'limb *':'limb *' <LValueToRValue>
|     | | `-DeclRefExpr 0x26de96662a0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de95a3c70 'out' 'limb *':'limb *'
|     | `-IntegerLiteral 0x26de96662c0 <col:9> 'int' 0
|     `-ImplicitCastExpr 0x26de9666340 <col:15> 'limb':'int' <LValueToRValue>
|       `-DeclRefExpr 0x26de9666320 <col:15> 'const limb':'const int' lvalue Var 0x26de958ee10 'bottom58bits' 'const limb':'const int'
|-FunctionDecl 0x26de9666640 <line:685:1, line:690:1> line:685:13 used felem_square_reduce 'void (limb *, const limb *)' static
| |-ParmVarDecl 0x26de9666500 <col:33, col:39> col:39 used out 'limb *':'limb *'
| |-ParmVarDecl 0x26de9666578 <col:44, col:56> col:56 used in 'const limb *':'const limb *'
| `-CompoundStmt 0x26de96669c8 <line:686:1, line:690:1>
|   |-DeclStmt 0x26de9666780 <line:687:5, col:19>
|   | `-VarDecl 0x26de9666718 <col:5, col:16> col:16 used tmp 'largefelem':'int [9]'
|   |-CallExpr 0x26de9666850 <line:688:5, col:25> 'void'
|   | |-ImplicitCastExpr 0x26de9666838 <col:5> 'void (*)(int *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de9666798 <col:5> 'void (int *, const limb *)' Function 0x26de959e190 'felem_square' 'void (int *, const limb *)'
|   | |-ImplicitCastExpr 0x26de9666880 <col:18> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de96667b8 <col:18> 'largefelem':'int [9]' lvalue Var 0x26de9666718 'tmp' 'largefelem':'int [9]'
|   | `-ImplicitCastExpr 0x26de9666898 <col:23> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x26de96667f0 <col:23> 'const limb *':'const limb *' lvalue ParmVar 0x26de9666578 'in' 'const limb *':'const limb *'
|   `-CallExpr 0x26de9666950 <line:689:5, col:26> 'void'
|     |-ImplicitCastExpr 0x26de9666938 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x26de96668b0 <col:5> 'void (limb *, const int *)' Function 0x26de95a3de8 'felem_reduce' 'void (limb *, const int *)'
|     |-ImplicitCastExpr 0x26de9666980 <col:18> 'limb *':'limb *' <LValueToRValue>
|     | `-DeclRefExpr 0x26de96668d0 <col:18> 'limb *':'limb *' lvalue ParmVar 0x26de9666500 'out' 'limb *':'limb *'
|     `-ImplicitCastExpr 0x26de96669b0 <col:23> 'const int *':'const int *' <NoOp>
|       `-ImplicitCastExpr 0x26de9666998 <col:23> 'int *' <ArrayToPointerDecay>
|         `-DeclRefExpr 0x26de96668f0 <col:23> 'largefelem':'int [9]' lvalue Var 0x26de9666718 'tmp' 'largefelem':'int [9]'
|-FunctionDecl 0x26de9666c18 <line:692:1, line:697:1> line:692:13 used felem_mul_reduce 'void (limb *, const limb *, const limb *)' static
| |-ParmVarDecl 0x26de9666a00 <col:30, col:36> col:36 used out 'limb *':'limb *'
| |-ParmVarDecl 0x26de9666a78 <col:41, col:53> col:53 used in1 'const limb *':'const limb *'
| |-ParmVarDecl 0x26de9666af0 <col:58, col:70> col:70 used in2 'const limb *':'const limb *'
| `-CompoundStmt 0x26de9666ff0 <line:693:1, line:697:1>
|   |-DeclStmt 0x26de9666d60 <line:694:5, col:19>
|   | `-VarDecl 0x26de9666cf8 <col:5, col:16> col:16 used tmp 'largefelem':'int [9]'
|   |-CallExpr 0x26de9666e80 <line:695:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x26de9666e68 <col:5> 'void (*)(int *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de9666d78 <col:5> 'void (int *, const limb *, const limb *)' Function 0x26de95a07c8 'felem_mul' 'void (int *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x26de9666eb8 <col:15> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de9666d98 <col:15> 'largefelem':'int [9]' lvalue Var 0x26de9666cf8 'tmp' 'largefelem':'int [9]'
|   | |-ImplicitCastExpr 0x26de9666ed0 <col:20> 'const limb *':'const limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x26de9666dd0 <col:20> 'const limb *':'const limb *' lvalue ParmVar 0x26de9666a78 'in1' 'const limb *':'const limb *'
|   | `-ImplicitCastExpr 0x26de9666ee8 <col:25> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x26de9666df0 <col:25> 'const limb *':'const limb *' lvalue ParmVar 0x26de9666af0 'in2' 'const limb *':'const limb *'
|   `-CallExpr 0x26de9666f78 <line:696:5, col:26> 'void'
|     |-ImplicitCastExpr 0x26de9666f60 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x26de9666f00 <col:5> 'void (limb *, const int *)' Function 0x26de95a3de8 'felem_reduce' 'void (limb *, const int *)'
|     |-ImplicitCastExpr 0x26de9666fa8 <col:18> 'limb *':'limb *' <LValueToRValue>
|     | `-DeclRefExpr 0x26de9666f20 <col:18> 'limb *':'limb *' lvalue ParmVar 0x26de9666a00 'out' 'limb *':'limb *'
|     `-ImplicitCastExpr 0x26de9666fd8 <col:23> 'const int *':'const int *' <NoOp>
|       `-ImplicitCastExpr 0x26de9666fc0 <col:23> 'int *' <ArrayToPointerDecay>
|         `-DeclRefExpr 0x26de9666f40 <col:23> 'largefelem':'int [9]' lvalue Var 0x26de9666cf8 'tmp' 'largefelem':'int [9]'
|-FunctionDecl 0x26de9667168 <line:707:1, line:805:1> line:707:13 used felem_inv 'void (limb *, const limb *)' static
| |-ParmVarDecl 0x26de9667028 <col:23, col:29> col:29 used out 'limb *':'limb *'
| |-ParmVarDecl 0x26de96670a0 <col:34, col:46> col:46 used in 'const limb *':'const limb *'
| `-CompoundStmt 0x26de966a6d0 <line:708:1, line:805:1>
|   |-DeclStmt 0x26de9667438 <line:709:5, col:36>
|   | |-VarDecl 0x26de9667240 <col:5, col:11> col:11 used ftmp 'felem':'limb [9]'
|   | |-VarDecl 0x26de96672b8 <col:5, col:17> col:17 used ftmp2 'felem':'limb [9]'
|   | |-VarDecl 0x26de9667330 <col:5, col:24> col:24 used ftmp3 'felem':'limb [9]'
|   | `-VarDecl 0x26de96673a8 <col:5, col:31> col:31 used ftmp4 'felem':'limb [9]'
|   |-DeclStmt 0x26de96674c8 <line:710:5, col:19>
|   | `-VarDecl 0x26de9667460 <col:5, col:16> col:16 used tmp 'largefelem':'int [9]'
|   |-DeclStmt 0x26de9667560 <line:711:5, col:15>
|   | `-VarDecl 0x26de96674f8 <col:5, col:14> col:14 used i 'unsigned int'
|   |-CallExpr 0x26de9667608 <line:713:5, col:25> 'void'
|   | |-ImplicitCastExpr 0x26de96675f0 <col:5> 'void (*)(int *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de9667578 <col:5> 'void (int *, const limb *)' Function 0x26de959e190 'felem_square' 'void (int *, const limb *)'
|   | |-ImplicitCastExpr 0x26de9667638 <col:18> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de9667598 <col:18> 'largefelem':'int [9]' lvalue Var 0x26de9667460 'tmp' 'largefelem':'int [9]'
|   | `-ImplicitCastExpr 0x26de9667650 <col:23> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x26de96675d0 <col:23> 'const limb *':'const limb *' lvalue ParmVar 0x26de96670a0 'in' 'const limb *':'const limb *'
|   |-CallExpr 0x26de96676f8 <line:714:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x26de96676e0 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de9667668 <col:5> 'void (limb *, const int *)' Function 0x26de95a3de8 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x26de9667728 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de9667688 <col:18> 'felem':'limb [9]' lvalue Var 0x26de9667240 'ftmp' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x26de9667758 <col:24> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de9667740 <col:24> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x26de96676c0 <col:24> 'largefelem':'int [9]' lvalue Var 0x26de9667460 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x26de9667808 <line:715:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x26de96677f0 <col:5> 'void (*)(int *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de9667770 <col:5> 'void (int *, const limb *, const limb *)' Function 0x26de95a07c8 'felem_mul' 'void (int *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x26de9667840 <col:15> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de9667790 <col:15> 'largefelem':'int [9]' lvalue Var 0x26de9667460 'tmp' 'largefelem':'int [9]'
|   | |-ImplicitCastExpr 0x26de9667858 <col:20> 'const limb *':'const limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x26de96677b0 <col:20> 'const limb *':'const limb *' lvalue ParmVar 0x26de96670a0 'in' 'const limb *':'const limb *'
|   | `-ImplicitCastExpr 0x26de9667888 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de9667870 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x26de96677d0 <col:24> 'felem':'limb [9]' lvalue Var 0x26de9667240 'ftmp' 'felem':'limb [9]'
|   |-CallExpr 0x26de9667918 <line:716:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x26de9667900 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de96678a0 <col:5> 'void (limb *, const int *)' Function 0x26de95a3de8 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x26de9667948 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de96678c0 <col:18> 'felem':'limb [9]' lvalue Var 0x26de9667240 'ftmp' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x26de9667978 <col:24> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de9667960 <col:24> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x26de96678e0 <col:24> 'largefelem':'int [9]' lvalue Var 0x26de9667460 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x26de9667a50 <line:717:5, col:29> 'void'
|   | |-ImplicitCastExpr 0x26de9667a38 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de9667990 <col:5> 'void (limb *, const limb *)' Function 0x26de9594bb8 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x26de9667a80 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de96679b0 <col:18> 'felem':'limb [9]' lvalue Var 0x26de96672b8 'ftmp2' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x26de9667ab0 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de9667a98 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x26de96679e8 <col:25> 'felem':'limb [9]' lvalue Var 0x26de9667240 'ftmp' 'felem':'limb [9]'
|   |-CallExpr 0x26de9667b40 <line:718:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x26de9667b28 <col:5> 'void (*)(int *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de9667ac8 <col:5> 'void (int *, const limb *)' Function 0x26de959e190 'felem_square' 'void (int *, const limb *)'
|   | |-ImplicitCastExpr 0x26de9667b70 <col:18> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de9667ae8 <col:18> 'largefelem':'int [9]' lvalue Var 0x26de9667460 'tmp' 'largefelem':'int [9]'
|   | `-ImplicitCastExpr 0x26de9667ba0 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de9667b88 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x26de9667b08 <col:23> 'felem':'limb [9]' lvalue Var 0x26de9667240 'ftmp' 'felem':'limb [9]'
|   |-CallExpr 0x26de9667c30 <line:719:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x26de9667c18 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de9667bb8 <col:5> 'void (limb *, const int *)' Function 0x26de95a3de8 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x26de9667c60 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de9667bd8 <col:18> 'felem':'limb [9]' lvalue Var 0x26de9667240 'ftmp' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x26de9667c90 <col:24> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de9667c78 <col:24> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x26de9667bf8 <col:24> 'largefelem':'int [9]' lvalue Var 0x26de9667460 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x26de9667d40 <line:720:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x26de9667d28 <col:5> 'void (*)(int *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de9667ca8 <col:5> 'void (int *, const limb *, const limb *)' Function 0x26de95a07c8 'felem_mul' 'void (int *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x26de9667d78 <col:15> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de9667cc8 <col:15> 'largefelem':'int [9]' lvalue Var 0x26de9667460 'tmp' 'largefelem':'int [9]'
|   | |-ImplicitCastExpr 0x26de9667d90 <col:20> 'const limb *':'const limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x26de9667ce8 <col:20> 'const limb *':'const limb *' lvalue ParmVar 0x26de96670a0 'in' 'const limb *':'const limb *'
|   | `-ImplicitCastExpr 0x26de9667dc0 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de9667da8 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x26de9667d08 <col:24> 'felem':'limb [9]' lvalue Var 0x26de9667240 'ftmp' 'felem':'limb [9]'
|   |-CallExpr 0x26de966be88 <line:721:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x26de966be70 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de9667dd8 <col:5> 'void (limb *, const int *)' Function 0x26de95a3de8 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x26de966beb8 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de9667df8 <col:18> 'felem':'limb [9]' lvalue Var 0x26de9667240 'ftmp' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x26de966bee8 <col:24> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de966bed0 <col:24> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x26de966be50 <col:24> 'largefelem':'int [9]' lvalue Var 0x26de9667460 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x26de966bf78 <line:722:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x26de966bf60 <col:5> 'void (*)(int *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de966bf00 <col:5> 'void (int *, const limb *)' Function 0x26de959e190 'felem_square' 'void (int *, const limb *)'
|   | |-ImplicitCastExpr 0x26de966bfa8 <col:18> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de966bf20 <col:18> 'largefelem':'int [9]' lvalue Var 0x26de9667460 'tmp' 'largefelem':'int [9]'
|   | `-ImplicitCastExpr 0x26de966bfd8 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de966bfc0 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x26de966bf40 <col:23> 'felem':'limb [9]' lvalue Var 0x26de9667240 'ftmp' 'felem':'limb [9]'
|   |-CallExpr 0x26de966c068 <line:723:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x26de966c050 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de966bff0 <col:5> 'void (limb *, const int *)' Function 0x26de95a3de8 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x26de966c098 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de966c010 <col:18> 'felem':'limb [9]' lvalue Var 0x26de9667240 'ftmp' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x26de966c0c8 <col:24> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de966c0b0 <col:24> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x26de966c030 <col:24> 'largefelem':'int [9]' lvalue Var 0x26de9667460 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x26de966c158 <line:725:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x26de966c140 <col:5> 'void (*)(int *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de966c0e0 <col:5> 'void (int *, const limb *)' Function 0x26de959e190 'felem_square' 'void (int *, const limb *)'
|   | |-ImplicitCastExpr 0x26de966c188 <col:18> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de966c100 <col:18> 'largefelem':'int [9]' lvalue Var 0x26de9667460 'tmp' 'largefelem':'int [9]'
|   | `-ImplicitCastExpr 0x26de966c1b8 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de966c1a0 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x26de966c120 <col:23> 'felem':'limb [9]' lvalue Var 0x26de96672b8 'ftmp2' 'felem':'limb [9]'
|   |-CallExpr 0x26de966c260 <line:726:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x26de966c248 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de966c1d0 <col:5> 'void (limb *, const int *)' Function 0x26de95a3de8 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x26de966c290 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de966c1f0 <col:18> 'felem':'limb [9]' lvalue Var 0x26de9667330 'ftmp3' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x26de966c2c0 <col:25> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de966c2a8 <col:25> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x26de966c228 <col:25> 'largefelem':'int [9]' lvalue Var 0x26de9667460 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x26de966c350 <line:727:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x26de966c338 <col:5> 'void (*)(int *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de966c2d8 <col:5> 'void (int *, const limb *)' Function 0x26de959e190 'felem_square' 'void (int *, const limb *)'
|   | |-ImplicitCastExpr 0x26de966c380 <col:18> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de966c2f8 <col:18> 'largefelem':'int [9]' lvalue Var 0x26de9667460 'tmp' 'largefelem':'int [9]'
|   | `-ImplicitCastExpr 0x26de966c3b0 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de966c398 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x26de966c318 <col:23> 'felem':'limb [9]' lvalue Var 0x26de9667330 'ftmp3' 'felem':'limb [9]'
|   |-CallExpr 0x26de966c440 <line:728:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x26de966c428 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de966c3c8 <col:5> 'void (limb *, const int *)' Function 0x26de95a3de8 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x26de966c470 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de966c3e8 <col:18> 'felem':'limb [9]' lvalue Var 0x26de9667330 'ftmp3' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x26de966c4a0 <col:25> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de966c488 <col:25> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x26de966c408 <col:25> 'largefelem':'int [9]' lvalue Var 0x26de9667460 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x26de966c550 <line:729:5, col:32> 'void'
|   | |-ImplicitCastExpr 0x26de966c538 <col:5> 'void (*)(int *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de966c4b8 <col:5> 'void (int *, const limb *, const limb *)' Function 0x26de95a07c8 'felem_mul' 'void (int *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x26de966c588 <col:15> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de966c4d8 <col:15> 'largefelem':'int [9]' lvalue Var 0x26de9667460 'tmp' 'largefelem':'int [9]'
|   | |-ImplicitCastExpr 0x26de966c5b8 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x26de966c5a0 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x26de966c4f8 <col:20> 'felem':'limb [9]' lvalue Var 0x26de9667330 'ftmp3' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x26de966c5e8 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de966c5d0 <col:27> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x26de966c518 <col:27> 'felem':'limb [9]' lvalue Var 0x26de96672b8 'ftmp2' 'felem':'limb [9]'
|   |-CallExpr 0x26de966c678 <line:730:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x26de966c660 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de966c600 <col:5> 'void (limb *, const int *)' Function 0x26de95a3de8 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x26de966c6a8 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de966c620 <col:18> 'felem':'limb [9]' lvalue Var 0x26de9667330 'ftmp3' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x26de966c6d8 <col:25> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de966c6c0 <col:25> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x26de966c640 <col:25> 'largefelem':'int [9]' lvalue Var 0x26de9667460 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x26de966c768 <line:732:5, col:30> 'void'
|   | |-ImplicitCastExpr 0x26de966c750 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de966c6f0 <col:5> 'void (limb *, const limb *)' Function 0x26de9594bb8 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x26de966c798 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de966c710 <col:18> 'felem':'limb [9]' lvalue Var 0x26de96672b8 'ftmp2' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x26de966c7c8 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de966c7b0 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x26de966c730 <col:25> 'felem':'limb [9]' lvalue Var 0x26de9667330 'ftmp3' 'felem':'limb [9]'
|   |-CallExpr 0x26de966c858 <line:733:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x26de966c840 <col:5> 'void (*)(int *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de966c7e0 <col:5> 'void (int *, const limb *)' Function 0x26de959e190 'felem_square' 'void (int *, const limb *)'
|   | |-ImplicitCastExpr 0x26de966c888 <col:18> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de966c800 <col:18> 'largefelem':'int [9]' lvalue Var 0x26de9667460 'tmp' 'largefelem':'int [9]'
|   | `-ImplicitCastExpr 0x26de966c8b8 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de966c8a0 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x26de966c820 <col:23> 'felem':'limb [9]' lvalue Var 0x26de9667330 'ftmp3' 'felem':'limb [9]'
|   |-CallExpr 0x26de966c948 <line:734:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x26de966c930 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de966c8d0 <col:5> 'void (limb *, const int *)' Function 0x26de95a3de8 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x26de966c978 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de966c8f0 <col:18> 'felem':'limb [9]' lvalue Var 0x26de9667330 'ftmp3' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x26de966c9a8 <col:25> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de966c990 <col:25> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x26de966c910 <col:25> 'largefelem':'int [9]' lvalue Var 0x26de9667460 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x26de966ca38 <line:735:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x26de966ca20 <col:5> 'void (*)(int *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de966c9c0 <col:5> 'void (int *, const limb *)' Function 0x26de959e190 'felem_square' 'void (int *, const limb *)'
|   | |-ImplicitCastExpr 0x26de966ca68 <col:18> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de966c9e0 <col:18> 'largefelem':'int [9]' lvalue Var 0x26de9667460 'tmp' 'largefelem':'int [9]'
|   | `-ImplicitCastExpr 0x26de966ca98 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de966ca80 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x26de966ca00 <col:23> 'felem':'limb [9]' lvalue Var 0x26de9667330 'ftmp3' 'felem':'limb [9]'
|   |-CallExpr 0x26de966cb28 <line:736:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x26de966cb10 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de966cab0 <col:5> 'void (limb *, const int *)' Function 0x26de95a3de8 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x26de966cb58 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de966cad0 <col:18> 'felem':'limb [9]' lvalue Var 0x26de9667330 'ftmp3' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x26de966cb88 <col:25> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de966cb70 <col:25> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x26de966caf0 <col:25> 'largefelem':'int [9]' lvalue Var 0x26de9667460 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x26de966cc18 <line:737:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x26de966cc00 <col:5> 'void (*)(int *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de966cba0 <col:5> 'void (int *, const limb *)' Function 0x26de959e190 'felem_square' 'void (int *, const limb *)'
|   | |-ImplicitCastExpr 0x26de966cc48 <col:18> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de966cbc0 <col:18> 'largefelem':'int [9]' lvalue Var 0x26de9667460 'tmp' 'largefelem':'int [9]'
|   | `-ImplicitCastExpr 0x26de966cc78 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de966cc60 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x26de966cbe0 <col:23> 'felem':'limb [9]' lvalue Var 0x26de9667330 'ftmp3' 'felem':'limb [9]'
|   |-CallExpr 0x26de966cd08 <line:738:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x26de966ccf0 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de966cc90 <col:5> 'void (limb *, const int *)' Function 0x26de95a3de8 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x26de966cd38 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de966ccb0 <col:18> 'felem':'limb [9]' lvalue Var 0x26de9667330 'ftmp3' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x26de966cd68 <col:25> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de966cd50 <col:25> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x26de966ccd0 <col:25> 'largefelem':'int [9]' lvalue Var 0x26de9667460 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x26de966cdf8 <line:739:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x26de966cde0 <col:5> 'void (*)(int *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de966cd80 <col:5> 'void (int *, const limb *)' Function 0x26de959e190 'felem_square' 'void (int *, const limb *)'
|   | |-ImplicitCastExpr 0x26de966ce28 <col:18> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de966cda0 <col:18> 'largefelem':'int [9]' lvalue Var 0x26de9667460 'tmp' 'largefelem':'int [9]'
|   | `-ImplicitCastExpr 0x26de966ce58 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de966ce40 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x26de966cdc0 <col:23> 'felem':'limb [9]' lvalue Var 0x26de9667330 'ftmp3' 'felem':'limb [9]'
|   |-CallExpr 0x26de966cee8 <line:740:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x26de966ced0 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de966ce70 <col:5> 'void (limb *, const int *)' Function 0x26de95a3de8 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x26de966cf18 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de966ce90 <col:18> 'felem':'limb [9]' lvalue Var 0x26de9667330 'ftmp3' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x26de966cf48 <col:25> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de966cf30 <col:25> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x26de966ceb0 <col:25> 'largefelem':'int [9]' lvalue Var 0x26de9667460 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x26de966cff0 <line:741:5, col:30> 'void'
|   | |-ImplicitCastExpr 0x26de966cfd8 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de966cf60 <col:5> 'void (limb *, const limb *)' Function 0x26de9594bb8 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x26de966d020 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de966cf80 <col:18> 'felem':'limb [9]' lvalue Var 0x26de96673a8 'ftmp4' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x26de966d050 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de966d038 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x26de966cfb8 <col:25> 'felem':'limb [9]' lvalue Var 0x26de9667330 'ftmp3' 'felem':'limb [9]'
|   |-CallExpr 0x26de966d100 <line:742:5, col:31> 'void'
|   | |-ImplicitCastExpr 0x26de966d0e8 <col:5> 'void (*)(int *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de966d068 <col:5> 'void (int *, const limb *, const limb *)' Function 0x26de95a07c8 'felem_mul' 'void (int *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x26de966d138 <col:15> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de966d088 <col:15> 'largefelem':'int [9]' lvalue Var 0x26de9667460 'tmp' 'largefelem':'int [9]'
|   | |-ImplicitCastExpr 0x26de966d168 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x26de966d150 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x26de966d0a8 <col:20> 'felem':'limb [9]' lvalue Var 0x26de9667330 'ftmp3' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x26de966d198 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de966d180 <col:27> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x26de966d0c8 <col:27> 'felem':'limb [9]' lvalue Var 0x26de9667240 'ftmp' 'felem':'limb [9]'
|   |-CallExpr 0x26de966d228 <line:743:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x26de966d210 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de966d1b0 <col:5> 'void (limb *, const int *)' Function 0x26de95a3de8 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x26de966d258 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de966d1d0 <col:18> 'felem':'limb [9]' lvalue Var 0x26de96673a8 'ftmp4' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x26de966d288 <col:25> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de966d270 <col:25> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x26de966d1f0 <col:25> 'largefelem':'int [9]' lvalue Var 0x26de9667460 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x26de966d318 <line:744:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x26de966d300 <col:5> 'void (*)(int *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de966d2a0 <col:5> 'void (int *, const limb *)' Function 0x26de959e190 'felem_square' 'void (int *, const limb *)'
|   | |-ImplicitCastExpr 0x26de966d348 <col:18> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de966d2c0 <col:18> 'largefelem':'int [9]' lvalue Var 0x26de9667460 'tmp' 'largefelem':'int [9]'
|   | `-ImplicitCastExpr 0x26de966d378 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de966d360 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x26de966d2e0 <col:23> 'felem':'limb [9]' lvalue Var 0x26de96673a8 'ftmp4' 'felem':'limb [9]'
|   |-CallExpr 0x26de966d408 <line:745:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x26de966d3f0 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de966d390 <col:5> 'void (limb *, const int *)' Function 0x26de95a3de8 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x26de966d438 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de966d3b0 <col:18> 'felem':'limb [9]' lvalue Var 0x26de96673a8 'ftmp4' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x26de966d468 <col:25> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de966d450 <col:25> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x26de966d3d0 <col:25> 'largefelem':'int [9]' lvalue Var 0x26de9667460 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x26de966d518 <line:746:5, col:32> 'void'
|   | |-ImplicitCastExpr 0x26de966d500 <col:5> 'void (*)(int *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de966d480 <col:5> 'void (int *, const limb *, const limb *)' Function 0x26de95a07c8 'felem_mul' 'void (int *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x26de966d550 <col:15> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de966d4a0 <col:15> 'largefelem':'int [9]' lvalue Var 0x26de9667460 'tmp' 'largefelem':'int [9]'
|   | |-ImplicitCastExpr 0x26de966d580 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x26de966d568 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x26de966d4c0 <col:20> 'felem':'limb [9]' lvalue Var 0x26de9667330 'ftmp3' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x26de966d5b0 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de966d598 <col:27> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x26de966d4e0 <col:27> 'felem':'limb [9]' lvalue Var 0x26de96672b8 'ftmp2' 'felem':'limb [9]'
|   |-CallExpr 0x26de966d640 <line:747:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x26de966d628 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de966d5c8 <col:5> 'void (limb *, const int *)' Function 0x26de95a3de8 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x26de966d670 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de966d5e8 <col:18> 'felem':'limb [9]' lvalue Var 0x26de9667330 'ftmp3' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x26de966d6a0 <col:25> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de966d688 <col:25> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x26de966d608 <col:25> 'largefelem':'int [9]' lvalue Var 0x26de9667460 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x26de966d730 <line:748:5, col:30> 'void'
|   | |-ImplicitCastExpr 0x26de966d718 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de966d6b8 <col:5> 'void (limb *, const limb *)' Function 0x26de9594bb8 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x26de966d760 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de966d6d8 <col:18> 'felem':'limb [9]' lvalue Var 0x26de96672b8 'ftmp2' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x26de966d790 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de966d778 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x26de966d6f8 <col:25> 'felem':'limb [9]' lvalue Var 0x26de9667330 'ftmp3' 'felem':'limb [9]'
|   |-ForStmt 0x26de966db10 <line:750:5, line:753:5>
|   | |-BinaryOperator 0x26de966d820 <line:750:10, col:14> 'unsigned int' '='
|   | | |-DeclRefExpr 0x26de966d7a8 <col:10> 'unsigned int' lvalue Var 0x26de96674f8 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x26de966d808 <col:14> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x26de966d7e0 <col:14> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x26de966d8b8 <col:17, col:21> 'int' '<'
|   | | |-ImplicitCastExpr 0x26de966d888 <col:17> 'unsigned int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de966d840 <col:17> 'unsigned int' lvalue Var 0x26de96674f8 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x26de966d8a0 <col:21> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x26de966d860 <col:21> 'int' 8
|   | |-UnaryOperator 0x26de966d8f8 <col:24, col:25> 'unsigned int' postfix '++'
|   | | `-DeclRefExpr 0x26de966d8d8 <col:24> 'unsigned int' lvalue Var 0x26de96674f8 'i' 'unsigned int'
|   | `-CompoundStmt 0x26de966daf0 <col:29, line:753:5>
|   |   |-CallExpr 0x26de966d988 <line:751:9, col:32> 'void'
|   |   | |-ImplicitCastExpr 0x26de966d970 <col:9> 'void (*)(int *, const limb *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x26de966d910 <col:9> 'void (int *, const limb *)' Function 0x26de959e190 'felem_square' 'void (int *, const limb *)'
|   |   | |-ImplicitCastExpr 0x26de966d9b8 <col:22> 'int *' <ArrayToPointerDecay>
|   |   | | `-DeclRefExpr 0x26de966d930 <col:22> 'largefelem':'int [9]' lvalue Var 0x26de9667460 'tmp' 'largefelem':'int [9]'
|   |   | `-ImplicitCastExpr 0x26de966d9e8 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   |   `-ImplicitCastExpr 0x26de966d9d0 <col:27> 'limb *' <ArrayToPointerDecay>
|   |   |     `-DeclRefExpr 0x26de966d950 <col:27> 'felem':'limb [9]' lvalue Var 0x26de9667330 'ftmp3' 'felem':'limb [9]'
|   |   `-CallExpr 0x26de966da78 <line:752:9, col:32> 'void'
|   |     |-ImplicitCastExpr 0x26de966da60 <col:9> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x26de966da00 <col:9> 'void (limb *, const int *)' Function 0x26de95a3de8 'felem_reduce' 'void (limb *, const int *)'
|   |     |-ImplicitCastExpr 0x26de966daa8 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x26de966da20 <col:22> 'felem':'limb [9]' lvalue Var 0x26de9667330 'ftmp3' 'felem':'limb [9]'
|   |     `-ImplicitCastExpr 0x26de966dad8 <col:29> 'const int *':'const int *' <NoOp>
|   |       `-ImplicitCastExpr 0x26de966dac0 <col:29> 'int *' <ArrayToPointerDecay>
|   |         `-DeclRefExpr 0x26de966da40 <col:29> 'largefelem':'int [9]' lvalue Var 0x26de9667460 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x26de966dbe0 <line:754:5, col:32> 'void'
|   | |-ImplicitCastExpr 0x26de966dbc8 <col:5> 'void (*)(int *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de966db48 <col:5> 'void (int *, const limb *, const limb *)' Function 0x26de95a07c8 'felem_mul' 'void (int *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x26de966dc18 <col:15> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de966db68 <col:15> 'largefelem':'int [9]' lvalue Var 0x26de9667460 'tmp' 'largefelem':'int [9]'
|   | |-ImplicitCastExpr 0x26de966dc48 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x26de966dc30 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x26de966db88 <col:20> 'felem':'limb [9]' lvalue Var 0x26de9667330 'ftmp3' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x26de966dc78 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de966dc60 <col:27> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x26de966dba8 <col:27> 'felem':'limb [9]' lvalue Var 0x26de96672b8 'ftmp2' 'felem':'limb [9]'
|   |-CallExpr 0x26de966dd08 <line:755:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x26de966dcf0 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de966dc90 <col:5> 'void (limb *, const int *)' Function 0x26de95a3de8 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x26de966dd38 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de966dcb0 <col:18> 'felem':'limb [9]' lvalue Var 0x26de9667330 'ftmp3' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x26de966dd68 <col:25> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de966dd50 <col:25> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x26de966dcd0 <col:25> 'largefelem':'int [9]' lvalue Var 0x26de9667460 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x26de966ddf8 <line:756:5, col:30> 'void'
|   | |-ImplicitCastExpr 0x26de966dde0 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de966dd80 <col:5> 'void (limb *, const limb *)' Function 0x26de9594bb8 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x26de966de28 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de966dda0 <col:18> 'felem':'limb [9]' lvalue Var 0x26de96672b8 'ftmp2' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x26de9667e48 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de9667e30 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x26de966ddc0 <col:25> 'felem':'limb [9]' lvalue Var 0x26de9667330 'ftmp3' 'felem':'limb [9]'
|   |-ForStmt 0x26de96681b0 <line:758:5, line:761:5>
|   | |-BinaryOperator 0x26de9667ec0 <line:758:10, col:14> 'unsigned int' '='
|   | | |-DeclRefExpr 0x26de9667e60 <col:10> 'unsigned int' lvalue Var 0x26de96674f8 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x26de9667ea8 <col:14> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x26de9667e80 <col:14> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x26de9667f58 <col:17, col:21> 'int' '<'
|   | | |-ImplicitCastExpr 0x26de9667f28 <col:17> 'unsigned int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de9667ee0 <col:17> 'unsigned int' lvalue Var 0x26de96674f8 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x26de9667f40 <col:21> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x26de9667f00 <col:21> 'int' 16
|   | |-UnaryOperator 0x26de9667f98 <col:25, col:26> 'unsigned int' postfix '++'
|   | | `-DeclRefExpr 0x26de9667f78 <col:25> 'unsigned int' lvalue Var 0x26de96674f8 'i' 'unsigned int'
|   | `-CompoundStmt 0x26de9668190 <col:30, line:761:5>
|   |   |-CallExpr 0x26de9668028 <line:759:9, col:32> 'void'
|   |   | |-ImplicitCastExpr 0x26de9668010 <col:9> 'void (*)(int *, const limb *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x26de9667fb0 <col:9> 'void (int *, const limb *)' Function 0x26de959e190 'felem_square' 'void (int *, const limb *)'
|   |   | |-ImplicitCastExpr 0x26de9668058 <col:22> 'int *' <ArrayToPointerDecay>
|   |   | | `-DeclRefExpr 0x26de9667fd0 <col:22> 'largefelem':'int [9]' lvalue Var 0x26de9667460 'tmp' 'largefelem':'int [9]'
|   |   | `-ImplicitCastExpr 0x26de9668088 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   |   `-ImplicitCastExpr 0x26de9668070 <col:27> 'limb *' <ArrayToPointerDecay>
|   |   |     `-DeclRefExpr 0x26de9667ff0 <col:27> 'felem':'limb [9]' lvalue Var 0x26de9667330 'ftmp3' 'felem':'limb [9]'
|   |   `-CallExpr 0x26de9668118 <line:760:9, col:32> 'void'
|   |     |-ImplicitCastExpr 0x26de9668100 <col:9> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x26de96680a0 <col:9> 'void (limb *, const int *)' Function 0x26de95a3de8 'felem_reduce' 'void (limb *, const int *)'
|   |     |-ImplicitCastExpr 0x26de9668148 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x26de96680c0 <col:22> 'felem':'limb [9]' lvalue Var 0x26de9667330 'ftmp3' 'felem':'limb [9]'
|   |     `-ImplicitCastExpr 0x26de9668178 <col:29> 'const int *':'const int *' <NoOp>
|   |       `-ImplicitCastExpr 0x26de9668160 <col:29> 'int *' <ArrayToPointerDecay>
|   |         `-DeclRefExpr 0x26de96680e0 <col:29> 'largefelem':'int [9]' lvalue Var 0x26de9667460 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x26de9668280 <line:762:5, col:32> 'void'
|   | |-ImplicitCastExpr 0x26de9668268 <col:5> 'void (*)(int *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de96681e8 <col:5> 'void (int *, const limb *, const limb *)' Function 0x26de95a07c8 'felem_mul' 'void (int *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x26de96682b8 <col:15> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de9668208 <col:15> 'largefelem':'int [9]' lvalue Var 0x26de9667460 'tmp' 'largefelem':'int [9]'
|   | |-ImplicitCastExpr 0x26de96682e8 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x26de96682d0 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x26de9668228 <col:20> 'felem':'limb [9]' lvalue Var 0x26de9667330 'ftmp3' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x26de9668318 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de9668300 <col:27> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x26de9668248 <col:27> 'felem':'limb [9]' lvalue Var 0x26de96672b8 'ftmp2' 'felem':'limb [9]'
|   |-CallExpr 0x26de96683a8 <line:763:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x26de9668390 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de9668330 <col:5> 'void (limb *, const int *)' Function 0x26de95a3de8 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x26de96683d8 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de9668350 <col:18> 'felem':'limb [9]' lvalue Var 0x26de9667330 'ftmp3' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x26de9668408 <col:25> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de96683f0 <col:25> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x26de9668370 <col:25> 'largefelem':'int [9]' lvalue Var 0x26de9667460 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x26de9668498 <line:764:5, col:30> 'void'
|   | |-ImplicitCastExpr 0x26de9668480 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de9668420 <col:5> 'void (limb *, const limb *)' Function 0x26de9594bb8 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x26de96684c8 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de9668440 <col:18> 'felem':'limb [9]' lvalue Var 0x26de96672b8 'ftmp2' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x26de96684f8 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de96684e0 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x26de9668460 <col:25> 'felem':'limb [9]' lvalue Var 0x26de9667330 'ftmp3' 'felem':'limb [9]'
|   |-ForStmt 0x26de9668860 <line:766:5, line:769:5>
|   | |-BinaryOperator 0x26de9668570 <line:766:10, col:14> 'unsigned int' '='
|   | | |-DeclRefExpr 0x26de9668510 <col:10> 'unsigned int' lvalue Var 0x26de96674f8 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x26de9668558 <col:14> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x26de9668530 <col:14> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x26de9668608 <col:17, col:21> 'int' '<'
|   | | |-ImplicitCastExpr 0x26de96685d8 <col:17> 'unsigned int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de9668590 <col:17> 'unsigned int' lvalue Var 0x26de96674f8 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x26de96685f0 <col:21> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x26de96685b0 <col:21> 'int' 32
|   | |-UnaryOperator 0x26de9668648 <col:25, col:26> 'unsigned int' postfix '++'
|   | | `-DeclRefExpr 0x26de9668628 <col:25> 'unsigned int' lvalue Var 0x26de96674f8 'i' 'unsigned int'
|   | `-CompoundStmt 0x26de9668840 <col:30, line:769:5>
|   |   |-CallExpr 0x26de96686d8 <line:767:9, col:32> 'void'
|   |   | |-ImplicitCastExpr 0x26de96686c0 <col:9> 'void (*)(int *, const limb *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x26de9668660 <col:9> 'void (int *, const limb *)' Function 0x26de959e190 'felem_square' 'void (int *, const limb *)'
|   |   | |-ImplicitCastExpr 0x26de9668708 <col:22> 'int *' <ArrayToPointerDecay>
|   |   | | `-DeclRefExpr 0x26de9668680 <col:22> 'largefelem':'int [9]' lvalue Var 0x26de9667460 'tmp' 'largefelem':'int [9]'
|   |   | `-ImplicitCastExpr 0x26de9668738 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   |   `-ImplicitCastExpr 0x26de9668720 <col:27> 'limb *' <ArrayToPointerDecay>
|   |   |     `-DeclRefExpr 0x26de96686a0 <col:27> 'felem':'limb [9]' lvalue Var 0x26de9667330 'ftmp3' 'felem':'limb [9]'
|   |   `-CallExpr 0x26de96687c8 <line:768:9, col:32> 'void'
|   |     |-ImplicitCastExpr 0x26de96687b0 <col:9> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x26de9668750 <col:9> 'void (limb *, const int *)' Function 0x26de95a3de8 'felem_reduce' 'void (limb *, const int *)'
|   |     |-ImplicitCastExpr 0x26de96687f8 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x26de9668770 <col:22> 'felem':'limb [9]' lvalue Var 0x26de9667330 'ftmp3' 'felem':'limb [9]'
|   |     `-ImplicitCastExpr 0x26de9668828 <col:29> 'const int *':'const int *' <NoOp>
|   |       `-ImplicitCastExpr 0x26de9668810 <col:29> 'int *' <ArrayToPointerDecay>
|   |         `-DeclRefExpr 0x26de9668790 <col:29> 'largefelem':'int [9]' lvalue Var 0x26de9667460 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x26de9668930 <line:770:5, col:32> 'void'
|   | |-ImplicitCastExpr 0x26de9668918 <col:5> 'void (*)(int *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de9668898 <col:5> 'void (int *, const limb *, const limb *)' Function 0x26de95a07c8 'felem_mul' 'void (int *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x26de9668968 <col:15> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de96688b8 <col:15> 'largefelem':'int [9]' lvalue Var 0x26de9667460 'tmp' 'largefelem':'int [9]'
|   | |-ImplicitCastExpr 0x26de9668998 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x26de9668980 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x26de96688d8 <col:20> 'felem':'limb [9]' lvalue Var 0x26de9667330 'ftmp3' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x26de96689c8 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de96689b0 <col:27> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x26de96688f8 <col:27> 'felem':'limb [9]' lvalue Var 0x26de96672b8 'ftmp2' 'felem':'limb [9]'
|   |-CallExpr 0x26de9668a58 <line:771:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x26de9668a40 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de96689e0 <col:5> 'void (limb *, const int *)' Function 0x26de95a3de8 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x26de9668a88 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de9668a00 <col:18> 'felem':'limb [9]' lvalue Var 0x26de9667330 'ftmp3' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x26de9668ab8 <col:25> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de9668aa0 <col:25> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x26de9668a20 <col:25> 'largefelem':'int [9]' lvalue Var 0x26de9667460 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x26de9668b48 <line:772:5, col:30> 'void'
|   | |-ImplicitCastExpr 0x26de9668b30 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de9668ad0 <col:5> 'void (limb *, const limb *)' Function 0x26de9594bb8 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x26de9668b78 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de9668af0 <col:18> 'felem':'limb [9]' lvalue Var 0x26de96672b8 'ftmp2' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x26de9668ba8 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de9668b90 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x26de9668b10 <col:25> 'felem':'limb [9]' lvalue Var 0x26de9667330 'ftmp3' 'felem':'limb [9]'
|   |-ForStmt 0x26de9668f10 <line:774:5, line:777:5>
|   | |-BinaryOperator 0x26de9668c20 <line:774:10, col:14> 'unsigned int' '='
|   | | |-DeclRefExpr 0x26de9668bc0 <col:10> 'unsigned int' lvalue Var 0x26de96674f8 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x26de9668c08 <col:14> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x26de9668be0 <col:14> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x26de9668cb8 <col:17, col:21> 'int' '<'
|   | | |-ImplicitCastExpr 0x26de9668c88 <col:17> 'unsigned int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de9668c40 <col:17> 'unsigned int' lvalue Var 0x26de96674f8 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x26de9668ca0 <col:21> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x26de9668c60 <col:21> 'int' 64
|   | |-UnaryOperator 0x26de9668cf8 <col:25, col:26> 'unsigned int' postfix '++'
|   | | `-DeclRefExpr 0x26de9668cd8 <col:25> 'unsigned int' lvalue Var 0x26de96674f8 'i' 'unsigned int'
|   | `-CompoundStmt 0x26de9668ef0 <col:30, line:777:5>
|   |   |-CallExpr 0x26de9668d88 <line:775:9, col:32> 'void'
|   |   | |-ImplicitCastExpr 0x26de9668d70 <col:9> 'void (*)(int *, const limb *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x26de9668d10 <col:9> 'void (int *, const limb *)' Function 0x26de959e190 'felem_square' 'void (int *, const limb *)'
|   |   | |-ImplicitCastExpr 0x26de9668db8 <col:22> 'int *' <ArrayToPointerDecay>
|   |   | | `-DeclRefExpr 0x26de9668d30 <col:22> 'largefelem':'int [9]' lvalue Var 0x26de9667460 'tmp' 'largefelem':'int [9]'
|   |   | `-ImplicitCastExpr 0x26de9668de8 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   |   `-ImplicitCastExpr 0x26de9668dd0 <col:27> 'limb *' <ArrayToPointerDecay>
|   |   |     `-DeclRefExpr 0x26de9668d50 <col:27> 'felem':'limb [9]' lvalue Var 0x26de9667330 'ftmp3' 'felem':'limb [9]'
|   |   `-CallExpr 0x26de9668e78 <line:776:9, col:32> 'void'
|   |     |-ImplicitCastExpr 0x26de9668e60 <col:9> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x26de9668e00 <col:9> 'void (limb *, const int *)' Function 0x26de95a3de8 'felem_reduce' 'void (limb *, const int *)'
|   |     |-ImplicitCastExpr 0x26de9668ea8 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x26de9668e20 <col:22> 'felem':'limb [9]' lvalue Var 0x26de9667330 'ftmp3' 'felem':'limb [9]'
|   |     `-ImplicitCastExpr 0x26de9668ed8 <col:29> 'const int *':'const int *' <NoOp>
|   |       `-ImplicitCastExpr 0x26de9668ec0 <col:29> 'int *' <ArrayToPointerDecay>
|   |         `-DeclRefExpr 0x26de9668e40 <col:29> 'largefelem':'int [9]' lvalue Var 0x26de9667460 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x26de9668fe0 <line:778:5, col:32> 'void'
|   | |-ImplicitCastExpr 0x26de9668fc8 <col:5> 'void (*)(int *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de9668f48 <col:5> 'void (int *, const limb *, const limb *)' Function 0x26de95a07c8 'felem_mul' 'void (int *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x26de9669018 <col:15> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de9668f68 <col:15> 'largefelem':'int [9]' lvalue Var 0x26de9667460 'tmp' 'largefelem':'int [9]'
|   | |-ImplicitCastExpr 0x26de9669048 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x26de9669030 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x26de9668f88 <col:20> 'felem':'limb [9]' lvalue Var 0x26de9667330 'ftmp3' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x26de9669078 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de9669060 <col:27> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x26de9668fa8 <col:27> 'felem':'limb [9]' lvalue Var 0x26de96672b8 'ftmp2' 'felem':'limb [9]'
|   |-CallExpr 0x26de9669108 <line:779:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x26de96690f0 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de9669090 <col:5> 'void (limb *, const int *)' Function 0x26de95a3de8 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x26de9669138 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de96690b0 <col:18> 'felem':'limb [9]' lvalue Var 0x26de9667330 'ftmp3' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x26de9669168 <col:25> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de9669150 <col:25> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x26de96690d0 <col:25> 'largefelem':'int [9]' lvalue Var 0x26de9667460 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x26de96691f8 <line:780:5, col:30> 'void'
|   | |-ImplicitCastExpr 0x26de96691e0 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de9669180 <col:5> 'void (limb *, const limb *)' Function 0x26de9594bb8 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x26de9669228 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de96691a0 <col:18> 'felem':'limb [9]' lvalue Var 0x26de96672b8 'ftmp2' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x26de9669258 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de9669240 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x26de96691c0 <col:25> 'felem':'limb [9]' lvalue Var 0x26de9667330 'ftmp3' 'felem':'limb [9]'
|   |-ForStmt 0x26de96695c0 <line:782:5, line:785:5>
|   | |-BinaryOperator 0x26de96692d0 <line:782:10, col:14> 'unsigned int' '='
|   | | |-DeclRefExpr 0x26de9669270 <col:10> 'unsigned int' lvalue Var 0x26de96674f8 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x26de96692b8 <col:14> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x26de9669290 <col:14> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x26de9669368 <col:17, col:21> 'int' '<'
|   | | |-ImplicitCastExpr 0x26de9669338 <col:17> 'unsigned int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de96692f0 <col:17> 'unsigned int' lvalue Var 0x26de96674f8 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x26de9669350 <col:21> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x26de9669310 <col:21> 'int' 128
|   | |-UnaryOperator 0x26de96693a8 <col:26, col:27> 'unsigned int' postfix '++'
|   | | `-DeclRefExpr 0x26de9669388 <col:26> 'unsigned int' lvalue Var 0x26de96674f8 'i' 'unsigned int'
|   | `-CompoundStmt 0x26de96695a0 <col:31, line:785:5>
|   |   |-CallExpr 0x26de9669438 <line:783:9, col:32> 'void'
|   |   | |-ImplicitCastExpr 0x26de9669420 <col:9> 'void (*)(int *, const limb *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x26de96693c0 <col:9> 'void (int *, const limb *)' Function 0x26de959e190 'felem_square' 'void (int *, const limb *)'
|   |   | |-ImplicitCastExpr 0x26de9669468 <col:22> 'int *' <ArrayToPointerDecay>
|   |   | | `-DeclRefExpr 0x26de96693e0 <col:22> 'largefelem':'int [9]' lvalue Var 0x26de9667460 'tmp' 'largefelem':'int [9]'
|   |   | `-ImplicitCastExpr 0x26de9669498 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   |   `-ImplicitCastExpr 0x26de9669480 <col:27> 'limb *' <ArrayToPointerDecay>
|   |   |     `-DeclRefExpr 0x26de9669400 <col:27> 'felem':'limb [9]' lvalue Var 0x26de9667330 'ftmp3' 'felem':'limb [9]'
|   |   `-CallExpr 0x26de9669528 <line:784:9, col:32> 'void'
|   |     |-ImplicitCastExpr 0x26de9669510 <col:9> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x26de96694b0 <col:9> 'void (limb *, const int *)' Function 0x26de95a3de8 'felem_reduce' 'void (limb *, const int *)'
|   |     |-ImplicitCastExpr 0x26de9669558 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x26de96694d0 <col:22> 'felem':'limb [9]' lvalue Var 0x26de9667330 'ftmp3' 'felem':'limb [9]'
|   |     `-ImplicitCastExpr 0x26de9669588 <col:29> 'const int *':'const int *' <NoOp>
|   |       `-ImplicitCastExpr 0x26de9669570 <col:29> 'int *' <ArrayToPointerDecay>
|   |         `-DeclRefExpr 0x26de96694f0 <col:29> 'largefelem':'int [9]' lvalue Var 0x26de9667460 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x26de9669690 <line:786:5, col:32> 'void'
|   | |-ImplicitCastExpr 0x26de9669678 <col:5> 'void (*)(int *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de96695f8 <col:5> 'void (int *, const limb *, const limb *)' Function 0x26de95a07c8 'felem_mul' 'void (int *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x26de96696c8 <col:15> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de9669618 <col:15> 'largefelem':'int [9]' lvalue Var 0x26de9667460 'tmp' 'largefelem':'int [9]'
|   | |-ImplicitCastExpr 0x26de96696f8 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x26de96696e0 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x26de9669638 <col:20> 'felem':'limb [9]' lvalue Var 0x26de9667330 'ftmp3' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x26de9669728 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de9669710 <col:27> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x26de9669658 <col:27> 'felem':'limb [9]' lvalue Var 0x26de96672b8 'ftmp2' 'felem':'limb [9]'
|   |-CallExpr 0x26de96697b8 <line:787:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x26de96697a0 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de9669740 <col:5> 'void (limb *, const int *)' Function 0x26de95a3de8 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x26de96697e8 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de9669760 <col:18> 'felem':'limb [9]' lvalue Var 0x26de9667330 'ftmp3' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x26de9669818 <col:25> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de9669800 <col:25> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x26de9669780 <col:25> 'largefelem':'int [9]' lvalue Var 0x26de9667460 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x26de96698a8 <line:788:5, col:30> 'void'
|   | |-ImplicitCastExpr 0x26de9669890 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de9669830 <col:5> 'void (limb *, const limb *)' Function 0x26de9594bb8 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x26de96698d8 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de9669850 <col:18> 'felem':'limb [9]' lvalue Var 0x26de96672b8 'ftmp2' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x26de9669908 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de96698f0 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x26de9669870 <col:25> 'felem':'limb [9]' lvalue Var 0x26de9667330 'ftmp3' 'felem':'limb [9]'
|   |-ForStmt 0x26de9669c70 <line:790:5, line:793:5>
|   | |-BinaryOperator 0x26de9669980 <line:790:10, col:14> 'unsigned int' '='
|   | | |-DeclRefExpr 0x26de9669920 <col:10> 'unsigned int' lvalue Var 0x26de96674f8 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x26de9669968 <col:14> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x26de9669940 <col:14> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x26de9669a18 <col:17, col:21> 'int' '<'
|   | | |-ImplicitCastExpr 0x26de96699e8 <col:17> 'unsigned int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de96699a0 <col:17> 'unsigned int' lvalue Var 0x26de96674f8 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x26de9669a00 <col:21> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x26de96699c0 <col:21> 'int' 256
|   | |-UnaryOperator 0x26de9669a58 <col:26, col:27> 'unsigned int' postfix '++'
|   | | `-DeclRefExpr 0x26de9669a38 <col:26> 'unsigned int' lvalue Var 0x26de96674f8 'i' 'unsigned int'
|   | `-CompoundStmt 0x26de9669c50 <col:31, line:793:5>
|   |   |-CallExpr 0x26de9669ae8 <line:791:9, col:32> 'void'
|   |   | |-ImplicitCastExpr 0x26de9669ad0 <col:9> 'void (*)(int *, const limb *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x26de9669a70 <col:9> 'void (int *, const limb *)' Function 0x26de959e190 'felem_square' 'void (int *, const limb *)'
|   |   | |-ImplicitCastExpr 0x26de9669b18 <col:22> 'int *' <ArrayToPointerDecay>
|   |   | | `-DeclRefExpr 0x26de9669a90 <col:22> 'largefelem':'int [9]' lvalue Var 0x26de9667460 'tmp' 'largefelem':'int [9]'
|   |   | `-ImplicitCastExpr 0x26de9669b48 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   |   `-ImplicitCastExpr 0x26de9669b30 <col:27> 'limb *' <ArrayToPointerDecay>
|   |   |     `-DeclRefExpr 0x26de9669ab0 <col:27> 'felem':'limb [9]' lvalue Var 0x26de9667330 'ftmp3' 'felem':'limb [9]'
|   |   `-CallExpr 0x26de9669bd8 <line:792:9, col:32> 'void'
|   |     |-ImplicitCastExpr 0x26de9669bc0 <col:9> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x26de9669b60 <col:9> 'void (limb *, const int *)' Function 0x26de95a3de8 'felem_reduce' 'void (limb *, const int *)'
|   |     |-ImplicitCastExpr 0x26de9669c08 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x26de9669b80 <col:22> 'felem':'limb [9]' lvalue Var 0x26de9667330 'ftmp3' 'felem':'limb [9]'
|   |     `-ImplicitCastExpr 0x26de9669c38 <col:29> 'const int *':'const int *' <NoOp>
|   |       `-ImplicitCastExpr 0x26de9669c20 <col:29> 'int *' <ArrayToPointerDecay>
|   |         `-DeclRefExpr 0x26de9669ba0 <col:29> 'largefelem':'int [9]' lvalue Var 0x26de9667460 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x26de9669d40 <line:794:5, col:32> 'void'
|   | |-ImplicitCastExpr 0x26de9669d28 <col:5> 'void (*)(int *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de9669ca8 <col:5> 'void (int *, const limb *, const limb *)' Function 0x26de95a07c8 'felem_mul' 'void (int *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x26de9669d78 <col:15> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de9669cc8 <col:15> 'largefelem':'int [9]' lvalue Var 0x26de9667460 'tmp' 'largefelem':'int [9]'
|   | |-ImplicitCastExpr 0x26de9669da8 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x26de9669d90 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x26de9669ce8 <col:20> 'felem':'limb [9]' lvalue Var 0x26de9667330 'ftmp3' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x26de9669dd8 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de9669dc0 <col:27> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x26de9669d08 <col:27> 'felem':'limb [9]' lvalue Var 0x26de96672b8 'ftmp2' 'felem':'limb [9]'
|   |-CallExpr 0x26de9669e78 <line:795:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x26de9669e60 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de9669df0 <col:5> 'void (limb *, const int *)' Function 0x26de95a3de8 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x26de9669ea8 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de9669e10 <col:18> 'felem':'limb [9]' lvalue Var 0x26de9667330 'ftmp3' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x26de9669ed8 <col:25> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de9669ec0 <col:25> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x26de9669e40 <col:25> 'largefelem':'int [9]' lvalue Var 0x26de9667460 'tmp' 'largefelem':'int [9]'
|   |-ForStmt 0x26de966a240 <line:797:5, line:800:5>
|   | |-BinaryOperator 0x26de9669f50 <line:797:10, col:14> 'unsigned int' '='
|   | | |-DeclRefExpr 0x26de9669ef0 <col:10> 'unsigned int' lvalue Var 0x26de96674f8 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x26de9669f38 <col:14> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x26de9669f10 <col:14> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x26de9669fe8 <col:17, col:21> 'int' '<'
|   | | |-ImplicitCastExpr 0x26de9669fb8 <col:17> 'unsigned int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de9669f70 <col:17> 'unsigned int' lvalue Var 0x26de96674f8 'i' 'unsigned int'
|   | | `-ImplicitCastExpr 0x26de9669fd0 <col:21> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x26de9669f90 <col:21> 'int' 9
|   | |-UnaryOperator 0x26de966a028 <col:24, col:25> 'unsigned int' postfix '++'
|   | | `-DeclRefExpr 0x26de966a008 <col:24> 'unsigned int' lvalue Var 0x26de96674f8 'i' 'unsigned int'
|   | `-CompoundStmt 0x26de966a220 <col:29, line:800:5>
|   |   |-CallExpr 0x26de966a0b8 <line:798:9, col:32> 'void'
|   |   | |-ImplicitCastExpr 0x26de966a0a0 <col:9> 'void (*)(int *, const limb *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x26de966a040 <col:9> 'void (int *, const limb *)' Function 0x26de959e190 'felem_square' 'void (int *, const limb *)'
|   |   | |-ImplicitCastExpr 0x26de966a0e8 <col:22> 'int *' <ArrayToPointerDecay>
|   |   | | `-DeclRefExpr 0x26de966a060 <col:22> 'largefelem':'int [9]' lvalue Var 0x26de9667460 'tmp' 'largefelem':'int [9]'
|   |   | `-ImplicitCastExpr 0x26de966a118 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   |   `-ImplicitCastExpr 0x26de966a100 <col:27> 'limb *' <ArrayToPointerDecay>
|   |   |     `-DeclRefExpr 0x26de966a080 <col:27> 'felem':'limb [9]' lvalue Var 0x26de9667330 'ftmp3' 'felem':'limb [9]'
|   |   `-CallExpr 0x26de966a1a8 <line:799:9, col:32> 'void'
|   |     |-ImplicitCastExpr 0x26de966a190 <col:9> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x26de966a130 <col:9> 'void (limb *, const int *)' Function 0x26de95a3de8 'felem_reduce' 'void (limb *, const int *)'
|   |     |-ImplicitCastExpr 0x26de966a1d8 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x26de966a150 <col:22> 'felem':'limb [9]' lvalue Var 0x26de9667330 'ftmp3' 'felem':'limb [9]'
|   |     `-ImplicitCastExpr 0x26de966a208 <col:29> 'const int *':'const int *' <NoOp>
|   |       `-ImplicitCastExpr 0x26de966a1f0 <col:29> 'int *' <ArrayToPointerDecay>
|   |         `-DeclRefExpr 0x26de966a170 <col:29> 'largefelem':'int [9]' lvalue Var 0x26de9667460 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x26de966a310 <line:801:5, col:32> 'void'
|   | |-ImplicitCastExpr 0x26de966a2f8 <col:5> 'void (*)(int *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de966a278 <col:5> 'void (int *, const limb *, const limb *)' Function 0x26de95a07c8 'felem_mul' 'void (int *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x26de966a348 <col:15> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de966a298 <col:15> 'largefelem':'int [9]' lvalue Var 0x26de9667460 'tmp' 'largefelem':'int [9]'
|   | |-ImplicitCastExpr 0x26de966a378 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x26de966a360 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x26de966a2b8 <col:20> 'felem':'limb [9]' lvalue Var 0x26de9667330 'ftmp3' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x26de966a3a8 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de966a390 <col:27> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x26de966a2d8 <col:27> 'felem':'limb [9]' lvalue Var 0x26de96673a8 'ftmp4' 'felem':'limb [9]'
|   |-CallExpr 0x26de966a438 <line:802:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x26de966a420 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de966a3c0 <col:5> 'void (limb *, const int *)' Function 0x26de95a3de8 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x26de966a468 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de966a3e0 <col:18> 'felem':'limb [9]' lvalue Var 0x26de9667330 'ftmp3' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x26de966a498 <col:25> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de966a480 <col:25> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x26de966a400 <col:25> 'largefelem':'int [9]' lvalue Var 0x26de9667460 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x26de966a548 <line:803:5, col:29> 'void'
|   | |-ImplicitCastExpr 0x26de966a530 <col:5> 'void (*)(int *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de966a4b0 <col:5> 'void (int *, const limb *, const limb *)' Function 0x26de95a07c8 'felem_mul' 'void (int *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x26de966a580 <col:15> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de966a4d0 <col:15> 'largefelem':'int [9]' lvalue Var 0x26de9667460 'tmp' 'largefelem':'int [9]'
|   | |-ImplicitCastExpr 0x26de966a5b0 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x26de966a598 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x26de966a4f0 <col:20> 'felem':'limb [9]' lvalue Var 0x26de9667330 'ftmp3' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x26de966a5c8 <col:27> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x26de966a510 <col:27> 'const limb *':'const limb *' lvalue ParmVar 0x26de96670a0 'in' 'const limb *':'const limb *'
|   `-CallExpr 0x26de966a658 <line:804:5, col:26> 'void'
|     |-ImplicitCastExpr 0x26de966a640 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x26de966a5e0 <col:5> 'void (limb *, const int *)' Function 0x26de95a3de8 'felem_reduce' 'void (limb *, const int *)'
|     |-ImplicitCastExpr 0x26de966a688 <col:18> 'limb *':'limb *' <LValueToRValue>
|     | `-DeclRefExpr 0x26de966a600 <col:18> 'limb *':'limb *' lvalue ParmVar 0x26de9667028 'out' 'limb *':'limb *'
|     `-ImplicitCastExpr 0x26de966a6b8 <col:23> 'const int *':'const int *' <NoOp>
|       `-ImplicitCastExpr 0x26de966a6a0 <col:23> 'int *' <ArrayToPointerDecay>
|         `-DeclRefExpr 0x26de966a620 <col:23> 'largefelem':'int [9]' lvalue Var 0x26de9667460 'tmp' 'largefelem':'int [9]'
|-VarDecl 0x26de966a8f8 <line:808:1, line:812:1> line:808:20 used kPrime 'const felem':'limb const[9]' static cinit
| `-InitListExpr 0x26de966ab78 <col:29, line:812:1> 'const felem':'limb const[9]'
|   |-ImplicitCastExpr 0x26de966ac00 <line:809:5> 'limb':'int' <IntegralCast>
|   | `-IntegerLiteral 0x26de966a960 <col:5> 'long long' 288230376151711743
|   |-ImplicitCastExpr 0x26de966ac18 <col:25> 'limb':'int' <IntegralCast>
|   | `-IntegerLiteral 0x26de966a988 <col:25> 'long long' 288230376151711743
|   |-ImplicitCastExpr 0x26de966ac30 <col:45> 'limb':'int' <IntegralCast>
|   | `-IntegerLiteral 0x26de966a9b0 <col:45> 'long long' 288230376151711743
|   |-ImplicitCastExpr 0x26de966ac48 <line:810:5> 'limb':'int' <IntegralCast>
|   | `-IntegerLiteral 0x26de966a9d8 <col:5> 'long long' 288230376151711743
|   |-ImplicitCastExpr 0x26de966ac60 <col:25> 'limb':'int' <IntegralCast>
|   | `-IntegerLiteral 0x26de966aa00 <col:25> 'long long' 288230376151711743
|   |-ImplicitCastExpr 0x26de966ac78 <col:45> 'limb':'int' <IntegralCast>
|   | `-IntegerLiteral 0x26de966aa28 <col:45> 'long long' 288230376151711743
|   |-ImplicitCastExpr 0x26de966ac90 <line:811:5> 'limb':'int' <IntegralCast>
|   | `-IntegerLiteral 0x26de966aa50 <col:5> 'long long' 288230376151711743
|   |-ImplicitCastExpr 0x26de966aca8 <col:25> 'limb':'int' <IntegralCast>
|   | `-IntegerLiteral 0x26de966aa78 <col:25> 'long long' 288230376151711743
|   `-ImplicitCastExpr 0x26de966acc0 <col:45> 'limb':'int' <IntegralCast>
|     `-IntegerLiteral 0x26de966aaa0 <col:45> 'long long' 144115188075855871
|-FunctionDecl 0x26de966adc8 <line:820:1, line:886:1> line:820:13 used felem_is_zero 'limb (const limb *)' static
| |-ParmVarDecl 0x26de966ace8 <col:27, col:39> col:39 used in 'const limb *':'const limb *'
| `-CompoundStmt 0x26de9662270 <line:821:1, line:886:1>
|   |-DeclStmt 0x26de966af00 <line:822:5, col:15>
|   | `-VarDecl 0x26de966ae98 <col:5, col:11> col:11 used ftmp 'felem':'limb [9]'
|   |-DeclStmt 0x26de966b020 <line:823:5, col:23>
|   | |-VarDecl 0x26de966af28 <col:5, col:10> col:10 used is_zero 'limb':'int'
|   | `-VarDecl 0x26de966afa0 <col:5, col:19> col:19 used is_p 'limb':'int'
|   |-CallExpr 0x26de966b0c8 <line:824:5, col:26> 'void'
|   | |-ImplicitCastExpr 0x26de966b0b0 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de966b038 <col:5> 'void (limb *, const limb *)' Function 0x26de9594bb8 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x26de966b0f8 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de966b058 <col:18> 'felem':'limb [9]' lvalue Var 0x26de966ae98 'ftmp' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x26de966b110 <col:24> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x26de966b090 <col:24> 'const limb *':'const limb *' lvalue ParmVar 0x26de966ace8 'in' 'const limb *':'const limb *'
|   |-CompoundAssignOperator 0x26de966b288 <line:826:5, col:27> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de966b188 <col:5, col:11> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de966b170 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x26de966b128 <col:5> 'felem':'limb [9]' lvalue Var 0x26de966ae98 'ftmp' 'felem':'limb [9]'
|   | | `-IntegerLiteral 0x26de966b148 <col:10> 'int' 0
|   | `-BinaryOperator 0x26de966b268 <col:16, col:27> 'limb':'int' '>>'
|   |   |-ImplicitCastExpr 0x26de966b250 <col:16, col:22> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x26de966b208 <col:16, col:22> 'limb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x26de966b1f0 <col:16> 'limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x26de966b1a8 <col:16> 'felem':'limb [9]' lvalue Var 0x26de966ae98 'ftmp' 'felem':'limb [9]'
|   |   |   `-IntegerLiteral 0x26de966b1c8 <col:21> 'int' 8
|   |   `-IntegerLiteral 0x26de966b228 <col:27> 'int' 57
|   |-CompoundAssignOperator 0x26de966b370 <line:827:5, col:16> 'limb':'int' '&=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de966b318 <col:5, col:11> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de966b300 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x26de966b2b8 <col:5> 'felem':'limb [9]' lvalue Var 0x26de966ae98 'ftmp' 'felem':'limb [9]'
|   | | `-IntegerLiteral 0x26de966b2d8 <col:10> 'int' 8
|   | `-ImplicitCastExpr 0x26de966b358 <col:16> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x26de966b338 <col:16> 'const limb':'const int' lvalue Var 0x26de958ed40 'bottom57bits' 'const limb':'const int'
|   |-CompoundAssignOperator 0x26de966b500 <line:829:5, col:27> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de966b400 <col:5, col:11> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de966b3e8 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x26de966b3a0 <col:5> 'felem':'limb [9]' lvalue Var 0x26de966ae98 'ftmp' 'felem':'limb [9]'
|   | | `-IntegerLiteral 0x26de966b3c0 <col:10> 'int' 1
|   | `-BinaryOperator 0x26de966b4e0 <col:16, col:27> 'limb':'int' '>>'
|   |   |-ImplicitCastExpr 0x26de966b4c8 <col:16, col:22> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x26de966b480 <col:16, col:22> 'limb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x26de966b468 <col:16> 'limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x26de966b420 <col:16> 'felem':'limb [9]' lvalue Var 0x26de966ae98 'ftmp' 'felem':'limb [9]'
|   |   |   `-IntegerLiteral 0x26de966b440 <col:21> 'int' 0
|   |   `-IntegerLiteral 0x26de966b4a0 <col:27> 'int' 58
|   |-CompoundAssignOperator 0x26de966b5e8 <line:830:5, col:16> 'limb':'int' '&=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de966b590 <col:5, col:11> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de966b578 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x26de966b530 <col:5> 'felem':'limb [9]' lvalue Var 0x26de966ae98 'ftmp' 'felem':'limb [9]'
|   | | `-IntegerLiteral 0x26de966b550 <col:10> 'int' 0
|   | `-ImplicitCastExpr 0x26de966b5d0 <col:16> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x26de966b5b0 <col:16> 'const limb':'const int' lvalue Var 0x26de958ee10 'bottom58bits' 'const limb':'const int'
|   |-CompoundAssignOperator 0x26de966b778 <line:831:5, col:27> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de966b678 <col:5, col:11> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de966b660 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x26de966b618 <col:5> 'felem':'limb [9]' lvalue Var 0x26de966ae98 'ftmp' 'felem':'limb [9]'
|   | | `-IntegerLiteral 0x26de966b638 <col:10> 'int' 2
|   | `-BinaryOperator 0x26de966b758 <col:16, col:27> 'limb':'int' '>>'
|   |   |-ImplicitCastExpr 0x26de966b740 <col:16, col:22> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x26de966b6f8 <col:16, col:22> 'limb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x26de966b6e0 <col:16> 'limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x26de966b698 <col:16> 'felem':'limb [9]' lvalue Var 0x26de966ae98 'ftmp' 'felem':'limb [9]'
|   |   |   `-IntegerLiteral 0x26de966b6b8 <col:21> 'int' 1
|   |   `-IntegerLiteral 0x26de966b718 <col:27> 'int' 58
|   |-CompoundAssignOperator 0x26de966b860 <line:832:5, col:16> 'limb':'int' '&=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de966b808 <col:5, col:11> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de966b7f0 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x26de966b7a8 <col:5> 'felem':'limb [9]' lvalue Var 0x26de966ae98 'ftmp' 'felem':'limb [9]'
|   | | `-IntegerLiteral 0x26de966b7c8 <col:10> 'int' 1
|   | `-ImplicitCastExpr 0x26de966b848 <col:16> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x26de966b828 <col:16> 'const limb':'const int' lvalue Var 0x26de958ee10 'bottom58bits' 'const limb':'const int'
|   |-CompoundAssignOperator 0x26de966b9f0 <line:833:5, col:27> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de966b8f0 <col:5, col:11> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de966b8d8 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x26de966b890 <col:5> 'felem':'limb [9]' lvalue Var 0x26de966ae98 'ftmp' 'felem':'limb [9]'
|   | | `-IntegerLiteral 0x26de966b8b0 <col:10> 'int' 3
|   | `-BinaryOperator 0x26de966b9d0 <col:16, col:27> 'limb':'int' '>>'
|   |   |-ImplicitCastExpr 0x26de966b9b8 <col:16, col:22> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x26de966b970 <col:16, col:22> 'limb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x26de966b958 <col:16> 'limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x26de966b910 <col:16> 'felem':'limb [9]' lvalue Var 0x26de966ae98 'ftmp' 'felem':'limb [9]'
|   |   |   `-IntegerLiteral 0x26de966b930 <col:21> 'int' 2
|   |   `-IntegerLiteral 0x26de966b990 <col:27> 'int' 58
|   |-CompoundAssignOperator 0x26de966bad8 <line:834:5, col:16> 'limb':'int' '&=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de966ba80 <col:5, col:11> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de966ba68 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x26de966ba20 <col:5> 'felem':'limb [9]' lvalue Var 0x26de966ae98 'ftmp' 'felem':'limb [9]'
|   | | `-IntegerLiteral 0x26de966ba40 <col:10> 'int' 2
|   | `-ImplicitCastExpr 0x26de966bac0 <col:16> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x26de966baa0 <col:16> 'const limb':'const int' lvalue Var 0x26de958ee10 'bottom58bits' 'const limb':'const int'
|   |-CompoundAssignOperator 0x26de966bc68 <line:835:5, col:27> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de966bb68 <col:5, col:11> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de966bb50 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x26de966bb08 <col:5> 'felem':'limb [9]' lvalue Var 0x26de966ae98 'ftmp' 'felem':'limb [9]'
|   | | `-IntegerLiteral 0x26de966bb28 <col:10> 'int' 4
|   | `-BinaryOperator 0x26de966bc48 <col:16, col:27> 'limb':'int' '>>'
|   |   |-ImplicitCastExpr 0x26de966bc30 <col:16, col:22> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x26de966bbe8 <col:16, col:22> 'limb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x26de966bbd0 <col:16> 'limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x26de966bb88 <col:16> 'felem':'limb [9]' lvalue Var 0x26de966ae98 'ftmp' 'felem':'limb [9]'
|   |   |   `-IntegerLiteral 0x26de966bba8 <col:21> 'int' 3
|   |   `-IntegerLiteral 0x26de966bc08 <col:27> 'int' 58
|   |-CompoundAssignOperator 0x26de966bd50 <line:836:5, col:16> 'limb':'int' '&=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de966bcf8 <col:5, col:11> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de966bce0 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x26de966bc98 <col:5> 'felem':'limb [9]' lvalue Var 0x26de966ae98 'ftmp' 'felem':'limb [9]'
|   | | `-IntegerLiteral 0x26de966bcb8 <col:10> 'int' 3
|   | `-ImplicitCastExpr 0x26de966bd38 <col:16> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x26de966bd18 <col:16> 'const limb':'const int' lvalue Var 0x26de958ee10 'bottom58bits' 'const limb':'const int'
|   |-CompoundAssignOperator 0x26de965dea0 <line:837:5, col:27> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de966bde0 <col:5, col:11> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de966bdc8 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x26de966bd80 <col:5> 'felem':'limb [9]' lvalue Var 0x26de966ae98 'ftmp' 'felem':'limb [9]'
|   | | `-IntegerLiteral 0x26de966bda0 <col:10> 'int' 5
|   | `-BinaryOperator 0x26de965de80 <col:16, col:27> 'limb':'int' '>>'
|   |   |-ImplicitCastExpr 0x26de965de68 <col:16, col:22> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x26de965de20 <col:16, col:22> 'limb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x26de965de08 <col:16> 'limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x26de966be00 <col:16> 'felem':'limb [9]' lvalue Var 0x26de966ae98 'ftmp' 'felem':'limb [9]'
|   |   |   `-IntegerLiteral 0x26de965dde0 <col:21> 'int' 4
|   |   `-IntegerLiteral 0x26de965de40 <col:27> 'int' 58
|   |-CompoundAssignOperator 0x26de965df88 <line:838:5, col:16> 'limb':'int' '&=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de965df30 <col:5, col:11> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de965df18 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x26de965ded0 <col:5> 'felem':'limb [9]' lvalue Var 0x26de966ae98 'ftmp' 'felem':'limb [9]'
|   | | `-IntegerLiteral 0x26de965def0 <col:10> 'int' 4
|   | `-ImplicitCastExpr 0x26de965df70 <col:16> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x26de965df50 <col:16> 'const limb':'const int' lvalue Var 0x26de958ee10 'bottom58bits' 'const limb':'const int'
|   |-CompoundAssignOperator 0x26de965e118 <line:839:5, col:27> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de965e018 <col:5, col:11> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de965e000 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x26de965dfb8 <col:5> 'felem':'limb [9]' lvalue Var 0x26de966ae98 'ftmp' 'felem':'limb [9]'
|   | | `-IntegerLiteral 0x26de965dfd8 <col:10> 'int' 6
|   | `-BinaryOperator 0x26de965e0f8 <col:16, col:27> 'limb':'int' '>>'
|   |   |-ImplicitCastExpr 0x26de965e0e0 <col:16, col:22> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x26de965e098 <col:16, col:22> 'limb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x26de965e080 <col:16> 'limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x26de965e038 <col:16> 'felem':'limb [9]' lvalue Var 0x26de966ae98 'ftmp' 'felem':'limb [9]'
|   |   |   `-IntegerLiteral 0x26de965e058 <col:21> 'int' 5
|   |   `-IntegerLiteral 0x26de965e0b8 <col:27> 'int' 58
|   |-CompoundAssignOperator 0x26de965e200 <line:840:5, col:16> 'limb':'int' '&=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de965e1a8 <col:5, col:11> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de965e190 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x26de965e148 <col:5> 'felem':'limb [9]' lvalue Var 0x26de966ae98 'ftmp' 'felem':'limb [9]'
|   | | `-IntegerLiteral 0x26de965e168 <col:10> 'int' 5
|   | `-ImplicitCastExpr 0x26de965e1e8 <col:16> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x26de965e1c8 <col:16> 'const limb':'const int' lvalue Var 0x26de958ee10 'bottom58bits' 'const limb':'const int'
|   |-CompoundAssignOperator 0x26de965e390 <line:841:5, col:27> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de965e290 <col:5, col:11> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de965e278 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x26de965e230 <col:5> 'felem':'limb [9]' lvalue Var 0x26de966ae98 'ftmp' 'felem':'limb [9]'
|   | | `-IntegerLiteral 0x26de965e250 <col:10> 'int' 7
|   | `-BinaryOperator 0x26de965e370 <col:16, col:27> 'limb':'int' '>>'
|   |   |-ImplicitCastExpr 0x26de965e358 <col:16, col:22> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x26de965e310 <col:16, col:22> 'limb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x26de965e2f8 <col:16> 'limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x26de965e2b0 <col:16> 'felem':'limb [9]' lvalue Var 0x26de966ae98 'ftmp' 'felem':'limb [9]'
|   |   |   `-IntegerLiteral 0x26de965e2d0 <col:21> 'int' 6
|   |   `-IntegerLiteral 0x26de965e330 <col:27> 'int' 58
|   |-CompoundAssignOperator 0x26de965e478 <line:842:5, col:16> 'limb':'int' '&=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de965e420 <col:5, col:11> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de965e408 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x26de965e3c0 <col:5> 'felem':'limb [9]' lvalue Var 0x26de966ae98 'ftmp' 'felem':'limb [9]'
|   | | `-IntegerLiteral 0x26de965e3e0 <col:10> 'int' 6
|   | `-ImplicitCastExpr 0x26de965e460 <col:16> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x26de965e440 <col:16> 'const limb':'const int' lvalue Var 0x26de958ee10 'bottom58bits' 'const limb':'const int'
|   |-CompoundAssignOperator 0x26de965e608 <line:843:5, col:27> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de965e508 <col:5, col:11> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de965e4f0 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x26de965e4a8 <col:5> 'felem':'limb [9]' lvalue Var 0x26de966ae98 'ftmp' 'felem':'limb [9]'
|   | | `-IntegerLiteral 0x26de965e4c8 <col:10> 'int' 8
|   | `-BinaryOperator 0x26de965e5e8 <col:16, col:27> 'limb':'int' '>>'
|   |   |-ImplicitCastExpr 0x26de965e5d0 <col:16, col:22> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x26de965e588 <col:16, col:22> 'limb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x26de965e570 <col:16> 'limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x26de965e528 <col:16> 'felem':'limb [9]' lvalue Var 0x26de966ae98 'ftmp' 'felem':'limb [9]'
|   |   |   `-IntegerLiteral 0x26de965e548 <col:21> 'int' 7
|   |   `-IntegerLiteral 0x26de965e5a8 <col:27> 'int' 58
|   |-CompoundAssignOperator 0x26de965e6f0 <line:844:5, col:16> 'limb':'int' '&=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de965e698 <col:5, col:11> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de965e680 <col:5> 'limb *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x26de965e638 <col:5> 'felem':'limb [9]' lvalue Var 0x26de966ae98 'ftmp' 'felem':'limb [9]'
|   | | `-IntegerLiteral 0x26de965e658 <col:10> 'int' 7
|   | `-ImplicitCastExpr 0x26de965e6d8 <col:16> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x26de965e6b8 <col:16> 'const limb':'const int' lvalue Var 0x26de958ee10 'bottom58bits' 'const limb':'const int'
|   |-BinaryOperator 0x26de965e780 <line:853:5, col:15> 'limb':'int' '='
|   | |-DeclRefExpr 0x26de965e720 <col:5> 'limb':'int' lvalue Var 0x26de966af28 'is_zero' 'limb':'int'
|   | `-IntegerLiteral 0x26de965e758 <col:15> 'int' 0
|   |-CompoundAssignOperator 0x26de965e858 <line:854:5, col:22> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x26de965e7a0 <col:5> 'limb':'int' lvalue Var 0x26de966af28 'is_zero' 'limb':'int'
|   | `-ImplicitCastExpr 0x26de965e840 <col:16, col:22> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x26de965e820 <col:16, col:22> 'limb':'int' lvalue
|   |     |-ImplicitCastExpr 0x26de965e808 <col:16> 'limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x26de965e7c0 <col:16> 'felem':'limb [9]' lvalue Var 0x26de966ae98 'ftmp' 'felem':'limb [9]'
|   |     `-IntegerLiteral 0x26de965e7e0 <col:21> 'int' 0
|   |-CompoundAssignOperator 0x26de965e940 <line:855:5, col:22> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x26de965e888 <col:5> 'limb':'int' lvalue Var 0x26de966af28 'is_zero' 'limb':'int'
|   | `-ImplicitCastExpr 0x26de965e928 <col:16, col:22> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x26de965e908 <col:16, col:22> 'limb':'int' lvalue
|   |     |-ImplicitCastExpr 0x26de965e8f0 <col:16> 'limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x26de965e8a8 <col:16> 'felem':'limb [9]' lvalue Var 0x26de966ae98 'ftmp' 'felem':'limb [9]'
|   |     `-IntegerLiteral 0x26de965e8c8 <col:21> 'int' 1
|   |-CompoundAssignOperator 0x26de965ea28 <line:856:5, col:22> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x26de965e970 <col:5> 'limb':'int' lvalue Var 0x26de966af28 'is_zero' 'limb':'int'
|   | `-ImplicitCastExpr 0x26de965ea10 <col:16, col:22> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x26de965e9f0 <col:16, col:22> 'limb':'int' lvalue
|   |     |-ImplicitCastExpr 0x26de965e9d8 <col:16> 'limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x26de965e990 <col:16> 'felem':'limb [9]' lvalue Var 0x26de966ae98 'ftmp' 'felem':'limb [9]'
|   |     `-IntegerLiteral 0x26de965e9b0 <col:21> 'int' 2
|   |-CompoundAssignOperator 0x26de965eb10 <line:857:5, col:22> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x26de965ea58 <col:5> 'limb':'int' lvalue Var 0x26de966af28 'is_zero' 'limb':'int'
|   | `-ImplicitCastExpr 0x26de965eaf8 <col:16, col:22> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x26de965ead8 <col:16, col:22> 'limb':'int' lvalue
|   |     |-ImplicitCastExpr 0x26de965eac0 <col:16> 'limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x26de965ea78 <col:16> 'felem':'limb [9]' lvalue Var 0x26de966ae98 'ftmp' 'felem':'limb [9]'
|   |     `-IntegerLiteral 0x26de965ea98 <col:21> 'int' 3
|   |-CompoundAssignOperator 0x26de965ebf8 <line:858:5, col:22> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x26de965eb40 <col:5> 'limb':'int' lvalue Var 0x26de966af28 'is_zero' 'limb':'int'
|   | `-ImplicitCastExpr 0x26de965ebe0 <col:16, col:22> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x26de965ebc0 <col:16, col:22> 'limb':'int' lvalue
|   |     |-ImplicitCastExpr 0x26de965eba8 <col:16> 'limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x26de965eb60 <col:16> 'felem':'limb [9]' lvalue Var 0x26de966ae98 'ftmp' 'felem':'limb [9]'
|   |     `-IntegerLiteral 0x26de965eb80 <col:21> 'int' 4
|   |-CompoundAssignOperator 0x26de965ece0 <line:859:5, col:22> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x26de965ec28 <col:5> 'limb':'int' lvalue Var 0x26de966af28 'is_zero' 'limb':'int'
|   | `-ImplicitCastExpr 0x26de965ecc8 <col:16, col:22> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x26de965eca8 <col:16, col:22> 'limb':'int' lvalue
|   |     |-ImplicitCastExpr 0x26de965ec90 <col:16> 'limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x26de965ec48 <col:16> 'felem':'limb [9]' lvalue Var 0x26de966ae98 'ftmp' 'felem':'limb [9]'
|   |     `-IntegerLiteral 0x26de965ec68 <col:21> 'int' 5
|   |-CompoundAssignOperator 0x26de965edc8 <line:860:5, col:22> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x26de965ed10 <col:5> 'limb':'int' lvalue Var 0x26de966af28 'is_zero' 'limb':'int'
|   | `-ImplicitCastExpr 0x26de965edb0 <col:16, col:22> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x26de965ed90 <col:16, col:22> 'limb':'int' lvalue
|   |     |-ImplicitCastExpr 0x26de965ed78 <col:16> 'limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x26de965ed30 <col:16> 'felem':'limb [9]' lvalue Var 0x26de966ae98 'ftmp' 'felem':'limb [9]'
|   |     `-IntegerLiteral 0x26de965ed50 <col:21> 'int' 6
|   |-CompoundAssignOperator 0x26de965eeb0 <line:861:5, col:22> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x26de965edf8 <col:5> 'limb':'int' lvalue Var 0x26de966af28 'is_zero' 'limb':'int'
|   | `-ImplicitCastExpr 0x26de965ee98 <col:16, col:22> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x26de965ee78 <col:16, col:22> 'limb':'int' lvalue
|   |     |-ImplicitCastExpr 0x26de965ee60 <col:16> 'limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x26de965ee18 <col:16> 'felem':'limb [9]' lvalue Var 0x26de966ae98 'ftmp' 'felem':'limb [9]'
|   |     `-IntegerLiteral 0x26de965ee38 <col:21> 'int' 7
|   |-CompoundAssignOperator 0x26de965ef98 <line:862:5, col:22> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x26de965eee0 <col:5> 'limb':'int' lvalue Var 0x26de966af28 'is_zero' 'limb':'int'
|   | `-ImplicitCastExpr 0x26de965ef80 <col:16, col:22> 'limb':'int' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x26de965ef60 <col:16, col:22> 'limb':'int' lvalue
|   |     |-ImplicitCastExpr 0x26de965ef48 <col:16> 'limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x26de965ef00 <col:16> 'felem':'limb [9]' lvalue Var 0x26de966ae98 'ftmp' 'felem':'limb [9]'
|   |     `-IntegerLiteral 0x26de965ef20 <col:21> 'int' 8
|   |-UnaryOperator 0x26de965efe8 <line:864:5, col:12> 'limb':'int' postfix '--'
|   | `-DeclRefExpr 0x26de965efc8 <col:5> 'limb':'int' lvalue Var 0x26de966af28 'is_zero' 'limb':'int'
|   |-BinaryOperator 0x26de965f108 <line:869:5, col:33> 'limb':'int' '='
|   | |-DeclRefExpr 0x26de965f000 <col:5> 'limb':'int' lvalue Var 0x26de966af28 'is_zero' 'limb':'int'
|   | `-BinaryOperator 0x26de965f0e8 <col:15, col:33> 'int' '-'
|   |   |-IntegerLiteral 0x26de965f020 <col:15> 'int' 0
|   |   `-ParenExpr 0x26de965f0c8 <col:19, col:33> 'limb':'int'
|   |     `-BinaryOperator 0x26de965f0a8 <col:20, col:31> 'limb':'int' '>>'
|   |       |-ImplicitCastExpr 0x26de965f090 <col:20> 'limb':'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x26de965f048 <col:20> 'limb':'int' lvalue Var 0x26de966af28 'is_zero' 'limb':'int'
|   |       `-IntegerLiteral 0x26de965f068 <col:31> 'int' 63
|   |-BinaryOperator 0x26de965f2b0 <line:871:5, col:30> 'limb':'int' '='
|   | |-DeclRefExpr 0x26de965f128 <col:5> 'limb':'int' lvalue Var 0x26de966afa0 'is_p' 'limb':'int'
|   | `-BinaryOperator 0x26de965f290 <col:12, col:30> 'int' '^'
|   |   |-ImplicitCastExpr 0x26de965f260 <col:12, col:18> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x26de965f1c0 <col:12, col:18> 'limb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x26de965f1a8 <col:12> 'limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x26de965f160 <col:12> 'felem':'limb [9]' lvalue Var 0x26de966ae98 'ftmp' 'felem':'limb [9]'
|   |   |   `-IntegerLiteral 0x26de965f180 <col:17> 'int' 0
|   |   `-ImplicitCastExpr 0x26de965f278 <col:22, col:30> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x26de965f240 <col:22, col:30> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x26de965f228 <col:22> 'const limb *' <ArrayToPointerDecay>
|   |       | `-DeclRefExpr 0x26de965f1e0 <col:22> 'const felem':'limb const[9]' lvalue Var 0x26de966a8f8 'kPrime' 'const felem':'limb const[9]'
|   |       `-IntegerLiteral 0x26de965f200 <col:29> 'int' 0
|   |-CompoundAssignOperator 0x26de965f488 <line:872:5, col:31> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x26de965f318 <col:5> 'limb':'int' lvalue Var 0x26de966afa0 'is_p' 'limb':'int'
|   | `-BinaryOperator 0x26de965f468 <col:13, col:31> 'int' '^'
|   |   |-ImplicitCastExpr 0x26de965f438 <col:13, col:19> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x26de965f398 <col:13, col:19> 'limb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x26de965f380 <col:13> 'limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x26de965f338 <col:13> 'felem':'limb [9]' lvalue Var 0x26de966ae98 'ftmp' 'felem':'limb [9]'
|   |   |   `-IntegerLiteral 0x26de965f358 <col:18> 'int' 1
|   |   `-ImplicitCastExpr 0x26de965f450 <col:23, col:31> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x26de965f418 <col:23, col:31> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x26de965f400 <col:23> 'const limb *' <ArrayToPointerDecay>
|   |       | `-DeclRefExpr 0x26de965f3b8 <col:23> 'const felem':'limb const[9]' lvalue Var 0x26de966a8f8 'kPrime' 'const felem':'limb const[9]'
|   |       `-IntegerLiteral 0x26de965f3d8 <col:30> 'int' 1
|   |-CompoundAssignOperator 0x26de965f628 <line:873:5, col:31> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x26de965f4b8 <col:5> 'limb':'int' lvalue Var 0x26de966afa0 'is_p' 'limb':'int'
|   | `-BinaryOperator 0x26de965f608 <col:13, col:31> 'int' '^'
|   |   |-ImplicitCastExpr 0x26de965f5d8 <col:13, col:19> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x26de965f538 <col:13, col:19> 'limb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x26de965f520 <col:13> 'limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x26de965f4d8 <col:13> 'felem':'limb [9]' lvalue Var 0x26de966ae98 'ftmp' 'felem':'limb [9]'
|   |   |   `-IntegerLiteral 0x26de965f4f8 <col:18> 'int' 2
|   |   `-ImplicitCastExpr 0x26de965f5f0 <col:23, col:31> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x26de965f5b8 <col:23, col:31> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x26de965f5a0 <col:23> 'const limb *' <ArrayToPointerDecay>
|   |       | `-DeclRefExpr 0x26de965f558 <col:23> 'const felem':'limb const[9]' lvalue Var 0x26de966a8f8 'kPrime' 'const felem':'limb const[9]'
|   |       `-IntegerLiteral 0x26de965f578 <col:30> 'int' 2
|   |-CompoundAssignOperator 0x26de965f7c8 <line:874:5, col:31> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x26de965f658 <col:5> 'limb':'int' lvalue Var 0x26de966afa0 'is_p' 'limb':'int'
|   | `-BinaryOperator 0x26de965f7a8 <col:13, col:31> 'int' '^'
|   |   |-ImplicitCastExpr 0x26de965f778 <col:13, col:19> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x26de965f6d8 <col:13, col:19> 'limb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x26de965f6c0 <col:13> 'limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x26de965f678 <col:13> 'felem':'limb [9]' lvalue Var 0x26de966ae98 'ftmp' 'felem':'limb [9]'
|   |   |   `-IntegerLiteral 0x26de965f698 <col:18> 'int' 3
|   |   `-ImplicitCastExpr 0x26de965f790 <col:23, col:31> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x26de965f758 <col:23, col:31> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x26de965f740 <col:23> 'const limb *' <ArrayToPointerDecay>
|   |       | `-DeclRefExpr 0x26de965f6f8 <col:23> 'const felem':'limb const[9]' lvalue Var 0x26de966a8f8 'kPrime' 'const felem':'limb const[9]'
|   |       `-IntegerLiteral 0x26de965f718 <col:30> 'int' 3
|   |-CompoundAssignOperator 0x26de965f968 <line:875:5, col:31> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x26de965f7f8 <col:5> 'limb':'int' lvalue Var 0x26de966afa0 'is_p' 'limb':'int'
|   | `-BinaryOperator 0x26de965f948 <col:13, col:31> 'int' '^'
|   |   |-ImplicitCastExpr 0x26de965f918 <col:13, col:19> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x26de965f878 <col:13, col:19> 'limb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x26de965f860 <col:13> 'limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x26de965f818 <col:13> 'felem':'limb [9]' lvalue Var 0x26de966ae98 'ftmp' 'felem':'limb [9]'
|   |   |   `-IntegerLiteral 0x26de965f838 <col:18> 'int' 4
|   |   `-ImplicitCastExpr 0x26de965f930 <col:23, col:31> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x26de965f8f8 <col:23, col:31> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x26de965f8e0 <col:23> 'const limb *' <ArrayToPointerDecay>
|   |       | `-DeclRefExpr 0x26de965f898 <col:23> 'const felem':'limb const[9]' lvalue Var 0x26de966a8f8 'kPrime' 'const felem':'limb const[9]'
|   |       `-IntegerLiteral 0x26de965f8b8 <col:30> 'int' 4
|   |-CompoundAssignOperator 0x26de965fb08 <line:876:5, col:31> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x26de965f998 <col:5> 'limb':'int' lvalue Var 0x26de966afa0 'is_p' 'limb':'int'
|   | `-BinaryOperator 0x26de965fae8 <col:13, col:31> 'int' '^'
|   |   |-ImplicitCastExpr 0x26de965fab8 <col:13, col:19> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x26de965fa18 <col:13, col:19> 'limb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x26de965fa00 <col:13> 'limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x26de965f9b8 <col:13> 'felem':'limb [9]' lvalue Var 0x26de966ae98 'ftmp' 'felem':'limb [9]'
|   |   |   `-IntegerLiteral 0x26de965f9d8 <col:18> 'int' 5
|   |   `-ImplicitCastExpr 0x26de965fad0 <col:23, col:31> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x26de965fa98 <col:23, col:31> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x26de965fa80 <col:23> 'const limb *' <ArrayToPointerDecay>
|   |       | `-DeclRefExpr 0x26de965fa38 <col:23> 'const felem':'limb const[9]' lvalue Var 0x26de966a8f8 'kPrime' 'const felem':'limb const[9]'
|   |       `-IntegerLiteral 0x26de965fa58 <col:30> 'int' 5
|   |-CompoundAssignOperator 0x26de965fca8 <line:877:5, col:31> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x26de965fb38 <col:5> 'limb':'int' lvalue Var 0x26de966afa0 'is_p' 'limb':'int'
|   | `-BinaryOperator 0x26de965fc88 <col:13, col:31> 'int' '^'
|   |   |-ImplicitCastExpr 0x26de965fc58 <col:13, col:19> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x26de965fbb8 <col:13, col:19> 'limb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x26de965fba0 <col:13> 'limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x26de965fb58 <col:13> 'felem':'limb [9]' lvalue Var 0x26de966ae98 'ftmp' 'felem':'limb [9]'
|   |   |   `-IntegerLiteral 0x26de965fb78 <col:18> 'int' 6
|   |   `-ImplicitCastExpr 0x26de965fc70 <col:23, col:31> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x26de965fc38 <col:23, col:31> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x26de965fc20 <col:23> 'const limb *' <ArrayToPointerDecay>
|   |       | `-DeclRefExpr 0x26de965fbd8 <col:23> 'const felem':'limb const[9]' lvalue Var 0x26de966a8f8 'kPrime' 'const felem':'limb const[9]'
|   |       `-IntegerLiteral 0x26de965fbf8 <col:30> 'int' 6
|   |-CompoundAssignOperator 0x26de9661e70 <line:878:5, col:31> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x26de965fcd8 <col:5> 'limb':'int' lvalue Var 0x26de966afa0 'is_p' 'limb':'int'
|   | `-BinaryOperator 0x26de9661e50 <col:13, col:31> 'int' '^'
|   |   |-ImplicitCastExpr 0x26de9661e20 <col:13, col:19> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x26de965fd58 <col:13, col:19> 'limb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x26de965fd40 <col:13> 'limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x26de965fcf8 <col:13> 'felem':'limb [9]' lvalue Var 0x26de966ae98 'ftmp' 'felem':'limb [9]'
|   |   |   `-IntegerLiteral 0x26de965fd18 <col:18> 'int' 7
|   |   `-ImplicitCastExpr 0x26de9661e38 <col:23, col:31> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x26de9661e00 <col:23, col:31> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x26de965fdc0 <col:23> 'const limb *' <ArrayToPointerDecay>
|   |       | `-DeclRefExpr 0x26de965fd78 <col:23> 'const felem':'limb const[9]' lvalue Var 0x26de966a8f8 'kPrime' 'const felem':'limb const[9]'
|   |       `-IntegerLiteral 0x26de965fd98 <col:30> 'int' 7
|   |-CompoundAssignOperator 0x26de9662010 <line:879:5, col:31> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x26de9661ea0 <col:5> 'limb':'int' lvalue Var 0x26de966afa0 'is_p' 'limb':'int'
|   | `-BinaryOperator 0x26de9661ff0 <col:13, col:31> 'int' '^'
|   |   |-ImplicitCastExpr 0x26de9661fc0 <col:13, col:19> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x26de9661f20 <col:13, col:19> 'limb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x26de9661f08 <col:13> 'limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x26de9661ec0 <col:13> 'felem':'limb [9]' lvalue Var 0x26de966ae98 'ftmp' 'felem':'limb [9]'
|   |   |   `-IntegerLiteral 0x26de9661ee0 <col:18> 'int' 8
|   |   `-ImplicitCastExpr 0x26de9661fd8 <col:23, col:31> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x26de9661fa0 <col:23, col:31> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x26de9661f88 <col:23> 'const limb *' <ArrayToPointerDecay>
|   |       | `-DeclRefExpr 0x26de9661f40 <col:23> 'const felem':'limb const[9]' lvalue Var 0x26de966a8f8 'kPrime' 'const felem':'limb const[9]'
|   |       `-IntegerLiteral 0x26de9661f60 <col:30> 'int' 8
|   |-UnaryOperator 0x26de9662060 <line:881:5, col:9> 'limb':'int' postfix '--'
|   | `-DeclRefExpr 0x26de9662040 <col:5> 'limb':'int' lvalue Var 0x26de966afa0 'is_p' 'limb':'int'
|   |-BinaryOperator 0x26de9662180 <line:882:5, col:27> 'limb':'int' '='
|   | |-DeclRefExpr 0x26de9662078 <col:5> 'limb':'int' lvalue Var 0x26de966afa0 'is_p' 'limb':'int'
|   | `-BinaryOperator 0x26de9662160 <col:12, col:27> 'int' '-'
|   |   |-IntegerLiteral 0x26de9662098 <col:12> 'int' 0
|   |   `-ParenExpr 0x26de9662140 <col:16, col:27> 'limb':'int'
|   |     `-BinaryOperator 0x26de9662120 <col:17, col:25> 'limb':'int' '>>'
|   |       |-ImplicitCastExpr 0x26de9662108 <col:17> 'limb':'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x26de96620c0 <col:17> 'limb':'int' lvalue Var 0x26de966afa0 'is_p' 'limb':'int'
|   |       `-IntegerLiteral 0x26de96620e0 <col:25> 'int' 63
|   |-CompoundAssignOperator 0x26de96621f8 <line:884:5, col:16> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x26de96621a0 <col:5> 'limb':'int' lvalue Var 0x26de966af28 'is_zero' 'limb':'int'
|   | `-ImplicitCastExpr 0x26de96621e0 <col:16> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x26de96621c0 <col:16> 'limb':'int' lvalue Var 0x26de966afa0 'is_p' 'limb':'int'
|   `-ReturnStmt 0x26de9662260 <line:885:5, col:12>
|     `-ImplicitCastExpr 0x26de9662248 <col:12> 'limb':'int' <LValueToRValue>
|       `-DeclRefExpr 0x26de9662228 <col:12> 'limb':'int' lvalue Var 0x26de966af28 'is_zero' 'limb':'int'
|-FunctionDecl 0x26de96624b8 <line:888:1, line:891:1> line:888:12 used felem_is_zero_int 'int (const void *)' static
| |-ParmVarDecl 0x26de9662408 <col:30, col:42> col:42 used in 'const void *'
| `-CompoundStmt 0x26de9662788 <line:889:1, line:891:1>
|   `-ReturnStmt 0x26de9662778 <line:890:5, col:48>
|     `-CStyleCastExpr 0x26de9662750 <col:12, col:48> 'int' <NoOp>
|       `-ParenExpr 0x26de9662730 <col:17, col:48> 'int'
|         `-BinaryOperator 0x26de96626d8 <col:18, col:47> 'int' '&'
|           |-CallExpr 0x26de9662600 <col:18, col:34> 'limb':'int'
|           | |-ImplicitCastExpr 0x26de96625e8 <col:18> 'limb (*)(const limb *)' <FunctionToPointerDecay>
|           | | `-DeclRefExpr 0x26de9662578 <col:18> 'limb (const limb *)' Function 0x26de966adc8 'felem_is_zero' 'limb (const limb *)'
|           | `-ImplicitCastExpr 0x26de9662640 <col:32> 'const limb *':'const limb *' <BitCast>
|           |   `-ImplicitCastExpr 0x26de9662628 <col:32> 'const void *' <LValueToRValue>
|           |     `-DeclRefExpr 0x26de9662598 <col:32> 'const void *' lvalue ParmVar 0x26de9662408 'in' 'const void *'
|           `-ParenExpr 0x26de96626b8 <col:38, col:47> 'limb':'int'
|             `-CStyleCastExpr 0x26de9662690 <col:39, col:46> 'limb':'int' <NoOp>
|               `-IntegerLiteral 0x26de9662658 <col:46> 'int' 1
|-FunctionDecl 0x26de96628f0 <line:898:1, line:1025:1> line:898:13 used felem_contract 'void (limb *, const limb *)' static
| |-ParmVarDecl 0x26de96627b0 <col:28, col:34> col:34 used out 'limb *':'limb *'
| |-ParmVarDecl 0x26de9662828 <col:39, col:51> col:51 used in 'const limb *':'const limb *'
| `-CompoundStmt 0x26de96724b8 <line:899:1, line:1025:1>
|   |-DeclStmt 0x26de9662b40 <line:900:5, col:32>
|   | |-VarDecl 0x26de96629c8 <col:5, col:10> col:10 used is_p 'limb':'int'
|   | |-VarDecl 0x26de9662a40 <col:5, col:16> col:16 used is_greater 'limb':'int'
|   | `-VarDecl 0x26de9662ab8 <col:5, col:28> col:28 used sign 'limb':'int'
|   |-DeclStmt 0x26de9662c98 <line:901:5, col:47>
|   | `-VarDecl 0x26de9662b68 <col:5, col:45> col:23 used two58 'const limb':'const int' static cinit
|   |   `-BinaryOperator 0x26de9662c78 <col:31, col:45> 'limb':'int' '<<'
|   |     |-ParenExpr 0x26de9662c30 <col:31, col:40> 'limb':'int'
|   |     | `-CStyleCastExpr 0x26de9662c08 <col:32, col:39> 'limb':'int' <NoOp>
|   |     |   `-IntegerLiteral 0x26de9662bd0 <col:39> 'int' 1
|   |     `-IntegerLiteral 0x26de9662c50 <col:45> 'int' 58
|   |-CallExpr 0x26de9662d28 <line:903:5, col:25> 'void'
|   | |-ImplicitCastExpr 0x26de9662d10 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de9662cb0 <col:5> 'void (limb *, const limb *)' Function 0x26de9594bb8 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x26de9662d58 <col:18> 'limb *':'limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x26de9662cd0 <col:18> 'limb *':'limb *' lvalue ParmVar 0x26de96627b0 'out' 'limb *':'limb *'
|   | `-ImplicitCastExpr 0x26de9662d70 <col:23> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x26de9662cf0 <col:23> 'const limb *':'const limb *' lvalue ParmVar 0x26de9662828 'in' 'const limb *':'const limb *'
|   |-CompoundAssignOperator 0x26de9662ee8 <line:905:5, col:25> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de9662de8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de9662dd0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de9662d88 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de96627b0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de9662da8 <col:9> 'int' 0
|   | `-BinaryOperator 0x26de9662ec8 <col:15, col:25> 'limb':'int' '>>'
|   |   |-ImplicitCastExpr 0x26de9662eb0 <col:15, col:20> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x26de9662e68 <col:15, col:20> 'limb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x26de9662e50 <col:15> 'limb *':'limb *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x26de9662e08 <col:15> 'limb *':'limb *' lvalue ParmVar 0x26de96627b0 'out' 'limb *':'limb *'
|   |   |   `-IntegerLiteral 0x26de9662e28 <col:19> 'int' 8
|   |   `-IntegerLiteral 0x26de9662e88 <col:25> 'int' 57
|   |-CompoundAssignOperator 0x26de9662fd0 <line:906:5, col:15> 'limb':'int' '&=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de9662f78 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de9662f60 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de9662f18 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de96627b0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de9662f38 <col:9> 'int' 8
|   | `-ImplicitCastExpr 0x26de9662fb8 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x26de9662f98 <col:15> 'const limb':'const int' lvalue Var 0x26de958ed40 'bottom57bits' 'const limb':'const int'
|   |-CompoundAssignOperator 0x26de9663160 <line:908:5, col:25> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de9663060 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de9663048 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de9663000 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de96627b0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de9663020 <col:9> 'int' 1
|   | `-BinaryOperator 0x26de9663140 <col:15, col:25> 'limb':'int' '>>'
|   |   |-ImplicitCastExpr 0x26de9663128 <col:15, col:20> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x26de96630e0 <col:15, col:20> 'limb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x26de96630c8 <col:15> 'limb *':'limb *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x26de9663080 <col:15> 'limb *':'limb *' lvalue ParmVar 0x26de96627b0 'out' 'limb *':'limb *'
|   |   |   `-IntegerLiteral 0x26de96630a0 <col:19> 'int' 0
|   |   `-IntegerLiteral 0x26de9663100 <col:25> 'int' 58
|   |-CompoundAssignOperator 0x26de9663248 <line:909:5, col:15> 'limb':'int' '&=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de96631f0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de96631d8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de9663190 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de96627b0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de96631b0 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x26de9663230 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x26de9663210 <col:15> 'const limb':'const int' lvalue Var 0x26de958ee10 'bottom58bits' 'const limb':'const int'
|   |-CompoundAssignOperator 0x26de96633d8 <line:910:5, col:25> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de96632d8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de96632c0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de9663278 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de96627b0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de9663298 <col:9> 'int' 2
|   | `-BinaryOperator 0x26de96633b8 <col:15, col:25> 'limb':'int' '>>'
|   |   |-ImplicitCastExpr 0x26de96633a0 <col:15, col:20> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x26de9663358 <col:15, col:20> 'limb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x26de9663340 <col:15> 'limb *':'limb *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x26de96632f8 <col:15> 'limb *':'limb *' lvalue ParmVar 0x26de96627b0 'out' 'limb *':'limb *'
|   |   |   `-IntegerLiteral 0x26de9663318 <col:19> 'int' 1
|   |   `-IntegerLiteral 0x26de9663378 <col:25> 'int' 58
|   |-CompoundAssignOperator 0x26de96634c0 <line:911:5, col:15> 'limb':'int' '&=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de9663468 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de9663450 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de9663408 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de96627b0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de9663428 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x26de96634a8 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x26de9663488 <col:15> 'const limb':'const int' lvalue Var 0x26de958ee10 'bottom58bits' 'const limb':'const int'
|   |-CompoundAssignOperator 0x26de9663650 <line:912:5, col:25> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de9663550 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de9663538 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de96634f0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de96627b0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de9663510 <col:9> 'int' 3
|   | `-BinaryOperator 0x26de9663630 <col:15, col:25> 'limb':'int' '>>'
|   |   |-ImplicitCastExpr 0x26de9663618 <col:15, col:20> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x26de96635d0 <col:15, col:20> 'limb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x26de96635b8 <col:15> 'limb *':'limb *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x26de9663570 <col:15> 'limb *':'limb *' lvalue ParmVar 0x26de96627b0 'out' 'limb *':'limb *'
|   |   |   `-IntegerLiteral 0x26de9663590 <col:19> 'int' 2
|   |   `-IntegerLiteral 0x26de96635f0 <col:25> 'int' 58
|   |-CompoundAssignOperator 0x26de9663738 <line:913:5, col:15> 'limb':'int' '&=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de96636e0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de96636c8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de9663680 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de96627b0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de96636a0 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x26de9663720 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x26de9663700 <col:15> 'const limb':'const int' lvalue Var 0x26de958ee10 'bottom58bits' 'const limb':'const int'
|   |-CompoundAssignOperator 0x26de96638c8 <line:914:5, col:25> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de96637c8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de96637b0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de9663768 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de96627b0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de9663788 <col:9> 'int' 4
|   | `-BinaryOperator 0x26de96638a8 <col:15, col:25> 'limb':'int' '>>'
|   |   |-ImplicitCastExpr 0x26de9663890 <col:15, col:20> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x26de9663848 <col:15, col:20> 'limb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x26de9663830 <col:15> 'limb *':'limb *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x26de96637e8 <col:15> 'limb *':'limb *' lvalue ParmVar 0x26de96627b0 'out' 'limb *':'limb *'
|   |   |   `-IntegerLiteral 0x26de9663808 <col:19> 'int' 3
|   |   `-IntegerLiteral 0x26de9663868 <col:25> 'int' 58
|   |-CompoundAssignOperator 0x26de96639b0 <line:915:5, col:15> 'limb':'int' '&=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de9663958 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de9663940 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de96638f8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de96627b0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de9663918 <col:9> 'int' 3
|   | `-ImplicitCastExpr 0x26de9663998 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x26de9663978 <col:15> 'const limb':'const int' lvalue Var 0x26de958ee10 'bottom58bits' 'const limb':'const int'
|   |-CompoundAssignOperator 0x26de9663b40 <line:916:5, col:25> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de9663a40 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de9663a28 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de96639e0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de96627b0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de9663a00 <col:9> 'int' 5
|   | `-BinaryOperator 0x26de9663b20 <col:15, col:25> 'limb':'int' '>>'
|   |   |-ImplicitCastExpr 0x26de9663b08 <col:15, col:20> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x26de9663ac0 <col:15, col:20> 'limb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x26de9663aa8 <col:15> 'limb *':'limb *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x26de9663a60 <col:15> 'limb *':'limb *' lvalue ParmVar 0x26de96627b0 'out' 'limb *':'limb *'
|   |   |   `-IntegerLiteral 0x26de9663a80 <col:19> 'int' 4
|   |   `-IntegerLiteral 0x26de9663ae0 <col:25> 'int' 58
|   |-CompoundAssignOperator 0x26de9663c28 <line:917:5, col:15> 'limb':'int' '&=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de9663bd0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de9663bb8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de9663b70 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de96627b0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de9663b90 <col:9> 'int' 4
|   | `-ImplicitCastExpr 0x26de9663c10 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x26de9663bf0 <col:15> 'const limb':'const int' lvalue Var 0x26de958ee10 'bottom58bits' 'const limb':'const int'
|   |-CompoundAssignOperator 0x26de9663db8 <line:918:5, col:25> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de9663cb8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de9663ca0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de9663c58 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de96627b0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de9663c78 <col:9> 'int' 6
|   | `-BinaryOperator 0x26de9663d98 <col:15, col:25> 'limb':'int' '>>'
|   |   |-ImplicitCastExpr 0x26de9663d80 <col:15, col:20> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x26de9663d38 <col:15, col:20> 'limb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x26de9663d20 <col:15> 'limb *':'limb *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x26de9663cd8 <col:15> 'limb *':'limb *' lvalue ParmVar 0x26de96627b0 'out' 'limb *':'limb *'
|   |   |   `-IntegerLiteral 0x26de9663cf8 <col:19> 'int' 5
|   |   `-IntegerLiteral 0x26de9663d58 <col:25> 'int' 58
|   |-CompoundAssignOperator 0x26de966df18 <line:919:5, col:15> 'limb':'int' '&=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de966dec0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de966dea8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de966de60 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de96627b0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de966de80 <col:9> 'int' 5
|   | `-ImplicitCastExpr 0x26de966df00 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x26de966dee0 <col:15> 'const limb':'const int' lvalue Var 0x26de958ee10 'bottom58bits' 'const limb':'const int'
|   |-CompoundAssignOperator 0x26de966e0a8 <line:920:5, col:25> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de966dfa8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de966df90 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de966df48 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de96627b0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de966df68 <col:9> 'int' 7
|   | `-BinaryOperator 0x26de966e088 <col:15, col:25> 'limb':'int' '>>'
|   |   |-ImplicitCastExpr 0x26de966e070 <col:15, col:20> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x26de966e028 <col:15, col:20> 'limb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x26de966e010 <col:15> 'limb *':'limb *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x26de966dfc8 <col:15> 'limb *':'limb *' lvalue ParmVar 0x26de96627b0 'out' 'limb *':'limb *'
|   |   |   `-IntegerLiteral 0x26de966dfe8 <col:19> 'int' 6
|   |   `-IntegerLiteral 0x26de966e048 <col:25> 'int' 58
|   |-CompoundAssignOperator 0x26de966e190 <line:921:5, col:15> 'limb':'int' '&=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de966e138 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de966e120 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de966e0d8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de96627b0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de966e0f8 <col:9> 'int' 6
|   | `-ImplicitCastExpr 0x26de966e178 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x26de966e158 <col:15> 'const limb':'const int' lvalue Var 0x26de958ee10 'bottom58bits' 'const limb':'const int'
|   |-CompoundAssignOperator 0x26de966e320 <line:922:5, col:25> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de966e220 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de966e208 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de966e1c0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de96627b0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de966e1e0 <col:9> 'int' 8
|   | `-BinaryOperator 0x26de966e300 <col:15, col:25> 'limb':'int' '>>'
|   |   |-ImplicitCastExpr 0x26de966e2e8 <col:15, col:20> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x26de966e2a0 <col:15, col:20> 'limb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x26de966e288 <col:15> 'limb *':'limb *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x26de966e240 <col:15> 'limb *':'limb *' lvalue ParmVar 0x26de96627b0 'out' 'limb *':'limb *'
|   |   |   `-IntegerLiteral 0x26de966e260 <col:19> 'int' 7
|   |   `-IntegerLiteral 0x26de966e2c0 <col:25> 'int' 58
|   |-CompoundAssignOperator 0x26de966e408 <line:923:5, col:15> 'limb':'int' '&=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de966e3b0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de966e398 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de966e350 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de96627b0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de966e370 <col:9> 'int' 7
|   | `-ImplicitCastExpr 0x26de966e3f0 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x26de966e3d0 <col:15> 'const limb':'const int' lvalue Var 0x26de958ee10 'bottom58bits' 'const limb':'const int'
|   |-BinaryOperator 0x26de966e5c0 <line:936:5, col:29> 'limb':'int' '='
|   | |-DeclRefExpr 0x26de966e438 <col:5> 'limb':'int' lvalue Var 0x26de96629c8 'is_p' 'limb':'int'
|   | `-BinaryOperator 0x26de966e5a0 <col:12, col:29> 'int' '^'
|   |   |-ImplicitCastExpr 0x26de966e570 <col:12, col:17> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x26de966e4d0 <col:12, col:17> 'limb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x26de966e4b8 <col:12> 'limb *':'limb *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x26de966e470 <col:12> 'limb *':'limb *' lvalue ParmVar 0x26de96627b0 'out' 'limb *':'limb *'
|   |   |   `-IntegerLiteral 0x26de966e490 <col:16> 'int' 0
|   |   `-ImplicitCastExpr 0x26de966e588 <col:21, col:29> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x26de966e550 <col:21, col:29> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x26de966e538 <col:21> 'const limb *' <ArrayToPointerDecay>
|   |       | `-DeclRefExpr 0x26de966e4f0 <col:21> 'const felem':'limb const[9]' lvalue Var 0x26de966a8f8 'kPrime' 'const felem':'limb const[9]'
|   |       `-IntegerLiteral 0x26de966e510 <col:28> 'int' 0
|   |-CompoundAssignOperator 0x26de966e750 <line:937:5, col:30> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x26de966e5e0 <col:5> 'limb':'int' lvalue Var 0x26de96629c8 'is_p' 'limb':'int'
|   | `-BinaryOperator 0x26de966e730 <col:13, col:30> 'int' '^'
|   |   |-ImplicitCastExpr 0x26de966e700 <col:13, col:18> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x26de966e660 <col:13, col:18> 'limb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x26de966e648 <col:13> 'limb *':'limb *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x26de966e600 <col:13> 'limb *':'limb *' lvalue ParmVar 0x26de96627b0 'out' 'limb *':'limb *'
|   |   |   `-IntegerLiteral 0x26de966e620 <col:17> 'int' 1
|   |   `-ImplicitCastExpr 0x26de966e718 <col:22, col:30> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x26de966e6e0 <col:22, col:30> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x26de966e6c8 <col:22> 'const limb *' <ArrayToPointerDecay>
|   |       | `-DeclRefExpr 0x26de966e680 <col:22> 'const felem':'limb const[9]' lvalue Var 0x26de966a8f8 'kPrime' 'const felem':'limb const[9]'
|   |       `-IntegerLiteral 0x26de966e6a0 <col:29> 'int' 1
|   |-CompoundAssignOperator 0x26de966e8f0 <line:938:5, col:30> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x26de966e780 <col:5> 'limb':'int' lvalue Var 0x26de96629c8 'is_p' 'limb':'int'
|   | `-BinaryOperator 0x26de966e8d0 <col:13, col:30> 'int' '^'
|   |   |-ImplicitCastExpr 0x26de966e8a0 <col:13, col:18> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x26de966e800 <col:13, col:18> 'limb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x26de966e7e8 <col:13> 'limb *':'limb *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x26de966e7a0 <col:13> 'limb *':'limb *' lvalue ParmVar 0x26de96627b0 'out' 'limb *':'limb *'
|   |   |   `-IntegerLiteral 0x26de966e7c0 <col:17> 'int' 2
|   |   `-ImplicitCastExpr 0x26de966e8b8 <col:22, col:30> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x26de966e880 <col:22, col:30> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x26de966e868 <col:22> 'const limb *' <ArrayToPointerDecay>
|   |       | `-DeclRefExpr 0x26de966e820 <col:22> 'const felem':'limb const[9]' lvalue Var 0x26de966a8f8 'kPrime' 'const felem':'limb const[9]'
|   |       `-IntegerLiteral 0x26de966e840 <col:29> 'int' 2
|   |-CompoundAssignOperator 0x26de966ea90 <line:939:5, col:30> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x26de966e920 <col:5> 'limb':'int' lvalue Var 0x26de96629c8 'is_p' 'limb':'int'
|   | `-BinaryOperator 0x26de966ea70 <col:13, col:30> 'int' '^'
|   |   |-ImplicitCastExpr 0x26de966ea40 <col:13, col:18> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x26de966e9a0 <col:13, col:18> 'limb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x26de966e988 <col:13> 'limb *':'limb *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x26de966e940 <col:13> 'limb *':'limb *' lvalue ParmVar 0x26de96627b0 'out' 'limb *':'limb *'
|   |   |   `-IntegerLiteral 0x26de966e960 <col:17> 'int' 3
|   |   `-ImplicitCastExpr 0x26de966ea58 <col:22, col:30> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x26de966ea20 <col:22, col:30> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x26de966ea08 <col:22> 'const limb *' <ArrayToPointerDecay>
|   |       | `-DeclRefExpr 0x26de966e9c0 <col:22> 'const felem':'limb const[9]' lvalue Var 0x26de966a8f8 'kPrime' 'const felem':'limb const[9]'
|   |       `-IntegerLiteral 0x26de966e9e0 <col:29> 'int' 3
|   |-CompoundAssignOperator 0x26de966ec30 <line:940:5, col:30> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x26de966eac0 <col:5> 'limb':'int' lvalue Var 0x26de96629c8 'is_p' 'limb':'int'
|   | `-BinaryOperator 0x26de966ec10 <col:13, col:30> 'int' '^'
|   |   |-ImplicitCastExpr 0x26de966ebe0 <col:13, col:18> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x26de966eb40 <col:13, col:18> 'limb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x26de966eb28 <col:13> 'limb *':'limb *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x26de966eae0 <col:13> 'limb *':'limb *' lvalue ParmVar 0x26de96627b0 'out' 'limb *':'limb *'
|   |   |   `-IntegerLiteral 0x26de966eb00 <col:17> 'int' 4
|   |   `-ImplicitCastExpr 0x26de966ebf8 <col:22, col:30> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x26de966ebc0 <col:22, col:30> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x26de966eba8 <col:22> 'const limb *' <ArrayToPointerDecay>
|   |       | `-DeclRefExpr 0x26de966eb60 <col:22> 'const felem':'limb const[9]' lvalue Var 0x26de966a8f8 'kPrime' 'const felem':'limb const[9]'
|   |       `-IntegerLiteral 0x26de966eb80 <col:29> 'int' 4
|   |-CompoundAssignOperator 0x26de966edd0 <line:941:5, col:30> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x26de966ec60 <col:5> 'limb':'int' lvalue Var 0x26de96629c8 'is_p' 'limb':'int'
|   | `-BinaryOperator 0x26de966edb0 <col:13, col:30> 'int' '^'
|   |   |-ImplicitCastExpr 0x26de966ed80 <col:13, col:18> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x26de966ece0 <col:13, col:18> 'limb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x26de966ecc8 <col:13> 'limb *':'limb *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x26de966ec80 <col:13> 'limb *':'limb *' lvalue ParmVar 0x26de96627b0 'out' 'limb *':'limb *'
|   |   |   `-IntegerLiteral 0x26de966eca0 <col:17> 'int' 5
|   |   `-ImplicitCastExpr 0x26de966ed98 <col:22, col:30> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x26de966ed60 <col:22, col:30> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x26de966ed48 <col:22> 'const limb *' <ArrayToPointerDecay>
|   |       | `-DeclRefExpr 0x26de966ed00 <col:22> 'const felem':'limb const[9]' lvalue Var 0x26de966a8f8 'kPrime' 'const felem':'limb const[9]'
|   |       `-IntegerLiteral 0x26de966ed20 <col:29> 'int' 5
|   |-CompoundAssignOperator 0x26de966ef70 <line:942:5, col:30> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x26de966ee00 <col:5> 'limb':'int' lvalue Var 0x26de96629c8 'is_p' 'limb':'int'
|   | `-BinaryOperator 0x26de966ef50 <col:13, col:30> 'int' '^'
|   |   |-ImplicitCastExpr 0x26de966ef20 <col:13, col:18> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x26de966ee80 <col:13, col:18> 'limb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x26de966ee68 <col:13> 'limb *':'limb *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x26de966ee20 <col:13> 'limb *':'limb *' lvalue ParmVar 0x26de96627b0 'out' 'limb *':'limb *'
|   |   |   `-IntegerLiteral 0x26de966ee40 <col:17> 'int' 6
|   |   `-ImplicitCastExpr 0x26de966ef38 <col:22, col:30> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x26de966ef00 <col:22, col:30> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x26de966eee8 <col:22> 'const limb *' <ArrayToPointerDecay>
|   |       | `-DeclRefExpr 0x26de966eea0 <col:22> 'const felem':'limb const[9]' lvalue Var 0x26de966a8f8 'kPrime' 'const felem':'limb const[9]'
|   |       `-IntegerLiteral 0x26de966eec0 <col:29> 'int' 6
|   |-CompoundAssignOperator 0x26de966f110 <line:943:5, col:30> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x26de966efa0 <col:5> 'limb':'int' lvalue Var 0x26de96629c8 'is_p' 'limb':'int'
|   | `-BinaryOperator 0x26de966f0f0 <col:13, col:30> 'int' '^'
|   |   |-ImplicitCastExpr 0x26de966f0c0 <col:13, col:18> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x26de966f020 <col:13, col:18> 'limb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x26de966f008 <col:13> 'limb *':'limb *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x26de966efc0 <col:13> 'limb *':'limb *' lvalue ParmVar 0x26de96627b0 'out' 'limb *':'limb *'
|   |   |   `-IntegerLiteral 0x26de966efe0 <col:17> 'int' 7
|   |   `-ImplicitCastExpr 0x26de966f0d8 <col:22, col:30> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x26de966f0a0 <col:22, col:30> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x26de966f088 <col:22> 'const limb *' <ArrayToPointerDecay>
|   |       | `-DeclRefExpr 0x26de966f040 <col:22> 'const felem':'limb const[9]' lvalue Var 0x26de966a8f8 'kPrime' 'const felem':'limb const[9]'
|   |       `-IntegerLiteral 0x26de966f060 <col:29> 'int' 7
|   |-CompoundAssignOperator 0x26de966f2b0 <line:944:5, col:30> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x26de966f140 <col:5> 'limb':'int' lvalue Var 0x26de96629c8 'is_p' 'limb':'int'
|   | `-BinaryOperator 0x26de966f290 <col:13, col:30> 'int' '^'
|   |   |-ImplicitCastExpr 0x26de966f260 <col:13, col:18> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x26de966f1c0 <col:13, col:18> 'limb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x26de966f1a8 <col:13> 'limb *':'limb *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x26de966f160 <col:13> 'limb *':'limb *' lvalue ParmVar 0x26de96627b0 'out' 'limb *':'limb *'
|   |   |   `-IntegerLiteral 0x26de966f180 <col:17> 'int' 8
|   |   `-ImplicitCastExpr 0x26de966f278 <col:22, col:30> 'limb':'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x26de966f240 <col:22, col:30> 'const limb':'const int' lvalue
|   |       |-ImplicitCastExpr 0x26de966f228 <col:22> 'const limb *' <ArrayToPointerDecay>
|   |       | `-DeclRefExpr 0x26de966f1e0 <col:22> 'const felem':'limb const[9]' lvalue Var 0x26de966a8f8 'kPrime' 'const felem':'limb const[9]'
|   |       `-IntegerLiteral 0x26de966f200 <col:29> 'int' 8
|   |-UnaryOperator 0x26de966f300 <line:946:5, col:9> 'limb':'int' postfix '--'
|   | `-DeclRefExpr 0x26de966f2e0 <col:5> 'limb':'int' lvalue Var 0x26de96629c8 'is_p' 'limb':'int'
|   |-CompoundAssignOperator 0x26de966f3b8 <line:947:5, col:21> 'limb':'int' '&=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x26de966f318 <col:5> 'limb':'int' lvalue Var 0x26de96629c8 'is_p' 'limb':'int'
|   | `-BinaryOperator 0x26de966f398 <col:13, col:21> 'limb':'int' '<<'
|   |   |-ImplicitCastExpr 0x26de966f380 <col:13> 'limb':'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x26de966f338 <col:13> 'limb':'int' lvalue Var 0x26de96629c8 'is_p' 'limb':'int'
|   |   `-IntegerLiteral 0x26de966f358 <col:21> 'int' 32
|   |-CompoundAssignOperator 0x26de966f488 <line:948:5, col:21> 'limb':'int' '&=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x26de966f3e8 <col:5> 'limb':'int' lvalue Var 0x26de96629c8 'is_p' 'limb':'int'
|   | `-BinaryOperator 0x26de966f468 <col:13, col:21> 'limb':'int' '<<'
|   |   |-ImplicitCastExpr 0x26de966f450 <col:13> 'limb':'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x26de966f408 <col:13> 'limb':'int' lvalue Var 0x26de96629c8 'is_p' 'limb':'int'
|   |   `-IntegerLiteral 0x26de966f428 <col:21> 'int' 16
|   |-CompoundAssignOperator 0x26de966f558 <line:949:5, col:21> 'limb':'int' '&=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x26de966f4b8 <col:5> 'limb':'int' lvalue Var 0x26de96629c8 'is_p' 'limb':'int'
|   | `-BinaryOperator 0x26de966f538 <col:13, col:21> 'limb':'int' '<<'
|   |   |-ImplicitCastExpr 0x26de966f520 <col:13> 'limb':'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x26de966f4d8 <col:13> 'limb':'int' lvalue Var 0x26de96629c8 'is_p' 'limb':'int'
|   |   `-IntegerLiteral 0x26de966f4f8 <col:21> 'int' 8
|   |-CompoundAssignOperator 0x26de966f628 <line:950:5, col:21> 'limb':'int' '&=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x26de966f588 <col:5> 'limb':'int' lvalue Var 0x26de96629c8 'is_p' 'limb':'int'
|   | `-BinaryOperator 0x26de966f608 <col:13, col:21> 'limb':'int' '<<'
|   |   |-ImplicitCastExpr 0x26de966f5f0 <col:13> 'limb':'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x26de966f5a8 <col:13> 'limb':'int' lvalue Var 0x26de96629c8 'is_p' 'limb':'int'
|   |   `-IntegerLiteral 0x26de966f5c8 <col:21> 'int' 4
|   |-CompoundAssignOperator 0x26de966f6f8 <line:951:5, col:21> 'limb':'int' '&=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x26de966f658 <col:5> 'limb':'int' lvalue Var 0x26de96629c8 'is_p' 'limb':'int'
|   | `-BinaryOperator 0x26de966f6d8 <col:13, col:21> 'limb':'int' '<<'
|   |   |-ImplicitCastExpr 0x26de966f6c0 <col:13> 'limb':'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x26de966f678 <col:13> 'limb':'int' lvalue Var 0x26de96629c8 'is_p' 'limb':'int'
|   |   `-IntegerLiteral 0x26de966f698 <col:21> 'int' 2
|   |-CompoundAssignOperator 0x26de966f7c8 <line:952:5, col:21> 'limb':'int' '&=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x26de966f728 <col:5> 'limb':'int' lvalue Var 0x26de96629c8 'is_p' 'limb':'int'
|   | `-BinaryOperator 0x26de966f7a8 <col:13, col:21> 'limb':'int' '<<'
|   |   |-ImplicitCastExpr 0x26de966f790 <col:13> 'limb':'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x26de966f748 <col:13> 'limb':'int' lvalue Var 0x26de96629c8 'is_p' 'limb':'int'
|   |   `-IntegerLiteral 0x26de966f768 <col:21> 'int' 1
|   |-BinaryOperator 0x26de966f900 <line:953:5, col:27> 'limb':'int' '='
|   | |-DeclRefExpr 0x26de966f7f8 <col:5> 'limb':'int' lvalue Var 0x26de96629c8 'is_p' 'limb':'int'
|   | `-BinaryOperator 0x26de966f8e0 <col:12, col:27> 'int' '-'
|   |   |-IntegerLiteral 0x26de966f818 <col:12> 'int' 0
|   |   `-ParenExpr 0x26de966f8c0 <col:16, col:27> 'limb':'int'
|   |     `-BinaryOperator 0x26de966f8a0 <col:17, col:25> 'limb':'int' '>>'
|   |       |-ImplicitCastExpr 0x26de966f888 <col:17> 'limb':'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x26de966f840 <col:17> 'limb':'int' lvalue Var 0x26de96629c8 'is_p' 'limb':'int'
|   |       `-IntegerLiteral 0x26de966f860 <col:25> 'int' 63
|   |-BinaryOperator 0x26de966f990 <line:954:5, col:13> 'limb':'int' '='
|   | |-DeclRefExpr 0x26de966f920 <col:5> 'limb':'int' lvalue Var 0x26de96629c8 'is_p' 'limb':'int'
|   | `-UnaryOperator 0x26de966f978 <col:12, col:13> 'limb':'int' prefix '~' cannot overflow
|   |   `-ImplicitCastExpr 0x26de966f960 <col:13> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x26de966f940 <col:13> 'limb':'int' lvalue Var 0x26de96629c8 'is_p' 'limb':'int'
|   |-CompoundAssignOperator 0x26de966fa68 <line:958:5, col:15> 'limb':'int' '&=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de966fa10 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de966f9f8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de966f9b0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de96627b0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de966f9d0 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x26de966fa50 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x26de966fa30 <col:15> 'limb':'int' lvalue Var 0x26de96629c8 'is_p' 'limb':'int'
|   |-CompoundAssignOperator 0x26de966fb50 <line:959:5, col:15> 'limb':'int' '&=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de966faf8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de966fae0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de966fa98 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de96627b0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de966fab8 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x26de966fb38 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x26de966fb18 <col:15> 'limb':'int' lvalue Var 0x26de96629c8 'is_p' 'limb':'int'
|   |-CompoundAssignOperator 0x26de966fc38 <line:960:5, col:15> 'limb':'int' '&=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de966fbe0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de966fbc8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de966fb80 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de96627b0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de966fba0 <col:9> 'int' 2
|   | `-ImplicitCastExpr 0x26de966fc20 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x26de966fc00 <col:15> 'limb':'int' lvalue Var 0x26de96629c8 'is_p' 'limb':'int'
|   |-CompoundAssignOperator 0x26de966fd20 <line:961:5, col:15> 'limb':'int' '&=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de966fcc8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de966fcb0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de966fc68 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de96627b0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de966fc88 <col:9> 'int' 3
|   | `-ImplicitCastExpr 0x26de966fd08 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x26de966fce8 <col:15> 'limb':'int' lvalue Var 0x26de96629c8 'is_p' 'limb':'int'
|   |-CompoundAssignOperator 0x26de966fe08 <line:962:5, col:15> 'limb':'int' '&=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de966fdb0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de966fd98 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de966fd50 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de96627b0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de966fd70 <col:9> 'int' 4
|   | `-ImplicitCastExpr 0x26de966fdf0 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x26de966fdd0 <col:15> 'limb':'int' lvalue Var 0x26de96629c8 'is_p' 'limb':'int'
|   |-CompoundAssignOperator 0x26de965fe88 <line:963:5, col:15> 'limb':'int' '&=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de965fe30 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de965fe18 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de966fe38 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de96627b0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de965fdf0 <col:9> 'int' 5
|   | `-ImplicitCastExpr 0x26de965fe70 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x26de965fe50 <col:15> 'limb':'int' lvalue Var 0x26de96629c8 'is_p' 'limb':'int'
|   |-CompoundAssignOperator 0x26de965ff70 <line:964:5, col:15> 'limb':'int' '&=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de965ff18 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de965ff00 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de965feb8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de96627b0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de965fed8 <col:9> 'int' 6
|   | `-ImplicitCastExpr 0x26de965ff58 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x26de965ff38 <col:15> 'limb':'int' lvalue Var 0x26de96629c8 'is_p' 'limb':'int'
|   |-CompoundAssignOperator 0x26de9660058 <line:965:5, col:15> 'limb':'int' '&=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de9660000 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de965ffe8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de965ffa0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de96627b0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de965ffc0 <col:9> 'int' 7
|   | `-ImplicitCastExpr 0x26de9660040 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x26de9660020 <col:15> 'limb':'int' lvalue Var 0x26de96629c8 'is_p' 'limb':'int'
|   |-CompoundAssignOperator 0x26de9660140 <line:966:5, col:15> 'limb':'int' '&=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de96600e8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de96600d0 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de9660088 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de96627b0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de96600a8 <col:9> 'int' 8
|   | `-ImplicitCastExpr 0x26de9660128 <col:15> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x26de9660108 <col:15> 'limb':'int' lvalue Var 0x26de96629c8 'is_p' 'limb':'int'
|   |-BinaryOperator 0x26de9660288 <line:972:5, col:28> 'limb':'int' '='
|   | |-DeclRefExpr 0x26de9660170 <col:5> 'limb':'int' lvalue Var 0x26de9662a40 'is_greater' 'limb':'int'
|   | `-BinaryOperator 0x26de9660268 <col:18, col:28> 'limb':'int' '>>'
|   |   |-ImplicitCastExpr 0x26de9660250 <col:18, col:23> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x26de9660208 <col:18, col:23> 'limb':'int' lvalue
|   |   |   |-ImplicitCastExpr 0x26de96601f0 <col:18> 'limb *':'limb *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x26de96601a8 <col:18> 'limb *':'limb *' lvalue ParmVar 0x26de96627b0 'out' 'limb *':'limb *'
|   |   |   `-IntegerLiteral 0x26de96601c8 <col:22> 'int' 8
|   |   `-IntegerLiteral 0x26de9660228 <col:28> 'int' 57
|   |-CompoundAssignOperator 0x26de9660348 <line:973:5, col:33> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x26de96602a8 <col:5> 'limb':'int' lvalue Var 0x26de9662a40 'is_greater' 'limb':'int'
|   | `-BinaryOperator 0x26de9660328 <col:19, col:33> 'limb':'int' '<<'
|   |   |-ImplicitCastExpr 0x26de9660310 <col:19> 'limb':'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x26de96602c8 <col:19> 'limb':'int' lvalue Var 0x26de9662a40 'is_greater' 'limb':'int'
|   |   `-IntegerLiteral 0x26de96602e8 <col:33> 'int' 32
|   |-CompoundAssignOperator 0x26de9660418 <line:974:5, col:33> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x26de9660378 <col:5> 'limb':'int' lvalue Var 0x26de9662a40 'is_greater' 'limb':'int'
|   | `-BinaryOperator 0x26de96603f8 <col:19, col:33> 'limb':'int' '<<'
|   |   |-ImplicitCastExpr 0x26de96603e0 <col:19> 'limb':'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x26de9660398 <col:19> 'limb':'int' lvalue Var 0x26de9662a40 'is_greater' 'limb':'int'
|   |   `-IntegerLiteral 0x26de96603b8 <col:33> 'int' 16
|   |-CompoundAssignOperator 0x26de96604e8 <line:975:5, col:33> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x26de9660448 <col:5> 'limb':'int' lvalue Var 0x26de9662a40 'is_greater' 'limb':'int'
|   | `-BinaryOperator 0x26de96604c8 <col:19, col:33> 'limb':'int' '<<'
|   |   |-ImplicitCastExpr 0x26de96604b0 <col:19> 'limb':'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x26de9660468 <col:19> 'limb':'int' lvalue Var 0x26de9662a40 'is_greater' 'limb':'int'
|   |   `-IntegerLiteral 0x26de9660488 <col:33> 'int' 8
|   |-CompoundAssignOperator 0x26de96605b8 <line:976:5, col:33> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x26de9660518 <col:5> 'limb':'int' lvalue Var 0x26de9662a40 'is_greater' 'limb':'int'
|   | `-BinaryOperator 0x26de9660598 <col:19, col:33> 'limb':'int' '<<'
|   |   |-ImplicitCastExpr 0x26de9660580 <col:19> 'limb':'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x26de9660538 <col:19> 'limb':'int' lvalue Var 0x26de9662a40 'is_greater' 'limb':'int'
|   |   `-IntegerLiteral 0x26de9660558 <col:33> 'int' 4
|   |-CompoundAssignOperator 0x26de9660688 <line:977:5, col:33> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x26de96605e8 <col:5> 'limb':'int' lvalue Var 0x26de9662a40 'is_greater' 'limb':'int'
|   | `-BinaryOperator 0x26de9660668 <col:19, col:33> 'limb':'int' '<<'
|   |   |-ImplicitCastExpr 0x26de9660650 <col:19> 'limb':'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x26de9660608 <col:19> 'limb':'int' lvalue Var 0x26de9662a40 'is_greater' 'limb':'int'
|   |   `-IntegerLiteral 0x26de9660628 <col:33> 'int' 2
|   |-CompoundAssignOperator 0x26de9660758 <line:978:5, col:33> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x26de96606b8 <col:5> 'limb':'int' lvalue Var 0x26de9662a40 'is_greater' 'limb':'int'
|   | `-BinaryOperator 0x26de9660738 <col:19, col:33> 'limb':'int' '<<'
|   |   |-ImplicitCastExpr 0x26de9660720 <col:19> 'limb':'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x26de96606d8 <col:19> 'limb':'int' lvalue Var 0x26de9662a40 'is_greater' 'limb':'int'
|   |   `-IntegerLiteral 0x26de96606f8 <col:33> 'int' 1
|   |-BinaryOperator 0x26de9660890 <line:979:5, col:39> 'limb':'int' '='
|   | |-DeclRefExpr 0x26de9660788 <col:5> 'limb':'int' lvalue Var 0x26de9662a40 'is_greater' 'limb':'int'
|   | `-BinaryOperator 0x26de9660870 <col:18, col:39> 'int' '-'
|   |   |-IntegerLiteral 0x26de96607a8 <col:18> 'int' 0
|   |   `-ParenExpr 0x26de9660850 <col:22, col:39> 'limb':'int'
|   |     `-BinaryOperator 0x26de9660830 <col:23, col:37> 'limb':'int' '>>'
|   |       |-ImplicitCastExpr 0x26de9660818 <col:23> 'limb':'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x26de96607d0 <col:23> 'limb':'int' lvalue Var 0x26de9662a40 'is_greater' 'limb':'int'
|   |       `-IntegerLiteral 0x26de96607f0 <col:37> 'int' 63
|   |-CompoundAssignOperator 0x26de9660a20 <line:981:5, col:27> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de9660910 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de96608f8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de96608b0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de96627b0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de96608d0 <col:9> 'int' 0
|   | `-BinaryOperator 0x26de9660a00 <col:15, col:27> 'int' '&'
|   |   |-ImplicitCastExpr 0x26de96609d0 <col:15, col:23> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x26de9660990 <col:15, col:23> 'const limb':'const int' lvalue
|   |   |   |-ImplicitCastExpr 0x26de9660978 <col:15> 'const limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x26de9660930 <col:15> 'const felem':'limb const[9]' lvalue Var 0x26de966a8f8 'kPrime' 'const felem':'limb const[9]'
|   |   |   `-IntegerLiteral 0x26de9660950 <col:22> 'int' 0
|   |   `-ImplicitCastExpr 0x26de96609e8 <col:27> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x26de96609b0 <col:27> 'limb':'int' lvalue Var 0x26de9662a40 'is_greater' 'limb':'int'
|   |-CompoundAssignOperator 0x26de9660bc0 <line:982:5, col:27> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de9660ab0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de9660a98 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de9660a50 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de96627b0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de9660a70 <col:9> 'int' 1
|   | `-BinaryOperator 0x26de9660ba0 <col:15, col:27> 'int' '&'
|   |   |-ImplicitCastExpr 0x26de9660b70 <col:15, col:23> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x26de9660b30 <col:15, col:23> 'const limb':'const int' lvalue
|   |   |   |-ImplicitCastExpr 0x26de9660b18 <col:15> 'const limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x26de9660ad0 <col:15> 'const felem':'limb const[9]' lvalue Var 0x26de966a8f8 'kPrime' 'const felem':'limb const[9]'
|   |   |   `-IntegerLiteral 0x26de9660af0 <col:22> 'int' 1
|   |   `-ImplicitCastExpr 0x26de9660b88 <col:27> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x26de9660b50 <col:27> 'limb':'int' lvalue Var 0x26de9662a40 'is_greater' 'limb':'int'
|   |-CompoundAssignOperator 0x26de9660d60 <line:983:5, col:27> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de9660c50 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de9660c38 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de9660bf0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de96627b0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de9660c10 <col:9> 'int' 2
|   | `-BinaryOperator 0x26de9660d40 <col:15, col:27> 'int' '&'
|   |   |-ImplicitCastExpr 0x26de9660d10 <col:15, col:23> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x26de9660cd0 <col:15, col:23> 'const limb':'const int' lvalue
|   |   |   |-ImplicitCastExpr 0x26de9660cb8 <col:15> 'const limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x26de9660c70 <col:15> 'const felem':'limb const[9]' lvalue Var 0x26de966a8f8 'kPrime' 'const felem':'limb const[9]'
|   |   |   `-IntegerLiteral 0x26de9660c90 <col:22> 'int' 2
|   |   `-ImplicitCastExpr 0x26de9660d28 <col:27> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x26de9660cf0 <col:27> 'limb':'int' lvalue Var 0x26de9662a40 'is_greater' 'limb':'int'
|   |-CompoundAssignOperator 0x26de9660f00 <line:984:5, col:27> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de9660df0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de9660dd8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de9660d90 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de96627b0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de9660db0 <col:9> 'int' 3
|   | `-BinaryOperator 0x26de9660ee0 <col:15, col:27> 'int' '&'
|   |   |-ImplicitCastExpr 0x26de9660eb0 <col:15, col:23> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x26de9660e70 <col:15, col:23> 'const limb':'const int' lvalue
|   |   |   |-ImplicitCastExpr 0x26de9660e58 <col:15> 'const limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x26de9660e10 <col:15> 'const felem':'limb const[9]' lvalue Var 0x26de966a8f8 'kPrime' 'const felem':'limb const[9]'
|   |   |   `-IntegerLiteral 0x26de9660e30 <col:22> 'int' 3
|   |   `-ImplicitCastExpr 0x26de9660ec8 <col:27> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x26de9660e90 <col:27> 'limb':'int' lvalue Var 0x26de9662a40 'is_greater' 'limb':'int'
|   |-CompoundAssignOperator 0x26de96610a0 <line:985:5, col:27> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de9660f90 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de9660f78 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de9660f30 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de96627b0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de9660f50 <col:9> 'int' 4
|   | `-BinaryOperator 0x26de9661080 <col:15, col:27> 'int' '&'
|   |   |-ImplicitCastExpr 0x26de9661050 <col:15, col:23> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x26de9661010 <col:15, col:23> 'const limb':'const int' lvalue
|   |   |   |-ImplicitCastExpr 0x26de9660ff8 <col:15> 'const limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x26de9660fb0 <col:15> 'const felem':'limb const[9]' lvalue Var 0x26de966a8f8 'kPrime' 'const felem':'limb const[9]'
|   |   |   `-IntegerLiteral 0x26de9660fd0 <col:22> 'int' 4
|   |   `-ImplicitCastExpr 0x26de9661068 <col:27> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x26de9661030 <col:27> 'limb':'int' lvalue Var 0x26de9662a40 'is_greater' 'limb':'int'
|   |-CompoundAssignOperator 0x26de9661240 <line:986:5, col:27> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de9661130 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de9661118 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de96610d0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de96627b0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de96610f0 <col:9> 'int' 5
|   | `-BinaryOperator 0x26de9661220 <col:15, col:27> 'int' '&'
|   |   |-ImplicitCastExpr 0x26de96611f0 <col:15, col:23> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x26de96611b0 <col:15, col:23> 'const limb':'const int' lvalue
|   |   |   |-ImplicitCastExpr 0x26de9661198 <col:15> 'const limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x26de9661150 <col:15> 'const felem':'limb const[9]' lvalue Var 0x26de966a8f8 'kPrime' 'const felem':'limb const[9]'
|   |   |   `-IntegerLiteral 0x26de9661170 <col:22> 'int' 5
|   |   `-ImplicitCastExpr 0x26de9661208 <col:27> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x26de96611d0 <col:27> 'limb':'int' lvalue Var 0x26de9662a40 'is_greater' 'limb':'int'
|   |-CompoundAssignOperator 0x26de96613e0 <line:987:5, col:27> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de96612d0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de96612b8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de9661270 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de96627b0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de9661290 <col:9> 'int' 6
|   | `-BinaryOperator 0x26de96613c0 <col:15, col:27> 'int' '&'
|   |   |-ImplicitCastExpr 0x26de9661390 <col:15, col:23> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x26de9661350 <col:15, col:23> 'const limb':'const int' lvalue
|   |   |   |-ImplicitCastExpr 0x26de9661338 <col:15> 'const limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x26de96612f0 <col:15> 'const felem':'limb const[9]' lvalue Var 0x26de966a8f8 'kPrime' 'const felem':'limb const[9]'
|   |   |   `-IntegerLiteral 0x26de9661310 <col:22> 'int' 6
|   |   `-ImplicitCastExpr 0x26de96613a8 <col:27> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x26de9661370 <col:27> 'limb':'int' lvalue Var 0x26de9662a40 'is_greater' 'limb':'int'
|   |-CompoundAssignOperator 0x26de9661580 <line:988:5, col:27> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de9661470 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de9661458 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de9661410 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de96627b0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de9661430 <col:9> 'int' 7
|   | `-BinaryOperator 0x26de9661560 <col:15, col:27> 'int' '&'
|   |   |-ImplicitCastExpr 0x26de9661530 <col:15, col:23> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x26de96614f0 <col:15, col:23> 'const limb':'const int' lvalue
|   |   |   |-ImplicitCastExpr 0x26de96614d8 <col:15> 'const limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x26de9661490 <col:15> 'const felem':'limb const[9]' lvalue Var 0x26de966a8f8 'kPrime' 'const felem':'limb const[9]'
|   |   |   `-IntegerLiteral 0x26de96614b0 <col:22> 'int' 7
|   |   `-ImplicitCastExpr 0x26de9661548 <col:27> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x26de9661510 <col:27> 'limb':'int' lvalue Var 0x26de9662a40 'is_greater' 'limb':'int'
|   |-CompoundAssignOperator 0x26de9661720 <line:989:5, col:27> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de9661610 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de96615f8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de96615b0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de96627b0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de96615d0 <col:9> 'int' 8
|   | `-BinaryOperator 0x26de9661700 <col:15, col:27> 'int' '&'
|   |   |-ImplicitCastExpr 0x26de96616d0 <col:15, col:23> 'limb':'int' <LValueToRValue>
|   |   | `-ArraySubscriptExpr 0x26de9661690 <col:15, col:23> 'const limb':'const int' lvalue
|   |   |   |-ImplicitCastExpr 0x26de9661678 <col:15> 'const limb *' <ArrayToPointerDecay>
|   |   |   | `-DeclRefExpr 0x26de9661630 <col:15> 'const felem':'limb const[9]' lvalue Var 0x26de966a8f8 'kPrime' 'const felem':'limb const[9]'
|   |   |   `-IntegerLiteral 0x26de9661650 <col:22> 'int' 8
|   |   `-ImplicitCastExpr 0x26de96616e8 <col:27> 'limb':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x26de96616b0 <col:27> 'limb':'int' lvalue Var 0x26de9662a40 'is_greater' 'limb':'int'
|   |-BinaryOperator 0x26de96618a0 <line:992:5, col:26> 'limb':'int' '='
|   | |-DeclRefExpr 0x26de9661750 <col:5> 'limb':'int' lvalue Var 0x26de9662ab8 'sign' 'limb':'int'
|   | `-UnaryOperator 0x26de9661888 <col:12, col:26> 'limb':'int' prefix '-'
|   |   `-ParenExpr 0x26de9661868 <col:13, col:26> 'limb':'int'
|   |     `-BinaryOperator 0x26de9661848 <col:14, col:24> 'limb':'int' '>>'
|   |       |-ImplicitCastExpr 0x26de9661830 <col:14, col:19> 'limb':'int' <LValueToRValue>
|   |       | `-ArraySubscriptExpr 0x26de96617e8 <col:14, col:19> 'limb':'int' lvalue
|   |       |   |-ImplicitCastExpr 0x26de96617d0 <col:14> 'limb *':'limb *' <LValueToRValue>
|   |       |   | `-DeclRefExpr 0x26de9661788 <col:14> 'limb *':'limb *' lvalue ParmVar 0x26de96627b0 'out' 'limb *':'limb *'
|   |       |   `-IntegerLiteral 0x26de96617a8 <col:18> 'int' 0
|   |       `-IntegerLiteral 0x26de9661808 <col:24> 'int' 63
|   |-CompoundAssignOperator 0x26de9661a08 <line:993:5, col:28> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de9661920 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de9661908 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de96618c0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de96627b0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de96618e0 <col:9> 'int' 0
|   | `-ParenExpr 0x26de96619e8 <col:15, col:28> 'int'
|   |   `-BinaryOperator 0x26de96619c8 <col:16, col:24> 'int' '&'
|   |     |-ImplicitCastExpr 0x26de9661998 <col:16> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x26de9661940 <col:16> 'const limb':'const int' lvalue Var 0x26de9662b68 'two58' 'const limb':'const int'
|   |     `-ImplicitCastExpr 0x26de96619b0 <col:24> 'limb':'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x26de9661978 <col:24> 'limb':'int' lvalue Var 0x26de9662ab8 'sign' 'limb':'int'
|   |-CompoundAssignOperator 0x26de9661ba0 <line:994:5, col:24> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de9661ae0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de9661ac8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de9661a80 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de96627b0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de9661aa0 <col:9> 'int' 1
|   | `-ParenExpr 0x26de9661b80 <col:15, col:24> 'int'
|   |   `-BinaryOperator 0x26de9661b60 <col:16, col:20> 'int' '&'
|   |     |-IntegerLiteral 0x26de9661b00 <col:16> 'int' 1
|   |     `-ImplicitCastExpr 0x26de9661b48 <col:20> 'limb':'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x26de9661b28 <col:20> 'limb':'int' lvalue Var 0x26de9662ab8 'sign' 'limb':'int'
|   |-BinaryOperator 0x26de9661d08 <line:995:5, col:26> 'limb':'int' '='
|   | |-DeclRefExpr 0x26de9661bd0 <col:5> 'limb':'int' lvalue Var 0x26de9662ab8 'sign' 'limb':'int'
|   | `-UnaryOperator 0x26de9661cf0 <col:12, col:26> 'limb':'int' prefix '-'
|   |   `-ParenExpr 0x26de9661cd0 <col:13, col:26> 'limb':'int'
|   |     `-BinaryOperator 0x26de9661cb0 <col:14, col:24> 'limb':'int' '>>'
|   |       |-ImplicitCastExpr 0x26de9661c98 <col:14, col:19> 'limb':'int' <LValueToRValue>
|   |       | `-ArraySubscriptExpr 0x26de9661c50 <col:14, col:19> 'limb':'int' lvalue
|   |       |   |-ImplicitCastExpr 0x26de9661c38 <col:14> 'limb *':'limb *' <LValueToRValue>
|   |       |   | `-DeclRefExpr 0x26de9661bf0 <col:14> 'limb *':'limb *' lvalue ParmVar 0x26de96627b0 'out' 'limb *':'limb *'
|   |       |   `-IntegerLiteral 0x26de9661c10 <col:18> 'int' 1
|   |       `-IntegerLiteral 0x26de9661c70 <col:24> 'int' 63
|   |-CompoundAssignOperator 0x26de966fee0 <line:996:5, col:28> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de9661d88 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de9661d70 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de9661d28 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de96627b0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de9661d48 <col:9> 'int' 1
|   | `-ParenExpr 0x26de966fec0 <col:15, col:28> 'int'
|   |   `-BinaryOperator 0x26de966fea0 <col:16, col:24> 'int' '&'
|   |     |-ImplicitCastExpr 0x26de966fe70 <col:16> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x26de9661da8 <col:16> 'const limb':'const int' lvalue Var 0x26de9662b68 'two58' 'const limb':'const int'
|   |     `-ImplicitCastExpr 0x26de966fe88 <col:24> 'limb':'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x26de9661dc8 <col:24> 'limb':'int' lvalue Var 0x26de9662ab8 'sign' 'limb':'int'
|   |-CompoundAssignOperator 0x26de9670030 <line:997:5, col:24> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de966ff70 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de966ff58 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de966ff10 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de96627b0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de966ff30 <col:9> 'int' 2
|   | `-ParenExpr 0x26de9670010 <col:15, col:24> 'int'
|   |   `-BinaryOperator 0x26de966fff0 <col:16, col:20> 'int' '&'
|   |     |-IntegerLiteral 0x26de966ff90 <col:16> 'int' 1
|   |     `-ImplicitCastExpr 0x26de966ffd8 <col:20> 'limb':'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x26de966ffb8 <col:20> 'limb':'int' lvalue Var 0x26de9662ab8 'sign' 'limb':'int'
|   |-BinaryOperator 0x26de9670198 <line:998:5, col:26> 'limb':'int' '='
|   | |-DeclRefExpr 0x26de9670060 <col:5> 'limb':'int' lvalue Var 0x26de9662ab8 'sign' 'limb':'int'
|   | `-UnaryOperator 0x26de9670180 <col:12, col:26> 'limb':'int' prefix '-'
|   |   `-ParenExpr 0x26de9670160 <col:13, col:26> 'limb':'int'
|   |     `-BinaryOperator 0x26de9670140 <col:14, col:24> 'limb':'int' '>>'
|   |       |-ImplicitCastExpr 0x26de9670128 <col:14, col:19> 'limb':'int' <LValueToRValue>
|   |       | `-ArraySubscriptExpr 0x26de96700e0 <col:14, col:19> 'limb':'int' lvalue
|   |       |   |-ImplicitCastExpr 0x26de96700c8 <col:14> 'limb *':'limb *' <LValueToRValue>
|   |       |   | `-DeclRefExpr 0x26de9670080 <col:14> 'limb *':'limb *' lvalue ParmVar 0x26de96627b0 'out' 'limb *':'limb *'
|   |       |   `-IntegerLiteral 0x26de96700a0 <col:18> 'int' 2
|   |       `-IntegerLiteral 0x26de9670100 <col:24> 'int' 63
|   |-CompoundAssignOperator 0x26de96702e8 <line:999:5, col:28> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de9670218 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de9670200 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de96701b8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de96627b0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de96701d8 <col:9> 'int' 2
|   | `-ParenExpr 0x26de96702c8 <col:15, col:28> 'int'
|   |   `-BinaryOperator 0x26de96702a8 <col:16, col:24> 'int' '&'
|   |     |-ImplicitCastExpr 0x26de9670278 <col:16> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x26de9670238 <col:16> 'const limb':'const int' lvalue Var 0x26de9662b68 'two58' 'const limb':'const int'
|   |     `-ImplicitCastExpr 0x26de9670290 <col:24> 'limb':'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x26de9670258 <col:24> 'limb':'int' lvalue Var 0x26de9662ab8 'sign' 'limb':'int'
|   |-CompoundAssignOperator 0x26de9670438 <line:1000:5, col:24> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de9670378 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de9670360 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de9670318 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de96627b0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de9670338 <col:9> 'int' 3
|   | `-ParenExpr 0x26de9670418 <col:15, col:24> 'int'
|   |   `-BinaryOperator 0x26de96703f8 <col:16, col:20> 'int' '&'
|   |     |-IntegerLiteral 0x26de9670398 <col:16> 'int' 1
|   |     `-ImplicitCastExpr 0x26de96703e0 <col:20> 'limb':'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x26de96703c0 <col:20> 'limb':'int' lvalue Var 0x26de9662ab8 'sign' 'limb':'int'
|   |-BinaryOperator 0x26de96705a0 <line:1001:5, col:26> 'limb':'int' '='
|   | |-DeclRefExpr 0x26de9670468 <col:5> 'limb':'int' lvalue Var 0x26de9662ab8 'sign' 'limb':'int'
|   | `-UnaryOperator 0x26de9670588 <col:12, col:26> 'limb':'int' prefix '-'
|   |   `-ParenExpr 0x26de9670568 <col:13, col:26> 'limb':'int'
|   |     `-BinaryOperator 0x26de9670548 <col:14, col:24> 'limb':'int' '>>'
|   |       |-ImplicitCastExpr 0x26de9670530 <col:14, col:19> 'limb':'int' <LValueToRValue>
|   |       | `-ArraySubscriptExpr 0x26de96704e8 <col:14, col:19> 'limb':'int' lvalue
|   |       |   |-ImplicitCastExpr 0x26de96704d0 <col:14> 'limb *':'limb *' <LValueToRValue>
|   |       |   | `-DeclRefExpr 0x26de9670488 <col:14> 'limb *':'limb *' lvalue ParmVar 0x26de96627b0 'out' 'limb *':'limb *'
|   |       |   `-IntegerLiteral 0x26de96704a8 <col:18> 'int' 3
|   |       `-IntegerLiteral 0x26de9670508 <col:24> 'int' 63
|   |-CompoundAssignOperator 0x26de96706f0 <line:1002:5, col:28> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de9670620 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de9670608 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de96705c0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de96627b0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de96705e0 <col:9> 'int' 3
|   | `-ParenExpr 0x26de96706d0 <col:15, col:28> 'int'
|   |   `-BinaryOperator 0x26de96706b0 <col:16, col:24> 'int' '&'
|   |     |-ImplicitCastExpr 0x26de9670680 <col:16> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x26de9670640 <col:16> 'const limb':'const int' lvalue Var 0x26de9662b68 'two58' 'const limb':'const int'
|   |     `-ImplicitCastExpr 0x26de9670698 <col:24> 'limb':'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x26de9670660 <col:24> 'limb':'int' lvalue Var 0x26de9662ab8 'sign' 'limb':'int'
|   |-CompoundAssignOperator 0x26de9670840 <line:1003:5, col:24> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de9670780 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de9670768 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de9670720 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de96627b0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de9670740 <col:9> 'int' 4
|   | `-ParenExpr 0x26de9670820 <col:15, col:24> 'int'
|   |   `-BinaryOperator 0x26de9670800 <col:16, col:20> 'int' '&'
|   |     |-IntegerLiteral 0x26de96707a0 <col:16> 'int' 1
|   |     `-ImplicitCastExpr 0x26de96707e8 <col:20> 'limb':'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x26de96707c8 <col:20> 'limb':'int' lvalue Var 0x26de9662ab8 'sign' 'limb':'int'
|   |-BinaryOperator 0x26de96709a8 <line:1004:5, col:26> 'limb':'int' '='
|   | |-DeclRefExpr 0x26de9670870 <col:5> 'limb':'int' lvalue Var 0x26de9662ab8 'sign' 'limb':'int'
|   | `-UnaryOperator 0x26de9670990 <col:12, col:26> 'limb':'int' prefix '-'
|   |   `-ParenExpr 0x26de9670970 <col:13, col:26> 'limb':'int'
|   |     `-BinaryOperator 0x26de9670950 <col:14, col:24> 'limb':'int' '>>'
|   |       |-ImplicitCastExpr 0x26de9670938 <col:14, col:19> 'limb':'int' <LValueToRValue>
|   |       | `-ArraySubscriptExpr 0x26de96708f0 <col:14, col:19> 'limb':'int' lvalue
|   |       |   |-ImplicitCastExpr 0x26de96708d8 <col:14> 'limb *':'limb *' <LValueToRValue>
|   |       |   | `-DeclRefExpr 0x26de9670890 <col:14> 'limb *':'limb *' lvalue ParmVar 0x26de96627b0 'out' 'limb *':'limb *'
|   |       |   `-IntegerLiteral 0x26de96708b0 <col:18> 'int' 4
|   |       `-IntegerLiteral 0x26de9670910 <col:24> 'int' 63
|   |-CompoundAssignOperator 0x26de9670af8 <line:1005:5, col:28> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de9670a28 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de9670a10 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de96709c8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de96627b0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de96709e8 <col:9> 'int' 4
|   | `-ParenExpr 0x26de9670ad8 <col:15, col:28> 'int'
|   |   `-BinaryOperator 0x26de9670ab8 <col:16, col:24> 'int' '&'
|   |     |-ImplicitCastExpr 0x26de9670a88 <col:16> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x26de9670a48 <col:16> 'const limb':'const int' lvalue Var 0x26de9662b68 'two58' 'const limb':'const int'
|   |     `-ImplicitCastExpr 0x26de9670aa0 <col:24> 'limb':'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x26de9670a68 <col:24> 'limb':'int' lvalue Var 0x26de9662ab8 'sign' 'limb':'int'
|   |-CompoundAssignOperator 0x26de9670c48 <line:1006:5, col:24> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de9670b88 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de9670b70 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de9670b28 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de96627b0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de9670b48 <col:9> 'int' 5
|   | `-ParenExpr 0x26de9670c28 <col:15, col:24> 'int'
|   |   `-BinaryOperator 0x26de9670c08 <col:16, col:20> 'int' '&'
|   |     |-IntegerLiteral 0x26de9670ba8 <col:16> 'int' 1
|   |     `-ImplicitCastExpr 0x26de9670bf0 <col:20> 'limb':'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x26de9670bd0 <col:20> 'limb':'int' lvalue Var 0x26de9662ab8 'sign' 'limb':'int'
|   |-BinaryOperator 0x26de9670db0 <line:1007:5, col:26> 'limb':'int' '='
|   | |-DeclRefExpr 0x26de9670c78 <col:5> 'limb':'int' lvalue Var 0x26de9662ab8 'sign' 'limb':'int'
|   | `-UnaryOperator 0x26de9670d98 <col:12, col:26> 'limb':'int' prefix '-'
|   |   `-ParenExpr 0x26de9670d78 <col:13, col:26> 'limb':'int'
|   |     `-BinaryOperator 0x26de9670d58 <col:14, col:24> 'limb':'int' '>>'
|   |       |-ImplicitCastExpr 0x26de9670d40 <col:14, col:19> 'limb':'int' <LValueToRValue>
|   |       | `-ArraySubscriptExpr 0x26de9670cf8 <col:14, col:19> 'limb':'int' lvalue
|   |       |   |-ImplicitCastExpr 0x26de9670ce0 <col:14> 'limb *':'limb *' <LValueToRValue>
|   |       |   | `-DeclRefExpr 0x26de9670c98 <col:14> 'limb *':'limb *' lvalue ParmVar 0x26de96627b0 'out' 'limb *':'limb *'
|   |       |   `-IntegerLiteral 0x26de9670cb8 <col:18> 'int' 0
|   |       `-IntegerLiteral 0x26de9670d18 <col:24> 'int' 63
|   |-CompoundAssignOperator 0x26de9670f00 <line:1008:5, col:28> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de9670e30 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de9670e18 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de9670dd0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de96627b0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de9670df0 <col:9> 'int' 5
|   | `-ParenExpr 0x26de9670ee0 <col:15, col:28> 'int'
|   |   `-BinaryOperator 0x26de9670ec0 <col:16, col:24> 'int' '&'
|   |     |-ImplicitCastExpr 0x26de9670e90 <col:16> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x26de9670e50 <col:16> 'const limb':'const int' lvalue Var 0x26de9662b68 'two58' 'const limb':'const int'
|   |     `-ImplicitCastExpr 0x26de9670ea8 <col:24> 'limb':'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x26de9670e70 <col:24> 'limb':'int' lvalue Var 0x26de9662ab8 'sign' 'limb':'int'
|   |-CompoundAssignOperator 0x26de9671050 <line:1009:5, col:24> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de9670f90 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de9670f78 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de9670f30 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de96627b0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de9670f50 <col:9> 'int' 6
|   | `-ParenExpr 0x26de9671030 <col:15, col:24> 'int'
|   |   `-BinaryOperator 0x26de9671010 <col:16, col:20> 'int' '&'
|   |     |-IntegerLiteral 0x26de9670fb0 <col:16> 'int' 1
|   |     `-ImplicitCastExpr 0x26de9670ff8 <col:20> 'limb':'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x26de9670fd8 <col:20> 'limb':'int' lvalue Var 0x26de9662ab8 'sign' 'limb':'int'
|   |-BinaryOperator 0x26de96711b8 <line:1010:5, col:26> 'limb':'int' '='
|   | |-DeclRefExpr 0x26de9671080 <col:5> 'limb':'int' lvalue Var 0x26de9662ab8 'sign' 'limb':'int'
|   | `-UnaryOperator 0x26de96711a0 <col:12, col:26> 'limb':'int' prefix '-'
|   |   `-ParenExpr 0x26de9671180 <col:13, col:26> 'limb':'int'
|   |     `-BinaryOperator 0x26de9671160 <col:14, col:24> 'limb':'int' '>>'
|   |       |-ImplicitCastExpr 0x26de9671148 <col:14, col:19> 'limb':'int' <LValueToRValue>
|   |       | `-ArraySubscriptExpr 0x26de9671100 <col:14, col:19> 'limb':'int' lvalue
|   |       |   |-ImplicitCastExpr 0x26de96710e8 <col:14> 'limb *':'limb *' <LValueToRValue>
|   |       |   | `-DeclRefExpr 0x26de96710a0 <col:14> 'limb *':'limb *' lvalue ParmVar 0x26de96627b0 'out' 'limb *':'limb *'
|   |       |   `-IntegerLiteral 0x26de96710c0 <col:18> 'int' 6
|   |       `-IntegerLiteral 0x26de9671120 <col:24> 'int' 63
|   |-CompoundAssignOperator 0x26de9671308 <line:1011:5, col:28> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de9671238 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de9671220 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de96711d8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de96627b0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de96711f8 <col:9> 'int' 6
|   | `-ParenExpr 0x26de96712e8 <col:15, col:28> 'int'
|   |   `-BinaryOperator 0x26de96712c8 <col:16, col:24> 'int' '&'
|   |     |-ImplicitCastExpr 0x26de9671298 <col:16> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x26de9671258 <col:16> 'const limb':'const int' lvalue Var 0x26de9662b68 'two58' 'const limb':'const int'
|   |     `-ImplicitCastExpr 0x26de96712b0 <col:24> 'limb':'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x26de9671278 <col:24> 'limb':'int' lvalue Var 0x26de9662ab8 'sign' 'limb':'int'
|   |-CompoundAssignOperator 0x26de9671458 <line:1012:5, col:24> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de9671398 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de9671380 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de9671338 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de96627b0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de9671358 <col:9> 'int' 7
|   | `-ParenExpr 0x26de9671438 <col:15, col:24> 'int'
|   |   `-BinaryOperator 0x26de9671418 <col:16, col:20> 'int' '&'
|   |     |-IntegerLiteral 0x26de96713b8 <col:16> 'int' 1
|   |     `-ImplicitCastExpr 0x26de9671400 <col:20> 'limb':'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x26de96713e0 <col:20> 'limb':'int' lvalue Var 0x26de9662ab8 'sign' 'limb':'int'
|   |-BinaryOperator 0x26de96715c0 <line:1013:5, col:26> 'limb':'int' '='
|   | |-DeclRefExpr 0x26de9671488 <col:5> 'limb':'int' lvalue Var 0x26de9662ab8 'sign' 'limb':'int'
|   | `-UnaryOperator 0x26de96715a8 <col:12, col:26> 'limb':'int' prefix '-'
|   |   `-ParenExpr 0x26de9671588 <col:13, col:26> 'limb':'int'
|   |     `-BinaryOperator 0x26de9671568 <col:14, col:24> 'limb':'int' '>>'
|   |       |-ImplicitCastExpr 0x26de9671550 <col:14, col:19> 'limb':'int' <LValueToRValue>
|   |       | `-ArraySubscriptExpr 0x26de9671508 <col:14, col:19> 'limb':'int' lvalue
|   |       |   |-ImplicitCastExpr 0x26de96714f0 <col:14> 'limb *':'limb *' <LValueToRValue>
|   |       |   | `-DeclRefExpr 0x26de96714a8 <col:14> 'limb *':'limb *' lvalue ParmVar 0x26de96627b0 'out' 'limb *':'limb *'
|   |       |   `-IntegerLiteral 0x26de96714c8 <col:18> 'int' 7
|   |       `-IntegerLiteral 0x26de9671528 <col:24> 'int' 63
|   |-CompoundAssignOperator 0x26de9671710 <line:1014:5, col:28> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de9671640 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de9671628 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de96715e0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de96627b0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de9671600 <col:9> 'int' 7
|   | `-ParenExpr 0x26de96716f0 <col:15, col:28> 'int'
|   |   `-BinaryOperator 0x26de96716d0 <col:16, col:24> 'int' '&'
|   |     |-ImplicitCastExpr 0x26de96716a0 <col:16> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x26de9671660 <col:16> 'const limb':'const int' lvalue Var 0x26de9662b68 'two58' 'const limb':'const int'
|   |     `-ImplicitCastExpr 0x26de96716b8 <col:24> 'limb':'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x26de9671680 <col:24> 'limb':'int' lvalue Var 0x26de9662ab8 'sign' 'limb':'int'
|   |-CompoundAssignOperator 0x26de9671860 <line:1015:5, col:24> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de96717a0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de9671788 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de9671740 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de96627b0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de9671760 <col:9> 'int' 8
|   | `-ParenExpr 0x26de9671840 <col:15, col:24> 'int'
|   |   `-BinaryOperator 0x26de9671820 <col:16, col:20> 'int' '&'
|   |     |-IntegerLiteral 0x26de96717c0 <col:16> 'int' 1
|   |     `-ImplicitCastExpr 0x26de9671808 <col:20> 'limb':'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x26de96717e8 <col:20> 'limb':'int' lvalue Var 0x26de9662ab8 'sign' 'limb':'int'
|   |-BinaryOperator 0x26de96719c8 <line:1016:5, col:26> 'limb':'int' '='
|   | |-DeclRefExpr 0x26de9671890 <col:5> 'limb':'int' lvalue Var 0x26de9662ab8 'sign' 'limb':'int'
|   | `-UnaryOperator 0x26de96719b0 <col:12, col:26> 'limb':'int' prefix '-'
|   |   `-ParenExpr 0x26de9671990 <col:13, col:26> 'limb':'int'
|   |     `-BinaryOperator 0x26de9671970 <col:14, col:24> 'limb':'int' '>>'
|   |       |-ImplicitCastExpr 0x26de9671958 <col:14, col:19> 'limb':'int' <LValueToRValue>
|   |       | `-ArraySubscriptExpr 0x26de9671910 <col:14, col:19> 'limb':'int' lvalue
|   |       |   |-ImplicitCastExpr 0x26de96718f8 <col:14> 'limb *':'limb *' <LValueToRValue>
|   |       |   | `-DeclRefExpr 0x26de96718b0 <col:14> 'limb *':'limb *' lvalue ParmVar 0x26de96627b0 'out' 'limb *':'limb *'
|   |       |   `-IntegerLiteral 0x26de96718d0 <col:18> 'int' 5
|   |       `-IntegerLiteral 0x26de9671930 <col:24> 'int' 63
|   |-CompoundAssignOperator 0x26de9671b18 <line:1017:5, col:28> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de9671a48 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de9671a30 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de96719e8 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de96627b0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de9671a08 <col:9> 'int' 5
|   | `-ParenExpr 0x26de9671af8 <col:15, col:28> 'int'
|   |   `-BinaryOperator 0x26de9671ad8 <col:16, col:24> 'int' '&'
|   |     |-ImplicitCastExpr 0x26de9671aa8 <col:16> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x26de9671a68 <col:16> 'const limb':'const int' lvalue Var 0x26de9662b68 'two58' 'const limb':'const int'
|   |     `-ImplicitCastExpr 0x26de9671ac0 <col:24> 'limb':'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x26de9671a88 <col:24> 'limb':'int' lvalue Var 0x26de9662ab8 'sign' 'limb':'int'
|   |-CompoundAssignOperator 0x26de9671c68 <line:1018:5, col:24> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de9671ba8 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de9671b90 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de9671b48 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de96627b0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de9671b68 <col:9> 'int' 6
|   | `-ParenExpr 0x26de9671c48 <col:15, col:24> 'int'
|   |   `-BinaryOperator 0x26de9671c28 <col:16, col:20> 'int' '&'
|   |     |-IntegerLiteral 0x26de9671bc8 <col:16> 'int' 1
|   |     `-ImplicitCastExpr 0x26de9671c10 <col:20> 'limb':'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x26de9671bf0 <col:20> 'limb':'int' lvalue Var 0x26de9662ab8 'sign' 'limb':'int'
|   |-BinaryOperator 0x26de9671dd0 <line:1019:5, col:26> 'limb':'int' '='
|   | |-DeclRefExpr 0x26de9671c98 <col:5> 'limb':'int' lvalue Var 0x26de9662ab8 'sign' 'limb':'int'
|   | `-UnaryOperator 0x26de9671db8 <col:12, col:26> 'limb':'int' prefix '-'
|   |   `-ParenExpr 0x26de9671d98 <col:13, col:26> 'limb':'int'
|   |     `-BinaryOperator 0x26de9671d78 <col:14, col:24> 'limb':'int' '>>'
|   |       |-ImplicitCastExpr 0x26de9671d60 <col:14, col:19> 'limb':'int' <LValueToRValue>
|   |       | `-ArraySubscriptExpr 0x26de9671d18 <col:14, col:19> 'limb':'int' lvalue
|   |       |   |-ImplicitCastExpr 0x26de9671d00 <col:14> 'limb *':'limb *' <LValueToRValue>
|   |       |   | `-DeclRefExpr 0x26de9671cb8 <col:14> 'limb *':'limb *' lvalue ParmVar 0x26de96627b0 'out' 'limb *':'limb *'
|   |       |   `-IntegerLiteral 0x26de9671cd8 <col:18> 'int' 6
|   |       `-IntegerLiteral 0x26de9671d38 <col:24> 'int' 63
|   |-CompoundAssignOperator 0x26de9671f30 <line:1020:5, col:28> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de9671e50 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de9671e38 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de9671df0 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de96627b0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de9671e10 <col:9> 'int' 6
|   | `-ParenExpr 0x26de9671f10 <col:15, col:28> 'int'
|   |   `-BinaryOperator 0x26de9671ef0 <col:16, col:24> 'int' '&'
|   |     |-ImplicitCastExpr 0x26de9671ec0 <col:16> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x26de9671e80 <col:16> 'const limb':'const int' lvalue Var 0x26de9662b68 'two58' 'const limb':'const int'
|   |     `-ImplicitCastExpr 0x26de9671ed8 <col:24> 'limb':'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x26de9671ea0 <col:24> 'limb':'int' lvalue Var 0x26de9662ab8 'sign' 'limb':'int'
|   |-CompoundAssignOperator 0x26de9672080 <line:1021:5, col:24> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de9671fc0 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de9671fa8 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de9671f60 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de96627b0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de9671f80 <col:9> 'int' 7
|   | `-ParenExpr 0x26de9672060 <col:15, col:24> 'int'
|   |   `-BinaryOperator 0x26de9672040 <col:16, col:20> 'int' '&'
|   |     |-IntegerLiteral 0x26de9671fe0 <col:16> 'int' 1
|   |     `-ImplicitCastExpr 0x26de9672028 <col:20> 'limb':'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x26de9672008 <col:20> 'limb':'int' lvalue Var 0x26de9662ab8 'sign' 'limb':'int'
|   |-BinaryOperator 0x26de96721e8 <line:1022:5, col:26> 'limb':'int' '='
|   | |-DeclRefExpr 0x26de96720b0 <col:5> 'limb':'int' lvalue Var 0x26de9662ab8 'sign' 'limb':'int'
|   | `-UnaryOperator 0x26de96721d0 <col:12, col:26> 'limb':'int' prefix '-'
|   |   `-ParenExpr 0x26de96721b0 <col:13, col:26> 'limb':'int'
|   |     `-BinaryOperator 0x26de9672190 <col:14, col:24> 'limb':'int' '>>'
|   |       |-ImplicitCastExpr 0x26de9672178 <col:14, col:19> 'limb':'int' <LValueToRValue>
|   |       | `-ArraySubscriptExpr 0x26de9672130 <col:14, col:19> 'limb':'int' lvalue
|   |       |   |-ImplicitCastExpr 0x26de9672118 <col:14> 'limb *':'limb *' <LValueToRValue>
|   |       |   | `-DeclRefExpr 0x26de96720d0 <col:14> 'limb *':'limb *' lvalue ParmVar 0x26de96627b0 'out' 'limb *':'limb *'
|   |       |   `-IntegerLiteral 0x26de96720f0 <col:18> 'int' 7
|   |       `-IntegerLiteral 0x26de9672150 <col:24> 'int' 63
|   |-CompoundAssignOperator 0x26de9672338 <line:1023:5, col:28> 'limb':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-ArraySubscriptExpr 0x26de9672268 <col:5, col:10> 'limb':'int' lvalue
|   | | |-ImplicitCastExpr 0x26de9672250 <col:5> 'limb *':'limb *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de9672208 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de96627b0 'out' 'limb *':'limb *'
|   | | `-IntegerLiteral 0x26de9672228 <col:9> 'int' 7
|   | `-ParenExpr 0x26de9672318 <col:15, col:28> 'int'
|   |   `-BinaryOperator 0x26de96722f8 <col:16, col:24> 'int' '&'
|   |     |-ImplicitCastExpr 0x26de96722c8 <col:16> 'limb':'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x26de9672288 <col:16> 'const limb':'const int' lvalue Var 0x26de9662b68 'two58' 'const limb':'const int'
|   |     `-ImplicitCastExpr 0x26de96722e0 <col:24> 'limb':'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x26de96722a8 <col:24> 'limb':'int' lvalue Var 0x26de9662ab8 'sign' 'limb':'int'
|   `-CompoundAssignOperator 0x26de9672488 <line:1024:5, col:24> 'limb':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|     |-ArraySubscriptExpr 0x26de96723c8 <col:5, col:10> 'limb':'int' lvalue
|     | |-ImplicitCastExpr 0x26de96723b0 <col:5> 'limb *':'limb *' <LValueToRValue>
|     | | `-DeclRefExpr 0x26de9672368 <col:5> 'limb *':'limb *' lvalue ParmVar 0x26de96627b0 'out' 'limb *':'limb *'
|     | `-IntegerLiteral 0x26de9672388 <col:9> 'int' 8
|     `-ParenExpr 0x26de9672468 <col:15, col:24> 'int'
|       `-BinaryOperator 0x26de9672448 <col:16, col:20> 'int' '&'
|         |-IntegerLiteral 0x26de96723e8 <col:16> 'int' 1
|         `-ImplicitCastExpr 0x26de9672430 <col:20> 'limb':'int' <LValueToRValue>
|           `-DeclRefExpr 0x26de9672410 <col:20> 'limb':'int' lvalue Var 0x26de9662ab8 'sign' 'limb':'int'
|-FunctionDecl 0x26de9672c48 <line:1043:1, line:1139:1> line:1044:1 used point_double 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *)' static
| |-ParmVarDecl 0x26de96727e8 <col:14, col:20> col:20 used x_out 'limb *':'limb *'
| |-ParmVarDecl 0x26de9672860 <col:27, col:33> col:33 used y_out 'limb *':'limb *'
| |-ParmVarDecl 0x26de96728d8 <col:40, col:46> col:46 used z_out 'limb *':'limb *'
| |-ParmVarDecl 0x26de9672950 <line:1045:14, col:26> col:26 used x_in 'const limb *':'const limb *'
| |-ParmVarDecl 0x26de96729c8 <col:32, col:44> col:44 used y_in 'const limb *':'const limb *'
| |-ParmVarDecl 0x26de9672a40 <col:50, col:62> col:62 used z_in 'const limb *':'const limb *'
| `-CompoundStmt 0x26de9664f58 <line:1046:1, line:1139:1>
|   |-DeclStmt 0x26de9672e38 <line:1047:5, col:25>
|   | |-VarDecl 0x26de9672d40 <col:5, col:16> col:16 used tmp 'largefelem':'int [9]'
|   | `-VarDecl 0x26de9672db8 <col:5, col:21> col:21 used tmp2 'largefelem':'int [9]'
|   |-DeclStmt 0x26de9673158 <line:1048:5, col:49>
|   | |-VarDecl 0x26de9672e60 <col:5, col:11> col:11 used delta 'felem':'limb [9]'
|   | |-VarDecl 0x26de9672ed8 <col:5, col:18> col:18 used gamma 'felem':'limb [9]'
|   | |-VarDecl 0x26de9672f50 <col:5, col:25> col:25 used beta 'felem':'limb [9]'
|   | |-VarDecl 0x26de9672fc8 <col:5, col:31> col:31 used alpha 'felem':'limb [9]'
|   | |-VarDecl 0x26de9673040 <col:5, col:38> col:38 used ftmp 'felem':'limb [9]'
|   | `-VarDecl 0x26de96730b8 <col:5, col:44> col:44 used ftmp2 'felem':'limb [9]'
|   |-CallExpr 0x26de9673200 <line:1050:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x26de96731e8 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de9673170 <col:5> 'void (limb *, const limb *)' Function 0x26de9594bb8 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x26de9673230 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de9673190 <col:18> 'felem':'limb [9]' lvalue Var 0x26de9673040 'ftmp' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x26de9673248 <col:24> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x26de96731c8 <col:24> 'const limb *':'const limb *' lvalue ParmVar 0x26de9672950 'x_in' 'const limb *':'const limb *'
|   |-CallExpr 0x26de96732f0 <line:1051:5, col:29> 'void'
|   | |-ImplicitCastExpr 0x26de96732d8 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de9673260 <col:5> 'void (limb *, const limb *)' Function 0x26de9594bb8 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x26de9673320 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de9673280 <col:18> 'felem':'limb [9]' lvalue Var 0x26de96730b8 'ftmp2' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x26de9673338 <col:25> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x26de96732b8 <col:25> 'const limb *':'const limb *' lvalue ParmVar 0x26de9672950 'x_in' 'const limb *':'const limb *'
|   |-CallExpr 0x26de96733e0 <line:1054:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x26de96733c8 <col:5> 'void (*)(int *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de9673350 <col:5> 'void (int *, const limb *)' Function 0x26de959e190 'felem_square' 'void (int *, const limb *)'
|   | |-ImplicitCastExpr 0x26de9673410 <col:18> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de9673370 <col:18> 'largefelem':'int [9]' lvalue Var 0x26de9672d40 'tmp' 'largefelem':'int [9]'
|   | `-ImplicitCastExpr 0x26de9673428 <col:23> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x26de96733a8 <col:23> 'const limb *':'const limb *' lvalue ParmVar 0x26de9672a40 'z_in' 'const limb *':'const limb *'
|   |-CallExpr 0x26de96734d0 <line:1055:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x26de96734b8 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de9673440 <col:5> 'void (limb *, const int *)' Function 0x26de95a3de8 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x26de9673500 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de9673460 <col:18> 'felem':'limb [9]' lvalue Var 0x26de9672e60 'delta' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x26de9673530 <col:25> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de9673518 <col:25> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x26de9673498 <col:25> 'largefelem':'int [9]' lvalue Var 0x26de9672d40 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x26de96735c0 <line:1058:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x26de96735a8 <col:5> 'void (*)(int *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de9673548 <col:5> 'void (int *, const limb *)' Function 0x26de959e190 'felem_square' 'void (int *, const limb *)'
|   | |-ImplicitCastExpr 0x26de96735f0 <col:18> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de9673568 <col:18> 'largefelem':'int [9]' lvalue Var 0x26de9672d40 'tmp' 'largefelem':'int [9]'
|   | `-ImplicitCastExpr 0x26de9673608 <col:23> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x26de9673588 <col:23> 'const limb *':'const limb *' lvalue ParmVar 0x26de96729c8 'y_in' 'const limb *':'const limb *'
|   |-CallExpr 0x26de96736b0 <line:1059:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x26de9673698 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de9673620 <col:5> 'void (limb *, const int *)' Function 0x26de95a3de8 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x26de96736e0 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de9673640 <col:18> 'felem':'limb [9]' lvalue Var 0x26de9672ed8 'gamma' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x26de9673710 <col:25> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de96736f8 <col:25> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x26de9673678 <col:25> 'largefelem':'int [9]' lvalue Var 0x26de9672d40 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x26de96737c0 <line:1062:5, col:31> 'void'
|   | |-ImplicitCastExpr 0x26de96737a8 <col:5> 'void (*)(int *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de9673728 <col:5> 'void (int *, const limb *, const limb *)' Function 0x26de95a07c8 'felem_mul' 'void (int *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x26de96737f8 <col:15> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de9673748 <col:15> 'largefelem':'int [9]' lvalue Var 0x26de9672d40 'tmp' 'largefelem':'int [9]'
|   | |-ImplicitCastExpr 0x26de9673810 <col:20> 'const limb *':'const limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x26de9673768 <col:20> 'const limb *':'const limb *' lvalue ParmVar 0x26de9672950 'x_in' 'const limb *':'const limb *'
|   | `-ImplicitCastExpr 0x26de9673840 <col:26> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de9673828 <col:26> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x26de9673788 <col:26> 'felem':'limb [9]' lvalue Var 0x26de9672ed8 'gamma' 'felem':'limb [9]'
|   |-CallExpr 0x26de96738e8 <line:1063:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x26de96738d0 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de9673858 <col:5> 'void (limb *, const int *)' Function 0x26de95a3de8 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x26de9673918 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de9673878 <col:18> 'felem':'limb [9]' lvalue Var 0x26de9672f50 'beta' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x26de9673948 <col:24> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de9673930 <col:24> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x26de96738b0 <col:24> 'largefelem':'int [9]' lvalue Var 0x26de9672d40 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x26de96739d8 <line:1066:5, col:29> 'void'
|   | |-ImplicitCastExpr 0x26de96739c0 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de9673960 <col:5> 'void (limb *, const limb *)' Function 0x26de959a5b0 'felem_diff64' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x26de9673a08 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de9673980 <col:18> 'felem':'limb [9]' lvalue Var 0x26de9673040 'ftmp' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x26de9673a38 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de9673a20 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x26de96739a0 <col:24> 'felem':'limb [9]' lvalue Var 0x26de9672e60 'delta' 'felem':'limb [9]'
|   |-CallExpr 0x26de9673ac8 <line:1068:5, col:29> 'void'
|   | |-ImplicitCastExpr 0x26de9673ab0 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de9673a50 <col:5> 'void (limb *, const limb *)' Function 0x26de9595930 'felem_sum64' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x26de9673af8 <col:17> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de9673a70 <col:17> 'felem':'limb [9]' lvalue Var 0x26de96730b8 'ftmp2' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x26de9673b28 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de9673b10 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x26de9673a90 <col:24> 'felem':'limb [9]' lvalue Var 0x26de9672e60 'delta' 'felem':'limb [9]'
|   |-CallExpr 0x26de9673c20 <line:1070:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x26de9673c08 <col:5> 'void (*)(limb *, limb)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de9673b40 <col:5> 'void (limb *, limb)' Function 0x26de9597978 'felem_scalar64' 'void (limb *, limb)'
|   | |-ImplicitCastExpr 0x26de9673c50 <col:20> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de9673b60 <col:20> 'felem':'limb [9]' lvalue Var 0x26de96730b8 'ftmp2' 'felem':'limb [9]'
|   | `-IntegerLiteral 0x26de9673b80 <col:27> 'int' 3
|   |-CallExpr 0x26de9673d00 <line:1072:5, col:31> 'void'
|   | |-ImplicitCastExpr 0x26de9673ce8 <col:5> 'void (*)(int *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de9673c68 <col:5> 'void (int *, const limb *, const limb *)' Function 0x26de95a07c8 'felem_mul' 'void (int *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x26de9673d38 <col:15> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de9673c88 <col:15> 'largefelem':'int [9]' lvalue Var 0x26de9672d40 'tmp' 'largefelem':'int [9]'
|   | |-ImplicitCastExpr 0x26de9673d68 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x26de9673d50 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x26de9673ca8 <col:20> 'felem':'limb [9]' lvalue Var 0x26de9673040 'ftmp' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x26de9673d98 <col:26> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de9673d80 <col:26> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x26de9673cc8 <col:26> 'felem':'limb [9]' lvalue Var 0x26de96730b8 'ftmp2' 'felem':'limb [9]'
|   |-CallExpr 0x26de9673e40 <line:1080:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x26de9673e28 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de9673db0 <col:5> 'void (limb *, const int *)' Function 0x26de95a3de8 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x26de9663e10 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de9673dd0 <col:18> 'felem':'limb [9]' lvalue Var 0x26de9672fc8 'alpha' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x26de9663e40 <col:25> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de9663e28 <col:25> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x26de9673e08 <col:25> 'largefelem':'int [9]' lvalue Var 0x26de9672d40 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x26de9663ed0 <line:1083:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x26de9663eb8 <col:5> 'void (*)(int *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de9663e58 <col:5> 'void (int *, const limb *)' Function 0x26de959e190 'felem_square' 'void (int *, const limb *)'
|   | |-ImplicitCastExpr 0x26de9663f00 <col:18> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de9663e78 <col:18> 'largefelem':'int [9]' lvalue Var 0x26de9672d40 'tmp' 'largefelem':'int [9]'
|   | `-ImplicitCastExpr 0x26de9663f30 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de9663f18 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x26de9663e98 <col:23> 'felem':'limb [9]' lvalue Var 0x26de9672fc8 'alpha' 'felem':'limb [9]'
|   |-CallExpr 0x26de9663fc0 <line:1087:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x26de9663fa8 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de9663f48 <col:5> 'void (limb *, const limb *)' Function 0x26de9594bb8 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x26de9663ff0 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de9663f68 <col:18> 'felem':'limb [9]' lvalue Var 0x26de9673040 'ftmp' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x26de9664020 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de9664008 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x26de9663f88 <col:24> 'felem':'limb [9]' lvalue Var 0x26de9672f50 'beta' 'felem':'limb [9]'
|   |-CallExpr 0x26de96640b8 <line:1088:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x26de96640a0 <col:5> 'void (*)(limb *, limb)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de9664038 <col:5> 'void (limb *, limb)' Function 0x26de9597978 'felem_scalar64' 'void (limb *, limb)'
|   | |-ImplicitCastExpr 0x26de96640e8 <col:20> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de9664058 <col:20> 'felem':'limb [9]' lvalue Var 0x26de9673040 'ftmp' 'felem':'limb [9]'
|   | `-IntegerLiteral 0x26de9664078 <col:26> 'int' 8
|   |-CallExpr 0x26de9664178 <line:1090:5, col:32> 'void'
|   | |-ImplicitCastExpr 0x26de9664160 <col:5> 'void (*)(int *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de9664100 <col:5> 'void (int *, const limb *)' Function 0x26de959bce8 'felem_diff_128_64' 'void (int *, const limb *)'
|   | |-ImplicitCastExpr 0x26de96641a8 <col:23> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de9664120 <col:23> 'largefelem':'int [9]' lvalue Var 0x26de9672d40 'tmp' 'largefelem':'int [9]'
|   | `-ImplicitCastExpr 0x26de96641d8 <col:28> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de96641c0 <col:28> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x26de9664140 <col:28> 'felem':'limb [9]' lvalue Var 0x26de9673040 'ftmp' 'felem':'limb [9]'
|   |-CallExpr 0x26de9664268 <line:1092:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x26de9664250 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de96641f0 <col:5> 'void (limb *, const int *)' Function 0x26de95a3de8 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x26de9664298 <col:18> 'limb *':'limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x26de9664210 <col:18> 'limb *':'limb *' lvalue ParmVar 0x26de96727e8 'x_out' 'limb *':'limb *'
|   | `-ImplicitCastExpr 0x26de96642c8 <col:25> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de96642b0 <col:25> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x26de9664230 <col:25> 'largefelem':'int [9]' lvalue Var 0x26de9672d40 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x26de9664358 <line:1095:5, col:29> 'void'
|   | |-ImplicitCastExpr 0x26de9664340 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de96642e0 <col:5> 'void (limb *, const limb *)' Function 0x26de9595930 'felem_sum64' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x26de9664388 <col:17> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de9664300 <col:17> 'felem':'limb [9]' lvalue Var 0x26de9672e60 'delta' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x26de96643b8 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de96643a0 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x26de9664320 <col:24> 'felem':'limb [9]' lvalue Var 0x26de9672ed8 'gamma' 'felem':'limb [9]'
|   |-CallExpr 0x26de9664448 <line:1097:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x26de9664430 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de96643d0 <col:5> 'void (limb *, const limb *)' Function 0x26de9594bb8 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x26de9664478 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de96643f0 <col:18> 'felem':'limb [9]' lvalue Var 0x26de9673040 'ftmp' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x26de9664490 <col:24> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x26de9664410 <col:24> 'const limb *':'const limb *' lvalue ParmVar 0x26de96729c8 'y_in' 'const limb *':'const limb *'
|   |-CallExpr 0x26de9664520 <line:1098:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x26de9664508 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de96644a8 <col:5> 'void (limb *, const limb *)' Function 0x26de9595930 'felem_sum64' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x26de9664550 <col:17> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de96644c8 <col:17> 'felem':'limb [9]' lvalue Var 0x26de9673040 'ftmp' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x26de9664568 <col:23> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x26de96644e8 <col:23> 'const limb *':'const limb *' lvalue ParmVar 0x26de9672a40 'z_in' 'const limb *':'const limb *'
|   |-CallExpr 0x26de96645f8 <line:1100:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x26de96645e0 <col:5> 'void (*)(int *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de9664580 <col:5> 'void (int *, const limb *)' Function 0x26de959e190 'felem_square' 'void (int *, const limb *)'
|   | |-ImplicitCastExpr 0x26de9664628 <col:18> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de96645a0 <col:18> 'largefelem':'int [9]' lvalue Var 0x26de9672d40 'tmp' 'largefelem':'int [9]'
|   | `-ImplicitCastExpr 0x26de9664658 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de9664640 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x26de96645c0 <col:23> 'felem':'limb [9]' lvalue Var 0x26de9673040 'ftmp' 'felem':'limb [9]'
|   |-CallExpr 0x26de96646e8 <line:1104:5, col:33> 'void'
|   | |-ImplicitCastExpr 0x26de96646d0 <col:5> 'void (*)(int *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de9664670 <col:5> 'void (int *, const limb *)' Function 0x26de959bce8 'felem_diff_128_64' 'void (int *, const limb *)'
|   | |-ImplicitCastExpr 0x26de9664718 <col:23> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de9664690 <col:23> 'largefelem':'int [9]' lvalue Var 0x26de9672d40 'tmp' 'largefelem':'int [9]'
|   | `-ImplicitCastExpr 0x26de9664748 <col:28> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de9664730 <col:28> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x26de96646b0 <col:28> 'felem':'limb [9]' lvalue Var 0x26de9672e60 'delta' 'felem':'limb [9]'
|   |-CallExpr 0x26de96647d8 <line:1106:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x26de96647c0 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de9664760 <col:5> 'void (limb *, const int *)' Function 0x26de95a3de8 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x26de9664808 <col:18> 'limb *':'limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x26de9664780 <col:18> 'limb *':'limb *' lvalue ParmVar 0x26de96728d8 'z_out' 'limb *':'limb *'
|   | `-ImplicitCastExpr 0x26de9664838 <col:25> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de9664820 <col:25> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x26de96647a0 <col:25> 'largefelem':'int [9]' lvalue Var 0x26de9672d40 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x26de96648d0 <line:1109:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x26de96648b8 <col:5> 'void (*)(limb *, limb)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de9664850 <col:5> 'void (limb *, limb)' Function 0x26de9597978 'felem_scalar64' 'void (limb *, limb)'
|   | |-ImplicitCastExpr 0x26de9664900 <col:20> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de9664870 <col:20> 'felem':'limb [9]' lvalue Var 0x26de9672f50 'beta' 'felem':'limb [9]'
|   | `-IntegerLiteral 0x26de9664890 <col:26> 'int' 4
|   |-CallExpr 0x26de9664990 <line:1111:5, col:29> 'void'
|   | |-ImplicitCastExpr 0x26de9664978 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de9664918 <col:5> 'void (limb *, const limb *)' Function 0x26de959a5b0 'felem_diff64' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x26de96649c0 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de9664938 <col:18> 'felem':'limb [9]' lvalue Var 0x26de9672f50 'beta' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x26de96649f0 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de96649d8 <col:24> 'limb *':'limb *' <LValueToRValue>
|   |     `-DeclRefExpr 0x26de9664958 <col:24> 'limb *':'limb *' lvalue ParmVar 0x26de96727e8 'x_out' 'limb *':'limb *'
|   |-CallExpr 0x26de9664aa0 <line:1113:5, col:31> 'void'
|   | |-ImplicitCastExpr 0x26de9664a88 <col:5> 'void (*)(int *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de9664a08 <col:5> 'void (int *, const limb *, const limb *)' Function 0x26de95a07c8 'felem_mul' 'void (int *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x26de9664ad8 <col:15> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de9664a28 <col:15> 'largefelem':'int [9]' lvalue Var 0x26de9672d40 'tmp' 'largefelem':'int [9]'
|   | |-ImplicitCastExpr 0x26de9664b08 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x26de9664af0 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x26de9664a48 <col:20> 'felem':'limb [9]' lvalue Var 0x26de9672fc8 'alpha' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x26de9664b38 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de9664b20 <col:27> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x26de9664a68 <col:27> 'felem':'limb [9]' lvalue Var 0x26de9672f50 'beta' 'felem':'limb [9]'
|   |-CallExpr 0x26de9664be0 <line:1120:5, col:29> 'void'
|   | |-ImplicitCastExpr 0x26de9664bc8 <col:5> 'void (*)(int *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de9664b50 <col:5> 'void (int *, const limb *)' Function 0x26de959e190 'felem_square' 'void (int *, const limb *)'
|   | |-ImplicitCastExpr 0x26de9664c10 <col:18> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de9664b70 <col:18> 'largefelem':'int [9]' lvalue Var 0x26de9672db8 'tmp2' 'largefelem':'int [9]'
|   | `-ImplicitCastExpr 0x26de9664c40 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de9664c28 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x26de9664ba8 <col:24> 'felem':'limb [9]' lvalue Var 0x26de9672ed8 'gamma' 'felem':'limb [9]'
|   |-CallExpr 0x26de9664d00 <line:1125:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x26de9664ce8 <col:5> 'void (*)(int *, limb)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de9664c58 <col:5> 'void (int *, limb)' Function 0x26de9598498 'felem_scalar128' 'void (int *, limb)'
|   | |-ImplicitCastExpr 0x26de9664d30 <col:21> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de9664c78 <col:21> 'largefelem':'int [9]' lvalue Var 0x26de9672db8 'tmp2' 'largefelem':'int [9]'
|   | `-IntegerLiteral 0x26de9664c98 <col:27> 'int' 8
|   |-CallExpr 0x26de9664df0 <line:1131:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x26de9664dd8 <col:5> 'void (*)(int *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de9664d48 <col:5> 'void (int *, const int *)' Function 0x26de959d488 'felem_diff128' 'void (int *, const int *)'
|   | |-ImplicitCastExpr 0x26de9664e20 <col:19> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de9664d68 <col:19> 'largefelem':'int [9]' lvalue Var 0x26de9672d40 'tmp' 'largefelem':'int [9]'
|   | `-ImplicitCastExpr 0x26de9664e50 <col:24> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de9664e38 <col:24> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x26de9664d88 <col:24> 'largefelem':'int [9]' lvalue Var 0x26de9672db8 'tmp2' 'largefelem':'int [9]'
|   `-CallExpr 0x26de9664ee0 <line:1138:5, col:28> 'void'
|     |-ImplicitCastExpr 0x26de9664ec8 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x26de9664e68 <col:5> 'void (limb *, const int *)' Function 0x26de95a3de8 'felem_reduce' 'void (limb *, const int *)'
|     |-ImplicitCastExpr 0x26de9664f10 <col:18> 'limb *':'limb *' <LValueToRValue>
|     | `-DeclRefExpr 0x26de9664e88 <col:18> 'limb *':'limb *' lvalue ParmVar 0x26de9672860 'y_out' 'limb *':'limb *'
|     `-ImplicitCastExpr 0x26de9664f40 <col:25> 'const int *':'const int *' <NoOp>
|       `-ImplicitCastExpr 0x26de9664f28 <col:25> 'int *' <ArrayToPointerDecay>
|         `-DeclRefExpr 0x26de9664ea8 <col:25> 'largefelem':'int [9]' lvalue Var 0x26de9672d40 'tmp' 'largefelem':'int [9]'
|-FunctionDecl 0x26de9665258 <line:1142:1, line:1149:1> line:1142:13 used copy_conditional 'void (limb *, const limb *, limb)' static
| |-ParmVarDecl 0x26de9665080 <col:30, col:36> col:36 used out 'limb *':'limb *'
| |-ParmVarDecl 0x26de96650f8 <col:41, col:53> col:53 used in 'const limb *':'const limb *'
| |-ParmVarDecl 0x26de9665170 <col:57, col:62> col:62 used mask 'limb':'int'
| `-CompoundStmt 0x26de9665950 <line:1143:1, line:1149:1>
|   |-DeclStmt 0x26de96653a8 <line:1144:5, col:15>
|   | `-VarDecl 0x26de9665340 <col:5, col:14> col:14 used i 'unsigned int'
|   `-ForStmt 0x26de9665918 <line:1145:5, line:1148:5>
|     |-BinaryOperator 0x26de9665438 <line:1145:10, col:14> 'unsigned int' '='
|     | |-DeclRefExpr 0x26de96653c0 <col:10> 'unsigned int' lvalue Var 0x26de9665340 'i' 'unsigned int'
|     | `-ImplicitCastExpr 0x26de9665420 <col:14> 'unsigned int' <IntegralCast>
|     |   `-IntegerLiteral 0x26de96653f8 <col:14> 'int' 0
|     |-<<<NULL>>>
|     |-BinaryOperator 0x26de96654d0 <col:17, line:128:17> 'int' '<'
|     | |-ImplicitCastExpr 0x26de96654a0 <line:1145:17> 'unsigned int' <LValueToRValue>
|     | | `-DeclRefExpr 0x26de9665458 <col:17> 'unsigned int' lvalue Var 0x26de9665340 'i' 'unsigned int'
|     | `-ImplicitCastExpr 0x26de96654b8 <line:128:17> 'unsigned int' <IntegralCast>
|     |   `-IntegerLiteral 0x26de9665478 <col:17> 'int' 9
|     |-UnaryOperator 0x26de9665510 <line:1145:29, col:31> 'unsigned int' prefix '++'
|     | `-DeclRefExpr 0x26de96654f0 <col:31> 'unsigned int' lvalue Var 0x26de9665340 'i' 'unsigned int'
|     `-CompoundStmt 0x26de96658f8 <col:34, line:1148:5>
|       |-DeclStmt 0x26de9665788 <line:1146:9, col:49>
|       | `-VarDecl 0x26de9665538 <col:9, col:48> col:20 used tmp 'const limb':'const int' cinit
|       |   `-BinaryOperator 0x26de9665768 <col:26, col:48> 'int' '&'
|       |     |-ImplicitCastExpr 0x26de9665750 <col:26> 'limb':'int' <LValueToRValue>
|       |     | `-DeclRefExpr 0x26de96655a0 <col:26> 'limb':'int' lvalue ParmVar 0x26de9665170 'mask' 'limb':'int'
|       |     `-ParenExpr 0x26de9665730 <col:33, col:48> 'int'
|       |       `-BinaryOperator 0x26de9665710 <col:34, col:47> 'int' '^'
|       |         |-ImplicitCastExpr 0x26de96656e0 <col:34, col:38> 'limb':'int' <LValueToRValue>
|       |         | `-ArraySubscriptExpr 0x26de9665630 <col:34, col:38> 'const limb':'const int' lvalue
|       |         |   |-ImplicitCastExpr 0x26de9665600 <col:34> 'const limb *':'const limb *' <LValueToRValue>
|       |         |   | `-DeclRefExpr 0x26de96655c0 <col:34> 'const limb *':'const limb *' lvalue ParmVar 0x26de96650f8 'in' 'const limb *':'const limb *'
|       |         |   `-ImplicitCastExpr 0x26de9665618 <col:37> 'unsigned int' <LValueToRValue>
|       |         |     `-DeclRefExpr 0x26de96655e0 <col:37> 'unsigned int' lvalue Var 0x26de9665340 'i' 'unsigned int'
|       |         `-ImplicitCastExpr 0x26de96656f8 <col:42, col:47> 'limb':'int' <LValueToRValue>
|       |           `-ArraySubscriptExpr 0x26de96656c0 <col:42, col:47> 'limb':'int' lvalue
|       |             |-ImplicitCastExpr 0x26de9665690 <col:42> 'limb *':'limb *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x26de9665650 <col:42> 'limb *':'limb *' lvalue ParmVar 0x26de9665080 'out' 'limb *':'limb *'
|       |             `-ImplicitCastExpr 0x26de96656a8 <col:46> 'unsigned int' <LValueToRValue>
|       |               `-DeclRefExpr 0x26de9665670 <col:46> 'unsigned int' lvalue Var 0x26de9665340 'i' 'unsigned int'
|       `-CompoundAssignOperator 0x26de9665880 <line:1147:9, col:19> 'limb':'int' '^=' ComputeLHSTy='int' ComputeResultTy='int'
|         |-ArraySubscriptExpr 0x26de9665810 <col:9, col:14> 'limb':'int' lvalue
|         | |-ImplicitCastExpr 0x26de96657e0 <col:9> 'limb *':'limb *' <LValueToRValue>
|         | | `-DeclRefExpr 0x26de96657a0 <col:9> 'limb *':'limb *' lvalue ParmVar 0x26de9665080 'out' 'limb *':'limb *'
|         | `-ImplicitCastExpr 0x26de96657f8 <col:13> 'unsigned int' <LValueToRValue>
|         |   `-DeclRefExpr 0x26de96657c0 <col:13> 'unsigned int' lvalue Var 0x26de9665340 'i' 'unsigned int'
|         `-ImplicitCastExpr 0x26de9665868 <col:19> 'limb':'int' <LValueToRValue>
|           `-DeclRefExpr 0x26de9665830 <col:19> 'const limb':'const int' lvalue Var 0x26de9665538 'tmp' 'const limb':'const int'
|-FunctionDecl 0x26de9674158 <line:1162:1, line:1315:1> line:1162:13 used point_add 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const limb *, const limb *, const limb *)' static
| |-ParmVarDecl 0x26de9665980 <col:23, col:29> col:29 used x3 'limb *':'limb *'
| |-ParmVarDecl 0x26de96659f8 <col:33, col:39> col:39 used y3 'limb *':'limb *'
| |-ParmVarDecl 0x26de9665a70 <col:43, col:49> col:49 used z3 'limb *':'limb *'
| |-ParmVarDecl 0x26de9665ae8 <line:1163:23, col:35> col:35 used x1 'const limb *':'const limb *'
| |-ParmVarDecl 0x26de9665b60 <col:39, col:51> col:51 used y1 'const limb *':'const limb *'
| |-ParmVarDecl 0x26de9665bd8 <col:55, col:67> col:67 used z1 'const limb *':'const limb *'
| |-ParmVarDecl 0x26de9665c58 <line:1164:23, col:33> col:33 used mixed 'const int'
| |-ParmVarDecl 0x26de9665cd0 <col:40, col:52> col:52 used x2 'const limb *':'const limb *'
| |-ParmVarDecl 0x26de9665d48 <col:56, col:68> col:68 used y2 'const limb *':'const limb *'
| |-ParmVarDecl 0x26de9673e90 <line:1165:23, col:35> col:35 used z2 'const limb *':'const limb *'
| `-CompoundStmt 0x26de9678ee0 <line:1166:1, line:1315:1>
|   |-DeclStmt 0x26de96746e8 <line:1167:5, col:71>
|   | |-VarDecl 0x26de9674270 <col:5, col:11> col:11 used ftmp 'felem':'limb [9]'
|   | |-VarDecl 0x26de96742e8 <col:5, col:17> col:17 used ftmp2 'felem':'limb [9]'
|   | |-VarDecl 0x26de9674360 <col:5, col:24> col:24 used ftmp3 'felem':'limb [9]'
|   | |-VarDecl 0x26de96743d8 <col:5, col:31> col:31 used ftmp4 'felem':'limb [9]'
|   | |-VarDecl 0x26de9674450 <col:5, col:38> col:38 used ftmp5 'felem':'limb [9]'
|   | |-VarDecl 0x26de96744c8 <col:5, col:45> col:45 used ftmp6 'felem':'limb [9]'
|   | |-VarDecl 0x26de9674540 <col:5, col:52> col:52 used x_out 'felem':'limb [9]'
|   | |-VarDecl 0x26de96745b8 <col:5, col:59> col:59 used y_out 'felem':'limb [9]'
|   | `-VarDecl 0x26de9674630 <col:5, col:66> col:66 used z_out 'felem':'limb [9]'
|   |-DeclStmt 0x26de9674808 <line:1168:5, col:25>
|   | |-VarDecl 0x26de9674710 <col:5, col:16> col:16 used tmp 'largefelem':'int [9]'
|   | `-VarDecl 0x26de9674788 <col:5, col:21> col:21 used tmp2 'largefelem':'int [9]'
|   |-DeclStmt 0x26de9674a28 <line:1169:5, col:50>
|   | |-VarDecl 0x26de9674830 <col:5, col:10> col:10 used x_equal 'limb':'int'
|   | |-VarDecl 0x26de96748a8 <col:5, col:19> col:19 used y_equal 'limb':'int'
|   | |-VarDecl 0x26de9674920 <col:5, col:28> col:28 used z1_is_zero 'limb':'int'
|   | `-VarDecl 0x26de9674998 <col:5, col:40> col:40 used z2_is_zero 'limb':'int'
|   |-BinaryOperator 0x26de9674b10 <line:1171:5, col:34> 'limb':'int' '='
|   | |-DeclRefExpr 0x26de9674a40 <col:5> 'limb':'int' lvalue Var 0x26de9674920 'z1_is_zero' 'limb':'int'
|   | `-CallExpr 0x26de9674ad0 <col:18, col:34> 'limb':'int'
|   |   |-ImplicitCastExpr 0x26de9674ab8 <col:18> 'limb (*)(const limb *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x26de9674a78 <col:18> 'limb (const limb *)' Function 0x26de966adc8 'felem_is_zero' 'limb (const limb *)'
|   |   `-ImplicitCastExpr 0x26de9674af8 <col:32> 'const limb *':'const limb *' <LValueToRValue>
|   |     `-DeclRefExpr 0x26de9674a98 <col:32> 'const limb *':'const limb *' lvalue ParmVar 0x26de9665bd8 'z1' 'const limb *':'const limb *'
|   |-BinaryOperator 0x26de9674c00 <line:1172:5, col:34> 'limb':'int' '='
|   | |-DeclRefExpr 0x26de9674b30 <col:5> 'limb':'int' lvalue Var 0x26de9674998 'z2_is_zero' 'limb':'int'
|   | `-CallExpr 0x26de9674bc0 <col:18, col:34> 'limb':'int'
|   |   |-ImplicitCastExpr 0x26de9674ba8 <col:18> 'limb (*)(const limb *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x26de9674b68 <col:18> 'limb (const limb *)' Function 0x26de966adc8 'felem_is_zero' 'limb (const limb *)'
|   |   `-ImplicitCastExpr 0x26de9674be8 <col:32> 'const limb *':'const limb *' <LValueToRValue>
|   |     `-DeclRefExpr 0x26de9674b88 <col:32> 'const limb *':'const limb *' lvalue ParmVar 0x26de9673e90 'z2' 'const limb *':'const limb *'
|   |-CallExpr 0x26de9674cb0 <line:1175:5, col:25> 'void'
|   | |-ImplicitCastExpr 0x26de9674c98 <col:5> 'void (*)(int *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de9674c20 <col:5> 'void (int *, const limb *)' Function 0x26de959e190 'felem_square' 'void (int *, const limb *)'
|   | |-ImplicitCastExpr 0x26de9674ce0 <col:18> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de9674c40 <col:18> 'largefelem':'int [9]' lvalue Var 0x26de9674710 'tmp' 'largefelem':'int [9]'
|   | `-ImplicitCastExpr 0x26de9674cf8 <col:23> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x26de9674c78 <col:23> 'const limb *':'const limb *' lvalue ParmVar 0x26de9665bd8 'z1' 'const limb *':'const limb *'
|   |-CallExpr 0x26de9674da0 <line:1176:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x26de9674d88 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de9674d10 <col:5> 'void (limb *, const int *)' Function 0x26de95a3de8 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x26de9674dd0 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de9674d30 <col:18> 'felem':'limb [9]' lvalue Var 0x26de9674270 'ftmp' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x26de9674e00 <col:24> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de9674de8 <col:24> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x26de9674d68 <col:24> 'largefelem':'int [9]' lvalue Var 0x26de9674710 'tmp' 'largefelem':'int [9]'
|   |-IfStmt 0x26de9675fd0 <line:1178:5, line:1221:5> has_else
|   | |-UnaryOperator 0x26de9674e50 <line:1178:9, col:10> 'int' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x26de9674e38 <col:10> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x26de9674e18 <col:10> 'const int' lvalue ParmVar 0x26de9665c58 'mixed' 'const int'
|   | |-CompoundStmt 0x26de9675c60 <col:17, line:1208:5>
|   | | |-CallExpr 0x26de9674ee0 <line:1180:9, col:29> 'void'
|   | | | |-ImplicitCastExpr 0x26de9674ec8 <col:9> 'void (*)(int *, const limb *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x26de9674e68 <col:9> 'void (int *, const limb *)' Function 0x26de959e190 'felem_square' 'void (int *, const limb *)'
|   | | | |-ImplicitCastExpr 0x26de9674f10 <col:22> 'int *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x26de9674e88 <col:22> 'largefelem':'int [9]' lvalue Var 0x26de9674710 'tmp' 'largefelem':'int [9]'
|   | | | `-ImplicitCastExpr 0x26de9674f28 <col:27> 'const limb *':'const limb *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x26de9674ea8 <col:27> 'const limb *':'const limb *' lvalue ParmVar 0x26de9673e90 'z2' 'const limb *':'const limb *'
|   | | |-CallExpr 0x26de9674fd0 <line:1181:9, col:32> 'void'
|   | | | |-ImplicitCastExpr 0x26de9674fb8 <col:9> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x26de9674f40 <col:9> 'void (limb *, const int *)' Function 0x26de95a3de8 'felem_reduce' 'void (limb *, const int *)'
|   | | | |-ImplicitCastExpr 0x26de9675000 <col:22> 'limb *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x26de9674f60 <col:22> 'felem':'limb [9]' lvalue Var 0x26de96742e8 'ftmp2' 'felem':'limb [9]'
|   | | | `-ImplicitCastExpr 0x26de9675030 <col:29> 'const int *':'const int *' <NoOp>
|   | | |   `-ImplicitCastExpr 0x26de9675018 <col:29> 'int *' <ArrayToPointerDecay>
|   | | |     `-DeclRefExpr 0x26de9674f98 <col:29> 'largefelem':'int [9]' lvalue Var 0x26de9674710 'tmp' 'largefelem':'int [9]'
|   | | |-CallExpr 0x26de96750e0 <line:1184:9, col:33> 'void'
|   | | | |-ImplicitCastExpr 0x26de96750c8 <col:9> 'void (*)(int *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x26de9675048 <col:9> 'void (int *, const limb *, const limb *)' Function 0x26de95a07c8 'felem_mul' 'void (int *, const limb *, const limb *)'
|   | | | |-ImplicitCastExpr 0x26de9675118 <col:19> 'int *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x26de9675068 <col:19> 'largefelem':'int [9]' lvalue Var 0x26de9674710 'tmp' 'largefelem':'int [9]'
|   | | | |-ImplicitCastExpr 0x26de9675130 <col:24> 'const limb *':'const limb *' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x26de9675088 <col:24> 'const limb *':'const limb *' lvalue ParmVar 0x26de9665ae8 'x1' 'const limb *':'const limb *'
|   | | | `-ImplicitCastExpr 0x26de9675160 <col:28> 'const limb *':'const limb *' <NoOp>
|   | | |   `-ImplicitCastExpr 0x26de9675148 <col:28> 'limb *' <ArrayToPointerDecay>
|   | | |     `-DeclRefExpr 0x26de96750a8 <col:28> 'felem':'limb [9]' lvalue Var 0x26de96742e8 'ftmp2' 'felem':'limb [9]'
|   | | |-CallExpr 0x26de9675208 <line:1185:9, col:32> 'void'
|   | | | |-ImplicitCastExpr 0x26de96751f0 <col:9> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x26de9675178 <col:9> 'void (limb *, const int *)' Function 0x26de95a3de8 'felem_reduce' 'void (limb *, const int *)'
|   | | | |-ImplicitCastExpr 0x26de9675238 <col:22> 'limb *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x26de9675198 <col:22> 'felem':'limb [9]' lvalue Var 0x26de9674360 'ftmp3' 'felem':'limb [9]'
|   | | | `-ImplicitCastExpr 0x26de9675268 <col:29> 'const int *':'const int *' <NoOp>
|   | | |   `-ImplicitCastExpr 0x26de9675250 <col:29> 'int *' <ArrayToPointerDecay>
|   | | |     `-DeclRefExpr 0x26de96751d0 <col:29> 'largefelem':'int [9]' lvalue Var 0x26de9674710 'tmp' 'largefelem':'int [9]'
|   | | |-CallExpr 0x26de9675310 <line:1188:9, col:31> 'void'
|   | | | |-ImplicitCastExpr 0x26de96752f8 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x26de9675280 <col:9> 'void (limb *, const limb *)' Function 0x26de9594bb8 'felem_assign' 'void (limb *, const limb *)'
|   | | | |-ImplicitCastExpr 0x26de9675340 <col:22> 'limb *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x26de96752a0 <col:22> 'felem':'limb [9]' lvalue Var 0x26de9674450 'ftmp5' 'felem':'limb [9]'
|   | | | `-ImplicitCastExpr 0x26de9675358 <col:29> 'const limb *':'const limb *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x26de96752d8 <col:29> 'const limb *':'const limb *' lvalue ParmVar 0x26de9665bd8 'z1' 'const limb *':'const limb *'
|   | | |-CallExpr 0x26de96753e8 <line:1189:9, col:30> 'void'
|   | | | |-ImplicitCastExpr 0x26de96753d0 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x26de9675370 <col:9> 'void (limb *, const limb *)' Function 0x26de9595930 'felem_sum64' 'void (limb *, const limb *)'
|   | | | |-ImplicitCastExpr 0x26de9675418 <col:21> 'limb *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x26de9675390 <col:21> 'felem':'limb [9]' lvalue Var 0x26de9674450 'ftmp5' 'felem':'limb [9]'
|   | | | `-ImplicitCastExpr 0x26de9675430 <col:28> 'const limb *':'const limb *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x26de96753b0 <col:28> 'const limb *':'const limb *' lvalue ParmVar 0x26de9673e90 'z2' 'const limb *':'const limb *'
|   | | |-CallExpr 0x26de96754c0 <line:1193:9, col:32> 'void'
|   | | | |-ImplicitCastExpr 0x26de96754a8 <col:9> 'void (*)(int *, const limb *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x26de9675448 <col:9> 'void (int *, const limb *)' Function 0x26de959e190 'felem_square' 'void (int *, const limb *)'
|   | | | |-ImplicitCastExpr 0x26de96754f0 <col:22> 'int *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x26de9675468 <col:22> 'largefelem':'int [9]' lvalue Var 0x26de9674710 'tmp' 'largefelem':'int [9]'
|   | | | `-ImplicitCastExpr 0x26de9675520 <col:27> 'const limb *':'const limb *' <NoOp>
|   | | |   `-ImplicitCastExpr 0x26de9675508 <col:27> 'limb *' <ArrayToPointerDecay>
|   | | |     `-DeclRefExpr 0x26de9675488 <col:27> 'felem':'limb [9]' lvalue Var 0x26de9674450 'ftmp5' 'felem':'limb [9]'
|   | | |-CallExpr 0x26de96755b0 <line:1195:9, col:36> 'void'
|   | | | |-ImplicitCastExpr 0x26de9675598 <col:9> 'void (*)(int *, const limb *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x26de9675538 <col:9> 'void (int *, const limb *)' Function 0x26de959bce8 'felem_diff_128_64' 'void (int *, const limb *)'
|   | | | |-ImplicitCastExpr 0x26de96755e0 <col:27> 'int *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x26de9675558 <col:27> 'largefelem':'int [9]' lvalue Var 0x26de9674710 'tmp' 'largefelem':'int [9]'
|   | | | `-ImplicitCastExpr 0x26de9675610 <col:32> 'const limb *':'const limb *' <NoOp>
|   | | |   `-ImplicitCastExpr 0x26de96755f8 <col:32> 'limb *' <ArrayToPointerDecay>
|   | | |     `-DeclRefExpr 0x26de9675578 <col:32> 'felem':'limb [9]' lvalue Var 0x26de9674270 'ftmp' 'felem':'limb [9]'
|   | | |-CallExpr 0x26de96756a0 <line:1197:9, col:37> 'void'
|   | | | |-ImplicitCastExpr 0x26de9675688 <col:9> 'void (*)(int *, const limb *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x26de9675628 <col:9> 'void (int *, const limb *)' Function 0x26de959bce8 'felem_diff_128_64' 'void (int *, const limb *)'
|   | | | |-ImplicitCastExpr 0x26de96756d0 <col:27> 'int *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x26de9675648 <col:27> 'largefelem':'int [9]' lvalue Var 0x26de9674710 'tmp' 'largefelem':'int [9]'
|   | | | `-ImplicitCastExpr 0x26de9675700 <col:32> 'const limb *':'const limb *' <NoOp>
|   | | |   `-ImplicitCastExpr 0x26de96756e8 <col:32> 'limb *' <ArrayToPointerDecay>
|   | | |     `-DeclRefExpr 0x26de9675668 <col:32> 'felem':'limb [9]' lvalue Var 0x26de96742e8 'ftmp2' 'felem':'limb [9]'
|   | | |-CallExpr 0x26de9675790 <line:1199:9, col:32> 'void'
|   | | | |-ImplicitCastExpr 0x26de9675778 <col:9> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x26de9675718 <col:9> 'void (limb *, const int *)' Function 0x26de95a3de8 'felem_reduce' 'void (limb *, const int *)'
|   | | | |-ImplicitCastExpr 0x26de96757c0 <col:22> 'limb *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x26de9675738 <col:22> 'felem':'limb [9]' lvalue Var 0x26de9674450 'ftmp5' 'felem':'limb [9]'
|   | | | `-ImplicitCastExpr 0x26de96757f0 <col:29> 'const int *':'const int *' <NoOp>
|   | | |   `-ImplicitCastExpr 0x26de96757d8 <col:29> 'int *' <ArrayToPointerDecay>
|   | | |     `-DeclRefExpr 0x26de9675758 <col:29> 'largefelem':'int [9]' lvalue Var 0x26de9674710 'tmp' 'largefelem':'int [9]'
|   | | |-CallExpr 0x26de96758a0 <line:1202:9, col:33> 'void'
|   | | | |-ImplicitCastExpr 0x26de9675888 <col:9> 'void (*)(int *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x26de9675808 <col:9> 'void (int *, const limb *, const limb *)' Function 0x26de95a07c8 'felem_mul' 'void (int *, const limb *, const limb *)'
|   | | | |-ImplicitCastExpr 0x26de96758d8 <col:19> 'int *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x26de9675828 <col:19> 'largefelem':'int [9]' lvalue Var 0x26de9674710 'tmp' 'largefelem':'int [9]'
|   | | | |-ImplicitCastExpr 0x26de9675908 <col:24> 'const limb *':'const limb *' <NoOp>
|   | | | | `-ImplicitCastExpr 0x26de96758f0 <col:24> 'limb *' <ArrayToPointerDecay>
|   | | | |   `-DeclRefExpr 0x26de9675848 <col:24> 'felem':'limb [9]' lvalue Var 0x26de96742e8 'ftmp2' 'felem':'limb [9]'
|   | | | `-ImplicitCastExpr 0x26de9675920 <col:31> 'const limb *':'const limb *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x26de9675868 <col:31> 'const limb *':'const limb *' lvalue ParmVar 0x26de9673e90 'z2' 'const limb *':'const limb *'
|   | | |-CallExpr 0x26de96759b0 <line:1203:9, col:32> 'void'
|   | | | |-ImplicitCastExpr 0x26de9675998 <col:9> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x26de9675938 <col:9> 'void (limb *, const int *)' Function 0x26de95a3de8 'felem_reduce' 'void (limb *, const int *)'
|   | | | |-ImplicitCastExpr 0x26de96759e0 <col:22> 'limb *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x26de9675958 <col:22> 'felem':'limb [9]' lvalue Var 0x26de96742e8 'ftmp2' 'felem':'limb [9]'
|   | | | `-ImplicitCastExpr 0x26de9675a10 <col:29> 'const int *':'const int *' <NoOp>
|   | | |   `-ImplicitCastExpr 0x26de96759f8 <col:29> 'int *' <ArrayToPointerDecay>
|   | | |     `-DeclRefExpr 0x26de9675978 <col:29> 'largefelem':'int [9]' lvalue Var 0x26de9674710 'tmp' 'largefelem':'int [9]'
|   | | |-CallExpr 0x26de9675ac0 <line:1206:9, col:33> 'void'
|   | | | |-ImplicitCastExpr 0x26de9675aa8 <col:9> 'void (*)(int *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x26de9675a28 <col:9> 'void (int *, const limb *, const limb *)' Function 0x26de95a07c8 'felem_mul' 'void (int *, const limb *, const limb *)'
|   | | | |-ImplicitCastExpr 0x26de9675af8 <col:19> 'int *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x26de9675a48 <col:19> 'largefelem':'int [9]' lvalue Var 0x26de9674710 'tmp' 'largefelem':'int [9]'
|   | | | |-ImplicitCastExpr 0x26de9675b10 <col:24> 'const limb *':'const limb *' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x26de9675a68 <col:24> 'const limb *':'const limb *' lvalue ParmVar 0x26de9665b60 'y1' 'const limb *':'const limb *'
|   | | | `-ImplicitCastExpr 0x26de9675b40 <col:28> 'const limb *':'const limb *' <NoOp>
|   | | |   `-ImplicitCastExpr 0x26de9675b28 <col:28> 'limb *' <ArrayToPointerDecay>
|   | | |     `-DeclRefExpr 0x26de9675a88 <col:28> 'felem':'limb [9]' lvalue Var 0x26de96742e8 'ftmp2' 'felem':'limb [9]'
|   | | `-CallExpr 0x26de9675be8 <line:1207:9, col:32> 'void'
|   | |   |-ImplicitCastExpr 0x26de9675bd0 <col:9> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x26de9675b58 <col:9> 'void (limb *, const int *)' Function 0x26de95a3de8 'felem_reduce' 'void (limb *, const int *)'
|   | |   |-ImplicitCastExpr 0x26de9675c18 <col:22> 'limb *' <ArrayToPointerDecay>
|   | |   | `-DeclRefExpr 0x26de9675b78 <col:22> 'felem':'limb [9]' lvalue Var 0x26de96744c8 'ftmp6' 'felem':'limb [9]'
|   | |   `-ImplicitCastExpr 0x26de9675c48 <col:29> 'const int *':'const int *' <NoOp>
|   | |     `-ImplicitCastExpr 0x26de9675c30 <col:29> 'int *' <ArrayToPointerDecay>
|   | |       `-DeclRefExpr 0x26de9675bb0 <col:29> 'largefelem':'int [9]' lvalue Var 0x26de9674710 'tmp' 'largefelem':'int [9]'
|   | `-CompoundStmt 0x26de9675fa8 <line:1208:12, line:1221:5>
|   |   |-CallExpr 0x26de9675d58 <line:1214:9, col:31> 'void'
|   |   | |-ImplicitCastExpr 0x26de9675d40 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x26de9675ce0 <col:9> 'void (limb *, const limb *)' Function 0x26de9594bb8 'felem_assign' 'void (limb *, const limb *)'
|   |   | |-ImplicitCastExpr 0x26de9675d88 <col:22> 'limb *' <ArrayToPointerDecay>
|   |   | | `-DeclRefExpr 0x26de9675d00 <col:22> 'felem':'limb [9]' lvalue Var 0x26de9674360 'ftmp3' 'felem':'limb [9]'
|   |   | `-ImplicitCastExpr 0x26de9675da0 <col:29> 'const limb *':'const limb *' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x26de9675d20 <col:29> 'const limb *':'const limb *' lvalue ParmVar 0x26de9665ae8 'x1' 'const limb *':'const limb *'
|   |   |-CallExpr 0x26de9675e58 <line:1217:9, col:34> 'void'
|   |   | |-ImplicitCastExpr 0x26de9675e40 <col:9> 'void (*)(limb *, const limb *, limb)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x26de9675db8 <col:9> 'void (limb *, const limb *, limb)' Function 0x26de9596848 'felem_scalar' 'void (limb *, const limb *, limb)'
|   |   | |-ImplicitCastExpr 0x26de9675ea0 <col:22> 'limb *' <ArrayToPointerDecay>
|   |   | | `-DeclRefExpr 0x26de9675dd8 <col:22> 'felem':'limb [9]' lvalue Var 0x26de9674450 'ftmp5' 'felem':'limb [9]'
|   |   | |-ImplicitCastExpr 0x26de9675eb8 <col:29> 'const limb *':'const limb *' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x26de9675df8 <col:29> 'const limb *':'const limb *' lvalue ParmVar 0x26de9665bd8 'z1' 'const limb *':'const limb *'
|   |   | `-IntegerLiteral 0x26de9675e18 <col:33> 'int' 2
|   |   `-CallExpr 0x26de9675f48 <line:1220:9, col:31> 'void'
|   |     |-ImplicitCastExpr 0x26de9675f30 <col:9> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x26de9675ed0 <col:9> 'void (limb *, const limb *)' Function 0x26de9594bb8 'felem_assign' 'void (limb *, const limb *)'
|   |     |-ImplicitCastExpr 0x26de9675f78 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     | `-DeclRefExpr 0x26de9675ef0 <col:22> 'felem':'limb [9]' lvalue Var 0x26de96744c8 'ftmp6' 'felem':'limb [9]'
|   |     `-ImplicitCastExpr 0x26de9675f90 <col:29> 'const limb *':'const limb *' <LValueToRValue>
|   |       `-DeclRefExpr 0x26de9675f10 <col:29> 'const limb *':'const limb *' lvalue ParmVar 0x26de9665b60 'y1' 'const limb *':'const limb *'
|   |-CallExpr 0x26de9676090 <line:1224:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x26de9676078 <col:5> 'void (*)(int *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de9675ff8 <col:5> 'void (int *, const limb *, const limb *)' Function 0x26de95a07c8 'felem_mul' 'void (int *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x26de96760c8 <col:15> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de9676018 <col:15> 'largefelem':'int [9]' lvalue Var 0x26de9674710 'tmp' 'largefelem':'int [9]'
|   | |-ImplicitCastExpr 0x26de96760e0 <col:20> 'const limb *':'const limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x26de9676038 <col:20> 'const limb *':'const limb *' lvalue ParmVar 0x26de9665cd0 'x2' 'const limb *':'const limb *'
|   | `-ImplicitCastExpr 0x26de9676110 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de96760f8 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x26de9676058 <col:24> 'felem':'limb [9]' lvalue Var 0x26de9674270 'ftmp' 'felem':'limb [9]'
|   |-CallExpr 0x26de96761a0 <line:1228:5, col:33> 'void'
|   | |-ImplicitCastExpr 0x26de9676188 <col:5> 'void (*)(int *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de9676128 <col:5> 'void (int *, const limb *)' Function 0x26de959bce8 'felem_diff_128_64' 'void (int *, const limb *)'
|   | |-ImplicitCastExpr 0x26de96761d0 <col:23> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de9676148 <col:23> 'largefelem':'int [9]' lvalue Var 0x26de9674710 'tmp' 'largefelem':'int [9]'
|   | `-ImplicitCastExpr 0x26de9676200 <col:28> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de96761e8 <col:28> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x26de9676168 <col:28> 'felem':'limb [9]' lvalue Var 0x26de9674360 'ftmp3' 'felem':'limb [9]'
|   |-CallExpr 0x26de96762a8 <line:1230:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x26de9676290 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de9676218 <col:5> 'void (limb *, const int *)' Function 0x26de95a3de8 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x26de96762d8 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de9676238 <col:18> 'felem':'limb [9]' lvalue Var 0x26de96743d8 'ftmp4' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x26de9676308 <col:25> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de96762f0 <col:25> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x26de9676270 <col:25> 'largefelem':'int [9]' lvalue Var 0x26de9674710 'tmp' 'largefelem':'int [9]'
|   |-BinaryOperator 0x26de9676408 <line:1232:5, col:34> 'limb':'int' '='
|   | |-DeclRefExpr 0x26de9676320 <col:5> 'limb':'int' lvalue Var 0x26de9674830 'x_equal' 'limb':'int'
|   | `-CallExpr 0x26de96763b0 <col:15, col:34> 'limb':'int'
|   |   |-ImplicitCastExpr 0x26de9676398 <col:15> 'limb (*)(const limb *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x26de9676358 <col:15> 'limb (const limb *)' Function 0x26de966adc8 'felem_is_zero' 'limb (const limb *)'
|   |   `-ImplicitCastExpr 0x26de96763f0 <col:29> 'const limb *':'const limb *' <NoOp>
|   |     `-ImplicitCastExpr 0x26de96763d8 <col:29> 'limb *' <ArrayToPointerDecay>
|   |       `-DeclRefExpr 0x26de9676378 <col:29> 'felem':'limb [9]' lvalue Var 0x26de96743d8 'ftmp4' 'felem':'limb [9]'
|   |-CallExpr 0x26de96764c0 <line:1235:5, col:32> 'void'
|   | |-ImplicitCastExpr 0x26de96764a8 <col:5> 'void (*)(int *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de9676428 <col:5> 'void (int *, const limb *, const limb *)' Function 0x26de95a07c8 'felem_mul' 'void (int *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x26de96764f8 <col:15> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de9676448 <col:15> 'largefelem':'int [9]' lvalue Var 0x26de9674710 'tmp' 'largefelem':'int [9]'
|   | |-ImplicitCastExpr 0x26de9676528 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x26de9676510 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x26de9676468 <col:20> 'felem':'limb [9]' lvalue Var 0x26de9674450 'ftmp5' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x26de9676558 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de9676540 <col:27> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x26de9676488 <col:27> 'felem':'limb [9]' lvalue Var 0x26de96743d8 'ftmp4' 'felem':'limb [9]'
|   |-CallExpr 0x26de9676600 <line:1236:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x26de96765e8 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de9676570 <col:5> 'void (limb *, const int *)' Function 0x26de95a3de8 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x26de9676630 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de9676590 <col:18> 'felem':'limb [9]' lvalue Var 0x26de9674630 'z_out' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x26de9676660 <col:25> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de9676648 <col:25> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x26de96765c8 <col:25> 'largefelem':'int [9]' lvalue Var 0x26de9674710 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x26de9676710 <line:1239:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x26de96766f8 <col:5> 'void (*)(int *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de9676678 <col:5> 'void (int *, const limb *, const limb *)' Function 0x26de95a07c8 'felem_mul' 'void (int *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x26de9676748 <col:15> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de9676698 <col:15> 'largefelem':'int [9]' lvalue Var 0x26de9674710 'tmp' 'largefelem':'int [9]'
|   | |-ImplicitCastExpr 0x26de9676778 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x26de9676760 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x26de96766b8 <col:20> 'felem':'limb [9]' lvalue Var 0x26de9674270 'ftmp' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x26de9676790 <col:26> 'const limb *':'const limb *' <LValueToRValue>
|   |   `-DeclRefExpr 0x26de96766d8 <col:26> 'const limb *':'const limb *' lvalue ParmVar 0x26de9665bd8 'z1' 'const limb *':'const limb *'
|   |-CallExpr 0x26de9676820 <line:1240:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x26de9676808 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de96767a8 <col:5> 'void (limb *, const int *)' Function 0x26de95a3de8 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x26de9676850 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de96767c8 <col:18> 'felem':'limb [9]' lvalue Var 0x26de9674270 'ftmp' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x26de9676880 <col:24> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de9676868 <col:24> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x26de96767e8 <col:24> 'largefelem':'int [9]' lvalue Var 0x26de9674710 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x26de9676930 <line:1243:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x26de9676918 <col:5> 'void (*)(int *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de9676898 <col:5> 'void (int *, const limb *, const limb *)' Function 0x26de95a07c8 'felem_mul' 'void (int *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x26de9676968 <col:15> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de96768b8 <col:15> 'largefelem':'int [9]' lvalue Var 0x26de9674710 'tmp' 'largefelem':'int [9]'
|   | |-ImplicitCastExpr 0x26de9676980 <col:20> 'const limb *':'const limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x26de96768d8 <col:20> 'const limb *':'const limb *' lvalue ParmVar 0x26de9665d48 'y2' 'const limb *':'const limb *'
|   | `-ImplicitCastExpr 0x26de96769b0 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de9676998 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x26de96768f8 <col:24> 'felem':'limb [9]' lvalue Var 0x26de9674270 'ftmp' 'felem':'limb [9]'
|   |-CallExpr 0x26de9676a40 <line:1247:5, col:33> 'void'
|   | |-ImplicitCastExpr 0x26de9676a28 <col:5> 'void (*)(int *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de96769c8 <col:5> 'void (int *, const limb *)' Function 0x26de959bce8 'felem_diff_128_64' 'void (int *, const limb *)'
|   | |-ImplicitCastExpr 0x26de9676a70 <col:23> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de96769e8 <col:23> 'largefelem':'int [9]' lvalue Var 0x26de9674710 'tmp' 'largefelem':'int [9]'
|   | `-ImplicitCastExpr 0x26de9676aa0 <col:28> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de9676a88 <col:28> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x26de9676a08 <col:28> 'felem':'limb [9]' lvalue Var 0x26de96744c8 'ftmp6' 'felem':'limb [9]'
|   |-CallExpr 0x26de9676b30 <line:1249:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x26de9676b18 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de9676ab8 <col:5> 'void (limb *, const int *)' Function 0x26de95a3de8 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x26de9676b60 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de9676ad8 <col:18> 'felem':'limb [9]' lvalue Var 0x26de9674450 'ftmp5' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x26de9676b90 <col:25> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de9676b78 <col:25> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x26de9676af8 <col:25> 'largefelem':'int [9]' lvalue Var 0x26de9674710 'tmp' 'largefelem':'int [9]'
|   |-BinaryOperator 0x26de9676c90 <line:1250:5, col:34> 'limb':'int' '='
|   | |-DeclRefExpr 0x26de9676ba8 <col:5> 'limb':'int' lvalue Var 0x26de96748a8 'y_equal' 'limb':'int'
|   | `-CallExpr 0x26de9676c38 <col:15, col:34> 'limb':'int'
|   |   |-ImplicitCastExpr 0x26de9676c20 <col:15> 'limb (*)(const limb *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x26de9676be0 <col:15> 'limb (const limb *)' Function 0x26de966adc8 'felem_is_zero' 'limb (const limb *)'
|   |   `-ImplicitCastExpr 0x26de9676c78 <col:29> 'const limb *':'const limb *' <NoOp>
|   |     `-ImplicitCastExpr 0x26de9676c60 <col:29> 'limb *' <ArrayToPointerDecay>
|   |       `-DeclRefExpr 0x26de9676c00 <col:29> 'felem':'limb [9]' lvalue Var 0x26de9674450 'ftmp5' 'felem':'limb [9]'
|   |-CallExpr 0x26de9676d30 <line:1251:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x26de9676d18 <col:5> 'void (*)(limb *, limb)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de9676cb0 <col:5> 'void (limb *, limb)' Function 0x26de9597978 'felem_scalar64' 'void (limb *, limb)'
|   | |-ImplicitCastExpr 0x26de9676d60 <col:20> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de9676cd0 <col:20> 'felem':'limb [9]' lvalue Var 0x26de9674450 'ftmp5' 'felem':'limb [9]'
|   | `-IntegerLiteral 0x26de9676cf0 <col:27> 'int' 2
|   |-IfStmt 0x26de9677150 <line:1254:5, line:1257:5>
|   | |-BinaryOperator 0x26de9676ec8 <line:1254:9, col:47> 'int' '&&'
|   | | |-BinaryOperator 0x26de9676e58 <col:9, col:32> 'int' '&&'
|   | | | |-BinaryOperator 0x26de9676de8 <col:9, col:20> 'int' '&&'
|   | | | | |-ImplicitCastExpr 0x26de9676db8 <col:9> 'limb':'int' <LValueToRValue>
|   | | | | | `-DeclRefExpr 0x26de9676d78 <col:9> 'limb':'int' lvalue Var 0x26de9674830 'x_equal' 'limb':'int'
|   | | | | `-ImplicitCastExpr 0x26de9676dd0 <col:20> 'limb':'int' <LValueToRValue>
|   | | | |   `-DeclRefExpr 0x26de9676d98 <col:20> 'limb':'int' lvalue Var 0x26de96748a8 'y_equal' 'limb':'int'
|   | | | `-UnaryOperator 0x26de9676e40 <col:31, col:32> 'int' prefix '!' cannot overflow
|   | | |   `-ImplicitCastExpr 0x26de9676e28 <col:32> 'limb':'int' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x26de9676e08 <col:32> 'limb':'int' lvalue Var 0x26de9674920 'z1_is_zero' 'limb':'int'
|   | | `-UnaryOperator 0x26de9676eb0 <col:46, col:47> 'int' prefix '!' cannot overflow
|   | |   `-ImplicitCastExpr 0x26de9676e98 <col:47> 'limb':'int' <LValueToRValue>
|   | |     `-DeclRefExpr 0x26de9676e78 <col:47> 'limb':'int' lvalue Var 0x26de9674998 'z2_is_zero' 'limb':'int'
|   | `-CompoundStmt 0x26de9677130 <col:59, line:1257:5>
|   |   |-CallExpr 0x26de9677040 <line:1255:9, col:44> 'void'
|   |   | |-ImplicitCastExpr 0x26de9677028 <col:9> 'void (*)(limb *, limb *, limb *, const limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x26de9676ee8 <col:9> 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *)' Function 0x26de9672c48 'point_double' 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *)'
|   |   | |-ImplicitCastExpr 0x26de9677090 <col:22> 'limb *':'limb *' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x26de9676f08 <col:22> 'limb *':'limb *' lvalue ParmVar 0x26de9665980 'x3' 'limb *':'limb *'
|   |   | |-ImplicitCastExpr 0x26de96770a8 <col:26> 'limb *':'limb *' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x26de9676f28 <col:26> 'limb *':'limb *' lvalue ParmVar 0x26de96659f8 'y3' 'limb *':'limb *'
|   |   | |-ImplicitCastExpr 0x26de96770c0 <col:30> 'limb *':'limb *' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x26de9676f48 <col:30> 'limb *':'limb *' lvalue ParmVar 0x26de9665a70 'z3' 'limb *':'limb *'
|   |   | |-ImplicitCastExpr 0x26de96770d8 <col:34> 'const limb *':'const limb *' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x26de9676f68 <col:34> 'const limb *':'const limb *' lvalue ParmVar 0x26de9665ae8 'x1' 'const limb *':'const limb *'
|   |   | |-ImplicitCastExpr 0x26de96770f0 <col:38> 'const limb *':'const limb *' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x26de9676f88 <col:38> 'const limb *':'const limb *' lvalue ParmVar 0x26de9665b60 'y1' 'const limb *':'const limb *'
|   |   | `-ImplicitCastExpr 0x26de9677108 <col:42> 'const limb *':'const limb *' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x26de9676fa8 <col:42> 'const limb *':'const limb *' lvalue ParmVar 0x26de9665bd8 'z1' 'const limb *':'const limb *'
|   |   `-ReturnStmt 0x26de9677120 <line:1256:9>
|   |-CallExpr 0x26de96771e0 <line:1260:5, col:29> 'void'
|   | |-ImplicitCastExpr 0x26de96771c8 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de9677168 <col:5> 'void (limb *, const limb *)' Function 0x26de9594bb8 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x26de9677210 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de9677188 <col:18> 'felem':'limb [9]' lvalue Var 0x26de9674270 'ftmp' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x26de9677240 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de9677228 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x26de96771a8 <col:24> 'felem':'limb [9]' lvalue Var 0x26de96743d8 'ftmp4' 'felem':'limb [9]'
|   |-CallExpr 0x26de96772d8 <line:1261:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x26de96772c0 <col:5> 'void (*)(limb *, limb)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de9677258 <col:5> 'void (limb *, limb)' Function 0x26de9597978 'felem_scalar64' 'void (limb *, limb)'
|   | |-ImplicitCastExpr 0x26de9677308 <col:20> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de9677278 <col:20> 'felem':'limb [9]' lvalue Var 0x26de9674270 'ftmp' 'felem':'limb [9]'
|   | `-IntegerLiteral 0x26de9677298 <col:26> 'int' 2
|   |-CallExpr 0x26de9677398 <line:1263:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x26de9677380 <col:5> 'void (*)(int *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de9677320 <col:5> 'void (int *, const limb *)' Function 0x26de959e190 'felem_square' 'void (int *, const limb *)'
|   | |-ImplicitCastExpr 0x26de96773c8 <col:18> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de9677340 <col:18> 'largefelem':'int [9]' lvalue Var 0x26de9674710 'tmp' 'largefelem':'int [9]'
|   | `-ImplicitCastExpr 0x26de96773f8 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de96773e0 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x26de9677360 <col:23> 'felem':'limb [9]' lvalue Var 0x26de9674270 'ftmp' 'felem':'limb [9]'
|   |-CallExpr 0x26de9677488 <line:1265:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x26de9677470 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de9677410 <col:5> 'void (limb *, const int *)' Function 0x26de95a3de8 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x26de96774b8 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de9677430 <col:18> 'felem':'limb [9]' lvalue Var 0x26de9674270 'ftmp' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x26de96774e8 <col:24> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de96774d0 <col:24> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x26de9677450 <col:24> 'largefelem':'int [9]' lvalue Var 0x26de9674710 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x26de9677598 <line:1268:5, col:31> 'void'
|   | |-ImplicitCastExpr 0x26de9677580 <col:5> 'void (*)(int *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de9677500 <col:5> 'void (int *, const limb *, const limb *)' Function 0x26de95a07c8 'felem_mul' 'void (int *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x26de96775d0 <col:15> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de9677520 <col:15> 'largefelem':'int [9]' lvalue Var 0x26de9674710 'tmp' 'largefelem':'int [9]'
|   | |-ImplicitCastExpr 0x26de9677600 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x26de96775e8 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x26de9677540 <col:20> 'felem':'limb [9]' lvalue Var 0x26de96743d8 'ftmp4' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x26de9677630 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de9677618 <col:27> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x26de9677560 <col:27> 'felem':'limb [9]' lvalue Var 0x26de9674270 'ftmp' 'felem':'limb [9]'
|   |-CallExpr 0x26de96776c0 <line:1269:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x26de96776a8 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de9677648 <col:5> 'void (limb *, const int *)' Function 0x26de95a3de8 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x26de96776f0 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de9677668 <col:18> 'felem':'limb [9]' lvalue Var 0x26de96742e8 'ftmp2' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x26de9677720 <col:25> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de9677708 <col:25> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x26de9677688 <col:25> 'largefelem':'int [9]' lvalue Var 0x26de9674710 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x26de96777d0 <line:1272:5, col:31> 'void'
|   | |-ImplicitCastExpr 0x26de96777b8 <col:5> 'void (*)(int *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de9677738 <col:5> 'void (int *, const limb *, const limb *)' Function 0x26de95a07c8 'felem_mul' 'void (int *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x26de9677808 <col:15> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de9677758 <col:15> 'largefelem':'int [9]' lvalue Var 0x26de9674710 'tmp' 'largefelem':'int [9]'
|   | |-ImplicitCastExpr 0x26de9677838 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x26de9677820 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x26de9677778 <col:20> 'felem':'limb [9]' lvalue Var 0x26de9674360 'ftmp3' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x26de9677868 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de9677850 <col:27> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x26de9677798 <col:27> 'felem':'limb [9]' lvalue Var 0x26de9674270 'ftmp' 'felem':'limb [9]'
|   |-CallExpr 0x26de96778f8 <line:1273:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x26de96778e0 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de9677880 <col:5> 'void (limb *, const int *)' Function 0x26de95a3de8 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x26de9677928 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de96778a0 <col:18> 'felem':'limb [9]' lvalue Var 0x26de96743d8 'ftmp4' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x26de9677958 <col:25> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de9677940 <col:25> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x26de96778c0 <col:25> 'largefelem':'int [9]' lvalue Var 0x26de9674710 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x26de96779e8 <line:1276:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x26de96779d0 <col:5> 'void (*)(int *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de9677970 <col:5> 'void (int *, const limb *)' Function 0x26de959e190 'felem_square' 'void (int *, const limb *)'
|   | |-ImplicitCastExpr 0x26de9677a18 <col:18> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de9677990 <col:18> 'largefelem':'int [9]' lvalue Var 0x26de9674710 'tmp' 'largefelem':'int [9]'
|   | `-ImplicitCastExpr 0x26de9677a48 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de9677a30 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x26de96779b0 <col:23> 'felem':'limb [9]' lvalue Var 0x26de9674450 'ftmp5' 'felem':'limb [9]'
|   |-CallExpr 0x26de9677ad8 <line:1278:5, col:33> 'void'
|   | |-ImplicitCastExpr 0x26de9677ac0 <col:5> 'void (*)(int *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de9677a60 <col:5> 'void (int *, const limb *)' Function 0x26de959bce8 'felem_diff_128_64' 'void (int *, const limb *)'
|   | |-ImplicitCastExpr 0x26de9677b08 <col:23> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de9677a80 <col:23> 'largefelem':'int [9]' lvalue Var 0x26de9674710 'tmp' 'largefelem':'int [9]'
|   | `-ImplicitCastExpr 0x26de9677b38 <col:28> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de9677b20 <col:28> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x26de9677aa0 <col:28> 'felem':'limb [9]' lvalue Var 0x26de96742e8 'ftmp2' 'felem':'limb [9]'
|   |-CallExpr 0x26de9677bc8 <line:1280:5, col:30> 'void'
|   | |-ImplicitCastExpr 0x26de9677bb0 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de9677b50 <col:5> 'void (limb *, const limb *)' Function 0x26de9594bb8 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x26de9677bf8 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de9677b70 <col:18> 'felem':'limb [9]' lvalue Var 0x26de9674360 'ftmp3' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x26de9677c28 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de9677c10 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x26de9677b90 <col:25> 'felem':'limb [9]' lvalue Var 0x26de96743d8 'ftmp4' 'felem':'limb [9]'
|   |-CallExpr 0x26de9677cc0 <line:1281:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x26de9677ca8 <col:5> 'void (*)(limb *, limb)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de9677c40 <col:5> 'void (limb *, limb)' Function 0x26de9597978 'felem_scalar64' 'void (limb *, limb)'
|   | |-ImplicitCastExpr 0x26de9677cf0 <col:20> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de9677c60 <col:20> 'felem':'limb [9]' lvalue Var 0x26de96743d8 'ftmp4' 'felem':'limb [9]'
|   | `-IntegerLiteral 0x26de9677c80 <col:27> 'int' 2
|   |-CallExpr 0x26de9677d80 <line:1283:5, col:33> 'void'
|   | |-ImplicitCastExpr 0x26de9677d68 <col:5> 'void (*)(int *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de9677d08 <col:5> 'void (int *, const limb *)' Function 0x26de959bce8 'felem_diff_128_64' 'void (int *, const limb *)'
|   | |-ImplicitCastExpr 0x26de9677db0 <col:23> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de9677d28 <col:23> 'largefelem':'int [9]' lvalue Var 0x26de9674710 'tmp' 'largefelem':'int [9]'
|   | `-ImplicitCastExpr 0x26de9677de0 <col:28> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de9677dc8 <col:28> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x26de9677d48 <col:28> 'felem':'limb [9]' lvalue Var 0x26de96743d8 'ftmp4' 'felem':'limb [9]'
|   |-CallExpr 0x26de9677eb0 <line:1285:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x26de9677e70 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de9677df8 <col:5> 'void (limb *, const int *)' Function 0x26de95a3de8 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x26de9677ee0 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de9677e18 <col:18> 'felem':'limb [9]' lvalue Var 0x26de9674540 'x_out' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x26de9677f10 <col:25> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de9677ef8 <col:25> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x26de9677e50 <col:25> 'largefelem':'int [9]' lvalue Var 0x26de9674710 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x26de9677fa0 <line:1288:5, col:30> 'void'
|   | |-ImplicitCastExpr 0x26de9677f88 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de9677f28 <col:5> 'void (limb *, const limb *)' Function 0x26de959a5b0 'felem_diff64' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x26de9677fd0 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de9677f48 <col:18> 'felem':'limb [9]' lvalue Var 0x26de9674360 'ftmp3' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x26de9678000 <col:25> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de9677fe8 <col:25> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x26de9677f68 <col:25> 'felem':'limb [9]' lvalue Var 0x26de9674540 'x_out' 'felem':'limb [9]'
|   |-CallExpr 0x26de96780b0 <line:1292:5, col:32> 'void'
|   | |-ImplicitCastExpr 0x26de9678098 <col:5> 'void (*)(int *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de9678018 <col:5> 'void (int *, const limb *, const limb *)' Function 0x26de95a07c8 'felem_mul' 'void (int *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x26de96780e8 <col:15> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de9678038 <col:15> 'largefelem':'int [9]' lvalue Var 0x26de9674710 'tmp' 'largefelem':'int [9]'
|   | |-ImplicitCastExpr 0x26de9678118 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x26de9678100 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x26de9678058 <col:20> 'felem':'limb [9]' lvalue Var 0x26de9674450 'ftmp5' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x26de9678148 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de9678130 <col:27> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x26de9678078 <col:27> 'felem':'limb [9]' lvalue Var 0x26de9674360 'ftmp3' 'felem':'limb [9]'
|   |-CallExpr 0x26de9678210 <line:1294:5, col:33> 'void'
|   | |-ImplicitCastExpr 0x26de96781f8 <col:5> 'void (*)(int *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de9678160 <col:5> 'void (int *, const limb *, const limb *)' Function 0x26de95a07c8 'felem_mul' 'void (int *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x26de9678248 <col:15> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de9678180 <col:15> 'largefelem':'int [9]' lvalue Var 0x26de9674788 'tmp2' 'largefelem':'int [9]'
|   | |-ImplicitCastExpr 0x26de9678278 <col:21> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x26de9678260 <col:21> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x26de96781b8 <col:21> 'felem':'limb [9]' lvalue Var 0x26de96744c8 'ftmp6' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x26de96782a8 <col:28> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de9678290 <col:28> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x26de96781d8 <col:28> 'felem':'limb [9]' lvalue Var 0x26de96742e8 'ftmp2' 'felem':'limb [9]'
|   |-CallExpr 0x26de9678340 <line:1296:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x26de9678328 <col:5> 'void (*)(int *, limb)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de96782c0 <col:5> 'void (int *, limb)' Function 0x26de9598498 'felem_scalar128' 'void (int *, limb)'
|   | |-ImplicitCastExpr 0x26de9678370 <col:21> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de96782e0 <col:21> 'largefelem':'int [9]' lvalue Var 0x26de9674788 'tmp2' 'largefelem':'int [9]'
|   | `-IntegerLiteral 0x26de9678300 <col:27> 'int' 2
|   |-CallExpr 0x26de9678400 <line:1298:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x26de96783e8 <col:5> 'void (*)(int *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de9678388 <col:5> 'void (int *, const int *)' Function 0x26de959d488 'felem_diff128' 'void (int *, const int *)'
|   | |-ImplicitCastExpr 0x26de9678430 <col:19> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de96783a8 <col:19> 'largefelem':'int [9]' lvalue Var 0x26de9674710 'tmp' 'largefelem':'int [9]'
|   | `-ImplicitCastExpr 0x26de9678460 <col:24> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de9678448 <col:24> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x26de96783c8 <col:24> 'largefelem':'int [9]' lvalue Var 0x26de9674788 'tmp2' 'largefelem':'int [9]'
|   |-CallExpr 0x26de9678508 <line:1304:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x26de96784f0 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de9678478 <col:5> 'void (limb *, const int *)' Function 0x26de95a3de8 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x26de9678538 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de9678498 <col:18> 'felem':'limb [9]' lvalue Var 0x26de96745b8 'y_out' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x26de9678568 <col:25> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de9678550 <col:25> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x26de96784d0 <col:25> 'largefelem':'int [9]' lvalue Var 0x26de9674710 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x26de9678618 <line:1306:5, col:43> 'void'
|   | |-ImplicitCastExpr 0x26de9678600 <col:5> 'void (*)(limb *, const limb *, limb)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de9678580 <col:5> 'void (limb *, const limb *, limb)' Function 0x26de9665258 'copy_conditional' 'void (limb *, const limb *, limb)'
|   | |-ImplicitCastExpr 0x26de9678650 <col:22> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de96785a0 <col:22> 'felem':'limb [9]' lvalue Var 0x26de9674540 'x_out' 'felem':'limb [9]'
|   | |-ImplicitCastExpr 0x26de9678668 <col:29> 'const limb *':'const limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x26de96785c0 <col:29> 'const limb *':'const limb *' lvalue ParmVar 0x26de9665cd0 'x2' 'const limb *':'const limb *'
|   | `-ImplicitCastExpr 0x26de9678680 <col:33> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x26de96785e0 <col:33> 'limb':'int' lvalue Var 0x26de9674920 'z1_is_zero' 'limb':'int'
|   |-CallExpr 0x26de9678730 <line:1307:5, col:43> 'void'
|   | |-ImplicitCastExpr 0x26de9678718 <col:5> 'void (*)(limb *, const limb *, limb)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de9678698 <col:5> 'void (limb *, const limb *, limb)' Function 0x26de9665258 'copy_conditional' 'void (limb *, const limb *, limb)'
|   | |-ImplicitCastExpr 0x26de9678768 <col:22> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de96786b8 <col:22> 'felem':'limb [9]' lvalue Var 0x26de9674540 'x_out' 'felem':'limb [9]'
|   | |-ImplicitCastExpr 0x26de9678780 <col:29> 'const limb *':'const limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x26de96786d8 <col:29> 'const limb *':'const limb *' lvalue ParmVar 0x26de9665ae8 'x1' 'const limb *':'const limb *'
|   | `-ImplicitCastExpr 0x26de9678798 <col:33> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x26de96786f8 <col:33> 'limb':'int' lvalue Var 0x26de9674998 'z2_is_zero' 'limb':'int'
|   |-CallExpr 0x26de9678848 <line:1308:5, col:43> 'void'
|   | |-ImplicitCastExpr 0x26de9678830 <col:5> 'void (*)(limb *, const limb *, limb)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de96787b0 <col:5> 'void (limb *, const limb *, limb)' Function 0x26de9665258 'copy_conditional' 'void (limb *, const limb *, limb)'
|   | |-ImplicitCastExpr 0x26de9678880 <col:22> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de96787d0 <col:22> 'felem':'limb [9]' lvalue Var 0x26de96745b8 'y_out' 'felem':'limb [9]'
|   | |-ImplicitCastExpr 0x26de9678898 <col:29> 'const limb *':'const limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x26de96787f0 <col:29> 'const limb *':'const limb *' lvalue ParmVar 0x26de9665d48 'y2' 'const limb *':'const limb *'
|   | `-ImplicitCastExpr 0x26de96788b0 <col:33> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x26de9678810 <col:33> 'limb':'int' lvalue Var 0x26de9674920 'z1_is_zero' 'limb':'int'
|   |-CallExpr 0x26de9678960 <line:1309:5, col:43> 'void'
|   | |-ImplicitCastExpr 0x26de9678948 <col:5> 'void (*)(limb *, const limb *, limb)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de96788c8 <col:5> 'void (limb *, const limb *, limb)' Function 0x26de9665258 'copy_conditional' 'void (limb *, const limb *, limb)'
|   | |-ImplicitCastExpr 0x26de9678998 <col:22> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de96788e8 <col:22> 'felem':'limb [9]' lvalue Var 0x26de96745b8 'y_out' 'felem':'limb [9]'
|   | |-ImplicitCastExpr 0x26de96789b0 <col:29> 'const limb *':'const limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x26de9678908 <col:29> 'const limb *':'const limb *' lvalue ParmVar 0x26de9665b60 'y1' 'const limb *':'const limb *'
|   | `-ImplicitCastExpr 0x26de96789c8 <col:33> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x26de9678928 <col:33> 'limb':'int' lvalue Var 0x26de9674998 'z2_is_zero' 'limb':'int'
|   |-CallExpr 0x26de9678a78 <line:1310:5, col:43> 'void'
|   | |-ImplicitCastExpr 0x26de9678a60 <col:5> 'void (*)(limb *, const limb *, limb)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de96789e0 <col:5> 'void (limb *, const limb *, limb)' Function 0x26de9665258 'copy_conditional' 'void (limb *, const limb *, limb)'
|   | |-ImplicitCastExpr 0x26de9678ab0 <col:22> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de9678a00 <col:22> 'felem':'limb [9]' lvalue Var 0x26de9674630 'z_out' 'felem':'limb [9]'
|   | |-ImplicitCastExpr 0x26de9678ac8 <col:29> 'const limb *':'const limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x26de9678a20 <col:29> 'const limb *':'const limb *' lvalue ParmVar 0x26de9673e90 'z2' 'const limb *':'const limb *'
|   | `-ImplicitCastExpr 0x26de9678ae0 <col:33> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x26de9678a40 <col:33> 'limb':'int' lvalue Var 0x26de9674920 'z1_is_zero' 'limb':'int'
|   |-CallExpr 0x26de9678b90 <line:1311:5, col:43> 'void'
|   | |-ImplicitCastExpr 0x26de9678b78 <col:5> 'void (*)(limb *, const limb *, limb)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de9678af8 <col:5> 'void (limb *, const limb *, limb)' Function 0x26de9665258 'copy_conditional' 'void (limb *, const limb *, limb)'
|   | |-ImplicitCastExpr 0x26de9678bc8 <col:22> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de9678b18 <col:22> 'felem':'limb [9]' lvalue Var 0x26de9674630 'z_out' 'felem':'limb [9]'
|   | |-ImplicitCastExpr 0x26de9678be0 <col:29> 'const limb *':'const limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x26de9678b38 <col:29> 'const limb *':'const limb *' lvalue ParmVar 0x26de9665bd8 'z1' 'const limb *':'const limb *'
|   | `-ImplicitCastExpr 0x26de9678bf8 <col:33> 'limb':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x26de9678b58 <col:33> 'limb':'int' lvalue Var 0x26de9674998 'z2_is_zero' 'limb':'int'
|   |-CallExpr 0x26de9678c88 <line:1312:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x26de9678c70 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de9678c10 <col:5> 'void (limb *, const limb *)' Function 0x26de9594bb8 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x26de9678cb8 <col:18> 'limb *':'limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x26de9678c30 <col:18> 'limb *':'limb *' lvalue ParmVar 0x26de9665980 'x3' 'limb *':'limb *'
|   | `-ImplicitCastExpr 0x26de9678ce8 <col:22> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de9678cd0 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x26de9678c50 <col:22> 'felem':'limb [9]' lvalue Var 0x26de9674540 'x_out' 'felem':'limb [9]'
|   |-CallExpr 0x26de9678d78 <line:1313:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x26de9678d60 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de9678d00 <col:5> 'void (limb *, const limb *)' Function 0x26de9594bb8 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x26de9678da8 <col:18> 'limb *':'limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x26de9678d20 <col:18> 'limb *':'limb *' lvalue ParmVar 0x26de96659f8 'y3' 'limb *':'limb *'
|   | `-ImplicitCastExpr 0x26de9678dd8 <col:22> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de9678dc0 <col:22> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x26de9678d40 <col:22> 'felem':'limb [9]' lvalue Var 0x26de96745b8 'y_out' 'felem':'limb [9]'
|   `-CallExpr 0x26de9678e68 <line:1314:5, col:27> 'void'
|     |-ImplicitCastExpr 0x26de9678e50 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x26de9678df0 <col:5> 'void (limb *, const limb *)' Function 0x26de9594bb8 'felem_assign' 'void (limb *, const limb *)'
|     |-ImplicitCastExpr 0x26de9678e98 <col:18> 'limb *':'limb *' <LValueToRValue>
|     | `-DeclRefExpr 0x26de9678e10 <col:18> 'limb *':'limb *' lvalue ParmVar 0x26de9665a70 'z3' 'limb *':'limb *'
|     `-ImplicitCastExpr 0x26de9678ec8 <col:22> 'const limb *':'const limb *' <NoOp>
|       `-ImplicitCastExpr 0x26de9678eb0 <col:22> 'limb *' <ArrayToPointerDecay>
|         `-DeclRefExpr 0x26de9678e30 <col:22> 'felem':'limb [9]' lvalue Var 0x26de9674630 'z_out' 'felem':'limb [9]'
|-VarDecl 0x26de9679228 <line:1352:1, line:1461:1> line:1352:20 used gmul 'const felem [16][3]' static cinit
| `-InitListExpr 0x26de974c7a8 <col:34, line:1461:1> 'const felem [16][3]'
|   |-InitListExpr 0x26de974c898 <line:1353:1, line:1355:29> 'const felem [3]'
|   | |-InitListExpr 0x26de974c900 <line:1353:2, col:28> 'const felem':'limb const[9]'
|   | | |-IntegerLiteral 0x26de9679290 <col:3> 'int' 0
|   | | |-IntegerLiteral 0x26de96792b8 <col:6> 'int' 0
|   | | |-IntegerLiteral 0x26de96792e0 <col:9> 'int' 0
|   | | |-IntegerLiteral 0x26de9679308 <col:12> 'int' 0
|   | | |-IntegerLiteral 0x26de9679330 <col:15> 'int' 0
|   | | |-IntegerLiteral 0x26de9679358 <col:18> 'int' 0
|   | | |-IntegerLiteral 0x26de9679380 <col:21> 'int' 0
|   | | |-IntegerLiteral 0x26de96793a8 <col:24> 'int' 0
|   | | `-IntegerLiteral 0x26de96793d0 <col:27> 'int' 0
|   | |-InitListExpr 0x26de974c998 <line:1354:2, col:28> 'const felem':'limb const[9]'
|   | | |-IntegerLiteral 0x26de9679480 <col:3> 'int' 0
|   | | |-IntegerLiteral 0x26de96794a8 <col:6> 'int' 0
|   | | |-IntegerLiteral 0x26de96794d0 <col:9> 'int' 0
|   | | |-IntegerLiteral 0x26de96794f8 <col:12> 'int' 0
|   | | |-IntegerLiteral 0x26de9679520 <col:15> 'int' 0
|   | | |-IntegerLiteral 0x26de9679548 <col:18> 'int' 0
|   | | |-IntegerLiteral 0x26de9679570 <col:21> 'int' 0
|   | | |-IntegerLiteral 0x26de9679598 <col:24> 'int' 0
|   | | `-IntegerLiteral 0x26de96795c0 <col:27> 'int' 0
|   | `-InitListExpr 0x26de974ca30 <line:1355:2, col:28> 'const felem':'limb const[9]'
|   |   |-IntegerLiteral 0x26de9679670 <col:3> 'int' 0
|   |   |-IntegerLiteral 0x26de9679698 <col:6> 'int' 0
|   |   |-IntegerLiteral 0x26de96796c0 <col:9> 'int' 0
|   |   |-IntegerLiteral 0x26de96796e8 <col:12> 'int' 0
|   |   |-IntegerLiteral 0x26de9679710 <col:15> 'int' 0
|   |   |-IntegerLiteral 0x26de9679738 <col:18> 'int' 0
|   |   |-IntegerLiteral 0x26de9679760 <col:21> 'int' 0
|   |   |-IntegerLiteral 0x26de9679788 <col:24> 'int' 0
|   |   `-IntegerLiteral 0x26de96797b0 <col:27> 'int' 0
|   |-InitListExpr 0x26de974cae8 <line:1356:1, line:1362:29> 'const felem [3]'
|   | |-InitListExpr 0x26de974cb50 <line:1356:2, line:1358:61> 'const felem':'limb const[9]'
|   | | |-ImplicitCastExpr 0x26de974cbd8 <line:1356:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de96798b8 <col:3> 'long long' 107662193291804006
|   | | |-ImplicitCastExpr 0x26de974cbf0 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de96798e0 <col:23> 'long long' 156764387973048062
|   | | |-ImplicitCastExpr 0x26de974cc08 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de9679908 <col:43> 'long long' 5200896066446132
|   | | |-ImplicitCastExpr 0x26de974cc20 <line:1357:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de9679930 <col:3> 'long long' 135037196563642487
|   | | |-ImplicitCastExpr 0x26de974cc38 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de9679958 <col:23> 'long long' 30202750027516766
|   | | |-ImplicitCastExpr 0x26de974cc50 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de9679980 <col:43> 'long long' 94555012806093784
|   | | |-ImplicitCastExpr 0x26de974cc68 <line:1358:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de96799a8 <col:3> 'long long' 97746763129557904
|   | | |-ImplicitCastExpr 0x26de974cc80 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de96799d0 <col:23> 'long long' 263238996462508174
|   | | `-ImplicitCastExpr 0x26de974cc98 <col:43> 'limb':'int' <IntegralCast>
|   | |   `-IntegerLiteral 0x26de96799f8 <col:43> 'long long' 55878890433217540
|   | |-InitListExpr 0x26de974ccc0 <line:1359:2, line:1361:61> 'const felem':'limb const[9]'
|   | | |-ImplicitCastExpr 0x26de9740d18 <line:1359:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de9679aa8 <col:3> 'long long' 53643482783376976
|   | | |-ImplicitCastExpr 0x26de9740d30 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de9679ad0 <col:23> 'long long' 224091089528721442
|   | | |-ImplicitCastExpr 0x26de9740d48 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de9679af8 <col:43> 'long long' 256727146720269139
|   | | |-ImplicitCastExpr 0x26de9740d60 <line:1360:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de9679b20 <col:3> 'long long' 172680296574162242
|   | | |-ImplicitCastExpr 0x26de9740d78 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de9679b48 <col:23> 'long long' 227218914761240178
|   | | |-ImplicitCastExpr 0x26de9740d90 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de9679b70 <col:43> 'long long' 137026748380081989
|   | | |-ImplicitCastExpr 0x26de9740da8 <line:1361:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de9679b98 <col:3> 'long long' 275209519478621333
|   | | |-ImplicitCastExpr 0x26de9740dc0 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de9679bc0 <col:23> 'long long' 216191964133904561
|   | | `-ImplicitCastExpr 0x26de9740dd8 <col:43> 'limb':'int' <IntegralCast>
|   | |   `-IntegerLiteral 0x26de9679be8 <col:43> 'long long' 78875843521714747
|   | `-InitListExpr 0x26de9740e00 <line:1362:2, col:28> 'const felem':'limb const[9]'
|   |   |-IntegerLiteral 0x26de9679c98 <col:3> 'int' 1
|   |   |-IntegerLiteral 0x26de9679cc0 <col:6> 'int' 0
|   |   |-IntegerLiteral 0x26de9679ce8 <col:9> 'int' 0
|   |   |-IntegerLiteral 0x26de9679d10 <col:12> 'int' 0
|   |   |-IntegerLiteral 0x26de9679d38 <col:15> 'int' 0
|   |   |-IntegerLiteral 0x26de9679d60 <col:18> 'int' 0
|   |   |-IntegerLiteral 0x26de9679d88 <col:21> 'int' 0
|   |   |-IntegerLiteral 0x26de9679db0 <col:24> 'int' 0
|   |   `-IntegerLiteral 0x26de9679dd8 <col:27> 'int' 0
|   |-InitListExpr 0x26de9740eb8 <line:1363:1, line:1369:29> 'const felem [3]'
|   | |-InitListExpr 0x26de9740f20 <line:1363:2, line:1365:61> 'const felem':'limb const[9]'
|   | | |-ImplicitCastExpr 0x26de9740fa8 <line:1363:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de9679f18 <col:3> 'long long' 248818024239815598
|   | | |-ImplicitCastExpr 0x26de9740fc0 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de9679f40 <col:23> 'long long' 68439110785812081
|   | | |-ImplicitCastExpr 0x26de9740fd8 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de9679f68 <col:43> 'long long' 69356082119435693
|   | | |-ImplicitCastExpr 0x26de9740ff0 <line:1364:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de9679f90 <col:3> 'long long' 118944220382269095
|   | | |-ImplicitCastExpr 0x26de9741008 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de9679fb8 <col:23> 'long long' 143109813876409467
|   | | |-ImplicitCastExpr 0x26de9741020 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de9679fe0 <col:43> 'long long' 269301167522018126
|   | | |-ImplicitCastExpr 0x26de9741038 <line:1365:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de967a008 <col:3> 'long long' 89759470938176146
|   | | |-ImplicitCastExpr 0x26de9741050 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de967a030 <col:23> 'long long' 185784475424510077
|   | | `-ImplicitCastExpr 0x26de9741068 <col:43> 'limb':'int' <IntegralCast>
|   | |   `-IntegerLiteral 0x26de967a058 <col:43> 'long long' 67432608270484965
|   | |-InitListExpr 0x26de9741090 <line:1366:2, line:1368:61> 'const felem':'limb const[9]'
|   | | |-ImplicitCastExpr 0x26de9741118 <line:1366:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de967a108 <col:3> 'long long' 76969611682492792
|   | | |-ImplicitCastExpr 0x26de9741130 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de967a130 <col:23> 'long long' 164834918331809094
|   | | |-ImplicitCastExpr 0x26de9741148 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de967a158 <col:43> 'long long' 242045298884155992
|   | | |-ImplicitCastExpr 0x26de9741160 <line:1367:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de967a180 <col:3> 'long long' 70238746073538723
|   | | |-ImplicitCastExpr 0x26de9741178 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de967a1a8 <col:23> 'long long' 72587413832712611
|   | | |-ImplicitCastExpr 0x26de9741190 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de967a1d0 <col:43> 'long long' 117657050261535340
|   | | |-ImplicitCastExpr 0x26de97411a8 <line:1368:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de967a1f8 <col:3> 'long long' 213926679015513749
|   | | |-ImplicitCastExpr 0x26de97411c0 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de967a220 <col:23> 'long long' 126075467209511292
|   | | `-ImplicitCastExpr 0x26de97411d8 <col:43> 'limb':'int' <IntegralCast>
|   | |   `-IntegerLiteral 0x26de967a248 <col:43> 'long long' 99087220106255799
|   | `-InitListExpr 0x26de9741200 <line:1369:2, col:28> 'const felem':'limb const[9]'
|   |   |-IntegerLiteral 0x26de967a2f8 <col:3> 'int' 1
|   |   |-IntegerLiteral 0x26de967a320 <col:6> 'int' 0
|   |   |-IntegerLiteral 0x26de967a348 <col:9> 'int' 0
|   |   |-IntegerLiteral 0x26de967a370 <col:12> 'int' 0
|   |   |-IntegerLiteral 0x26de967a398 <col:15> 'int' 0
|   |   |-IntegerLiteral 0x26de967a3c0 <col:18> 'int' 0
|   |   |-IntegerLiteral 0x26de967a3e8 <col:21> 'int' 0
|   |   |-IntegerLiteral 0x26de967a410 <col:24> 'int' 0
|   |   `-IntegerLiteral 0x26de967a438 <col:27> 'int' 0
|   |-InitListExpr 0x26de97412b8 <line:1370:1, line:1376:29> 'const felem [3]'
|   | |-InitListExpr 0x26de9741320 <line:1370:2, line:1372:61> 'const felem':'limb const[9]'
|   | | |-ImplicitCastExpr 0x26de97413a8 <line:1370:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de967a540 <col:3> 'long long' 85357026627631931
|   | | |-ImplicitCastExpr 0x26de97413c0 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de967a568 <col:23> 'long long' 275799397262170618
|   | | |-ImplicitCastExpr 0x26de97413d8 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de967a590 <col:43> 'long long' 193031651880102003
|   | | |-ImplicitCastExpr 0x26de97413f0 <line:1371:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de967a5b8 <col:3> 'long long' 59801716978586923
|   | | |-ImplicitCastExpr 0x26de9741408 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de967a5e0 <col:23> 'long long' 83964301881446114
|   | | |-ImplicitCastExpr 0x26de9741420 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de967a608 <col:43> 'long long' 22840256528202508
|   | | |-ImplicitCastExpr 0x26de9741438 <line:1372:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de967a630 <col:3> 'long long' 194081837314414388
|   | | |-ImplicitCastExpr 0x26de9741450 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de967a658 <col:23> 'long long' 222286351153865994
|   | | `-ImplicitCastExpr 0x26de9741468 <col:43> 'limb':'int' <IntegralCast>
|   | |   `-IntegerLiteral 0x26de967a680 <col:43> 'long long' 46355154457181625
|   | |-InitListExpr 0x26de9741490 <line:1373:2, line:1375:61> 'const felem':'limb const[9]'
|   | | |-ImplicitCastExpr 0x26de9741518 <line:1373:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de967a730 <col:3> 'long long' 5957637048075716
|   | | |-ImplicitCastExpr 0x26de9741530 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de967a758 <col:23> 'long long' 217369084467200750
|   | | |-ImplicitCastExpr 0x26de9741548 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de967a780 <col:43> 'long long' 28572585110612818
|   | | |-ImplicitCastExpr 0x26de9741560 <line:1374:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de967a7a8 <col:3> 'long long' 20635594340375821
|   | | |-ImplicitCastExpr 0x26de9741578 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de967a7d0 <col:23> 'long long' 45349996332084175
|   | | |-ImplicitCastExpr 0x26de9741590 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de967a7f8 <col:43> 'long long' 203498249684330542
|   | | |-ImplicitCastExpr 0x26de97415a8 <line:1375:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de967a820 <col:3> 'long long' 162628157059821241
|   | | |-ImplicitCastExpr 0x26de97415c0 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de967a848 <col:23> 'long long' 254051537796193181
|   | | `-ImplicitCastExpr 0x26de97415d8 <col:43> 'limb':'int' <IntegralCast>
|   | |   `-IntegerLiteral 0x26de967a870 <col:43> 'long long' 142008485808234430
|   | `-InitListExpr 0x26de9741600 <line:1376:2, col:28> 'const felem':'limb const[9]'
|   |   |-IntegerLiteral 0x26de967a920 <col:3> 'int' 1
|   |   |-IntegerLiteral 0x26de967a948 <col:6> 'int' 0
|   |   |-IntegerLiteral 0x26de967a970 <col:9> 'int' 0
|   |   |-IntegerLiteral 0x26de967a998 <col:12> 'int' 0
|   |   |-IntegerLiteral 0x26de967a9c0 <col:15> 'int' 0
|   |   |-IntegerLiteral 0x26de967a9e8 <col:18> 'int' 0
|   |   |-IntegerLiteral 0x26de967aa10 <col:21> 'int' 0
|   |   |-IntegerLiteral 0x26de967aa38 <col:24> 'int' 0
|   |   `-IntegerLiteral 0x26de967aa60 <col:27> 'int' 0
|   |-InitListExpr 0x26de97416b8 <line:1377:1, line:1383:29> 'const felem [3]'
|   | |-InitListExpr 0x26de9741720 <line:1377:2, line:1379:61> 'const felem':'limb const[9]'
|   | | |-ImplicitCastExpr 0x26de97417a8 <line:1377:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de967ab68 <col:3> 'long long' 115699669707084877
|   | | |-ImplicitCastExpr 0x26de97417c0 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de967ab90 <col:23> 'long long' 27658917167077339
|   | | |-ImplicitCastExpr 0x26de97417d8 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de967abb8 <col:43> 'long long' 211173019325442770
|   | | |-ImplicitCastExpr 0x26de97417f0 <line:1378:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de967abe0 <col:3> 'long long' 58508949711035917
|   | | |-ImplicitCastExpr 0x26de9741808 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de967ac08 <col:23> 'long long' 176133006176578449
|   | | |-ImplicitCastExpr 0x26de9741820 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de967ac30 <col:43> 'long long' 286004766719919457
|   | | |-ImplicitCastExpr 0x26de9741838 <line:1379:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de967ac58 <col:3> 'long long' 284694387565934236
|   | | |-ImplicitCastExpr 0x26de9741850 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de967ac80 <col:23> 'long long' 270764684126736341
|   | | `-ImplicitCastExpr 0x26de9741868 <col:43> 'limb':'int' <IntegralCast>
|   | |   `-IntegerLiteral 0x26de967aca8 <col:43> 'long long' 74608610647404645
|   | |-InitListExpr 0x26de9741890 <line:1380:2, line:1382:61> 'const felem':'limb const[9]'
|   | | |-ImplicitCastExpr 0x26de9741918 <line:1380:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de967ad58 <col:3> 'long long' 185427702470952429
|   | | |-ImplicitCastExpr 0x26de9741930 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de967ad80 <col:23> 'long long' 222643017731418220
|   | | |-ImplicitCastExpr 0x26de9741948 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de967ada8 <col:43> 'long long' 13522846395484314
|   | | |-ImplicitCastExpr 0x26de9741960 <line:1381:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de967add0 <col:3> 'long long' 186326058078407921
|   | | |-ImplicitCastExpr 0x26de9741978 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de967adf8 <col:23> 'long long' 198419528161705339
|   | | |-ImplicitCastExpr 0x26de9741990 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de967ae20 <col:43> 'long long' 100497259887215390
|   | | |-ImplicitCastExpr 0x26de97419a8 <line:1382:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de967ae48 <col:3> 'long long' 197206109416089806
|   | | |-ImplicitCastExpr 0x26de97419c0 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de967ae70 <col:23> 'long long' 25672027167771401
|   | | `-ImplicitCastExpr 0x26de97419d8 <col:43> 'limb':'int' <IntegralCast>
|   | |   `-IntegerLiteral 0x26de967ae98 <col:43> 'long long' 3406291878286628
|   | `-InitListExpr 0x26de9741a00 <line:1383:2, col:28> 'const felem':'limb const[9]'
|   |   |-IntegerLiteral 0x26de967af48 <col:3> 'int' 1
|   |   |-IntegerLiteral 0x26de967af70 <col:6> 'int' 0
|   |   |-IntegerLiteral 0x26de967af98 <col:9> 'int' 0
|   |   |-IntegerLiteral 0x26de967afc0 <col:12> 'int' 0
|   |   |-IntegerLiteral 0x26de967afe8 <col:15> 'int' 0
|   |   |-IntegerLiteral 0x26de967b010 <col:18> 'int' 0
|   |   |-IntegerLiteral 0x26de967b038 <col:21> 'int' 0
|   |   |-IntegerLiteral 0x26de967b060 <col:24> 'int' 0
|   |   `-IntegerLiteral 0x26de967b088 <col:27> 'int' 0
|   |-InitListExpr 0x26de9741ab8 <line:1384:1, line:1390:29> 'const felem [3]'
|   | |-InitListExpr 0x26de9741b20 <line:1384:2, line:1386:61> 'const felem':'limb const[9]'
|   | | |-ImplicitCastExpr 0x26de9741ba8 <line:1384:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de967b190 <col:3> 'long long' 182021676768147954
|   | | |-ImplicitCastExpr 0x26de9741bc0 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de967b1b8 <col:23> 'long long' 172930014546080759
|   | | |-ImplicitCastExpr 0x26de9741bd8 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de967b1e0 <col:43> 'long long' 138895075991037654
|   | | |-ImplicitCastExpr 0x26de9741bf0 <line:1385:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de967b208 <col:3> 'long long' 235934697641172243
|   | | |-ImplicitCastExpr 0x26de9741c08 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de967b230 <col:23> 'long long' 27730320196411543
|   | | |-ImplicitCastExpr 0x26de9741c20 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de967b258 <col:43> 'long long' 113022493050822225
|   | | |-ImplicitCastExpr 0x26de9741c38 <line:1386:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de967b280 <col:3> 'long long' 207878302801438681
|   | | |-ImplicitCastExpr 0x26de9741c50 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de967b2a8 <col:23> 'long long' 266313891404818042
|   | | `-ImplicitCastExpr 0x26de9741c68 <col:43> 'limb':'int' <IntegralCast>
|   | |   `-IntegerLiteral 0x26de967b2d0 <col:43> 'long long' 130891172683322366
|   | |-InitListExpr 0x26de9741c90 <line:1387:2, line:1389:61> 'const felem':'limb const[9]'
|   | | |-ImplicitCastExpr 0x26de9741d18 <line:1387:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de967b380 <col:3> 'long long' 41168026354574463
|   | | |-ImplicitCastExpr 0x26de9741d30 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de967b3a8 <col:23> 'long long' 33680513507247361
|   | | |-ImplicitCastExpr 0x26de9741d48 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de967b3d0 <col:43> 'long long' 269413084887956749
|   | | |-ImplicitCastExpr 0x26de9741d60 <line:1388:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de967b3f8 <col:3> 'long long' 242140931057620833
|   | | |-ImplicitCastExpr 0x26de9741d78 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de967b420 <col:23> 'long long' 128929932887871315
|   | | |-ImplicitCastExpr 0x26de9741d90 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de967b448 <col:43> 'long long' 48038932284854428
|   | | |-ImplicitCastExpr 0x26de9741da8 <line:1389:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de967b470 <col:3> 'long long' 111303443934034199
|   | | |-ImplicitCastExpr 0x26de9741dc0 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de967b498 <col:23> 'long long' 170023492048506113
|   | | `-ImplicitCastExpr 0x26de9741dd8 <col:43> 'limb':'int' <IntegralCast>
|   | |   `-IntegerLiteral 0x26de967b4c0 <col:43> 'long long' 143360740140998823
|   | `-InitListExpr 0x26de9741e00 <line:1390:2, col:28> 'const felem':'limb const[9]'
|   |   |-IntegerLiteral 0x26de967b570 <col:3> 'int' 1
|   |   |-IntegerLiteral 0x26de967b598 <col:6> 'int' 0
|   |   |-IntegerLiteral 0x26de967b5c0 <col:9> 'int' 0
|   |   |-IntegerLiteral 0x26de967b5e8 <col:12> 'int' 0
|   |   |-IntegerLiteral 0x26de967b610 <col:15> 'int' 0
|   |   |-IntegerLiteral 0x26de967b638 <col:18> 'int' 0
|   |   |-IntegerLiteral 0x26de967b660 <col:21> 'int' 0
|   |   |-IntegerLiteral 0x26de967b688 <col:24> 'int' 0
|   |   `-IntegerLiteral 0x26de967b6b0 <col:27> 'int' 0
|   |-InitListExpr 0x26de9741eb8 <line:1391:1, line:1397:29> 'const felem [3]'
|   | |-InitListExpr 0x26de9741f20 <line:1391:2, line:1393:61> 'const felem':'limb const[9]'
|   | | |-ImplicitCastExpr 0x26de9741fa8 <line:1391:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de967b7b8 <col:3> 'long long' 134425189601320381
|   | | |-ImplicitCastExpr 0x26de9741fc0 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de967b7e0 <col:23> 'long long' 260186432550402665
|   | | |-ImplicitCastExpr 0x26de9741fd8 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de967b808 <col:43> 'long long' 171678927283829543
|   | | |-ImplicitCastExpr 0x26de9741ff0 <line:1392:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de967b830 <col:3> 'long long' 252983222112544416
|   | | |-ImplicitCastExpr 0x26de9742008 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de967b858 <col:23> 'long long' 132305405591194105
|   | | |-ImplicitCastExpr 0x26de9742020 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de967b880 <col:43> 'long long' 270602171681501759
|   | | |-ImplicitCastExpr 0x26de9742038 <line:1393:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de967b8a8 <col:3> 'long long' 272296954479380013
|   | | |-ImplicitCastExpr 0x26de9742050 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de967b8d0 <col:23> 'long long' 104435921201057878
|   | | `-ImplicitCastExpr 0x26de9742068 <col:43> 'limb':'int' <IntegralCast>
|   | |   `-IntegerLiteral 0x26de967b8f8 <col:43> 'long long' 108657865336312406
|   | |-InitListExpr 0x26de9742090 <line:1394:2, line:1396:61> 'const felem':'limb const[9]'
|   | | |-ImplicitCastExpr 0x26de9742118 <line:1394:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de967b9a8 <col:3> 'long long' 114456331693404500
|   | | |-ImplicitCastExpr 0x26de9742130 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de967b9d0 <col:23> 'long long' 281139027592507440
|   | | |-ImplicitCastExpr 0x26de9742148 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de967b9f8 <col:43> 'long long' 62416162571593130
|   | | |-ImplicitCastExpr 0x26de9742160 <line:1395:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de967ba20 <col:3> 'long long' 83096845865136584
|   | | |-ImplicitCastExpr 0x26de9742178 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de967ba48 <col:23> 'long long' 66402651191401000
|   | | |-ImplicitCastExpr 0x26de9742190 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de967ba70 <col:43> 'long long' 165554388465669282
|   | | |-ImplicitCastExpr 0x26de97421a8 <line:1396:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de967ba98 <col:3> 'long long' 242878144236104974
|   | | |-ImplicitCastExpr 0x26de97421c0 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de967bac0 <col:23> 'long long' 11801559461345807
|   | | `-ImplicitCastExpr 0x26de97421d8 <col:43> 'limb':'int' <IntegralCast>
|   | |   `-IntegerLiteral 0x26de967bae8 <col:43> 'long long' 67258410132057789
|   | `-InitListExpr 0x26de9742200 <line:1397:2, col:28> 'const felem':'limb const[9]'
|   |   |-IntegerLiteral 0x26de967bb98 <col:3> 'int' 1
|   |   |-IntegerLiteral 0x26de967bbc0 <col:6> 'int' 0
|   |   |-IntegerLiteral 0x26de967bbe8 <col:9> 'int' 0
|   |   |-IntegerLiteral 0x26de967bc10 <col:12> 'int' 0
|   |   |-IntegerLiteral 0x26de967bc38 <col:15> 'int' 0
|   |   |-IntegerLiteral 0x26de967bc60 <col:18> 'int' 0
|   |   |-IntegerLiteral 0x26de967bc88 <col:21> 'int' 0
|   |   |-IntegerLiteral 0x26de967bcb0 <col:24> 'int' 0
|   |   `-IntegerLiteral 0x26de967bcd8 <col:27> 'int' 0
|   |-InitListExpr 0x26de97422b8 <line:1398:1, line:1404:29> 'const felem [3]'
|   | |-InitListExpr 0x26de9742320 <line:1398:2, line:1400:61> 'const felem':'limb const[9]'
|   | | |-ImplicitCastExpr 0x26de97423a8 <line:1398:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de967bde0 <col:3> 'long long' 54921445886212921
|   | | |-ImplicitCastExpr 0x26de97423c0 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de967be08 <col:23> 'long long' 264010728307327571
|   | | |-ImplicitCastExpr 0x26de97423d8 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de967be30 <col:43> 'long long' 48540398146488464
|   | | |-ImplicitCastExpr 0x26de97423f0 <line:1399:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de967be58 <col:3> 'long long' 38046474206052097
|   | | |-ImplicitCastExpr 0x26de9742408 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de967be80 <col:23> 'long long' 131018639621352187
|   | | |-ImplicitCastExpr 0x26de9742420 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de9742ce0 <col:43> 'long long' 269269057993736052
|   | | |-ImplicitCastExpr 0x26de9742438 <line:1400:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de9742d08 <col:3> 'long long' 171604831092059514
|   | | |-ImplicitCastExpr 0x26de9742450 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de9742d30 <col:23> 'long long' 226502319611390201
|   | | `-ImplicitCastExpr 0x26de9742468 <col:43> 'limb':'int' <IntegralCast>
|   | |   `-IntegerLiteral 0x26de9742d58 <col:43> 'long long' 40955853996707363
|   | |-InitListExpr 0x26de9742490 <line:1401:2, line:1403:61> 'const felem':'limb const[9]'
|   | | |-ImplicitCastExpr 0x26de9742518 <line:1401:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de9742e08 <col:3> 'long long' 228496940765560023
|   | | |-ImplicitCastExpr 0x26de9742530 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de9742e30 <col:23> 'long long' 60915004430338246
|   | | |-ImplicitCastExpr 0x26de9742548 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de9742e58 <col:43> 'long long' 101679219507860758
|   | | |-ImplicitCastExpr 0x26de9742560 <line:1402:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de9742e80 <col:3> 'long long' 83983612521646248
|   | | |-ImplicitCastExpr 0x26de9742578 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de9742ea8 <col:23> 'long long' 74425713252203235
|   | | |-ImplicitCastExpr 0x26de9742590 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de9742ed0 <col:43> 'long long' 40674977338158817
|   | | |-ImplicitCastExpr 0x26de97425a8 <line:1403:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de9742ef8 <col:3> 'long long' 232629268965117148
|   | | |-ImplicitCastExpr 0x26de97425c0 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de9742f20 <col:23> 'long long' 258202943948012181
|   | | `-ImplicitCastExpr 0x26de97425d8 <col:43> 'limb':'int' <IntegralCast>
|   | |   `-IntegerLiteral 0x26de9742f48 <col:43> 'long long' 82501075909064286
|   | `-InitListExpr 0x26de9742600 <line:1404:2, col:28> 'const felem':'limb const[9]'
|   |   |-IntegerLiteral 0x26de9742ff8 <col:3> 'int' 1
|   |   |-IntegerLiteral 0x26de9743020 <col:6> 'int' 0
|   |   |-IntegerLiteral 0x26de9743048 <col:9> 'int' 0
|   |   |-IntegerLiteral 0x26de9743070 <col:12> 'int' 0
|   |   |-IntegerLiteral 0x26de9743098 <col:15> 'int' 0
|   |   |-IntegerLiteral 0x26de97430c0 <col:18> 'int' 0
|   |   |-IntegerLiteral 0x26de97430e8 <col:21> 'int' 0
|   |   |-IntegerLiteral 0x26de9743110 <col:24> 'int' 0
|   |   `-IntegerLiteral 0x26de9743138 <col:27> 'int' 0
|   |-InitListExpr 0x26de97426b8 <line:1405:1, line:1411:29> 'const felem [3]'
|   | |-InitListExpr 0x26de9742720 <line:1405:2, line:1407:61> 'const felem':'limb const[9]'
|   | | |-ImplicitCastExpr 0x26de97427a8 <line:1405:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de9743240 <col:3> 'long long' 5781481702552587
|   | | |-ImplicitCastExpr 0x26de97427c0 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de9743268 <col:23> 'long long' 81936078708350940
|   | | |-ImplicitCastExpr 0x26de97427d8 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de9743290 <col:43> 'long long' 684428450673870
|   | | |-ImplicitCastExpr 0x26de97427f0 <line:1406:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de97432b8 <col:3> 'long long' 133775839246670778
|   | | |-ImplicitCastExpr 0x26de9742808 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de97432e0 <col:23> 'long long' 187393766212496108
|   | | |-ImplicitCastExpr 0x26de9742820 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de9743308 <col:43> 'long long' 163607746850311095
|   | | |-ImplicitCastExpr 0x26de9742838 <line:1407:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de9743330 <col:3> 'long long' 104632887796117062
|   | | |-ImplicitCastExpr 0x26de9742850 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de9743358 <col:23> 'long long' 196249512117870923
|   | | `-ImplicitCastExpr 0x26de9742868 <col:43> 'limb':'int' <IntegralCast>
|   | |   `-IntegerLiteral 0x26de9743380 <col:43> 'long long' 120194447878062517
|   | |-InitListExpr 0x26de9742890 <line:1408:2, line:1410:61> 'const felem':'limb const[9]'
|   | | |-ImplicitCastExpr 0x26de9742918 <line:1408:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de9743430 <col:3> 'long long' 253107672290978120
|   | | |-ImplicitCastExpr 0x26de9742930 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de9743458 <col:23> 'long long' 39877908298150671
|   | | |-ImplicitCastExpr 0x26de9742948 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de9743480 <col:43> 'long long' 243230812957569816
|   | | |-ImplicitCastExpr 0x26de9742960 <line:1409:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de97434a8 <col:3> 'long long' 139146955128709334
|   | | |-ImplicitCastExpr 0x26de9742978 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de97434d0 <col:23> 'long long' 269377625756283059
|   | | |-ImplicitCastExpr 0x26de9742990 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de97434f8 <col:43> 'long long' 93147841917237891
|   | | |-ImplicitCastExpr 0x26de97429a8 <line:1410:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de9743520 <col:3> 'long long' 25559748171724610
|   | | |-ImplicitCastExpr 0x26de97429c0 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de9743548 <col:23> 'long long' 256984472390645826
|   | | `-ImplicitCastExpr 0x26de97429d8 <col:43> 'limb':'int' <IntegralCast>
|   | |   `-IntegerLiteral 0x26de9743570 <col:43> 'long long' 110805271569863234
|   | `-InitListExpr 0x26de9742a00 <line:1411:2, col:28> 'const felem':'limb const[9]'
|   |   |-IntegerLiteral 0x26de9743620 <col:3> 'int' 1
|   |   |-IntegerLiteral 0x26de9743648 <col:6> 'int' 0
|   |   |-IntegerLiteral 0x26de9743670 <col:9> 'int' 0
|   |   |-IntegerLiteral 0x26de9743698 <col:12> 'int' 0
|   |   |-IntegerLiteral 0x26de97436c0 <col:15> 'int' 0
|   |   |-IntegerLiteral 0x26de97436e8 <col:18> 'int' 0
|   |   |-IntegerLiteral 0x26de9743710 <col:21> 'int' 0
|   |   |-IntegerLiteral 0x26de9743738 <col:24> 'int' 0
|   |   `-IntegerLiteral 0x26de9743760 <col:27> 'int' 0
|   |-InitListExpr 0x26de9742ab8 <line:1412:1, line:1418:29> 'const felem [3]'
|   | |-InitListExpr 0x26de9742b20 <line:1412:2, line:1414:61> 'const felem':'limb const[9]'
|   | | |-ImplicitCastExpr 0x26de9742ba8 <line:1412:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de9743868 <col:3> 'long long' 83907952979223667
|   | | |-ImplicitCastExpr 0x26de9742bc0 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de9743890 <col:23> 'long long' 54203007381021646
|   | | |-ImplicitCastExpr 0x26de9742bd8 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de97438b8 <col:43> 'long long' 160604902073304494
|   | | |-ImplicitCastExpr 0x26de9742bf0 <line:1413:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de97438e0 <col:3> 'long long' 23256222146912600
|   | | |-ImplicitCastExpr 0x26de9742c08 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de9743908 <col:23> 'long long' 182952255629341354
|   | | |-ImplicitCastExpr 0x26de9742c20 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de9743930 <col:43> 'long long' 115033435942373103
|   | | |-ImplicitCastExpr 0x26de9742c38 <line:1414:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de9743958 <col:3> 'long long' 20223102552038729
|   | | |-ImplicitCastExpr 0x26de9742c50 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de9743980 <col:23> 'long long' 57575416695682744
|   | | `-ImplicitCastExpr 0x26de9742c68 <col:43> 'limb':'int' <IntegralCast>
|   | |   `-IntegerLiteral 0x26de97439a8 <col:43> 'long long' 5669819612697091
|   | |-InitListExpr 0x26de9742c90 <line:1415:2, line:1417:61> 'const felem':'limb const[9]'
|   | | |-ImplicitCastExpr 0x26de9746d48 <line:1415:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de9743a58 <col:3> 'long long' 168448660585422906
|   | | |-ImplicitCastExpr 0x26de9746d60 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de9743a80 <col:23> 'long long' 239179205648869171
|   | | |-ImplicitCastExpr 0x26de9746d78 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de9743aa8 <col:43> 'long long' 285900858825794631
|   | | |-ImplicitCastExpr 0x26de9746d90 <line:1416:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de9743ad0 <col:3> 'long long' 3096201469763925
|   | | |-ImplicitCastExpr 0x26de9746da8 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de9743af8 <col:23> 'long long' 168713258819827008
|   | | |-ImplicitCastExpr 0x26de9746dc0 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de9743b20 <col:43> 'long long' 1427068068807299
|   | | |-ImplicitCastExpr 0x26de9746dd8 <line:1417:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de9743b48 <col:3> 'long long' 219126752609233260
|   | | |-ImplicitCastExpr 0x26de9746df0 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de9743b70 <col:23> 'long long' 21459001911328522
|   | | `-ImplicitCastExpr 0x26de9746e08 <col:43> 'limb':'int' <IntegralCast>
|   | |   `-IntegerLiteral 0x26de9743b98 <col:43> 'long long' 107764485524627839
|   | `-InitListExpr 0x26de9746e30 <line:1418:2, col:28> 'const felem':'limb const[9]'
|   |   |-IntegerLiteral 0x26de9743c48 <col:3> 'int' 1
|   |   |-IntegerLiteral 0x26de9743c70 <col:6> 'int' 0
|   |   |-IntegerLiteral 0x26de9743c98 <col:9> 'int' 0
|   |   |-IntegerLiteral 0x26de9743cc0 <col:12> 'int' 0
|   |   |-IntegerLiteral 0x26de9743ce8 <col:15> 'int' 0
|   |   |-IntegerLiteral 0x26de9743d10 <col:18> 'int' 0
|   |   |-IntegerLiteral 0x26de9743d38 <col:21> 'int' 0
|   |   |-IntegerLiteral 0x26de9743d60 <col:24> 'int' 0
|   |   `-IntegerLiteral 0x26de9743d88 <col:27> 'int' 0
|   |-InitListExpr 0x26de9746ee8 <line:1419:1, line:1425:29> 'const felem [3]'
|   | |-InitListExpr 0x26de9746f50 <line:1419:2, line:1421:61> 'const felem':'limb const[9]'
|   | | |-ImplicitCastExpr 0x26de9746fd8 <line:1419:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de9743e90 <col:3> 'long long' 80472600425850483
|   | | |-ImplicitCastExpr 0x26de9746ff0 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de9743eb8 <col:23> 'long long' 224473061399101374
|   | | |-ImplicitCastExpr 0x26de9747008 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de9743ee0 <col:43> 'long long' 6388189075278565
|   | | |-ImplicitCastExpr 0x26de9747020 <line:1420:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de9743f08 <col:3> 'long long' 285031614597630631
|   | | |-ImplicitCastExpr 0x26de9747038 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de9743f30 <col:23> 'long long' 274421322182961254
|   | | |-ImplicitCastExpr 0x26de9747050 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de9743f58 <col:43> 'long long' 283887570695703148
|   | | |-ImplicitCastExpr 0x26de9747068 <line:1421:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de9743f80 <col:3> 'long long' 181479600993480562
|   | | |-ImplicitCastExpr 0x26de9747080 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de9743fa8 <col:23> 'long long' 102090085528419116
|   | | `-ImplicitCastExpr 0x26de9747098 <col:43> 'limb':'int' <IntegralCast>
|   | |   `-IntegerLiteral 0x26de9743fd0 <col:43> 'long long' 106185979073531434
|   | |-InitListExpr 0x26de97470c0 <line:1422:2, line:1424:61> 'const felem':'limb const[9]'
|   | | |-ImplicitCastExpr 0x26de9747148 <line:1422:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de9744080 <col:3> 'long long' 73824376971567759
|   | | |-ImplicitCastExpr 0x26de9747160 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de97440a8 <col:23> 'long long' 128945964170724839
|   | | |-ImplicitCastExpr 0x26de9747178 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de97440d0 <col:43> 'long long' 121577388434101727
|   | | |-ImplicitCastExpr 0x26de9747190 <line:1423:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de97440f8 <col:3> 'long long' 139989292724168369
|   | | |-ImplicitCastExpr 0x26de97471a8 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de9744120 <col:23> 'long long' 226558589893534708
|   | | |-ImplicitCastExpr 0x26de97471c0 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de9744148 <col:43> 'long long' 204492623498446405
|   | | |-ImplicitCastExpr 0x26de97471d8 <line:1424:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de9744170 <col:3> 'long long' 83195714170398631
|   | | |-ImplicitCastExpr 0x26de97471f0 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de9744198 <col:23> 'long long' 266701901401486980
|   | | `-ImplicitCastExpr 0x26de9747208 <col:43> 'limb':'int' <IntegralCast>
|   | |   `-IntegerLiteral 0x26de97441c0 <col:43> 'long long' 38808386010626826
|   | `-InitListExpr 0x26de9747230 <line:1425:2, col:28> 'const felem':'limb const[9]'
|   |   |-IntegerLiteral 0x26de9744270 <col:3> 'int' 1
|   |   |-IntegerLiteral 0x26de9744298 <col:6> 'int' 0
|   |   |-IntegerLiteral 0x26de97442c0 <col:9> 'int' 0
|   |   |-IntegerLiteral 0x26de97442e8 <col:12> 'int' 0
|   |   |-IntegerLiteral 0x26de9744310 <col:15> 'int' 0
|   |   |-IntegerLiteral 0x26de9744338 <col:18> 'int' 0
|   |   |-IntegerLiteral 0x26de9744360 <col:21> 'int' 0
|   |   |-IntegerLiteral 0x26de9744388 <col:24> 'int' 0
|   |   `-IntegerLiteral 0x26de97443b0 <col:27> 'int' 0
|   |-InitListExpr 0x26de97472e8 <line:1426:1, line:1432:29> 'const felem [3]'
|   | |-InitListExpr 0x26de9747350 <line:1426:2, line:1428:61> 'const felem':'limb const[9]'
|   | | |-ImplicitCastExpr 0x26de97473d8 <line:1426:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de97444b8 <col:3> 'long long' 68456392460871366
|   | | |-ImplicitCastExpr 0x26de97473f0 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de97444e0 <col:23> 'long long' 187178293677952462
|   | | |-ImplicitCastExpr 0x26de9747408 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de9744508 <col:43> 'long long' 126894947334365842
|   | | |-ImplicitCastExpr 0x26de9747420 <line:1427:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de9744530 <col:3> 'long long' 147434772495009553
|   | | |-ImplicitCastExpr 0x26de9747438 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de9744558 <col:23> 'long long' 201495664110630374
|   | | |-ImplicitCastExpr 0x26de9747450 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de9744580 <col:43> 'long long' 5788334286214178
|   | | |-ImplicitCastExpr 0x26de9747468 <line:1428:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de97445a8 <col:3> 'long long' 264555323551016548
|   | | |-ImplicitCastExpr 0x26de9747480 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de97445d0 <col:23> 'long long' 201523436559516008
|   | | `-ImplicitCastExpr 0x26de9747498 <col:43> 'limb':'int' <IntegralCast>
|   | |   `-IntegerLiteral 0x26de97445f8 <col:43> 'long long' 86612822398908315
|   | |-InitListExpr 0x26de97474c0 <line:1429:2, line:1431:61> 'const felem':'limb const[9]'
|   | | |-ImplicitCastExpr 0x26de9747548 <line:1429:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de97446a8 <col:3> 'long long' 237190349179942813
|   | | |-ImplicitCastExpr 0x26de9747560 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de97446d0 <col:23> 'long long' 57919897970055867
|   | | |-ImplicitCastExpr 0x26de9747578 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de97446f8 <col:43> 'long long' 259503898983505200
|   | | |-ImplicitCastExpr 0x26de9747590 <line:1430:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de9744720 <col:3> 'long long' 240994968244069959
|   | | |-ImplicitCastExpr 0x26de97475a8 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de9744748 <col:23> 'long long' 197627180832108777
|   | | |-ImplicitCastExpr 0x26de97475c0 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de9744770 <col:43> 'long long' 14909165662016715
|   | | |-ImplicitCastExpr 0x26de97475d8 <line:1431:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de9744798 <col:3> 'long long' 231275607518278278
|   | | |-ImplicitCastExpr 0x26de97475f0 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de97447c0 <col:23> 'long long' 267691401609550987
|   | | `-ImplicitCastExpr 0x26de9747608 <col:43> 'limb':'int' <IntegralCast>
|   | |   `-IntegerLiteral 0x26de97447e8 <col:43> 'long long' 6132280927674703
|   | `-InitListExpr 0x26de9747630 <line:1432:2, col:28> 'const felem':'limb const[9]'
|   |   |-IntegerLiteral 0x26de9744898 <col:3> 'int' 1
|   |   |-IntegerLiteral 0x26de97448c0 <col:6> 'int' 0
|   |   |-IntegerLiteral 0x26de97448e8 <col:9> 'int' 0
|   |   |-IntegerLiteral 0x26de9744910 <col:12> 'int' 0
|   |   |-IntegerLiteral 0x26de9744938 <col:15> 'int' 0
|   |   |-IntegerLiteral 0x26de9744960 <col:18> 'int' 0
|   |   |-IntegerLiteral 0x26de9744988 <col:21> 'int' 0
|   |   |-IntegerLiteral 0x26de97449b0 <col:24> 'int' 0
|   |   `-IntegerLiteral 0x26de97449d8 <col:27> 'int' 0
|   |-InitListExpr 0x26de97476e8 <line:1433:1, line:1439:29> 'const felem [3]'
|   | |-InitListExpr 0x26de9747750 <line:1433:2, line:1435:61> 'const felem':'limb const[9]'
|   | | |-ImplicitCastExpr 0x26de97477d8 <line:1433:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de9744ae0 <col:3> 'long long' 163949238868714069
|   | | |-ImplicitCastExpr 0x26de97477f0 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de9744b08 <col:23> 'long long' 58905398262457208
|   | | |-ImplicitCastExpr 0x26de9747808 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de9744b30 <col:43> 'long long' 23410114530391911
|   | | |-ImplicitCastExpr 0x26de9747820 <line:1434:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de9744b58 <col:3> 'long long' 143013967514063650
|   | | |-ImplicitCastExpr 0x26de9747838 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de9744b80 <col:23> 'long long' 158564875852387944
|   | | |-ImplicitCastExpr 0x26de9747850 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de9744ba8 <col:43> 'long long' 188561501915912131
|   | | |-ImplicitCastExpr 0x26de9747868 <line:1435:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de9744bd0 <col:3> 'long long' 215199150119715708
|   | | |-ImplicitCastExpr 0x26de9747880 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de9744bf8 <col:23> 'long long' 206622526511148848
|   | | `-ImplicitCastExpr 0x26de9747898 <col:43> 'limb':'int' <IntegralCast>
|   | |   `-IntegerLiteral 0x26de9744c20 <col:43> 'long long' 89915256697746367
|   | |-InitListExpr 0x26de97478c0 <line:1436:2, line:1438:61> 'const felem':'limb const[9]'
|   | | |-ImplicitCastExpr 0x26de9747948 <line:1436:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de974ad20 <col:3> 'long long' 235472781441274037
|   | | |-ImplicitCastExpr 0x26de9747960 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de974ad48 <col:23> 'long long' 144389939058319050
|   | | |-ImplicitCastExpr 0x26de9747978 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de974ad70 <col:43> 'long long' 169063410541876690
|   | | |-ImplicitCastExpr 0x26de9747990 <line:1437:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de974ad98 <col:3> 'long long' 249173223097855798
|   | | |-ImplicitCastExpr 0x26de97479a8 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de974adc0 <col:23> 'long long' 170576668317566447
|   | | |-ImplicitCastExpr 0x26de97479c0 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de974ade8 <col:43> 'long long' 219758551860586130
|   | | |-ImplicitCastExpr 0x26de97479d8 <line:1438:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de974ae10 <col:3> 'long long' 106180284152399658
|   | | |-ImplicitCastExpr 0x26de97479f0 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de974ae38 <col:23> 'long long' 282632998754084398
|   | | `-ImplicitCastExpr 0x26de9747a08 <col:43> 'limb':'int' <IntegralCast>
|   | |   `-IntegerLiteral 0x26de974ae60 <col:43> 'long long' 28517994447710861
|   | `-InitListExpr 0x26de9747a30 <line:1439:2, col:28> 'const felem':'limb const[9]'
|   |   |-IntegerLiteral 0x26de974af10 <col:3> 'int' 1
|   |   |-IntegerLiteral 0x26de974af38 <col:6> 'int' 0
|   |   |-IntegerLiteral 0x26de974af60 <col:9> 'int' 0
|   |   |-IntegerLiteral 0x26de974af88 <col:12> 'int' 0
|   |   |-IntegerLiteral 0x26de974afb0 <col:15> 'int' 0
|   |   |-IntegerLiteral 0x26de974afd8 <col:18> 'int' 0
|   |   |-IntegerLiteral 0x26de974b000 <col:21> 'int' 0
|   |   |-IntegerLiteral 0x26de974b028 <col:24> 'int' 0
|   |   `-IntegerLiteral 0x26de974b050 <col:27> 'int' 0
|   |-InitListExpr 0x26de9747ae8 <line:1440:1, line:1446:29> 'const felem [3]'
|   | |-InitListExpr 0x26de9747b50 <line:1440:2, line:1442:61> 'const felem':'limb const[9]'
|   | | |-ImplicitCastExpr 0x26de9747bd8 <line:1440:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de974b158 <col:3> 'long long' 59660094509333031
|   | | |-ImplicitCastExpr 0x26de9747bf0 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de974b180 <col:23> 'long long' 40078737667398616
|   | | |-ImplicitCastExpr 0x26de9747c08 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de974b1a8 <col:43> 'long long' 59594866337222579
|   | | |-ImplicitCastExpr 0x26de9747c20 <line:1441:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de974b1d0 <col:3> 'long long' 21701153162777097
|   | | |-ImplicitCastExpr 0x26de9747c38 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de974b1f8 <col:23> 'long long' 116340500610041056
|   | | |-ImplicitCastExpr 0x26de9747c50 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de974b220 <col:43> 'long long' 102768039285926622
|   | | |-ImplicitCastExpr 0x26de9747c68 <line:1442:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de974b248 <col:3> 'long long' 162621478236739094
|   | | |-ImplicitCastExpr 0x26de9747c80 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de974b270 <col:23> 'long long' 253440927871325083
|   | | `-ImplicitCastExpr 0x26de9747c98 <col:43> 'limb':'int' <IntegralCast>
|   | |   `-IntegerLiteral 0x26de974b298 <col:43> 'long long' 22528988507453060
|   | |-InitListExpr 0x26de9747cc0 <line:1443:2, line:1445:61> 'const felem':'limb const[9]'
|   | | |-ImplicitCastExpr 0x26de9747d48 <line:1443:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de974b348 <col:3> 'long long' 187831405429143038
|   | | |-ImplicitCastExpr 0x26de9747d60 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de974b370 <col:23> 'long long' 110453562439088903
|   | | |-ImplicitCastExpr 0x26de9747d78 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de974b398 <col:43> 'long long' 137990260688458424
|   | | |-ImplicitCastExpr 0x26de9747d90 <line:1444:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de974b3c0 <col:3> 'long long' 1698402127094515
|   | | |-ImplicitCastExpr 0x26de9747da8 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de974b3e8 <col:23> 'long long' 205917707824120335
|   | | |-ImplicitCastExpr 0x26de9747dc0 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de974b410 <col:43> 'long long' 108655472150581258
|   | | |-ImplicitCastExpr 0x26de9747dd8 <line:1445:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de974b438 <col:3> 'long long' 140144397608972274
|   | | |-ImplicitCastExpr 0x26de9747df0 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de974b460 <col:23> 'long long' 151461723712079459
|   | | `-ImplicitCastExpr 0x26de9747e08 <col:43> 'limb':'int' <IntegralCast>
|   | |   `-IntegerLiteral 0x26de974b488 <col:43> 'long long' 90428809641917057
|   | `-InitListExpr 0x26de9747e30 <line:1446:2, col:28> 'const felem':'limb const[9]'
|   |   |-IntegerLiteral 0x26de974b538 <col:3> 'int' 1
|   |   |-IntegerLiteral 0x26de974b560 <col:6> 'int' 0
|   |   |-IntegerLiteral 0x26de974b588 <col:9> 'int' 0
|   |   |-IntegerLiteral 0x26de974b5b0 <col:12> 'int' 0
|   |   |-IntegerLiteral 0x26de974b5d8 <col:15> 'int' 0
|   |   |-IntegerLiteral 0x26de974b600 <col:18> 'int' 0
|   |   |-IntegerLiteral 0x26de974b628 <col:21> 'int' 0
|   |   |-IntegerLiteral 0x26de974b650 <col:24> 'int' 0
|   |   `-IntegerLiteral 0x26de974b678 <col:27> 'int' 0
|   |-InitListExpr 0x26de9747ee8 <line:1447:1, line:1453:29> 'const felem [3]'
|   | |-InitListExpr 0x26de9747f50 <line:1447:2, line:1449:61> 'const felem':'limb const[9]'
|   | | |-ImplicitCastExpr 0x26de9747fd8 <line:1447:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de974b780 <col:3> 'long long' 99408195288972852
|   | | |-ImplicitCastExpr 0x26de9747ff0 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de974b7a8 <col:23> 'long long' 252546355624683750
|   | | |-ImplicitCastExpr 0x26de9748008 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de974b7d0 <col:43> 'long long' 156284726038664712
|   | | |-ImplicitCastExpr 0x26de9748020 <line:1448:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de974b7f8 <col:3> 'long long' 187814555657646027
|   | | |-ImplicitCastExpr 0x26de9748038 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de974b820 <col:23> 'long long' 253333639507146726
|   | | |-ImplicitCastExpr 0x26de9748050 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de974b848 <col:43> 'long long' 204421248249226768
|   | | |-ImplicitCastExpr 0x26de9748068 <line:1449:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de974b870 <col:3> 'long long' 185585298873836337
|   | | |-ImplicitCastExpr 0x26de9748080 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de974b898 <col:23> 'long long' 54122284901443166
|   | | `-ImplicitCastExpr 0x26de9748098 <col:43> 'limb':'int' <IntegralCast>
|   | |   `-IntegerLiteral 0x26de974b8c0 <col:43> 'long long' 15606490642109597
|   | |-InitListExpr 0x26de97480c0 <line:1450:2, line:1452:61> 'const felem':'limb const[9]'
|   | | |-ImplicitCastExpr 0x26de9748148 <line:1450:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de974b970 <col:3> 'long long' 202273776109261432
|   | | |-ImplicitCastExpr 0x26de9748160 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de974b998 <col:23> 'long long' 249084945752482875
|   | | |-ImplicitCastExpr 0x26de9748178 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de974b9c0 <col:43> 'long long' 85968979218604038
|   | | |-ImplicitCastExpr 0x26de9748190 <line:1451:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de974b9e8 <col:3> 'long long' 25519703624199912
|   | | |-ImplicitCastExpr 0x26de97481a8 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de974ba10 <col:23> 'long long' 11298581697006935
|   | | |-ImplicitCastExpr 0x26de97481c0 <col:43> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de974ba38 <col:43> 'long long' 276104559392320902
|   | | |-ImplicitCastExpr 0x26de97481d8 <line:1452:3> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de974ba60 <col:3> 'long long' 110836315469364654
|   | | |-ImplicitCastExpr 0x26de97481f0 <col:23> 'limb':'int' <IntegralCast>
|   | | | `-IntegerLiteral 0x26de974ba88 <col:23> 'long long' 232146578341713168
|   | | `-ImplicitCastExpr 0x26de9748208 <col:43> 'limb':'int' <IntegralCast>
|   | |   `-IntegerLiteral 0x26de974bab0 <col:43> 'long long' 19823468322155842
|   | `-InitListExpr 0x26de9748230 <line:1453:2, col:28> 'const felem':'limb const[9]'
|   |   |-IntegerLiteral 0x26de974bb60 <col:3> 'int' 1
|   |   |-IntegerLiteral 0x26de974bb88 <col:6> 'int' 0
|   |   |-IntegerLiteral 0x26de974bbb0 <col:9> 'int' 0
|   |   |-IntegerLiteral 0x26de974bbd8 <col:12> 'int' 0
|   |   |-IntegerLiteral 0x26de974bc00 <col:15> 'int' 0
|   |   |-IntegerLiteral 0x26de974bc28 <col:18> 'int' 0
|   |   |-IntegerLiteral 0x26de974bc50 <col:21> 'int' 0
|   |   |-IntegerLiteral 0x26de974bc78 <col:24> 'int' 0
|   |   `-IntegerLiteral 0x26de974bca0 <col:27> 'int' 0
|   `-InitListExpr 0x26de97482e8 <line:1454:1, line:1460:29> 'const felem [3]'
|     |-InitListExpr 0x26de9748350 <line:1454:2, line:1456:61> 'const felem':'limb const[9]'
|     | |-ImplicitCastExpr 0x26de97483d8 <line:1454:3> 'limb':'int' <IntegralCast>
|     | | `-IntegerLiteral 0x26de974bda8 <col:3> 'long long' 35744586964765654
|     | |-ImplicitCastExpr 0x26de97483f0 <col:23> 'limb':'int' <IntegralCast>
|     | | `-IntegerLiteral 0x26de974bdd0 <col:23> 'long long' 163922703223845131
|     | |-ImplicitCastExpr 0x26de9748408 <col:43> 'limb':'int' <IntegralCast>
|     | | `-IntegerLiteral 0x26de974bdf8 <col:43> 'long long' 14854816205463052
|     | |-ImplicitCastExpr 0x26de9748420 <line:1455:3> 'limb':'int' <IntegralCast>
|     | | `-IntegerLiteral 0x26de974be20 <col:3> 'long long' 102143583654246457
|     | |-ImplicitCastExpr 0x26de9748438 <col:23> 'limb':'int' <IntegralCast>
|     | | `-IntegerLiteral 0x26de974be48 <col:23> 'long long' 142452439656043030
|     | |-ImplicitCastExpr 0x26de9748450 <col:43> 'limb':'int' <IntegralCast>
|     | | `-IntegerLiteral 0x26de974be70 <col:43> 'long long' 112217592890821305
|     | |-ImplicitCastExpr 0x26de9748468 <line:1456:3> 'limb':'int' <IntegralCast>
|     | | `-IntegerLiteral 0x26de974be98 <col:3> 'long long' 23787854062546502
|     | |-ImplicitCastExpr 0x26de9748480 <col:23> 'limb':'int' <IntegralCast>
|     | | `-IntegerLiteral 0x26de974bec0 <col:23> 'long long' 249179525718089087
|     | `-ImplicitCastExpr 0x26de9748498 <col:43> 'limb':'int' <IntegralCast>
|     |   `-IntegerLiteral 0x26de974bee8 <col:43> 'long long' 26558462432025871
|     |-InitListExpr 0x26de97484c0 <line:1457:2, line:1459:61> 'const felem':'limb const[9]'
|     | |-ImplicitCastExpr 0x26de9748548 <line:1457:3> 'limb':'int' <IntegralCast>
|     | | `-IntegerLiteral 0x26de974bf98 <col:3> 'long long' 78779712580399778
|     | |-ImplicitCastExpr 0x26de9748560 <col:23> 'limb':'int' <IntegralCast>
|     | | `-IntegerLiteral 0x26de974bfc0 <col:23> 'long long' 278917745207099588
|     | |-ImplicitCastExpr 0x26de9748578 <col:43> 'limb':'int' <IntegralCast>
|     | | `-IntegerLiteral 0x26de974bfe8 <col:43> 'long long' 183813831278226615
|     | |-ImplicitCastExpr 0x26de9748590 <line:1458:3> 'limb':'int' <IntegralCast>
|     | | `-IntegerLiteral 0x26de974c010 <col:3> 'long long' 239336779130140502
|     | |-ImplicitCastExpr 0x26de97485a8 <col:23> 'limb':'int' <IntegralCast>
|     | | `-IntegerLiteral 0x26de974c038 <col:23> 'long long' 161422671968267096
|     | |-ImplicitCastExpr 0x26de97485c0 <col:43> 'limb':'int' <IntegralCast>
|     | | `-IntegerLiteral 0x26de974c060 <col:43> 'long long' 106085547023527836
|     | |-ImplicitCastExpr 0x26de97485d8 <line:1459:3> 'limb':'int' <IntegralCast>
|     | | `-IntegerLiteral 0x26de974c088 <col:3> 'long long' 95793207021835882
|     | |-ImplicitCastExpr 0x26de97485f0 <col:23> 'limb':'int' <IntegralCast>
|     | | `-IntegerLiteral 0x26de974c0b0 <col:23> 'long long' 250342103785073150
|     | `-ImplicitCastExpr 0x26de9748608 <col:43> 'limb':'int' <IntegralCast>
|     |   `-IntegerLiteral 0x26de974c0d8 <col:43> 'long long' 115330905904664661
|     `-InitListExpr 0x26de9748630 <line:1460:2, col:28> 'const felem':'limb const[9]'
|       |-IntegerLiteral 0x26de974c188 <col:3> 'int' 1
|       |-IntegerLiteral 0x26de974c1b0 <col:6> 'int' 0
|       |-IntegerLiteral 0x26de974c1d8 <col:9> 'int' 0
|       |-IntegerLiteral 0x26de974c200 <col:12> 'int' 0
|       |-IntegerLiteral 0x26de974c228 <col:15> 'int' 0
|       |-IntegerLiteral 0x26de974c250 <col:18> 'int' 0
|       |-IntegerLiteral 0x26de974c278 <col:21> 'int' 0
|       |-IntegerLiteral 0x26de974c2a0 <col:24> 'int' 0
|       `-IntegerLiteral 0x26de974c2c8 <col:27> 'int' 0
|-FunctionDecl 0x26de9748c58 <line:1468:1, line:1487:1> line:1468:13 used select_point 'void (const limb, unsigned int, const felem (*)[3], felem *)' static
| |-ParmVarDecl 0x26de97486c8 <col:26, col:37> col:37 used idx 'const limb':'const int'
| |-ParmVarDecl 0x26de9748748 <col:42, col:55> col:55 used size 'unsigned int'
| |-ParmVarDecl 0x26de9748910 <line:1469:26, col:50> col:38 used pre_comp 'const felem (*)[3]':'const felem (*)[3]'
| |-ParmVarDecl 0x26de9748ab0 <col:53, col:64> col:59 used out 'felem *':'felem *'
| `-CompoundStmt 0x26de974dea8 <line:1470:1, line:1487:1>
|   |-DeclStmt 0x26de974ce80 <line:1471:5, col:18>
|   | |-VarDecl 0x26de974cd80 <col:5, col:14> col:14 used i 'unsigned int'
|   | `-VarDecl 0x26de974ce00 <col:5, col:17> col:17 used j 'unsigned int'
|   |-DeclStmt 0x26de974d008 <line:1472:5, col:32>
|   | `-VarDecl 0x26de974cea8 <col:5, col:31> col:11 used outlimbs 'limb *' cinit
|   |   `-UnaryOperator 0x26de974cff0 <col:22, col:31> 'limb *' prefix '&' cannot overflow
|   |     `-ArraySubscriptExpr 0x26de974cfd0 <col:23, col:31> 'limb':'int' lvalue
|   |       |-ImplicitCastExpr 0x26de974cfb8 <col:23, col:28> 'limb *' <ArrayToPointerDecay>
|   |       | `-ArraySubscriptExpr 0x26de974cf70 <col:23, col:28> 'felem':'limb [9]' lvalue
|   |       |   |-ImplicitCastExpr 0x26de974cf58 <col:23> 'felem *':'felem *' <LValueToRValue>
|   |       |   | `-DeclRefExpr 0x26de974cf10 <col:23> 'felem *':'felem *' lvalue ParmVar 0x26de9748ab0 'out' 'felem *':'felem *'
|   |       |   `-IntegerLiteral 0x26de974cf30 <col:27> 'int' 0
|   |       `-IntegerLiteral 0x26de974cf90 <col:30> 'int' 0
|   |-CallExpr 0x26de974d1a8 <line:1474:5, col:36> 'void *'
|   | |-ImplicitCastExpr 0x26de974d190 <col:5> 'void *(*)(void *, int, unsigned long long)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de974d020 <col:5> 'void *(void *, int, unsigned long long)' Function 0x26de952a5c8 'memset' 'void *(void *, int, unsigned long long)'
|   | |-ImplicitCastExpr 0x26de974d1f8 <col:12> 'void *' <BitCast>
|   | | `-ImplicitCastExpr 0x26de974d1e0 <col:12> 'felem *':'felem *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x26de974d040 <col:12> 'felem *':'felem *' lvalue ParmVar 0x26de9748ab0 'out' 'felem *':'felem *'
|   | |-IntegerLiteral 0x26de974d060 <col:17> 'int' 0
|   | `-BinaryOperator 0x26de974d158 <col:20, col:35> 'unsigned long long' '*'
|   |   |-UnaryExprOrTypeTraitExpr 0x26de974d0f8 <col:20, col:31> 'unsigned long long' sizeof
|   |   | `-ParenExpr 0x26de974d0d8 <col:26, col:31> 'felem':'limb [9]' lvalue
|   |   |   `-UnaryOperator 0x26de974d0c0 <col:27, col:28> 'felem':'limb [9]' lvalue prefix '*' cannot overflow
|   |   |     `-ImplicitCastExpr 0x26de974d0a8 <col:28> 'felem *':'felem *' <LValueToRValue>
|   |   |       `-DeclRefExpr 0x26de974d088 <col:28> 'felem *':'felem *' lvalue ParmVar 0x26de9748ab0 'out' 'felem *':'felem *' non_odr_use_unevaluated
|   |   `-ImplicitCastExpr 0x26de974d140 <col:35> 'unsigned long long' <IntegralCast>
|   |     `-IntegerLiteral 0x26de974d118 <col:35> 'int' 3
|   `-ForStmt 0x26de974de70 <line:1476:5, line:1486:5>
|     |-BinaryOperator 0x26de974d288 <line:1476:10, col:14> 'unsigned int' '='
|     | |-DeclRefExpr 0x26de974d210 <col:10> 'unsigned int' lvalue Var 0x26de974cd80 'i' 'unsigned int'
|     | `-ImplicitCastExpr 0x26de974d270 <col:14> 'unsigned int' <IntegralCast>
|     |   `-IntegerLiteral 0x26de974d248 <col:14> 'int' 0
|     |-<<<NULL>>>
|     |-BinaryOperator 0x26de974d318 <col:17, col:21> 'int' '<'
|     | |-ImplicitCastExpr 0x26de974d2e8 <col:17> 'unsigned int' <LValueToRValue>
|     | | `-DeclRefExpr 0x26de974d2a8 <col:17> 'unsigned int' lvalue Var 0x26de974cd80 'i' 'unsigned int'
|     | `-ImplicitCastExpr 0x26de974d300 <col:21> 'unsigned int' <LValueToRValue>
|     |   `-DeclRefExpr 0x26de974d2c8 <col:21> 'unsigned int' lvalue ParmVar 0x26de9748748 'size' 'unsigned int'
|     |-UnaryOperator 0x26de974d358 <col:27, col:28> 'unsigned int' postfix '++'
|     | `-DeclRefExpr 0x26de974d338 <col:27> 'unsigned int' lvalue Var 0x26de974cd80 'i' 'unsigned int'
|     `-CompoundStmt 0x26de974de20 <col:32, line:1486:5>
|       |-DeclStmt 0x26de974d5a8 <line:1477:9, col:49>
|       | `-VarDecl 0x26de974d380 <col:9, col:48> col:21 used inlimbs 'const limb *' cinit
|       |   `-UnaryOperator 0x26de974d590 <col:31, col:48> 'const limb *' prefix '&' cannot overflow
|       |     `-ArraySubscriptExpr 0x26de974d570 <col:32, col:48> 'const limb':'const int' lvalue
|       |       |-ImplicitCastExpr 0x26de974d558 <col:32, col:45> 'const limb *' <ArrayToPointerDecay>
|       |       | `-ArraySubscriptExpr 0x26de974d510 <col:32, col:45> 'const felem':'limb const[9]' lvalue
|       |       |   |-ImplicitCastExpr 0x26de974d4f8 <col:32, col:42> 'const felem *' <ArrayToPointerDecay>
|       |       |   | `-ArraySubscriptExpr 0x26de974d458 <col:32, col:42> 'const felem [3]' lvalue
|       |       |   |   |-ImplicitCastExpr 0x26de974d428 <col:32> 'const felem (*)[3]':'const felem (*)[3]' <LValueToRValue>
|       |       |   |   | `-DeclRefExpr 0x26de974d3e8 <col:32> 'const felem (*)[3]':'const felem (*)[3]' lvalue ParmVar 0x26de9748910 'pre_comp' 'const felem (*)[3]':'const felem (*)[3]'
|       |       |   |   `-ImplicitCastExpr 0x26de974d440 <col:41> 'unsigned int' <LValueToRValue>
|       |       |   |     `-DeclRefExpr 0x26de974d408 <col:41> 'unsigned int' lvalue Var 0x26de974cd80 'i' 'unsigned int'
|       |       |   `-IntegerLiteral 0x26de974d478 <col:44> 'int' 0
|       |       `-IntegerLiteral 0x26de974d530 <col:47> 'int' 0
|       |-DeclStmt 0x26de974d6f8 <line:1478:9, col:28>
|       | `-VarDecl 0x26de974d5d0 <col:9, col:25> col:14 used mask 'limb':'int' cinit
|       |   `-ImplicitCastExpr 0x26de974d6e0 <col:21, col:25> 'limb':'int' <IntegralCast>
|       |     `-BinaryOperator 0x26de974d6c0 <col:21, col:25> 'unsigned int' '^'
|       |       |-ImplicitCastExpr 0x26de974d678 <col:21> 'unsigned int' <LValueToRValue>
|       |       | `-DeclRefExpr 0x26de974d638 <col:21> 'unsigned int' lvalue Var 0x26de974cd80 'i' 'unsigned int'
|       |       `-ImplicitCastExpr 0x26de974d6a8 <col:25> 'unsigned int' <IntegralCast>
|       |         `-ImplicitCastExpr 0x26de974d690 <col:25> 'limb':'int' <LValueToRValue>
|       |           `-DeclRefExpr 0x26de974d658 <col:25> 'const limb':'const int' lvalue ParmVar 0x26de97486c8 'idx' 'const limb':'const int'
|       |-CompoundAssignOperator 0x26de974d7c8 <line:1479:9, col:25> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|       | |-DeclRefExpr 0x26de974d710 <col:9> 'limb':'int' lvalue Var 0x26de974d5d0 'mask' 'limb':'int'
|       | `-BinaryOperator 0x26de974d7a8 <col:17, col:25> 'limb':'int' '>>'
|       |   |-ImplicitCastExpr 0x26de974d790 <col:17> 'limb':'int' <LValueToRValue>
|       |   | `-DeclRefExpr 0x26de974d748 <col:17> 'limb':'int' lvalue Var 0x26de974d5d0 'mask' 'limb':'int'
|       |   `-IntegerLiteral 0x26de974d768 <col:25> 'int' 4
|       |-CompoundAssignOperator 0x26de974d898 <line:1480:9, col:25> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|       | |-DeclRefExpr 0x26de974d7f8 <col:9> 'limb':'int' lvalue Var 0x26de974d5d0 'mask' 'limb':'int'
|       | `-BinaryOperator 0x26de974d878 <col:17, col:25> 'limb':'int' '>>'
|       |   |-ImplicitCastExpr 0x26de974d860 <col:17> 'limb':'int' <LValueToRValue>
|       |   | `-DeclRefExpr 0x26de974d818 <col:17> 'limb':'int' lvalue Var 0x26de974d5d0 'mask' 'limb':'int'
|       |   `-IntegerLiteral 0x26de974d838 <col:25> 'int' 2
|       |-CompoundAssignOperator 0x26de974d968 <line:1481:9, col:25> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|       | |-DeclRefExpr 0x26de974d8c8 <col:9> 'limb':'int' lvalue Var 0x26de974d5d0 'mask' 'limb':'int'
|       | `-BinaryOperator 0x26de974d948 <col:17, col:25> 'limb':'int' '>>'
|       |   |-ImplicitCastExpr 0x26de974d930 <col:17> 'limb':'int' <LValueToRValue>
|       |   | `-DeclRefExpr 0x26de974d8e8 <col:17> 'limb':'int' lvalue Var 0x26de974d5d0 'mask' 'limb':'int'
|       |   `-IntegerLiteral 0x26de974d908 <col:25> 'int' 1
|       |-CompoundAssignOperator 0x26de974d9e0 <line:1482:9, col:17> 'limb':'int' '&=' ComputeLHSTy='int' ComputeResultTy='int'
|       | |-DeclRefExpr 0x26de974d998 <col:9> 'limb':'int' lvalue Var 0x26de974d5d0 'mask' 'limb':'int'
|       | `-IntegerLiteral 0x26de974d9b8 <col:17> 'int' 1
|       |-UnaryOperator 0x26de974da30 <line:1483:9, col:13> 'limb':'int' postfix '--'
|       | `-DeclRefExpr 0x26de974da10 <col:9> 'limb':'int' lvalue Var 0x26de974d5d0 'mask' 'limb':'int'
|       `-ForStmt 0x26de974dde8 <line:1484:9, line:1485:41>
|         |-BinaryOperator 0x26de974dac0 <line:1484:14, col:18> 'unsigned int' '='
|         | |-DeclRefExpr 0x26de974da48 <col:14> 'unsigned int' lvalue Var 0x26de974ce00 'j' 'unsigned int'
|         | `-ImplicitCastExpr 0x26de974daa8 <col:18> 'unsigned int' <IntegralCast>
|         |   `-IntegerLiteral 0x26de974da80 <col:18> 'int' 0
|         |-<<<NULL>>>
|         |-BinaryOperator 0x26de974dba0 <col:21, col:34> 'int' '<'
|         | |-ImplicitCastExpr 0x26de974db70 <col:21> 'unsigned int' <LValueToRValue>
|         | | `-DeclRefExpr 0x26de974dae0 <col:21> 'unsigned int' lvalue Var 0x26de974ce00 'j' 'unsigned int'
|         | `-ImplicitCastExpr 0x26de974db88 <line:128:17, line:1484:34> 'unsigned int' <IntegralCast>
|         |   `-BinaryOperator 0x26de974db50 <line:128:17, line:1484:34> 'int' '*'
|         |     |-IntegerLiteral 0x26de974db00 <line:128:17> 'int' 9
|         |     `-IntegerLiteral 0x26de974db28 <line:1484:34> 'int' 3
|         |-UnaryOperator 0x26de974dbe0 <col:37, col:38> 'unsigned int' postfix '++'
|         | `-DeclRefExpr 0x26de974dbc0 <col:37> 'unsigned int' lvalue Var 0x26de974ce00 'j' 'unsigned int'
|         `-CompoundAssignOperator 0x26de974ddb8 <line:1485:13, col:41> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|           |-ArraySubscriptExpr 0x26de974dc80 <col:13, col:23> 'limb':'int' lvalue
|           | |-ImplicitCastExpr 0x26de974dc50 <col:13> 'limb *' <LValueToRValue>
|           | | `-DeclRefExpr 0x26de974dbf8 <col:13> 'limb *' lvalue Var 0x26de974cea8 'outlimbs' 'limb *'
|           | `-ImplicitCastExpr 0x26de974dc68 <col:22> 'unsigned int' <LValueToRValue>
|           |   `-DeclRefExpr 0x26de974dc30 <col:22> 'unsigned int' lvalue Var 0x26de974ce00 'j' 'unsigned int'
|           `-BinaryOperator 0x26de974dd98 <col:28, col:41> 'int' '&'
|             |-ImplicitCastExpr 0x26de974dd68 <col:28, col:37> 'limb':'int' <LValueToRValue>
|             | `-ArraySubscriptExpr 0x26de974dd28 <col:28, col:37> 'const limb':'const int' lvalue
|             |   |-ImplicitCastExpr 0x26de974dcf8 <col:28> 'const limb *' <LValueToRValue>
|             |   | `-DeclRefExpr 0x26de974dca0 <col:28> 'const limb *' lvalue Var 0x26de974d380 'inlimbs' 'const limb *'
|             |   `-ImplicitCastExpr 0x26de974dd10 <col:36> 'unsigned int' <LValueToRValue>
|             |     `-DeclRefExpr 0x26de974dcd8 <col:36> 'unsigned int' lvalue Var 0x26de974ce00 'j' 'unsigned int'
|             `-ImplicitCastExpr 0x26de974dd80 <col:41> 'limb':'int' <LValueToRValue>
|               `-DeclRefExpr 0x26de974dd48 <col:41> 'limb':'int' lvalue Var 0x26de974d5d0 'mask' 'limb':'int'
|-FunctionDecl 0x26de974e0e8 <line:1490:1, line:1495:1> line:1490:13 used get_bit 'char (const u8 *, int)' static
| |-ParmVarDecl 0x26de974df20 <col:21, col:43> col:43 used in 'const u8 *':'const u8 *'
| |-ParmVarDecl 0x26de974dfa0 <col:47, col:51> col:51 used i 'int'
| `-CompoundStmt 0x26de974e4d8 <line:1491:1, line:1495:1>
|   |-IfStmt 0x26de974e280 <line:1492:5, line:1493:16>
|   | |-BinaryOperator 0x26de974e210 <line:1492:9, col:13> 'int' '<'
|   | | |-ImplicitCastExpr 0x26de974e1f8 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de974e1b0 <col:9> 'int' lvalue ParmVar 0x26de974dfa0 'i' 'int'
|   | | `-IntegerLiteral 0x26de974e1d0 <col:13> 'int' 0
|   | `-ReturnStmt 0x26de974e270 <line:1493:9, col:16>
|   |   `-ImplicitCastExpr 0x26de974e258 <col:16> 'char' <IntegralCast>
|   |     `-IntegerLiteral 0x26de974e230 <col:16> 'int' 0
|   `-ReturnStmt 0x26de974e4c8 <line:1494:5, col:38>
|     `-ImplicitCastExpr 0x26de974e4b0 <col:12, col:38> 'char' <IntegralCast>
|       `-BinaryOperator 0x26de974e490 <col:12, col:38> 'int' '&'
|         |-ParenExpr 0x26de974e448 <col:12, col:34> 'u8':'int'
|         | `-BinaryOperator 0x26de974e428 <col:13, col:33> 'u8':'int' '>>'
|         |   |-ImplicitCastExpr 0x26de974e410 <col:13, col:22> 'u8':'int' <LValueToRValue>
|         |   | `-ArraySubscriptExpr 0x26de974e350 <col:13, col:22> 'const u8':'const int' lvalue
|         |   |   |-ImplicitCastExpr 0x26de974e338 <col:13> 'const u8 *':'const u8 *' <LValueToRValue>
|         |   |   | `-DeclRefExpr 0x26de974e298 <col:13> 'const u8 *':'const u8 *' lvalue ParmVar 0x26de974df20 'in' 'const u8 *':'const u8 *'
|         |   |   `-BinaryOperator 0x26de974e318 <col:16, col:21> 'int' '>>'
|         |   |     |-ImplicitCastExpr 0x26de974e300 <col:16> 'int' <LValueToRValue>
|         |   |     | `-DeclRefExpr 0x26de974e2b8 <col:16> 'int' lvalue ParmVar 0x26de974dfa0 'i' 'int'
|         |   |     `-IntegerLiteral 0x26de974e2d8 <col:21> 'int' 3
|         |   `-ParenExpr 0x26de974e3f0 <col:27, col:33> 'int'
|         |     `-BinaryOperator 0x26de974e3d0 <col:28, col:32> 'int' '&'
|         |       |-ImplicitCastExpr 0x26de974e3b8 <col:28> 'int' <LValueToRValue>
|         |       | `-DeclRefExpr 0x26de974e370 <col:28> 'int' lvalue ParmVar 0x26de974dfa0 'i' 'int'
|         |       `-IntegerLiteral 0x26de974e390 <col:32> 'int' 7
|         `-IntegerLiteral 0x26de974e468 <col:38> 'int' 1
|-FunctionDecl 0x26de974efc8 <line:1504:1, line:1585:1> line:1504:13 used batch_mul 'void (limb *, limb *, limb *, const felem_bytearray *, const unsigned int, const u8 *, const int, const felem (*)[17][3], const felem (*)[3])' static
| |-ParmVarDecl 0x26de974e508 <col:23, col:29> col:29 used x_out 'limb *':'limb *'
| |-ParmVarDecl 0x26de974e580 <col:36, col:42> col:42 used y_out 'limb *':'limb *'
| |-ParmVarDecl 0x26de974e5f8 <col:49, col:55> col:55 used z_out 'limb *':'limb *'
| |-ParmVarDecl 0x26de974e770 <line:1505:23, col:53> col:45 used scalars 'const felem_bytearray *':'const felem_bytearray *'
| |-ParmVarDecl 0x26de974e7f0 <line:1506:23, col:38> col:38 used num_points 'const unsigned int'
| |-ParmVarDecl 0x26de974e868 <col:50, col:60> col:60 used g_scalar 'const u8 *'
| |-ParmVarDecl 0x26de974e8e8 <line:1507:23, col:33> col:33 used mixed 'const int'
| |-ParmVarDecl 0x26de974eb80 <col:40, col:68> col:52 used pre_comp 'const felem (*)[17][3]':'const felem (*)[17][3]'
| |-ParmVarDecl 0x26de974ed40 <line:1508:23, col:51> col:35 used g_pre_comp 'const felem (*)[3]':'const felem (*)[3]'
| `-CompoundStmt 0x26de9753c30 <line:1509:1, line:1585:1>
|   |-DeclStmt 0x26de974f1e0 <line:1510:5, col:16>
|   | |-VarDecl 0x26de974f0e0 <col:5, col:9> col:9 used i 'int'
|   | `-VarDecl 0x26de974f160 <col:5, col:12> col:12 used skip 'int'
|   |-DeclStmt 0x26de974f440 <line:1511:5, col:47>
|   | |-VarDecl 0x26de974f210 <col:5, col:14> col:14 used num 'unsigned int'
|   | `-VarDecl 0x26de974f290 <col:5, col:46> col:19 used gen_mul 'unsigned int' cinit
|   |   `-ImplicitCastExpr 0x26de974f410 <col:29, col:46> 'unsigned int' <IntegralCast>
|   |     `-ParenExpr 0x26de974f3f0 <col:29, col:46> 'int'
|   |       `-BinaryOperator 0x26de974f3d0 <col:30, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27> 'int' '!='
|   |         |-ImplicitCastExpr 0x26de974f3a0 <.//openssl//file_jk/before\crypto\ec\ecp_nistp521.c:1511:30> 'const u8 *' <LValueToRValue>
|   |         | `-DeclRefExpr 0x26de974f2f8 <col:30> 'const u8 *' lvalue ParmVar 0x26de974e868 'g_scalar' 'const u8 *'
|   |         `-ImplicitCastExpr 0x26de974f3b8 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'const u8 *' <BitCast>
|   |           `-ParenExpr 0x26de974f380 <col:17, col:27> 'void *'
|   |             `-CStyleCastExpr 0x26de974f358 <col:18, col:26> 'void *' <NullToPointer>
|   |               `-IntegerLiteral 0x26de974f318 <col:26> 'int' 0
|   |-DeclStmt 0x26de974f678 <.//openssl//file_jk/before\crypto\ec\ecp_nistp521.c:1512:5, col:24>
|   | |-VarDecl 0x26de974f4b8 <col:5, col:15> col:11 used nq 'felem [3]'
|   | `-VarDecl 0x26de974f5f8 <col:5, col:23> col:18 used tmp 'felem [4]'
|   |-DeclStmt 0x26de974f708 <line:1513:5, col:14>
|   | `-VarDecl 0x26de974f6a0 <col:5, col:10> col:10 used bits 'limb':'int'
|   |-DeclStmt 0x26de974f828 <line:1514:5, col:19>
|   | |-VarDecl 0x26de974f730 <col:5, col:8> col:8 used sign 'u8':'int'
|   | `-VarDecl 0x26de974f7a8 <col:5, col:14> col:14 used digit 'u8':'int'
|   |-CallExpr 0x26de974f950 <line:1517:5, col:29> 'void *'
|   | |-ImplicitCastExpr 0x26de974f938 <col:5> 'void *(*)(void *, int, unsigned long long)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de974f840 <col:5> 'void *(void *, int, unsigned long long)' Function 0x26de952a5c8 'memset' 'void *(void *, int, unsigned long long)'
|   | |-ImplicitCastExpr 0x26de974f9a0 <col:12> 'void *' <BitCast>
|   | | `-ImplicitCastExpr 0x26de974f988 <col:12> 'felem *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x26de974f860 <col:12> 'felem [3]' lvalue Var 0x26de974f4b8 'nq' 'felem [3]'
|   | |-IntegerLiteral 0x26de974f898 <col:16> 'int' 0
|   | `-UnaryExprOrTypeTraitExpr 0x26de974f900 <col:19, col:28> 'unsigned long long' sizeof
|   |   `-ParenExpr 0x26de974f8e0 <col:25, col:28> 'felem [3]' lvalue
|   |     `-DeclRefExpr 0x26de974f8c0 <col:26> 'felem [3]' lvalue Var 0x26de974f4b8 'nq' 'felem [3]' non_odr_use_unevaluated
|   |-BinaryOperator 0x26de974fa18 <line:1524:5, col:12> 'int' '='
|   | |-DeclRefExpr 0x26de974f9b8 <col:5> 'int' lvalue Var 0x26de974f160 'skip' 'int'
|   | `-IntegerLiteral 0x26de974f9f0 <col:12> 'int' 1
|   |-ForStmt 0x26de9753808 <line:1526:5, line:1581:5>
|   | |-BinaryOperator 0x26de974fb48 <line:1526:10, col:37> 'int' '='
|   | | |-DeclRefExpr 0x26de974fa38 <col:10> 'int' lvalue Var 0x26de974f0e0 'i' 'int'
|   | | `-ParenExpr 0x26de974fb28 <col:14, col:37> 'int'
|   | |   `-ConditionalOperator 0x26de974faf8 <col:15, col:34> 'int'
|   | |     |-ImplicitCastExpr 0x26de974fae0 <col:15> 'unsigned int' <LValueToRValue>
|   | |     | `-DeclRefExpr 0x26de974fa70 <col:15> 'const unsigned int' lvalue ParmVar 0x26de974e7f0 'num_points' 'const unsigned int'
|   | |     |-IntegerLiteral 0x26de974fa90 <col:28> 'int' 520
|   | |     `-IntegerLiteral 0x26de974fab8 <col:34> 'int' 130
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x26de974fbc8 <col:40, col:45> 'int' '>='
|   | | |-ImplicitCastExpr 0x26de974fbb0 <col:40> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de974fb68 <col:40> 'int' lvalue Var 0x26de974f0e0 'i' 'int'
|   | | `-IntegerLiteral 0x26de974fb88 <col:45> 'int' 0
|   | |-UnaryOperator 0x26de974fc08 <col:48, col:50> 'int' prefix '--'
|   | | `-DeclRefExpr 0x26de974fbe8 <col:50> 'int' lvalue Var 0x26de974f0e0 'i' 'int'
|   | `-CompoundStmt 0x26de97537e0 <col:53, line:1581:5>
|   |   |-IfStmt 0x26de97500d0 <line:1528:9, line:1529:66>
|   |   | |-UnaryOperator 0x26de974fc58 <line:1528:13, col:14> 'int' prefix '!' cannot overflow
|   |   | | `-ImplicitCastExpr 0x26de974fc40 <col:14> 'int' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x26de974fc20 <col:14> 'int' lvalue Var 0x26de974f160 'skip' 'int'
|   |   | `-CallExpr 0x26de974ffa8 <line:1529:13, col:66> 'void'
|   |   |   |-ImplicitCastExpr 0x26de974ff90 <col:13> 'void (*)(limb *, limb *, limb *, const limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   |   |   | `-DeclRefExpr 0x26de974fc70 <col:13> 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *)' Function 0x26de9672c48 'point_double' 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *)'
|   |   |   |-ImplicitCastExpr 0x26de974fff8 <col:26, col:30> 'limb *' <ArrayToPointerDecay>
|   |   |   | `-ArraySubscriptExpr 0x26de974fcf0 <col:26, col:30> 'felem':'limb [9]' lvalue
|   |   |   |   |-ImplicitCastExpr 0x26de974fcd8 <col:26> 'felem *' <ArrayToPointerDecay>
|   |   |   |   | `-DeclRefExpr 0x26de974fc90 <col:26> 'felem [3]' lvalue Var 0x26de974f4b8 'nq' 'felem [3]'
|   |   |   |   `-IntegerLiteral 0x26de974fcb0 <col:29> 'int' 0
|   |   |   |-ImplicitCastExpr 0x26de9750010 <col:33, col:37> 'limb *' <ArrayToPointerDecay>
|   |   |   | `-ArraySubscriptExpr 0x26de974fd70 <col:33, col:37> 'felem':'limb [9]' lvalue
|   |   |   |   |-ImplicitCastExpr 0x26de974fd58 <col:33> 'felem *' <ArrayToPointerDecay>
|   |   |   |   | `-DeclRefExpr 0x26de974fd10 <col:33> 'felem [3]' lvalue Var 0x26de974f4b8 'nq' 'felem [3]'
|   |   |   |   `-IntegerLiteral 0x26de974fd30 <col:36> 'int' 1
|   |   |   |-ImplicitCastExpr 0x26de9750028 <col:40, col:44> 'limb *' <ArrayToPointerDecay>
|   |   |   | `-ArraySubscriptExpr 0x26de974fdf0 <col:40, col:44> 'felem':'limb [9]' lvalue
|   |   |   |   |-ImplicitCastExpr 0x26de974fdd8 <col:40> 'felem *' <ArrayToPointerDecay>
|   |   |   |   | `-DeclRefExpr 0x26de974fd90 <col:40> 'felem [3]' lvalue Var 0x26de974f4b8 'nq' 'felem [3]'
|   |   |   |   `-IntegerLiteral 0x26de974fdb0 <col:43> 'int' 2
|   |   |   |-ImplicitCastExpr 0x26de9750058 <col:47, col:51> 'const limb *':'const limb *' <NoOp>
|   |   |   | `-ImplicitCastExpr 0x26de9750040 <col:47, col:51> 'limb *' <ArrayToPointerDecay>
|   |   |   |   `-ArraySubscriptExpr 0x26de974fe70 <col:47, col:51> 'felem':'limb [9]' lvalue
|   |   |   |     |-ImplicitCastExpr 0x26de974fe58 <col:47> 'felem *' <ArrayToPointerDecay>
|   |   |   |     | `-DeclRefExpr 0x26de974fe10 <col:47> 'felem [3]' lvalue Var 0x26de974f4b8 'nq' 'felem [3]'
|   |   |   |     `-IntegerLiteral 0x26de974fe30 <col:50> 'int' 0
|   |   |   |-ImplicitCastExpr 0x26de9750088 <col:54, col:58> 'const limb *':'const limb *' <NoOp>
|   |   |   | `-ImplicitCastExpr 0x26de9750070 <col:54, col:58> 'limb *' <ArrayToPointerDecay>
|   |   |   |   `-ArraySubscriptExpr 0x26de974fef0 <col:54, col:58> 'felem':'limb [9]' lvalue
|   |   |   |     |-ImplicitCastExpr 0x26de974fed8 <col:54> 'felem *' <ArrayToPointerDecay>
|   |   |   |     | `-DeclRefExpr 0x26de974fe90 <col:54> 'felem [3]' lvalue Var 0x26de974f4b8 'nq' 'felem [3]'
|   |   |   |     `-IntegerLiteral 0x26de974feb0 <col:57> 'int' 1
|   |   |   `-ImplicitCastExpr 0x26de97500b8 <col:61, col:65> 'const limb *':'const limb *' <NoOp>
|   |   |     `-ImplicitCastExpr 0x26de97500a0 <col:61, col:65> 'limb *' <ArrayToPointerDecay>
|   |   |       `-ArraySubscriptExpr 0x26de974ff70 <col:61, col:65> 'felem':'limb [9]' lvalue
|   |   |         |-ImplicitCastExpr 0x26de974ff58 <col:61> 'felem *' <ArrayToPointerDecay>
|   |   |         | `-DeclRefExpr 0x26de974ff10 <col:61> 'felem [3]' lvalue Var 0x26de974f4b8 'nq' 'felem [3]'
|   |   |         `-IntegerLiteral 0x26de974ff30 <col:64> 'int' 2
|   |   |-IfStmt 0x26de9751618 <line:1532:9, line:1549:9>
|   |   | |-BinaryOperator 0x26de97501d8 <line:1532:13, col:33> 'int' '&&'
|   |   | | |-ImplicitCastExpr 0x26de97501c0 <col:13> 'unsigned int' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x26de97500e8 <col:13> 'unsigned int' lvalue Var 0x26de974f290 'gen_mul' 'unsigned int'
|   |   | | `-ParenExpr 0x26de97501a0 <col:24, col:33> 'int'
|   |   | |   `-BinaryOperator 0x26de9750180 <col:25, col:30> 'int' '<='
|   |   | |     |-ImplicitCastExpr 0x26de9750168 <col:25> 'int' <LValueToRValue>
|   |   | |     | `-DeclRefExpr 0x26de9750120 <col:25> 'int' lvalue Var 0x26de974f0e0 'i' 'int'
|   |   | |     `-IntegerLiteral 0x26de9750140 <col:30> 'int' 130
|   |   | `-CompoundStmt 0x26de97515e8 <col:36, line:1549:9>
|   |   |   |-BinaryOperator 0x26de9750408 <line:1533:13, col:50> 'limb':'int' '='
|   |   |   | |-DeclRefExpr 0x26de97501f8 <col:13> 'limb':'int' lvalue Var 0x26de974f6a0 'bits' 'limb':'int'
|   |   |   | `-BinaryOperator 0x26de97503e8 <col:20, col:50> 'int' '<<'
|   |   |   |   |-ImplicitCastExpr 0x26de97503d0 <col:20, col:45> 'int' <IntegralCast>
|   |   |   |   | `-CallExpr 0x26de9750360 <col:20, col:45> 'char'
|   |   |   |   |   |-ImplicitCastExpr 0x26de9750348 <col:20> 'char (*)(const u8 *, int)' <FunctionToPointerDecay>
|   |   |   |   |   | `-DeclRefExpr 0x26de9750230 <col:20> 'char (const u8 *, int)' Function 0x26de974e0e8 'get_bit' 'char (const u8 *, int)'
|   |   |   |   |   |-ImplicitCastExpr 0x26de9750390 <col:28> 'const u8 *' <LValueToRValue>
|   |   |   |   |   | `-DeclRefExpr 0x26de9750250 <col:28> 'const u8 *' lvalue ParmVar 0x26de974e868 'g_scalar' 'const u8 *'
|   |   |   |   |   `-BinaryOperator 0x26de97502d0 <col:38, col:42> 'int' '+'
|   |   |   |   |     |-ImplicitCastExpr 0x26de97502b8 <col:38> 'int' <LValueToRValue>
|   |   |   |   |     | `-DeclRefExpr 0x26de9750270 <col:38> 'int' lvalue Var 0x26de974f0e0 'i' 'int'
|   |   |   |   |     `-IntegerLiteral 0x26de9750290 <col:42> 'int' 390
|   |   |   |   `-IntegerLiteral 0x26de97503a8 <col:50> 'int' 3
|   |   |   |-IfStmt 0x26de97509b0 <line:1534:13, line:1538:13>
|   |   |   | |-BinaryOperator 0x26de9750488 <line:1534:17, col:21> 'int' '<'
|   |   |   | | |-ImplicitCastExpr 0x26de9750470 <col:17> 'int' <LValueToRValue>
|   |   |   | | | `-DeclRefExpr 0x26de9750428 <col:17> 'int' lvalue Var 0x26de974f0e0 'i' 'int'
|   |   |   | | `-IntegerLiteral 0x26de9750448 <col:21> 'int' 130
|   |   |   | `-CompoundStmt 0x26de9750988 <col:26, line:1538:13>
|   |   |   |   |-CompoundAssignOperator 0x26de9750648 <line:1535:17, col:55> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   |   |   |   | |-DeclRefExpr 0x26de97504a8 <col:17> 'limb':'int' lvalue Var 0x26de974f6a0 'bits' 'limb':'int'
|   |   |   |   | `-BinaryOperator 0x26de9750628 <col:25, col:55> 'int' '<<'
|   |   |   |   |   |-ImplicitCastExpr 0x26de9750610 <col:25, col:50> 'int' <IntegralCast>
|   |   |   |   |   | `-CallExpr 0x26de97505a0 <col:25, col:50> 'char'
|   |   |   |   |   |   |-ImplicitCastExpr 0x26de9750588 <col:25> 'char (*)(const u8 *, int)' <FunctionToPointerDecay>
|   |   |   |   |   |   | `-DeclRefExpr 0x26de97504c8 <col:25> 'char (const u8 *, int)' Function 0x26de974e0e8 'get_bit' 'char (const u8 *, int)'
|   |   |   |   |   |   |-ImplicitCastExpr 0x26de97505d0 <col:33> 'const u8 *' <LValueToRValue>
|   |   |   |   |   |   | `-DeclRefExpr 0x26de97504e8 <col:33> 'const u8 *' lvalue ParmVar 0x26de974e868 'g_scalar' 'const u8 *'
|   |   |   |   |   |   `-BinaryOperator 0x26de9750568 <col:43, col:47> 'int' '+'
|   |   |   |   |   |     |-ImplicitCastExpr 0x26de9750550 <col:43> 'int' <LValueToRValue>
|   |   |   |   |   |     | `-DeclRefExpr 0x26de9750508 <col:43> 'int' lvalue Var 0x26de974f0e0 'i' 'int'
|   |   |   |   |   |     `-IntegerLiteral 0x26de9750528 <col:47> 'int' 260
|   |   |   |   |   `-IntegerLiteral 0x26de97505e8 <col:55> 'int' 2
|   |   |   |   |-CompoundAssignOperator 0x26de9750818 <line:1536:17, col:55> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   |   |   |   | |-DeclRefExpr 0x26de9750678 <col:17> 'limb':'int' lvalue Var 0x26de974f6a0 'bits' 'limb':'int'
|   |   |   |   | `-BinaryOperator 0x26de97507f8 <col:25, col:55> 'int' '<<'
|   |   |   |   |   |-ImplicitCastExpr 0x26de97507e0 <col:25, col:50> 'int' <IntegralCast>
|   |   |   |   |   | `-CallExpr 0x26de9750770 <col:25, col:50> 'char'
|   |   |   |   |   |   |-ImplicitCastExpr 0x26de9750758 <col:25> 'char (*)(const u8 *, int)' <FunctionToPointerDecay>
|   |   |   |   |   |   | `-DeclRefExpr 0x26de9750698 <col:25> 'char (const u8 *, int)' Function 0x26de974e0e8 'get_bit' 'char (const u8 *, int)'
|   |   |   |   |   |   |-ImplicitCastExpr 0x26de97507a0 <col:33> 'const u8 *' <LValueToRValue>
|   |   |   |   |   |   | `-DeclRefExpr 0x26de97506b8 <col:33> 'const u8 *' lvalue ParmVar 0x26de974e868 'g_scalar' 'const u8 *'
|   |   |   |   |   |   `-BinaryOperator 0x26de9750738 <col:43, col:47> 'int' '+'
|   |   |   |   |   |     |-ImplicitCastExpr 0x26de9750720 <col:43> 'int' <LValueToRValue>
|   |   |   |   |   |     | `-DeclRefExpr 0x26de97506d8 <col:43> 'int' lvalue Var 0x26de974f0e0 'i' 'int'
|   |   |   |   |   |     `-IntegerLiteral 0x26de97506f8 <col:47> 'int' 130
|   |   |   |   |   `-IntegerLiteral 0x26de97507b8 <col:55> 'int' 1
|   |   |   |   `-CompoundAssignOperator 0x26de9750958 <line:1537:17, col:44> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   |   |   |     |-DeclRefExpr 0x26de9750848 <col:17> 'limb':'int' lvalue Var 0x26de974f6a0 'bits' 'limb':'int'
|   |   |   |     `-ImplicitCastExpr 0x26de9750940 <col:25, col:44> 'int' <IntegralCast>
|   |   |   |       `-CallExpr 0x26de97508e0 <col:25, col:44> 'char'
|   |   |   |         |-ImplicitCastExpr 0x26de97508c8 <col:25> 'char (*)(const u8 *, int)' <FunctionToPointerDecay>
|   |   |   |         | `-DeclRefExpr 0x26de9750868 <col:25> 'char (const u8 *, int)' Function 0x26de974e0e8 'get_bit' 'char (const u8 *, int)'
|   |   |   |         |-ImplicitCastExpr 0x26de9750910 <col:33> 'const u8 *' <LValueToRValue>
|   |   |   |         | `-DeclRefExpr 0x26de9750888 <col:33> 'const u8 *' lvalue ParmVar 0x26de974e868 'g_scalar' 'const u8 *'
|   |   |   |         `-ImplicitCastExpr 0x26de9750928 <col:43> 'int' <LValueToRValue>
|   |   |   |           `-DeclRefExpr 0x26de97508a8 <col:43> 'int' lvalue Var 0x26de974f0e0 'i' 'int'
|   |   |   |-CallExpr 0x26de9750b00 <line:1540:13, col:51> 'void'
|   |   |   | |-ImplicitCastExpr 0x26de9750ae8 <col:13> 'void (*)(const limb, unsigned int, const felem (*)[3], felem *)' <FunctionToPointerDecay>
|   |   |   | | `-DeclRefExpr 0x26de97509c8 <col:13> 'void (const limb, unsigned int, const felem (*)[3], felem *)' Function 0x26de9748c58 'select_point' 'void (const limb, unsigned int, const felem (*)[3], felem *)'
|   |   |   | |-ImplicitCastExpr 0x26de9750b40 <col:26> 'limb':'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x26de97509e8 <col:26> 'limb':'int' lvalue Var 0x26de974f6a0 'bits' 'limb':'int'
|   |   |   | |-ImplicitCastExpr 0x26de9750b58 <col:32> 'unsigned int' <IntegralCast>
|   |   |   | | `-IntegerLiteral 0x26de9750a08 <col:32> 'int' 16
|   |   |   | |-ImplicitCastExpr 0x26de9750b70 <col:36> 'const felem (*)[3]':'const felem (*)[3]' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x26de9750a30 <col:36> 'const felem (*)[3]':'const felem (*)[3]' lvalue ParmVar 0x26de974ed40 'g_pre_comp' 'const felem (*)[3]':'const felem (*)[3]'
|   |   |   | `-ImplicitCastExpr 0x26de9750b88 <col:48> 'felem *' <ArrayToPointerDecay>
|   |   |   |   `-DeclRefExpr 0x26de9750a50 <col:48> 'felem [4]' lvalue Var 0x26de974f5f8 'tmp' 'felem [4]'
|   |   |   `-IfStmt 0x26de97515c0 <line:1541:13, line:1548:13> has_else
|   |   |     |-UnaryOperator 0x26de9750bd8 <line:1541:17, col:18> 'int' prefix '!' cannot overflow
|   |   |     | `-ImplicitCastExpr 0x26de9750bc0 <col:18> 'int' <LValueToRValue>
|   |   |     |   `-DeclRefExpr 0x26de9750ba0 <col:18> 'int' lvalue Var 0x26de974f160 'skip' 'int'
|   |   |     |-CompoundStmt 0x26de9751328 <col:24, line:1545:13>
|   |   |     | `-CallExpr 0x26de9751150 <line:1543:17, line:1544:73> 'void'
|   |   |     |   |-ImplicitCastExpr 0x26de9751138 <line:1543:17> 'void (*)(limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   |   |     |   | `-DeclRefExpr 0x26de9750bf0 <col:17> 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const limb *, const limb *, const limb *)' Function 0x26de9674158 'point_add' 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const limb *, const limb *, const limb *)'
|   |   |     |   |-ImplicitCastExpr 0x26de97511c0 <col:27, col:31> 'limb *' <ArrayToPointerDecay>
|   |   |     |   | `-ArraySubscriptExpr 0x26de9750c70 <col:27, col:31> 'felem':'limb [9]' lvalue
|   |   |     |   |   |-ImplicitCastExpr 0x26de9750c58 <col:27> 'felem *' <ArrayToPointerDecay>
|   |   |     |   |   | `-DeclRefExpr 0x26de9750c10 <col:27> 'felem [3]' lvalue Var 0x26de974f4b8 'nq' 'felem [3]'
|   |   |     |   |   `-IntegerLiteral 0x26de9750c30 <col:30> 'int' 0
|   |   |     |   |-ImplicitCastExpr 0x26de97511d8 <col:34, col:38> 'limb *' <ArrayToPointerDecay>
|   |   |     |   | `-ArraySubscriptExpr 0x26de9750cf0 <col:34, col:38> 'felem':'limb [9]' lvalue
|   |   |     |   |   |-ImplicitCastExpr 0x26de9750cd8 <col:34> 'felem *' <ArrayToPointerDecay>
|   |   |     |   |   | `-DeclRefExpr 0x26de9750c90 <col:34> 'felem [3]' lvalue Var 0x26de974f4b8 'nq' 'felem [3]'
|   |   |     |   |   `-IntegerLiteral 0x26de9750cb0 <col:37> 'int' 1
|   |   |     |   |-ImplicitCastExpr 0x26de97511f0 <col:41, col:45> 'limb *' <ArrayToPointerDecay>
|   |   |     |   | `-ArraySubscriptExpr 0x26de9750d90 <col:41, col:45> 'felem':'limb [9]' lvalue
|   |   |     |   |   |-ImplicitCastExpr 0x26de9750d78 <col:41> 'felem *' <ArrayToPointerDecay>
|   |   |     |   |   | `-DeclRefExpr 0x26de9750d10 <col:41> 'felem [3]' lvalue Var 0x26de974f4b8 'nq' 'felem [3]'
|   |   |     |   |   `-IntegerLiteral 0x26de9750d50 <col:44> 'int' 2
|   |   |     |   |-ImplicitCastExpr 0x26de9751220 <line:1544:27, col:31> 'const limb *':'const limb *' <NoOp>
|   |   |     |   | `-ImplicitCastExpr 0x26de9751208 <col:27, col:31> 'limb *' <ArrayToPointerDecay>
|   |   |     |   |   `-ArraySubscriptExpr 0x26de9750e10 <col:27, col:31> 'felem':'limb [9]' lvalue
|   |   |     |   |     |-ImplicitCastExpr 0x26de9750df8 <col:27> 'felem *' <ArrayToPointerDecay>
|   |   |     |   |     | `-DeclRefExpr 0x26de9750db0 <col:27> 'felem [3]' lvalue Var 0x26de974f4b8 'nq' 'felem [3]'
|   |   |     |   |     `-IntegerLiteral 0x26de9750dd0 <col:30> 'int' 0
|   |   |     |   |-ImplicitCastExpr 0x26de9751250 <col:34, col:38> 'const limb *':'const limb *' <NoOp>
|   |   |     |   | `-ImplicitCastExpr 0x26de9751238 <col:34, col:38> 'limb *' <ArrayToPointerDecay>
|   |   |     |   |   `-ArraySubscriptExpr 0x26de9750e90 <col:34, col:38> 'felem':'limb [9]' lvalue
|   |   |     |   |     |-ImplicitCastExpr 0x26de9750e78 <col:34> 'felem *' <ArrayToPointerDecay>
|   |   |     |   |     | `-DeclRefExpr 0x26de9750e30 <col:34> 'felem [3]' lvalue Var 0x26de974f4b8 'nq' 'felem [3]'
|   |   |     |   |     `-IntegerLiteral 0x26de9750e50 <col:37> 'int' 1
|   |   |     |   |-ImplicitCastExpr 0x26de9751280 <col:41, col:45> 'const limb *':'const limb *' <NoOp>
|   |   |     |   | `-ImplicitCastExpr 0x26de9751268 <col:41, col:45> 'limb *' <ArrayToPointerDecay>
|   |   |     |   |   `-ArraySubscriptExpr 0x26de9750f10 <col:41, col:45> 'felem':'limb [9]' lvalue
|   |   |     |   |     |-ImplicitCastExpr 0x26de9750ef8 <col:41> 'felem *' <ArrayToPointerDecay>
|   |   |     |   |     | `-DeclRefExpr 0x26de9750eb0 <col:41> 'felem [3]' lvalue Var 0x26de974f4b8 'nq' 'felem [3]'
|   |   |     |   |     `-IntegerLiteral 0x26de9750ed0 <col:44> 'int' 2
|   |   |     |   |-IntegerLiteral 0x26de9750f30 <col:48> 'int' 1
|   |   |     |   |-ImplicitCastExpr 0x26de97512b0 <col:51, col:56> 'const limb *':'const limb *' <NoOp>
|   |   |     |   | `-ImplicitCastExpr 0x26de9751298 <col:51, col:56> 'limb *' <ArrayToPointerDecay>
|   |   |     |   |   `-ArraySubscriptExpr 0x26de9750fb8 <col:51, col:56> 'felem':'limb [9]' lvalue
|   |   |     |   |     |-ImplicitCastExpr 0x26de9750fa0 <col:51> 'felem *' <ArrayToPointerDecay>
|   |   |     |   |     | `-DeclRefExpr 0x26de9750f58 <col:51> 'felem [4]' lvalue Var 0x26de974f5f8 'tmp' 'felem [4]'
|   |   |     |   |     `-IntegerLiteral 0x26de9750f78 <col:55> 'int' 0
|   |   |     |   |-ImplicitCastExpr 0x26de97512e0 <col:59, col:64> 'const limb *':'const limb *' <NoOp>
|   |   |     |   | `-ImplicitCastExpr 0x26de97512c8 <col:59, col:64> 'limb *' <ArrayToPointerDecay>
|   |   |     |   |   `-ArraySubscriptExpr 0x26de9751038 <col:59, col:64> 'felem':'limb [9]' lvalue
|   |   |     |   |     |-ImplicitCastExpr 0x26de9751020 <col:59> 'felem *' <ArrayToPointerDecay>
|   |   |     |   |     | `-DeclRefExpr 0x26de9750fd8 <col:59> 'felem [4]' lvalue Var 0x26de974f5f8 'tmp' 'felem [4]'
|   |   |     |   |     `-IntegerLiteral 0x26de9750ff8 <col:63> 'int' 1
|   |   |     |   `-ImplicitCastExpr 0x26de9751310 <col:67, col:72> 'const limb *':'const limb *' <NoOp>
|   |   |     |     `-ImplicitCastExpr 0x26de97512f8 <col:67, col:72> 'limb *' <ArrayToPointerDecay>
|   |   |     |       `-ArraySubscriptExpr 0x26de97510b8 <col:67, col:72> 'felem':'limb [9]' lvalue
|   |   |     |         |-ImplicitCastExpr 0x26de97510a0 <col:67> 'felem *' <ArrayToPointerDecay>
|   |   |     |         | `-DeclRefExpr 0x26de9751058 <col:67> 'felem [4]' lvalue Var 0x26de974f5f8 'tmp' 'felem [4]'
|   |   |     |         `-IntegerLiteral 0x26de9751078 <col:71> 'int' 2
|   |   |     `-CompoundStmt 0x26de97515a0 <line:1545:20, line:1548:13>
|   |   |       |-CallExpr 0x26de97514a0 <line:1546:17, col:50> 'void *'
|   |   |       | |-ImplicitCastExpr 0x26de9751488 <col:17> 'void *(*)(void *, const void *, unsigned long long)' <FunctionToPointerDecay>
|   |   |       | | `-DeclRefExpr 0x26de9751340 <col:17> 'void *(void *, const void *, unsigned long long)' Function 0x26de9529af8 'memcpy' 'void *(void *, const void *, unsigned long long)'
|   |   |       | |-ImplicitCastExpr 0x26de97514f0 <col:24> 'void *' <BitCast>
|   |   |       | | `-ImplicitCastExpr 0x26de97514d8 <col:24> 'felem *' <ArrayToPointerDecay>
|   |   |       | |   `-DeclRefExpr 0x26de9751360 <col:24> 'felem [3]' lvalue Var 0x26de974f4b8 'nq' 'felem [3]'
|   |   |       | |-ImplicitCastExpr 0x26de9751520 <col:28> 'const void *' <BitCast>
|   |   |       | | `-ImplicitCastExpr 0x26de9751508 <col:28> 'felem *' <ArrayToPointerDecay>
|   |   |       | |   `-DeclRefExpr 0x26de9751380 <col:28> 'felem [4]' lvalue Var 0x26de974f5f8 'tmp' 'felem [4]'
|   |   |       | `-BinaryOperator 0x26de9751410 <col:33, col:49> 'unsigned long long' '*'
|   |   |       |   |-ImplicitCastExpr 0x26de97513f8 <col:33> 'unsigned long long' <IntegralCast>
|   |   |       |   | `-IntegerLiteral 0x26de97513a0 <col:33> 'int' 3
|   |   |       |   `-UnaryExprOrTypeTraitExpr 0x26de97513d8 <col:37, col:49> 'unsigned long long' sizeof 'felem':'limb [9]'
|   |   |       `-BinaryOperator 0x26de9751580 <line:1547:17, col:24> 'int' '='
|   |   |         |-DeclRefExpr 0x26de9751538 <col:17> 'int' lvalue Var 0x26de974f160 'skip' 'int'
|   |   |         `-IntegerLiteral 0x26de9751558 <col:24> 'int' 0
|   |   `-IfStmt 0x26de97537c8 <line:1552:9, line:1580:9>
|   |     |-BinaryOperator 0x26de9751750 <line:1552:13, col:38> 'int' '&&'
|   |     | |-ImplicitCastExpr 0x26de9751738 <col:13> 'unsigned int' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x26de9751630 <col:13> 'const unsigned int' lvalue ParmVar 0x26de974e7f0 'num_points' 'const unsigned int'
|   |     | `-ParenExpr 0x26de9751718 <col:27, col:38> 'int'
|   |     |   `-BinaryOperator 0x26de97516f8 <col:28, col:37> 'int' '=='
|   |     |     |-BinaryOperator 0x26de97516b0 <col:28, col:32> 'int' '%'
|   |     |     | |-ImplicitCastExpr 0x26de9751698 <col:28> 'int' <LValueToRValue>
|   |     |     | | `-DeclRefExpr 0x26de9751650 <col:28> 'int' lvalue Var 0x26de974f0e0 'i' 'int'
|   |     |     | `-IntegerLiteral 0x26de9751670 <col:32> 'int' 5
|   |     |     `-IntegerLiteral 0x26de97516d0 <col:37> 'int' 0
|   |     `-CompoundStmt 0x26de97537b0 <col:41, line:1580:9>
|   |       `-ForStmt 0x26de9753778 <line:1554:13, line:1579:13>
|   |         |-BinaryOperator 0x26de97517e8 <line:1554:18, col:24> 'unsigned int' '='
|   |         | |-DeclRefExpr 0x26de9751770 <col:18> 'unsigned int' lvalue Var 0x26de974f210 'num' 'unsigned int'
|   |         | `-ImplicitCastExpr 0x26de97517d0 <col:24> 'unsigned int' <IntegralCast>
|   |         |   `-IntegerLiteral 0x26de97517a8 <col:24> 'int' 0
|   |         |-<<<NULL>>>
|   |         |-BinaryOperator 0x26de9751878 <col:27, col:33> 'int' '<'
|   |         | |-ImplicitCastExpr 0x26de9751848 <col:27> 'unsigned int' <LValueToRValue>
|   |         | | `-DeclRefExpr 0x26de9751808 <col:27> 'unsigned int' lvalue Var 0x26de974f210 'num' 'unsigned int'
|   |         | `-ImplicitCastExpr 0x26de9751860 <col:33> 'unsigned int' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x26de9751828 <col:33> 'const unsigned int' lvalue ParmVar 0x26de974e7f0 'num_points' 'const unsigned int'
|   |         |-UnaryOperator 0x26de97518b8 <col:45, col:47> 'unsigned int' prefix '++'
|   |         | `-DeclRefExpr 0x26de9751898 <col:47> 'unsigned int' lvalue Var 0x26de974f210 'num' 'unsigned int'
|   |         `-CompoundStmt 0x26de9753710 <col:52, line:1579:13>
|   |           |-BinaryOperator 0x26de9751ae0 <line:1555:17, col:56> 'limb':'int' '='
|   |           | |-DeclRefExpr 0x26de97518d0 <col:17> 'limb':'int' lvalue Var 0x26de974f6a0 'bits' 'limb':'int'
|   |           | `-BinaryOperator 0x26de9751ac0 <col:24, col:56> 'int' '<<'
|   |           |   |-ImplicitCastExpr 0x26de9751aa8 <col:24, col:51> 'int' <IntegralCast>
|   |           |   | `-CallExpr 0x26de9751a38 <col:24, col:51> 'char'
|   |           |   |   |-ImplicitCastExpr 0x26de9751a20 <col:24> 'char (*)(const u8 *, int)' <FunctionToPointerDecay>
|   |           |   |   | `-DeclRefExpr 0x26de97518f0 <col:24> 'char (const u8 *, int)' Function 0x26de974e0e8 'get_bit' 'char (const u8 *, int)'
|   |           |   |   |-ImplicitCastExpr 0x26de9751a68 <col:32, col:43> 'const u8 *' <ArrayToPointerDecay>
|   |           |   |   | `-ArraySubscriptExpr 0x26de9751980 <col:32, col:43> 'const felem_bytearray':'u8 const[66]' lvalue
|   |           |   |   |   |-ImplicitCastExpr 0x26de9751950 <col:32> 'const felem_bytearray *':'const felem_bytearray *' <LValueToRValue>
|   |           |   |   |   | `-DeclRefExpr 0x26de9751910 <col:32> 'const felem_bytearray *':'const felem_bytearray *' lvalue ParmVar 0x26de974e770 'scalars' 'const felem_bytearray *':'const felem_bytearray *'
|   |           |   |   |   `-ImplicitCastExpr 0x26de9751968 <col:40> 'unsigned int' <LValueToRValue>
|   |           |   |   |     `-DeclRefExpr 0x26de9751930 <col:40> 'unsigned int' lvalue Var 0x26de974f210 'num' 'unsigned int'
|   |           |   |   `-BinaryOperator 0x26de9751a00 <col:46, col:50> 'int' '+'
|   |           |   |     |-ImplicitCastExpr 0x26de97519e8 <col:46> 'int' <LValueToRValue>
|   |           |   |     | `-DeclRefExpr 0x26de97519a0 <col:46> 'int' lvalue Var 0x26de974f0e0 'i' 'int'
|   |           |   |     `-IntegerLiteral 0x26de97519c0 <col:50> 'int' 4
|   |           |   `-IntegerLiteral 0x26de9751a80 <col:56> 'int' 5
|   |           |-CompoundAssignOperator 0x26de9751d10 <line:1556:17, col:57> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   |           | |-DeclRefExpr 0x26de9751b00 <col:17> 'limb':'int' lvalue Var 0x26de974f6a0 'bits' 'limb':'int'
|   |           | `-BinaryOperator 0x26de9751cf0 <col:25, col:57> 'int' '<<'
|   |           |   |-ImplicitCastExpr 0x26de9751cd8 <col:25, col:52> 'int' <IntegralCast>
|   |           |   | `-CallExpr 0x26de9751c68 <col:25, col:52> 'char'
|   |           |   |   |-ImplicitCastExpr 0x26de9751c50 <col:25> 'char (*)(const u8 *, int)' <FunctionToPointerDecay>
|   |           |   |   | `-DeclRefExpr 0x26de9751b20 <col:25> 'char (const u8 *, int)' Function 0x26de974e0e8 'get_bit' 'char (const u8 *, int)'
|   |           |   |   |-ImplicitCastExpr 0x26de9751c98 <col:33, col:44> 'const u8 *' <ArrayToPointerDecay>
|   |           |   |   | `-ArraySubscriptExpr 0x26de9751bb0 <col:33, col:44> 'const felem_bytearray':'u8 const[66]' lvalue
|   |           |   |   |   |-ImplicitCastExpr 0x26de9751b80 <col:33> 'const felem_bytearray *':'const felem_bytearray *' <LValueToRValue>
|   |           |   |   |   | `-DeclRefExpr 0x26de9751b40 <col:33> 'const felem_bytearray *':'const felem_bytearray *' lvalue ParmVar 0x26de974e770 'scalars' 'const felem_bytearray *':'const felem_bytearray *'
|   |           |   |   |   `-ImplicitCastExpr 0x26de9751b98 <col:41> 'unsigned int' <LValueToRValue>
|   |           |   |   |     `-DeclRefExpr 0x26de9751b60 <col:41> 'unsigned int' lvalue Var 0x26de974f210 'num' 'unsigned int'
|   |           |   |   `-BinaryOperator 0x26de9751c30 <col:47, col:51> 'int' '+'
|   |           |   |     |-ImplicitCastExpr 0x26de9751c18 <col:47> 'int' <LValueToRValue>
|   |           |   |     | `-DeclRefExpr 0x26de9751bd0 <col:47> 'int' lvalue Var 0x26de974f0e0 'i' 'int'
|   |           |   |     `-IntegerLiteral 0x26de9751bf0 <col:51> 'int' 3
|   |           |   `-IntegerLiteral 0x26de9751cb0 <col:57> 'int' 4
|   |           |-CompoundAssignOperator 0x26de9751f50 <line:1557:17, col:57> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   |           | |-DeclRefExpr 0x26de9751d40 <col:17> 'limb':'int' lvalue Var 0x26de974f6a0 'bits' 'limb':'int'
|   |           | `-BinaryOperator 0x26de9751f30 <col:25, col:57> 'int' '<<'
|   |           |   |-ImplicitCastExpr 0x26de9751f18 <col:25, col:52> 'int' <IntegralCast>
|   |           |   | `-CallExpr 0x26de9751ea8 <col:25, col:52> 'char'
|   |           |   |   |-ImplicitCastExpr 0x26de9751e90 <col:25> 'char (*)(const u8 *, int)' <FunctionToPointerDecay>
|   |           |   |   | `-DeclRefExpr 0x26de9751d60 <col:25> 'char (const u8 *, int)' Function 0x26de974e0e8 'get_bit' 'char (const u8 *, int)'
|   |           |   |   |-ImplicitCastExpr 0x26de9751ed8 <col:33, col:44> 'const u8 *' <ArrayToPointerDecay>
|   |           |   |   | `-ArraySubscriptExpr 0x26de9751df0 <col:33, col:44> 'const felem_bytearray':'u8 const[66]' lvalue
|   |           |   |   |   |-ImplicitCastExpr 0x26de9751dc0 <col:33> 'const felem_bytearray *':'const felem_bytearray *' <LValueToRValue>
|   |           |   |   |   | `-DeclRefExpr 0x26de9751d80 <col:33> 'const felem_bytearray *':'const felem_bytearray *' lvalue ParmVar 0x26de974e770 'scalars' 'const felem_bytearray *':'const felem_bytearray *'
|   |           |   |   |   `-ImplicitCastExpr 0x26de9751dd8 <col:41> 'unsigned int' <LValueToRValue>
|   |           |   |   |     `-DeclRefExpr 0x26de9751da0 <col:41> 'unsigned int' lvalue Var 0x26de974f210 'num' 'unsigned int'
|   |           |   |   `-BinaryOperator 0x26de9751e70 <col:47, col:51> 'int' '+'
|   |           |   |     |-ImplicitCastExpr 0x26de9751e58 <col:47> 'int' <LValueToRValue>
|   |           |   |     | `-DeclRefExpr 0x26de9751e10 <col:47> 'int' lvalue Var 0x26de974f0e0 'i' 'int'
|   |           |   |     `-IntegerLiteral 0x26de9751e30 <col:51> 'int' 2
|   |           |   `-IntegerLiteral 0x26de9751ef0 <col:57> 'int' 3
|   |           |-CompoundAssignOperator 0x26de9752190 <line:1558:17, col:57> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   |           | |-DeclRefExpr 0x26de9751f80 <col:17> 'limb':'int' lvalue Var 0x26de974f6a0 'bits' 'limb':'int'
|   |           | `-BinaryOperator 0x26de9752170 <col:25, col:57> 'int' '<<'
|   |           |   |-ImplicitCastExpr 0x26de9752158 <col:25, col:52> 'int' <IntegralCast>
|   |           |   | `-CallExpr 0x26de97520e8 <col:25, col:52> 'char'
|   |           |   |   |-ImplicitCastExpr 0x26de97520d0 <col:25> 'char (*)(const u8 *, int)' <FunctionToPointerDecay>
|   |           |   |   | `-DeclRefExpr 0x26de9751fa0 <col:25> 'char (const u8 *, int)' Function 0x26de974e0e8 'get_bit' 'char (const u8 *, int)'
|   |           |   |   |-ImplicitCastExpr 0x26de9752118 <col:33, col:44> 'const u8 *' <ArrayToPointerDecay>
|   |           |   |   | `-ArraySubscriptExpr 0x26de9752030 <col:33, col:44> 'const felem_bytearray':'u8 const[66]' lvalue
|   |           |   |   |   |-ImplicitCastExpr 0x26de9752000 <col:33> 'const felem_bytearray *':'const felem_bytearray *' <LValueToRValue>
|   |           |   |   |   | `-DeclRefExpr 0x26de9751fc0 <col:33> 'const felem_bytearray *':'const felem_bytearray *' lvalue ParmVar 0x26de974e770 'scalars' 'const felem_bytearray *':'const felem_bytearray *'
|   |           |   |   |   `-ImplicitCastExpr 0x26de9752018 <col:41> 'unsigned int' <LValueToRValue>
|   |           |   |   |     `-DeclRefExpr 0x26de9751fe0 <col:41> 'unsigned int' lvalue Var 0x26de974f210 'num' 'unsigned int'
|   |           |   |   `-BinaryOperator 0x26de97520b0 <col:47, col:51> 'int' '+'
|   |           |   |     |-ImplicitCastExpr 0x26de9752098 <col:47> 'int' <LValueToRValue>
|   |           |   |     | `-DeclRefExpr 0x26de9752050 <col:47> 'int' lvalue Var 0x26de974f0e0 'i' 'int'
|   |           |   |     `-IntegerLiteral 0x26de9752070 <col:51> 'int' 1
|   |           |   `-IntegerLiteral 0x26de9752130 <col:57> 'int' 2
|   |           |-CompoundAssignOperator 0x26de9752388 <line:1559:17, col:53> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   |           | |-DeclRefExpr 0x26de97521c0 <col:17> 'limb':'int' lvalue Var 0x26de974f6a0 'bits' 'limb':'int'
|   |           | `-BinaryOperator 0x26de9752368 <col:25, col:53> 'int' '<<'
|   |           |   |-ImplicitCastExpr 0x26de9752350 <col:25, col:48> 'int' <IntegralCast>
|   |           |   | `-CallExpr 0x26de97522c8 <col:25, col:48> 'char'
|   |           |   |   |-ImplicitCastExpr 0x26de97522b0 <col:25> 'char (*)(const u8 *, int)' <FunctionToPointerDecay>
|   |           |   |   | `-DeclRefExpr 0x26de97521e0 <col:25> 'char (const u8 *, int)' Function 0x26de974e0e8 'get_bit' 'char (const u8 *, int)'
|   |           |   |   |-ImplicitCastExpr 0x26de97522f8 <col:33, col:44> 'const u8 *' <ArrayToPointerDecay>
|   |           |   |   | `-ArraySubscriptExpr 0x26de9752270 <col:33, col:44> 'const felem_bytearray':'u8 const[66]' lvalue
|   |           |   |   |   |-ImplicitCastExpr 0x26de9752240 <col:33> 'const felem_bytearray *':'const felem_bytearray *' <LValueToRValue>
|   |           |   |   |   | `-DeclRefExpr 0x26de9752200 <col:33> 'const felem_bytearray *':'const felem_bytearray *' lvalue ParmVar 0x26de974e770 'scalars' 'const felem_bytearray *':'const felem_bytearray *'
|   |           |   |   |   `-ImplicitCastExpr 0x26de9752258 <col:41> 'unsigned int' <LValueToRValue>
|   |           |   |   |     `-DeclRefExpr 0x26de9752220 <col:41> 'unsigned int' lvalue Var 0x26de974f210 'num' 'unsigned int'
|   |           |   |   `-ImplicitCastExpr 0x26de9752310 <col:47> 'int' <LValueToRValue>
|   |           |   |     `-DeclRefExpr 0x26de9752290 <col:47> 'int' lvalue Var 0x26de974f0e0 'i' 'int'
|   |           |   `-IntegerLiteral 0x26de9752328 <col:53> 'int' 1
|   |           |-CompoundAssignOperator 0x26de9752580 <line:1560:17, col:52> 'limb':'int' '|=' ComputeLHSTy='int' ComputeResultTy='int'
|   |           | |-DeclRefExpr 0x26de97523b8 <col:17> 'limb':'int' lvalue Var 0x26de974f6a0 'bits' 'limb':'int'
|   |           | `-ImplicitCastExpr 0x26de9752568 <col:25, col:52> 'int' <IntegralCast>
|   |           |   `-CallExpr 0x26de9752520 <col:25, col:52> 'char'
|   |           |     |-ImplicitCastExpr 0x26de9752508 <col:25> 'char (*)(const u8 *, int)' <FunctionToPointerDecay>
|   |           |     | `-DeclRefExpr 0x26de97523d8 <col:25> 'char (const u8 *, int)' Function 0x26de974e0e8 'get_bit' 'char (const u8 *, int)'
|   |           |     |-ImplicitCastExpr 0x26de9752550 <col:33, col:44> 'const u8 *' <ArrayToPointerDecay>
|   |           |     | `-ArraySubscriptExpr 0x26de9752468 <col:33, col:44> 'const felem_bytearray':'u8 const[66]' lvalue
|   |           |     |   |-ImplicitCastExpr 0x26de9752438 <col:33> 'const felem_bytearray *':'const felem_bytearray *' <LValueToRValue>
|   |           |     |   | `-DeclRefExpr 0x26de97523f8 <col:33> 'const felem_bytearray *':'const felem_bytearray *' lvalue ParmVar 0x26de974e770 'scalars' 'const felem_bytearray *':'const felem_bytearray *'
|   |           |     |   `-ImplicitCastExpr 0x26de9752450 <col:41> 'unsigned int' <LValueToRValue>
|   |           |     |     `-DeclRefExpr 0x26de9752418 <col:41> 'unsigned int' lvalue Var 0x26de974f210 'num' 'unsigned int'
|   |           |     `-BinaryOperator 0x26de97524e8 <col:47, col:51> 'int' '-'
|   |           |       |-ImplicitCastExpr 0x26de97524d0 <col:47> 'int' <LValueToRValue>
|   |           |       | `-DeclRefExpr 0x26de9752488 <col:47> 'int' lvalue Var 0x26de974f0e0 'i' 'int'
|   |           |       `-IntegerLiteral 0x26de97524a8 <col:51> 'int' 1
|   |           |-CallExpr 0x26de97526d0 <line:1561:17, col:68> 'void'
|   |           | |-ImplicitCastExpr 0x26de97526b8 <col:17> 'void (*)(unsigned char *, unsigned char *, unsigned char)' <FunctionToPointerDecay>
|   |           | | `-DeclRefExpr 0x26de97525b0 <col:17> 'void (unsigned char *, unsigned char *, unsigned char)' Function 0x26de9621238 'ec_GFp_nistp_recode_scalar_bits' 'void (unsigned char *, unsigned char *, unsigned char)'
|   |           | |-ImplicitCastExpr 0x26de9752708 <col:49, col:50> 'unsigned char *' <BitCast>
|   |           | | `-UnaryOperator 0x26de9752608 <col:49, col:50> 'u8 *' prefix '&' cannot overflow
|   |           | |   `-DeclRefExpr 0x26de97525d0 <col:50> 'u8':'int' lvalue Var 0x26de974f730 'sign' 'u8':'int'
|   |           | |-ImplicitCastExpr 0x26de9752720 <col:56, col:57> 'unsigned char *' <BitCast>
|   |           | | `-UnaryOperator 0x26de9752658 <col:56, col:57> 'u8 *' prefix '&' cannot overflow
|   |           | |   `-DeclRefExpr 0x26de9752620 <col:57> 'u8':'int' lvalue Var 0x26de974f7a8 'digit' 'u8':'int'
|   |           | `-ImplicitCastExpr 0x26de9752750 <col:64> 'unsigned char' <IntegralCast>
|   |           |   `-ImplicitCastExpr 0x26de9752738 <col:64> 'limb':'int' <LValueToRValue>
|   |           |     `-DeclRefExpr 0x26de9752670 <col:64> 'limb':'int' lvalue Var 0x26de974f6a0 'bits' 'limb':'int'
|   |           |-CallExpr 0x26de9752898 <line:1566:17, col:59> 'void'
|   |           | |-ImplicitCastExpr 0x26de9752880 <col:17> 'void (*)(const limb, unsigned int, const felem (*)[3], felem *)' <FunctionToPointerDecay>
|   |           | | `-DeclRefExpr 0x26de9752768 <col:17> 'void (const limb, unsigned int, const felem (*)[3], felem *)' Function 0x26de9748c58 'select_point' 'void (const limb, unsigned int, const felem (*)[3], felem *)'
|   |           | |-ImplicitCastExpr 0x26de97528d8 <col:30> 'u8':'int' <LValueToRValue>
|   |           | | `-DeclRefExpr 0x26de9752788 <col:30> 'u8':'int' lvalue Var 0x26de974f7a8 'digit' 'u8':'int'
|   |           | |-ImplicitCastExpr 0x26de97528f0 <col:37> 'unsigned int' <IntegralCast>
|   |           | | `-IntegerLiteral 0x26de97527a8 <col:37> 'int' 17
|   |           | |-ImplicitCastExpr 0x26de9752908 <col:41, col:53> 'const felem (*)[3]' <ArrayToPointerDecay>
|   |           | | `-ArraySubscriptExpr 0x26de9752840 <col:41, col:53> 'const felem [17][3]' lvalue
|   |           | |   |-ImplicitCastExpr 0x26de9752810 <col:41> 'const felem (*)[17][3]':'const felem (*)[17][3]' <LValueToRValue>
|   |           | |   | `-DeclRefExpr 0x26de97527d0 <col:41> 'const felem (*)[17][3]':'const felem (*)[17][3]' lvalue ParmVar 0x26de974eb80 'pre_comp' 'const felem (*)[17][3]':'const felem (*)[17][3]'
|   |           | |   `-ImplicitCastExpr 0x26de9752828 <col:50> 'unsigned int' <LValueToRValue>
|   |           | |     `-DeclRefExpr 0x26de97527f0 <col:50> 'unsigned int' lvalue Var 0x26de974f210 'num' 'unsigned int'
|   |           | `-ImplicitCastExpr 0x26de9752920 <col:56> 'felem *' <ArrayToPointerDecay>
|   |           |   `-DeclRefExpr 0x26de9752860 <col:56> 'felem [4]' lvalue Var 0x26de974f5f8 'tmp' 'felem [4]'
|   |           |-CallExpr 0x26de9752a70 <line:1567:17, col:41> 'void'
|   |           | |-ImplicitCastExpr 0x26de9752a58 <col:17> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   |           | | `-DeclRefExpr 0x26de9752938 <col:17> 'void (limb *, const limb *)' Function 0x26de9598f30 'felem_neg' 'void (limb *, const limb *)'
|   |           | |-ImplicitCastExpr 0x26de9752aa0 <col:27, col:32> 'limb *' <ArrayToPointerDecay>
|   |           | | `-ArraySubscriptExpr 0x26de97529b8 <col:27, col:32> 'felem':'limb [9]' lvalue
|   |           | |   |-ImplicitCastExpr 0x26de97529a0 <col:27> 'felem *' <ArrayToPointerDecay>
|   |           | |   | `-DeclRefExpr 0x26de9752958 <col:27> 'felem [4]' lvalue Var 0x26de974f5f8 'tmp' 'felem [4]'
|   |           | |   `-IntegerLiteral 0x26de9752978 <col:31> 'int' 3
|   |           | `-ImplicitCastExpr 0x26de9752ad0 <col:35, col:40> 'const limb *':'const limb *' <NoOp>
|   |           |   `-ImplicitCastExpr 0x26de9752ab8 <col:35, col:40> 'limb *' <ArrayToPointerDecay>
|   |           |     `-ArraySubscriptExpr 0x26de9752a38 <col:35, col:40> 'felem':'limb [9]' lvalue
|   |           |       |-ImplicitCastExpr 0x26de9752a20 <col:35> 'felem *' <ArrayToPointerDecay>
|   |           |       | `-DeclRefExpr 0x26de97529d8 <col:35> 'felem [4]' lvalue Var 0x26de974f5f8 'tmp' 'felem [4]'
|   |           |       `-IntegerLiteral 0x26de97529f8 <col:39> 'int' 1
|   |           |-CallExpr 0x26de9752cc8 <line:1569:17, col:64> 'void'
|   |           | |-ImplicitCastExpr 0x26de9752cb0 <col:17> 'void (*)(limb *, const limb *, limb)' <FunctionToPointerDecay>
|   |           | | `-DeclRefExpr 0x26de9752ae8 <col:17> 'void (limb *, const limb *, limb)' Function 0x26de9665258 'copy_conditional' 'void (limb *, const limb *, limb)'
|   |           | |-ImplicitCastExpr 0x26de9752d00 <col:34, col:39> 'limb *' <ArrayToPointerDecay>
|   |           | | `-ArraySubscriptExpr 0x26de9752b68 <col:34, col:39> 'felem':'limb [9]' lvalue
|   |           | |   |-ImplicitCastExpr 0x26de9752b50 <col:34> 'felem *' <ArrayToPointerDecay>
|   |           | |   | `-DeclRefExpr 0x26de9752b08 <col:34> 'felem [4]' lvalue Var 0x26de974f5f8 'tmp' 'felem [4]'
|   |           | |   `-IntegerLiteral 0x26de9752b28 <col:38> 'int' 1
|   |           | |-ImplicitCastExpr 0x26de9752d30 <col:42, col:47> 'const limb *':'const limb *' <NoOp>
|   |           | | `-ImplicitCastExpr 0x26de9752d18 <col:42, col:47> 'limb *' <ArrayToPointerDecay>
|   |           | |   `-ArraySubscriptExpr 0x26de9752be8 <col:42, col:47> 'felem':'limb [9]' lvalue
|   |           | |     |-ImplicitCastExpr 0x26de9752bd0 <col:42> 'felem *' <ArrayToPointerDecay>
|   |           | |     | `-DeclRefExpr 0x26de9752b88 <col:42> 'felem [4]' lvalue Var 0x26de974f5f8 'tmp' 'felem [4]'
|   |           | |     `-IntegerLiteral 0x26de9752ba8 <col:46> 'int' 3
|   |           | `-ParenExpr 0x26de9752c90 <col:50, col:63> 'limb':'int'
|   |           |   `-UnaryOperator 0x26de9752c78 <col:51, col:59> 'limb':'int' prefix '-'
|   |           |     `-CStyleCastExpr 0x26de9752c50 <col:52, col:59> 'limb':'int' <NoOp>
|   |           |       `-ImplicitCastExpr 0x26de9752c38 <col:59> 'u8':'int' <LValueToRValue> part_of_explicit_cast
|   |           |         `-DeclRefExpr 0x26de9752c08 <col:59> 'u8':'int' lvalue Var 0x26de974f730 'sign' 'u8':'int'
|   |           `-IfStmt 0x26de97536e8 <line:1571:17, line:1578:17> has_else
|   |             |-UnaryOperator 0x26de9752d98 <line:1571:21, col:22> 'int' prefix '!' cannot overflow
|   |             | `-ImplicitCastExpr 0x26de9752d80 <col:22> 'int' <LValueToRValue>
|   |             |   `-DeclRefExpr 0x26de9752d60 <col:22> 'int' lvalue Var 0x26de974f160 'skip' 'int'
|   |             |-CompoundStmt 0x26de9753478 <col:28, line:1575:17>
|   |             | `-CallExpr 0x26de9753288 <line:1572:21, line:1574:60> 'void'
|   |             |   |-ImplicitCastExpr 0x26de9753270 <line:1572:21> 'void (*)(limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   |             |   | `-DeclRefExpr 0x26de9752db0 <col:21> 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const limb *, const limb *, const limb *)' Function 0x26de9674158 'point_add' 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const limb *, const limb *, const limb *)'
|   |             |   |-ImplicitCastExpr 0x26de97532f8 <col:31, col:35> 'limb *' <ArrayToPointerDecay>
|   |             |   | `-ArraySubscriptExpr 0x26de9752e30 <col:31, col:35> 'felem':'limb [9]' lvalue
|   |             |   |   |-ImplicitCastExpr 0x26de9752e18 <col:31> 'felem *' <ArrayToPointerDecay>
|   |             |   |   | `-DeclRefExpr 0x26de9752dd0 <col:31> 'felem [3]' lvalue Var 0x26de974f4b8 'nq' 'felem [3]'
|   |             |   |   `-IntegerLiteral 0x26de9752df0 <col:34> 'int' 0
|   |             |   |-ImplicitCastExpr 0x26de9753310 <col:38, col:42> 'limb *' <ArrayToPointerDecay>
|   |             |   | `-ArraySubscriptExpr 0x26de9752eb0 <col:38, col:42> 'felem':'limb [9]' lvalue
|   |             |   |   |-ImplicitCastExpr 0x26de9752e98 <col:38> 'felem *' <ArrayToPointerDecay>
|   |             |   |   | `-DeclRefExpr 0x26de9752e50 <col:38> 'felem [3]' lvalue Var 0x26de974f4b8 'nq' 'felem [3]'
|   |             |   |   `-IntegerLiteral 0x26de9752e70 <col:41> 'int' 1
|   |             |   |-ImplicitCastExpr 0x26de9753328 <col:45, col:49> 'limb *' <ArrayToPointerDecay>
|   |             |   | `-ArraySubscriptExpr 0x26de9752f30 <col:45, col:49> 'felem':'limb [9]' lvalue
|   |             |   |   |-ImplicitCastExpr 0x26de9752f18 <col:45> 'felem *' <ArrayToPointerDecay>
|   |             |   |   | `-DeclRefExpr 0x26de9752ed0 <col:45> 'felem [3]' lvalue Var 0x26de974f4b8 'nq' 'felem [3]'
|   |             |   |   `-IntegerLiteral 0x26de9752ef0 <col:48> 'int' 2
|   |             |   |-ImplicitCastExpr 0x26de9753358 <line:1573:31, col:35> 'const limb *':'const limb *' <NoOp>
|   |             |   | `-ImplicitCastExpr 0x26de9753340 <col:31, col:35> 'limb *' <ArrayToPointerDecay>
|   |             |   |   `-ArraySubscriptExpr 0x26de9752fb0 <col:31, col:35> 'felem':'limb [9]' lvalue
|   |             |   |     |-ImplicitCastExpr 0x26de9752f98 <col:31> 'felem *' <ArrayToPointerDecay>
|   |             |   |     | `-DeclRefExpr 0x26de9752f50 <col:31> 'felem [3]' lvalue Var 0x26de974f4b8 'nq' 'felem [3]'
|   |             |   |     `-IntegerLiteral 0x26de9752f70 <col:34> 'int' 0
|   |             |   |-ImplicitCastExpr 0x26de9753388 <col:38, col:42> 'const limb *':'const limb *' <NoOp>
|   |             |   | `-ImplicitCastExpr 0x26de9753370 <col:38, col:42> 'limb *' <ArrayToPointerDecay>
|   |             |   |   `-ArraySubscriptExpr 0x26de9753030 <col:38, col:42> 'felem':'limb [9]' lvalue
|   |             |   |     |-ImplicitCastExpr 0x26de9753018 <col:38> 'felem *' <ArrayToPointerDecay>
|   |             |   |     | `-DeclRefExpr 0x26de9752fd0 <col:38> 'felem [3]' lvalue Var 0x26de974f4b8 'nq' 'felem [3]'
|   |             |   |     `-IntegerLiteral 0x26de9752ff0 <col:41> 'int' 1
|   |             |   |-ImplicitCastExpr 0x26de97533b8 <col:45, col:49> 'const limb *':'const limb *' <NoOp>
|   |             |   | `-ImplicitCastExpr 0x26de97533a0 <col:45, col:49> 'limb *' <ArrayToPointerDecay>
|   |             |   |   `-ArraySubscriptExpr 0x26de97530b0 <col:45, col:49> 'felem':'limb [9]' lvalue
|   |             |   |     |-ImplicitCastExpr 0x26de9753098 <col:45> 'felem *' <ArrayToPointerDecay>
|   |             |   |     | `-DeclRefExpr 0x26de9753050 <col:45> 'felem [3]' lvalue Var 0x26de974f4b8 'nq' 'felem [3]'
|   |             |   |     `-IntegerLiteral 0x26de9753070 <col:48> 'int' 2
|   |             |   |-ImplicitCastExpr 0x26de97533d0 <line:1574:31> 'int' <LValueToRValue>
|   |             |   | `-DeclRefExpr 0x26de97530d0 <col:31> 'const int' lvalue ParmVar 0x26de974e8e8 'mixed' 'const int'
|   |             |   |-ImplicitCastExpr 0x26de9753400 <col:38, col:43> 'const limb *':'const limb *' <NoOp>
|   |             |   | `-ImplicitCastExpr 0x26de97533e8 <col:38, col:43> 'limb *' <ArrayToPointerDecay>
|   |             |   |   `-ArraySubscriptExpr 0x26de9753150 <col:38, col:43> 'felem':'limb [9]' lvalue
|   |             |   |     |-ImplicitCastExpr 0x26de9753138 <col:38> 'felem *' <ArrayToPointerDecay>
|   |             |   |     | `-DeclRefExpr 0x26de97530f0 <col:38> 'felem [4]' lvalue Var 0x26de974f5f8 'tmp' 'felem [4]'
|   |             |   |     `-IntegerLiteral 0x26de9753110 <col:42> 'int' 0
|   |             |   |-ImplicitCastExpr 0x26de9753430 <col:46, col:51> 'const limb *':'const limb *' <NoOp>
|   |             |   | `-ImplicitCastExpr 0x26de9753418 <col:46, col:51> 'limb *' <ArrayToPointerDecay>
|   |             |   |   `-ArraySubscriptExpr 0x26de97531d0 <col:46, col:51> 'felem':'limb [9]' lvalue
|   |             |   |     |-ImplicitCastExpr 0x26de97531b8 <col:46> 'felem *' <ArrayToPointerDecay>
|   |             |   |     | `-DeclRefExpr 0x26de9753170 <col:46> 'felem [4]' lvalue Var 0x26de974f5f8 'tmp' 'felem [4]'
|   |             |   |     `-IntegerLiteral 0x26de9753190 <col:50> 'int' 1
|   |             |   `-ImplicitCastExpr 0x26de9753460 <col:54, col:59> 'const limb *':'const limb *' <NoOp>
|   |             |     `-ImplicitCastExpr 0x26de9753448 <col:54, col:59> 'limb *' <ArrayToPointerDecay>
|   |             |       `-ArraySubscriptExpr 0x26de9753250 <col:54, col:59> 'felem':'limb [9]' lvalue
|   |             |         |-ImplicitCastExpr 0x26de9753238 <col:54> 'felem *' <ArrayToPointerDecay>
|   |             |         | `-DeclRefExpr 0x26de97531f0 <col:54> 'felem [4]' lvalue Var 0x26de974f5f8 'tmp' 'felem [4]'
|   |             |         `-IntegerLiteral 0x26de9753210 <col:58> 'int' 2
|   |             `-CompoundStmt 0x26de97536c8 <line:1575:24, line:1578:17>
|   |               |-CallExpr 0x26de97535c8 <line:1576:21, col:54> 'void *'
|   |               | |-ImplicitCastExpr 0x26de97535b0 <col:21> 'void *(*)(void *, const void *, unsigned long long)' <FunctionToPointerDecay>
|   |               | | `-DeclRefExpr 0x26de9753490 <col:21> 'void *(void *, const void *, unsigned long long)' Function 0x26de9529af8 'memcpy' 'void *(void *, const void *, unsigned long long)'
|   |               | |-ImplicitCastExpr 0x26de9753618 <col:28> 'void *' <BitCast>
|   |               | | `-ImplicitCastExpr 0x26de9753600 <col:28> 'felem *' <ArrayToPointerDecay>
|   |               | |   `-DeclRefExpr 0x26de97534b0 <col:28> 'felem [3]' lvalue Var 0x26de974f4b8 'nq' 'felem [3]'
|   |               | |-ImplicitCastExpr 0x26de9753648 <col:32> 'const void *' <BitCast>
|   |               | | `-ImplicitCastExpr 0x26de9753630 <col:32> 'felem *' <ArrayToPointerDecay>
|   |               | |   `-DeclRefExpr 0x26de97534d0 <col:32> 'felem [4]' lvalue Var 0x26de974f5f8 'tmp' 'felem [4]'
|   |               | `-BinaryOperator 0x26de9753560 <col:37, col:53> 'unsigned long long' '*'
|   |               |   |-ImplicitCastExpr 0x26de9753548 <col:37> 'unsigned long long' <IntegralCast>
|   |               |   | `-IntegerLiteral 0x26de97534f0 <col:37> 'int' 3
|   |               |   `-UnaryExprOrTypeTraitExpr 0x26de9753528 <col:41, col:53> 'unsigned long long' sizeof 'felem':'limb [9]'
|   |               `-BinaryOperator 0x26de97536a8 <line:1577:21, col:28> 'int' '='
|   |                 |-DeclRefExpr 0x26de9753660 <col:21> 'int' lvalue Var 0x26de974f160 'skip' 'int'
|   |                 `-IntegerLiteral 0x26de9753680 <col:28> 'int' 0
|   |-CallExpr 0x26de9753918 <line:1582:5, col:30> 'void'
|   | |-ImplicitCastExpr 0x26de9753900 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de9753840 <col:5> 'void (limb *, const limb *)' Function 0x26de9594bb8 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x26de9753948 <col:18> 'limb *':'limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x26de9753860 <col:18> 'limb *':'limb *' lvalue ParmVar 0x26de974e508 'x_out' 'limb *':'limb *'
|   | `-ImplicitCastExpr 0x26de9753978 <col:25, col:29> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de9753960 <col:25, col:29> 'limb *' <ArrayToPointerDecay>
|   |     `-ArraySubscriptExpr 0x26de97538e0 <col:25, col:29> 'felem':'limb [9]' lvalue
|   |       |-ImplicitCastExpr 0x26de97538c8 <col:25> 'felem *' <ArrayToPointerDecay>
|   |       | `-DeclRefExpr 0x26de9753880 <col:25> 'felem [3]' lvalue Var 0x26de974f4b8 'nq' 'felem [3]'
|   |       `-IntegerLiteral 0x26de97538a0 <col:28> 'int' 0
|   |-CallExpr 0x26de9753a68 <line:1583:5, col:30> 'void'
|   | |-ImplicitCastExpr 0x26de9753a50 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de9753990 <col:5> 'void (limb *, const limb *)' Function 0x26de9594bb8 'felem_assign' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x26de9753a98 <col:18> 'limb *':'limb *' <LValueToRValue>
|   | | `-DeclRefExpr 0x26de97539b0 <col:18> 'limb *':'limb *' lvalue ParmVar 0x26de974e580 'y_out' 'limb *':'limb *'
|   | `-ImplicitCastExpr 0x26de9753ac8 <col:25, col:29> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de9753ab0 <col:25, col:29> 'limb *' <ArrayToPointerDecay>
|   |     `-ArraySubscriptExpr 0x26de9753a30 <col:25, col:29> 'felem':'limb [9]' lvalue
|   |       |-ImplicitCastExpr 0x26de9753a18 <col:25> 'felem *' <ArrayToPointerDecay>
|   |       | `-DeclRefExpr 0x26de97539d0 <col:25> 'felem [3]' lvalue Var 0x26de974f4b8 'nq' 'felem [3]'
|   |       `-IntegerLiteral 0x26de97539f0 <col:28> 'int' 1
|   `-CallExpr 0x26de9753bb8 <line:1584:5, col:30> 'void'
|     |-ImplicitCastExpr 0x26de9753ba0 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x26de9753ae0 <col:5> 'void (limb *, const limb *)' Function 0x26de9594bb8 'felem_assign' 'void (limb *, const limb *)'
|     |-ImplicitCastExpr 0x26de9753be8 <col:18> 'limb *':'limb *' <LValueToRValue>
|     | `-DeclRefExpr 0x26de9753b00 <col:18> 'limb *':'limb *' lvalue ParmVar 0x26de974e5f8 'z_out' 'limb *':'limb *'
|     `-ImplicitCastExpr 0x26de9753c18 <col:25, col:29> 'const limb *':'const limb *' <NoOp>
|       `-ImplicitCastExpr 0x26de9753c00 <col:25, col:29> 'limb *' <ArrayToPointerDecay>
|         `-ArraySubscriptExpr 0x26de9753b80 <col:25, col:29> 'felem':'limb [9]' lvalue
|           |-ImplicitCastExpr 0x26de9753b68 <col:25> 'felem *' <ArrayToPointerDecay>
|           | `-DeclRefExpr 0x26de9753b20 <col:25> 'felem [3]' lvalue Var 0x26de974f4b8 'nq' 'felem [3]'
|           `-IntegerLiteral 0x26de9753b40 <col:28> 'int' 2
|-RecordDecl 0x26de9753c98 prev 0x26de95f6538 <line:1588:1, line:1592:1> line:1588:8 invalid struct nistp521_pre_comp_st definition
| |-FieldDecl 0x26de9753e08 <line:1589:5, col:27> col:11 referenced g_pre_comp 'felem [16][3]'
| |-FieldDecl 0x26de9753e78 <line:1590:5, col:9> col:9 referenced references 'int'
| `-FieldDecl 0x26de9753ee8 <line:1591:5, col:20> col:20 invalid lock 'int *'
|-FunctionDecl 0x26de9754010 <line:1594:1, line:1650:1> line:1594:18 invalid EC_GFp_nistp521_method 'const int *(void)'
| `-CompoundStmt 0x26de9754370 <line:1595:1, line:1650:1>
|   `-DeclStmt 0x26de9754328 <line:1596:5, line:1647:6>
|     `-VarDecl 0x26de97540e0 <line:1596:5, col:28> col:28 invalid ret 'const int' static
|-FunctionDecl 0x26de9754408 <line:1657:1, line:1675:1> line:1657:27 used nistp521_pre_comp_new 'NISTP521_PRE_COMP *()' static
| |-CompoundStmt 0x26de9744e90 <line:1658:1, line:1675:1>
| | |-DeclStmt 0x26de9754760 <line:1659:5, col:58>
| | | `-VarDecl 0x26de97544d0 <col:5, col:57> col:24 used ret 'NISTP521_PRE_COMP *' cinit
| | |   `-ImplicitCastExpr 0x26de9754748 <col:30, col:57> 'NISTP521_PRE_COMP *' <IntegralToPointer>
| | |     `-CallExpr 0x26de9754720 <col:30, col:57> 'int'
| | |       |-ImplicitCastExpr 0x26de9754708 <col:30> 'int (*)()' <FunctionToPointerDecay>
| | |       | `-DeclRefExpr 0x26de9754628 <col:30> 'int ()' Function 0x26de9754560 'OPENSSL_zalloc' 'int ()'
| | |       `-UnaryExprOrTypeTraitExpr 0x26de97546b8 <col:45, col:56> 'unsigned long long' sizeof
| | |         `-ParenExpr 0x26de9754698 <col:51, col:56> 'NISTP521_PRE_COMP':'struct nistp521_pre_comp_st' lvalue
| | |           `-UnaryOperator 0x26de9754680 <col:52, col:53> 'NISTP521_PRE_COMP':'struct nistp521_pre_comp_st' lvalue prefix '*' cannot overflow
| | |             `-ImplicitCastExpr 0x26de9754668 <col:53> 'NISTP521_PRE_COMP *' <LValueToRValue>
| | |               `-DeclRefExpr 0x26de9754648 <col:53> 'NISTP521_PRE_COMP *' lvalue Var 0x26de97544d0 'ret' 'NISTP521_PRE_COMP *' non_odr_use_unevaluated
| | |-IfStmt 0x26de9754908 <line:1661:5, line:1664:5>
| | | |-BinaryOperator 0x26de9754868 <line:1661:9, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27> 'int' '=='
| | | | |-ImplicitCastExpr 0x26de9754838 <.//openssl//file_jk/before\crypto\ec\ecp_nistp521.c:1661:9> 'NISTP521_PRE_COMP *' <LValueToRValue>
| | | | | `-DeclRefExpr 0x26de9754778 <col:9> 'NISTP521_PRE_COMP *' lvalue Var 0x26de97544d0 'ret' 'NISTP521_PRE_COMP *'
| | | | `-ImplicitCastExpr 0x26de9754850 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'NISTP521_PRE_COMP *' <BitCast>
| | | |   `-ParenExpr 0x26de9754818 <col:17, col:27> 'void *'
| | | |     `-CStyleCastExpr 0x26de97547f0 <col:18, col:26> 'void *' <NullToPointer>
| | | |       `-IntegerLiteral 0x26de97547b0 <col:26> 'int' 0
| | | `-CompoundStmt 0x26de97548f0 <.//openssl//file_jk/before\crypto\ec\ecp_nistp521.c:1661:22, line:1664:5>
| | |   `-ReturnStmt 0x26de97548e0 <line:1663:9, col:16>
| | |     `-ImplicitCastExpr 0x26de97548c8 <col:16> 'NISTP521_PRE_COMP *' <LValueToRValue>
| | |       `-DeclRefExpr 0x26de97548a8 <col:16> 'NISTP521_PRE_COMP *' lvalue Var 0x26de97544d0 'ret' 'NISTP521_PRE_COMP *'
| | |-BinaryOperator 0x26de97549b0 <line:1666:5, col:23> 'int' '='
| | | |-MemberExpr 0x26de9754958 <col:5, col:10> 'int' lvalue ->references 0x26de9753e78
| | | | `-ImplicitCastExpr 0x26de9754940 <col:5> 'NISTP521_PRE_COMP *' <LValueToRValue>
| | | |   `-DeclRefExpr 0x26de9754920 <col:5> 'NISTP521_PRE_COMP *' lvalue Var 0x26de97544d0 'ret' 'NISTP521_PRE_COMP *'
| | | `-IntegerLiteral 0x26de9754988 <col:23> 'int' 1
| | |-IfStmt 0x26de9744e30 <line:1669:5, line:1673:5>
| | | |-OpaqueValueExpr 0x26de9744e18 <<invalid sloc>> '_Bool'
| | | `-CompoundStmt 0x26de9744df8 <line:1669:28, line:1673:5>
| | |   |-CallExpr 0x26de9744d08 <line:1671:9, col:25> 'int'
| | |   | |-ImplicitCastExpr 0x26de9744cf0 <col:9> 'int (*)()' <FunctionToPointerDecay>
| | |   | | `-DeclRefExpr 0x26de9754d20 <col:9> 'int ()' Function 0x26de9754c58 'OPENSSL_free' 'int ()'
| | |   | `-ImplicitCastExpr 0x26de9744d30 <col:22> 'NISTP521_PRE_COMP *' <LValueToRValue>
| | |   |   `-DeclRefExpr 0x26de9754d40 <col:22> 'NISTP521_PRE_COMP *' lvalue Var 0x26de97544d0 'ret' 'NISTP521_PRE_COMP *'
| | |   `-ReturnStmt 0x26de9744de8 <line:1672:9, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27>
| | |     `-ImplicitCastExpr 0x26de9744dd0 <col:17, col:27> 'NISTP521_PRE_COMP *' <NullToPointer>
| | |       `-ParenExpr 0x26de9744db0 <col:17, col:27> 'void *'
| | |         `-CStyleCastExpr 0x26de9744d88 <col:18, col:26> 'void *' <NullToPointer>
| | |           `-IntegerLiteral 0x26de9744d48 <col:26> 'int' 0
| | `-ReturnStmt 0x26de9744e80 <.//openssl//file_jk/before\crypto\ec\ecp_nistp521.c:1674:5, col:12>
| |   `-ImplicitCastExpr 0x26de9744e68 <col:12> 'NISTP521_PRE_COMP *' <LValueToRValue>
| |     `-DeclRefExpr 0x26de9744e48 <col:12> 'NISTP521_PRE_COMP *' lvalue Var 0x26de97544d0 'ret' 'NISTP521_PRE_COMP *'
| `-FullComment 0x26de975ea88 <line:1652:4, col:78>
|   `-ParagraphComment 0x26de975ea60 <col:4, col:78>
|     `-TextComment 0x26de975ea38 <col:4, col:78> Text="***************************************************************************"
|-FunctionDecl 0x26de9744f80 prev 0x26de95f8088 <line:1677:1, line:1683:1> line:1677:20 EC_nistp521_pre_comp_dup 'NISTP521_PRE_COMP *(NISTP521_PRE_COMP *)'
| |-ParmVarDecl 0x26de9744ed8 <col:45, col:64> col:64 used p 'NISTP521_PRE_COMP *'
| `-CompoundStmt 0x26de9745440 <line:1678:1, line:1683:1>
|   |-DeclStmt 0x26de97450a8 <line:1679:5, col:10>
|   | `-VarDecl 0x26de9745040 <col:5, col:9> col:9 used i 'int'
|   `-ReturnStmt 0x26de9745430 <line:1682:5, col:12>
|     `-ImplicitCastExpr 0x26de9745418 <col:12> 'NISTP521_PRE_COMP *' <LValueToRValue>
|       `-DeclRefExpr 0x26de97453f8 <col:12> 'NISTP521_PRE_COMP *' lvalue ParmVar 0x26de9744ed8 'p' 'NISTP521_PRE_COMP *'
|-FunctionDecl 0x26de9745518 prev 0x26de95f1bc8 <line:1685:1, line:1700:1> line:1685:6 used EC_nistp521_pre_comp_free 'void (NISTP521_PRE_COMP *)'
| |-ParmVarDecl 0x26de9745470 <col:32, col:51> col:51 used p 'NISTP521_PRE_COMP *'
| `-CompoundStmt 0x26de9745ed8 <line:1686:1, line:1700:1>
|   |-DeclStmt 0x26de9745640 <line:1687:5, col:10>
|   | `-VarDecl 0x26de97455d8 <col:5, col:9> col:9 used i 'int'
|   |-IfStmt 0x26de9745760 <line:1689:5, line:1690:9>
|   | |-BinaryOperator 0x26de9745730 <line:1689:9, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27> 'int' '=='
|   | | |-ImplicitCastExpr 0x26de9745700 <.//openssl//file_jk/before\crypto\ec\ecp_nistp521.c:1689:9> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de9745658 <col:9> 'NISTP521_PRE_COMP *' lvalue ParmVar 0x26de9745470 'p' 'NISTP521_PRE_COMP *'
|   | | `-ImplicitCastExpr 0x26de9745718 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'NISTP521_PRE_COMP *' <BitCast>
|   | |   `-ParenExpr 0x26de97456e0 <col:17, col:27> 'void *'
|   | |     `-CStyleCastExpr 0x26de97456b8 <col:18, col:26> 'void *' <NullToPointer>
|   | |       `-IntegerLiteral 0x26de9745678 <col:26> 'int' 0
|   | `-ReturnStmt 0x26de9745750 <.//openssl//file_jk/before\crypto\ec\ecp_nistp521.c:1690:9>
|   |-IfStmt 0x26de9745ae0 <line:1694:5, line:1695:9>
|   | |-BinaryOperator 0x26de9745ab0 <line:1694:9, col:13> 'int' '>'
|   | | |-ImplicitCastExpr 0x26de9745a98 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de9745a50 <col:9> 'int' lvalue Var 0x26de97455d8 'i' 'int'
|   | | `-IntegerLiteral 0x26de9745a70 <col:13> 'int' 0
|   | `-ReturnStmt 0x26de9745ad0 <line:1695:9>
|   |-CallExpr 0x26de9745ca0 <line:1696:5, col:26> 'int'
|   | |-ImplicitCastExpr 0x26de9745c88 <col:5> 'int (*)()' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de9745be8 <col:5> 'int ()' Function 0x26de9745b20 'REF_ASSERT_ISNT' 'int ()'
|   | `-BinaryOperator 0x26de9745c68 <col:21, col:25> 'int' '<'
|   |   |-ImplicitCastExpr 0x26de9745c50 <col:21> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x26de9745c08 <col:21> 'int' lvalue Var 0x26de97455d8 'i' 'int'
|   |   `-IntegerLiteral 0x26de9745c28 <col:25> 'int' 0
|   `-CallExpr 0x26de9745e68 <line:1699:5, col:19> 'int'
|     |-ImplicitCastExpr 0x26de9745e50 <col:5> 'int (*)()' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x26de9745e10 <col:5> 'int ()' Function 0x26de9754c58 'OPENSSL_free' 'int ()'
|     `-ImplicitCastExpr 0x26de9745e90 <col:18> 'NISTP521_PRE_COMP *' <LValueToRValue>
|       `-DeclRefExpr 0x26de9745e30 <col:18> 'NISTP521_PRE_COMP *' lvalue ParmVar 0x26de9745470 'p' 'NISTP521_PRE_COMP *'
|-FunctionDecl 0x26de9745fc0 <line:1707:1, line:1713:1> line:1707:5 invalid ec_GFp_nistp521_group_init 'int (int *)'
| |-ParmVarDecl 0x26de9745f28 <col:32, col:42> col:42 invalid group 'int *'
| |-CompoundStmt 0x26de97461c0 <line:1708:1, line:1713:1>
| | |-DeclStmt 0x26de9746100 <line:1709:5, col:12>
| | | `-VarDecl 0x26de9746098 <col:5, col:9> col:9 used ret 'int'
| | `-ReturnStmt 0x26de97461b0 <line:1712:5, col:12>
| |   `-ImplicitCastExpr 0x26de9746198 <col:12> 'int' <LValueToRValue>
| |     `-DeclRefExpr 0x26de9746178 <col:12> 'int' lvalue Var 0x26de9746098 'ret' 'int'
| `-FullComment 0x26de975eb50 <line:1702:4, col:78>
|   `-ParagraphComment 0x26de975eb28 <col:4, col:78>
|     `-TextComment 0x26de975eb00 <col:4, col:78> Text="***************************************************************************"
|-FunctionDecl 0x26de97464b0 <line:1715:1, line:1745:1> line:1715:5 invalid ec_GFp_nistp521_group_set_curve 'int (int *, const int *, const int *, const int *, int *)'
| |-ParmVarDecl 0x26de97461f8 <col:37, col:47> col:47 invalid group 'int *'
| |-ParmVarDecl 0x26de9746278 <col:54, col:68> col:68 invalid p 'const int *'
| |-ParmVarDecl 0x26de97462f8 <line:1716:37, col:51> col:51 invalid a 'const int *'
| |-ParmVarDecl 0x26de9746378 <col:54, col:68> col:68 invalid b 'const int *'
| |-ParmVarDecl 0x26de97463f8 <line:1717:37, col:45> col:45 invalid ctx 'int *'
| `-CompoundStmt 0x26de97555f8 <line:1718:1, line:1745:1>
|   |-DeclStmt 0x26de9746638 <line:1719:5, col:16>
|   | `-VarDecl 0x26de97465a8 <col:5, col:15> col:9 used ret 'int' cinit
|   |   `-IntegerLiteral 0x26de9746610 <col:15> 'int' 0
|   |-IfStmt 0x26de97469b0 <line:1723:5, line:1725:20>
|   | |-OpaqueValueExpr 0x26de9746998 <<invalid sloc>> '_Bool'
|   | `-IfStmt 0x26de9746980 <line:1724:9, line:1725:20>
|   |   |-OpaqueValueExpr 0x26de9746968 <<invalid sloc>> '_Bool'
|   |   `-ReturnStmt 0x26de9746958 <col:13, col:20>
|   |     `-IntegerLiteral 0x26de9746930 <col:20> 'int' 0
|   |-IfStmt 0x26de9754ee0 <line:1727:5, line:1730:14>
|   | |-OpaqueValueExpr 0x26de9754ec8 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x26de9754eb0 <col:9, col:14> 'err' 0x26de9754e60
|   |-IfStmt 0x26de9755320 <line:1734:5, line:1738:5>
|   | |-OpaqueValueExpr 0x26de9755308 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x26de97552f0 <line:1734:79, line:1738:5>
|   |   `-GotoStmt 0x26de97552d8 <line:1737:9, col:14> 'err' 0x26de9754e60
|   |-LabelStmt 0x26de9755488 <line:1741:2, col:5> 'err'
|   | `-NullStmt 0x26de9755480 <col:5>
|   `-ReturnStmt 0x26de97555e8 <line:1744:5, col:12>
|     `-ImplicitCastExpr 0x26de97555d0 <col:12> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x26de97555b0 <col:12> 'int' lvalue Var 0x26de97465a8 'ret' 'int'
|-FunctionDecl 0x26de9755908 <line:1751:1, line:1793:1> line:1751:5 invalid ec_GFp_nistp521_point_get_affine_coordinates 'int (const int *, const int *, int *, int *, int *)'
| |-ParmVarDecl 0x26de9755650 <col:50, col:66> col:66 invalid group 'const int *'
| |-ParmVarDecl 0x26de97556d0 <line:1752:50, col:66> col:66 invalid point 'const int *'
| |-ParmVarDecl 0x26de9755750 <line:1753:50, col:58> col:58 invalid x 'int *'
| |-ParmVarDecl 0x26de97557d0 <col:61, col:69> col:69 invalid y 'int *'
| |-ParmVarDecl 0x26de9755850 <line:1754:50, col:58> col:58 invalid ctx 'int *'
| `-CompoundStmt 0x26de9756f78 <line:1755:1, line:1793:1>
|   |-DeclStmt 0x26de9755cf0 <line:1756:5, col:43>
|   | |-VarDecl 0x26de97559f8 <col:5, col:11> col:11 used z1 'felem':'limb [9]'
|   | |-VarDecl 0x26de9755a70 <col:5, col:15> col:15 used z2 'felem':'limb [9]'
|   | |-VarDecl 0x26de9755ae8 <col:5, col:19> col:19 used x_in 'felem':'limb [9]'
|   | |-VarDecl 0x26de9755b60 <col:5, col:25> col:25 used y_in 'felem':'limb [9]'
|   | |-VarDecl 0x26de9755bd8 <col:5, col:31> col:31 used x_out 'felem':'limb [9]'
|   | `-VarDecl 0x26de9755c50 <col:5, col:38> col:38 used y_out 'felem':'limb [9]'
|   |-DeclStmt 0x26de9755d80 <line:1757:5, col:19>
|   | `-VarDecl 0x26de9755d18 <col:5, col:16> col:16 used tmp 'largefelem':'int [9]'
|   |-IfStmt 0x26de9755f30 <line:1759:5, line:1763:5>
|   | |-OpaqueValueExpr 0x26de9755f18 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x26de9755f00 <line:1759:48, line:1763:5>
|   |   `-ReturnStmt 0x26de9755ef0 <line:1762:9, col:16>
|   |     `-IntegerLiteral 0x26de9755ec8 <col:16> 'int' 0
|   |-IfStmt 0x26de9756040 <line:1764:5, line:1766:16>
|   | |-OpaqueValueExpr 0x26de9756028 <<invalid sloc>> '_Bool'
|   | `-ReturnStmt 0x26de9756018 <col:9, col:16>
|   |   `-IntegerLiteral 0x26de9755ff0 <col:16> 'int' 0
|   |-CallExpr 0x26de97560e8 <line:1767:5, col:21> 'void'
|   | |-ImplicitCastExpr 0x26de97560d0 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de9756058 <col:5> 'void (limb *, const limb *)' Function 0x26de9667168 'felem_inv' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x26de9756118 <col:15> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de9756078 <col:15> 'felem':'limb [9]' lvalue Var 0x26de9755a70 'z2' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x26de9756148 <col:19> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de9756130 <col:19> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x26de97560b0 <col:19> 'felem':'limb [9]' lvalue Var 0x26de97559f8 'z1' 'felem':'limb [9]'
|   |-CallExpr 0x26de97561f0 <line:1768:5, col:25> 'void'
|   | |-ImplicitCastExpr 0x26de97561d8 <col:5> 'void (*)(int *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de9756160 <col:5> 'void (int *, const limb *)' Function 0x26de959e190 'felem_square' 'void (int *, const limb *)'
|   | |-ImplicitCastExpr 0x26de9756220 <col:18> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de9756180 <col:18> 'largefelem':'int [9]' lvalue Var 0x26de9755d18 'tmp' 'largefelem':'int [9]'
|   | `-ImplicitCastExpr 0x26de9756250 <col:23> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de9756238 <col:23> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x26de97561b8 <col:23> 'felem':'limb [9]' lvalue Var 0x26de9755a70 'z2' 'felem':'limb [9]'
|   |-CallExpr 0x26de97562e0 <line:1769:5, col:25> 'void'
|   | |-ImplicitCastExpr 0x26de97562c8 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de9756268 <col:5> 'void (limb *, const int *)' Function 0x26de95a3de8 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x26de9756310 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de9756288 <col:18> 'felem':'limb [9]' lvalue Var 0x26de97559f8 'z1' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x26de9756340 <col:22> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de9756328 <col:22> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x26de97562a8 <col:22> 'largefelem':'int [9]' lvalue Var 0x26de9755d18 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x26de97563f0 <line:1770:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x26de97563d8 <col:5> 'void (*)(int *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de9756358 <col:5> 'void (int *, const limb *, const limb *)' Function 0x26de95a07c8 'felem_mul' 'void (int *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x26de9756428 <col:15> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de9756378 <col:15> 'largefelem':'int [9]' lvalue Var 0x26de9755d18 'tmp' 'largefelem':'int [9]'
|   | |-ImplicitCastExpr 0x26de9756458 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x26de9756440 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x26de9756398 <col:20> 'felem':'limb [9]' lvalue Var 0x26de9755ae8 'x_in' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x26de9756488 <col:26> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de9756470 <col:26> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x26de97563b8 <col:26> 'felem':'limb [9]' lvalue Var 0x26de97559f8 'z1' 'felem':'limb [9]'
|   |-CallExpr 0x26de9756518 <line:1771:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x26de9756500 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de97564a0 <col:5> 'void (limb *, const int *)' Function 0x26de95a3de8 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x26de9756548 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de97564c0 <col:18> 'felem':'limb [9]' lvalue Var 0x26de9755ae8 'x_in' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x26de9756578 <col:24> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de9756560 <col:24> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x26de97564e0 <col:24> 'largefelem':'int [9]' lvalue Var 0x26de9755d18 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x26de9756620 <line:1772:5, col:31> 'void'
|   | |-ImplicitCastExpr 0x26de9756608 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de9756590 <col:5> 'void (limb *, const limb *)' Function 0x26de96628f0 'felem_contract' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x26de9756650 <col:20> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de97565b0 <col:20> 'felem':'limb [9]' lvalue Var 0x26de9755bd8 'x_out' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x26de9756680 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de9756668 <col:27> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x26de97565e8 <col:27> 'felem':'limb [9]' lvalue Var 0x26de9755ae8 'x_in' 'felem':'limb [9]'
|   |-IfStmt 0x26de9756810 <line:1773:5, line:1779:5>
|   | |-OpaqueValueExpr 0x26de97567f8 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x26de97567e0 <line:1773:20, line:1779:5>
|   |   `-IfStmt 0x26de97567c8 <line:1774:9, line:1778:9>
|   |     |-OpaqueValueExpr 0x26de97567b0 <<invalid sloc>> '_Bool'
|   |     `-CompoundStmt 0x26de9756798 <line:1774:37, line:1778:9>
|   |       `-ReturnStmt 0x26de9756788 <line:1777:13, col:20>
|   |         `-IntegerLiteral 0x26de9756760 <col:20> 'int' 0
|   |-CallExpr 0x26de97568c0 <line:1780:5, col:26> 'void'
|   | |-ImplicitCastExpr 0x26de97568a8 <col:5> 'void (*)(int *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de9756828 <col:5> 'void (int *, const limb *, const limb *)' Function 0x26de95a07c8 'felem_mul' 'void (int *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x26de97568f8 <col:15> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de9756848 <col:15> 'largefelem':'int [9]' lvalue Var 0x26de9755d18 'tmp' 'largefelem':'int [9]'
|   | |-ImplicitCastExpr 0x26de9756928 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x26de9756910 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x26de9756868 <col:20> 'felem':'limb [9]' lvalue Var 0x26de97559f8 'z1' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x26de9756958 <col:24> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de9756940 <col:24> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x26de9756888 <col:24> 'felem':'limb [9]' lvalue Var 0x26de9755a70 'z2' 'felem':'limb [9]'
|   |-CallExpr 0x26de97569e8 <line:1781:5, col:25> 'void'
|   | |-ImplicitCastExpr 0x26de97569d0 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de9756970 <col:5> 'void (limb *, const int *)' Function 0x26de95a3de8 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x26de9756a18 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de9756990 <col:18> 'felem':'limb [9]' lvalue Var 0x26de97559f8 'z1' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x26de9756a48 <col:22> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de9756a30 <col:22> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x26de97569b0 <col:22> 'largefelem':'int [9]' lvalue Var 0x26de9755d18 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x26de9756af8 <line:1782:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x26de9756ae0 <col:5> 'void (*)(int *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de9756a60 <col:5> 'void (int *, const limb *, const limb *)' Function 0x26de95a07c8 'felem_mul' 'void (int *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x26de9756b30 <col:15> 'int *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de9756a80 <col:15> 'largefelem':'int [9]' lvalue Var 0x26de9755d18 'tmp' 'largefelem':'int [9]'
|   | |-ImplicitCastExpr 0x26de9756b60 <col:20> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x26de9756b48 <col:20> 'limb *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x26de9756aa0 <col:20> 'felem':'limb [9]' lvalue Var 0x26de9755b60 'y_in' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x26de9756b90 <col:26> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de9756b78 <col:26> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x26de9756ac0 <col:26> 'felem':'limb [9]' lvalue Var 0x26de97559f8 'z1' 'felem':'limb [9]'
|   |-CallExpr 0x26de9756c20 <line:1783:5, col:27> 'void'
|   | |-ImplicitCastExpr 0x26de9756c08 <col:5> 'void (*)(limb *, const int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de9756ba8 <col:5> 'void (limb *, const int *)' Function 0x26de95a3de8 'felem_reduce' 'void (limb *, const int *)'
|   | |-ImplicitCastExpr 0x26de9756c50 <col:18> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de9756bc8 <col:18> 'felem':'limb [9]' lvalue Var 0x26de9755b60 'y_in' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x26de9756c80 <col:24> 'const int *':'const int *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de9756c68 <col:24> 'int *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x26de9756be8 <col:24> 'largefelem':'int [9]' lvalue Var 0x26de9755d18 'tmp' 'largefelem':'int [9]'
|   |-CallExpr 0x26de9756d28 <line:1784:5, col:31> 'void'
|   | |-ImplicitCastExpr 0x26de9756d10 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de9756c98 <col:5> 'void (limb *, const limb *)' Function 0x26de96628f0 'felem_contract' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x26de9756d58 <col:20> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de9756cb8 <col:20> 'felem':'limb [9]' lvalue Var 0x26de9755c50 'y_out' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x26de9756d98 <col:27> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de9756d80 <col:27> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x26de9756cf0 <col:27> 'felem':'limb [9]' lvalue Var 0x26de9755b60 'y_in' 'felem':'limb [9]'
|   |-IfStmt 0x26de9756f28 <line:1785:5, line:1791:5>
|   | |-OpaqueValueExpr 0x26de9756f10 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x26de9756ef8 <line:1785:20, line:1791:5>
|   |   `-IfStmt 0x26de9756ee0 <line:1786:9, line:1790:9>
|   |     |-OpaqueValueExpr 0x26de9756ec8 <<invalid sloc>> '_Bool'
|   |     `-CompoundStmt 0x26de9756eb0 <line:1786:37, line:1790:9>
|   |       `-ReturnStmt 0x26de9756ea0 <line:1789:13, col:20>
|   |         `-IntegerLiteral 0x26de9756e78 <col:20> 'int' 0
|   `-ReturnStmt 0x26de9756f68 <line:1792:5, col:12>
|     `-IntegerLiteral 0x26de9756f40 <col:12> 'int' 1
|-FunctionDecl 0x26de9757448 <line:1796:1, line:1823:1> line:1796:13 used make_points_affine 'void (size_t, felem (*)[3], felem *)' static
| |-ParmVarDecl 0x26de9757028 <col:32, col:39> col:39 used num 'size_t':'unsigned long long'
| |-ParmVarDecl 0x26de97571c0 <col:44, col:60> col:50 used points 'felem (*)[3]':'felem (*)[3]'
| |-ParmVarDecl 0x26de97572e0 <line:1797:32, col:49> col:38 used tmp_felems 'felem *':'felem *'
| `-CompoundStmt 0x26de9758178 <line:1798:1, line:1823:1>
|   `-CallExpr 0x26de9758070 <line:1803:5, line:1822:60> 'void'
|     |-ImplicitCastExpr 0x26de9758058 <line:1803:5> 'void (*)(size_t, void *, size_t, void *, void (*)(void *), int (*)(const void *), void (*)(void *, const void *), void (*)(void *, const void *), void (*)(void *, const void *, const void *), void (*)(void *, const void *), void (*)(void *, const void *))' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x26de9757518 <col:5> 'void (size_t, void *, size_t, void *, void (*)(void *), int (*)(const void *), void (*)(void *, const void *), void (*)(void *, const void *), void (*)(void *, const void *, const void *), void (*)(void *, const void *), void (*)(void *, const void *))' Function 0x26de956dff8 'ec_GFp_nistp_points_make_affine_internal' 'void (size_t, void *, size_t, void *, void (*)(void *), int (*)(const void *), void (*)(void *, const void *), void (*)(void *, const void *), void (*)(void *, const void *, const void *), void (*)(void *, const void *), void (*)(void *, const void *))'
|     |-ImplicitCastExpr 0x26de97580e8 <col:46> 'size_t':'unsigned long long' <LValueToRValue>
|     | `-DeclRefExpr 0x26de9757538 <col:46> 'size_t':'unsigned long long' lvalue ParmVar 0x26de9757028 'num' 'size_t':'unsigned long long'
|     |-ImplicitCastExpr 0x26de9758118 <line:1804:46> 'void *' <BitCast>
|     | `-ImplicitCastExpr 0x26de9758100 <col:46> 'felem (*)[3]':'felem (*)[3]' <LValueToRValue>
|     |   `-DeclRefExpr 0x26de9757558 <col:46> 'felem (*)[3]':'felem (*)[3]' lvalue ParmVar 0x26de97571c0 'points' 'felem (*)[3]':'felem (*)[3]'
|     |-UnaryExprOrTypeTraitExpr 0x26de9757588 <line:1805:46, col:58> 'unsigned long long' sizeof 'felem':'limb [9]'
|     |-ImplicitCastExpr 0x26de9758148 <line:1806:46> 'void *' <BitCast>
|     | `-ImplicitCastExpr 0x26de9758130 <col:46> 'felem *':'felem *' <LValueToRValue>
|     |   `-DeclRefExpr 0x26de97575a8 <col:46> 'felem *':'felem *' lvalue ParmVar 0x26de97572e0 'tmp_felems' 'felem *':'felem *'
|     |-CStyleCastExpr 0x26de97576e0 <line:1807:46, col:64> 'void (*)(void *)' <BitCast>
|     | `-ImplicitCastExpr 0x26de97576c8 <col:64> 'void (*)(limb *)' <FunctionToPointerDecay> part_of_explicit_cast
|     |   `-DeclRefExpr 0x26de9757648 <col:64> 'void (limb *)' Function 0x26de9594208 'felem_one' 'void (limb *)'
|     |-ImplicitCastExpr 0x26de9758160 <line:1808:46> 'int (*)(const void *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x26de9757708 <col:46> 'int (const void *)' Function 0x26de96624b8 'felem_is_zero_int' 'int (const void *)'
|     |-CStyleCastExpr 0x26de97578a0 <line:1809:46, line:1810:46> 'void (*)(void *, const void *)' <BitCast>
|     | `-ImplicitCastExpr 0x26de9757888 <col:46> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay> part_of_explicit_cast
|     |   `-DeclRefExpr 0x26de9757828 <col:46> 'void (limb *, const limb *)' Function 0x26de9594bb8 'felem_assign' 'void (limb *, const limb *)'
|     |-CStyleCastExpr 0x26de9757a40 <line:1811:46, line:1812:46> 'void (*)(void *, const void *)' <BitCast>
|     | `-ImplicitCastExpr 0x26de9757a28 <col:46> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay> part_of_explicit_cast
|     |   `-DeclRefExpr 0x26de97579c8 <col:46> 'void (limb *, const limb *)' Function 0x26de9666640 'felem_square_reduce' 'void (limb *, const limb *)'
|     |-CStyleCastExpr 0x26de9757c90 <col:67, line:1818:46> 'void (*)(void *, const void *, const void *)' <BitCast>
|     | `-ImplicitCastExpr 0x26de9757c78 <col:46> 'void (*)(limb *, const limb *, const limb *)' <FunctionToPointerDecay> part_of_explicit_cast
|     |   `-DeclRefExpr 0x26de9757be8 <col:46> 'void (limb *, const limb *, const limb *)' Function 0x26de9666c18 'felem_mul_reduce' 'void (limb *, const limb *, const limb *)'
|     |-CStyleCastExpr 0x26de9757e30 <line:1819:46, line:1820:46> 'void (*)(void *, const void *)' <BitCast>
|     | `-ImplicitCastExpr 0x26de9757e18 <col:46> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay> part_of_explicit_cast
|     |   `-DeclRefExpr 0x26de9757db8 <col:46> 'void (limb *, const limb *)' Function 0x26de9667168 'felem_inv' 'void (limb *, const limb *)'
|     `-CStyleCastExpr 0x26de9757fd0 <line:1821:46, line:1822:46> 'void (*)(void *, const void *)' <BitCast>
|       `-ImplicitCastExpr 0x26de9757fb8 <col:46> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay> part_of_explicit_cast
|         `-DeclRefExpr 0x26de9757f58 <col:46> 'void (limb *, const limb *)' Function 0x26de96628f0 'felem_contract' 'void (limb *, const limb *)'
|-FunctionDecl 0x26de9758588 <line:1829:1, line:2027:1> line:1829:5 invalid ec_GFp_nistp521_points_mul 'int (const int *, int *, const int *, size_t, const int **, const int **, int *)'
| |-ParmVarDecl 0x26de97581a8 <col:32, col:48> col:48 invalid group 'const int *'
| |-ParmVarDecl 0x26de9758228 <col:55, col:65> col:65 invalid r 'int *'
| |-ParmVarDecl 0x26de97582a8 <line:1830:32, col:46> col:46 invalid scalar 'const int *'
| |-ParmVarDecl 0x26de9758320 <col:54, col:61> col:61 used num 'size_t':'unsigned long long'
| |-ParmVarDecl 0x26de97583b0 <line:1831:32, <invalid sloc>> col:48 invalid points 'const int **':'const int **'
| |-ParmVarDecl 0x26de9758440 <line:1832:32, <invalid sloc>> col:46 invalid scalars 'const int **':'const int **'
| |-ParmVarDecl 0x26de97584c0 <col:57, col:65> col:65 invalid ctx 'int *'
| `-CompoundStmt 0x26de975c7b0 <line:1833:1, line:2027:1>
|   |-DeclStmt 0x26de9758720 <line:1834:5, col:16>
|   | `-VarDecl 0x26de9758690 <col:5, col:15> col:9 used ret 'int' cinit
|   |   `-IntegerLiteral 0x26de97586f8 <col:15> 'int' 0
|   |-DeclStmt 0x26de97587b8 <line:1835:5, col:10>
|   | `-VarDecl 0x26de9758750 <col:5, col:9> col:9 used j 'int'
|   |-DeclStmt 0x26de9758878 <line:1836:5, col:18>
|   | `-VarDecl 0x26de97587e8 <col:5, col:17> col:9 used mixed 'int' cinit
|   |   `-IntegerLiteral 0x26de9758850 <col:17> 'int' 0
|   |-DeclStmt 0x26de9758990 <line:1839:5, col:29>
|   | `-VarDecl 0x26de9758928 <col:5, col:21> col:21 used g_secret 'felem_bytearray':'u8 [66]'
|   |-DeclStmt 0x26de9758b20 <line:1840:5, col:36>
|   | `-VarDecl 0x26de9758a18 <col:5, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27> .//openssl//file_jk/before\crypto\ec\ecp_nistp521.c:1840:22 used secrets 'felem_bytearray *' cinit
|   |   `-ImplicitCastExpr 0x26de9758b08 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'felem_bytearray *' <NullToPointer>
|   |     `-ParenExpr 0x26de9758ae8 <col:17, col:27> 'void *'
|   |       `-CStyleCastExpr 0x26de9758ac0 <col:18, col:26> 'void *' <NullToPointer>
|   |         `-IntegerLiteral 0x26de9758a80 <col:26> 'int' 0
|   |-DeclStmt 0x26de9748d70 <.//openssl//file_jk/before\crypto\ec\ecp_nistp521.c:1841:5, col:36>
|   | `-VarDecl 0x26de9758cc8 <col:5, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27> .//openssl//file_jk/before\crypto\ec\ecp_nistp521.c:1841:13 used pre_comp 'felem (*)[17][3]' cinit
|   |   `-ImplicitCastExpr 0x26de9748d58 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'felem (*)[17][3]' <NullToPointer>
|   |     `-ParenExpr 0x26de9748d38 <col:17, col:27> 'void *'
|   |       `-CStyleCastExpr 0x26de9748d10 <col:18, col:26> 'void *' <NullToPointer>
|   |         `-IntegerLiteral 0x26de9758d30 <col:26> 'int' 0
|   |-DeclStmt 0x26de9748ea0 <.//openssl//file_jk/before\crypto\ec\ecp_nistp521.c:1842:5, col:29>
|   | `-VarDecl 0x26de9748d98 <col:5, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27> .//openssl//file_jk/before\crypto\ec\ecp_nistp521.c:1842:12 used tmp_felems 'felem *' cinit
|   |   `-ImplicitCastExpr 0x26de9748e88 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'felem *' <NullToPointer>
|   |     `-ParenExpr 0x26de9748e68 <col:17, col:27> 'void *'
|   |       `-CStyleCastExpr 0x26de9748e40 <col:18, col:26> 'void *' <NullToPointer>
|   |         `-IntegerLiteral 0x26de9748e00 <col:26> 'int' 0
|   |-DeclStmt 0x26de9748f30 <.//openssl//file_jk/before\crypto\ec\ecp_nistp521.c:1843:5, col:24>
|   | `-VarDecl 0x26de9748ec8 <col:5, col:21> col:21 used tmp 'felem_bytearray':'u8 [66]'
|   |-DeclStmt 0x26de9749060 <line:1844:5, col:26>
|   | |-VarDecl 0x26de9748f60 <col:5, col:14> col:14 used i 'unsigned int'
|   | `-VarDecl 0x26de9748fe0 <col:5, col:17> col:17 used num_bytes 'unsigned int'
|   |-DeclStmt 0x26de9749120 <line:1845:5, col:26>
|   | `-VarDecl 0x26de9749090 <col:5, col:25> col:9 used have_pre_comp 'int' cinit
|   |   `-IntegerLiteral 0x26de97490f8 <col:25> 'int' 0
|   |-DeclStmt 0x26de9749200 <line:1846:5, col:28>
|   | `-VarDecl 0x26de9749148 <col:5, col:25> col:12 used num_points 'size_t':'unsigned long long' cinit
|   |   `-ImplicitCastExpr 0x26de97491e8 <col:25> 'size_t':'unsigned long long' <LValueToRValue>
|   |     `-DeclRefExpr 0x26de97491b0 <col:25> 'size_t':'unsigned long long' lvalue ParmVar 0x26de9758320 'num' 'size_t':'unsigned long long'
|   |-DeclStmt 0x26de9749520 <line:1847:5, col:48>
|   | |-VarDecl 0x26de9749228 <col:5, col:11> col:11 used x_in 'felem':'limb [9]'
|   | |-VarDecl 0x26de97492a0 <col:5, col:17> col:17 used y_in 'felem':'limb [9]'
|   | |-VarDecl 0x26de9749318 <col:5, col:23> col:23 used z_in 'felem':'limb [9]'
|   | |-VarDecl 0x26de9749390 <col:5, col:29> col:29 used x_out 'felem':'limb [9]'
|   | |-VarDecl 0x26de9749408 <col:5, col:36> col:36 used y_out 'felem':'limb [9]'
|   | `-VarDecl 0x26de9749480 <col:5, col:43> col:43 used z_out 'felem':'limb [9]'
|   |-DeclStmt 0x26de9749650 <line:1848:5, col:34>
|   | `-VarDecl 0x26de9749548 <col:5, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27> .//openssl//file_jk/before\crypto\ec\ecp_nistp521.c:1848:24 used pre 'NISTP521_PRE_COMP *' cinit
|   |   `-ImplicitCastExpr 0x26de9749638 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'NISTP521_PRE_COMP *' <NullToPointer>
|   |     `-ParenExpr 0x26de9749618 <col:17, col:27> 'void *'
|   |       `-CStyleCastExpr 0x26de97495f0 <col:18, col:26> 'void *' <NullToPointer>
|   |         `-IntegerLiteral 0x26de97495b0 <col:26> 'int' 0
|   |-DeclStmt 0x26de9749840 <.//openssl//file_jk/before\crypto\ec\ecp_nistp521.c:1849:5, col:33>
|   | `-VarDecl 0x26de9749738 <col:5, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27> .//openssl//file_jk/before\crypto\ec\ecp_nistp521.c:1849:12 used g_pre_comp 'felem (*)[3]' cinit
|   |   `-ImplicitCastExpr 0x26de9749828 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'felem (*)[3]' <NullToPointer>
|   |     `-ParenExpr 0x26de9749808 <col:17, col:27> 'void *'
|   |       `-CStyleCastExpr 0x26de97497e0 <col:18, col:26> 'void *' <NullToPointer>
|   |         `-IntegerLiteral 0x26de97497a0 <col:26> 'int' 0
|   |-DeclStmt 0x26de97499e8 <.//openssl//file_jk/before\crypto\ec\ecp_nistp521.c:1851:5, col:29>
|   | `-VarDecl 0x26de97498f8 <col:5, col:21> col:21 invalid p 'const int *'
|   |-DeclStmt 0x26de9749b08 <line:1852:5, col:34>
|   | `-VarDecl 0x26de9749a18 <col:5, col:19> col:19 invalid p_scalar 'const int *'
|   |-IfStmt 0x26de9749d08 <line:1854:5, line:1856:20>
|   | |-OpaqueValueExpr 0x26de9749cf0 <<invalid sloc>> '_Bool'
|   | `-IfStmt 0x26de9749cd8 <line:1855:9, line:1856:20>
|   |   |-OpaqueValueExpr 0x26de9749cc0 <<invalid sloc>> '_Bool'
|   |   `-ReturnStmt 0x26de9749cb0 <col:13, col:20>
|   |     `-IntegerLiteral 0x26de9749c88 <col:20> 'int' 0
|   |-IfStmt 0x26de974a060 <line:1858:5, line:1862:14>
|   | |-OpaqueValueExpr 0x26de974a048 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x26de974a030 <col:9, col:14> 'err' 0x26de9749fe0
|   |-IfStmt 0x26de9760dd0 <line:1864:5, line:1895:5>
|   | |-OpaqueValueExpr 0x26de974acf0 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x26de974acb8 <line:1864:25, line:1895:5>
|   |   |-IfStmt 0x26de974a3f0 <line:1866:9, line:1871:40> has_else
|   |   | |-ImplicitCastExpr 0x26de974a158 <line:1866:13> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x26de974a138 <col:13> 'NISTP521_PRE_COMP *' lvalue Var 0x26de9749548 'pre' 'NISTP521_PRE_COMP *'
|   |   | |-BinaryOperator 0x26de974a288 <line:1868:13, col:44> 'felem (*)[3]' '='
|   |   | | |-DeclRefExpr 0x26de974a170 <col:13> 'felem (*)[3]' lvalue Var 0x26de9749738 'g_pre_comp' 'felem (*)[3]'
|   |   | | `-UnaryOperator 0x26de974a270 <col:26, col:44> 'felem (*)[3]' prefix '&' cannot overflow
|   |   | |   `-ArraySubscriptExpr 0x26de974a250 <col:27, col:44> 'felem [3]' lvalue
|   |   | |     |-ImplicitCastExpr 0x26de974a238 <col:27, col:32> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   | |     | `-MemberExpr 0x26de974a1e0 <col:27, col:32> 'felem [16][3]' lvalue ->g_pre_comp 0x26de9753e08
|   |   | |     |   `-ImplicitCastExpr 0x26de974a1c8 <col:27> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   |   | |     |     `-DeclRefExpr 0x26de974a1a8 <col:27> 'NISTP521_PRE_COMP *' lvalue Var 0x26de9749548 'pre' 'NISTP521_PRE_COMP *'
|   |   | |     `-IntegerLiteral 0x26de974a210 <col:43> 'int' 0
|   |   | `-BinaryOperator 0x26de974a3d0 <line:1871:13, col:40> 'felem (*)[3]' '='
|   |   |   |-DeclRefExpr 0x26de974a2a8 <col:13> 'felem (*)[3]' lvalue Var 0x26de9749738 'g_pre_comp' 'felem (*)[3]'
|   |   |   `-CStyleCastExpr 0x26de974a3a8 <col:26, col:40> 'felem (*)[3]' <NoOp>
|   |   |     `-ImplicitCastExpr 0x26de974a358 <col:40> 'const felem (*)[3]' <ArrayToPointerDecay> part_of_explicit_cast
|   |   |       `-DeclRefExpr 0x26de974a2f0 <col:40> 'const felem [16][3]' lvalue Var 0x26de9679228 'gmul' 'const felem [16][3]'
|   |   |-IfStmt 0x26de974a5e0 <line:1873:9, line:1874:18>
|   |   | |-OpaqueValueExpr 0x26de974a5c8 <<invalid sloc>> '_Bool'
|   |   | `-GotoStmt 0x26de974a5b0 <col:13, col:18> 'err' 0x26de9749fe0
|   |   |-IfStmt 0x26de974a900 <line:1876:9, line:1881:9>
|   |   | |-OpaqueValueExpr 0x26de974a8e8 <<invalid sloc>> '_Bool'
|   |   | `-CompoundStmt 0x26de974a8d0 <line:1878:48, line:1881:9>
|   |   |   `-GotoStmt 0x26de974a8b8 <line:1880:13, col:18> 'err' 0x26de9749fe0
|   |   |-IfStmt 0x26de974aa58 <line:1882:9, line:1885:18>
|   |   | |-OpaqueValueExpr 0x26de974aa40 <<invalid sloc>> '_Bool'
|   |   | `-GotoStmt 0x26de974aa28 <col:13, col:18> 'err' 0x26de9749fe0
|   |   `-IfStmt 0x26de974ac90 <line:1886:9, line:1894:23> has_else
|   |     |-OpaqueValueExpr 0x26de974ac78 <<invalid sloc>> '_Bool'
|   |     |-BinaryOperator 0x26de974ac08 <line:1888:13, col:29> 'int' '='
|   |     | |-DeclRefExpr 0x26de974aba8 <col:13> 'int' lvalue Var 0x26de9749090 'have_pre_comp' 'int'
|   |     | `-IntegerLiteral 0x26de974abe0 <col:29> 'int' 1
|   |     `-UnaryOperator 0x26de974ac60 <line:1894:13, col:23> 'size_t':'unsigned long long' postfix '++'
|   |       `-DeclRefExpr 0x26de974ac28 <col:13> 'size_t':'unsigned long long' lvalue Var 0x26de9749148 'num_points' 'size_t':'unsigned long long'
|   |-IfStmt 0x26de975aea8 <line:1897:5, line:1978:5>
|   | |-BinaryOperator 0x26de9760e60 <line:1897:9, col:22> 'int' '>'
|   | | |-ImplicitCastExpr 0x26de9760e30 <col:9> 'size_t':'unsigned long long' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de9760de8 <col:9> 'size_t':'unsigned long long' lvalue Var 0x26de9749148 'num_points' 'size_t':'unsigned long long'
|   | | `-ImplicitCastExpr 0x26de9760e48 <col:22> 'unsigned long long' <IntegralCast>
|   | |   `-IntegerLiteral 0x26de9760e08 <col:22> 'int' 0
|   | `-CompoundStmt 0x26de975ae60 <col:25, line:1978:5>
|   |   |-IfStmt 0x26de9760fb0 <line:1898:9, line:1904:9>
|   |   | |-BinaryOperator 0x26de9760ef8 <line:1898:13, col:27> 'int' '>='
|   |   | | |-ImplicitCastExpr 0x26de9760ec8 <col:13> 'size_t':'unsigned long long' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x26de9760e80 <col:13> 'size_t':'unsigned long long' lvalue Var 0x26de9749148 'num_points' 'size_t':'unsigned long long'
|   |   | | `-ImplicitCastExpr 0x26de9760ee0 <col:27> 'unsigned long long' <IntegralCast>
|   |   | |   `-IntegerLiteral 0x26de9760ea0 <col:27> 'int' 2
|   |   | `-CompoundStmt 0x26de9760f98 <col:30, line:1904:9>
|   |   |   `-BinaryOperator 0x26de9760f78 <line:1903:13, col:21> 'int' '='
|   |   |     |-DeclRefExpr 0x26de9760f18 <col:13> 'int' lvalue Var 0x26de97587e8 'mixed' 'int'
|   |   |     `-IntegerLiteral 0x26de9760f50 <col:21> 'int' 1
|   |   |-BinaryOperator 0x26de9761160 <line:1905:9, col:63> 'felem_bytearray *' '='
|   |   | |-DeclRefExpr 0x26de9760fc8 <col:9> 'felem_bytearray *' lvalue Var 0x26de9758a18 'secrets' 'felem_bytearray *'
|   |   | `-ImplicitCastExpr 0x26de9761148 <col:19, col:63> 'felem_bytearray *' <IntegralToPointer>
|   |   |   `-CallExpr 0x26de9761120 <col:19, col:63> 'int'
|   |   |     |-ImplicitCastExpr 0x26de9761108 <col:19> 'int (*)()' <FunctionToPointerDecay>
|   |   |     | `-DeclRefExpr 0x26de9761000 <col:19> 'int ()' Function 0x26de9754560 'OPENSSL_zalloc' 'int ()'
|   |   |     `-BinaryOperator 0x26de97610e8 <col:34, col:53> 'unsigned long long' '*'
|   |   |       |-UnaryExprOrTypeTraitExpr 0x26de9761090 <col:34, col:49> 'unsigned long long' sizeof
|   |   |       | `-ParenExpr 0x26de9761070 <col:40, col:49> 'felem_bytearray':'u8 [66]' lvalue
|   |   |       |   `-UnaryOperator 0x26de9761058 <col:41, col:42> 'felem_bytearray':'u8 [66]' lvalue prefix '*' cannot overflow
|   |   |       |     `-ImplicitCastExpr 0x26de9761040 <col:42> 'felem_bytearray *' <LValueToRValue>
|   |   |       |       `-DeclRefExpr 0x26de9761020 <col:42> 'felem_bytearray *' lvalue Var 0x26de9758a18 'secrets' 'felem_bytearray *' non_odr_use_unevaluated
|   |   |       `-ImplicitCastExpr 0x26de97610d0 <col:53> 'size_t':'unsigned long long' <LValueToRValue>
|   |   |         `-DeclRefExpr 0x26de97610b0 <col:53> 'size_t':'unsigned long long' lvalue Var 0x26de9749148 'num_points' 'size_t':'unsigned long long'
|   |   |-BinaryOperator 0x26de9761318 <line:1906:9, col:65> 'felem (*)[17][3]' '='
|   |   | |-DeclRefExpr 0x26de9761180 <col:9> 'felem (*)[17][3]' lvalue Var 0x26de9758cc8 'pre_comp' 'felem (*)[17][3]'
|   |   | `-ImplicitCastExpr 0x26de9761300 <col:20, col:65> 'felem (*)[17][3]' <IntegralToPointer>
|   |   |   `-CallExpr 0x26de97612d8 <col:20, col:65> 'int'
|   |   |     |-ImplicitCastExpr 0x26de97612c0 <col:20> 'int (*)()' <FunctionToPointerDecay>
|   |   |     | `-DeclRefExpr 0x26de97611b8 <col:20> 'int ()' Function 0x26de9754560 'OPENSSL_zalloc' 'int ()'
|   |   |     `-BinaryOperator 0x26de97612a0 <col:35, col:55> 'unsigned long long' '*'
|   |   |       |-UnaryExprOrTypeTraitExpr 0x26de9761248 <col:35, col:51> 'unsigned long long' sizeof
|   |   |       | `-ParenExpr 0x26de9761228 <col:41, col:51> 'felem [17][3]':'felem [17][3]' lvalue
|   |   |       |   `-UnaryOperator 0x26de9761210 <col:42, col:43> 'felem [17][3]':'felem [17][3]' lvalue prefix '*' cannot overflow
|   |   |       |     `-ImplicitCastExpr 0x26de97611f8 <col:43> 'felem (*)[17][3]' <LValueToRValue>
|   |   |       |       `-DeclRefExpr 0x26de97611d8 <col:43> 'felem (*)[17][3]' lvalue Var 0x26de9758cc8 'pre_comp' 'felem (*)[17][3]' non_odr_use_unevaluated
|   |   |       `-ImplicitCastExpr 0x26de9761288 <col:55> 'size_t':'unsigned long long' <LValueToRValue>
|   |   |         `-DeclRefExpr 0x26de9761268 <col:55> 'size_t':'unsigned long long' lvalue Var 0x26de9749148 'num_points' 'size_t':'unsigned long long'
|   |   |-IfStmt 0x26de97616f8 <line:1907:9, line:1909:75>
|   |   | |-ImplicitCastExpr 0x26de9761358 <line:1907:13> 'int' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x26de9761338 <col:13> 'int' lvalue Var 0x26de97587e8 'mixed' 'int'
|   |   | `-BinaryOperator 0x26de97616d8 <line:1908:13, line:1909:75> 'felem *' '='
|   |   |   |-DeclRefExpr 0x26de9761370 <line:1908:13> 'felem *' lvalue Var 0x26de9748d98 'tmp_felems' 'felem *'
|   |   |   `-ImplicitCastExpr 0x26de97616c0 <line:1909:17, col:75> 'felem *' <IntegralToPointer>
|   |   |     `-CallExpr 0x26de9761698 <col:17, col:75> 'int'
|   |   |       |-ImplicitCastExpr 0x26de9761680 <col:17> 'int (*)()' <FunctionToPointerDecay>
|   |   |       | `-DeclRefExpr 0x26de9761498 <col:17> 'int ()' Function 0x26de97613d0 'OPENSSL_malloc' 'int ()'
|   |   |       `-BinaryOperator 0x26de9761660 <col:32, col:74> 'unsigned long long' '*'
|   |   |         |-UnaryExprOrTypeTraitExpr 0x26de9761528 <col:32, col:50> 'unsigned long long' sizeof
|   |   |         | `-ParenExpr 0x26de9761508 <col:38, col:50> 'felem':'limb [9]' lvalue
|   |   |         |   `-UnaryOperator 0x26de97614f0 <col:39, col:40> 'felem':'limb [9]' lvalue prefix '*' cannot overflow
|   |   |         |     `-ImplicitCastExpr 0x26de97614d8 <col:40> 'felem *' <LValueToRValue>
|   |   |         |       `-DeclRefExpr 0x26de97614b8 <col:40> 'felem *' lvalue Var 0x26de9748d98 'tmp_felems' 'felem *' non_odr_use_unevaluated
|   |   |         `-ParenExpr 0x26de9761640 <col:54, col:74> 'unsigned long long'
|   |   |           `-BinaryOperator 0x26de9761620 <col:55, col:73> 'unsigned long long' '+'
|   |   |             |-BinaryOperator 0x26de97615c0 <col:55, col:68> 'unsigned long long' '*'
|   |   |             | |-ImplicitCastExpr 0x26de9761590 <col:55> 'size_t':'unsigned long long' <LValueToRValue>
|   |   |             | | `-DeclRefExpr 0x26de9761548 <col:55> 'size_t':'unsigned long long' lvalue Var 0x26de9749148 'num_points' 'size_t':'unsigned long long'
|   |   |             | `-ImplicitCastExpr 0x26de97615a8 <col:68> 'unsigned long long' <IntegralCast>
|   |   |             |   `-IntegerLiteral 0x26de9761568 <col:68> 'int' 17
|   |   |             `-ImplicitCastExpr 0x26de9761608 <col:73> 'unsigned long long' <IntegralCast>
|   |   |               `-IntegerLiteral 0x26de97615e0 <col:73> 'int' 1
|   |   |-IfStmt 0x26de9761b60 <line:1910:9, line:1914:9>
|   |   | |-BinaryOperator 0x26de9761af0 <line:1910:13, line:1911:46> 'int' '||'
|   |   | | |-BinaryOperator 0x26de9761940 <line:1910:13, col:51> 'int' '||'
|   |   | | | |-ParenExpr 0x26de9761808 <col:13, col:29> 'int'
|   |   | | | | `-BinaryOperator 0x26de97617e8 <col:14, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27> 'int' '=='
|   |   | | | |   |-ImplicitCastExpr 0x26de97617b8 <.//openssl//file_jk/before\crypto\ec\ecp_nistp521.c:1910:14> 'felem_bytearray *' <LValueToRValue>
|   |   | | | |   | `-DeclRefExpr 0x26de9761710 <col:14> 'felem_bytearray *' lvalue Var 0x26de9758a18 'secrets' 'felem_bytearray *'
|   |   | | | |   `-ImplicitCastExpr 0x26de97617d0 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'felem_bytearray *' <BitCast>
|   |   | | | |     `-ParenExpr 0x26de9761798 <col:17, col:27> 'void *'
|   |   | | | |       `-CStyleCastExpr 0x26de9761770 <col:18, col:26> 'void *' <NullToPointer>
|   |   | | | |         `-IntegerLiteral 0x26de9761730 <col:26> 'int' 0
|   |   | | | `-ParenExpr 0x26de9761920 <.//openssl//file_jk/before\crypto\ec\ecp_nistp521.c:1910:34, col:51> 'int'
|   |   | | |   `-BinaryOperator 0x26de9761900 <col:35, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27> 'int' '=='
|   |   | | |     |-ImplicitCastExpr 0x26de97618d0 <.//openssl//file_jk/before\crypto\ec\ecp_nistp521.c:1910:35> 'felem (*)[17][3]' <LValueToRValue>
|   |   | | |     | `-DeclRefExpr 0x26de9761828 <col:35> 'felem (*)[17][3]' lvalue Var 0x26de9758cc8 'pre_comp' 'felem (*)[17][3]'
|   |   | | |     `-ImplicitCastExpr 0x26de97618e8 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'felem (*)[17][3]' <BitCast>
|   |   | | |       `-ParenExpr 0x26de97618b0 <col:17, col:27> 'void *'
|   |   | | |         `-CStyleCastExpr 0x26de9761888 <col:18, col:26> 'void *' <NullToPointer>
|   |   | | |           `-IntegerLiteral 0x26de9761848 <col:26> 'int' 0
|   |   | | `-ParenExpr 0x26de9761ad0 <.//openssl//file_jk/before\crypto\ec\ecp_nistp521.c:1911:16, col:46> 'int'
|   |   | |   `-BinaryOperator 0x26de9761ab0 <col:17, col:45> 'int' '&&'
|   |   | |     |-ImplicitCastExpr 0x26de9761a98 <col:17> 'int' <LValueToRValue>
|   |   | |     | `-DeclRefExpr 0x26de9761960 <col:17> 'int' lvalue Var 0x26de97587e8 'mixed' 'int'
|   |   | |     `-ParenExpr 0x26de9761a78 <col:26, col:45> 'int'
|   |   | |       `-BinaryOperator 0x26de9761a58 <col:27, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27> 'int' '=='
|   |   | |         |-ImplicitCastExpr 0x26de9761a28 <.//openssl//file_jk/before\crypto\ec\ecp_nistp521.c:1911:27> 'felem *' <LValueToRValue>
|   |   | |         | `-DeclRefExpr 0x26de9761980 <col:27> 'felem *' lvalue Var 0x26de9748d98 'tmp_felems' 'felem *'
|   |   | |         `-ImplicitCastExpr 0x26de9761a40 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'felem *' <BitCast>
|   |   | |           `-ParenExpr 0x26de9761a08 <col:17, col:27> 'void *'
|   |   | |             `-CStyleCastExpr 0x26de97619e0 <col:18, col:26> 'void *' <NullToPointer>
|   |   | |               `-IntegerLiteral 0x26de97619a0 <col:26> 'int' 0
|   |   | `-CompoundStmt 0x26de9761b48 <.//openssl//file_jk/before\crypto\ec\ecp_nistp521.c:1911:49, line:1914:9>
|   |   |   `-GotoStmt 0x26de9761b30 <line:1913:13, col:18> 'err' 0x26de9749fe0
|   |   |-ForStmt 0x26de9764bc0 <line:1920:9, line:1975:9>
|   |   | |-BinaryOperator 0x26de9761bf0 <line:1920:14, col:18> 'unsigned int' '='
|   |   | | |-DeclRefExpr 0x26de9761b78 <col:14> 'unsigned int' lvalue Var 0x26de9748f60 'i' 'unsigned int'
|   |   | | `-ImplicitCastExpr 0x26de9761bd8 <col:18> 'unsigned int' <IntegralCast>
|   |   | |   `-IntegerLiteral 0x26de9761bb0 <col:18> 'int' 0
|   |   | |-<<<NULL>>>
|   |   | |-BinaryOperator 0x26de9761c98 <col:21, col:25> 'int' '<'
|   |   | | |-ImplicitCastExpr 0x26de9761c80 <col:21> 'unsigned long long' <IntegralCast>
|   |   | | | `-ImplicitCastExpr 0x26de9761c50 <col:21> 'unsigned int' <LValueToRValue>
|   |   | | |   `-DeclRefExpr 0x26de9761c10 <col:21> 'unsigned int' lvalue Var 0x26de9748f60 'i' 'unsigned int'
|   |   | | `-ImplicitCastExpr 0x26de9761c68 <col:25> 'size_t':'unsigned long long' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x26de9761c30 <col:25> 'size_t':'unsigned long long' lvalue Var 0x26de9749148 'num_points' 'size_t':'unsigned long long'
|   |   | |-UnaryOperator 0x26de9761cd8 <col:37, col:39> 'unsigned int' prefix '++'
|   |   | | `-DeclRefExpr 0x26de9761cb8 <col:39> 'unsigned int' lvalue Var 0x26de9748f60 'i' 'unsigned int'
|   |   | `-CompoundStmt 0x26de9764ba0 <col:42, line:1975:9>
|   |   |   |-IfStmt 0x26de9761f08 <line:1921:13, line:1934:13> has_else
|   |   |   | |-BinaryOperator 0x26de9761d78 <line:1921:17, col:22> 'int' '=='
|   |   |   | | |-ImplicitCastExpr 0x26de9761d60 <col:17> 'unsigned long long' <IntegralCast>
|   |   |   | | | `-ImplicitCastExpr 0x26de9761d30 <col:17> 'unsigned int' <LValueToRValue>
|   |   |   | | |   `-DeclRefExpr 0x26de9761cf0 <col:17> 'unsigned int' lvalue Var 0x26de9748f60 'i' 'unsigned int'
|   |   |   | | `-ImplicitCastExpr 0x26de9761d48 <col:22> 'size_t':'unsigned long long' <LValueToRValue>
|   |   |   | |   `-DeclRefExpr 0x26de9761d10 <col:22> 'size_t':'unsigned long long' lvalue ParmVar 0x26de9758320 'num' 'size_t':'unsigned long long'
|   |   |   | |-CompoundStmt 0x26de9761ea8 <line:1926:13, line:1929:13>
|   |   |   | `-CompoundStmt 0x26de9761ef8 <line:1931:13, line:1934:13>
|   |   |   `-IfStmt 0x26de9764b88 <line:1935:13, line:1974:13>
|   |   |     |-OpaqueValueExpr 0x26de9764b70 <<invalid sloc>> '_Bool'
|   |   |     `-CompoundStmt 0x26de9764b28 <line:1935:52, line:1974:13>
|   |   |       |-IfStmt 0x26de9762450 <line:1937:17, line:1949:21> has_else
|   |   |       | |-OpaqueValueExpr 0x26de9762438 <<invalid sloc>> '_Bool'
|   |   |       | |-CompoundStmt 0x26de97623b8 <line:1938:52, line:1948:17>
|   |   |       | | `-IfStmt 0x26de9762310 <line:1943:21, line:1946:21>
|   |   |       | |   |-OpaqueValueExpr 0x26de97622f8 <<invalid sloc>> '_Bool'
|   |   |       | |   `-CompoundStmt 0x26de97622e0 <line:1943:77, line:1946:21>
|   |   |       | |     `-GotoStmt 0x26de97622c8 <line:1945:25, col:30> 'err' 0x26de9749fe0
|   |   |       | `-NullStmt 0x26de9762430 <line:1949:21>
|   |   |       |-CallExpr 0x26de9762580 <line:1950:17, col:55> 'void'
|   |   |       | |-ImplicitCastExpr 0x26de9762568 <col:17> 'void (*)(u8 *, const u8 *, unsigned int)' <FunctionToPointerDecay>
|   |   |       | | `-DeclRefExpr 0x26de9762478 <col:17> 'void (u8 *, const u8 *, unsigned int)' Function 0x26de9592428 'flip_endian' 'void (u8 *, const u8 *, unsigned int)'
|   |   |       | |-ImplicitCastExpr 0x26de97625b8 <col:29, col:38> 'u8 *' <ArrayToPointerDecay>
|   |   |       | | `-ArraySubscriptExpr 0x26de9762508 <col:29, col:38> 'felem_bytearray':'u8 [66]' lvalue
|   |   |       | |   |-ImplicitCastExpr 0x26de97624d8 <col:29> 'felem_bytearray *' <LValueToRValue>
|   |   |       | |   | `-DeclRefExpr 0x26de9762498 <col:29> 'felem_bytearray *' lvalue Var 0x26de9758a18 'secrets' 'felem_bytearray *'
|   |   |       | |   `-ImplicitCastExpr 0x26de97624f0 <col:37> 'unsigned int' <LValueToRValue>
|   |   |       | |     `-DeclRefExpr 0x26de97624b8 <col:37> 'unsigned int' lvalue Var 0x26de9748f60 'i' 'unsigned int'
|   |   |       | |-ImplicitCastExpr 0x26de97625e8 <col:41> 'const u8 *' <NoOp>
|   |   |       | | `-ImplicitCastExpr 0x26de97625d0 <col:41> 'u8 *' <ArrayToPointerDecay>
|   |   |       | |   `-DeclRefExpr 0x26de9762528 <col:41> 'felem_bytearray':'u8 [66]' lvalue Var 0x26de9748ec8 'tmp' 'felem_bytearray':'u8 [66]'
|   |   |       | `-ImplicitCastExpr 0x26de9762600 <col:46> 'unsigned int' <LValueToRValue>
|   |   |       |   `-DeclRefExpr 0x26de9762548 <col:46> 'unsigned int' lvalue Var 0x26de9748fe0 'num_bytes' 'unsigned int'
|   |   |       |-IfStmt 0x26de97626f0 <line:1952:17, line:1955:26>
|   |   |       | |-OpaqueValueExpr 0x26de97626d8 <<invalid sloc>> '_Bool'
|   |   |       | `-GotoStmt 0x26de97626c0 <col:21, col:26> 'err' 0x26de9749fe0
|   |   |       |-CallExpr 0x26de9762910 <line:1956:17, col:63> 'void *'
|   |   |       | |-ImplicitCastExpr 0x26de97628f8 <col:17> 'void *(*)(void *, const void *, unsigned long long)' <FunctionToPointerDecay>
|   |   |       | | `-DeclRefExpr 0x26de9762708 <col:17> 'void *(void *, const void *, unsigned long long)' Function 0x26de9529af8 'memcpy' 'void *(void *, const void *, unsigned long long)'
|   |   |       | |-ImplicitCastExpr 0x26de9762960 <col:24, col:40> 'void *' <BitCast>
|   |   |       | | `-ImplicitCastExpr 0x26de9762948 <col:24, col:40> 'limb *' <ArrayToPointerDecay>
|   |   |       | |   `-ArraySubscriptExpr 0x26de9762858 <col:24, col:40> 'felem':'limb [9]' lvalue
|   |   |       | |     |-ImplicitCastExpr 0x26de9762840 <col:24, col:37> 'felem *' <ArrayToPointerDecay>
|   |   |       | |     | `-ArraySubscriptExpr 0x26de97627f8 <col:24, col:37> 'felem [3]' lvalue
|   |   |       | |     |   |-ImplicitCastExpr 0x26de97627e0 <col:24, col:34> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   |       | |     |   | `-ArraySubscriptExpr 0x26de9762798 <col:24, col:34> 'felem [17][3]':'felem [17][3]' lvalue
|   |   |       | |     |   |   |-ImplicitCastExpr 0x26de9762768 <col:24> 'felem (*)[17][3]' <LValueToRValue>
|   |   |       | |     |   |   | `-DeclRefExpr 0x26de9762728 <col:24> 'felem (*)[17][3]' lvalue Var 0x26de9758cc8 'pre_comp' 'felem (*)[17][3]'
|   |   |       | |     |   |   `-ImplicitCastExpr 0x26de9762780 <col:33> 'unsigned int' <LValueToRValue>
|   |   |       | |     |   |     `-DeclRefExpr 0x26de9762748 <col:33> 'unsigned int' lvalue Var 0x26de9748f60 'i' 'unsigned int'
|   |   |       | |     |   `-IntegerLiteral 0x26de97627b8 <col:36> 'int' 1
|   |   |       | |     `-IntegerLiteral 0x26de9762818 <col:39> 'int' 0
|   |   |       | |-ImplicitCastExpr 0x26de9762990 <col:43> 'const void *' <BitCast>
|   |   |       | | `-ImplicitCastExpr 0x26de9762978 <col:43> 'limb *' <ArrayToPointerDecay>
|   |   |       | |   `-DeclRefExpr 0x26de9762878 <col:43> 'felem':'limb [9]' lvalue Var 0x26de9749390 'x_out' 'felem':'limb [9]'
|   |   |       | `-UnaryExprOrTypeTraitExpr 0x26de97628a8 <col:50, col:62> 'unsigned long long' sizeof 'felem':'limb [9]'
|   |   |       |-CallExpr 0x26de9762bb0 <line:1957:17, col:63> 'void *'
|   |   |       | |-ImplicitCastExpr 0x26de9762b98 <col:17> 'void *(*)(void *, const void *, unsigned long long)' <FunctionToPointerDecay>
|   |   |       | | `-DeclRefExpr 0x26de97629a8 <col:17> 'void *(void *, const void *, unsigned long long)' Function 0x26de9529af8 'memcpy' 'void *(void *, const void *, unsigned long long)'
|   |   |       | |-ImplicitCastExpr 0x26de9762c00 <col:24, col:40> 'void *' <BitCast>
|   |   |       | | `-ImplicitCastExpr 0x26de9762be8 <col:24, col:40> 'limb *' <ArrayToPointerDecay>
|   |   |       | |   `-ArraySubscriptExpr 0x26de9762af8 <col:24, col:40> 'felem':'limb [9]' lvalue
|   |   |       | |     |-ImplicitCastExpr 0x26de9762ae0 <col:24, col:37> 'felem *' <ArrayToPointerDecay>
|   |   |       | |     | `-ArraySubscriptExpr 0x26de9762a98 <col:24, col:37> 'felem [3]' lvalue
|   |   |       | |     |   |-ImplicitCastExpr 0x26de9762a80 <col:24, col:34> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   |       | |     |   | `-ArraySubscriptExpr 0x26de9762a38 <col:24, col:34> 'felem [17][3]':'felem [17][3]' lvalue
|   |   |       | |     |   |   |-ImplicitCastExpr 0x26de9762a08 <col:24> 'felem (*)[17][3]' <LValueToRValue>
|   |   |       | |     |   |   | `-DeclRefExpr 0x26de97629c8 <col:24> 'felem (*)[17][3]' lvalue Var 0x26de9758cc8 'pre_comp' 'felem (*)[17][3]'
|   |   |       | |     |   |   `-ImplicitCastExpr 0x26de9762a20 <col:33> 'unsigned int' <LValueToRValue>
|   |   |       | |     |   |     `-DeclRefExpr 0x26de97629e8 <col:33> 'unsigned int' lvalue Var 0x26de9748f60 'i' 'unsigned int'
|   |   |       | |     |   `-IntegerLiteral 0x26de9762a58 <col:36> 'int' 1
|   |   |       | |     `-IntegerLiteral 0x26de9762ab8 <col:39> 'int' 1
|   |   |       | |-ImplicitCastExpr 0x26de9762c30 <col:43> 'const void *' <BitCast>
|   |   |       | | `-ImplicitCastExpr 0x26de9762c18 <col:43> 'limb *' <ArrayToPointerDecay>
|   |   |       | |   `-DeclRefExpr 0x26de9762b18 <col:43> 'felem':'limb [9]' lvalue Var 0x26de9749408 'y_out' 'felem':'limb [9]'
|   |   |       | `-UnaryExprOrTypeTraitExpr 0x26de9762b48 <col:50, col:62> 'unsigned long long' sizeof 'felem':'limb [9]'
|   |   |       |-CallExpr 0x26de9762e78 <line:1958:17, col:63> 'void *'
|   |   |       | |-ImplicitCastExpr 0x26de9762e60 <col:17> 'void *(*)(void *, const void *, unsigned long long)' <FunctionToPointerDecay>
|   |   |       | | `-DeclRefExpr 0x26de9762c48 <col:17> 'void *(void *, const void *, unsigned long long)' Function 0x26de9529af8 'memcpy' 'void *(void *, const void *, unsigned long long)'
|   |   |       | |-ImplicitCastExpr 0x26de9762ec8 <col:24, col:40> 'void *' <BitCast>
|   |   |       | | `-ImplicitCastExpr 0x26de9762eb0 <col:24, col:40> 'limb *' <ArrayToPointerDecay>
|   |   |       | |   `-ArraySubscriptExpr 0x26de9762d98 <col:24, col:40> 'felem':'limb [9]' lvalue
|   |   |       | |     |-ImplicitCastExpr 0x26de9762d80 <col:24, col:37> 'felem *' <ArrayToPointerDecay>
|   |   |       | |     | `-ArraySubscriptExpr 0x26de9762d38 <col:24, col:37> 'felem [3]' lvalue
|   |   |       | |     |   |-ImplicitCastExpr 0x26de9762d20 <col:24, col:34> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   |       | |     |   | `-ArraySubscriptExpr 0x26de9762cd8 <col:24, col:34> 'felem [17][3]':'felem [17][3]' lvalue
|   |   |       | |     |   |   |-ImplicitCastExpr 0x26de9762ca8 <col:24> 'felem (*)[17][3]' <LValueToRValue>
|   |   |       | |     |   |   | `-DeclRefExpr 0x26de9762c68 <col:24> 'felem (*)[17][3]' lvalue Var 0x26de9758cc8 'pre_comp' 'felem (*)[17][3]'
|   |   |       | |     |   |   `-ImplicitCastExpr 0x26de9762cc0 <col:33> 'unsigned int' <LValueToRValue>
|   |   |       | |     |   |     `-DeclRefExpr 0x26de9762c88 <col:33> 'unsigned int' lvalue Var 0x26de9748f60 'i' 'unsigned int'
|   |   |       | |     |   `-IntegerLiteral 0x26de9762cf8 <col:36> 'int' 1
|   |   |       | |     `-IntegerLiteral 0x26de9762d58 <col:39> 'int' 2
|   |   |       | |-ImplicitCastExpr 0x26de9762ef8 <col:43> 'const void *' <BitCast>
|   |   |       | | `-ImplicitCastExpr 0x26de9762ee0 <col:43> 'limb *' <ArrayToPointerDecay>
|   |   |       | |   `-DeclRefExpr 0x26de9762de0 <col:43> 'felem':'limb [9]' lvalue Var 0x26de9749480 'z_out' 'felem':'limb [9]'
|   |   |       | `-UnaryExprOrTypeTraitExpr 0x26de9762e10 <col:50, col:62> 'unsigned long long' sizeof 'felem':'limb [9]'
|   |   |       `-ForStmt 0x26de9764af0 <line:1959:17, line:1973:17>
|   |   |         |-BinaryOperator 0x26de9762f70 <line:1959:22, col:26> 'int' '='
|   |   |         | |-DeclRefExpr 0x26de9762f10 <col:22> 'int' lvalue Var 0x26de9758750 'j' 'int'
|   |   |         | `-IntegerLiteral 0x26de9762f48 <col:26> 'int' 2
|   |   |         |-<<<NULL>>>
|   |   |         |-BinaryOperator 0x26de9762ff0 <col:29, col:34> 'int' '<='
|   |   |         | |-ImplicitCastExpr 0x26de9762fd8 <col:29> 'int' <LValueToRValue>
|   |   |         | | `-DeclRefExpr 0x26de9762f90 <col:29> 'int' lvalue Var 0x26de9758750 'j' 'int'
|   |   |         | `-IntegerLiteral 0x26de9762fb0 <col:34> 'int' 16
|   |   |         |-UnaryOperator 0x26de9763030 <col:38, col:40> 'int' prefix '++'
|   |   |         | `-DeclRefExpr 0x26de9763010 <col:40> 'int' lvalue Var 0x26de9758750 'j' 'int'
|   |   |         `-CompoundStmt 0x26de9764ad8 <col:43, line:1973:17>
|   |   |           `-IfStmt 0x26de9764ab0 <line:1960:21, line:1972:21> has_else
|   |   |             |-BinaryOperator 0x26de97630a8 <line:1960:25, col:29> 'int' '&'
|   |   |             | |-ImplicitCastExpr 0x26de9763090 <col:25> 'int' <LValueToRValue>
|   |   |             | | `-DeclRefExpr 0x26de9763048 <col:25> 'int' lvalue Var 0x26de9758750 'j' 'int'
|   |   |             | `-IntegerLiteral 0x26de9763068 <col:29> 'int' 1
|   |   |             |-CompoundStmt 0x26de9764008 <col:32, line:1967:21>
|   |   |             | `-CallExpr 0x26de9763e30 <line:1961:25, line:1966:56> 'void'
|   |   |             |   |-ImplicitCastExpr 0x26de9763e18 <line:1961:25> 'void (*)(limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   |   |             |   | `-DeclRefExpr 0x26de97630c8 <col:25> 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const limb *, const limb *, const limb *)' Function 0x26de9674158 'point_add' 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const limb *, const limb *, const limb *)'
|   |   |             |   |-ImplicitCastExpr 0x26de9763ea0 <col:35, col:51> 'limb *' <ArrayToPointerDecay>
|   |   |             |   | `-ArraySubscriptExpr 0x26de9763228 <col:35, col:51> 'felem':'limb [9]' lvalue
|   |   |             |   |   |-ImplicitCastExpr 0x26de9763210 <col:35, col:48> 'felem *' <ArrayToPointerDecay>
|   |   |             |   |   | `-ArraySubscriptExpr 0x26de97631c8 <col:35, col:48> 'felem [3]' lvalue
|   |   |             |   |   |   |-ImplicitCastExpr 0x26de9763198 <col:35, col:45> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   |             |   |   |   | `-ArraySubscriptExpr 0x26de9763158 <col:35, col:45> 'felem [17][3]':'felem [17][3]' lvalue
|   |   |             |   |   |   |   |-ImplicitCastExpr 0x26de9763128 <col:35> 'felem (*)[17][3]' <LValueToRValue>
|   |   |             |   |   |   |   | `-DeclRefExpr 0x26de97630e8 <col:35> 'felem (*)[17][3]' lvalue Var 0x26de9758cc8 'pre_comp' 'felem (*)[17][3]'
|   |   |             |   |   |   |   `-ImplicitCastExpr 0x26de9763140 <col:44> 'unsigned int' <LValueToRValue>
|   |   |             |   |   |   |     `-DeclRefExpr 0x26de9763108 <col:44> 'unsigned int' lvalue Var 0x26de9748f60 'i' 'unsigned int'
|   |   |             |   |   |   `-ImplicitCastExpr 0x26de97631b0 <col:47> 'int' <LValueToRValue>
|   |   |             |   |   |     `-DeclRefExpr 0x26de9763178 <col:47> 'int' lvalue Var 0x26de9758750 'j' 'int'
|   |   |             |   |   `-IntegerLiteral 0x26de97631e8 <col:50> 'int' 0
|   |   |             |   |-ImplicitCastExpr 0x26de9763eb8 <col:54, col:70> 'limb *' <ArrayToPointerDecay>
|   |   |             |   | `-ArraySubscriptExpr 0x26de9763388 <col:54, col:70> 'felem':'limb [9]' lvalue
|   |   |             |   |   |-ImplicitCastExpr 0x26de9763370 <col:54, col:67> 'felem *' <ArrayToPointerDecay>
|   |   |             |   |   | `-ArraySubscriptExpr 0x26de9763328 <col:54, col:67> 'felem [3]' lvalue
|   |   |             |   |   |   |-ImplicitCastExpr 0x26de97632f8 <col:54, col:64> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   |             |   |   |   | `-ArraySubscriptExpr 0x26de97632b8 <col:54, col:64> 'felem [17][3]':'felem [17][3]' lvalue
|   |   |             |   |   |   |   |-ImplicitCastExpr 0x26de9763288 <col:54> 'felem (*)[17][3]' <LValueToRValue>
|   |   |             |   |   |   |   | `-DeclRefExpr 0x26de9763248 <col:54> 'felem (*)[17][3]' lvalue Var 0x26de9758cc8 'pre_comp' 'felem (*)[17][3]'
|   |   |             |   |   |   |   `-ImplicitCastExpr 0x26de97632a0 <col:63> 'unsigned int' <LValueToRValue>
|   |   |             |   |   |   |     `-DeclRefExpr 0x26de9763268 <col:63> 'unsigned int' lvalue Var 0x26de9748f60 'i' 'unsigned int'
|   |   |             |   |   |   `-ImplicitCastExpr 0x26de9763310 <col:66> 'int' <LValueToRValue>
|   |   |             |   |   |     `-DeclRefExpr 0x26de97632d8 <col:66> 'int' lvalue Var 0x26de9758750 'j' 'int'
|   |   |             |   |   `-IntegerLiteral 0x26de9763348 <col:69> 'int' 1
|   |   |             |   |-ImplicitCastExpr 0x26de9763ed0 <line:1962:35, col:51> 'limb *' <ArrayToPointerDecay>
|   |   |             |   | `-ArraySubscriptExpr 0x26de97634e8 <col:35, col:51> 'felem':'limb [9]' lvalue
|   |   |             |   |   |-ImplicitCastExpr 0x26de97634d0 <col:35, col:48> 'felem *' <ArrayToPointerDecay>
|   |   |             |   |   | `-ArraySubscriptExpr 0x26de9763488 <col:35, col:48> 'felem [3]' lvalue
|   |   |             |   |   |   |-ImplicitCastExpr 0x26de9763458 <col:35, col:45> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   |             |   |   |   | `-ArraySubscriptExpr 0x26de9763418 <col:35, col:45> 'felem [17][3]':'felem [17][3]' lvalue
|   |   |             |   |   |   |   |-ImplicitCastExpr 0x26de97633e8 <col:35> 'felem (*)[17][3]' <LValueToRValue>
|   |   |             |   |   |   |   | `-DeclRefExpr 0x26de97633a8 <col:35> 'felem (*)[17][3]' lvalue Var 0x26de9758cc8 'pre_comp' 'felem (*)[17][3]'
|   |   |             |   |   |   |   `-ImplicitCastExpr 0x26de9763400 <col:44> 'unsigned int' <LValueToRValue>
|   |   |             |   |   |   |     `-DeclRefExpr 0x26de97633c8 <col:44> 'unsigned int' lvalue Var 0x26de9748f60 'i' 'unsigned int'
|   |   |             |   |   |   `-ImplicitCastExpr 0x26de9763470 <col:47> 'int' <LValueToRValue>
|   |   |             |   |   |     `-DeclRefExpr 0x26de9763438 <col:47> 'int' lvalue Var 0x26de9758750 'j' 'int'
|   |   |             |   |   `-IntegerLiteral 0x26de97634a8 <col:50> 'int' 2
|   |   |             |   |-ImplicitCastExpr 0x26de9763f00 <col:54, col:70> 'const limb *':'const limb *' <NoOp>
|   |   |             |   | `-ImplicitCastExpr 0x26de9763ee8 <col:54, col:70> 'limb *' <ArrayToPointerDecay>
|   |   |             |   |   `-ArraySubscriptExpr 0x26de9763638 <col:54, col:70> 'felem':'limb [9]' lvalue
|   |   |             |   |     |-ImplicitCastExpr 0x26de9763620 <col:54, col:67> 'felem *' <ArrayToPointerDecay>
|   |   |             |   |     | `-ArraySubscriptExpr 0x26de97635d8 <col:54, col:67> 'felem [3]' lvalue
|   |   |             |   |     |   |-ImplicitCastExpr 0x26de97635c0 <col:54, col:64> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   |             |   |     |   | `-ArraySubscriptExpr 0x26de9763578 <col:54, col:64> 'felem [17][3]':'felem [17][3]' lvalue
|   |   |             |   |     |   |   |-ImplicitCastExpr 0x26de9763548 <col:54> 'felem (*)[17][3]' <LValueToRValue>
|   |   |             |   |     |   |   | `-DeclRefExpr 0x26de9763508 <col:54> 'felem (*)[17][3]' lvalue Var 0x26de9758cc8 'pre_comp' 'felem (*)[17][3]'
|   |   |             |   |     |   |   `-ImplicitCastExpr 0x26de9763560 <col:63> 'unsigned int' <LValueToRValue>
|   |   |             |   |     |   |     `-DeclRefExpr 0x26de9763528 <col:63> 'unsigned int' lvalue Var 0x26de9748f60 'i' 'unsigned int'
|   |   |             |   |     |   `-IntegerLiteral 0x26de9763598 <col:66> 'int' 1
|   |   |             |   |     `-IntegerLiteral 0x26de97635f8 <col:69> 'int' 0
|   |   |             |   |-ImplicitCastExpr 0x26de9763f30 <line:1963:35, col:51> 'const limb *':'const limb *' <NoOp>
|   |   |             |   | `-ImplicitCastExpr 0x26de9763f18 <col:35, col:51> 'limb *' <ArrayToPointerDecay>
|   |   |             |   |   `-ArraySubscriptExpr 0x26de9763788 <col:35, col:51> 'felem':'limb [9]' lvalue
|   |   |             |   |     |-ImplicitCastExpr 0x26de9763770 <col:35, col:48> 'felem *' <ArrayToPointerDecay>
|   |   |             |   |     | `-ArraySubscriptExpr 0x26de9763728 <col:35, col:48> 'felem [3]' lvalue
|   |   |             |   |     |   |-ImplicitCastExpr 0x26de9763710 <col:35, col:45> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   |             |   |     |   | `-ArraySubscriptExpr 0x26de97636c8 <col:35, col:45> 'felem [17][3]':'felem [17][3]' lvalue
|   |   |             |   |     |   |   |-ImplicitCastExpr 0x26de9763698 <col:35> 'felem (*)[17][3]' <LValueToRValue>
|   |   |             |   |     |   |   | `-DeclRefExpr 0x26de9763658 <col:35> 'felem (*)[17][3]' lvalue Var 0x26de9758cc8 'pre_comp' 'felem (*)[17][3]'
|   |   |             |   |     |   |   `-ImplicitCastExpr 0x26de97636b0 <col:44> 'unsigned int' <LValueToRValue>
|   |   |             |   |     |   |     `-DeclRefExpr 0x26de9763678 <col:44> 'unsigned int' lvalue Var 0x26de9748f60 'i' 'unsigned int'
|   |   |             |   |     |   `-IntegerLiteral 0x26de97636e8 <col:47> 'int' 1
|   |   |             |   |     `-IntegerLiteral 0x26de9763748 <col:50> 'int' 1
|   |   |             |   |-ImplicitCastExpr 0x26de9763f60 <col:54, col:70> 'const limb *':'const limb *' <NoOp>
|   |   |             |   | `-ImplicitCastExpr 0x26de9763f48 <col:54, col:70> 'limb *' <ArrayToPointerDecay>
|   |   |             |   |   `-ArraySubscriptExpr 0x26de97638d8 <col:54, col:70> 'felem':'limb [9]' lvalue
|   |   |             |   |     |-ImplicitCastExpr 0x26de97638c0 <col:54, col:67> 'felem *' <ArrayToPointerDecay>
|   |   |             |   |     | `-ArraySubscriptExpr 0x26de9763878 <col:54, col:67> 'felem [3]' lvalue
|   |   |             |   |     |   |-ImplicitCastExpr 0x26de9763860 <col:54, col:64> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   |             |   |     |   | `-ArraySubscriptExpr 0x26de9763818 <col:54, col:64> 'felem [17][3]':'felem [17][3]' lvalue
|   |   |             |   |     |   |   |-ImplicitCastExpr 0x26de97637e8 <col:54> 'felem (*)[17][3]' <LValueToRValue>
|   |   |             |   |     |   |   | `-DeclRefExpr 0x26de97637a8 <col:54> 'felem (*)[17][3]' lvalue Var 0x26de9758cc8 'pre_comp' 'felem (*)[17][3]'
|   |   |             |   |     |   |   `-ImplicitCastExpr 0x26de9763800 <col:63> 'unsigned int' <LValueToRValue>
|   |   |             |   |     |   |     `-DeclRefExpr 0x26de97637c8 <col:63> 'unsigned int' lvalue Var 0x26de9748f60 'i' 'unsigned int'
|   |   |             |   |     |   `-IntegerLiteral 0x26de9763838 <col:66> 'int' 1
|   |   |             |   |     `-IntegerLiteral 0x26de9763898 <col:69> 'int' 2
|   |   |             |   |-IntegerLiteral 0x26de97638f8 <col:73> 'int' 0
|   |   |             |   |-ImplicitCastExpr 0x26de9763f90 <line:1964:35, col:55> 'const limb *':'const limb *' <NoOp>
|   |   |             |   | `-ImplicitCastExpr 0x26de9763f78 <col:35, col:55> 'limb *' <ArrayToPointerDecay>
|   |   |             |   |   `-ArraySubscriptExpr 0x26de9763aa8 <col:35, col:55> 'felem':'limb [9]' lvalue
|   |   |             |   |     |-ImplicitCastExpr 0x26de9763a90 <col:35, col:52> 'felem *' <ArrayToPointerDecay>
|   |   |             |   |     | `-ArraySubscriptExpr 0x26de9763a48 <col:35, col:52> 'felem [3]' lvalue
|   |   |             |   |     |   |-ImplicitCastExpr 0x26de9763a30 <col:35, col:45> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   |             |   |     |   | `-ArraySubscriptExpr 0x26de9763990 <col:35, col:45> 'felem [17][3]':'felem [17][3]' lvalue
|   |   |             |   |     |   |   |-ImplicitCastExpr 0x26de9763960 <col:35> 'felem (*)[17][3]' <LValueToRValue>
|   |   |             |   |     |   |   | `-DeclRefExpr 0x26de9763920 <col:35> 'felem (*)[17][3]' lvalue Var 0x26de9758cc8 'pre_comp' 'felem (*)[17][3]'
|   |   |             |   |     |   |   `-ImplicitCastExpr 0x26de9763978 <col:44> 'unsigned int' <LValueToRValue>
|   |   |             |   |     |   |     `-DeclRefExpr 0x26de9763940 <col:44> 'unsigned int' lvalue Var 0x26de9748f60 'i' 'unsigned int'
|   |   |             |   |     |   `-BinaryOperator 0x26de9763a10 <col:47, col:51> 'int' '-'
|   |   |             |   |     |     |-ImplicitCastExpr 0x26de97639f8 <col:47> 'int' <LValueToRValue>
|   |   |             |   |     |     | `-DeclRefExpr 0x26de97639b0 <col:47> 'int' lvalue Var 0x26de9758750 'j' 'int'
|   |   |             |   |     |     `-IntegerLiteral 0x26de97639d0 <col:51> 'int' 1
|   |   |             |   |     `-IntegerLiteral 0x26de9763a68 <col:54> 'int' 0
|   |   |             |   |-ImplicitCastExpr 0x26de9763fc0 <line:1965:35, col:55> 'const limb *':'const limb *' <NoOp>
|   |   |             |   | `-ImplicitCastExpr 0x26de9763fa8 <col:35, col:55> 'limb *' <ArrayToPointerDecay>
|   |   |             |   |   `-ArraySubscriptExpr 0x26de9763c50 <col:35, col:55> 'felem':'limb [9]' lvalue
|   |   |             |   |     |-ImplicitCastExpr 0x26de9763c38 <col:35, col:52> 'felem *' <ArrayToPointerDecay>
|   |   |             |   |     | `-ArraySubscriptExpr 0x26de9763bf0 <col:35, col:52> 'felem [3]' lvalue
|   |   |             |   |     |   |-ImplicitCastExpr 0x26de9763bd8 <col:35, col:45> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   |             |   |     |   | `-ArraySubscriptExpr 0x26de9763b38 <col:35, col:45> 'felem [17][3]':'felem [17][3]' lvalue
|   |   |             |   |     |   |   |-ImplicitCastExpr 0x26de9763b08 <col:35> 'felem (*)[17][3]' <LValueToRValue>
|   |   |             |   |     |   |   | `-DeclRefExpr 0x26de9763ac8 <col:35> 'felem (*)[17][3]' lvalue Var 0x26de9758cc8 'pre_comp' 'felem (*)[17][3]'
|   |   |             |   |     |   |   `-ImplicitCastExpr 0x26de9763b20 <col:44> 'unsigned int' <LValueToRValue>
|   |   |             |   |     |   |     `-DeclRefExpr 0x26de9763ae8 <col:44> 'unsigned int' lvalue Var 0x26de9748f60 'i' 'unsigned int'
|   |   |             |   |     |   `-BinaryOperator 0x26de9763bb8 <col:47, col:51> 'int' '-'
|   |   |             |   |     |     |-ImplicitCastExpr 0x26de9763ba0 <col:47> 'int' <LValueToRValue>
|   |   |             |   |     |     | `-DeclRefExpr 0x26de9763b58 <col:47> 'int' lvalue Var 0x26de9758750 'j' 'int'
|   |   |             |   |     |     `-IntegerLiteral 0x26de9763b78 <col:51> 'int' 1
|   |   |             |   |     `-IntegerLiteral 0x26de9763c10 <col:54> 'int' 1
|   |   |             |   `-ImplicitCastExpr 0x26de9763ff0 <line:1966:35, col:55> 'const limb *':'const limb *' <NoOp>
|   |   |             |     `-ImplicitCastExpr 0x26de9763fd8 <col:35, col:55> 'limb *' <ArrayToPointerDecay>
|   |   |             |       `-ArraySubscriptExpr 0x26de9763df8 <col:35, col:55> 'felem':'limb [9]' lvalue
|   |   |             |         |-ImplicitCastExpr 0x26de9763de0 <col:35, col:52> 'felem *' <ArrayToPointerDecay>
|   |   |             |         | `-ArraySubscriptExpr 0x26de9763d98 <col:35, col:52> 'felem [3]' lvalue
|   |   |             |         |   |-ImplicitCastExpr 0x26de9763d80 <col:35, col:45> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   |             |         |   | `-ArraySubscriptExpr 0x26de9763ce0 <col:35, col:45> 'felem [17][3]':'felem [17][3]' lvalue
|   |   |             |         |   |   |-ImplicitCastExpr 0x26de9763cb0 <col:35> 'felem (*)[17][3]' <LValueToRValue>
|   |   |             |         |   |   | `-DeclRefExpr 0x26de9763c70 <col:35> 'felem (*)[17][3]' lvalue Var 0x26de9758cc8 'pre_comp' 'felem (*)[17][3]'
|   |   |             |         |   |   `-ImplicitCastExpr 0x26de9763cc8 <col:44> 'unsigned int' <LValueToRValue>
|   |   |             |         |   |     `-DeclRefExpr 0x26de9763c90 <col:44> 'unsigned int' lvalue Var 0x26de9748f60 'i' 'unsigned int'
|   |   |             |         |   `-BinaryOperator 0x26de9763d60 <col:47, col:51> 'int' '-'
|   |   |             |         |     |-ImplicitCastExpr 0x26de9763d48 <col:47> 'int' <LValueToRValue>
|   |   |             |         |     | `-DeclRefExpr 0x26de9763d00 <col:47> 'int' lvalue Var 0x26de9758750 'j' 'int'
|   |   |             |         |     `-IntegerLiteral 0x26de9763d20 <col:51> 'int' 1
|   |   |             |         `-IntegerLiteral 0x26de9763db8 <col:54> 'int' 2
|   |   |             `-CompoundStmt 0x26de9764a98 <line:1967:28, line:1972:21>
|   |   |               `-CallExpr 0x26de9764970 <line:1968:25, line:1971:59> 'void'
|   |   |                 |-ImplicitCastExpr 0x26de9764958 <line:1968:25> 'void (*)(limb *, limb *, limb *, const limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   |   |                 | `-DeclRefExpr 0x26de9764020 <col:25> 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *)' Function 0x26de9672c48 'point_double' 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *)'
|   |   |                 |-ImplicitCastExpr 0x26de97649c0 <col:38, col:54> 'limb *' <ArrayToPointerDecay>
|   |   |                 | `-ArraySubscriptExpr 0x26de9764180 <col:38, col:54> 'felem':'limb [9]' lvalue
|   |   |                 |   |-ImplicitCastExpr 0x26de9764168 <col:38, col:51> 'felem *' <ArrayToPointerDecay>
|   |   |                 |   | `-ArraySubscriptExpr 0x26de9764120 <col:38, col:51> 'felem [3]' lvalue
|   |   |                 |   |   |-ImplicitCastExpr 0x26de97640f0 <col:38, col:48> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   |                 |   |   | `-ArraySubscriptExpr 0x26de97640b0 <col:38, col:48> 'felem [17][3]':'felem [17][3]' lvalue
|   |   |                 |   |   |   |-ImplicitCastExpr 0x26de9764080 <col:38> 'felem (*)[17][3]' <LValueToRValue>
|   |   |                 |   |   |   | `-DeclRefExpr 0x26de9764040 <col:38> 'felem (*)[17][3]' lvalue Var 0x26de9758cc8 'pre_comp' 'felem (*)[17][3]'
|   |   |                 |   |   |   `-ImplicitCastExpr 0x26de9764098 <col:47> 'unsigned int' <LValueToRValue>
|   |   |                 |   |   |     `-DeclRefExpr 0x26de9764060 <col:47> 'unsigned int' lvalue Var 0x26de9748f60 'i' 'unsigned int'
|   |   |                 |   |   `-ImplicitCastExpr 0x26de9764108 <col:50> 'int' <LValueToRValue>
|   |   |                 |   |     `-DeclRefExpr 0x26de97640d0 <col:50> 'int' lvalue Var 0x26de9758750 'j' 'int'
|   |   |                 |   `-IntegerLiteral 0x26de9764140 <col:53> 'int' 0
|   |   |                 |-ImplicitCastExpr 0x26de97649d8 <col:57, col:73> 'limb *' <ArrayToPointerDecay>
|   |   |                 | `-ArraySubscriptExpr 0x26de97642e0 <col:57, col:73> 'felem':'limb [9]' lvalue
|   |   |                 |   |-ImplicitCastExpr 0x26de97642c8 <col:57, col:70> 'felem *' <ArrayToPointerDecay>
|   |   |                 |   | `-ArraySubscriptExpr 0x26de9764280 <col:57, col:70> 'felem [3]' lvalue
|   |   |                 |   |   |-ImplicitCastExpr 0x26de9764250 <col:57, col:67> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   |                 |   |   | `-ArraySubscriptExpr 0x26de9764210 <col:57, col:67> 'felem [17][3]':'felem [17][3]' lvalue
|   |   |                 |   |   |   |-ImplicitCastExpr 0x26de97641e0 <col:57> 'felem (*)[17][3]' <LValueToRValue>
|   |   |                 |   |   |   | `-DeclRefExpr 0x26de97641a0 <col:57> 'felem (*)[17][3]' lvalue Var 0x26de9758cc8 'pre_comp' 'felem (*)[17][3]'
|   |   |                 |   |   |   `-ImplicitCastExpr 0x26de97641f8 <col:66> 'unsigned int' <LValueToRValue>
|   |   |                 |   |   |     `-DeclRefExpr 0x26de97641c0 <col:66> 'unsigned int' lvalue Var 0x26de9748f60 'i' 'unsigned int'
|   |   |                 |   |   `-ImplicitCastExpr 0x26de9764268 <col:69> 'int' <LValueToRValue>
|   |   |                 |   |     `-DeclRefExpr 0x26de9764230 <col:69> 'int' lvalue Var 0x26de9758750 'j' 'int'
|   |   |                 |   `-IntegerLiteral 0x26de97642a0 <col:72> 'int' 1
|   |   |                 |-ImplicitCastExpr 0x26de97649f0 <line:1969:38, col:54> 'limb *' <ArrayToPointerDecay>
|   |   |                 | `-ArraySubscriptExpr 0x26de9764440 <col:38, col:54> 'felem':'limb [9]' lvalue
|   |   |                 |   |-ImplicitCastExpr 0x26de9764428 <col:38, col:51> 'felem *' <ArrayToPointerDecay>
|   |   |                 |   | `-ArraySubscriptExpr 0x26de97643e0 <col:38, col:51> 'felem [3]' lvalue
|   |   |                 |   |   |-ImplicitCastExpr 0x26de97643b0 <col:38, col:48> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   |                 |   |   | `-ArraySubscriptExpr 0x26de9764370 <col:38, col:48> 'felem [17][3]':'felem [17][3]' lvalue
|   |   |                 |   |   |   |-ImplicitCastExpr 0x26de9764340 <col:38> 'felem (*)[17][3]' <LValueToRValue>
|   |   |                 |   |   |   | `-DeclRefExpr 0x26de9764300 <col:38> 'felem (*)[17][3]' lvalue Var 0x26de9758cc8 'pre_comp' 'felem (*)[17][3]'
|   |   |                 |   |   |   `-ImplicitCastExpr 0x26de9764358 <col:47> 'unsigned int' <LValueToRValue>
|   |   |                 |   |   |     `-DeclRefExpr 0x26de9764320 <col:47> 'unsigned int' lvalue Var 0x26de9748f60 'i' 'unsigned int'
|   |   |                 |   |   `-ImplicitCastExpr 0x26de97643c8 <col:50> 'int' <LValueToRValue>
|   |   |                 |   |     `-DeclRefExpr 0x26de9764390 <col:50> 'int' lvalue Var 0x26de9758750 'j' 'int'
|   |   |                 |   `-IntegerLiteral 0x26de9764400 <col:53> 'int' 2
|   |   |                 |-ImplicitCastExpr 0x26de9764a20 <col:57, col:77> 'const limb *':'const limb *' <NoOp>
|   |   |                 | `-ImplicitCastExpr 0x26de9764a08 <col:57, col:77> 'limb *' <ArrayToPointerDecay>
|   |   |                 |   `-ArraySubscriptExpr 0x26de97645e8 <col:57, col:77> 'felem':'limb [9]' lvalue
|   |   |                 |     |-ImplicitCastExpr 0x26de97645d0 <col:57, col:74> 'felem *' <ArrayToPointerDecay>
|   |   |                 |     | `-ArraySubscriptExpr 0x26de9764588 <col:57, col:74> 'felem [3]' lvalue
|   |   |                 |     |   |-ImplicitCastExpr 0x26de9764570 <col:57, col:67> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   |                 |     |   | `-ArraySubscriptExpr 0x26de97644d0 <col:57, col:67> 'felem [17][3]':'felem [17][3]' lvalue
|   |   |                 |     |   |   |-ImplicitCastExpr 0x26de97644a0 <col:57> 'felem (*)[17][3]' <LValueToRValue>
|   |   |                 |     |   |   | `-DeclRefExpr 0x26de9764460 <col:57> 'felem (*)[17][3]' lvalue Var 0x26de9758cc8 'pre_comp' 'felem (*)[17][3]'
|   |   |                 |     |   |   `-ImplicitCastExpr 0x26de97644b8 <col:66> 'unsigned int' <LValueToRValue>
|   |   |                 |     |   |     `-DeclRefExpr 0x26de9764480 <col:66> 'unsigned int' lvalue Var 0x26de9748f60 'i' 'unsigned int'
|   |   |                 |     |   `-BinaryOperator 0x26de9764550 <col:69, col:73> 'int' '/'
|   |   |                 |     |     |-ImplicitCastExpr 0x26de9764538 <col:69> 'int' <LValueToRValue>
|   |   |                 |     |     | `-DeclRefExpr 0x26de97644f0 <col:69> 'int' lvalue Var 0x26de9758750 'j' 'int'
|   |   |                 |     |     `-IntegerLiteral 0x26de9764510 <col:73> 'int' 2
|   |   |                 |     `-IntegerLiteral 0x26de97645a8 <col:76> 'int' 0
|   |   |                 |-ImplicitCastExpr 0x26de9764a50 <line:1970:38, col:58> 'const limb *':'const limb *' <NoOp>
|   |   |                 | `-ImplicitCastExpr 0x26de9764a38 <col:38, col:58> 'limb *' <ArrayToPointerDecay>
|   |   |                 |   `-ArraySubscriptExpr 0x26de9764790 <col:38, col:58> 'felem':'limb [9]' lvalue
|   |   |                 |     |-ImplicitCastExpr 0x26de9764778 <col:38, col:55> 'felem *' <ArrayToPointerDecay>
|   |   |                 |     | `-ArraySubscriptExpr 0x26de9764730 <col:38, col:55> 'felem [3]' lvalue
|   |   |                 |     |   |-ImplicitCastExpr 0x26de9764718 <col:38, col:48> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   |                 |     |   | `-ArraySubscriptExpr 0x26de9764678 <col:38, col:48> 'felem [17][3]':'felem [17][3]' lvalue
|   |   |                 |     |   |   |-ImplicitCastExpr 0x26de9764648 <col:38> 'felem (*)[17][3]' <LValueToRValue>
|   |   |                 |     |   |   | `-DeclRefExpr 0x26de9764608 <col:38> 'felem (*)[17][3]' lvalue Var 0x26de9758cc8 'pre_comp' 'felem (*)[17][3]'
|   |   |                 |     |   |   `-ImplicitCastExpr 0x26de9764660 <col:47> 'unsigned int' <LValueToRValue>
|   |   |                 |     |   |     `-DeclRefExpr 0x26de9764628 <col:47> 'unsigned int' lvalue Var 0x26de9748f60 'i' 'unsigned int'
|   |   |                 |     |   `-BinaryOperator 0x26de97646f8 <col:50, col:54> 'int' '/'
|   |   |                 |     |     |-ImplicitCastExpr 0x26de97646e0 <col:50> 'int' <LValueToRValue>
|   |   |                 |     |     | `-DeclRefExpr 0x26de9764698 <col:50> 'int' lvalue Var 0x26de9758750 'j' 'int'
|   |   |                 |     |     `-IntegerLiteral 0x26de97646b8 <col:54> 'int' 2
|   |   |                 |     `-IntegerLiteral 0x26de9764750 <col:57> 'int' 1
|   |   |                 `-ImplicitCastExpr 0x26de9764a80 <line:1971:38, col:58> 'const limb *':'const limb *' <NoOp>
|   |   |                   `-ImplicitCastExpr 0x26de9764a68 <col:38, col:58> 'limb *' <ArrayToPointerDecay>
|   |   |                     `-ArraySubscriptExpr 0x26de9764938 <col:38, col:58> 'felem':'limb [9]' lvalue
|   |   |                       |-ImplicitCastExpr 0x26de9764920 <col:38, col:55> 'felem *' <ArrayToPointerDecay>
|   |   |                       | `-ArraySubscriptExpr 0x26de97648d8 <col:38, col:55> 'felem [3]' lvalue
|   |   |                       |   |-ImplicitCastExpr 0x26de97648c0 <col:38, col:48> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   |                       |   | `-ArraySubscriptExpr 0x26de9764820 <col:38, col:48> 'felem [17][3]':'felem [17][3]' lvalue
|   |   |                       |   |   |-ImplicitCastExpr 0x26de97647f0 <col:38> 'felem (*)[17][3]' <LValueToRValue>
|   |   |                       |   |   | `-DeclRefExpr 0x26de97647b0 <col:38> 'felem (*)[17][3]' lvalue Var 0x26de9758cc8 'pre_comp' 'felem (*)[17][3]'
|   |   |                       |   |   `-ImplicitCastExpr 0x26de9764808 <col:47> 'unsigned int' <LValueToRValue>
|   |   |                       |   |     `-DeclRefExpr 0x26de97647d0 <col:47> 'unsigned int' lvalue Var 0x26de9748f60 'i' 'unsigned int'
|   |   |                       |   `-BinaryOperator 0x26de97648a0 <col:50, col:54> 'int' '/'
|   |   |                       |     |-ImplicitCastExpr 0x26de9764888 <col:50> 'int' <LValueToRValue>
|   |   |                       |     | `-DeclRefExpr 0x26de9764840 <col:50> 'int' lvalue Var 0x26de9758750 'j' 'int'
|   |   |                       |     `-IntegerLiteral 0x26de9764860 <col:54> 'int' 2
|   |   |                       `-IntegerLiteral 0x26de97648f8 <col:57> 'int' 2
|   |   `-IfStmt 0x26de975ae48 <line:1976:9, line:1977:72>
|   |     |-ImplicitCastExpr 0x26de9764c18 <line:1976:13> 'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x26de9764bf8 <col:13> 'int' lvalue Var 0x26de97587e8 'mixed' 'int'
|   |     `-CallExpr 0x26de975ade0 <line:1977:13, col:72> 'void'
|   |       |-ImplicitCastExpr 0x26de975adc8 <col:13> 'void (*)(size_t, felem (*)[3], felem *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x26de9764c30 <col:13> 'void (size_t, felem (*)[3], felem *)' Function 0x26de9757448 'make_points_affine' 'void (size_t, felem (*)[3], felem *)'
|   |       |-BinaryOperator 0x26de9764cc8 <col:32, col:45> 'unsigned long long' '*'
|   |       | |-ImplicitCastExpr 0x26de9764c98 <col:32> 'size_t':'unsigned long long' <LValueToRValue>
|   |       | | `-DeclRefExpr 0x26de9764c50 <col:32> 'size_t':'unsigned long long' lvalue Var 0x26de9749148 'num_points' 'size_t':'unsigned long long'
|   |       | `-ImplicitCastExpr 0x26de9764cb0 <col:45> 'unsigned long long' <IntegralCast>
|   |       |   `-IntegerLiteral 0x26de9764c70 <col:45> 'int' 17
|   |       |-ImplicitCastExpr 0x26de975ae18 <col:49, col:59> 'felem (*)[3]' <ArrayToPointerDecay>
|   |       | `-ArraySubscriptExpr 0x26de9764d48 <col:49, col:59> 'felem [17][3]':'felem [17][3]' lvalue
|   |       |   |-ImplicitCastExpr 0x26de9764d30 <col:49> 'felem (*)[17][3]' <LValueToRValue>
|   |       |   | `-DeclRefExpr 0x26de9764ce8 <col:49> 'felem (*)[17][3]' lvalue Var 0x26de9758cc8 'pre_comp' 'felem (*)[17][3]'
|   |       |   `-IntegerLiteral 0x26de9764d08 <col:58> 'int' 0
|   |       `-ImplicitCastExpr 0x26de975ae30 <col:62> 'felem *' <LValueToRValue>
|   |         `-DeclRefExpr 0x26de9764d68 <col:62> 'felem *' lvalue Var 0x26de9748d98 'tmp_felems' 'felem *'
|   |-IfStmt 0x26de975bfb8 <line:1981:5, line:2007:69> has_else
|   | |-OpaqueValueExpr 0x26de975bfa0 <<invalid sloc>> '_Bool'
|   | |-CompoundStmt 0x26de975bac8 <line:1981:46, line:2003:5>
|   | | |-CallExpr 0x26de975b098 <line:1982:9, col:45> 'void *'
|   | | | |-ImplicitCastExpr 0x26de975b080 <col:9> 'void *(*)(void *, int, unsigned long long)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x26de975af88 <col:9> 'void *(void *, int, unsigned long long)' Function 0x26de952a5c8 'memset' 'void *(void *, int, unsigned long long)'
|   | | | |-ImplicitCastExpr 0x26de975b0e8 <col:16> 'void *' <BitCast>
|   | | | | `-ImplicitCastExpr 0x26de975b0d0 <col:16> 'u8 *' <ArrayToPointerDecay>
|   | | | |   `-DeclRefExpr 0x26de975afa8 <col:16> 'felem_bytearray':'u8 [66]' lvalue Var 0x26de9758928 'g_secret' 'felem_bytearray':'u8 [66]'
|   | | | |-IntegerLiteral 0x26de975afe0 <col:26> 'int' 0
|   | | | `-UnaryExprOrTypeTraitExpr 0x26de975b048 <col:29, col:44> 'unsigned long long' sizeof
|   | | |   `-ParenExpr 0x26de975b028 <col:35, col:44> 'felem_bytearray':'u8 [66]' lvalue
|   | | |     `-DeclRefExpr 0x26de975b008 <col:36> 'felem_bytearray':'u8 [66]' lvalue Var 0x26de9758928 'g_secret' 'felem_bytearray':'u8 [66]' non_odr_use_unevaluated
|   | | |-IfStmt 0x26de975b300 <line:1984:9, line:1995:13> has_else
|   | | | |-OpaqueValueExpr 0x26de975b2e8 <<invalid sloc>> '_Bool'
|   | | | |-CompoundStmt 0x26de975b268 <line:1984:70, line:1994:9>
|   | | | | `-IfStmt 0x26de975b1f0 <line:1989:13, line:1992:13>
|   | | | |   |-OpaqueValueExpr 0x26de975b1d8 <<invalid sloc>> '_Bool'
|   | | | |   `-CompoundStmt 0x26de975b1c0 <line:1989:67, line:1992:13>
|   | | | |     `-GotoStmt 0x26de975b1a8 <line:1991:17, col:22> 'err' 0x26de9749fe0
|   | | | `-NullStmt 0x26de975b2e0 <line:1995:13>
|   | | |-CallExpr 0x26de975b3c0 <line:1996:9, col:45> 'void'
|   | | | |-ImplicitCastExpr 0x26de975b3a8 <col:9> 'void (*)(u8 *, const u8 *, unsigned int)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x26de975b328 <col:9> 'void (u8 *, const u8 *, unsigned int)' Function 0x26de9592428 'flip_endian' 'void (u8 *, const u8 *, unsigned int)'
|   | | | |-ImplicitCastExpr 0x26de975b3f8 <col:21> 'u8 *' <ArrayToPointerDecay>
|   | | | | `-DeclRefExpr 0x26de975b348 <col:21> 'felem_bytearray':'u8 [66]' lvalue Var 0x26de9758928 'g_secret' 'felem_bytearray':'u8 [66]'
|   | | | |-ImplicitCastExpr 0x26de975b428 <col:31> 'const u8 *' <NoOp>
|   | | | | `-ImplicitCastExpr 0x26de975b410 <col:31> 'u8 *' <ArrayToPointerDecay>
|   | | | |   `-DeclRefExpr 0x26de975b368 <col:31> 'felem_bytearray':'u8 [66]' lvalue Var 0x26de9748ec8 'tmp' 'felem_bytearray':'u8 [66]'
|   | | | `-ImplicitCastExpr 0x26de975b440 <col:36> 'unsigned int' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x26de975b388 <col:36> 'unsigned int' lvalue Var 0x26de9748fe0 'num_bytes' 'unsigned int'
|   | | `-CallExpr 0x26de975b9a0 <line:1998:9, line:2002:48> 'void'
|   | |   |-ImplicitCastExpr 0x26de975b988 <line:1998:9> 'void (*)(limb *, limb *, limb *, const felem_bytearray *, const unsigned int, const u8 *, const int, const felem (*)[17][3], const felem (*)[3])' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x26de975b458 <col:9> 'void (limb *, limb *, limb *, const felem_bytearray *, const unsigned int, const u8 *, const int, const felem (*)[17][3], const felem (*)[3])' Function 0x26de974efc8 'batch_mul' 'void (limb *, limb *, limb *, const felem_bytearray *, const unsigned int, const u8 *, const int, const felem (*)[17][3], const felem (*)[3])'
|   | |   |-ImplicitCastExpr 0x26de975ba08 <col:19> 'limb *' <ArrayToPointerDecay>
|   | |   | `-DeclRefExpr 0x26de975b478 <col:19> 'felem':'limb [9]' lvalue Var 0x26de9749390 'x_out' 'felem':'limb [9]'
|   | |   |-ImplicitCastExpr 0x26de975ba20 <col:26> 'limb *' <ArrayToPointerDecay>
|   | |   | `-DeclRefExpr 0x26de975b498 <col:26> 'felem':'limb [9]' lvalue Var 0x26de9749408 'y_out' 'felem':'limb [9]'
|   | |   |-ImplicitCastExpr 0x26de975ba38 <col:33> 'limb *' <ArrayToPointerDecay>
|   | |   | `-DeclRefExpr 0x26de975b4b8 <col:33> 'felem':'limb [9]' lvalue Var 0x26de9749480 'z_out' 'felem':'limb [9]'
|   | |   |-CStyleCastExpr 0x26de975b5c8 <line:1999:19, col:45> 'const felem_bytearray (*)' <NoOp>
|   | |   | `-ImplicitCastExpr 0x26de975b570 <col:45> 'felem_bytearray *' <LValueToRValue> part_of_explicit_cast
|   | |   |   `-DeclRefExpr 0x26de975b4d8 <col:45> 'felem_bytearray *' lvalue Var 0x26de9758a18 'secrets' 'felem_bytearray *'
|   | |   |-ImplicitCastExpr 0x26de975ba68 <col:54> 'unsigned int' <IntegralCast>
|   | |   | `-ImplicitCastExpr 0x26de975ba50 <col:54> 'size_t':'unsigned long long' <LValueToRValue>
|   | |   |   `-DeclRefExpr 0x26de975b5f0 <col:54> 'size_t':'unsigned long long' lvalue Var 0x26de9749148 'num_points' 'size_t':'unsigned long long'
|   | |   |-ImplicitCastExpr 0x26de975ba98 <line:2000:19> 'const u8 *' <NoOp>
|   | |   | `-ImplicitCastExpr 0x26de975ba80 <col:19> 'u8 *' <ArrayToPointerDecay>
|   | |   |   `-DeclRefExpr 0x26de975b610 <col:19> 'felem_bytearray':'u8 [66]' lvalue Var 0x26de9758928 'g_secret' 'felem_bytearray':'u8 [66]'
|   | |   |-ImplicitCastExpr 0x26de975bab0 <line:2001:19> 'int' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x26de975b630 <col:19> 'int' lvalue Var 0x26de97587e8 'mixed' 'int'
|   | |   |-CStyleCastExpr 0x26de975b7d8 <col:26, col:49> 'const felem (*)[17][3]' <NoOp>
|   | |   | `-ImplicitCastExpr 0x26de975b788 <col:49> 'felem (*)[17][3]' <LValueToRValue> part_of_explicit_cast
|   | |   |   `-DeclRefExpr 0x26de975b6a0 <col:49> 'felem (*)[17][3]' lvalue Var 0x26de9758cc8 'pre_comp' 'felem (*)[17][3]'
|   | |   `-CStyleCastExpr 0x26de975b900 <line:2002:19, col:38> 'const felem (*)[3]' <NoOp>
|   | |     `-ImplicitCastExpr 0x26de975b8e8 <col:38> 'felem (*)[3]' <LValueToRValue> part_of_explicit_cast
|   | |       `-DeclRefExpr 0x26de975b828 <col:38> 'felem (*)[3]' lvalue Var 0x26de9749738 'g_pre_comp' 'felem (*)[3]'
|   | `-CallExpr 0x26de975be78 <line:2005:9, line:2007:69> 'void'
|   |   |-ImplicitCastExpr 0x26de975be60 <line:2005:9> 'void (*)(limb *, limb *, limb *, const felem_bytearray *, const unsigned int, const u8 *, const int, const felem (*)[17][3], const felem (*)[3])' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x26de975baf8 <col:9> 'void (limb *, limb *, limb *, const felem_bytearray *, const unsigned int, const u8 *, const int, const felem (*)[17][3], const felem (*)[3])' Function 0x26de974efc8 'batch_mul' 'void (limb *, limb *, limb *, const felem_bytearray *, const unsigned int, const u8 *, const int, const felem (*)[17][3], const felem (*)[3])'
|   |   |-ImplicitCastExpr 0x26de975bee0 <col:19> 'limb *' <ArrayToPointerDecay>
|   |   | `-DeclRefExpr 0x26de975bb18 <col:19> 'felem':'limb [9]' lvalue Var 0x26de9749390 'x_out' 'felem':'limb [9]'
|   |   |-ImplicitCastExpr 0x26de975bef8 <col:26> 'limb *' <ArrayToPointerDecay>
|   |   | `-DeclRefExpr 0x26de975bb38 <col:26> 'felem':'limb [9]' lvalue Var 0x26de9749408 'y_out' 'felem':'limb [9]'
|   |   |-ImplicitCastExpr 0x26de975bf10 <col:33> 'limb *' <ArrayToPointerDecay>
|   |   | `-DeclRefExpr 0x26de975bb58 <col:33> 'felem':'limb [9]' lvalue Var 0x26de9749480 'z_out' 'felem':'limb [9]'
|   |   |-CStyleCastExpr 0x26de975bbc8 <line:2006:19, col:45> 'const felem_bytearray (*)' <NoOp>
|   |   | `-ImplicitCastExpr 0x26de975bbb0 <col:45> 'felem_bytearray *' <LValueToRValue> part_of_explicit_cast
|   |   |   `-DeclRefExpr 0x26de975bb78 <col:45> 'felem_bytearray *' lvalue Var 0x26de9758a18 'secrets' 'felem_bytearray *'
|   |   |-ImplicitCastExpr 0x26de975bf40 <col:54> 'unsigned int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x26de975bf28 <col:54> 'size_t':'unsigned long long' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x26de975bbf0 <col:54> 'size_t':'unsigned long long' lvalue Var 0x26de9749148 'num_points' 'size_t':'unsigned long long'
|   |   |-ImplicitCastExpr 0x26de975bf58 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'const u8 *' <NullToPointer>
|   |   | `-ParenExpr 0x26de975bc78 <col:17, col:27> 'void *'
|   |   |   `-CStyleCastExpr 0x26de975bc50 <col:18, col:26> 'void *' <NullToPointer>
|   |   |     `-IntegerLiteral 0x26de975bc10 <col:26> 'int' 0
|   |   |-ImplicitCastExpr 0x26de975bf70 <.//openssl//file_jk/before\crypto\ec\ecp_nistp521.c:2007:25> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x26de975bc98 <col:25> 'int' lvalue Var 0x26de97587e8 'mixed' 'int'
|   |   |-CStyleCastExpr 0x26de975bdb0 <col:32, col:55> 'const felem (*)[17][3]' <NoOp>
|   |   | `-ImplicitCastExpr 0x26de975bd98 <col:55> 'felem (*)[17][3]' <LValueToRValue> part_of_explicit_cast
|   |   |   `-DeclRefExpr 0x26de975bd08 <col:55> 'felem (*)[17][3]' lvalue Var 0x26de9758cc8 'pre_comp' 'felem (*)[17][3]'
|   |   `-ImplicitCastExpr 0x26de975bf88 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'const felem (*)[3]':'const felem (*)[3]' <NullToPointer>
|   |     `-ParenExpr 0x26de975be40 <col:17, col:27> 'void *'
|   |       `-CStyleCastExpr 0x26de975be18 <col:18, col:26> 'void *' <NullToPointer>
|   |         `-IntegerLiteral 0x26de975bdd8 <col:26> 'int' 0
|   |-CallExpr 0x26de975c070 <.//openssl//file_jk/before\crypto\ec\ecp_nistp521.c:2009:5, col:31> 'void'
|   | |-ImplicitCastExpr 0x26de975c058 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de975bfe0 <col:5> 'void (limb *, const limb *)' Function 0x26de96628f0 'felem_contract' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x26de975c0a0 <col:20> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de975c000 <col:20> 'felem':'limb [9]' lvalue Var 0x26de9749228 'x_in' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x26de975c0d0 <col:26> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de975c0b8 <col:26> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x26de975c038 <col:26> 'felem':'limb [9]' lvalue Var 0x26de9749390 'x_out' 'felem':'limb [9]'
|   |-CallExpr 0x26de975c178 <line:2010:5, col:31> 'void'
|   | |-ImplicitCastExpr 0x26de975c160 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de975c0e8 <col:5> 'void (limb *, const limb *)' Function 0x26de96628f0 'felem_contract' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x26de975c1a8 <col:20> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de975c108 <col:20> 'felem':'limb [9]' lvalue Var 0x26de97492a0 'y_in' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x26de975c1d8 <col:26> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de975c1c0 <col:26> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x26de975c140 <col:26> 'felem':'limb [9]' lvalue Var 0x26de9749408 'y_out' 'felem':'limb [9]'
|   |-CallExpr 0x26de975c280 <line:2011:5, col:31> 'void'
|   | |-ImplicitCastExpr 0x26de975c268 <col:5> 'void (*)(limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de975c1f0 <col:5> 'void (limb *, const limb *)' Function 0x26de96628f0 'felem_contract' 'void (limb *, const limb *)'
|   | |-ImplicitCastExpr 0x26de975c2b0 <col:20> 'limb *' <ArrayToPointerDecay>
|   | | `-DeclRefExpr 0x26de975c210 <col:20> 'felem':'limb [9]' lvalue Var 0x26de9749318 'z_in' 'felem':'limb [9]'
|   | `-ImplicitCastExpr 0x26de975c2e0 <col:26> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de975c2c8 <col:26> 'limb *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x26de975c248 <col:26> 'felem':'limb [9]' lvalue Var 0x26de9749480 'z_out' 'felem':'limb [9]'
|   |-IfStmt 0x26de975c3c0 <line:2012:5, line:2016:5>
|   | |-OpaqueValueExpr 0x26de975c3a8 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x26de975c390 <line:2013:34, line:2016:5>
|   |   `-GotoStmt 0x26de975c378 <line:2015:9, col:14> 'err' 0x26de9749fe0
|   |-LabelStmt 0x26de975c458 <line:2019:2, col:5> 'err'
|   | `-NullStmt 0x26de975c450 <col:5>
|   |-CallExpr 0x26de975c5f8 <line:2023:5, col:25> 'int'
|   | |-ImplicitCastExpr 0x26de975c5e0 <col:5> 'int (*)()' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de975c5a0 <col:5> 'int ()' Function 0x26de9754c58 'OPENSSL_free' 'int ()'
|   | `-ImplicitCastExpr 0x26de975c620 <col:18> 'felem_bytearray *' <LValueToRValue>
|   |   `-DeclRefExpr 0x26de975c5c0 <col:18> 'felem_bytearray *' lvalue Var 0x26de9758a18 'secrets' 'felem_bytearray *'
|   |-CallExpr 0x26de975c690 <line:2024:5, col:26> 'int'
|   | |-ImplicitCastExpr 0x26de975c678 <col:5> 'int (*)()' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de975c638 <col:5> 'int ()' Function 0x26de9754c58 'OPENSSL_free' 'int ()'
|   | `-ImplicitCastExpr 0x26de975c6b8 <col:18> 'felem (*)[17][3]' <LValueToRValue>
|   |   `-DeclRefExpr 0x26de975c658 <col:18> 'felem (*)[17][3]' lvalue Var 0x26de9758cc8 'pre_comp' 'felem (*)[17][3]'
|   |-CallExpr 0x26de975c728 <line:2025:5, col:28> 'int'
|   | |-ImplicitCastExpr 0x26de975c710 <col:5> 'int (*)()' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de975c6d0 <col:5> 'int ()' Function 0x26de9754c58 'OPENSSL_free' 'int ()'
|   | `-ImplicitCastExpr 0x26de975c750 <col:18> 'felem *' <LValueToRValue>
|   |   `-DeclRefExpr 0x26de975c6f0 <col:18> 'felem *' lvalue Var 0x26de9748d98 'tmp_felems' 'felem *'
|   `-ReturnStmt 0x26de975c7a0 <line:2026:5, col:12>
|     `-ImplicitCastExpr 0x26de975c788 <col:12> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x26de975c768 <col:12> 'int' lvalue Var 0x26de9758690 'ret' 'int'
|-FunctionDecl 0x26de975c9e8 <line:2029:1, line:2132:1> line:2029:5 invalid ec_GFp_nistp521_precompute_mult 'int (int *, int *)'
| |-ParmVarDecl 0x26de975c8c8 <col:37, col:47> col:47 invalid group 'int *'
| |-ParmVarDecl 0x26de975c948 <col:54, col:62> col:62 invalid ctx 'int *'
| `-CompoundStmt 0x26de976c598 <line:2030:1, line:2132:1>
|   |-DeclStmt 0x26de975cb58 <line:2031:5, col:16>
|   | `-VarDecl 0x26de975cac8 <col:5, col:15> col:9 used ret 'int' cinit
|   |   `-IntegerLiteral 0x26de975cb30 <col:15> 'int' 0
|   |-DeclStmt 0x26de975cc88 <line:2032:5, col:34>
|   | `-VarDecl 0x26de975cb80 <col:5, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27> .//openssl//file_jk/before\crypto\ec\ecp_nistp521.c:2032:24 used pre 'NISTP521_PRE_COMP *' cinit
|   |   `-ImplicitCastExpr 0x26de975cc70 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'NISTP521_PRE_COMP *' <NullToPointer>
|   |     `-ParenExpr 0x26de975cc50 <col:17, col:27> 'void *'
|   |       `-CStyleCastExpr 0x26de975cc28 <col:18, col:26> 'void *' <NullToPointer>
|   |         `-IntegerLiteral 0x26de975cbe8 <col:26> 'int' 0
|   |-DeclStmt 0x26de9764e08 <.//openssl//file_jk/before\crypto\ec\ecp_nistp521.c:2033:5, col:13>
|   | |-VarDecl 0x26de975ccb8 <col:5, col:9> col:9 used i 'int'
|   | `-VarDecl 0x26de975cd38 <col:5, col:12> col:12 used j 'int'
|   |-DeclStmt 0x26de9765070 <line:2037:5, col:25>
|   | `-VarDecl 0x26de9765008 <col:5, col:24> col:11 used tmp_felems 'felem [16]'
|   |-IfStmt 0x26de9765270 <line:2041:5, line:2043:20>
|   | |-OpaqueValueExpr 0x26de9765258 <<invalid sloc>> '_Bool'
|   | `-IfStmt 0x26de9765240 <line:2042:9, line:2043:20>
|   |   |-OpaqueValueExpr 0x26de9765228 <<invalid sloc>> '_Bool'
|   |   `-ReturnStmt 0x26de9765218 <col:13, col:20>
|   |     `-IntegerLiteral 0x26de97651f0 <col:20> 'int' 0
|   |-IfStmt 0x26de9765478 <line:2045:5, line:2046:14>
|   | |-OpaqueValueExpr 0x26de9765460 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x26de9765448 <col:9, col:14> 'err' 0x26de97653f8
|   |-IfStmt 0x26de9765548 <line:2048:5, line:2049:14>
|   | |-OpaqueValueExpr 0x26de9765530 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x26de9765518 <col:9, col:14> 'err' 0x26de97653f8
|   |-IfStmt 0x26de9765638 <line:2051:5, line:2052:14>
|   | |-OpaqueValueExpr 0x26de9765620 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x26de9765608 <col:9, col:14> 'err' 0x26de97653f8
|   |-IfStmt 0x26de9765930 <line:2055:5, line:2056:14>
|   | |-OpaqueValueExpr 0x26de9765918 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x26de9765900 <col:9, col:14> 'err' 0x26de97653f8
|   |-IfStmt 0x26de9765b48 <line:2057:5, line:2058:14>
|   | |-BinaryOperator 0x26de9765b10 <line:2057:9, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27> 'int' '=='
|   | | |-ParenExpr 0x26de9765a50 <.//openssl//file_jk/before\crypto\ec\ecp_nistp521.c:2057:9, col:39> 'NISTP521_PRE_COMP *'
|   | | | `-BinaryOperator 0x26de9765a30 <col:10, col:38> 'NISTP521_PRE_COMP *' '='
|   | | |   |-DeclRefExpr 0x26de9765948 <col:10> 'NISTP521_PRE_COMP *' lvalue Var 0x26de975cb80 'pre' 'NISTP521_PRE_COMP *'
|   | | |   `-CallExpr 0x26de9765a10 <col:16, col:38> 'NISTP521_PRE_COMP *'
|   | | |     `-ImplicitCastExpr 0x26de97659f8 <col:16> 'NISTP521_PRE_COMP *(*)()' <FunctionToPointerDecay>
|   | | |       `-DeclRefExpr 0x26de9765980 <col:16> 'NISTP521_PRE_COMP *()' Function 0x26de9754408 'nistp521_pre_comp_new' 'NISTP521_PRE_COMP *()'
|   | | `-ImplicitCastExpr 0x26de9765af8 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'NISTP521_PRE_COMP *' <BitCast>
|   | |   `-ParenExpr 0x26de9765ad8 <col:17, col:27> 'void *'
|   | |     `-CStyleCastExpr 0x26de9765ab0 <col:18, col:26> 'void *' <NullToPointer>
|   | |       `-IntegerLiteral 0x26de9765a70 <col:26> 'int' 0
|   | `-GotoStmt 0x26de9765b30 <.//openssl//file_jk/before\crypto\ec\ecp_nistp521.c:2058:9, col:14> 'err' 0x26de97653f8
|   |-IfStmt 0x26de9765e78 <line:2062:5, line:2065:5>
|   | |-OpaqueValueExpr 0x26de9765e60 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x26de9765e40 <line:2062:69, line:2065:5>
|   |   |-CallExpr 0x26de9765d40 <line:2063:9, col:62> 'void *'
|   |   | |-ImplicitCastExpr 0x26de9765d28 <col:9> 'void *(*)(void *, const void *, unsigned long long)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x26de9765ba8 <col:9> 'void *(void *, const void *, unsigned long long)' Function 0x26de9529af8 'memcpy' 'void *(void *, const void *, unsigned long long)'
|   |   | |-ImplicitCastExpr 0x26de9765d90 <col:16, col:21> 'void *' <BitCast>
|   |   | | `-ImplicitCastExpr 0x26de9765d78 <col:16, col:21> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   | |   `-MemberExpr 0x26de9765c00 <col:16, col:21> 'felem [16][3]' lvalue ->g_pre_comp 0x26de9753e08
|   |   | |     `-ImplicitCastExpr 0x26de9765be8 <col:16> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   |   | |       `-DeclRefExpr 0x26de9765bc8 <col:16> 'NISTP521_PRE_COMP *' lvalue Var 0x26de975cb80 'pre' 'NISTP521_PRE_COMP *'
|   |   | |-ImplicitCastExpr 0x26de9765dc0 <col:33> 'const void *' <BitCast>
|   |   | | `-ImplicitCastExpr 0x26de9765da8 <col:33> 'const felem (*)[3]' <ArrayToPointerDecay>
|   |   | |   `-DeclRefExpr 0x26de9765c30 <col:33> 'const felem [16][3]' lvalue Var 0x26de9679228 'gmul' 'const felem [16][3]'
|   |   | `-UnaryExprOrTypeTraitExpr 0x26de9765cd8 <col:39, col:61> 'unsigned long long' sizeof
|   |   |   `-ParenExpr 0x26de9765cb8 <col:45, col:61> 'felem [16][3]' lvalue
|   |   |     `-MemberExpr 0x26de9765c88 <col:46, col:51> 'felem [16][3]' lvalue ->g_pre_comp 0x26de9753e08 non_odr_use_unevaluated
|   |   |       `-ImplicitCastExpr 0x26de9765c70 <col:46> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   |   |         `-DeclRefExpr 0x26de9765c50 <col:46> 'NISTP521_PRE_COMP *' lvalue Var 0x26de975cb80 'pre' 'NISTP521_PRE_COMP *' non_odr_use_unevaluated
|   |   `-GotoStmt 0x26de9765e28 <line:2064:9, col:14> 'done' 0x26de9765dd8
|   |-IfStmt 0x26de9766238 <line:2066:5, line:2069:14>
|   | |-OpaqueValueExpr 0x26de9766220 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x26de9766208 <col:9, col:14> 'err' 0x26de97653f8
|   |-ForStmt 0x26de9767988 <line:2071:5, line:2083:5>
|   | |-BinaryOperator 0x26de97662b0 <line:2071:10, col:14> 'int' '='
|   | | |-DeclRefExpr 0x26de9766250 <col:10> 'int' lvalue Var 0x26de975ccb8 'i' 'int'
|   | | `-IntegerLiteral 0x26de9766288 <col:14> 'int' 1
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x26de9766330 <col:17, col:22> 'int' '<='
|   | | |-ImplicitCastExpr 0x26de9766318 <col:17> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de97662d0 <col:17> 'int' lvalue Var 0x26de975ccb8 'i' 'int'
|   | | `-IntegerLiteral 0x26de97662f0 <col:22> 'int' 4
|   | |-CompoundAssignOperator 0x26de97663b0 <col:25, col:31> 'int' '<<=' ComputeLHSTy='int' ComputeResultTy='int'
|   | | |-DeclRefExpr 0x26de9766350 <col:25> 'int' lvalue Var 0x26de975ccb8 'i' 'int'
|   | | `-IntegerLiteral 0x26de9766370 <col:31> 'int' 1
|   | `-CompoundStmt 0x26de9767968 <col:34, line:2083:5>
|   |   |-CallExpr 0x26de9766c40 <line:2072:9, line:2074:66> 'void'
|   |   | |-ImplicitCastExpr 0x26de9766c28 <line:2072:9> 'void (*)(limb *, limb *, limb *, const limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x26de97663e0 <col:9> 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *)' Function 0x26de9672c48 'point_double' 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *)'
|   |   | |-ImplicitCastExpr 0x26de9766c90 <col:22, col:46> 'limb *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x26de9766560 <col:22, col:46> 'felem':'limb [9]' lvalue
|   |   | |   |-ImplicitCastExpr 0x26de9766548 <col:22, col:43> 'felem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x26de9766500 <col:22, col:43> 'felem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x26de97664e8 <col:22, col:27> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-MemberExpr 0x26de9766438 <col:22, col:27> 'felem [16][3]' lvalue ->g_pre_comp 0x26de9753e08
|   |   | |   |   |   `-ImplicitCastExpr 0x26de9766420 <col:22> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x26de9766400 <col:22> 'NISTP521_PRE_COMP *' lvalue Var 0x26de975cb80 'pre' 'NISTP521_PRE_COMP *'
|   |   | |   |   `-BinaryOperator 0x26de97664c8 <col:38, col:42> 'int' '*'
|   |   | |   |     |-IntegerLiteral 0x26de9766468 <col:38> 'int' 2
|   |   | |   |     `-ImplicitCastExpr 0x26de97664b0 <col:42> 'int' <LValueToRValue>
|   |   | |   |       `-DeclRefExpr 0x26de9766490 <col:42> 'int' lvalue Var 0x26de975ccb8 'i' 'int'
|   |   | |   `-IntegerLiteral 0x26de9766520 <col:45> 'int' 0
|   |   | |-ImplicitCastExpr 0x26de9766ca8 <col:49, col:73> 'limb *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x26de97666e0 <col:49, col:73> 'felem':'limb [9]' lvalue
|   |   | |   |-ImplicitCastExpr 0x26de97666c8 <col:49, col:70> 'felem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x26de9766680 <col:49, col:70> 'felem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x26de9766668 <col:49, col:54> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-MemberExpr 0x26de97665b8 <col:49, col:54> 'felem [16][3]' lvalue ->g_pre_comp 0x26de9753e08
|   |   | |   |   |   `-ImplicitCastExpr 0x26de97665a0 <col:49> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x26de9766580 <col:49> 'NISTP521_PRE_COMP *' lvalue Var 0x26de975cb80 'pre' 'NISTP521_PRE_COMP *'
|   |   | |   |   `-BinaryOperator 0x26de9766648 <col:65, col:69> 'int' '*'
|   |   | |   |     |-IntegerLiteral 0x26de97665e8 <col:65> 'int' 2
|   |   | |   |     `-ImplicitCastExpr 0x26de9766630 <col:69> 'int' <LValueToRValue>
|   |   | |   |       `-DeclRefExpr 0x26de9766610 <col:69> 'int' lvalue Var 0x26de975ccb8 'i' 'int'
|   |   | |   `-IntegerLiteral 0x26de97666a0 <col:72> 'int' 1
|   |   | |-ImplicitCastExpr 0x26de9766cc0 <line:2073:22, col:46> 'limb *' <ArrayToPointerDecay>
|   |   | | `-ArraySubscriptExpr 0x26de9766860 <col:22, col:46> 'felem':'limb [9]' lvalue
|   |   | |   |-ImplicitCastExpr 0x26de9766848 <col:22, col:43> 'felem *' <ArrayToPointerDecay>
|   |   | |   | `-ArraySubscriptExpr 0x26de9766800 <col:22, col:43> 'felem [3]' lvalue
|   |   | |   |   |-ImplicitCastExpr 0x26de97667e8 <col:22, col:27> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   | |   |   | `-MemberExpr 0x26de9766738 <col:22, col:27> 'felem [16][3]' lvalue ->g_pre_comp 0x26de9753e08
|   |   | |   |   |   `-ImplicitCastExpr 0x26de9766720 <col:22> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   |   | |   |   |     `-DeclRefExpr 0x26de9766700 <col:22> 'NISTP521_PRE_COMP *' lvalue Var 0x26de975cb80 'pre' 'NISTP521_PRE_COMP *'
|   |   | |   |   `-BinaryOperator 0x26de97667c8 <col:38, col:42> 'int' '*'
|   |   | |   |     |-IntegerLiteral 0x26de9766768 <col:38> 'int' 2
|   |   | |   |     `-ImplicitCastExpr 0x26de97667b0 <col:42> 'int' <LValueToRValue>
|   |   | |   |       `-DeclRefExpr 0x26de9766790 <col:42> 'int' lvalue Var 0x26de975ccb8 'i' 'int'
|   |   | |   `-IntegerLiteral 0x26de9766820 <col:45> 'int' 2
|   |   | |-ImplicitCastExpr 0x26de9766cf0 <col:49, col:69> 'const limb *':'const limb *' <NoOp>
|   |   | | `-ImplicitCastExpr 0x26de9766cd8 <col:49, col:69> 'limb *' <ArrayToPointerDecay>
|   |   | |   `-ArraySubscriptExpr 0x26de9766998 <col:49, col:69> 'felem':'limb [9]' lvalue
|   |   | |     |-ImplicitCastExpr 0x26de9766980 <col:49, col:66> 'felem *' <ArrayToPointerDecay>
|   |   | |     | `-ArraySubscriptExpr 0x26de9766938 <col:49, col:66> 'felem [3]' lvalue
|   |   | |     |   |-ImplicitCastExpr 0x26de9766908 <col:49, col:54> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   | |     |   | `-MemberExpr 0x26de97668b8 <col:49, col:54> 'felem [16][3]' lvalue ->g_pre_comp 0x26de9753e08
|   |   | |     |   |   `-ImplicitCastExpr 0x26de97668a0 <col:49> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   |   | |     |   |     `-DeclRefExpr 0x26de9766880 <col:49> 'NISTP521_PRE_COMP *' lvalue Var 0x26de975cb80 'pre' 'NISTP521_PRE_COMP *'
|   |   | |     |   `-ImplicitCastExpr 0x26de9766920 <col:65> 'int' <LValueToRValue>
|   |   | |     |     `-DeclRefExpr 0x26de97668e8 <col:65> 'int' lvalue Var 0x26de975ccb8 'i' 'int'
|   |   | |     `-IntegerLiteral 0x26de9766958 <col:68> 'int' 0
|   |   | |-ImplicitCastExpr 0x26de9766d20 <line:2074:22, col:42> 'const limb *':'const limb *' <NoOp>
|   |   | | `-ImplicitCastExpr 0x26de9766d08 <col:22, col:42> 'limb *' <ArrayToPointerDecay>
|   |   | |   `-ArraySubscriptExpr 0x26de9766ad0 <col:22, col:42> 'felem':'limb [9]' lvalue
|   |   | |     |-ImplicitCastExpr 0x26de9766ab8 <col:22, col:39> 'felem *' <ArrayToPointerDecay>
|   |   | |     | `-ArraySubscriptExpr 0x26de9766a70 <col:22, col:39> 'felem [3]' lvalue
|   |   | |     |   |-ImplicitCastExpr 0x26de9766a40 <col:22, col:27> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   | |     |   | `-MemberExpr 0x26de97669f0 <col:22, col:27> 'felem [16][3]' lvalue ->g_pre_comp 0x26de9753e08
|   |   | |     |   |   `-ImplicitCastExpr 0x26de97669d8 <col:22> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   |   | |     |   |     `-DeclRefExpr 0x26de97669b8 <col:22> 'NISTP521_PRE_COMP *' lvalue Var 0x26de975cb80 'pre' 'NISTP521_PRE_COMP *'
|   |   | |     |   `-ImplicitCastExpr 0x26de9766a58 <col:38> 'int' <LValueToRValue>
|   |   | |     |     `-DeclRefExpr 0x26de9766a20 <col:38> 'int' lvalue Var 0x26de975ccb8 'i' 'int'
|   |   | |     `-IntegerLiteral 0x26de9766a90 <col:41> 'int' 1
|   |   | `-ImplicitCastExpr 0x26de9766d50 <col:45, col:65> 'const limb *':'const limb *' <NoOp>
|   |   |   `-ImplicitCastExpr 0x26de9766d38 <col:45, col:65> 'limb *' <ArrayToPointerDecay>
|   |   |     `-ArraySubscriptExpr 0x26de9766c08 <col:45, col:65> 'felem':'limb [9]' lvalue
|   |   |       |-ImplicitCastExpr 0x26de9766bf0 <col:45, col:62> 'felem *' <ArrayToPointerDecay>
|   |   |       | `-ArraySubscriptExpr 0x26de9766ba8 <col:45, col:62> 'felem [3]' lvalue
|   |   |       |   |-ImplicitCastExpr 0x26de9766b78 <col:45, col:50> 'felem (*)[3]' <ArrayToPointerDecay>
|   |   |       |   | `-MemberExpr 0x26de9766b28 <col:45, col:50> 'felem [16][3]' lvalue ->g_pre_comp 0x26de9753e08
|   |   |       |   |   `-ImplicitCastExpr 0x26de9766b10 <col:45> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   |   |       |   |     `-DeclRefExpr 0x26de9766af0 <col:45> 'NISTP521_PRE_COMP *' lvalue Var 0x26de975cb80 'pre' 'NISTP521_PRE_COMP *'
|   |   |       |   `-ImplicitCastExpr 0x26de9766b90 <col:61> 'int' <LValueToRValue>
|   |   |       |     `-DeclRefExpr 0x26de9766b58 <col:61> 'int' lvalue Var 0x26de975ccb8 'i' 'int'
|   |   |       `-IntegerLiteral 0x26de9766bc8 <col:64> 'int' 2
|   |   `-ForStmt 0x26de9767930 <line:2075:9, line:2082:9>
|   |     |-BinaryOperator 0x26de9766dc8 <line:2075:14, col:18> 'int' '='
|   |     | |-DeclRefExpr 0x26de9766d68 <col:14> 'int' lvalue Var 0x26de975cd38 'j' 'int'
|   |     | `-IntegerLiteral 0x26de9766da0 <col:18> 'int' 0
|   |     |-<<<NULL>>>
|   |     |-BinaryOperator 0x26de9766e60 <col:21, col:25> 'int' '<'
|   |     | |-ImplicitCastExpr 0x26de9766e48 <col:21> 'int' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x26de9766e00 <col:21> 'int' lvalue Var 0x26de975cd38 'j' 'int'
|   |     | `-IntegerLiteral 0x26de9766e20 <col:25> 'int' 129
|   |     |-UnaryOperator 0x26de9766ea0 <col:30, col:32> 'int' prefix '++'
|   |     | `-DeclRefExpr 0x26de9766e80 <col:32> 'int' lvalue Var 0x26de975cd38 'j' 'int'
|   |     `-CompoundStmt 0x26de9767918 <col:35, line:2082:9>
|   |       `-CallExpr 0x26de97677f0 <line:2076:13, line:2081:51> 'void'
|   |         |-ImplicitCastExpr 0x26de97677d8 <line:2076:13> 'void (*)(limb *, limb *, limb *, const limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x26de9766eb8 <col:13> 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *)' Function 0x26de9672c48 'point_double' 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *)'
|   |         |-ImplicitCastExpr 0x26de9767840 <col:26, col:50> 'limb *' <ArrayToPointerDecay>
|   |         | `-ArraySubscriptExpr 0x26de9767038 <col:26, col:50> 'felem':'limb [9]' lvalue
|   |         |   |-ImplicitCastExpr 0x26de9767020 <col:26, col:47> 'felem *' <ArrayToPointerDecay>
|   |         |   | `-ArraySubscriptExpr 0x26de9766fd8 <col:26, col:47> 'felem [3]' lvalue
|   |         |   |   |-ImplicitCastExpr 0x26de9766fc0 <col:26, col:31> 'felem (*)[3]' <ArrayToPointerDecay>
|   |         |   |   | `-MemberExpr 0x26de9766f10 <col:26, col:31> 'felem [16][3]' lvalue ->g_pre_comp 0x26de9753e08
|   |         |   |   |   `-ImplicitCastExpr 0x26de9766ef8 <col:26> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   |         |   |   |     `-DeclRefExpr 0x26de9766ed8 <col:26> 'NISTP521_PRE_COMP *' lvalue Var 0x26de975cb80 'pre' 'NISTP521_PRE_COMP *'
|   |         |   |   `-BinaryOperator 0x26de9766fa0 <col:42, col:46> 'int' '*'
|   |         |   |     |-IntegerLiteral 0x26de9766f40 <col:42> 'int' 2
|   |         |   |     `-ImplicitCastExpr 0x26de9766f88 <col:46> 'int' <LValueToRValue>
|   |         |   |       `-DeclRefExpr 0x26de9766f68 <col:46> 'int' lvalue Var 0x26de975ccb8 'i' 'int'
|   |         |   `-IntegerLiteral 0x26de9766ff8 <col:49> 'int' 0
|   |         |-ImplicitCastExpr 0x26de9767858 <line:2077:26, col:50> 'limb *' <ArrayToPointerDecay>
|   |         | `-ArraySubscriptExpr 0x26de97671b8 <col:26, col:50> 'felem':'limb [9]' lvalue
|   |         |   |-ImplicitCastExpr 0x26de97671a0 <col:26, col:47> 'felem *' <ArrayToPointerDecay>
|   |         |   | `-ArraySubscriptExpr 0x26de9767158 <col:26, col:47> 'felem [3]' lvalue
|   |         |   |   |-ImplicitCastExpr 0x26de9767140 <col:26, col:31> 'felem (*)[3]' <ArrayToPointerDecay>
|   |         |   |   | `-MemberExpr 0x26de9767090 <col:26, col:31> 'felem [16][3]' lvalue ->g_pre_comp 0x26de9753e08
|   |         |   |   |   `-ImplicitCastExpr 0x26de9767078 <col:26> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   |         |   |   |     `-DeclRefExpr 0x26de9767058 <col:26> 'NISTP521_PRE_COMP *' lvalue Var 0x26de975cb80 'pre' 'NISTP521_PRE_COMP *'
|   |         |   |   `-BinaryOperator 0x26de9767120 <col:42, col:46> 'int' '*'
|   |         |   |     |-IntegerLiteral 0x26de97670c0 <col:42> 'int' 2
|   |         |   |     `-ImplicitCastExpr 0x26de9767108 <col:46> 'int' <LValueToRValue>
|   |         |   |       `-DeclRefExpr 0x26de97670e8 <col:46> 'int' lvalue Var 0x26de975ccb8 'i' 'int'
|   |         |   `-IntegerLiteral 0x26de9767178 <col:49> 'int' 1
|   |         |-ImplicitCastExpr 0x26de9767870 <line:2078:26, col:50> 'limb *' <ArrayToPointerDecay>
|   |         | `-ArraySubscriptExpr 0x26de9767338 <col:26, col:50> 'felem':'limb [9]' lvalue
|   |         |   |-ImplicitCastExpr 0x26de9767320 <col:26, col:47> 'felem *' <ArrayToPointerDecay>
|   |         |   | `-ArraySubscriptExpr 0x26de97672d8 <col:26, col:47> 'felem [3]' lvalue
|   |         |   |   |-ImplicitCastExpr 0x26de97672c0 <col:26, col:31> 'felem (*)[3]' <ArrayToPointerDecay>
|   |         |   |   | `-MemberExpr 0x26de9767210 <col:26, col:31> 'felem [16][3]' lvalue ->g_pre_comp 0x26de9753e08
|   |         |   |   |   `-ImplicitCastExpr 0x26de97671f8 <col:26> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   |         |   |   |     `-DeclRefExpr 0x26de97671d8 <col:26> 'NISTP521_PRE_COMP *' lvalue Var 0x26de975cb80 'pre' 'NISTP521_PRE_COMP *'
|   |         |   |   `-BinaryOperator 0x26de97672a0 <col:42, col:46> 'int' '*'
|   |         |   |     |-IntegerLiteral 0x26de9767240 <col:42> 'int' 2
|   |         |   |     `-ImplicitCastExpr 0x26de9767288 <col:46> 'int' <LValueToRValue>
|   |         |   |       `-DeclRefExpr 0x26de9767268 <col:46> 'int' lvalue Var 0x26de975ccb8 'i' 'int'
|   |         |   `-IntegerLiteral 0x26de97672f8 <col:49> 'int' 2
|   |         |-ImplicitCastExpr 0x26de97678a0 <line:2079:26, col:50> 'const limb *':'const limb *' <NoOp>
|   |         | `-ImplicitCastExpr 0x26de9767888 <col:26, col:50> 'limb *' <ArrayToPointerDecay>
|   |         |   `-ArraySubscriptExpr 0x26de97674b8 <col:26, col:50> 'felem':'limb [9]' lvalue
|   |         |     |-ImplicitCastExpr 0x26de97674a0 <col:26, col:47> 'felem *' <ArrayToPointerDecay>
|   |         |     | `-ArraySubscriptExpr 0x26de9767458 <col:26, col:47> 'felem [3]' lvalue
|   |         |     |   |-ImplicitCastExpr 0x26de9767440 <col:26, col:31> 'felem (*)[3]' <ArrayToPointerDecay>
|   |         |     |   | `-MemberExpr 0x26de9767390 <col:26, col:31> 'felem [16][3]' lvalue ->g_pre_comp 0x26de9753e08
|   |         |     |   |   `-ImplicitCastExpr 0x26de9767378 <col:26> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   |         |     |   |     `-DeclRefExpr 0x26de9767358 <col:26> 'NISTP521_PRE_COMP *' lvalue Var 0x26de975cb80 'pre' 'NISTP521_PRE_COMP *'
|   |         |     |   `-BinaryOperator 0x26de9767420 <col:42, col:46> 'int' '*'
|   |         |     |     |-IntegerLiteral 0x26de97673c0 <col:42> 'int' 2
|   |         |     |     `-ImplicitCastExpr 0x26de9767408 <col:46> 'int' <LValueToRValue>
|   |         |     |       `-DeclRefExpr 0x26de97673e8 <col:46> 'int' lvalue Var 0x26de975ccb8 'i' 'int'
|   |         |     `-IntegerLiteral 0x26de9767478 <col:49> 'int' 0
|   |         |-ImplicitCastExpr 0x26de97678d0 <line:2080:26, col:50> 'const limb *':'const limb *' <NoOp>
|   |         | `-ImplicitCastExpr 0x26de97678b8 <col:26, col:50> 'limb *' <ArrayToPointerDecay>
|   |         |   `-ArraySubscriptExpr 0x26de9767638 <col:26, col:50> 'felem':'limb [9]' lvalue
|   |         |     |-ImplicitCastExpr 0x26de9767620 <col:26, col:47> 'felem *' <ArrayToPointerDecay>
|   |         |     | `-ArraySubscriptExpr 0x26de97675d8 <col:26, col:47> 'felem [3]' lvalue
|   |         |     |   |-ImplicitCastExpr 0x26de97675c0 <col:26, col:31> 'felem (*)[3]' <ArrayToPointerDecay>
|   |         |     |   | `-MemberExpr 0x26de9767510 <col:26, col:31> 'felem [16][3]' lvalue ->g_pre_comp 0x26de9753e08
|   |         |     |   |   `-ImplicitCastExpr 0x26de97674f8 <col:26> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   |         |     |   |     `-DeclRefExpr 0x26de97674d8 <col:26> 'NISTP521_PRE_COMP *' lvalue Var 0x26de975cb80 'pre' 'NISTP521_PRE_COMP *'
|   |         |     |   `-BinaryOperator 0x26de97675a0 <col:42, col:46> 'int' '*'
|   |         |     |     |-IntegerLiteral 0x26de9767540 <col:42> 'int' 2
|   |         |     |     `-ImplicitCastExpr 0x26de9767588 <col:46> 'int' <LValueToRValue>
|   |         |     |       `-DeclRefExpr 0x26de9767568 <col:46> 'int' lvalue Var 0x26de975ccb8 'i' 'int'
|   |         |     `-IntegerLiteral 0x26de97675f8 <col:49> 'int' 1
|   |         `-ImplicitCastExpr 0x26de9767900 <line:2081:26, col:50> 'const limb *':'const limb *' <NoOp>
|   |           `-ImplicitCastExpr 0x26de97678e8 <col:26, col:50> 'limb *' <ArrayToPointerDecay>
|   |             `-ArraySubscriptExpr 0x26de97677b8 <col:26, col:50> 'felem':'limb [9]' lvalue
|   |               |-ImplicitCastExpr 0x26de97677a0 <col:26, col:47> 'felem *' <ArrayToPointerDecay>
|   |               | `-ArraySubscriptExpr 0x26de9767758 <col:26, col:47> 'felem [3]' lvalue
|   |               |   |-ImplicitCastExpr 0x26de9767740 <col:26, col:31> 'felem (*)[3]' <ArrayToPointerDecay>
|   |               |   | `-MemberExpr 0x26de9767690 <col:26, col:31> 'felem [16][3]' lvalue ->g_pre_comp 0x26de9753e08
|   |               |   |   `-ImplicitCastExpr 0x26de9767678 <col:26> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   |               |   |     `-DeclRefExpr 0x26de9767658 <col:26> 'NISTP521_PRE_COMP *' lvalue Var 0x26de975cb80 'pre' 'NISTP521_PRE_COMP *'
|   |               |   `-BinaryOperator 0x26de9767720 <col:42, col:46> 'int' '*'
|   |               |     |-IntegerLiteral 0x26de97676c0 <col:42> 'int' 2
|   |               |     `-ImplicitCastExpr 0x26de9767708 <col:46> 'int' <LValueToRValue>
|   |               |       `-DeclRefExpr 0x26de97676e8 <col:46> 'int' lvalue Var 0x26de975ccb8 'i' 'int'
|   |               `-IntegerLiteral 0x26de9767778 <col:49> 'int' 2
|   |-CallExpr 0x26de9767c08 <line:2085:5, col:61> 'void *'
|   | |-ImplicitCastExpr 0x26de9767bf0 <col:5> 'void *(*)(void *, int, unsigned long long)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de97679c0 <col:5> 'void *(void *, int, unsigned long long)' Function 0x26de952a5c8 'memset' 'void *(void *, int, unsigned long long)'
|   | |-ImplicitCastExpr 0x26de9767c58 <col:12, col:29> 'void *' <BitCast>
|   | | `-ImplicitCastExpr 0x26de9767c40 <col:12, col:29> 'felem *' <ArrayToPointerDecay>
|   | |   `-ArraySubscriptExpr 0x26de9767a88 <col:12, col:29> 'felem [3]' lvalue
|   | |     |-ImplicitCastExpr 0x26de9767a70 <col:12, col:17> 'felem (*)[3]' <ArrayToPointerDecay>
|   | |     | `-MemberExpr 0x26de9767a18 <col:12, col:17> 'felem [16][3]' lvalue ->g_pre_comp 0x26de9753e08
|   | |     |   `-ImplicitCastExpr 0x26de9767a00 <col:12> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   | |     |     `-DeclRefExpr 0x26de97679e0 <col:12> 'NISTP521_PRE_COMP *' lvalue Var 0x26de975cb80 'pre' 'NISTP521_PRE_COMP *'
|   | |     `-IntegerLiteral 0x26de9767a48 <col:28> 'int' 0
|   | |-IntegerLiteral 0x26de9767aa8 <col:32> 'int' 0
|   | `-UnaryExprOrTypeTraitExpr 0x26de9767bb8 <col:35, col:60> 'unsigned long long' sizeof
|   |   `-ParenExpr 0x26de9767b98 <col:41, col:60> 'felem [3]' lvalue
|   |     `-ArraySubscriptExpr 0x26de9767b78 <col:42, col:59> 'felem [3]' lvalue
|   |       |-ImplicitCastExpr 0x26de9767b60 <col:42, col:47> 'felem (*)[3]' <ArrayToPointerDecay>
|   |       | `-MemberExpr 0x26de9767b08 <col:42, col:47> 'felem [16][3]' lvalue ->g_pre_comp 0x26de9753e08 non_odr_use_unevaluated
|   |       |   `-ImplicitCastExpr 0x26de9767af0 <col:42> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x26de9767ad0 <col:42> 'NISTP521_PRE_COMP *' lvalue Var 0x26de975cb80 'pre' 'NISTP521_PRE_COMP *' non_odr_use_unevaluated
|   |       `-IntegerLiteral 0x26de9767b38 <col:58> 'int' 0
|   |-CallExpr 0x26de9768738 <line:2088:5, line:2092:36> 'void'
|   | |-ImplicitCastExpr 0x26de9768720 <line:2088:5> 'void (*)(limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de9767c70 <col:5> 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const limb *, const limb *, const limb *)' Function 0x26de9674158 'point_add' 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const limb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x26de97687a8 <col:15, col:35> 'limb *' <ArrayToPointerDecay>
|   | | `-ArraySubscriptExpr 0x26de9767d98 <col:15, col:35> 'felem':'limb [9]' lvalue
|   | |   |-ImplicitCastExpr 0x26de9767d80 <col:15, col:32> 'felem *' <ArrayToPointerDecay>
|   | |   | `-ArraySubscriptExpr 0x26de9767d38 <col:15, col:32> 'felem [3]' lvalue
|   | |   |   |-ImplicitCastExpr 0x26de9767d20 <col:15, col:20> 'felem (*)[3]' <ArrayToPointerDecay>
|   | |   |   | `-MemberExpr 0x26de9767cc8 <col:15, col:20> 'felem [16][3]' lvalue ->g_pre_comp 0x26de9753e08
|   | |   |   |   `-ImplicitCastExpr 0x26de9767cb0 <col:15> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   | |   |   |     `-DeclRefExpr 0x26de9767c90 <col:15> 'NISTP521_PRE_COMP *' lvalue Var 0x26de975cb80 'pre' 'NISTP521_PRE_COMP *'
|   | |   |   `-IntegerLiteral 0x26de9767cf8 <col:31> 'int' 6
|   | |   `-IntegerLiteral 0x26de9767d58 <col:34> 'int' 0
|   | |-ImplicitCastExpr 0x26de97687c0 <col:38, col:58> 'limb *' <ArrayToPointerDecay>
|   | | `-ArraySubscriptExpr 0x26de9767ec0 <col:38, col:58> 'felem':'limb [9]' lvalue
|   | |   |-ImplicitCastExpr 0x26de9767ea8 <col:38, col:55> 'felem *' <ArrayToPointerDecay>
|   | |   | `-ArraySubscriptExpr 0x26de9767e60 <col:38, col:55> 'felem [3]' lvalue
|   | |   |   |-ImplicitCastExpr 0x26de9767e48 <col:38, col:43> 'felem (*)[3]' <ArrayToPointerDecay>
|   | |   |   | `-MemberExpr 0x26de9767df0 <col:38, col:43> 'felem [16][3]' lvalue ->g_pre_comp 0x26de9753e08
|   | |   |   |   `-ImplicitCastExpr 0x26de9767dd8 <col:38> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   | |   |   |     `-DeclRefExpr 0x26de9767db8 <col:38> 'NISTP521_PRE_COMP *' lvalue Var 0x26de975cb80 'pre' 'NISTP521_PRE_COMP *'
|   | |   |   `-IntegerLiteral 0x26de9767e20 <col:54> 'int' 6
|   | |   `-IntegerLiteral 0x26de9767e80 <col:57> 'int' 1
|   | |-ImplicitCastExpr 0x26de97687d8 <line:2089:15, col:35> 'limb *' <ArrayToPointerDecay>
|   | | `-ArraySubscriptExpr 0x26de9767fe8 <col:15, col:35> 'felem':'limb [9]' lvalue
|   | |   |-ImplicitCastExpr 0x26de9767fd0 <col:15, col:32> 'felem *' <ArrayToPointerDecay>
|   | |   | `-ArraySubscriptExpr 0x26de9767f88 <col:15, col:32> 'felem [3]' lvalue
|   | |   |   |-ImplicitCastExpr 0x26de9767f70 <col:15, col:20> 'felem (*)[3]' <ArrayToPointerDecay>
|   | |   |   | `-MemberExpr 0x26de9767f18 <col:15, col:20> 'felem [16][3]' lvalue ->g_pre_comp 0x26de9753e08
|   | |   |   |   `-ImplicitCastExpr 0x26de9767f00 <col:15> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   | |   |   |     `-DeclRefExpr 0x26de9767ee0 <col:15> 'NISTP521_PRE_COMP *' lvalue Var 0x26de975cb80 'pre' 'NISTP521_PRE_COMP *'
|   | |   |   `-IntegerLiteral 0x26de9767f48 <col:31> 'int' 6
|   | |   `-IntegerLiteral 0x26de9767fa8 <col:34> 'int' 2
|   | |-ImplicitCastExpr 0x26de9768808 <col:38, col:58> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x26de97687f0 <col:38, col:58> 'limb *' <ArrayToPointerDecay>
|   | |   `-ArraySubscriptExpr 0x26de9768110 <col:38, col:58> 'felem':'limb [9]' lvalue
|   | |     |-ImplicitCastExpr 0x26de97680f8 <col:38, col:55> 'felem *' <ArrayToPointerDecay>
|   | |     | `-ArraySubscriptExpr 0x26de97680b0 <col:38, col:55> 'felem [3]' lvalue
|   | |     |   |-ImplicitCastExpr 0x26de9768098 <col:38, col:43> 'felem (*)[3]' <ArrayToPointerDecay>
|   | |     |   | `-MemberExpr 0x26de9768040 <col:38, col:43> 'felem [16][3]' lvalue ->g_pre_comp 0x26de9753e08
|   | |     |   |   `-ImplicitCastExpr 0x26de9768028 <col:38> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   | |     |   |     `-DeclRefExpr 0x26de9768008 <col:38> 'NISTP521_PRE_COMP *' lvalue Var 0x26de975cb80 'pre' 'NISTP521_PRE_COMP *'
|   | |     |   `-IntegerLiteral 0x26de9768070 <col:54> 'int' 4
|   | |     `-IntegerLiteral 0x26de97680d0 <col:57> 'int' 0
|   | |-ImplicitCastExpr 0x26de9768838 <line:2090:15, col:35> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x26de9768820 <col:15, col:35> 'limb *' <ArrayToPointerDecay>
|   | |   `-ArraySubscriptExpr 0x26de9768238 <col:15, col:35> 'felem':'limb [9]' lvalue
|   | |     |-ImplicitCastExpr 0x26de9768220 <col:15, col:32> 'felem *' <ArrayToPointerDecay>
|   | |     | `-ArraySubscriptExpr 0x26de97681d8 <col:15, col:32> 'felem [3]' lvalue
|   | |     |   |-ImplicitCastExpr 0x26de97681c0 <col:15, col:20> 'felem (*)[3]' <ArrayToPointerDecay>
|   | |     |   | `-MemberExpr 0x26de9768168 <col:15, col:20> 'felem [16][3]' lvalue ->g_pre_comp 0x26de9753e08
|   | |     |   |   `-ImplicitCastExpr 0x26de9768150 <col:15> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   | |     |   |     `-DeclRefExpr 0x26de9768130 <col:15> 'NISTP521_PRE_COMP *' lvalue Var 0x26de975cb80 'pre' 'NISTP521_PRE_COMP *'
|   | |     |   `-IntegerLiteral 0x26de9768198 <col:31> 'int' 4
|   | |     `-IntegerLiteral 0x26de97681f8 <col:34> 'int' 1
|   | |-ImplicitCastExpr 0x26de9768868 <col:38, col:58> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x26de9768850 <col:38, col:58> 'limb *' <ArrayToPointerDecay>
|   | |   `-ArraySubscriptExpr 0x26de9768360 <col:38, col:58> 'felem':'limb [9]' lvalue
|   | |     |-ImplicitCastExpr 0x26de9768348 <col:38, col:55> 'felem *' <ArrayToPointerDecay>
|   | |     | `-ArraySubscriptExpr 0x26de9768300 <col:38, col:55> 'felem [3]' lvalue
|   | |     |   |-ImplicitCastExpr 0x26de97682e8 <col:38, col:43> 'felem (*)[3]' <ArrayToPointerDecay>
|   | |     |   | `-MemberExpr 0x26de9768290 <col:38, col:43> 'felem [16][3]' lvalue ->g_pre_comp 0x26de9753e08
|   | |     |   |   `-ImplicitCastExpr 0x26de9768278 <col:38> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   | |     |   |     `-DeclRefExpr 0x26de9768258 <col:38> 'NISTP521_PRE_COMP *' lvalue Var 0x26de975cb80 'pre' 'NISTP521_PRE_COMP *'
|   | |     |   `-IntegerLiteral 0x26de97682c0 <col:54> 'int' 4
|   | |     `-IntegerLiteral 0x26de9768320 <col:57> 'int' 2
|   | |-IntegerLiteral 0x26de9768380 <line:2091:15> 'int' 0
|   | |-ImplicitCastExpr 0x26de9768898 <col:18, col:38> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x26de9768880 <col:18, col:38> 'limb *' <ArrayToPointerDecay>
|   | |   `-ArraySubscriptExpr 0x26de97684b0 <col:18, col:38> 'felem':'limb [9]' lvalue
|   | |     |-ImplicitCastExpr 0x26de9768498 <col:18, col:35> 'felem *' <ArrayToPointerDecay>
|   | |     | `-ArraySubscriptExpr 0x26de9768450 <col:18, col:35> 'felem [3]' lvalue
|   | |     |   |-ImplicitCastExpr 0x26de9768438 <col:18, col:23> 'felem (*)[3]' <ArrayToPointerDecay>
|   | |     |   | `-MemberExpr 0x26de97683e0 <col:18, col:23> 'felem [16][3]' lvalue ->g_pre_comp 0x26de9753e08
|   | |     |   |   `-ImplicitCastExpr 0x26de97683c8 <col:18> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   | |     |   |     `-DeclRefExpr 0x26de97683a8 <col:18> 'NISTP521_PRE_COMP *' lvalue Var 0x26de975cb80 'pre' 'NISTP521_PRE_COMP *'
|   | |     |   `-IntegerLiteral 0x26de9768410 <col:34> 'int' 2
|   | |     `-IntegerLiteral 0x26de9768470 <col:37> 'int' 0
|   | |-ImplicitCastExpr 0x26de97688c8 <col:41, col:61> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x26de97688b0 <col:41, col:61> 'limb *' <ArrayToPointerDecay>
|   | |   `-ArraySubscriptExpr 0x26de97685d8 <col:41, col:61> 'felem':'limb [9]' lvalue
|   | |     |-ImplicitCastExpr 0x26de97685c0 <col:41, col:58> 'felem *' <ArrayToPointerDecay>
|   | |     | `-ArraySubscriptExpr 0x26de9768578 <col:41, col:58> 'felem [3]' lvalue
|   | |     |   |-ImplicitCastExpr 0x26de9768560 <col:41, col:46> 'felem (*)[3]' <ArrayToPointerDecay>
|   | |     |   | `-MemberExpr 0x26de9768508 <col:41, col:46> 'felem [16][3]' lvalue ->g_pre_comp 0x26de9753e08
|   | |     |   |   `-ImplicitCastExpr 0x26de97684f0 <col:41> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   | |     |   |     `-DeclRefExpr 0x26de97684d0 <col:41> 'NISTP521_PRE_COMP *' lvalue Var 0x26de975cb80 'pre' 'NISTP521_PRE_COMP *'
|   | |     |   `-IntegerLiteral 0x26de9768538 <col:57> 'int' 2
|   | |     `-IntegerLiteral 0x26de9768598 <col:60> 'int' 1
|   | `-ImplicitCastExpr 0x26de97688f8 <line:2092:15, col:35> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de97688e0 <col:15, col:35> 'limb *' <ArrayToPointerDecay>
|   |     `-ArraySubscriptExpr 0x26de9768700 <col:15, col:35> 'felem':'limb [9]' lvalue
|   |       |-ImplicitCastExpr 0x26de97686e8 <col:15, col:32> 'felem *' <ArrayToPointerDecay>
|   |       | `-ArraySubscriptExpr 0x26de97686a0 <col:15, col:32> 'felem [3]' lvalue
|   |       |   |-ImplicitCastExpr 0x26de9768688 <col:15, col:20> 'felem (*)[3]' <ArrayToPointerDecay>
|   |       |   | `-MemberExpr 0x26de9768630 <col:15, col:20> 'felem [16][3]' lvalue ->g_pre_comp 0x26de9753e08
|   |       |   |   `-ImplicitCastExpr 0x26de9768618 <col:15> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   |       |   |     `-DeclRefExpr 0x26de97685f8 <col:15> 'NISTP521_PRE_COMP *' lvalue Var 0x26de975cb80 'pre' 'NISTP521_PRE_COMP *'
|   |       |   `-IntegerLiteral 0x26de9768660 <col:31> 'int' 2
|   |       `-IntegerLiteral 0x26de97686c0 <col:34> 'int' 2
|   |-CallExpr 0x26de9759378 <line:2094:5, line:2098:36> 'void'
|   | |-ImplicitCastExpr 0x26de9759360 <line:2094:5> 'void (*)(limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de9768910 <col:5> 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const limb *, const limb *, const limb *)' Function 0x26de9674158 'point_add' 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const limb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x26de97593e8 <col:15, col:36> 'limb *' <ArrayToPointerDecay>
|   | | `-ArraySubscriptExpr 0x26de9768a38 <col:15, col:36> 'felem':'limb [9]' lvalue
|   | |   |-ImplicitCastExpr 0x26de9768a20 <col:15, col:33> 'felem *' <ArrayToPointerDecay>
|   | |   | `-ArraySubscriptExpr 0x26de97689d8 <col:15, col:33> 'felem [3]' lvalue
|   | |   |   |-ImplicitCastExpr 0x26de97689c0 <col:15, col:20> 'felem (*)[3]' <ArrayToPointerDecay>
|   | |   |   | `-MemberExpr 0x26de9768968 <col:15, col:20> 'felem [16][3]' lvalue ->g_pre_comp 0x26de9753e08
|   | |   |   |   `-ImplicitCastExpr 0x26de9768950 <col:15> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   | |   |   |     `-DeclRefExpr 0x26de9768930 <col:15> 'NISTP521_PRE_COMP *' lvalue Var 0x26de975cb80 'pre' 'NISTP521_PRE_COMP *'
|   | |   |   `-IntegerLiteral 0x26de9768998 <col:31> 'int' 10
|   | |   `-IntegerLiteral 0x26de97689f8 <col:35> 'int' 0
|   | |-ImplicitCastExpr 0x26de9759400 <col:39, col:60> 'limb *' <ArrayToPointerDecay>
|   | | `-ArraySubscriptExpr 0x26de9768b60 <col:39, col:60> 'felem':'limb [9]' lvalue
|   | |   |-ImplicitCastExpr 0x26de9768b48 <col:39, col:57> 'felem *' <ArrayToPointerDecay>
|   | |   | `-ArraySubscriptExpr 0x26de9768b00 <col:39, col:57> 'felem [3]' lvalue
|   | |   |   |-ImplicitCastExpr 0x26de9768ae8 <col:39, col:44> 'felem (*)[3]' <ArrayToPointerDecay>
|   | |   |   | `-MemberExpr 0x26de9768a90 <col:39, col:44> 'felem [16][3]' lvalue ->g_pre_comp 0x26de9753e08
|   | |   |   |   `-ImplicitCastExpr 0x26de9768a78 <col:39> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   | |   |   |     `-DeclRefExpr 0x26de9768a58 <col:39> 'NISTP521_PRE_COMP *' lvalue Var 0x26de975cb80 'pre' 'NISTP521_PRE_COMP *'
|   | |   |   `-IntegerLiteral 0x26de9768ac0 <col:55> 'int' 10
|   | |   `-IntegerLiteral 0x26de9768b20 <col:59> 'int' 1
|   | |-ImplicitCastExpr 0x26de9759418 <line:2095:15, col:36> 'limb *' <ArrayToPointerDecay>
|   | | `-ArraySubscriptExpr 0x26de9768c88 <col:15, col:36> 'felem':'limb [9]' lvalue
|   | |   |-ImplicitCastExpr 0x26de9768c70 <col:15, col:33> 'felem *' <ArrayToPointerDecay>
|   | |   | `-ArraySubscriptExpr 0x26de9768c28 <col:15, col:33> 'felem [3]' lvalue
|   | |   |   |-ImplicitCastExpr 0x26de9768c10 <col:15, col:20> 'felem (*)[3]' <ArrayToPointerDecay>
|   | |   |   | `-MemberExpr 0x26de9768bb8 <col:15, col:20> 'felem [16][3]' lvalue ->g_pre_comp 0x26de9753e08
|   | |   |   |   `-ImplicitCastExpr 0x26de9768ba0 <col:15> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   | |   |   |     `-DeclRefExpr 0x26de9768b80 <col:15> 'NISTP521_PRE_COMP *' lvalue Var 0x26de975cb80 'pre' 'NISTP521_PRE_COMP *'
|   | |   |   `-IntegerLiteral 0x26de9768be8 <col:31> 'int' 10
|   | |   `-IntegerLiteral 0x26de9768c48 <col:35> 'int' 2
|   | |-ImplicitCastExpr 0x26de9759448 <col:39, col:59> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x26de9759430 <col:39, col:59> 'limb *' <ArrayToPointerDecay>
|   | |   `-ArraySubscriptExpr 0x26de9768db0 <col:39, col:59> 'felem':'limb [9]' lvalue
|   | |     |-ImplicitCastExpr 0x26de9768d98 <col:39, col:56> 'felem *' <ArrayToPointerDecay>
|   | |     | `-ArraySubscriptExpr 0x26de9768d50 <col:39, col:56> 'felem [3]' lvalue
|   | |     |   |-ImplicitCastExpr 0x26de9768d38 <col:39, col:44> 'felem (*)[3]' <ArrayToPointerDecay>
|   | |     |   | `-MemberExpr 0x26de9768ce0 <col:39, col:44> 'felem [16][3]' lvalue ->g_pre_comp 0x26de9753e08
|   | |     |   |   `-ImplicitCastExpr 0x26de9768cc8 <col:39> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   | |     |   |     `-DeclRefExpr 0x26de9768ca8 <col:39> 'NISTP521_PRE_COMP *' lvalue Var 0x26de975cb80 'pre' 'NISTP521_PRE_COMP *'
|   | |     |   `-IntegerLiteral 0x26de9768d10 <col:55> 'int' 8
|   | |     `-IntegerLiteral 0x26de9768d70 <col:58> 'int' 0
|   | |-ImplicitCastExpr 0x26de9759478 <line:2096:15, col:35> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x26de9759460 <col:15, col:35> 'limb *' <ArrayToPointerDecay>
|   | |   `-ArraySubscriptExpr 0x26de9758e78 <col:15, col:35> 'felem':'limb [9]' lvalue
|   | |     |-ImplicitCastExpr 0x26de9758e60 <col:15, col:32> 'felem *' <ArrayToPointerDecay>
|   | |     | `-ArraySubscriptExpr 0x26de9758e18 <col:15, col:32> 'felem [3]' lvalue
|   | |     |   |-ImplicitCastExpr 0x26de9758e00 <col:15, col:20> 'felem (*)[3]' <ArrayToPointerDecay>
|   | |     |   | `-MemberExpr 0x26de9758da8 <col:15, col:20> 'felem [16][3]' lvalue ->g_pre_comp 0x26de9753e08
|   | |     |   |   `-ImplicitCastExpr 0x26de9758d90 <col:15> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   | |     |   |     `-DeclRefExpr 0x26de9768dd0 <col:15> 'NISTP521_PRE_COMP *' lvalue Var 0x26de975cb80 'pre' 'NISTP521_PRE_COMP *'
|   | |     |   `-IntegerLiteral 0x26de9758dd8 <col:31> 'int' 8
|   | |     `-IntegerLiteral 0x26de9758e38 <col:34> 'int' 1
|   | |-ImplicitCastExpr 0x26de97594a8 <col:38, col:58> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x26de9759490 <col:38, col:58> 'limb *' <ArrayToPointerDecay>
|   | |   `-ArraySubscriptExpr 0x26de9758fa0 <col:38, col:58> 'felem':'limb [9]' lvalue
|   | |     |-ImplicitCastExpr 0x26de9758f88 <col:38, col:55> 'felem *' <ArrayToPointerDecay>
|   | |     | `-ArraySubscriptExpr 0x26de9758f40 <col:38, col:55> 'felem [3]' lvalue
|   | |     |   |-ImplicitCastExpr 0x26de9758f28 <col:38, col:43> 'felem (*)[3]' <ArrayToPointerDecay>
|   | |     |   | `-MemberExpr 0x26de9758ed0 <col:38, col:43> 'felem [16][3]' lvalue ->g_pre_comp 0x26de9753e08
|   | |     |   |   `-ImplicitCastExpr 0x26de9758eb8 <col:38> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   | |     |   |     `-DeclRefExpr 0x26de9758e98 <col:38> 'NISTP521_PRE_COMP *' lvalue Var 0x26de975cb80 'pre' 'NISTP521_PRE_COMP *'
|   | |     |   `-IntegerLiteral 0x26de9758f00 <col:54> 'int' 8
|   | |     `-IntegerLiteral 0x26de9758f60 <col:57> 'int' 2
|   | |-IntegerLiteral 0x26de9758fc0 <line:2097:15> 'int' 0
|   | |-ImplicitCastExpr 0x26de97594d8 <col:18, col:38> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x26de97594c0 <col:18, col:38> 'limb *' <ArrayToPointerDecay>
|   | |   `-ArraySubscriptExpr 0x26de97590f0 <col:18, col:38> 'felem':'limb [9]' lvalue
|   | |     |-ImplicitCastExpr 0x26de97590d8 <col:18, col:35> 'felem *' <ArrayToPointerDecay>
|   | |     | `-ArraySubscriptExpr 0x26de9759090 <col:18, col:35> 'felem [3]' lvalue
|   | |     |   |-ImplicitCastExpr 0x26de9759078 <col:18, col:23> 'felem (*)[3]' <ArrayToPointerDecay>
|   | |     |   | `-MemberExpr 0x26de9759020 <col:18, col:23> 'felem [16][3]' lvalue ->g_pre_comp 0x26de9753e08
|   | |     |   |   `-ImplicitCastExpr 0x26de9759008 <col:18> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   | |     |   |     `-DeclRefExpr 0x26de9758fe8 <col:18> 'NISTP521_PRE_COMP *' lvalue Var 0x26de975cb80 'pre' 'NISTP521_PRE_COMP *'
|   | |     |   `-IntegerLiteral 0x26de9759050 <col:34> 'int' 2
|   | |     `-IntegerLiteral 0x26de97590b0 <col:37> 'int' 0
|   | |-ImplicitCastExpr 0x26de9759508 <col:41, col:61> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x26de97594f0 <col:41, col:61> 'limb *' <ArrayToPointerDecay>
|   | |   `-ArraySubscriptExpr 0x26de9759218 <col:41, col:61> 'felem':'limb [9]' lvalue
|   | |     |-ImplicitCastExpr 0x26de9759200 <col:41, col:58> 'felem *' <ArrayToPointerDecay>
|   | |     | `-ArraySubscriptExpr 0x26de97591b8 <col:41, col:58> 'felem [3]' lvalue
|   | |     |   |-ImplicitCastExpr 0x26de97591a0 <col:41, col:46> 'felem (*)[3]' <ArrayToPointerDecay>
|   | |     |   | `-MemberExpr 0x26de9759148 <col:41, col:46> 'felem [16][3]' lvalue ->g_pre_comp 0x26de9753e08
|   | |     |   |   `-ImplicitCastExpr 0x26de9759130 <col:41> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   | |     |   |     `-DeclRefExpr 0x26de9759110 <col:41> 'NISTP521_PRE_COMP *' lvalue Var 0x26de975cb80 'pre' 'NISTP521_PRE_COMP *'
|   | |     |   `-IntegerLiteral 0x26de9759178 <col:57> 'int' 2
|   | |     `-IntegerLiteral 0x26de97591d8 <col:60> 'int' 1
|   | `-ImplicitCastExpr 0x26de9759538 <line:2098:15, col:35> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de9759520 <col:15, col:35> 'limb *' <ArrayToPointerDecay>
|   |     `-ArraySubscriptExpr 0x26de9759340 <col:15, col:35> 'felem':'limb [9]' lvalue
|   |       |-ImplicitCastExpr 0x26de9759328 <col:15, col:32> 'felem *' <ArrayToPointerDecay>
|   |       | `-ArraySubscriptExpr 0x26de97592e0 <col:15, col:32> 'felem [3]' lvalue
|   |       |   |-ImplicitCastExpr 0x26de97592c8 <col:15, col:20> 'felem (*)[3]' <ArrayToPointerDecay>
|   |       |   | `-MemberExpr 0x26de9759270 <col:15, col:20> 'felem [16][3]' lvalue ->g_pre_comp 0x26de9753e08
|   |       |   |   `-ImplicitCastExpr 0x26de9759258 <col:15> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   |       |   |     `-DeclRefExpr 0x26de9759238 <col:15> 'NISTP521_PRE_COMP *' lvalue Var 0x26de975cb80 'pre' 'NISTP521_PRE_COMP *'
|   |       |   `-IntegerLiteral 0x26de97592a0 <col:31> 'int' 2
|   |       `-IntegerLiteral 0x26de9759300 <col:34> 'int' 2
|   |-CallExpr 0x26de975a018 <line:2100:5, line:2104:36> 'void'
|   | |-ImplicitCastExpr 0x26de975a000 <line:2100:5> 'void (*)(limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de9759550 <col:5> 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const limb *, const limb *, const limb *)' Function 0x26de9674158 'point_add' 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const limb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x26de975a088 <col:15, col:36> 'limb *' <ArrayToPointerDecay>
|   | | `-ArraySubscriptExpr 0x26de9759678 <col:15, col:36> 'felem':'limb [9]' lvalue
|   | |   |-ImplicitCastExpr 0x26de9759660 <col:15, col:33> 'felem *' <ArrayToPointerDecay>
|   | |   | `-ArraySubscriptExpr 0x26de9759618 <col:15, col:33> 'felem [3]' lvalue
|   | |   |   |-ImplicitCastExpr 0x26de9759600 <col:15, col:20> 'felem (*)[3]' <ArrayToPointerDecay>
|   | |   |   | `-MemberExpr 0x26de97595a8 <col:15, col:20> 'felem [16][3]' lvalue ->g_pre_comp 0x26de9753e08
|   | |   |   |   `-ImplicitCastExpr 0x26de9759590 <col:15> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   | |   |   |     `-DeclRefExpr 0x26de9759570 <col:15> 'NISTP521_PRE_COMP *' lvalue Var 0x26de975cb80 'pre' 'NISTP521_PRE_COMP *'
|   | |   |   `-IntegerLiteral 0x26de97595d8 <col:31> 'int' 12
|   | |   `-IntegerLiteral 0x26de9759638 <col:35> 'int' 0
|   | |-ImplicitCastExpr 0x26de975a0a0 <col:39, col:60> 'limb *' <ArrayToPointerDecay>
|   | | `-ArraySubscriptExpr 0x26de97597a0 <col:39, col:60> 'felem':'limb [9]' lvalue
|   | |   |-ImplicitCastExpr 0x26de9759788 <col:39, col:57> 'felem *' <ArrayToPointerDecay>
|   | |   | `-ArraySubscriptExpr 0x26de9759740 <col:39, col:57> 'felem [3]' lvalue
|   | |   |   |-ImplicitCastExpr 0x26de9759728 <col:39, col:44> 'felem (*)[3]' <ArrayToPointerDecay>
|   | |   |   | `-MemberExpr 0x26de97596d0 <col:39, col:44> 'felem [16][3]' lvalue ->g_pre_comp 0x26de9753e08
|   | |   |   |   `-ImplicitCastExpr 0x26de97596b8 <col:39> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   | |   |   |     `-DeclRefExpr 0x26de9759698 <col:39> 'NISTP521_PRE_COMP *' lvalue Var 0x26de975cb80 'pre' 'NISTP521_PRE_COMP *'
|   | |   |   `-IntegerLiteral 0x26de9759700 <col:55> 'int' 12
|   | |   `-IntegerLiteral 0x26de9759760 <col:59> 'int' 1
|   | |-ImplicitCastExpr 0x26de975a0b8 <line:2101:15, col:36> 'limb *' <ArrayToPointerDecay>
|   | | `-ArraySubscriptExpr 0x26de97598c8 <col:15, col:36> 'felem':'limb [9]' lvalue
|   | |   |-ImplicitCastExpr 0x26de97598b0 <col:15, col:33> 'felem *' <ArrayToPointerDecay>
|   | |   | `-ArraySubscriptExpr 0x26de9759868 <col:15, col:33> 'felem [3]' lvalue
|   | |   |   |-ImplicitCastExpr 0x26de9759850 <col:15, col:20> 'felem (*)[3]' <ArrayToPointerDecay>
|   | |   |   | `-MemberExpr 0x26de97597f8 <col:15, col:20> 'felem [16][3]' lvalue ->g_pre_comp 0x26de9753e08
|   | |   |   |   `-ImplicitCastExpr 0x26de97597e0 <col:15> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   | |   |   |     `-DeclRefExpr 0x26de97597c0 <col:15> 'NISTP521_PRE_COMP *' lvalue Var 0x26de975cb80 'pre' 'NISTP521_PRE_COMP *'
|   | |   |   `-IntegerLiteral 0x26de9759828 <col:31> 'int' 12
|   | |   `-IntegerLiteral 0x26de9759888 <col:35> 'int' 2
|   | |-ImplicitCastExpr 0x26de975a0e8 <col:39, col:59> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x26de975a0d0 <col:39, col:59> 'limb *' <ArrayToPointerDecay>
|   | |   `-ArraySubscriptExpr 0x26de97599f0 <col:39, col:59> 'felem':'limb [9]' lvalue
|   | |     |-ImplicitCastExpr 0x26de97599d8 <col:39, col:56> 'felem *' <ArrayToPointerDecay>
|   | |     | `-ArraySubscriptExpr 0x26de9759990 <col:39, col:56> 'felem [3]' lvalue
|   | |     |   |-ImplicitCastExpr 0x26de9759978 <col:39, col:44> 'felem (*)[3]' <ArrayToPointerDecay>
|   | |     |   | `-MemberExpr 0x26de9759920 <col:39, col:44> 'felem [16][3]' lvalue ->g_pre_comp 0x26de9753e08
|   | |     |   |   `-ImplicitCastExpr 0x26de9759908 <col:39> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   | |     |   |     `-DeclRefExpr 0x26de97598e8 <col:39> 'NISTP521_PRE_COMP *' lvalue Var 0x26de975cb80 'pre' 'NISTP521_PRE_COMP *'
|   | |     |   `-IntegerLiteral 0x26de9759950 <col:55> 'int' 8
|   | |     `-IntegerLiteral 0x26de97599b0 <col:58> 'int' 0
|   | |-ImplicitCastExpr 0x26de975a118 <line:2102:15, col:35> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x26de975a100 <col:15, col:35> 'limb *' <ArrayToPointerDecay>
|   | |   `-ArraySubscriptExpr 0x26de9759b18 <col:15, col:35> 'felem':'limb [9]' lvalue
|   | |     |-ImplicitCastExpr 0x26de9759b00 <col:15, col:32> 'felem *' <ArrayToPointerDecay>
|   | |     | `-ArraySubscriptExpr 0x26de9759ab8 <col:15, col:32> 'felem [3]' lvalue
|   | |     |   |-ImplicitCastExpr 0x26de9759aa0 <col:15, col:20> 'felem (*)[3]' <ArrayToPointerDecay>
|   | |     |   | `-MemberExpr 0x26de9759a48 <col:15, col:20> 'felem [16][3]' lvalue ->g_pre_comp 0x26de9753e08
|   | |     |   |   `-ImplicitCastExpr 0x26de9759a30 <col:15> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   | |     |   |     `-DeclRefExpr 0x26de9759a10 <col:15> 'NISTP521_PRE_COMP *' lvalue Var 0x26de975cb80 'pre' 'NISTP521_PRE_COMP *'
|   | |     |   `-IntegerLiteral 0x26de9759a78 <col:31> 'int' 8
|   | |     `-IntegerLiteral 0x26de9759ad8 <col:34> 'int' 1
|   | |-ImplicitCastExpr 0x26de975a148 <col:38, col:58> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x26de975a130 <col:38, col:58> 'limb *' <ArrayToPointerDecay>
|   | |   `-ArraySubscriptExpr 0x26de9759c40 <col:38, col:58> 'felem':'limb [9]' lvalue
|   | |     |-ImplicitCastExpr 0x26de9759c28 <col:38, col:55> 'felem *' <ArrayToPointerDecay>
|   | |     | `-ArraySubscriptExpr 0x26de9759be0 <col:38, col:55> 'felem [3]' lvalue
|   | |     |   |-ImplicitCastExpr 0x26de9759bc8 <col:38, col:43> 'felem (*)[3]' <ArrayToPointerDecay>
|   | |     |   | `-MemberExpr 0x26de9759b70 <col:38, col:43> 'felem [16][3]' lvalue ->g_pre_comp 0x26de9753e08
|   | |     |   |   `-ImplicitCastExpr 0x26de9759b58 <col:38> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   | |     |   |     `-DeclRefExpr 0x26de9759b38 <col:38> 'NISTP521_PRE_COMP *' lvalue Var 0x26de975cb80 'pre' 'NISTP521_PRE_COMP *'
|   | |     |   `-IntegerLiteral 0x26de9759ba0 <col:54> 'int' 8
|   | |     `-IntegerLiteral 0x26de9759c00 <col:57> 'int' 2
|   | |-IntegerLiteral 0x26de9759c60 <line:2103:15> 'int' 0
|   | |-ImplicitCastExpr 0x26de975a178 <col:18, col:38> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x26de975a160 <col:18, col:38> 'limb *' <ArrayToPointerDecay>
|   | |   `-ArraySubscriptExpr 0x26de9759d90 <col:18, col:38> 'felem':'limb [9]' lvalue
|   | |     |-ImplicitCastExpr 0x26de9759d78 <col:18, col:35> 'felem *' <ArrayToPointerDecay>
|   | |     | `-ArraySubscriptExpr 0x26de9759d30 <col:18, col:35> 'felem [3]' lvalue
|   | |     |   |-ImplicitCastExpr 0x26de9759d18 <col:18, col:23> 'felem (*)[3]' <ArrayToPointerDecay>
|   | |     |   | `-MemberExpr 0x26de9759cc0 <col:18, col:23> 'felem [16][3]' lvalue ->g_pre_comp 0x26de9753e08
|   | |     |   |   `-ImplicitCastExpr 0x26de9759ca8 <col:18> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   | |     |   |     `-DeclRefExpr 0x26de9759c88 <col:18> 'NISTP521_PRE_COMP *' lvalue Var 0x26de975cb80 'pre' 'NISTP521_PRE_COMP *'
|   | |     |   `-IntegerLiteral 0x26de9759cf0 <col:34> 'int' 4
|   | |     `-IntegerLiteral 0x26de9759d50 <col:37> 'int' 0
|   | |-ImplicitCastExpr 0x26de975a1a8 <col:41, col:61> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x26de975a190 <col:41, col:61> 'limb *' <ArrayToPointerDecay>
|   | |   `-ArraySubscriptExpr 0x26de9759eb8 <col:41, col:61> 'felem':'limb [9]' lvalue
|   | |     |-ImplicitCastExpr 0x26de9759ea0 <col:41, col:58> 'felem *' <ArrayToPointerDecay>
|   | |     | `-ArraySubscriptExpr 0x26de9759e58 <col:41, col:58> 'felem [3]' lvalue
|   | |     |   |-ImplicitCastExpr 0x26de9759e40 <col:41, col:46> 'felem (*)[3]' <ArrayToPointerDecay>
|   | |     |   | `-MemberExpr 0x26de9759de8 <col:41, col:46> 'felem [16][3]' lvalue ->g_pre_comp 0x26de9753e08
|   | |     |   |   `-ImplicitCastExpr 0x26de9759dd0 <col:41> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   | |     |   |     `-DeclRefExpr 0x26de9759db0 <col:41> 'NISTP521_PRE_COMP *' lvalue Var 0x26de975cb80 'pre' 'NISTP521_PRE_COMP *'
|   | |     |   `-IntegerLiteral 0x26de9759e18 <col:57> 'int' 4
|   | |     `-IntegerLiteral 0x26de9759e78 <col:60> 'int' 1
|   | `-ImplicitCastExpr 0x26de975a1d8 <line:2104:15, col:35> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de975a1c0 <col:15, col:35> 'limb *' <ArrayToPointerDecay>
|   |     `-ArraySubscriptExpr 0x26de9759fe0 <col:15, col:35> 'felem':'limb [9]' lvalue
|   |       |-ImplicitCastExpr 0x26de9759fc8 <col:15, col:32> 'felem *' <ArrayToPointerDecay>
|   |       | `-ArraySubscriptExpr 0x26de9759f80 <col:15, col:32> 'felem [3]' lvalue
|   |       |   |-ImplicitCastExpr 0x26de9759f68 <col:15, col:20> 'felem (*)[3]' <ArrayToPointerDecay>
|   |       |   | `-MemberExpr 0x26de9759f10 <col:15, col:20> 'felem [16][3]' lvalue ->g_pre_comp 0x26de9753e08
|   |       |   |   `-ImplicitCastExpr 0x26de9759ef8 <col:15> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   |       |   |     `-DeclRefExpr 0x26de9759ed8 <col:15> 'NISTP521_PRE_COMP *' lvalue Var 0x26de975cb80 'pre' 'NISTP521_PRE_COMP *'
|   |       |   `-IntegerLiteral 0x26de9759f40 <col:31> 'int' 4
|   |       `-IntegerLiteral 0x26de9759fa0 <col:34> 'int' 2
|   |-CallExpr 0x26de975acb8 <line:2106:5, line:2110:36> 'void'
|   | |-ImplicitCastExpr 0x26de975aca0 <line:2106:5> 'void (*)(limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de975a1f0 <col:5> 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const limb *, const limb *, const limb *)' Function 0x26de9674158 'point_add' 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const limb *, const limb *, const limb *)'
|   | |-ImplicitCastExpr 0x26de975ad28 <col:15, col:36> 'limb *' <ArrayToPointerDecay>
|   | | `-ArraySubscriptExpr 0x26de975a318 <col:15, col:36> 'felem':'limb [9]' lvalue
|   | |   |-ImplicitCastExpr 0x26de975a300 <col:15, col:33> 'felem *' <ArrayToPointerDecay>
|   | |   | `-ArraySubscriptExpr 0x26de975a2b8 <col:15, col:33> 'felem [3]' lvalue
|   | |   |   |-ImplicitCastExpr 0x26de975a2a0 <col:15, col:20> 'felem (*)[3]' <ArrayToPointerDecay>
|   | |   |   | `-MemberExpr 0x26de975a248 <col:15, col:20> 'felem [16][3]' lvalue ->g_pre_comp 0x26de9753e08
|   | |   |   |   `-ImplicitCastExpr 0x26de975a230 <col:15> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   | |   |   |     `-DeclRefExpr 0x26de975a210 <col:15> 'NISTP521_PRE_COMP *' lvalue Var 0x26de975cb80 'pre' 'NISTP521_PRE_COMP *'
|   | |   |   `-IntegerLiteral 0x26de975a278 <col:31> 'int' 14
|   | |   `-IntegerLiteral 0x26de975a2d8 <col:35> 'int' 0
|   | |-ImplicitCastExpr 0x26de975ad40 <col:39, col:60> 'limb *' <ArrayToPointerDecay>
|   | | `-ArraySubscriptExpr 0x26de975a440 <col:39, col:60> 'felem':'limb [9]' lvalue
|   | |   |-ImplicitCastExpr 0x26de975a428 <col:39, col:57> 'felem *' <ArrayToPointerDecay>
|   | |   | `-ArraySubscriptExpr 0x26de975a3e0 <col:39, col:57> 'felem [3]' lvalue
|   | |   |   |-ImplicitCastExpr 0x26de975a3c8 <col:39, col:44> 'felem (*)[3]' <ArrayToPointerDecay>
|   | |   |   | `-MemberExpr 0x26de975a370 <col:39, col:44> 'felem [16][3]' lvalue ->g_pre_comp 0x26de9753e08
|   | |   |   |   `-ImplicitCastExpr 0x26de975a358 <col:39> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   | |   |   |     `-DeclRefExpr 0x26de975a338 <col:39> 'NISTP521_PRE_COMP *' lvalue Var 0x26de975cb80 'pre' 'NISTP521_PRE_COMP *'
|   | |   |   `-IntegerLiteral 0x26de975a3a0 <col:55> 'int' 14
|   | |   `-IntegerLiteral 0x26de975a400 <col:59> 'int' 1
|   | |-ImplicitCastExpr 0x26de975ad58 <line:2107:15, col:36> 'limb *' <ArrayToPointerDecay>
|   | | `-ArraySubscriptExpr 0x26de975a568 <col:15, col:36> 'felem':'limb [9]' lvalue
|   | |   |-ImplicitCastExpr 0x26de975a550 <col:15, col:33> 'felem *' <ArrayToPointerDecay>
|   | |   | `-ArraySubscriptExpr 0x26de975a508 <col:15, col:33> 'felem [3]' lvalue
|   | |   |   |-ImplicitCastExpr 0x26de975a4f0 <col:15, col:20> 'felem (*)[3]' <ArrayToPointerDecay>
|   | |   |   | `-MemberExpr 0x26de975a498 <col:15, col:20> 'felem [16][3]' lvalue ->g_pre_comp 0x26de9753e08
|   | |   |   |   `-ImplicitCastExpr 0x26de975a480 <col:15> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   | |   |   |     `-DeclRefExpr 0x26de975a460 <col:15> 'NISTP521_PRE_COMP *' lvalue Var 0x26de975cb80 'pre' 'NISTP521_PRE_COMP *'
|   | |   |   `-IntegerLiteral 0x26de975a4c8 <col:31> 'int' 14
|   | |   `-IntegerLiteral 0x26de975a528 <col:35> 'int' 2
|   | |-ImplicitCastExpr 0x26de976ae20 <col:39, col:60> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x26de975ad70 <col:39, col:60> 'limb *' <ArrayToPointerDecay>
|   | |   `-ArraySubscriptExpr 0x26de975a690 <col:39, col:60> 'felem':'limb [9]' lvalue
|   | |     |-ImplicitCastExpr 0x26de975a678 <col:39, col:57> 'felem *' <ArrayToPointerDecay>
|   | |     | `-ArraySubscriptExpr 0x26de975a630 <col:39, col:57> 'felem [3]' lvalue
|   | |     |   |-ImplicitCastExpr 0x26de975a618 <col:39, col:44> 'felem (*)[3]' <ArrayToPointerDecay>
|   | |     |   | `-MemberExpr 0x26de975a5c0 <col:39, col:44> 'felem [16][3]' lvalue ->g_pre_comp 0x26de9753e08
|   | |     |   |   `-ImplicitCastExpr 0x26de975a5a8 <col:39> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   | |     |   |     `-DeclRefExpr 0x26de975a588 <col:39> 'NISTP521_PRE_COMP *' lvalue Var 0x26de975cb80 'pre' 'NISTP521_PRE_COMP *'
|   | |     |   `-IntegerLiteral 0x26de975a5f0 <col:55> 'int' 12
|   | |     `-IntegerLiteral 0x26de975a650 <col:59> 'int' 0
|   | |-ImplicitCastExpr 0x26de976ae50 <line:2108:15, col:36> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x26de976ae38 <col:15, col:36> 'limb *' <ArrayToPointerDecay>
|   | |   `-ArraySubscriptExpr 0x26de975a7b8 <col:15, col:36> 'felem':'limb [9]' lvalue
|   | |     |-ImplicitCastExpr 0x26de975a7a0 <col:15, col:33> 'felem *' <ArrayToPointerDecay>
|   | |     | `-ArraySubscriptExpr 0x26de975a758 <col:15, col:33> 'felem [3]' lvalue
|   | |     |   |-ImplicitCastExpr 0x26de975a740 <col:15, col:20> 'felem (*)[3]' <ArrayToPointerDecay>
|   | |     |   | `-MemberExpr 0x26de975a6e8 <col:15, col:20> 'felem [16][3]' lvalue ->g_pre_comp 0x26de9753e08
|   | |     |   |   `-ImplicitCastExpr 0x26de975a6d0 <col:15> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   | |     |   |     `-DeclRefExpr 0x26de975a6b0 <col:15> 'NISTP521_PRE_COMP *' lvalue Var 0x26de975cb80 'pre' 'NISTP521_PRE_COMP *'
|   | |     |   `-IntegerLiteral 0x26de975a718 <col:31> 'int' 12
|   | |     `-IntegerLiteral 0x26de975a778 <col:35> 'int' 1
|   | |-ImplicitCastExpr 0x26de976ae80 <col:39, col:60> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x26de976ae68 <col:39, col:60> 'limb *' <ArrayToPointerDecay>
|   | |   `-ArraySubscriptExpr 0x26de975a8e0 <col:39, col:60> 'felem':'limb [9]' lvalue
|   | |     |-ImplicitCastExpr 0x26de975a8c8 <col:39, col:57> 'felem *' <ArrayToPointerDecay>
|   | |     | `-ArraySubscriptExpr 0x26de975a880 <col:39, col:57> 'felem [3]' lvalue
|   | |     |   |-ImplicitCastExpr 0x26de975a868 <col:39, col:44> 'felem (*)[3]' <ArrayToPointerDecay>
|   | |     |   | `-MemberExpr 0x26de975a810 <col:39, col:44> 'felem [16][3]' lvalue ->g_pre_comp 0x26de9753e08
|   | |     |   |   `-ImplicitCastExpr 0x26de975a7f8 <col:39> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   | |     |   |     `-DeclRefExpr 0x26de975a7d8 <col:39> 'NISTP521_PRE_COMP *' lvalue Var 0x26de975cb80 'pre' 'NISTP521_PRE_COMP *'
|   | |     |   `-IntegerLiteral 0x26de975a840 <col:55> 'int' 12
|   | |     `-IntegerLiteral 0x26de975a8a0 <col:59> 'int' 2
|   | |-IntegerLiteral 0x26de975a900 <line:2109:15> 'int' 0
|   | |-ImplicitCastExpr 0x26de976aeb0 <col:18, col:38> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x26de976ae98 <col:18, col:38> 'limb *' <ArrayToPointerDecay>
|   | |   `-ArraySubscriptExpr 0x26de975aa30 <col:18, col:38> 'felem':'limb [9]' lvalue
|   | |     |-ImplicitCastExpr 0x26de975aa18 <col:18, col:35> 'felem *' <ArrayToPointerDecay>
|   | |     | `-ArraySubscriptExpr 0x26de975a9d0 <col:18, col:35> 'felem [3]' lvalue
|   | |     |   |-ImplicitCastExpr 0x26de975a9b8 <col:18, col:23> 'felem (*)[3]' <ArrayToPointerDecay>
|   | |     |   | `-MemberExpr 0x26de975a960 <col:18, col:23> 'felem [16][3]' lvalue ->g_pre_comp 0x26de9753e08
|   | |     |   |   `-ImplicitCastExpr 0x26de975a948 <col:18> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   | |     |   |     `-DeclRefExpr 0x26de975a928 <col:18> 'NISTP521_PRE_COMP *' lvalue Var 0x26de975cb80 'pre' 'NISTP521_PRE_COMP *'
|   | |     |   `-IntegerLiteral 0x26de975a990 <col:34> 'int' 2
|   | |     `-IntegerLiteral 0x26de975a9f0 <col:37> 'int' 0
|   | |-ImplicitCastExpr 0x26de976aee0 <col:41, col:61> 'const limb *':'const limb *' <NoOp>
|   | | `-ImplicitCastExpr 0x26de976aec8 <col:41, col:61> 'limb *' <ArrayToPointerDecay>
|   | |   `-ArraySubscriptExpr 0x26de975ab58 <col:41, col:61> 'felem':'limb [9]' lvalue
|   | |     |-ImplicitCastExpr 0x26de975ab40 <col:41, col:58> 'felem *' <ArrayToPointerDecay>
|   | |     | `-ArraySubscriptExpr 0x26de975aaf8 <col:41, col:58> 'felem [3]' lvalue
|   | |     |   |-ImplicitCastExpr 0x26de975aae0 <col:41, col:46> 'felem (*)[3]' <ArrayToPointerDecay>
|   | |     |   | `-MemberExpr 0x26de975aa88 <col:41, col:46> 'felem [16][3]' lvalue ->g_pre_comp 0x26de9753e08
|   | |     |   |   `-ImplicitCastExpr 0x26de975aa70 <col:41> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   | |     |   |     `-DeclRefExpr 0x26de975aa50 <col:41> 'NISTP521_PRE_COMP *' lvalue Var 0x26de975cb80 'pre' 'NISTP521_PRE_COMP *'
|   | |     |   `-IntegerLiteral 0x26de975aab8 <col:57> 'int' 2
|   | |     `-IntegerLiteral 0x26de975ab18 <col:60> 'int' 1
|   | `-ImplicitCastExpr 0x26de976af10 <line:2110:15, col:35> 'const limb *':'const limb *' <NoOp>
|   |   `-ImplicitCastExpr 0x26de976aef8 <col:15, col:35> 'limb *' <ArrayToPointerDecay>
|   |     `-ArraySubscriptExpr 0x26de975ac80 <col:15, col:35> 'felem':'limb [9]' lvalue
|   |       |-ImplicitCastExpr 0x26de975ac68 <col:15, col:32> 'felem *' <ArrayToPointerDecay>
|   |       | `-ArraySubscriptExpr 0x26de975ac20 <col:15, col:32> 'felem [3]' lvalue
|   |       |   |-ImplicitCastExpr 0x26de975ac08 <col:15, col:20> 'felem (*)[3]' <ArrayToPointerDecay>
|   |       |   | `-MemberExpr 0x26de975abb0 <col:15, col:20> 'felem [16][3]' lvalue ->g_pre_comp 0x26de9753e08
|   |       |   |   `-ImplicitCastExpr 0x26de975ab98 <col:15> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   |       |   |     `-DeclRefExpr 0x26de975ab78 <col:15> 'NISTP521_PRE_COMP *' lvalue Var 0x26de975cb80 'pre' 'NISTP521_PRE_COMP *'
|   |       |   `-IntegerLiteral 0x26de975abe0 <col:31> 'int' 2
|   |       `-IntegerLiteral 0x26de975ac40 <col:34> 'int' 2
|   |-ForStmt 0x26de976bfe8 <line:2111:5, line:2119:5>
|   | |-BinaryOperator 0x26de976af70 <line:2111:10, col:14> 'int' '='
|   | | |-DeclRefExpr 0x26de976af28 <col:10> 'int' lvalue Var 0x26de975ccb8 'i' 'int'
|   | | `-IntegerLiteral 0x26de976af48 <col:14> 'int' 1
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x26de976aff0 <col:17, col:21> 'int' '<'
|   | | |-ImplicitCastExpr 0x26de976afd8 <col:17> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x26de976af90 <col:17> 'int' lvalue Var 0x26de975ccb8 'i' 'int'
|   | | `-IntegerLiteral 0x26de976afb0 <col:21> 'int' 8
|   | |-UnaryOperator 0x26de976b030 <col:24, col:26> 'int' prefix '++'
|   | | `-DeclRefExpr 0x26de976b010 <col:26> 'int' lvalue Var 0x26de975ccb8 'i' 'int'
|   | `-CompoundStmt 0x26de976bfd0 <col:29, line:2119:5>
|   |   `-CallExpr 0x26de976bdf8 <line:2113:9, line:2118:40> 'void'
|   |     |-ImplicitCastExpr 0x26de976bde0 <line:2113:9> 'void (*)(limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const limb *, const limb *, const limb *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x26de976b048 <col:9> 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const limb *, const limb *, const limb *)' Function 0x26de9674158 'point_add' 'void (limb *, limb *, limb *, const limb *, const limb *, const limb *, const int, const limb *, const limb *, const limb *)'
|   |     |-ImplicitCastExpr 0x26de976be68 <col:19, col:47> 'limb *' <ArrayToPointerDecay>
|   |     | `-ArraySubscriptExpr 0x26de976b210 <col:19, col:47> 'felem':'limb [9]' lvalue
|   |     |   |-ImplicitCastExpr 0x26de976b1f8 <col:19, col:44> 'felem *' <ArrayToPointerDecay>
|   |     |   | `-ArraySubscriptExpr 0x26de976b1b0 <col:19, col:44> 'felem [3]' lvalue
|   |     |   |   |-ImplicitCastExpr 0x26de976b198 <col:19, col:24> 'felem (*)[3]' <ArrayToPointerDecay>
|   |     |   |   | `-MemberExpr 0x26de976b0a0 <col:19, col:24> 'felem [16][3]' lvalue ->g_pre_comp 0x26de9753e08
|   |     |   |   |   `-ImplicitCastExpr 0x26de976b088 <col:19> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   |     |   |   |     `-DeclRefExpr 0x26de976b068 <col:19> 'NISTP521_PRE_COMP *' lvalue Var 0x26de975cb80 'pre' 'NISTP521_PRE_COMP *'
|   |     |   |   `-BinaryOperator 0x26de976b178 <col:35, col:43> 'int' '+'
|   |     |   |     |-BinaryOperator 0x26de976b130 <col:35, col:39> 'int' '*'
|   |     |   |     | |-IntegerLiteral 0x26de976b0d0 <col:35> 'int' 2
|   |     |   |     | `-ImplicitCastExpr 0x26de976b118 <col:39> 'int' <LValueToRValue>
|   |     |   |     |   `-DeclRefExpr 0x26de976b0f8 <col:39> 'int' lvalue Var 0x26de975ccb8 'i' 'int'
|   |     |   |     `-IntegerLiteral 0x26de976b150 <col:43> 'int' 1
|   |     |   `-IntegerLiteral 0x26de976b1d0 <col:46> 'int' 0
|   |     |-ImplicitCastExpr 0x26de976be80 <line:2114:19, col:47> 'limb *' <ArrayToPointerDecay>
|   |     | `-ArraySubscriptExpr 0x26de976b3d8 <col:19, col:47> 'felem':'limb [9]' lvalue
|   |     |   |-ImplicitCastExpr 0x26de976b3c0 <col:19, col:44> 'felem *' <ArrayToPointerDecay>
|   |     |   | `-ArraySubscriptExpr 0x26de976b378 <col:19, col:44> 'felem [3]' lvalue
|   |     |   |   |-ImplicitCastExpr 0x26de976b360 <col:19, col:24> 'felem (*)[3]' <ArrayToPointerDecay>
|   |     |   |   | `-MemberExpr 0x26de976b268 <col:19, col:24> 'felem [16][3]' lvalue ->g_pre_comp 0x26de9753e08
|   |     |   |   |   `-ImplicitCastExpr 0x26de976b250 <col:19> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   |     |   |   |     `-DeclRefExpr 0x26de976b230 <col:19> 'NISTP521_PRE_COMP *' lvalue Var 0x26de975cb80 'pre' 'NISTP521_PRE_COMP *'
|   |     |   |   `-BinaryOperator 0x26de976b340 <col:35, col:43> 'int' '+'
|   |     |   |     |-BinaryOperator 0x26de976b2f8 <col:35, col:39> 'int' '*'
|   |     |   |     | |-IntegerLiteral 0x26de976b298 <col:35> 'int' 2
|   |     |   |     | `-ImplicitCastExpr 0x26de976b2e0 <col:39> 'int' <LValueToRValue>
|   |     |   |     |   `-DeclRefExpr 0x26de976b2c0 <col:39> 'int' lvalue Var 0x26de975ccb8 'i' 'int'
|   |     |   |     `-IntegerLiteral 0x26de976b318 <col:43> 'int' 1
|   |     |   `-IntegerLiteral 0x26de976b398 <col:46> 'int' 1
|   |     |-ImplicitCastExpr 0x26de976be98 <line:2115:19, col:47> 'limb *' <ArrayToPointerDecay>
|   |     | `-ArraySubscriptExpr 0x26de976b5a0 <col:19, col:47> 'felem':'limb [9]' lvalue
|   |     |   |-ImplicitCastExpr 0x26de976b588 <col:19, col:44> 'felem *' <ArrayToPointerDecay>
|   |     |   | `-ArraySubscriptExpr 0x26de976b540 <col:19, col:44> 'felem [3]' lvalue
|   |     |   |   |-ImplicitCastExpr 0x26de976b528 <col:19, col:24> 'felem (*)[3]' <ArrayToPointerDecay>
|   |     |   |   | `-MemberExpr 0x26de976b430 <col:19, col:24> 'felem [16][3]' lvalue ->g_pre_comp 0x26de9753e08
|   |     |   |   |   `-ImplicitCastExpr 0x26de976b418 <col:19> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   |     |   |   |     `-DeclRefExpr 0x26de976b3f8 <col:19> 'NISTP521_PRE_COMP *' lvalue Var 0x26de975cb80 'pre' 'NISTP521_PRE_COMP *'
|   |     |   |   `-BinaryOperator 0x26de976b508 <col:35, col:43> 'int' '+'
|   |     |   |     |-BinaryOperator 0x26de976b4c0 <col:35, col:39> 'int' '*'
|   |     |   |     | |-IntegerLiteral 0x26de976b460 <col:35> 'int' 2
|   |     |   |     | `-ImplicitCastExpr 0x26de976b4a8 <col:39> 'int' <LValueToRValue>
|   |     |   |     |   `-DeclRefExpr 0x26de976b488 <col:39> 'int' lvalue Var 0x26de975ccb8 'i' 'int'
|   |     |   |     `-IntegerLiteral 0x26de976b4e0 <col:43> 'int' 1
|   |     |   `-IntegerLiteral 0x26de976b560 <col:46> 'int' 2
|   |     |-ImplicitCastExpr 0x26de976bec8 <col:50, col:74> 'const limb *':'const limb *' <NoOp>
|   |     | `-ImplicitCastExpr 0x26de976beb0 <col:50, col:74> 'limb *' <ArrayToPointerDecay>
|   |     |   `-ArraySubscriptExpr 0x26de976b720 <col:50, col:74> 'felem':'limb [9]' lvalue
|   |     |     |-ImplicitCastExpr 0x26de976b708 <col:50, col:71> 'felem *' <ArrayToPointerDecay>
|   |     |     | `-ArraySubscriptExpr 0x26de976b6c0 <col:50, col:71> 'felem [3]' lvalue
|   |     |     |   |-ImplicitCastExpr 0x26de976b6a8 <col:50, col:55> 'felem (*)[3]' <ArrayToPointerDecay>
|   |     |     |   | `-MemberExpr 0x26de976b5f8 <col:50, col:55> 'felem [16][3]' lvalue ->g_pre_comp 0x26de9753e08
|   |     |     |   |   `-ImplicitCastExpr 0x26de976b5e0 <col:50> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   |     |     |   |     `-DeclRefExpr 0x26de976b5c0 <col:50> 'NISTP521_PRE_COMP *' lvalue Var 0x26de975cb80 'pre' 'NISTP521_PRE_COMP *'
|   |     |     |   `-BinaryOperator 0x26de976b688 <col:66, col:70> 'int' '*'
|   |     |     |     |-IntegerLiteral 0x26de976b628 <col:66> 'int' 2
|   |     |     |     `-ImplicitCastExpr 0x26de976b670 <col:70> 'int' <LValueToRValue>
|   |     |     |       `-DeclRefExpr 0x26de976b650 <col:70> 'int' lvalue Var 0x26de975ccb8 'i' 'int'
|   |     |     `-IntegerLiteral 0x26de976b6e0 <col:73> 'int' 0
|   |     |-ImplicitCastExpr 0x26de976bef8 <line:2116:19, col:43> 'const limb *':'const limb *' <NoOp>
|   |     | `-ImplicitCastExpr 0x26de976bee0 <col:19, col:43> 'limb *' <ArrayToPointerDecay>
|   |     |   `-ArraySubscriptExpr 0x26de976b8a0 <col:19, col:43> 'felem':'limb [9]' lvalue
|   |     |     |-ImplicitCastExpr 0x26de976b888 <col:19, col:40> 'felem *' <ArrayToPointerDecay>
|   |     |     | `-ArraySubscriptExpr 0x26de976b840 <col:19, col:40> 'felem [3]' lvalue
|   |     |     |   |-ImplicitCastExpr 0x26de976b828 <col:19, col:24> 'felem (*)[3]' <ArrayToPointerDecay>
|   |     |     |   | `-MemberExpr 0x26de976b778 <col:19, col:24> 'felem [16][3]' lvalue ->g_pre_comp 0x26de9753e08
|   |     |     |   |   `-ImplicitCastExpr 0x26de976b760 <col:19> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   |     |     |   |     `-DeclRefExpr 0x26de976b740 <col:19> 'NISTP521_PRE_COMP *' lvalue Var 0x26de975cb80 'pre' 'NISTP521_PRE_COMP *'
|   |     |     |   `-BinaryOperator 0x26de976b808 <col:35, col:39> 'int' '*'
|   |     |     |     |-IntegerLiteral 0x26de976b7a8 <col:35> 'int' 2
|   |     |     |     `-ImplicitCastExpr 0x26de976b7f0 <col:39> 'int' <LValueToRValue>
|   |     |     |       `-DeclRefExpr 0x26de976b7d0 <col:39> 'int' lvalue Var 0x26de975ccb8 'i' 'int'
|   |     |     `-IntegerLiteral 0x26de976b860 <col:42> 'int' 1
|   |     |-ImplicitCastExpr 0x26de976bf28 <col:46, col:70> 'const limb *':'const limb *' <NoOp>
|   |     | `-ImplicitCastExpr 0x26de976bf10 <col:46, col:70> 'limb *' <ArrayToPointerDecay>
|   |     |   `-ArraySubscriptExpr 0x26de976ba20 <col:46, col:70> 'felem':'limb [9]' lvalue
|   |     |     |-ImplicitCastExpr 0x26de976ba08 <col:46, col:67> 'felem *' <ArrayToPointerDecay>
|   |     |     | `-ArraySubscriptExpr 0x26de976b9c0 <col:46, col:67> 'felem [3]' lvalue
|   |     |     |   |-ImplicitCastExpr 0x26de976b9a8 <col:46, col:51> 'felem (*)[3]' <ArrayToPointerDecay>
|   |     |     |   | `-MemberExpr 0x26de976b8f8 <col:46, col:51> 'felem [16][3]' lvalue ->g_pre_comp 0x26de9753e08
|   |     |     |   |   `-ImplicitCastExpr 0x26de976b8e0 <col:46> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   |     |     |   |     `-DeclRefExpr 0x26de976b8c0 <col:46> 'NISTP521_PRE_COMP *' lvalue Var 0x26de975cb80 'pre' 'NISTP521_PRE_COMP *'
|   |     |     |   `-BinaryOperator 0x26de976b988 <col:62, col:66> 'int' '*'
|   |     |     |     |-IntegerLiteral 0x26de976b928 <col:62> 'int' 2
|   |     |     |     `-ImplicitCastExpr 0x26de976b970 <col:66> 'int' <LValueToRValue>
|   |     |     |       `-DeclRefExpr 0x26de976b950 <col:66> 'int' lvalue Var 0x26de975ccb8 'i' 'int'
|   |     |     `-IntegerLiteral 0x26de976b9e0 <col:69> 'int' 2
|   |     |-IntegerLiteral 0x26de976ba40 <col:73> 'int' 0
|   |     |-ImplicitCastExpr 0x26de976bf58 <line:2117:19, col:39> 'const limb *':'const limb *' <NoOp>
|   |     | `-ImplicitCastExpr 0x26de976bf40 <col:19, col:39> 'limb *' <ArrayToPointerDecay>
|   |     |   `-ArraySubscriptExpr 0x26de976bb70 <col:19, col:39> 'felem':'limb [9]' lvalue
|   |     |     |-ImplicitCastExpr 0x26de976bb58 <col:19, col:36> 'felem *' <ArrayToPointerDecay>
|   |     |     | `-ArraySubscriptExpr 0x26de976bb10 <col:19, col:36> 'felem [3]' lvalue
|   |     |     |   |-ImplicitCastExpr 0x26de976baf8 <col:19, col:24> 'felem (*)[3]' <ArrayToPointerDecay>
|   |     |     |   | `-MemberExpr 0x26de976baa0 <col:19, col:24> 'felem [16][3]' lvalue ->g_pre_comp 0x26de9753e08
|   |     |     |   |   `-ImplicitCastExpr 0x26de976ba88 <col:19> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   |     |     |   |     `-DeclRefExpr 0x26de976ba68 <col:19> 'NISTP521_PRE_COMP *' lvalue Var 0x26de975cb80 'pre' 'NISTP521_PRE_COMP *'
|   |     |     |   `-IntegerLiteral 0x26de976bad0 <col:35> 'int' 1
|   |     |     `-IntegerLiteral 0x26de976bb30 <col:38> 'int' 0
|   |     |-ImplicitCastExpr 0x26de976bf88 <col:42, col:62> 'const limb *':'const limb *' <NoOp>
|   |     | `-ImplicitCastExpr 0x26de976bf70 <col:42, col:62> 'limb *' <ArrayToPointerDecay>
|   |     |   `-ArraySubscriptExpr 0x26de976bc98 <col:42, col:62> 'felem':'limb [9]' lvalue
|   |     |     |-ImplicitCastExpr 0x26de976bc80 <col:42, col:59> 'felem *' <ArrayToPointerDecay>
|   |     |     | `-ArraySubscriptExpr 0x26de976bc38 <col:42, col:59> 'felem [3]' lvalue
|   |     |     |   |-ImplicitCastExpr 0x26de976bc20 <col:42, col:47> 'felem (*)[3]' <ArrayToPointerDecay>
|   |     |     |   | `-MemberExpr 0x26de976bbc8 <col:42, col:47> 'felem [16][3]' lvalue ->g_pre_comp 0x26de9753e08
|   |     |     |   |   `-ImplicitCastExpr 0x26de976bbb0 <col:42> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   |     |     |   |     `-DeclRefExpr 0x26de976bb90 <col:42> 'NISTP521_PRE_COMP *' lvalue Var 0x26de975cb80 'pre' 'NISTP521_PRE_COMP *'
|   |     |     |   `-IntegerLiteral 0x26de976bbf8 <col:58> 'int' 1
|   |     |     `-IntegerLiteral 0x26de976bc58 <col:61> 'int' 1
|   |     `-ImplicitCastExpr 0x26de976bfb8 <line:2118:19, col:39> 'const limb *':'const limb *' <NoOp>
|   |       `-ImplicitCastExpr 0x26de976bfa0 <col:19, col:39> 'limb *' <ArrayToPointerDecay>
|   |         `-ArraySubscriptExpr 0x26de976bdc0 <col:19, col:39> 'felem':'limb [9]' lvalue
|   |           |-ImplicitCastExpr 0x26de976bda8 <col:19, col:36> 'felem *' <ArrayToPointerDecay>
|   |           | `-ArraySubscriptExpr 0x26de976bd60 <col:19, col:36> 'felem [3]' lvalue
|   |           |   |-ImplicitCastExpr 0x26de976bd48 <col:19, col:24> 'felem (*)[3]' <ArrayToPointerDecay>
|   |           |   | `-MemberExpr 0x26de976bcf0 <col:19, col:24> 'felem [16][3]' lvalue ->g_pre_comp 0x26de9753e08
|   |           |   |   `-ImplicitCastExpr 0x26de976bcd8 <col:19> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   |           |   |     `-DeclRefExpr 0x26de976bcb8 <col:19> 'NISTP521_PRE_COMP *' lvalue Var 0x26de975cb80 'pre' 'NISTP521_PRE_COMP *'
|   |           |   `-IntegerLiteral 0x26de976bd20 <col:35> 'int' 1
|   |           `-IntegerLiteral 0x26de976bd80 <col:38> 'int' 2
|   |-CallExpr 0x26de976c1b8 <line:2120:5, col:61> 'void'
|   | |-ImplicitCastExpr 0x26de976c1a0 <col:5> 'void (*)(size_t, felem (*)[3], felem *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de976c020 <col:5> 'void (size_t, felem (*)[3], felem *)' Function 0x26de9757448 'make_points_affine' 'void (size_t, felem (*)[3], felem *)'
|   | |-ImplicitCastExpr 0x26de976c1f0 <col:24> 'size_t':'unsigned long long' <IntegralCast>
|   | | `-IntegerLiteral 0x26de976c040 <col:24> 'int' 15
|   | |-UnaryOperator 0x26de976c150 <col:28, col:48> 'felem (*)[3]' prefix '&' cannot overflow
|   | | `-ParenExpr 0x26de976c130 <col:29, col:48> 'felem [3]' lvalue
|   | |   `-ArraySubscriptExpr 0x26de976c110 <col:30, col:47> 'felem [3]' lvalue
|   | |     |-ImplicitCastExpr 0x26de976c0f8 <col:30, col:35> 'felem (*)[3]' <ArrayToPointerDecay>
|   | |     | `-MemberExpr 0x26de976c0a0 <col:30, col:35> 'felem [16][3]' lvalue ->g_pre_comp 0x26de9753e08
|   | |     |   `-ImplicitCastExpr 0x26de976c088 <col:30> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   | |     |     `-DeclRefExpr 0x26de976c068 <col:30> 'NISTP521_PRE_COMP *' lvalue Var 0x26de975cb80 'pre' 'NISTP521_PRE_COMP *'
|   | |     `-IntegerLiteral 0x26de976c0d0 <col:46> 'int' 1
|   | `-ImplicitCastExpr 0x26de976c208 <col:51> 'felem *' <ArrayToPointerDecay>
|   |   `-DeclRefExpr 0x26de976c168 <col:51> 'felem [16]' lvalue Var 0x26de9765008 'tmp_felems' 'felem [16]'
|   |-LabelStmt 0x26de976c268 <line:2122:2, col:6> 'done'
|   | `-NullStmt 0x26de976c260 <col:6>
|   |-BinaryOperator 0x26de976c2e0 <line:2124:5, col:11> 'int' '='
|   | |-DeclRefExpr 0x26de976c280 <col:5> 'int' lvalue Var 0x26de975cac8 'ret' 'int'
|   | `-IntegerLiteral 0x26de976c2b8 <col:11> 'int' 1
|   |-BinaryOperator 0x26de976c3c0 <line:2125:5, D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:27> 'NISTP521_PRE_COMP *' '='
|   | |-DeclRefExpr 0x26de976c300 <.//openssl//file_jk/before\crypto\ec\ecp_nistp521.c:2125:5> 'NISTP521_PRE_COMP *' lvalue Var 0x26de975cb80 'pre' 'NISTP521_PRE_COMP *'
|   | `-ImplicitCastExpr 0x26de976c3a8 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:36:17, col:27> 'NISTP521_PRE_COMP *' <NullToPointer>
|   |   `-ParenExpr 0x26de976c388 <col:17, col:27> 'void *'
|   |     `-CStyleCastExpr 0x26de976c360 <col:18, col:26> 'void *' <NullToPointer>
|   |       `-IntegerLiteral 0x26de976c320 <col:26> 'int' 0
|   |-LabelStmt 0x26de976c408 <.//openssl//file_jk/before\crypto\ec\ecp_nistp521.c:2126:2, col:5> 'err'
|   | `-NullStmt 0x26de976c400 <col:5>
|   |-CallExpr 0x26de976c510 <line:2130:5, col:34> 'void'
|   | |-ImplicitCastExpr 0x26de976c4f8 <col:5> 'void (*)(NISTP521_PRE_COMP *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x26de976c460 <col:5> 'void (NISTP521_PRE_COMP *)' Function 0x26de9745518 'EC_nistp521_pre_comp_free' 'void (NISTP521_PRE_COMP *)'
|   | `-ImplicitCastExpr 0x26de976c538 <col:31> 'NISTP521_PRE_COMP *' <LValueToRValue>
|   |   `-DeclRefExpr 0x26de976c480 <col:31> 'NISTP521_PRE_COMP *' lvalue Var 0x26de975cb80 'pre' 'NISTP521_PRE_COMP *'
|   `-ReturnStmt 0x26de976c588 <line:2131:5, col:12>
|     `-ImplicitCastExpr 0x26de976c570 <col:12> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x26de976c550 <col:12> 'int' lvalue Var 0x26de975cac8 'ret' 'int'
`-FunctionDecl 0x26de976c728 <line:2134:1, line:2137:1> line:2134:5 invalid ec_GFp_nistp521_have_precompute_mult 'int (const int *)'
  |-ParmVarDecl 0x26de976c690 <col:42, col:58> col:58 invalid group 'const int *'
  `-CompoundStmt 0x26de976c890 <line:2135:1, line:2137:1>
