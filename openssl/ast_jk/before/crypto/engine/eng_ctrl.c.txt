TranslationUnitDecl 0x2a8a5c24068 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x2a8a5c24900 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x2a8a5c24600 '__int128'
|-TypedefDecl 0x2a8a5c24970 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x2a8a5c24620 'unsigned __int128'
|-TypedefDecl 0x2a8a5c24ca8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x2a8a5c24a60 'struct __NSConstantString_tag'
|   `-Record 0x2a8a5c249c8 '__NSConstantString_tag'
|-TypedefDecl 0x2a8a5c24d18 <<invalid sloc>> <invalid sloc> implicit size_t 'unsigned long long'
| `-BuiltinType 0x2a8a5c24240 'unsigned long long'
|-TypedefDecl 0x2a8a5c24db0 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x2a8a5c24d70 'char *'
|   `-BuiltinType 0x2a8a5c24100 'char'
|-TypedefDecl 0x2a8a5c24e20 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x2a8a5c24d70 'char *'
|   `-BuiltinType 0x2a8a5c24100 'char'
|-VarDecl 0x2a8a5c24ec0 <.//openssl//file_jk/before\crypto\engine/eng_int.h:27:1, col:23> col:23 invalid global_engine_lock 'int *' extern
|-TypedefDecl 0x2a8a767ed20 <line:58:1, col:39> col:15 referenced ENGINE_CLEANUP_CB 'void (void)':'void (void)'
| `-ParenType 0x2a8a5c24fd0 'void (void)' sugar
|   `-FunctionProtoType 0x2a8a5c24fa0 'void (void)' cdecl
|     `-BuiltinType 0x2a8a5c240c0 'void'
|-RecordDecl 0x2a8a767ed78 <line:59:9, line:61:1> line:59:16 struct st_engine_cleanup_item definition
| `-FieldDecl 0x2a8a767eeb8 <line:60:5, col:24> col:24 cb 'ENGINE_CLEANUP_CB *'
|-TypedefDecl 0x2a8a767ef68 <line:59:1, line:61:3> col:3 referenced ENGINE_CLEANUP_ITEM 'struct st_engine_cleanup_item':'struct st_engine_cleanup_item'
| `-ElaboratedType 0x2a8a767ef10 'struct st_engine_cleanup_item' sugar
|   `-RecordType 0x2a8a767ee10 'struct st_engine_cleanup_item'
|     `-Record 0x2a8a767ed78 'st_engine_cleanup_item'
|-FunctionDecl 0x2a8a767f110 <line:62:1, col:36> col:1 DEFINE_STACK_OF 'int (ENGINE_CLEANUP_ITEM)'
| `-ParmVarDecl 0x2a8a767f010 <col:17> col:36 'ENGINE_CLEANUP_ITEM':'struct st_engine_cleanup_item'
|-FunctionDecl 0x2a8a767f338 <line:63:1, col:52> col:6 engine_cleanup_add_first 'void (ENGINE_CLEANUP_CB *)'
| `-ParmVarDecl 0x2a8a767f228 <col:31, col:50> col:50 cb 'ENGINE_CLEANUP_CB *'
|-FunctionDecl 0x2a8a767f4b0 <line:64:1, col:51> col:6 engine_cleanup_add_last 'void (ENGINE_CLEANUP_CB *)'
| `-ParmVarDecl 0x2a8a767f408 <col:30, col:49> col:49 cb 'ENGINE_CLEANUP_CB *'
|-RecordDecl 0x2a8a767f570 <line:81:9, col:16> col:16 struct st_engine_table
|-EmptyDecl 0x2a8a7680108 <line:88:59> col:59
|-TypedefDecl 0x2a8a76803b0 <line:94:1, line:95:61> line:94:15 referenced engine_table_doall_cb 'void (int, int (*)())':'void (int, int (*)())'
| `-ParenType 0x2a8a7680350 'void (int, int (*)())' sugar
|   `-FunctionProtoType 0x2a8a7680310 'void (int, int (*)())' cdecl
|     |-BuiltinType 0x2a8a5c240c0 'void'
|     |-BuiltinType 0x2a8a5c24160 'int'
|     `-DecayedType 0x2a8a7680230 'int (*)()' sugar
|       |-FunctionNoProtoType 0x2a8a76801b0 'int ()' cdecl
|       | `-BuiltinType 0x2a8a5c24160 'int'
|       `-PointerType 0x2a8a7680200 'int (*)()'
|         `-FunctionNoProtoType 0x2a8a76801b0 'int ()' cdecl
|           `-BuiltinType 0x2a8a5c24160 'int'
|-FunctionDecl 0x2a8a76806b8 <line:96:1, line:97:34> line:96:6 invalid engine_table_doall 'void (int *, engine_table_doall_cb *, void *)'
| |-ParmVarDecl 0x2a8a7680420 <col:25, col:39> col:39 invalid table 'int *'
| |-ParmVarDecl 0x2a8a7680518 <col:46, col:69> col:69 cb 'engine_table_doall_cb *'
| `-ParmVarDecl 0x2a8a7680598 <line:97:25, col:31> col:31 arg 'void *'
|-FunctionDecl 0x2a8a7680850 <line:104:1, col:35> col:5 invalid engine_unlocked_init 'int (int *)'
| `-ParmVarDecl 0x2a8a7680788 <col:26, col:34> col:34 invalid e 'int *'
|-FunctionDecl 0x2a8a7680a70 <line:105:1, col:62> col:5 invalid engine_unlocked_finish 'int (int *, int)'
| |-ParmVarDecl 0x2a8a7680910 <col:28, col:36> col:36 invalid e 'int *'
| `-ParmVarDecl 0x2a8a7680990 <col:39, col:43> col:43 unlock_for_handlers 'int'
|-FunctionDecl 0x2a8a7680c58 <line:106:1, col:43> col:5 invalid engine_free_util 'int (int *, int)'
| |-ParmVarDecl 0x2a8a7680b38 <col:22, col:30> col:30 invalid e 'int *'
| `-ParmVarDecl 0x2a8a7680bb8 <col:33, col:37> col:37 locked 'int'
|-FunctionDecl 0x2a8a767bdb8 <line:113:1, col:35> col:6 invalid engine_set_all_null 'void (int *)'
| `-ParmVarDecl 0x2a8a767bcf0 <col:26, col:34> col:34 invalid e 'int *'
|-FunctionDecl 0x2a8a767bf08 <line:122:1, col:38> col:6 invalid engine_pkey_meths_free 'void (int *)'
| `-ParmVarDecl 0x2a8a767be78 <col:29, col:37> col:37 invalid e 'int *'
|-FunctionDecl 0x2a8a767c058 <line:123:1, col:43> col:6 invalid engine_pkey_asn1_meths_free 'void (int *)'
| `-ParmVarDecl 0x2a8a767bfc8 <col:34, col:42> col:42 invalid e 'int *'
|-VarDecl 0x2a8a767c118 <line:126:1, col:20> col:20 invalid engine_lock_init 'int' extern
|-RecordDecl 0x2a8a767c180 <line:133:1, line:173:1> line:133:8 invalid struct engine_st definition
| |-FieldDecl 0x2a8a767c258 <line:134:5, col:17> col:17 id 'const char *'
| |-FieldDecl 0x2a8a767c2c8 <line:135:5, col:17> col:17 name 'const char *'
| |-FieldDecl 0x2a8a767c338 <line:136:5, col:23> col:23 invalid rsa_meth 'const int *'
| |-FieldDecl 0x2a8a767c3a8 <line:137:5, col:23> col:23 invalid dsa_meth 'const int *'
| |-FieldDecl 0x2a8a767c418 <line:138:5, col:22> col:22 invalid dh_meth 'const int *'
| |-FieldDecl 0x2a8a767c488 <line:139:5, col:26> col:26 invalid ec_meth 'const int *'
| |-FieldDecl 0x2a8a767c4f8 <line:140:5, col:24> col:24 invalid rand_meth 'const int *'
| |-FieldDecl 0x2a8a767c568 <line:142:5, col:24> col:24 invalid ciphers 'int'
| |-FieldDecl 0x2a8a767c5d8 <line:144:5, col:24> col:24 invalid digests 'int'
| |-FieldDecl 0x2a8a767c648 <line:146:5, col:27> col:27 invalid pkey_meths 'int'
| |-FieldDecl 0x2a8a767c6b8 <line:148:5, col:32> col:32 invalid pkey_asn1_meths 'int'
| |-FieldDecl 0x2a8a767c728 <line:149:5, col:29> col:29 invalid destroy 'int'
| |-FieldDecl 0x2a8a767c798 <line:150:5, col:29> col:29 invalid init 'int'
| |-FieldDecl 0x2a8a767c808 <line:151:5, col:29> col:29 invalid finish 'int'
| |-FieldDecl 0x2a8a767c878 <line:152:5, col:26> col:26 invalid ctrl 'int'
| |-FieldDecl 0x2a8a767c8e8 <line:153:5, col:25> col:25 invalid load_privkey 'int'
| |-FieldDecl 0x2a8a767c958 <line:154:5, col:25> col:25 invalid load_pubkey 'int'
| |-FieldDecl 0x2a8a767c9c8 <line:155:5, col:32> col:32 invalid load_ssl_client_cert 'int'
| |-FieldDecl 0x2a8a767ca38 <line:156:5, col:28> col:28 invalid cmd_defns 'const int *'
| |-FieldDecl 0x2a8a767caa8 <line:157:5, col:9> col:9 flags 'int'
| |-FieldDecl 0x2a8a767cb18 <line:159:5, col:9> col:9 struct_ref 'int'
| |-FieldDecl 0x2a8a767cb88 <line:167:5, col:9> col:9 funct_ref 'int'
| |-FieldDecl 0x2a8a767cbf8 <line:169:5, col:20> col:20 invalid ex_data 'int'
| |-FieldDecl 0x2a8a7680d68 <line:171:5, col:23> col:23 prev 'struct engine_st *'
| `-FieldDecl 0x2a8a7680de8 <line:172:5, col:23> col:23 next 'struct engine_st *'
|-RecordDecl 0x2a8a7680e40 <line:175:9, col:16> col:16 struct st_engine_pile
|-EmptyDecl 0x2a8a7681040 <line:177:29> col:29
|-VarDecl 0x2a8a7681080 <.//openssl//file_jk/before\crypto\engine\eng_ctrl.c:16:1, col:41> col:20 used int_no_description 'const char *' static cinit
| `-ImplicitCastExpr 0x2a8a7681170 <col:41> 'const char *' <NoOp>
|   `-ImplicitCastExpr 0x2a8a7681158 <col:41> 'char *' <ArrayToPointerDecay>
|     `-StringLiteral 0x2a8a7681128 <col:41> 'char [1]' lvalue ""
|-FunctionDecl 0x2a8a7681270 <line:24:1, line:29:1> line:24:12 invalid int_ctrl_cmd_is_null 'int (const int *)' static
| |-ParmVarDecl 0x2a8a76811a0 <col:33, col:56> col:56 invalid defn 'const int *'
| `-CompoundStmt 0x2a8a76813f8 <line:25:1, line:29:1>
|   |-IfStmt 0x2a8a76813a8 <line:26:5, line:27:16>
|   | |-OpaqueValueExpr 0x2a8a7681390 <<invalid sloc>> '_Bool'
|   | `-ReturnStmt 0x2a8a7681380 <col:9, col:16>
|   |   `-IntegerLiteral 0x2a8a7681358 <col:16> 'int' 1
|   `-ReturnStmt 0x2a8a76813e8 <line:28:5, col:12>
|     `-IntegerLiteral 0x2a8a76813c0 <col:12> 'int' 0
|-FunctionDecl 0x2a8a7681590 <line:31:1, line:42:1> line:31:12 invalid int_ctrl_cmd_by_name 'int (const int *, const char *)' static
| |-ParmVarDecl 0x2a8a7681430 <col:33, col:56> col:56 invalid defn 'const int *'
| |-ParmVarDecl 0x2a8a76814b0 <col:62, col:74> col:74 used s 'const char *'
| `-CompoundStmt 0x2a8a7681aa0 <line:32:1, line:42:1>
|   |-DeclStmt 0x2a8a7681700 <line:33:5, col:16>
|   | `-VarDecl 0x2a8a7681670 <col:5, col:15> col:9 used idx 'int' cinit
|   |   `-IntegerLiteral 0x2a8a76816d8 <col:15> 'int' 0
|   |-IfStmt 0x2a8a7681a40 <line:38:5, line:40:17>
|   | |-OpaqueValueExpr 0x2a8a7681a28 <<invalid sloc>> '_Bool'
|   | `-ReturnStmt 0x2a8a7681a18 <col:9, col:17>
|   |   `-UnaryOperator 0x2a8a7681a00 <col:16, col:17> 'int' prefix '-'
|   |     `-IntegerLiteral 0x2a8a76819d8 <col:17> 'int' 1
|   `-ReturnStmt 0x2a8a7681a90 <line:41:5, col:12>
|     `-ImplicitCastExpr 0x2a8a7681a78 <col:12> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x2a8a7681a58 <col:12> 'int' lvalue Var 0x2a8a7681670 'idx' 'int'
|-FunctionDecl 0x2a8a7681758 <line:34:44> col:44 implicit used strcmp 'int (const char *, const char *)' extern
| |-ParmVarDecl 0x2a8a76817f8 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x2a8a7681860 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x2a8a7681c40 <line:44:1, line:59:1> line:44:12 invalid int_ctrl_cmd_by_num 'int (const int *, unsigned int)' static
| |-ParmVarDecl 0x2a8a7681ae0 <col:32, col:55> col:55 invalid defn 'const int *'
| |-ParmVarDecl 0x2a8a7681b60 <col:61, col:74> col:74 used num 'unsigned int'
| `-CompoundStmt 0x2a8a7682f90 <line:45:1, line:59:1>
|   |-DeclStmt 0x2a8a7682df0 <line:46:5, col:16>
|   | `-VarDecl 0x2a8a7682d60 <col:5, col:15> col:9 used idx 'int' cinit
|   |   `-IntegerLiteral 0x2a8a7682dc8 <col:15> 'int' 0
|   |-IfStmt 0x2a8a7682f28 <line:55:5, line:56:16>
|   | |-OpaqueValueExpr 0x2a8a7682f10 <<invalid sloc>> '_Bool'
|   | `-ReturnStmt 0x2a8a7682f00 <col:9, col:16>
|   |   `-ImplicitCastExpr 0x2a8a7682ee8 <col:16> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x2a8a7682ec8 <col:16> 'int' lvalue Var 0x2a8a7682d60 'idx' 'int'
|   `-ReturnStmt 0x2a8a7682f80 <line:58:5, col:13>
|     `-UnaryOperator 0x2a8a7682f68 <col:12, col:13> 'int' prefix '-'
|       `-IntegerLiteral 0x2a8a7682f40 <col:13> 'int' 1
|-FunctionDecl 0x2a8a76833e0 <line:61:1, line:131:1> line:61:12 invalid int_ctrl_helper 'int (int *, int, long, void *, void (*)(void))' static
| |-ParmVarDecl 0x2a8a7682fd0 <col:28, col:36> col:36 invalid e 'int *'
| |-ParmVarDecl 0x2a8a7683050 <col:39, col:43> col:43 used cmd 'int'
| |-ParmVarDecl 0x2a8a76830d0 <col:48, col:53> col:53 used i 'long'
| |-ParmVarDecl 0x2a8a7683150 <col:56, col:62> col:62 used p 'void *'
| |-ParmVarDecl 0x2a8a7683288 <line:62:28, col:43> col:35 f 'void (*)(void)'
| `-CompoundStmt 0x2a8a768eaa0 <line:63:1, line:131:1>
|   |-DeclStmt 0x2a8a7683540 <line:64:5, col:12>
|   | `-VarDecl 0x2a8a76834d8 <col:5, col:9> col:9 used idx 'int'
|   |-DeclStmt 0x2a8a7683668 <line:65:5, col:24>
|   | `-VarDecl 0x2a8a7683570 <col:5, col:23> col:11 used s 'char *' cinit
|   |   `-CStyleCastExpr 0x2a8a7683640 <col:15, col:23> 'char *' <BitCast>
|   |     `-ImplicitCastExpr 0x2a8a7683628 <col:23> 'void *' <LValueToRValue> part_of_explicit_cast
|   |       `-DeclRefExpr 0x2a8a76835d8 <col:23> 'void *' lvalue ParmVar 0x2a8a7683150 'p' 'void *'
|   |-IfStmt 0x2a8a7683750 <line:67:5, line:71:5>
|   | |-OpaqueValueExpr 0x2a8a7683738 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x2a8a7683720 <line:67:48, line:71:5>
|   |   `-IfStmt 0x2a8a7683708 <line:68:9, line:69:20>
|   |     |-OpaqueValueExpr 0x2a8a76836f0 <<invalid sloc>> '_Bool'
|   |     `-ReturnStmt 0x2a8a76836e0 <col:13, col:20>
|   |       `-IntegerLiteral 0x2a8a76836b8 <col:20> 'int' 0
|   |-IfStmt 0x2a8a76839d8 <line:73:5, line:80:5>
|   | |-OpaqueValueExpr 0x2a8a76839c0 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x2a8a76839a8 <line:75:49, line:80:5>
|   |   `-IfStmt 0x2a8a7683990 <line:76:9, line:79:9>
|   |     |-OpaqueValueExpr 0x2a8a7683978 <<invalid sloc>> '_Bool'
|   |     `-CompoundStmt 0x2a8a7683960 <line:76:24, line:79:9>
|   |       `-ReturnStmt 0x2a8a7683950 <line:78:13, col:21>
|   |         `-UnaryOperator 0x2a8a7683938 <col:20, col:21> 'int' prefix '-'
|   |           `-IntegerLiteral 0x2a8a7683910 <col:21> 'int' 1
|   |-IfStmt 0x2a8a7683b98 <line:82:5, line:89:5>
|   | |-OpaqueValueExpr 0x2a8a7683b80 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x2a8a7683b68 <line:82:47, line:89:5>
|   |   `-IfStmt 0x2a8a7683b30 <line:83:9, line:87:9>
|   |     |-OpaqueValueExpr 0x2a8a7683b18 <<invalid sloc>> '_Bool'
|   |     `-CompoundStmt 0x2a8a7683b00 <line:84:69, line:87:9>
|   |       `-ReturnStmt 0x2a8a7683af0 <line:86:13, col:21>
|   |         `-UnaryOperator 0x2a8a7683ad8 <col:20, col:21> 'int' prefix '-'
|   |           `-IntegerLiteral 0x2a8a7683ab0 <col:21> 'int' 1
|   |-IfStmt 0x2a8a7683d28 <line:94:5, line:99:5>
|   | |-OpaqueValueExpr 0x2a8a7683d10 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x2a8a7683cf8 <line:96:73, line:99:5>
|   |   `-ReturnStmt 0x2a8a7683ce8 <line:98:9, col:17>
|   |     `-UnaryOperator 0x2a8a7683cd0 <col:16, col:17> 'int' prefix '-'
|   |       `-IntegerLiteral 0x2a8a7683ca8 <col:17> 'int' 1
|   |-SwitchStmt 0x2a8a768e078 <line:101:5, line:127:5>
|   | |-ImplicitCastExpr 0x2a8a768e060 <line:101:13> 'int' <LValueToRValue>
|   | | `-DeclRefExpr 0x2a8a7683d40 <col:13> 'int' lvalue ParmVar 0x2a8a7683050 'cmd' 'int'
|   | `-CompoundStmt 0x2a8a768ea00 <col:18, line:127:5>
|   |   |-UnaryOperator 0x2a8a768e0b8 <line:103:9, col:12> 'int' postfix '++'
|   |   | `-DeclRefExpr 0x2a8a768e098 <col:9> 'int' lvalue Var 0x2a8a76834d8 'idx' 'int'
|   |   |-IfStmt 0x2a8a768e168 <line:104:9, line:108:13> has_else
|   |   | |-OpaqueValueExpr 0x2a8a768e150 <<invalid sloc>> '_Bool'
|   |   | |-ReturnStmt 0x2a8a768e118 <line:106:13, col:20>
|   |   | | `-IntegerLiteral 0x2a8a768e0f0 <col:20> 'int' 0
|   |   | `-NullStmt 0x2a8a768e148 <line:108:13>
|   |   |-ReturnStmt 0x2a8a768e688 <line:117:9, col:41>
|   |   | `-ImplicitCastExpr 0x2a8a768e670 <col:16, col:41> 'int' <IntegralCast>
|   |   |   `-CallExpr 0x2a8a768e630 <col:16, col:41> 'unsigned long long'
|   |   |     |-ImplicitCastExpr 0x2a8a768e618 <col:16> 'unsigned long long (*)(const char *)' <FunctionToPointerDecay>
|   |   |     | `-DeclRefExpr 0x2a8a768e598 <col:16> 'unsigned long long (const char *)' Function 0x2a8a768e1c0 'strlen' 'unsigned long long (const char *)'
|   |   |     `-ImplicitCastExpr 0x2a8a768e658 <col:23> 'const char *' <LValueToRValue>
|   |   |       `-DeclRefExpr 0x2a8a768e5b8 <col:23> 'const char *' lvalue Var 0x2a8a7681080 'int_no_description' 'const char *'
|   |   `-ReturnStmt 0x2a8a768e9d0 <line:123:9, line:124:47>
|   |     `-CallExpr 0x2a8a768e948 <line:123:16, line:124:47> 'int'
|   |       |-ImplicitCastExpr 0x2a8a768e930 <line:123:16> 'int (*)()' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x2a8a768e7a0 <col:16> 'int ()' Function 0x2a8a768e350 'BIO_snprintf' 'int ()'
|   |       |-ImplicitCastExpr 0x2a8a768e988 <col:29> 'char *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x2a8a768e7c0 <col:29> 'char *' lvalue Var 0x2a8a7683570 's' 'char *'
|   |       |-BinaryOperator 0x2a8a768e8d0 <col:32, col:61> 'unsigned long long' '+'
|   |       | |-CallExpr 0x2a8a768e850 <col:32, col:57> 'unsigned long long'
|   |       | | |-ImplicitCastExpr 0x2a8a768e838 <col:32> 'unsigned long long (*)(const char *)' <FunctionToPointerDecay>
|   |       | | | `-DeclRefExpr 0x2a8a768e7e0 <col:32> 'unsigned long long (const char *)' Function 0x2a8a768e1c0 'strlen' 'unsigned long long (const char *)'
|   |       | | `-ImplicitCastExpr 0x2a8a768e878 <col:39> 'const char *' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x2a8a768e800 <col:39> 'const char *' lvalue Var 0x2a8a7681080 'int_no_description' 'const char *'
|   |       | `-ImplicitCastExpr 0x2a8a768e8b8 <col:61> 'unsigned long long' <IntegralCast>
|   |       |   `-IntegerLiteral 0x2a8a768e890 <col:61> 'int' 1
|   |       |-ImplicitCastExpr 0x2a8a768e9a0 <col:64> 'char *' <ArrayToPointerDecay>
|   |       | `-StringLiteral 0x2a8a768e8f0 <col:64> 'char [3]' lvalue "%s"
|   |       `-ImplicitCastExpr 0x2a8a768e9b8 <line:124:29> 'const char *' <LValueToRValue>
|   |         `-DeclRefExpr 0x2a8a768e910 <col:29> 'const char *' lvalue Var 0x2a8a7681080 'int_no_description' 'const char *'
|   `-ReturnStmt 0x2a8a768ea90 <line:130:5, col:13>
|     `-UnaryOperator 0x2a8a768ea78 <col:12, col:13> 'int' prefix '-'
|       `-IntegerLiteral 0x2a8a768ea50 <col:13> 'int' 1
|-FunctionDecl 0x2a8a768e1c0 <line:110:16> col:16 implicit used strlen 'unsigned long long (const char *)' extern
| `-ParmVarDecl 0x2a8a768e260 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x2a8a768ee50 <line:133:1, line:183:1> line:133:5 invalid ENGINE_ctrl 'int (int *, int, long, void *, void (*)(void))'
| |-ParmVarDecl 0x2a8a768eb08 <col:17, col:25> col:25 invalid e 'int *'
| |-ParmVarDecl 0x2a8a768eb88 <col:28, col:32> col:32 used cmd 'int'
| |-ParmVarDecl 0x2a8a768ec08 <col:37, col:42> col:42 used i 'long'
| |-ParmVarDecl 0x2a8a768ec88 <col:45, col:51> col:51 used p 'void *'
| |-ParmVarDecl 0x2a8a768ed98 <col:54, col:69> col:61 used f 'void (*)(void)'
| `-CompoundStmt 0x2a8a768c948 <line:134:1, line:183:1>
|   |-DeclStmt 0x2a8a768f048 <line:135:5, col:32>
|   | |-VarDecl 0x2a8a768ef48 <col:5, col:9> col:9 used ctrl_exists 'int'
|   | `-VarDecl 0x2a8a768efc8 <col:5, col:22> col:22 used ref_exists 'int'
|   |-IfStmt 0x2a8a768c0c8 <line:136:5, line:139:5>
|   | |-OpaqueValueExpr 0x2a8a768c0b0 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x2a8a768c098 <line:136:20, line:139:5>
|   |   `-ReturnStmt 0x2a8a768c088 <line:138:9, col:16>
|   |     `-IntegerLiteral 0x2a8a768c060 <col:16> 'int' 0
|   |-IfStmt 0x2a8a768c4f8 <line:144:5, line:147:5>
|   | |-UnaryOperator 0x2a8a768c470 <line:144:9, col:10> 'int' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x2a8a768c458 <col:10> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x2a8a768c438 <col:10> 'int' lvalue Var 0x2a8a768efc8 'ref_exists' 'int'
|   | `-CompoundStmt 0x2a8a768c4e0 <col:22, line:147:5>
|   |   `-ReturnStmt 0x2a8a768c4d0 <line:146:9, col:16>
|   |     `-IntegerLiteral 0x2a8a768c4a8 <col:16> 'int' 0
|   |-SwitchStmt 0x2a8a768c560 <line:152:5, line:176:5>
|   | |-ImplicitCastExpr 0x2a8a768c548 <line:152:13> 'int' <LValueToRValue>
|   | | `-DeclRefExpr 0x2a8a768c510 <col:13> 'int' lvalue ParmVar 0x2a8a768eb88 'cmd' 'int'
|   | `-CompoundStmt 0x2a8a768c7c8 <col:18, line:176:5>
|   |   |-ReturnStmt 0x2a8a768c5b8 <line:154:9, col:16>
|   |   | `-ImplicitCastExpr 0x2a8a768c5a0 <col:16> 'int' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x2a8a768c580 <col:16> 'int' lvalue Var 0x2a8a768ef48 'ctrl_exists' 'int'
|   |   |-IfStmt 0x2a8a768c788 <line:165:9, line:173:9>
|   |   | |-UnaryOperator 0x2a8a768c6e8 <line:165:13, col:14> 'int' prefix '!' cannot overflow
|   |   | | `-ImplicitCastExpr 0x2a8a768c6d0 <col:14> 'int' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x2a8a768c6b0 <col:14> 'int' lvalue Var 0x2a8a768ef48 'ctrl_exists' 'int'
|   |   | `-CompoundStmt 0x2a8a768c770 <col:27, line:173:9>
|   |   |   `-ReturnStmt 0x2a8a768c760 <line:172:13, col:21>
|   |   |     `-UnaryOperator 0x2a8a768c748 <col:20, col:21> 'int' prefix '-'
|   |   |       `-IntegerLiteral 0x2a8a768c720 <col:21> 'int' 1
|   |   `-DefaultStmt 0x2a8a768c7a8 <line:174:5, line:175:9>
|   |     `-BreakStmt 0x2a8a768c7a0 <col:9>
|   `-IfStmt 0x2a8a768c8b0 <line:178:5, line:181:5>
|     |-UnaryOperator 0x2a8a768c828 <line:178:9, col:10> 'int' prefix '!' cannot overflow
|     | `-ImplicitCastExpr 0x2a8a768c810 <col:10> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x2a8a768c7f0 <col:10> 'int' lvalue Var 0x2a8a768ef48 'ctrl_exists' 'int'
|     `-CompoundStmt 0x2a8a768c898 <col:23, line:181:5>
|       `-ReturnStmt 0x2a8a768c888 <line:180:9, col:16>
|         `-IntegerLiteral 0x2a8a768c860 <col:16> 'int' 0
|-FunctionDecl 0x2a8a768cab8 <line:185:1, line:199:1> line:185:5 invalid ENGINE_cmd_is_executable 'int (int *, int)'
| |-ParmVarDecl 0x2a8a768c998 <col:30, col:38> col:38 invalid e 'int *'
| |-ParmVarDecl 0x2a8a768ca18 <col:41, col:45> col:45 used cmd 'int'
| `-CompoundStmt 0x2a8a768ce50 <line:186:1, line:199:1>
|   |-DeclStmt 0x2a8a768cc00 <line:187:5, col:14>
|   | `-VarDecl 0x2a8a768cb98 <col:5, col:9> col:9 used flags 'int'
|   |-IfStmt 0x2a8a768cd38 <line:188:5, line:193:5>
|   | |-OpaqueValueExpr 0x2a8a768cd20 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x2a8a768cd08 <line:189:75, line:193:5>
|   |   `-ReturnStmt 0x2a8a768ccf8 <line:192:9, col:16>
|   |     `-IntegerLiteral 0x2a8a768ccd0 <col:16> 'int' 0
|   |-IfStmt 0x2a8a768ce00 <line:194:5, line:197:16>
|   | |-OpaqueValueExpr 0x2a8a768cde8 <<invalid sloc>> '_Bool'
|   | `-ReturnStmt 0x2a8a768cdd8 <col:9, col:16>
|   |   `-IntegerLiteral 0x2a8a768cdb0 <col:16> 'int' 0
|   `-ReturnStmt 0x2a8a768ce40 <line:198:5, col:12>
|     `-IntegerLiteral 0x2a8a768ce18 <col:12> 'int' 1
|-FunctionDecl 0x2a8a768f380 <line:201:1, line:235:1> line:201:5 invalid ENGINE_ctrl_cmd 'int (int *, const char *, long, void *, void (*)(void), int)'
| |-ParmVarDecl 0x2a8a768ce98 <col:21, col:29> col:29 invalid e 'int *'
| |-ParmVarDecl 0x2a8a768cf18 <col:32, col:44> col:44 used cmd_name 'const char *'
| |-ParmVarDecl 0x2a8a768cf98 <line:202:21, col:26> col:26 used i 'long'
| |-ParmVarDecl 0x2a8a768f070 <col:29, col:35> col:35 used p 'void *'
| |-ParmVarDecl 0x2a8a768f180 <col:38, col:53> col:45 used f 'void (*)(void)'
| |-ParmVarDecl 0x2a8a768f200 <col:56, col:60> col:60 used cmd_optional 'int'
| `-CompoundStmt 0x2a8a768fb18 <line:203:1, line:235:1>
|   |-DeclStmt 0x2a8a768f4e8 <line:204:5, col:12>
|   | `-VarDecl 0x2a8a768f480 <col:5, col:9> col:9 used num 'int'
|   |-IfStmt 0x2a8a768f5c0 <line:206:5, line:209:5>
|   | |-OpaqueValueExpr 0x2a8a768f5a8 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x2a8a768f590 <line:206:40, line:209:5>
|   |   `-ReturnStmt 0x2a8a768f580 <line:208:9, col:16>
|   |     `-IntegerLiteral 0x2a8a768f558 <col:16> 'int' 0
|   |-IfStmt 0x2a8a768f970 <line:210:5, line:227:5>
|   | |-OpaqueValueExpr 0x2a8a768f958 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x2a8a768f938 <line:212:65, line:227:5>
|   |   |-IfStmt 0x2a8a768f8c8 <line:221:9, line:224:9>
|   |   | |-ImplicitCastExpr 0x2a8a768f710 <line:221:13> 'int' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x2a8a768f6d8 <col:13> 'int' lvalue ParmVar 0x2a8a768f200 'cmd_optional' 'int'
|   |   | `-CompoundStmt 0x2a8a768f8a8 <col:27, line:224:9>
|   |   |   |-CallExpr 0x2a8a768f850 <line:222:13, col:29> 'int'
|   |   |   | `-ImplicitCastExpr 0x2a8a768f838 <col:13> 'int (*)()' <FunctionToPointerDecay>
|   |   |   |   `-DeclRefExpr 0x2a8a768f818 <col:13> 'int ()' Function 0x2a8a768f750 'ERR_clear_error' 'int ()'
|   |   |   `-ReturnStmt 0x2a8a768f898 <line:223:13, col:20>
|   |   |     `-IntegerLiteral 0x2a8a768f870 <col:20> 'int' 1
|   |   `-ReturnStmt 0x2a8a768f928 <line:226:9, col:16>
|   |     `-IntegerLiteral 0x2a8a768f900 <col:16> 'int' 0
|   |-IfStmt 0x2a8a768fac8 <line:232:5, line:233:16>
|   | |-OpaqueValueExpr 0x2a8a768fab0 <<invalid sloc>> '_Bool'
|   | `-ReturnStmt 0x2a8a768faa0 <col:9, col:16>
|   |   `-IntegerLiteral 0x2a8a768fa78 <col:16> 'int' 1
|   `-ReturnStmt 0x2a8a768fb08 <line:234:5, col:12>
|     `-IntegerLiteral 0x2a8a768fae0 <col:12> 'int' 0
|-FunctionDecl 0x2a8a768fde0 <line:237:1, line:338:1> line:237:5 invalid ENGINE_ctrl_cmd_string 'int (int *, const char *, const char *, int)'
| |-ParmVarDecl 0x2a8a768fb68 <col:28, col:36> col:36 invalid e 'int *'
| |-ParmVarDecl 0x2a8a768fbe8 <col:39, col:51> col:51 used cmd_name 'const char *'
| |-ParmVarDecl 0x2a8a768fc68 <col:61, col:73> col:73 used arg 'const char *'
| |-ParmVarDecl 0x2a8a768fce8 <line:238:28, col:32> col:32 used cmd_optional 'int'
| `-CompoundStmt 0x2a8a768b4a0 <line:239:1, line:338:1>
|   |-DeclStmt 0x2a8a768ffd0 <line:240:5, col:19>
|   | |-VarDecl 0x2a8a768fed0 <col:5, col:9> col:9 used num 'int'
|   | `-VarDecl 0x2a8a768ff50 <col:5, col:14> col:14 used flags 'int'
|   |-DeclStmt 0x2a8a7690080 <line:241:5, col:11>
|   | `-VarDecl 0x2a8a7690000 <col:5, col:10> col:10 used l 'long'
|   |-DeclStmt 0x2a8a7690118 <line:242:5, col:14>
|   | `-VarDecl 0x2a8a76900b0 <col:5, col:11> col:11 used ptr 'char *'
|   |-IfStmt 0x2a8a76901f0 <line:244:5, line:247:5>
|   | |-OpaqueValueExpr 0x2a8a76901d8 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x2a8a76901c0 <line:244:40, line:247:5>
|   |   `-ReturnStmt 0x2a8a76901b0 <line:246:9, col:16>
|   |     `-IntegerLiteral 0x2a8a7690188 <col:16> 'int' 0
|   |-IfStmt 0x2a8a76904b0 <line:248:5, line:265:5>
|   | |-OpaqueValueExpr 0x2a8a7690498 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x2a8a7690478 <line:250:65, line:265:5>
|   |   |-IfStmt 0x2a8a7690408 <line:259:9, line:262:9>
|   |   | |-ImplicitCastExpr 0x2a8a7690340 <line:259:13> 'int' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x2a8a7690308 <col:13> 'int' lvalue ParmVar 0x2a8a768fce8 'cmd_optional' 'int'
|   |   | `-CompoundStmt 0x2a8a76903e8 <col:27, line:262:9>
|   |   |   |-CallExpr 0x2a8a7690390 <line:260:13, col:29> 'int'
|   |   |   | `-ImplicitCastExpr 0x2a8a7690378 <col:13> 'int (*)()' <FunctionToPointerDecay>
|   |   |   |   `-DeclRefExpr 0x2a8a7690358 <col:13> 'int ()' Function 0x2a8a768f750 'ERR_clear_error' 'int ()'
|   |   |   `-ReturnStmt 0x2a8a76903d8 <line:261:13, col:20>
|   |   |     `-IntegerLiteral 0x2a8a76903b0 <col:20> 'int' 1
|   |   `-ReturnStmt 0x2a8a7690468 <line:264:9, col:16>
|   |     `-IntegerLiteral 0x2a8a7690440 <col:16> 'int' 0
|   |-IfStmt 0x2a8a7690570 <line:266:5, line:270:5>
|   | |-OpaqueValueExpr 0x2a8a7690558 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x2a8a7690540 <line:266:44, line:270:5>
|   |   `-ReturnStmt 0x2a8a7690530 <line:269:9, col:16>
|   |     `-IntegerLiteral 0x2a8a7690508 <col:16> 'int' 0
|   |-IfStmt 0x2a8a76906d0 <line:273:5, line:281:5>
|   | |-BinaryOperator 0x2a8a7690640 <line:273:9, col:17> 'int' '<'
|   | | |-ImplicitCastExpr 0x2a8a7690628 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x2a8a76905e0 <col:9> 'int' lvalue Var 0x2a8a768ff50 'flags' 'int'
|   | | `-IntegerLiteral 0x2a8a7690600 <col:17> 'int' 0
|   | `-CompoundStmt 0x2a8a76906b8 <col:20, line:281:5>
|   |   `-ReturnStmt 0x2a8a76906a8 <line:280:9, col:16>
|   |     `-IntegerLiteral 0x2a8a7690680 <col:16> 'int' 0
|   |-IfStmt 0x2a8a76909a8 <line:285:5, line:300:5>
|   | |-OpaqueValueExpr 0x2a8a7690990 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x2a8a7690968 <line:285:43, line:300:5>
|   |   |-IfStmt 0x2a8a76907c8 <line:286:9, line:290:9>
|   |   | |-OpaqueValueExpr 0x2a8a76907b0 <<invalid sloc>> '_Bool'
|   |   | `-CompoundStmt 0x2a8a7690798 <line:286:26, line:290:9>
|   |   |   `-ReturnStmt 0x2a8a7690788 <line:289:13, col:20>
|   |   |     `-IntegerLiteral 0x2a8a7690760 <col:20> 'int' 0
|   |   |-IfStmt 0x2a8a7690918 <line:297:9, line:298:20>
|   |   | |-OpaqueValueExpr 0x2a8a7690900 <<invalid sloc>> '_Bool'
|   |   | `-ReturnStmt 0x2a8a76908f0 <col:13, col:20>
|   |   |   `-IntegerLiteral 0x2a8a76908c8 <col:20> 'int' 1
|   |   `-ReturnStmt 0x2a8a7690958 <line:299:9, col:16>
|   |     `-IntegerLiteral 0x2a8a7690930 <col:16> 'int' 0
|   |-IfStmt 0x2a8a7690a68 <line:302:5, line:306:5>
|   | |-OpaqueValueExpr 0x2a8a7690a50 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x2a8a7690a38 <line:302:22, line:306:5>
|   |   `-ReturnStmt 0x2a8a7690a28 <line:305:9, col:16>
|   |     `-IntegerLiteral 0x2a8a7690a00 <col:16> 'int' 0
|   |-IfStmt 0x2a8a7690c60 <line:308:5, line:313:5>
|   | |-OpaqueValueExpr 0x2a8a7690c48 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x2a8a7690c28 <line:308:41, line:313:5>
|   |   |-IfStmt 0x2a8a7690bd8 <line:310:9, line:311:20>
|   |   | |-OpaqueValueExpr 0x2a8a7690bc0 <<invalid sloc>> '_Bool'
|   |   | `-ReturnStmt 0x2a8a7690bb0 <col:13, col:20>
|   |   |   `-IntegerLiteral 0x2a8a7690b88 <col:20> 'int' 1
|   |   `-ReturnStmt 0x2a8a7690c18 <line:312:9, col:16>
|   |     `-IntegerLiteral 0x2a8a7690bf0 <col:16> 'int' 0
|   |-IfStmt 0x2a8a7690d20 <line:320:5, line:324:5>
|   | |-OpaqueValueExpr 0x2a8a7690d08 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x2a8a7690cf0 <line:320:45, line:324:5>
|   |   `-ReturnStmt 0x2a8a7690ce0 <line:323:9, col:16>
|   |     `-IntegerLiteral 0x2a8a7690cb8 <col:16> 'int' 0
|   |-BinaryOperator 0x2a8a768b100 <line:325:5, col:29> 'long' '='
|   | |-DeclRefExpr 0x2a8a7690d38 <col:5> 'long' lvalue Var 0x2a8a7690000 'l' 'long'
|   | `-CallExpr 0x2a8a768b0b0 <col:9, col:29> 'long'
|   |   |-ImplicitCastExpr 0x2a8a768b098 <col:9> 'long (*)(const char *, char **, int)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x2a8a7690fd0 <col:9> 'long (const char *, char **, int)' Function 0x2a8a7690de0 'strtol' 'long (const char *, char **, int)'
|   |   |-ImplicitCastExpr 0x2a8a768b0e8 <col:16> 'const char *' <LValueToRValue>
|   |   | `-DeclRefExpr 0x2a8a7691008 <col:16> 'const char *' lvalue ParmVar 0x2a8a768fc68 'arg' 'const char *'
|   |   |-UnaryOperator 0x2a8a7691060 <col:21, col:22> 'char **' prefix '&' cannot overflow
|   |   | `-DeclRefExpr 0x2a8a7691028 <col:22> 'char *' lvalue Var 0x2a8a76900b0 'ptr' 'char *'
|   |   `-IntegerLiteral 0x2a8a768b030 <col:27> 'int' 10
|   |-IfStmt 0x2a8a768b380 <line:326:5, line:330:5>
|   | |-BinaryOperator 0x2a8a768b2f0 <line:326:9, col:38> 'int' '||'
|   | | |-ParenExpr 0x2a8a768b1c8 <col:9, col:20> 'int'
|   | | | `-BinaryOperator 0x2a8a768b1a8 <col:10, col:17> 'int' '=='
|   | | |   |-ImplicitCastExpr 0x2a8a768b160 <col:10> 'const char *' <LValueToRValue>
|   | | |   | `-DeclRefExpr 0x2a8a768b120 <col:10> 'const char *' lvalue ParmVar 0x2a8a768fc68 'arg' 'const char *'
|   | | |   `-ImplicitCastExpr 0x2a8a768b190 <col:17> 'const char *' <BitCast>
|   | | |     `-ImplicitCastExpr 0x2a8a768b178 <col:17> 'char *' <LValueToRValue>
|   | | |       `-DeclRefExpr 0x2a8a768b140 <col:17> 'char *' lvalue Var 0x2a8a76900b0 'ptr' 'char *'
|   | | `-ParenExpr 0x2a8a768b2d0 <col:25, col:38> 'int'
|   | |   `-BinaryOperator 0x2a8a768b2b0 <col:26, col:34> 'int' '!='
|   | |     |-ImplicitCastExpr 0x2a8a768b298 <col:26, col:27> 'int' <IntegralCast>
|   | |     | `-ImplicitCastExpr 0x2a8a768b280 <col:26, col:27> 'char' <LValueToRValue>
|   | |     |   `-UnaryOperator 0x2a8a768b250 <col:26, col:27> 'char' lvalue prefix '*' cannot overflow
|   | |     |     `-ImplicitCastExpr 0x2a8a768b238 <col:27> 'char *' <LValueToRValue>
|   | |     |       `-DeclRefExpr 0x2a8a768b218 <col:27> 'char *' lvalue Var 0x2a8a76900b0 'ptr' 'char *'
|   | |     `-CharacterLiteral 0x2a8a768b268 <col:34> 'int' 0
|   | `-CompoundStmt 0x2a8a768b368 <col:41, line:330:5>
|   |   `-ReturnStmt 0x2a8a768b358 <line:329:9, col:16>
|   |     `-IntegerLiteral 0x2a8a768b330 <col:16> 'int' 0
|   |-IfStmt 0x2a8a768b450 <line:335:5, line:336:16>
|   | |-OpaqueValueExpr 0x2a8a768b438 <<invalid sloc>> '_Bool'
|   | `-ReturnStmt 0x2a8a768b428 <col:9, col:16>
|   |   `-IntegerLiteral 0x2a8a768b400 <col:16> 'int' 1
|   `-ReturnStmt 0x2a8a768b490 <line:337:5, col:12>
|     `-IntegerLiteral 0x2a8a768b468 <col:12> 'int' 0
`-FunctionDecl 0x2a8a7690de0 <line:325:9> col:9 implicit used strtol 'long (const char *, char **, int)' extern
  |-ParmVarDecl 0x2a8a7690e80 <<invalid sloc>> <invalid sloc> 'const char *'
  |-ParmVarDecl 0x2a8a7690ee8 <<invalid sloc>> <invalid sloc> 'char **'
  `-ParmVarDecl 0x2a8a7690f50 <<invalid sloc>> <invalid sloc> 'int'
