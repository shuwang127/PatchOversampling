TranslationUnitDecl 0x16dc64d75d8 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x16dc64d7e70 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x16dc64d7b70 '__int128'
|-TypedefDecl 0x16dc64d7ee0 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x16dc64d7b90 'unsigned __int128'
|-TypedefDecl 0x16dc64d8218 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x16dc64d7fd0 'struct __NSConstantString_tag'
|   `-Record 0x16dc64d7f38 '__NSConstantString_tag'
|-TypedefDecl 0x16dc64d8288 <<invalid sloc>> <invalid sloc> implicit size_t 'unsigned long long'
| `-BuiltinType 0x16dc64d77b0 'unsigned long long'
|-TypedefDecl 0x16dc64d8320 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x16dc64d82e0 'char *'
|   `-BuiltinType 0x16dc64d7670 'char'
|-TypedefDecl 0x16dc64d8390 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x16dc64d82e0 'char *'
|   `-BuiltinType 0x16dc64d7670 'char'
|-RecordDecl 0x16dc64d83e8 <.//openssl//file_jk/before\crypto\ex_data.c:18:1, line:24:1> line:18:8 invalid struct ex_callback_st definition
| |-FieldDecl 0x16dc64d84b8 <line:19:5, col:10> col:10 argl 'long'
| |-FieldDecl 0x16dc64d8528 <line:20:5, col:11> col:11 argp 'void *'
| |-FieldDecl 0x16dc7ecfbe0 <line:21:5, col:20> col:20 invalid new_func 'int *'
| |-FieldDecl 0x16dc7ecfc50 <line:22:5, col:21> col:21 invalid free_func 'int *'
| `-FieldDecl 0x16dc7ecfcc0 <line:23:5, col:20> col:20 invalid dup_func 'int *'
|-RecordDecl 0x16dc7ecfd18 <line:30:9, line:32:1> line:30:16 invalid struct ex_callbacks_st definition
| `-FieldDecl 0x16dc7ecfe20 <line:31:5, <invalid sloc>> col:5 invalid STACK_OF 'int ()'
|-TypedefDecl 0x16dc7ecfed8 <line:30:1, line:32:3> col:3 referenced EX_CALLBACKS 'struct ex_callbacks_st':'struct ex_callbacks_st'
| `-ElaboratedType 0x16dc7ecfe80 'struct ex_callbacks_st' sugar
|   `-RecordType 0x16dc7ecfdb0 'struct ex_callbacks_st'
|     `-Record 0x16dc7ecfd18 'ex_callbacks_st'
|-VarDecl 0x16dc7ecff80 <line:34:1, col:21> col:21 invalid ex_data 'EX_CALLBACKS':'struct ex_callbacks_st' static
|-VarDecl 0x16dc7ed0000 <line:36:1, col:23> col:23 invalid ex_data_lock 'int *' static
|-VarDecl 0x16dc7ed0080 <line:37:1, col:20> col:20 invalid ex_data_init 'int' static
|-FunctionDecl 0x16dc7ed01e0 <line:39:1, line:45:1> line:39:1 DEFINE_RUN_ONCE_STATIC 'int (int)'
| |-ParmVarDecl 0x16dc7ed0100 <col:24> col:24 do_ex_data_init 'int'
| `-CompoundStmt 0x16dc7ed0600 <line:40:1, line:45:1>
|   `-IfStmt 0x16dc7ed0470 <line:41:5, line:42:16>
|     |-OpaqueValueExpr 0x16dc7ed0458 <<invalid sloc>> '_Bool'
|     `-ReturnStmt 0x16dc7ed0448 <col:9, col:16>
|       `-IntegerLiteral 0x16dc7ed0420 <col:16> 'int' 0
|-FunctionDecl 0x16dc7ed0798 <line:51:1, line:81:1> line:51:22 used get_and_lock 'EX_CALLBACKS *(int)' static
| |-ParmVarDecl 0x16dc7ed0630 <col:35, col:39> col:39 used class_index 'int'
| `-CompoundStmt 0x16dc7ed0e60 <line:52:1, line:81:1>
|   |-DeclStmt 0x16dc7ed08d0 <line:53:5, col:21>
|   | `-VarDecl 0x16dc7ed0868 <col:5, col:19> col:19 used ip 'EX_CALLBACKS *'
|   |-IfStmt 0x16dc7ed0ac0 <line:55:5, line:58:5>
|   | |-OpaqueValueExpr 0x16dc7ed0aa8 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x16dc7ed0a98 <line:55:67, line:58:5>
|   |-IfStmt 0x16dc7ed0c58 <line:60:5, line:63:5>
|   | |-OpaqueValueExpr 0x16dc7ed0c40 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x16dc7ed0c30 <line:60:52, line:63:5>
|   |-IfStmt 0x16dc7ed0c98 <line:65:5, line:76:5>
|   | |-OpaqueValueExpr 0x16dc7ed0c80 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x16dc7ed0c70 <line:65:31, line:76:5>
|   `-ReturnStmt 0x16dc7ed0e50 <line:80:5, col:12>
|     `-ImplicitCastExpr 0x16dc7ed0e38 <col:12> 'EX_CALLBACKS *' <LValueToRValue>
|       `-DeclRefExpr 0x16dc7ed0e18 <col:12> 'EX_CALLBACKS *' lvalue Var 0x16dc7ed0868 'ip' 'EX_CALLBACKS *'
|-FunctionDecl 0x16dc7ed0f78 <line:83:1, line:86:1> line:83:13 invalid cleanup_cb 'void (int *)' static
| |-ParmVarDecl 0x16dc7ed0eb0 <col:24, col:37> col:37 invalid funcs 'int *'
| `-CompoundStmt 0x16dc7ed1148 <line:84:1, line:86:1>
|-FunctionDecl 0x16dc7ed1218 <line:94:1, line:107:1> line:94:6 crypto_cleanup_all_ex_data_int 'void (void)'
| `-CompoundStmt 0x16dc7ed17b0 <line:95:1, line:107:1>
|   `-DeclStmt 0x16dc7ed1350 <line:96:5, col:10>
|     `-VarDecl 0x16dc7ed12e8 <col:5, col:9> col:9 used i 'int'
|-FunctionDecl 0x16dc7ed4c30 <line:114:1, line:117:1> line:114:13 invalid dummy_new 'void (void *, void *, int *, int, long, void *)' static
| |-ParmVarDecl 0x16dc7ed17e0 <col:23, col:29> col:29 parent 'void *'
| |-ParmVarDecl 0x16dc7ed1860 <col:37, col:43> col:43 ptr 'void *'
| |-ParmVarDecl 0x16dc7ed18e0 <col:48, col:64> col:64 invalid ad 'int *'
| |-ParmVarDecl 0x16dc7ed1960 <col:68, col:72> col:72 idx 'int'
| |-ParmVarDecl 0x16dc7ed19e0 <line:115:22, col:27> col:27 argl 'long'
| |-ParmVarDecl 0x16dc7ed1a60 <col:33, col:39> col:39 argp 'void *'
| `-CompoundStmt 0x16dc7ed4d18 <line:116:1, line:117:1>
|-FunctionDecl 0x16dc7ed50f0 <line:119:1, line:122:1> line:119:13 invalid dummy_free 'void (void *, void *, int *, int, long, void *)' static
| |-ParmVarDecl 0x16dc7ed4db8 <col:24, col:30> col:30 parent 'void *'
| |-ParmVarDecl 0x16dc7ed4e38 <col:38, col:44> col:44 ptr 'void *'
| |-ParmVarDecl 0x16dc7ed4eb8 <col:49, col:65> col:65 invalid ad 'int *'
| |-ParmVarDecl 0x16dc7ed4f38 <col:69, col:73> col:73 idx 'int'
| |-ParmVarDecl 0x16dc7ed4fb8 <line:120:24, col:29> col:29 argl 'long'
| |-ParmVarDecl 0x16dc7ed5038 <col:35, col:41> col:41 argp 'void *'
| `-CompoundStmt 0x16dc7ed51d8 <line:121:1, line:122:1>
|-FunctionDecl 0x16dc7ed5610 <line:124:1, line:129:1> line:124:12 invalid dummy_dup 'int (int *, const int *, void *, int, long, void *)' static
| |-ParmVarDecl 0x16dc7ed5278 <col:22, col:38> col:38 invalid to 'int *'
| |-ParmVarDecl 0x16dc7ed52f8 <col:42, col:64> col:64 invalid from 'const int *'
| |-ParmVarDecl 0x16dc7ed5378 <line:125:22, col:28> col:28 from_d 'void *'
| |-ParmVarDecl 0x16dc7ed53f8 <col:36, col:40> col:40 idx 'int'
| |-ParmVarDecl 0x16dc7ed5478 <line:126:22, col:27> col:27 argl 'long'
| |-ParmVarDecl 0x16dc7ed54f8 <col:33, col:39> col:39 argp 'void *'
| `-CompoundStmt 0x16dc7ed5730 <line:127:1, line:129:1>
|   `-ReturnStmt 0x16dc7ed5720 <line:128:5, col:12>
|     `-IntegerLiteral 0x16dc7ed56f8 <col:12> 'int' 1
|-FunctionDecl 0x16dc7ed5950 <line:131:1, line:151:1> line:131:5 CRYPTO_free_ex_index 'int (int, int)'
| |-ParmVarDecl 0x16dc7ed57c0 <col:26, col:30> col:30 used class_index 'int'
| |-ParmVarDecl 0x16dc7ed5840 <col:43, col:47> col:47 used idx 'int'
| `-CompoundStmt 0x16dc7ed6348 <line:132:1, line:151:1>
|   |-DeclStmt 0x16dc7ed5b80 <line:133:5, col:49>
|   | `-VarDecl 0x16dc7ed5a28 <col:5, col:48> col:19 used ip 'EX_CALLBACKS *' cinit
|   |   `-CallExpr 0x16dc7ed5b40 <col:24, col:48> 'EX_CALLBACKS *'
|   |     |-ImplicitCastExpr 0x16dc7ed5b28 <col:24> 'EX_CALLBACKS *(*)(int)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x16dc7ed5a90 <col:24> 'EX_CALLBACKS *(int)' Function 0x16dc7ed0798 'get_and_lock' 'EX_CALLBACKS *(int)'
|   |     `-ImplicitCastExpr 0x16dc7ed5b68 <col:37> 'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x16dc7ed5ab0 <col:37> 'int' lvalue ParmVar 0x16dc7ed57c0 'class_index' 'int'
|   |-DeclStmt 0x16dc7ed5c68 <line:135:5, col:18>
|   | `-VarDecl 0x16dc7ed5bb0 <col:5, col:17> col:9 used toret 'int' cinit
|   |   `-IntegerLiteral 0x16dc7ed5c40 <col:17> 'int' 0
|   |-IfStmt 0x16dc7ed5d08 <line:137:5, line:138:16>
|   | |-OpaqueValueExpr 0x16dc7ed5cf0 <<invalid sloc>> '_Bool'
|   | `-ReturnStmt 0x16dc7ed5ce0 <col:9, col:16>
|   |   `-IntegerLiteral 0x16dc7ed5cb8 <col:16> 'int' 0
|   |-IfStmt 0x16dc7ed5f88 <line:139:5, line:140:14>
|   | |-OpaqueValueExpr 0x16dc7ed5f70 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x16dc7ed5f58 <col:9, col:14> 'err' 0x16dc7ed5f08
|   |-IfStmt 0x16dc7ed6138 <line:142:5, line:143:14>
|   | |-OpaqueValueExpr 0x16dc7ed6120 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x16dc7ed6108 <col:9, col:14> 'err' 0x16dc7ed5f08
|   |-BinaryOperator 0x16dc7ed61b0 <line:147:5, col:13> 'int' '='
|   | |-DeclRefExpr 0x16dc7ed6150 <col:5> 'int' lvalue Var 0x16dc7ed5bb0 'toret' 'int'
|   | `-IntegerLiteral 0x16dc7ed6188 <col:13> 'int' 1
|   |-LabelStmt 0x16dc7ed62e8 <line:148:1, col:4> 'err'
|   | `-NullStmt 0x16dc7ed62e0 <col:4>
|   `-ReturnStmt 0x16dc7ed6338 <line:150:5, col:12>
|     `-ImplicitCastExpr 0x16dc7ed6320 <col:12> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x16dc7ed6300 <col:12> 'int' lvalue Var 0x16dc7ed5bb0 'toret' 'int'
|-FunctionDecl 0x16dc7ed6750 <line:156:1, line:200:1> line:156:5 invalid CRYPTO_get_ex_new_index 'int (int, long, void *, int *, int *, int *)'
| |-ParmVarDecl 0x16dc7ed63b0 <col:29, col:33> col:33 used class_index 'int'
| |-ParmVarDecl 0x16dc7ed6430 <col:46, col:51> col:51 used argl 'long'
| |-ParmVarDecl 0x16dc7ed64b0 <col:57, col:63> col:63 used argp 'void *'
| |-ParmVarDecl 0x16dc7ed6530 <line:157:29, col:44> col:44 invalid new_func 'int *'
| |-ParmVarDecl 0x16dc7ed65b0 <col:54, col:69> col:69 invalid dup_func 'int *'
| |-ParmVarDecl 0x16dc7ed6630 <line:158:29, col:45> col:45 invalid free_func 'int *'
| `-CompoundStmt 0x16dc7ed73f8 <line:159:1, line:200:1>
|   |-DeclStmt 0x16dc7ed68f8 <line:160:5, col:19>
|   | `-VarDecl 0x16dc7ed6850 <col:5, col:18> col:9 used toret 'int' cinit
|   |   `-UnaryOperator 0x16dc7ed68e0 <col:17, col:18> 'int' prefix '-'
|   |     `-IntegerLiteral 0x16dc7ed68b8 <col:18> 'int' 1
|   |-DeclStmt 0x16dc7ed6a38 <line:162:5, col:49>
|   | `-VarDecl 0x16dc7ed6920 <col:5, col:48> col:19 used ip 'EX_CALLBACKS *' cinit
|   |   `-CallExpr 0x16dc7ed69f8 <col:24, col:48> 'EX_CALLBACKS *'
|   |     |-ImplicitCastExpr 0x16dc7ed69e0 <col:24> 'EX_CALLBACKS *(*)(int)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x16dc7ed6988 <col:24> 'EX_CALLBACKS *(int)' Function 0x16dc7ed0798 'get_and_lock' 'EX_CALLBACKS *(int)'
|   |     `-ImplicitCastExpr 0x16dc7ed6a20 <col:37> 'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x16dc7ed69a8 <col:37> 'int' lvalue ParmVar 0x16dc7ed63b0 'class_index' 'int'
|   |-IfStmt 0x16dc7ed6af0 <line:164:5, line:165:17>
|   | |-OpaqueValueExpr 0x16dc7ed6ad8 <<invalid sloc>> '_Bool'
|   | `-ReturnStmt 0x16dc7ed6ac8 <col:9, col:17>
|   |   `-UnaryOperator 0x16dc7ed6ab0 <col:16, col:17> 'int' prefix '-'
|   |     `-IntegerLiteral 0x16dc7ed6a88 <col:17> 'int' 1
|   |-IfStmt 0x16dc7ed6f50 <line:167:5, line:176:5>
|   | |-OpaqueValueExpr 0x16dc7ed6f38 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x16dc7ed6f20 <line:167:27, line:176:5>
|   |   `-IfStmt 0x16dc7ed6f08 <line:171:9, line:175:9>
|   |     |-OpaqueValueExpr 0x16dc7ed6ef0 <<invalid sloc>> '_Bool'
|   |     `-CompoundStmt 0x16dc7ed6ed8 <line:172:54, line:175:9>
|   |       `-GotoStmt 0x16dc7ed6ec0 <line:174:13, col:18> 'err' 0x16dc7ed6e70
|   |-IfStmt 0x16dc7ed6fd0 <line:179:5, line:182:5>
|   | |-OpaqueValueExpr 0x16dc7ed6fb8 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x16dc7ed6fa0 <line:179:20, line:182:5>
|   |   `-GotoStmt 0x16dc7ed6f88 <line:181:9, col:14> 'err' 0x16dc7ed6e70
|   |-IfStmt 0x16dc7ed7138 <line:189:5, line:193:5>
|   | |-OpaqueValueExpr 0x16dc7ed7120 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x16dc7ed7108 <line:189:47, line:193:5>
|   |   `-GotoStmt 0x16dc7ed70f0 <line:192:9, col:14> 'err' 0x16dc7ed6e70
|   |-LabelStmt 0x16dc7ed7398 <line:197:2, col:5> 'err'
|   | `-NullStmt 0x16dc7ed7390 <col:5>
|   `-ReturnStmt 0x16dc7ed73e8 <line:199:5, col:12>
|     `-ImplicitCastExpr 0x16dc7ed73d0 <col:12> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x16dc7ed73b0 <col:12> 'int' lvalue Var 0x16dc7ed6850 'toret' 'int'
|-FunctionDecl 0x16dc7ed7650 <line:209:1, line:248:1> line:209:5 invalid CRYPTO_new_ex_data 'int (int, void *, int *)'
| |-ParmVarDecl 0x16dc7ed7460 <col:24, col:28> col:28 used class_index 'int'
| |-ParmVarDecl 0x16dc7ed74e0 <col:41, col:47> col:47 used obj 'void *'
| |-ParmVarDecl 0x16dc7ed7560 <col:52, col:68> col:68 invalid ad 'int *'
| `-CompoundStmt 0x16dc7ed4618 <line:210:1, line:248:1>
|   |-DeclStmt 0x16dc7ed7838 <line:211:5, col:14>
|   | |-VarDecl 0x16dc7ed7738 <col:5, col:9> col:9 used mx 'int'
|   | `-VarDecl 0x16dc7ed77b8 <col:5, col:13> col:13 used i 'int'
|   |-DeclStmt 0x16dc7ed78d0 <line:212:5, col:14>
|   | `-VarDecl 0x16dc7ed7868 <col:5, col:11> col:11 used ptr 'void *'
|   |-DeclStmt 0x16dc7ed7a38 <line:215:5, col:49>
|   | `-VarDecl 0x16dc7ed7920 <col:5, col:48> col:19 used ip 'EX_CALLBACKS *' cinit
|   |   `-CallExpr 0x16dc7ed79f8 <col:24, col:48> 'EX_CALLBACKS *'
|   |     |-ImplicitCastExpr 0x16dc7ed79e0 <col:24> 'EX_CALLBACKS *(*)(int)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x16dc7ed7988 <col:24> 'EX_CALLBACKS *(int)' Function 0x16dc7ed0798 'get_and_lock' 'EX_CALLBACKS *(int)'
|   |     `-ImplicitCastExpr 0x16dc7ed7a20 <col:37> 'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x16dc7ed79a8 <col:37> 'int' lvalue ParmVar 0x16dc7ed7460 'class_index' 'int'
|   |-IfStmt 0x16dc7ed7ad8 <line:217:5, line:218:16>
|   | |-OpaqueValueExpr 0x16dc7ed7ac0 <<invalid sloc>> '_Bool'
|   | `-ReturnStmt 0x16dc7ed7ab0 <col:9, col:16>
|   |   `-IntegerLiteral 0x16dc7ed7a88 <col:16> 'int' 0
|   |-IfStmt 0x16dc7ed4028 <line:223:5, line:231:5>
|   | |-BinaryOperator 0x16dc7ed7be0 <line:223:9, col:14> 'int' '>'
|   | | |-ImplicitCastExpr 0x16dc7ed7bc8 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x16dc7ed7b80 <col:9> 'int' lvalue Var 0x16dc7ed7738 'mx' 'int'
|   | | `-IntegerLiteral 0x16dc7ed7ba0 <col:14> 'int' 0
|   | `-CompoundStmt 0x16dc7ed4018 <col:17, line:231:5>
|   |-IfStmt 0x16dc7ed4168 <line:234:5, line:237:5>
|   | |-OpaqueValueExpr 0x16dc7ed4150 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x16dc7ed4138 <line:234:36, line:237:5>
|   |   `-ReturnStmt 0x16dc7ed4128 <line:236:9, col:16>
|   |     `-IntegerLiteral 0x16dc7ed4100 <col:16> 'int' 0
|   |-ForStmt 0x16dc7ed4588 <line:238:5, line:244:5>
|   | |-BinaryOperator 0x16dc7ed41c8 <line:238:10, col:14> 'int' '='
|   | | |-DeclRefExpr 0x16dc7ed4180 <col:10> 'int' lvalue Var 0x16dc7ed77b8 'i' 'int'
|   | | `-IntegerLiteral 0x16dc7ed41a0 <col:14> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x16dc7ed4258 <col:17, col:21> 'int' '<'
|   | | |-ImplicitCastExpr 0x16dc7ed4228 <col:17> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x16dc7ed41e8 <col:17> 'int' lvalue Var 0x16dc7ed77b8 'i' 'int'
|   | | `-ImplicitCastExpr 0x16dc7ed4240 <col:21> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x16dc7ed4208 <col:21> 'int' lvalue Var 0x16dc7ed7738 'mx' 'int'
|   | |-UnaryOperator 0x16dc7ed4298 <col:25, col:26> 'int' postfix '++'
|   | | `-DeclRefExpr 0x16dc7ed4278 <col:25> 'int' lvalue Var 0x16dc7ed77b8 'i' 'int'
|   | `-CompoundStmt 0x16dc7ed4570 <col:30, line:244:5>
|   |   `-IfStmt 0x16dc7ed4558 <line:239:9, line:243:9>
|   |     |-OpaqueValueExpr 0x16dc7ed4540 <<invalid sloc>> '_Bool'
|   |     `-CompoundStmt 0x16dc7ed4530 <line:239:49, line:243:9>
|   `-ReturnStmt 0x16dc7ed4608 <line:247:5, col:12>
|     `-IntegerLiteral 0x16dc7ed45e0 <col:12> 'int' 1
|-FunctionDecl 0x16dc7ed4870 <line:254:1, line:314:1> line:254:5 invalid CRYPTO_dup_ex_data 'int (int, int *, const int *)'
| |-ParmVarDecl 0x16dc7ed4680 <col:24, col:28> col:28 used class_index 'int'
| |-ParmVarDecl 0x16dc7ed4700 <col:41, col:57> col:57 invalid to 'int *'
| |-ParmVarDecl 0x16dc7ed4780 <line:255:24, col:46> col:46 invalid from 'const int *'
| `-CompoundStmt 0x16dc7edbe70 <line:256:1, line:314:1>
|   |-DeclStmt 0x16dc7ed4ae0 <line:257:5, col:17>
|   | |-VarDecl 0x16dc7ed4958 <col:5, col:9> col:9 used mx 'int'
|   | |-VarDecl 0x16dc7ed49d8 <col:5, col:13> col:13 used j 'int'
|   | `-VarDecl 0x16dc7ed4a58 <col:5, col:16> col:16 used i 'int'
|   |-DeclStmt 0x16dc7ed4b78 <line:258:5, col:14>
|   | `-VarDecl 0x16dc7ed4b10 <col:5, col:11> col:11 used ptr 'void *'
|   |-DeclStmt 0x16dc7ee2cb8 <line:261:5, col:21>
|   | `-VarDecl 0x16dc7ee2c50 <col:5, col:19> col:19 used ip 'EX_CALLBACKS *'
|   |-DeclStmt 0x16dc7ee2d78 <line:262:5, col:18>
|   | `-VarDecl 0x16dc7ee2ce8 <col:5, col:17> col:9 used toret 'int' cinit
|   |   `-IntegerLiteral 0x16dc7ee2d50 <col:17> 'int' 0
|   |-IfStmt 0x16dc7ee2de0 <line:264:5, line:266:16>
|   | |-OpaqueValueExpr 0x16dc7ee2dc8 <<invalid sloc>> '_Bool'
|   | `-ReturnStmt 0x16dc7ee2db8 <col:9, col:16>
|   |   `-IntegerLiteral 0x16dc7ee2d90 <col:16> 'int' 1
|   |-IfStmt 0x16dc7ee2f70 <line:267:5, line:268:16>
|   | |-OpaqueValueExpr 0x16dc7ee2f58 <<invalid sloc>> '_Bool'
|   | `-ReturnStmt 0x16dc7ee2f48 <col:9, col:16>
|   |   `-IntegerLiteral 0x16dc7ee2f20 <col:16> 'int' 0
|   |-IfStmt 0x16dc7ee3268 <line:272:5, line:273:14>
|   | |-BinaryOperator 0x16dc7ee31d0 <line:272:9, col:13> 'int' '<'
|   | | |-ImplicitCastExpr 0x16dc7ee31a0 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x16dc7ee3160 <col:9> 'int' lvalue Var 0x16dc7ed49d8 'j' 'int'
|   | | `-ImplicitCastExpr 0x16dc7ee31b8 <col:13> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x16dc7ee3180 <col:13> 'int' lvalue Var 0x16dc7ed4958 'mx' 'int'
|   | `-BinaryOperator 0x16dc7ee3248 <line:273:9, col:14> 'int' '='
|   |   |-DeclRefExpr 0x16dc7ee31f0 <col:9> 'int' lvalue Var 0x16dc7ed4958 'mx' 'int'
|   |   `-ImplicitCastExpr 0x16dc7ee3230 <col:14> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x16dc7ee3210 <col:14> 'int' lvalue Var 0x16dc7ed49d8 'j' 'int'
|   |-IfStmt 0x16dc7ee3570 <line:274:5, line:282:5>
|   | |-BinaryOperator 0x16dc7ee32e0 <line:274:9, col:14> 'int' '>'
|   | | |-ImplicitCastExpr 0x16dc7ee32c8 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x16dc7ee3280 <col:9> 'int' lvalue Var 0x16dc7ed4958 'mx' 'int'
|   | | `-IntegerLiteral 0x16dc7ee32a0 <col:14> 'int' 0
|   | `-CompoundStmt 0x16dc7ee3560 <col:17, line:282:5>
|   |-IfStmt 0x16dc7ee3660 <line:285:5, line:286:16>
|   | |-BinaryOperator 0x16dc7ee3608 <line:285:9, col:15> 'int' '=='
|   | | |-ImplicitCastExpr 0x16dc7ee35f0 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x16dc7ee35a8 <col:9> 'int' lvalue Var 0x16dc7ed4958 'mx' 'int'
|   | | `-IntegerLiteral 0x16dc7ee35c8 <col:15> 'int' 0
|   | `-ReturnStmt 0x16dc7ee3650 <line:286:9, col:16>
|   |   `-IntegerLiteral 0x16dc7ee3628 <col:16> 'int' 1
|   |-IfStmt 0x16dc7ee3700 <line:287:5, line:290:5>
|   | |-OpaqueValueExpr 0x16dc7ee36e8 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x16dc7ee36d0 <line:287:26, line:290:5>
|   |   `-ReturnStmt 0x16dc7ee36c0 <line:289:9, col:16>
|   |     `-IntegerLiteral 0x16dc7ee3698 <col:16> 'int' 0
|   |-IfStmt 0x16dc7ee39c8 <line:298:5, line:299:14>
|   | |-OpaqueValueExpr 0x16dc7ee39b0 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x16dc7ee3998 <col:9, col:14> 'err' 0x16dc7ee3948
|   |-ForStmt 0x16dc7edbd30 <line:301:5, line:308:5>
|   | |-BinaryOperator 0x16dc7ee3a28 <line:301:10, col:14> 'int' '='
|   | | |-DeclRefExpr 0x16dc7ee39e0 <col:10> 'int' lvalue Var 0x16dc7ed4a58 'i' 'int'
|   | | `-IntegerLiteral 0x16dc7ee3a00 <col:14> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x16dc7ee3ab8 <col:17, col:21> 'int' '<'
|   | | |-ImplicitCastExpr 0x16dc7ee3a88 <col:17> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x16dc7ee3a48 <col:17> 'int' lvalue Var 0x16dc7ed4a58 'i' 'int'
|   | | `-ImplicitCastExpr 0x16dc7ee3aa0 <col:21> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x16dc7ee3a68 <col:21> 'int' lvalue Var 0x16dc7ed4958 'mx' 'int'
|   | |-UnaryOperator 0x16dc7ee3af8 <col:25, col:26> 'int' postfix '++'
|   | | `-DeclRefExpr 0x16dc7ee3ad8 <col:25> 'int' lvalue Var 0x16dc7ed4a58 'i' 'int'
|   | `-CompoundStmt 0x16dc7edbd18 <col:30, line:308:5>
|   |   `-IfStmt 0x16dc7edbca0 <line:303:9, line:306:22>
|   |     |-OpaqueValueExpr 0x16dc7edbc88 <<invalid sloc>> '_Bool'
|   |     `-IfStmt 0x16dc7edbc70 <line:304:13, line:306:22>
|   |       |-OpaqueValueExpr 0x16dc7edbc58 <<invalid sloc>> '_Bool'
|   |       `-GotoStmt 0x16dc7edbc40 <col:17, col:22> 'err' 0x16dc7ee3948
|   |-BinaryOperator 0x16dc7edbdc8 <line:309:5, col:13> 'int' '='
|   | |-DeclRefExpr 0x16dc7edbd68 <col:5> 'int' lvalue Var 0x16dc7ee2ce8 'toret' 'int'
|   | `-IntegerLiteral 0x16dc7edbda0 <col:13> 'int' 1
|   |-LabelStmt 0x16dc7edbe10 <line:310:2, col:5> 'err'
|   | `-NullStmt 0x16dc7edbe08 <col:5>
|   `-ReturnStmt 0x16dc7edbe60 <line:313:5, col:12>
|     `-ImplicitCastExpr 0x16dc7edbe48 <col:12> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x16dc7edbe28 <col:12> 'int' lvalue Var 0x16dc7ee2ce8 'toret' 'int'
|-FunctionDecl 0x16dc7edc0f8 <line:321:1, line:364:1> line:321:6 invalid CRYPTO_free_ex_data 'void (int, void *, int *)'
| |-ParmVarDecl 0x16dc7edbf10 <col:26, col:30> col:30 used class_index 'int'
| |-ParmVarDecl 0x16dc7edbf90 <col:43, col:49> col:49 used obj 'void *'
| |-ParmVarDecl 0x16dc7edc010 <col:54, col:70> col:70 invalid ad 'int *'
| `-CompoundStmt 0x16dc7eddf18 <line:322:1, line:364:1>
|   |-DeclStmt 0x16dc7edc2e0 <line:323:5, col:14>
|   | |-VarDecl 0x16dc7edc1e0 <col:5, col:9> col:9 used mx 'int'
|   | `-VarDecl 0x16dc7edc260 <col:5, col:13> col:13 used i 'int'
|   |-DeclStmt 0x16dc7edc370 <line:324:5, col:21>
|   | `-VarDecl 0x16dc7edc308 <col:5, col:19> col:19 used ip 'EX_CALLBACKS *'
|   |-DeclStmt 0x16dc7edc408 <line:325:5, col:14>
|   | `-VarDecl 0x16dc7edc3a0 <col:5, col:11> col:11 used ptr 'void *'
|   |-IfStmt 0x16dc7edc5f0 <line:330:5, line:331:14>
|   | |-OpaqueValueExpr 0x16dc7edc5d8 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x16dc7edc5c0 <col:9, col:14> 'err' 0x16dc7edc570
|   |-IfStmt 0x16dc7edc988 <line:334:5, line:342:5>
|   | |-BinaryOperator 0x16dc7edc6f8 <line:334:9, col:14> 'int' '>'
|   | | |-ImplicitCastExpr 0x16dc7edc6e0 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x16dc7edc698 <col:9> 'int' lvalue Var 0x16dc7edc1e0 'mx' 'int'
|   | | `-IntegerLiteral 0x16dc7edc6b8 <col:14> 'int' 0
|   | `-CompoundStmt 0x16dc7edc978 <col:17, line:342:5>
|   |-ForStmt 0x16dc7eddd90 <line:345:5, line:357:5>
|   | |-BinaryOperator 0x16dc7edca08 <line:345:10, col:14> 'int' '='
|   | | |-DeclRefExpr 0x16dc7edc9c0 <col:10> 'int' lvalue Var 0x16dc7edc260 'i' 'int'
|   | | `-IntegerLiteral 0x16dc7edc9e0 <col:14> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x16dc7edca98 <col:17, col:21> 'int' '<'
|   | | |-ImplicitCastExpr 0x16dc7edca68 <col:17> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x16dc7edca28 <col:17> 'int' lvalue Var 0x16dc7edc260 'i' 'int'
|   | | `-ImplicitCastExpr 0x16dc7edca80 <col:21> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x16dc7edca48 <col:21> 'int' lvalue Var 0x16dc7edc1e0 'mx' 'int'
|   | |-UnaryOperator 0x16dc7edcad8 <col:25, col:26> 'int' postfix '++'
|   | | `-DeclRefExpr 0x16dc7edcab8 <col:25> 'int' lvalue Var 0x16dc7edc260 'i' 'int'
|   | `-CompoundStmt 0x16dc7eddd70 <col:30, line:357:5>
|   |   |-IfStmt 0x16dc7eddc18 <line:346:9, line:352:9> has_else
|   |   | |-OpaqueValueExpr 0x16dc7eddc00 <<invalid sloc>> '_Bool'
|   |   | |-NullStmt 0x16dc7edcbd8 <line:347:13>
|   |   | `-CompoundStmt 0x16dc7edcbc8 <line:348:14, line:352:9>
|   |   `-IfStmt 0x16dc7eddd58 <line:353:9, line:356:9>
|   |     |-OpaqueValueExpr 0x16dc7eddd40 <<invalid sloc>> '_Bool'
|   |     `-CompoundStmt 0x16dc7eddd30 <line:353:48, line:356:9>
|   `-LabelStmt 0x16dc7eddf00 <line:361:2, col:5> 'err'
|     `-NullStmt 0x16dc7eddef8 <col:5>
|-FunctionDecl 0x16dc7ede160 <line:370:1, line:389:1> line:370:5 invalid CRYPTO_set_ex_data 'int (int *, int, void *)'
| |-ParmVarDecl 0x16dc7eddf78 <col:24, col:40> col:40 invalid ad 'int *'
| |-ParmVarDecl 0x16dc7eddff8 <col:44, col:48> col:48 used idx 'int'
| |-ParmVarDecl 0x16dc7ede078 <col:53, col:59> col:59 used val 'void *'
| `-CompoundStmt 0x16dc7ede9d0 <line:371:1, line:389:1>
|   |-DeclStmt 0x16dc7ede2b0 <line:372:5, col:10>
|   | `-VarDecl 0x16dc7ede248 <col:5, col:9> col:9 used i 'int'
|   |-IfStmt 0x16dc7ede4e0 <line:374:5, line:379:5>
|   | |-OpaqueValueExpr 0x16dc7ede4c8 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x16dc7ede4b0 <line:374:25, line:379:5>
|   |   `-IfStmt 0x16dc7ede498 <line:375:9, line:378:9>
|   |     |-OpaqueValueExpr 0x16dc7ede480 <<invalid sloc>> '_Bool'
|   |     `-CompoundStmt 0x16dc7ede468 <line:375:52, line:378:9>
|   |       `-ReturnStmt 0x16dc7ede458 <line:377:13, col:20>
|   |         `-IntegerLiteral 0x16dc7ede430 <col:20> 'int' 0
|   |-ForStmt 0x16dc7ede7f8 <line:381:5, line:386:5>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x16dc7ede5d8 <line:381:35, col:40> 'int' '<='
|   | | |-ImplicitCastExpr 0x16dc7ede5a8 <col:35> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x16dc7ede550 <col:35> 'int' lvalue Var 0x16dc7ede248 'i' 'int'
|   | | `-ImplicitCastExpr 0x16dc7ede5c0 <col:40> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x16dc7ede570 <col:40> 'int' lvalue ParmVar 0x16dc7eddff8 'idx' 'int'
|   | |-UnaryOperator 0x16dc7ede618 <col:45, col:47> 'int' prefix '++'
|   | | `-DeclRefExpr 0x16dc7ede5f8 <col:47> 'int' lvalue Var 0x16dc7ede248 'i' 'int'
|   | `-CompoundStmt 0x16dc7ede7e0 <col:50, line:386:5>
|   |   `-IfStmt 0x16dc7ede7c8 <line:382:9, line:385:9>
|   |     |-OpaqueValueExpr 0x16dc7ede7b0 <<invalid sloc>> '_Bool'
|   |     `-CompoundStmt 0x16dc7ede798 <line:382:42, line:385:9>
|   |       `-ReturnStmt 0x16dc7ede788 <line:384:13, col:20>
|   |         `-IntegerLiteral 0x16dc7ede760 <col:20> 'int' 0
|   `-ReturnStmt 0x16dc7ede9c0 <line:388:5, col:12>
|     `-IntegerLiteral 0x16dc7ede998 <col:12> 'int' 1
`-FunctionDecl 0x16dc7ee0c30 <line:395:1, line:400:1> line:395:7 invalid CRYPTO_get_ex_data 'void *(const int *, int)'
  |-ParmVarDecl 0x16dc7edea18 <col:26, col:48> col:48 invalid ad 'const int *'
  |-ParmVarDecl 0x16dc7edea98 <col:52, col:56> col:56 used idx 'int'
  `-CompoundStmt 0x16dc7ee0e80 <line:396:1, line:400:1>
