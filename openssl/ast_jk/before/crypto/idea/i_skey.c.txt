TranslationUnitDecl 0x1d1e2dcdcb8 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1d1e2dce550 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x1d1e2dce250 '__int128'
|-TypedefDecl 0x1d1e2dce5c0 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x1d1e2dce270 'unsigned __int128'
|-TypedefDecl 0x1d1e2dce8f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x1d1e2dce6b0 'struct __NSConstantString_tag'
|   `-Record 0x1d1e2dce618 '__NSConstantString_tag'
|-TypedefDecl 0x1d1e2dce968 <<invalid sloc>> <invalid sloc> implicit size_t 'unsigned long long'
| `-BuiltinType 0x1d1e2dcde90 'unsigned long long'
|-TypedefDecl 0x1d1e2dcea00 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x1d1e2dce9c0 'char *'
|   `-BuiltinType 0x1d1e2dcdd50 'char'
|-TypedefDecl 0x1d1e2dcea70 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x1d1e2dce9c0 'char *'
|   `-BuiltinType 0x1d1e2dcdd50 'char'
|-FunctionDecl 0x1d1e2dcebe0 <.//openssl//file_jk/before\crypto\idea\i_skey.c:13:1, col:41> col:17 invalid inverse 'int (unsigned int)' static
| `-ParmVarDecl 0x1d1e2dceaf8 <col:25, col:38> col:38 xin 'unsigned int'
|-FunctionDecl 0x1d1e4732cd8 <line:14:1, line:52:1> line:14:6 invalid IDEA_set_encrypt_key 'void (const unsigned char *, int *)'
| |-ParmVarDecl 0x1d1e4732b50 <col:27, col:48> col:48 used key 'const unsigned char *'
| |-ParmVarDecl 0x1d1e4732c00 <col:53, col:72> col:72 invalid ks 'int *'
| `-CompoundStmt 0x1d1e473b400 <line:15:1, line:52:1>
|   |-DeclStmt 0x1d1e4732e20 <line:16:5, col:10>
|   | `-VarDecl 0x1d1e4732db8 <col:5, col:9> col:9 used i 'int'
|   |-DeclStmt 0x1d1e4732eb8 <line:17:5, col:43>
|   | `-VarDecl 0x1d1e4732e50 <col:5, col:24> col:24 invalid kt 'int *' register
|   `-ForStmt 0x1d1e473b3c8 <line:31:5, line:51:5>
|     |-BinaryOperator 0x1d1e473ad10 <line:31:10, col:14> 'int' '='
|     | |-DeclRefExpr 0x1d1e473acb0 <col:10> 'int' lvalue Var 0x1d1e4732db8 'i' 'int'
|     | `-IntegerLiteral 0x1d1e473ace8 <col:14> 'int' 0
|     |-<<<NULL>>>
|     |-BinaryOperator 0x1d1e473ad90 <col:17, col:21> 'int' '<'
|     | |-ImplicitCastExpr 0x1d1e473ad78 <col:17> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x1d1e473ad30 <col:17> 'int' lvalue Var 0x1d1e4732db8 'i' 'int'
|     | `-IntegerLiteral 0x1d1e473ad50 <col:21> 'int' 6
|     |-UnaryOperator 0x1d1e473add0 <col:24, col:25> 'int' postfix '++'
|     | `-DeclRefExpr 0x1d1e473adb0 <col:24> 'int' lvalue Var 0x1d1e4732db8 'i' 'int'
|     `-CompoundStmt 0x1d1e473b3b0 <col:29, line:51:5>
|       `-IfStmt 0x1d1e473b280 <line:46:9, line:47:13>
|         |-BinaryOperator 0x1d1e473b258 <line:46:13, col:18> 'int' '>='
|         | |-ImplicitCastExpr 0x1d1e473b240 <col:13> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x1d1e473b1f8 <col:13> 'int' lvalue Var 0x1d1e4732db8 'i' 'int'
|         | `-IntegerLiteral 0x1d1e473b218 <col:18> 'int' 5
|         `-BreakStmt 0x1d1e473b278 <line:47:13>
|-FunctionDecl 0x1d1e473b598 <line:54:1, line:81:1> line:54:6 invalid IDEA_set_decrypt_key 'void (int *, int *)'
| |-ParmVarDecl 0x1d1e473b440 <col:27, col:46> col:46 invalid ek 'int *'
| |-ParmVarDecl 0x1d1e473b4c0 <col:50, col:69> col:69 invalid dk 'int *'
| `-CompoundStmt 0x1d1e4733d50 <line:55:1, line:81:1>
|   |-DeclStmt 0x1d1e473b6e0 <line:56:5, col:10>
|   | `-VarDecl 0x1d1e473b678 <col:5, col:9> col:9 used r 'int'
|   |-DeclStmt 0x1d1e473b778 <line:57:5, col:34>
|   | `-VarDecl 0x1d1e473b710 <col:5, col:24> col:24 invalid fp 'int *' register
|   `-ForStmt 0x1d1e4733b88 <line:61:5, line:71:5>
|     |-BinaryOperator 0x1d1e473b890 <line:61:10, col:14> 'int' '='
|     | |-DeclRefExpr 0x1d1e473b830 <col:10> 'int' lvalue Var 0x1d1e473b678 'r' 'int'
|     | `-IntegerLiteral 0x1d1e473b868 <col:14> 'int' 0
|     |-<<<NULL>>>
|     |-BinaryOperator 0x1d1e473b910 <col:17, col:21> 'int' '<'
|     | |-ImplicitCastExpr 0x1d1e473b8f8 <col:17> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x1d1e473b8b0 <col:17> 'int' lvalue Var 0x1d1e473b678 'r' 'int'
|     | `-IntegerLiteral 0x1d1e473b8d0 <col:21> 'int' 9
|     |-UnaryOperator 0x1d1e473b950 <col:24, col:25> 'int' postfix '++'
|     | `-DeclRefExpr 0x1d1e473b930 <col:24> 'int' lvalue Var 0x1d1e473b678 'r' 'int'
|     `-CompoundStmt 0x1d1e4733b70 <col:29, line:71:5>
|       `-IfStmt 0x1d1e473bb30 <line:66:9, line:67:13>
|         |-BinaryOperator 0x1d1e473bb08 <line:66:13, col:18> 'int' '=='
|         | |-ImplicitCastExpr 0x1d1e473baf0 <col:13> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x1d1e473baa8 <col:13> 'int' lvalue Var 0x1d1e473b678 'r' 'int'
|         | `-IntegerLiteral 0x1d1e473bac8 <col:18> 'int' 8
|         `-BreakStmt 0x1d1e473bb28 <line:67:13>
`-FunctionDecl 0x1d1e4733e40 <line:84:1, line:112:1> line:84:17 invalid inverse 'int (unsigned int)' static
  |-ParmVarDecl 0x1d1e4733d90 <col:25, col:38> col:38 used xin 'unsigned int'
  `-CompoundStmt 0x1d1e473d050 <line:85:1, line:112:1>
    |-DeclStmt 0x1d1e47342c0 <line:86:5, col:33>
    | |-VarDecl 0x1d1e4733f18 <col:5, col:10> col:10 used n1 'long'
    | |-VarDecl 0x1d1e4733f98 <col:5, col:14> col:14 used n2 'long'
    | |-VarDecl 0x1d1e4734018 <col:5, col:18> col:18 used q 'long'
    | |-VarDecl 0x1d1e4734098 <col:5, col:21> col:21 used r 'long'
    | |-VarDecl 0x1d1e4734118 <col:5, col:24> col:24 used b1 'long'
    | |-VarDecl 0x1d1e4734198 <col:5, col:28> col:28 used b2 'long'
    | `-VarDecl 0x1d1e4734218 <col:5, col:32> col:32 used t 'long'
    `-IfStmt 0x1d1e473d028 <line:88:5, line:110:5> has_else
      |-BinaryOperator 0x1d1e4734350 <line:88:9, col:16> 'int' '=='
      | |-ImplicitCastExpr 0x1d1e4734320 <col:9> 'unsigned int' <LValueToRValue>
      | | `-DeclRefExpr 0x1d1e47342d8 <col:9> 'unsigned int' lvalue ParmVar 0x1d1e4733d90 'xin' 'unsigned int'
      | `-ImplicitCastExpr 0x1d1e4734338 <col:16> 'unsigned int' <IntegralCast>
      |   `-IntegerLiteral 0x1d1e47342f8 <col:16> 'int' 0
      |-BinaryOperator 0x1d1e47343e8 <line:89:9, col:14> 'long' '='
      | |-DeclRefExpr 0x1d1e4734370 <col:9> 'long' lvalue Var 0x1d1e4734198 'b2' 'long'
      | `-ImplicitCastExpr 0x1d1e47343d0 <col:14> 'long' <IntegralCast>
      |   `-IntegerLiteral 0x1d1e47343a8 <col:14> 'int' 0
      `-CompoundStmt 0x1d1e473cff0 <line:90:10, line:110:5>
        |-BinaryOperator 0x1d1e4734480 <line:91:9, col:14> 'long' '='
        | |-DeclRefExpr 0x1d1e4734408 <col:9> 'long' lvalue Var 0x1d1e4733f18 'n1' 'long'
        | `-ImplicitCastExpr 0x1d1e4734468 <col:14> 'long' <IntegralCast>
        |   `-IntegerLiteral 0x1d1e4734440 <col:14> 'int' 65537
        |-BinaryOperator 0x1d1e4734528 <line:92:9, col:14> 'long' '='
        | |-DeclRefExpr 0x1d1e47344a0 <col:9> 'long' lvalue Var 0x1d1e4733f98 'n2' 'long'
        | `-ImplicitCastExpr 0x1d1e4734510 <col:14> 'long' <IntegralCast>
        |   `-ImplicitCastExpr 0x1d1e47344f8 <col:14> 'unsigned int' <LValueToRValue>
        |     `-DeclRefExpr 0x1d1e47344d8 <col:14> 'unsigned int' lvalue ParmVar 0x1d1e4733d90 'xin' 'unsigned int'
        |-BinaryOperator 0x1d1e47345a8 <line:93:9, col:14> 'long' '='
        | |-DeclRefExpr 0x1d1e4734548 <col:9> 'long' lvalue Var 0x1d1e4734198 'b2' 'long'
        | `-ImplicitCastExpr 0x1d1e4734590 <col:14> 'long' <IntegralCast>
        |   `-IntegerLiteral 0x1d1e4734568 <col:14> 'int' 1
        |-BinaryOperator 0x1d1e4734640 <line:94:9, col:14> 'long' '='
        | |-DeclRefExpr 0x1d1e47345c8 <col:9> 'long' lvalue Var 0x1d1e4734118 'b1' 'long'
        | `-ImplicitCastExpr 0x1d1e4734628 <col:14> 'long' <IntegralCast>
        |   `-IntegerLiteral 0x1d1e4734600 <col:14> 'int' 0
        `-DoStmt 0x1d1e473cfd0 <line:96:9, line:109:24>
          |-CompoundStmt 0x1d1e473cf10 <line:96:12, line:109:9>
          | |-BinaryOperator 0x1d1e4734748 <line:97:13, col:25> 'long' '='
          | | |-DeclRefExpr 0x1d1e4734660 <col:13> 'long' lvalue Var 0x1d1e4734098 'r' 'long'
          | | `-ParenExpr 0x1d1e4734728 <col:17, col:25> 'long'
          | |   `-BinaryOperator 0x1d1e4734708 <col:18, col:23> 'long' '%'
          | |     |-ImplicitCastExpr 0x1d1e47346d8 <col:18> 'long' <LValueToRValue>
          | |     | `-DeclRefExpr 0x1d1e4734698 <col:18> 'long' lvalue Var 0x1d1e4733f18 'n1' 'long'
          | |     `-ImplicitCastExpr 0x1d1e47346f0 <col:23> 'long' <LValueToRValue>
          | |       `-DeclRefExpr 0x1d1e47346b8 <col:23> 'long' lvalue Var 0x1d1e4733f98 'n2' 'long'
          | |-BinaryOperator 0x1d1e47348a8 <line:98:13, col:28> 'long' '='
          | | |-DeclRefExpr 0x1d1e4734768 <col:13> 'long' lvalue Var 0x1d1e4734018 'q' 'long'
          | | `-BinaryOperator 0x1d1e4734888 <col:17, col:28> 'long' '/'
          | |   |-ParenExpr 0x1d1e4734830 <col:17, col:24> 'long'
          | |   | `-BinaryOperator 0x1d1e4734810 <col:18, col:23> 'long' '-'
          | |   |   |-ImplicitCastExpr 0x1d1e47347e0 <col:18> 'long' <LValueToRValue>
          | |   |   | `-DeclRefExpr 0x1d1e47347a0 <col:18> 'long' lvalue Var 0x1d1e4733f18 'n1' 'long'
          | |   |   `-ImplicitCastExpr 0x1d1e47347f8 <col:23> 'long' <LValueToRValue>
          | |   |     `-DeclRefExpr 0x1d1e47347c0 <col:23> 'long' lvalue Var 0x1d1e4734098 'r' 'long'
          | |   `-ImplicitCastExpr 0x1d1e4734870 <col:28> 'long' <LValueToRValue>
          | |     `-DeclRefExpr 0x1d1e4734850 <col:28> 'long' lvalue Var 0x1d1e4733f98 'n2' 'long'
          | `-IfStmt 0x1d1e473cee8 <line:99:13, line:108:13> has_else
          |   |-BinaryOperator 0x1d1e4734940 <line:99:17, col:22> 'int' '=='
          |   | |-ImplicitCastExpr 0x1d1e4734910 <col:17> 'long' <LValueToRValue>
          |   | | `-DeclRefExpr 0x1d1e47348c8 <col:17> 'long' lvalue Var 0x1d1e4734098 'r' 'long'
          |   | `-ImplicitCastExpr 0x1d1e4734928 <col:22> 'long' <IntegralCast>
          |   |   `-IntegerLiteral 0x1d1e47348e8 <col:22> 'int' 0
          |   |-CompoundStmt 0x1d1e4734ae8 <col:25, line:102:13>
          |   | `-IfStmt 0x1d1e4734ad0 <line:100:17, line:101:36>
          |   |   |-BinaryOperator 0x1d1e47349d8 <line:100:21, col:26> 'int' '<'
          |   |   | |-ImplicitCastExpr 0x1d1e47349a8 <col:21> 'long' <LValueToRValue>
          |   |   | | `-DeclRefExpr 0x1d1e4734960 <col:21> 'long' lvalue Var 0x1d1e4734198 'b2' 'long'
          |   |   | `-ImplicitCastExpr 0x1d1e47349c0 <col:26> 'long' <IntegralCast>
          |   |   |   `-IntegerLiteral 0x1d1e4734980 <col:26> 'int' 0
          |   |   `-BinaryOperator 0x1d1e4734ab0 <line:101:21, col:36> 'long' '='
          |   |     |-DeclRefExpr 0x1d1e47349f8 <col:21> 'long' lvalue Var 0x1d1e4734198 'b2' 'long'
          |   |     `-BinaryOperator 0x1d1e4734a90 <col:26, col:36> 'long' '+'
          |   |       |-ImplicitCastExpr 0x1d1e4734a78 <col:26> 'long' <IntegralCast>
          |   |       | `-IntegerLiteral 0x1d1e4734a18 <col:26> 'int' 65537
          |   |       `-ImplicitCastExpr 0x1d1e4734a60 <col:36> 'long' <LValueToRValue>
          |   |         `-DeclRefExpr 0x1d1e4734a40 <col:36> 'long' lvalue Var 0x1d1e4734198 'b2' 'long'
          |   `-CompoundStmt 0x1d1e473ceb0 <line:102:20, line:108:13>
          |     |-BinaryOperator 0x1d1e473cbe8 <line:103:17, col:22> 'long' '='
          |     | |-DeclRefExpr 0x1d1e4734b00 <col:17> 'long' lvalue Var 0x1d1e4733f18 'n1' 'long'
          |     | `-ImplicitCastExpr 0x1d1e473cbd0 <col:22> 'long' <LValueToRValue>
          |     |   `-DeclRefExpr 0x1d1e473cbb0 <col:22> 'long' lvalue Var 0x1d1e4733f98 'n2' 'long'
          |     |-BinaryOperator 0x1d1e473cc60 <line:104:17, col:22> 'long' '='
          |     | |-DeclRefExpr 0x1d1e473cc08 <col:17> 'long' lvalue Var 0x1d1e4733f98 'n2' 'long'
          |     | `-ImplicitCastExpr 0x1d1e473cc48 <col:22> 'long' <LValueToRValue>
          |     |   `-DeclRefExpr 0x1d1e473cc28 <col:22> 'long' lvalue Var 0x1d1e4734098 'r' 'long'
          |     |-BinaryOperator 0x1d1e473ccf0 <line:105:17, col:21> 'long' '='
          |     | |-DeclRefExpr 0x1d1e473cc80 <col:17> 'long' lvalue Var 0x1d1e4734218 't' 'long'
          |     | `-ImplicitCastExpr 0x1d1e473ccd8 <col:21> 'long' <LValueToRValue>
          |     |   `-DeclRefExpr 0x1d1e473ccb8 <col:21> 'long' lvalue Var 0x1d1e4734198 'b2' 'long'
          |     |-BinaryOperator 0x1d1e473ce18 <line:106:17, col:31> 'long' '='
          |     | |-DeclRefExpr 0x1d1e473cd10 <col:17> 'long' lvalue Var 0x1d1e4734198 'b2' 'long'
          |     | `-BinaryOperator 0x1d1e473cdf8 <col:22, col:31> 'long' '-'
          |     |   |-ImplicitCastExpr 0x1d1e473cde0 <col:22> 'long' <LValueToRValue>
          |     |   | `-DeclRefExpr 0x1d1e473cd30 <col:22> 'long' lvalue Var 0x1d1e4734118 'b1' 'long'
          |     |   `-BinaryOperator 0x1d1e473cdc0 <col:27, col:31> 'long' '*'
          |     |     |-ImplicitCastExpr 0x1d1e473cd90 <col:27> 'long' <LValueToRValue>
          |     |     | `-DeclRefExpr 0x1d1e473cd50 <col:27> 'long' lvalue Var 0x1d1e4734018 'q' 'long'
          |     |     `-ImplicitCastExpr 0x1d1e473cda8 <col:31> 'long' <LValueToRValue>
          |     |       `-DeclRefExpr 0x1d1e473cd70 <col:31> 'long' lvalue Var 0x1d1e4734198 'b2' 'long'
          |     `-BinaryOperator 0x1d1e473ce90 <line:107:17, col:22> 'long' '='
          |       |-DeclRefExpr 0x1d1e473ce38 <col:17> 'long' lvalue Var 0x1d1e4734118 'b1' 'long'
          |       `-ImplicitCastExpr 0x1d1e473ce78 <col:22> 'long' <LValueToRValue>
          |         `-DeclRefExpr 0x1d1e473ce58 <col:22> 'long' lvalue Var 0x1d1e4734218 't' 'long'
          `-BinaryOperator 0x1d1e473cfb0 <line:109:18, col:23> 'int' '!='
            |-ImplicitCastExpr 0x1d1e473cf80 <col:18> 'long' <LValueToRValue>
            | `-DeclRefExpr 0x1d1e473cf38 <col:18> 'long' lvalue Var 0x1d1e4734098 'r' 'long'
            `-ImplicitCastExpr 0x1d1e473cf98 <col:23> 'long' <IntegralCast>
              `-IntegerLiteral 0x1d1e473cf58 <col:23> 'int' 0
