TranslationUnitDecl 0x1d03ae25618 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1d03ae25eb0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x1d03ae25bb0 '__int128'
|-TypedefDecl 0x1d03ae25f20 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x1d03ae25bd0 'unsigned __int128'
|-TypedefDecl 0x1d03ae26258 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x1d03ae26010 'struct __NSConstantString_tag'
|   `-Record 0x1d03ae25f78 '__NSConstantString_tag'
|-TypedefDecl 0x1d03ae262c8 <<invalid sloc>> <invalid sloc> implicit size_t 'unsigned long long'
| `-BuiltinType 0x1d03ae257f0 'unsigned long long'
|-TypedefDecl 0x1d03ae26360 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x1d03ae26320 'char *'
|   `-BuiltinType 0x1d03ae256b0 'char'
|-TypedefDecl 0x1d03ae263d0 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x1d03ae26320 'char *'
|   `-BuiltinType 0x1d03ae256b0 'char'
|-FunctionDecl 0x1d03ae26540 <.//openssl//file_jk/before\crypto\idea\i_skey.c:13:1, col:41> col:17 invalid inverse 'int (unsigned int)' static
| `-ParmVarDecl 0x1d03ae26458 <col:25, col:38> col:38 xin 'unsigned int'
|-FunctionDecl 0x1d03c711b88 <line:14:1, line:52:1> line:14:6 invalid IDEA_set_encrypt_key 'void (const unsigned char *, int *)'
| |-ParmVarDecl 0x1d03c711a00 <col:27, col:48> col:48 used key 'const unsigned char *'
| |-ParmVarDecl 0x1d03c711ab0 <col:53, col:72> col:72 invalid ks 'int *'
| `-CompoundStmt 0x1d03c710210 <line:15:1, line:52:1>
|   |-DeclStmt 0x1d03c711cd0 <line:16:5, col:10>
|   | `-VarDecl 0x1d03c711c68 <col:5, col:9> col:9 used i 'int'
|   |-DeclStmt 0x1d03c711d68 <line:17:5, col:43>
|   | `-VarDecl 0x1d03c711d00 <col:5, col:24> col:24 invalid kt 'int *' register
|   `-ForStmt 0x1d03c7101d8 <line:31:5, line:51:5>
|     |-BinaryOperator 0x1d03c70fb20 <line:31:10, col:14> 'int' '='
|     | |-DeclRefExpr 0x1d03c70fac0 <col:10> 'int' lvalue Var 0x1d03c711c68 'i' 'int'
|     | `-IntegerLiteral 0x1d03c70faf8 <col:14> 'int' 0
|     |-<<<NULL>>>
|     |-BinaryOperator 0x1d03c70fba0 <col:17, col:21> 'int' '<'
|     | |-ImplicitCastExpr 0x1d03c70fb88 <col:17> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x1d03c70fb40 <col:17> 'int' lvalue Var 0x1d03c711c68 'i' 'int'
|     | `-IntegerLiteral 0x1d03c70fb60 <col:21> 'int' 6
|     |-UnaryOperator 0x1d03c70fbe0 <col:24, col:25> 'int' postfix '++'
|     | `-DeclRefExpr 0x1d03c70fbc0 <col:24> 'int' lvalue Var 0x1d03c711c68 'i' 'int'
|     `-CompoundStmt 0x1d03c7101c0 <col:29, line:51:5>
|       `-IfStmt 0x1d03c710090 <line:46:9, line:47:13>
|         |-BinaryOperator 0x1d03c710068 <line:46:13, col:18> 'int' '>='
|         | |-ImplicitCastExpr 0x1d03c710050 <col:13> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x1d03c710008 <col:13> 'int' lvalue Var 0x1d03c711c68 'i' 'int'
|         | `-IntegerLiteral 0x1d03c710028 <col:18> 'int' 5
|         `-BreakStmt 0x1d03c710088 <line:47:13>
|-FunctionDecl 0x1d03c7103a8 <line:54:1, line:81:1> line:54:6 invalid IDEA_set_decrypt_key 'void (int *, int *)'
| |-ParmVarDecl 0x1d03c710250 <col:27, col:46> col:46 invalid ek 'int *'
| |-ParmVarDecl 0x1d03c7102d0 <col:50, col:69> col:69 invalid dk 'int *'
| `-CompoundStmt 0x1d03c70ab80 <line:55:1, line:81:1>
|   |-DeclStmt 0x1d03c7104f0 <line:56:5, col:10>
|   | `-VarDecl 0x1d03c710488 <col:5, col:9> col:9 used r 'int'
|   |-DeclStmt 0x1d03c710588 <line:57:5, col:34>
|   | `-VarDecl 0x1d03c710520 <col:5, col:24> col:24 invalid fp 'int *' register
|   `-ForStmt 0x1d03c70a9b8 <line:61:5, line:71:5>
|     |-BinaryOperator 0x1d03c7106a0 <line:61:10, col:14> 'int' '='
|     | |-DeclRefExpr 0x1d03c710640 <col:10> 'int' lvalue Var 0x1d03c710488 'r' 'int'
|     | `-IntegerLiteral 0x1d03c710678 <col:14> 'int' 0
|     |-<<<NULL>>>
|     |-BinaryOperator 0x1d03c710720 <col:17, col:21> 'int' '<'
|     | |-ImplicitCastExpr 0x1d03c710708 <col:17> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x1d03c7106c0 <col:17> 'int' lvalue Var 0x1d03c710488 'r' 'int'
|     | `-IntegerLiteral 0x1d03c7106e0 <col:21> 'int' 9
|     |-UnaryOperator 0x1d03c710760 <col:24, col:25> 'int' postfix '++'
|     | `-DeclRefExpr 0x1d03c710740 <col:24> 'int' lvalue Var 0x1d03c710488 'r' 'int'
|     `-CompoundStmt 0x1d03c70a9a0 <col:29, line:71:5>
|       `-IfStmt 0x1d03c710940 <line:66:9, line:67:13>
|         |-BinaryOperator 0x1d03c710918 <line:66:13, col:18> 'int' '=='
|         | |-ImplicitCastExpr 0x1d03c710900 <col:13> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x1d03c7108b8 <col:13> 'int' lvalue Var 0x1d03c710488 'r' 'int'
|         | `-IntegerLiteral 0x1d03c7108d8 <col:18> 'int' 8
|         `-BreakStmt 0x1d03c710938 <line:67:13>
`-FunctionDecl 0x1d03c70ac70 <line:84:1, line:112:1> line:84:17 invalid inverse 'int (unsigned int)' static
  |-ParmVarDecl 0x1d03c70abc0 <col:25, col:38> col:38 used xin 'unsigned int'
  `-CompoundStmt 0x1d03c710e50 <line:85:1, line:112:1>
    |-DeclStmt 0x1d03c70b0f0 <line:86:5, col:33>
    | |-VarDecl 0x1d03c70ad48 <col:5, col:10> col:10 used n1 'long'
    | |-VarDecl 0x1d03c70adc8 <col:5, col:14> col:14 used n2 'long'
    | |-VarDecl 0x1d03c70ae48 <col:5, col:18> col:18 used q 'long'
    | |-VarDecl 0x1d03c70aec8 <col:5, col:21> col:21 used r 'long'
    | |-VarDecl 0x1d03c70af48 <col:5, col:24> col:24 used b1 'long'
    | |-VarDecl 0x1d03c70afc8 <col:5, col:28> col:28 used b2 'long'
    | `-VarDecl 0x1d03c70b048 <col:5, col:32> col:32 used t 'long'
    `-IfStmt 0x1d03c710e28 <line:88:5, line:110:5> has_else
      |-BinaryOperator 0x1d03c70b180 <line:88:9, col:16> 'int' '=='
      | |-ImplicitCastExpr 0x1d03c70b150 <col:9> 'unsigned int' <LValueToRValue>
      | | `-DeclRefExpr 0x1d03c70b108 <col:9> 'unsigned int' lvalue ParmVar 0x1d03c70abc0 'xin' 'unsigned int'
      | `-ImplicitCastExpr 0x1d03c70b168 <col:16> 'unsigned int' <IntegralCast>
      |   `-IntegerLiteral 0x1d03c70b128 <col:16> 'int' 0
      |-BinaryOperator 0x1d03c70b218 <line:89:9, col:14> 'long' '='
      | |-DeclRefExpr 0x1d03c70b1a0 <col:9> 'long' lvalue Var 0x1d03c70afc8 'b2' 'long'
      | `-ImplicitCastExpr 0x1d03c70b200 <col:14> 'long' <IntegralCast>
      |   `-IntegerLiteral 0x1d03c70b1d8 <col:14> 'int' 0
      `-CompoundStmt 0x1d03c710df0 <line:90:10, line:110:5>
        |-BinaryOperator 0x1d03c70b2b0 <line:91:9, col:14> 'long' '='
        | |-DeclRefExpr 0x1d03c70b238 <col:9> 'long' lvalue Var 0x1d03c70ad48 'n1' 'long'
        | `-ImplicitCastExpr 0x1d03c70b298 <col:14> 'long' <IntegralCast>
        |   `-IntegerLiteral 0x1d03c70b270 <col:14> 'int' 65537
        |-BinaryOperator 0x1d03c70b358 <line:92:9, col:14> 'long' '='
        | |-DeclRefExpr 0x1d03c70b2d0 <col:9> 'long' lvalue Var 0x1d03c70adc8 'n2' 'long'
        | `-ImplicitCastExpr 0x1d03c70b340 <col:14> 'long' <IntegralCast>
        |   `-ImplicitCastExpr 0x1d03c70b328 <col:14> 'unsigned int' <LValueToRValue>
        |     `-DeclRefExpr 0x1d03c70b308 <col:14> 'unsigned int' lvalue ParmVar 0x1d03c70abc0 'xin' 'unsigned int'
        |-BinaryOperator 0x1d03c70b3d8 <line:93:9, col:14> 'long' '='
        | |-DeclRefExpr 0x1d03c70b378 <col:9> 'long' lvalue Var 0x1d03c70afc8 'b2' 'long'
        | `-ImplicitCastExpr 0x1d03c70b3c0 <col:14> 'long' <IntegralCast>
        |   `-IntegerLiteral 0x1d03c70b398 <col:14> 'int' 1
        |-BinaryOperator 0x1d03c70b470 <line:94:9, col:14> 'long' '='
        | |-DeclRefExpr 0x1d03c70b3f8 <col:9> 'long' lvalue Var 0x1d03c70af48 'b1' 'long'
        | `-ImplicitCastExpr 0x1d03c70b458 <col:14> 'long' <IntegralCast>
        |   `-IntegerLiteral 0x1d03c70b430 <col:14> 'int' 0
        `-DoStmt 0x1d03c710dd0 <line:96:9, line:109:24>
          |-CompoundStmt 0x1d03c710d10 <line:96:12, line:109:9>
          | |-BinaryOperator 0x1d03c70b578 <line:97:13, col:25> 'long' '='
          | | |-DeclRefExpr 0x1d03c70b490 <col:13> 'long' lvalue Var 0x1d03c70aec8 'r' 'long'
          | | `-ParenExpr 0x1d03c70b558 <col:17, col:25> 'long'
          | |   `-BinaryOperator 0x1d03c70b538 <col:18, col:23> 'long' '%'
          | |     |-ImplicitCastExpr 0x1d03c70b508 <col:18> 'long' <LValueToRValue>
          | |     | `-DeclRefExpr 0x1d03c70b4c8 <col:18> 'long' lvalue Var 0x1d03c70ad48 'n1' 'long'
          | |     `-ImplicitCastExpr 0x1d03c70b520 <col:23> 'long' <LValueToRValue>
          | |       `-DeclRefExpr 0x1d03c70b4e8 <col:23> 'long' lvalue Var 0x1d03c70adc8 'n2' 'long'
          | |-BinaryOperator 0x1d03c70b6d8 <line:98:13, col:28> 'long' '='
          | | |-DeclRefExpr 0x1d03c70b598 <col:13> 'long' lvalue Var 0x1d03c70ae48 'q' 'long'
          | | `-BinaryOperator 0x1d03c70b6b8 <col:17, col:28> 'long' '/'
          | |   |-ParenExpr 0x1d03c70b660 <col:17, col:24> 'long'
          | |   | `-BinaryOperator 0x1d03c70b640 <col:18, col:23> 'long' '-'
          | |   |   |-ImplicitCastExpr 0x1d03c70b610 <col:18> 'long' <LValueToRValue>
          | |   |   | `-DeclRefExpr 0x1d03c70b5d0 <col:18> 'long' lvalue Var 0x1d03c70ad48 'n1' 'long'
          | |   |   `-ImplicitCastExpr 0x1d03c70b628 <col:23> 'long' <LValueToRValue>
          | |   |     `-DeclRefExpr 0x1d03c70b5f0 <col:23> 'long' lvalue Var 0x1d03c70aec8 'r' 'long'
          | |   `-ImplicitCastExpr 0x1d03c70b6a0 <col:28> 'long' <LValueToRValue>
          | |     `-DeclRefExpr 0x1d03c70b680 <col:28> 'long' lvalue Var 0x1d03c70adc8 'n2' 'long'
          | `-IfStmt 0x1d03c710ce8 <line:99:13, line:108:13> has_else
          |   |-BinaryOperator 0x1d03c70b770 <line:99:17, col:22> 'int' '=='
          |   | |-ImplicitCastExpr 0x1d03c70b740 <col:17> 'long' <LValueToRValue>
          |   | | `-DeclRefExpr 0x1d03c70b6f8 <col:17> 'long' lvalue Var 0x1d03c70aec8 'r' 'long'
          |   | `-ImplicitCastExpr 0x1d03c70b758 <col:22> 'long' <IntegralCast>
          |   |   `-IntegerLiteral 0x1d03c70b718 <col:22> 'int' 0
          |   |-CompoundStmt 0x1d03c70b918 <col:25, line:102:13>
          |   | `-IfStmt 0x1d03c70b900 <line:100:17, line:101:36>
          |   |   |-BinaryOperator 0x1d03c70b808 <line:100:21, col:26> 'int' '<'
          |   |   | |-ImplicitCastExpr 0x1d03c70b7d8 <col:21> 'long' <LValueToRValue>
          |   |   | | `-DeclRefExpr 0x1d03c70b790 <col:21> 'long' lvalue Var 0x1d03c70afc8 'b2' 'long'
          |   |   | `-ImplicitCastExpr 0x1d03c70b7f0 <col:26> 'long' <IntegralCast>
          |   |   |   `-IntegerLiteral 0x1d03c70b7b0 <col:26> 'int' 0
          |   |   `-BinaryOperator 0x1d03c70b8e0 <line:101:21, col:36> 'long' '='
          |   |     |-DeclRefExpr 0x1d03c70b828 <col:21> 'long' lvalue Var 0x1d03c70afc8 'b2' 'long'
          |   |     `-BinaryOperator 0x1d03c70b8c0 <col:26, col:36> 'long' '+'
          |   |       |-ImplicitCastExpr 0x1d03c70b8a8 <col:26> 'long' <IntegralCast>
          |   |       | `-IntegerLiteral 0x1d03c70b848 <col:26> 'int' 65537
          |   |       `-ImplicitCastExpr 0x1d03c70b890 <col:36> 'long' <LValueToRValue>
          |   |         `-DeclRefExpr 0x1d03c70b870 <col:36> 'long' lvalue Var 0x1d03c70afc8 'b2' 'long'
          |   `-CompoundStmt 0x1d03c710cb0 <line:102:20, line:108:13>
          |     |-BinaryOperator 0x1d03c7109e8 <line:103:17, col:22> 'long' '='
          |     | |-DeclRefExpr 0x1d03c70b930 <col:17> 'long' lvalue Var 0x1d03c70ad48 'n1' 'long'
          |     | `-ImplicitCastExpr 0x1d03c7109d0 <col:22> 'long' <LValueToRValue>
          |     |   `-DeclRefExpr 0x1d03c7109b0 <col:22> 'long' lvalue Var 0x1d03c70adc8 'n2' 'long'
          |     |-BinaryOperator 0x1d03c710a60 <line:104:17, col:22> 'long' '='
          |     | |-DeclRefExpr 0x1d03c710a08 <col:17> 'long' lvalue Var 0x1d03c70adc8 'n2' 'long'
          |     | `-ImplicitCastExpr 0x1d03c710a48 <col:22> 'long' <LValueToRValue>
          |     |   `-DeclRefExpr 0x1d03c710a28 <col:22> 'long' lvalue Var 0x1d03c70aec8 'r' 'long'
          |     |-BinaryOperator 0x1d03c710af0 <line:105:17, col:21> 'long' '='
          |     | |-DeclRefExpr 0x1d03c710a80 <col:17> 'long' lvalue Var 0x1d03c70b048 't' 'long'
          |     | `-ImplicitCastExpr 0x1d03c710ad8 <col:21> 'long' <LValueToRValue>
          |     |   `-DeclRefExpr 0x1d03c710ab8 <col:21> 'long' lvalue Var 0x1d03c70afc8 'b2' 'long'
          |     |-BinaryOperator 0x1d03c710c18 <line:106:17, col:31> 'long' '='
          |     | |-DeclRefExpr 0x1d03c710b10 <col:17> 'long' lvalue Var 0x1d03c70afc8 'b2' 'long'
          |     | `-BinaryOperator 0x1d03c710bf8 <col:22, col:31> 'long' '-'
          |     |   |-ImplicitCastExpr 0x1d03c710be0 <col:22> 'long' <LValueToRValue>
          |     |   | `-DeclRefExpr 0x1d03c710b30 <col:22> 'long' lvalue Var 0x1d03c70af48 'b1' 'long'
          |     |   `-BinaryOperator 0x1d03c710bc0 <col:27, col:31> 'long' '*'
          |     |     |-ImplicitCastExpr 0x1d03c710b90 <col:27> 'long' <LValueToRValue>
          |     |     | `-DeclRefExpr 0x1d03c710b50 <col:27> 'long' lvalue Var 0x1d03c70ae48 'q' 'long'
          |     |     `-ImplicitCastExpr 0x1d03c710ba8 <col:31> 'long' <LValueToRValue>
          |     |       `-DeclRefExpr 0x1d03c710b70 <col:31> 'long' lvalue Var 0x1d03c70afc8 'b2' 'long'
          |     `-BinaryOperator 0x1d03c710c90 <line:107:17, col:22> 'long' '='
          |       |-DeclRefExpr 0x1d03c710c38 <col:17> 'long' lvalue Var 0x1d03c70af48 'b1' 'long'
          |       `-ImplicitCastExpr 0x1d03c710c78 <col:22> 'long' <LValueToRValue>
          |         `-DeclRefExpr 0x1d03c710c58 <col:22> 'long' lvalue Var 0x1d03c70b048 't' 'long'
          `-BinaryOperator 0x1d03c710db0 <line:109:18, col:23> 'int' '!='
            |-ImplicitCastExpr 0x1d03c710d80 <col:18> 'long' <LValueToRValue>
            | `-DeclRefExpr 0x1d03c710d38 <col:18> 'long' lvalue Var 0x1d03c70aec8 'r' 'long'
            `-ImplicitCastExpr 0x1d03c710d98 <col:23> 'long' <IntegralCast>
              `-IntegerLiteral 0x1d03c710d58 <col:23> 'int' 0
