TranslationUnitDecl 0x222b8ca3f78 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x222b8ca4810 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x222b8ca4510 '__int128'
|-TypedefDecl 0x222b8ca4880 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x222b8ca4530 'unsigned __int128'
|-TypedefDecl 0x222b8ca4bb8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x222b8ca4970 'struct __NSConstantString_tag'
|   `-Record 0x222b8ca48d8 '__NSConstantString_tag'
|-TypedefDecl 0x222b8ca4c28 <<invalid sloc>> <invalid sloc> implicit referenced size_t 'unsigned long long'
| `-BuiltinType 0x222b8ca4150 'unsigned long long'
|-TypedefDecl 0x222b8ca4cc0 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x222b8ca4c80 'char *'
|   `-BuiltinType 0x222b8ca4010 'char'
|-TypedefDecl 0x222b8ca4d30 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x222b8ca4c80 'char *'
|   `-BuiltinType 0x222b8ca4010 'char'
|-TypedefDecl 0x222b8ca4da0 <.//openssl//file_jk/before\crypto\modes/modes_lcl.h:13:1, col:17> col:17 i64 'long long'
| `-BuiltinType 0x222b8ca40b0 'long long'
|-TypedefDecl 0x222b8ca4e10 <line:14:1, col:26> col:26 referenced u64 'unsigned long long'
| `-BuiltinType 0x222b8ca4150 'unsigned long long'
|-TypedefDecl 0x222b8ca4e80 <line:26:1, col:22> col:22 referenced u32 'unsigned int'
| `-BuiltinType 0x222b8ca4110 'unsigned int'
|-TypedefDecl 0x222b8ca4ef0 <line:27:1, col:23> col:23 referenced u8 'unsigned char'
| `-BuiltinType 0x222b8ca40d0 'unsigned char'
|-RecordDecl 0x222ba6bbe60 <line:94:32, line:96:1> line:94:32 struct definition
| |-FieldDecl 0x222ba6bbf50 <line:95:5, col:9> col:9 referenced hi 'u64':'unsigned long long'
| `-FieldDecl 0x222ba6bbfb8 <col:5, col:13> col:13 referenced lo 'u64':'unsigned long long'
|-TypedefDecl 0x222ba6bc068 <line:94:24, line:96:3> col:3 referenced u128 'struct u128':'u128'
| `-ElaboratedType 0x222ba6bc010 'struct u128' sugar
|   `-RecordType 0x222ba6bbf00 'u128'
|     `-Record 0x222ba6bbe60 ''
|-RecordDecl 0x222ba6bc0d8 <line:107:1, line:130:1> line:107:8 invalid struct gcm128_context definition
| |-RecordDecl 0x222ba6bc190 <line:109:5, line:114:5> line:109:5 union definition
| | |-FieldDecl 0x222ba6bc328 <line:110:9, col:16> col:13 u 'u64 [2]'
| | |-FieldDecl 0x222ba6bc478 <line:111:9, col:16> col:13 d 'u32 [4]'
| | |-FieldDecl 0x222ba6bc5c8 <line:112:9, col:16> col:12 c 'u8 [16]'
| | `-FieldDecl 0x222ba6bc748 <line:113:9, col:37> col:16 t 'size_t [2]'
| |-FieldDecl 0x222ba6bc7f8 <line:109:5, line:114:7> col:7 Yi 'union (anonymous union at .//openssl//file_jk/before\crypto\modes/modes_lcl.h:109:5)':'union gcm128_context::(anonymous at .//openssl//file_jk/before\crypto\modes/modes_lcl.h:109:5)'
| |-FieldDecl 0x222ba6bc870 <line:109:5, line:114:11> col:11 EKi 'union (anonymous union at .//openssl//file_jk/before\crypto\modes/modes_lcl.h:109:5)':'union gcm128_context::(anonymous at .//openssl//file_jk/before\crypto\modes/modes_lcl.h:109:5)'
| |-FieldDecl 0x222ba6bc8e8 <line:109:5, line:114:16> col:16 EK0 'union (anonymous union at .//openssl//file_jk/before\crypto\modes/modes_lcl.h:109:5)':'union gcm128_context::(anonymous at .//openssl//file_jk/before\crypto\modes/modes_lcl.h:109:5)'
| |-FieldDecl 0x222ba6bc960 <line:109:5, line:114:21> col:21 len 'union (anonymous union at .//openssl//file_jk/before\crypto\modes/modes_lcl.h:109:5)':'union gcm128_context::(anonymous at .//openssl//file_jk/before\crypto\modes/modes_lcl.h:109:5)'
| |-FieldDecl 0x222ba6bc9d8 <line:109:5, line:114:26> col:26 Xi 'union (anonymous union at .//openssl//file_jk/before\crypto\modes/modes_lcl.h:109:5)':'union gcm128_context::(anonymous at .//openssl//file_jk/before\crypto\modes/modes_lcl.h:109:5)'
| |-FieldDecl 0x222ba6bca50 <line:109:5, line:114:30> col:30 H 'union (anonymous union at .//openssl//file_jk/before\crypto\modes/modes_lcl.h:109:5)':'union gcm128_context::(anonymous at .//openssl//file_jk/before\crypto\modes/modes_lcl.h:109:5)'
| |-FieldDecl 0x222ba6bcc08 <line:122:5, col:19> col:10 Htable 'u128 [16]'
| |-FieldDecl 0x222ba6c0118 <line:123:5, col:52> col:12 gmult 'void (*)(u64 *, const u128 *)'
| |-FieldDecl 0x222ba6c0628 <line:124:5, line:125:30> line:124:12 ghash 'void (*)(u64 *, const u128 *, const u8 *, size_t)'
| |-FieldDecl 0x222ba6c0698 <line:127:5, col:18> col:18 mres 'unsigned int'
| |-FieldDecl 0x222ba6c0708 <col:5, col:24> col:24 ares 'unsigned int'
| |-FieldDecl 0x222ba6c0778 <line:128:5, col:16> col:16 invalid block 'int'
| `-FieldDecl 0x222ba6c07e8 <line:129:5, col:11> col:11 key 'void *'
|-RecordDecl 0x222ba6c08a8 <line:132:1, line:135:1> line:132:8 invalid struct xts128_context definition
| |-FieldDecl 0x222ba6c0978 <line:133:5, col:11> col:11 key1 'void *'
| |-FieldDecl 0x222ba6c09e8 <col:5, col:18> col:18 key2 'void *'
| |-FieldDecl 0x222ba6c0a58 <line:134:5, col:16> col:16 invalid block1 'int'
| `-FieldDecl 0x222ba6c0ac8 <col:5, col:24> col:24 invalid block2 'int'
|-RecordDecl 0x222ba6c0b20 <line:137:1, line:145:1> line:137:8 invalid struct ccm128_context definition
| |-RecordDecl 0x222ba6c0be0 <line:138:5, line:141:5> line:138:5 union definition
| | |-FieldDecl 0x222ba6c0d00 <line:139:9, col:16> col:13 u 'u64 [2]'
| | `-FieldDecl 0x222ba6c0db8 <line:140:9, col:16> col:12 c 'u8 [16]'
| |-FieldDecl 0x222ba6c0eb0 <line:138:5, line:141:7> col:7 nonce 'union (anonymous union at .//openssl//file_jk/before\crypto\modes/modes_lcl.h:138:5)':'union ccm128_context::(anonymous at .//openssl//file_jk/before\crypto\modes/modes_lcl.h:138:5)'
| |-FieldDecl 0x222ba6c0f28 <line:138:5, line:141:14> col:14 cmac 'union (anonymous union at .//openssl//file_jk/before\crypto\modes/modes_lcl.h:138:5)':'union ccm128_context::(anonymous at .//openssl//file_jk/before\crypto\modes/modes_lcl.h:138:5)'
| |-FieldDecl 0x222ba6c0f90 <line:142:5, col:9> col:9 blocks 'u64':'unsigned long long'
| |-FieldDecl 0x222ba6c1000 <line:143:5, col:16> col:16 invalid block 'int'
| `-FieldDecl 0x222ba6c1070 <line:144:5, col:11> col:11 key 'void *'
|-RecordDecl 0x222ba6c1120 <line:149:9, line:152:1> line:149:9 union definition
| |-FieldDecl 0x222ba6c1240 <line:150:5, col:12> col:9 a 'u64 [2]'
| `-FieldDecl 0x222ba6c1300 <line:151:5, col:23> col:19 c 'unsigned char [16]'
|-TypedefDecl 0x222ba6c13b8 <line:149:1, line:152:3> col:3 referenced OCB_BLOCK 'union OCB_BLOCK':'OCB_BLOCK'
| `-ElaboratedType 0x222ba6c1360 'union OCB_BLOCK' sugar
|   `-RecordType 0x222ba6c11c0 'OCB_BLOCK'
|     `-Record 0x222ba6c1120 ''
|-RecordDecl 0x222ba6c1428 <line:163:1, line:185:1> line:163:8 invalid struct ocb128_context definition
| |-FieldDecl 0x222ba6c14f8 <line:165:5, col:16> col:16 invalid encrypt 'int'
| |-FieldDecl 0x222ba6c1568 <line:166:5, col:16> col:16 invalid decrypt 'int'
| |-FieldDecl 0x222ba6c15d8 <line:167:5, col:11> col:11 keyenc 'void *'
| |-FieldDecl 0x222ba6c1648 <line:168:5, col:11> col:11 keydec 'void *'
| |-FieldDecl 0x222ba6c16b8 <line:169:5, col:14> col:14 invalid stream 'int'
| |-FieldDecl 0x222ba6c1720 <line:171:5, col:12> col:12 l_index 'size_t':'unsigned long long'
| |-FieldDecl 0x222ba6c1788 <line:172:5, col:12> col:12 max_l_index 'size_t':'unsigned long long'
| |-FieldDecl 0x222ba6c1810 <line:173:5, col:15> col:15 l_star 'OCB_BLOCK':'OCB_BLOCK'
| |-FieldDecl 0x222ba6c1878 <line:174:5, col:15> col:15 l_dollar 'OCB_BLOCK':'OCB_BLOCK'
| |-FieldDecl 0x222ba6c1938 <line:175:5, col:16> col:16 l 'OCB_BLOCK *'
| |-RecordDecl 0x222ba6c1990 <line:177:5, line:184:5> line:177:5 struct definition
| | |-FieldDecl 0x222ba6c1a60 <line:178:9, col:13> col:13 blocks_hashed 'u64':'unsigned long long'
| | |-FieldDecl 0x222ba6c1ac8 <line:179:9, col:13> col:13 blocks_processed 'u64':'unsigned long long'
| | |-FieldDecl 0x222ba6c1b30 <line:180:9, col:19> col:19 offset_aad 'OCB_BLOCK':'OCB_BLOCK'
| | |-FieldDecl 0x222ba6c1b98 <line:181:9, col:19> col:19 sum 'OCB_BLOCK':'OCB_BLOCK'
| | |-FieldDecl 0x222ba6c1c00 <line:182:9, col:19> col:19 offset 'OCB_BLOCK':'OCB_BLOCK'
| | `-FieldDecl 0x222ba6c1c68 <line:183:9, col:19> col:19 checksum 'OCB_BLOCK':'OCB_BLOCK'
| `-FieldDecl 0x222ba6c1d18 <line:177:5, line:184:7> col:7 sess 'struct (anonymous struct at .//openssl//file_jk/before\crypto\modes/modes_lcl.h:177:5)':'struct ocb128_context::(anonymous at .//openssl//file_jk/before\crypto\modes/modes_lcl.h:177:5)'
|-TypedefDecl 0x222ba6c1dd8 <D:\Microsoft Visual Studio 12.0\VC\include\vadefs.h:48:1, col:29> col:29 referenced uintptr_t 'unsigned long long'
| `-BuiltinType 0x222b8ca4150 'unsigned long long'
|-TypedefDecl 0x222ba6c1e48 <line:59:1, col:17> col:17 referenced va_list 'char *'
| `-PointerType 0x222b8ca4c80 'char *'
|   `-BuiltinType 0x222b8ca4010 'char'
|-FunctionDecl 0x222ba7c67b0 <line:119:21> col:21 implicit __va_start 'void (char **, ...)' extern
| |-ParmVarDecl 0x222ba7c6850 <<invalid sloc>> <invalid sloc> 'char **'
| `-NoThrowAttr 0x222ba7c68c0 <col:21> Implicit
|-FunctionDecl 0x222ba7c6918 prev 0x222ba7c67b0 <col:1, col:46> col:21 __va_start 'void (char **, ...)' extern
| |-ParmVarDecl 0x222ba7c6648 <col:32, col:40> col:41 'va_list *'
| `-NoThrowAttr 0x222ba7c6a08 <col:21> Inherited Implicit
|-TypedefDecl 0x222ba7c6a48 prev 0x222b8ca4c28 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:494:1, col:29> col:29 referenced size_t 'unsigned long long'
| `-BuiltinType 0x222b8ca4150 'unsigned long long'
|-TypedefDecl 0x222ba7c6af0 <line:503:1, col:16> col:16 referenced rsize_t 'size_t':'unsigned long long'
| `-TypedefType 0x222ba7c6ac0 'size_t' sugar
|   |-Typedef 0x222ba7c6a48 'size_t'
|   `-BuiltinType 0x222b8ca4150 'unsigned long long'
|-TypedefDecl 0x222ba7c6b60 <line:510:1, col:29> col:29 intptr_t 'long long'
| `-BuiltinType 0x222b8ca40b0 'long long'
|-TypedefDecl 0x222ba7c6bd0 <line:528:1, col:29> col:29 ptrdiff_t 'long long'
| `-BuiltinType 0x222b8ca40b0 'long long'
|-TypedefDecl 0x222ba7c6c40 <line:536:1, col:24> col:24 referenced wchar_t 'unsigned short'
| `-BuiltinType 0x222b8ca40f0 'unsigned short'
|-TypedefDecl 0x222ba7c6cb0 <line:541:1, col:24> col:24 wint_t 'unsigned short'
| `-BuiltinType 0x222b8ca40f0 'unsigned short'
|-TypedefDecl 0x222ba7c6d20 <line:542:1, col:24> col:24 wctype_t 'unsigned short'
| `-BuiltinType 0x222b8ca40f0 'unsigned short'
|-TypedefDecl 0x222ba7c6d90 <line:563:1, col:13> col:13 referenced errno_t 'int'
| `-BuiltinType 0x222b8ca4070 'int'
|-TypedefDecl 0x222ba7c6e00 <line:567:1, col:19> col:19 __time32_t 'long'
| `-BuiltinType 0x222b8ca4090 'long'
|-TypedefDecl 0x222ba7c6e70 <line:572:1, col:17> col:17 referenced __time64_t 'long long'
| `-BuiltinType 0x222b8ca40b0 'long long'
|-TypedefDecl 0x222ba7c6f00 <line:580:1, col:20> col:20 time_t '__time64_t':'long long'
| `-TypedefType 0x222ba7c6ed0 '__time64_t' sugar
|   |-Typedef 0x222ba7c6e70 '__time64_t'
|   `-BuiltinType 0x222b8ca40b0 'long long'
|-FunctionDecl 0x222ba7c7078 <line:637:10, col:53> col:23 _invalid_parameter_noinfo 'void (void) __attribute__((cdecl))':'void (void)'
|-FunctionDecl 0x222ba7c7298 <line:638:10, col:83> col:44 _invalid_parameter_noinfo_noreturn 'void (void) __attribute__((noreturn)) __attribute__((cdecl))':'void (void) __attribute__((noreturn))'
|-FunctionDecl 0x222ba7d2910 <line:641:9, line:642:136> col:14 _invoke_watson 'void (const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t) __attribute__((noreturn)) __attribute__((cdecl))':'void (const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t) __attribute__((noreturn))'
| |-ParmVarDecl 0x222ba7c73d8 <col:40, col:54> col:55 'const wchar_t *'
| |-ParmVarDecl 0x222ba7c7450 <col:68, col:82> col:83 'const wchar_t *'
| |-ParmVarDecl 0x222ba7c74c8 <col:96, col:110> col:111 'const wchar_t *'
| |-ParmVarDecl 0x222ba7c7548 <col:113, col:122> col:125 'unsigned int'
| `-ParmVarDecl 0x222ba7d26b0 <col:127> col:136 'uintptr_t':'unsigned long long'
|-RecordDecl 0x222ba7d29f0 <line:2072:1, col:8> col:8 struct threadlocaleinfostruct
|-RecordDecl 0x222ba7d2ab0 <line:2073:1, col:8> col:8 struct threadmbcinfostruct
|-TypedefDecl 0x222ba7d2c20 <line:2074:1, col:41> col:41 referenced pthreadlocinfo 'struct threadlocaleinfostruct *'
| `-PointerType 0x222ba7d2bd0 'struct threadlocaleinfostruct *'
|   `-ElaboratedType 0x222ba7d2b70 'struct threadlocaleinfostruct' sugar
|     `-RecordType 0x222ba7d2a90 'struct threadlocaleinfostruct'
|       `-Record 0x222ba7d86e0 'threadlocaleinfostruct'
|-TypedefDecl 0x222ba7d2d30 <line:2075:1, col:38> col:38 referenced pthreadmbcinfo 'struct threadmbcinfostruct *'
| `-PointerType 0x222ba7d2ce0 'struct threadmbcinfostruct *'
|   `-ElaboratedType 0x222ba7d2c80 'struct threadmbcinfostruct' sugar
|     `-RecordType 0x222ba7d2b50 'struct threadmbcinfostruct'
|       `-Record 0x222ba7d2ab0 'threadmbcinfostruct'
|-RecordDecl 0x222ba7d2d88 <line:2076:1, col:8> col:8 struct __lc_time_data
|-RecordDecl 0x222ba7d2e40 <line:2078:9, line:2082:1> line:2078:16 struct localeinfo_struct definition
| |-MaxFieldAlignmentAttr 0x222ba7d2f00 <<invalid sloc>> Implicit 64
| |-FieldDecl 0x222ba7d2f90 <line:2080:5, col:20> col:20 locinfo 'pthreadlocinfo':'struct threadlocaleinfostruct *'
| `-FieldDecl 0x222ba7d3020 <line:2081:5, col:20> col:20 mbcinfo 'pthreadmbcinfo':'struct threadmbcinfostruct *'
|-TypedefDecl 0x222ba7d30d8 <line:2078:1, line:2082:3> col:3 _locale_tstruct 'struct localeinfo_struct':'struct localeinfo_struct'
| `-ElaboratedType 0x222ba7d3080 'struct localeinfo_struct' sugar
|   `-RecordType 0x222ba7d2ee0 'struct localeinfo_struct'
|     `-Record 0x222ba7d2e40 'localeinfo_struct'
|-TypedefDecl 0x222ba7d31b0 <line:2078:1, line:2082:21> col:21 referenced _locale_t 'struct localeinfo_struct *'
| `-PointerType 0x222ba7d3160 'struct localeinfo_struct *'
|   `-ElaboratedType 0x222ba7d3080 'struct localeinfo_struct' sugar
|     `-RecordType 0x222ba7d2ee0 'struct localeinfo_struct'
|       `-Record 0x222ba7d2e40 'localeinfo_struct'
|-RecordDecl 0x222ba7d3228 <line:2085:9, line:2090:1> line:2085:16 struct localerefcount definition
| |-MaxFieldAlignmentAttr 0x222ba7d32e0 <<invalid sloc>> Implicit 64
| |-FieldDecl 0x222ba7d3358 <line:2086:9, col:15> col:15 locale 'char *'
| |-FieldDecl 0x222ba7d3418 <line:2087:9, col:18> col:18 wlocale 'wchar_t *'
| |-FieldDecl 0x222ba7d34b0 <line:2088:9, col:14> col:14 refcount 'int *'
| `-FieldDecl 0x222ba7d3520 <line:2089:9, col:14> col:14 wrefcount 'int *'
|-TypedefDecl 0x222ba7d35d8 <line:2085:1, line:2090:3> col:3 referenced locrefcount 'struct localerefcount':'struct localerefcount'
| `-ElaboratedType 0x222ba7d3580 'struct localerefcount' sugar
|   `-RecordType 0x222ba7d32c0 'struct localerefcount'
|     `-Record 0x222ba7d3228 'localerefcount'
|-RecordDecl 0x222ba7d86e0 prev 0x222ba7d29f0 <line:2092:9, line:2111:1> line:2092:16 struct threadlocaleinfostruct definition
| |-MaxFieldAlignmentAttr 0x222ba7d8760 <<invalid sloc>> Implicit 64
| |-FieldDecl 0x222ba7d87d8 <line:2093:9, col:13> col:13 refcount 'int'
| |-FieldDecl 0x222ba7d8848 <line:2094:9, col:22> col:22 lc_codepage 'unsigned int'
| |-FieldDecl 0x222ba7d88b8 <line:2095:9, col:22> col:22 lc_collate_cp 'unsigned int'
| |-FieldDecl 0x222ba7d8928 <line:2096:9, col:22> col:22 lc_time_cp 'unsigned int'
| |-FieldDecl 0x222ba7d8ae8 <line:2097:9, col:34> col:21 lc_category 'locrefcount [6]'
| |-FieldDecl 0x222ba7d8b58 <line:2098:9, col:13> col:13 lc_clike 'int'
| |-FieldDecl 0x222ba7d8bc8 <line:2099:9, col:13> col:13 mb_cur_max 'int'
| |-FieldDecl 0x222ba7d8c38 <line:2100:9, col:15> col:15 lconv_intl_refcount 'int *'
| |-FieldDecl 0x222ba7d8ca8 <line:2101:9, col:15> col:15 lconv_num_refcount 'int *'
| |-FieldDecl 0x222ba7d8d18 <line:2102:9, col:15> col:15 lconv_mon_refcount 'int *'
| |-RecordDecl 0x222ba7d8d70 parent 0x222b8ca3f78 <line:2103:9, col:16> col:16 struct lconv
| |-FieldDecl 0x222ba7d8f00 <col:9, col:24> col:24 lconv 'struct lconv *'
| |-FieldDecl 0x222ba7d8f70 <line:2104:9, col:15> col:15 ctype1_refcount 'int *'
| |-FieldDecl 0x222ba7d8fe0 <line:2105:9, col:26> col:26 ctype1 'unsigned short *'
| |-FieldDecl 0x222ba7d9050 <line:2106:9, col:32> col:32 pctype 'const unsigned short *'
| |-FieldDecl 0x222ba7d90c0 <line:2107:9, col:31> col:31 pclmap 'const unsigned char *'
| |-FieldDecl 0x222ba7d9130 <line:2108:9, col:31> col:31 pcumap 'const unsigned char *'
| |-FieldDecl 0x222ba7d9240 <line:2109:9, col:33> col:33 lc_time_curr 'struct __lc_time_data *'
| `-FieldDecl 0x222ba7d9378 <line:2110:9, col:32> col:19 locale_name 'wchar_t *[6]'
|-TypedefDecl 0x222ba7d9428 <line:2092:1, line:2111:3> col:3 threadlocinfo 'struct threadlocaleinfostruct':'struct threadlocaleinfostruct'
| `-ElaboratedType 0x222ba7d93d0 'struct threadlocaleinfostruct' sugar
|   `-RecordType 0x222ba7d2a90 'struct threadlocaleinfostruct'
|     `-Record 0x222ba7d86e0 'threadlocaleinfostruct'
|-FunctionDecl 0x222ba7d6850 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:47:9, col:142> col:25 _memccpy 'void *(void *, const void *, int, size_t) __attribute__((cdecl))':'void *(void *, const void *, int, size_t)'
| |-ParmVarDecl 0x222ba7d94b0 <col:69, col:76> col:76 _Dst 'void *'
| |-ParmVarDecl 0x222ba7d9560 <col:87, col:100> col:100 _Src 'const void *'
| |-ParmVarDecl 0x222ba7d95e0 <col:111, col:115> col:115 _Val 'int'
| `-ParmVarDecl 0x222ba7d9658 <col:126, col:133> col:133 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x222ba7d6c18 <line:48:54> col:54 implicit memchr 'void *(const void *, int, unsigned long long)' extern
| |-ParmVarDecl 0x222ba7d6cb8 <<invalid sloc>> <invalid sloc> 'const void *'
| |-ParmVarDecl 0x222ba7d6d20 <<invalid sloc>> <invalid sloc> 'int'
| `-ParmVarDecl 0x222ba7d6d88 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x222ba7d6e08 prev 0x222ba7d6c18 <col:38, col:150> col:54 memchr 'void *(const void *, int, unsigned long long)'
| |-ParmVarDecl 0x222ba7d6940 <col:94, col:107> col:107 _Buf 'const void *'
| |-ParmVarDecl 0x222ba7d69c0 <col:119, col:123> col:123 _Val 'int'
| `-ParmVarDecl 0x222ba7d6a38 <col:134, col:141> col:141 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x222ba7d71c8 <line:49:24, col:162> col:40 _memicmp 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
| |-ParmVarDecl 0x222ba7d6ef0 <col:77, col:90> col:90 _Buf1 'const void *'
| |-ParmVarDecl 0x222ba7d6f70 <col:125, col:138> col:138 _Buf2 'const void *'
| `-ParmVarDecl 0x222ba7d6fe8 <col:150, col:157> col:157 _Size 'size_t':'unsigned long long'
|-FunctionDecl 0x222ba7de740 <line:50:24, col:192> col:40 _memicmp_l 'int (const void *, const void *, size_t, _locale_t) __attribute__((cdecl))':'int (const void *, const void *, size_t, _locale_t)'
| |-ParmVarDecl 0x222ba7d72b0 <col:79, col:92> col:92 _Buf1 'const void *'
| |-ParmVarDecl 0x222ba7d7330 <col:127, col:140> col:140 _Buf2 'const void *'
| |-ParmVarDecl 0x222ba7d73a8 <col:152, col:159> col:159 _Size 'size_t':'unsigned long long'
| `-ParmVarDecl 0x222ba7d7440 <col:175, col:185> col:185 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x222ba7dea48 <line:51:32> col:32 implicit memcmp 'int (const void *, const void *, unsigned long long)' extern
| |-ParmVarDecl 0x222ba7deae8 <<invalid sloc>> <invalid sloc> 'const void *'
| |-ParmVarDecl 0x222ba7deb50 <<invalid sloc>> <invalid sloc> 'const void *'
| `-ParmVarDecl 0x222ba7debb8 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x222ba7dec38 prev 0x222ba7dea48 <col:16, col:144> col:32 memcmp 'int (const void *, const void *, unsigned long long)'
| |-ParmVarDecl 0x222ba7de830 <col:63, col:76> col:76 _Buf1 'const void *'
| |-ParmVarDecl 0x222ba7de8b0 <col:107, col:120> col:120 _Buf2 'const void *'
| `-ParmVarDecl 0x222ba7de928 <col:132, col:139> col:139 _Size 'size_t':'unsigned long long'
|-FunctionDecl 0x222ba7deff8 <line:55:17> col:17 implicit used memcpy 'void *(void *, const void *, unsigned long long)' extern
| |-ParmVarDecl 0x222ba7df098 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x222ba7df100 <<invalid sloc>> <invalid sloc> 'const void *'
| `-ParmVarDecl 0x222ba7df168 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x222ba7df1e8 prev 0x222ba7deff8 <col:1, col:127> col:17 used memcpy 'void *(void *, const void *, unsigned long long)'
| |-ParmVarDecl 0x222ba7ded20 <col:54, col:61> col:61 _Dst 'void *'
| |-ParmVarDecl 0x222ba7deda0 <col:91, col:104> col:104 _Src 'const void *'
| `-ParmVarDecl 0x222ba7dee18 <col:115, col:122> col:122 _Size 'size_t':'unsigned long long'
|-FunctionDecl 0x222ba7df688 <line:57:9, col:191> col:26 memcpy_s 'errno_t (void *, rsize_t, const void *, rsize_t) __attribute__((cdecl))':'errno_t (void *, rsize_t, const void *, rsize_t)'
| |-ParmVarDecl 0x222ba7df2f8 <col:82, col:89> col:89 _Dst 'void *'
| |-ParmVarDecl 0x222ba7df390 <col:100, col:108> col:108 _DstSize 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x222ba7df410 <col:150, col:163> col:163 _Src 'const void *'
| `-ParmVarDecl 0x222ba7df488 <col:174, col:182> col:182 _MaxCount 'rsize_t':'unsigned long long'
|-FunctionDecl 0x222ba7d79f8 <line:94:25> col:25 implicit used memset 'void *(void *, int, unsigned long long)' extern
| |-ParmVarDecl 0x222ba7d7a98 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x222ba7d7b00 <<invalid sloc>> <invalid sloc> 'int'
| `-ParmVarDecl 0x222ba7d7b68 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x222ba7d7be8 prev 0x222ba7d79f8 <col:9, col:107> col:25 used memset 'void *(void *, int, unsigned long long)'
| |-ParmVarDecl 0x222ba7d7720 <col:62, col:69> col:69 _Dst 'void *'
| |-ParmVarDecl 0x222ba7d77a0 <col:80, col:84> col:84 _Val 'int'
| `-ParmVarDecl 0x222ba7d7818 <col:95, col:102> col:102 _Size 'size_t':'unsigned long long'
|-FunctionDecl 0x222ba7d8068 <line:98:57> col:57 implicit memccpy 'void *(void *, const void *, int, unsigned long long)' extern
| |-ParmVarDecl 0x222ba7d8108 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x222ba7d8170 <<invalid sloc>> <invalid sloc> 'const void *'
| |-ParmVarDecl 0x222ba7d81d8 <<invalid sloc>> <invalid sloc> 'int'
| `-ParmVarDecl 0x222ba7d8240 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x222ba7d82c8 prev 0x222ba7d8068 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:98:187> col:57 memccpy 'void *(void *, const void *, int, unsigned long long)'
| |-ParmVarDecl 0x222ba7d7db0 <col:95, col:102> col:102 _Dst 'void *'
| |-ParmVarDecl 0x222ba7d7e30 <col:136, col:149> col:149 _Src 'const void *'
| |-ParmVarDecl 0x222ba7d7eb0 <col:160, col:164> col:164 _Val 'int'
| |-ParmVarDecl 0x222ba7d7f28 <col:175, col:182> col:182 _Size 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x222ba7d8388 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _memccpy. See online help for details." ""
|-FunctionDecl 0x222ba7df7f0 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:99:190> col:69 memicmp 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
| |-ParmVarDecl 0x222ba7d8550 <col:105, col:118> col:118 _Buf1 'const void *'
| |-ParmVarDecl 0x222ba7d85d0 <col:153, col:166> col:166 _Buf2 'const void *'
| |-ParmVarDecl 0x222ba7d8648 <col:178, col:185> col:185 _Size 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x222ba7df8a8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _memicmp. See online help for details." ""
|-FunctionDecl 0x222ba7dfca0 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:105:40, col:144> col:56 _strset_s 'errno_t (char *, size_t, int) __attribute__((cdecl))':'errno_t (char *, size_t, int)'
| |-ParmVarDecl 0x222ba7df9d0 <col:94, col:101> col:101 _Dst 'char *'
| |-ParmVarDecl 0x222ba7dfa48 <col:112, col:119> col:119 _DstSize 'size_t':'unsigned long long'
| `-ParmVarDecl 0x222ba7dfac8 <col:134, col:138> col:138 _Value 'int'
|-FunctionDecl 0x222ba7e0070 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:107:88 _strset 'char *(char *, int) __attribute__((cdecl))':'char *(char *, int)'
| |-ParmVarDecl 0x222ba7dfe80 <col:108, col:114> col:114 _Dest 'char *'
| |-ParmVarDecl 0x222ba7dff00 <col:126, col:131> col:131 _Value 'int'
| `-DeprecatedAttr 0x222ba7e0120 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _strset_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x222ba7e0530 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:109:40, col:158> col:56 strcpy_s 'errno_t (char *, rsize_t, const char *) __attribute__((cdecl))':'errno_t (char *, rsize_t, const char *)'
| |-ParmVarDecl 0x222ba7e0268 <col:94, col:101> col:101 _Dst 'char *'
| |-ParmVarDecl 0x222ba7e02e0 <col:112, col:120> col:120 _SizeInBytes 'rsize_t':'unsigned long long'
| `-ParmVarDecl 0x222ba7e0360 <col:141, col:154> col:154 _Src 'const char *'
|-FunctionDecl 0x222ba7e3980 <line:112:88> col:88 implicit strcpy 'char *(char *, const char *)' extern
| |-ParmVarDecl 0x222ba7e3a20 <<invalid sloc>> <invalid sloc> 'char *'
| `-ParmVarDecl 0x222ba7e3a88 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x222ba7e3b00 prev 0x222ba7e3980 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:112:88 strcpy 'char *(char *, const char *)'
| |-ParmVarDecl 0x222ba7e3790 <col:142, col:148> col:148 _Dest 'char *'
| |-ParmVarDecl 0x222ba7e3810 <col:162, col:176> col:176 _Source 'const char *'
| `-DeprecatedAttr 0x222ba7e3bb0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using strcpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x222ba7e3f08 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:114:40, col:161> col:56 strcat_s 'errno_t (char *, rsize_t, const char *) __attribute__((cdecl))':'errno_t (char *, rsize_t, const char *)'
| |-ParmVarDecl 0x222ba7e3cf8 <col:97, col:104> col:104 _Dst 'char *'
| |-ParmVarDecl 0x222ba7e3d70 <col:115, col:123> col:123 _SizeInBytes 'rsize_t':'unsigned long long'
| `-ParmVarDecl 0x222ba7e3df0 <col:144, col:157> col:157 _Src 'const char *'
|-FunctionDecl 0x222ba7e4230 <line:118:88> col:88 implicit strcat 'char *(char *, const char *)' extern
| |-ParmVarDecl 0x222ba7e42d0 <<invalid sloc>> <invalid sloc> 'char *'
| `-ParmVarDecl 0x222ba7e4338 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x222ba7e43b0 prev 0x222ba7e4230 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:118:88 strcat 'char *(char *, const char *)'
| |-ParmVarDecl 0x222ba7e40b0 <col:170, col:176> col:176 _Dest 'char *'
| |-ParmVarDecl 0x222ba7e4130 <col:190, col:204> col:204 _Source 'const char *'
| `-DeprecatedAttr 0x222ba7e4460 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using strcat_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x222ba7e1770 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:120:32> col:32 implicit strcmp 'int (const char *, const char *)' extern
| |-ParmVarDecl 0x222ba7e1810 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x222ba7e1878 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x222ba7e18f0 prev 0x222ba7e1770 <col:16, col:91> col:32 strcmp 'int (const char *, const char *)'
| |-ParmVarDecl 0x222ba7e45a8 <col:46, col:59> col:59 _Str1 'const char *'
| `-ParmVarDecl 0x222ba7e4628 <col:73, col:86> col:86 _Str2 'const char *'
|-FunctionDecl 0x222ba7e1b40 <line:121:32> col:32 implicit strlen 'unsigned long long (const char *)' extern
| `-ParmVarDecl 0x222ba7e1be0 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x222ba7e1c50 prev 0x222ba7e1b40 <col:16, col:63> col:32 strlen 'unsigned long long (const char *)'
| `-ParmVarDecl 0x222ba7e19d0 <col:46, col:59> col:59 _Str 'const char *'
|-FunctionDecl 0x222ba7e1f48 <line:125:1, col:92> col:17 used strnlen 'size_t (const char *, size_t) __attribute__((cdecl))':'size_t (const char *, size_t)'
| |-ParmVarDecl 0x222ba7e1d28 <col:52, col:65> col:65 _Str 'const char *'
| `-ParmVarDecl 0x222ba7e1da0 <col:76, col:83> col:83 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x222ba7e2198 <line:127:16, line:133:1> line:130:19 strnlen_s 'size_t (const char *, size_t) __attribute__((cdecl))':'size_t (const char *, size_t)' static inline
| |-ParmVarDecl 0x222ba7e2028 <col:56, col:69> col:69 used _Str 'const char *'
| |-ParmVarDecl 0x222ba7e20a0 <col:80, col:87> col:87 used _MaxCount 'size_t':'unsigned long long'
| `-CompoundStmt 0x222ba7e24c8 <line:131:1, line:133:1>
|   `-ReturnStmt 0x222ba7e24b8 <line:132:5, col:51>
|     `-ConditionalOperator 0x222ba7e2488 <col:12, col:51> 'unsigned long long'
|       |-ParenExpr 0x222ba7e22f8 <col:12, col:20> 'int'
|       | `-BinaryOperator 0x222ba7e22d8 <col:13, col:19> 'int' '=='
|       |   |-ImplicitCastExpr 0x222ba7e22a8 <col:13> 'const char *' <LValueToRValue>
|       |   | `-DeclRefExpr 0x222ba7e2260 <col:13> 'const char *' lvalue ParmVar 0x222ba7e2028 '_Str' 'const char *'
|       |   `-ImplicitCastExpr 0x222ba7e22c0 <col:19> 'const char *' <NullToPointer>
|       |     `-IntegerLiteral 0x222ba7e2280 <col:19> 'int' 0
|       |-ImplicitCastExpr 0x222ba7e2470 <col:24> 'unsigned long long' <IntegralCast>
|       | `-IntegerLiteral 0x222ba7e2318 <col:24> 'int' 0
|       `-CallExpr 0x222ba7e2410 <col:28, col:51> 'size_t':'unsigned long long'
|         |-ImplicitCastExpr 0x222ba7e23f8 <col:28> 'size_t (*)(const char *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x222ba7e2340 <col:28> 'size_t (const char *, size_t) __attribute__((cdecl))':'size_t (const char *, size_t)' Function 0x222ba7e1f48 'strnlen' 'size_t (const char *, size_t) __attribute__((cdecl))':'size_t (const char *, size_t)'
|         |-ImplicitCastExpr 0x222ba7e2440 <col:36> 'const char *' <LValueToRValue>
|         | `-DeclRefExpr 0x222ba7e2360 <col:36> 'const char *' lvalue ParmVar 0x222ba7e2028 '_Str' 'const char *'
|         `-ImplicitCastExpr 0x222ba7e2458 <col:42> 'size_t':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x222ba7e2380 <col:42> 'size_t':'unsigned long long' lvalue ParmVar 0x222ba7e20a0 '_MaxCount' 'size_t':'unsigned long long'
|-FunctionDecl 0x222ba7e27c8 <line:136:28, col:209> col:44 memmove_s 'errno_t (void *, rsize_t, const void *, rsize_t) __attribute__((cdecl))':'errno_t (void *, rsize_t, const void *, rsize_t)'
| |-ParmVarDecl 0x222ba7e24f8 <col:100, col:107> col:107 _Dst 'void *'
| |-ParmVarDecl 0x222ba7e2570 <col:118, col:126> col:126 _DstSize 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x222ba7e25f0 <col:168, col:181> col:181 _Src 'const void *'
| `-ParmVarDecl 0x222ba7e2668 <col:192, col:200> col:200 _MaxCount 'rsize_t':'unsigned long long'
|-FunctionDecl 0x222ba7e2ad0 <line:139:67> col:67 implicit memmove 'void *(void *, const void *, unsigned long long)' extern
| |-ParmVarDecl 0x222ba7e2b70 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x222ba7e2bd8 <<invalid sloc>> <invalid sloc> 'const void *'
| `-ParmVarDecl 0x222ba7e2c40 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x222ba7e2cc0 prev 0x222ba7e2ad0 <col:51, col:186> col:67 memmove 'void *(void *, const void *, unsigned long long)'
| |-ParmVarDecl 0x222ba7e28b8 <col:109, col:116> col:116 _Dst 'void *'
| |-ParmVarDecl 0x222ba7e2938 <col:150, col:163> col:163 _Src 'const void *'
| `-ParmVarDecl 0x222ba7e29b0 <col:174, col:181> col:181 _Size 'size_t':'unsigned long long'
|-FunctionDecl 0x222ba7e2ef8 <line:146:24, col:76> col:40 _strdup 'char *(const char *) __attribute__((cdecl))':'char *(const char *)'
| `-ParmVarDecl 0x222ba7e2da8 <col:59, col:72> col:72 _Src 'const char *'
|-FunctionDecl 0x222ba7e31c0 <line:152:54> col:54 implicit strchr 'char *(const char *, int)' extern
| |-ParmVarDecl 0x222ba7e3260 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x222ba7e32c8 <<invalid sloc>> <invalid sloc> 'int'
|-FunctionDecl 0x222ba7e3340 prev 0x222ba7e31c0 <col:38, col:100> col:54 strchr 'char *(const char *, int)'
| |-ParmVarDecl 0x222ba7e2fd0 <col:68, col:81> col:81 _Str 'const char *'
| `-ParmVarDecl 0x222ba7e3050 <col:92, col:96> col:96 _Val 'int'
|-FunctionDecl 0x222ba7e35a0 <line:153:24, col:103> col:40 _stricmp 'int (const char *, const char *) __attribute__((cdecl))':'int (const char *, const char *)'
| |-ParmVarDecl 0x222ba7e3420 <col:57, col:70> col:70 _Str1 'const char *'
| `-ParmVarDecl 0x222ba7e34a0 <col:85, col:98> col:98 _Str2 'const char *'
|-FunctionDecl 0x222ba7e4820 <line:154:24, col:103> col:40 _strcmpi 'int (const char *, const char *) __attribute__((cdecl))':'int (const char *, const char *)'
| |-ParmVarDecl 0x222ba7e3680 <col:57, col:70> col:70 _Str1 'const char *'
| `-ParmVarDecl 0x222ba7e3700 <col:85, col:98> col:98 _Str2 'const char *'
|-FunctionDecl 0x222ba7e4bd8 <line:155:24, col:133> col:40 _stricmp_l 'int (const char *, const char *, _locale_t) __attribute__((cdecl))':'int (const char *, const char *, _locale_t)'
| |-ParmVarDecl 0x222ba7e4900 <col:59, col:72> col:72 _Str1 'const char *'
| |-ParmVarDecl 0x222ba7e4980 <col:87, col:100> col:100 _Str2 'const char *'
| `-ParmVarDecl 0x222ba7e49f8 <col:116, col:126> col:126 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x222ba7e4e40 <line:156:24, col:103> col:40 strcoll 'int (const char *, const char *) __attribute__((cdecl))':'int (const char *, const char *)'
| |-ParmVarDecl 0x222ba7e4cc0 <col:56, col:69> col:69 _Str1 'const char *'
| `-ParmVarDecl 0x222ba7e4d40 <col:84, col:98> col:98 _Str2 'const char *'
|-FunctionDecl 0x222ba7e5138 <line:157:24, col:133> col:40 _strcoll_l 'int (const char *, const char *, _locale_t) __attribute__((cdecl))':'int (const char *, const char *, _locale_t)'
| |-ParmVarDecl 0x222ba7e4f20 <col:59, col:72> col:72 _Str1 'const char *'
| |-ParmVarDecl 0x222ba7e4fa0 <col:87, col:100> col:100 _Str2 'const char *'
| `-ParmVarDecl 0x222ba7e5018 <col:116, col:126> col:126 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x222ba7e53a0 <line:158:24, col:104> col:40 _stricoll 'int (const char *, const char *) __attribute__((cdecl))':'int (const char *, const char *)'
| |-ParmVarDecl 0x222ba7e5220 <col:58, col:71> col:71 _Str1 'const char *'
| `-ParmVarDecl 0x222ba7e52a0 <col:86, col:99> col:99 _Str2 'const char *'
|-FunctionDecl 0x222ba7e5698 <line:159:24, col:134> col:40 _stricoll_l 'int (const char *, const char *, _locale_t) __attribute__((cdecl))':'int (const char *, const char *, _locale_t)'
| |-ParmVarDecl 0x222ba7e5480 <col:60, col:73> col:73 _Str1 'const char *'
| |-ParmVarDecl 0x222ba7e5500 <col:88, col:101> col:101 _Str2 'const char *'
| `-ParmVarDecl 0x222ba7e5578 <col:117, col:127> col:127 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x222ba79f5b8 <line:160:24, col:167> col:40 _strncoll 'int (const char *, const char *, size_t) __attribute__((cdecl))':'int (const char *, const char *, size_t)'
| |-ParmVarDecl 0x222ba79f2e0 <col:79, col:92> col:92 _Str1 'const char *'
| |-ParmVarDecl 0x222ba79f360 <col:126, col:139> col:139 _Str2 'const char *'
| `-ParmVarDecl 0x222ba79f3d8 <col:151, col:158> col:158 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x222ba79fa20 <line:161:24, col:195> col:40 _strncoll_l 'int (const char *, const char *, size_t, _locale_t) __attribute__((cdecl))':'int (const char *, const char *, size_t, _locale_t)'
| |-ParmVarDecl 0x222ba79f6a0 <col:79, col:92> col:92 _Str1 'const char *'
| |-ParmVarDecl 0x222ba79f720 <col:126, col:139> col:139 _Str2 'const char *'
| |-ParmVarDecl 0x222ba79f798 <col:151, col:158> col:158 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x222ba79f810 <col:178, col:188> col:188 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x222ba79fd28 <line:162:24, col:167> col:40 _strnicoll 'int (const char *, const char *, size_t) __attribute__((cdecl))':'int (const char *, const char *, size_t)'
| |-ParmVarDecl 0x222ba79fb10 <col:79, col:92> col:92 _Str1 'const char *'
| |-ParmVarDecl 0x222ba79fb90 <col:126, col:139> col:139 _Str2 'const char *'
| `-ParmVarDecl 0x222ba79fc08 <col:151, col:158> col:158 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x222ba7a00c0 <line:163:24, col:196> col:40 _strnicoll_l 'int (const char *, const char *, size_t, _locale_t) __attribute__((cdecl))':'int (const char *, const char *, size_t, _locale_t)'
| |-ParmVarDecl 0x222ba79fe10 <col:80, col:93> col:93 _Str1 'const char *'
| |-ParmVarDecl 0x222ba79fe90 <col:127, col:140> col:140 _Str2 'const char *'
| |-ParmVarDecl 0x222ba79ff08 <col:152, col:159> col:159 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x222ba79ff80 <col:179, col:189> col:189 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x222ba82c078 <line:164:40> col:40 implicit strcspn 'unsigned long long (const char *, const char *)' extern
| |-ParmVarDecl 0x222ba82c118 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x222ba82c180 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x222ba82c1f8 prev 0x222ba82c078 <col:24, col:104> col:40 strcspn 'unsigned long long (const char *, const char *)'
| |-ParmVarDecl 0x222ba7a01b0 <col:56, col:69> col:69 _Str 'const char *'
| `-ParmVarDecl 0x222ba7a0230 <col:83, col:96> col:96 _Control 'const char *'
|-FunctionDecl 0x222ba82c4b0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:165:118> col:77 _strerror 'char *(const char *) __attribute__((cdecl))':'char *(const char *)'
| |-ParmVarDecl 0x222ba82c3d0 <col:98, col:111> col:111 _ErrMsg 'const char *'
| `-DeprecatedAttr 0x222ba82c558 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _strerror_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x222ba82c930 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:166:28, col:155> col:44 _strerror_s 'errno_t (char *, size_t, const char *) __attribute__((cdecl))':'errno_t (char *, size_t, const char *)'
| |-ParmVarDecl 0x222ba82c6a0 <col:85, col:92> col:92 _Buf 'char *'
| |-ParmVarDecl 0x222ba82c718 <col:103, col:110> col:110 _SizeInBytes 'size_t':'unsigned long long'
| `-ParmVarDecl 0x222ba82c798 <col:135, col:148> col:148 _ErrMsg 'const char *'
|-FunctionDecl 0x222ba82cc48 <line:168:76> col:76 implicit strerror 'char *(int)' extern
| `-ParmVarDecl 0x222ba82cce8 <<invalid sloc>> <invalid sloc> 'int'
|-FunctionDecl 0x222ba82cd58 prev 0x222ba82cc48 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:168:93> col:76 strerror 'char *(int)'
| |-ParmVarDecl 0x222ba82cb10 <col:90> col:93 'int'
| `-DeprecatedAttr 0x222ba82ce00 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using strerror_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x222ba82d190 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:170:28, col:139> col:44 strerror_s 'errno_t (char *, size_t, int) __attribute__((cdecl))':'errno_t (char *, size_t, int)'
| |-ParmVarDecl 0x222ba82cf80 <col:84, col:91> col:91 _Buf 'char *'
| |-ParmVarDecl 0x222ba82cff8 <col:102, col:109> col:109 _SizeInBytes 'size_t':'unsigned long long'
| `-ParmVarDecl 0x222ba82d078 <col:128, col:132> col:132 _ErrNum 'int'
|-FunctionDecl 0x222ba82d498 <line:173:28, col:109> col:44 _strlwr_s 'errno_t (char *, size_t) __attribute__((cdecl))':'errno_t (char *, size_t)'
| |-ParmVarDecl 0x222ba82d278 <col:79, col:86> col:86 _Str 'char *'
| `-ParmVarDecl 0x222ba82d2f0 <col:97, col:104> col:104 _Size 'size_t':'unsigned long long'
|-FunctionDecl 0x222ba82d788 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1933:117> D:\Microsoft Visual Studio 12.0\VC\include\string.h:175:79 _strlwr 'char *(char *) __attribute__((cdecl))':'char *(char *)'
| |-ParmVarDecl 0x222ba82d638 <col:99, col:105> col:105 _String 'char *'
| `-DeprecatedAttr 0x222ba82d830 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _strlwr_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x222ba82dc40 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:176:28, col:139> col:44 _strlwr_s_l 'errno_t (char *, size_t, _locale_t) __attribute__((cdecl))':'errno_t (char *, size_t, _locale_t)'
| |-ParmVarDecl 0x222ba82d978 <col:81, col:88> col:88 _Str 'char *'
| |-ParmVarDecl 0x222ba82d9f0 <col:99, col:106> col:106 _Size 'size_t':'unsigned long long'
| `-ParmVarDecl 0x222ba82da68 <col:122, col:132> col:132 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x222ba827fd0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:178:82 _strlwr_l 'char *(char *, _locale_t) __attribute__((cdecl))':'char *(char *, _locale_t)'
| |-ParmVarDecl 0x222ba82dde8 <col:148, col:154> col:154 _String 'char *'
| |-ParmVarDecl 0x222ba82de60 <col:172, col:183> col:183 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x222ba828080 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _strlwr_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x222ba828538 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:180:40, col:206> col:56 strncat_s 'errno_t (char *, rsize_t, const char *, rsize_t) __attribute__((cdecl))':'errno_t (char *, rsize_t, const char *, rsize_t)'
| |-ParmVarDecl 0x222ba8281c8 <col:98, col:105> col:105 _Dst 'char *'
| |-ParmVarDecl 0x222ba828240 <col:116, col:124> col:124 _SizeInBytes 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x222ba8282c0 <col:165, col:178> col:178 _Src 'const char *'
| `-ParmVarDecl 0x222ba828338 <col:189, col:197> col:197 _MaxCount 'rsize_t':'unsigned long long'
|-FunctionDecl 0x222ba8289b8 <line:186:83> col:83 implicit strncat 'char *(char *, const char *, unsigned long long)' extern
| |-ParmVarDecl 0x222ba828a58 <<invalid sloc>> <invalid sloc> 'char *'
| |-ParmVarDecl 0x222ba828ac0 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x222ba828b28 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x222ba828ba8 prev 0x222ba8289b8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1980:149> D:\Microsoft Visual Studio 12.0\VC\include\string.h:186:83 strncat 'char *(char *, const char *, unsigned long long)'
| |-ParmVarDecl 0x222ba8286e8 <col:161, col:167> col:167 _Dest 'char *'
| |-ParmVarDecl 0x222ba828768 <col:198, col:212> col:212 _Source 'const char *'
| |-ParmVarDecl 0x222ba8287e0 <col:226, col:234> col:234 _Count 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x222ba828c60 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using strncat_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x222ba830050 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:188:40> col:40 implicit strncmp 'int (const char *, const char *, unsigned long long)' extern
| |-ParmVarDecl 0x222ba8300f0 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x222ba830158 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x222ba8301c0 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x222ba830240 prev 0x222ba830050 <col:24, col:163> col:40 strncmp 'int (const char *, const char *, unsigned long long)'
| |-ParmVarDecl 0x222ba828da8 <col:75, col:88> col:88 _Str1 'const char *'
| |-ParmVarDecl 0x222ba828e28 <col:122, col:135> col:135 _Str2 'const char *'
| `-ParmVarDecl 0x222ba828ea0 <col:147, col:154> col:154 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x222ba830540 <line:189:24, col:165> col:40 _strnicmp 'int (const char *, const char *, size_t) __attribute__((cdecl))':'int (const char *, const char *, size_t)'
| |-ParmVarDecl 0x222ba830328 <col:77, col:90> col:90 _Str1 'const char *'
| |-ParmVarDecl 0x222ba8303a8 <col:124, col:137> col:137 _Str2 'const char *'
| `-ParmVarDecl 0x222ba830420 <col:149, col:156> col:156 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x222ba8308d8 <line:190:24, col:195> col:40 _strnicmp_l 'int (const char *, const char *, size_t, _locale_t) __attribute__((cdecl))':'int (const char *, const char *, size_t, _locale_t)'
| |-ParmVarDecl 0x222ba830628 <col:79, col:92> col:92 _Str1 'const char *'
| |-ParmVarDecl 0x222ba8306a8 <col:126, col:139> col:139 _Str2 'const char *'
| |-ParmVarDecl 0x222ba830720 <col:151, col:158> col:158 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x222ba830798 <col:178, col:188> col:188 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x222ba830c70 <line:192:40, col:203> col:56 strncpy_s 'errno_t (char *, rsize_t, const char *, rsize_t) __attribute__((cdecl))':'errno_t (char *, rsize_t, const char *, rsize_t)'
| |-ParmVarDecl 0x222ba8309c8 <col:95, col:102> col:102 _Dst 'char *'
| |-ParmVarDecl 0x222ba830a40 <col:113, col:121> col:121 _SizeInBytes 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x222ba830ac0 <col:162, col:175> col:175 _Src 'const char *'
| `-ParmVarDecl 0x222ba830b38 <col:186, col:194> col:194 _MaxCount 'rsize_t':'unsigned long long'
|-FunctionDecl 0x222ba828fc8 <line:195:83> col:83 implicit strncpy 'char *(char *, const char *, unsigned long long)' extern
| |-ParmVarDecl 0x222ba829068 <<invalid sloc>> <invalid sloc> 'char *'
| |-ParmVarDecl 0x222ba8290d0 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x222ba829138 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x222ba8291b8 prev 0x222ba828fc8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1980:149> D:\Microsoft Visual Studio 12.0\VC\include\string.h:195:83 strncpy 'char *(char *, const char *, unsigned long long)'
| |-ParmVarDecl 0x222ba830e20 <col:167, col:173> col:173 _Dest 'char *'
| |-ParmVarDecl 0x222ba830ea0 <col:204, col:218> col:218 _Source 'const char *'
| |-ParmVarDecl 0x222ba830f18 <col:232, col:240> col:240 _Count 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x222ba829270 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using strncpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x222ba829728 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:196:40, col:174> col:56 _strnset_s 'errno_t (char *, size_t, int, size_t) __attribute__((cdecl))':'errno_t (char *, size_t, int, size_t)'
| |-ParmVarDecl 0x222ba8293b8 <col:99, col:106> col:106 _Str 'char *'
| |-ParmVarDecl 0x222ba829430 <col:117, col:124> col:124 _SizeInBytes 'size_t':'unsigned long long'
| |-ParmVarDecl 0x222ba8294b0 <col:143, col:147> col:147 _Val 'int'
| `-ParmVarDecl 0x222ba829528 <col:158, col:165> col:165 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x222ba829ba8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1980:149> D:\Microsoft Visual Studio 12.0\VC\include\string.h:198:83 _strnset 'char *(char *, int, size_t) __attribute__((cdecl))':'char *(char *, int, size_t)'
| |-ParmVarDecl 0x222ba8298d8 <col:163, col:169> col:169 _Dest 'char *'
| |-ParmVarDecl 0x222ba829958 <col:181, col:186> col:186 _Val 'int'
| |-ParmVarDecl 0x222ba8299d0 <col:197, col:205> col:205 _Count 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x222ba829c60 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _strnset_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x222ba82afd0 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:199:54> col:54 implicit strpbrk 'char *(const char *, const char *)' extern
| |-ParmVarDecl 0x222ba82b070 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x222ba82b0d8 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x222ba82b150 prev 0x222ba82afd0 <col:38, col:116> col:54 strpbrk 'char *(const char *, const char *)'
| |-ParmVarDecl 0x222ba829da8 <col:69, col:82> col:82 _Str 'const char *'
| `-ParmVarDecl 0x222ba829e28 <col:95, col:108> col:108 _Control 'const char *'
|-FunctionDecl 0x222ba82b3b0 <line:200:54> col:54 implicit strrchr 'char *(const char *, int)' extern
| |-ParmVarDecl 0x222ba82b450 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x222ba82b4b8 <<invalid sloc>> <invalid sloc> 'int'
|-FunctionDecl 0x222ba82b530 prev 0x222ba82b3b0 <col:38, col:100> col:54 strrchr 'char *(const char *, int)'
| |-ParmVarDecl 0x222ba82b230 <col:69, col:82> col:82 _Str 'const char *'
| `-ParmVarDecl 0x222ba82b2b0 <col:93, col:97> col:97 _Ch 'int'
|-FunctionDecl 0x222ba82b6f0 <line:201:9, col:54> col:25 _strrev 'char *(char *) __attribute__((cdecl))':'char *(char *)'
| `-ParmVarDecl 0x222ba82b610 <col:43, col:50> col:50 _Str 'char *'
|-FunctionDecl 0x222ba82b940 <line:202:40> col:40 implicit strspn 'unsigned long long (const char *, const char *)' extern
| |-ParmVarDecl 0x222ba82b9e0 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x222ba82ba48 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x222ba82bac0 prev 0x222ba82b940 <col:24, col:101> col:40 strspn 'unsigned long long (const char *, const char *)'
| |-ParmVarDecl 0x222ba82b7c8 <col:54, col:67> col:67 _Str 'const char *'
| `-ParmVarDecl 0x222ba82b848 <col:80, col:93> col:93 _Control 'const char *'
|-FunctionDecl 0x222ba82bd20 <line:203:70> col:70 implicit strstr 'char *(const char *, const char *)' extern
| |-ParmVarDecl 0x222ba82bdc0 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x222ba82be28 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x222ba82bea0 prev 0x222ba82bd20 <col:54, col:130> col:70 strstr 'char *(const char *, const char *)'
| |-ParmVarDecl 0x222ba82bba0 <col:84, col:97> col:97 _Str 'const char *'
| `-ParmVarDecl 0x222ba82bc20 <col:110, col:123> col:123 _SubStr 'const char *'
|-FunctionDecl 0x222ba82a1c0 <line:204:74> col:74 implicit strtok 'char *(char *, const char *)' extern
| |-ParmVarDecl 0x222ba82a260 <<invalid sloc>> <invalid sloc> 'char *'
| `-ParmVarDecl 0x222ba82a2c8 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x222ba82a340 prev 0x222ba82a1c0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:204:134> col:74 strtok 'char *(char *, const char *)'
| |-ParmVarDecl 0x222ba82a040 <col:95, col:102> col:102 _Str 'char *'
| |-ParmVarDecl 0x222ba82a0c0 <col:115, col:128> col:128 _Delim 'const char *'
| `-DeprecatedAttr 0x222ba82a3f0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using strtok_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x222ba82a7d8 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:206:36, col:162> col:52 strtok_s 'char *(char *, const char *, char **) __attribute__((cdecl))':'char *(char *, const char *, char **)'
| |-ParmVarDecl 0x222ba82a538 <col:75, col:82> col:82 _Str 'char *'
| |-ParmVarDecl 0x222ba82a5b8 <col:95, col:108> col:108 _Delim 'const char *'
| `-ParmVarDecl 0x222ba82a638 <col:146, col:154> col:154 _Context 'char **'
|-FunctionDecl 0x222ba82aa30 <line:208:28, col:109> col:44 _strupr_s 'errno_t (char *, size_t) __attribute__((cdecl))':'errno_t (char *, size_t)'
| |-ParmVarDecl 0x222ba82a8c0 <col:79, col:86> col:86 _Str 'char *'
| `-ParmVarDecl 0x222ba82a938 <col:97, col:104> col:104 _Size 'size_t':'unsigned long long'
|-FunctionDecl 0x222ba82acb0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1933:117> D:\Microsoft Visual Studio 12.0\VC\include\string.h:210:79 _strupr 'char *(char *) __attribute__((cdecl))':'char *(char *)'
| |-ParmVarDecl 0x222ba82abd0 <col:99, col:105> col:105 _String 'char *'
| `-DeprecatedAttr 0x222ba82ad58 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _strupr_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x222ba82e120 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:211:28, col:130> col:44 _strupr_s_l 'errno_t (char *, size_t, _locale_t) __attribute__((cdecl))':'errno_t (char *, size_t, _locale_t)'
| |-ParmVarDecl 0x222ba82aea0 <col:81, col:88> col:88 _Str 'char *'
| |-ParmVarDecl 0x222ba82df90 <col:99, col:106> col:106 _Size 'size_t':'unsigned long long'
| `-ParmVarDecl 0x222ba82e008 <col:113, col:123> col:123 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x222ba82e440 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:213:82 _strupr_l 'char *(char *, _locale_t) __attribute__((cdecl))':'char *(char *, _locale_t)'
| |-ParmVarDecl 0x222ba82e2c8 <col:148, col:154> col:154 _String 'char *'
| |-ParmVarDecl 0x222ba82e340 <col:172, col:183> col:183 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x222ba82e4f0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _strupr_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x222ba82e900 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:214:44> col:44 implicit strxfrm 'unsigned long long (char *, const char *, unsigned long long)' extern
| |-ParmVarDecl 0x222ba82e9a0 <<invalid sloc>> <invalid sloc> 'char *'
| |-ParmVarDecl 0x222ba82ea08 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x222ba82ea70 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x222ba82eaf0 prev 0x222ba82e900 <col:28, col:155> col:44 strxfrm 'unsigned long long (char *, const char *, unsigned long long)'
| |-ParmVarDecl 0x222ba82e638 <col:95, col:102> col:102 _Dst 'char *'
| |-ParmVarDecl 0x222ba82e6b8 <col:115, col:128> col:128 _Src 'const char *'
| `-ParmVarDecl 0x222ba82e730 <col:139, col:146> col:146 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x222ba833ff0 <line:215:28, col:185> col:44 _strxfrm_l 'size_t (char *, const char *, size_t, _locale_t) __attribute__((cdecl))':'size_t (char *, const char *, size_t, _locale_t)'
| |-ParmVarDecl 0x222ba82ebd8 <col:97, col:104> col:104 _Dst 'char *'
| |-ParmVarDecl 0x222ba82ec58 <col:117, col:130> col:130 _Src 'const char *'
| |-ParmVarDecl 0x222ba82ecd0 <col:141, col:148> col:148 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x222ba82ed48 <col:168, col:178> col:178 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x222ba8342a0 <line:245:71> col:71 implicit strdup 'char *(const char *)' extern
| `-ParmVarDecl 0x222ba834340 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x222ba8343b0 prev 0x222ba8342a0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:245:106> col:71 strdup 'char *(const char *)'
| |-ParmVarDecl 0x222ba8341c0 <col:89, col:102> col:102 _Src 'const char *'
| `-DeprecatedAttr 0x222ba834458 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strdup. See online help for details." ""
|-FunctionDecl 0x222ba8347a0 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:252:129> col:69 strcmpi 'int (const char *, const char *) __attribute__((cdecl))':'int (const char *, const char *)'
| |-ParmVarDecl 0x222ba834620 <col:84, col:97> col:97 _Str1 'const char *'
| |-ParmVarDecl 0x222ba8346a0 <col:111, col:124> col:124 _Str2 'const char *'
| `-DeprecatedAttr 0x222ba834850 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strcmpi. See online help for details." ""
|-FunctionDecl 0x222ba834b98 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:253:129> col:69 stricmp 'int (const char *, const char *) __attribute__((cdecl))':'int (const char *, const char *)'
| |-ParmVarDecl 0x222ba834a18 <col:84, col:97> col:97 _Str1 'const char *'
| |-ParmVarDecl 0x222ba834a98 <col:111, col:124> col:124 _Str2 'const char *'
| `-DeprecatedAttr 0x222ba834c48 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _stricmp. See online help for details." ""
|-FunctionDecl 0x222ba834ef0 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:254:84> col:56 strlwr 'char *(char *) __attribute__((cdecl))':'char *(char *)'
| |-ParmVarDecl 0x222ba834e10 <col:73, col:80> col:80 _Str 'char *'
| `-DeprecatedAttr 0x222ba834f98 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strlwr. See online help for details." ""
|-FunctionDecl 0x222ba8333b8 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:255:193> col:70 strnicmp 'int (const char *, const char *, size_t) __attribute__((cdecl))':'int (const char *, const char *, size_t)'
| |-ParmVarDecl 0x222ba8331a0 <col:106, col:119> col:119 _Str1 'const char *'
| |-ParmVarDecl 0x222ba833220 <col:153, col:166> col:166 _Str 'const char *'
| |-ParmVarDecl 0x222ba833298 <col:177, col:184> col:184 _MaxCount 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x222ba833470 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strnicmp. See online help for details." ""
|-FunctionDecl 0x222ba833850 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:256:143> col:57 strnset 'char *(char *, int, size_t) __attribute__((cdecl))':'char *(char *, int, size_t)'
| |-ParmVarDecl 0x222ba833638 <col:94, col:101> col:101 _Str 'char *'
| |-ParmVarDecl 0x222ba8336b8 <col:112, col:116> col:116 _Val 'int'
| |-ParmVarDecl 0x222ba833730 <col:127, col:134> col:134 _MaxCount 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x222ba833908 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strnset. See online help for details." ""
|-FunctionDecl 0x222ba833bb0 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:257:84> col:56 strrev 'char *(char *) __attribute__((cdecl))':'char *(char *)'
| |-ParmVarDecl 0x222ba833ad0 <col:73, col:80> col:80 _Str 'char *'
| `-DeprecatedAttr 0x222ba833c58 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strrev. See online help for details." ""
|-FunctionDecl 0x222ba831fd0 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:258:99> col:56 strset 'char *(char *, int) __attribute__((cdecl))':'char *(char *, int)'
| |-ParmVarDecl 0x222ba833e20 <col:73, col:80> col:80 _Str 'char *'
| |-ParmVarDecl 0x222ba833ea0 <col:91, col:95> col:95 _Val 'int'
| `-DeprecatedAttr 0x222ba832080 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strset. See online help for details." ""
|-FunctionDecl 0x222ba832328 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:259:84> col:56 strupr 'char *(char *) __attribute__((cdecl))':'char *(char *)'
| |-ParmVarDecl 0x222ba832248 <col:73, col:80> col:80 _Str 'char *'
| `-DeprecatedAttr 0x222ba8323d0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strupr. See online help for details." ""
|-FunctionDecl 0x222ba832660 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:273:24, col:77> col:42 _wcsdup 'wchar_t *(const wchar_t *) __attribute__((cdecl))':'wchar_t *(const wchar_t *)'
| `-ParmVarDecl 0x222ba8324f0 <col:57, col:73> col:73 _Str 'const wchar_t *'
|-FunctionDecl 0x222ba8329f0 <line:280:40, col:167> col:56 wcscat_s 'errno_t (wchar_t *, rsize_t, const wchar_t *) __attribute__((cdecl))':'errno_t (wchar_t *, rsize_t, const wchar_t *)'
| |-ParmVarDecl 0x222ba832730 <col:97, col:107> col:107 _Dst 'wchar_t *'
| |-ParmVarDecl 0x222ba8327a8 <col:118, col:126> col:126 _SizeInWords 'rsize_t':'unsigned long long'
| `-ParmVarDecl 0x222ba832820 <col:147, col:163> col:163 _Src 'const wchar_t *'
|-FunctionDecl 0x222ba832da8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:284:82 wcscat 'wchar_t *(wchar_t *, const wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x222ba832b90 <col:164, col:173> col:173 _Dest 'wchar_t *'
| |-ParmVarDecl 0x222ba832c08 <col:187, col:204> col:204 _Source 'const wchar_t *'
| `-DeprecatedAttr 0x222ba832e58 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using wcscat_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x222ba835218 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:288:41> col:41 implicit wcschr 'unsigned short *(const unsigned short *, unsigned short)' extern
| |-ParmVarDecl 0x222ba8352b8 <<invalid sloc>> <invalid sloc> 'const unsigned short *'
| `-ParmVarDecl 0x222ba835320 <<invalid sloc>> <invalid sloc> 'unsigned short'
|-FunctionDecl 0x222ba835398 prev 0x222ba835218 <col:23, col:88> col:41 wcschr 'unsigned short *(const unsigned short *, unsigned short)'
| |-ParmVarDecl 0x222ba835000 <col:55, col:71> col:71 _Str 'const wchar_t *'
| `-ParmVarDecl 0x222ba835078 <col:77, col:85> col:85 _Ch 'wchar_t':'unsigned short'
|-FunctionDecl 0x222ba835690 <line:289:36> col:36 implicit wcscmp 'int (const unsigned short *, const unsigned short *)' extern
| |-ParmVarDecl 0x222ba835730 <<invalid sloc>> <invalid sloc> 'const unsigned short *'
| `-ParmVarDecl 0x222ba835798 <<invalid sloc>> <invalid sloc> 'const unsigned short *'
|-FunctionDecl 0x222ba835810 prev 0x222ba835690 <col:24, col:101> col:36 wcscmp 'int (const unsigned short *, const unsigned short *)'
| |-ParmVarDecl 0x222ba835470 <col:50, col:66> col:66 _Str1 'const wchar_t *'
| `-ParmVarDecl 0x222ba8354e8 <col:80, col:96> col:96 _Str2 'const wchar_t *'
|-FunctionDecl 0x222ba835af0 <line:291:40, col:164> col:56 wcscpy_s 'errno_t (wchar_t *, rsize_t, const wchar_t *) __attribute__((cdecl))':'errno_t (wchar_t *, rsize_t, const wchar_t *)'
| |-ParmVarDecl 0x222ba8358e8 <col:94, col:104> col:104 _Dst 'wchar_t *'
| |-ParmVarDecl 0x222ba835960 <col:115, col:123> col:123 _SizeInWords 'rsize_t':'unsigned long long'
| `-ParmVarDecl 0x222ba8359d8 <col:144, col:160> col:160 _Src 'const wchar_t *'
|-FunctionDecl 0x222ba835e00 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:294:82 wcscpy 'wchar_t *(wchar_t *, const wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x222ba835c90 <col:136, col:145> col:145 _Dest 'wchar_t *'
| |-ParmVarDecl 0x222ba835d08 <col:159, col:176> col:176 _Source 'const wchar_t *'
| `-DeprecatedAttr 0x222ba835eb0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using wcscpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x222ba8311d8 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:295:24, col:107> col:39 wcscspn 'size_t (const wchar_t *, const wchar_t *) __attribute__((cdecl))':'size_t (const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x222ba830fc0 <col:54, col:70> col:70 _Str 'const wchar_t *'
| `-ParmVarDecl 0x222ba831038 <col:83, col:99> col:99 _Control 'const wchar_t *'
|-FunctionDecl 0x222ba831420 <line:296:39> col:39 implicit wcslen 'unsigned long long (const unsigned short *)' extern
| `-ParmVarDecl 0x222ba8314c0 <<invalid sloc>> <invalid sloc> 'const unsigned short *'
|-FunctionDecl 0x222ba831530 prev 0x222ba831420 <col:24, col:73> col:39 wcslen 'unsigned long long (const unsigned short *)'
| `-ParmVarDecl 0x222ba8312b0 <col:53, col:69> col:69 _Str 'const wchar_t *'
|-FunctionDecl 0x222ba831818 <line:300:1, col:94> col:16 used wcsnlen 'size_t (const wchar_t *, size_t) __attribute__((cdecl))':'size_t (const wchar_t *, size_t)'
| |-ParmVarDecl 0x222ba831600 <col:51, col:67> col:67 _Src 'const wchar_t *'
| `-ParmVarDecl 0x222ba831678 <col:78, col:85> col:85 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x222ba831a60 <line:302:16, line:308:1> line:305:18 wcsnlen_s 'size_t (const wchar_t *, size_t) __attribute__((cdecl))':'size_t (const wchar_t *, size_t)' static inline
| |-ParmVarDecl 0x222ba8318f0 <col:55, col:71> col:71 used _Src 'const wchar_t *'
| |-ParmVarDecl 0x222ba831968 <col:82, col:89> col:89 used _MaxCount 'size_t':'unsigned long long'
| `-CompoundStmt 0x222ba831df8 <line:306:1, line:308:1>
|   `-ReturnStmt 0x222ba831de8 <line:307:5, col:56>
|     `-ConditionalOperator 0x222ba831db8 <col:12, col:56> 'unsigned long long'
|       |-ParenExpr 0x222ba831c20 <col:12, col:25> 'int'
|       | `-BinaryOperator 0x222ba831c00 <col:13, line:36:27> 'int' '=='
|       |   |-ImplicitCastExpr 0x222ba831bd0 <line:307:13> 'const wchar_t *' <LValueToRValue>
|       |   | `-DeclRefExpr 0x222ba831b28 <col:13> 'const wchar_t *' lvalue ParmVar 0x222ba8318f0 '_Src' 'const wchar_t *'
|       |   `-ImplicitCastExpr 0x222ba831be8 <line:36:17, col:27> 'const wchar_t *' <BitCast>
|       |     `-ParenExpr 0x222ba831bb0 <col:17, col:27> 'void *'
|       |       `-CStyleCastExpr 0x222ba831b88 <col:18, col:26> 'void *' <NullToPointer>
|       |         `-IntegerLiteral 0x222ba831b48 <col:26> 'int' 0
|       |-ImplicitCastExpr 0x222ba831da0 <line:307:29> 'unsigned long long' <IntegralCast>
|       | `-IntegerLiteral 0x222ba831c40 <col:29> 'int' 0
|       `-CallExpr 0x222ba831d40 <col:33, col:56> 'size_t':'unsigned long long'
|         |-ImplicitCastExpr 0x222ba831d28 <col:33> 'size_t (*)(const wchar_t *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x222ba831c68 <col:33> 'size_t (const wchar_t *, size_t) __attribute__((cdecl))':'size_t (const wchar_t *, size_t)' Function 0x222ba831818 'wcsnlen' 'size_t (const wchar_t *, size_t) __attribute__((cdecl))':'size_t (const wchar_t *, size_t)'
|         |-ImplicitCastExpr 0x222ba831d70 <col:41> 'const wchar_t *' <LValueToRValue>
|         | `-DeclRefExpr 0x222ba831c88 <col:41> 'const wchar_t *' lvalue ParmVar 0x222ba8318f0 '_Src' 'const wchar_t *'
|         `-ImplicitCastExpr 0x222ba831d88 <col:47> 'size_t':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x222ba831ca8 <col:47> 'size_t':'unsigned long long' lvalue ParmVar 0x222ba831968 '_MaxCount' 'size_t':'unsigned long long'
|-FunctionDecl 0x222ba836218 <line:311:40, col:212> col:56 wcsncat_s 'errno_t (wchar_t *, rsize_t, const wchar_t *, rsize_t) __attribute__((cdecl))':'errno_t (wchar_t *, rsize_t, const wchar_t *, rsize_t)'
| |-ParmVarDecl 0x222ba831e20 <col:98, col:108> col:108 _Dst 'wchar_t *'
| |-ParmVarDecl 0x222ba831e98 <col:119, col:127> col:127 _SizeInWords 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x222ba831f10 <col:168, col:184> col:184 _Src 'const wchar_t *'
| `-ParmVarDecl 0x222ba836010 <col:195, col:203> col:203 _MaxCount 'rsize_t':'unsigned long long'
|-FunctionDecl 0x222ba836680 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1980:149> D:\Microsoft Visual Studio 12.0\VC\include\string.h:316:86 wcsncat 'wchar_t *(wchar_t *, const wchar_t *, size_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, const wchar_t *, size_t)'
| |-ParmVarDecl 0x222ba8363c0 <col:167, col:176> col:176 _Dest 'wchar_t *'
| |-ParmVarDecl 0x222ba836438 <col:207, col:224> col:224 _Source 'const wchar_t *'
| |-ParmVarDecl 0x222ba8364b0 <col:238, col:246> col:246 _Count 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x222ba836738 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using wcsncat_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x222ba836b48 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:318:36> col:36 implicit wcsncmp 'int (const unsigned short *, const unsigned short *, unsigned long long)' extern
| |-ParmVarDecl 0x222ba836be8 <<invalid sloc>> <invalid sloc> 'const unsigned short *'
| |-ParmVarDecl 0x222ba836c50 <<invalid sloc>> <invalid sloc> 'const unsigned short *'
| `-ParmVarDecl 0x222ba836cb8 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x222ba836d38 prev 0x222ba836b48 <col:24, col:165> col:36 wcsncmp 'int (const unsigned short *, const unsigned short *, unsigned long long)'
| |-ParmVarDecl 0x222ba836878 <col:71, col:87> col:87 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x222ba8368f0 <col:121, col:137> col:137 _Str2 'const wchar_t *'
| `-ParmVarDecl 0x222ba836968 <col:149, col:156> col:156 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x222ba82f058 <line:320:40, col:209> col:56 wcsncpy_s 'errno_t (wchar_t *, rsize_t, const wchar_t *, rsize_t) __attribute__((cdecl))':'errno_t (wchar_t *, rsize_t, const wchar_t *, rsize_t)'
| |-ParmVarDecl 0x222ba836e18 <col:95, col:105> col:105 _Dst 'wchar_t *'
| |-ParmVarDecl 0x222ba836e90 <col:116, col:124> col:124 _SizeInWords 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x222ba836f08 <col:165, col:181> col:181 _Src 'const wchar_t *'
| `-ParmVarDecl 0x222ba836f80 <col:192, col:200> col:200 _MaxCount 'rsize_t':'unsigned long long'
|-FunctionDecl 0x222ba82f408 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1980:149> D:\Microsoft Visual Studio 12.0\VC\include\string.h:323:86 wcsncpy 'wchar_t *(wchar_t *, const wchar_t *, size_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, const wchar_t *, size_t)'
| |-ParmVarDecl 0x222ba82f200 <col:179, col:188> col:188 _Dest 'wchar_t *'
| |-ParmVarDecl 0x222ba82f278 <col:219, col:236> col:236 _Source 'const wchar_t *'
| |-ParmVarDecl 0x222ba82f2f0 <col:250, col:258> col:258 _Count 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x222ba82f4c0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using wcsncpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x222ba82f818 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:324:38, col:124> col:56 wcspbrk 'wchar_t *(const wchar_t *, const wchar_t *) __attribute__((cdecl))':'wchar_t *(const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x222ba82f600 <col:71, col:87> col:87 _Str 'const wchar_t *'
| `-ParmVarDecl 0x222ba82f678 <col:100, col:116> col:116 _Control 'const wchar_t *'
|-FunctionDecl 0x222ba82fa60 <line:325:38, col:109> col:56 wcsrchr 'wchar_t *(const wchar_t *, wchar_t) __attribute__((cdecl))':'wchar_t *(const wchar_t *, wchar_t)'
| |-ParmVarDecl 0x222ba82f8f0 <col:71, col:87> col:87 _Str 'const wchar_t *'
| `-ParmVarDecl 0x222ba82f968 <col:98, col:106> col:106 _Ch 'wchar_t':'unsigned short'
|-FunctionDecl 0x222ba82fca8 <line:326:24, col:106> col:39 wcsspn 'size_t (const wchar_t *, const wchar_t *) __attribute__((cdecl))':'size_t (const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x222ba82fb38 <col:53, col:69> col:69 _Str 'const wchar_t *'
| `-ParmVarDecl 0x222ba82fbb0 <col:82, col:98> col:98 _Control 'const wchar_t *'
|-FunctionDecl 0x222ba82fef0 <line:329:23, col:107> col:41 wcsstr 'wchar_t *(const wchar_t *, const wchar_t *) __attribute__((cdecl))':'wchar_t *(const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x222ba82fd80 <col:55, col:71> col:71 _Str 'const wchar_t *'
| `-ParmVarDecl 0x222ba82fdf8 <col:84, col:100> col:100 _SubStr 'const wchar_t *'
|-FunctionDecl 0x222ba838288 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:330:142> col:76 wcstok 'wchar_t *(wchar_t *, const wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x222ba838118 <col:97, col:107> col:107 _Str 'wchar_t *'
| |-ParmVarDecl 0x222ba838190 <col:120, col:136> col:136 _Delim 'const wchar_t *'
| `-DeprecatedAttr 0x222ba838338 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using wcstok_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x222ba8387a0 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:332:36, col:173> col:54 wcstok_s 'wchar_t *(wchar_t *, const wchar_t *, wchar_t **) __attribute__((cdecl))':'wchar_t *(wchar_t *, const wchar_t *, wchar_t **)'
| |-ParmVarDecl 0x222ba838478 <col:77, col:87> col:87 _Str 'wchar_t *'
| |-ParmVarDecl 0x222ba8384f0 <col:100, col:116> col:116 _Delim 'const wchar_t *'
| `-ParmVarDecl 0x222ba8385d0 <col:154, col:165> col:165 _Context 'wchar_t **'
|-FunctionDecl 0x222ba838ac0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:334:105> col:79 _wcserror 'wchar_t *(int) __attribute__((cdecl))':'wchar_t *(int)'
| |-ParmVarDecl 0x222ba838948 <col:94, col:98> col:98 _ErrNum 'int'
| `-DeprecatedAttr 0x222ba838b68 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wcserror_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x222ba838f70 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:335:28, col:147> col:44 _wcserror_s 'errno_t (wchar_t *, size_t, int) __attribute__((cdecl))':'errno_t (wchar_t *, size_t, int)'
| |-ParmVarDecl 0x222ba838ca8 <col:89, col:99> col:99 _Buf 'wchar_t *'
| |-ParmVarDecl 0x222ba838d20 <col:110, col:117> col:117 _SizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x222ba838da0 <col:136, col:140> col:140 _ErrNum 'int'
|-FunctionDecl 0x222ba83a250 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:337:122> col:80 __wcserror 'wchar_t *(const wchar_t *) __attribute__((cdecl))':'wchar_t *(const wchar_t *)'
| |-ParmVarDecl 0x222ba83a178 <col:102, col:118> col:118 _Str 'const wchar_t *'
| `-DeprecatedAttr 0x222ba83a2f8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using __wcserror_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x222ba83a6c0 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:338:28, col:165> col:44 __wcserror_s 'errno_t (wchar_t *, size_t, const wchar_t *) __attribute__((cdecl))':'errno_t (wchar_t *, size_t, const wchar_t *)'
| |-ParmVarDecl 0x222ba83a438 <col:90, col:100> col:100 _Buffer 'wchar_t *'
| |-ParmVarDecl 0x222ba83a4b0 <col:114, col:121> col:121 _SizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x222ba83a528 <col:142, col:158> col:158 _ErrMsg 'const wchar_t *'
|-FunctionDecl 0x222ba83a918 <line:341:24, col:103> col:36 _wcsicmp 'int (const wchar_t *, const wchar_t *) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x222ba83a7a0 <col:52, col:68> col:68 _Str1 'const wchar_t *'
| `-ParmVarDecl 0x222ba83a818 <col:82, col:98> col:98 _Str2 'const wchar_t *'
|-FunctionDecl 0x222ba83acb8 <line:342:24, col:133> col:36 _wcsicmp_l 'int (const wchar_t *, const wchar_t *, _locale_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, _locale_t)'
| |-ParmVarDecl 0x222ba83a9f0 <col:54, col:70> col:70 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x222ba83aa68 <col:84, col:100> col:100 _Str2 'const wchar_t *'
| `-ParmVarDecl 0x222ba83aae0 <col:116, col:126> col:126 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x222ba83afa8 <line:343:24, col:167> col:36 _wcsnicmp 'int (const wchar_t *, const wchar_t *, size_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, size_t)'
| |-ParmVarDecl 0x222ba83ad98 <col:73, col:89> col:89 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x222ba83ae10 <col:123, col:139> col:139 _Str2 'const wchar_t *'
| `-ParmVarDecl 0x222ba83ae88 <col:151, col:158> col:158 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x222ba83b410 <line:344:24, col:197> col:36 _wcsnicmp_l 'int (const wchar_t *, const wchar_t *, size_t, _locale_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, size_t, _locale_t)'
| |-ParmVarDecl 0x222ba83b0a0 <col:75, col:91> col:91 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x222ba83b118 <col:125, col:141> col:141 _Str2 'const wchar_t *'
| |-ParmVarDecl 0x222ba83b190 <col:153, col:160> col:160 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x222ba83b208 <col:180, col:190> col:190 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x222ba83b868 <line:345:40, col:181> col:56 _wcsnset_s 'errno_t (wchar_t *, size_t, wchar_t, size_t) __attribute__((cdecl))':'errno_t (wchar_t *, size_t, wchar_t, size_t)'
| |-ParmVarDecl 0x222ba83b4f8 <col:99, col:109> col:109 _Dst 'wchar_t *'
| |-ParmVarDecl 0x222ba83b570 <col:120, col:127> col:127 _SizeInWords 'size_t':'unsigned long long'
| |-ParmVarDecl 0x222ba83b5e8 <col:146, col:154> col:154 _Val 'wchar_t':'unsigned short'
| `-ParmVarDecl 0x222ba83b660 <col:165, col:172> col:172 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x222ba83bcd0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1980:149> D:\Microsoft Visual Studio 12.0\VC\include\string.h:347:86 _wcsnset 'wchar_t *(wchar_t *, wchar_t, size_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, wchar_t, size_t)'
| |-ParmVarDecl 0x222ba83ba10 <col:172, col:181> col:181 _Str 'wchar_t *'
| |-ParmVarDecl 0x222ba83ba88 <col:187, col:196> col:196 _Val 'wchar_t':'unsigned short'
| |-ParmVarDecl 0x222ba83bb00 <col:207, col:215> col:215 _MaxCount 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x222ba83bd88 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wcsnset_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x222ba83d080 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:348:9, col:59> col:27 _wcsrev 'wchar_t *(wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *)'
| `-ParmVarDecl 0x222ba83bec8 <col:45, col:55> col:55 _Str 'wchar_t *'
|-FunctionDecl 0x222ba83d410 <line:349:40, col:159> col:56 _wcsset_s 'errno_t (wchar_t *, size_t, wchar_t) __attribute__((cdecl))':'errno_t (wchar_t *, size_t, wchar_t)'
| |-ParmVarDecl 0x222ba83d150 <col:98, col:108> col:108 _Dst 'wchar_t *'
| |-ParmVarDecl 0x222ba83d1c8 <col:119, col:126> col:126 _SizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x222ba83d240 <col:145, col:153> col:153 _Value 'wchar_t':'unsigned short'
|-FunctionDecl 0x222ba83d7c8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:351:85 _wcsset 'wchar_t *(wchar_t *, wchar_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, wchar_t)'
| |-ParmVarDecl 0x222ba83d5b0 <col:150, col:159> col:159 _Str 'wchar_t *'
| |-ParmVarDecl 0x222ba83d628 <col:165, col:174> col:174 _Val 'wchar_t':'unsigned short'
| `-DeprecatedAttr 0x222ba83d878 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wcsset_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x222ba83dbd8 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:353:28, col:126> col:44 _wcslwr_s 'errno_t (wchar_t *, size_t) __attribute__((cdecl))':'errno_t (wchar_t *, size_t)'
| |-ParmVarDecl 0x222ba83d9b8 <col:86, col:96> col:96 _Str 'wchar_t *'
| `-ParmVarDecl 0x222ba83da30 <col:107, col:114> col:114 _SizeInWords 'size_t':'unsigned long long'
|-FunctionDecl 0x222ba83de48 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1933:117> D:\Microsoft Visual Studio 12.0\VC\include\string.h:355:82 _wcslwr 'wchar_t *(wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *)'
| |-ParmVarDecl 0x222ba83dd70 <col:102, col:111> col:111 _String 'wchar_t *'
| `-DeprecatedAttr 0x222ba83def0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wcslwr_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x222ba83e350 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:356:28, col:156> col:44 _wcslwr_s_l 'errno_t (wchar_t *, size_t, _locale_t) __attribute__((cdecl))':'errno_t (wchar_t *, size_t, _locale_t)'
| |-ParmVarDecl 0x222ba83e090 <col:88, col:98> col:98 _Str 'wchar_t *'
| |-ParmVarDecl 0x222ba83e108 <col:109, col:116> col:116 _SizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x222ba83e180 <col:139, col:149> col:149 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x222ba83e708 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:358:85 _wcslwr_l 'wchar_t *(wchar_t *, _locale_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, _locale_t)'
| |-ParmVarDecl 0x222ba83e4f0 <col:154, col:163> col:163 _String 'wchar_t *'
| |-ParmVarDecl 0x222ba83e568 <col:181, col:192> col:192 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x222ba83e7b8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wcslwr_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x222ba83ea68 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:359:28, col:112> col:44 _wcsupr_s 'errno_t (wchar_t *, size_t) __attribute__((cdecl))':'errno_t (wchar_t *, size_t)'
| |-ParmVarDecl 0x222ba83e8f8 <col:79, col:89> col:89 _Str 'wchar_t *'
| `-ParmVarDecl 0x222ba83e970 <col:100, col:107> col:107 _Size 'size_t':'unsigned long long'
|-FunctionDecl 0x222ba83ecd8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1933:117> D:\Microsoft Visual Studio 12.0\VC\include\string.h:361:82 _wcsupr 'wchar_t *(wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *)'
| |-ParmVarDecl 0x222ba83ec00 <col:102, col:111> col:111 _String 'wchar_t *'
| `-DeprecatedAttr 0x222ba83ed80 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wcsupr_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x222ba839080 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:362:28, col:142> col:44 _wcsupr_s_l 'errno_t (wchar_t *, size_t, _locale_t) __attribute__((cdecl))':'errno_t (wchar_t *, size_t, _locale_t)'
| |-ParmVarDecl 0x222ba83eec0 <col:81, col:91> col:91 _Str 'wchar_t *'
| |-ParmVarDecl 0x222ba83ef38 <col:102, col:109> col:109 _Size 'size_t':'unsigned long long'
| `-ParmVarDecl 0x222ba83efb0 <col:125, col:135> col:135 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x222ba839390 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1939:133> D:\Microsoft Visual Studio 12.0\VC\include\string.h:364:85 _wcsupr_l 'wchar_t *(wchar_t *, _locale_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, _locale_t)'
| |-ParmVarDecl 0x222ba839220 <col:154, col:163> col:163 _String 'wchar_t *'
| |-ParmVarDecl 0x222ba839298 <col:181, col:192> col:192 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x222ba839440 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wcsupr_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x222ba839840 <D:\Microsoft Visual Studio 12.0\VC\include\string.h:365:28, col:159> col:43 wcsxfrm 'size_t (wchar_t *, const wchar_t *, size_t) __attribute__((cdecl))':'size_t (wchar_t *, const wchar_t *, size_t)'
| |-ParmVarDecl 0x222ba839580 <col:93, col:103> col:103 _Dst 'wchar_t *'
| |-ParmVarDecl 0x222ba8395f8 <col:116, col:132> col:132 _Src 'const wchar_t *'
| `-ParmVarDecl 0x222ba839670 <col:143, col:150> col:150 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x222ba839c88 <line:366:28, col:189> col:43 _wcsxfrm_l 'size_t (wchar_t *, const wchar_t *, size_t, _locale_t) __attribute__((cdecl))':'size_t (wchar_t *, const wchar_t *, size_t, _locale_t)'
| |-ParmVarDecl 0x222ba839920 <col:96, col:106> col:106 _Dst 'wchar_t *'
| |-ParmVarDecl 0x222ba839998 <col:119, col:134> col:134 _Src 'const wchar_t *'
| |-ParmVarDecl 0x222ba839a10 <col:145, col:152> col:152 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x222ba839a88 <col:172, col:182> col:182 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x222ba839ee8 <line:367:24, col:102> col:36 wcscoll 'int (const wchar_t *, const wchar_t *) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x222ba839d70 <col:51, col:67> col:67 _Str1 'const wchar_t *'
| `-ParmVarDecl 0x222ba839de8 <col:81, col:97> col:97 _Str2 'const wchar_t *'
|-FunctionDecl 0x222ba8371b8 <line:368:24, col:133> col:36 _wcscoll_l 'int (const wchar_t *, const wchar_t *, _locale_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, _locale_t)'
| |-ParmVarDecl 0x222ba839fc0 <col:54, col:70> col:70 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x222ba837020 <col:84, col:100> col:100 _Str2 'const wchar_t *'
| `-ParmVarDecl 0x222ba837098 <col:116, col:126> col:126 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x222ba837410 <line:369:24, col:104> col:36 _wcsicoll 'int (const wchar_t *, const wchar_t *) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x222ba837298 <col:53, col:69> col:69 _Str1 'const wchar_t *'
| `-ParmVarDecl 0x222ba837310 <col:83, col:99> col:99 _Str2 'const wchar_t *'
|-FunctionDecl 0x222ba8376f8 <line:370:24, col:133> col:36 _wcsicoll_l 'int (const wchar_t *, const wchar_t *, _locale_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, _locale_t)'
| |-ParmVarDecl 0x222ba8374e8 <col:55, col:71> col:71 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x222ba837560 <col:85, col:100> col:100 _Str2 'const wchar_t *'
| `-ParmVarDecl 0x222ba8375d8 <col:116, col:126> col:126 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x222ba8379e8 <line:371:24, col:167> col:36 _wcsncoll 'int (const wchar_t *, const wchar_t *, size_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, size_t)'
| |-ParmVarDecl 0x222ba8377d8 <col:73, col:89> col:89 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x222ba837850 <col:123, col:139> col:139 _Str2 'const wchar_t *'
| `-ParmVarDecl 0x222ba8378c8 <col:151, col:158> col:158 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x222ba837d70 <line:372:24, col:197> col:36 _wcsncoll_l 'int (const wchar_t *, const wchar_t *, size_t, _locale_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, size_t, _locale_t)'
| |-ParmVarDecl 0x222ba837ac8 <col:75, col:91> col:91 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x222ba837b40 <col:125, col:141> col:141 _Str2 'const wchar_t *'
| |-ParmVarDecl 0x222ba837bb8 <col:153, col:160> col:160 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x222ba837c30 <col:180, col:190> col:190 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x222ba844138 <line:373:24, col:168> col:36 _wcsnicoll 'int (const wchar_t *, const wchar_t *, size_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, size_t)'
| |-ParmVarDecl 0x222ba837e58 <col:74, col:90> col:90 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x222ba837ed0 <col:124, col:140> col:140 _Str2 'const wchar_t *'
| `-ParmVarDecl 0x222ba837f48 <col:152, col:159> col:159 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x222ba8444c0 <line:374:24, col:198> col:36 _wcsnicoll_l 'int (const wchar_t *, const wchar_t *, size_t, _locale_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, size_t, _locale_t)'
| |-ParmVarDecl 0x222ba844218 <col:76, col:92> col:92 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x222ba844290 <col:126, col:142> col:142 _Str2 'const wchar_t *'
| |-ParmVarDecl 0x222ba844308 <col:154, col:161> col:161 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x222ba844380 <col:181, col:191> col:191 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x222ba844720 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:403:108> col:74 wcsdup 'wchar_t *(const wchar_t *) __attribute__((cdecl))':'wchar_t *(const wchar_t *)'
| |-ParmVarDecl 0x222ba844648 <col:88, col:104> col:104 _Str 'const wchar_t *'
| `-DeprecatedAttr 0x222ba8447c8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsdup. See online help for details." ""
|-FunctionDecl 0x222ba844b00 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:413:135> col:69 wcsicmp 'int (const wchar_t *, const wchar_t *) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x222ba844988 <col:84, col:100> col:100 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x222ba844a00 <col:114, col:130> col:130 _Str2 'const wchar_t *'
| `-DeprecatedAttr 0x222ba844bb0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsicmp. See online help for details." ""
|-FunctionDecl 0x222ba844f80 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:414:200> col:70 wcsnicmp 'int (const wchar_t *, const wchar_t *, size_t) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *, size_t)'
| |-ParmVarDecl 0x222ba844d70 <col:106, col:122> col:122 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x222ba844de8 <col:156, col:172> col:172 _Str2 'const wchar_t *'
| |-ParmVarDecl 0x222ba844e60 <col:184, col:191> col:191 _MaxCount 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x222ba845038 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsnicmp. See online help for details." ""
|-FunctionDecl 0x222ba840430 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:415:153> col:60 wcsnset 'wchar_t *(wchar_t *, wchar_t, size_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, wchar_t, size_t)'
| |-ParmVarDecl 0x222ba840228 <col:97, col:107> col:107 _Str 'wchar_t *'
| |-ParmVarDecl 0x222ba8402a0 <col:118, col:126> col:126 _Val 'wchar_t':'unsigned short'
| |-ParmVarDecl 0x222ba840318 <col:137, col:144> col:144 _MaxCount 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x222ba8404e8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsnset. See online help for details." ""
|-FunctionDecl 0x222ba840780 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:416:90> col:59 wcsrev 'wchar_t *(wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *)'
| |-ParmVarDecl 0x222ba8406a8 <col:76, col:86> col:86 _Str 'wchar_t *'
| `-DeprecatedAttr 0x222ba840828 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsrev. See online help for details." ""
|-FunctionDecl 0x222ba840b58 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:417:104> col:59 wcsset 'wchar_t *(wchar_t *, wchar_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, wchar_t)'
| |-ParmVarDecl 0x222ba8409e8 <col:76, col:86> col:86 _Str 'wchar_t *'
| |-ParmVarDecl 0x222ba840a60 <col:92, col:100> col:100 _Val 'wchar_t':'unsigned short'
| `-DeprecatedAttr 0x222ba840c08 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsset. See online help for details." ""
|-FunctionDecl 0x222ba840ea0 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:418:90> col:59 wcslwr 'wchar_t *(wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *)'
| |-ParmVarDecl 0x222ba840dc8 <col:76, col:86> col:86 _Str 'wchar_t *'
| `-DeprecatedAttr 0x222ba840f48 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcslwr. See online help for details." ""
|-FunctionDecl 0x222ba843268 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:419:90> col:59 wcsupr 'wchar_t *(wchar_t *) __attribute__((cdecl))':'wchar_t *(wchar_t *)'
| |-ParmVarDecl 0x222ba843190 <col:76, col:86> col:86 _Str 'wchar_t *'
| `-DeprecatedAttr 0x222ba843310 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsupr. See online help for details." ""
|-FunctionDecl 0x222ba843648 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\string.h:420:137> col:70 wcsicoll 'int (const wchar_t *, const wchar_t *) __attribute__((cdecl))':'int (const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x222ba8434d0 <col:86, col:102> col:102 _Str1 'const wchar_t *'
| |-ParmVarDecl 0x222ba843548 <col:116, col:132> col:132 _Str2 'const wchar_t *'
| `-DeprecatedAttr 0x222ba8436f8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsicoll. See online help for details." ""
|-FunctionDecl 0x222ba843b08 <.//openssl//file_jk/before\crypto\modes\gcm128.c:216:1, line:288:1> line:216:13 used gcm_init_4bit 'void (u128 *, u64 *)' static
| |-ParmVarDecl 0x222ba843900 <col:27, col:41> col:32 used Htable 'u128 *':'u128 *'
| |-ParmVarDecl 0x222ba8439c8 <col:44, col:51> col:48 used H 'u64 *':'u64 *'
| `-CompoundStmt 0x222ba84d0e0 <line:217:1, line:288:1>
|   |-DeclStmt 0x222ba843c48 <line:218:5, col:11>
|   | `-VarDecl 0x222ba843be0 <col:5, col:10> col:10 used V 'u128':'u128'
|   |-BinaryOperator 0x222ba843d50 <line:223:5, col:20> 'u64':'unsigned long long' '='
|   | |-MemberExpr 0x222ba843ce0 <col:5, col:15> 'u64':'unsigned long long' lvalue .hi 0x222ba6bbf50
|   | | `-ArraySubscriptExpr 0x222ba843cc0 <col:5, col:13> 'u128':'u128' lvalue
|   | |   |-ImplicitCastExpr 0x222ba843ca8 <col:5> 'u128 *':'u128 *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x222ba843c60 <col:5> 'u128 *':'u128 *' lvalue ParmVar 0x222ba843900 'Htable' 'u128 *':'u128 *'
|   | |   `-IntegerLiteral 0x222ba843c80 <col:12> 'int' 0
|   | `-ImplicitCastExpr 0x222ba843d38 <col:20> 'u64':'unsigned long long' <IntegralCast>
|   |   `-IntegerLiteral 0x222ba843d10 <col:20> 'int' 0
|   |-BinaryOperator 0x222ba843e60 <line:224:5, col:20> 'u64':'unsigned long long' '='
|   | |-MemberExpr 0x222ba843df0 <col:5, col:15> 'u64':'unsigned long long' lvalue .lo 0x222ba6bbfb8
|   | | `-ArraySubscriptExpr 0x222ba843dd0 <col:5, col:13> 'u128':'u128' lvalue
|   | |   |-ImplicitCastExpr 0x222ba843db8 <col:5> 'u128 *':'u128 *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x222ba843d70 <col:5> 'u128 *':'u128 *' lvalue ParmVar 0x222ba843900 'Htable' 'u128 *':'u128 *'
|   | |   `-IntegerLiteral 0x222ba843d90 <col:12> 'int' 0
|   | `-ImplicitCastExpr 0x222ba843e48 <col:20> 'u64':'unsigned long long' <IntegralCast>
|   |   `-IntegerLiteral 0x222ba843e20 <col:20> 'int' 0
|   |-BinaryOperator 0x222ba843f80 <line:225:5, col:15> 'u64':'unsigned long long' '='
|   | |-MemberExpr 0x222ba843eb8 <col:5, col:7> 'u64':'unsigned long long' lvalue .hi 0x222ba6bbf50
|   | | `-DeclRefExpr 0x222ba843e80 <col:5> 'u128':'u128' lvalue Var 0x222ba843be0 'V' 'u128':'u128'
|   | `-ImplicitCastExpr 0x222ba843f68 <col:12, col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x222ba843f48 <col:12, col:15> 'u64':'unsigned long long' lvalue
|   |     |-ImplicitCastExpr 0x222ba843f30 <col:12> 'u64 *':'u64 *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x222ba843ee8 <col:12> 'u64 *':'u64 *' lvalue ParmVar 0x222ba8439c8 'H' 'u64 *':'u64 *'
|   |     `-IntegerLiteral 0x222ba843f08 <col:14> 'int' 0
|   |-BinaryOperator 0x222ba844088 <line:226:5, col:15> 'u64':'unsigned long long' '='
|   | |-MemberExpr 0x222ba843fc0 <col:5, col:7> 'u64':'unsigned long long' lvalue .lo 0x222ba6bbfb8
|   | | `-DeclRefExpr 0x222ba843fa0 <col:5> 'u128':'u128' lvalue Var 0x222ba843be0 'V' 'u128':'u128'
|   | `-ImplicitCastExpr 0x222ba844070 <col:12, col:15> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x222ba844050 <col:12, col:15> 'u64':'unsigned long long' lvalue
|   |     |-ImplicitCastExpr 0x222ba844038 <col:12> 'u64 *':'u64 *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x222ba843ff0 <col:12> 'u64 *':'u64 *' lvalue ParmVar 0x222ba8439c8 'H' 'u64 *':'u64 *'
|   |     `-IntegerLiteral 0x222ba844010 <col:14> 'int' 1
|   |-BinaryOperator 0x222ba845198 <line:243:5, col:17> 'u128':'u128' '='
|   | |-ArraySubscriptExpr 0x222ba845140 <col:5, col:13> 'u128':'u128' lvalue
|   | | |-ImplicitCastExpr 0x222ba845128 <col:5> 'u128 *':'u128 *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x222ba8440a8 <col:5> 'u128 *':'u128 *' lvalue ParmVar 0x222ba843900 'Htable' 'u128 *':'u128 *'
|   | | `-IntegerLiteral 0x222ba845100 <col:12> 'int' 8
|   | `-ImplicitCastExpr 0x222ba845180 <col:17> 'u128':'u128' <LValueToRValue>
|   |   `-DeclRefExpr 0x222ba845160 <col:17> 'u128':'u128' lvalue Var 0x222ba843be0 'V' 'u128':'u128'
|   |-DoStmt 0x222ba846038 <line:23:25, line:34:10>
|   | |-CompoundStmt 0x222ba845ff8 <line:23:28, line:33:11>
|   | | `-IfStmt 0x222ba845fd0 <line:24:9, line:33:9> has_else
|   | |   |-BinaryOperator 0x222ba845228 <line:24:13, col:29> 'int' '=='
|   | |   | |-UnaryExprOrTypeTraitExpr 0x222ba8451c8 <col:13, col:26> 'unsigned long long' sizeof 'size_t':'unsigned long long'
|   | |   | `-ImplicitCastExpr 0x222ba845210 <col:29> 'unsigned long long' <IntegralCast>
|   | |   |   `-IntegerLiteral 0x222ba8451e8 <col:29> 'int' 8
|   | |   |-CompoundStmt 0x222ba845868 <col:32, line:28:9>
|   | |   | |-DeclStmt 0x222ba845470 <line:25:17, col:63>
|   | |   | | `-VarDecl 0x222ba845258 <col:17, col:62> col:21 used T 'u64':'unsigned long long' cinit
|   | |   | |   `-BinaryOperator 0x222ba845450 <<scratch space>:294:1, .//openssl//file_jk/before\crypto\modes\gcm128.c:25:62> 'unsigned long long' '&'
|   | |   | |     |-IntegerLiteral 0x222ba8452c0 <<scratch space>:294:1> 'unsigned long long' 16212958658533785600
|   | |   | |     `-ParenExpr 0x222ba845430 <.//openssl//file_jk/before\crypto\modes\gcm128.c:25:51, col:62> 'unsigned long long'
|   | |   | |       `-BinaryOperator 0x222ba845410 <col:52, col:61> 'unsigned long long' '-'
|   | |   | |         |-ImplicitCastExpr 0x222ba8453f8 <col:52> 'unsigned long long' <IntegralCast>
|   | |   | |         | `-IntegerLiteral 0x222ba8452e8 <col:52> 'int' 0
|   | |   | |         `-ParenExpr 0x222ba8453d8 <col:54, col:61> 'unsigned long long'
|   | |   | |           `-BinaryOperator 0x222ba8453b8 <line:244:16, line:25:60> 'unsigned long long' '&'
|   | |   | |             |-ImplicitCastExpr 0x222ba845388 <line:244:16, line:25:57> 'u64':'unsigned long long' <LValueToRValue>
|   | |   | |             | `-MemberExpr 0x222ba845330 <line:244:16, line:25:57> 'u64':'unsigned long long' lvalue .lo 0x222ba6bbfb8
|   | |   | |             |   `-DeclRefExpr 0x222ba845310 <line:244:16> 'u128':'u128' lvalue Var 0x222ba843be0 'V' 'u128':'u128'
|   | |   | |             `-ImplicitCastExpr 0x222ba8453a0 <line:25:60> 'unsigned long long' <IntegralCast>
|   | |   | |               `-IntegerLiteral 0x222ba845360 <col:60> 'int' 1
|   | |   | |-BinaryOperator 0x222ba845698 <line:244:16, line:26:44> 'u64':'unsigned long long' '='
|   | |   | | |-MemberExpr 0x222ba8454a8 <line:244:16, line:26:19> 'u64':'unsigned long long' lvalue .lo 0x222ba6bbfb8
|   | |   | | | `-DeclRefExpr 0x222ba845488 <line:244:16> 'u128':'u128' lvalue Var 0x222ba843be0 'V' 'u128':'u128'
|   | |   | | `-BinaryOperator 0x222ba845678 <line:26:25, col:44> 'unsigned long long' '|'
|   | |   | |   |-ParenExpr 0x222ba845588 <col:25, col:34> 'u64':'unsigned long long'
|   | |   | |   | `-BinaryOperator 0x222ba845568 <line:244:16, line:26:32> 'u64':'unsigned long long' '<<'
|   | |   | |   |   |-ImplicitCastExpr 0x222ba845550 <line:244:16, line:26:28> 'u64':'unsigned long long' <LValueToRValue>
|   | |   | |   |   | `-MemberExpr 0x222ba8454f8 <line:244:16, line:26:28> 'u64':'unsigned long long' lvalue .hi 0x222ba6bbf50
|   | |   | |   |   |   `-DeclRefExpr 0x222ba8454d8 <line:244:16> 'u128':'u128' lvalue Var 0x222ba843be0 'V' 'u128':'u128'
|   | |   | |   |   `-IntegerLiteral 0x222ba845528 <line:26:32> 'int' 63
|   | |   | |   `-ParenExpr 0x222ba845658 <col:36, col:44> 'u64':'unsigned long long'
|   | |   | |     `-BinaryOperator 0x222ba845638 <line:244:16, line:26:43> 'u64':'unsigned long long' '>>'
|   | |   | |       |-ImplicitCastExpr 0x222ba845620 <line:244:16, line:26:39> 'u64':'unsigned long long' <LValueToRValue>
|   | |   | |       | `-MemberExpr 0x222ba8455c8 <line:244:16, line:26:39> 'u64':'unsigned long long' lvalue .lo 0x222ba6bbfb8
|   | |   | |       |   `-DeclRefExpr 0x222ba8455a8 <line:244:16> 'u128':'u128' lvalue Var 0x222ba843be0 'V' 'u128':'u128'
|   | |   | |       `-IntegerLiteral 0x222ba8455f8 <line:26:43> 'int' 1
|   | |   | `-BinaryOperator 0x222ba845848 <line:244:16, line:27:36> 'u64':'unsigned long long' '='
|   | |   |   |-MemberExpr 0x222ba8456d8 <line:244:16, line:27:19> 'u64':'unsigned long long' lvalue .hi 0x222ba6bbf50
|   | |   |   | `-DeclRefExpr 0x222ba8456b8 <line:244:16> 'u128':'u128' lvalue Var 0x222ba843be0 'V' 'u128':'u128'
|   | |   |   `-BinaryOperator 0x222ba845828 <line:27:25, col:36> 'unsigned long long' '^'
|   | |   |     |-ParenExpr 0x222ba8457b8 <col:25, col:34> 'u64':'unsigned long long'
|   | |   |     | `-BinaryOperator 0x222ba845798 <line:244:16, line:27:32> 'u64':'unsigned long long' '>>'
|   | |   |     |   |-ImplicitCastExpr 0x222ba845780 <line:244:16, line:27:28> 'u64':'unsigned long long' <LValueToRValue>
|   | |   |     |   | `-MemberExpr 0x222ba845728 <line:244:16, line:27:28> 'u64':'unsigned long long' lvalue .hi 0x222ba6bbf50
|   | |   |     |   |   `-DeclRefExpr 0x222ba845708 <line:244:16> 'u128':'u128' lvalue Var 0x222ba843be0 'V' 'u128':'u128'
|   | |   |     |   `-IntegerLiteral 0x222ba845758 <line:27:32> 'int' 1
|   | |   |     `-ImplicitCastExpr 0x222ba845810 <col:36> 'u64':'unsigned long long' <LValueToRValue>
|   | |   |       `-DeclRefExpr 0x222ba8457d8 <col:36> 'u64':'unsigned long long' lvalue Var 0x222ba845258 'T' 'u64':'unsigned long long'
|   | |   `-CompoundStmt 0x222ba845fa8 <line:29:14, line:33:9>
|   | |     |-DeclStmt 0x222ba845b10 <line:30:17, col:56>
|   | |     | `-VarDecl 0x222ba8458a0 <col:17, col:55> col:21 used T 'u32':'unsigned int' cinit
|   | |     |   `-BinaryOperator 0x222ba845af0 <col:25, col:55> 'unsigned int' '&'
|   | |     |     |-IntegerLiteral 0x222ba845908 <col:25> 'unsigned int' 3774873600
|   | |     |     `-ParenExpr 0x222ba845ad0 <col:39, col:55> 'unsigned int'
|   | |     |       `-BinaryOperator 0x222ba845ab0 <col:40, col:54> 'unsigned int' '-'
|   | |     |         |-ImplicitCastExpr 0x222ba845a98 <col:40> 'unsigned int' <IntegralCast>
|   | |     |         | `-IntegerLiteral 0x222ba845930 <col:40> 'int' 0
|   | |     |         `-CStyleCastExpr 0x222ba845a70 <col:42, col:54> 'u32':'unsigned int' <IntegralCast>
|   | |     |           `-ParenExpr 0x222ba845a50 <col:47, col:54> 'unsigned long long'
|   | |     |             `-BinaryOperator 0x222ba845a00 <line:244:16, line:30:53> 'unsigned long long' '&'
|   | |     |               |-ImplicitCastExpr 0x222ba8459d0 <line:244:16, line:30:50> 'u64':'unsigned long long' <LValueToRValue>
|   | |     |               | `-MemberExpr 0x222ba845978 <line:244:16, line:30:50> 'u64':'unsigned long long' lvalue .lo 0x222ba6bbfb8
|   | |     |               |   `-DeclRefExpr 0x222ba845958 <line:244:16> 'u128':'u128' lvalue Var 0x222ba843be0 'V' 'u128':'u128'
|   | |     |               `-ImplicitCastExpr 0x222ba8459e8 <line:30:53> 'unsigned long long' <IntegralCast>
|   | |     |                 `-IntegerLiteral 0x222ba8459a8 <col:53> 'int' 1
|   | |     |-BinaryOperator 0x222ba845d38 <line:244:16, line:31:44> 'u64':'unsigned long long' '='
|   | |     | |-MemberExpr 0x222ba845b48 <line:244:16, line:31:19> 'u64':'unsigned long long' lvalue .lo 0x222ba6bbfb8
|   | |     | | `-DeclRefExpr 0x222ba845b28 <line:244:16> 'u128':'u128' lvalue Var 0x222ba843be0 'V' 'u128':'u128'
|   | |     | `-BinaryOperator 0x222ba845d18 <line:31:25, col:44> 'unsigned long long' '|'
|   | |     |   |-ParenExpr 0x222ba845c28 <col:25, col:34> 'u64':'unsigned long long'
|   | |     |   | `-BinaryOperator 0x222ba845c08 <line:244:16, line:31:32> 'u64':'unsigned long long' '<<'
|   | |     |   |   |-ImplicitCastExpr 0x222ba845bf0 <line:244:16, line:31:28> 'u64':'unsigned long long' <LValueToRValue>
|   | |     |   |   | `-MemberExpr 0x222ba845b98 <line:244:16, line:31:28> 'u64':'unsigned long long' lvalue .hi 0x222ba6bbf50
|   | |     |   |   |   `-DeclRefExpr 0x222ba845b78 <line:244:16> 'u128':'u128' lvalue Var 0x222ba843be0 'V' 'u128':'u128'
|   | |     |   |   `-IntegerLiteral 0x222ba845bc8 <line:31:32> 'int' 63
|   | |     |   `-ParenExpr 0x222ba845cf8 <col:36, col:44> 'u64':'unsigned long long'
|   | |     |     `-BinaryOperator 0x222ba845cd8 <line:244:16, line:31:43> 'u64':'unsigned long long' '>>'
|   | |     |       |-ImplicitCastExpr 0x222ba845cc0 <line:244:16, line:31:39> 'u64':'unsigned long long' <LValueToRValue>
|   | |     |       | `-MemberExpr 0x222ba845c68 <line:244:16, line:31:39> 'u64':'unsigned long long' lvalue .lo 0x222ba6bbfb8
|   | |     |       |   `-DeclRefExpr 0x222ba845c48 <line:244:16> 'u128':'u128' lvalue Var 0x222ba843be0 'V' 'u128':'u128'
|   | |     |       `-IntegerLiteral 0x222ba845c98 <line:31:43> 'int' 1
|   | |     `-BinaryOperator 0x222ba845f88 <line:244:16, line:32:47> 'u64':'unsigned long long' '='
|   | |       |-MemberExpr 0x222ba845d78 <line:244:16, line:32:19> 'u64':'unsigned long long' lvalue .hi 0x222ba6bbf50
|   | |       | `-DeclRefExpr 0x222ba845d58 <line:244:16> 'u128':'u128' lvalue Var 0x222ba843be0 'V' 'u128':'u128'
|   | |       `-BinaryOperator 0x222ba845f68 <line:32:25, col:47> 'unsigned long long' '^'
|   | |         |-ParenExpr 0x222ba845e58 <col:25, col:34> 'u64':'unsigned long long'
|   | |         | `-BinaryOperator 0x222ba845e38 <line:244:16, line:32:32> 'u64':'unsigned long long' '>>'
|   | |         |   |-ImplicitCastExpr 0x222ba845e20 <line:244:16, line:32:28> 'u64':'unsigned long long' <LValueToRValue>
|   | |         |   | `-MemberExpr 0x222ba845dc8 <line:244:16, line:32:28> 'u64':'unsigned long long' lvalue .hi 0x222ba6bbf50
|   | |         |   |   `-DeclRefExpr 0x222ba845da8 <line:244:16> 'u128':'u128' lvalue Var 0x222ba843be0 'V' 'u128':'u128'
|   | |         |   `-IntegerLiteral 0x222ba845df8 <line:32:32> 'int' 1
|   | |         `-ParenExpr 0x222ba845f48 <col:36, col:47> 'u64':'unsigned long long'
|   | |           `-BinaryOperator 0x222ba845f28 <col:37, col:45> 'u64':'unsigned long long' '<<'
|   | |             |-CStyleCastExpr 0x222ba845ed8 <col:37, col:42> 'u64':'unsigned long long' <IntegralCast>
|   | |             | `-ImplicitCastExpr 0x222ba845ec0 <col:42> 'u32':'unsigned int' <LValueToRValue> part_of_explicit_cast
|   | |             |   `-DeclRefExpr 0x222ba845e78 <col:42> 'u32':'unsigned int' lvalue Var 0x222ba8458a0 'T' 'u32':'unsigned int'
|   | |             `-IntegerLiteral 0x222ba845f00 <col:45> 'int' 32
|   | `-IntegerLiteral 0x222ba846010 <line:34:9> 'int' 0
|   |-BinaryOperator 0x222ba846128 <line:245:5, col:17> 'u128':'u128' '='
|   | |-ArraySubscriptExpr 0x222ba8460b8 <col:5, col:13> 'u128':'u128' lvalue
|   | | |-ImplicitCastExpr 0x222ba8460a0 <col:5> 'u128 *':'u128 *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x222ba846058 <col:5> 'u128 *':'u128 *' lvalue ParmVar 0x222ba843900 'Htable' 'u128 *':'u128 *'
|   | | `-IntegerLiteral 0x222ba846078 <col:12> 'int' 4
|   | `-ImplicitCastExpr 0x222ba846110 <col:17> 'u128':'u128' <LValueToRValue>
|   |   `-DeclRefExpr 0x222ba8460d8 <col:17> 'u128':'u128' lvalue Var 0x222ba843be0 'V' 'u128':'u128'
|   |-DoStmt 0x222ba846fc8 <line:23:25, line:34:10>
|   | |-CompoundStmt 0x222ba846f88 <line:23:28, line:33:11>
|   | | `-IfStmt 0x222ba846f60 <line:24:9, line:33:9> has_else
|   | |   |-BinaryOperator 0x222ba8461b8 <line:24:13, col:29> 'int' '=='
|   | |   | |-UnaryExprOrTypeTraitExpr 0x222ba846158 <col:13, col:26> 'unsigned long long' sizeof 'size_t':'unsigned long long'
|   | |   | `-ImplicitCastExpr 0x222ba8461a0 <col:29> 'unsigned long long' <IntegralCast>
|   | |   |   `-IntegerLiteral 0x222ba846178 <col:29> 'int' 8
|   | |   |-CompoundStmt 0x222ba8467f8 <col:32, line:28:9>
|   | |   | |-DeclStmt 0x222ba846400 <line:25:17, col:63>
|   | |   | | `-VarDecl 0x222ba8461e8 <col:17, col:62> col:21 used T 'u64':'unsigned long long' cinit
|   | |   | |   `-BinaryOperator 0x222ba8463e0 <<scratch space>:295:1, .//openssl//file_jk/before\crypto\modes\gcm128.c:25:62> 'unsigned long long' '&'
|   | |   | |     |-IntegerLiteral 0x222ba846250 <<scratch space>:295:1> 'unsigned long long' 16212958658533785600
|   | |   | |     `-ParenExpr 0x222ba8463c0 <.//openssl//file_jk/before\crypto\modes\gcm128.c:25:51, col:62> 'unsigned long long'
|   | |   | |       `-BinaryOperator 0x222ba8463a0 <col:52, col:61> 'unsigned long long' '-'
|   | |   | |         |-ImplicitCastExpr 0x222ba846388 <col:52> 'unsigned long long' <IntegralCast>
|   | |   | |         | `-IntegerLiteral 0x222ba846278 <col:52> 'int' 0
|   | |   | |         `-ParenExpr 0x222ba846368 <col:54, col:61> 'unsigned long long'
|   | |   | |           `-BinaryOperator 0x222ba846348 <line:246:16, line:25:60> 'unsigned long long' '&'
|   | |   | |             |-ImplicitCastExpr 0x222ba846318 <line:246:16, line:25:57> 'u64':'unsigned long long' <LValueToRValue>
|   | |   | |             | `-MemberExpr 0x222ba8462c0 <line:246:16, line:25:57> 'u64':'unsigned long long' lvalue .lo 0x222ba6bbfb8
|   | |   | |             |   `-DeclRefExpr 0x222ba8462a0 <line:246:16> 'u128':'u128' lvalue Var 0x222ba843be0 'V' 'u128':'u128'
|   | |   | |             `-ImplicitCastExpr 0x222ba846330 <line:25:60> 'unsigned long long' <IntegralCast>
|   | |   | |               `-IntegerLiteral 0x222ba8462f0 <col:60> 'int' 1
|   | |   | |-BinaryOperator 0x222ba846628 <line:246:16, line:26:44> 'u64':'unsigned long long' '='
|   | |   | | |-MemberExpr 0x222ba846438 <line:246:16, line:26:19> 'u64':'unsigned long long' lvalue .lo 0x222ba6bbfb8
|   | |   | | | `-DeclRefExpr 0x222ba846418 <line:246:16> 'u128':'u128' lvalue Var 0x222ba843be0 'V' 'u128':'u128'
|   | |   | | `-BinaryOperator 0x222ba846608 <line:26:25, col:44> 'unsigned long long' '|'
|   | |   | |   |-ParenExpr 0x222ba846518 <col:25, col:34> 'u64':'unsigned long long'
|   | |   | |   | `-BinaryOperator 0x222ba8464f8 <line:246:16, line:26:32> 'u64':'unsigned long long' '<<'
|   | |   | |   |   |-ImplicitCastExpr 0x222ba8464e0 <line:246:16, line:26:28> 'u64':'unsigned long long' <LValueToRValue>
|   | |   | |   |   | `-MemberExpr 0x222ba846488 <line:246:16, line:26:28> 'u64':'unsigned long long' lvalue .hi 0x222ba6bbf50
|   | |   | |   |   |   `-DeclRefExpr 0x222ba846468 <line:246:16> 'u128':'u128' lvalue Var 0x222ba843be0 'V' 'u128':'u128'
|   | |   | |   |   `-IntegerLiteral 0x222ba8464b8 <line:26:32> 'int' 63
|   | |   | |   `-ParenExpr 0x222ba8465e8 <col:36, col:44> 'u64':'unsigned long long'
|   | |   | |     `-BinaryOperator 0x222ba8465c8 <line:246:16, line:26:43> 'u64':'unsigned long long' '>>'
|   | |   | |       |-ImplicitCastExpr 0x222ba8465b0 <line:246:16, line:26:39> 'u64':'unsigned long long' <LValueToRValue>
|   | |   | |       | `-MemberExpr 0x222ba846558 <line:246:16, line:26:39> 'u64':'unsigned long long' lvalue .lo 0x222ba6bbfb8
|   | |   | |       |   `-DeclRefExpr 0x222ba846538 <line:246:16> 'u128':'u128' lvalue Var 0x222ba843be0 'V' 'u128':'u128'
|   | |   | |       `-IntegerLiteral 0x222ba846588 <line:26:43> 'int' 1
|   | |   | `-BinaryOperator 0x222ba8467d8 <line:246:16, line:27:36> 'u64':'unsigned long long' '='
|   | |   |   |-MemberExpr 0x222ba846668 <line:246:16, line:27:19> 'u64':'unsigned long long' lvalue .hi 0x222ba6bbf50
|   | |   |   | `-DeclRefExpr 0x222ba846648 <line:246:16> 'u128':'u128' lvalue Var 0x222ba843be0 'V' 'u128':'u128'
|   | |   |   `-BinaryOperator 0x222ba8467b8 <line:27:25, col:36> 'unsigned long long' '^'
|   | |   |     |-ParenExpr 0x222ba846748 <col:25, col:34> 'u64':'unsigned long long'
|   | |   |     | `-BinaryOperator 0x222ba846728 <line:246:16, line:27:32> 'u64':'unsigned long long' '>>'
|   | |   |     |   |-ImplicitCastExpr 0x222ba846710 <line:246:16, line:27:28> 'u64':'unsigned long long' <LValueToRValue>
|   | |   |     |   | `-MemberExpr 0x222ba8466b8 <line:246:16, line:27:28> 'u64':'unsigned long long' lvalue .hi 0x222ba6bbf50
|   | |   |     |   |   `-DeclRefExpr 0x222ba846698 <line:246:16> 'u128':'u128' lvalue Var 0x222ba843be0 'V' 'u128':'u128'
|   | |   |     |   `-IntegerLiteral 0x222ba8466e8 <line:27:32> 'int' 1
|   | |   |     `-ImplicitCastExpr 0x222ba8467a0 <col:36> 'u64':'unsigned long long' <LValueToRValue>
|   | |   |       `-DeclRefExpr 0x222ba846768 <col:36> 'u64':'unsigned long long' lvalue Var 0x222ba8461e8 'T' 'u64':'unsigned long long'
|   | |   `-CompoundStmt 0x222ba846f38 <line:29:14, line:33:9>
|   | |     |-DeclStmt 0x222ba846aa0 <line:30:17, col:56>
|   | |     | `-VarDecl 0x222ba846830 <col:17, col:55> col:21 used T 'u32':'unsigned int' cinit
|   | |     |   `-BinaryOperator 0x222ba846a80 <col:25, col:55> 'unsigned int' '&'
|   | |     |     |-IntegerLiteral 0x222ba846898 <col:25> 'unsigned int' 3774873600
|   | |     |     `-ParenExpr 0x222ba846a60 <col:39, col:55> 'unsigned int'
|   | |     |       `-BinaryOperator 0x222ba846a40 <col:40, col:54> 'unsigned int' '-'
|   | |     |         |-ImplicitCastExpr 0x222ba846a28 <col:40> 'unsigned int' <IntegralCast>
|   | |     |         | `-IntegerLiteral 0x222ba8468c0 <col:40> 'int' 0
|   | |     |         `-CStyleCastExpr 0x222ba846a00 <col:42, col:54> 'u32':'unsigned int' <IntegralCast>
|   | |     |           `-ParenExpr 0x222ba8469e0 <col:47, col:54> 'unsigned long long'
|   | |     |             `-BinaryOperator 0x222ba846990 <line:246:16, line:30:53> 'unsigned long long' '&'
|   | |     |               |-ImplicitCastExpr 0x222ba846960 <line:246:16, line:30:50> 'u64':'unsigned long long' <LValueToRValue>
|   | |     |               | `-MemberExpr 0x222ba846908 <line:246:16, line:30:50> 'u64':'unsigned long long' lvalue .lo 0x222ba6bbfb8
|   | |     |               |   `-DeclRefExpr 0x222ba8468e8 <line:246:16> 'u128':'u128' lvalue Var 0x222ba843be0 'V' 'u128':'u128'
|   | |     |               `-ImplicitCastExpr 0x222ba846978 <line:30:53> 'unsigned long long' <IntegralCast>
|   | |     |                 `-IntegerLiteral 0x222ba846938 <col:53> 'int' 1
|   | |     |-BinaryOperator 0x222ba846cc8 <line:246:16, line:31:44> 'u64':'unsigned long long' '='
|   | |     | |-MemberExpr 0x222ba846ad8 <line:246:16, line:31:19> 'u64':'unsigned long long' lvalue .lo 0x222ba6bbfb8
|   | |     | | `-DeclRefExpr 0x222ba846ab8 <line:246:16> 'u128':'u128' lvalue Var 0x222ba843be0 'V' 'u128':'u128'
|   | |     | `-BinaryOperator 0x222ba846ca8 <line:31:25, col:44> 'unsigned long long' '|'
|   | |     |   |-ParenExpr 0x222ba846bb8 <col:25, col:34> 'u64':'unsigned long long'
|   | |     |   | `-BinaryOperator 0x222ba846b98 <line:246:16, line:31:32> 'u64':'unsigned long long' '<<'
|   | |     |   |   |-ImplicitCastExpr 0x222ba846b80 <line:246:16, line:31:28> 'u64':'unsigned long long' <LValueToRValue>
|   | |     |   |   | `-MemberExpr 0x222ba846b28 <line:246:16, line:31:28> 'u64':'unsigned long long' lvalue .hi 0x222ba6bbf50
|   | |     |   |   |   `-DeclRefExpr 0x222ba846b08 <line:246:16> 'u128':'u128' lvalue Var 0x222ba843be0 'V' 'u128':'u128'
|   | |     |   |   `-IntegerLiteral 0x222ba846b58 <line:31:32> 'int' 63
|   | |     |   `-ParenExpr 0x222ba846c88 <col:36, col:44> 'u64':'unsigned long long'
|   | |     |     `-BinaryOperator 0x222ba846c68 <line:246:16, line:31:43> 'u64':'unsigned long long' '>>'
|   | |     |       |-ImplicitCastExpr 0x222ba846c50 <line:246:16, line:31:39> 'u64':'unsigned long long' <LValueToRValue>
|   | |     |       | `-MemberExpr 0x222ba846bf8 <line:246:16, line:31:39> 'u64':'unsigned long long' lvalue .lo 0x222ba6bbfb8
|   | |     |       |   `-DeclRefExpr 0x222ba846bd8 <line:246:16> 'u128':'u128' lvalue Var 0x222ba843be0 'V' 'u128':'u128'
|   | |     |       `-IntegerLiteral 0x222ba846c28 <line:31:43> 'int' 1
|   | |     `-BinaryOperator 0x222ba846f18 <line:246:16, line:32:47> 'u64':'unsigned long long' '='
|   | |       |-MemberExpr 0x222ba846d08 <line:246:16, line:32:19> 'u64':'unsigned long long' lvalue .hi 0x222ba6bbf50
|   | |       | `-DeclRefExpr 0x222ba846ce8 <line:246:16> 'u128':'u128' lvalue Var 0x222ba843be0 'V' 'u128':'u128'
|   | |       `-BinaryOperator 0x222ba846ef8 <line:32:25, col:47> 'unsigned long long' '^'
|   | |         |-ParenExpr 0x222ba846de8 <col:25, col:34> 'u64':'unsigned long long'
|   | |         | `-BinaryOperator 0x222ba846dc8 <line:246:16, line:32:32> 'u64':'unsigned long long' '>>'
|   | |         |   |-ImplicitCastExpr 0x222ba846db0 <line:246:16, line:32:28> 'u64':'unsigned long long' <LValueToRValue>
|   | |         |   | `-MemberExpr 0x222ba846d58 <line:246:16, line:32:28> 'u64':'unsigned long long' lvalue .hi 0x222ba6bbf50
|   | |         |   |   `-DeclRefExpr 0x222ba846d38 <line:246:16> 'u128':'u128' lvalue Var 0x222ba843be0 'V' 'u128':'u128'
|   | |         |   `-IntegerLiteral 0x222ba846d88 <line:32:32> 'int' 1
|   | |         `-ParenExpr 0x222ba846ed8 <col:36, col:47> 'u64':'unsigned long long'
|   | |           `-BinaryOperator 0x222ba846eb8 <col:37, col:45> 'u64':'unsigned long long' '<<'
|   | |             |-CStyleCastExpr 0x222ba846e68 <col:37, col:42> 'u64':'unsigned long long' <IntegralCast>
|   | |             | `-ImplicitCastExpr 0x222ba846e50 <col:42> 'u32':'unsigned int' <LValueToRValue> part_of_explicit_cast
|   | |             |   `-DeclRefExpr 0x222ba846e08 <col:42> 'u32':'unsigned int' lvalue Var 0x222ba846830 'T' 'u32':'unsigned int'
|   | |             `-IntegerLiteral 0x222ba846e90 <col:45> 'int' 32
|   | `-IntegerLiteral 0x222ba846fa0 <line:34:9> 'int' 0
|   |-BinaryOperator 0x222ba8470a0 <line:247:5, col:17> 'u128':'u128' '='
|   | |-ArraySubscriptExpr 0x222ba847048 <col:5, col:13> 'u128':'u128' lvalue
|   | | |-ImplicitCastExpr 0x222ba847030 <col:5> 'u128 *':'u128 *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x222ba846fe8 <col:5> 'u128 *':'u128 *' lvalue ParmVar 0x222ba843900 'Htable' 'u128 *':'u128 *'
|   | | `-IntegerLiteral 0x222ba847008 <col:12> 'int' 2
|   | `-ImplicitCastExpr 0x222ba847088 <col:17> 'u128':'u128' <LValueToRValue>
|   |   `-DeclRefExpr 0x222ba847068 <col:17> 'u128':'u128' lvalue Var 0x222ba843be0 'V' 'u128':'u128'
|   |-DoStmt 0x222ba842f20 <line:23:25, line:34:10>
|   | |-CompoundStmt 0x222ba842ee0 <line:23:28, line:33:11>
|   | | `-IfStmt 0x222ba842eb8 <line:24:9, line:33:9> has_else
|   | |   |-BinaryOperator 0x222ba842110 <line:24:13, col:29> 'int' '=='
|   | |   | |-UnaryExprOrTypeTraitExpr 0x222ba8470d0 <col:13, col:26> 'unsigned long long' sizeof 'size_t':'unsigned long long'
|   | |   | `-ImplicitCastExpr 0x222ba8420f8 <col:29> 'unsigned long long' <IntegralCast>
|   | |   |   `-IntegerLiteral 0x222ba8420d0 <col:29> 'int' 8
|   | |   |-CompoundStmt 0x222ba842750 <col:32, line:28:9>
|   | |   | |-DeclStmt 0x222ba842358 <line:25:17, col:63>
|   | |   | | `-VarDecl 0x222ba842140 <col:17, col:62> col:21 used T 'u64':'unsigned long long' cinit
|   | |   | |   `-BinaryOperator 0x222ba842338 <<scratch space>:296:1, .//openssl//file_jk/before\crypto\modes\gcm128.c:25:62> 'unsigned long long' '&'
|   | |   | |     |-IntegerLiteral 0x222ba8421a8 <<scratch space>:296:1> 'unsigned long long' 16212958658533785600
|   | |   | |     `-ParenExpr 0x222ba842318 <.//openssl//file_jk/before\crypto\modes\gcm128.c:25:51, col:62> 'unsigned long long'
|   | |   | |       `-BinaryOperator 0x222ba8422f8 <col:52, col:61> 'unsigned long long' '-'
|   | |   | |         |-ImplicitCastExpr 0x222ba8422e0 <col:52> 'unsigned long long' <IntegralCast>
|   | |   | |         | `-IntegerLiteral 0x222ba8421d0 <col:52> 'int' 0
|   | |   | |         `-ParenExpr 0x222ba8422c0 <col:54, col:61> 'unsigned long long'
|   | |   | |           `-BinaryOperator 0x222ba8422a0 <line:248:16, line:25:60> 'unsigned long long' '&'
|   | |   | |             |-ImplicitCastExpr 0x222ba842270 <line:248:16, line:25:57> 'u64':'unsigned long long' <LValueToRValue>
|   | |   | |             | `-MemberExpr 0x222ba842218 <line:248:16, line:25:57> 'u64':'unsigned long long' lvalue .lo 0x222ba6bbfb8
|   | |   | |             |   `-DeclRefExpr 0x222ba8421f8 <line:248:16> 'u128':'u128' lvalue Var 0x222ba843be0 'V' 'u128':'u128'
|   | |   | |             `-ImplicitCastExpr 0x222ba842288 <line:25:60> 'unsigned long long' <IntegralCast>
|   | |   | |               `-IntegerLiteral 0x222ba842248 <col:60> 'int' 1
|   | |   | |-BinaryOperator 0x222ba842580 <line:248:16, line:26:44> 'u64':'unsigned long long' '='
|   | |   | | |-MemberExpr 0x222ba842390 <line:248:16, line:26:19> 'u64':'unsigned long long' lvalue .lo 0x222ba6bbfb8
|   | |   | | | `-DeclRefExpr 0x222ba842370 <line:248:16> 'u128':'u128' lvalue Var 0x222ba843be0 'V' 'u128':'u128'
|   | |   | | `-BinaryOperator 0x222ba842560 <line:26:25, col:44> 'unsigned long long' '|'
|   | |   | |   |-ParenExpr 0x222ba842470 <col:25, col:34> 'u64':'unsigned long long'
|   | |   | |   | `-BinaryOperator 0x222ba842450 <line:248:16, line:26:32> 'u64':'unsigned long long' '<<'
|   | |   | |   |   |-ImplicitCastExpr 0x222ba842438 <line:248:16, line:26:28> 'u64':'unsigned long long' <LValueToRValue>
|   | |   | |   |   | `-MemberExpr 0x222ba8423e0 <line:248:16, line:26:28> 'u64':'unsigned long long' lvalue .hi 0x222ba6bbf50
|   | |   | |   |   |   `-DeclRefExpr 0x222ba8423c0 <line:248:16> 'u128':'u128' lvalue Var 0x222ba843be0 'V' 'u128':'u128'
|   | |   | |   |   `-IntegerLiteral 0x222ba842410 <line:26:32> 'int' 63
|   | |   | |   `-ParenExpr 0x222ba842540 <col:36, col:44> 'u64':'unsigned long long'
|   | |   | |     `-BinaryOperator 0x222ba842520 <line:248:16, line:26:43> 'u64':'unsigned long long' '>>'
|   | |   | |       |-ImplicitCastExpr 0x222ba842508 <line:248:16, line:26:39> 'u64':'unsigned long long' <LValueToRValue>
|   | |   | |       | `-MemberExpr 0x222ba8424b0 <line:248:16, line:26:39> 'u64':'unsigned long long' lvalue .lo 0x222ba6bbfb8
|   | |   | |       |   `-DeclRefExpr 0x222ba842490 <line:248:16> 'u128':'u128' lvalue Var 0x222ba843be0 'V' 'u128':'u128'
|   | |   | |       `-IntegerLiteral 0x222ba8424e0 <line:26:43> 'int' 1
|   | |   | `-BinaryOperator 0x222ba842730 <line:248:16, line:27:36> 'u64':'unsigned long long' '='
|   | |   |   |-MemberExpr 0x222ba8425c0 <line:248:16, line:27:19> 'u64':'unsigned long long' lvalue .hi 0x222ba6bbf50
|   | |   |   | `-DeclRefExpr 0x222ba8425a0 <line:248:16> 'u128':'u128' lvalue Var 0x222ba843be0 'V' 'u128':'u128'
|   | |   |   `-BinaryOperator 0x222ba842710 <line:27:25, col:36> 'unsigned long long' '^'
|   | |   |     |-ParenExpr 0x222ba8426a0 <col:25, col:34> 'u64':'unsigned long long'
|   | |   |     | `-BinaryOperator 0x222ba842680 <line:248:16, line:27:32> 'u64':'unsigned long long' '>>'
|   | |   |     |   |-ImplicitCastExpr 0x222ba842668 <line:248:16, line:27:28> 'u64':'unsigned long long' <LValueToRValue>
|   | |   |     |   | `-MemberExpr 0x222ba842610 <line:248:16, line:27:28> 'u64':'unsigned long long' lvalue .hi 0x222ba6bbf50
|   | |   |     |   |   `-DeclRefExpr 0x222ba8425f0 <line:248:16> 'u128':'u128' lvalue Var 0x222ba843be0 'V' 'u128':'u128'
|   | |   |     |   `-IntegerLiteral 0x222ba842640 <line:27:32> 'int' 1
|   | |   |     `-ImplicitCastExpr 0x222ba8426f8 <col:36> 'u64':'unsigned long long' <LValueToRValue>
|   | |   |       `-DeclRefExpr 0x222ba8426c0 <col:36> 'u64':'unsigned long long' lvalue Var 0x222ba842140 'T' 'u64':'unsigned long long'
|   | |   `-CompoundStmt 0x222ba842e90 <line:29:14, line:33:9>
|   | |     |-DeclStmt 0x222ba8429f8 <line:30:17, col:56>
|   | |     | `-VarDecl 0x222ba842788 <col:17, col:55> col:21 used T 'u32':'unsigned int' cinit
|   | |     |   `-BinaryOperator 0x222ba8429d8 <col:25, col:55> 'unsigned int' '&'
|   | |     |     |-IntegerLiteral 0x222ba8427f0 <col:25> 'unsigned int' 3774873600
|   | |     |     `-ParenExpr 0x222ba8429b8 <col:39, col:55> 'unsigned int'
|   | |     |       `-BinaryOperator 0x222ba842998 <col:40, col:54> 'unsigned int' '-'
|   | |     |         |-ImplicitCastExpr 0x222ba842980 <col:40> 'unsigned int' <IntegralCast>
|   | |     |         | `-IntegerLiteral 0x222ba842818 <col:40> 'int' 0
|   | |     |         `-CStyleCastExpr 0x222ba842958 <col:42, col:54> 'u32':'unsigned int' <IntegralCast>
|   | |     |           `-ParenExpr 0x222ba842938 <col:47, col:54> 'unsigned long long'
|   | |     |             `-BinaryOperator 0x222ba8428e8 <line:248:16, line:30:53> 'unsigned long long' '&'
|   | |     |               |-ImplicitCastExpr 0x222ba8428b8 <line:248:16, line:30:50> 'u64':'unsigned long long' <LValueToRValue>
|   | |     |               | `-MemberExpr 0x222ba842860 <line:248:16, line:30:50> 'u64':'unsigned long long' lvalue .lo 0x222ba6bbfb8
|   | |     |               |   `-DeclRefExpr 0x222ba842840 <line:248:16> 'u128':'u128' lvalue Var 0x222ba843be0 'V' 'u128':'u128'
|   | |     |               `-ImplicitCastExpr 0x222ba8428d0 <line:30:53> 'unsigned long long' <IntegralCast>
|   | |     |                 `-IntegerLiteral 0x222ba842890 <col:53> 'int' 1
|   | |     |-BinaryOperator 0x222ba842c20 <line:248:16, line:31:44> 'u64':'unsigned long long' '='
|   | |     | |-MemberExpr 0x222ba842a30 <line:248:16, line:31:19> 'u64':'unsigned long long' lvalue .lo 0x222ba6bbfb8
|   | |     | | `-DeclRefExpr 0x222ba842a10 <line:248:16> 'u128':'u128' lvalue Var 0x222ba843be0 'V' 'u128':'u128'
|   | |     | `-BinaryOperator 0x222ba842c00 <line:31:25, col:44> 'unsigned long long' '|'
|   | |     |   |-ParenExpr 0x222ba842b10 <col:25, col:34> 'u64':'unsigned long long'
|   | |     |   | `-BinaryOperator 0x222ba842af0 <line:248:16, line:31:32> 'u64':'unsigned long long' '<<'
|   | |     |   |   |-ImplicitCastExpr 0x222ba842ad8 <line:248:16, line:31:28> 'u64':'unsigned long long' <LValueToRValue>
|   | |     |   |   | `-MemberExpr 0x222ba842a80 <line:248:16, line:31:28> 'u64':'unsigned long long' lvalue .hi 0x222ba6bbf50
|   | |     |   |   |   `-DeclRefExpr 0x222ba842a60 <line:248:16> 'u128':'u128' lvalue Var 0x222ba843be0 'V' 'u128':'u128'
|   | |     |   |   `-IntegerLiteral 0x222ba842ab0 <line:31:32> 'int' 63
|   | |     |   `-ParenExpr 0x222ba842be0 <col:36, col:44> 'u64':'unsigned long long'
|   | |     |     `-BinaryOperator 0x222ba842bc0 <line:248:16, line:31:43> 'u64':'unsigned long long' '>>'
|   | |     |       |-ImplicitCastExpr 0x222ba842ba8 <line:248:16, line:31:39> 'u64':'unsigned long long' <LValueToRValue>
|   | |     |       | `-MemberExpr 0x222ba842b50 <line:248:16, line:31:39> 'u64':'unsigned long long' lvalue .lo 0x222ba6bbfb8
|   | |     |       |   `-DeclRefExpr 0x222ba842b30 <line:248:16> 'u128':'u128' lvalue Var 0x222ba843be0 'V' 'u128':'u128'
|   | |     |       `-IntegerLiteral 0x222ba842b80 <line:31:43> 'int' 1
|   | |     `-BinaryOperator 0x222ba842e70 <line:248:16, line:32:47> 'u64':'unsigned long long' '='
|   | |       |-MemberExpr 0x222ba842c60 <line:248:16, line:32:19> 'u64':'unsigned long long' lvalue .hi 0x222ba6bbf50
|   | |       | `-DeclRefExpr 0x222ba842c40 <line:248:16> 'u128':'u128' lvalue Var 0x222ba843be0 'V' 'u128':'u128'
|   | |       `-BinaryOperator 0x222ba842e50 <line:32:25, col:47> 'unsigned long long' '^'
|   | |         |-ParenExpr 0x222ba842d40 <col:25, col:34> 'u64':'unsigned long long'
|   | |         | `-BinaryOperator 0x222ba842d20 <line:248:16, line:32:32> 'u64':'unsigned long long' '>>'
|   | |         |   |-ImplicitCastExpr 0x222ba842d08 <line:248:16, line:32:28> 'u64':'unsigned long long' <LValueToRValue>
|   | |         |   | `-MemberExpr 0x222ba842cb0 <line:248:16, line:32:28> 'u64':'unsigned long long' lvalue .hi 0x222ba6bbf50
|   | |         |   |   `-DeclRefExpr 0x222ba842c90 <line:248:16> 'u128':'u128' lvalue Var 0x222ba843be0 'V' 'u128':'u128'
|   | |         |   `-IntegerLiteral 0x222ba842ce0 <line:32:32> 'int' 1
|   | |         `-ParenExpr 0x222ba842e30 <col:36, col:47> 'u64':'unsigned long long'
|   | |           `-BinaryOperator 0x222ba842e10 <col:37, col:45> 'u64':'unsigned long long' '<<'
|   | |             |-CStyleCastExpr 0x222ba842dc0 <col:37, col:42> 'u64':'unsigned long long' <IntegralCast>
|   | |             | `-ImplicitCastExpr 0x222ba842da8 <col:42> 'u32':'unsigned int' <LValueToRValue> part_of_explicit_cast
|   | |             |   `-DeclRefExpr 0x222ba842d60 <col:42> 'u32':'unsigned int' lvalue Var 0x222ba842788 'T' 'u32':'unsigned int'
|   | |             `-IntegerLiteral 0x222ba842de8 <col:45> 'int' 32
|   | `-IntegerLiteral 0x222ba842ef8 <line:34:9> 'int' 0
|   |-BinaryOperator 0x222ba842ff8 <line:249:5, col:17> 'u128':'u128' '='
|   | |-ArraySubscriptExpr 0x222ba842fa0 <col:5, col:13> 'u128':'u128' lvalue
|   | | |-ImplicitCastExpr 0x222ba842f88 <col:5> 'u128 *':'u128 *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x222ba842f40 <col:5> 'u128 *':'u128 *' lvalue ParmVar 0x222ba843900 'Htable' 'u128 *':'u128 *'
|   | | `-IntegerLiteral 0x222ba842f60 <col:12> 'int' 1
|   | `-ImplicitCastExpr 0x222ba842fe0 <col:17> 'u128':'u128' <LValueToRValue>
|   |   `-DeclRefExpr 0x222ba842fc0 <col:17> 'u128':'u128' lvalue Var 0x222ba843be0 'V' 'u128':'u128'
|   |-BinaryOperator 0x222ba841450 <line:250:5, col:73> 'u64':'unsigned long long' ','
|   | |-BinaryOperator 0x222ba841210 <col:5, col:37> 'u64':'unsigned long long' '='
|   | | |-MemberExpr 0x222ba843098 <col:5, col:15> 'u64':'unsigned long long' lvalue .hi 0x222ba6bbf50
|   | | | `-ArraySubscriptExpr 0x222ba843078 <col:5, col:13> 'u128':'u128' lvalue
|   | | |   |-ImplicitCastExpr 0x222ba843060 <col:5> 'u128 *':'u128 *' <LValueToRValue>
|   | | |   | `-DeclRefExpr 0x222ba843018 <col:5> 'u128 *':'u128 *' lvalue ParmVar 0x222ba843900 'Htable' 'u128 *':'u128 *'
|   | | |   `-IntegerLiteral 0x222ba843038 <col:12> 'int' 3
|   | | `-BinaryOperator 0x222ba8411f0 <col:20, col:37> 'unsigned long long' '^'
|   | |   |-ImplicitCastExpr 0x222ba8411c0 <col:20, col:22> 'u64':'unsigned long long' <LValueToRValue>
|   | |   | `-MemberExpr 0x222ba8410e0 <col:20, col:22> 'u64':'unsigned long long' lvalue .hi 0x222ba6bbf50
|   | |   |   `-DeclRefExpr 0x222ba8410c0 <col:20> 'u128':'u128' lvalue Var 0x222ba843be0 'V' 'u128':'u128'
|   | |   `-ImplicitCastExpr 0x222ba8411d8 <col:27, col:37> 'u64':'unsigned long long' <LValueToRValue>
|   | |     `-MemberExpr 0x222ba841190 <col:27, col:37> 'u64':'unsigned long long' lvalue .hi 0x222ba6bbf50
|   | |       `-ArraySubscriptExpr 0x222ba841170 <col:27, col:35> 'u128':'u128' lvalue
|   | |         |-ImplicitCastExpr 0x222ba841158 <col:27> 'u128 *':'u128 *' <LValueToRValue>
|   | |         | `-DeclRefExpr 0x222ba841110 <col:27> 'u128 *':'u128 *' lvalue ParmVar 0x222ba843900 'Htable' 'u128 *':'u128 *'
|   | |         `-IntegerLiteral 0x222ba841130 <col:34> 'int' 2
|   | `-BinaryOperator 0x222ba841430 <col:41, col:73> 'u64':'unsigned long long' '='
|   |   |-MemberExpr 0x222ba8412b0 <col:41, col:51> 'u64':'unsigned long long' lvalue .lo 0x222ba6bbfb8
|   |   | `-ArraySubscriptExpr 0x222ba841290 <col:41, col:49> 'u128':'u128' lvalue
|   |   |   |-ImplicitCastExpr 0x222ba841278 <col:41> 'u128 *':'u128 *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x222ba841230 <col:41> 'u128 *':'u128 *' lvalue ParmVar 0x222ba843900 'Htable' 'u128 *':'u128 *'
|   |   |   `-IntegerLiteral 0x222ba841250 <col:48> 'int' 3
|   |   `-BinaryOperator 0x222ba841410 <col:56, col:73> 'unsigned long long' '^'
|   |     |-ImplicitCastExpr 0x222ba8413e0 <col:56, col:58> 'u64':'unsigned long long' <LValueToRValue>
|   |     | `-MemberExpr 0x222ba841300 <col:56, col:58> 'u64':'unsigned long long' lvalue .lo 0x222ba6bbfb8
|   |     |   `-DeclRefExpr 0x222ba8412e0 <col:56> 'u128':'u128' lvalue Var 0x222ba843be0 'V' 'u128':'u128'
|   |     `-ImplicitCastExpr 0x222ba8413f8 <col:63, col:73> 'u64':'unsigned long long' <LValueToRValue>
|   |       `-MemberExpr 0x222ba8413b0 <col:63, col:73> 'u64':'unsigned long long' lvalue .lo 0x222ba6bbfb8
|   |         `-ArraySubscriptExpr 0x222ba841390 <col:63, col:71> 'u128':'u128' lvalue
|   |           |-ImplicitCastExpr 0x222ba841378 <col:63> 'u128 *':'u128 *' <LValueToRValue>
|   |           | `-DeclRefExpr 0x222ba841330 <col:63> 'u128 *':'u128 *' lvalue ParmVar 0x222ba843900 'Htable' 'u128 *':'u128 *'
|   |           `-IntegerLiteral 0x222ba841350 <col:70> 'int' 2
|   |-BinaryOperator 0x222ba841528 <line:251:5, col:17> 'u128':'u128' '='
|   | |-DeclRefExpr 0x222ba841470 <col:5> 'u128':'u128' lvalue Var 0x222ba843be0 'V' 'u128':'u128'
|   | `-ImplicitCastExpr 0x222ba841510 <col:9, col:17> 'u128':'u128' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x222ba8414f0 <col:9, col:17> 'u128':'u128' lvalue
|   |     |-ImplicitCastExpr 0x222ba8414d8 <col:9> 'u128 *':'u128 *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x222ba841490 <col:9> 'u128 *':'u128 *' lvalue ParmVar 0x222ba843900 'Htable' 'u128 *':'u128 *'
|   |     `-IntegerLiteral 0x222ba8414b0 <col:16> 'int' 4
|   |-BinaryOperator 0x222ba841988 <line:252:5, col:73> 'u64':'unsigned long long' ','
|   | |-BinaryOperator 0x222ba841748 <col:5, col:37> 'u64':'unsigned long long' '='
|   | | |-MemberExpr 0x222ba8415c8 <col:5, col:15> 'u64':'unsigned long long' lvalue .hi 0x222ba6bbf50
|   | | | `-ArraySubscriptExpr 0x222ba8415a8 <col:5, col:13> 'u128':'u128' lvalue
|   | | |   |-ImplicitCastExpr 0x222ba841590 <col:5> 'u128 *':'u128 *' <LValueToRValue>
|   | | |   | `-DeclRefExpr 0x222ba841548 <col:5> 'u128 *':'u128 *' lvalue ParmVar 0x222ba843900 'Htable' 'u128 *':'u128 *'
|   | | |   `-IntegerLiteral 0x222ba841568 <col:12> 'int' 5
|   | | `-BinaryOperator 0x222ba841728 <col:20, col:37> 'unsigned long long' '^'
|   | |   |-ImplicitCastExpr 0x222ba8416f8 <col:20, col:22> 'u64':'unsigned long long' <LValueToRValue>
|   | |   | `-MemberExpr 0x222ba841618 <col:20, col:22> 'u64':'unsigned long long' lvalue .hi 0x222ba6bbf50
|   | |   |   `-DeclRefExpr 0x222ba8415f8 <col:20> 'u128':'u128' lvalue Var 0x222ba843be0 'V' 'u128':'u128'
|   | |   `-ImplicitCastExpr 0x222ba841710 <col:27, col:37> 'u64':'unsigned long long' <LValueToRValue>
|   | |     `-MemberExpr 0x222ba8416c8 <col:27, col:37> 'u64':'unsigned long long' lvalue .hi 0x222ba6bbf50
|   | |       `-ArraySubscriptExpr 0x222ba8416a8 <col:27, col:35> 'u128':'u128' lvalue
|   | |         |-ImplicitCastExpr 0x222ba841690 <col:27> 'u128 *':'u128 *' <LValueToRValue>
|   | |         | `-DeclRefExpr 0x222ba841648 <col:27> 'u128 *':'u128 *' lvalue ParmVar 0x222ba843900 'Htable' 'u128 *':'u128 *'
|   | |         `-IntegerLiteral 0x222ba841668 <col:34> 'int' 1
|   | `-BinaryOperator 0x222ba841968 <col:41, col:73> 'u64':'unsigned long long' '='
|   |   |-MemberExpr 0x222ba8417e8 <col:41, col:51> 'u64':'unsigned long long' lvalue .lo 0x222ba6bbfb8
|   |   | `-ArraySubscriptExpr 0x222ba8417c8 <col:41, col:49> 'u128':'u128' lvalue
|   |   |   |-ImplicitCastExpr 0x222ba8417b0 <col:41> 'u128 *':'u128 *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x222ba841768 <col:41> 'u128 *':'u128 *' lvalue ParmVar 0x222ba843900 'Htable' 'u128 *':'u128 *'
|   |   |   `-IntegerLiteral 0x222ba841788 <col:48> 'int' 5
|   |   `-BinaryOperator 0x222ba841948 <col:56, col:73> 'unsigned long long' '^'
|   |     |-ImplicitCastExpr 0x222ba841918 <col:56, col:58> 'u64':'unsigned long long' <LValueToRValue>
|   |     | `-MemberExpr 0x222ba841838 <col:56, col:58> 'u64':'unsigned long long' lvalue .lo 0x222ba6bbfb8
|   |     |   `-DeclRefExpr 0x222ba841818 <col:56> 'u128':'u128' lvalue Var 0x222ba843be0 'V' 'u128':'u128'
|   |     `-ImplicitCastExpr 0x222ba841930 <col:63, col:73> 'u64':'unsigned long long' <LValueToRValue>
|   |       `-MemberExpr 0x222ba8418e8 <col:63, col:73> 'u64':'unsigned long long' lvalue .lo 0x222ba6bbfb8
|   |         `-ArraySubscriptExpr 0x222ba8418c8 <col:63, col:71> 'u128':'u128' lvalue
|   |           |-ImplicitCastExpr 0x222ba8418b0 <col:63> 'u128 *':'u128 *' <LValueToRValue>
|   |           | `-DeclRefExpr 0x222ba841868 <col:63> 'u128 *':'u128 *' lvalue ParmVar 0x222ba843900 'Htable' 'u128 *':'u128 *'
|   |           `-IntegerLiteral 0x222ba841888 <col:70> 'int' 1
|   |-BinaryOperator 0x222ba841de8 <line:253:5, col:73> 'u64':'unsigned long long' ','
|   | |-BinaryOperator 0x222ba841ba8 <col:5, col:37> 'u64':'unsigned long long' '='
|   | | |-MemberExpr 0x222ba841a28 <col:5, col:15> 'u64':'unsigned long long' lvalue .hi 0x222ba6bbf50
|   | | | `-ArraySubscriptExpr 0x222ba841a08 <col:5, col:13> 'u128':'u128' lvalue
|   | | |   |-ImplicitCastExpr 0x222ba8419f0 <col:5> 'u128 *':'u128 *' <LValueToRValue>
|   | | |   | `-DeclRefExpr 0x222ba8419a8 <col:5> 'u128 *':'u128 *' lvalue ParmVar 0x222ba843900 'Htable' 'u128 *':'u128 *'
|   | | |   `-IntegerLiteral 0x222ba8419c8 <col:12> 'int' 6
|   | | `-BinaryOperator 0x222ba841b88 <col:20, col:37> 'unsigned long long' '^'
|   | |   |-ImplicitCastExpr 0x222ba841b58 <col:20, col:22> 'u64':'unsigned long long' <LValueToRValue>
|   | |   | `-MemberExpr 0x222ba841a78 <col:20, col:22> 'u64':'unsigned long long' lvalue .hi 0x222ba6bbf50
|   | |   |   `-DeclRefExpr 0x222ba841a58 <col:20> 'u128':'u128' lvalue Var 0x222ba843be0 'V' 'u128':'u128'
|   | |   `-ImplicitCastExpr 0x222ba841b70 <col:27, col:37> 'u64':'unsigned long long' <LValueToRValue>
|   | |     `-MemberExpr 0x222ba841b28 <col:27, col:37> 'u64':'unsigned long long' lvalue .hi 0x222ba6bbf50
|   | |       `-ArraySubscriptExpr 0x222ba841b08 <col:27, col:35> 'u128':'u128' lvalue
|   | |         |-ImplicitCastExpr 0x222ba841af0 <col:27> 'u128 *':'u128 *' <LValueToRValue>
|   | |         | `-DeclRefExpr 0x222ba841aa8 <col:27> 'u128 *':'u128 *' lvalue ParmVar 0x222ba843900 'Htable' 'u128 *':'u128 *'
|   | |         `-IntegerLiteral 0x222ba841ac8 <col:34> 'int' 2
|   | `-BinaryOperator 0x222ba841dc8 <col:41, col:73> 'u64':'unsigned long long' '='
|   |   |-MemberExpr 0x222ba841c48 <col:41, col:51> 'u64':'unsigned long long' lvalue .lo 0x222ba6bbfb8
|   |   | `-ArraySubscriptExpr 0x222ba841c28 <col:41, col:49> 'u128':'u128' lvalue
|   |   |   |-ImplicitCastExpr 0x222ba841c10 <col:41> 'u128 *':'u128 *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x222ba841bc8 <col:41> 'u128 *':'u128 *' lvalue ParmVar 0x222ba843900 'Htable' 'u128 *':'u128 *'
|   |   |   `-IntegerLiteral 0x222ba841be8 <col:48> 'int' 6
|   |   `-BinaryOperator 0x222ba841da8 <col:56, col:73> 'unsigned long long' '^'
|   |     |-ImplicitCastExpr 0x222ba841d78 <col:56, col:58> 'u64':'unsigned long long' <LValueToRValue>
|   |     | `-MemberExpr 0x222ba841c98 <col:56, col:58> 'u64':'unsigned long long' lvalue .lo 0x222ba6bbfb8
|   |     |   `-DeclRefExpr 0x222ba841c78 <col:56> 'u128':'u128' lvalue Var 0x222ba843be0 'V' 'u128':'u128'
|   |     `-ImplicitCastExpr 0x222ba841d90 <col:63, col:73> 'u64':'unsigned long long' <LValueToRValue>
|   |       `-MemberExpr 0x222ba841d48 <col:63, col:73> 'u64':'unsigned long long' lvalue .lo 0x222ba6bbfb8
|   |         `-ArraySubscriptExpr 0x222ba841d28 <col:63, col:71> 'u128':'u128' lvalue
|   |           |-ImplicitCastExpr 0x222ba841d10 <col:63> 'u128 *':'u128 *' <LValueToRValue>
|   |           | `-DeclRefExpr 0x222ba841cc8 <col:63> 'u128 *':'u128 *' lvalue ParmVar 0x222ba843900 'Htable' 'u128 *':'u128 *'
|   |           `-IntegerLiteral 0x222ba841ce8 <col:70> 'int' 2
|   |-BinaryOperator 0x222ba84f160 <line:254:5, col:73> 'u64':'unsigned long long' ','
|   | |-BinaryOperator 0x222ba842008 <col:5, col:37> 'u64':'unsigned long long' '='
|   | | |-MemberExpr 0x222ba841e88 <col:5, col:15> 'u64':'unsigned long long' lvalue .hi 0x222ba6bbf50
|   | | | `-ArraySubscriptExpr 0x222ba841e68 <col:5, col:13> 'u128':'u128' lvalue
|   | | |   |-ImplicitCastExpr 0x222ba841e50 <col:5> 'u128 *':'u128 *' <LValueToRValue>
|   | | |   | `-DeclRefExpr 0x222ba841e08 <col:5> 'u128 *':'u128 *' lvalue ParmVar 0x222ba843900 'Htable' 'u128 *':'u128 *'
|   | | |   `-IntegerLiteral 0x222ba841e28 <col:12> 'int' 7
|   | | `-BinaryOperator 0x222ba841fe8 <col:20, col:37> 'unsigned long long' '^'
|   | |   |-ImplicitCastExpr 0x222ba841fb8 <col:20, col:22> 'u64':'unsigned long long' <LValueToRValue>
|   | |   | `-MemberExpr 0x222ba841ed8 <col:20, col:22> 'u64':'unsigned long long' lvalue .hi 0x222ba6bbf50
|   | |   |   `-DeclRefExpr 0x222ba841eb8 <col:20> 'u128':'u128' lvalue Var 0x222ba843be0 'V' 'u128':'u128'
|   | |   `-ImplicitCastExpr 0x222ba841fd0 <col:27, col:37> 'u64':'unsigned long long' <LValueToRValue>
|   | |     `-MemberExpr 0x222ba841f88 <col:27, col:37> 'u64':'unsigned long long' lvalue .hi 0x222ba6bbf50
|   | |       `-ArraySubscriptExpr 0x222ba841f68 <col:27, col:35> 'u128':'u128' lvalue
|   | |         |-ImplicitCastExpr 0x222ba841f50 <col:27> 'u128 *':'u128 *' <LValueToRValue>
|   | |         | `-DeclRefExpr 0x222ba841f08 <col:27> 'u128 *':'u128 *' lvalue ParmVar 0x222ba843900 'Htable' 'u128 *':'u128 *'
|   | |         `-IntegerLiteral 0x222ba841f28 <col:34> 'int' 3
|   | `-BinaryOperator 0x222ba84f140 <col:41, col:73> 'u64':'unsigned long long' '='
|   |   |-MemberExpr 0x222ba84efc0 <col:41, col:51> 'u64':'unsigned long long' lvalue .lo 0x222ba6bbfb8
|   |   | `-ArraySubscriptExpr 0x222ba842088 <col:41, col:49> 'u128':'u128' lvalue
|   |   |   |-ImplicitCastExpr 0x222ba842070 <col:41> 'u128 *':'u128 *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x222ba842028 <col:41> 'u128 *':'u128 *' lvalue ParmVar 0x222ba843900 'Htable' 'u128 *':'u128 *'
|   |   |   `-IntegerLiteral 0x222ba842048 <col:48> 'int' 7
|   |   `-BinaryOperator 0x222ba84f120 <col:56, col:73> 'unsigned long long' '^'
|   |     |-ImplicitCastExpr 0x222ba84f0f0 <col:56, col:58> 'u64':'unsigned long long' <LValueToRValue>
|   |     | `-MemberExpr 0x222ba84f010 <col:56, col:58> 'u64':'unsigned long long' lvalue .lo 0x222ba6bbfb8
|   |     |   `-DeclRefExpr 0x222ba84eff0 <col:56> 'u128':'u128' lvalue Var 0x222ba843be0 'V' 'u128':'u128'
|   |     `-ImplicitCastExpr 0x222ba84f108 <col:63, col:73> 'u64':'unsigned long long' <LValueToRValue>
|   |       `-MemberExpr 0x222ba84f0c0 <col:63, col:73> 'u64':'unsigned long long' lvalue .lo 0x222ba6bbfb8
|   |         `-ArraySubscriptExpr 0x222ba84f0a0 <col:63, col:71> 'u128':'u128' lvalue
|   |           |-ImplicitCastExpr 0x222ba84f088 <col:63> 'u128 *':'u128 *' <LValueToRValue>
|   |           | `-DeclRefExpr 0x222ba84f040 <col:63> 'u128 *':'u128 *' lvalue ParmVar 0x222ba843900 'Htable' 'u128 *':'u128 *'
|   |           `-IntegerLiteral 0x222ba84f060 <col:70> 'int' 3
|   |-BinaryOperator 0x222ba84f238 <line:255:5, col:17> 'u128':'u128' '='
|   | |-DeclRefExpr 0x222ba84f180 <col:5> 'u128':'u128' lvalue Var 0x222ba843be0 'V' 'u128':'u128'
|   | `-ImplicitCastExpr 0x222ba84f220 <col:9, col:17> 'u128':'u128' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x222ba84f200 <col:9, col:17> 'u128':'u128' lvalue
|   |     |-ImplicitCastExpr 0x222ba84f1e8 <col:9> 'u128 *':'u128 *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x222ba84f1a0 <col:9> 'u128 *':'u128 *' lvalue ParmVar 0x222ba843900 'Htable' 'u128 *':'u128 *'
|   |     `-IntegerLiteral 0x222ba84f1c0 <col:16> 'int' 8
|   |-BinaryOperator 0x222ba84f698 <line:256:5, col:73> 'u64':'unsigned long long' ','
|   | |-BinaryOperator 0x222ba84f458 <col:5, col:37> 'u64':'unsigned long long' '='
|   | | |-MemberExpr 0x222ba84f2d8 <col:5, col:15> 'u64':'unsigned long long' lvalue .hi 0x222ba6bbf50
|   | | | `-ArraySubscriptExpr 0x222ba84f2b8 <col:5, col:13> 'u128':'u128' lvalue
|   | | |   |-ImplicitCastExpr 0x222ba84f2a0 <col:5> 'u128 *':'u128 *' <LValueToRValue>
|   | | |   | `-DeclRefExpr 0x222ba84f258 <col:5> 'u128 *':'u128 *' lvalue ParmVar 0x222ba843900 'Htable' 'u128 *':'u128 *'
|   | | |   `-IntegerLiteral 0x222ba84f278 <col:12> 'int' 9
|   | | `-BinaryOperator 0x222ba84f438 <col:20, col:37> 'unsigned long long' '^'
|   | |   |-ImplicitCastExpr 0x222ba84f408 <col:20, col:22> 'u64':'unsigned long long' <LValueToRValue>
|   | |   | `-MemberExpr 0x222ba84f328 <col:20, col:22> 'u64':'unsigned long long' lvalue .hi 0x222ba6bbf50
|   | |   |   `-DeclRefExpr 0x222ba84f308 <col:20> 'u128':'u128' lvalue Var 0x222ba843be0 'V' 'u128':'u128'
|   | |   `-ImplicitCastExpr 0x222ba84f420 <col:27, col:37> 'u64':'unsigned long long' <LValueToRValue>
|   | |     `-MemberExpr 0x222ba84f3d8 <col:27, col:37> 'u64':'unsigned long long' lvalue .hi 0x222ba6bbf50
|   | |       `-ArraySubscriptExpr 0x222ba84f3b8 <col:27, col:35> 'u128':'u128' lvalue
|   | |         |-ImplicitCastExpr 0x222ba84f3a0 <col:27> 'u128 *':'u128 *' <LValueToRValue>
|   | |         | `-DeclRefExpr 0x222ba84f358 <col:27> 'u128 *':'u128 *' lvalue ParmVar 0x222ba843900 'Htable' 'u128 *':'u128 *'
|   | |         `-IntegerLiteral 0x222ba84f378 <col:34> 'int' 1
|   | `-BinaryOperator 0x222ba84f678 <col:41, col:73> 'u64':'unsigned long long' '='
|   |   |-MemberExpr 0x222ba84f4f8 <col:41, col:51> 'u64':'unsigned long long' lvalue .lo 0x222ba6bbfb8
|   |   | `-ArraySubscriptExpr 0x222ba84f4d8 <col:41, col:49> 'u128':'u128' lvalue
|   |   |   |-ImplicitCastExpr 0x222ba84f4c0 <col:41> 'u128 *':'u128 *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x222ba84f478 <col:41> 'u128 *':'u128 *' lvalue ParmVar 0x222ba843900 'Htable' 'u128 *':'u128 *'
|   |   |   `-IntegerLiteral 0x222ba84f498 <col:48> 'int' 9
|   |   `-BinaryOperator 0x222ba84f658 <col:56, col:73> 'unsigned long long' '^'
|   |     |-ImplicitCastExpr 0x222ba84f628 <col:56, col:58> 'u64':'unsigned long long' <LValueToRValue>
|   |     | `-MemberExpr 0x222ba84f548 <col:56, col:58> 'u64':'unsigned long long' lvalue .lo 0x222ba6bbfb8
|   |     |   `-DeclRefExpr 0x222ba84f528 <col:56> 'u128':'u128' lvalue Var 0x222ba843be0 'V' 'u128':'u128'
|   |     `-ImplicitCastExpr 0x222ba84f640 <col:63, col:73> 'u64':'unsigned long long' <LValueToRValue>
|   |       `-MemberExpr 0x222ba84f5f8 <col:63, col:73> 'u64':'unsigned long long' lvalue .lo 0x222ba6bbfb8
|   |         `-ArraySubscriptExpr 0x222ba84f5d8 <col:63, col:71> 'u128':'u128' lvalue
|   |           |-ImplicitCastExpr 0x222ba84f5c0 <col:63> 'u128 *':'u128 *' <LValueToRValue>
|   |           | `-DeclRefExpr 0x222ba84f578 <col:63> 'u128 *':'u128 *' lvalue ParmVar 0x222ba843900 'Htable' 'u128 *':'u128 *'
|   |           `-IntegerLiteral 0x222ba84f598 <col:70> 'int' 1
|   |-BinaryOperator 0x222ba84faf8 <line:257:5, col:75> 'u64':'unsigned long long' ','
|   | |-BinaryOperator 0x222ba84f8b8 <col:5, col:38> 'u64':'unsigned long long' '='
|   | | |-MemberExpr 0x222ba84f738 <col:5, col:16> 'u64':'unsigned long long' lvalue .hi 0x222ba6bbf50
|   | | | `-ArraySubscriptExpr 0x222ba84f718 <col:5, col:14> 'u128':'u128' lvalue
|   | | |   |-ImplicitCastExpr 0x222ba84f700 <col:5> 'u128 *':'u128 *' <LValueToRValue>
|   | | |   | `-DeclRefExpr 0x222ba84f6b8 <col:5> 'u128 *':'u128 *' lvalue ParmVar 0x222ba843900 'Htable' 'u128 *':'u128 *'
|   | | |   `-IntegerLiteral 0x222ba84f6d8 <col:12> 'int' 10
|   | | `-BinaryOperator 0x222ba84f898 <col:21, col:38> 'unsigned long long' '^'
|   | |   |-ImplicitCastExpr 0x222ba84f868 <col:21, col:23> 'u64':'unsigned long long' <LValueToRValue>
|   | |   | `-MemberExpr 0x222ba84f788 <col:21, col:23> 'u64':'unsigned long long' lvalue .hi 0x222ba6bbf50
|   | |   |   `-DeclRefExpr 0x222ba84f768 <col:21> 'u128':'u128' lvalue Var 0x222ba843be0 'V' 'u128':'u128'
|   | |   `-ImplicitCastExpr 0x222ba84f880 <col:28, col:38> 'u64':'unsigned long long' <LValueToRValue>
|   | |     `-MemberExpr 0x222ba84f838 <col:28, col:38> 'u64':'unsigned long long' lvalue .hi 0x222ba6bbf50
|   | |       `-ArraySubscriptExpr 0x222ba84f818 <col:28, col:36> 'u128':'u128' lvalue
|   | |         |-ImplicitCastExpr 0x222ba84f800 <col:28> 'u128 *':'u128 *' <LValueToRValue>
|   | |         | `-DeclRefExpr 0x222ba84f7b8 <col:28> 'u128 *':'u128 *' lvalue ParmVar 0x222ba843900 'Htable' 'u128 *':'u128 *'
|   | |         `-IntegerLiteral 0x222ba84f7d8 <col:35> 'int' 2
|   | `-BinaryOperator 0x222ba84fad8 <col:42, col:75> 'u64':'unsigned long long' '='
|   |   |-MemberExpr 0x222ba84f958 <col:42, col:53> 'u64':'unsigned long long' lvalue .lo 0x222ba6bbfb8
|   |   | `-ArraySubscriptExpr 0x222ba84f938 <col:42, col:51> 'u128':'u128' lvalue
|   |   |   |-ImplicitCastExpr 0x222ba84f920 <col:42> 'u128 *':'u128 *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x222ba84f8d8 <col:42> 'u128 *':'u128 *' lvalue ParmVar 0x222ba843900 'Htable' 'u128 *':'u128 *'
|   |   |   `-IntegerLiteral 0x222ba84f8f8 <col:49> 'int' 10
|   |   `-BinaryOperator 0x222ba84fab8 <col:58, col:75> 'unsigned long long' '^'
|   |     |-ImplicitCastExpr 0x222ba84fa88 <col:58, col:60> 'u64':'unsigned long long' <LValueToRValue>
|   |     | `-MemberExpr 0x222ba84f9a8 <col:58, col:60> 'u64':'unsigned long long' lvalue .lo 0x222ba6bbfb8
|   |     |   `-DeclRefExpr 0x222ba84f988 <col:58> 'u128':'u128' lvalue Var 0x222ba843be0 'V' 'u128':'u128'
|   |     `-ImplicitCastExpr 0x222ba84faa0 <col:65, col:75> 'u64':'unsigned long long' <LValueToRValue>
|   |       `-MemberExpr 0x222ba84fa58 <col:65, col:75> 'u64':'unsigned long long' lvalue .lo 0x222ba6bbfb8
|   |         `-ArraySubscriptExpr 0x222ba84fa38 <col:65, col:73> 'u128':'u128' lvalue
|   |           |-ImplicitCastExpr 0x222ba84fa20 <col:65> 'u128 *':'u128 *' <LValueToRValue>
|   |           | `-DeclRefExpr 0x222ba84f9d8 <col:65> 'u128 *':'u128 *' lvalue ParmVar 0x222ba843900 'Htable' 'u128 *':'u128 *'
|   |           `-IntegerLiteral 0x222ba84f9f8 <col:72> 'int' 2
|   |-BinaryOperator 0x222ba84ff58 <line:258:5, col:75> 'u64':'unsigned long long' ','
|   | |-BinaryOperator 0x222ba84fd18 <col:5, col:38> 'u64':'unsigned long long' '='
|   | | |-MemberExpr 0x222ba84fb98 <col:5, col:16> 'u64':'unsigned long long' lvalue .hi 0x222ba6bbf50
|   | | | `-ArraySubscriptExpr 0x222ba84fb78 <col:5, col:14> 'u128':'u128' lvalue
|   | | |   |-ImplicitCastExpr 0x222ba84fb60 <col:5> 'u128 *':'u128 *' <LValueToRValue>
|   | | |   | `-DeclRefExpr 0x222ba84fb18 <col:5> 'u128 *':'u128 *' lvalue ParmVar 0x222ba843900 'Htable' 'u128 *':'u128 *'
|   | | |   `-IntegerLiteral 0x222ba84fb38 <col:12> 'int' 11
|   | | `-BinaryOperator 0x222ba84fcf8 <col:21, col:38> 'unsigned long long' '^'
|   | |   |-ImplicitCastExpr 0x222ba84fcc8 <col:21, col:23> 'u64':'unsigned long long' <LValueToRValue>
|   | |   | `-MemberExpr 0x222ba84fbe8 <col:21, col:23> 'u64':'unsigned long long' lvalue .hi 0x222ba6bbf50
|   | |   |   `-DeclRefExpr 0x222ba84fbc8 <col:21> 'u128':'u128' lvalue Var 0x222ba843be0 'V' 'u128':'u128'
|   | |   `-ImplicitCastExpr 0x222ba84fce0 <col:28, col:38> 'u64':'unsigned long long' <LValueToRValue>
|   | |     `-MemberExpr 0x222ba84fc98 <col:28, col:38> 'u64':'unsigned long long' lvalue .hi 0x222ba6bbf50
|   | |       `-ArraySubscriptExpr 0x222ba84fc78 <col:28, col:36> 'u128':'u128' lvalue
|   | |         |-ImplicitCastExpr 0x222ba84fc60 <col:28> 'u128 *':'u128 *' <LValueToRValue>
|   | |         | `-DeclRefExpr 0x222ba84fc18 <col:28> 'u128 *':'u128 *' lvalue ParmVar 0x222ba843900 'Htable' 'u128 *':'u128 *'
|   | |         `-IntegerLiteral 0x222ba84fc38 <col:35> 'int' 3
|   | `-BinaryOperator 0x222ba84ff38 <col:42, col:75> 'u64':'unsigned long long' '='
|   |   |-MemberExpr 0x222ba84fdb8 <col:42, col:53> 'u64':'unsigned long long' lvalue .lo 0x222ba6bbfb8
|   |   | `-ArraySubscriptExpr 0x222ba84fd98 <col:42, col:51> 'u128':'u128' lvalue
|   |   |   |-ImplicitCastExpr 0x222ba84fd80 <col:42> 'u128 *':'u128 *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x222ba84fd38 <col:42> 'u128 *':'u128 *' lvalue ParmVar 0x222ba843900 'Htable' 'u128 *':'u128 *'
|   |   |   `-IntegerLiteral 0x222ba84fd58 <col:49> 'int' 11
|   |   `-BinaryOperator 0x222ba84ff18 <col:58, col:75> 'unsigned long long' '^'
|   |     |-ImplicitCastExpr 0x222ba84fee8 <col:58, col:60> 'u64':'unsigned long long' <LValueToRValue>
|   |     | `-MemberExpr 0x222ba84fe08 <col:58, col:60> 'u64':'unsigned long long' lvalue .lo 0x222ba6bbfb8
|   |     |   `-DeclRefExpr 0x222ba84fde8 <col:58> 'u128':'u128' lvalue Var 0x222ba843be0 'V' 'u128':'u128'
|   |     `-ImplicitCastExpr 0x222ba84ff00 <col:65, col:75> 'u64':'unsigned long long' <LValueToRValue>
|   |       `-MemberExpr 0x222ba84feb8 <col:65, col:75> 'u64':'unsigned long long' lvalue .lo 0x222ba6bbfb8
|   |         `-ArraySubscriptExpr 0x222ba84fe98 <col:65, col:73> 'u128':'u128' lvalue
|   |           |-ImplicitCastExpr 0x222ba84fe80 <col:65> 'u128 *':'u128 *' <LValueToRValue>
|   |           | `-DeclRefExpr 0x222ba84fe38 <col:65> 'u128 *':'u128 *' lvalue ParmVar 0x222ba843900 'Htable' 'u128 *':'u128 *'
|   |           `-IntegerLiteral 0x222ba84fe58 <col:72> 'int' 3
|   |-BinaryOperator 0x222ba84e3a8 <line:259:5, col:75> 'u64':'unsigned long long' ','
|   | |-BinaryOperator 0x222ba84e168 <col:5, col:38> 'u64':'unsigned long long' '='
|   | | |-MemberExpr 0x222ba84dfe8 <col:5, col:16> 'u64':'unsigned long long' lvalue .hi 0x222ba6bbf50
|   | | | `-ArraySubscriptExpr 0x222ba84dfc8 <col:5, col:14> 'u128':'u128' lvalue
|   | | |   |-ImplicitCastExpr 0x222ba84dfb0 <col:5> 'u128 *':'u128 *' <LValueToRValue>
|   | | |   | `-DeclRefExpr 0x222ba84ff78 <col:5> 'u128 *':'u128 *' lvalue ParmVar 0x222ba843900 'Htable' 'u128 *':'u128 *'
|   | | |   `-IntegerLiteral 0x222ba84ff98 <col:12> 'int' 12
|   | | `-BinaryOperator 0x222ba84e148 <col:21, col:38> 'unsigned long long' '^'
|   | |   |-ImplicitCastExpr 0x222ba84e118 <col:21, col:23> 'u64':'unsigned long long' <LValueToRValue>
|   | |   | `-MemberExpr 0x222ba84e038 <col:21, col:23> 'u64':'unsigned long long' lvalue .hi 0x222ba6bbf50
|   | |   |   `-DeclRefExpr 0x222ba84e018 <col:21> 'u128':'u128' lvalue Var 0x222ba843be0 'V' 'u128':'u128'
|   | |   `-ImplicitCastExpr 0x222ba84e130 <col:28, col:38> 'u64':'unsigned long long' <LValueToRValue>
|   | |     `-MemberExpr 0x222ba84e0e8 <col:28, col:38> 'u64':'unsigned long long' lvalue .hi 0x222ba6bbf50
|   | |       `-ArraySubscriptExpr 0x222ba84e0c8 <col:28, col:36> 'u128':'u128' lvalue
|   | |         |-ImplicitCastExpr 0x222ba84e0b0 <col:28> 'u128 *':'u128 *' <LValueToRValue>
|   | |         | `-DeclRefExpr 0x222ba84e068 <col:28> 'u128 *':'u128 *' lvalue ParmVar 0x222ba843900 'Htable' 'u128 *':'u128 *'
|   | |         `-IntegerLiteral 0x222ba84e088 <col:35> 'int' 4
|   | `-BinaryOperator 0x222ba84e388 <col:42, col:75> 'u64':'unsigned long long' '='
|   |   |-MemberExpr 0x222ba84e208 <col:42, col:53> 'u64':'unsigned long long' lvalue .lo 0x222ba6bbfb8
|   |   | `-ArraySubscriptExpr 0x222ba84e1e8 <col:42, col:51> 'u128':'u128' lvalue
|   |   |   |-ImplicitCastExpr 0x222ba84e1d0 <col:42> 'u128 *':'u128 *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x222ba84e188 <col:42> 'u128 *':'u128 *' lvalue ParmVar 0x222ba843900 'Htable' 'u128 *':'u128 *'
|   |   |   `-IntegerLiteral 0x222ba84e1a8 <col:49> 'int' 12
|   |   `-BinaryOperator 0x222ba84e368 <col:58, col:75> 'unsigned long long' '^'
|   |     |-ImplicitCastExpr 0x222ba84e338 <col:58, col:60> 'u64':'unsigned long long' <LValueToRValue>
|   |     | `-MemberExpr 0x222ba84e258 <col:58, col:60> 'u64':'unsigned long long' lvalue .lo 0x222ba6bbfb8
|   |     |   `-DeclRefExpr 0x222ba84e238 <col:58> 'u128':'u128' lvalue Var 0x222ba843be0 'V' 'u128':'u128'
|   |     `-ImplicitCastExpr 0x222ba84e350 <col:65, col:75> 'u64':'unsigned long long' <LValueToRValue>
|   |       `-MemberExpr 0x222ba84e308 <col:65, col:75> 'u64':'unsigned long long' lvalue .lo 0x222ba6bbfb8
|   |         `-ArraySubscriptExpr 0x222ba84e2e8 <col:65, col:73> 'u128':'u128' lvalue
|   |           |-ImplicitCastExpr 0x222ba84e2d0 <col:65> 'u128 *':'u128 *' <LValueToRValue>
|   |           | `-DeclRefExpr 0x222ba84e288 <col:65> 'u128 *':'u128 *' lvalue ParmVar 0x222ba843900 'Htable' 'u128 *':'u128 *'
|   |           `-IntegerLiteral 0x222ba84e2a8 <col:72> 'int' 4
|   |-BinaryOperator 0x222ba84e808 <line:260:5, col:75> 'u64':'unsigned long long' ','
|   | |-BinaryOperator 0x222ba84e5c8 <col:5, col:38> 'u64':'unsigned long long' '='
|   | | |-MemberExpr 0x222ba84e448 <col:5, col:16> 'u64':'unsigned long long' lvalue .hi 0x222ba6bbf50
|   | | | `-ArraySubscriptExpr 0x222ba84e428 <col:5, col:14> 'u128':'u128' lvalue
|   | | |   |-ImplicitCastExpr 0x222ba84e410 <col:5> 'u128 *':'u128 *' <LValueToRValue>
|   | | |   | `-DeclRefExpr 0x222ba84e3c8 <col:5> 'u128 *':'u128 *' lvalue ParmVar 0x222ba843900 'Htable' 'u128 *':'u128 *'
|   | | |   `-IntegerLiteral 0x222ba84e3e8 <col:12> 'int' 13
|   | | `-BinaryOperator 0x222ba84e5a8 <col:21, col:38> 'unsigned long long' '^'
|   | |   |-ImplicitCastExpr 0x222ba84e578 <col:21, col:23> 'u64':'unsigned long long' <LValueToRValue>
|   | |   | `-MemberExpr 0x222ba84e498 <col:21, col:23> 'u64':'unsigned long long' lvalue .hi 0x222ba6bbf50
|   | |   |   `-DeclRefExpr 0x222ba84e478 <col:21> 'u128':'u128' lvalue Var 0x222ba843be0 'V' 'u128':'u128'
|   | |   `-ImplicitCastExpr 0x222ba84e590 <col:28, col:38> 'u64':'unsigned long long' <LValueToRValue>
|   | |     `-MemberExpr 0x222ba84e548 <col:28, col:38> 'u64':'unsigned long long' lvalue .hi 0x222ba6bbf50
|   | |       `-ArraySubscriptExpr 0x222ba84e528 <col:28, col:36> 'u128':'u128' lvalue
|   | |         |-ImplicitCastExpr 0x222ba84e510 <col:28> 'u128 *':'u128 *' <LValueToRValue>
|   | |         | `-DeclRefExpr 0x222ba84e4c8 <col:28> 'u128 *':'u128 *' lvalue ParmVar 0x222ba843900 'Htable' 'u128 *':'u128 *'
|   | |         `-IntegerLiteral 0x222ba84e4e8 <col:35> 'int' 5
|   | `-BinaryOperator 0x222ba84e7e8 <col:42, col:75> 'u64':'unsigned long long' '='
|   |   |-MemberExpr 0x222ba84e668 <col:42, col:53> 'u64':'unsigned long long' lvalue .lo 0x222ba6bbfb8
|   |   | `-ArraySubscriptExpr 0x222ba84e648 <col:42, col:51> 'u128':'u128' lvalue
|   |   |   |-ImplicitCastExpr 0x222ba84e630 <col:42> 'u128 *':'u128 *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x222ba84e5e8 <col:42> 'u128 *':'u128 *' lvalue ParmVar 0x222ba843900 'Htable' 'u128 *':'u128 *'
|   |   |   `-IntegerLiteral 0x222ba84e608 <col:49> 'int' 13
|   |   `-BinaryOperator 0x222ba84e7c8 <col:58, col:75> 'unsigned long long' '^'
|   |     |-ImplicitCastExpr 0x222ba84e798 <col:58, col:60> 'u64':'unsigned long long' <LValueToRValue>
|   |     | `-MemberExpr 0x222ba84e6b8 <col:58, col:60> 'u64':'unsigned long long' lvalue .lo 0x222ba6bbfb8
|   |     |   `-DeclRefExpr 0x222ba84e698 <col:58> 'u128':'u128' lvalue Var 0x222ba843be0 'V' 'u128':'u128'
|   |     `-ImplicitCastExpr 0x222ba84e7b0 <col:65, col:75> 'u64':'unsigned long long' <LValueToRValue>
|   |       `-MemberExpr 0x222ba84e768 <col:65, col:75> 'u64':'unsigned long long' lvalue .lo 0x222ba6bbfb8
|   |         `-ArraySubscriptExpr 0x222ba84e748 <col:65, col:73> 'u128':'u128' lvalue
|   |           |-ImplicitCastExpr 0x222ba84e730 <col:65> 'u128 *':'u128 *' <LValueToRValue>
|   |           | `-DeclRefExpr 0x222ba84e6e8 <col:65> 'u128 *':'u128 *' lvalue ParmVar 0x222ba843900 'Htable' 'u128 *':'u128 *'
|   |           `-IntegerLiteral 0x222ba84e708 <col:72> 'int' 5
|   |-BinaryOperator 0x222ba84ec68 <line:261:5, col:75> 'u64':'unsigned long long' ','
|   | |-BinaryOperator 0x222ba84ea28 <col:5, col:38> 'u64':'unsigned long long' '='
|   | | |-MemberExpr 0x222ba84e8a8 <col:5, col:16> 'u64':'unsigned long long' lvalue .hi 0x222ba6bbf50
|   | | | `-ArraySubscriptExpr 0x222ba84e888 <col:5, col:14> 'u128':'u128' lvalue
|   | | |   |-ImplicitCastExpr 0x222ba84e870 <col:5> 'u128 *':'u128 *' <LValueToRValue>
|   | | |   | `-DeclRefExpr 0x222ba84e828 <col:5> 'u128 *':'u128 *' lvalue ParmVar 0x222ba843900 'Htable' 'u128 *':'u128 *'
|   | | |   `-IntegerLiteral 0x222ba84e848 <col:12> 'int' 14
|   | | `-BinaryOperator 0x222ba84ea08 <col:21, col:38> 'unsigned long long' '^'
|   | |   |-ImplicitCastExpr 0x222ba84e9d8 <col:21, col:23> 'u64':'unsigned long long' <LValueToRValue>
|   | |   | `-MemberExpr 0x222ba84e8f8 <col:21, col:23> 'u64':'unsigned long long' lvalue .hi 0x222ba6bbf50
|   | |   |   `-DeclRefExpr 0x222ba84e8d8 <col:21> 'u128':'u128' lvalue Var 0x222ba843be0 'V' 'u128':'u128'
|   | |   `-ImplicitCastExpr 0x222ba84e9f0 <col:28, col:38> 'u64':'unsigned long long' <LValueToRValue>
|   | |     `-MemberExpr 0x222ba84e9a8 <col:28, col:38> 'u64':'unsigned long long' lvalue .hi 0x222ba6bbf50
|   | |       `-ArraySubscriptExpr 0x222ba84e988 <col:28, col:36> 'u128':'u128' lvalue
|   | |         |-ImplicitCastExpr 0x222ba84e970 <col:28> 'u128 *':'u128 *' <LValueToRValue>
|   | |         | `-DeclRefExpr 0x222ba84e928 <col:28> 'u128 *':'u128 *' lvalue ParmVar 0x222ba843900 'Htable' 'u128 *':'u128 *'
|   | |         `-IntegerLiteral 0x222ba84e948 <col:35> 'int' 6
|   | `-BinaryOperator 0x222ba84ec48 <col:42, col:75> 'u64':'unsigned long long' '='
|   |   |-MemberExpr 0x222ba84eac8 <col:42, col:53> 'u64':'unsigned long long' lvalue .lo 0x222ba6bbfb8
|   |   | `-ArraySubscriptExpr 0x222ba84eaa8 <col:42, col:51> 'u128':'u128' lvalue
|   |   |   |-ImplicitCastExpr 0x222ba84ea90 <col:42> 'u128 *':'u128 *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x222ba84ea48 <col:42> 'u128 *':'u128 *' lvalue ParmVar 0x222ba843900 'Htable' 'u128 *':'u128 *'
|   |   |   `-IntegerLiteral 0x222ba84ea68 <col:49> 'int' 14
|   |   `-BinaryOperator 0x222ba84ec28 <col:58, col:75> 'unsigned long long' '^'
|   |     |-ImplicitCastExpr 0x222ba84ebf8 <col:58, col:60> 'u64':'unsigned long long' <LValueToRValue>
|   |     | `-MemberExpr 0x222ba84eb18 <col:58, col:60> 'u64':'unsigned long long' lvalue .lo 0x222ba6bbfb8
|   |     |   `-DeclRefExpr 0x222ba84eaf8 <col:58> 'u128':'u128' lvalue Var 0x222ba843be0 'V' 'u128':'u128'
|   |     `-ImplicitCastExpr 0x222ba84ec10 <col:65, col:75> 'u64':'unsigned long long' <LValueToRValue>
|   |       `-MemberExpr 0x222ba84ebc8 <col:65, col:75> 'u64':'unsigned long long' lvalue .lo 0x222ba6bbfb8
|   |         `-ArraySubscriptExpr 0x222ba84eba8 <col:65, col:73> 'u128':'u128' lvalue
|   |           |-ImplicitCastExpr 0x222ba84eb90 <col:65> 'u128 *':'u128 *' <LValueToRValue>
|   |           | `-DeclRefExpr 0x222ba84eb48 <col:65> 'u128 *':'u128 *' lvalue ParmVar 0x222ba843900 'Htable' 'u128 *':'u128 *'
|   |           `-IntegerLiteral 0x222ba84eb68 <col:72> 'int' 6
|   `-BinaryOperator 0x222ba84d0c0 <line:262:5, col:75> 'u64':'unsigned long long' ','
|     |-BinaryOperator 0x222ba84ee88 <col:5, col:38> 'u64':'unsigned long long' '='
|     | |-MemberExpr 0x222ba84ed08 <col:5, col:16> 'u64':'unsigned long long' lvalue .hi 0x222ba6bbf50
|     | | `-ArraySubscriptExpr 0x222ba84ece8 <col:5, col:14> 'u128':'u128' lvalue
|     | |   |-ImplicitCastExpr 0x222ba84ecd0 <col:5> 'u128 *':'u128 *' <LValueToRValue>
|     | |   | `-DeclRefExpr 0x222ba84ec88 <col:5> 'u128 *':'u128 *' lvalue ParmVar 0x222ba843900 'Htable' 'u128 *':'u128 *'
|     | |   `-IntegerLiteral 0x222ba84eca8 <col:12> 'int' 15
|     | `-BinaryOperator 0x222ba84ee68 <col:21, col:38> 'unsigned long long' '^'
|     |   |-ImplicitCastExpr 0x222ba84ee38 <col:21, col:23> 'u64':'unsigned long long' <LValueToRValue>
|     |   | `-MemberExpr 0x222ba84ed58 <col:21, col:23> 'u64':'unsigned long long' lvalue .hi 0x222ba6bbf50
|     |   |   `-DeclRefExpr 0x222ba84ed38 <col:21> 'u128':'u128' lvalue Var 0x222ba843be0 'V' 'u128':'u128'
|     |   `-ImplicitCastExpr 0x222ba84ee50 <col:28, col:38> 'u64':'unsigned long long' <LValueToRValue>
|     |     `-MemberExpr 0x222ba84ee08 <col:28, col:38> 'u64':'unsigned long long' lvalue .hi 0x222ba6bbf50
|     |       `-ArraySubscriptExpr 0x222ba84ede8 <col:28, col:36> 'u128':'u128' lvalue
|     |         |-ImplicitCastExpr 0x222ba84edd0 <col:28> 'u128 *':'u128 *' <LValueToRValue>
|     |         | `-DeclRefExpr 0x222ba84ed88 <col:28> 'u128 *':'u128 *' lvalue ParmVar 0x222ba843900 'Htable' 'u128 *':'u128 *'
|     |         `-IntegerLiteral 0x222ba84eda8 <col:35> 'int' 7
|     `-BinaryOperator 0x222ba84d0a0 <col:42, col:75> 'u64':'unsigned long long' '='
|       |-MemberExpr 0x222ba84ef28 <col:42, col:53> 'u64':'unsigned long long' lvalue .lo 0x222ba6bbfb8
|       | `-ArraySubscriptExpr 0x222ba84ef08 <col:42, col:51> 'u128':'u128' lvalue
|       |   |-ImplicitCastExpr 0x222ba84eef0 <col:42> 'u128 *':'u128 *' <LValueToRValue>
|       |   | `-DeclRefExpr 0x222ba84eea8 <col:42> 'u128 *':'u128 *' lvalue ParmVar 0x222ba843900 'Htable' 'u128 *':'u128 *'
|       |   `-IntegerLiteral 0x222ba84eec8 <col:49> 'int' 15
|       `-BinaryOperator 0x222ba84d080 <col:58, col:75> 'unsigned long long' '^'
|         |-ImplicitCastExpr 0x222ba84d050 <col:58, col:60> 'u64':'unsigned long long' <LValueToRValue>
|         | `-MemberExpr 0x222ba84ef78 <col:58, col:60> 'u64':'unsigned long long' lvalue .lo 0x222ba6bbfb8
|         |   `-DeclRefExpr 0x222ba84ef58 <col:58> 'u128':'u128' lvalue Var 0x222ba843be0 'V' 'u128':'u128'
|         `-ImplicitCastExpr 0x222ba84d068 <col:65, col:75> 'u64':'unsigned long long' <LValueToRValue>
|           `-MemberExpr 0x222ba84d020 <col:65, col:75> 'u64':'unsigned long long' lvalue .lo 0x222ba6bbfb8
|             `-ArraySubscriptExpr 0x222ba84d000 <col:65, col:73> 'u128':'u128' lvalue
|               |-ImplicitCastExpr 0x222ba84cfe8 <col:65> 'u128 *':'u128 *' <LValueToRValue>
|               | `-DeclRefExpr 0x222ba84cfa0 <col:65> 'u128 *':'u128 *' lvalue ParmVar 0x222ba843900 'Htable' 'u128 *':'u128 *'
|               `-IntegerLiteral 0x222ba84cfc0 <col:72> 'int' 7
|-VarDecl 0x222ba84d298 <line:291:1, line:296:1> line:291:21 used rem_4bit 'const size_t [16]' static cinit
| `-InitListExpr 0x222ba850328 <col:36, line:296:1> 'const size_t [16]'
|   |-ParenExpr 0x222ba84d4d0 <line:22:25, col:60> 'size_t':'unsigned long long'
|   | `-BinaryOperator 0x222ba84d4b0 <col:26, col:59> 'size_t':'unsigned long long' '<<'
|   |   |-CStyleCastExpr 0x222ba84d378 <col:26, col:36> 'size_t':'unsigned long long' <IntegralCast>
|   |   | `-ParenExpr 0x222ba84d358 <col:34, col:36> 'int'
|   |   |   `-IntegerLiteral 0x222ba84d300 <line:292:10> 'int' 0
|   |   `-ParenExpr 0x222ba84d490 <line:22:39, col:59> 'unsigned long long'
|   |     `-BinaryOperator 0x222ba84d470 <col:40, col:57> 'unsigned long long' '-'
|   |       |-BinaryOperator 0x222ba84d410 <col:40, col:55> 'unsigned long long' '*'
|   |       | |-UnaryExprOrTypeTraitExpr 0x222ba84d3b0 <col:40, col:53> 'unsigned long long' sizeof 'size_t':'unsigned long long'
|   |       | `-ImplicitCastExpr 0x222ba84d3f8 <col:55> 'unsigned long long' <IntegralCast>
|   |       |   `-IntegerLiteral 0x222ba84d3d0 <col:55> 'int' 8
|   |       `-ImplicitCastExpr 0x222ba84d458 <col:57> 'unsigned long long' <IntegralCast>
|   |         `-IntegerLiteral 0x222ba84d430 <col:57> 'int' 16
|   |-ParenExpr 0x222ba84d6c0 <col:25, col:60> 'size_t':'unsigned long long'
|   | `-BinaryOperator 0x222ba84d6a0 <col:26, col:59> 'size_t':'unsigned long long' '<<'
|   |   |-CStyleCastExpr 0x222ba84d568 <col:26, col:36> 'size_t':'unsigned long long' <IntegralCast>
|   |   | `-ParenExpr 0x222ba84d548 <col:34, col:36> 'int'
|   |   |   `-IntegerLiteral 0x222ba84d4f0 <line:292:24> 'int' 7200
|   |   `-ParenExpr 0x222ba84d680 <line:22:39, col:59> 'unsigned long long'
|   |     `-BinaryOperator 0x222ba84d660 <col:40, col:57> 'unsigned long long' '-'
|   |       |-BinaryOperator 0x222ba84d600 <col:40, col:55> 'unsigned long long' '*'
|   |       | |-UnaryExprOrTypeTraitExpr 0x222ba84d5a0 <col:40, col:53> 'unsigned long long' sizeof 'size_t':'unsigned long long'
|   |       | `-ImplicitCastExpr 0x222ba84d5e8 <col:55> 'unsigned long long' <IntegralCast>
|   |       |   `-IntegerLiteral 0x222ba84d5c0 <col:55> 'int' 8
|   |       `-ImplicitCastExpr 0x222ba84d648 <col:57> 'unsigned long long' <IntegralCast>
|   |         `-IntegerLiteral 0x222ba84d620 <col:57> 'int' 16
|   |-ParenExpr 0x222ba84d8b0 <col:25, col:60> 'size_t':'unsigned long long'
|   | `-BinaryOperator 0x222ba84d890 <col:26, col:59> 'size_t':'unsigned long long' '<<'
|   |   |-CStyleCastExpr 0x222ba84d758 <col:26, col:36> 'size_t':'unsigned long long' <IntegralCast>
|   |   | `-ParenExpr 0x222ba84d738 <col:34, col:36> 'int'
|   |   |   `-IntegerLiteral 0x222ba84d6e0 <line:292:38> 'int' 14400
|   |   `-ParenExpr 0x222ba84d870 <line:22:39, col:59> 'unsigned long long'
|   |     `-BinaryOperator 0x222ba84d850 <col:40, col:57> 'unsigned long long' '-'
|   |       |-BinaryOperator 0x222ba84d7f0 <col:40, col:55> 'unsigned long long' '*'
|   |       | |-UnaryExprOrTypeTraitExpr 0x222ba84d790 <col:40, col:53> 'unsigned long long' sizeof 'size_t':'unsigned long long'
|   |       | `-ImplicitCastExpr 0x222ba84d7d8 <col:55> 'unsigned long long' <IntegralCast>
|   |       |   `-IntegerLiteral 0x222ba84d7b0 <col:55> 'int' 8
|   |       `-ImplicitCastExpr 0x222ba84d838 <col:57> 'unsigned long long' <IntegralCast>
|   |         `-IntegerLiteral 0x222ba84d810 <col:57> 'int' 16
|   |-ParenExpr 0x222ba84daa0 <col:25, col:60> 'size_t':'unsigned long long'
|   | `-BinaryOperator 0x222ba84da80 <col:26, col:59> 'size_t':'unsigned long long' '<<'
|   |   |-CStyleCastExpr 0x222ba84d948 <col:26, col:36> 'size_t':'unsigned long long' <IntegralCast>
|   |   | `-ParenExpr 0x222ba84d928 <col:34, col:36> 'int'
|   |   |   `-IntegerLiteral 0x222ba84d8d0 <line:292:52> 'int' 9312
|   |   `-ParenExpr 0x222ba84da60 <line:22:39, col:59> 'unsigned long long'
|   |     `-BinaryOperator 0x222ba84da40 <col:40, col:57> 'unsigned long long' '-'
|   |       |-BinaryOperator 0x222ba84d9e0 <col:40, col:55> 'unsigned long long' '*'
|   |       | |-UnaryExprOrTypeTraitExpr 0x222ba84d980 <col:40, col:53> 'unsigned long long' sizeof 'size_t':'unsigned long long'
|   |       | `-ImplicitCastExpr 0x222ba84d9c8 <col:55> 'unsigned long long' <IntegralCast>
|   |       |   `-IntegerLiteral 0x222ba84d9a0 <col:55> 'int' 8
|   |       `-ImplicitCastExpr 0x222ba84da28 <col:57> 'unsigned long long' <IntegralCast>
|   |         `-IntegerLiteral 0x222ba84da00 <col:57> 'int' 16
|   |-ParenExpr 0x222ba84dc90 <col:25, col:60> 'size_t':'unsigned long long'
|   | `-BinaryOperator 0x222ba84dc70 <col:26, col:59> 'size_t':'unsigned long long' '<<'
|   |   |-CStyleCastExpr 0x222ba84db38 <col:26, col:36> 'size_t':'unsigned long long' <IntegralCast>
|   |   | `-ParenExpr 0x222ba84db18 <col:34, col:36> 'int'
|   |   |   `-IntegerLiteral 0x222ba84dac0 <line:293:10> 'int' 28800
|   |   `-ParenExpr 0x222ba84dc50 <line:22:39, col:59> 'unsigned long long'
|   |     `-BinaryOperator 0x222ba84dc30 <col:40, col:57> 'unsigned long long' '-'
|   |       |-BinaryOperator 0x222ba84dbd0 <col:40, col:55> 'unsigned long long' '*'
|   |       | |-UnaryExprOrTypeTraitExpr 0x222ba84db70 <col:40, col:53> 'unsigned long long' sizeof 'size_t':'unsigned long long'
|   |       | `-ImplicitCastExpr 0x222ba84dbb8 <col:55> 'unsigned long long' <IntegralCast>
|   |       |   `-IntegerLiteral 0x222ba84db90 <col:55> 'int' 8
|   |       `-ImplicitCastExpr 0x222ba84dc18 <col:57> 'unsigned long long' <IntegralCast>
|   |         `-IntegerLiteral 0x222ba84dbf0 <col:57> 'int' 16
|   |-ParenExpr 0x222ba84de80 <col:25, col:60> 'size_t':'unsigned long long'
|   | `-BinaryOperator 0x222ba84de60 <col:26, col:59> 'size_t':'unsigned long long' '<<'
|   |   |-CStyleCastExpr 0x222ba84dd28 <col:26, col:36> 'size_t':'unsigned long long' <IntegralCast>
|   |   | `-ParenExpr 0x222ba84dd08 <col:34, col:36> 'int'
|   |   |   `-IntegerLiteral 0x222ba84dcb0 <line:293:24> 'int' 27808
|   |   `-ParenExpr 0x222ba84de40 <line:22:39, col:59> 'unsigned long long'
|   |     `-BinaryOperator 0x222ba84de20 <col:40, col:57> 'unsigned long long' '-'
|   |       |-BinaryOperator 0x222ba84ddc0 <col:40, col:55> 'unsigned long long' '*'
|   |       | |-UnaryExprOrTypeTraitExpr 0x222ba84dd60 <col:40, col:53> 'unsigned long long' sizeof 'size_t':'unsigned long long'
|   |       | `-ImplicitCastExpr 0x222ba84dda8 <col:55> 'unsigned long long' <IntegralCast>
|   |       |   `-IntegerLiteral 0x222ba84dd80 <col:55> 'int' 8
|   |       `-ImplicitCastExpr 0x222ba84de08 <col:57> 'unsigned long long' <IntegralCast>
|   |         `-IntegerLiteral 0x222ba84dde0 <col:57> 'int' 16
|   |-ParenExpr 0x222ba84c068 <col:25, col:60> 'size_t':'unsigned long long'
|   | `-BinaryOperator 0x222ba84c048 <col:26, col:59> 'size_t':'unsigned long long' '<<'
|   |   |-CStyleCastExpr 0x222ba84df18 <col:26, col:36> 'size_t':'unsigned long long' <IntegralCast>
|   |   | `-ParenExpr 0x222ba84def8 <col:34, col:36> 'int'
|   |   |   `-IntegerLiteral 0x222ba84dea0 <line:293:38> 'int' 18624
|   |   `-ParenExpr 0x222ba84c028 <line:22:39, col:59> 'unsigned long long'
|   |     `-BinaryOperator 0x222ba84c008 <col:40, col:57> 'unsigned long long' '-'
|   |       |-BinaryOperator 0x222ba84bfa8 <col:40, col:55> 'unsigned long long' '*'
|   |       | |-UnaryExprOrTypeTraitExpr 0x222ba84df50 <col:40, col:53> 'unsigned long long' sizeof 'size_t':'unsigned long long'
|   |       | `-ImplicitCastExpr 0x222ba84bf90 <col:55> 'unsigned long long' <IntegralCast>
|   |       |   `-IntegerLiteral 0x222ba84df70 <col:55> 'int' 8
|   |       `-ImplicitCastExpr 0x222ba84bff0 <col:57> 'unsigned long long' <IntegralCast>
|   |         `-IntegerLiteral 0x222ba84bfc8 <col:57> 'int' 16
|   |-ParenExpr 0x222ba84c258 <col:25, col:60> 'size_t':'unsigned long long'
|   | `-BinaryOperator 0x222ba84c238 <col:26, col:59> 'size_t':'unsigned long long' '<<'
|   |   |-CStyleCastExpr 0x222ba84c100 <col:26, col:36> 'size_t':'unsigned long long' <IntegralCast>
|   |   | `-ParenExpr 0x222ba84c0e0 <col:34, col:36> 'int'
|   |   |   `-IntegerLiteral 0x222ba84c088 <line:293:52> 'int' 21728
|   |   `-ParenExpr 0x222ba84c218 <line:22:39, col:59> 'unsigned long long'
|   |     `-BinaryOperator 0x222ba84c1f8 <col:40, col:57> 'unsigned long long' '-'
|   |       |-BinaryOperator 0x222ba84c198 <col:40, col:55> 'unsigned long long' '*'
|   |       | |-UnaryExprOrTypeTraitExpr 0x222ba84c138 <col:40, col:53> 'unsigned long long' sizeof 'size_t':'unsigned long long'
|   |       | `-ImplicitCastExpr 0x222ba84c180 <col:55> 'unsigned long long' <IntegralCast>
|   |       |   `-IntegerLiteral 0x222ba84c158 <col:55> 'int' 8
|   |       `-ImplicitCastExpr 0x222ba84c1e0 <col:57> 'unsigned long long' <IntegralCast>
|   |         `-IntegerLiteral 0x222ba84c1b8 <col:57> 'int' 16
|   |-ParenExpr 0x222ba84c448 <col:25, col:60> 'size_t':'unsigned long long'
|   | `-BinaryOperator 0x222ba84c428 <col:26, col:59> 'size_t':'unsigned long long' '<<'
|   |   |-CStyleCastExpr 0x222ba84c2f0 <col:26, col:36> 'size_t':'unsigned long long' <IntegralCast>
|   |   | `-ParenExpr 0x222ba84c2d0 <col:34, col:36> 'int'
|   |   |   `-IntegerLiteral 0x222ba84c278 <line:294:10> 'int' 57600
|   |   `-ParenExpr 0x222ba84c408 <line:22:39, col:59> 'unsigned long long'
|   |     `-BinaryOperator 0x222ba84c3e8 <col:40, col:57> 'unsigned long long' '-'
|   |       |-BinaryOperator 0x222ba84c388 <col:40, col:55> 'unsigned long long' '*'
|   |       | |-UnaryExprOrTypeTraitExpr 0x222ba84c328 <col:40, col:53> 'unsigned long long' sizeof 'size_t':'unsigned long long'
|   |       | `-ImplicitCastExpr 0x222ba84c370 <col:55> 'unsigned long long' <IntegralCast>
|   |       |   `-IntegerLiteral 0x222ba84c348 <col:55> 'int' 8
|   |       `-ImplicitCastExpr 0x222ba84c3d0 <col:57> 'unsigned long long' <IntegralCast>
|   |         `-IntegerLiteral 0x222ba84c3a8 <col:57> 'int' 16
|   |-ParenExpr 0x222ba84c638 <col:25, col:60> 'size_t':'unsigned long long'
|   | `-BinaryOperator 0x222ba84c618 <col:26, col:59> 'size_t':'unsigned long long' '<<'
|   |   |-CStyleCastExpr 0x222ba84c4e0 <col:26, col:36> 'size_t':'unsigned long long' <IntegralCast>
|   |   | `-ParenExpr 0x222ba84c4c0 <col:34, col:36> 'int'
|   |   |   `-IntegerLiteral 0x222ba84c468 <line:294:24> 'int' 64800
|   |   `-ParenExpr 0x222ba84c5f8 <line:22:39, col:59> 'unsigned long long'
|   |     `-BinaryOperator 0x222ba84c5d8 <col:40, col:57> 'unsigned long long' '-'
|   |       |-BinaryOperator 0x222ba84c578 <col:40, col:55> 'unsigned long long' '*'
|   |       | |-UnaryExprOrTypeTraitExpr 0x222ba84c518 <col:40, col:53> 'unsigned long long' sizeof 'size_t':'unsigned long long'
|   |       | `-ImplicitCastExpr 0x222ba84c560 <col:55> 'unsigned long long' <IntegralCast>
|   |       |   `-IntegerLiteral 0x222ba84c538 <col:55> 'int' 8
|   |       `-ImplicitCastExpr 0x222ba84c5c0 <col:57> 'unsigned long long' <IntegralCast>
|   |         `-IntegerLiteral 0x222ba84c598 <col:57> 'int' 16
|   |-ParenExpr 0x222ba84c828 <col:25, col:60> 'size_t':'unsigned long long'
|   | `-BinaryOperator 0x222ba84c808 <col:26, col:59> 'size_t':'unsigned long long' '<<'
|   |   |-CStyleCastExpr 0x222ba84c6d0 <col:26, col:36> 'size_t':'unsigned long long' <IntegralCast>
|   |   | `-ParenExpr 0x222ba84c6b0 <col:34, col:36> 'int'
|   |   |   `-IntegerLiteral 0x222ba84c658 <line:294:38> 'int' 55616
|   |   `-ParenExpr 0x222ba84c7e8 <line:22:39, col:59> 'unsigned long long'
|   |     `-BinaryOperator 0x222ba84c7c8 <col:40, col:57> 'unsigned long long' '-'
|   |       |-BinaryOperator 0x222ba84c768 <col:40, col:55> 'unsigned long long' '*'
|   |       | |-UnaryExprOrTypeTraitExpr 0x222ba84c708 <col:40, col:53> 'unsigned long long' sizeof 'size_t':'unsigned long long'
|   |       | `-ImplicitCastExpr 0x222ba84c750 <col:55> 'unsigned long long' <IntegralCast>
|   |       |   `-IntegerLiteral 0x222ba84c728 <col:55> 'int' 8
|   |       `-ImplicitCastExpr 0x222ba84c7b0 <col:57> 'unsigned long long' <IntegralCast>
|   |         `-IntegerLiteral 0x222ba84c788 <col:57> 'int' 16
|   |-ParenExpr 0x222ba84ca18 <col:25, col:60> 'size_t':'unsigned long long'
|   | `-BinaryOperator 0x222ba84c9f8 <col:26, col:59> 'size_t':'unsigned long long' '<<'
|   |   |-CStyleCastExpr 0x222ba84c8c0 <col:26, col:36> 'size_t':'unsigned long long' <IntegralCast>
|   |   | `-ParenExpr 0x222ba84c8a0 <col:34, col:36> 'int'
|   |   |   `-IntegerLiteral 0x222ba84c848 <line:294:52> 'int' 50528
|   |   `-ParenExpr 0x222ba84c9d8 <line:22:39, col:59> 'unsigned long long'
|   |     `-BinaryOperator 0x222ba84c9b8 <col:40, col:57> 'unsigned long long' '-'
|   |       |-BinaryOperator 0x222ba84c958 <col:40, col:55> 'unsigned long long' '*'
|   |       | |-UnaryExprOrTypeTraitExpr 0x222ba84c8f8 <col:40, col:53> 'unsigned long long' sizeof 'size_t':'unsigned long long'
|   |       | `-ImplicitCastExpr 0x222ba84c940 <col:55> 'unsigned long long' <IntegralCast>
|   |       |   `-IntegerLiteral 0x222ba84c918 <col:55> 'int' 8
|   |       `-ImplicitCastExpr 0x222ba84c9a0 <col:57> 'unsigned long long' <IntegralCast>
|   |         `-IntegerLiteral 0x222ba84c978 <col:57> 'int' 16
|   |-ParenExpr 0x222ba84cc08 <col:25, col:60> 'size_t':'unsigned long long'
|   | `-BinaryOperator 0x222ba84cbe8 <col:26, col:59> 'size_t':'unsigned long long' '<<'
|   |   |-CStyleCastExpr 0x222ba84cab0 <col:26, col:36> 'size_t':'unsigned long long' <IntegralCast>
|   |   | `-ParenExpr 0x222ba84ca90 <col:34, col:36> 'int'
|   |   |   `-IntegerLiteral 0x222ba84ca38 <line:295:10> 'int' 37248
|   |   `-ParenExpr 0x222ba84cbc8 <line:22:39, col:59> 'unsigned long long'
|   |     `-BinaryOperator 0x222ba84cba8 <col:40, col:57> 'unsigned long long' '-'
|   |       |-BinaryOperator 0x222ba84cb48 <col:40, col:55> 'unsigned long long' '*'
|   |       | |-UnaryExprOrTypeTraitExpr 0x222ba84cae8 <col:40, col:53> 'unsigned long long' sizeof 'size_t':'unsigned long long'
|   |       | `-ImplicitCastExpr 0x222ba84cb30 <col:55> 'unsigned long long' <IntegralCast>
|   |       |   `-IntegerLiteral 0x222ba84cb08 <col:55> 'int' 8
|   |       `-ImplicitCastExpr 0x222ba84cb90 <col:57> 'unsigned long long' <IntegralCast>
|   |         `-IntegerLiteral 0x222ba84cb68 <col:57> 'int' 16
|   |-ParenExpr 0x222ba84cdf8 <col:25, col:60> 'size_t':'unsigned long long'
|   | `-BinaryOperator 0x222ba84cdd8 <col:26, col:59> 'size_t':'unsigned long long' '<<'
|   |   |-CStyleCastExpr 0x222ba84cca0 <col:26, col:36> 'size_t':'unsigned long long' <IntegralCast>
|   |   | `-ParenExpr 0x222ba84cc80 <col:34, col:36> 'int'
|   |   |   `-IntegerLiteral 0x222ba84cc28 <line:295:24> 'int' 36256
|   |   `-ParenExpr 0x222ba84cdb8 <line:22:39, col:59> 'unsigned long long'
|   |     `-BinaryOperator 0x222ba84cd98 <col:40, col:57> 'unsigned long long' '-'
|   |       |-BinaryOperator 0x222ba84cd38 <col:40, col:55> 'unsigned long long' '*'
|   |       | |-UnaryExprOrTypeTraitExpr 0x222ba84ccd8 <col:40, col:53> 'unsigned long long' sizeof 'size_t':'unsigned long long'
|   |       | `-ImplicitCastExpr 0x222ba84cd20 <col:55> 'unsigned long long' <IntegralCast>
|   |       |   `-IntegerLiteral 0x222ba84ccf8 <col:55> 'int' 8
|   |       `-ImplicitCastExpr 0x222ba84cd80 <col:57> 'unsigned long long' <IntegralCast>
|   |         `-IntegerLiteral 0x222ba84cd58 <col:57> 'int' 16
|   |-ParenExpr 0x222ba850030 <col:25, col:60> 'size_t':'unsigned long long'
|   | `-BinaryOperator 0x222ba850010 <col:26, col:59> 'size_t':'unsigned long long' '<<'
|   |   |-CStyleCastExpr 0x222ba84ce90 <col:26, col:36> 'size_t':'unsigned long long' <IntegralCast>
|   |   | `-ParenExpr 0x222ba84ce70 <col:34, col:36> 'int'
|   |   |   `-IntegerLiteral 0x222ba84ce18 <line:295:38> 'int' 43456
|   |   `-ParenExpr 0x222ba84fff0 <line:22:39, col:59> 'unsigned long long'
|   |     `-BinaryOperator 0x222ba84ffd0 <col:40, col:57> 'unsigned long long' '-'
|   |       |-BinaryOperator 0x222ba84cf28 <col:40, col:55> 'unsigned long long' '*'
|   |       | |-UnaryExprOrTypeTraitExpr 0x222ba84cec8 <col:40, col:53> 'unsigned long long' sizeof 'size_t':'unsigned long long'
|   |       | `-ImplicitCastExpr 0x222ba84cf10 <col:55> 'unsigned long long' <IntegralCast>
|   |       |   `-IntegerLiteral 0x222ba84cee8 <col:55> 'int' 8
|   |       `-ImplicitCastExpr 0x222ba84cf70 <col:57> 'unsigned long long' <IntegralCast>
|   |         `-IntegerLiteral 0x222ba84cf48 <col:57> 'int' 16
|   `-ParenExpr 0x222ba850220 <col:25, col:60> 'size_t':'unsigned long long'
|     `-BinaryOperator 0x222ba850200 <col:26, col:59> 'size_t':'unsigned long long' '<<'
|       |-CStyleCastExpr 0x222ba8500c8 <col:26, col:36> 'size_t':'unsigned long long' <IntegralCast>
|       | `-ParenExpr 0x222ba8500a8 <col:34, col:36> 'int'
|       |   `-IntegerLiteral 0x222ba850050 <line:295:52> 'int' 46560
|       `-ParenExpr 0x222ba8501e0 <line:22:39, col:59> 'unsigned long long'
|         `-BinaryOperator 0x222ba8501c0 <col:40, col:57> 'unsigned long long' '-'
|           |-BinaryOperator 0x222ba850160 <col:40, col:55> 'unsigned long long' '*'
|           | |-UnaryExprOrTypeTraitExpr 0x222ba850100 <col:40, col:53> 'unsigned long long' sizeof 'size_t':'unsigned long long'
|           | `-ImplicitCastExpr 0x222ba850148 <col:55> 'unsigned long long' <IntegralCast>
|           |   `-IntegerLiteral 0x222ba850120 <col:55> 'int' 8
|           `-ImplicitCastExpr 0x222ba8501a8 <col:57> 'unsigned long long' <IntegralCast>
|             `-IntegerLiteral 0x222ba850180 <col:57> 'int' 16
|-FunctionDecl 0x222ba8505d8 <line:298:1, line:366:1> line:298:13 used gcm_gmult_4bit 'void (u64 *, const u128 *)' static
| |-ParmVarDecl 0x222ba850448 <col:28, col:36> col:32 used Xi 'u64 *':'u64 *'
| |-ParmVarDecl 0x222ba850510 <col:39, col:59> col:50 used Htable 'const u128 *':'const u128 *'
| `-CompoundStmt 0x222ba84a570 <line:299:1, line:366:1>
|   |-DeclStmt 0x222ba850718 <line:300:5, col:11>
|   | `-VarDecl 0x222ba8506b0 <col:5, col:10> col:10 used Z 'u128':'u128'
|   |-DeclStmt 0x222ba8507d8 <line:301:5, col:17>
|   | `-VarDecl 0x222ba850748 <col:5, col:15> col:9 used cnt 'int' cinit
|   |   `-IntegerLiteral 0x222ba8507b0 <col:15> 'int' 15
|   |-DeclStmt 0x222ba850978 <line:302:5, col:25>
|   | |-VarDecl 0x222ba850800 <col:5, col:12> col:12 used rem 'size_t':'unsigned long long'
|   | |-VarDecl 0x222ba850878 <col:5, col:17> col:17 used nlo 'size_t':'unsigned long long'
|   | `-VarDecl 0x222ba8508f0 <col:5, col:22> col:22 used nhi 'size_t':'unsigned long long'
|   |-DeclStmt 0x222ba850ce8 <line:303:5, line:306:24>
|   | |-RecordDecl 0x222ba850990 <line:303:11, line:306:5> line:303:11 union definition
|   | | |-FieldDecl 0x222ba850a68 <line:304:9, col:14> col:14 one 'long'
|   | | `-FieldDecl 0x222ba850ad0 <line:305:9, col:14> col:14 referenced little 'char'
|   | `-VarDecl 0x222ba850b88 <line:303:5, line:306:23> col:7 used is_endian 'const union (anonymous union at .//openssl//file_jk/before\crypto\modes\gcm128.c:303:11)':'const union (anonymous at .//openssl//file_jk/before\crypto\modes\gcm128.c:303:11)' cinit
|   |   `-InitListExpr 0x222ba850c70 <col:19, col:23> 'union (anonymous union at .//openssl//file_jk/before\crypto\modes\gcm128.c:303:11)':'union (anonymous at .//openssl//file_jk/before\crypto\modes\gcm128.c:303:11)' field Field 0x222ba850a68 'one' 'long'
|   |     `-ImplicitCastExpr 0x222ba850cb8 <col:21> 'long' <IntegralCast>
|   |       `-IntegerLiteral 0x222ba850bf0 <col:21> 'int' 1
|   |-BinaryOperator 0x222ba850e40 <line:308:5, col:30> 'size_t':'unsigned long long' '='
|   | |-DeclRefExpr 0x222ba850d00 <col:5> 'size_t':'unsigned long long' lvalue Var 0x222ba850878 'nlo' 'size_t':'unsigned long long'
|   | `-ImplicitCastExpr 0x222ba850e28 <col:11, col:30> 'size_t':'unsigned long long' <IntegralCast>
|   |   `-ImplicitCastExpr 0x222ba850e10 <col:11, col:30> 'u8':'unsigned char' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x222ba850df0 <col:11, col:30> 'const u8':'const unsigned char' lvalue
|   |       |-ParenExpr 0x222ba850da8 <col:11, col:26> 'const u8 *'
|   |       | `-CStyleCastExpr 0x222ba850d80 <col:12, col:24> 'const u8 *' <BitCast>
|   |       |   `-ImplicitCastExpr 0x222ba850d68 <col:24> 'u64 *':'u64 *' <LValueToRValue> part_of_explicit_cast
|   |       |     `-DeclRefExpr 0x222ba850d38 <col:24> 'u64 *':'u64 *' lvalue ParmVar 0x222ba850448 'Xi' 'u64 *':'u64 *'
|   |       `-IntegerLiteral 0x222ba850dc8 <col:28> 'int' 15
|   |-BinaryOperator 0x222ba850f18 <line:309:5, col:18> 'size_t':'unsigned long long' '='
|   | |-DeclRefExpr 0x222ba850e60 <col:5> 'size_t':'unsigned long long' lvalue Var 0x222ba8508f0 'nhi' 'size_t':'unsigned long long'
|   | `-BinaryOperator 0x222ba850ef8 <col:11, col:18> 'size_t':'unsigned long long' '>>'
|   |   |-ImplicitCastExpr 0x222ba850ee0 <col:11> 'size_t':'unsigned long long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x222ba850e98 <col:11> 'size_t':'unsigned long long' lvalue Var 0x222ba850878 'nlo' 'size_t':'unsigned long long'
|   |   `-IntegerLiteral 0x222ba850eb8 <col:18> 'int' 4
|   |-CompoundAssignOperator 0x222ba850f98 <line:310:5, col:12> 'size_t':'unsigned long long' '&=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-DeclRefExpr 0x222ba850f38 <col:5> 'size_t':'unsigned long long' lvalue Var 0x222ba850878 'nlo' 'size_t':'unsigned long long'
|   | `-ImplicitCastExpr 0x222ba850f80 <col:12> 'unsigned long long' <IntegralCast>
|   |   `-IntegerLiteral 0x222ba850f58 <col:12> 'int' 15
|   |-BinaryOperator 0x222ba8490a0 <line:312:5, col:24> 'u64':'unsigned long long' '='
|   | |-MemberExpr 0x222ba848f98 <col:5, col:7> 'u64':'unsigned long long' lvalue .hi 0x222ba6bbf50
|   | | `-DeclRefExpr 0x222ba848f60 <col:5> 'u128':'u128' lvalue Var 0x222ba8506b0 'Z' 'u128':'u128'
|   | `-ImplicitCastExpr 0x222ba849088 <col:12, col:24> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-MemberExpr 0x222ba849058 <col:12, col:24> 'const u64':'const unsigned long long' lvalue .hi 0x222ba6bbf50
|   |     `-ArraySubscriptExpr 0x222ba849038 <col:12, col:22> 'const u128':'const u128' lvalue
|   |       |-ImplicitCastExpr 0x222ba849008 <col:12> 'const u128 *':'const u128 *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x222ba848fc8 <col:12> 'const u128 *':'const u128 *' lvalue ParmVar 0x222ba850510 'Htable' 'const u128 *':'const u128 *'
|   |       `-ImplicitCastExpr 0x222ba849020 <col:19> 'size_t':'unsigned long long' <LValueToRValue>
|   |         `-DeclRefExpr 0x222ba848fe8 <col:19> 'size_t':'unsigned long long' lvalue Var 0x222ba850878 'nlo' 'size_t':'unsigned long long'
|   |-BinaryOperator 0x222ba8491e8 <line:313:5, col:24> 'u64':'unsigned long long' '='
|   | |-MemberExpr 0x222ba8490e0 <col:5, col:7> 'u64':'unsigned long long' lvalue .lo 0x222ba6bbfb8
|   | | `-DeclRefExpr 0x222ba8490c0 <col:5> 'u128':'u128' lvalue Var 0x222ba8506b0 'Z' 'u128':'u128'
|   | `-ImplicitCastExpr 0x222ba8491d0 <col:12, col:24> 'u64':'unsigned long long' <LValueToRValue>
|   |   `-MemberExpr 0x222ba8491a0 <col:12, col:24> 'const u64':'const unsigned long long' lvalue .lo 0x222ba6bbfb8
|   |     `-ArraySubscriptExpr 0x222ba849180 <col:12, col:22> 'const u128':'const u128' lvalue
|   |       |-ImplicitCastExpr 0x222ba849150 <col:12> 'const u128 *':'const u128 *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x222ba849110 <col:12> 'const u128 *':'const u128 *' lvalue ParmVar 0x222ba850510 'Htable' 'const u128 *':'const u128 *'
|   |       `-ImplicitCastExpr 0x222ba849168 <col:19> 'size_t':'unsigned long long' <LValueToRValue>
|   |         `-DeclRefExpr 0x222ba849130 <col:19> 'size_t':'unsigned long long' lvalue Var 0x222ba850878 'nlo' 'size_t':'unsigned long long'
|   |-WhileStmt 0x222ba851cf8 <line:315:5, line:344:5>
|   | |-IntegerLiteral 0x222ba849208 <line:315:12> 'int' 1
|   | `-CompoundStmt 0x222ba851c68 <col:15, line:344:5>
|   |   |-BinaryOperator 0x222ba849368 <line:316:9, col:30> 'size_t':'unsigned long long' '='
|   |   | |-DeclRefExpr 0x222ba849230 <col:9> 'size_t':'unsigned long long' lvalue Var 0x222ba850800 'rem' 'size_t':'unsigned long long'
|   |   | `-BinaryOperator 0x222ba849348 <col:15, col:30> 'unsigned long long' '&'
|   |   |   |-CStyleCastExpr 0x222ba8492e0 <col:15, col:25> 'size_t':'unsigned long long' <NoOp>
|   |   |   | `-ImplicitCastExpr 0x222ba8492c8 <col:23, col:25> 'u64':'unsigned long long' <LValueToRValue> part_of_explicit_cast
|   |   |   |   `-MemberExpr 0x222ba849288 <col:23, col:25> 'u64':'unsigned long long' lvalue .lo 0x222ba6bbfb8
|   |   |   |     `-DeclRefExpr 0x222ba849268 <col:23> 'u128':'u128' lvalue Var 0x222ba8506b0 'Z' 'u128':'u128'
|   |   |   `-ImplicitCastExpr 0x222ba849330 <col:30> 'unsigned long long' <IntegralCast>
|   |   |     `-IntegerLiteral 0x222ba849308 <col:30> 'int' 15
|   |   |-BinaryOperator 0x222ba849598 <line:317:9, col:41> 'u64':'unsigned long long' '='
|   |   | |-MemberExpr 0x222ba8493a8 <col:9, col:11> 'u64':'unsigned long long' lvalue .lo 0x222ba6bbfb8
|   |   | | `-DeclRefExpr 0x222ba849388 <col:9> 'u128':'u128' lvalue Var 0x222ba8506b0 'Z' 'u128':'u128'
|   |   | `-BinaryOperator 0x222ba849578 <col:16, col:41> 'unsigned long long' '|'
|   |   |   |-ParenExpr 0x222ba849488 <col:16, col:27> 'u64':'unsigned long long'
|   |   |   | `-BinaryOperator 0x222ba849468 <col:17, col:25> 'u64':'unsigned long long' '<<'
|   |   |   |   |-ImplicitCastExpr 0x222ba849450 <col:17, col:19> 'u64':'unsigned long long' <LValueToRValue>
|   |   |   |   | `-MemberExpr 0x222ba8493f8 <col:17, col:19> 'u64':'unsigned long long' lvalue .hi 0x222ba6bbf50
|   |   |   |   |   `-DeclRefExpr 0x222ba8493d8 <col:17> 'u128':'u128' lvalue Var 0x222ba8506b0 'Z' 'u128':'u128'
|   |   |   |   `-IntegerLiteral 0x222ba849428 <col:25> 'int' 60
|   |   |   `-ParenExpr 0x222ba849558 <col:31, col:41> 'u64':'unsigned long long'
|   |   |     `-BinaryOperator 0x222ba849538 <col:32, col:40> 'u64':'unsigned long long' '>>'
|   |   |       |-ImplicitCastExpr 0x222ba849520 <col:32, col:34> 'u64':'unsigned long long' <LValueToRValue>
|   |   |       | `-MemberExpr 0x222ba8494c8 <col:32, col:34> 'u64':'unsigned long long' lvalue .lo 0x222ba6bbfb8
|   |   |       |   `-DeclRefExpr 0x222ba8494a8 <col:32> 'u128':'u128' lvalue Var 0x222ba8506b0 'Z' 'u128':'u128'
|   |   |       `-IntegerLiteral 0x222ba8494f8 <col:40> 'int' 4
|   |   |-BinaryOperator 0x222ba8496d8 <line:318:9, col:26> 'u64':'unsigned long long' '='
|   |   | |-MemberExpr 0x222ba8495d8 <col:9, col:11> 'u64':'unsigned long long' lvalue .hi 0x222ba6bbf50
|   |   | | `-DeclRefExpr 0x222ba8495b8 <col:9> 'u128':'u128' lvalue Var 0x222ba8506b0 'Z' 'u128':'u128'
|   |   | `-ParenExpr 0x222ba8496b8 <col:16, col:26> 'u64':'unsigned long long'
|   |   |   `-BinaryOperator 0x222ba849698 <col:17, col:25> 'u64':'unsigned long long' '>>'
|   |   |     |-ImplicitCastExpr 0x222ba849680 <col:17, col:19> 'u64':'unsigned long long' <LValueToRValue>
|   |   |     | `-MemberExpr 0x222ba849628 <col:17, col:19> 'u64':'unsigned long long' lvalue .hi 0x222ba6bbf50
|   |   |     |   `-DeclRefExpr 0x222ba849608 <col:17> 'u128':'u128' lvalue Var 0x222ba8506b0 'Z' 'u128':'u128'
|   |   |     `-IntegerLiteral 0x222ba849658 <col:25> 'int' 4
|   |   |-IfStmt 0x222ba849ab8 <line:319:9, line:322:43> has_else
|   |   | |-BinaryOperator 0x222ba849768 <line:319:13, col:31> 'int' '=='
|   |   | | |-UnaryExprOrTypeTraitExpr 0x222ba849708 <col:13, col:26> 'unsigned long long' sizeof 'size_t':'unsigned long long'
|   |   | | `-ImplicitCastExpr 0x222ba849750 <col:31> 'unsigned long long' <IntegralCast>
|   |   | |   `-IntegerLiteral 0x222ba849728 <col:31> 'int' 8
|   |   | |-CompoundAssignOperator 0x222ba8498e0 <line:320:13, col:33> 'u64':'unsigned long long' '^=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |   | | |-MemberExpr 0x222ba8497a8 <col:13, col:15> 'u64':'unsigned long long' lvalue .hi 0x222ba6bbf50
|   |   | | | `-DeclRefExpr 0x222ba849788 <col:13> 'u128':'u128' lvalue Var 0x222ba8506b0 'Z' 'u128':'u128'
|   |   | | `-ImplicitCastExpr 0x222ba8498c8 <col:21, col:33> 'size_t':'unsigned long long' <LValueToRValue>
|   |   | |   `-ArraySubscriptExpr 0x222ba8498a8 <col:21, col:33> 'const size_t':'const unsigned long long' lvalue
|   |   | |     |-ImplicitCastExpr 0x222ba849878 <col:21> 'const size_t *' <ArrayToPointerDecay>
|   |   | |     | `-DeclRefExpr 0x222ba8497d8 <col:21> 'const size_t [16]' lvalue Var 0x222ba84d298 'rem_4bit' 'const size_t [16]'
|   |   | |     `-ImplicitCastExpr 0x222ba849890 <col:30> 'size_t':'unsigned long long' <LValueToRValue>
|   |   | |       `-DeclRefExpr 0x222ba8497f8 <col:30> 'size_t':'unsigned long long' lvalue Var 0x222ba850800 'rem' 'size_t':'unsigned long long'
|   |   | `-CompoundAssignOperator 0x222ba849a88 <line:322:13, col:43> 'u64':'unsigned long long' '^=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |   |   |-MemberExpr 0x222ba849930 <col:13, col:15> 'u64':'unsigned long long' lvalue .hi 0x222ba6bbf50
|   |   |   | `-DeclRefExpr 0x222ba849910 <col:13> 'u128':'u128' lvalue Var 0x222ba8506b0 'Z' 'u128':'u128'
|   |   |   `-BinaryOperator 0x222ba849a68 <col:21, col:43> 'u64':'unsigned long long' '<<'
|   |   |     |-CStyleCastExpr 0x222ba849a18 <col:21, col:38> 'u64':'unsigned long long' <NoOp>
|   |   |     | `-ImplicitCastExpr 0x222ba849a00 <col:26, col:38> 'size_t':'unsigned long long' <LValueToRValue> part_of_explicit_cast
|   |   |     |   `-ArraySubscriptExpr 0x222ba8499d0 <col:26, col:38> 'const size_t':'const unsigned long long' lvalue
|   |   |     |     |-ImplicitCastExpr 0x222ba8499a0 <col:26> 'const size_t *' <ArrayToPointerDecay>
|   |   |     |     | `-DeclRefExpr 0x222ba849960 <col:26> 'const size_t [16]' lvalue Var 0x222ba84d298 'rem_4bit' 'const size_t [16]'
|   |   |     |     `-ImplicitCastExpr 0x222ba8499b8 <col:35> 'size_t':'unsigned long long' <LValueToRValue>
|   |   |     |       `-DeclRefExpr 0x222ba849980 <col:35> 'size_t':'unsigned long long' lvalue Var 0x222ba850800 'rem' 'size_t':'unsigned long long'
|   |   |     `-IntegerLiteral 0x222ba849a40 <col:43> 'int' 32
|   |   |-CompoundAssignOperator 0x222ba849c08 <line:324:9, col:29> 'u64':'unsigned long long' '^=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |   | |-MemberExpr 0x222ba849b00 <col:9, col:11> 'u64':'unsigned long long' lvalue .hi 0x222ba6bbf50
|   |   | | `-DeclRefExpr 0x222ba849ae0 <col:9> 'u128':'u128' lvalue Var 0x222ba8506b0 'Z' 'u128':'u128'
|   |   | `-ImplicitCastExpr 0x222ba849bf0 <col:17, col:29> 'u64':'unsigned long long' <LValueToRValue>
|   |   |   `-MemberExpr 0x222ba849bc0 <col:17, col:29> 'const u64':'const unsigned long long' lvalue .hi 0x222ba6bbf50
|   |   |     `-ArraySubscriptExpr 0x222ba849ba0 <col:17, col:27> 'const u128':'const u128' lvalue
|   |   |       |-ImplicitCastExpr 0x222ba849b70 <col:17> 'const u128 *':'const u128 *' <LValueToRValue>
|   |   |       | `-DeclRefExpr 0x222ba849b30 <col:17> 'const u128 *':'const u128 *' lvalue ParmVar 0x222ba850510 'Htable' 'const u128 *':'const u128 *'
|   |   |       `-ImplicitCastExpr 0x222ba849b88 <col:24> 'size_t':'unsigned long long' <LValueToRValue>
|   |   |         `-DeclRefExpr 0x222ba849b50 <col:24> 'size_t':'unsigned long long' lvalue Var 0x222ba8508f0 'nhi' 'size_t':'unsigned long long'
|   |   |-CompoundAssignOperator 0x222ba849d60 <line:325:9, col:29> 'u64':'unsigned long long' '^=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |   | |-MemberExpr 0x222ba849c58 <col:9, col:11> 'u64':'unsigned long long' lvalue .lo 0x222ba6bbfb8
|   |   | | `-DeclRefExpr 0x222ba849c38 <col:9> 'u128':'u128' lvalue Var 0x222ba8506b0 'Z' 'u128':'u128'
|   |   | `-ImplicitCastExpr 0x222ba849d48 <col:17, col:29> 'u64':'unsigned long long' <LValueToRValue>
|   |   |   `-MemberExpr 0x222ba849d18 <col:17, col:29> 'const u64':'const unsigned long long' lvalue .lo 0x222ba6bbfb8
|   |   |     `-ArraySubscriptExpr 0x222ba849cf8 <col:17, col:27> 'const u128':'const u128' lvalue
|   |   |       |-ImplicitCastExpr 0x222ba849cc8 <col:17> 'const u128 *':'const u128 *' <LValueToRValue>
|   |   |       | `-DeclRefExpr 0x222ba849c88 <col:17> 'const u128 *':'const u128 *' lvalue ParmVar 0x222ba850510 'Htable' 'const u128 *':'const u128 *'
|   |   |       `-ImplicitCastExpr 0x222ba849ce0 <col:24> 'size_t':'unsigned long long' <LValueToRValue>
|   |   |         `-DeclRefExpr 0x222ba849ca8 <col:24> 'size_t':'unsigned long long' lvalue Var 0x222ba8508f0 'nhi' 'size_t':'unsigned long long'
|   |   |-IfStmt 0x222ba849e30 <line:327:9, line:328:13>
|   |   | |-BinaryOperator 0x222ba849e08 <line:327:13, col:21> 'int' '<'
|   |   | | |-UnaryOperator 0x222ba849dc8 <col:13, col:15> 'int' prefix '--'
|   |   | | | `-DeclRefExpr 0x222ba849d90 <col:15> 'int' lvalue Var 0x222ba850748 'cnt' 'int'
|   |   | | `-IntegerLiteral 0x222ba849de0 <col:21> 'int' 0
|   |   | `-BreakStmt 0x222ba849e28 <line:328:13>
|   |   |-BinaryOperator 0x222ba851010 <line:330:9, col:35> 'size_t':'unsigned long long' '='
|   |   | |-DeclRefExpr 0x222ba849e48 <col:9> 'size_t':'unsigned long long' lvalue Var 0x222ba850878 'nlo' 'size_t':'unsigned long long'
|   |   | `-ImplicitCastExpr 0x222ba850ff8 <col:15, col:35> 'size_t':'unsigned long long' <IntegralCast>
|   |   |   `-ImplicitCastExpr 0x222ba850fe0 <col:15, col:35> 'u8':'unsigned char' <LValueToRValue>
|   |   |     `-ArraySubscriptExpr 0x222ba849f30 <col:15, col:35> 'const u8':'const unsigned char' lvalue
|   |   |       |-ParenExpr 0x222ba849ed8 <col:15, col:30> 'const u8 *'
|   |   |       | `-CStyleCastExpr 0x222ba849eb0 <col:16, col:28> 'const u8 *' <BitCast>
|   |   |       |   `-ImplicitCastExpr 0x222ba849e98 <col:28> 'u64 *':'u64 *' <LValueToRValue> part_of_explicit_cast
|   |   |       |     `-DeclRefExpr 0x222ba849e68 <col:28> 'u64 *':'u64 *' lvalue ParmVar 0x222ba850448 'Xi' 'u64 *':'u64 *'
|   |   |       `-ImplicitCastExpr 0x222ba849f18 <col:32> 'int' <LValueToRValue>
|   |   |         `-DeclRefExpr 0x222ba849ef8 <col:32> 'int' lvalue Var 0x222ba850748 'cnt' 'int'
|   |   |-BinaryOperator 0x222ba8510d0 <line:331:9, col:22> 'size_t':'unsigned long long' '='
|   |   | |-DeclRefExpr 0x222ba851030 <col:9> 'size_t':'unsigned long long' lvalue Var 0x222ba8508f0 'nhi' 'size_t':'unsigned long long'
|   |   | `-BinaryOperator 0x222ba8510b0 <col:15, col:22> 'size_t':'unsigned long long' '>>'
|   |   |   |-ImplicitCastExpr 0x222ba851098 <col:15> 'size_t':'unsigned long long' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x222ba851050 <col:15> 'size_t':'unsigned long long' lvalue Var 0x222ba850878 'nlo' 'size_t':'unsigned long long'
|   |   |   `-IntegerLiteral 0x222ba851070 <col:22> 'int' 4
|   |   |-CompoundAssignOperator 0x222ba851150 <line:332:9, col:16> 'size_t':'unsigned long long' '&=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |   | |-DeclRefExpr 0x222ba8510f0 <col:9> 'size_t':'unsigned long long' lvalue Var 0x222ba850878 'nlo' 'size_t':'unsigned long long'
|   |   | `-ImplicitCastExpr 0x222ba851138 <col:16> 'unsigned long long' <IntegralCast>
|   |   |   `-IntegerLiteral 0x222ba851110 <col:16> 'int' 15
|   |   |-BinaryOperator 0x222ba8512a0 <line:334:9, col:30> 'size_t':'unsigned long long' '='
|   |   | |-DeclRefExpr 0x222ba851180 <col:9> 'size_t':'unsigned long long' lvalue Var 0x222ba850800 'rem' 'size_t':'unsigned long long'
|   |   | `-BinaryOperator 0x222ba851280 <col:15, col:30> 'unsigned long long' '&'
|   |   |   |-CStyleCastExpr 0x222ba851218 <col:15, col:25> 'size_t':'unsigned long long' <NoOp>
|   |   |   | `-ImplicitCastExpr 0x222ba851200 <col:23, col:25> 'u64':'unsigned long long' <LValueToRValue> part_of_explicit_cast
|   |   |   |   `-MemberExpr 0x222ba8511c0 <col:23, col:25> 'u64':'unsigned long long' lvalue .lo 0x222ba6bbfb8
|   |   |   |     `-DeclRefExpr 0x222ba8511a0 <col:23> 'u128':'u128' lvalue Var 0x222ba8506b0 'Z' 'u128':'u128'
|   |   |   `-ImplicitCastExpr 0x222ba851268 <col:30> 'unsigned long long' <IntegralCast>
|   |   |     `-IntegerLiteral 0x222ba851240 <col:30> 'int' 15
|   |   |-BinaryOperator 0x222ba8514d0 <line:335:9, col:41> 'u64':'unsigned long long' '='
|   |   | |-MemberExpr 0x222ba8512e0 <col:9, col:11> 'u64':'unsigned long long' lvalue .lo 0x222ba6bbfb8
|   |   | | `-DeclRefExpr 0x222ba8512c0 <col:9> 'u128':'u128' lvalue Var 0x222ba8506b0 'Z' 'u128':'u128'
|   |   | `-BinaryOperator 0x222ba8514b0 <col:16, col:41> 'unsigned long long' '|'
|   |   |   |-ParenExpr 0x222ba8513c0 <col:16, col:27> 'u64':'unsigned long long'
|   |   |   | `-BinaryOperator 0x222ba8513a0 <col:17, col:25> 'u64':'unsigned long long' '<<'
|   |   |   |   |-ImplicitCastExpr 0x222ba851388 <col:17, col:19> 'u64':'unsigned long long' <LValueToRValue>
|   |   |   |   | `-MemberExpr 0x222ba851330 <col:17, col:19> 'u64':'unsigned long long' lvalue .hi 0x222ba6bbf50
|   |   |   |   |   `-DeclRefExpr 0x222ba851310 <col:17> 'u128':'u128' lvalue Var 0x222ba8506b0 'Z' 'u128':'u128'
|   |   |   |   `-IntegerLiteral 0x222ba851360 <col:25> 'int' 60
|   |   |   `-ParenExpr 0x222ba851490 <col:31, col:41> 'u64':'unsigned long long'
|   |   |     `-BinaryOperator 0x222ba851470 <col:32, col:40> 'u64':'unsigned long long' '>>'
|   |   |       |-ImplicitCastExpr 0x222ba851458 <col:32, col:34> 'u64':'unsigned long long' <LValueToRValue>
|   |   |       | `-MemberExpr 0x222ba851400 <col:32, col:34> 'u64':'unsigned long long' lvalue .lo 0x222ba6bbfb8
|   |   |       |   `-DeclRefExpr 0x222ba8513e0 <col:32> 'u128':'u128' lvalue Var 0x222ba8506b0 'Z' 'u128':'u128'
|   |   |       `-IntegerLiteral 0x222ba851430 <col:40> 'int' 4
|   |   |-BinaryOperator 0x222ba851610 <line:336:9, col:26> 'u64':'unsigned long long' '='
|   |   | |-MemberExpr 0x222ba851510 <col:9, col:11> 'u64':'unsigned long long' lvalue .hi 0x222ba6bbf50
|   |   | | `-DeclRefExpr 0x222ba8514f0 <col:9> 'u128':'u128' lvalue Var 0x222ba8506b0 'Z' 'u128':'u128'
|   |   | `-ParenExpr 0x222ba8515f0 <col:16, col:26> 'u64':'unsigned long long'
|   |   |   `-BinaryOperator 0x222ba8515d0 <col:17, col:25> 'u64':'unsigned long long' '>>'
|   |   |     |-ImplicitCastExpr 0x222ba8515b8 <col:17, col:19> 'u64':'unsigned long long' <LValueToRValue>
|   |   |     | `-MemberExpr 0x222ba851560 <col:17, col:19> 'u64':'unsigned long long' lvalue .hi 0x222ba6bbf50
|   |   |     |   `-DeclRefExpr 0x222ba851540 <col:17> 'u128':'u128' lvalue Var 0x222ba8506b0 'Z' 'u128':'u128'
|   |   |     `-IntegerLiteral 0x222ba851590 <col:25> 'int' 4
|   |   |-IfStmt 0x222ba851990 <line:337:9, line:340:43> has_else
|   |   | |-BinaryOperator 0x222ba8516a0 <line:337:13, col:31> 'int' '=='
|   |   | | |-UnaryExprOrTypeTraitExpr 0x222ba851640 <col:13, col:26> 'unsigned long long' sizeof 'size_t':'unsigned long long'
|   |   | | `-ImplicitCastExpr 0x222ba851688 <col:31> 'unsigned long long' <IntegralCast>
|   |   | |   `-IntegerLiteral 0x222ba851660 <col:31> 'int' 8
|   |   | |-CompoundAssignOperator 0x222ba8517b8 <line:338:13, col:33> 'u64':'unsigned long long' '^=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |   | | |-MemberExpr 0x222ba8516e0 <col:13, col:15> 'u64':'unsigned long long' lvalue .hi 0x222ba6bbf50
|   |   | | | `-DeclRefExpr 0x222ba8516c0 <col:13> 'u128':'u128' lvalue Var 0x222ba8506b0 'Z' 'u128':'u128'
|   |   | | `-ImplicitCastExpr 0x222ba8517a0 <col:21, col:33> 'size_t':'unsigned long long' <LValueToRValue>
|   |   | |   `-ArraySubscriptExpr 0x222ba851780 <col:21, col:33> 'const size_t':'const unsigned long long' lvalue
|   |   | |     |-ImplicitCastExpr 0x222ba851750 <col:21> 'const size_t *' <ArrayToPointerDecay>
|   |   | |     | `-DeclRefExpr 0x222ba851710 <col:21> 'const size_t [16]' lvalue Var 0x222ba84d298 'rem_4bit' 'const size_t [16]'
|   |   | |     `-ImplicitCastExpr 0x222ba851768 <col:30> 'size_t':'unsigned long long' <LValueToRValue>
|   |   | |       `-DeclRefExpr 0x222ba851730 <col:30> 'size_t':'unsigned long long' lvalue Var 0x222ba850800 'rem' 'size_t':'unsigned long long'
|   |   | `-CompoundAssignOperator 0x222ba851960 <line:340:13, col:43> 'u64':'unsigned long long' '^=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |   |   |-MemberExpr 0x222ba851808 <col:13, col:15> 'u64':'unsigned long long' lvalue .hi 0x222ba6bbf50
|   |   |   | `-DeclRefExpr 0x222ba8517e8 <col:13> 'u128':'u128' lvalue Var 0x222ba8506b0 'Z' 'u128':'u128'
|   |   |   `-BinaryOperator 0x222ba851940 <col:21, col:43> 'u64':'unsigned long long' '<<'
|   |   |     |-CStyleCastExpr 0x222ba8518f0 <col:21, col:38> 'u64':'unsigned long long' <NoOp>
|   |   |     | `-ImplicitCastExpr 0x222ba8518d8 <col:26, col:38> 'size_t':'unsigned long long' <LValueToRValue> part_of_explicit_cast
|   |   |     |   `-ArraySubscriptExpr 0x222ba8518a8 <col:26, col:38> 'const size_t':'const unsigned long long' lvalue
|   |   |     |     |-ImplicitCastExpr 0x222ba851878 <col:26> 'const size_t *' <ArrayToPointerDecay>
|   |   |     |     | `-DeclRefExpr 0x222ba851838 <col:26> 'const size_t [16]' lvalue Var 0x222ba84d298 'rem_4bit' 'const size_t [16]'
|   |   |     |     `-ImplicitCastExpr 0x222ba851890 <col:35> 'size_t':'unsigned long long' <LValueToRValue>
|   |   |     |       `-DeclRefExpr 0x222ba851858 <col:35> 'size_t':'unsigned long long' lvalue Var 0x222ba850800 'rem' 'size_t':'unsigned long long'
|   |   |     `-IntegerLiteral 0x222ba851918 <col:43> 'int' 32
|   |   |-CompoundAssignOperator 0x222ba851ae0 <line:342:9, col:29> 'u64':'unsigned long long' '^=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |   | |-MemberExpr 0x222ba8519d8 <col:9, col:11> 'u64':'unsigned long long' lvalue .hi 0x222ba6bbf50
|   |   | | `-DeclRefExpr 0x222ba8519b8 <col:9> 'u128':'u128' lvalue Var 0x222ba8506b0 'Z' 'u128':'u128'
|   |   | `-ImplicitCastExpr 0x222ba851ac8 <col:17, col:29> 'u64':'unsigned long long' <LValueToRValue>
|   |   |   `-MemberExpr 0x222ba851a98 <col:17, col:29> 'const u64':'const unsigned long long' lvalue .hi 0x222ba6bbf50
|   |   |     `-ArraySubscriptExpr 0x222ba851a78 <col:17, col:27> 'const u128':'const u128' lvalue
|   |   |       |-ImplicitCastExpr 0x222ba851a48 <col:17> 'const u128 *':'const u128 *' <LValueToRValue>
|   |   |       | `-DeclRefExpr 0x222ba851a08 <col:17> 'const u128 *':'const u128 *' lvalue ParmVar 0x222ba850510 'Htable' 'const u128 *':'const u128 *'
|   |   |       `-ImplicitCastExpr 0x222ba851a60 <col:24> 'size_t':'unsigned long long' <LValueToRValue>
|   |   |         `-DeclRefExpr 0x222ba851a28 <col:24> 'size_t':'unsigned long long' lvalue Var 0x222ba850878 'nlo' 'size_t':'unsigned long long'
|   |   `-CompoundAssignOperator 0x222ba851c38 <line:343:9, col:29> 'u64':'unsigned long long' '^=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |     |-MemberExpr 0x222ba851b30 <col:9, col:11> 'u64':'unsigned long long' lvalue .lo 0x222ba6bbfb8
|   |     | `-DeclRefExpr 0x222ba851b10 <col:9> 'u128':'u128' lvalue Var 0x222ba8506b0 'Z' 'u128':'u128'
|   |     `-ImplicitCastExpr 0x222ba851c20 <col:17, col:29> 'u64':'unsigned long long' <LValueToRValue>
|   |       `-MemberExpr 0x222ba851bf0 <col:17, col:29> 'const u64':'const unsigned long long' lvalue .lo 0x222ba6bbfb8
|   |         `-ArraySubscriptExpr 0x222ba851bd0 <col:17, col:27> 'const u128':'const u128' lvalue
|   |           |-ImplicitCastExpr 0x222ba851ba0 <col:17> 'const u128 *':'const u128 *' <LValueToRValue>
|   |           | `-DeclRefExpr 0x222ba851b60 <col:17> 'const u128 *':'const u128 *' lvalue ParmVar 0x222ba850510 'Htable' 'const u128 *':'const u128 *'
|   |           `-ImplicitCastExpr 0x222ba851bb8 <col:24> 'size_t':'unsigned long long' <LValueToRValue>
|   |             `-DeclRefExpr 0x222ba851b80 <col:24> 'size_t':'unsigned long long' lvalue Var 0x222ba850878 'nlo' 'size_t':'unsigned long long'
|   `-IfStmt 0x222ba84a548 <line:346:5, line:365:5> has_else
|     |-ImplicitCastExpr 0x222ba851d78 <line:346:9, col:19> 'char' <LValueToRValue>
|     | `-MemberExpr 0x222ba851d48 <col:9, col:19> 'const char' lvalue .little 0x222ba850ad0
|     |   `-DeclRefExpr 0x222ba851d10 <col:9> 'const union (anonymous union at .//openssl//file_jk/before\crypto\modes\gcm128.c:303:11)':'const union (anonymous at .//openssl//file_jk/before\crypto\modes\gcm128.c:303:11)' lvalue Var 0x222ba850b88 'is_endian' 'const union (anonymous union at .//openssl//file_jk/before\crypto\modes\gcm128.c:303:11)':'const union (anonymous at .//openssl//file_jk/before\crypto\modes\gcm128.c:303:11)'
|     |-CompoundStmt 0x222ba84a2f8 <col:27, line:362:5>
|     | |-BinaryOperator 0x222ba84a0f8 <line:348:9, .//openssl//file_jk/before\crypto\modes/modes_lcl.h:77:50> 'u64':'unsigned long long' '='
|     | | |-ArraySubscriptExpr 0x222ba851df0 <.//openssl//file_jk/before\crypto\modes\gcm128.c:348:9, col:13> 'u64':'unsigned long long' lvalue
|     | | | |-ImplicitCastExpr 0x222ba851dd8 <col:9> 'u64 *':'u64 *' <LValueToRValue>
|     | | | | `-DeclRefExpr 0x222ba851d90 <col:9> 'u64 *':'u64 *' lvalue ParmVar 0x222ba850448 'Xi' 'u64 *':'u64 *'
|     | | | `-IntegerLiteral 0x222ba851db0 <col:12> 'int' 0
|     | | `-CallExpr 0x222ba84a0d0 <.//openssl//file_jk/before\crypto\modes/modes_lcl.h:77:25, col:50> 'unsigned long long'
|     | |   |-ImplicitCastExpr 0x222ba84a0b8 <col:25> 'unsigned long long (*)(unsigned long long)' <FunctionToPointerDecay>
|     | |   | `-DeclRefExpr 0x222ba849f70 <col:25> 'unsigned long long (unsigned long long)' Function 0x222ba851e40 '_byteswap_uint64' 'unsigned long long (unsigned long long)'
|     | |   `-CStyleCastExpr 0x222ba84a060 <col:42, col:49> 'u64':'unsigned long long' <NoOp>
|     | |     `-ImplicitCastExpr 0x222ba84a048 <col:47, col:49> 'u64':'unsigned long long' <LValueToRValue> part_of_explicit_cast
|     | |       `-ParenExpr 0x222ba84a028 <col:47, col:49> 'u64':'unsigned long long' lvalue
|     | |         `-MemberExpr 0x222ba849fc8 <.//openssl//file_jk/before\crypto\modes\gcm128.c:348:24, col:26> 'u64':'unsigned long long' lvalue .hi 0x222ba6bbf50
|     | |           `-DeclRefExpr 0x222ba849fa8 <col:24> 'u128':'u128' lvalue Var 0x222ba8506b0 'Z' 'u128':'u128'
|     | `-BinaryOperator 0x222ba84a2d8 <line:349:9, .//openssl//file_jk/before\crypto\modes/modes_lcl.h:77:50> 'u64':'unsigned long long' '='
|     |   |-ArraySubscriptExpr 0x222ba84a178 <.//openssl//file_jk/before\crypto\modes\gcm128.c:349:9, col:13> 'u64':'unsigned long long' lvalue
|     |   | |-ImplicitCastExpr 0x222ba84a160 <col:9> 'u64 *':'u64 *' <LValueToRValue>
|     |   | | `-DeclRefExpr 0x222ba84a118 <col:9> 'u64 *':'u64 *' lvalue ParmVar 0x222ba850448 'Xi' 'u64 *':'u64 *'
|     |   | `-IntegerLiteral 0x222ba84a138 <col:12> 'int' 1
|     |   `-CallExpr 0x222ba84a2b0 <.//openssl//file_jk/before\crypto\modes/modes_lcl.h:77:25, col:50> 'unsigned long long'
|     |     |-ImplicitCastExpr 0x222ba84a298 <col:25> 'unsigned long long (*)(unsigned long long)' <FunctionToPointerDecay>
|     |     | `-DeclRefExpr 0x222ba84a198 <col:25> 'unsigned long long (unsigned long long)' Function 0x222ba851e40 '_byteswap_uint64' 'unsigned long long (unsigned long long)'
|     |     `-CStyleCastExpr 0x222ba84a270 <col:42, col:49> 'u64':'unsigned long long' <NoOp>
|     |       `-ImplicitCastExpr 0x222ba84a258 <col:47, col:49> 'u64':'unsigned long long' <LValueToRValue> part_of_explicit_cast
|     |         `-ParenExpr 0x222ba84a238 <col:47, col:49> 'u64':'unsigned long long' lvalue
|     |           `-MemberExpr 0x222ba84a1d8 <.//openssl//file_jk/before\crypto\modes\gcm128.c:349:24, col:26> 'u64':'unsigned long long' lvalue .lo 0x222ba6bbfb8
|     |             `-DeclRefExpr 0x222ba84a1b8 <col:24> 'u128':'u128' lvalue Var 0x222ba8506b0 'Z' 'u128':'u128'
|     `-CompoundStmt 0x222ba84a528 <line:362:12, line:365:5>
|       |-BinaryOperator 0x222ba84a400 <line:363:9, col:19> 'u64':'unsigned long long' '='
|       | |-ArraySubscriptExpr 0x222ba84a378 <col:9, col:13> 'u64':'unsigned long long' lvalue
|       | | |-ImplicitCastExpr 0x222ba84a360 <col:9> 'u64 *':'u64 *' <LValueToRValue>
|       | | | `-DeclRefExpr 0x222ba84a318 <col:9> 'u64 *':'u64 *' lvalue ParmVar 0x222ba850448 'Xi' 'u64 *':'u64 *'
|       | | `-IntegerLiteral 0x222ba84a338 <col:12> 'int' 0
|       | `-ImplicitCastExpr 0x222ba84a3e8 <col:17, col:19> 'u64':'unsigned long long' <LValueToRValue>
|       |   `-MemberExpr 0x222ba84a3b8 <col:17, col:19> 'u64':'unsigned long long' lvalue .hi 0x222ba6bbf50
|       |     `-DeclRefExpr 0x222ba84a398 <col:17> 'u128':'u128' lvalue Var 0x222ba8506b0 'Z' 'u128':'u128'
|       `-BinaryOperator 0x222ba84a508 <line:364:9, col:19> 'u64':'unsigned long long' '='
|         |-ArraySubscriptExpr 0x222ba84a480 <col:9, col:13> 'u64':'unsigned long long' lvalue
|         | |-ImplicitCastExpr 0x222ba84a468 <col:9> 'u64 *':'u64 *' <LValueToRValue>
|         | | `-DeclRefExpr 0x222ba84a420 <col:9> 'u64 *':'u64 *' lvalue ParmVar 0x222ba850448 'Xi' 'u64 *':'u64 *'
|         | `-IntegerLiteral 0x222ba84a440 <col:12> 'int' 1
|         `-ImplicitCastExpr 0x222ba84a4f0 <col:17, col:19> 'u64':'unsigned long long' <LValueToRValue>
|           `-MemberExpr 0x222ba84a4c0 <col:17, col:19> 'u64':'unsigned long long' lvalue .lo 0x222ba6bbfb8
|             `-DeclRefExpr 0x222ba84a4a0 <col:17> 'u128':'u128' lvalue Var 0x222ba8506b0 'Z' 'u128':'u128'
|-FunctionDecl 0x222ba851e40 <.//openssl//file_jk/before\crypto\modes/modes_lcl.h:77:25> col:25 implicit used _byteswap_uint64 'unsigned long long (unsigned long long)' extern
| |-ParmVarDecl 0x222ba851ee0 <<invalid sloc>> <invalid sloc> 'unsigned long long'
| |-NoThrowAttr 0x222ba851f50 <col:25> Implicit
| `-ConstAttr 0x222ba851fa8 <col:25> Implicit
|-FunctionDecl 0x222ba84a948 <.//openssl//file_jk/before\crypto\modes\gcm128.c:376:1, line:545:1> line:376:13 used gcm_ghash_4bit 'void (u64 *, const u128 *, const u8 *, size_t)' static
| |-ParmVarDecl 0x222ba84a638 <col:28, col:36> col:32 used Xi 'u64 *':'u64 *'
| |-ParmVarDecl 0x222ba84a700 <col:39, col:59> col:50 used Htable 'const u128 *':'const u128 *'
| |-ParmVarDecl 0x222ba84a778 <line:377:28, col:38> col:38 used inp 'const u8 *'
| |-ParmVarDecl 0x222ba84a7f0 <col:43, col:50> col:50 used len 'size_t':'unsigned long long'
| `-CompoundStmt 0x222ba856b98 <line:378:1, line:545:1>
|   |-DeclStmt 0x222ba84aa98 <line:379:5, col:11>
|   | `-VarDecl 0x222ba84aa30 <col:5, col:10> col:10 used Z 'u128':'u128'
|   |-DeclStmt 0x222ba84ab30 <line:380:5, col:12>
|   | `-VarDecl 0x222ba84aac8 <col:5, col:9> col:9 used cnt 'int'
|   |-DeclStmt 0x222ba84acd0 <line:381:5, col:25>
|   | |-VarDecl 0x222ba84ab58 <col:5, col:12> col:12 used rem 'size_t':'unsigned long long'
|   | |-VarDecl 0x222ba84abd0 <col:5, col:17> col:17 used nlo 'size_t':'unsigned long long'
|   | `-VarDecl 0x222ba84ac48 <col:5, col:22> col:22 used nhi 'size_t':'unsigned long long'
|   |-DeclStmt 0x222ba8520c0 <line:382:5, line:385:24>
|   | |-RecordDecl 0x222ba84ace8 <line:382:11, line:385:5> line:382:11 union definition
|   | | |-FieldDecl 0x222ba84adb8 <line:383:9, col:14> col:14 one 'long'
|   | | `-FieldDecl 0x222ba84ae20 <line:384:9, col:14> col:14 referenced little 'char'
|   | `-VarDecl 0x222ba84aed8 <line:382:5, line:385:23> col:7 used is_endian 'const union (anonymous union at .//openssl//file_jk/before\crypto\modes\gcm128.c:382:11)':'const union (anonymous at .//openssl//file_jk/before\crypto\modes\gcm128.c:382:11)' cinit
|   |   `-InitListExpr 0x222ba852048 <col:19, col:23> 'union (anonymous union at .//openssl//file_jk/before\crypto\modes\gcm128.c:382:11)':'union (anonymous at .//openssl//file_jk/before\crypto\modes\gcm128.c:382:11)' field Field 0x222ba84adb8 'one' 'long'
|   |     `-ImplicitCastExpr 0x222ba852090 <col:21> 'long' <IntegralCast>
|   |       `-IntegerLiteral 0x222ba84af40 <col:21> 'int' 1
|   `-DoStmt 0x222ba856b78 <line:388:5, line:544:34>
|     |-CompoundStmt 0x222ba8569f8 <line:388:8, line:544:5>
|     | |-BinaryOperator 0x222ba852138 <line:389:9, col:15> 'int' '='
|     | | |-DeclRefExpr 0x222ba8520d8 <col:9> 'int' lvalue Var 0x222ba84aac8 'cnt' 'int'
|     | | `-IntegerLiteral 0x222ba852110 <col:15> 'int' 15
|     | |-BinaryOperator 0x222ba852298 <line:390:9, col:34> 'size_t':'unsigned long long' '='
|     | | |-DeclRefExpr 0x222ba852158 <col:9> 'size_t':'unsigned long long' lvalue Var 0x222ba84abd0 'nlo' 'size_t':'unsigned long long'
|     | | `-ImplicitCastExpr 0x222ba852280 <col:15, col:34> 'size_t':'unsigned long long' <IntegralCast>
|     | |   `-ImplicitCastExpr 0x222ba852268 <col:15, col:34> 'u8':'unsigned char' <LValueToRValue>
|     | |     `-ArraySubscriptExpr 0x222ba852248 <col:15, col:34> 'const u8':'const unsigned char' lvalue
|     | |       |-ParenExpr 0x222ba852200 <col:15, col:30> 'const u8 *'
|     | |       | `-CStyleCastExpr 0x222ba8521d8 <col:16, col:28> 'const u8 *' <BitCast>
|     | |       |   `-ImplicitCastExpr 0x222ba8521c0 <col:28> 'u64 *':'u64 *' <LValueToRValue> part_of_explicit_cast
|     | |       |     `-DeclRefExpr 0x222ba852190 <col:28> 'u64 *':'u64 *' lvalue ParmVar 0x222ba84a638 'Xi' 'u64 *':'u64 *'
|     | |       `-IntegerLiteral 0x222ba852220 <col:32> 'int' 15
|     | |-CompoundAssignOperator 0x222ba852388 <line:391:9, col:22> 'size_t':'unsigned long long' '^=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|     | | |-DeclRefExpr 0x222ba8522b8 <col:9> 'size_t':'unsigned long long' lvalue Var 0x222ba84abd0 'nlo' 'size_t':'unsigned long long'
|     | | `-ImplicitCastExpr 0x222ba852370 <col:16, col:22> 'unsigned long long' <IntegralCast>
|     | |   `-ImplicitCastExpr 0x222ba852358 <col:16, col:22> 'u8':'unsigned char' <LValueToRValue>
|     | |     `-ArraySubscriptExpr 0x222ba852338 <col:16, col:22> 'const u8':'const unsigned char' lvalue
|     | |       |-ImplicitCastExpr 0x222ba852320 <col:16> 'const u8 *' <LValueToRValue>
|     | |       | `-DeclRefExpr 0x222ba8522d8 <col:16> 'const u8 *' lvalue ParmVar 0x222ba84a778 'inp' 'const u8 *'
|     | |       `-IntegerLiteral 0x222ba8522f8 <col:20> 'int' 15
|     | |-BinaryOperator 0x222ba852470 <line:392:9, col:22> 'size_t':'unsigned long long' '='
|     | | |-DeclRefExpr 0x222ba8523b8 <col:9> 'size_t':'unsigned long long' lvalue Var 0x222ba84ac48 'nhi' 'size_t':'unsigned long long'
|     | | `-BinaryOperator 0x222ba852450 <col:15, col:22> 'size_t':'unsigned long long' '>>'
|     | |   |-ImplicitCastExpr 0x222ba852438 <col:15> 'size_t':'unsigned long long' <LValueToRValue>
|     | |   | `-DeclRefExpr 0x222ba8523f0 <col:15> 'size_t':'unsigned long long' lvalue Var 0x222ba84abd0 'nlo' 'size_t':'unsigned long long'
|     | |   `-IntegerLiteral 0x222ba852410 <col:22> 'int' 4
|     | |-CompoundAssignOperator 0x222ba8524f0 <line:393:9, col:16> 'size_t':'unsigned long long' '&=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|     | | |-DeclRefExpr 0x222ba852490 <col:9> 'size_t':'unsigned long long' lvalue Var 0x222ba84abd0 'nlo' 'size_t':'unsigned long long'
|     | | `-ImplicitCastExpr 0x222ba8524d8 <col:16> 'unsigned long long' <IntegralCast>
|     | |   `-IntegerLiteral 0x222ba8524b0 <col:16> 'int' 15
|     | |-BinaryOperator 0x222ba852660 <line:395:9, col:28> 'u64':'unsigned long long' '='
|     | | |-MemberExpr 0x222ba852558 <col:9, col:11> 'u64':'unsigned long long' lvalue .hi 0x222ba6bbf50
|     | | | `-DeclRefExpr 0x222ba852520 <col:9> 'u128':'u128' lvalue Var 0x222ba84aa30 'Z' 'u128':'u128'
|     | | `-ImplicitCastExpr 0x222ba852648 <col:16, col:28> 'u64':'unsigned long long' <LValueToRValue>
|     | |   `-MemberExpr 0x222ba852618 <col:16, col:28> 'const u64':'const unsigned long long' lvalue .hi 0x222ba6bbf50
|     | |     `-ArraySubscriptExpr 0x222ba8525f8 <col:16, col:26> 'const u128':'const u128' lvalue
|     | |       |-ImplicitCastExpr 0x222ba8525c8 <col:16> 'const u128 *':'const u128 *' <LValueToRValue>
|     | |       | `-DeclRefExpr 0x222ba852588 <col:16> 'const u128 *':'const u128 *' lvalue ParmVar 0x222ba84a700 'Htable' 'const u128 *':'const u128 *'
|     | |       `-ImplicitCastExpr 0x222ba8525e0 <col:23> 'size_t':'unsigned long long' <LValueToRValue>
|     | |         `-DeclRefExpr 0x222ba8525a8 <col:23> 'size_t':'unsigned long long' lvalue Var 0x222ba84abd0 'nlo' 'size_t':'unsigned long long'
|     | |-BinaryOperator 0x222ba8527a8 <line:396:9, col:28> 'u64':'unsigned long long' '='
|     | | |-MemberExpr 0x222ba8526a0 <col:9, col:11> 'u64':'unsigned long long' lvalue .lo 0x222ba6bbfb8
|     | | | `-DeclRefExpr 0x222ba852680 <col:9> 'u128':'u128' lvalue Var 0x222ba84aa30 'Z' 'u128':'u128'
|     | | `-ImplicitCastExpr 0x222ba852790 <col:16, col:28> 'u64':'unsigned long long' <LValueToRValue>
|     | |   `-MemberExpr 0x222ba852760 <col:16, col:28> 'const u64':'const unsigned long long' lvalue .lo 0x222ba6bbfb8
|     | |     `-ArraySubscriptExpr 0x222ba852740 <col:16, col:26> 'const u128':'const u128' lvalue
|     | |       |-ImplicitCastExpr 0x222ba852710 <col:16> 'const u128 *':'const u128 *' <LValueToRValue>
|     | |       | `-DeclRefExpr 0x222ba8526d0 <col:16> 'const u128 *':'const u128 *' lvalue ParmVar 0x222ba84a700 'Htable' 'const u128 *':'const u128 *'
|     | |       `-ImplicitCastExpr 0x222ba852728 <col:23> 'size_t':'unsigned long long' <LValueToRValue>
|     | |         `-DeclRefExpr 0x222ba8526f0 <col:23> 'size_t':'unsigned long long' lvalue Var 0x222ba84abd0 'nlo' 'size_t':'unsigned long long'
|     | |-WhileStmt 0x222ba856328 <line:398:9, line:428:9>
|     | | |-IntegerLiteral 0x222ba8527c8 <line:398:16> 'int' 1
|     | | `-CompoundStmt 0x222ba856290 <col:19, line:428:9>
|     | |   |-BinaryOperator 0x222ba852928 <line:399:13, col:34> 'size_t':'unsigned long long' '='
|     | |   | |-DeclRefExpr 0x222ba8527f0 <col:13> 'size_t':'unsigned long long' lvalue Var 0x222ba84ab58 'rem' 'size_t':'unsigned long long'
|     | |   | `-BinaryOperator 0x222ba852908 <col:19, col:34> 'unsigned long long' '&'
|     | |   |   |-CStyleCastExpr 0x222ba8528a0 <col:19, col:29> 'size_t':'unsigned long long' <NoOp>
|     | |   |   | `-ImplicitCastExpr 0x222ba852888 <col:27, col:29> 'u64':'unsigned long long' <LValueToRValue> part_of_explicit_cast
|     | |   |   |   `-MemberExpr 0x222ba852848 <col:27, col:29> 'u64':'unsigned long long' lvalue .lo 0x222ba6bbfb8
|     | |   |   |     `-DeclRefExpr 0x222ba852828 <col:27> 'u128':'u128' lvalue Var 0x222ba84aa30 'Z' 'u128':'u128'
|     | |   |   `-ImplicitCastExpr 0x222ba8528f0 <col:34> 'unsigned long long' <IntegralCast>
|     | |   |     `-IntegerLiteral 0x222ba8528c8 <col:34> 'int' 15
|     | |   |-BinaryOperator 0x222ba852b58 <line:400:13, col:45> 'u64':'unsigned long long' '='
|     | |   | |-MemberExpr 0x222ba852968 <col:13, col:15> 'u64':'unsigned long long' lvalue .lo 0x222ba6bbfb8
|     | |   | | `-DeclRefExpr 0x222ba852948 <col:13> 'u128':'u128' lvalue Var 0x222ba84aa30 'Z' 'u128':'u128'
|     | |   | `-BinaryOperator 0x222ba852b38 <col:20, col:45> 'unsigned long long' '|'
|     | |   |   |-ParenExpr 0x222ba852a48 <col:20, col:31> 'u64':'unsigned long long'
|     | |   |   | `-BinaryOperator 0x222ba852a28 <col:21, col:29> 'u64':'unsigned long long' '<<'
|     | |   |   |   |-ImplicitCastExpr 0x222ba852a10 <col:21, col:23> 'u64':'unsigned long long' <LValueToRValue>
|     | |   |   |   | `-MemberExpr 0x222ba8529b8 <col:21, col:23> 'u64':'unsigned long long' lvalue .hi 0x222ba6bbf50
|     | |   |   |   |   `-DeclRefExpr 0x222ba852998 <col:21> 'u128':'u128' lvalue Var 0x222ba84aa30 'Z' 'u128':'u128'
|     | |   |   |   `-IntegerLiteral 0x222ba8529e8 <col:29> 'int' 60
|     | |   |   `-ParenExpr 0x222ba852b18 <col:35, col:45> 'u64':'unsigned long long'
|     | |   |     `-BinaryOperator 0x222ba852af8 <col:36, col:44> 'u64':'unsigned long long' '>>'
|     | |   |       |-ImplicitCastExpr 0x222ba852ae0 <col:36, col:38> 'u64':'unsigned long long' <LValueToRValue>
|     | |   |       | `-MemberExpr 0x222ba852a88 <col:36, col:38> 'u64':'unsigned long long' lvalue .lo 0x222ba6bbfb8
|     | |   |       |   `-DeclRefExpr 0x222ba852a68 <col:36> 'u128':'u128' lvalue Var 0x222ba84aa30 'Z' 'u128':'u128'
|     | |   |       `-IntegerLiteral 0x222ba852ab8 <col:44> 'int' 4
|     | |   |-BinaryOperator 0x222ba852c98 <line:401:13, col:30> 'u64':'unsigned long long' '='
|     | |   | |-MemberExpr 0x222ba852b98 <col:13, col:15> 'u64':'unsigned long long' lvalue .hi 0x222ba6bbf50
|     | |   | | `-DeclRefExpr 0x222ba852b78 <col:13> 'u128':'u128' lvalue Var 0x222ba84aa30 'Z' 'u128':'u128'
|     | |   | `-ParenExpr 0x222ba852c78 <col:20, col:30> 'u64':'unsigned long long'
|     | |   |   `-BinaryOperator 0x222ba852c58 <col:21, col:29> 'u64':'unsigned long long' '>>'
|     | |   |     |-ImplicitCastExpr 0x222ba852c40 <col:21, col:23> 'u64':'unsigned long long' <LValueToRValue>
|     | |   |     | `-MemberExpr 0x222ba852be8 <col:21, col:23> 'u64':'unsigned long long' lvalue .hi 0x222ba6bbf50
|     | |   |     |   `-DeclRefExpr 0x222ba852bc8 <col:21> 'u128':'u128' lvalue Var 0x222ba84aa30 'Z' 'u128':'u128'
|     | |   |     `-IntegerLiteral 0x222ba852c18 <col:29> 'int' 4
|     | |   |-IfStmt 0x222ba84afb0 <line:402:13, line:405:47> has_else
|     | |   | |-BinaryOperator 0x222ba852d28 <line:402:17, col:35> 'int' '=='
|     | |   | | |-UnaryExprOrTypeTraitExpr 0x222ba852cc8 <col:17, col:30> 'unsigned long long' sizeof 'size_t':'unsigned long long'
|     | |   | | `-ImplicitCastExpr 0x222ba852d10 <col:35> 'unsigned long long' <IntegralCast>
|     | |   | |   `-IntegerLiteral 0x222ba852ce8 <col:35> 'int' 8
|     | |   | |-CompoundAssignOperator 0x222ba852e40 <line:403:17, col:37> 'u64':'unsigned long long' '^=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|     | |   | | |-MemberExpr 0x222ba852d68 <col:17, col:19> 'u64':'unsigned long long' lvalue .hi 0x222ba6bbf50
|     | |   | | | `-DeclRefExpr 0x222ba852d48 <col:17> 'u128':'u128' lvalue Var 0x222ba84aa30 'Z' 'u128':'u128'
|     | |   | | `-ImplicitCastExpr 0x222ba852e28 <col:25, col:37> 'size_t':'unsigned long long' <LValueToRValue>
|     | |   | |   `-ArraySubscriptExpr 0x222ba852e08 <col:25, col:37> 'const size_t':'const unsigned long long' lvalue
|     | |   | |     |-ImplicitCastExpr 0x222ba852dd8 <col:25> 'const size_t *' <ArrayToPointerDecay>
|     | |   | |     | `-DeclRefExpr 0x222ba852d98 <col:25> 'const size_t [16]' lvalue Var 0x222ba84d298 'rem_4bit' 'const size_t [16]'
|     | |   | |     `-ImplicitCastExpr 0x222ba852df0 <col:34> 'size_t':'unsigned long long' <LValueToRValue>
|     | |   | |       `-DeclRefExpr 0x222ba852db8 <col:34> 'size_t':'unsigned long long' lvalue Var 0x222ba84ab58 'rem' 'size_t':'unsigned long long'
|     | |   | `-CompoundAssignOperator 0x222ba84af80 <line:405:17, col:47> 'u64':'unsigned long long' '^=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|     | |   |   |-MemberExpr 0x222ba852e90 <col:17, col:19> 'u64':'unsigned long long' lvalue .hi 0x222ba6bbf50
|     | |   |   | `-DeclRefExpr 0x222ba852e70 <col:17> 'u128':'u128' lvalue Var 0x222ba84aa30 'Z' 'u128':'u128'
|     | |   |   `-BinaryOperator 0x222ba852fc8 <col:25, col:47> 'u64':'unsigned long long' '<<'
|     | |   |     |-CStyleCastExpr 0x222ba852f78 <col:25, col:42> 'u64':'unsigned long long' <NoOp>
|     | |   |     | `-ImplicitCastExpr 0x222ba852f60 <col:30, col:42> 'size_t':'unsigned long long' <LValueToRValue> part_of_explicit_cast
|     | |   |     |   `-ArraySubscriptExpr 0x222ba852f30 <col:30, col:42> 'const size_t':'const unsigned long long' lvalue
|     | |   |     |     |-ImplicitCastExpr 0x222ba852f00 <col:30> 'const size_t *' <ArrayToPointerDecay>
|     | |   |     |     | `-DeclRefExpr 0x222ba852ec0 <col:30> 'const size_t [16]' lvalue Var 0x222ba84d298 'rem_4bit' 'const size_t [16]'
|     | |   |     |     `-ImplicitCastExpr 0x222ba852f18 <col:39> 'size_t':'unsigned long long' <LValueToRValue>
|     | |   |     |       `-DeclRefExpr 0x222ba852ee0 <col:39> 'size_t':'unsigned long long' lvalue Var 0x222ba84ab58 'rem' 'size_t':'unsigned long long'
|     | |   |     `-IntegerLiteral 0x222ba852fa0 <col:47> 'int' 32
|     | |   |-CompoundAssignOperator 0x222ba84b100 <line:407:13, col:33> 'u64':'unsigned long long' '^=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|     | |   | |-MemberExpr 0x222ba84aff8 <col:13, col:15> 'u64':'unsigned long long' lvalue .hi 0x222ba6bbf50
|     | |   | | `-DeclRefExpr 0x222ba84afd8 <col:13> 'u128':'u128' lvalue Var 0x222ba84aa30 'Z' 'u128':'u128'
|     | |   | `-ImplicitCastExpr 0x222ba84b0e8 <col:21, col:33> 'u64':'unsigned long long' <LValueToRValue>
|     | |   |   `-MemberExpr 0x222ba84b0b8 <col:21, col:33> 'const u64':'const unsigned long long' lvalue .hi 0x222ba6bbf50
|     | |   |     `-ArraySubscriptExpr 0x222ba84b098 <col:21, col:31> 'const u128':'const u128' lvalue
|     | |   |       |-ImplicitCastExpr 0x222ba84b068 <col:21> 'const u128 *':'const u128 *' <LValueToRValue>
|     | |   |       | `-DeclRefExpr 0x222ba84b028 <col:21> 'const u128 *':'const u128 *' lvalue ParmVar 0x222ba84a700 'Htable' 'const u128 *':'const u128 *'
|     | |   |       `-ImplicitCastExpr 0x222ba84b080 <col:28> 'size_t':'unsigned long long' <LValueToRValue>
|     | |   |         `-DeclRefExpr 0x222ba84b048 <col:28> 'size_t':'unsigned long long' lvalue Var 0x222ba84ac48 'nhi' 'size_t':'unsigned long long'
|     | |   |-CompoundAssignOperator 0x222ba84b258 <line:408:13, col:33> 'u64':'unsigned long long' '^=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|     | |   | |-MemberExpr 0x222ba84b150 <col:13, col:15> 'u64':'unsigned long long' lvalue .lo 0x222ba6bbfb8
|     | |   | | `-DeclRefExpr 0x222ba84b130 <col:13> 'u128':'u128' lvalue Var 0x222ba84aa30 'Z' 'u128':'u128'
|     | |   | `-ImplicitCastExpr 0x222ba84b240 <col:21, col:33> 'u64':'unsigned long long' <LValueToRValue>
|     | |   |   `-MemberExpr 0x222ba84b210 <col:21, col:33> 'const u64':'const unsigned long long' lvalue .lo 0x222ba6bbfb8
|     | |   |     `-ArraySubscriptExpr 0x222ba84b1f0 <col:21, col:31> 'const u128':'const u128' lvalue
|     | |   |       |-ImplicitCastExpr 0x222ba84b1c0 <col:21> 'const u128 *':'const u128 *' <LValueToRValue>
|     | |   |       | `-DeclRefExpr 0x222ba84b180 <col:21> 'const u128 *':'const u128 *' lvalue ParmVar 0x222ba84a700 'Htable' 'const u128 *':'const u128 *'
|     | |   |       `-ImplicitCastExpr 0x222ba84b1d8 <col:28> 'size_t':'unsigned long long' <LValueToRValue>
|     | |   |         `-DeclRefExpr 0x222ba84b1a0 <col:28> 'size_t':'unsigned long long' lvalue Var 0x222ba84ac48 'nhi' 'size_t':'unsigned long long'
|     | |   |-IfStmt 0x222ba84b310 <line:410:13, line:411:17>
|     | |   | |-BinaryOperator 0x222ba84b2e8 <line:410:17, col:25> 'int' '<'
|     | |   | | |-UnaryOperator 0x222ba84b2a8 <col:17, col:19> 'int' prefix '--'
|     | |   | | | `-DeclRefExpr 0x222ba84b288 <col:19> 'int' lvalue Var 0x222ba84aac8 'cnt' 'int'
|     | |   | | `-IntegerLiteral 0x222ba84b2c0 <col:25> 'int' 0
|     | |   | `-BreakStmt 0x222ba84b308 <line:411:17>
|     | |   |-BinaryOperator 0x222ba84b460 <line:413:13, col:39> 'size_t':'unsigned long long' '='
|     | |   | |-DeclRefExpr 0x222ba84b328 <col:13> 'size_t':'unsigned long long' lvalue Var 0x222ba84abd0 'nlo' 'size_t':'unsigned long long'
|     | |   | `-ImplicitCastExpr 0x222ba84b448 <col:19, col:39> 'size_t':'unsigned long long' <IntegralCast>
|     | |   |   `-ImplicitCastExpr 0x222ba84b430 <col:19, col:39> 'u8':'unsigned char' <LValueToRValue>
|     | |   |     `-ArraySubscriptExpr 0x222ba84b410 <col:19, col:39> 'const u8':'const unsigned char' lvalue
|     | |   |       |-ParenExpr 0x222ba84b3b8 <col:19, col:34> 'const u8 *'
|     | |   |       | `-CStyleCastExpr 0x222ba84b390 <col:20, col:32> 'const u8 *' <BitCast>
|     | |   |       |   `-ImplicitCastExpr 0x222ba84b378 <col:32> 'u64 *':'u64 *' <LValueToRValue> part_of_explicit_cast
|     | |   |       |     `-DeclRefExpr 0x222ba84b348 <col:32> 'u64 *':'u64 *' lvalue ParmVar 0x222ba84a638 'Xi' 'u64 *':'u64 *'
|     | |   |       `-ImplicitCastExpr 0x222ba84b3f8 <col:36> 'int' <LValueToRValue>
|     | |   |         `-DeclRefExpr 0x222ba84b3d8 <col:36> 'int' lvalue Var 0x222ba84aac8 'cnt' 'int'
|     | |   |-CompoundAssignOperator 0x222ba84b560 <line:414:13, col:27> 'size_t':'unsigned long long' '^=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|     | |   | |-DeclRefExpr 0x222ba84b480 <col:13> 'size_t':'unsigned long long' lvalue Var 0x222ba84abd0 'nlo' 'size_t':'unsigned long long'
|     | |   | `-ImplicitCastExpr 0x222ba84b548 <col:20, col:27> 'unsigned long long' <IntegralCast>
|     | |   |   `-ImplicitCastExpr 0x222ba84b530 <col:20, col:27> 'u8':'unsigned char' <LValueToRValue>
|     | |   |     `-ArraySubscriptExpr 0x222ba84b510 <col:20, col:27> 'const u8':'const unsigned char' lvalue
|     | |   |       |-ImplicitCastExpr 0x222ba84b4e0 <col:20> 'const u8 *' <LValueToRValue>
|     | |   |       | `-DeclRefExpr 0x222ba84b4a0 <col:20> 'const u8 *' lvalue ParmVar 0x222ba84a778 'inp' 'const u8 *'
|     | |   |       `-ImplicitCastExpr 0x222ba84b4f8 <col:24> 'int' <LValueToRValue>
|     | |   |         `-DeclRefExpr 0x222ba84b4c0 <col:24> 'int' lvalue Var 0x222ba84aac8 'cnt' 'int'
|     | |   |-BinaryOperator 0x222ba84b630 <line:415:13, col:26> 'size_t':'unsigned long long' '='
|     | |   | |-DeclRefExpr 0x222ba84b590 <col:13> 'size_t':'unsigned long long' lvalue Var 0x222ba84ac48 'nhi' 'size_t':'unsigned long long'
|     | |   | `-BinaryOperator 0x222ba84b610 <col:19, col:26> 'size_t':'unsigned long long' '>>'
|     | |   |   |-ImplicitCastExpr 0x222ba84b5f8 <col:19> 'size_t':'unsigned long long' <LValueToRValue>
|     | |   |   | `-DeclRefExpr 0x222ba84b5b0 <col:19> 'size_t':'unsigned long long' lvalue Var 0x222ba84abd0 'nlo' 'size_t':'unsigned long long'
|     | |   |   `-IntegerLiteral 0x222ba84b5d0 <col:26> 'int' 4
|     | |   |-CompoundAssignOperator 0x222ba84b6b0 <line:416:13, col:20> 'size_t':'unsigned long long' '&=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|     | |   | |-DeclRefExpr 0x222ba84b650 <col:13> 'size_t':'unsigned long long' lvalue Var 0x222ba84abd0 'nlo' 'size_t':'unsigned long long'
|     | |   | `-ImplicitCastExpr 0x222ba84b698 <col:20> 'unsigned long long' <IntegralCast>
|     | |   |   `-IntegerLiteral 0x222ba84b670 <col:20> 'int' 15
|     | |   |-BinaryOperator 0x222ba84b800 <line:418:13, col:34> 'size_t':'unsigned long long' '='
|     | |   | |-DeclRefExpr 0x222ba84b6e0 <col:13> 'size_t':'unsigned long long' lvalue Var 0x222ba84ab58 'rem' 'size_t':'unsigned long long'
|     | |   | `-BinaryOperator 0x222ba84b7e0 <col:19, col:34> 'unsigned long long' '&'
|     | |   |   |-CStyleCastExpr 0x222ba84b778 <col:19, col:29> 'size_t':'unsigned long long' <NoOp>
|     | |   |   | `-ImplicitCastExpr 0x222ba84b760 <col:27, col:29> 'u64':'unsigned long long' <LValueToRValue> part_of_explicit_cast
|     | |   |   |   `-MemberExpr 0x222ba84b720 <col:27, col:29> 'u64':'unsigned long long' lvalue .lo 0x222ba6bbfb8
|     | |   |   |     `-DeclRefExpr 0x222ba84b700 <col:27> 'u128':'u128' lvalue Var 0x222ba84aa30 'Z' 'u128':'u128'
|     | |   |   `-ImplicitCastExpr 0x222ba84b7c8 <col:34> 'unsigned long long' <IntegralCast>
|     | |   |     `-IntegerLiteral 0x222ba84b7a0 <col:34> 'int' 15
|     | |   |-BinaryOperator 0x222ba84ba30 <line:419:13, col:45> 'u64':'unsigned long long' '='
|     | |   | |-MemberExpr 0x222ba84b840 <col:13, col:15> 'u64':'unsigned long long' lvalue .lo 0x222ba6bbfb8
|     | |   | | `-DeclRefExpr 0x222ba84b820 <col:13> 'u128':'u128' lvalue Var 0x222ba84aa30 'Z' 'u128':'u128'
|     | |   | `-BinaryOperator 0x222ba84ba10 <col:20, col:45> 'unsigned long long' '|'
|     | |   |   |-ParenExpr 0x222ba84b920 <col:20, col:31> 'u64':'unsigned long long'
|     | |   |   | `-BinaryOperator 0x222ba84b900 <col:21, col:29> 'u64':'unsigned long long' '<<'
|     | |   |   |   |-ImplicitCastExpr 0x222ba84b8e8 <col:21, col:23> 'u64':'unsigned long long' <LValueToRValue>
|     | |   |   |   | `-MemberExpr 0x222ba84b890 <col:21, col:23> 'u64':'unsigned long long' lvalue .hi 0x222ba6bbf50
|     | |   |   |   |   `-DeclRefExpr 0x222ba84b870 <col:21> 'u128':'u128' lvalue Var 0x222ba84aa30 'Z' 'u128':'u128'
|     | |   |   |   `-IntegerLiteral 0x222ba84b8c0 <col:29> 'int' 60
|     | |   |   `-ParenExpr 0x222ba84b9f0 <col:35, col:45> 'u64':'unsigned long long'
|     | |   |     `-BinaryOperator 0x222ba84b9d0 <col:36, col:44> 'u64':'unsigned long long' '>>'
|     | |   |       |-ImplicitCastExpr 0x222ba84b9b8 <col:36, col:38> 'u64':'unsigned long long' <LValueToRValue>
|     | |   |       | `-MemberExpr 0x222ba84b960 <col:36, col:38> 'u64':'unsigned long long' lvalue .lo 0x222ba6bbfb8
|     | |   |       |   `-DeclRefExpr 0x222ba84b940 <col:36> 'u128':'u128' lvalue Var 0x222ba84aa30 'Z' 'u128':'u128'
|     | |   |       `-IntegerLiteral 0x222ba84b990 <col:44> 'int' 4
|     | |   |-BinaryOperator 0x222ba84bb70 <line:420:13, col:30> 'u64':'unsigned long long' '='
|     | |   | |-MemberExpr 0x222ba84ba70 <col:13, col:15> 'u64':'unsigned long long' lvalue .hi 0x222ba6bbf50
|     | |   | | `-DeclRefExpr 0x222ba84ba50 <col:13> 'u128':'u128' lvalue Var 0x222ba84aa30 'Z' 'u128':'u128'
|     | |   | `-ParenExpr 0x222ba84bb50 <col:20, col:30> 'u64':'unsigned long long'
|     | |   |   `-BinaryOperator 0x222ba84bb30 <col:21, col:29> 'u64':'unsigned long long' '>>'
|     | |   |     |-ImplicitCastExpr 0x222ba84bb18 <col:21, col:23> 'u64':'unsigned long long' <LValueToRValue>
|     | |   |     | `-MemberExpr 0x222ba84bac0 <col:21, col:23> 'u64':'unsigned long long' lvalue .hi 0x222ba6bbf50
|     | |   |     |   `-DeclRefExpr 0x222ba84baa0 <col:21> 'u128':'u128' lvalue Var 0x222ba84aa30 'Z' 'u128':'u128'
|     | |   |     `-IntegerLiteral 0x222ba84baf0 <col:29> 'int' 4
|     | |   |-IfStmt 0x222ba84bef0 <line:421:13, line:424:47> has_else
|     | |   | |-BinaryOperator 0x222ba84bc00 <line:421:17, col:35> 'int' '=='
|     | |   | | |-UnaryExprOrTypeTraitExpr 0x222ba84bba0 <col:17, col:30> 'unsigned long long' sizeof 'size_t':'unsigned long long'
|     | |   | | `-ImplicitCastExpr 0x222ba84bbe8 <col:35> 'unsigned long long' <IntegralCast>
|     | |   | |   `-IntegerLiteral 0x222ba84bbc0 <col:35> 'int' 8
|     | |   | |-CompoundAssignOperator 0x222ba84bd18 <line:422:17, col:37> 'u64':'unsigned long long' '^=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|     | |   | | |-MemberExpr 0x222ba84bc40 <col:17, col:19> 'u64':'unsigned long long' lvalue .hi 0x222ba6bbf50
|     | |   | | | `-DeclRefExpr 0x222ba84bc20 <col:17> 'u128':'u128' lvalue Var 0x222ba84aa30 'Z' 'u128':'u128'
|     | |   | | `-ImplicitCastExpr 0x222ba84bd00 <col:25, col:37> 'size_t':'unsigned long long' <LValueToRValue>
|     | |   | |   `-ArraySubscriptExpr 0x222ba84bce0 <col:25, col:37> 'const size_t':'const unsigned long long' lvalue
|     | |   | |     |-ImplicitCastExpr 0x222ba84bcb0 <col:25> 'const size_t *' <ArrayToPointerDecay>
|     | |   | |     | `-DeclRefExpr 0x222ba84bc70 <col:25> 'const size_t [16]' lvalue Var 0x222ba84d298 'rem_4bit' 'const size_t [16]'
|     | |   | |     `-ImplicitCastExpr 0x222ba84bcc8 <col:34> 'size_t':'unsigned long long' <LValueToRValue>
|     | |   | |       `-DeclRefExpr 0x222ba84bc90 <col:34> 'size_t':'unsigned long long' lvalue Var 0x222ba84ab58 'rem' 'size_t':'unsigned long long'
|     | |   | `-CompoundAssignOperator 0x222ba84bec0 <line:424:17, col:47> 'u64':'unsigned long long' '^=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|     | |   |   |-MemberExpr 0x222ba84bd68 <col:17, col:19> 'u64':'unsigned long long' lvalue .hi 0x222ba6bbf50
|     | |   |   | `-DeclRefExpr 0x222ba84bd48 <col:17> 'u128':'u128' lvalue Var 0x222ba84aa30 'Z' 'u128':'u128'
|     | |   |   `-BinaryOperator 0x222ba84bea0 <col:25, col:47> 'u64':'unsigned long long' '<<'
|     | |   |     |-CStyleCastExpr 0x222ba84be50 <col:25, col:42> 'u64':'unsigned long long' <NoOp>
|     | |   |     | `-ImplicitCastExpr 0x222ba84be38 <col:30, col:42> 'size_t':'unsigned long long' <LValueToRValue> part_of_explicit_cast
|     | |   |     |   `-ArraySubscriptExpr 0x222ba84be08 <col:30, col:42> 'const size_t':'const unsigned long long' lvalue
|     | |   |     |     |-ImplicitCastExpr 0x222ba84bdd8 <col:30> 'const size_t *' <ArrayToPointerDecay>
|     | |   |     |     | `-DeclRefExpr 0x222ba84bd98 <col:30> 'const size_t [16]' lvalue Var 0x222ba84d298 'rem_4bit' 'const size_t [16]'
|     | |   |     |     `-ImplicitCastExpr 0x222ba84bdf0 <col:39> 'size_t':'unsigned long long' <LValueToRValue>
|     | |   |     |       `-DeclRefExpr 0x222ba84bdb8 <col:39> 'size_t':'unsigned long long' lvalue Var 0x222ba84ab58 'rem' 'size_t':'unsigned long long'
|     | |   |     `-IntegerLiteral 0x222ba84be78 <col:47> 'int' 32
|     | |   |-CompoundAssignOperator 0x222ba856108 <line:426:13, col:33> 'u64':'unsigned long long' '^=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|     | |   | |-MemberExpr 0x222ba84bf38 <col:13, col:15> 'u64':'unsigned long long' lvalue .hi 0x222ba6bbf50
|     | |   | | `-DeclRefExpr 0x222ba84bf18 <col:13> 'u128':'u128' lvalue Var 0x222ba84aa30 'Z' 'u128':'u128'
|     | |   | `-ImplicitCastExpr 0x222ba8560f0 <col:21, col:33> 'u64':'unsigned long long' <LValueToRValue>
|     | |   |   `-MemberExpr 0x222ba8560c0 <col:21, col:33> 'const u64':'const unsigned long long' lvalue .hi 0x222ba6bbf50
|     | |   |     `-ArraySubscriptExpr 0x222ba8560a0 <col:21, col:31> 'const u128':'const u128' lvalue
|     | |   |       |-ImplicitCastExpr 0x222ba856070 <col:21> 'const u128 *':'const u128 *' <LValueToRValue>
|     | |   |       | `-DeclRefExpr 0x222ba856030 <col:21> 'const u128 *':'const u128 *' lvalue ParmVar 0x222ba84a700 'Htable' 'const u128 *':'const u128 *'
|     | |   |       `-ImplicitCastExpr 0x222ba856088 <col:28> 'size_t':'unsigned long long' <LValueToRValue>
|     | |   |         `-DeclRefExpr 0x222ba856050 <col:28> 'size_t':'unsigned long long' lvalue Var 0x222ba84abd0 'nlo' 'size_t':'unsigned long long'
|     | |   `-CompoundAssignOperator 0x222ba856260 <line:427:13, col:33> 'u64':'unsigned long long' '^=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|     | |     |-MemberExpr 0x222ba856158 <col:13, col:15> 'u64':'unsigned long long' lvalue .lo 0x222ba6bbfb8
|     | |     | `-DeclRefExpr 0x222ba856138 <col:13> 'u128':'u128' lvalue Var 0x222ba84aa30 'Z' 'u128':'u128'
|     | |     `-ImplicitCastExpr 0x222ba856248 <col:21, col:33> 'u64':'unsigned long long' <LValueToRValue>
|     | |       `-MemberExpr 0x222ba856218 <col:21, col:33> 'const u64':'const unsigned long long' lvalue .lo 0x222ba6bbfb8
|     | |         `-ArraySubscriptExpr 0x222ba8561f8 <col:21, col:31> 'const u128':'const u128' lvalue
|     | |           |-ImplicitCastExpr 0x222ba8561c8 <col:21> 'const u128 *':'const u128 *' <LValueToRValue>
|     | |           | `-DeclRefExpr 0x222ba856188 <col:21> 'const u128 *':'const u128 *' lvalue ParmVar 0x222ba84a700 'Htable' 'const u128 *':'const u128 *'
|     | |           `-ImplicitCastExpr 0x222ba8561e0 <col:28> 'size_t':'unsigned long long' <LValueToRValue>
|     | |             `-DeclRefExpr 0x222ba8561a8 <col:28> 'size_t':'unsigned long long' lvalue Var 0x222ba84abd0 'nlo' 'size_t':'unsigned long long'
|     | `-IfStmt 0x222ba8569d0 <line:524:9, line:543:9> has_else
|     |   |-ImplicitCastExpr 0x222ba8563a8 <line:524:13, col:23> 'char' <LValueToRValue>
|     |   | `-MemberExpr 0x222ba856378 <col:13, col:23> 'const char' lvalue .little 0x222ba84ae20
|     |   |   `-DeclRefExpr 0x222ba856340 <col:13> 'const union (anonymous union at .//openssl//file_jk/before\crypto\modes\gcm128.c:382:11)':'const union (anonymous at .//openssl//file_jk/before\crypto\modes\gcm128.c:382:11)' lvalue Var 0x222ba84aed8 'is_endian' 'const union (anonymous union at .//openssl//file_jk/before\crypto\modes\gcm128.c:382:11)':'const union (anonymous at .//openssl//file_jk/before\crypto\modes\gcm128.c:382:11)'
|     |   |-CompoundStmt 0x222ba856780 <col:31, line:540:9>
|     |   | |-BinaryOperator 0x222ba856580 <line:526:13, .//openssl//file_jk/before\crypto\modes/modes_lcl.h:77:50> 'u64':'unsigned long long' '='
|     |   | | |-ArraySubscriptExpr 0x222ba856420 <.//openssl//file_jk/before\crypto\modes\gcm128.c:526:13, col:17> 'u64':'unsigned long long' lvalue
|     |   | | | |-ImplicitCastExpr 0x222ba856408 <col:13> 'u64 *':'u64 *' <LValueToRValue>
|     |   | | | | `-DeclRefExpr 0x222ba8563c0 <col:13> 'u64 *':'u64 *' lvalue ParmVar 0x222ba84a638 'Xi' 'u64 *':'u64 *'
|     |   | | | `-IntegerLiteral 0x222ba8563e0 <col:16> 'int' 0
|     |   | | `-CallExpr 0x222ba856558 <.//openssl//file_jk/before\crypto\modes/modes_lcl.h:77:25, col:50> 'unsigned long long'
|     |   | |   |-ImplicitCastExpr 0x222ba856540 <col:25> 'unsigned long long (*)(unsigned long long)' <FunctionToPointerDecay>
|     |   | |   | `-DeclRefExpr 0x222ba856440 <col:25> 'unsigned long long (unsigned long long)' Function 0x222ba851e40 '_byteswap_uint64' 'unsigned long long (unsigned long long)'
|     |   | |   `-CStyleCastExpr 0x222ba856518 <col:42, col:49> 'u64':'unsigned long long' <NoOp>
|     |   | |     `-ImplicitCastExpr 0x222ba856500 <col:47, col:49> 'u64':'unsigned long long' <LValueToRValue> part_of_explicit_cast
|     |   | |       `-ParenExpr 0x222ba8564e0 <col:47, col:49> 'u64':'unsigned long long' lvalue
|     |   | |         `-MemberExpr 0x222ba856480 <.//openssl//file_jk/before\crypto\modes\gcm128.c:526:28, col:30> 'u64':'unsigned long long' lvalue .hi 0x222ba6bbf50
|     |   | |           `-DeclRefExpr 0x222ba856460 <col:28> 'u128':'u128' lvalue Var 0x222ba84aa30 'Z' 'u128':'u128'
|     |   | `-BinaryOperator 0x222ba856760 <line:527:13, .//openssl//file_jk/before\crypto\modes/modes_lcl.h:77:50> 'u64':'unsigned long long' '='
|     |   |   |-ArraySubscriptExpr 0x222ba856600 <.//openssl//file_jk/before\crypto\modes\gcm128.c:527:13, col:17> 'u64':'unsigned long long' lvalue
|     |   |   | |-ImplicitCastExpr 0x222ba8565e8 <col:13> 'u64 *':'u64 *' <LValueToRValue>
|     |   |   | | `-DeclRefExpr 0x222ba8565a0 <col:13> 'u64 *':'u64 *' lvalue ParmVar 0x222ba84a638 'Xi' 'u64 *':'u64 *'
|     |   |   | `-IntegerLiteral 0x222ba8565c0 <col:16> 'int' 1
|     |   |   `-CallExpr 0x222ba856738 <.//openssl//file_jk/before\crypto\modes/modes_lcl.h:77:25, col:50> 'unsigned long long'
|     |   |     |-ImplicitCastExpr 0x222ba856720 <col:25> 'unsigned long long (*)(unsigned long long)' <FunctionToPointerDecay>
|     |   |     | `-DeclRefExpr 0x222ba856620 <col:25> 'unsigned long long (unsigned long long)' Function 0x222ba851e40 '_byteswap_uint64' 'unsigned long long (unsigned long long)'
|     |   |     `-CStyleCastExpr 0x222ba8566f8 <col:42, col:49> 'u64':'unsigned long long' <NoOp>
|     |   |       `-ImplicitCastExpr 0x222ba8566e0 <col:47, col:49> 'u64':'unsigned long long' <LValueToRValue> part_of_explicit_cast
|     |   |         `-ParenExpr 0x222ba8566c0 <col:47, col:49> 'u64':'unsigned long long' lvalue
|     |   |           `-MemberExpr 0x222ba856660 <.//openssl//file_jk/before\crypto\modes\gcm128.c:527:28, col:30> 'u64':'unsigned long long' lvalue .lo 0x222ba6bbfb8
|     |   |             `-DeclRefExpr 0x222ba856640 <col:28> 'u128':'u128' lvalue Var 0x222ba84aa30 'Z' 'u128':'u128'
|     |   `-CompoundStmt 0x222ba8569b0 <line:540:16, line:543:9>
|     |     |-BinaryOperator 0x222ba856888 <line:541:13, col:23> 'u64':'unsigned long long' '='
|     |     | |-ArraySubscriptExpr 0x222ba856800 <col:13, col:17> 'u64':'unsigned long long' lvalue
|     |     | | |-ImplicitCastExpr 0x222ba8567e8 <col:13> 'u64 *':'u64 *' <LValueToRValue>
|     |     | | | `-DeclRefExpr 0x222ba8567a0 <col:13> 'u64 *':'u64 *' lvalue ParmVar 0x222ba84a638 'Xi' 'u64 *':'u64 *'
|     |     | | `-IntegerLiteral 0x222ba8567c0 <col:16> 'int' 0
|     |     | `-ImplicitCastExpr 0x222ba856870 <col:21, col:23> 'u64':'unsigned long long' <LValueToRValue>
|     |     |   `-MemberExpr 0x222ba856840 <col:21, col:23> 'u64':'unsigned long long' lvalue .hi 0x222ba6bbf50
|     |     |     `-DeclRefExpr 0x222ba856820 <col:21> 'u128':'u128' lvalue Var 0x222ba84aa30 'Z' 'u128':'u128'
|     |     `-BinaryOperator 0x222ba856990 <line:542:13, col:23> 'u64':'unsigned long long' '='
|     |       |-ArraySubscriptExpr 0x222ba856908 <col:13, col:17> 'u64':'unsigned long long' lvalue
|     |       | |-ImplicitCastExpr 0x222ba8568f0 <col:13> 'u64 *':'u64 *' <LValueToRValue>
|     |       | | `-DeclRefExpr 0x222ba8568a8 <col:13> 'u64 *':'u64 *' lvalue ParmVar 0x222ba84a638 'Xi' 'u64 *':'u64 *'
|     |       | `-IntegerLiteral 0x222ba8568c8 <col:16> 'int' 1
|     |       `-ImplicitCastExpr 0x222ba856978 <col:21, col:23> 'u64':'unsigned long long' <LValueToRValue>
|     |         `-MemberExpr 0x222ba856948 <col:21, col:23> 'u64':'unsigned long long' lvalue .lo 0x222ba6bbfb8
|     |           `-DeclRefExpr 0x222ba856928 <col:21> 'u128':'u128' lvalue Var 0x222ba84aa30 'Z' 'u128':'u128'
|     `-BinaryOperator 0x222ba856b58 <line:544:14, col:32> 'size_t':'unsigned long long' ','
|       |-CompoundAssignOperator 0x222ba856a98 <col:14, col:21> 'const u8 *' '+=' ComputeLHSTy='const u8 *' ComputeResultTy='const u8 *'
|       | |-DeclRefExpr 0x222ba856a50 <col:14> 'const u8 *' lvalue ParmVar 0x222ba84a778 'inp' 'const u8 *'
|       | `-IntegerLiteral 0x222ba856a70 <col:21> 'int' 16
|       `-CompoundAssignOperator 0x222ba856b28 <col:25, col:32> 'size_t':'unsigned long long' '-=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|         |-DeclRefExpr 0x222ba856ac8 <col:25> 'size_t':'unsigned long long' lvalue ParmVar 0x222ba84a7f0 'len' 'size_t':'unsigned long long'
|         `-ImplicitCastExpr 0x222ba856b10 <col:32> 'unsigned long long' <IntegralCast>
|           `-IntegerLiteral 0x222ba856ae8 <col:32> 'int' 16
|-FunctionDecl 0x222ba856dc8 <line:713:1, line:825:1> line:713:6 invalid CRYPTO_gcm128_init 'void (int *, void *, int)'
| |-ParmVarDecl 0x222ba856be8 <col:25, col:41> col:41 invalid ctx 'int *'
| |-ParmVarDecl 0x222ba856c68 <col:46, col:52> col:52 used key 'void *'
| |-ParmVarDecl 0x222ba856ce8 <col:57, col:68> col:68 invalid block 'int'
| `-CompoundStmt 0x222ba859478 <line:714:1, line:825:1>
|   |-DeclStmt 0x222ba859218 <line:715:5, line:718:24>
|   | |-RecordDecl 0x222ba856e98 <line:715:11, line:718:5> line:715:11 union definition
|   | | |-FieldDecl 0x222ba856f68 <line:716:9, col:14> col:14 one 'long'
|   | | `-FieldDecl 0x222ba856fd0 <line:717:9, col:14> col:14 referenced little 'char'
|   | `-VarDecl 0x222ba8590b8 <line:715:5, line:718:23> col:7 used is_endian 'const union (anonymous union at .//openssl//file_jk/before\crypto\modes\gcm128.c:715:11)':'const union (anonymous at .//openssl//file_jk/before\crypto\modes\gcm128.c:715:11)' cinit
|   |   `-InitListExpr 0x222ba8591a0 <col:19, col:23> 'union (anonymous union at .//openssl//file_jk/before\crypto\modes\gcm128.c:715:11)':'union (anonymous at .//openssl//file_jk/before\crypto\modes\gcm128.c:715:11)' field Field 0x222ba856f68 'one' 'long'
|   |     `-ImplicitCastExpr 0x222ba8591e8 <col:21> 'long' <IntegralCast>
|   |       `-IntegerLiteral 0x222ba859120 <col:21> 'int' 1
|   `-IfStmt 0x222ba859440 <line:726:5, line:739:5>
|     |-ImplicitCastExpr 0x222ba859338 <line:726:9, col:19> 'char' <LValueToRValue>
|     | `-MemberExpr 0x222ba859308 <col:9, col:19> 'const char' lvalue .little 0x222ba856fd0
|     |   `-DeclRefExpr 0x222ba8592d0 <col:9> 'const union (anonymous union at .//openssl//file_jk/before\crypto\modes\gcm128.c:715:11)':'const union (anonymous at .//openssl//file_jk/before\crypto\modes\gcm128.c:715:11)' lvalue Var 0x222ba8590b8 'is_endian' 'const union (anonymous union at .//openssl//file_jk/before\crypto\modes\gcm128.c:715:11)':'const union (anonymous at .//openssl//file_jk/before\crypto\modes\gcm128.c:715:11)'
|     `-CompoundStmt 0x222ba859430 <col:27, line:739:5>
|-FunctionDecl 0x222ba8596c8 <line:827:1, line:907:1> line:827:6 invalid CRYPTO_gcm128_setiv 'void (int *, const unsigned char *, size_t)'
| |-ParmVarDecl 0x222ba8594b0 <col:26, col:42> col:42 invalid ctx 'int *'
| |-ParmVarDecl 0x222ba859530 <col:47, col:68> col:68 used iv 'const unsigned char *'
| |-ParmVarDecl 0x222ba8595a8 <line:828:26, col:33> col:33 used len 'size_t':'unsigned long long'
| `-CompoundStmt 0x222ba8530a0 <line:829:1, line:907:1>
|   |-DeclStmt 0x222ba859ae8 <line:830:5, line:833:24>
|   | |-RecordDecl 0x222ba859798 <line:830:11, line:833:5> line:830:11 union definition
|   | | |-FieldDecl 0x222ba859868 <line:831:9, col:14> col:14 one 'long'
|   | | `-FieldDecl 0x222ba8598d0 <line:832:9, col:14> col:14 referenced little 'char'
|   | `-VarDecl 0x222ba859988 <line:830:5, line:833:23> col:7 used is_endian 'const union (anonymous union at .//openssl//file_jk/before\crypto\modes\gcm128.c:830:11)':'const union (anonymous at .//openssl//file_jk/before\crypto\modes\gcm128.c:830:11)' cinit
|   |   `-InitListExpr 0x222ba859a70 <col:19, col:23> 'union (anonymous union at .//openssl//file_jk/before\crypto\modes\gcm128.c:830:11)':'union (anonymous at .//openssl//file_jk/before\crypto\modes\gcm128.c:830:11)' field Field 0x222ba859868 'one' 'long'
|   |     `-ImplicitCastExpr 0x222ba859ab8 <col:21> 'long' <IntegralCast>
|   |       `-IntegerLiteral 0x222ba8599f0 <col:21> 'int' 1
|   |-DeclStmt 0x222ba859b80 <line:834:5, col:21>
|   | `-VarDecl 0x222ba859b18 <col:5, col:18> col:18 used ctr 'unsigned int'
|   |-IfStmt 0x222ba857e48 <line:848:5, line:895:5> has_else
|   | |-BinaryOperator 0x222ba859e58 <line:848:9, col:16> 'int' '=='
|   | | |-ImplicitCastExpr 0x222ba859e28 <col:9> 'size_t':'unsigned long long' <LValueToRValue>
|   | | | `-DeclRefExpr 0x222ba859dc8 <col:9> 'size_t':'unsigned long long' lvalue ParmVar 0x222ba8595a8 'len' 'size_t':'unsigned long long'
|   | | `-ImplicitCastExpr 0x222ba859e40 <col:16> 'unsigned long long' <IntegralCast>
|   | |   `-IntegerLiteral 0x222ba859e00 <col:16> 'int' 12
|   | |-CompoundStmt 0x222ba859fe0 <col:20, line:852:5>
|   | | `-BinaryOperator 0x222ba859fc0 <line:851:9, col:15> 'unsigned int' '='
|   | |   |-DeclRefExpr 0x222ba859f48 <col:9> 'unsigned int' lvalue Var 0x222ba859b18 'ctr' 'unsigned int'
|   | |   `-ImplicitCastExpr 0x222ba859fa8 <col:15> 'unsigned int' <IntegralCast>
|   | |     `-IntegerLiteral 0x222ba859f80 <col:15> 'int' 1
|   | `-CompoundStmt 0x222ba857e08 <line:852:12, line:895:5>
|   |   |-DeclStmt 0x222ba8570a8 <line:853:9, col:17>
|   |   | `-VarDecl 0x222ba857040 <col:9, col:16> col:16 used i 'size_t':'unsigned long long'
|   |   |-DeclStmt 0x222ba857170 <line:854:9, col:23>
|   |   | `-VarDecl 0x222ba8570d0 <col:9, col:20> col:13 used len0 'u64':'unsigned long long' cinit
|   |   |   `-ImplicitCastExpr 0x222ba857158 <col:20> 'size_t':'unsigned long long' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x222ba857138 <col:20> 'size_t':'unsigned long long' lvalue ParmVar 0x222ba8595a8 'len' 'size_t':'unsigned long long'
|   |   |-WhileStmt 0x222ba857580 <line:856:9, line:862:9>
|   |   | |-BinaryOperator 0x222ba857200 <line:856:16, col:23> 'int' '>='
|   |   | | |-ImplicitCastExpr 0x222ba8571d0 <col:16> 'size_t':'unsigned long long' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x222ba857188 <col:16> 'size_t':'unsigned long long' lvalue ParmVar 0x222ba8595a8 'len' 'size_t':'unsigned long long'
|   |   | | `-ImplicitCastExpr 0x222ba8571e8 <col:23> 'unsigned long long' <IntegralCast>
|   |   | |   `-IntegerLiteral 0x222ba8571a8 <col:23> 'int' 16
|   |   | `-CompoundStmt 0x222ba857560 <col:27, line:862:9>
|   |   |   |-CompoundAssignOperator 0x222ba8574a0 <line:860:13, col:19> 'const unsigned char *' '+=' ComputeLHSTy='const unsigned char *' ComputeResultTy='const unsigned char *'
|   |   |   | |-DeclRefExpr 0x222ba857458 <col:13> 'const unsigned char *' lvalue ParmVar 0x222ba859530 'iv' 'const unsigned char *'
|   |   |   | `-IntegerLiteral 0x222ba857478 <col:19> 'int' 16
|   |   |   `-CompoundAssignOperator 0x222ba857530 <line:861:13, col:20> 'size_t':'unsigned long long' '-=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |   |     |-DeclRefExpr 0x222ba8574d0 <col:13> 'size_t':'unsigned long long' lvalue ParmVar 0x222ba8595a8 'len' 'size_t':'unsigned long long'
|   |   |     `-ImplicitCastExpr 0x222ba857518 <col:20> 'unsigned long long' <IntegralCast>
|   |   |       `-IntegerLiteral 0x222ba8574f0 <col:20> 'int' 16
|   |   |-IfStmt 0x222ba8577f8 <line:863:9, line:867:9>
|   |   | |-ImplicitCastExpr 0x222ba8575b8 <line:863:13> 'size_t':'unsigned long long' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x222ba857598 <col:13> 'size_t':'unsigned long long' lvalue ParmVar 0x222ba8595a8 'len' 'size_t':'unsigned long long'
|   |   | `-CompoundStmt 0x222ba8577e8 <col:18, line:867:9>
|   |   |-CompoundAssignOperator 0x222ba857888 <line:868:9, col:18> 'u64':'unsigned long long' '<<=' ComputeLHSTy='u64':'unsigned long long' ComputeResultTy='u64':'unsigned long long'
|   |   | |-DeclRefExpr 0x222ba857810 <col:9> 'u64':'unsigned long long' lvalue Var 0x222ba8570d0 'len0' 'u64':'unsigned long long'
|   |   | `-IntegerLiteral 0x222ba857848 <col:18> 'int' 3
|   |   `-IfStmt 0x222ba857ad0 <line:869:9, line:883:13> has_else
|   |     |-ImplicitCastExpr 0x222ba857920 <line:869:13, col:23> 'char' <LValueToRValue>
|   |     | `-MemberExpr 0x222ba8578f0 <col:13, col:23> 'const char' lvalue .little 0x222ba8598d0
|   |     |   `-DeclRefExpr 0x222ba8578b8 <col:13> 'const union (anonymous union at .//openssl//file_jk/before\crypto\modes\gcm128.c:830:11)':'const union (anonymous at .//openssl//file_jk/before\crypto\modes\gcm128.c:830:11)' lvalue Var 0x222ba859988 'is_endian' 'const union (anonymous union at .//openssl//file_jk/before\crypto\modes\gcm128.c:830:11)':'const union (anonymous at .//openssl//file_jk/before\crypto\modes\gcm128.c:830:11)'
|   |     |-CompoundStmt 0x222ba857a70 <col:31, line:882:9>
|   |     `-NullStmt 0x222ba857ac8 <line:883:13>
|   `-UnaryOperator 0x222ba857e90 <line:898:5, col:7> 'unsigned int' prefix '++'
|     `-DeclRefExpr 0x222ba857e70 <col:7> 'unsigned int' lvalue Var 0x222ba859b18 'ctr' 'unsigned int'
|-FunctionDecl 0x222ba857bd0 <.//openssl//file_jk/before\crypto\modes/modes_lcl.h:78:25> col:25 implicit used _byteswap_ulong 'unsigned long (unsigned long)' extern
| |-ParmVarDecl 0x222ba857c70 <<invalid sloc>> <invalid sloc> 'unsigned long'
| |-NoThrowAttr 0x222ba857ce0 <col:25> Implicit
| `-ConstAttr 0x222ba857d38 <col:25> Implicit
|-FunctionDecl 0x222ba853310 <.//openssl//file_jk/before\crypto\modes\gcm128.c:909:1, line:968:1> line:909:5 invalid CRYPTO_gcm128_aad 'int (int *, const unsigned char *, size_t)'
| |-ParmVarDecl 0x222ba8530e8 <col:23, col:39> col:39 invalid ctx 'int *'
| |-ParmVarDecl 0x222ba853168 <col:44, col:65> col:65 used aad 'const unsigned char *'
| |-ParmVarDecl 0x222ba8531e0 <line:910:23, col:30> col:30 used len 'size_t':'unsigned long long'
| `-CompoundStmt 0x222ba85a658 <line:911:1, line:968:1>
|   |-DeclStmt 0x222ba853458 <line:912:5, col:13>
|   | `-VarDecl 0x222ba8533f0 <col:5, col:12> col:12 used i 'size_t':'unsigned long long'
|   |-DeclStmt 0x222ba8534f0 <line:913:5, col:19>
|   | `-VarDecl 0x222ba853488 <col:5, col:18> col:18 used n 'unsigned int'
|   |-DeclStmt 0x222ba8535a8 <line:914:5, col:29>
|   | `-VarDecl 0x222ba853518 <col:5, col:9> col:9 used alen 'u64':'unsigned long long'
|   |-IfStmt 0x222ba853650 <line:923:5, line:924:17>
|   | |-OpaqueValueExpr 0x222ba853638 <<invalid sloc>> '_Bool'
|   | `-ReturnStmt 0x222ba853628 <col:9, col:17>
|   |   `-UnaryOperator 0x222ba853610 <col:16, col:17> 'int' prefix '-'
|   |     `-IntegerLiteral 0x222ba8535e8 <col:17> 'int' 2
|   |-CompoundAssignOperator 0x222ba8536f0 <line:926:5, col:13> 'u64':'unsigned long long' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-DeclRefExpr 0x222ba853668 <col:5> 'u64':'unsigned long long' lvalue Var 0x222ba853518 'alen' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x222ba8536d8 <col:13> 'size_t':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x222ba8536a0 <col:13> 'size_t':'unsigned long long' lvalue ParmVar 0x222ba8531e0 'len' 'size_t':'unsigned long long'
|   |-IfStmt 0x222ba853a08 <line:927:5, line:928:17>
|   | |-BinaryOperator 0x222ba853998 <line:927:9, col:65> 'int' '||'
|   | | |-BinaryOperator 0x222ba8537e8 <col:9, col:29> 'int' '>'
|   | | | |-ImplicitCastExpr 0x222ba8537d0 <col:9> 'u64':'unsigned long long' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x222ba853720 <col:9> 'u64':'unsigned long long' lvalue Var 0x222ba853518 'alen' 'u64':'unsigned long long'
|   | | | `-ParenExpr 0x222ba8537b0 <col:16, col:29> 'unsigned long long'
|   | | |   `-BinaryOperator 0x222ba853790 <<scratch space>:297:1, .//openssl//file_jk/before\crypto\modes\gcm128.c:927:27> 'unsigned long long' '<<'
|   | | |     |-IntegerLiteral 0x222ba853740 <<scratch space>:297:1> 'unsigned long long' 1
|   | | |     `-IntegerLiteral 0x222ba853768 <.//openssl//file_jk/before\crypto\modes\gcm128.c:927:27> 'int' 61
|   | | `-ParenExpr 0x222ba853978 <col:34, col:65> 'int'
|   | |   `-BinaryOperator 0x222ba853958 <col:35, col:62> 'int' '&&'
|   | |     |-BinaryOperator 0x222ba8538a8 <col:35, col:50> 'int' '=='
|   | |     | |-UnaryExprOrTypeTraitExpr 0x222ba853848 <col:35, col:45> 'unsigned long long' sizeof
|   | |     | | `-ParenExpr 0x222ba853828 <col:41, col:45> 'size_t':'unsigned long long' lvalue
|   | |     | |   `-DeclRefExpr 0x222ba853808 <col:42> 'size_t':'unsigned long long' lvalue ParmVar 0x222ba8531e0 'len' 'size_t':'unsigned long long' non_odr_use_unevaluated
|   | |     | `-ImplicitCastExpr 0x222ba853890 <col:50> 'unsigned long long' <IntegralCast>
|   | |     |   `-IntegerLiteral 0x222ba853868 <col:50> 'int' 8
|   | |     `-BinaryOperator 0x222ba853938 <col:55, col:62> 'int' '<'
|   | |       |-ImplicitCastExpr 0x222ba853908 <col:55> 'u64':'unsigned long long' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x222ba8538c8 <col:55> 'u64':'unsigned long long' lvalue Var 0x222ba853518 'alen' 'u64':'unsigned long long'
|   | |       `-ImplicitCastExpr 0x222ba853920 <col:62> 'size_t':'unsigned long long' <LValueToRValue>
|   | |         `-DeclRefExpr 0x222ba8538e8 <col:62> 'size_t':'unsigned long long' lvalue ParmVar 0x222ba8531e0 'len' 'size_t':'unsigned long long'
|   | `-ReturnStmt 0x222ba8539f8 <line:928:9, col:17>
|   |   `-UnaryOperator 0x222ba8539e0 <col:16, col:17> 'int' prefix '-'
|   |     `-IntegerLiteral 0x222ba8539b8 <col:17> 'int' 1
|   |-IfStmt 0x222ba853f50 <line:932:5, line:944:5>
|   | |-ImplicitCastExpr 0x222ba853ac0 <line:932:9> 'unsigned int' <LValueToRValue>
|   | | `-DeclRefExpr 0x222ba853aa0 <col:9> 'unsigned int' lvalue Var 0x222ba853488 'n' 'unsigned int'
|   | `-CompoundStmt 0x222ba853f30 <col:12, line:944:5>
|   |   |-WhileStmt 0x222ba853dc0 <line:933:9, line:937:9>
|   |   | |-BinaryOperator 0x222ba853b48 <line:933:16, col:21> 'int' '&&'
|   |   | | |-ImplicitCastExpr 0x222ba853b18 <col:16> 'unsigned int' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x222ba853ad8 <col:16> 'unsigned int' lvalue Var 0x222ba853488 'n' 'unsigned int'
|   |   | | `-ImplicitCastExpr 0x222ba853b30 <col:21> 'size_t':'unsigned long long' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x222ba853af8 <col:21> 'size_t':'unsigned long long' lvalue ParmVar 0x222ba8531e0 'len' 'size_t':'unsigned long long'
|   |   | `-CompoundStmt 0x222ba853da0 <col:26, line:937:9>
|   |   |   |-UnaryOperator 0x222ba853c30 <line:935:13, col:15> 'size_t':'unsigned long long' prefix '--'
|   |   |   | `-DeclRefExpr 0x222ba853c10 <col:15> 'size_t':'unsigned long long' lvalue ParmVar 0x222ba8531e0 'len' 'size_t':'unsigned long long'
|   |   |   `-BinaryOperator 0x222ba853d80 <line:936:13, col:27> 'unsigned int' '='
|   |   |     |-DeclRefExpr 0x222ba853c48 <col:13> 'unsigned int' lvalue Var 0x222ba853488 'n' 'unsigned int'
|   |   |     `-BinaryOperator 0x222ba853d60 <col:17, col:27> 'unsigned int' '%'
|   |   |       |-ParenExpr 0x222ba853d00 <col:17, col:23> 'unsigned int'
|   |   |       | `-BinaryOperator 0x222ba853ce0 <col:18, col:22> 'unsigned int' '+'
|   |   |       |   |-ImplicitCastExpr 0x222ba853cb0 <col:18> 'unsigned int' <LValueToRValue>
|   |   |       |   | `-DeclRefExpr 0x222ba853c68 <col:18> 'unsigned int' lvalue Var 0x222ba853488 'n' 'unsigned int'
|   |   |       |   `-ImplicitCastExpr 0x222ba853cc8 <col:22> 'unsigned int' <IntegralCast>
|   |   |       |     `-IntegerLiteral 0x222ba853c88 <col:22> 'int' 1
|   |   |       `-ImplicitCastExpr 0x222ba853d48 <col:27> 'unsigned int' <IntegralCast>
|   |   |         `-IntegerLiteral 0x222ba853d20 <col:27> 'int' 16
|   |   `-IfStmt 0x222ba853f08 <line:938:9, line:943:9> has_else
|   |     |-BinaryOperator 0x222ba853e50 <line:938:13, col:18> 'int' '=='
|   |     | |-ImplicitCastExpr 0x222ba853e20 <col:13> 'unsigned int' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x222ba853dd8 <col:13> 'unsigned int' lvalue Var 0x222ba853488 'n' 'unsigned int'
|   |     | `-ImplicitCastExpr 0x222ba853e38 <col:18> 'unsigned int' <IntegralCast>
|   |     |   `-IntegerLiteral 0x222ba853df8 <col:18> 'int' 0
|   |     |-NullStmt 0x222ba853f00 <line:553:28>
|   |     `-CompoundStmt 0x222ba853ee8 <line:940:14, line:943:9>
|   |       `-ReturnStmt 0x222ba853ed8 <line:942:13, col:20>
|   |         `-IntegerLiteral 0x222ba853eb0 <col:20> 'int' 0
|   |-IfStmt 0x222ba85a2d0 <line:946:5, line:950:5>
|   | |-ParenExpr 0x222ba85a120 <line:946:9, col:33> 'size_t':'unsigned long long'
|   | | `-BinaryOperator 0x222ba85a100 <col:10, col:32> 'size_t':'unsigned long long' '='
|   | |   |-DeclRefExpr 0x222ba853f68 <col:10> 'size_t':'unsigned long long' lvalue Var 0x222ba8533f0 'i' 'size_t':'unsigned long long'
|   | |   `-ParenExpr 0x222ba85a0e0 <col:14, col:32> 'unsigned long long'
|   | |     `-BinaryOperator 0x222ba85a0c0 <col:15, col:30> 'unsigned long long' '&'
|   | |       |-ImplicitCastExpr 0x222ba85a0a8 <col:15> 'size_t':'unsigned long long' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x222ba853fa0 <col:15> 'size_t':'unsigned long long' lvalue ParmVar 0x222ba8531e0 'len' 'size_t':'unsigned long long'
|   | |       `-CStyleCastExpr 0x222ba85a080 <col:21, col:30> 'size_t':'unsigned long long' <IntegralCast>
|   | |         `-UnaryOperator 0x222ba853fe8 <col:29, col:30> 'int' prefix '-'
|   | |           `-IntegerLiteral 0x222ba853fc0 <col:30> 'int' 16
|   | `-CompoundStmt 0x222ba85a2b0 <col:36, line:950:5>
|   |   |-CompoundAssignOperator 0x222ba85a1f8 <line:948:9, col:16> 'const unsigned char *' '+=' ComputeLHSTy='const unsigned char *' ComputeResultTy='const unsigned char *'
|   |   | |-DeclRefExpr 0x222ba85a1a0 <col:9> 'const unsigned char *' lvalue ParmVar 0x222ba853168 'aad' 'const unsigned char *'
|   |   | `-ImplicitCastExpr 0x222ba85a1e0 <col:16> 'size_t':'unsigned long long' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x222ba85a1c0 <col:16> 'size_t':'unsigned long long' lvalue Var 0x222ba8533f0 'i' 'size_t':'unsigned long long'
|   |   `-CompoundAssignOperator 0x222ba85a280 <line:949:9, col:16> 'size_t':'unsigned long long' '-=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |     |-DeclRefExpr 0x222ba85a228 <col:9> 'size_t':'unsigned long long' lvalue ParmVar 0x222ba8531e0 'len' 'size_t':'unsigned long long'
|   |     `-ImplicitCastExpr 0x222ba85a268 <col:16> 'size_t':'unsigned long long' <LValueToRValue>
|   |       `-DeclRefExpr 0x222ba85a248 <col:16> 'size_t':'unsigned long long' lvalue Var 0x222ba8533f0 'i' 'size_t':'unsigned long long'
|   |-IfStmt 0x222ba85a5e8 <line:960:5, line:964:5>
|   | |-ImplicitCastExpr 0x222ba85a308 <line:960:9> 'size_t':'unsigned long long' <LValueToRValue>
|   | | `-DeclRefExpr 0x222ba85a2e8 <col:9> 'size_t':'unsigned long long' lvalue ParmVar 0x222ba8531e0 'len' 'size_t':'unsigned long long'
|   | `-CompoundStmt 0x222ba85a5d0 <col:14, line:964:5>
|   |   `-BinaryOperator 0x222ba85a3b8 <line:961:9, col:27> 'unsigned int' '='
|   |     |-DeclRefExpr 0x222ba85a320 <col:9> 'unsigned int' lvalue Var 0x222ba853488 'n' 'unsigned int'
|   |     `-CStyleCastExpr 0x222ba85a390 <col:13, col:27> 'unsigned int' <IntegralCast>
|   |       `-ImplicitCastExpr 0x222ba85a378 <col:27> 'size_t':'unsigned long long' <LValueToRValue> part_of_explicit_cast
|   |         `-DeclRefExpr 0x222ba85a340 <col:27> 'size_t':'unsigned long long' lvalue ParmVar 0x222ba8531e0 'len' 'size_t':'unsigned long long'
|   `-ReturnStmt 0x222ba85a648 <line:967:5, col:12>
|     `-IntegerLiteral 0x222ba85a620 <col:12> 'int' 0
|-FunctionDecl 0x222ba85a9c0 <line:970:1, line:1152:1> line:970:5 invalid CRYPTO_gcm128_encrypt 'int (int *, const unsigned char *, unsigned char *, size_t)'
| |-ParmVarDecl 0x222ba85a6d0 <col:27, col:43> col:43 invalid ctx 'int *'
| |-ParmVarDecl 0x222ba85a750 <line:971:27, col:48> col:48 used in 'const unsigned char *'
| |-ParmVarDecl 0x222ba85a800 <col:52, col:67> col:67 used out 'unsigned char *'
| |-ParmVarDecl 0x222ba85a878 <line:972:27, col:34> col:34 used len 'size_t':'unsigned long long'
| `-CompoundStmt 0x222ba861908 <line:973:1, line:1152:1>
|   |-DeclStmt 0x222ba85ade8 <line:974:5, line:977:24>
|   | |-RecordDecl 0x222ba85aa98 <line:974:11, line:977:5> line:974:11 union definition
|   | | |-FieldDecl 0x222ba85ab68 <line:975:9, col:14> col:14 one 'long'
|   | | `-FieldDecl 0x222ba85abd0 <line:976:9, col:14> col:14 referenced little 'char'
|   | `-VarDecl 0x222ba85ac88 <line:974:5, line:977:23> col:7 used is_endian 'const union (anonymous union at .//openssl//file_jk/before\crypto\modes\gcm128.c:974:11)':'const union (anonymous at .//openssl//file_jk/before\crypto\modes\gcm128.c:974:11)' cinit
|   |   `-InitListExpr 0x222ba85ad70 <col:19, col:23> 'union (anonymous union at .//openssl//file_jk/before\crypto\modes\gcm128.c:974:11)':'union (anonymous at .//openssl//file_jk/before\crypto\modes\gcm128.c:974:11)' field Field 0x222ba85ab68 'one' 'long'
|   |     `-ImplicitCastExpr 0x222ba85adb8 <col:21> 'long' <IntegralCast>
|   |       `-IntegerLiteral 0x222ba85acf0 <col:21> 'int' 1
|   |-DeclStmt 0x222ba85af18 <line:978:5, col:24>
|   | |-VarDecl 0x222ba85ae18 <col:5, col:18> col:18 used n 'unsigned int'
|   | `-VarDecl 0x222ba85ae98 <col:5, col:21> col:21 used ctr 'unsigned int'
|   |-DeclStmt 0x222ba85afa8 <line:979:5, col:13>
|   | `-VarDecl 0x222ba85af40 <col:5, col:12> col:12 used i 'size_t':'unsigned long long'
|   |-DeclStmt 0x222ba855020 <line:980:5, col:29>
|   | `-VarDecl 0x222ba85afd0 <col:5, col:9> col:9 used mlen 'u64':'unsigned long long'
|   |-DeclStmt 0x222ba8550b8 <line:982:5, col:25>
|   | `-VarDecl 0x222ba855050 <col:5, col:11> col:11 used key 'void *'
|   |-CompoundAssignOperator 0x222ba855158 <line:991:5, col:13> 'u64':'unsigned long long' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-DeclRefExpr 0x222ba8550d0 <col:5> 'u64':'unsigned long long' lvalue Var 0x222ba85afd0 'mlen' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x222ba855140 <col:13> 'size_t':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x222ba855108 <col:13> 'size_t':'unsigned long long' lvalue ParmVar 0x222ba85a878 'len' 'size_t':'unsigned long long'
|   |-IfStmt 0x222ba8554f0 <line:992:5, line:993:17>
|   | |-BinaryOperator 0x222ba855480 <line:992:9, col:72> 'int' '||'
|   | | |-BinaryOperator 0x222ba8552d0 <col:9, col:36> 'int' '>'
|   | | | |-ImplicitCastExpr 0x222ba8552b8 <col:9> 'u64':'unsigned long long' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x222ba855188 <col:9> 'u64':'unsigned long long' lvalue Var 0x222ba85afd0 'mlen' 'u64':'unsigned long long'
|   | | | `-ParenExpr 0x222ba855298 <col:16, col:36> 'unsigned long long'
|   | | |   `-BinaryOperator 0x222ba855278 <col:17, col:34> 'unsigned long long' '-'
|   | | |     |-ParenExpr 0x222ba855218 <col:17, col:30> 'unsigned long long'
|   | | |     | `-BinaryOperator 0x222ba8551f8 <<scratch space>:298:1, .//openssl//file_jk/before\crypto\modes\gcm128.c:992:28> 'unsigned long long' '<<'
|   | | |     |   |-IntegerLiteral 0x222ba8551a8 <<scratch space>:298:1> 'unsigned long long' 1
|   | | |     |   `-IntegerLiteral 0x222ba8551d0 <.//openssl//file_jk/before\crypto\modes\gcm128.c:992:28> 'int' 36
|   | | |     `-ImplicitCastExpr 0x222ba855260 <col:34> 'unsigned long long' <IntegralCast>
|   | | |       `-IntegerLiteral 0x222ba855238 <col:34> 'int' 32
|   | | `-ParenExpr 0x222ba855460 <col:41, col:72> 'int'
|   | |   `-BinaryOperator 0x222ba855440 <col:42, col:69> 'int' '&&'
|   | |     |-BinaryOperator 0x222ba855390 <col:42, col:57> 'int' '=='
|   | |     | |-UnaryExprOrTypeTraitExpr 0x222ba855330 <col:42, col:52> 'unsigned long long' sizeof
|   | |     | | `-ParenExpr 0x222ba855310 <col:48, col:52> 'size_t':'unsigned long long' lvalue
|   | |     | |   `-DeclRefExpr 0x222ba8552f0 <col:49> 'size_t':'unsigned long long' lvalue ParmVar 0x222ba85a878 'len' 'size_t':'unsigned long long' non_odr_use_unevaluated
|   | |     | `-ImplicitCastExpr 0x222ba855378 <col:57> 'unsigned long long' <IntegralCast>
|   | |     |   `-IntegerLiteral 0x222ba855350 <col:57> 'int' 8
|   | |     `-BinaryOperator 0x222ba855420 <col:62, col:69> 'int' '<'
|   | |       |-ImplicitCastExpr 0x222ba8553f0 <col:62> 'u64':'unsigned long long' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x222ba8553b0 <col:62> 'u64':'unsigned long long' lvalue Var 0x222ba85afd0 'mlen' 'u64':'unsigned long long'
|   | |       `-ImplicitCastExpr 0x222ba855408 <col:69> 'size_t':'unsigned long long' <LValueToRValue>
|   | |         `-DeclRefExpr 0x222ba8553d0 <col:69> 'size_t':'unsigned long long' lvalue ParmVar 0x222ba85a878 'len' 'size_t':'unsigned long long'
|   | `-ReturnStmt 0x222ba8554e0 <line:993:9, col:17>
|   |   `-UnaryOperator 0x222ba8554c8 <col:16, col:17> 'int' prefix '-'
|   |     `-IntegerLiteral 0x222ba8554a0 <col:17> 'int' 1
|   |-IfStmt 0x222ba8555c0 <line:996:5, line:1000:5>
|   | |-OpaqueValueExpr 0x222ba8555a8 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x222ba855598 <line:996:20, line:1000:5>
|   |-IfStmt 0x222ba854f80 <line:1013:5, line:1129:5>
|   | |-BinaryOperator 0x222ba855828 <line:1013:9, col:32> 'int' '=='
|   | | |-BinaryOperator 0x222ba8557c8 <col:9, col:27> 'unsigned long long' '%'
|   | | | |-ImplicitCastExpr 0x222ba8557b0 <col:9> 'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x222ba855758 <col:9> 'int' 16
|   | | | `-UnaryExprOrTypeTraitExpr 0x222ba855790 <col:14, col:27> 'unsigned long long' sizeof 'size_t':'unsigned long long'
|   | | `-ImplicitCastExpr 0x222ba855810 <col:32> 'unsigned long long' <IntegralCast>
|   | |   `-IntegerLiteral 0x222ba8557e8 <col:32> 'int' 0
|   | `-CompoundStmt 0x222ba854f68 <col:35, line:1129:5>
|   |   `-DoStmt 0x222ba854f48 <line:1014:9, line:1128:19>
|   |     |-CompoundStmt 0x222ba854ee8 <line:1014:12, line:1128:9>
|   |     | |-IfStmt 0x222ba855da0 <line:1015:13, line:1027:13>
|   |     | | |-ImplicitCastExpr 0x222ba855868 <line:1015:17> 'unsigned int' <LValueToRValue>
|   |     | | | `-DeclRefExpr 0x222ba855848 <col:17> 'unsigned int' lvalue Var 0x222ba85ae18 'n' 'unsigned int'
|   |     | | `-CompoundStmt 0x222ba855d80 <col:20, line:1027:13>
|   |     | |   |-WhileStmt 0x222ba855c10 <line:1016:17, line:1020:17>
|   |     | |   | |-BinaryOperator 0x222ba8558f0 <line:1016:24, col:29> 'int' '&&'
|   |     | |   | | |-ImplicitCastExpr 0x222ba8558c0 <col:24> 'unsigned int' <LValueToRValue>
|   |     | |   | | | `-DeclRefExpr 0x222ba855880 <col:24> 'unsigned int' lvalue Var 0x222ba85ae18 'n' 'unsigned int'
|   |     | |   | | `-ImplicitCastExpr 0x222ba8558d8 <col:29> 'size_t':'unsigned long long' <LValueToRValue>
|   |     | |   | |   `-DeclRefExpr 0x222ba8558a0 <col:29> 'size_t':'unsigned long long' lvalue ParmVar 0x222ba85a878 'len' 'size_t':'unsigned long long'
|   |     | |   | `-CompoundStmt 0x222ba855bf0 <col:34, line:1020:17>
|   |     | |   |   |-UnaryOperator 0x222ba855a80 <line:1018:21, col:23> 'size_t':'unsigned long long' prefix '--'
|   |     | |   |   | `-DeclRefExpr 0x222ba855a60 <col:23> 'size_t':'unsigned long long' lvalue ParmVar 0x222ba85a878 'len' 'size_t':'unsigned long long'
|   |     | |   |   `-BinaryOperator 0x222ba855bd0 <line:1019:21, col:35> 'unsigned int' '='
|   |     | |   |     |-DeclRefExpr 0x222ba855a98 <col:21> 'unsigned int' lvalue Var 0x222ba85ae18 'n' 'unsigned int'
|   |     | |   |     `-BinaryOperator 0x222ba855bb0 <col:25, col:35> 'unsigned int' '%'
|   |     | |   |       |-ParenExpr 0x222ba855b50 <col:25, col:31> 'unsigned int'
|   |     | |   |       | `-BinaryOperator 0x222ba855b30 <col:26, col:30> 'unsigned int' '+'
|   |     | |   |       |   |-ImplicitCastExpr 0x222ba855b00 <col:26> 'unsigned int' <LValueToRValue>
|   |     | |   |       |   | `-DeclRefExpr 0x222ba855ab8 <col:26> 'unsigned int' lvalue Var 0x222ba85ae18 'n' 'unsigned int'
|   |     | |   |       |   `-ImplicitCastExpr 0x222ba855b18 <col:30> 'unsigned int' <IntegralCast>
|   |     | |   |       |     `-IntegerLiteral 0x222ba855ad8 <col:30> 'int' 1
|   |     | |   |       `-ImplicitCastExpr 0x222ba855b98 <col:35> 'unsigned int' <IntegralCast>
|   |     | |   |         `-IntegerLiteral 0x222ba855b70 <col:35> 'int' 16
|   |     | |   `-IfStmt 0x222ba855d58 <line:1021:17, line:1026:17> has_else
|   |     | |     |-BinaryOperator 0x222ba855ca0 <line:1021:21, col:26> 'int' '=='
|   |     | |     | |-ImplicitCastExpr 0x222ba855c70 <col:21> 'unsigned int' <LValueToRValue>
|   |     | |     | | `-DeclRefExpr 0x222ba855c28 <col:21> 'unsigned int' lvalue Var 0x222ba85ae18 'n' 'unsigned int'
|   |     | |     | `-ImplicitCastExpr 0x222ba855c88 <col:26> 'unsigned int' <IntegralCast>
|   |     | |     |   `-IntegerLiteral 0x222ba855c48 <col:26> 'int' 0
|   |     | |     |-NullStmt 0x222ba855d50 <line:553:28>
|   |     | |     `-CompoundStmt 0x222ba855d38 <line:1023:22, line:1026:17>
|   |     | |       `-ReturnStmt 0x222ba855d28 <line:1025:21, col:28>
|   |     | |         `-IntegerLiteral 0x222ba855d00 <col:28> 'int' 0
|   |     | |-WhileStmt 0x222ba85bd00 <line:1034:13, line:1059:13>
|   |     | | |-BinaryOperator 0x222ba855e98 <line:1034:20, line:561:36> 'int' '>='
|   |     | | | |-ImplicitCastExpr 0x222ba855e68 <line:1034:20> 'size_t':'unsigned long long' <LValueToRValue>
|   |     | | | | `-DeclRefExpr 0x222ba855db8 <col:20> 'size_t':'unsigned long long' lvalue ParmVar 0x222ba85a878 'len' 'size_t':'unsigned long long'
|   |     | | | `-ImplicitCastExpr 0x222ba855e80 <line:561:29, col:36> 'unsigned long long' <IntegralCast>
|   |     | | |   `-ParenExpr 0x222ba855e48 <col:29, col:36> 'int'
|   |     | | |     `-BinaryOperator 0x222ba855e28 <col:30, col:32> 'int' '*'
|   |     | | |       |-IntegerLiteral 0x222ba855dd8 <col:30> 'int' 3
|   |     | | |       `-IntegerLiteral 0x222ba855e00 <col:32> 'int' 1024
|   |     | | `-CompoundStmt 0x222ba85bcd8 <line:1034:40, line:1059:13>
|   |     | |   |-DeclStmt 0x222ba855fd8 <line:1035:17, col:39>
|   |     | |   | `-VarDecl 0x222ba855ec8 <col:17, line:561:36> line:1035:24 used j 'size_t':'unsigned long long' cinit
|   |     | |   |   `-ImplicitCastExpr 0x222ba855fc0 <line:561:29, col:36> 'size_t':'unsigned long long' <IntegralCast>
|   |     | |   |     `-ParenExpr 0x222ba855fa0 <col:29, col:36> 'int'
|   |     | |   |       `-BinaryOperator 0x222ba855f80 <col:30, col:32> 'int' '*'
|   |     | |   |         |-IntegerLiteral 0x222ba855f30 <col:30> 'int' 3
|   |     | |   |         `-IntegerLiteral 0x222ba855f58 <col:32> 'int' 1024
|   |     | |   |-WhileStmt 0x222ba85ba30 <line:1037:17, line:1056:17>
|   |     | |   | |-ImplicitCastExpr 0x222ba85b098 <line:1037:24> 'size_t':'unsigned long long' <LValueToRValue>
|   |     | |   | | `-DeclRefExpr 0x222ba855ff0 <col:24> 'size_t':'unsigned long long' lvalue Var 0x222ba855ec8 'j' 'size_t':'unsigned long long'
|   |     | |   | `-CompoundStmt 0x222ba85b9f0 <col:27, line:1056:17>
|   |     | |   |   |-DeclStmt 0x222ba85b1c0 <line:1038:21, col:50>
|   |     | |   |   | `-VarDecl 0x222ba85b0e8 <col:21, col:47> col:29 used out_t 'size_t *' cinit
|   |     | |   |   |   `-CStyleCastExpr 0x222ba85b198 <col:37, col:47> 'size_t *' <BitCast>
|   |     | |   |   |     `-ImplicitCastExpr 0x222ba85b180 <col:47> 'unsigned char *' <LValueToRValue> part_of_explicit_cast
|   |     | |   |   |       `-DeclRefExpr 0x222ba85b150 <col:47> 'unsigned char *' lvalue ParmVar 0x222ba85a800 'out' 'unsigned char *'
|   |     | |   |   |-DeclStmt 0x222ba85b2c0 <line:1039:21, col:60>
|   |     | |   |   | `-VarDecl 0x222ba85b1e8 <col:21, col:58> col:35 used in_t 'const size_t *' cinit
|   |     | |   |   |   `-CStyleCastExpr 0x222ba85b298 <col:42, col:58> 'const size_t *' <BitCast>
|   |     | |   |   |     `-ImplicitCastExpr 0x222ba85b280 <col:58> 'const unsigned char *' <LValueToRValue> part_of_explicit_cast
|   |     | |   |   |       `-DeclRefExpr 0x222ba85b250 <col:58> 'const unsigned char *' lvalue ParmVar 0x222ba85a750 'in' 'const unsigned char *'
|   |     | |   |   |-UnaryOperator 0x222ba85b330 <line:1042:21, col:23> 'unsigned int' prefix '++'
|   |     | |   |   | `-DeclRefExpr 0x222ba85b310 <col:23> 'unsigned int' lvalue Var 0x222ba85ae98 'ctr' 'unsigned int'
|   |     | |   |   |-CompoundAssignOperator 0x222ba85b8b8 <line:1053:21, col:28> 'unsigned char *' '+=' ComputeLHSTy='unsigned char *' ComputeResultTy='unsigned char *'
|   |     | |   |   | |-DeclRefExpr 0x222ba85b870 <col:21> 'unsigned char *' lvalue ParmVar 0x222ba85a800 'out' 'unsigned char *'
|   |     | |   |   | `-IntegerLiteral 0x222ba85b890 <col:28> 'int' 16
|   |     | |   |   |-CompoundAssignOperator 0x222ba85b930 <line:1054:21, col:27> 'const unsigned char *' '+=' ComputeLHSTy='const unsigned char *' ComputeResultTy='const unsigned char *'
|   |     | |   |   | |-DeclRefExpr 0x222ba85b8e8 <col:21> 'const unsigned char *' lvalue ParmVar 0x222ba85a750 'in' 'const unsigned char *'
|   |     | |   |   | `-IntegerLiteral 0x222ba85b908 <col:27> 'int' 16
|   |     | |   |   `-CompoundAssignOperator 0x222ba85b9c0 <line:1055:21, col:26> 'size_t':'unsigned long long' '-=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |     | |   |     |-DeclRefExpr 0x222ba85b960 <col:21> 'size_t':'unsigned long long' lvalue Var 0x222ba855ec8 'j' 'size_t':'unsigned long long'
|   |     | |   |     `-ImplicitCastExpr 0x222ba85b9a8 <col:26> 'unsigned long long' <IntegralCast>
|   |     | |   |       `-IntegerLiteral 0x222ba85b980 <col:26> 'int' 16
|   |     | |   `-CompoundAssignOperator 0x222ba85bca8 <line:1058:17, line:561:36> 'size_t':'unsigned long long' '-=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |     | |     |-DeclRefExpr 0x222ba85bbe0 <line:1058:17> 'size_t':'unsigned long long' lvalue ParmVar 0x222ba85a878 'len' 'size_t':'unsigned long long'
|   |     | |     `-ImplicitCastExpr 0x222ba85bc90 <line:561:29, col:36> 'unsigned long long' <IntegralCast>
|   |     | |       `-ParenExpr 0x222ba85bc70 <col:29, col:36> 'int'
|   |     | |         `-BinaryOperator 0x222ba85bc50 <col:30, col:32> 'int' '*'
|   |     | |           |-IntegerLiteral 0x222ba85bc00 <col:30> 'int' 3
|   |     | |           `-IntegerLiteral 0x222ba85bc28 <col:32> 'int' 1024
|   |     | |-IfStmt 0x222ba8549b0 <line:1061:13, line:1085:13>
|   |     | | |-ParenExpr 0x222ba85be48 <line:1061:17, col:41> 'size_t':'unsigned long long'
|   |     | | | `-BinaryOperator 0x222ba85be28 <col:18, col:40> 'size_t':'unsigned long long' '='
|   |     | | |   |-DeclRefExpr 0x222ba85bd18 <col:18> 'size_t':'unsigned long long' lvalue Var 0x222ba85af40 'i' 'size_t':'unsigned long long'
|   |     | | |   `-ParenExpr 0x222ba85be08 <col:22, col:40> 'unsigned long long'
|   |     | | |     `-BinaryOperator 0x222ba85bde8 <col:23, col:38> 'unsigned long long' '&'
|   |     | | |       |-ImplicitCastExpr 0x222ba85bdd0 <col:23> 'size_t':'unsigned long long' <LValueToRValue>
|   |     | | |       | `-DeclRefExpr 0x222ba85bd38 <col:23> 'size_t':'unsigned long long' lvalue ParmVar 0x222ba85a878 'len' 'size_t':'unsigned long long'
|   |     | | |       `-CStyleCastExpr 0x222ba85bda8 <col:29, col:38> 'size_t':'unsigned long long' <IntegralCast>
|   |     | | |         `-UnaryOperator 0x222ba85bd80 <col:37, col:38> 'int' prefix '-'
|   |     | | |           `-IntegerLiteral 0x222ba85bd58 <col:38> 'int' 16
|   |     | | `-CompoundStmt 0x222ba854990 <col:44, line:1085:13>
|   |     | |   |-DeclStmt 0x222ba85bf18 <line:1062:17, col:29>
|   |     | |   | `-VarDecl 0x222ba85be78 <col:17, col:28> col:24 used j 'size_t':'unsigned long long' cinit
|   |     | |   |   `-ImplicitCastExpr 0x222ba85bf00 <col:28> 'size_t':'unsigned long long' <LValueToRValue>
|   |     | |   |     `-DeclRefExpr 0x222ba85bee0 <col:28> 'size_t':'unsigned long long' lvalue Var 0x222ba85af40 'i' 'size_t':'unsigned long long'
|   |     | |   `-WhileStmt 0x222ba854890 <line:1064:17, line:1083:17>
|   |     | |     |-BinaryOperator 0x222ba85bfa8 <line:1064:24, col:31> 'int' '>='
|   |     | |     | |-ImplicitCastExpr 0x222ba85bf78 <col:24> 'size_t':'unsigned long long' <LValueToRValue>
|   |     | |     | | `-DeclRefExpr 0x222ba85bf30 <col:24> 'size_t':'unsigned long long' lvalue ParmVar 0x222ba85a878 'len' 'size_t':'unsigned long long'
|   |     | |     | `-ImplicitCastExpr 0x222ba85bf90 <col:31> 'unsigned long long' <IntegralCast>
|   |     | |     |   `-IntegerLiteral 0x222ba85bf50 <col:31> 'int' 16
|   |     | |     `-CompoundStmt 0x222ba854850 <col:35, line:1083:17>
|   |     | |       |-DeclStmt 0x222ba854050 <line:1065:21, col:50>
|   |     | |       | `-VarDecl 0x222ba85bfd8 <col:21, col:47> col:29 used out_t 'size_t *' cinit
|   |     | |       |   `-CStyleCastExpr 0x222ba854028 <col:37, col:47> 'size_t *' <BitCast>
|   |     | |       |     `-ImplicitCastExpr 0x222ba854010 <col:47> 'unsigned char *' <LValueToRValue> part_of_explicit_cast
|   |     | |       |       `-DeclRefExpr 0x222ba85c040 <col:47> 'unsigned char *' lvalue ParmVar 0x222ba85a800 'out' 'unsigned char *'
|   |     | |       |-DeclStmt 0x222ba854150 <line:1066:21, col:60>
|   |     | |       | `-VarDecl 0x222ba854078 <col:21, col:58> col:35 used in_t 'const size_t *' cinit
|   |     | |       |   `-CStyleCastExpr 0x222ba854128 <col:42, col:58> 'const size_t *' <BitCast>
|   |     | |       |     `-ImplicitCastExpr 0x222ba854110 <col:58> 'const unsigned char *' <LValueToRValue> part_of_explicit_cast
|   |     | |       |       `-DeclRefExpr 0x222ba8540e0 <col:58> 'const unsigned char *' lvalue ParmVar 0x222ba85a750 'in' 'const unsigned char *'
|   |     | |       |-UnaryOperator 0x222ba8541a8 <line:1069:21, col:23> 'unsigned int' prefix '++'
|   |     | |       | `-DeclRefExpr 0x222ba854188 <col:23> 'unsigned int' lvalue Var 0x222ba85ae98 'ctr' 'unsigned int'
|   |     | |       |-CompoundAssignOperator 0x222ba854718 <line:1080:21, col:28> 'unsigned char *' '+=' ComputeLHSTy='unsigned char *' ComputeResultTy='unsigned char *'
|   |     | |       | |-DeclRefExpr 0x222ba8546d0 <col:21> 'unsigned char *' lvalue ParmVar 0x222ba85a800 'out' 'unsigned char *'
|   |     | |       | `-IntegerLiteral 0x222ba8546f0 <col:28> 'int' 16
|   |     | |       |-CompoundAssignOperator 0x222ba854790 <line:1081:21, col:27> 'const unsigned char *' '+=' ComputeLHSTy='const unsigned char *' ComputeResultTy='const unsigned char *'
|   |     | |       | |-DeclRefExpr 0x222ba854748 <col:21> 'const unsigned char *' lvalue ParmVar 0x222ba85a750 'in' 'const unsigned char *'
|   |     | |       | `-IntegerLiteral 0x222ba854768 <col:27> 'int' 16
|   |     | |       `-CompoundAssignOperator 0x222ba854820 <line:1082:21, col:28> 'size_t':'unsigned long long' '-=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |     | |         |-DeclRefExpr 0x222ba8547c0 <col:21> 'size_t':'unsigned long long' lvalue ParmVar 0x222ba85a878 'len' 'size_t':'unsigned long long'
|   |     | |         `-ImplicitCastExpr 0x222ba854808 <col:28> 'unsigned long long' <IntegralCast>
|   |     | |           `-IntegerLiteral 0x222ba8547e0 <col:28> 'int' 16
|   |     | |-IfStmt 0x222ba854e78 <line:1109:13, line:1124:13>
|   |     | | |-ImplicitCastExpr 0x222ba8549e8 <line:1109:17> 'size_t':'unsigned long long' <LValueToRValue>
|   |     | | | `-DeclRefExpr 0x222ba8549c8 <col:17> 'size_t':'unsigned long long' lvalue ParmVar 0x222ba85a878 'len' 'size_t':'unsigned long long'
|   |     | | `-CompoundStmt 0x222ba854e58 <col:22, line:1124:13>
|   |     | |   |-UnaryOperator 0x222ba854a40 <line:1111:17, col:19> 'unsigned int' prefix '++'
|   |     | |   | `-DeclRefExpr 0x222ba854a20 <col:19> 'unsigned int' lvalue Var 0x222ba85ae98 'ctr' 'unsigned int'
|   |     | |   `-WhileStmt 0x222ba854e40 <line:1120:17, line:1123:17>
|   |     | |     |-UnaryOperator 0x222ba854c78 <line:1120:24, col:27> 'size_t':'unsigned long long' postfix '--'
|   |     | |     | `-DeclRefExpr 0x222ba854c58 <col:24> 'size_t':'unsigned long long' lvalue ParmVar 0x222ba85a878 'len' 'size_t':'unsigned long long'
|   |     | |     `-CompoundStmt 0x222ba854e28 <col:31, line:1123:17>
|   |     | |       `-UnaryOperator 0x222ba854e10 <line:1122:21, col:23> 'unsigned int' prefix '++'
|   |     | |         `-DeclRefExpr 0x222ba854df0 <col:23> 'unsigned int' lvalue Var 0x222ba85ae18 'n' 'unsigned int'
|   |     | `-ReturnStmt 0x222ba854ed8 <line:1127:13, col:20>
|   |     |   `-IntegerLiteral 0x222ba854eb0 <col:20> 'int' 0
|   |     `-IntegerLiteral 0x222ba854f20 <line:1128:18> 'int' 0
|   |-ForStmt 0x222ba861878 <line:1131:5, line:1148:5>
|   | |-BinaryOperator 0x222ba8610e0 <line:1131:10, col:14> 'size_t':'unsigned long long' '='
|   | | |-DeclRefExpr 0x222ba854f98 <col:10> 'size_t':'unsigned long long' lvalue Var 0x222ba85af40 'i' 'size_t':'unsigned long long'
|   | | `-ImplicitCastExpr 0x222ba854fe0 <col:14> 'size_t':'unsigned long long' <IntegralCast>
|   | |   `-IntegerLiteral 0x222ba854fb8 <col:14> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x222ba861170 <col:17, col:21> 'int' '<'
|   | | |-ImplicitCastExpr 0x222ba861140 <col:17> 'size_t':'unsigned long long' <LValueToRValue>
|   | | | `-DeclRefExpr 0x222ba861100 <col:17> 'size_t':'unsigned long long' lvalue Var 0x222ba85af40 'i' 'size_t':'unsigned long long'
|   | | `-ImplicitCastExpr 0x222ba861158 <col:21> 'size_t':'unsigned long long' <LValueToRValue>
|   | |   `-DeclRefExpr 0x222ba861120 <col:21> 'size_t':'unsigned long long' lvalue ParmVar 0x222ba85a878 'len' 'size_t':'unsigned long long'
|   | |-UnaryOperator 0x222ba8611b0 <col:26, col:28> 'size_t':'unsigned long long' prefix '++'
|   | | `-DeclRefExpr 0x222ba861190 <col:28> 'size_t':'unsigned long long' lvalue Var 0x222ba85af40 'i' 'size_t':'unsigned long long'
|   | `-CompoundStmt 0x222ba861858 <col:31, line:1148:5>
|   |   |-IfStmt 0x222ba8614d0 <line:1132:9, line:1143:9>
|   |   | |-BinaryOperator 0x222ba861240 <line:1132:13, col:18> 'int' '=='
|   |   | | |-ImplicitCastExpr 0x222ba861210 <col:13> 'unsigned int' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x222ba8611c8 <col:13> 'unsigned int' lvalue Var 0x222ba85ae18 'n' 'unsigned int'
|   |   | | `-ImplicitCastExpr 0x222ba861228 <col:18> 'unsigned int' <IntegralCast>
|   |   | |   `-IntegerLiteral 0x222ba8611e8 <col:18> 'int' 0
|   |   | `-CompoundStmt 0x222ba8614b8 <col:21, line:1143:9>
|   |   |   `-UnaryOperator 0x222ba8612a0 <line:1134:13, col:15> 'unsigned int' prefix '++'
|   |   |     `-DeclRefExpr 0x222ba861280 <col:15> 'unsigned int' lvalue Var 0x222ba85ae98 'ctr' 'unsigned int'
|   |   `-BinaryOperator 0x222ba861780 <line:1145:9, col:23> 'unsigned int' '='
|   |     |-DeclRefExpr 0x222ba861648 <col:9> 'unsigned int' lvalue Var 0x222ba85ae18 'n' 'unsigned int'
|   |     `-BinaryOperator 0x222ba861760 <col:13, col:23> 'unsigned int' '%'
|   |       |-ParenExpr 0x222ba861700 <col:13, col:19> 'unsigned int'
|   |       | `-BinaryOperator 0x222ba8616e0 <col:14, col:18> 'unsigned int' '+'
|   |       |   |-ImplicitCastExpr 0x222ba8616b0 <col:14> 'unsigned int' <LValueToRValue>
|   |       |   | `-DeclRefExpr 0x222ba861668 <col:14> 'unsigned int' lvalue Var 0x222ba85ae18 'n' 'unsigned int'
|   |       |   `-ImplicitCastExpr 0x222ba8616c8 <col:18> 'unsigned int' <IntegralCast>
|   |       |     `-IntegerLiteral 0x222ba861688 <col:18> 'int' 1
|   |       `-ImplicitCastExpr 0x222ba861748 <col:23> 'unsigned int' <IntegralCast>
|   |         `-IntegerLiteral 0x222ba861720 <col:23> 'int' 16
|   `-ReturnStmt 0x222ba8618f8 <line:1151:5, col:12>
|     `-IntegerLiteral 0x222ba8618d0 <col:12> 'int' 0
|-FunctionDecl 0x222ba861bb0 <line:1154:1, line:1344:1> line:1154:5 invalid CRYPTO_gcm128_decrypt 'int (int *, const unsigned char *, unsigned char *, size_t)'
| |-ParmVarDecl 0x222ba861988 <col:27, col:43> col:43 invalid ctx 'int *'
| |-ParmVarDecl 0x222ba861a08 <line:1155:27, col:48> col:48 used in 'const unsigned char *'
| |-ParmVarDecl 0x222ba861a88 <col:52, col:67> col:67 used out 'unsigned char *'
| |-ParmVarDecl 0x222ba861b00 <line:1156:27, col:34> col:34 used len 'size_t':'unsigned long long'
| `-CompoundStmt 0x222ba863bf8 <line:1157:1, line:1344:1>
|   |-DeclStmt 0x222ba861fd8 <line:1158:5, line:1161:24>
|   | |-RecordDecl 0x222ba861c88 <line:1158:11, line:1161:5> line:1158:11 union definition
|   | | |-FieldDecl 0x222ba861d58 <line:1159:9, col:14> col:14 one 'long'
|   | | `-FieldDecl 0x222ba861dc0 <line:1160:9, col:14> col:14 referenced little 'char'
|   | `-VarDecl 0x222ba861e78 <line:1158:5, line:1161:23> col:7 used is_endian 'const union (anonymous union at .//openssl//file_jk/before\crypto\modes\gcm128.c:1158:11)':'const union (anonymous at .//openssl//file_jk/before\crypto\modes\gcm128.c:1158:11)' cinit
|   |   `-InitListExpr 0x222ba861f60 <col:19, col:23> 'union (anonymous union at .//openssl//file_jk/before\crypto\modes\gcm128.c:1158:11)':'union (anonymous at .//openssl//file_jk/before\crypto\modes\gcm128.c:1158:11)' field Field 0x222ba861d58 'one' 'long'
|   |     `-ImplicitCastExpr 0x222ba861fa8 <col:21> 'long' <IntegralCast>
|   |       `-IntegerLiteral 0x222ba861ee0 <col:21> 'int' 1
|   |-DeclStmt 0x222ba862170 <line:1162:5, col:24>
|   | |-VarDecl 0x222ba862008 <col:5, col:18> col:18 used n 'unsigned int'
|   | `-VarDecl 0x222ba8620f0 <col:5, col:21> col:21 used ctr 'unsigned int'
|   |-DeclStmt 0x222ba862200 <line:1163:5, col:13>
|   | `-VarDecl 0x222ba862198 <col:5, col:12> col:12 used i 'size_t':'unsigned long long'
|   |-DeclStmt 0x222ba8622b8 <line:1164:5, col:29>
|   | `-VarDecl 0x222ba862228 <col:5, col:9> col:9 used mlen 'u64':'unsigned long long'
|   |-DeclStmt 0x222ba862350 <line:1166:5, col:25>
|   | `-VarDecl 0x222ba8622e8 <col:5, col:11> col:11 used key 'void *'
|   |-CompoundAssignOperator 0x222ba8623f0 <line:1175:5, col:13> 'u64':'unsigned long long' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-DeclRefExpr 0x222ba862368 <col:5> 'u64':'unsigned long long' lvalue Var 0x222ba862228 'mlen' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x222ba8623d8 <col:13> 'size_t':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x222ba8623a0 <col:13> 'size_t':'unsigned long long' lvalue ParmVar 0x222ba861b00 'len' 'size_t':'unsigned long long'
|   |-IfStmt 0x222ba862788 <line:1176:5, line:1177:17>
|   | |-BinaryOperator 0x222ba862718 <line:1176:9, col:72> 'int' '||'
|   | | |-BinaryOperator 0x222ba862568 <col:9, col:36> 'int' '>'
|   | | | |-ImplicitCastExpr 0x222ba862550 <col:9> 'u64':'unsigned long long' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x222ba862420 <col:9> 'u64':'unsigned long long' lvalue Var 0x222ba862228 'mlen' 'u64':'unsigned long long'
|   | | | `-ParenExpr 0x222ba862530 <col:16, col:36> 'unsigned long long'
|   | | |   `-BinaryOperator 0x222ba862510 <col:17, col:34> 'unsigned long long' '-'
|   | | |     |-ParenExpr 0x222ba8624b0 <col:17, col:30> 'unsigned long long'
|   | | |     | `-BinaryOperator 0x222ba862490 <<scratch space>:299:1, .//openssl//file_jk/before\crypto\modes\gcm128.c:1176:28> 'unsigned long long' '<<'
|   | | |     |   |-IntegerLiteral 0x222ba862440 <<scratch space>:299:1> 'unsigned long long' 1
|   | | |     |   `-IntegerLiteral 0x222ba862468 <.//openssl//file_jk/before\crypto\modes\gcm128.c:1176:28> 'int' 36
|   | | |     `-ImplicitCastExpr 0x222ba8624f8 <col:34> 'unsigned long long' <IntegralCast>
|   | | |       `-IntegerLiteral 0x222ba8624d0 <col:34> 'int' 32
|   | | `-ParenExpr 0x222ba8626f8 <col:41, col:72> 'int'
|   | |   `-BinaryOperator 0x222ba8626d8 <col:42, col:69> 'int' '&&'
|   | |     |-BinaryOperator 0x222ba862628 <col:42, col:57> 'int' '=='
|   | |     | |-UnaryExprOrTypeTraitExpr 0x222ba8625c8 <col:42, col:52> 'unsigned long long' sizeof
|   | |     | | `-ParenExpr 0x222ba8625a8 <col:48, col:52> 'size_t':'unsigned long long' lvalue
|   | |     | |   `-DeclRefExpr 0x222ba862588 <col:49> 'size_t':'unsigned long long' lvalue ParmVar 0x222ba861b00 'len' 'size_t':'unsigned long long' non_odr_use_unevaluated
|   | |     | `-ImplicitCastExpr 0x222ba862610 <col:57> 'unsigned long long' <IntegralCast>
|   | |     |   `-IntegerLiteral 0x222ba8625e8 <col:57> 'int' 8
|   | |     `-BinaryOperator 0x222ba8626b8 <col:62, col:69> 'int' '<'
|   | |       |-ImplicitCastExpr 0x222ba862688 <col:62> 'u64':'unsigned long long' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x222ba862648 <col:62> 'u64':'unsigned long long' lvalue Var 0x222ba862228 'mlen' 'u64':'unsigned long long'
|   | |       `-ImplicitCastExpr 0x222ba8626a0 <col:69> 'size_t':'unsigned long long' <LValueToRValue>
|   | |         `-DeclRefExpr 0x222ba862668 <col:69> 'size_t':'unsigned long long' lvalue ParmVar 0x222ba861b00 'len' 'size_t':'unsigned long long'
|   | `-ReturnStmt 0x222ba862778 <line:1177:9, col:17>
|   |   `-UnaryOperator 0x222ba862760 <col:16, col:17> 'int' prefix '-'
|   |     `-IntegerLiteral 0x222ba862738 <col:17> 'int' 1
|   |-IfStmt 0x222ba862858 <line:1180:5, line:1184:5>
|   | |-OpaqueValueExpr 0x222ba862840 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x222ba862830 <line:1180:20, line:1184:5>
|   |-IfStmt 0x222ba863208 <line:1197:5, line:1318:5>
|   | |-BinaryOperator 0x222ba862ac0 <line:1197:9, col:32> 'int' '=='
|   | | |-BinaryOperator 0x222ba862a60 <col:9, col:27> 'unsigned long long' '%'
|   | | | |-ImplicitCastExpr 0x222ba862a48 <col:9> 'unsigned long long' <IntegralCast>
|   | | | | `-IntegerLiteral 0x222ba8629f0 <col:9> 'int' 16
|   | | | `-UnaryExprOrTypeTraitExpr 0x222ba862a28 <col:14, col:27> 'unsigned long long' sizeof 'size_t':'unsigned long long'
|   | | `-ImplicitCastExpr 0x222ba862aa8 <col:32> 'unsigned long long' <IntegralCast>
|   | |   `-IntegerLiteral 0x222ba862a80 <col:32> 'int' 0
|   | `-CompoundStmt 0x222ba8631f0 <col:35, line:1318:5>
|   |   `-DoStmt 0x222ba8631d0 <line:1198:9, line:1317:19>
|   |     |-CompoundStmt 0x222ba863170 <line:1198:12, line:1317:9>
|   |     | |-IfStmt 0x222ba860148 <line:1199:13, line:1213:13>
|   |     | | |-ImplicitCastExpr 0x222ba862b00 <line:1199:17> 'unsigned int' <LValueToRValue>
|   |     | | | `-DeclRefExpr 0x222ba862ae0 <col:17> 'unsigned int' lvalue Var 0x222ba862008 'n' 'unsigned int'
|   |     | | `-CompoundStmt 0x222ba860128 <col:20, line:1213:13>
|   |     | |   |-WhileStmt 0x222ba862fd8 <line:1200:17, line:1206:17>
|   |     | |   | |-BinaryOperator 0x222ba862b88 <line:1200:24, col:29> 'int' '&&'
|   |     | |   | | |-ImplicitCastExpr 0x222ba862b58 <col:24> 'unsigned int' <LValueToRValue>
|   |     | |   | | | `-DeclRefExpr 0x222ba862b18 <col:24> 'unsigned int' lvalue Var 0x222ba862008 'n' 'unsigned int'
|   |     | |   | | `-ImplicitCastExpr 0x222ba862b70 <col:29> 'size_t':'unsigned long long' <LValueToRValue>
|   |     | |   | |   `-DeclRefExpr 0x222ba862b38 <col:29> 'size_t':'unsigned long long' lvalue ParmVar 0x222ba861b00 'len' 'size_t':'unsigned long long'
|   |     | |   | `-CompoundStmt 0x222ba862fb0 <col:34, line:1206:17>
|   |     | |   |   |-DeclStmt 0x222ba862ce8 <line:1201:21, col:35>
|   |     | |   |   | `-VarDecl 0x222ba862bb8 <col:21, col:34> col:24 used c 'u8':'unsigned char' cinit
|   |     | |   |   |   `-ImplicitCastExpr 0x222ba862cd0 <col:28, col:34> 'unsigned char' <LValueToRValue>
|   |     | |   |   |     `-UnaryOperator 0x222ba862cb8 <col:28, col:34> 'const unsigned char' lvalue prefix '*' cannot overflow
|   |     | |   |   |       `-ParenExpr 0x222ba862c98 <col:29, col:34> 'const unsigned char *'
|   |     | |   |   |         `-UnaryOperator 0x222ba862c80 <col:30, col:32> 'const unsigned char *' postfix '++'
|   |     | |   |   |           `-DeclRefExpr 0x222ba862c48 <col:30> 'const unsigned char *' lvalue ParmVar 0x222ba861a08 'in' 'const unsigned char *'
|   |     | |   |   |-UnaryOperator 0x222ba862e40 <line:1204:21, col:23> 'size_t':'unsigned long long' prefix '--'
|   |     | |   |   | `-DeclRefExpr 0x222ba862e20 <col:23> 'size_t':'unsigned long long' lvalue ParmVar 0x222ba861b00 'len' 'size_t':'unsigned long long'
|   |     | |   |   `-BinaryOperator 0x222ba862f90 <line:1205:21, col:35> 'unsigned int' '='
|   |     | |   |     |-DeclRefExpr 0x222ba862e58 <col:21> 'unsigned int' lvalue Var 0x222ba862008 'n' 'unsigned int'
|   |     | |   |     `-BinaryOperator 0x222ba862f70 <col:25, col:35> 'unsigned int' '%'
|   |     | |   |       |-ParenExpr 0x222ba862f10 <col:25, col:31> 'unsigned int'
|   |     | |   |       | `-BinaryOperator 0x222ba862ef0 <col:26, col:30> 'unsigned int' '+'
|   |     | |   |       |   |-ImplicitCastExpr 0x222ba862ec0 <col:26> 'unsigned int' <LValueToRValue>
|   |     | |   |       |   | `-DeclRefExpr 0x222ba862e78 <col:26> 'unsigned int' lvalue Var 0x222ba862008 'n' 'unsigned int'
|   |     | |   |       |   `-ImplicitCastExpr 0x222ba862ed8 <col:30> 'unsigned int' <IntegralCast>
|   |     | |   |       |     `-IntegerLiteral 0x222ba862e98 <col:30> 'int' 1
|   |     | |   |       `-ImplicitCastExpr 0x222ba862f58 <col:35> 'unsigned int' <IntegralCast>
|   |     | |   |         `-IntegerLiteral 0x222ba862f30 <col:35> 'int' 16
|   |     | |   `-IfStmt 0x222ba860100 <line:1207:17, line:1212:17> has_else
|   |     | |     |-BinaryOperator 0x222ba863068 <line:1207:21, col:26> 'int' '=='
|   |     | |     | |-ImplicitCastExpr 0x222ba863038 <col:21> 'unsigned int' <LValueToRValue>
|   |     | |     | | `-DeclRefExpr 0x222ba862ff0 <col:21> 'unsigned int' lvalue Var 0x222ba862008 'n' 'unsigned int'
|   |     | |     | `-ImplicitCastExpr 0x222ba863050 <col:26> 'unsigned int' <IntegralCast>
|   |     | |     |   `-IntegerLiteral 0x222ba863010 <col:26> 'int' 0
|   |     | |     |-NullStmt 0x222ba8600f8 <line:553:28>
|   |     | |     `-CompoundStmt 0x222ba8600e0 <line:1209:22, line:1212:17>
|   |     | |       `-ReturnStmt 0x222ba8600d0 <line:1211:21, col:28>
|   |     | |         `-IntegerLiteral 0x222ba8630c8 <col:28> 'int' 0
|   |     | |-WhileStmt 0x222ba860f48 <line:1220:13, line:1245:13>
|   |     | | |-BinaryOperator 0x222ba860240 <line:1220:20, line:561:36> 'int' '>='
|   |     | | | |-ImplicitCastExpr 0x222ba860210 <line:1220:20> 'size_t':'unsigned long long' <LValueToRValue>
|   |     | | | | `-DeclRefExpr 0x222ba860160 <col:20> 'size_t':'unsigned long long' lvalue ParmVar 0x222ba861b00 'len' 'size_t':'unsigned long long'
|   |     | | | `-ImplicitCastExpr 0x222ba860228 <line:561:29, col:36> 'unsigned long long' <IntegralCast>
|   |     | | |   `-ParenExpr 0x222ba8601f0 <col:29, col:36> 'int'
|   |     | | |     `-BinaryOperator 0x222ba8601d0 <col:30, col:32> 'int' '*'
|   |     | | |       |-IntegerLiteral 0x222ba860180 <col:30> 'int' 3
|   |     | | |       `-IntegerLiteral 0x222ba8601a8 <col:32> 'int' 1024
|   |     | | `-CompoundStmt 0x222ba860f20 <line:1220:40, line:1245:13>
|   |     | |   |-DeclStmt 0x222ba860380 <line:1221:17, col:39>
|   |     | |   | `-VarDecl 0x222ba860270 <col:17, line:561:36> line:1221:24 used j 'size_t':'unsigned long long' cinit
|   |     | |   |   `-ImplicitCastExpr 0x222ba860368 <line:561:29, col:36> 'size_t':'unsigned long long' <IntegralCast>
|   |     | |   |     `-ParenExpr 0x222ba860348 <col:29, col:36> 'int'
|   |     | |   |       `-BinaryOperator 0x222ba860328 <col:30, col:32> 'int' '*'
|   |     | |   |         |-IntegerLiteral 0x222ba8602d8 <col:30> 'int' 3
|   |     | |   |         `-IntegerLiteral 0x222ba860300 <col:32> 'int' 1024
|   |     | |   |-WhileStmt 0x222ba860e10 <line:1224:17, line:1243:17>
|   |     | |   | |-ImplicitCastExpr 0x222ba8604a0 <line:1224:24> 'size_t':'unsigned long long' <LValueToRValue>
|   |     | |   | | `-DeclRefExpr 0x222ba860468 <col:24> 'size_t':'unsigned long long' lvalue Var 0x222ba860270 'j' 'size_t':'unsigned long long'
|   |     | |   | `-CompoundStmt 0x222ba860dd0 <col:27, line:1243:17>
|   |     | |   |   |-DeclStmt 0x222ba8605a0 <line:1225:21, col:50>
|   |     | |   |   | `-VarDecl 0x222ba8604c8 <col:21, col:47> col:29 used out_t 'size_t *' cinit
|   |     | |   |   |   `-CStyleCastExpr 0x222ba860578 <col:37, col:47> 'size_t *' <BitCast>
|   |     | |   |   |     `-ImplicitCastExpr 0x222ba860560 <col:47> 'unsigned char *' <LValueToRValue> part_of_explicit_cast
|   |     | |   |   |       `-DeclRefExpr 0x222ba860530 <col:47> 'unsigned char *' lvalue ParmVar 0x222ba861a88 'out' 'unsigned char *'
|   |     | |   |   |-DeclStmt 0x222ba8606a0 <line:1226:21, col:60>
|   |     | |   |   | `-VarDecl 0x222ba8605c8 <col:21, col:58> col:35 used in_t 'const size_t *' cinit
|   |     | |   |   |   `-CStyleCastExpr 0x222ba860678 <col:42, col:58> 'const size_t *' <BitCast>
|   |     | |   |   |     `-ImplicitCastExpr 0x222ba860660 <col:58> 'const unsigned char *' <LValueToRValue> part_of_explicit_cast
|   |     | |   |   |       `-DeclRefExpr 0x222ba860630 <col:58> 'const unsigned char *' lvalue ParmVar 0x222ba861a08 'in' 'const unsigned char *'
|   |     | |   |   |-UnaryOperator 0x222ba860710 <line:1229:21, col:23> 'unsigned int' prefix '++'
|   |     | |   |   | `-DeclRefExpr 0x222ba8606f0 <col:23> 'unsigned int' lvalue Var 0x222ba8620f0 'ctr' 'unsigned int'
|   |     | |   |   |-CompoundAssignOperator 0x222ba860c98 <line:1240:21, col:28> 'unsigned char *' '+=' ComputeLHSTy='unsigned char *' ComputeResultTy='unsigned char *'
|   |     | |   |   | |-DeclRefExpr 0x222ba860c50 <col:21> 'unsigned char *' lvalue ParmVar 0x222ba861a88 'out' 'unsigned char *'
|   |     | |   |   | `-IntegerLiteral 0x222ba860c70 <col:28> 'int' 16
|   |     | |   |   |-CompoundAssignOperator 0x222ba860d10 <line:1241:21, col:27> 'const unsigned char *' '+=' ComputeLHSTy='const unsigned char *' ComputeResultTy='const unsigned char *'
|   |     | |   |   | |-DeclRefExpr 0x222ba860cc8 <col:21> 'const unsigned char *' lvalue ParmVar 0x222ba861a08 'in' 'const unsigned char *'
|   |     | |   |   | `-IntegerLiteral 0x222ba860ce8 <col:27> 'int' 16
|   |     | |   |   `-CompoundAssignOperator 0x222ba860da0 <line:1242:21, col:26> 'size_t':'unsigned long long' '-=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |     | |   |     |-DeclRefExpr 0x222ba860d40 <col:21> 'size_t':'unsigned long long' lvalue Var 0x222ba860270 'j' 'size_t':'unsigned long long'
|   |     | |   |     `-ImplicitCastExpr 0x222ba860d88 <col:26> 'unsigned long long' <IntegralCast>
|   |     | |   |       `-IntegerLiteral 0x222ba860d60 <col:26> 'int' 16
|   |     | |   `-CompoundAssignOperator 0x222ba860ef0 <line:1244:17, line:561:36> 'size_t':'unsigned long long' '-=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |     | |     |-DeclRefExpr 0x222ba860e28 <line:1244:17> 'size_t':'unsigned long long' lvalue ParmVar 0x222ba861b00 'len' 'size_t':'unsigned long long'
|   |     | |     `-ImplicitCastExpr 0x222ba860ed8 <line:561:29, col:36> 'unsigned long long' <IntegralCast>
|   |     | |       `-ParenExpr 0x222ba860eb8 <col:29, col:36> 'int'
|   |     | |         `-BinaryOperator 0x222ba860e98 <col:30, col:32> 'int' '*'
|   |     | |           |-IntegerLiteral 0x222ba860e48 <col:30> 'int' 3
|   |     | |           `-IntegerLiteral 0x222ba860e70 <col:32> 'int' 1024
|   |     | |-IfStmt 0x222ba85faf0 <line:1247:13, line:1269:13>
|   |     | | |-ParenExpr 0x222ba861090 <line:1247:17, col:41> 'size_t':'unsigned long long'
|   |     | | | `-BinaryOperator 0x222ba861070 <col:18, col:40> 'size_t':'unsigned long long' '='
|   |     | | |   |-DeclRefExpr 0x222ba860f60 <col:18> 'size_t':'unsigned long long' lvalue Var 0x222ba862198 'i' 'size_t':'unsigned long long'
|   |     | | |   `-ParenExpr 0x222ba861050 <col:22, col:40> 'unsigned long long'
|   |     | | |     `-BinaryOperator 0x222ba861030 <col:23, col:38> 'unsigned long long' '&'
|   |     | | |       |-ImplicitCastExpr 0x222ba861018 <col:23> 'size_t':'unsigned long long' <LValueToRValue>
|   |     | | |       | `-DeclRefExpr 0x222ba860f80 <col:23> 'size_t':'unsigned long long' lvalue ParmVar 0x222ba861b00 'len' 'size_t':'unsigned long long'
|   |     | | |       `-CStyleCastExpr 0x222ba860ff0 <col:29, col:38> 'size_t':'unsigned long long' <IntegralCast>
|   |     | | |         `-UnaryOperator 0x222ba860fc8 <col:37, col:38> 'int' prefix '-'
|   |     | | |           `-IntegerLiteral 0x222ba860fa0 <col:38> 'int' 16
|   |     | | `-CompoundStmt 0x222ba85fad8 <col:44, line:1269:13>
|   |     | |   `-WhileStmt 0x222ba85fac0 <line:1249:17, line:1268:17>
|   |     | |     |-BinaryOperator 0x222ba85f178 <line:1249:24, col:31> 'int' '>='
|   |     | |     | |-ImplicitCastExpr 0x222ba85f148 <col:24> 'size_t':'unsigned long long' <LValueToRValue>
|   |     | |     | | `-DeclRefExpr 0x222ba85f100 <col:24> 'size_t':'unsigned long long' lvalue ParmVar 0x222ba861b00 'len' 'size_t':'unsigned long long'
|   |     | |     | `-ImplicitCastExpr 0x222ba85f160 <col:31> 'unsigned long long' <IntegralCast>
|   |     | |     |   `-IntegerLiteral 0x222ba85f120 <col:31> 'int' 16
|   |     | |     `-CompoundStmt 0x222ba85fa80 <col:35, line:1268:17>
|   |     | |       |-DeclStmt 0x222ba85f280 <line:1250:21, col:50>
|   |     | |       | `-VarDecl 0x222ba85f1a8 <col:21, col:47> col:29 used out_t 'size_t *' cinit
|   |     | |       |   `-CStyleCastExpr 0x222ba85f258 <col:37, col:47> 'size_t *' <BitCast>
|   |     | |       |     `-ImplicitCastExpr 0x222ba85f240 <col:47> 'unsigned char *' <LValueToRValue> part_of_explicit_cast
|   |     | |       |       `-DeclRefExpr 0x222ba85f210 <col:47> 'unsigned char *' lvalue ParmVar 0x222ba861a88 'out' 'unsigned char *'
|   |     | |       |-DeclStmt 0x222ba85f380 <line:1251:21, col:60>
|   |     | |       | `-VarDecl 0x222ba85f2a8 <col:21, col:58> col:35 used in_t 'const size_t *' cinit
|   |     | |       |   `-CStyleCastExpr 0x222ba85f358 <col:42, col:58> 'const size_t *' <BitCast>
|   |     | |       |     `-ImplicitCastExpr 0x222ba85f340 <col:58> 'const unsigned char *' <LValueToRValue> part_of_explicit_cast
|   |     | |       |       `-DeclRefExpr 0x222ba85f310 <col:58> 'const unsigned char *' lvalue ParmVar 0x222ba861a08 'in' 'const unsigned char *'
|   |     | |       |-UnaryOperator 0x222ba85f3d8 <line:1254:21, col:23> 'unsigned int' prefix '++'
|   |     | |       | `-DeclRefExpr 0x222ba85f3b8 <col:23> 'unsigned int' lvalue Var 0x222ba8620f0 'ctr' 'unsigned int'
|   |     | |       |-CompoundAssignOperator 0x222ba85f948 <line:1265:21, col:28> 'unsigned char *' '+=' ComputeLHSTy='unsigned char *' ComputeResultTy='unsigned char *'
|   |     | |       | |-DeclRefExpr 0x222ba85f900 <col:21> 'unsigned char *' lvalue ParmVar 0x222ba861a88 'out' 'unsigned char *'
|   |     | |       | `-IntegerLiteral 0x222ba85f920 <col:28> 'int' 16
|   |     | |       |-CompoundAssignOperator 0x222ba85f9c0 <line:1266:21, col:27> 'const unsigned char *' '+=' ComputeLHSTy='const unsigned char *' ComputeResultTy='const unsigned char *'
|   |     | |       | |-DeclRefExpr 0x222ba85f978 <col:21> 'const unsigned char *' lvalue ParmVar 0x222ba861a08 'in' 'const unsigned char *'
|   |     | |       | `-IntegerLiteral 0x222ba85f998 <col:27> 'int' 16
|   |     | |       `-CompoundAssignOperator 0x222ba85fa50 <line:1267:21, col:28> 'size_t':'unsigned long long' '-=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |     | |         |-DeclRefExpr 0x222ba85f9f0 <col:21> 'size_t':'unsigned long long' lvalue ParmVar 0x222ba861b00 'len' 'size_t':'unsigned long long'
|   |     | |         `-ImplicitCastExpr 0x222ba85fa38 <col:28> 'unsigned long long' <IntegralCast>
|   |     | |           `-IntegerLiteral 0x222ba85fa10 <col:28> 'int' 16
|   |     | |-IfStmt 0x222ba863100 <line:1296:13, line:1313:13>
|   |     | | |-ImplicitCastExpr 0x222ba85fb28 <line:1296:17> 'size_t':'unsigned long long' <LValueToRValue>
|   |     | | | `-DeclRefExpr 0x222ba85fb08 <col:17> 'size_t':'unsigned long long' lvalue ParmVar 0x222ba861b00 'len' 'size_t':'unsigned long long'
|   |     | | `-CompoundStmt 0x222ba8600a0 <col:22, line:1313:13>
|   |     | |   |-UnaryOperator 0x222ba85fb80 <line:1298:17, col:19> 'unsigned int' prefix '++'
|   |     | |   | `-DeclRefExpr 0x222ba85fb60 <col:19> 'unsigned int' lvalue Var 0x222ba8620f0 'ctr' 'unsigned int'
|   |     | |   `-WhileStmt 0x222ba860088 <line:1307:17, line:1312:17>
|   |     | |     |-UnaryOperator 0x222ba85fdb8 <line:1307:24, col:27> 'size_t':'unsigned long long' postfix '--'
|   |     | |     | `-DeclRefExpr 0x222ba85fd98 <col:24> 'size_t':'unsigned long long' lvalue ParmVar 0x222ba861b00 'len' 'size_t':'unsigned long long'
|   |     | |     `-CompoundStmt 0x222ba860068 <col:31, line:1312:17>
|   |     | |       |-DeclStmt 0x222ba85fef0 <line:1308:21, col:33>
|   |     | |       | `-VarDecl 0x222ba85fde0 <col:21, col:32> col:24 used c 'u8':'unsigned char' cinit
|   |     | |       |   `-ImplicitCastExpr 0x222ba85fed8 <col:28, col:32> 'unsigned char' <LValueToRValue>
|   |     | |       |     `-ArraySubscriptExpr 0x222ba85feb8 <col:28, col:32> 'const unsigned char' lvalue
|   |     | |       |       |-ImplicitCastExpr 0x222ba85fe88 <col:28> 'const unsigned char *' <LValueToRValue>
|   |     | |       |       | `-DeclRefExpr 0x222ba85fe48 <col:28> 'const unsigned char *' lvalue ParmVar 0x222ba861a08 'in' 'const unsigned char *'
|   |     | |       |       `-ImplicitCastExpr 0x222ba85fea0 <col:31> 'unsigned int' <LValueToRValue>
|   |     | |       |         `-DeclRefExpr 0x222ba85fe68 <col:31> 'unsigned int' lvalue Var 0x222ba862008 'n' 'unsigned int'
|   |     | |       `-UnaryOperator 0x222ba860050 <line:1311:21, col:23> 'unsigned int' prefix '++'
|   |     | |         `-DeclRefExpr 0x222ba860030 <col:23> 'unsigned int' lvalue Var 0x222ba862008 'n' 'unsigned int'
|   |     | `-ReturnStmt 0x222ba863160 <line:1316:13, col:20>
|   |     |   `-IntegerLiteral 0x222ba863138 <col:20> 'int' 0
|   |     `-IntegerLiteral 0x222ba8631a8 <line:1317:18> 'int' 0
|   |-ForStmt 0x222ba863b68 <line:1320:5, line:1340:5>
|   | |-BinaryOperator 0x222ba863280 <line:1320:10, col:14> 'size_t':'unsigned long long' '='
|   | | |-DeclRefExpr 0x222ba863220 <col:10> 'size_t':'unsigned long long' lvalue Var 0x222ba862198 'i' 'size_t':'unsigned long long'
|   | | `-ImplicitCastExpr 0x222ba863268 <col:14> 'size_t':'unsigned long long' <IntegralCast>
|   | |   `-IntegerLiteral 0x222ba863240 <col:14> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x222ba863310 <col:17, col:21> 'int' '<'
|   | | |-ImplicitCastExpr 0x222ba8632e0 <col:17> 'size_t':'unsigned long long' <LValueToRValue>
|   | | | `-DeclRefExpr 0x222ba8632a0 <col:17> 'size_t':'unsigned long long' lvalue Var 0x222ba862198 'i' 'size_t':'unsigned long long'
|   | | `-ImplicitCastExpr 0x222ba8632f8 <col:21> 'size_t':'unsigned long long' <LValueToRValue>
|   | |   `-DeclRefExpr 0x222ba8632c0 <col:21> 'size_t':'unsigned long long' lvalue ParmVar 0x222ba861b00 'len' 'size_t':'unsigned long long'
|   | |-UnaryOperator 0x222ba863350 <col:26, col:28> 'size_t':'unsigned long long' prefix '++'
|   | | `-DeclRefExpr 0x222ba863330 <col:28> 'size_t':'unsigned long long' lvalue Var 0x222ba862198 'i' 'size_t':'unsigned long long'
|   | `-CompoundStmt 0x222ba863b38 <col:31, line:1340:5>
|   |   |-DeclStmt 0x222ba8633e0 <line:1321:9, col:13>
|   |   | `-VarDecl 0x222ba863378 <col:9, col:12> col:12 used c 'u8':'unsigned char'
|   |   |-IfStmt 0x222ba863700 <line:1322:9, line:1333:9>
|   |   | |-BinaryOperator 0x222ba863470 <line:1322:13, col:18> 'int' '=='
|   |   | | |-ImplicitCastExpr 0x222ba863440 <col:13> 'unsigned int' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x222ba8633f8 <col:13> 'unsigned int' lvalue Var 0x222ba862008 'n' 'unsigned int'
|   |   | | `-ImplicitCastExpr 0x222ba863458 <col:18> 'unsigned int' <IntegralCast>
|   |   | |   `-IntegerLiteral 0x222ba863418 <col:18> 'int' 0
|   |   | `-CompoundStmt 0x222ba8636e8 <col:21, line:1333:9>
|   |   |   `-UnaryOperator 0x222ba8634d0 <line:1324:13, col:15> 'unsigned int' prefix '++'
|   |   |     `-DeclRefExpr 0x222ba8634b0 <col:15> 'unsigned int' lvalue Var 0x222ba8620f0 'ctr' 'unsigned int'
|   |   |-BinaryOperator 0x222ba8637f8 <line:1334:9, col:17> 'u8':'unsigned char' '='
|   |   | |-DeclRefExpr 0x222ba863718 <col:9> 'u8':'unsigned char' lvalue Var 0x222ba863378 'c' 'u8':'unsigned char'
|   |   | `-ImplicitCastExpr 0x222ba8637e0 <col:13, col:17> 'unsigned char' <LValueToRValue>
|   |   |   `-ArraySubscriptExpr 0x222ba8637c0 <col:13, col:17> 'const unsigned char' lvalue
|   |   |     |-ImplicitCastExpr 0x222ba863790 <col:13> 'const unsigned char *' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x222ba863750 <col:13> 'const unsigned char *' lvalue ParmVar 0x222ba861a08 'in' 'const unsigned char *'
|   |   |     `-ImplicitCastExpr 0x222ba8637a8 <col:16> 'size_t':'unsigned long long' <LValueToRValue>
|   |   |       `-DeclRefExpr 0x222ba863770 <col:16> 'size_t':'unsigned long long' lvalue Var 0x222ba862198 'i' 'size_t':'unsigned long long'
|   |   `-BinaryOperator 0x222ba863a60 <line:1337:9, col:23> 'unsigned int' '='
|   |     |-DeclRefExpr 0x222ba863928 <col:9> 'unsigned int' lvalue Var 0x222ba862008 'n' 'unsigned int'
|   |     `-BinaryOperator 0x222ba863a40 <col:13, col:23> 'unsigned int' '%'
|   |       |-ParenExpr 0x222ba8639e0 <col:13, col:19> 'unsigned int'
|   |       | `-BinaryOperator 0x222ba8639c0 <col:14, col:18> 'unsigned int' '+'
|   |       |   |-ImplicitCastExpr 0x222ba863990 <col:14> 'unsigned int' <LValueToRValue>
|   |       |   | `-DeclRefExpr 0x222ba863948 <col:14> 'unsigned int' lvalue Var 0x222ba862008 'n' 'unsigned int'
|   |       |   `-ImplicitCastExpr 0x222ba8639a8 <col:18> 'unsigned int' <IntegralCast>
|   |       |     `-IntegerLiteral 0x222ba863968 <col:18> 'int' 1
|   |       `-ImplicitCastExpr 0x222ba863a28 <col:23> 'unsigned int' <IntegralCast>
|   |         `-IntegerLiteral 0x222ba863a00 <col:23> 'int' 16
|   `-ReturnStmt 0x222ba863be8 <line:1343:5, col:12>
|     `-IntegerLiteral 0x222ba863bc0 <col:12> 'int' 0
|-FunctionDecl 0x222ba863fd0 <line:1346:1, line:1468:1> line:1346:5 invalid CRYPTO_gcm128_encrypt_ctr32 'int (int *, const unsigned char *, unsigned char *, size_t, int)'
| |-ParmVarDecl 0x222ba863c78 <col:33, col:49> col:49 invalid ctx 'int *'
| |-ParmVarDecl 0x222ba863cf8 <line:1347:33, col:54> col:54 used in 'const unsigned char *'
| |-ParmVarDecl 0x222ba863d78 <col:58, col:73> col:73 used out 'unsigned char *'
| |-ParmVarDecl 0x222ba863df0 <line:1348:33, col:40> col:40 used len 'size_t':'unsigned long long'
| |-ParmVarDecl 0x222ba863e70 <col:45, col:54> col:54 invalid stream 'int'
| `-CompoundStmt 0x222ba865a68 <line:1349:1, line:1468:1>
|   |-DeclStmt 0x222ba85c3e8 <line:1353:5, line:1356:24>
|   | |-RecordDecl 0x222ba85c090 <line:1353:11, line:1356:5> line:1353:11 union definition
|   | | |-FieldDecl 0x222ba85c168 <line:1354:9, col:14> col:14 one 'long'
|   | | `-FieldDecl 0x222ba85c1d0 <line:1355:9, col:14> col:14 referenced little 'char'
|   | `-VarDecl 0x222ba85c288 <line:1353:5, line:1356:23> col:7 used is_endian 'const union (anonymous union at .//openssl//file_jk/before\crypto\modes\gcm128.c:1353:11)':'const union (anonymous at .//openssl//file_jk/before\crypto\modes\gcm128.c:1353:11)' cinit
|   |   `-InitListExpr 0x222ba85c370 <col:19, col:23> 'union (anonymous union at .//openssl//file_jk/before\crypto\modes\gcm128.c:1353:11)':'union (anonymous at .//openssl//file_jk/before\crypto\modes\gcm128.c:1353:11)' field Field 0x222ba85c168 'one' 'long'
|   |     `-ImplicitCastExpr 0x222ba85c3b8 <col:21> 'long' <IntegralCast>
|   |       `-IntegerLiteral 0x222ba85c2f0 <col:21> 'int' 1
|   |-DeclStmt 0x222ba85c518 <line:1357:5, col:24>
|   | |-VarDecl 0x222ba85c418 <col:5, col:18> col:18 used n 'unsigned int'
|   | `-VarDecl 0x222ba85c498 <col:5, col:21> col:21 used ctr 'unsigned int'
|   |-DeclStmt 0x222ba85c5a8 <line:1358:5, col:13>
|   | `-VarDecl 0x222ba85c540 <col:5, col:12> col:12 used i 'size_t':'unsigned long long'
|   |-DeclStmt 0x222ba85c660 <line:1359:5, col:29>
|   | `-VarDecl 0x222ba85c5d0 <col:5, col:9> col:9 used mlen 'u64':'unsigned long long'
|   |-DeclStmt 0x222ba85c6f8 <line:1360:5, col:25>
|   | `-VarDecl 0x222ba85c690 <col:5, col:11> col:11 used key 'void *'
|   |-CompoundAssignOperator 0x222ba85c798 <line:1369:5, col:13> 'u64':'unsigned long long' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-DeclRefExpr 0x222ba85c710 <col:5> 'u64':'unsigned long long' lvalue Var 0x222ba85c5d0 'mlen' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x222ba85c780 <col:13> 'size_t':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x222ba85c748 <col:13> 'size_t':'unsigned long long' lvalue ParmVar 0x222ba863df0 'len' 'size_t':'unsigned long long'
|   |-IfStmt 0x222ba85cb30 <line:1370:5, line:1371:17>
|   | |-BinaryOperator 0x222ba85cac0 <line:1370:9, col:72> 'int' '||'
|   | | |-BinaryOperator 0x222ba85c910 <col:9, col:36> 'int' '>'
|   | | | |-ImplicitCastExpr 0x222ba85c8f8 <col:9> 'u64':'unsigned long long' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x222ba85c7c8 <col:9> 'u64':'unsigned long long' lvalue Var 0x222ba85c5d0 'mlen' 'u64':'unsigned long long'
|   | | | `-ParenExpr 0x222ba85c8d8 <col:16, col:36> 'unsigned long long'
|   | | |   `-BinaryOperator 0x222ba85c8b8 <col:17, col:34> 'unsigned long long' '-'
|   | | |     |-ParenExpr 0x222ba85c858 <col:17, col:30> 'unsigned long long'
|   | | |     | `-BinaryOperator 0x222ba85c838 <<scratch space>:300:1, .//openssl//file_jk/before\crypto\modes\gcm128.c:1370:28> 'unsigned long long' '<<'
|   | | |     |   |-IntegerLiteral 0x222ba85c7e8 <<scratch space>:300:1> 'unsigned long long' 1
|   | | |     |   `-IntegerLiteral 0x222ba85c810 <.//openssl//file_jk/before\crypto\modes\gcm128.c:1370:28> 'int' 36
|   | | |     `-ImplicitCastExpr 0x222ba85c8a0 <col:34> 'unsigned long long' <IntegralCast>
|   | | |       `-IntegerLiteral 0x222ba85c878 <col:34> 'int' 32
|   | | `-ParenExpr 0x222ba85caa0 <col:41, col:72> 'int'
|   | |   `-BinaryOperator 0x222ba85ca80 <col:42, col:69> 'int' '&&'
|   | |     |-BinaryOperator 0x222ba85c9d0 <col:42, col:57> 'int' '=='
|   | |     | |-UnaryExprOrTypeTraitExpr 0x222ba85c970 <col:42, col:52> 'unsigned long long' sizeof
|   | |     | | `-ParenExpr 0x222ba85c950 <col:48, col:52> 'size_t':'unsigned long long' lvalue
|   | |     | |   `-DeclRefExpr 0x222ba85c930 <col:49> 'size_t':'unsigned long long' lvalue ParmVar 0x222ba863df0 'len' 'size_t':'unsigned long long' non_odr_use_unevaluated
|   | |     | `-ImplicitCastExpr 0x222ba85c9b8 <col:57> 'unsigned long long' <IntegralCast>
|   | |     |   `-IntegerLiteral 0x222ba85c990 <col:57> 'int' 8
|   | |     `-BinaryOperator 0x222ba85ca60 <col:62, col:69> 'int' '<'
|   | |       |-ImplicitCastExpr 0x222ba85ca30 <col:62> 'u64':'unsigned long long' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x222ba85c9f0 <col:62> 'u64':'unsigned long long' lvalue Var 0x222ba85c5d0 'mlen' 'u64':'unsigned long long'
|   | |       `-ImplicitCastExpr 0x222ba85ca48 <col:69> 'size_t':'unsigned long long' <LValueToRValue>
|   | |         `-DeclRefExpr 0x222ba85ca10 <col:69> 'size_t':'unsigned long long' lvalue ParmVar 0x222ba863df0 'len' 'size_t':'unsigned long long'
|   | `-ReturnStmt 0x222ba85cb20 <line:1371:9, col:17>
|   |   `-UnaryOperator 0x222ba85cb08 <col:16, col:17> 'int' prefix '-'
|   |     `-IntegerLiteral 0x222ba85cae0 <col:17> 'int' 1
|   |-IfStmt 0x222ba85cc00 <line:1374:5, line:1378:5>
|   | |-OpaqueValueExpr 0x222ba85cbe8 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x222ba85cbd8 <line:1374:20, line:1378:5>
|   |-IfStmt 0x222ba864380 <line:1390:5, line:1402:5>
|   | |-ImplicitCastExpr 0x222ba85cdb8 <line:1390:9> 'unsigned int' <LValueToRValue>
|   | | `-DeclRefExpr 0x222ba85cd98 <col:9> 'unsigned int' lvalue Var 0x222ba85c418 'n' 'unsigned int'
|   | `-CompoundStmt 0x222ba864360 <col:12, line:1402:5>
|   |   |-WhileStmt 0x222ba8641f0 <line:1391:9, line:1395:9>
|   |   | |-BinaryOperator 0x222ba85ce40 <line:1391:16, col:21> 'int' '&&'
|   |   | | |-ImplicitCastExpr 0x222ba85ce10 <col:16> 'unsigned int' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x222ba85cdd0 <col:16> 'unsigned int' lvalue Var 0x222ba85c418 'n' 'unsigned int'
|   |   | | `-ImplicitCastExpr 0x222ba85ce28 <col:21> 'size_t':'unsigned long long' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x222ba85cdf0 <col:21> 'size_t':'unsigned long long' lvalue ParmVar 0x222ba863df0 'len' 'size_t':'unsigned long long'
|   |   | `-CompoundStmt 0x222ba8641d0 <col:26, line:1395:9>
|   |   |   |-UnaryOperator 0x222ba85cfd0 <line:1393:13, col:15> 'size_t':'unsigned long long' prefix '--'
|   |   |   | `-DeclRefExpr 0x222ba85cfb0 <col:15> 'size_t':'unsigned long long' lvalue ParmVar 0x222ba863df0 'len' 'size_t':'unsigned long long'
|   |   |   `-BinaryOperator 0x222ba8641b0 <line:1394:13, col:27> 'unsigned int' '='
|   |   |     |-DeclRefExpr 0x222ba85cfe8 <col:13> 'unsigned int' lvalue Var 0x222ba85c418 'n' 'unsigned int'
|   |   |     `-BinaryOperator 0x222ba864190 <col:17, col:27> 'unsigned int' '%'
|   |   |       |-ParenExpr 0x222ba864130 <col:17, col:23> 'unsigned int'
|   |   |       | `-BinaryOperator 0x222ba864110 <col:18, col:22> 'unsigned int' '+'
|   |   |       |   |-ImplicitCastExpr 0x222ba85d050 <col:18> 'unsigned int' <LValueToRValue>
|   |   |       |   | `-DeclRefExpr 0x222ba85d008 <col:18> 'unsigned int' lvalue Var 0x222ba85c418 'n' 'unsigned int'
|   |   |       |   `-ImplicitCastExpr 0x222ba85d068 <col:22> 'unsigned int' <IntegralCast>
|   |   |       |     `-IntegerLiteral 0x222ba85d028 <col:22> 'int' 1
|   |   |       `-ImplicitCastExpr 0x222ba864178 <col:27> 'unsigned int' <IntegralCast>
|   |   |         `-IntegerLiteral 0x222ba864150 <col:27> 'int' 16
|   |   `-IfStmt 0x222ba864338 <line:1396:9, line:1401:9> has_else
|   |     |-BinaryOperator 0x222ba864280 <line:1396:13, col:18> 'int' '=='
|   |     | |-ImplicitCastExpr 0x222ba864250 <col:13> 'unsigned int' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x222ba864208 <col:13> 'unsigned int' lvalue Var 0x222ba85c418 'n' 'unsigned int'
|   |     | `-ImplicitCastExpr 0x222ba864268 <col:18> 'unsigned int' <IntegralCast>
|   |     |   `-IntegerLiteral 0x222ba864228 <col:18> 'int' 0
|   |     |-NullStmt 0x222ba864330 <line:553:28>
|   |     `-CompoundStmt 0x222ba864318 <line:1398:14, line:1401:9>
|   |       `-ReturnStmt 0x222ba864308 <line:1400:13, col:20>
|   |         `-IntegerLiteral 0x222ba8642e0 <col:20> 'int' 0
|   |-WhileStmt 0x222ba864ce0 <line:1404:5, line:1419:5>
|   | |-BinaryOperator 0x222ba864478 <line:1404:12, line:561:36> 'int' '>='
|   | | |-ImplicitCastExpr 0x222ba864448 <line:1404:12> 'size_t':'unsigned long long' <LValueToRValue>
|   | | | `-DeclRefExpr 0x222ba864398 <col:12> 'size_t':'unsigned long long' lvalue ParmVar 0x222ba863df0 'len' 'size_t':'unsigned long long'
|   | | `-ImplicitCastExpr 0x222ba864460 <line:561:29, col:36> 'unsigned long long' <IntegralCast>
|   | |   `-ParenExpr 0x222ba864428 <col:29, col:36> 'int'
|   | |     `-BinaryOperator 0x222ba864408 <col:30, col:32> 'int' '*'
|   | |       |-IntegerLiteral 0x222ba8643b8 <col:30> 'int' 3
|   | |       `-IntegerLiteral 0x222ba8643e0 <col:32> 'int' 1024
|   | `-CompoundStmt 0x222ba864cb0 <line:1404:32, line:1419:5>
|   |   |-CompoundAssignOperator 0x222ba8646f8 <line:1406:9, col:30> 'unsigned int' '+=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
|   |   | |-DeclRefExpr 0x222ba8645e8 <col:9> 'unsigned int' lvalue Var 0x222ba85c498 'ctr' 'unsigned int'
|   |   | `-ImplicitCastExpr 0x222ba8646e0 <line:561:29, line:1406:30> 'unsigned int' <IntegralCast>
|   |   |   `-BinaryOperator 0x222ba8646c0 <line:561:29, line:1406:30> 'int' '/'
|   |   |     |-ParenExpr 0x222ba864678 <line:561:29, col:36> 'int'
|   |   |     | `-BinaryOperator 0x222ba864658 <col:30, col:32> 'int' '*'
|   |   |     |   |-IntegerLiteral 0x222ba864608 <col:30> 'int' 3
|   |   |     |   `-IntegerLiteral 0x222ba864630 <col:32> 'int' 1024
|   |   |     `-IntegerLiteral 0x222ba864698 <line:1406:30> 'int' 16
|   |   |-CompoundAssignOperator 0x222ba864aa8 <line:1416:9, line:561:36> 'unsigned char *' '+=' ComputeLHSTy='unsigned char *' ComputeResultTy='unsigned char *'
|   |   | |-DeclRefExpr 0x222ba8649f8 <line:1416:9> 'unsigned char *' lvalue ParmVar 0x222ba863d78 'out' 'unsigned char *'
|   |   | `-ParenExpr 0x222ba864a88 <line:561:29, col:36> 'int'
|   |   |   `-BinaryOperator 0x222ba864a68 <col:30, col:32> 'int' '*'
|   |   |     |-IntegerLiteral 0x222ba864a18 <col:30> 'int' 3
|   |   |     `-IntegerLiteral 0x222ba864a40 <col:32> 'int' 1024
|   |   |-CompoundAssignOperator 0x222ba864b88 <line:1417:9, line:561:36> 'const unsigned char *' '+=' ComputeLHSTy='const unsigned char *' ComputeResultTy='const unsigned char *'
|   |   | |-DeclRefExpr 0x222ba864ad8 <line:1417:9> 'const unsigned char *' lvalue ParmVar 0x222ba863cf8 'in' 'const unsigned char *'
|   |   | `-ParenExpr 0x222ba864b68 <line:561:29, col:36> 'int'
|   |   |   `-BinaryOperator 0x222ba864b48 <col:30, col:32> 'int' '*'
|   |   |     |-IntegerLiteral 0x222ba864af8 <col:30> 'int' 3
|   |   |     `-IntegerLiteral 0x222ba864b20 <col:32> 'int' 1024
|   |   `-CompoundAssignOperator 0x222ba864c80 <line:1418:9, line:561:36> 'size_t':'unsigned long long' '-=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |     |-DeclRefExpr 0x222ba864bb8 <line:1418:9> 'size_t':'unsigned long long' lvalue ParmVar 0x222ba863df0 'len' 'size_t':'unsigned long long'
|   |     `-ImplicitCastExpr 0x222ba864c68 <line:561:29, col:36> 'unsigned long long' <IntegralCast>
|   |       `-ParenExpr 0x222ba864c48 <col:29, col:36> 'int'
|   |         `-BinaryOperator 0x222ba864c28 <col:30, col:32> 'int' '*'
|   |           |-IntegerLiteral 0x222ba864bd8 <col:30> 'int' 3
|   |           `-IntegerLiteral 0x222ba864c00 <col:32> 'int' 1024
|   |-IfStmt 0x222ba865530 <line:1421:5, line:1447:5>
|   | |-ParenExpr 0x222ba864e40 <line:1421:9, col:33> 'size_t':'unsigned long long'
|   | | `-BinaryOperator 0x222ba864e20 <col:10, col:32> 'size_t':'unsigned long long' '='
|   | |   |-DeclRefExpr 0x222ba864cf8 <col:10> 'size_t':'unsigned long long' lvalue Var 0x222ba85c540 'i' 'size_t':'unsigned long long'
|   | |   `-ParenExpr 0x222ba864e00 <col:14, col:32> 'unsigned long long'
|   | |     `-BinaryOperator 0x222ba864de0 <col:15, col:30> 'unsigned long long' '&'
|   | |       |-ImplicitCastExpr 0x222ba864dc8 <col:15> 'size_t':'unsigned long long' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x222ba864d30 <col:15> 'size_t':'unsigned long long' lvalue ParmVar 0x222ba863df0 'len' 'size_t':'unsigned long long'
|   | |       `-CStyleCastExpr 0x222ba864da0 <col:21, col:30> 'size_t':'unsigned long long' <IntegralCast>
|   | |         `-UnaryOperator 0x222ba864d78 <col:29, col:30> 'int' prefix '-'
|   | |           `-IntegerLiteral 0x222ba864d50 <col:30> 'int' 16
|   | `-CompoundStmt 0x222ba8654f8 <col:36, line:1447:5>
|   |   |-DeclStmt 0x222ba864f70 <line:1422:9, col:26>
|   |   | `-VarDecl 0x222ba864e70 <col:9, col:24> col:16 used j 'size_t':'unsigned long long' cinit
|   |   |   `-BinaryOperator 0x222ba864f50 <col:20, col:24> 'unsigned long long' '/'
|   |   |     |-ImplicitCastExpr 0x222ba864f20 <col:20> 'size_t':'unsigned long long' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x222ba864ed8 <col:20> 'size_t':'unsigned long long' lvalue Var 0x222ba85c540 'i' 'size_t':'unsigned long long'
|   |   |     `-ImplicitCastExpr 0x222ba864f38 <col:24> 'unsigned long long' <IntegralCast>
|   |   |       `-IntegerLiteral 0x222ba864ef8 <col:24> 'int' 16
|   |   |-CompoundAssignOperator 0x222ba8650b8 <line:1425:9, col:30> 'unsigned int' '+=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
|   |   | |-DeclRefExpr 0x222ba865020 <col:9> 'unsigned int' lvalue Var 0x222ba85c498 'ctr' 'unsigned int'
|   |   | `-CStyleCastExpr 0x222ba865090 <col:16, col:30> 'unsigned int' <IntegralCast>
|   |   |   `-ImplicitCastExpr 0x222ba865078 <col:30> 'size_t':'unsigned long long' <LValueToRValue> part_of_explicit_cast
|   |   |     `-DeclRefExpr 0x222ba865040 <col:30> 'size_t':'unsigned long long' lvalue Var 0x222ba864e70 'j' 'size_t':'unsigned long long'
|   |   |-CompoundAssignOperator 0x222ba865358 <line:1434:9, col:15> 'const unsigned char *' '+=' ComputeLHSTy='const unsigned char *' ComputeResultTy='const unsigned char *'
|   |   | |-DeclRefExpr 0x222ba865300 <col:9> 'const unsigned char *' lvalue ParmVar 0x222ba863cf8 'in' 'const unsigned char *'
|   |   | `-ImplicitCastExpr 0x222ba865340 <col:15> 'size_t':'unsigned long long' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x222ba865320 <col:15> 'size_t':'unsigned long long' lvalue Var 0x222ba85c540 'i' 'size_t':'unsigned long long'
|   |   |-CompoundAssignOperator 0x222ba8653e0 <line:1435:9, col:16> 'size_t':'unsigned long long' '-=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |   | |-DeclRefExpr 0x222ba865388 <col:9> 'size_t':'unsigned long long' lvalue ParmVar 0x222ba863df0 'len' 'size_t':'unsigned long long'
|   |   | `-ImplicitCastExpr 0x222ba8653c8 <col:16> 'size_t':'unsigned long long' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x222ba8653a8 <col:16> 'size_t':'unsigned long long' lvalue Var 0x222ba85c540 'i' 'size_t':'unsigned long long'
|   |   `-CompoundAssignOperator 0x222ba8654c8 <line:1438:9, col:16> 'unsigned char *' '+=' ComputeLHSTy='unsigned char *' ComputeResultTy='unsigned char *'
|   |     |-DeclRefExpr 0x222ba865470 <col:9> 'unsigned char *' lvalue ParmVar 0x222ba863d78 'out' 'unsigned char *'
|   |     `-ImplicitCastExpr 0x222ba8654b0 <col:16> 'size_t':'unsigned long long' <LValueToRValue>
|   |       `-DeclRefExpr 0x222ba865490 <col:16> 'size_t':'unsigned long long' lvalue Var 0x222ba85c540 'i' 'size_t':'unsigned long long'
|   |-IfStmt 0x222ba8659f8 <line:1448:5, line:1463:5>
|   | |-ImplicitCastExpr 0x222ba865568 <line:1448:9> 'size_t':'unsigned long long' <LValueToRValue>
|   | | `-DeclRefExpr 0x222ba865548 <col:9> 'size_t':'unsigned long long' lvalue ParmVar 0x222ba863df0 'len' 'size_t':'unsigned long long'
|   | `-CompoundStmt 0x222ba8659d8 <col:14, line:1463:5>
|   |   |-UnaryOperator 0x222ba8655c0 <line:1450:9, col:11> 'unsigned int' prefix '++'
|   |   | `-DeclRefExpr 0x222ba8655a0 <col:11> 'unsigned int' lvalue Var 0x222ba85c498 'ctr' 'unsigned int'
|   |   `-WhileStmt 0x222ba8659c0 <line:1459:9, line:1462:9>
|   |     |-UnaryOperator 0x222ba8657f8 <line:1459:16, col:19> 'size_t':'unsigned long long' postfix '--'
|   |     | `-DeclRefExpr 0x222ba8657d8 <col:16> 'size_t':'unsigned long long' lvalue ParmVar 0x222ba863df0 'len' 'size_t':'unsigned long long'
|   |     `-CompoundStmt 0x222ba8659a8 <col:23, line:1462:9>
|   |       `-UnaryOperator 0x222ba865990 <line:1461:13, col:15> 'unsigned int' prefix '++'
|   |         `-DeclRefExpr 0x222ba865970 <col:15> 'unsigned int' lvalue Var 0x222ba85c418 'n' 'unsigned int'
|   `-ReturnStmt 0x222ba865a58 <line:1466:5, col:12>
|     `-IntegerLiteral 0x222ba865a30 <col:12> 'int' 0
|-FunctionDecl 0x222ba865da8 <line:1470:1, line:1599:1> line:1470:5 invalid CRYPTO_gcm128_decrypt_ctr32 'int (int *, const unsigned char *, unsigned char *, size_t, int)'
| |-ParmVarDecl 0x222ba865af8 <col:33, col:49> col:49 invalid ctx 'int *'
| |-ParmVarDecl 0x222ba865b78 <line:1471:33, col:54> col:54 used in 'const unsigned char *'
| |-ParmVarDecl 0x222ba865bf8 <col:58, col:73> col:73 used out 'unsigned char *'
| |-ParmVarDecl 0x222ba865c70 <line:1472:33, col:40> col:40 used len 'size_t':'unsigned long long'
| |-ParmVarDecl 0x222ba865cf0 <col:45, col:54> col:54 invalid stream 'int'
| `-CompoundStmt 0x222ba866a08 <line:1473:1, line:1599:1>
|   |-DeclStmt 0x222ba85e180 <line:1477:5, line:1480:24>
|   | |-RecordDecl 0x222ba865e88 <line:1477:11, line:1480:5> line:1477:11 union definition
|   | | |-FieldDecl 0x222ba865f58 <line:1478:9, col:14> col:14 one 'long'
|   | | `-FieldDecl 0x222ba865fc0 <line:1479:9, col:14> col:14 referenced little 'char'
|   | `-VarDecl 0x222ba866078 <line:1477:5, line:1480:23> col:7 used is_endian 'const union (anonymous union at .//openssl//file_jk/before\crypto\modes\gcm128.c:1477:11)':'const union (anonymous at .//openssl//file_jk/before\crypto\modes\gcm128.c:1477:11)' cinit
|   |   `-InitListExpr 0x222ba85e108 <col:19, col:23> 'union (anonymous union at .//openssl//file_jk/before\crypto\modes\gcm128.c:1477:11)':'union (anonymous at .//openssl//file_jk/before\crypto\modes\gcm128.c:1477:11)' field Field 0x222ba865f58 'one' 'long'
|   |     `-ImplicitCastExpr 0x222ba85e150 <col:21> 'long' <IntegralCast>
|   |       `-IntegerLiteral 0x222ba8660e0 <col:21> 'int' 1
|   |-DeclStmt 0x222ba85e2b0 <line:1481:5, col:24>
|   | |-VarDecl 0x222ba85e1b0 <col:5, col:18> col:18 used n 'unsigned int'
|   | `-VarDecl 0x222ba85e230 <col:5, col:21> col:21 used ctr 'unsigned int'
|   |-DeclStmt 0x222ba85e340 <line:1482:5, col:13>
|   | `-VarDecl 0x222ba85e2d8 <col:5, col:12> col:12 used i 'size_t':'unsigned long long'
|   |-DeclStmt 0x222ba85e3f8 <line:1483:5, col:29>
|   | `-VarDecl 0x222ba85e368 <col:5, col:9> col:9 used mlen 'u64':'unsigned long long'
|   |-DeclStmt 0x222ba85e490 <line:1484:5, col:25>
|   | `-VarDecl 0x222ba85e428 <col:5, col:11> col:11 used key 'void *'
|   |-CompoundAssignOperator 0x222ba85e530 <line:1493:5, col:13> 'u64':'unsigned long long' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |-DeclRefExpr 0x222ba85e4a8 <col:5> 'u64':'unsigned long long' lvalue Var 0x222ba85e368 'mlen' 'u64':'unsigned long long'
|   | `-ImplicitCastExpr 0x222ba85e518 <col:13> 'size_t':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x222ba85e4e0 <col:13> 'size_t':'unsigned long long' lvalue ParmVar 0x222ba865c70 'len' 'size_t':'unsigned long long'
|   |-IfStmt 0x222ba85e8c8 <line:1494:5, line:1495:17>
|   | |-BinaryOperator 0x222ba85e858 <line:1494:9, col:72> 'int' '||'
|   | | |-BinaryOperator 0x222ba85e6a8 <col:9, col:36> 'int' '>'
|   | | | |-ImplicitCastExpr 0x222ba85e690 <col:9> 'u64':'unsigned long long' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x222ba85e560 <col:9> 'u64':'unsigned long long' lvalue Var 0x222ba85e368 'mlen' 'u64':'unsigned long long'
|   | | | `-ParenExpr 0x222ba85e670 <col:16, col:36> 'unsigned long long'
|   | | |   `-BinaryOperator 0x222ba85e650 <col:17, col:34> 'unsigned long long' '-'
|   | | |     |-ParenExpr 0x222ba85e5f0 <col:17, col:30> 'unsigned long long'
|   | | |     | `-BinaryOperator 0x222ba85e5d0 <<scratch space>:301:1, .//openssl//file_jk/before\crypto\modes\gcm128.c:1494:28> 'unsigned long long' '<<'
|   | | |     |   |-IntegerLiteral 0x222ba85e580 <<scratch space>:301:1> 'unsigned long long' 1
|   | | |     |   `-IntegerLiteral 0x222ba85e5a8 <.//openssl//file_jk/before\crypto\modes\gcm128.c:1494:28> 'int' 36
|   | | |     `-ImplicitCastExpr 0x222ba85e638 <col:34> 'unsigned long long' <IntegralCast>
|   | | |       `-IntegerLiteral 0x222ba85e610 <col:34> 'int' 32
|   | | `-ParenExpr 0x222ba85e838 <col:41, col:72> 'int'
|   | |   `-BinaryOperator 0x222ba85e818 <col:42, col:69> 'int' '&&'
|   | |     |-BinaryOperator 0x222ba85e768 <col:42, col:57> 'int' '=='
|   | |     | |-UnaryExprOrTypeTraitExpr 0x222ba85e708 <col:42, col:52> 'unsigned long long' sizeof
|   | |     | | `-ParenExpr 0x222ba85e6e8 <col:48, col:52> 'size_t':'unsigned long long' lvalue
|   | |     | |   `-DeclRefExpr 0x222ba85e6c8 <col:49> 'size_t':'unsigned long long' lvalue ParmVar 0x222ba865c70 'len' 'size_t':'unsigned long long' non_odr_use_unevaluated
|   | |     | `-ImplicitCastExpr 0x222ba85e750 <col:57> 'unsigned long long' <IntegralCast>
|   | |     |   `-IntegerLiteral 0x222ba85e728 <col:57> 'int' 8
|   | |     `-BinaryOperator 0x222ba85e7f8 <col:62, col:69> 'int' '<'
|   | |       |-ImplicitCastExpr 0x222ba85e7c8 <col:62> 'u64':'unsigned long long' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x222ba85e788 <col:62> 'u64':'unsigned long long' lvalue Var 0x222ba85e368 'mlen' 'u64':'unsigned long long'
|   | |       `-ImplicitCastExpr 0x222ba85e7e0 <col:69> 'size_t':'unsigned long long' <LValueToRValue>
|   | |         `-DeclRefExpr 0x222ba85e7a8 <col:69> 'size_t':'unsigned long long' lvalue ParmVar 0x222ba865c70 'len' 'size_t':'unsigned long long'
|   | `-ReturnStmt 0x222ba85e8b8 <line:1495:9, col:17>
|   |   `-UnaryOperator 0x222ba85e8a0 <col:16, col:17> 'int' prefix '-'
|   |     `-IntegerLiteral 0x222ba85e878 <col:17> 'int' 1
|   |-IfStmt 0x222ba85e998 <line:1498:5, line:1502:5>
|   | |-OpaqueValueExpr 0x222ba85e980 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x222ba85e970 <line:1498:20, line:1502:5>
|   |-IfStmt 0x222ba867220 <line:1514:5, line:1528:5>
|   | |-ImplicitCastExpr 0x222ba85eb50 <line:1514:9> 'unsigned int' <LValueToRValue>
|   | | `-DeclRefExpr 0x222ba85eb30 <col:9> 'unsigned int' lvalue Var 0x222ba85e1b0 'n' 'unsigned int'
|   | `-CompoundStmt 0x222ba867200 <col:12, line:1528:5>
|   |   |-WhileStmt 0x222ba85f000 <line:1515:9, line:1521:9>
|   |   | |-BinaryOperator 0x222ba85ebd8 <line:1515:16, col:21> 'int' '&&'
|   |   | | |-ImplicitCastExpr 0x222ba85eba8 <col:16> 'unsigned int' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x222ba85eb68 <col:16> 'unsigned int' lvalue Var 0x222ba85e1b0 'n' 'unsigned int'
|   |   | | `-ImplicitCastExpr 0x222ba85ebc0 <col:21> 'size_t':'unsigned long long' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x222ba85eb88 <col:21> 'size_t':'unsigned long long' lvalue ParmVar 0x222ba865c70 'len' 'size_t':'unsigned long long'
|   |   | `-CompoundStmt 0x222ba85efd8 <col:26, line:1521:9>
|   |   |   |-DeclStmt 0x222ba85ed10 <line:1516:13, col:27>
|   |   |   | `-VarDecl 0x222ba85ec08 <col:13, col:26> col:16 used c 'u8':'unsigned char' cinit
|   |   |   |   `-ImplicitCastExpr 0x222ba85ecf8 <col:20, col:26> 'unsigned char' <LValueToRValue>
|   |   |   |     `-UnaryOperator 0x222ba85ece0 <col:20, col:26> 'const unsigned char' lvalue prefix '*' cannot overflow
|   |   |   |       `-ParenExpr 0x222ba85ecc0 <col:21, col:26> 'const unsigned char *'
|   |   |   |         `-UnaryOperator 0x222ba85eca8 <col:22, col:24> 'const unsigned char *' postfix '++'
|   |   |   |           `-DeclRefExpr 0x222ba85ec70 <col:22> 'const unsigned char *' lvalue ParmVar 0x222ba865b78 'in' 'const unsigned char *'
|   |   |   |-UnaryOperator 0x222ba85ee68 <line:1519:13, col:15> 'size_t':'unsigned long long' prefix '--'
|   |   |   | `-DeclRefExpr 0x222ba85ee48 <col:15> 'size_t':'unsigned long long' lvalue ParmVar 0x222ba865c70 'len' 'size_t':'unsigned long long'
|   |   |   `-BinaryOperator 0x222ba85efb8 <line:1520:13, col:27> 'unsigned int' '='
|   |   |     |-DeclRefExpr 0x222ba85ee80 <col:13> 'unsigned int' lvalue Var 0x222ba85e1b0 'n' 'unsigned int'
|   |   |     `-BinaryOperator 0x222ba85ef98 <col:17, col:27> 'unsigned int' '%'
|   |   |       |-ParenExpr 0x222ba85ef38 <col:17, col:23> 'unsigned int'
|   |   |       | `-BinaryOperator 0x222ba85ef18 <col:18, col:22> 'unsigned int' '+'
|   |   |       |   |-ImplicitCastExpr 0x222ba85eee8 <col:18> 'unsigned int' <LValueToRValue>
|   |   |       |   | `-DeclRefExpr 0x222ba85eea0 <col:18> 'unsigned int' lvalue Var 0x222ba85e1b0 'n' 'unsigned int'
|   |   |       |   `-ImplicitCastExpr 0x222ba85ef00 <col:22> 'unsigned int' <IntegralCast>
|   |   |       |     `-IntegerLiteral 0x222ba85eec0 <col:22> 'int' 1
|   |   |       `-ImplicitCastExpr 0x222ba85ef80 <col:27> 'unsigned int' <IntegralCast>
|   |   |         `-IntegerLiteral 0x222ba85ef58 <col:27> 'int' 16
|   |   `-IfStmt 0x222ba8671d8 <line:1522:9, line:1527:9> has_else
|   |     |-BinaryOperator 0x222ba85f090 <line:1522:13, col:18> 'int' '=='
|   |     | |-ImplicitCastExpr 0x222ba85f060 <col:13> 'unsigned int' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x222ba85f018 <col:13> 'unsigned int' lvalue Var 0x222ba85e1b0 'n' 'unsigned int'
|   |     | `-ImplicitCastExpr 0x222ba85f078 <col:18> 'unsigned int' <IntegralCast>
|   |     |   `-IntegerLiteral 0x222ba85f038 <col:18> 'int' 0
|   |     |-NullStmt 0x222ba8671d0 <line:553:28>
|   |     `-CompoundStmt 0x222ba8671b8 <line:1524:14, line:1527:9>
|   |       `-ReturnStmt 0x222ba8671a8 <line:1526:13, col:20>
|   |         `-IntegerLiteral 0x222ba867180 <col:20> 'int' 0
|   |-WhileStmt 0x222ba867b80 <line:1530:5, line:1545:5>
|   | |-BinaryOperator 0x222ba867318 <line:1530:12, line:561:36> 'int' '>='
|   | | |-ImplicitCastExpr 0x222ba8672e8 <line:1530:12> 'size_t':'unsigned long long' <LValueToRValue>
|   | | | `-DeclRefExpr 0x222ba867238 <col:12> 'size_t':'unsigned long long' lvalue ParmVar 0x222ba865c70 'len' 'size_t':'unsigned long long'
|   | | `-ImplicitCastExpr 0x222ba867300 <line:561:29, col:36> 'unsigned long long' <IntegralCast>
|   | |   `-ParenExpr 0x222ba8672c8 <col:29, col:36> 'int'
|   | |     `-BinaryOperator 0x222ba8672a8 <col:30, col:32> 'int' '*'
|   | |       |-IntegerLiteral 0x222ba867258 <col:30> 'int' 3
|   | |       `-IntegerLiteral 0x222ba867280 <col:32> 'int' 1024
|   | `-CompoundStmt 0x222ba867b50 <line:1530:32, line:1545:5>
|   |   |-CompoundAssignOperator 0x222ba867668 <line:1533:9, col:30> 'unsigned int' '+=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
|   |   | |-DeclRefExpr 0x222ba867558 <col:9> 'unsigned int' lvalue Var 0x222ba85e230 'ctr' 'unsigned int'
|   |   | `-ImplicitCastExpr 0x222ba867650 <line:561:29, line:1533:30> 'unsigned int' <IntegralCast>
|   |   |   `-BinaryOperator 0x222ba867630 <line:561:29, line:1533:30> 'int' '/'
|   |   |     |-ParenExpr 0x222ba8675e8 <line:561:29, col:36> 'int'
|   |   |     | `-BinaryOperator 0x222ba8675c8 <col:30, col:32> 'int' '*'
|   |   |     |   |-IntegerLiteral 0x222ba867578 <col:30> 'int' 3
|   |   |     |   `-IntegerLiteral 0x222ba8675a0 <col:32> 'int' 1024
|   |   |     `-IntegerLiteral 0x222ba867608 <line:1533:30> 'int' 16
|   |   |-CompoundAssignOperator 0x222ba867948 <line:1542:9, line:561:36> 'unsigned char *' '+=' ComputeLHSTy='unsigned char *' ComputeResultTy='unsigned char *'
|   |   | |-DeclRefExpr 0x222ba867898 <line:1542:9> 'unsigned char *' lvalue ParmVar 0x222ba865bf8 'out' 'unsigned char *'
|   |   | `-ParenExpr 0x222ba867928 <line:561:29, col:36> 'int'
|   |   |   `-BinaryOperator 0x222ba867908 <col:30, col:32> 'int' '*'
|   |   |     |-IntegerLiteral 0x222ba8678b8 <col:30> 'int' 3
|   |   |     `-IntegerLiteral 0x222ba8678e0 <col:32> 'int' 1024
|   |   |-CompoundAssignOperator 0x222ba867a28 <line:1543:9, line:561:36> 'const unsigned char *' '+=' ComputeLHSTy='const unsigned char *' ComputeResultTy='const unsigned char *'
|   |   | |-DeclRefExpr 0x222ba867978 <line:1543:9> 'const unsigned char *' lvalue ParmVar 0x222ba865b78 'in' 'const unsigned char *'
|   |   | `-ParenExpr 0x222ba867a08 <line:561:29, col:36> 'int'
|   |   |   `-BinaryOperator 0x222ba8679e8 <col:30, col:32> 'int' '*'
|   |   |     |-IntegerLiteral 0x222ba867998 <col:30> 'int' 3
|   |   |     `-IntegerLiteral 0x222ba8679c0 <col:32> 'int' 1024
|   |   `-CompoundAssignOperator 0x222ba867b20 <line:1544:9, line:561:36> 'size_t':'unsigned long long' '-=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |     |-DeclRefExpr 0x222ba867a58 <line:1544:9> 'size_t':'unsigned long long' lvalue ParmVar 0x222ba865c70 'len' 'size_t':'unsigned long long'
|   |     `-ImplicitCastExpr 0x222ba867b08 <line:561:29, col:36> 'unsigned long long' <IntegralCast>
|   |       `-ParenExpr 0x222ba867ae8 <col:29, col:36> 'int'
|   |         `-BinaryOperator 0x222ba867ac8 <col:30, col:32> 'int' '*'
|   |           |-IntegerLiteral 0x222ba867a78 <col:30> 'int' 3
|   |           `-IntegerLiteral 0x222ba867aa0 <col:32> 'int' 1024
|   |-IfStmt 0x222ba8663c8 <line:1547:5, line:1576:5>
|   | |-ParenExpr 0x222ba867ce0 <line:1547:9, col:33> 'size_t':'unsigned long long'
|   | | `-BinaryOperator 0x222ba867cc0 <col:10, col:32> 'size_t':'unsigned long long' '='
|   | |   |-DeclRefExpr 0x222ba867b98 <col:10> 'size_t':'unsigned long long' lvalue Var 0x222ba85e2d8 'i' 'size_t':'unsigned long long'
|   | |   `-ParenExpr 0x222ba867ca0 <col:14, col:32> 'unsigned long long'
|   | |     `-BinaryOperator 0x222ba867c80 <col:15, col:30> 'unsigned long long' '&'
|   | |       |-ImplicitCastExpr 0x222ba867c68 <col:15> 'size_t':'unsigned long long' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x222ba867bd0 <col:15> 'size_t':'unsigned long long' lvalue ParmVar 0x222ba865c70 'len' 'size_t':'unsigned long long'
|   | |       `-CStyleCastExpr 0x222ba867c40 <col:21, col:30> 'size_t':'unsigned long long' <IntegralCast>
|   | |         `-UnaryOperator 0x222ba867c18 <col:29, col:30> 'int' prefix '-'
|   | |           `-IntegerLiteral 0x222ba867bf0 <col:30> 'int' 16
|   | `-CompoundStmt 0x222ba866390 <col:36, line:1576:5>
|   |   |-DeclStmt 0x222ba867e10 <line:1548:9, col:26>
|   |   | `-VarDecl 0x222ba867d10 <col:9, col:24> col:16 used j 'size_t':'unsigned long long' cinit
|   |   |   `-BinaryOperator 0x222ba867df0 <col:20, col:24> 'unsigned long long' '/'
|   |   |     |-ImplicitCastExpr 0x222ba867dc0 <col:20> 'size_t':'unsigned long long' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x222ba867d78 <col:20> 'size_t':'unsigned long long' lvalue Var 0x222ba85e2d8 'i' 'size_t':'unsigned long long'
|   |   |     `-ImplicitCastExpr 0x222ba867dd8 <col:24> 'unsigned long long' <IntegralCast>
|   |   |       `-IntegerLiteral 0x222ba867d98 <col:24> 'int' 16
|   |   |-CompoundAssignOperator 0x222ba867fb8 <line:1564:9, col:30> 'unsigned int' '+=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
|   |   | |-DeclRefExpr 0x222ba867f20 <col:9> 'unsigned int' lvalue Var 0x222ba85e230 'ctr' 'unsigned int'
|   |   | `-CStyleCastExpr 0x222ba867f90 <col:16, col:30> 'unsigned int' <IntegralCast>
|   |   |   `-ImplicitCastExpr 0x222ba867f78 <col:30> 'size_t':'unsigned long long' <LValueToRValue> part_of_explicit_cast
|   |   |     `-DeclRefExpr 0x222ba867f40 <col:30> 'size_t':'unsigned long long' lvalue Var 0x222ba867d10 'j' 'size_t':'unsigned long long'
|   |   |-CompoundAssignOperator 0x222ba866250 <line:1573:9, col:16> 'unsigned char *' '+=' ComputeLHSTy='unsigned char *' ComputeResultTy='unsigned char *'
|   |   | |-DeclRefExpr 0x222ba8661f8 <col:9> 'unsigned char *' lvalue ParmVar 0x222ba865bf8 'out' 'unsigned char *'
|   |   | `-ImplicitCastExpr 0x222ba866238 <col:16> 'size_t':'unsigned long long' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x222ba866218 <col:16> 'size_t':'unsigned long long' lvalue Var 0x222ba85e2d8 'i' 'size_t':'unsigned long long'
|   |   |-CompoundAssignOperator 0x222ba8662d8 <line:1574:9, col:15> 'const unsigned char *' '+=' ComputeLHSTy='const unsigned char *' ComputeResultTy='const unsigned char *'
|   |   | |-DeclRefExpr 0x222ba866280 <col:9> 'const unsigned char *' lvalue ParmVar 0x222ba865b78 'in' 'const unsigned char *'
|   |   | `-ImplicitCastExpr 0x222ba8662c0 <col:15> 'size_t':'unsigned long long' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x222ba8662a0 <col:15> 'size_t':'unsigned long long' lvalue Var 0x222ba85e2d8 'i' 'size_t':'unsigned long long'
|   |   `-CompoundAssignOperator 0x222ba866360 <line:1575:9, col:16> 'size_t':'unsigned long long' '-=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   |     |-DeclRefExpr 0x222ba866308 <col:9> 'size_t':'unsigned long long' lvalue ParmVar 0x222ba865c70 'len' 'size_t':'unsigned long long'
|   |     `-ImplicitCastExpr 0x222ba866348 <col:16> 'size_t':'unsigned long long' <LValueToRValue>
|   |       `-DeclRefExpr 0x222ba866328 <col:16> 'size_t':'unsigned long long' lvalue Var 0x222ba85e2d8 'i' 'size_t':'unsigned long long'
|   |-IfStmt 0x222ba866998 <line:1577:5, line:1594:5>
|   | |-ImplicitCastExpr 0x222ba866400 <line:1577:9> 'size_t':'unsigned long long' <LValueToRValue>
|   | | `-DeclRefExpr 0x222ba8663e0 <col:9> 'size_t':'unsigned long long' lvalue ParmVar 0x222ba865c70 'len' 'size_t':'unsigned long long'
|   | `-CompoundStmt 0x222ba866978 <col:14, line:1594:5>
|   |   |-UnaryOperator 0x222ba866458 <line:1579:9, col:11> 'unsigned int' prefix '++'
|   |   | `-DeclRefExpr 0x222ba866438 <col:11> 'unsigned int' lvalue Var 0x222ba85e230 'ctr' 'unsigned int'
|   |   `-WhileStmt 0x222ba866960 <line:1588:9, line:1593:9>
|   |     |-UnaryOperator 0x222ba866690 <line:1588:16, col:19> 'size_t':'unsigned long long' postfix '--'
|   |     | `-DeclRefExpr 0x222ba866670 <col:16> 'size_t':'unsigned long long' lvalue ParmVar 0x222ba865c70 'len' 'size_t':'unsigned long long'
|   |     `-CompoundStmt 0x222ba866940 <col:23, line:1593:9>
|   |       |-DeclStmt 0x222ba8667c8 <line:1589:13, col:25>
|   |       | `-VarDecl 0x222ba8666b8 <col:13, col:24> col:16 used c 'u8':'unsigned char' cinit
|   |       |   `-ImplicitCastExpr 0x222ba8667b0 <col:20, col:24> 'unsigned char' <LValueToRValue>
|   |       |     `-ArraySubscriptExpr 0x222ba866790 <col:20, col:24> 'const unsigned char' lvalue
|   |       |       |-ImplicitCastExpr 0x222ba866760 <col:20> 'const unsigned char *' <LValueToRValue>
|   |       |       | `-DeclRefExpr 0x222ba866720 <col:20> 'const unsigned char *' lvalue ParmVar 0x222ba865b78 'in' 'const unsigned char *'
|   |       |       `-ImplicitCastExpr 0x222ba866778 <col:23> 'unsigned int' <LValueToRValue>
|   |       |         `-DeclRefExpr 0x222ba866740 <col:23> 'unsigned int' lvalue Var 0x222ba85e1b0 'n' 'unsigned int'
|   |       `-UnaryOperator 0x222ba866928 <line:1592:13, col:15> 'unsigned int' prefix '++'
|   |         `-DeclRefExpr 0x222ba866908 <col:15> 'unsigned int' lvalue Var 0x222ba85e1b0 'n' 'unsigned int'
|   `-ReturnStmt 0x222ba8669f8 <line:1597:5, col:12>
|     `-IntegerLiteral 0x222ba8669d0 <col:12> 'int' 0
|-FunctionDecl 0x222ba866c38 <line:1601:1, line:1643:1> line:1601:5 invalid CRYPTO_gcm128_finish 'int (int *, const unsigned char *, size_t)'
| |-ParmVarDecl 0x222ba866a98 <col:26, col:42> col:42 invalid ctx 'int *'
| |-ParmVarDecl 0x222ba866b18 <col:47, col:68> col:68 used tag 'const unsigned char *'
| |-ParmVarDecl 0x222ba866b90 <line:1602:26, col:33> col:33 used len 'size_t':'unsigned long long'
| `-CompoundStmt 0x222ba8c6810 <line:1603:1, line:1643:1>
|   |-DeclStmt 0x222ba867058 <line:1604:5, line:1607:24>
|   | |-RecordDecl 0x222ba866d08 <line:1604:11, line:1607:5> line:1604:11 union definition
|   | | |-FieldDecl 0x222ba866dd8 <line:1605:9, col:14> col:14 one 'long'
|   | | `-FieldDecl 0x222ba866e40 <line:1606:9, col:14> col:14 referenced little 'char'
|   | `-VarDecl 0x222ba866ef8 <line:1604:5, line:1607:23> col:7 used is_endian 'const union (anonymous union at .//openssl//file_jk/before\crypto\modes\gcm128.c:1604:11)':'const union (anonymous at .//openssl//file_jk/before\crypto\modes\gcm128.c:1604:11)' cinit
|   |   `-InitListExpr 0x222ba866fe0 <col:19, col:23> 'union (anonymous union at .//openssl//file_jk/before\crypto\modes\gcm128.c:1604:11)':'union (anonymous at .//openssl//file_jk/before\crypto\modes\gcm128.c:1604:11)' field Field 0x222ba866dd8 'one' 'long'
|   |     `-ImplicitCastExpr 0x222ba867028 <col:21> 'long' <IntegralCast>
|   |       `-IntegerLiteral 0x222ba866f60 <col:21> 'int' 1
|   |-DeclStmt 0x222ba8c5f98 <line:1608:5, col:34>
|   | `-VarDecl 0x222ba867080 <col:5, col:9> col:9 used alen 'u64':'unsigned long long'
|   |-DeclStmt 0x222ba8c6078 <line:1609:5, col:34>
|   | `-VarDecl 0x222ba8c5fc0 <col:5, col:9> col:9 used clen 'u64':'unsigned long long'
|   |-IfStmt 0x222ba8c6420 <line:1617:5, line:1630:5>
|   | |-ImplicitCastExpr 0x222ba8c6118 <line:1617:9, col:19> 'char' <LValueToRValue>
|   | | `-MemberExpr 0x222ba8c60e8 <col:9, col:19> 'const char' lvalue .little 0x222ba866e40
|   | |   `-DeclRefExpr 0x222ba8c60b0 <col:9> 'const union (anonymous union at .//openssl//file_jk/before\crypto\modes\gcm128.c:1604:11)':'const union (anonymous at .//openssl//file_jk/before\crypto\modes\gcm128.c:1604:11)' lvalue Var 0x222ba866ef8 'is_endian' 'const union (anonymous union at .//openssl//file_jk/before\crypto\modes\gcm128.c:1604:11)':'const union (anonymous at .//openssl//file_jk/before\crypto\modes\gcm128.c:1604:11)'
|   | `-CompoundStmt 0x222ba8c6400 <col:27, line:1630:5>
|   |   |-BinaryOperator 0x222ba8c6278 <line:1619:9, .//openssl//file_jk/before\crypto\modes/modes_lcl.h:77:50> 'u64':'unsigned long long' '='
|   |   | |-DeclRefExpr 0x222ba8c6130 <.//openssl//file_jk/before\crypto\modes\gcm128.c:1619:9> 'u64':'unsigned long long' lvalue Var 0x222ba867080 'alen' 'u64':'unsigned long long'
|   |   | `-CallExpr 0x222ba8c6250 <.//openssl//file_jk/before\crypto\modes/modes_lcl.h:77:25, col:50> 'unsigned long long'
|   |   |   |-ImplicitCastExpr 0x222ba8c6238 <col:25> 'unsigned long long (*)(unsigned long long)' <FunctionToPointerDecay>
|   |   |   | `-DeclRefExpr 0x222ba8c6168 <col:25> 'unsigned long long (unsigned long long)' Function 0x222ba851e40 '_byteswap_uint64' 'unsigned long long (unsigned long long)'
|   |   |   `-CStyleCastExpr 0x222ba8c6210 <col:42, col:49> 'u64':'unsigned long long' <NoOp>
|   |   |     `-ImplicitCastExpr 0x222ba8c61f8 <col:47, col:49> 'u64':'unsigned long long' <LValueToRValue> part_of_explicit_cast
|   |   |       `-ParenExpr 0x222ba8c61d8 <col:47, col:49> 'u64':'unsigned long long' lvalue
|   |   |         `-DeclRefExpr 0x222ba8c6188 <.//openssl//file_jk/before\crypto\modes\gcm128.c:1619:23> 'u64':'unsigned long long' lvalue Var 0x222ba867080 'alen' 'u64':'unsigned long long'
|   |   `-BinaryOperator 0x222ba8c63e0 <line:1620:9, .//openssl//file_jk/before\crypto\modes/modes_lcl.h:77:50> 'u64':'unsigned long long' '='
|   |     |-DeclRefExpr 0x222ba8c6298 <.//openssl//file_jk/before\crypto\modes\gcm128.c:1620:9> 'u64':'unsigned long long' lvalue Var 0x222ba8c5fc0 'clen' 'u64':'unsigned long long'
|   |     `-CallExpr 0x222ba8c63b8 <.//openssl//file_jk/before\crypto\modes/modes_lcl.h:77:25, col:50> 'unsigned long long'
|   |       |-ImplicitCastExpr 0x222ba8c63a0 <col:25> 'unsigned long long (*)(unsigned long long)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x222ba8c62d0 <col:25> 'unsigned long long (unsigned long long)' Function 0x222ba851e40 '_byteswap_uint64' 'unsigned long long (unsigned long long)'
|   |       `-CStyleCastExpr 0x222ba8c6378 <col:42, col:49> 'u64':'unsigned long long' <NoOp>
|   |         `-ImplicitCastExpr 0x222ba8c6360 <col:47, col:49> 'u64':'unsigned long long' <LValueToRValue> part_of_explicit_cast
|   |           `-ParenExpr 0x222ba8c6340 <col:47, col:49> 'u64':'unsigned long long' lvalue
|   |             `-DeclRefExpr 0x222ba8c62f0 <.//openssl//file_jk/before\crypto\modes\gcm128.c:1620:23> 'u64':'unsigned long long' lvalue Var 0x222ba8c5fc0 'clen' 'u64':'unsigned long long'
|   `-IfStmt 0x222ba8c67e8 <line:1639:5, line:1642:17> has_else
|     |-OpaqueValueExpr 0x222ba8c67d0 <<invalid sloc>> '_Bool'
|     |-NullStmt 0x222ba8c67c8 <line:1640:9>
|     `-ReturnStmt 0x222ba8c67b8 <line:1642:9, col:17>
|       `-UnaryOperator 0x222ba8c67a0 <col:16, col:17> 'int' prefix '-'
|         `-IntegerLiteral 0x222ba8c6778 <col:17> 'int' 1
|-FunctionDecl 0x222ba8c6a78 <line:1645:1, line:1650:1> line:1645:6 invalid CRYPTO_gcm128_tag 'void (int *, unsigned char *, size_t)'
| |-ParmVarDecl 0x222ba8c6860 <col:24, col:40> col:40 invalid ctx 'int *'
| |-ParmVarDecl 0x222ba8c68e0 <col:45, col:60> col:60 used tag 'unsigned char *'
| |-ParmVarDecl 0x222ba8c6958 <col:65, col:72> col:72 used len 'size_t':'unsigned long long'
| `-CompoundStmt 0x222ba8c6ca8 <line:1646:1, line:1650:1>
|-FunctionDecl 0x222ba8c6e30 <line:1652:1, line:1660:1> line:1652:17 invalid CRYPTO_gcm128_new 'int *(void *, int)'
| |-ParmVarDecl 0x222ba8c6cd0 <col:35, col:41> col:41 used key 'void *'
| |-ParmVarDecl 0x222ba8c6d50 <col:46, col:57> col:57 invalid block 'int'
| `-CompoundStmt 0x222ba8c30e8 <line:1653:1, line:1660:1>
`-FunctionDecl 0x222ba8c31d8 <line:1662:1, line:1665:1> line:1662:6 invalid CRYPTO_gcm128_release 'void (int *)'
  |-ParmVarDecl 0x222ba8c3110 <col:28, col:44> col:44 invalid ctx 'int *'
  `-CompoundStmt 0x222ba8c33a8 <line:1663:1, line:1665:1>
