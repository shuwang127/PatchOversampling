TranslationUnitDecl 0x2a82071f4f8 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x2a82071fd90 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x2a82071fa90 '__int128'
|-TypedefDecl 0x2a82071fe00 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x2a82071fab0 'unsigned __int128'
|-TypedefDecl 0x2a820720138 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x2a82071fef0 'struct __NSConstantString_tag'
|   `-Record 0x2a82071fe58 '__NSConstantString_tag'
|-TypedefDecl 0x2a8207201a8 <<invalid sloc>> <invalid sloc> implicit referenced size_t 'unsigned long long'
| `-BuiltinType 0x2a82071f6d0 'unsigned long long'
|-TypedefDecl 0x2a820720240 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x2a820720200 'char *'
|   `-BuiltinType 0x2a82071f590 'char'
|-TypedefDecl 0x2a8207202b0 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x2a820720200 'char *'
|   `-BuiltinType 0x2a82071f590 'char'
|-VarDecl 0x2a8207203f0 <.//openssl//file_jk/before\crypto\modes\wrap128.c:20:1, line:22:1> line:20:28 used default_iv 'const unsigned char [8]' static cinit
| |-InitListExpr 0x2a822032108 <col:43, line:22:1> 'const unsigned char [8]'
| | |-ImplicitCastExpr 0x2a822032148 <line:21:5> 'unsigned char' <IntegralCast>
| | | `-IntegerLiteral 0x2a8207204a0 <col:5> 'int' 166
| | |-ImplicitCastExpr 0x2a822032168 <col:11> 'unsigned char' <IntegralCast>
| | | `-IntegerLiteral 0x2a8207204c8 <col:11> 'int' 166
| | |-ImplicitCastExpr 0x2a822032190 <col:17> 'unsigned char' <IntegralCast>
| | | `-IntegerLiteral 0x2a822031f70 <col:17> 'int' 166
| | |-ImplicitCastExpr 0x2a8220321c8 <col:23> 'unsigned char' <IntegralCast>
| | | `-IntegerLiteral 0x2a822031f98 <col:23> 'int' 166
| | |-ImplicitCastExpr 0x2a8220321e0 <col:29> 'unsigned char' <IntegralCast>
| | | `-IntegerLiteral 0x2a822031fc0 <col:29> 'int' 166
| | |-ImplicitCastExpr 0x2a822032238 <col:35> 'unsigned char' <IntegralCast>
| | | `-IntegerLiteral 0x2a822031fe8 <col:35> 'int' 166
| | |-ImplicitCastExpr 0x2a822032250 <col:41> 'unsigned char' <IntegralCast>
| | | `-IntegerLiteral 0x2a822032010 <col:41> 'int' 166
| | `-ImplicitCastExpr 0x2a822032268 <col:47> 'unsigned char' <IntegralCast>
| |   `-IntegerLiteral 0x2a822032038 <col:47> 'int' 166
| `-FullComment 0x2a82204aed8 <line:19:4, col:51>
|   `-ParagraphComment 0x2a82204aeb0 <col:4, col:51>
|     `-TextComment 0x2a82204ae88 <col:4, col:51> Text=" RFC 3394 section 2.2.3.1 Default Initial Value "
|-VarDecl 0x2a822032350 <line:25:1, line:27:1> line:25:28 used default_aiv 'const unsigned char [4]' static cinit
| |-InitListExpr 0x2a8220324e0 <col:44, line:27:1> 'const unsigned char [4]'
| | |-ImplicitCastExpr 0x2a822032520 <line:26:5> 'unsigned char' <IntegralCast>
| | | `-IntegerLiteral 0x2a8220323b8 <col:5> 'int' 166
| | |-ImplicitCastExpr 0x2a822032540 <col:11> 'unsigned char' <IntegralCast>
| | | `-IntegerLiteral 0x2a8220323e0 <col:11> 'int' 89
| | |-ImplicitCastExpr 0x2a822032568 <col:17> 'unsigned char' <IntegralCast>
| | | `-IntegerLiteral 0x2a822032408 <col:17> 'int' 89
| | `-ImplicitCastExpr 0x2a8220325a0 <col:23> 'unsigned char' <IntegralCast>
| |   `-IntegerLiteral 0x2a822032430 <col:23> 'int' 166
| `-FullComment 0x2a82204af88 <line:24:4, col:65>
|   `-ParagraphComment 0x2a82204af60 <col:4, col:65>
|     `-TextComment 0x2a82204af38 <col:4, col:65> Text=" RFC 5649 section 3 Alternative Initial Value 32-bit constant "
|-FunctionDecl 0x2a822032b18 <line:48:1, line:81:1> line:48:8 invalid CRYPTO_128_wrap 'size_t (void *, const unsigned char *, unsigned char *, const unsigned char *, size_t, int)'
| |-ParmVarDecl 0x2a8220326d8 <col:24, col:30> col:30 used key 'void *'
| |-ParmVarDecl 0x2a822032780 <col:35, col:56> col:56 used iv 'const unsigned char *'
| |-ParmVarDecl 0x2a822032830 <line:49:24, col:39> col:39 used out 'unsigned char *'
| |-ParmVarDecl 0x2a8220328b0 <line:50:24, col:45> col:45 used in 'const unsigned char *'
| |-ParmVarDecl 0x2a822032928 <col:49, col:56> col:56 used inlen 'size_t':'unsigned long long'
| |-ParmVarDecl 0x2a8220329a8 <line:51:24, col:35> col:35 invalid block 'int'
| |-CompoundStmt 0x2a822033348 <line:52:1, line:81:1>
| | |-DeclStmt 0x2a822032e28 <line:53:5, col:32>
| | | |-VarDecl 0x2a822032c18 <col:5, col:20> col:20 used A 'unsigned char *'
| | | |-VarDecl 0x2a822032d20 <col:5, col:27> col:23 used B 'unsigned char [16]'
| | | `-VarDecl 0x2a822032da0 <col:5, col:31> col:31 used R 'unsigned char *'
| | |-DeclStmt 0x2a822036038 <line:54:5, col:19>
| | | |-VarDecl 0x2a822032e50 <col:5, col:12> col:12 used i 'size_t':'unsigned long long'
| | | |-VarDecl 0x2a822032ec8 <col:5, col:15> col:15 used j 'size_t':'unsigned long long'
| | | `-VarDecl 0x2a822035fb0 <col:5, col:18> col:18 used t 'size_t':'unsigned long long'
| | |-IfStmt 0x2a822036388 <line:55:5, line:56:16>
| | | |-BinaryOperator 0x2a822036318 <line:55:9, col:69> 'int' '||'
| | | | |-BinaryOperator 0x2a8220361d8 <col:9, col:37> 'int' '||'
| | | | | |-ParenExpr 0x2a822036100 <col:9, col:21> 'unsigned long long'
| | | | | | `-BinaryOperator 0x2a8220360e0 <col:10, col:18> 'unsigned long long' '&'
| | | | | |   |-ImplicitCastExpr 0x2a8220360b0 <col:10> 'size_t':'unsigned long long' <LValueToRValue>
| | | | | |   | `-DeclRefExpr 0x2a822036050 <col:10> 'size_t':'unsigned long long' lvalue ParmVar 0x2a822032928 'inlen' 'size_t':'unsigned long long'
| | | | | |   `-ImplicitCastExpr 0x2a8220360c8 <col:18> 'unsigned long long' <IntegralCast>
| | | | | |     `-IntegerLiteral 0x2a822036088 <col:18> 'int' 7
| | | | | `-ParenExpr 0x2a8220361b8 <col:26, col:37> 'int'
| | | | |   `-BinaryOperator 0x2a822036198 <col:27, col:35> 'int' '<'
| | | | |     |-ImplicitCastExpr 0x2a822036168 <col:27> 'size_t':'unsigned long long' <LValueToRValue>
| | | | |     | `-DeclRefExpr 0x2a822036120 <col:27> 'size_t':'unsigned long long' lvalue ParmVar 0x2a822032928 'inlen' 'size_t':'unsigned long long'
| | | | |     `-ImplicitCastExpr 0x2a822036180 <col:35> 'unsigned long long' <IntegralCast>
| | | | |       `-IntegerLiteral 0x2a822036140 <col:35> 'int' 16
| | | | `-ParenExpr 0x2a8220362f8 <col:42, col:69> 'int'
| | | |   `-BinaryOperator 0x2a8220362d8 <col:43, line:32:38> 'int' '>'
| | | |     |-ImplicitCastExpr 0x2a8220362a8 <line:55:43> 'size_t':'unsigned long long' <LValueToRValue>
| | | |     | `-DeclRefExpr 0x2a8220361f8 <col:43> 'size_t':'unsigned long long' lvalue ParmVar 0x2a822032928 'inlen' 'size_t':'unsigned long long'
| | | |     `-ImplicitCastExpr 0x2a8220362c0 <line:32:28, col:38> 'unsigned long long' <IntegralCast>
| | | |       `-ParenExpr 0x2a822036288 <col:28, col:38> 'unsigned long'
| | | |         `-BinaryOperator 0x2a822036268 <col:29, col:36> 'unsigned long' '<<'
| | | |           |-IntegerLiteral 0x2a822036218 <col:29> 'unsigned long' 1
| | | |           `-IntegerLiteral 0x2a822036240 <col:36> 'int' 31
| | | `-ReturnStmt 0x2a822036378 <line:56:9, col:16>
| | |   `-ImplicitCastExpr 0x2a822036360 <col:16> 'size_t':'unsigned long long' <IntegralCast>
| | |     `-IntegerLiteral 0x2a822036338 <col:16> 'int' 0
| | |-BinaryOperator 0x2a822036428 <line:57:5, col:9> 'unsigned char *' '='
| | | |-DeclRefExpr 0x2a8220363a0 <col:5> 'unsigned char *' lvalue Var 0x2a822032c18 'A' 'unsigned char *'
| | | `-ImplicitCastExpr 0x2a822036410 <col:9> 'unsigned char *' <ArrayToPointerDecay>
| | |   `-DeclRefExpr 0x2a8220363d8 <col:9> 'unsigned char [16]' lvalue Var 0x2a822032d20 'B' 'unsigned char [16]'
| | |-BinaryOperator 0x2a8220364c0 <line:58:5, col:9> 'size_t':'unsigned long long' '='
| | | |-DeclRefExpr 0x2a822036448 <col:5> 'size_t':'unsigned long long' lvalue Var 0x2a822035fb0 't' 'size_t':'unsigned long long'
| | | `-ImplicitCastExpr 0x2a8220364a8 <col:9> 'size_t':'unsigned long long' <IntegralCast>
| | |   `-IntegerLiteral 0x2a822036480 <col:9> 'int' 1
| | |-CallExpr 0x2a8220368e0 <line:59:5, col:31> 'void *'
| | | |-ImplicitCastExpr 0x2a8220368c8 <col:5> 'void *(*)(void *, const void *, unsigned long long)' <FunctionToPointerDecay>
| | | | `-DeclRefExpr 0x2a822036740 <col:5> 'void *(void *, const void *, unsigned long long)' Function 0x2a822036550 'memmove' 'void *(void *, const void *, unsigned long long)'
| | | |-ImplicitCastExpr 0x2a822036918 <col:13, col:19> 'void *' <BitCast>
| | | | `-BinaryOperator 0x2a8220367f0 <col:13, col:19> 'unsigned char *' '+'
| | | |   |-ImplicitCastExpr 0x2a8220367d8 <col:13> 'unsigned char *' <LValueToRValue>
| | | |   | `-DeclRefExpr 0x2a822036778 <col:13> 'unsigned char *' lvalue ParmVar 0x2a822032830 'out' 'unsigned char *'
| | | |   `-IntegerLiteral 0x2a8220367b0 <col:19> 'int' 8
| | | |-ImplicitCastExpr 0x2a822036948 <col:22> 'const void *' <BitCast>
| | | | `-ImplicitCastExpr 0x2a822036930 <col:22> 'const unsigned char *' <LValueToRValue>
| | | |   `-DeclRefExpr 0x2a822036810 <col:22> 'const unsigned char *' lvalue ParmVar 0x2a8220328b0 'in' 'const unsigned char *'
| | | `-ImplicitCastExpr 0x2a822036960 <col:26> 'size_t':'unsigned long long' <LValueToRValue>
| | |   `-DeclRefExpr 0x2a822036848 <col:26> 'size_t':'unsigned long long' lvalue ParmVar 0x2a822032928 'inlen' 'size_t':'unsigned long long'
| | |-IfStmt 0x2a822036a58 <line:60:5, line:61:14>
| | | |-UnaryOperator 0x2a8220369c8 <line:60:9, col:10> 'int' prefix '!' cannot overflow
| | | | `-ImplicitCastExpr 0x2a8220369b0 <col:10> 'const unsigned char *' <LValueToRValue>
| | | |   `-DeclRefExpr 0x2a822036978 <col:10> 'const unsigned char *' lvalue ParmVar 0x2a822032780 'iv' 'const unsigned char *'
| | | `-BinaryOperator 0x2a822036a38 <line:61:9, col:14> 'const unsigned char *' '='
| | |   |-DeclRefExpr 0x2a8220369e0 <col:9> 'const unsigned char *' lvalue ParmVar 0x2a822032780 'iv' 'const unsigned char *'
| | |   `-ImplicitCastExpr 0x2a822036a20 <col:14> 'const unsigned char *' <ArrayToPointerDecay>
| | |     `-DeclRefExpr 0x2a822036a00 <col:14> 'const unsigned char [8]' lvalue Var 0x2a8207203f0 'default_iv' 'const unsigned char [8]'
| | |-CallExpr 0x2a822036d48 <line:63:5, col:20> 'void *'
| | | |-ImplicitCastExpr 0x2a822036d30 <col:5> 'void *(*)(void *, const void *, unsigned long long)' <FunctionToPointerDecay>
| | | | `-DeclRefExpr 0x2a822036c60 <col:5> 'void *(void *, const void *, unsigned long long)' Function 0x2a822036a70 'memcpy' 'void *(void *, const void *, unsigned long long)'
| | | |-ImplicitCastExpr 0x2a822036d98 <col:12> 'void *' <BitCast>
| | | | `-ImplicitCastExpr 0x2a822036d80 <col:12> 'unsigned char *' <LValueToRValue>
| | | |   `-DeclRefExpr 0x2a822036c98 <col:12> 'unsigned char *' lvalue Var 0x2a822032c18 'A' 'unsigned char *'
| | | |-ImplicitCastExpr 0x2a822036dc8 <col:15> 'const void *' <BitCast>
| | | | `-ImplicitCastExpr 0x2a822036db0 <col:15> 'const unsigned char *' <LValueToRValue>
| | | |   `-DeclRefExpr 0x2a822036cb8 <col:15> 'const unsigned char *' lvalue ParmVar 0x2a822032780 'iv' 'const unsigned char *'
| | | `-ImplicitCastExpr 0x2a822036de0 <col:19> 'unsigned long long' <IntegralCast>
| | |   `-IntegerLiteral 0x2a822036cd8 <col:19> 'int' 8
| | |-ForStmt 0x2a8220330b8 <line:65:5, line:78:5>
| | | |-BinaryOperator 0x2a822036e70 <line:65:10, col:14> 'size_t':'unsigned long long' '='
| | | | |-DeclRefExpr 0x2a822036df8 <col:10> 'size_t':'unsigned long long' lvalue Var 0x2a822032ec8 'j' 'size_t':'unsigned long long'
| | | | `-ImplicitCastExpr 0x2a822036e58 <col:14> 'size_t':'unsigned long long' <IntegralCast>
| | | |   `-IntegerLiteral 0x2a822036e30 <col:14> 'int' 0
| | | |-<<<NULL>>>
| | | |-BinaryOperator 0x2a822036f08 <col:17, col:21> 'int' '<'
| | | | |-ImplicitCastExpr 0x2a822036ed8 <col:17> 'size_t':'unsigned long long' <LValueToRValue>
| | | | | `-DeclRefExpr 0x2a822036e90 <col:17> 'size_t':'unsigned long long' lvalue Var 0x2a822032ec8 'j' 'size_t':'unsigned long long'
| | | | `-ImplicitCastExpr 0x2a822036ef0 <col:21> 'unsigned long long' <IntegralCast>
| | | |   `-IntegerLiteral 0x2a822036eb0 <col:21> 'int' 6
| | | |-UnaryOperator 0x2a822036f48 <col:24, col:25> 'size_t':'unsigned long long' postfix '++'
| | | | `-DeclRefExpr 0x2a822036f28 <col:24> 'size_t':'unsigned long long' lvalue Var 0x2a822032ec8 'j' 'size_t':'unsigned long long'
| | | `-CompoundStmt 0x2a822033098 <col:29, line:78:5>
| | |   |-BinaryOperator 0x2a822030fe0 <line:66:9, col:19> 'unsigned char *' '='
| | |   | |-DeclRefExpr 0x2a822036f60 <col:9> 'unsigned char *' lvalue Var 0x2a822032da0 'R' 'unsigned char *'
| | |   | `-BinaryOperator 0x2a822030fc0 <col:13, col:19> 'unsigned char *' '+'
| | |   |   |-ImplicitCastExpr 0x2a822030fa8 <col:13> 'unsigned char *' <LValueToRValue>
| | |   |   | `-DeclRefExpr 0x2a822030f60 <col:13> 'unsigned char *' lvalue ParmVar 0x2a822032830 'out' 'unsigned char *'
| | |   |   `-IntegerLiteral 0x2a822030f80 <col:19> 'int' 8
| | |   `-ForStmt 0x2a822033060 <line:67:9, line:77:9>
| | |     |-BinaryOperator 0x2a822031078 <line:67:14, col:18> 'size_t':'unsigned long long' '='
| | |     | |-DeclRefExpr 0x2a822031000 <col:14> 'size_t':'unsigned long long' lvalue Var 0x2a822032e50 'i' 'size_t':'unsigned long long'
| | |     | `-ImplicitCastExpr 0x2a822031060 <col:18> 'size_t':'unsigned long long' <IntegralCast>
| | |     |   `-IntegerLiteral 0x2a822031038 <col:18> 'int' 0
| | |     |-<<<NULL>>>
| | |     |-BinaryOperator 0x2a822031108 <col:21, col:25> 'int' '<'
| | |     | |-ImplicitCastExpr 0x2a8220310d8 <col:21> 'size_t':'unsigned long long' <LValueToRValue>
| | |     | | `-DeclRefExpr 0x2a822031098 <col:21> 'size_t':'unsigned long long' lvalue Var 0x2a822032e50 'i' 'size_t':'unsigned long long'
| | |     | `-ImplicitCastExpr 0x2a8220310f0 <col:25> 'size_t':'unsigned long long' <LValueToRValue>
| | |     |   `-DeclRefExpr 0x2a8220310b8 <col:25> 'size_t':'unsigned long long' lvalue ParmVar 0x2a822032928 'inlen' 'size_t':'unsigned long long'
| | |     |-BinaryOperator 0x2a822031288 <col:32, col:50> 'unsigned char *' ','
| | |     | |-BinaryOperator 0x2a8220311f0 <col:32, col:41> 'size_t':'unsigned long long' ','
| | |     | | |-CompoundAssignOperator 0x2a822031188 <col:32, col:37> 'size_t':'unsigned long long' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
| | |     | | | |-DeclRefExpr 0x2a822031128 <col:32> 'size_t':'unsigned long long' lvalue Var 0x2a822032e50 'i' 'size_t':'unsigned long long'
| | |     | | | `-ImplicitCastExpr 0x2a822031170 <col:37> 'unsigned long long' <IntegralCast>
| | |     | | |   `-IntegerLiteral 0x2a822031148 <col:37> 'int' 8
| | |     | | `-UnaryOperator 0x2a8220311d8 <col:40, col:41> 'size_t':'unsigned long long' postfix '++'
| | |     | |   `-DeclRefExpr 0x2a8220311b8 <col:40> 'size_t':'unsigned long long' lvalue Var 0x2a822035fb0 't' 'size_t':'unsigned long long'
| | |     | `-CompoundAssignOperator 0x2a822031258 <col:45, col:50> 'unsigned char *' '+=' ComputeLHSTy='unsigned char *' ComputeResultTy='unsigned char *'
| | |     |   |-DeclRefExpr 0x2a822031210 <col:45> 'unsigned char *' lvalue Var 0x2a822032da0 'R' 'unsigned char *'
| | |     |   `-IntegerLiteral 0x2a822031230 <col:50> 'int' 8
| | |     `-CompoundStmt 0x2a822033030 <col:53, line:77:9>
| | |       |-CallExpr 0x2a8220313c0 <line:68:13, col:31> 'void *'
| | |       | |-ImplicitCastExpr 0x2a8220313a8 <col:13> 'void *(*)(void *, const void *, unsigned long long)' <FunctionToPointerDecay>
| | |       | | `-DeclRefExpr 0x2a8220312a8 <col:13> 'void *(void *, const void *, unsigned long long)' Function 0x2a822036a70 'memcpy' 'void *(void *, const void *, unsigned long long)'
| | |       | |-ImplicitCastExpr 0x2a8220313f8 <col:20, col:24> 'void *' <BitCast>
| | |       | | `-BinaryOperator 0x2a822031328 <col:20, col:24> 'unsigned char *' '+'
| | |       | |   |-ImplicitCastExpr 0x2a822031310 <col:20> 'unsigned char *' <ArrayToPointerDecay>
| | |       | |   | `-DeclRefExpr 0x2a8220312c8 <col:20> 'unsigned char [16]' lvalue Var 0x2a822032d20 'B' 'unsigned char [16]'
| | |       | |   `-IntegerLiteral 0x2a8220312e8 <col:24> 'int' 8
| | |       | |-ImplicitCastExpr 0x2a822031428 <col:27> 'const void *' <BitCast>
| | |       | | `-ImplicitCastExpr 0x2a822031410 <col:27> 'unsigned char *' <LValueToRValue>
| | |       | |   `-DeclRefExpr 0x2a822031348 <col:27> 'unsigned char *' lvalue Var 0x2a822032da0 'R' 'unsigned char *'
| | |       | `-ImplicitCastExpr 0x2a822031440 <col:30> 'unsigned long long' <IntegralCast>
| | |       |   `-IntegerLiteral 0x2a822031368 <col:30> 'int' 8
| | |       |-CompoundAssignOperator 0x2a822031680 <line:70:13, col:45> 'unsigned char' '^=' ComputeLHSTy='int' ComputeResultTy='int'
| | |       | |-ArraySubscriptExpr 0x2a822031530 <col:13, col:16> 'unsigned char' lvalue
| | |       | | |-ImplicitCastExpr 0x2a822031518 <col:13> 'unsigned char *' <LValueToRValue>
| | |       | | | `-DeclRefExpr 0x2a8220314d0 <col:13> 'unsigned char *' lvalue Var 0x2a822032c18 'A' 'unsigned char *'
| | |       | | `-IntegerLiteral 0x2a8220314f0 <col:15> 'int' 7
| | |       | `-ImplicitCastExpr 0x2a822031668 <col:21, col:45> 'int' <IntegralCast>
| | |       |   `-CStyleCastExpr 0x2a822031640 <col:21, col:45> 'unsigned char' <IntegralCast>
| | |       |     `-ParenExpr 0x2a822031620 <col:36, col:45> 'unsigned long long'
| | |       |       `-BinaryOperator 0x2a8220315c8 <col:37, col:41> 'unsigned long long' '&'
| | |       |         |-ImplicitCastExpr 0x2a822031598 <col:37> 'size_t':'unsigned long long' <LValueToRValue>
| | |       |         | `-DeclRefExpr 0x2a822031550 <col:37> 'size_t':'unsigned long long' lvalue Var 0x2a822035fb0 't' 'size_t':'unsigned long long'
| | |       |         `-ImplicitCastExpr 0x2a8220315b0 <col:41> 'unsigned long long' <IntegralCast>
| | |       |           `-IntegerLiteral 0x2a822031570 <col:41> 'int' 255
| | |       |-IfStmt 0x2a822031e48 <line:71:13, line:75:13>
| | |       | |-BinaryOperator 0x2a822031728 <line:71:17, col:21> 'int' '>'
| | |       | | |-ImplicitCastExpr 0x2a8220316f8 <col:17> 'size_t':'unsigned long long' <LValueToRValue>
| | |       | | | `-DeclRefExpr 0x2a8220316b0 <col:17> 'size_t':'unsigned long long' lvalue Var 0x2a822035fb0 't' 'size_t':'unsigned long long'
| | |       | | `-ImplicitCastExpr 0x2a822031710 <col:21> 'unsigned long long' <IntegralCast>
| | |       | |   `-IntegerLiteral 0x2a8220316d0 <col:21> 'int' 255
| | |       | `-CompoundStmt 0x2a822031e20 <col:27, line:75:13>
| | |       |   |-CompoundAssignOperator 0x2a822031960 <line:72:17, col:56> 'unsigned char' '^=' ComputeLHSTy='int' ComputeResultTy='int'
| | |       |   | |-ArraySubscriptExpr 0x2a8220317a8 <col:17, col:20> 'unsigned char' lvalue
| | |       |   | | |-ImplicitCastExpr 0x2a822031790 <col:17> 'unsigned char *' <LValueToRValue>
| | |       |   | | | `-DeclRefExpr 0x2a822031748 <col:17> 'unsigned char *' lvalue Var 0x2a822032c18 'A' 'unsigned char *'
| | |       |   | | `-IntegerLiteral 0x2a822031768 <col:19> 'int' 6
| | |       |   | `-ImplicitCastExpr 0x2a822031948 <col:25, col:56> 'int' <IntegralCast>
| | |       |   |   `-CStyleCastExpr 0x2a822031920 <col:25, col:56> 'unsigned char' <IntegralCast>
| | |       |   |     `-ParenExpr 0x2a822031900 <col:40, col:56> 'unsigned long long'
| | |       |   |       `-BinaryOperator 0x2a8220318a8 <col:41, col:52> 'unsigned long long' '&'
| | |       |   |         |-ParenExpr 0x2a822031848 <col:41, col:48> 'size_t':'unsigned long long'
| | |       |   |         | `-BinaryOperator 0x2a822031828 <col:42, col:47> 'size_t':'unsigned long long' '>>'
| | |       |   |         |   |-ImplicitCastExpr 0x2a822031810 <col:42> 'size_t':'unsigned long long' <LValueToRValue>
| | |       |   |         |   | `-DeclRefExpr 0x2a8220317c8 <col:42> 'size_t':'unsigned long long' lvalue Var 0x2a822035fb0 't' 'size_t':'unsigned long long'
| | |       |   |         |   `-IntegerLiteral 0x2a8220317e8 <col:47> 'int' 8
| | |       |   |         `-ImplicitCastExpr 0x2a822031890 <col:52> 'unsigned long long' <IntegralCast>
| | |       |   |           `-IntegerLiteral 0x2a822031868 <col:52> 'int' 255
| | |       |   |-CompoundAssignOperator 0x2a822031ba8 <line:73:17, col:57> 'unsigned char' '^=' ComputeLHSTy='int' ComputeResultTy='int'
| | |       |   | |-ArraySubscriptExpr 0x2a8220319f0 <col:17, col:20> 'unsigned char' lvalue
| | |       |   | | |-ImplicitCastExpr 0x2a8220319d8 <col:17> 'unsigned char *' <LValueToRValue>
| | |       |   | | | `-DeclRefExpr 0x2a822031990 <col:17> 'unsigned char *' lvalue Var 0x2a822032c18 'A' 'unsigned char *'
| | |       |   | | `-IntegerLiteral 0x2a8220319b0 <col:19> 'int' 5
| | |       |   | `-ImplicitCastExpr 0x2a822031b90 <col:25, col:57> 'int' <IntegralCast>
| | |       |   |   `-CStyleCastExpr 0x2a822031b68 <col:25, col:57> 'unsigned char' <IntegralCast>
| | |       |   |     `-ParenExpr 0x2a822031b48 <col:40, col:57> 'unsigned long long'
| | |       |   |       `-BinaryOperator 0x2a822031af0 <col:41, col:53> 'unsigned long long' '&'
| | |       |   |         |-ParenExpr 0x2a822031a90 <col:41, col:49> 'size_t':'unsigned long long'
| | |       |   |         | `-BinaryOperator 0x2a822031a70 <col:42, col:47> 'size_t':'unsigned long long' '>>'
| | |       |   |         |   |-ImplicitCastExpr 0x2a822031a58 <col:42> 'size_t':'unsigned long long' <LValueToRValue>
| | |       |   |         |   | `-DeclRefExpr 0x2a822031a10 <col:42> 'size_t':'unsigned long long' lvalue Var 0x2a822035fb0 't' 'size_t':'unsigned long long'
| | |       |   |         |   `-IntegerLiteral 0x2a822031a30 <col:47> 'int' 16
| | |       |   |         `-ImplicitCastExpr 0x2a822031ad8 <col:53> 'unsigned long long' <IntegralCast>
| | |       |   |           `-IntegerLiteral 0x2a822031ab0 <col:53> 'int' 255
| | |       |   `-CompoundAssignOperator 0x2a822031df0 <line:74:17, col:57> 'unsigned char' '^=' ComputeLHSTy='int' ComputeResultTy='int'
| | |       |     |-ArraySubscriptExpr 0x2a822031c38 <col:17, col:20> 'unsigned char' lvalue
| | |       |     | |-ImplicitCastExpr 0x2a822031c20 <col:17> 'unsigned char *' <LValueToRValue>
| | |       |     | | `-DeclRefExpr 0x2a822031bd8 <col:17> 'unsigned char *' lvalue Var 0x2a822032c18 'A' 'unsigned char *'
| | |       |     | `-IntegerLiteral 0x2a822031bf8 <col:19> 'int' 4
| | |       |     `-ImplicitCastExpr 0x2a822031dd8 <col:25, col:57> 'int' <IntegralCast>
| | |       |       `-CStyleCastExpr 0x2a822031db0 <col:25, col:57> 'unsigned char' <IntegralCast>
| | |       |         `-ParenExpr 0x2a822031d90 <col:40, col:57> 'unsigned long long'
| | |       |           `-BinaryOperator 0x2a822031d38 <col:41, col:53> 'unsigned long long' '&'
| | |       |             |-ParenExpr 0x2a822031cd8 <col:41, col:49> 'size_t':'unsigned long long'
| | |       |             | `-BinaryOperator 0x2a822031cb8 <col:42, col:47> 'size_t':'unsigned long long' '>>'
| | |       |             |   |-ImplicitCastExpr 0x2a822031ca0 <col:42> 'size_t':'unsigned long long' <LValueToRValue>
| | |       |             |   | `-DeclRefExpr 0x2a822031c58 <col:42> 'size_t':'unsigned long long' lvalue Var 0x2a822035fb0 't' 'size_t':'unsigned long long'
| | |       |             |   `-IntegerLiteral 0x2a822031c78 <col:47> 'int' 24
| | |       |             `-ImplicitCastExpr 0x2a822031d20 <col:53> 'unsigned long long' <IntegralCast>
| | |       |               `-IntegerLiteral 0x2a822031cf8 <col:53> 'int' 255
| | |       `-CallExpr 0x2a822032f98 <line:76:13, col:31> 'void *'
| | |         |-ImplicitCastExpr 0x2a822032f80 <col:13> 'void *(*)(void *, const void *, unsigned long long)' <FunctionToPointerDecay>
| | |         | `-DeclRefExpr 0x2a822031e60 <col:13> 'void *(void *, const void *, unsigned long long)' Function 0x2a822036a70 'memcpy' 'void *(void *, const void *, unsigned long long)'
| | |         |-ImplicitCastExpr 0x2a822032fe8 <col:20> 'void *' <BitCast>
| | |         | `-ImplicitCastExpr 0x2a822032fd0 <col:20> 'unsigned char *' <LValueToRValue>
| | |         |   `-DeclRefExpr 0x2a822031e80 <col:20> 'unsigned char *' lvalue Var 0x2a822032da0 'R' 'unsigned char *'
| | |         |-ImplicitCastExpr 0x2a822033000 <col:23, col:27> 'const void *' <BitCast>
| | |         | `-BinaryOperator 0x2a822031f00 <col:23, col:27> 'unsigned char *' '+'
| | |         |   |-ImplicitCastExpr 0x2a822031ee8 <col:23> 'unsigned char *' <ArrayToPointerDecay>
| | |         |   | `-DeclRefExpr 0x2a822031ea0 <col:23> 'unsigned char [16]' lvalue Var 0x2a822032d20 'B' 'unsigned char [16]'
| | |         |   `-IntegerLiteral 0x2a822031ec0 <col:27> 'int' 8
| | |         `-ImplicitCastExpr 0x2a822033018 <col:30> 'unsigned long long' <IntegralCast>
| | |           `-IntegerLiteral 0x2a822031f20 <col:30> 'int' 8
| | |-CallExpr 0x2a8220331c0 <line:79:5, col:21> 'void *'
| | | |-ImplicitCastExpr 0x2a8220331a8 <col:5> 'void *(*)(void *, const void *, unsigned long long)' <FunctionToPointerDecay>
| | | | `-DeclRefExpr 0x2a8220330f0 <col:5> 'void *(void *, const void *, unsigned long long)' Function 0x2a822036a70 'memcpy' 'void *(void *, const void *, unsigned long long)'
| | | |-ImplicitCastExpr 0x2a822033210 <col:12> 'void *' <BitCast>
| | | | `-ImplicitCastExpr 0x2a8220331f8 <col:12> 'unsigned char *' <LValueToRValue>
| | | |   `-DeclRefExpr 0x2a822033110 <col:12> 'unsigned char *' lvalue ParmVar 0x2a822032830 'out' 'unsigned char *'
| | | |-ImplicitCastExpr 0x2a822033240 <col:17> 'const void *' <BitCast>
| | | | `-ImplicitCastExpr 0x2a822033228 <col:17> 'unsigned char *' <LValueToRValue>
| | | |   `-DeclRefExpr 0x2a822033130 <col:17> 'unsigned char *' lvalue Var 0x2a822032c18 'A' 'unsigned char *'
| | | `-ImplicitCastExpr 0x2a822033258 <col:20> 'unsigned long long' <IntegralCast>
| | |   `-IntegerLiteral 0x2a822033150 <col:20> 'int' 8
| | `-ReturnStmt 0x2a822033308 <line:80:5, col:20>
| |   `-BinaryOperator 0x2a8220332e8 <col:12, col:20> 'unsigned long long' '+'
| |     |-ImplicitCastExpr 0x2a8220332b8 <col:12> 'size_t':'unsigned long long' <LValueToRValue>
| |     | `-DeclRefExpr 0x2a822033270 <col:12> 'size_t':'unsigned long long' lvalue ParmVar 0x2a822032928 'inlen' 'size_t':'unsigned long long'
| |     `-ImplicitCastExpr 0x2a8220332d0 <col:20> 'unsigned long long' <IntegralCast>
| |       `-IntegerLiteral 0x2a822033290 <col:20> 'int' 8
| `-FullComment 0x2a822044640 <line:34:4, line:46:59>
|   |-ParagraphComment 0x2a82204b028 <line:34:4, col:49>
|   | `-TextComment 0x2a82204b000 <col:4, col:49> Text=" Wrapping according to RFC 3394 section 2.2.1."
|   |-ParagraphComment 0x2a82204b070 <line:36:3, col:4>
|   | `-TextComment 0x2a82204b048 <col:3, col:4> Text="  "
|   |-ParamCommandComment 0x2a82204b090 <col:5, line:37:4> [in] explicitly Param="key" ParamIndex=0
|   | `-ParagraphComment 0x2a82204b138 <line:36:20, line:37:4>
|   |   |-TextComment 0x2a82204b0e8 <line:36:20, col:33> Text="    Key value."
|   |   `-TextComment 0x2a82204b108 <line:37:3, col:4> Text="  "
|   |-ParamCommandComment 0x2a82204b158 <col:5, line:38:4> [in] explicitly Param="iv" ParamIndex=1
|   | `-ParagraphComment 0x2a8220441b0 <line:37:19, line:38:4>
|   |   |-TextComment 0x2a822044160 <line:37:19, col:73> Text="     IV value. Length = 8 bytes. NULL = use default_iv."
|   |   `-TextComment 0x2a822044180 <line:38:3, col:4> Text="  "
|   |-ParamCommandComment 0x2a8220441d0 <col:5, line:39:4> [in] explicitly Param="in" ParamIndex=3
|   | `-ParagraphComment 0x2a822044270 <line:38:19, line:39:4>
|   |   |-TextComment 0x2a822044220 <line:38:19, col:60> Text="     Plaintext as n 64-bit blocks, n >= 2."
|   |   `-TextComment 0x2a822044240 <line:39:3, col:4> Text="  "
|   |-ParamCommandComment 0x2a822044290 <col:5, line:40:4> [in] explicitly Param="inlen" ParamIndex=4
|   | `-ParagraphComment 0x2a822044338 <line:39:22, line:40:4>
|   |   |-TextComment 0x2a8220442e8 <line:39:22, col:36> Text="  Length of in."
|   |   `-TextComment 0x2a822044308 <line:40:3, col:4> Text="  "
|   |-ParamCommandComment 0x2a822044358 <col:5, line:43:4> [out] explicitly Param="out" ParamIndex=2
|   | `-ParagraphComment 0x2a822044450 <line:40:20, line:43:4>
|   |   |-TextComment 0x2a8220443b0 <line:40:20, col:77> Text="    Ciphertext. Minimal buffer length = (inlen + 8) bytes."
|   |   |-TextComment 0x2a8220443d0 <line:41:3, col:77> Text="                     Input and output buffers can overlap if block function"
|   |   |-TextComment 0x2a8220443f0 <line:42:3, col:37> Text="                     supports that."
|   |   `-TextComment 0x2a822044410 <line:43:3, col:4> Text="  "
|   |-ParamCommandComment 0x2a822044470 <col:5, line:44:4> [in] explicitly Param="block" ParamIndex=5
|   | `-ParagraphComment 0x2a822044518 <line:43:22, line:44:4>
|   |   |-TextComment 0x2a8220444c8 <line:43:22, col:49> Text="  Block processing function."
|   |   `-TextComment 0x2a8220444e8 <line:44:3, col:4> Text="  "
|   `-BlockCommandComment 0x2a822044538 <col:5, line:46:59> Name="return"
|     `-ParagraphComment 0x2a8220445d8 <line:44:12, line:46:59>
|       |-TextComment 0x2a822044560 <line:44:12, col:78> Text="            0 if inlen does not consist of n 64-bit blocks, n >= 2."
|       |-TextComment 0x2a822044580 <line:45:3, col:56> Text="                     or if inlen > CRYPTO128_WRAP_MAX."
|       `-TextComment 0x2a8220445a0 <line:46:3, col:59> Text="                     Output length if wrapping succeeded."
|-FunctionDecl 0x2a822036550 <line:59:5> col:5 implicit used memmove 'void *(void *, const void *, unsigned long long)' extern
| |-ParmVarDecl 0x2a8220365f0 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x2a822036658 <<invalid sloc>> <invalid sloc> 'const void *'
| `-ParmVarDecl 0x2a8220366c0 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x2a822036a70 <line:63:5> col:5 implicit used memcpy 'void *(void *, const void *, unsigned long long)' extern
| |-ParmVarDecl 0x2a822036b10 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x2a822036b78 <<invalid sloc>> <invalid sloc> 'const void *'
| `-ParmVarDecl 0x2a822036be0 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x2a8220337b8 <line:99:1, line:129:1> line:99:15 invalid crypto_128_unwrap_raw 'size_t (void *, unsigned char *, unsigned char *, const unsigned char *, size_t, int)' static
| |-ParmVarDecl 0x2a8220333c8 <col:37, col:43> col:43 used key 'void *'
| |-ParmVarDecl 0x2a822033448 <col:48, col:63> col:63 used iv 'unsigned char *'
| |-ParmVarDecl 0x2a8220334c8 <line:100:37, col:52> col:52 used out 'unsigned char *'
| |-ParmVarDecl 0x2a822033548 <line:101:37, col:58> col:58 used in 'const unsigned char *'
| |-ParmVarDecl 0x2a8220335c0 <col:62, col:69> col:69 used inlen 'size_t':'unsigned long long'
| |-ParmVarDecl 0x2a822033640 <line:102:37, col:48> col:48 invalid block 'int'
| |-CompoundStmt 0x2a822035b48 <line:103:1, line:129:1>
| | |-DeclStmt 0x2a822033a90 <line:104:5, col:32>
| | | |-VarDecl 0x2a8220338b8 <col:5, col:20> col:20 used A 'unsigned char *'
| | | |-VarDecl 0x2a822033988 <col:5, col:27> col:23 used B 'unsigned char [16]'
| | | `-VarDecl 0x2a822033a08 <col:5, col:31> col:31 used R 'unsigned char *'
| | |-DeclStmt 0x2a822033c30 <line:105:5, col:19>
| | | |-VarDecl 0x2a822033ab8 <col:5, col:12> col:12 used i 'size_t':'unsigned long long'
| | | |-VarDecl 0x2a822033b30 <col:5, col:15> col:15 used j 'size_t':'unsigned long long'
| | | `-VarDecl 0x2a822033ba8 <col:5, col:18> col:18 used t 'size_t':'unsigned long long'
| | |-CompoundAssignOperator 0x2a822033cc0 <line:106:5, col:14> 'size_t':'unsigned long long' '-=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
| | | |-DeclRefExpr 0x2a822033c48 <col:5> 'size_t':'unsigned long long' lvalue ParmVar 0x2a8220335c0 'inlen' 'size_t':'unsigned long long'
| | | `-ImplicitCastExpr 0x2a822033ca8 <col:14> 'unsigned long long' <IntegralCast>
| | |   `-IntegerLiteral 0x2a822033c80 <col:14> 'int' 8
| | |-IfStmt 0x2a822034020 <line:107:5, line:108:16>
| | | |-BinaryOperator 0x2a822033fb0 <line:107:9, col:69> 'int' '||'
| | | | |-BinaryOperator 0x2a822033e60 <col:9, col:37> 'int' '||'
| | | | | |-ParenExpr 0x2a822033d88 <col:9, col:21> 'unsigned long long'
| | | | | | `-BinaryOperator 0x2a822033d68 <col:10, col:18> 'unsigned long long' '&'
| | | | | |   |-ImplicitCastExpr 0x2a822033d38 <col:10> 'size_t':'unsigned long long' <LValueToRValue>
| | | | | |   | `-DeclRefExpr 0x2a822033cf0 <col:10> 'size_t':'unsigned long long' lvalue ParmVar 0x2a8220335c0 'inlen' 'size_t':'unsigned long long'
| | | | | |   `-ImplicitCastExpr 0x2a822033d50 <col:18> 'unsigned long long' <IntegralCast>
| | | | | |     `-IntegerLiteral 0x2a822033d10 <col:18> 'int' 7
| | | | | `-ParenExpr 0x2a822033e40 <col:26, col:37> 'int'
| | | | |   `-BinaryOperator 0x2a822033e20 <col:27, col:35> 'int' '<'
| | | | |     |-ImplicitCastExpr 0x2a822033df0 <col:27> 'size_t':'unsigned long long' <LValueToRValue>
| | | | |     | `-DeclRefExpr 0x2a822033da8 <col:27> 'size_t':'unsigned long long' lvalue ParmVar 0x2a8220335c0 'inlen' 'size_t':'unsigned long long'
| | | | |     `-ImplicitCastExpr 0x2a822033e08 <col:35> 'unsigned long long' <IntegralCast>
| | | | |       `-IntegerLiteral 0x2a822033dc8 <col:35> 'int' 16
| | | | `-ParenExpr 0x2a822033f90 <col:42, col:69> 'int'
| | | |   `-BinaryOperator 0x2a822033f60 <col:43, line:32:38> 'int' '>'
| | | |     |-ImplicitCastExpr 0x2a822033f30 <line:107:43> 'size_t':'unsigned long long' <LValueToRValue>
| | | |     | `-DeclRefExpr 0x2a822033e80 <col:43> 'size_t':'unsigned long long' lvalue ParmVar 0x2a8220335c0 'inlen' 'size_t':'unsigned long long'
| | | |     `-ImplicitCastExpr 0x2a822033f48 <line:32:28, col:38> 'unsigned long long' <IntegralCast>
| | | |       `-ParenExpr 0x2a822033f10 <col:28, col:38> 'unsigned long'
| | | |         `-BinaryOperator 0x2a822033ef0 <col:29, col:36> 'unsigned long' '<<'
| | | |           |-IntegerLiteral 0x2a822033ea0 <col:29> 'unsigned long' 1
| | | |           `-IntegerLiteral 0x2a822033ec8 <col:36> 'int' 31
| | | `-ReturnStmt 0x2a822034010 <line:108:9, col:16>
| | |   `-ImplicitCastExpr 0x2a822033ff8 <col:16> 'size_t':'unsigned long long' <IntegralCast>
| | |     `-IntegerLiteral 0x2a822033fd0 <col:16> 'int' 0
| | |-BinaryOperator 0x2a8220340c0 <line:109:5, col:9> 'unsigned char *' '='
| | | |-DeclRefExpr 0x2a822034038 <col:5> 'unsigned char *' lvalue Var 0x2a8220338b8 'A' 'unsigned char *'
| | | `-ImplicitCastExpr 0x2a8220340a8 <col:9> 'unsigned char *' <ArrayToPointerDecay>
| | |   `-DeclRefExpr 0x2a822034070 <col:9> 'unsigned char [16]' lvalue Var 0x2a822033988 'B' 'unsigned char [16]'
| | |-BinaryOperator 0x2a822034218 <line:110:5, col:24> 'size_t':'unsigned long long' '='
| | | |-DeclRefExpr 0x2a8220340e0 <col:5> 'size_t':'unsigned long long' lvalue Var 0x2a822033ba8 't' 'size_t':'unsigned long long'
| | | `-BinaryOperator 0x2a8220341f8 <col:9, col:24> 'unsigned long long' '*'
| | |   |-ImplicitCastExpr 0x2a8220341e0 <col:9> 'unsigned long long' <IntegralCast>
| | |   | `-IntegerLiteral 0x2a822034118 <col:9> 'int' 6
| | |   `-ParenExpr 0x2a8220341c0 <col:13, col:24> 'size_t':'unsigned long long'
| | |     `-BinaryOperator 0x2a8220341a0 <col:14, col:23> 'size_t':'unsigned long long' '>>'
| | |       |-ImplicitCastExpr 0x2a822034188 <col:14> 'size_t':'unsigned long long' <LValueToRValue>
| | |       | `-DeclRefExpr 0x2a822034140 <col:14> 'size_t':'unsigned long long' lvalue ParmVar 0x2a8220335c0 'inlen' 'size_t':'unsigned long long'
| | |       `-IntegerLiteral 0x2a822034160 <col:23> 'int' 3
| | |-CallExpr 0x2a822034320 <line:111:5, col:20> 'void *'
| | | |-ImplicitCastExpr 0x2a822034308 <col:5> 'void *(*)(void *, const void *, unsigned long long)' <FunctionToPointerDecay>
| | | | `-DeclRefExpr 0x2a822034238 <col:5> 'void *(void *, const void *, unsigned long long)' Function 0x2a822036a70 'memcpy' 'void *(void *, const void *, unsigned long long)'
| | | |-ImplicitCastExpr 0x2a822034370 <col:12> 'void *' <BitCast>
| | | | `-ImplicitCastExpr 0x2a822034358 <col:12> 'unsigned char *' <LValueToRValue>
| | | |   `-DeclRefExpr 0x2a822034258 <col:12> 'unsigned char *' lvalue Var 0x2a8220338b8 'A' 'unsigned char *'
| | | |-ImplicitCastExpr 0x2a8220343a0 <col:15> 'const void *' <BitCast>
| | | | `-ImplicitCastExpr 0x2a822034388 <col:15> 'const unsigned char *' <LValueToRValue>
| | | |   `-DeclRefExpr 0x2a822034278 <col:15> 'const unsigned char *' lvalue ParmVar 0x2a822033548 'in' 'const unsigned char *'
| | | `-ImplicitCastExpr 0x2a8220343b8 <col:19> 'unsigned long long' <IntegralCast>
| | |   `-IntegerLiteral 0x2a8220342b0 <col:19> 'int' 8
| | |-CallExpr 0x2a822034510 <line:112:5, col:31> 'void *'
| | | |-ImplicitCastExpr 0x2a8220344f8 <col:5> 'void *(*)(void *, const void *, unsigned long long)' <FunctionToPointerDecay>
| | | | `-DeclRefExpr 0x2a8220343d0 <col:5> 'void *(void *, const void *, unsigned long long)' Function 0x2a822036550 'memmove' 'void *(void *, const void *, unsigned long long)'
| | | |-ImplicitCastExpr 0x2a822034560 <col:13> 'void *' <BitCast>
| | | | `-ImplicitCastExpr 0x2a822034548 <col:13> 'unsigned char *' <LValueToRValue>
| | | |   `-DeclRefExpr 0x2a8220343f0 <col:13> 'unsigned char *' lvalue ParmVar 0x2a8220334c8 'out' 'unsigned char *'
| | | |-ImplicitCastExpr 0x2a822034578 <col:18, col:23> 'const void *' <BitCast>
| | | | `-BinaryOperator 0x2a822034488 <col:18, col:23> 'const unsigned char *' '+'
| | | |   |-ImplicitCastExpr 0x2a822034470 <col:18> 'const unsigned char *' <LValueToRValue>
| | | |   | `-DeclRefExpr 0x2a822034428 <col:18> 'const unsigned char *' lvalue ParmVar 0x2a822033548 'in' 'const unsigned char *'
| | | |   `-IntegerLiteral 0x2a822034448 <col:23> 'int' 8
| | | `-ImplicitCastExpr 0x2a822034590 <col:26> 'size_t':'unsigned long long' <LValueToRValue>
| | |   `-DeclRefExpr 0x2a8220344a8 <col:26> 'size_t':'unsigned long long' lvalue ParmVar 0x2a8220335c0 'inlen' 'size_t':'unsigned long long'
| | |-ForStmt 0x2a822035900 <line:113:5, line:126:5>
| | | |-BinaryOperator 0x2a822034620 <line:113:10, col:14> 'size_t':'unsigned long long' '='
| | | | |-DeclRefExpr 0x2a8220345a8 <col:10> 'size_t':'unsigned long long' lvalue Var 0x2a822033b30 'j' 'size_t':'unsigned long long'
| | | | `-ImplicitCastExpr 0x2a822034608 <col:14> 'size_t':'unsigned long long' <IntegralCast>
| | | |   `-IntegerLiteral 0x2a8220345e0 <col:14> 'int' 0
| | | |-<<<NULL>>>
| | | |-BinaryOperator 0x2a8220346b8 <col:17, col:21> 'int' '<'
| | | | |-ImplicitCastExpr 0x2a822034688 <col:17> 'size_t':'unsigned long long' <LValueToRValue>
| | | | | `-DeclRefExpr 0x2a822034640 <col:17> 'size_t':'unsigned long long' lvalue Var 0x2a822033b30 'j' 'size_t':'unsigned long long'
| | | | `-ImplicitCastExpr 0x2a8220346a0 <col:21> 'unsigned long long' <IntegralCast>
| | | |   `-IntegerLiteral 0x2a822034660 <col:21> 'int' 6
| | | |-UnaryOperator 0x2a8220346f8 <col:24, col:25> 'size_t':'unsigned long long' postfix '++'
| | | | `-DeclRefExpr 0x2a8220346d8 <col:24> 'size_t':'unsigned long long' lvalue Var 0x2a822033b30 'j' 'size_t':'unsigned long long'
| | | `-CompoundStmt 0x2a8220358e0 <col:29, line:126:5>
| | |   |-BinaryOperator 0x2a822034820 <line:114:9, col:27> 'unsigned char *' '='
| | |   | |-DeclRefExpr 0x2a822034710 <col:9> 'unsigned char *' lvalue Var 0x2a822033a08 'R' 'unsigned char *'
| | |   | `-BinaryOperator 0x2a822034800 <col:13, col:27> 'unsigned char *' '-'
| | |   |   |-BinaryOperator 0x2a8220347b8 <col:13, col:19> 'unsigned char *' '+'
| | |   |   | |-ImplicitCastExpr 0x2a822034788 <col:13> 'unsigned char *' <LValueToRValue>
| | |   |   | | `-DeclRefExpr 0x2a822034748 <col:13> 'unsigned char *' lvalue ParmVar 0x2a8220334c8 'out' 'unsigned char *'
| | |   |   | `-ImplicitCastExpr 0x2a8220347a0 <col:19> 'size_t':'unsigned long long' <LValueToRValue>
| | |   |   |   `-DeclRefExpr 0x2a822034768 <col:19> 'size_t':'unsigned long long' lvalue ParmVar 0x2a8220335c0 'inlen' 'size_t':'unsigned long long'
| | |   |   `-IntegerLiteral 0x2a8220347d8 <col:27> 'int' 8
| | |   `-ForStmt 0x2a8220358a8 <line:115:9, line:125:9>
| | |     |-BinaryOperator 0x2a8220348b8 <line:115:14, col:18> 'size_t':'unsigned long long' '='
| | |     | |-DeclRefExpr 0x2a822034840 <col:14> 'size_t':'unsigned long long' lvalue Var 0x2a822033ab8 'i' 'size_t':'unsigned long long'
| | |     | `-ImplicitCastExpr 0x2a8220348a0 <col:18> 'size_t':'unsigned long long' <IntegralCast>
| | |     |   `-IntegerLiteral 0x2a822034878 <col:18> 'int' 0
| | |     |-<<<NULL>>>
| | |     |-BinaryOperator 0x2a822034948 <col:21, col:25> 'int' '<'
| | |     | |-ImplicitCastExpr 0x2a822034918 <col:21> 'size_t':'unsigned long long' <LValueToRValue>
| | |     | | `-DeclRefExpr 0x2a8220348d8 <col:21> 'size_t':'unsigned long long' lvalue Var 0x2a822033ab8 'i' 'size_t':'unsigned long long'
| | |     | `-ImplicitCastExpr 0x2a822034930 <col:25> 'size_t':'unsigned long long' <LValueToRValue>
| | |     |   `-DeclRefExpr 0x2a8220348f8 <col:25> 'size_t':'unsigned long long' lvalue ParmVar 0x2a8220335c0 'inlen' 'size_t':'unsigned long long'
| | |     |-BinaryOperator 0x2a822034ac8 <col:32, col:50> 'unsigned char *' ','
| | |     | |-BinaryOperator 0x2a822034a30 <col:32, col:41> 'size_t':'unsigned long long' ','
| | |     | | |-CompoundAssignOperator 0x2a8220349c8 <col:32, col:37> 'size_t':'unsigned long long' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
| | |     | | | |-DeclRefExpr 0x2a822034968 <col:32> 'size_t':'unsigned long long' lvalue Var 0x2a822033ab8 'i' 'size_t':'unsigned long long'
| | |     | | | `-ImplicitCastExpr 0x2a8220349b0 <col:37> 'unsigned long long' <IntegralCast>
| | |     | | |   `-IntegerLiteral 0x2a822034988 <col:37> 'int' 8
| | |     | | `-UnaryOperator 0x2a822034a18 <col:40, col:41> 'size_t':'unsigned long long' postfix '--'
| | |     | |   `-DeclRefExpr 0x2a8220349f8 <col:40> 'size_t':'unsigned long long' lvalue Var 0x2a822033ba8 't' 'size_t':'unsigned long long'
| | |     | `-CompoundAssignOperator 0x2a822034a98 <col:45, col:50> 'unsigned char *' '-=' ComputeLHSTy='unsigned char *' ComputeResultTy='unsigned char *'
| | |     |   |-DeclRefExpr 0x2a822034a50 <col:45> 'unsigned char *' lvalue Var 0x2a822033a08 'R' 'unsigned char *'
| | |     |   `-IntegerLiteral 0x2a822034a70 <col:50> 'int' 8
| | |     `-CompoundStmt 0x2a822035878 <col:53, line:125:9>
| | |       |-CompoundAssignOperator 0x2a822034c98 <line:116:13, col:45> 'unsigned char' '^=' ComputeLHSTy='int' ComputeResultTy='int'
| | |       | |-ArraySubscriptExpr 0x2a822034b48 <col:13, col:16> 'unsigned char' lvalue
| | |       | | |-ImplicitCastExpr 0x2a822034b30 <col:13> 'unsigned char *' <LValueToRValue>
| | |       | | | `-DeclRefExpr 0x2a822034ae8 <col:13> 'unsigned char *' lvalue Var 0x2a8220338b8 'A' 'unsigned char *'
| | |       | | `-IntegerLiteral 0x2a822034b08 <col:15> 'int' 7
| | |       | `-ImplicitCastExpr 0x2a822034c80 <col:21, col:45> 'int' <IntegralCast>
| | |       |   `-CStyleCastExpr 0x2a822034c58 <col:21, col:45> 'unsigned char' <IntegralCast>
| | |       |     `-ParenExpr 0x2a822034c38 <col:36, col:45> 'unsigned long long'
| | |       |       `-BinaryOperator 0x2a822034be0 <col:37, col:41> 'unsigned long long' '&'
| | |       |         |-ImplicitCastExpr 0x2a822034bb0 <col:37> 'size_t':'unsigned long long' <LValueToRValue>
| | |       |         | `-DeclRefExpr 0x2a822034b68 <col:37> 'size_t':'unsigned long long' lvalue Var 0x2a822033ba8 't' 'size_t':'unsigned long long'
| | |       |         `-ImplicitCastExpr 0x2a822034bc8 <col:41> 'unsigned long long' <IntegralCast>
| | |       |           `-IntegerLiteral 0x2a822034b88 <col:41> 'int' 255
| | |       |-IfStmt 0x2a822035488 <line:117:13, line:121:13>
| | |       | |-BinaryOperator 0x2a822034d40 <line:117:17, col:21> 'int' '>'
| | |       | | |-ImplicitCastExpr 0x2a822034d10 <col:17> 'size_t':'unsigned long long' <LValueToRValue>
| | |       | | | `-DeclRefExpr 0x2a822034cc8 <col:17> 'size_t':'unsigned long long' lvalue Var 0x2a822033ba8 't' 'size_t':'unsigned long long'
| | |       | | `-ImplicitCastExpr 0x2a822034d28 <col:21> 'unsigned long long' <IntegralCast>
| | |       | |   `-IntegerLiteral 0x2a822034ce8 <col:21> 'int' 255
| | |       | `-CompoundStmt 0x2a822035460 <col:27, line:121:13>
| | |       |   |-CompoundAssignOperator 0x2a822034fa0 <line:118:17, col:56> 'unsigned char' '^=' ComputeLHSTy='int' ComputeResultTy='int'
| | |       |   | |-ArraySubscriptExpr 0x2a822034dc0 <col:17, col:20> 'unsigned char' lvalue
| | |       |   | | |-ImplicitCastExpr 0x2a822034da8 <col:17> 'unsigned char *' <LValueToRValue>
| | |       |   | | | `-DeclRefExpr 0x2a822034d60 <col:17> 'unsigned char *' lvalue Var 0x2a8220338b8 'A' 'unsigned char *'
| | |       |   | | `-IntegerLiteral 0x2a822034d80 <col:19> 'int' 6
| | |       |   | `-ImplicitCastExpr 0x2a822034f60 <col:25, col:56> 'int' <IntegralCast>
| | |       |   |   `-CStyleCastExpr 0x2a822034f38 <col:25, col:56> 'unsigned char' <IntegralCast>
| | |       |   |     `-ParenExpr 0x2a822034f18 <col:40, col:56> 'unsigned long long'
| | |       |   |       `-BinaryOperator 0x2a822034ec0 <col:41, col:52> 'unsigned long long' '&'
| | |       |   |         |-ParenExpr 0x2a822034e60 <col:41, col:48> 'size_t':'unsigned long long'
| | |       |   |         | `-BinaryOperator 0x2a822034e40 <col:42, col:47> 'size_t':'unsigned long long' '>>'
| | |       |   |         |   |-ImplicitCastExpr 0x2a822034e28 <col:42> 'size_t':'unsigned long long' <LValueToRValue>
| | |       |   |         |   | `-DeclRefExpr 0x2a822034de0 <col:42> 'size_t':'unsigned long long' lvalue Var 0x2a822033ba8 't' 'size_t':'unsigned long long'
| | |       |   |         |   `-IntegerLiteral 0x2a822034e00 <col:47> 'int' 8
| | |       |   |         `-ImplicitCastExpr 0x2a822034ea8 <col:52> 'unsigned long long' <IntegralCast>
| | |       |   |           `-IntegerLiteral 0x2a822034e80 <col:52> 'int' 255
| | |       |   |-CompoundAssignOperator 0x2a8220351e8 <line:119:17, col:57> 'unsigned char' '^=' ComputeLHSTy='int' ComputeResultTy='int'
| | |       |   | |-ArraySubscriptExpr 0x2a822035030 <col:17, col:20> 'unsigned char' lvalue
| | |       |   | | |-ImplicitCastExpr 0x2a822035018 <col:17> 'unsigned char *' <LValueToRValue>
| | |       |   | | | `-DeclRefExpr 0x2a822034fd0 <col:17> 'unsigned char *' lvalue Var 0x2a8220338b8 'A' 'unsigned char *'
| | |       |   | | `-IntegerLiteral 0x2a822034ff0 <col:19> 'int' 5
| | |       |   | `-ImplicitCastExpr 0x2a8220351d0 <col:25, col:57> 'int' <IntegralCast>
| | |       |   |   `-CStyleCastExpr 0x2a8220351a8 <col:25, col:57> 'unsigned char' <IntegralCast>
| | |       |   |     `-ParenExpr 0x2a822035188 <col:40, col:57> 'unsigned long long'
| | |       |   |       `-BinaryOperator 0x2a822035130 <col:41, col:53> 'unsigned long long' '&'
| | |       |   |         |-ParenExpr 0x2a8220350d0 <col:41, col:49> 'size_t':'unsigned long long'
| | |       |   |         | `-BinaryOperator 0x2a8220350b0 <col:42, col:47> 'size_t':'unsigned long long' '>>'
| | |       |   |         |   |-ImplicitCastExpr 0x2a822035098 <col:42> 'size_t':'unsigned long long' <LValueToRValue>
| | |       |   |         |   | `-DeclRefExpr 0x2a822035050 <col:42> 'size_t':'unsigned long long' lvalue Var 0x2a822033ba8 't' 'size_t':'unsigned long long'
| | |       |   |         |   `-IntegerLiteral 0x2a822035070 <col:47> 'int' 16
| | |       |   |         `-ImplicitCastExpr 0x2a822035118 <col:53> 'unsigned long long' <IntegralCast>
| | |       |   |           `-IntegerLiteral 0x2a8220350f0 <col:53> 'int' 255
| | |       |   `-CompoundAssignOperator 0x2a822035430 <line:120:17, col:57> 'unsigned char' '^=' ComputeLHSTy='int' ComputeResultTy='int'
| | |       |     |-ArraySubscriptExpr 0x2a822035278 <col:17, col:20> 'unsigned char' lvalue
| | |       |     | |-ImplicitCastExpr 0x2a822035260 <col:17> 'unsigned char *' <LValueToRValue>
| | |       |     | | `-DeclRefExpr 0x2a822035218 <col:17> 'unsigned char *' lvalue Var 0x2a8220338b8 'A' 'unsigned char *'
| | |       |     | `-IntegerLiteral 0x2a822035238 <col:19> 'int' 4
| | |       |     `-ImplicitCastExpr 0x2a822035418 <col:25, col:57> 'int' <IntegralCast>
| | |       |       `-CStyleCastExpr 0x2a8220353f0 <col:25, col:57> 'unsigned char' <IntegralCast>
| | |       |         `-ParenExpr 0x2a8220353d0 <col:40, col:57> 'unsigned long long'
| | |       |           `-BinaryOperator 0x2a822035378 <col:41, col:53> 'unsigned long long' '&'
| | |       |             |-ParenExpr 0x2a822035318 <col:41, col:49> 'size_t':'unsigned long long'
| | |       |             | `-BinaryOperator 0x2a8220352f8 <col:42, col:47> 'size_t':'unsigned long long' '>>'
| | |       |             |   |-ImplicitCastExpr 0x2a8220352e0 <col:42> 'size_t':'unsigned long long' <LValueToRValue>
| | |       |             |   | `-DeclRefExpr 0x2a822035298 <col:42> 'size_t':'unsigned long long' lvalue Var 0x2a822033ba8 't' 'size_t':'unsigned long long'
| | |       |             |   `-IntegerLiteral 0x2a8220352b8 <col:47> 'int' 24
| | |       |             `-ImplicitCastExpr 0x2a822035360 <col:53> 'unsigned long long' <IntegralCast>
| | |       |               `-IntegerLiteral 0x2a822035338 <col:53> 'int' 255
| | |       |-CallExpr 0x2a8220355b8 <line:122:13, col:31> 'void *'
| | |       | |-ImplicitCastExpr 0x2a8220355a0 <col:13> 'void *(*)(void *, const void *, unsigned long long)' <FunctionToPointerDecay>
| | |       | | `-DeclRefExpr 0x2a8220354a0 <col:13> 'void *(void *, const void *, unsigned long long)' Function 0x2a822036a70 'memcpy' 'void *(void *, const void *, unsigned long long)'
| | |       | |-ImplicitCastExpr 0x2a8220355f0 <col:20, col:24> 'void *' <BitCast>
| | |       | | `-BinaryOperator 0x2a822035520 <col:20, col:24> 'unsigned char *' '+'
| | |       | |   |-ImplicitCastExpr 0x2a822035508 <col:20> 'unsigned char *' <ArrayToPointerDecay>
| | |       | |   | `-DeclRefExpr 0x2a8220354c0 <col:20> 'unsigned char [16]' lvalue Var 0x2a822033988 'B' 'unsigned char [16]'
| | |       | |   `-IntegerLiteral 0x2a8220354e0 <col:24> 'int' 8
| | |       | |-ImplicitCastExpr 0x2a822035620 <col:27> 'const void *' <BitCast>
| | |       | | `-ImplicitCastExpr 0x2a822035608 <col:27> 'unsigned char *' <LValueToRValue>
| | |       | |   `-DeclRefExpr 0x2a822035540 <col:27> 'unsigned char *' lvalue Var 0x2a822033a08 'R' 'unsigned char *'
| | |       | `-ImplicitCastExpr 0x2a822035638 <col:30> 'unsigned long long' <IntegralCast>
| | |       |   `-IntegerLiteral 0x2a822035560 <col:30> 'int' 8
| | |       `-CallExpr 0x2a8220357e0 <line:124:13, col:31> 'void *'
| | |         |-ImplicitCastExpr 0x2a8220357c8 <col:13> 'void *(*)(void *, const void *, unsigned long long)' <FunctionToPointerDecay>
| | |         | `-DeclRefExpr 0x2a8220356c8 <col:13> 'void *(void *, const void *, unsigned long long)' Function 0x2a822036a70 'memcpy' 'void *(void *, const void *, unsigned long long)'
| | |         |-ImplicitCastExpr 0x2a822035830 <col:20> 'void *' <BitCast>
| | |         | `-ImplicitCastExpr 0x2a822035818 <col:20> 'unsigned char *' <LValueToRValue>
| | |         |   `-DeclRefExpr 0x2a8220356e8 <col:20> 'unsigned char *' lvalue Var 0x2a822033a08 'R' 'unsigned char *'
| | |         |-ImplicitCastExpr 0x2a822035848 <col:23, col:27> 'const void *' <BitCast>
| | |         | `-BinaryOperator 0x2a822035768 <col:23, col:27> 'unsigned char *' '+'
| | |         |   |-ImplicitCastExpr 0x2a822035750 <col:23> 'unsigned char *' <ArrayToPointerDecay>
| | |         |   | `-DeclRefExpr 0x2a822035708 <col:23> 'unsigned char [16]' lvalue Var 0x2a822033988 'B' 'unsigned char [16]'
| | |         |   `-IntegerLiteral 0x2a822035728 <col:27> 'int' 8
| | |         `-ImplicitCastExpr 0x2a822035860 <col:30> 'unsigned long long' <IntegralCast>
| | |           `-IntegerLiteral 0x2a822035788 <col:30> 'int' 8
| | |-CallExpr 0x2a822035a20 <line:127:5, col:20> 'void *'
| | | |-ImplicitCastExpr 0x2a822035a08 <col:5> 'void *(*)(void *, const void *, unsigned long long)' <FunctionToPointerDecay>
| | | | `-DeclRefExpr 0x2a822035938 <col:5> 'void *(void *, const void *, unsigned long long)' Function 0x2a822036a70 'memcpy' 'void *(void *, const void *, unsigned long long)'
| | | |-ImplicitCastExpr 0x2a822035a70 <col:12> 'void *' <BitCast>
| | | | `-ImplicitCastExpr 0x2a822035a58 <col:12> 'unsigned char *' <LValueToRValue>
| | | |   `-DeclRefExpr 0x2a822035958 <col:12> 'unsigned char *' lvalue ParmVar 0x2a822033448 'iv' 'unsigned char *'
| | | |-ImplicitCastExpr 0x2a822035aa0 <col:16> 'const void *' <BitCast>
| | | | `-ImplicitCastExpr 0x2a822035a88 <col:16> 'unsigned char *' <LValueToRValue>
| | | |   `-DeclRefExpr 0x2a822035990 <col:16> 'unsigned char *' lvalue Var 0x2a8220338b8 'A' 'unsigned char *'
| | | `-ImplicitCastExpr 0x2a822035ab8 <col:19> 'unsigned long long' <IntegralCast>
| | |   `-IntegerLiteral 0x2a8220359b0 <col:19> 'int' 8
| | `-ReturnStmt 0x2a822035b08 <line:128:5, col:12>
| |   `-ImplicitCastExpr 0x2a822035af0 <col:12> 'size_t':'unsigned long long' <LValueToRValue>
| |     `-DeclRefExpr 0x2a822035ad0 <col:12> 'size_t':'unsigned long long' lvalue ParmVar 0x2a8220335c0 'inlen' 'size_t':'unsigned long long'
| `-FullComment 0x2a822044e28 <line:83:4, line:97:47>
|   |-ParagraphComment 0x2a822044798 <line:83:4, line:84:58>
|   | |-TextComment 0x2a822044748 <line:83:4, col:61> Text=" Unwrapping according to RFC 3394 section 2.2.2 steps 1-2."
|   | `-TextComment 0x2a822044768 <line:84:3, col:58> Text="  The IV check (step 3) is responsibility of the caller."
|   |-ParagraphComment 0x2a8220447e0 <line:86:3, col:4>
|   | `-TextComment 0x2a8220447b8 <col:3, col:4> Text="  "
|   |-ParamCommandComment 0x2a822044800 <col:5, line:87:4> [in] explicitly Param="key" ParamIndex=0
|   | `-ParagraphComment 0x2a8220448a8 <line:86:20, line:87:4>
|   |   |-TextComment 0x2a822044858 <line:86:20, col:33> Text="    Key value."
|   |   `-TextComment 0x2a822044878 <line:87:3, col:4> Text="  "
|   |-ParamCommandComment 0x2a8220448c8 <col:5, line:88:4> [out] explicitly Param="iv" ParamIndex=1
|   | `-ParagraphComment 0x2a822044970 <line:87:19, line:88:4>
|   |   |-TextComment 0x2a822044920 <line:87:19, col:75> Text="     Unchecked IV value. Minimal buffer length = 8 bytes."
|   |   `-TextComment 0x2a822044940 <line:88:3, col:4> Text="  "
|   |-ParamCommandComment 0x2a822044990 <col:5, line:92:4> [out] explicitly Param="out" ParamIndex=2
|   | `-ParagraphComment 0x2a822044ab0 <line:88:20, line:92:4>
|   |   |-TextComment 0x2a8220449e8 <line:88:20, col:44> Text="    Plaintext without IV."
|   |   |-TextComment 0x2a822044a08 <line:89:3, col:65> Text="                     Minimal buffer length = (inlen - 8) bytes."
|   |   |-TextComment 0x2a822044a28 <line:90:3, col:77> Text="                     Input and output buffers can overlap if block function"
|   |   |-TextComment 0x2a822044a48 <line:91:3, col:37> Text="                     supports that."
|   |   `-TextComment 0x2a822044a68 <line:92:3, col:4> Text="  "
|   |-ParamCommandComment 0x2a822044ad0 <col:5, line:93:4> [in] explicitly Param="in" ParamIndex=3
|   | `-ParagraphComment 0x2a822044b70 <line:92:19, line:93:4>
|   |   |-TextComment 0x2a822044b20 <line:92:19, col:53> Text="     Ciphertext as n 64-bit blocks."
|   |   `-TextComment 0x2a822044b40 <line:93:3, col:4> Text="  "
|   |-ParamCommandComment 0x2a822044b90 <col:5, line:94:4> [in] explicitly Param="inlen" ParamIndex=4
|   | `-ParagraphComment 0x2a822044c38 <line:93:22, line:94:4>
|   |   |-TextComment 0x2a822044be8 <line:93:22, col:36> Text="  Length of in."
|   |   `-TextComment 0x2a822044c08 <line:94:3, col:4> Text="  "
|   |-ParamCommandComment 0x2a822044c58 <col:5, line:95:4> [in] explicitly Param="block" ParamIndex=5
|   | `-ParagraphComment 0x2a822044d00 <line:94:22, line:95:4>
|   |   |-TextComment 0x2a822044cb0 <line:94:22, col:49> Text="  Block processing function."
|   |   `-TextComment 0x2a822044cd0 <line:95:3, col:4> Text="  "
|   `-BlockCommandComment 0x2a822044d20 <col:5, line:97:47> Name="return"
|     `-ParagraphComment 0x2a822044dc0 <line:95:12, line:97:47>
|       |-TextComment 0x2a822044d48 <line:95:12, col:74> Text="            0 if inlen is out of range [24, CRYPTO128_WRAP_MAX]"
|       |-TextComment 0x2a822044d68 <line:96:3, col:58> Text="                     or if inlen is not a multiple of 8."
|       `-TextComment 0x2a822044d88 <line:97:3, col:47> Text="                     Output length otherwise."
|-FunctionDecl 0x2a822035ef8 <line:150:1, line:168:1> line:150:8 invalid CRYPTO_128_unwrap 'size_t (void *, const unsigned char *, unsigned char *, const unsigned char *, size_t, int)'
| |-ParmVarDecl 0x2a822035bc8 <col:26, col:32> col:32 used key 'void *'
| |-ParmVarDecl 0x2a822035c48 <col:37, col:58> col:58 used iv 'const unsigned char *'
| |-ParmVarDecl 0x2a822035cc8 <line:151:26, col:41> col:41 used out 'unsigned char *'
| |-ParmVarDecl 0x2a822035d48 <col:46, col:67> col:67 used in 'const unsigned char *'
| |-ParmVarDecl 0x2a822035dc0 <line:152:26, col:33> col:33 used inlen 'size_t':'unsigned long long'
| |-ParmVarDecl 0x2a822035e40 <col:40, col:51> col:51 invalid block 'int'
| |-CompoundStmt 0x2a822047bb0 <line:153:1, line:168:1>
| | |-DeclStmt 0x2a822047250 <line:154:5, col:15>
| | | `-VarDecl 0x2a8220471e8 <col:5, col:12> col:12 used ret 'size_t':'unsigned long long'
| | |-DeclStmt 0x2a822047338 <line:155:5, col:28>
| | | `-VarDecl 0x2a8220472d0 <col:5, col:27> col:19 used got_iv 'unsigned char [8]'
| | |-IfStmt 0x2a822047588 <line:158:5, line:159:16>
| | | |-BinaryOperator 0x2a822047518 <line:158:9, col:16> 'int' '=='
| | | | |-ImplicitCastExpr 0x2a8220474e8 <col:9> 'size_t':'unsigned long long' <LValueToRValue>
| | | | | `-DeclRefExpr 0x2a8220474a0 <col:9> 'size_t':'unsigned long long' lvalue Var 0x2a8220471e8 'ret' 'size_t':'unsigned long long'
| | | | `-ImplicitCastExpr 0x2a822047500 <col:16> 'unsigned long long' <IntegralCast>
| | | |   `-IntegerLiteral 0x2a8220474c0 <col:16> 'int' 0
| | | `-ReturnStmt 0x2a822047578 <line:159:9, col:16>
| | |   `-ImplicitCastExpr 0x2a822047560 <col:16> 'size_t':'unsigned long long' <IntegralCast>
| | |     `-IntegerLiteral 0x2a822047538 <col:16> 'int' 0
| | |-IfStmt 0x2a822047680 <line:161:5, line:162:14>
| | | |-UnaryOperator 0x2a8220475f0 <line:161:9, col:10> 'int' prefix '!' cannot overflow
| | | | `-ImplicitCastExpr 0x2a8220475d8 <col:10> 'const unsigned char *' <LValueToRValue>
| | | |   `-DeclRefExpr 0x2a8220475a0 <col:10> 'const unsigned char *' lvalue ParmVar 0x2a822035c48 'iv' 'const unsigned char *'
| | | `-BinaryOperator 0x2a822047660 <line:162:9, col:14> 'const unsigned char *' '='
| | |   |-DeclRefExpr 0x2a822047608 <col:9> 'const unsigned char *' lvalue ParmVar 0x2a822035c48 'iv' 'const unsigned char *'
| | |   `-ImplicitCastExpr 0x2a822047648 <col:14> 'const unsigned char *' <ArrayToPointerDecay>
| | |     `-DeclRefExpr 0x2a822047628 <col:14> 'const unsigned char [8]' lvalue Var 0x2a8207203f0 'default_iv' 'const unsigned char [8]'
| | |-IfStmt 0x2a822047b20 <line:163:5, line:166:5>
| | | |-CallExpr 0x2a822047880 <line:163:9, col:36> 'int'
| | | | |-ImplicitCastExpr 0x2a822047868 <col:9> 'int (*)()' <FunctionToPointerDecay>
| | | | | `-DeclRefExpr 0x2a8220477b8 <col:9> 'int ()' Function 0x2a8220476f0 'CRYPTO_memcmp' 'int ()'
| | | | |-ImplicitCastExpr 0x2a8220478b8 <col:23> 'unsigned char *' <ArrayToPointerDecay>
| | | | | `-DeclRefExpr 0x2a8220477d8 <col:23> 'unsigned char [8]' lvalue Var 0x2a8220472d0 'got_iv' 'unsigned char [8]'
| | | | |-ImplicitCastExpr 0x2a8220478d0 <col:31> 'const unsigned char *' <LValueToRValue>
| | | | | `-DeclRefExpr 0x2a8220477f8 <col:31> 'const unsigned char *' lvalue ParmVar 0x2a822035c48 'iv' 'const unsigned char *'
| | | | `-IntegerLiteral 0x2a822047818 <col:35> 'int' 8
| | | `-CompoundStmt 0x2a822047b00 <col:39, line:166:5>
| | |   |-CallExpr 0x2a822047a50 <line:164:9, col:33> 'int'
| | |   | |-ImplicitCastExpr 0x2a822047a38 <col:9> 'int (*)()' <FunctionToPointerDecay>
| | |   | | `-DeclRefExpr 0x2a8220479d8 <col:9> 'int ()' Function 0x2a822047910 'OPENSSL_cleanse' 'int ()'
| | |   | |-ImplicitCastExpr 0x2a822047a80 <col:25> 'unsigned char *' <LValueToRValue>
| | |   | | `-DeclRefExpr 0x2a8220479f8 <col:25> 'unsigned char *' lvalue ParmVar 0x2a822035cc8 'out' 'unsigned char *'
| | |   | `-ImplicitCastExpr 0x2a822047a98 <col:30> 'size_t':'unsigned long long' <LValueToRValue>
| | |   |   `-DeclRefExpr 0x2a822047a18 <col:30> 'size_t':'unsigned long long' lvalue Var 0x2a8220471e8 'ret' 'size_t':'unsigned long long'
| | |   `-ReturnStmt 0x2a822047af0 <line:165:9, col:16>
| | |     `-ImplicitCastExpr 0x2a822047ad8 <col:16> 'size_t':'unsigned long long' <IntegralCast>
| | |       `-IntegerLiteral 0x2a822047ab0 <col:16> 'int' 0
| | `-ReturnStmt 0x2a822047b70 <line:167:5, col:12>
| |   `-ImplicitCastExpr 0x2a822047b58 <col:12> 'size_t':'unsigned long long' <LValueToRValue>
| |     `-DeclRefExpr 0x2a822047b38 <col:12> 'size_t':'unsigned long long' lvalue Var 0x2a8220471e8 'ret' 'size_t':'unsigned long long'
| `-FullComment 0x2a82204c6a0 <line:131:4, line:148:47>
|   |-ParagraphComment 0x2a822044f18 <line:131:4, line:133:22>
|   | |-TextComment 0x2a822044ea0 <line:131:4, col:75> Text=" Unwrapping according to RFC 3394 section 2.2.2, including the IV check."
|   | |-TextComment 0x2a822044ec0 <line:132:3, col:75> Text="  The first block of plaintext has to match the supplied IV, otherwise an"
|   | `-TextComment 0x2a822044ee0 <line:133:3, col:22> Text="  error is returned."
|   |-ParagraphComment 0x2a822044f60 <line:135:3, col:4>
|   | `-TextComment 0x2a822044f38 <col:3, col:4> Text="  "
|   |-ParamCommandComment 0x2a822044f80 <col:5, line:136:4> [in] explicitly Param="key" ParamIndex=0
|   | `-ParagraphComment 0x2a822045028 <line:135:20, line:136:4>
|   |   |-TextComment 0x2a822044fd8 <line:135:20, col:33> Text="    Key value."
|   |   `-TextComment 0x2a822044ff8 <line:136:3, col:4> Text="  "
|   |-ParamCommandComment 0x2a822045048 <col:5, line:138:4> [out] explicitly Param="iv" ParamIndex=1
|   | `-ParagraphComment 0x2a822045118 <line:136:19, line:138:4>
|   |   |-TextComment 0x2a8220450a0 <line:136:19, col:67> Text="     IV value to match against. Length = 8 bytes."
|   |   |-TextComment 0x2a8220450c0 <line:137:3, col:45> Text="                     NULL = use default_iv."
|   |   `-TextComment 0x2a8220450e0 <line:138:3, col:4> Text="  "
|   |-ParamCommandComment 0x2a82204c1e0 <col:5, line:142:4> [out] explicitly Param="out" ParamIndex=2
|   | `-ParagraphComment 0x2a82204c300 <line:138:20, line:142:4>
|   |   |-TextComment 0x2a82204c238 <line:138:20, col:44> Text="    Plaintext without IV."
|   |   |-TextComment 0x2a82204c258 <line:139:3, col:65> Text="                     Minimal buffer length = (inlen - 8) bytes."
|   |   |-TextComment 0x2a82204c278 <line:140:3, col:77> Text="                     Input and output buffers can overlap if block function"
|   |   |-TextComment 0x2a82204c298 <line:141:3, col:37> Text="                     supports that."
|   |   `-TextComment 0x2a82204c2b8 <line:142:3, col:4> Text="  "
|   |-ParamCommandComment 0x2a82204c320 <col:5, line:143:4> [in] explicitly Param="in" ParamIndex=3
|   | `-ParagraphComment 0x2a82204c3c0 <line:142:19, line:143:4>
|   |   |-TextComment 0x2a82204c370 <line:142:19, col:53> Text="     Ciphertext as n 64-bit blocks."
|   |   `-TextComment 0x2a82204c390 <line:143:3, col:4> Text="  "
|   |-ParamCommandComment 0x2a82204c3e0 <col:5, line:144:4> [in] explicitly Param="inlen" ParamIndex=4
|   | `-ParagraphComment 0x2a82204c488 <line:143:22, line:144:4>
|   |   |-TextComment 0x2a82204c438 <line:143:22, col:36> Text="  Length of in."
|   |   `-TextComment 0x2a82204c458 <line:144:3, col:4> Text="  "
|   |-ParamCommandComment 0x2a82204c4a8 <col:5, line:145:4> [in] explicitly Param="block" ParamIndex=5
|   | `-ParagraphComment 0x2a82204c550 <line:144:22, line:145:4>
|   |   |-TextComment 0x2a82204c500 <line:144:22, col:49> Text="  Block processing function."
|   |   `-TextComment 0x2a82204c520 <line:145:3, col:4> Text="  "
|   `-BlockCommandComment 0x2a82204c570 <col:5, line:148:47> Name="return"
|     `-ParagraphComment 0x2a82204c638 <line:145:12, line:148:47>
|       |-TextComment 0x2a82204c598 <line:145:12, col:74> Text="            0 if inlen is out of range [24, CRYPTO128_WRAP_MAX]"
|       |-TextComment 0x2a82204c5b8 <line:146:3, col:57> Text="                     or if inlen is not a multiple of 8"
|       |-TextComment 0x2a82204c5d8 <line:147:3, col:61> Text="                     or if IV doesn't match expected value."
|       `-TextComment 0x2a82204c5f8 <line:148:3, col:47> Text="                     Output length otherwise."
|-FunctionDecl 0x2a822047f38 <line:183:1, line:234:1> line:183:8 invalid CRYPTO_128_wrap_pad 'size_t (void *, const unsigned char *, unsigned char *, const unsigned char *, size_t, int)'
| |-ParmVarDecl 0x2a822047c08 <col:28, col:34> col:34 used key 'void *'
| |-ParmVarDecl 0x2a822047c88 <col:39, col:60> col:60 used icv 'const unsigned char *'
| |-ParmVarDecl 0x2a822047d08 <line:184:28, col:43> col:43 used out 'unsigned char *'
| |-ParmVarDecl 0x2a822047d88 <line:185:28, col:49> col:49 used in 'const unsigned char *'
| |-ParmVarDecl 0x2a822047e00 <col:53, col:60> col:60 used inlen 'size_t':'unsigned long long'
| |-ParmVarDecl 0x2a822047e80 <line:186:28, col:39> col:39 invalid block 'int'
| |-CompoundStmt 0x2a82204c158 <line:187:1, line:234:1>
| | |-DeclStmt 0x2a8220481d8 <line:194:5, col:49>
| | | `-VarDecl 0x2a822048030 <col:5, col:48> col:18 used blocks_padded 'const size_t':'const unsigned long long' cinit
| | |   `-BinaryOperator 0x2a8220481b8 <col:34, col:48> 'unsigned long long' '/'
| | |     |-ParenExpr 0x2a822048148 <col:34, col:44> 'unsigned long long'
| | |     | `-BinaryOperator 0x2a822048128 <col:35, col:43> 'unsigned long long' '+'
| | |     |   |-ImplicitCastExpr 0x2a8220480f8 <col:35> 'size_t':'unsigned long long' <LValueToRValue>
| | |     |   | `-DeclRefExpr 0x2a822048098 <col:35> 'size_t':'unsigned long long' lvalue ParmVar 0x2a822047e00 'inlen' 'size_t':'unsigned long long'
| | |     |   `-ImplicitCastExpr 0x2a822048110 <col:43> 'unsigned long long' <IntegralCast>
| | |     |     `-IntegerLiteral 0x2a8220480d0 <col:43> 'int' 7
| | |     `-ImplicitCastExpr 0x2a8220481a0 <col:48> 'unsigned long long' <IntegralCast>
| | |       `-IntegerLiteral 0x2a822048168 <col:48> 'int' 8
| | |-DeclStmt 0x2a822048360 <line:195:5, col:48>
| | | `-VarDecl 0x2a822048200 <col:5, col:47> col:18 used padded_len 'const size_t':'const unsigned long long' cinit
| | |   `-BinaryOperator 0x2a8220482f8 <col:31, col:47> 'unsigned long long' '*'
| | |     |-ImplicitCastExpr 0x2a8220482c8 <col:31> 'size_t':'unsigned long long' <LValueToRValue>
| | |     | `-DeclRefExpr 0x2a822048268 <col:31> 'const size_t':'const unsigned long long' lvalue Var 0x2a822048030 'blocks_padded' 'const size_t':'const unsigned long long'
| | |     `-ImplicitCastExpr 0x2a8220482e0 <col:47> 'unsigned long long' <IntegralCast>
| | |       `-IntegerLiteral 0x2a8220482a0 <col:47> 'int' 8
| | |-DeclStmt 0x2a8220484e0 <line:196:5, col:50>
| | | `-VarDecl 0x2a822048388 <col:5, col:45> col:18 used padding_len 'const size_t':'const unsigned long long' cinit
| | |   `-BinaryOperator 0x2a822048478 <col:32, col:45> 'unsigned long long' '-'
| | |     |-ImplicitCastExpr 0x2a822048448 <col:32> 'size_t':'unsigned long long' <LValueToRValue>
| | |     | `-DeclRefExpr 0x2a8220483f0 <col:32> 'const size_t':'const unsigned long long' lvalue Var 0x2a822048200 'padded_len' 'const size_t':'const unsigned long long'
| | |     `-ImplicitCastExpr 0x2a822048460 <col:45> 'size_t':'unsigned long long' <LValueToRValue>
| | |       `-DeclRefExpr 0x2a822048428 <col:45> 'size_t':'unsigned long long' lvalue ParmVar 0x2a822047e00 'inlen' 'size_t':'unsigned long long'
| | |-DeclStmt 0x2a8220485c8 <line:198:5, col:25>
| | | `-VarDecl 0x2a822048560 <col:5, col:24> col:19 used aiv 'unsigned char [8]'
| | |-DeclStmt 0x2a822048660 <line:199:5, col:12>
| | | `-VarDecl 0x2a8220485f8 <col:5, col:9> col:9 used ret 'int'
| | |-IfStmt 0x2a822048880 <line:202:5, line:203:16>
| | | |-BinaryOperator 0x2a822048810 <line:202:9, line:32:38> 'int' '||'
| | | | |-BinaryOperator 0x2a8220486f0 <line:202:9, col:18> 'int' '=='
| | | | | |-ImplicitCastExpr 0x2a8220486c0 <col:9> 'size_t':'unsigned long long' <LValueToRValue>
| | | | | | `-DeclRefExpr 0x2a822048678 <col:9> 'size_t':'unsigned long long' lvalue ParmVar 0x2a822047e00 'inlen' 'size_t':'unsigned long long'
| | | | | `-ImplicitCastExpr 0x2a8220486d8 <col:18> 'unsigned long long' <IntegralCast>
| | | | |   `-IntegerLiteral 0x2a822048698 <col:18> 'int' 0
| | | | `-BinaryOperator 0x2a8220487f0 <col:23, line:32:38> 'int' '>='
| | | |   |-ImplicitCastExpr 0x2a8220487c0 <line:202:23> 'size_t':'unsigned long long' <LValueToRValue>
| | | |   | `-DeclRefExpr 0x2a822048710 <col:23> 'size_t':'unsigned long long' lvalue ParmVar 0x2a822047e00 'inlen' 'size_t':'unsigned long long'
| | | |   `-ImplicitCastExpr 0x2a8220487d8 <line:32:28, col:38> 'unsigned long long' <IntegralCast>
| | | |     `-ParenExpr 0x2a8220487a0 <col:28, col:38> 'unsigned long'
| | | |       `-BinaryOperator 0x2a822048780 <col:29, col:36> 'unsigned long' '<<'
| | | |         |-IntegerLiteral 0x2a822048730 <col:29> 'unsigned long' 1
| | | |         `-IntegerLiteral 0x2a822048758 <col:36> 'int' 31
| | | `-ReturnStmt 0x2a822048870 <line:203:9, col:16>
| | |   `-ImplicitCastExpr 0x2a822048858 <col:16> 'size_t':'unsigned long long' <IntegralCast>
| | |     `-IntegerLiteral 0x2a822048830 <col:16> 'int' 0
| | |-IfStmt 0x2a822048c18 <line:206:5, line:209:27> has_else
| | | |-UnaryOperator 0x2a8220488e8 <line:206:9, col:10> 'int' prefix '!' cannot overflow
| | | | `-ImplicitCastExpr 0x2a8220488d0 <col:10> 'const unsigned char *' <LValueToRValue>
| | | |   `-DeclRefExpr 0x2a822048898 <col:10> 'const unsigned char *' lvalue ParmVar 0x2a822047c88 'icv' 'const unsigned char *'
| | | |-CallExpr 0x2a8220489e8 <line:207:9, col:35> 'void *'
| | | | |-ImplicitCastExpr 0x2a8220489d0 <col:9> 'void *(*)(void *, const void *, unsigned long long)' <FunctionToPointerDecay>
| | | | | `-DeclRefExpr 0x2a822048900 <col:9> 'void *(void *, const void *, unsigned long long)' Function 0x2a822036a70 'memcpy' 'void *(void *, const void *, unsigned long long)'
| | | | |-ImplicitCastExpr 0x2a822048a38 <col:16> 'void *' <BitCast>
| | | | | `-ImplicitCastExpr 0x2a822048a20 <col:16> 'unsigned char *' <ArrayToPointerDecay>
| | | | |   `-DeclRefExpr 0x2a822048920 <col:16> 'unsigned char [8]' lvalue Var 0x2a822048560 'aiv' 'unsigned char [8]'
| | | | |-ImplicitCastExpr 0x2a822048a68 <col:21> 'const void *' <BitCast>
| | | | | `-ImplicitCastExpr 0x2a822048a50 <col:21> 'const unsigned char *' <ArrayToPointerDecay>
| | | | |   `-DeclRefExpr 0x2a822048958 <col:21> 'const unsigned char [4]' lvalue Var 0x2a822032350 'default_aiv' 'const unsigned char [4]'
| | | | `-ImplicitCastExpr 0x2a822048a80 <col:34> 'unsigned long long' <IntegralCast>
| | | |   `-IntegerLiteral 0x2a822048978 <col:34> 'int' 4
| | | `-CallExpr 0x2a822048b68 <line:209:9, col:27> 'void *'
| | |   |-ImplicitCastExpr 0x2a822048b50 <col:9> 'void *(*)(void *, const void *, unsigned long long)' <FunctionToPointerDecay>
| | |   | `-DeclRefExpr 0x2a822048a98 <col:9> 'void *(void *, const void *, unsigned long long)' Function 0x2a822036a70 'memcpy' 'void *(void *, const void *, unsigned long long)'
| | |   |-ImplicitCastExpr 0x2a822048bb8 <col:16> 'void *' <BitCast>
| | |   | `-ImplicitCastExpr 0x2a822048ba0 <col:16> 'unsigned char *' <ArrayToPointerDecay>
| | |   |   `-DeclRefExpr 0x2a822048ab8 <col:16> 'unsigned char [8]' lvalue Var 0x2a822048560 'aiv' 'unsigned char [8]'
| | |   |-ImplicitCastExpr 0x2a822048be8 <col:21> 'const void *' <BitCast>
| | |   | `-ImplicitCastExpr 0x2a822048bd0 <col:21> 'const unsigned char *' <LValueToRValue>
| | |   |   `-DeclRefExpr 0x2a822048ad8 <col:21> 'const unsigned char *' lvalue ParmVar 0x2a822047c88 'icv' 'const unsigned char *'
| | |   `-ImplicitCastExpr 0x2a822048c00 <col:26> 'unsigned long long' <IntegralCast>
| | |     `-IntegerLiteral 0x2a822048af8 <col:26> 'int' 4
| | |-BinaryOperator 0x2a822048dd8 <line:211:5, col:30> 'unsigned char' '='
| | | |-ArraySubscriptExpr 0x2a822048ca0 <col:5, col:10> 'unsigned char' lvalue
| | | | |-ImplicitCastExpr 0x2a822048c88 <col:5> 'unsigned char *' <ArrayToPointerDecay>
| | | | | `-DeclRefExpr 0x2a822048c40 <col:5> 'unsigned char [8]' lvalue Var 0x2a822048560 'aiv' 'unsigned char [8]'
| | | | `-IntegerLiteral 0x2a822048c60 <col:9> 'int' 4
| | | `-ImplicitCastExpr 0x2a822048dc0 <col:14, col:30> 'unsigned char' <IntegralCast>
| | |   `-BinaryOperator 0x2a822048da0 <col:14, col:30> 'unsigned long long' '&'
| | |     |-ParenExpr 0x2a822048d40 <col:14, col:26> 'size_t':'unsigned long long'
| | |     | `-BinaryOperator 0x2a822048d20 <col:15, col:24> 'size_t':'unsigned long long' '>>'
| | |     |   |-ImplicitCastExpr 0x2a822048d08 <col:15> 'size_t':'unsigned long long' <LValueToRValue>
| | |     |   | `-DeclRefExpr 0x2a822048cc0 <col:15> 'size_t':'unsigned long long' lvalue ParmVar 0x2a822047e00 'inlen' 'size_t':'unsigned long long'
| | |     |   `-IntegerLiteral 0x2a822048ce0 <col:24> 'int' 24
| | |     `-ImplicitCastExpr 0x2a822048d88 <col:30> 'unsigned long long' <IntegralCast>
| | |       `-IntegerLiteral 0x2a822048d60 <col:30> 'int' 255
| | |-BinaryOperator 0x2a822048f90 <line:212:5, col:30> 'unsigned char' '='
| | | |-ArraySubscriptExpr 0x2a822048e58 <col:5, col:10> 'unsigned char' lvalue
| | | | |-ImplicitCastExpr 0x2a822048e40 <col:5> 'unsigned char *' <ArrayToPointerDecay>
| | | | | `-DeclRefExpr 0x2a822048df8 <col:5> 'unsigned char [8]' lvalue Var 0x2a822048560 'aiv' 'unsigned char [8]'
| | | | `-IntegerLiteral 0x2a822048e18 <col:9> 'int' 5
| | | `-ImplicitCastExpr 0x2a822048f78 <col:14, col:30> 'unsigned char' <IntegralCast>
| | |   `-BinaryOperator 0x2a822048f58 <col:14, col:30> 'unsigned long long' '&'
| | |     |-ParenExpr 0x2a822048ef8 <col:14, col:26> 'size_t':'unsigned long long'
| | |     | `-BinaryOperator 0x2a822048ed8 <col:15, col:24> 'size_t':'unsigned long long' '>>'
| | |     |   |-ImplicitCastExpr 0x2a822048ec0 <col:15> 'size_t':'unsigned long long' <LValueToRValue>
| | |     |   | `-DeclRefExpr 0x2a822048e78 <col:15> 'size_t':'unsigned long long' lvalue ParmVar 0x2a822047e00 'inlen' 'size_t':'unsigned long long'
| | |     |   `-IntegerLiteral 0x2a822048e98 <col:24> 'int' 16
| | |     `-ImplicitCastExpr 0x2a822048f40 <col:30> 'unsigned long long' <IntegralCast>
| | |       `-IntegerLiteral 0x2a822048f18 <col:30> 'int' 255
| | |-BinaryOperator 0x2a822049148 <line:213:5, col:29> 'unsigned char' '='
| | | |-ArraySubscriptExpr 0x2a822049010 <col:5, col:10> 'unsigned char' lvalue
| | | | |-ImplicitCastExpr 0x2a822048ff8 <col:5> 'unsigned char *' <ArrayToPointerDecay>
| | | | | `-DeclRefExpr 0x2a822048fb0 <col:5> 'unsigned char [8]' lvalue Var 0x2a822048560 'aiv' 'unsigned char [8]'
| | | | `-IntegerLiteral 0x2a822048fd0 <col:9> 'int' 6
| | | `-ImplicitCastExpr 0x2a822049130 <col:14, col:29> 'unsigned char' <IntegralCast>
| | |   `-BinaryOperator 0x2a822049110 <col:14, col:29> 'unsigned long long' '&'
| | |     |-ParenExpr 0x2a8220490b0 <col:14, col:25> 'size_t':'unsigned long long'
| | |     | `-BinaryOperator 0x2a822049090 <col:15, col:24> 'size_t':'unsigned long long' '>>'
| | |     |   |-ImplicitCastExpr 0x2a822049078 <col:15> 'size_t':'unsigned long long' <LValueToRValue>
| | |     |   | `-DeclRefExpr 0x2a822049030 <col:15> 'size_t':'unsigned long long' lvalue ParmVar 0x2a822047e00 'inlen' 'size_t':'unsigned long long'
| | |     |   `-IntegerLiteral 0x2a822049050 <col:24> 'int' 8
| | |     `-ImplicitCastExpr 0x2a8220490f8 <col:29> 'unsigned long long' <IntegralCast>
| | |       `-IntegerLiteral 0x2a8220490d0 <col:29> 'int' 255
| | |-BinaryOperator 0x2a82204b2e0 <line:214:5, col:22> 'unsigned char' '='
| | | |-ArraySubscriptExpr 0x2a82204b210 <col:5, col:10> 'unsigned char' lvalue
| | | | |-ImplicitCastExpr 0x2a82204b1f8 <col:5> 'unsigned char *' <ArrayToPointerDecay>
| | | | | `-DeclRefExpr 0x2a822049168 <col:5> 'unsigned char [8]' lvalue Var 0x2a822048560 'aiv' 'unsigned char [8]'
| | | | `-IntegerLiteral 0x2a82204b1d0 <col:9> 'int' 7
| | | `-ImplicitCastExpr 0x2a82204b2c8 <col:14, col:22> 'unsigned char' <IntegralCast>
| | |   `-BinaryOperator 0x2a82204b2a8 <col:14, col:22> 'unsigned long long' '&'
| | |     |-ImplicitCastExpr 0x2a82204b278 <col:14> 'size_t':'unsigned long long' <LValueToRValue>
| | |     | `-DeclRefExpr 0x2a82204b230 <col:14> 'size_t':'unsigned long long' lvalue ParmVar 0x2a822047e00 'inlen' 'size_t':'unsigned long long'
| | |     `-ImplicitCastExpr 0x2a82204b290 <col:22> 'unsigned long long' <IntegralCast>
| | |       `-IntegerLiteral 0x2a82204b250 <col:22> 'int' 255
| | |-IfStmt 0x2a82204c0a0 <line:216:5, line:231:5> has_else
| | | |-BinaryOperator 0x2a82204b378 <line:216:9, col:23> 'int' '=='
| | | | |-ImplicitCastExpr 0x2a82204b348 <col:9> 'size_t':'unsigned long long' <LValueToRValue>
| | | | | `-DeclRefExpr 0x2a82204b300 <col:9> 'const size_t':'const unsigned long long' lvalue Var 0x2a822048200 'padded_len' 'const size_t':'const unsigned long long'
| | | | `-ImplicitCastExpr 0x2a82204b360 <col:23> 'unsigned long long' <IntegralCast>
| | | |   `-IntegerLiteral 0x2a82204b320 <col:23> 'int' 8
| | | |-CompoundStmt 0x2a82204bc70 <col:26, line:227:5>
| | | | |-CallExpr 0x2a82204b4f0 <line:222:9, col:35> 'void *'
| | | | | |-ImplicitCastExpr 0x2a82204b4d8 <col:9> 'void *(*)(void *, const void *, unsigned long long)' <FunctionToPointerDecay>
| | | | | | `-DeclRefExpr 0x2a82204b398 <col:9> 'void *(void *, const void *, unsigned long long)' Function 0x2a822036550 'memmove' 'void *(void *, const void *, unsigned long long)'
| | | | | |-ImplicitCastExpr 0x2a82204b528 <col:17, col:23> 'void *' <BitCast>
| | | | | | `-BinaryOperator 0x2a82204b430 <col:17, col:23> 'unsigned char *' '+'
| | | | | |   |-ImplicitCastExpr 0x2a82204b418 <col:17> 'unsigned char *' <LValueToRValue>
| | | | | |   | `-DeclRefExpr 0x2a82204b3b8 <col:17> 'unsigned char *' lvalue ParmVar 0x2a822047d08 'out' 'unsigned char *'
| | | | | |   `-IntegerLiteral 0x2a82204b3f0 <col:23> 'int' 8
| | | | | |-ImplicitCastExpr 0x2a82204b558 <col:26> 'const void *' <BitCast>
| | | | | | `-ImplicitCastExpr 0x2a82204b540 <col:26> 'const unsigned char *' <LValueToRValue>
| | | | | |   `-DeclRefExpr 0x2a82204b450 <col:26> 'const unsigned char *' lvalue ParmVar 0x2a822047d88 'in' 'const unsigned char *'
| | | | | `-ImplicitCastExpr 0x2a82204b570 <col:30> 'size_t':'unsigned long long' <LValueToRValue>
| | | | |   `-DeclRefExpr 0x2a82204b488 <col:30> 'size_t':'unsigned long long' lvalue ParmVar 0x2a822047e00 'inlen' 'size_t':'unsigned long long'
| | | | |-CallExpr 0x2a82204b658 <line:223:9, col:27> 'void *'
| | | | | |-ImplicitCastExpr 0x2a82204b640 <col:9> 'void *(*)(void *, const void *, unsigned long long)' <FunctionToPointerDecay>
| | | | | | `-DeclRefExpr 0x2a82204b588 <col:9> 'void *(void *, const void *, unsigned long long)' Function 0x2a822036a70 'memcpy' 'void *(void *, const void *, unsigned long long)'
| | | | | |-ImplicitCastExpr 0x2a82204b6a8 <col:16> 'void *' <BitCast>
| | | | | | `-ImplicitCastExpr 0x2a82204b690 <col:16> 'unsigned char *' <LValueToRValue>
| | | | | |   `-DeclRefExpr 0x2a82204b5a8 <col:16> 'unsigned char *' lvalue ParmVar 0x2a822047d08 'out' 'unsigned char *'
| | | | | |-ImplicitCastExpr 0x2a82204b6d8 <col:21> 'const void *' <BitCast>
| | | | | | `-ImplicitCastExpr 0x2a82204b6c0 <col:21> 'unsigned char *' <ArrayToPointerDecay>
| | | | | |   `-DeclRefExpr 0x2a82204b5c8 <col:21> 'unsigned char [8]' lvalue Var 0x2a822048560 'aiv' 'unsigned char [8]'
| | | | | `-ImplicitCastExpr 0x2a82204b6f0 <col:26> 'unsigned long long' <IntegralCast>
| | | | |   `-IntegerLiteral 0x2a82204b5e8 <col:26> 'int' 8
| | | | |-CallExpr 0x2a82204bb10 <line:224:9, col:47> 'void *'
| | | | | |-ImplicitCastExpr 0x2a82204baf8 <col:9> 'void *(*)(void *, int, unsigned long long)' <FunctionToPointerDecay>
| | | | | | `-DeclRefExpr 0x2a82204b940 <col:9> 'void *(void *, int, unsigned long long)' Function 0x2a82204b750 'memset' 'void *(void *, int, unsigned long long)'
| | | | | |-ImplicitCastExpr 0x2a82204bb48 <col:16, col:26> 'void *' <BitCast>
| | | | | | `-BinaryOperator 0x2a82204ba30 <col:16, col:26> 'unsigned char *' '+'
| | | | | |   |-BinaryOperator 0x2a82204b9d8 <col:16, col:22> 'unsigned char *' '+'
| | | | | |   | |-ImplicitCastExpr 0x2a82204b9c0 <col:16> 'unsigned char *' <LValueToRValue>
| | | | | |   | | `-DeclRefExpr 0x2a82204b978 <col:16> 'unsigned char *' lvalue ParmVar 0x2a822047d08 'out' 'unsigned char *'
| | | | | |   | `-IntegerLiteral 0x2a82204b998 <col:22> 'int' 8
| | | | | |   `-ImplicitCastExpr 0x2a82204ba18 <col:26> 'size_t':'unsigned long long' <LValueToRValue>
| | | | | |     `-DeclRefExpr 0x2a82204b9f8 <col:26> 'size_t':'unsigned long long' lvalue ParmVar 0x2a822047e00 'inlen' 'size_t':'unsigned long long'
| | | | | |-IntegerLiteral 0x2a82204ba50 <col:33> 'int' 0
| | | | | `-ImplicitCastExpr 0x2a82204bb60 <col:36> 'size_t':'unsigned long long' <LValueToRValue>
| | | | |   `-DeclRefExpr 0x2a82204ba78 <col:36> 'const size_t':'const unsigned long long' lvalue Var 0x2a822048388 'padding_len' 'const size_t':'const unsigned long long'
| | | | `-BinaryOperator 0x2a82204bc50 <line:226:9, col:15> 'int' '='
| | | |   |-DeclRefExpr 0x2a82204bbf0 <col:9> 'int' lvalue Var 0x2a8220485f8 'ret' 'int'
| | | |   `-IntegerLiteral 0x2a82204bc28 <col:15> 'int' 16
| | | `-CompoundStmt 0x2a82204c080 <line:227:12, line:231:5>
| | |   |-CallExpr 0x2a82204bd80 <line:228:9, col:31> 'void *'
| | |   | |-ImplicitCastExpr 0x2a82204bd68 <col:9> 'void *(*)(void *, const void *, unsigned long long)' <FunctionToPointerDecay>
| | |   | | `-DeclRefExpr 0x2a82204bca0 <col:9> 'void *(void *, const void *, unsigned long long)' Function 0x2a822036550 'memmove' 'void *(void *, const void *, unsigned long long)'
| | |   | |-ImplicitCastExpr 0x2a82204bdd0 <col:17> 'void *' <BitCast>
| | |   | | `-ImplicitCastExpr 0x2a82204bdb8 <col:17> 'unsigned char *' <LValueToRValue>
| | |   | |   `-DeclRefExpr 0x2a82204bcc0 <col:17> 'unsigned char *' lvalue ParmVar 0x2a822047d08 'out' 'unsigned char *'
| | |   | |-ImplicitCastExpr 0x2a82204be00 <col:22> 'const void *' <BitCast>
| | |   | | `-ImplicitCastExpr 0x2a82204bde8 <col:22> 'const unsigned char *' <LValueToRValue>
| | |   | |   `-DeclRefExpr 0x2a82204bce0 <col:22> 'const unsigned char *' lvalue ParmVar 0x2a822047d88 'in' 'const unsigned char *'
| | |   | `-ImplicitCastExpr 0x2a82204be18 <col:26> 'size_t':'unsigned long long' <LValueToRValue>
| | |   |   `-DeclRefExpr 0x2a82204bd00 <col:26> 'size_t':'unsigned long long' lvalue ParmVar 0x2a822047e00 'inlen' 'size_t':'unsigned long long'
| | |   `-CallExpr 0x2a82204bf58 <line:229:9, col:43> 'void *'
| | |     |-ImplicitCastExpr 0x2a82204bf40 <col:9> 'void *(*)(void *, int, unsigned long long)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 0x2a82204be30 <col:9> 'void *(void *, int, unsigned long long)' Function 0x2a82204b750 'memset' 'void *(void *, int, unsigned long long)'
| | |     |-ImplicitCastExpr 0x2a82204bf90 <col:16, col:22> 'void *' <BitCast>
| | |     | `-BinaryOperator 0x2a82204bec0 <col:16, col:22> 'unsigned char *' '+'
| | |     |   |-ImplicitCastExpr 0x2a82204be90 <col:16> 'unsigned char *' <LValueToRValue>
| | |     |   | `-DeclRefExpr 0x2a82204be50 <col:16> 'unsigned char *' lvalue ParmVar 0x2a822047d08 'out' 'unsigned char *'
| | |     |   `-ImplicitCastExpr 0x2a82204bea8 <col:22> 'size_t':'unsigned long long' <LValueToRValue>
| | |     |     `-DeclRefExpr 0x2a82204be70 <col:22> 'size_t':'unsigned long long' lvalue ParmVar 0x2a822047e00 'inlen' 'size_t':'unsigned long long'
| | |     |-IntegerLiteral 0x2a82204bee0 <col:29> 'int' 0
| | |     `-ImplicitCastExpr 0x2a82204bfa8 <col:32> 'size_t':'unsigned long long' <LValueToRValue>
| | |       `-DeclRefExpr 0x2a82204bf08 <col:32> 'const size_t':'const unsigned long long' lvalue Var 0x2a822048388 'padding_len' 'const size_t':'const unsigned long long'
| | `-ReturnStmt 0x2a82204c118 <line:233:5, col:12>
| |   `-ImplicitCastExpr 0x2a82204c100 <col:12> 'size_t':'unsigned long long' <IntegralCast>
| |     `-ImplicitCastExpr 0x2a82204c0e8 <col:12> 'int' <LValueToRValue>
| |       `-DeclRefExpr 0x2a82204c0c8 <col:12> 'int' lvalue Var 0x2a8220485f8 'ret' 'int'
| `-FullComment 0x2a82204cd80 <line:170:4, line:181:59>
|   |-ParagraphComment 0x2a82204c740 <line:170:4, col:47>
|   | `-TextComment 0x2a82204c718 <col:4, col:47> Text=" Wrapping according to RFC 5649 section 4.1."
|   |-ParagraphComment 0x2a82204c788 <line:172:3, col:4>
|   | `-TextComment 0x2a82204c760 <col:3, col:4> Text="  "
|   |-ParamCommandComment 0x2a82204c7a8 <col:5, line:173:4> [in] explicitly Param="key" ParamIndex=0
|   | `-ParagraphComment 0x2a82204c850 <line:172:20, line:173:4>
|   |   |-TextComment 0x2a82204c800 <line:172:20, col:33> Text="    Key value."
|   |   `-TextComment 0x2a82204c820 <line:173:3, col:4> Text="  "
|   |-ParamCommandComment 0x2a82204c870 <col:5, line:174:4> [in] explicitly Param="icv" ParamIndex=1
|   | `-ParagraphComment 0x2a82204c918 <line:173:20, line:174:4>
|   |   |-TextComment 0x2a82204c8c8 <line:173:20, col:74> Text="    (Non-standard) IV, 4 bytes. NULL = use default_aiv."
|   |   `-TextComment 0x2a82204c8e8 <line:174:3, col:4> Text="  "
|   |-ParamCommandComment 0x2a82204c938 <col:5, line:177:4> [out] explicitly Param="out" ParamIndex=2
|   | `-ParagraphComment 0x2a82204ca30 <line:174:20, line:177:4>
|   |   |-TextComment 0x2a82204c990 <line:174:20, col:78> Text="    Ciphertext. Minimal buffer length = (inlen + 15) bytes."
|   |   |-TextComment 0x2a82204c9b0 <line:175:3, col:77> Text="                     Input and output buffers can overlap if block function"
|   |   |-TextComment 0x2a82204c9d0 <line:176:3, col:37> Text="                     supports that."
|   |   `-TextComment 0x2a82204c9f0 <line:177:3, col:4> Text="  "
|   |-ParamCommandComment 0x2a82204ca50 <col:5, line:178:4> [in] explicitly Param="in" ParamIndex=3
|   | `-ParagraphComment 0x2a82204caf0 <line:177:19, line:178:4>
|   |   |-TextComment 0x2a82204caa0 <line:177:19, col:60> Text="     Plaintext as n 64-bit blocks, n >= 2."
|   |   `-TextComment 0x2a82204cac0 <line:178:3, col:4> Text="  "
|   |-ParamCommandComment 0x2a82204cb10 <col:5, line:179:4> [in] explicitly Param="inlen" ParamIndex=4
|   | `-ParagraphComment 0x2a82204cbb8 <line:178:22, line:179:4>
|   |   |-TextComment 0x2a82204cb68 <line:178:22, col:36> Text="  Length of in."
|   |   `-TextComment 0x2a82204cb88 <line:179:3, col:4> Text="  "
|   |-ParamCommandComment 0x2a82204cbd8 <col:5, line:180:4> [in] explicitly Param="block" ParamIndex=5
|   | `-ParagraphComment 0x2a82204cc80 <line:179:22, line:180:4>
|   |   |-TextComment 0x2a82204cc30 <line:179:22, col:49> Text="  Block processing function."
|   |   `-TextComment 0x2a82204cc50 <line:180:3, col:4> Text="  "
|   `-BlockCommandComment 0x2a82204cca0 <col:5, line:181:59> Name="return"
|     `-ParagraphComment 0x2a82204cd18 <line:180:12, line:181:59>
|       |-TextComment 0x2a82204ccc8 <line:180:12, col:74> Text="            0 if inlen is out of range [1, CRYPTO128_WRAP_MAX]."
|       `-TextComment 0x2a82204cce8 <line:181:3, col:59> Text="                     Output length if wrapping succeeded."
|-FunctionDecl 0x2a82204b750 <line:224:9> col:9 implicit used memset 'void *(void *, int, unsigned long long)' extern
| |-ParmVarDecl 0x2a82204b7f0 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x2a82204b858 <<invalid sloc>> <invalid sloc> 'int'
| `-ParmVarDecl 0x2a82204b8c0 <<invalid sloc>> <invalid sloc> 'unsigned long long'
`-FunctionDecl 0x2a8220464c8 <line:251:1, line:329:1> line:251:8 invalid CRYPTO_128_unwrap_pad 'size_t (void *, const unsigned char *, unsigned char *, const unsigned char *, size_t, int)'
  |-ParmVarDecl 0x2a822046198 <col:30, col:36> col:36 used key 'void *'
  |-ParmVarDecl 0x2a822046218 <col:41, col:62> col:62 used icv 'const unsigned char *'
  |-ParmVarDecl 0x2a822046298 <line:252:30, col:45> col:45 used out 'unsigned char *'
  |-ParmVarDecl 0x2a822046318 <line:253:30, col:51> col:51 used in 'const unsigned char *'
  |-ParmVarDecl 0x2a822046390 <col:55, col:62> col:62 used inlen 'size_t':'unsigned long long'
  |-ParmVarDecl 0x2a822046410 <line:254:30, col:41> col:41 invalid block 'int'
  |-CompoundStmt 0x2a82204ad30 <line:255:1, line:329:1>
  | |-DeclStmt 0x2a822046738 <line:257:5, col:29>
  | | `-VarDecl 0x2a8220465c0 <col:5, col:28> col:12 used n 'size_t':'unsigned long long' cinit
  | |   `-BinaryOperator 0x2a822046718 <col:16, col:28> 'unsigned long long' '-'
  | |     |-BinaryOperator 0x2a8220466b8 <col:16, col:24> 'unsigned long long' '/'
  | |     | |-ImplicitCastExpr 0x2a822046688 <col:16> 'size_t':'unsigned long long' <LValueToRValue>
  | |     | | `-DeclRefExpr 0x2a822046628 <col:16> 'size_t':'unsigned long long' lvalue ParmVar 0x2a822046390 'inlen' 'size_t':'unsigned long long'
  | |     | `-ImplicitCastExpr 0x2a8220466a0 <col:24> 'unsigned long long' <IntegralCast>
  | |     |   `-IntegerLiteral 0x2a822046660 <col:24> 'int' 8
  | |     `-ImplicitCastExpr 0x2a822046700 <col:28> 'unsigned long long' <IntegralCast>
  | |       `-IntegerLiteral 0x2a8220466d8 <col:28> 'int' 1
  | |-DeclStmt 0x2a8220467c8 <line:258:5, col:22>
  | | `-VarDecl 0x2a822046760 <col:5, col:12> col:12 used padded_len 'size_t':'unsigned long long'
  | |-DeclStmt 0x2a822046858 <line:259:5, col:23>
  | | `-VarDecl 0x2a8220467f0 <col:5, col:12> col:12 used padding_len 'size_t':'unsigned long long'
  | |-DeclStmt 0x2a8220468e8 <line:260:5, col:21>
  | | `-VarDecl 0x2a822046880 <col:5, col:12> col:12 used ptext_len 'size_t':'unsigned long long'
  | |-DeclStmt 0x2a8220469d0 <line:262:5, col:25>
  | | `-VarDecl 0x2a822046968 <col:5, col:24> col:19 used aiv 'unsigned char [8]'
  | |-DeclStmt 0x2a822046ba8 <line:263:5, col:44>
  | | `-VarDecl 0x2a822046a50 <col:5, col:43> col:26 used zeros 'unsigned char [8]' static cinit
  | |   `-InitListExpr 0x2a822046b38 <col:37, col:43> 'unsigned char [8]'
  | |     |-array_filler: ImplicitValueInitExpr 0x2a822046b98 <<invalid sloc>> 'unsigned char'
  | |     `-ImplicitCastExpr 0x2a822046b78 <col:39> 'unsigned char' <IntegralCast>
  | |       `-IntegerLiteral 0x2a822046ab8 <col:39> 'int' 0
  | |-DeclStmt 0x2a822046c38 <line:264:5, col:15>
  | | `-VarDecl 0x2a822046bd0 <col:5, col:12> col:12 used ret 'size_t':'unsigned long long'
  | |-IfStmt 0x2a822046f90 <line:267:5, line:268:16>
  | | |-BinaryOperator 0x2a822046f20 <line:267:9, line:32:38> 'int' '||'
  | | | |-BinaryOperator 0x2a822046e00 <line:267:9, col:39> 'int' '||'
  | | | | |-BinaryOperator 0x2a822046d48 <col:9, col:26> 'int' '!='
  | | | | | |-ParenExpr 0x2a822046ce8 <col:9, col:21> 'unsigned long long'
  | | | | | | `-BinaryOperator 0x2a822046cc8 <col:10, col:18> 'unsigned long long' '&'
  | | | | | |   |-ImplicitCastExpr 0x2a822046c98 <col:10> 'size_t':'unsigned long long' <LValueToRValue>
  | | | | | |   | `-DeclRefExpr 0x2a822046c50 <col:10> 'size_t':'unsigned long long' lvalue ParmVar 0x2a822046390 'inlen' 'size_t':'unsigned long long'
  | | | | | |   `-ImplicitCastExpr 0x2a822046cb0 <col:18> 'unsigned long long' <IntegralCast>
  | | | | | |     `-IntegerLiteral 0x2a822046c70 <col:18> 'int' 7
  | | | | | `-ImplicitCastExpr 0x2a822046d30 <col:26> 'unsigned long long' <IntegralCast>
  | | | | |   `-IntegerLiteral 0x2a822046d08 <col:26> 'int' 0
  | | | | `-BinaryOperator 0x2a822046de0 <col:31, col:39> 'int' '<'
  | | | |   |-ImplicitCastExpr 0x2a822046db0 <col:31> 'size_t':'unsigned long long' <LValueToRValue>
  | | | |   | `-DeclRefExpr 0x2a822046d68 <col:31> 'size_t':'unsigned long long' lvalue ParmVar 0x2a822046390 'inlen' 'size_t':'unsigned long long'
  | | | |   `-ImplicitCastExpr 0x2a822046dc8 <col:39> 'unsigned long long' <IntegralCast>
  | | | |     `-IntegerLiteral 0x2a822046d88 <col:39> 'int' 16
  | | | `-BinaryOperator 0x2a822046f00 <col:45, line:32:38> 'int' '>='
  | | |   |-ImplicitCastExpr 0x2a822046ed0 <line:267:45> 'size_t':'unsigned long long' <LValueToRValue>
  | | |   | `-DeclRefExpr 0x2a822046e20 <col:45> 'size_t':'unsigned long long' lvalue ParmVar 0x2a822046390 'inlen' 'size_t':'unsigned long long'
  | | |   `-ImplicitCastExpr 0x2a822046ee8 <line:32:28, col:38> 'unsigned long long' <IntegralCast>
  | | |     `-ParenExpr 0x2a822046eb0 <col:28, col:38> 'unsigned long'
  | | |       `-BinaryOperator 0x2a822046e90 <col:29, col:36> 'unsigned long' '<<'
  | | |         |-IntegerLiteral 0x2a822046e40 <col:29> 'unsigned long' 1
  | | |         `-IntegerLiteral 0x2a822046e68 <col:36> 'int' 31
  | | `-ReturnStmt 0x2a822046f80 <line:268:9, col:16>
  | |   `-ImplicitCastExpr 0x2a822046f68 <col:16> 'size_t':'unsigned long long' <IntegralCast>
  | |     `-IntegerLiteral 0x2a822046f40 <col:16> 'int' 0
  | |-CallExpr 0x2a8220470b8 <line:270:5, col:27> 'void *'
  | | |-ImplicitCastExpr 0x2a8220470a0 <col:5> 'void *(*)(void *, const void *, unsigned long long)' <FunctionToPointerDecay>
  | | | `-DeclRefExpr 0x2a822046fa8 <col:5> 'void *(void *, const void *, unsigned long long)' Function 0x2a822036550 'memmove' 'void *(void *, const void *, unsigned long long)'
  | | |-ImplicitCastExpr 0x2a822047108 <col:13> 'void *' <BitCast>
  | | | `-ImplicitCastExpr 0x2a8220470f0 <col:13> 'unsigned char *' <LValueToRValue>
  | | |   `-DeclRefExpr 0x2a822046fc8 <col:13> 'unsigned char *' lvalue ParmVar 0x2a822046298 'out' 'unsigned char *'
  | | |-ImplicitCastExpr 0x2a822047138 <col:18> 'const void *' <BitCast>
  | | | `-ImplicitCastExpr 0x2a822047120 <col:18> 'const unsigned char *' <LValueToRValue>
  | | |   `-DeclRefExpr 0x2a822047000 <col:18> 'const unsigned char *' lvalue ParmVar 0x2a822046318 'in' 'const unsigned char *'
  | | `-ImplicitCastExpr 0x2a822047150 <col:22> 'size_t':'unsigned long long' <LValueToRValue>
  | |   `-DeclRefExpr 0x2a822047038 <col:22> 'size_t':'unsigned long long' lvalue ParmVar 0x2a822046390 'inlen' 'size_t':'unsigned long long'
  | |-IfStmt 0x2a822049a88 <line:271:5, line:290:5> has_else
  | | |-BinaryOperator 0x2a822049228 <line:271:9, col:18> 'int' '=='
  | | | |-ImplicitCastExpr 0x2a8220491f8 <col:9> 'size_t':'unsigned long long' <LValueToRValue>
  | | | | `-DeclRefExpr 0x2a8220491b0 <col:9> 'size_t':'unsigned long long' lvalue ParmVar 0x2a822046390 'inlen' 'size_t':'unsigned long long'
  | | | `-ImplicitCastExpr 0x2a822049210 <col:18> 'unsigned long long' <IntegralCast>
  | | |   `-IntegerLiteral 0x2a8220491d0 <col:18> 'int' 16
  | | |-CompoundStmt 0x2a8220496a0 <col:22, line:283:5>
  | | | |-CallExpr 0x2a8220493a8 <line:279:9, col:27> 'void *'
  | | | | |-ImplicitCastExpr 0x2a822049390 <col:9> 'void *(*)(void *, const void *, unsigned long long)' <FunctionToPointerDecay>
  | | | | | `-DeclRefExpr 0x2a8220492c0 <col:9> 'void *(void *, const void *, unsigned long long)' Function 0x2a822036a70 'memcpy' 'void *(void *, const void *, unsigned long long)'
  | | | | |-ImplicitCastExpr 0x2a8220493f8 <col:16> 'void *' <BitCast>
  | | | | | `-ImplicitCastExpr 0x2a8220493e0 <col:16> 'unsigned char *' <ArrayToPointerDecay>
  | | | | |   `-DeclRefExpr 0x2a8220492e0 <col:16> 'unsigned char [8]' lvalue Var 0x2a822046968 'aiv' 'unsigned char [8]'
  | | | | |-ImplicitCastExpr 0x2a822049428 <col:21> 'const void *' <BitCast>
  | | | | | `-ImplicitCastExpr 0x2a822049410 <col:21> 'unsigned char *' <LValueToRValue>
  | | | | |   `-DeclRefExpr 0x2a822049318 <col:21> 'unsigned char *' lvalue ParmVar 0x2a822046298 'out' 'unsigned char *'
  | | | | `-ImplicitCastExpr 0x2a822049440 <col:26> 'unsigned long long' <IntegralCast>
  | | | |   `-IntegerLiteral 0x2a822049338 <col:26> 'int' 8
  | | | |-CallExpr 0x2a822049570 <line:281:9, col:32> 'void *'
  | | | | |-ImplicitCastExpr 0x2a822049558 <col:9> 'void *(*)(void *, const void *, unsigned long long)' <FunctionToPointerDecay>
  | | | | | `-DeclRefExpr 0x2a822049458 <col:9> 'void *(void *, const void *, unsigned long long)' Function 0x2a822036550 'memmove' 'void *(void *, const void *, unsigned long long)'
  | | | | |-ImplicitCastExpr 0x2a8220495c0 <col:17> 'void *' <BitCast>
  | | | | | `-ImplicitCastExpr 0x2a8220495a8 <col:17> 'unsigned char *' <LValueToRValue>
  | | | | |   `-DeclRefExpr 0x2a822049478 <col:17> 'unsigned char *' lvalue ParmVar 0x2a822046298 'out' 'unsigned char *'
  | | | | |-ImplicitCastExpr 0x2a8220495d8 <col:22, col:28> 'const void *' <BitCast>
  | | | | | `-BinaryOperator 0x2a8220494f8 <col:22, col:28> 'unsigned char *' '+'
  | | | | |   |-ImplicitCastExpr 0x2a8220494e0 <col:22> 'unsigned char *' <LValueToRValue>
  | | | | |   | `-DeclRefExpr 0x2a822049498 <col:22> 'unsigned char *' lvalue ParmVar 0x2a822046298 'out' 'unsigned char *'
  | | | | |   `-IntegerLiteral 0x2a8220494b8 <col:28> 'int' 8
  | | | | `-ImplicitCastExpr 0x2a8220495f0 <col:31> 'unsigned long long' <IntegralCast>
  | | | |   `-IntegerLiteral 0x2a822049518 <col:31> 'int' 8
  | | | `-BinaryOperator 0x2a822049680 <line:282:9, col:22> 'size_t':'unsigned long long' '='
  | | |   |-DeclRefExpr 0x2a822049608 <col:9> 'size_t':'unsigned long long' lvalue Var 0x2a822046760 'padded_len' 'size_t':'unsigned long long'
  | | |   `-ImplicitCastExpr 0x2a822049668 <col:22> 'size_t':'unsigned long long' <IntegralCast>
  | | |     `-IntegerLiteral 0x2a822049640 <col:22> 'int' 8
  | | `-CompoundStmt 0x2a822049a68 <line:283:12, line:290:5>
  | |   |-BinaryOperator 0x2a822049780 <line:284:9, col:30> 'size_t':'unsigned long long' '='
  | |   | |-DeclRefExpr 0x2a8220496c8 <col:9> 'size_t':'unsigned long long' lvalue Var 0x2a822046760 'padded_len' 'size_t':'unsigned long long'
  | |   | `-BinaryOperator 0x2a822049760 <col:22, col:30> 'unsigned long long' '-'
  | |   |   |-ImplicitCastExpr 0x2a822049730 <col:22> 'size_t':'unsigned long long' <LValueToRValue>
  | |   |   | `-DeclRefExpr 0x2a8220496e8 <col:22> 'size_t':'unsigned long long' lvalue ParmVar 0x2a822046390 'inlen' 'size_t':'unsigned long long'
  | |   |   `-ImplicitCastExpr 0x2a822049748 <col:30> 'unsigned long long' <IntegralCast>
  | |   |     `-IntegerLiteral 0x2a822049708 <col:30> 'int' 8
  | |   `-IfStmt 0x2a822049a50 <line:286:9, line:289:9>
  | |     |-BinaryOperator 0x2a8220498e8 <line:286:13, col:27> 'int' '!='
  | |     | |-ImplicitCastExpr 0x2a8220498b8 <col:13> 'size_t':'unsigned long long' <LValueToRValue>
  | |     | | `-DeclRefExpr 0x2a822049878 <col:13> 'size_t':'unsigned long long' lvalue Var 0x2a822046760 'padded_len' 'size_t':'unsigned long long'
  | |     | `-ImplicitCastExpr 0x2a8220498d0 <col:27> 'size_t':'unsigned long long' <LValueToRValue>
  | |     |   `-DeclRefExpr 0x2a822049898 <col:27> 'size_t':'unsigned long long' lvalue Var 0x2a822046bd0 'ret' 'size_t':'unsigned long long'
  | |     `-CompoundStmt 0x2a822049a30 <col:32, line:289:9>
  | |       |-CallExpr 0x2a822049980 <line:287:13, col:39> 'int'
  | |       | |-ImplicitCastExpr 0x2a822049968 <col:13> 'int (*)()' <FunctionToPointerDecay>
  | |       | | `-DeclRefExpr 0x2a822049908 <col:13> 'int ()' Function 0x2a822047910 'OPENSSL_cleanse' 'int ()'
  | |       | |-ImplicitCastExpr 0x2a8220499b0 <col:29> 'unsigned char *' <LValueToRValue>
  | |       | | `-DeclRefExpr 0x2a822049928 <col:29> 'unsigned char *' lvalue ParmVar 0x2a822046298 'out' 'unsigned char *'
  | |       | `-ImplicitCastExpr 0x2a8220499c8 <col:34> 'size_t':'unsigned long long' <LValueToRValue>
  | |       |   `-DeclRefExpr 0x2a822049948 <col:34> 'size_t':'unsigned long long' lvalue ParmVar 0x2a822046390 'inlen' 'size_t':'unsigned long long'
  | |       `-ReturnStmt 0x2a822049a20 <line:288:13, col:20>
  | |         `-ImplicitCastExpr 0x2a822049a08 <col:20> 'size_t':'unsigned long long' <IntegralCast>
  | |           `-IntegerLiteral 0x2a8220499e0 <col:20> 'int' 0
  | |-IfStmt 0x2a822049f48 <line:297:5, line:301:5>
  | | |-BinaryOperator 0x2a822049de0 <line:297:9, line:298:46> 'int' '||'
  | | | |-ParenExpr 0x2a822049c40 <line:297:9, col:52> 'int'
  | | | | `-BinaryOperator 0x2a822049c20 <col:10, col:51> 'int' '&&'
  | | | |   |-UnaryOperator 0x2a822049b00 <col:10, col:11> 'int' prefix '!' cannot overflow
  | | | |   | `-ImplicitCastExpr 0x2a822049ae8 <col:11> 'const unsigned char *' <LValueToRValue>
  | | | |   |   `-DeclRefExpr 0x2a822049ab0 <col:11> 'const unsigned char *' lvalue ParmVar 0x2a822046218 'icv' 'const unsigned char *'
  | | | |   `-CallExpr 0x2a822049bb8 <col:18, col:51> 'int'
  | | | |     |-ImplicitCastExpr 0x2a822049ba0 <col:18> 'int (*)()' <FunctionToPointerDecay>
  | | | |     | `-DeclRefExpr 0x2a822049b18 <col:18> 'int ()' Function 0x2a8220476f0 'CRYPTO_memcmp' 'int ()'
  | | | |     |-ImplicitCastExpr 0x2a822049bf0 <col:32> 'unsigned char *' <ArrayToPointerDecay>
  | | | |     | `-DeclRefExpr 0x2a822049b38 <col:32> 'unsigned char [8]' lvalue Var 0x2a822046968 'aiv' 'unsigned char [8]'
  | | | |     |-ImplicitCastExpr 0x2a822049c08 <col:37> 'const unsigned char *' <ArrayToPointerDecay>
  | | | |     | `-DeclRefExpr 0x2a822049b58 <col:37> 'const unsigned char [4]' lvalue Var 0x2a822032350 'default_aiv' 'const unsigned char [4]'
  | | | |     `-IntegerLiteral 0x2a822049b78 <col:50> 'int' 4
  | | | `-ParenExpr 0x2a822049dc0 <line:298:12, col:46> 'int'
  | | |   `-BinaryOperator 0x2a822049da0 <col:13, col:45> 'int' '&&'
  | | |     |-ImplicitCastExpr 0x2a822049d88 <col:13> 'const unsigned char *' <LValueToRValue>
  | | |     | `-DeclRefExpr 0x2a822049c60 <col:13> 'const unsigned char *' lvalue ParmVar 0x2a822046218 'icv' 'const unsigned char *'
  | | |     `-CallExpr 0x2a822049d20 <col:20, col:45> 'int'
  | | |       |-ImplicitCastExpr 0x2a822049d08 <col:20> 'int (*)()' <FunctionToPointerDecay>
  | | |       | `-DeclRefExpr 0x2a822049c80 <col:20> 'int ()' Function 0x2a8220476f0 'CRYPTO_memcmp' 'int ()'
  | | |       |-ImplicitCastExpr 0x2a822049d58 <col:34> 'unsigned char *' <ArrayToPointerDecay>
  | | |       | `-DeclRefExpr 0x2a822049ca0 <col:34> 'unsigned char [8]' lvalue Var 0x2a822046968 'aiv' 'unsigned char [8]'
  | | |       |-ImplicitCastExpr 0x2a822049d70 <col:39> 'const unsigned char *' <LValueToRValue>
  | | |       | `-DeclRefExpr 0x2a822049cc0 <col:39> 'const unsigned char *' lvalue ParmVar 0x2a822046218 'icv' 'const unsigned char *'
  | | |       `-IntegerLiteral 0x2a822049ce0 <col:44> 'int' 4
  | | `-CompoundStmt 0x2a822049f28 <col:49, line:301:5>
  | |   |-CallExpr 0x2a822049e78 <line:299:9, col:35> 'int'
  | |   | |-ImplicitCastExpr 0x2a822049e60 <col:9> 'int (*)()' <FunctionToPointerDecay>
  | |   | | `-DeclRefExpr 0x2a822049e00 <col:9> 'int ()' Function 0x2a822047910 'OPENSSL_cleanse' 'int ()'
  | |   | |-ImplicitCastExpr 0x2a822049ea8 <col:25> 'unsigned char *' <LValueToRValue>
  | |   | | `-DeclRefExpr 0x2a822049e20 <col:25> 'unsigned char *' lvalue ParmVar 0x2a822046298 'out' 'unsigned char *'
  | |   | `-ImplicitCastExpr 0x2a822049ec0 <col:30> 'size_t':'unsigned long long' <LValueToRValue>
  | |   |   `-DeclRefExpr 0x2a822049e40 <col:30> 'size_t':'unsigned long long' lvalue ParmVar 0x2a822046390 'inlen' 'size_t':'unsigned long long'
  | |   `-ReturnStmt 0x2a822049f18 <line:300:9, col:16>
  | |     `-ImplicitCastExpr 0x2a822049f00 <col:16> 'size_t':'unsigned long long' <IntegralCast>
  | |       `-IntegerLiteral 0x2a822049ed8 <col:16> 'int' 0
  | |-BinaryOperator 0x2a82204a4b8 <line:308:5, line:311:39> 'size_t':'unsigned long long' '='
  | | |-DeclRefExpr 0x2a822049f60 <line:308:5> 'size_t':'unsigned long long' lvalue Var 0x2a822046880 'ptext_len' 'size_t':'unsigned long long'
  | | `-ImplicitCastExpr 0x2a82204a4a0 <col:19, line:311:39> 'size_t':'unsigned long long' <IntegralCast>
  | |   `-BinaryOperator 0x2a82204a480 <line:308:19, line:311:39> 'unsigned int' '|'
  | |     |-BinaryOperator 0x2a82204a388 <line:308:19, line:310:46> 'unsigned int' '|'
  | |     | |-BinaryOperator 0x2a82204a228 <line:308:19, line:309:46> 'unsigned int' '|'
  | |     | | |-ParenExpr 0x2a82204a0b8 <line:308:19, col:46> 'unsigned int'
  | |     | | | `-BinaryOperator 0x2a82204a098 <col:20, col:44> 'unsigned int' '<<'
  | |     | | |   |-CStyleCastExpr 0x2a82204a048 <col:20, col:39> 'unsigned int' <IntegralCast>
  | |     | | |   | `-ImplicitCastExpr 0x2a82204a030 <col:34, col:39> 'unsigned char' <LValueToRValue> part_of_explicit_cast
  | |     | | |   |   `-ArraySubscriptExpr 0x2a822049ff8 <col:34, col:39> 'unsigned char' lvalue
  | |     | | |   |     |-ImplicitCastExpr 0x2a822049fe0 <col:34> 'unsigned char *' <ArrayToPointerDecay>
  | |     | | |   |     | `-DeclRefExpr 0x2a822049f98 <col:34> 'unsigned char [8]' lvalue Var 0x2a822046968 'aiv' 'unsigned char [8]'
  | |     | | |   |     `-IntegerLiteral 0x2a822049fb8 <col:38> 'int' 4
  | |     | | |   `-IntegerLiteral 0x2a82204a070 <col:44> 'int' 24
  | |     | | `-ParenExpr 0x2a82204a208 <line:309:19, col:46> 'unsigned int'
  | |     | |   `-BinaryOperator 0x2a82204a1e8 <col:20, col:44> 'unsigned int' '<<'
  | |     | |     |-CStyleCastExpr 0x2a82204a188 <col:20, col:39> 'unsigned int' <IntegralCast>
  | |     | |     | `-ImplicitCastExpr 0x2a82204a170 <col:34, col:39> 'unsigned char' <LValueToRValue> part_of_explicit_cast
  | |     | |     |   `-ArraySubscriptExpr 0x2a82204a138 <col:34, col:39> 'unsigned char' lvalue
  | |     | |     |     |-ImplicitCastExpr 0x2a82204a120 <col:34> 'unsigned char *' <ArrayToPointerDecay>
  | |     | |     |     | `-DeclRefExpr 0x2a82204a0d8 <col:34> 'unsigned char [8]' lvalue Var 0x2a822046968 'aiv' 'unsigned char [8]'
  | |     | |     |     `-IntegerLiteral 0x2a82204a0f8 <col:38> 'int' 5
  | |     | |     `-IntegerLiteral 0x2a82204a1c0 <col:44> 'int' 16
  | |     | `-ParenExpr 0x2a82204a368 <line:310:19, col:46> 'unsigned int'
  | |     |   `-BinaryOperator 0x2a82204a348 <col:20, col:45> 'unsigned int' '<<'
  | |     |     |-CStyleCastExpr 0x2a82204a2f8 <col:20, col:39> 'unsigned int' <IntegralCast>
  | |     |     | `-ImplicitCastExpr 0x2a82204a2e0 <col:34, col:39> 'unsigned char' <LValueToRValue> part_of_explicit_cast
  | |     |     |   `-ArraySubscriptExpr 0x2a82204a2a8 <col:34, col:39> 'unsigned char' lvalue
  | |     |     |     |-ImplicitCastExpr 0x2a82204a290 <col:34> 'unsigned char *' <ArrayToPointerDecay>
  | |     |     |     | `-DeclRefExpr 0x2a82204a248 <col:34> 'unsigned char [8]' lvalue Var 0x2a822046968 'aiv' 'unsigned char [8]'
  | |     |     |     `-IntegerLiteral 0x2a82204a268 <col:38> 'int' 6
  | |     |     `-IntegerLiteral 0x2a82204a320 <col:45> 'int' 8
  | |     `-CStyleCastExpr 0x2a82204a458 <line:311:20, col:39> 'unsigned int' <IntegralCast>
  | |       `-ImplicitCastExpr 0x2a82204a440 <col:34, col:39> 'unsigned char' <LValueToRValue> part_of_explicit_cast
  | |         `-ArraySubscriptExpr 0x2a82204a408 <col:34, col:39> 'unsigned char' lvalue
  | |           |-ImplicitCastExpr 0x2a82204a3f0 <col:34> 'unsigned char *' <ArrayToPointerDecay>
  | |           | `-DeclRefExpr 0x2a82204a3a8 <col:34> 'unsigned char [8]' lvalue Var 0x2a822046968 'aiv' 'unsigned char [8]'
  | |           `-IntegerLiteral 0x2a82204a3c8 <col:38> 'int' 7
  | |-IfStmt 0x2a82204a8b8 <line:312:5, line:315:5>
  | | |-BinaryOperator 0x2a82204a750 <line:312:9, col:53> 'int' '||'
  | | | |-BinaryOperator 0x2a82204a640 <col:9, col:24> 'int' '>='
  | | | | |-BinaryOperator 0x2a82204a5e8 <col:9, col:19> 'unsigned long long' '*'
  | | | | | |-ImplicitCastExpr 0x2a82204a5d0 <col:9> 'unsigned long long' <IntegralCast>
  | | | | | | `-IntegerLiteral 0x2a82204a4d8 <col:9> 'int' 8
  | | | | | `-ParenExpr 0x2a82204a5b0 <col:13, col:19> 'unsigned long long'
  | | | | |   `-BinaryOperator 0x2a82204a590 <col:14, col:18> 'unsigned long long' '-'
  | | | | |     |-ImplicitCastExpr 0x2a82204a560 <col:14> 'size_t':'unsigned long long' <LValueToRValue>
  | | | | |     | `-DeclRefExpr 0x2a82204a500 <col:14> 'size_t':'unsigned long long' lvalue Var 0x2a8220465c0 'n' 'size_t':'unsigned long long'
  | | | | |     `-ImplicitCastExpr 0x2a82204a578 <col:18> 'unsigned long long' <IntegralCast>
  | | | | |       `-IntegerLiteral 0x2a82204a538 <col:18> 'int' 1
  | | | | `-ImplicitCastExpr 0x2a82204a628 <col:24> 'size_t':'unsigned long long' <LValueToRValue>
  | | | |   `-DeclRefExpr 0x2a82204a608 <col:24> 'size_t':'unsigned long long' lvalue Var 0x2a822046880 'ptext_len' 'size_t':'unsigned long long'
  | | | `-BinaryOperator 0x2a82204a730 <col:37, col:53> 'int' '>'
  | | |   |-ImplicitCastExpr 0x2a82204a718 <col:37> 'size_t':'unsigned long long' <LValueToRValue>
  | | |   | `-DeclRefExpr 0x2a82204a660 <col:37> 'size_t':'unsigned long long' lvalue Var 0x2a822046880 'ptext_len' 'size_t':'unsigned long long'
  | | |   `-BinaryOperator 0x2a82204a6f8 <col:49, col:53> 'unsigned long long' '*'
  | | |     |-ImplicitCastExpr 0x2a82204a6e0 <col:49> 'unsigned long long' <IntegralCast>
  | | |     | `-IntegerLiteral 0x2a82204a680 <col:49> 'int' 8
  | | |     `-ImplicitCastExpr 0x2a82204a6c8 <col:53> 'size_t':'unsigned long long' <LValueToRValue>
  | | |       `-DeclRefExpr 0x2a82204a6a8 <col:53> 'size_t':'unsigned long long' lvalue Var 0x2a8220465c0 'n' 'size_t':'unsigned long long'
  | | `-CompoundStmt 0x2a82204a898 <col:56, line:315:5>
  | |   |-CallExpr 0x2a82204a7e8 <line:313:9, col:35> 'int'
  | |   | |-ImplicitCastExpr 0x2a82204a7d0 <col:9> 'int (*)()' <FunctionToPointerDecay>
  | |   | | `-DeclRefExpr 0x2a82204a770 <col:9> 'int ()' Function 0x2a822047910 'OPENSSL_cleanse' 'int ()'
  | |   | |-ImplicitCastExpr 0x2a82204a818 <col:25> 'unsigned char *' <LValueToRValue>
  | |   | | `-DeclRefExpr 0x2a82204a790 <col:25> 'unsigned char *' lvalue ParmVar 0x2a822046298 'out' 'unsigned char *'
  | |   | `-ImplicitCastExpr 0x2a82204a830 <col:30> 'size_t':'unsigned long long' <LValueToRValue>
  | |   |   `-DeclRefExpr 0x2a82204a7b0 <col:30> 'size_t':'unsigned long long' lvalue ParmVar 0x2a822046390 'inlen' 'size_t':'unsigned long long'
  | |   `-ReturnStmt 0x2a82204a888 <line:314:9, col:16>
  | |     `-ImplicitCastExpr 0x2a82204a870 <col:16> 'size_t':'unsigned long long' <IntegralCast>
  | |       `-IntegerLiteral 0x2a82204a848 <col:16> 'int' 0
  | |-BinaryOperator 0x2a82204a998 <line:321:5, col:32> 'size_t':'unsigned long long' '='
  | | |-DeclRefExpr 0x2a82204a8d0 <col:5> 'size_t':'unsigned long long' lvalue Var 0x2a8220467f0 'padding_len' 'size_t':'unsigned long long'
  | | `-BinaryOperator 0x2a82204a978 <col:19, col:32> 'unsigned long long' '-'
  | |   |-ImplicitCastExpr 0x2a82204a948 <col:19> 'size_t':'unsigned long long' <LValueToRValue>
  | |   | `-DeclRefExpr 0x2a82204a908 <col:19> 'size_t':'unsigned long long' lvalue Var 0x2a822046760 'padded_len' 'size_t':'unsigned long long'
  | |   `-ImplicitCastExpr 0x2a82204a960 <col:32> 'size_t':'unsigned long long' <LValueToRValue>
  | |     `-DeclRefExpr 0x2a82204a928 <col:32> 'size_t':'unsigned long long' lvalue Var 0x2a822046880 'ptext_len' 'size_t':'unsigned long long'
  | |-IfStmt 0x2a82204acd0 <line:322:5, line:325:5>
  | | |-BinaryOperator 0x2a82204ab68 <line:322:9, col:63> 'int' '!='
  | | | |-CallExpr 0x2a82204aad8 <col:9, col:58> 'int'
  | | | | |-ImplicitCastExpr 0x2a82204aac0 <col:9> 'int (*)()' <FunctionToPointerDecay>
  | | | | | `-DeclRefExpr 0x2a82204a9b8 <col:9> 'int ()' Function 0x2a8220476f0 'CRYPTO_memcmp' 'int ()'
  | | | | |-BinaryOperator 0x2a82204aa48 <col:23, col:29> 'unsigned char *' '+'
  | | | | | |-ImplicitCastExpr 0x2a82204aa18 <col:23> 'unsigned char *' <LValueToRValue>
  | | | | | | `-DeclRefExpr 0x2a82204a9d8 <col:23> 'unsigned char *' lvalue ParmVar 0x2a822046298 'out' 'unsigned char *'
  | | | | | `-ImplicitCastExpr 0x2a82204aa30 <col:29> 'size_t':'unsigned long long' <LValueToRValue>
  | | | | |   `-DeclRefExpr 0x2a82204a9f8 <col:29> 'size_t':'unsigned long long' lvalue Var 0x2a822046880 'ptext_len' 'size_t':'unsigned long long'
  | | | | |-ImplicitCastExpr 0x2a82204ab10 <col:40> 'unsigned char *' <ArrayToPointerDecay>
  | | | | | `-DeclRefExpr 0x2a82204aa68 <col:40> 'unsigned char [8]' lvalue Var 0x2a822046a50 'zeros' 'unsigned char [8]'
  | | | | `-ImplicitCastExpr 0x2a82204ab28 <col:47> 'size_t':'unsigned long long' <LValueToRValue>
  | | | |   `-DeclRefExpr 0x2a82204aaa0 <col:47> 'size_t':'unsigned long long' lvalue Var 0x2a8220467f0 'padding_len' 'size_t':'unsigned long long'
  | | | `-IntegerLiteral 0x2a82204ab40 <col:63> 'int' 0
  | | `-CompoundStmt 0x2a82204acb0 <col:66, line:325:5>
  | |   |-CallExpr 0x2a82204ac00 <line:323:9, col:35> 'int'
  | |   | |-ImplicitCastExpr 0x2a82204abe8 <col:9> 'int (*)()' <FunctionToPointerDecay>
  | |   | | `-DeclRefExpr 0x2a82204ab88 <col:9> 'int ()' Function 0x2a822047910 'OPENSSL_cleanse' 'int ()'
  | |   | |-ImplicitCastExpr 0x2a82204ac30 <col:25> 'unsigned char *' <LValueToRValue>
  | |   | | `-DeclRefExpr 0x2a82204aba8 <col:25> 'unsigned char *' lvalue ParmVar 0x2a822046298 'out' 'unsigned char *'
  | |   | `-ImplicitCastExpr 0x2a82204ac48 <col:30> 'size_t':'unsigned long long' <LValueToRValue>
  | |   |   `-DeclRefExpr 0x2a82204abc8 <col:30> 'size_t':'unsigned long long' lvalue ParmVar 0x2a822046390 'inlen' 'size_t':'unsigned long long'
  | |   `-ReturnStmt 0x2a82204aca0 <line:324:9, col:16>
  | |     `-ImplicitCastExpr 0x2a82204ac88 <col:16> 'size_t':'unsigned long long' <IntegralCast>
  | |       `-IntegerLiteral 0x2a82204ac60 <col:16> 'int' 0
  | `-ReturnStmt 0x2a82204ad20 <line:328:5, col:12>
  |   `-ImplicitCastExpr 0x2a82204ad08 <col:12> 'size_t':'unsigned long long' <LValueToRValue>
  |     `-DeclRefExpr 0x2a82204ace8 <col:12> 'size_t':'unsigned long long' lvalue Var 0x2a822046880 'ptext_len' 'size_t':'unsigned long long'
  `-FullComment 0x2a8220454a0 <line:236:4, line:249:76>
    |-ParagraphComment 0x2a82204ce68 <line:236:4, col:49>
    | `-TextComment 0x2a82204ce40 <col:4, col:49> Text=" Unwrapping according to RFC 5649 section 4.2."
    |-ParagraphComment 0x2a82204ceb0 <line:238:3, col:4>
    | `-TextComment 0x2a82204ce88 <col:3, col:4> Text="  "
    |-ParamCommandComment 0x2a82204ced0 <col:5, line:239:4> [in] explicitly Param="key" ParamIndex=0
    | `-ParagraphComment 0x2a82204cf78 <line:238:20, line:239:4>
    |   |-TextComment 0x2a82204cf28 <line:238:20, col:33> Text="    Key value."
    |   `-TextComment 0x2a82204cf48 <line:239:3, col:4> Text="  "
    |-ParamCommandComment 0x2a82204cf98 <col:5, line:240:4> [in] explicitly Param="icv" ParamIndex=1
    | `-ParagraphComment 0x2a82204d040 <line:239:20, line:240:4>
    |   |-TextComment 0x2a82204cff0 <line:239:20, col:74> Text="    (Non-standard) IV, 4 bytes. NULL = use default_aiv."
    |   `-TextComment 0x2a82204d010 <line:240:3, col:4> Text="  "
    |-ParamCommandComment 0x2a82204d060 <col:5, line:243:4> [out] explicitly Param="out" ParamIndex=2
    | `-ParagraphComment 0x2a82204d158 <line:240:20, line:243:4>
    |   |-TextComment 0x2a82204d0b8 <line:240:20, col:70> Text="    Plaintext. Minimal buffer length = inlen bytes."
    |   |-TextComment 0x2a82204d0d8 <line:241:3, col:77> Text="                     Input and output buffers can overlap if block function"
    |   |-TextComment 0x2a82204d0f8 <line:242:3, col:37> Text="                     supports that."
    |   `-TextComment 0x2a82204d118 <line:243:3, col:4> Text="  "
    |-ParamCommandComment 0x2a82204d178 <col:5, line:244:4> [in] explicitly Param="in" ParamIndex=3
    | `-ParagraphComment 0x2a8220451c0 <line:243:19, line:244:4>
    |   |-TextComment 0x2a822045170 <line:243:19, col:53> Text="     Ciphertext as n 64-bit blocks."
    |   `-TextComment 0x2a822045190 <line:244:3, col:4> Text="  "
    |-ParamCommandComment 0x2a8220451e0 <col:5, line:245:4> [in] explicitly Param="inlen" ParamIndex=4
    | `-ParagraphComment 0x2a822045288 <line:244:22, line:245:4>
    |   |-TextComment 0x2a822045238 <line:244:22, col:36> Text="  Length of in."
    |   `-TextComment 0x2a822045258 <line:245:3, col:4> Text="  "
    |-ParamCommandComment 0x2a8220452a8 <col:5, line:246:4> [in] explicitly Param="block" ParamIndex=5
    | `-ParagraphComment 0x2a822045350 <line:245:22, line:246:4>
    |   |-TextComment 0x2a822045300 <line:245:22, col:49> Text="  Block processing function."
    |   `-TextComment 0x2a822045320 <line:246:3, col:4> Text="  "
    `-BlockCommandComment 0x2a822045370 <col:5, line:249:76> Name="return"
      `-ParagraphComment 0x2a822045438 <line:246:12, line:249:76>
        |-TextComment 0x2a822045398 <line:246:12, col:75> Text="            0 if inlen is out of range [16, CRYPTO128_WRAP_MAX],"
        |-TextComment 0x2a8220453b8 <line:247:3, col:57> Text="                     or if inlen is not a multiple of 8"
        |-TextComment 0x2a8220453d8 <line:248:3, col:75> Text="                     or if IV and message length indicator doesn't match."
        `-TextComment 0x2a8220453f8 <line:249:3, col:76> Text="                     Output length if unwrapping succeeded and IV matches."
