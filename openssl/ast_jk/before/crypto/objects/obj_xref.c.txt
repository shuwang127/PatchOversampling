TranslationUnitDecl 0x2783487d438 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x2783487dcd0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x2783487d9d0 '__int128'
|-TypedefDecl 0x2783487dd40 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x2783487d9f0 'unsigned __int128'
|-TypedefDecl 0x2783487e078 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x2783487de30 'struct __NSConstantString_tag'
|   `-Record 0x2783487dd98 '__NSConstantString_tag'
|-TypedefDecl 0x2783487e0e8 <<invalid sloc>> <invalid sloc> implicit size_t 'unsigned long long'
| `-BuiltinType 0x2783487d610 'unsigned long long'
|-TypedefDecl 0x2783487e180 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x2783487e140 'char *'
|   `-BuiltinType 0x2783487d4d0 'char'
|-TypedefDecl 0x2783487e1f0 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x2783487e140 'char *'
|   `-BuiltinType 0x2783487d4d0 'char'
|-RecordDecl 0x2783487e248 <.//openssl//file_jk/before\crypto\objects/obj_xref.h:14:9, line:18:1> line:14:9 struct definition
| |-FieldDecl 0x2783487e318 <line:15:5, col:9> col:9 referenced sign_id 'int'
| |-FieldDecl 0x2783487e388 <line:16:5, col:9> col:9 referenced hash_id 'int'
| `-FieldDecl 0x278362630f0 <line:17:5, col:9> col:9 referenced pkey_id 'int'
|-TypedefDecl 0x278362631a8 <line:14:1, line:18:3> col:3 referenced nid_triple 'struct nid_triple':'nid_triple'
| `-ElaboratedType 0x27836263150 'struct nid_triple' sugar
|   `-RecordType 0x2783487e2e0 'nid_triple'
|     `-Record 0x2783487e248 ''
|-FunctionDecl 0x27836263350 <line:20:1, col:27> col:1 DEFINE_STACK_OF 'int (nid_triple)'
| `-ParmVarDecl 0x27836263250 <col:17> col:27 'nid_triple':'nid_triple'
|-VarDecl 0x278362634d8 <line:22:1, col:36> col:25 used sigoid_srt 'const nid_triple []' static
|-VarDecl 0x27836263638 <line:78:1, line:118:1> line:78:32 used sigoid_srt_xref 'const nid_triple *const [39]' static cinit
| `-InitListExpr 0x2783626c000 <col:52, line:118:1> 'const nid_triple *const [39]'
|   |-UnaryOperator 0x27836263720 <line:79:5, col:18> 'const nid_triple *' prefix '&' cannot overflow
|   | `-ArraySubscriptExpr 0x27836263700 <col:6, col:18> 'const nid_triple':'const nid_triple' lvalue
|   |   |-ImplicitCastExpr 0x278362636e8 <col:6> 'const nid_triple *' <ArrayToPointerDecay>
|   |   | `-DeclRefExpr 0x278362636a0 <col:6> 'const nid_triple []' lvalue Var 0x278362634d8 'sigoid_srt' 'const nid_triple []'
|   |   `-IntegerLiteral 0x278362636c0 <col:17> 'int' 0
|   |-UnaryOperator 0x278362637b8 <line:80:5, col:18> 'const nid_triple *' prefix '&' cannot overflow
|   | `-ArraySubscriptExpr 0x27836263798 <col:6, col:18> 'const nid_triple':'const nid_triple' lvalue
|   |   |-ImplicitCastExpr 0x27836263780 <col:6> 'const nid_triple *' <ArrayToPointerDecay>
|   |   | `-DeclRefExpr 0x27836263738 <col:6> 'const nid_triple []' lvalue Var 0x278362634d8 'sigoid_srt' 'const nid_triple []'
|   |   `-IntegerLiteral 0x27836263758 <col:17> 'int' 1
|   |-UnaryOperator 0x27836263850 <line:81:5, col:18> 'const nid_triple *' prefix '&' cannot overflow
|   | `-ArraySubscriptExpr 0x27836263830 <col:6, col:18> 'const nid_triple':'const nid_triple' lvalue
|   |   |-ImplicitCastExpr 0x27836263818 <col:6> 'const nid_triple *' <ArrayToPointerDecay>
|   |   | `-DeclRefExpr 0x278362637d0 <col:6> 'const nid_triple []' lvalue Var 0x278362634d8 'sigoid_srt' 'const nid_triple []'
|   |   `-IntegerLiteral 0x278362637f0 <col:17> 'int' 7
|   |-UnaryOperator 0x278362638e8 <line:82:5, col:18> 'const nid_triple *' prefix '&' cannot overflow
|   | `-ArraySubscriptExpr 0x278362638c8 <col:6, col:18> 'const nid_triple':'const nid_triple' lvalue
|   |   |-ImplicitCastExpr 0x278362638b0 <col:6> 'const nid_triple *' <ArrayToPointerDecay>
|   |   | `-DeclRefExpr 0x27836263868 <col:6> 'const nid_triple []' lvalue Var 0x278362634d8 'sigoid_srt' 'const nid_triple []'
|   |   `-IntegerLiteral 0x27836263888 <col:17> 'int' 2
|   |-UnaryOperator 0x27836263980 <line:83:5, col:18> 'const nid_triple *' prefix '&' cannot overflow
|   | `-ArraySubscriptExpr 0x27836263960 <col:6, col:18> 'const nid_triple':'const nid_triple' lvalue
|   |   |-ImplicitCastExpr 0x27836263948 <col:6> 'const nid_triple *' <ArrayToPointerDecay>
|   |   | `-DeclRefExpr 0x27836263900 <col:6> 'const nid_triple []' lvalue Var 0x278362634d8 'sigoid_srt' 'const nid_triple []'
|   |   `-IntegerLiteral 0x27836263920 <col:17> 'int' 4
|   |-UnaryOperator 0x27836263a18 <line:84:5, col:18> 'const nid_triple *' prefix '&' cannot overflow
|   | `-ArraySubscriptExpr 0x278362639f8 <col:6, col:18> 'const nid_triple':'const nid_triple' lvalue
|   |   |-ImplicitCastExpr 0x278362639e0 <col:6> 'const nid_triple *' <ArrayToPointerDecay>
|   |   | `-DeclRefExpr 0x27836263998 <col:6> 'const nid_triple []' lvalue Var 0x278362634d8 'sigoid_srt' 'const nid_triple []'
|   |   `-IntegerLiteral 0x278362639b8 <col:17> 'int' 3
|   |-UnaryOperator 0x27836263ab0 <line:85:5, col:18> 'const nid_triple *' prefix '&' cannot overflow
|   | `-ArraySubscriptExpr 0x27836263a90 <col:6, col:18> 'const nid_triple':'const nid_triple' lvalue
|   |   |-ImplicitCastExpr 0x27836263a78 <col:6> 'const nid_triple *' <ArrayToPointerDecay>
|   |   | `-DeclRefExpr 0x27836263a30 <col:6> 'const nid_triple []' lvalue Var 0x278362634d8 'sigoid_srt' 'const nid_triple []'
|   |   `-IntegerLiteral 0x27836263a50 <col:17> 'int' 9
|   |-UnaryOperator 0x27836263b48 <line:86:5, col:18> 'const nid_triple *' prefix '&' cannot overflow
|   | `-ArraySubscriptExpr 0x27836263b28 <col:6, col:18> 'const nid_triple':'const nid_triple' lvalue
|   |   |-ImplicitCastExpr 0x27836263b10 <col:6> 'const nid_triple *' <ArrayToPointerDecay>
|   |   | `-DeclRefExpr 0x27836263ac8 <col:6> 'const nid_triple []' lvalue Var 0x278362634d8 'sigoid_srt' 'const nid_triple []'
|   |   `-IntegerLiteral 0x27836263ae8 <col:17> 'int' 5
|   |-UnaryOperator 0x27836263be0 <line:87:5, col:18> 'const nid_triple *' prefix '&' cannot overflow
|   | `-ArraySubscriptExpr 0x27836263bc0 <col:6, col:18> 'const nid_triple':'const nid_triple' lvalue
|   |   |-ImplicitCastExpr 0x27836263ba8 <col:6> 'const nid_triple *' <ArrayToPointerDecay>
|   |   | `-DeclRefExpr 0x27836263b60 <col:6> 'const nid_triple []' lvalue Var 0x278362634d8 'sigoid_srt' 'const nid_triple []'
|   |   `-IntegerLiteral 0x27836263b80 <col:17> 'int' 8
|   |-UnaryOperator 0x27836263c78 <line:88:5, col:19> 'const nid_triple *' prefix '&' cannot overflow
|   | `-ArraySubscriptExpr 0x27836263c58 <col:6, col:19> 'const nid_triple':'const nid_triple' lvalue
|   |   |-ImplicitCastExpr 0x27836263c40 <col:6> 'const nid_triple *' <ArrayToPointerDecay>
|   |   | `-DeclRefExpr 0x27836263bf8 <col:6> 'const nid_triple []' lvalue Var 0x278362634d8 'sigoid_srt' 'const nid_triple []'
|   |   `-IntegerLiteral 0x27836263c18 <col:17> 'int' 12
|   |-UnaryOperator 0x27836263d10 <line:89:5, col:19> 'const nid_triple *' prefix '&' cannot overflow
|   | `-ArraySubscriptExpr 0x27836263cf0 <col:6, col:19> 'const nid_triple':'const nid_triple' lvalue
|   |   |-ImplicitCastExpr 0x27836263cd8 <col:6> 'const nid_triple *' <ArrayToPointerDecay>
|   |   | `-DeclRefExpr 0x27836263c90 <col:6> 'const nid_triple []' lvalue Var 0x278362634d8 'sigoid_srt' 'const nid_triple []'
|   |   `-IntegerLiteral 0x27836263cb0 <col:17> 'int' 30
|   |-UnaryOperator 0x27836263da8 <line:90:5, col:19> 'const nid_triple *' prefix '&' cannot overflow
|   | `-ArraySubscriptExpr 0x27836263d88 <col:6, col:19> 'const nid_triple':'const nid_triple' lvalue
|   |   |-ImplicitCastExpr 0x27836263d70 <col:6> 'const nid_triple *' <ArrayToPointerDecay>
|   |   | `-DeclRefExpr 0x27836263d28 <col:6> 'const nid_triple []' lvalue Var 0x278362634d8 'sigoid_srt' 'const nid_triple []'
|   |   `-IntegerLiteral 0x27836263d48 <col:17> 'int' 35
|   |-UnaryOperator 0x27836263e40 <line:91:5, col:18> 'const nid_triple *' prefix '&' cannot overflow
|   | `-ArraySubscriptExpr 0x27836263e20 <col:6, col:18> 'const nid_triple':'const nid_triple' lvalue
|   |   |-ImplicitCastExpr 0x27836263e08 <col:6> 'const nid_triple *' <ArrayToPointerDecay>
|   |   | `-DeclRefExpr 0x27836263dc0 <col:6> 'const nid_triple []' lvalue Var 0x278362634d8 'sigoid_srt' 'const nid_triple []'
|   |   `-IntegerLiteral 0x27836263de0 <col:17> 'int' 6
|   |-UnaryOperator 0x27836263ed8 <line:92:5, col:19> 'const nid_triple *' prefix '&' cannot overflow
|   | `-ArraySubscriptExpr 0x27836263eb8 <col:6, col:19> 'const nid_triple':'const nid_triple' lvalue
|   |   |-ImplicitCastExpr 0x27836263ea0 <col:6> 'const nid_triple *' <ArrayToPointerDecay>
|   |   | `-DeclRefExpr 0x27836263e58 <col:6> 'const nid_triple []' lvalue Var 0x278362634d8 'sigoid_srt' 'const nid_triple []'
|   |   `-IntegerLiteral 0x27836263e78 <col:17> 'int' 10
|   |-UnaryOperator 0x27836263f70 <line:93:5, col:19> 'const nid_triple *' prefix '&' cannot overflow
|   | `-ArraySubscriptExpr 0x27836263f50 <col:6, col:19> 'const nid_triple':'const nid_triple' lvalue
|   |   |-ImplicitCastExpr 0x27836263f38 <col:6> 'const nid_triple *' <ArrayToPointerDecay>
|   |   | `-DeclRefExpr 0x27836263ef0 <col:6> 'const nid_triple []' lvalue Var 0x278362634d8 'sigoid_srt' 'const nid_triple []'
|   |   `-IntegerLiteral 0x27836263f10 <col:17> 'int' 11
|   |-UnaryOperator 0x27836264008 <line:94:5, col:19> 'const nid_triple *' prefix '&' cannot overflow
|   | `-ArraySubscriptExpr 0x27836263fe8 <col:6, col:19> 'const nid_triple':'const nid_triple' lvalue
|   |   |-ImplicitCastExpr 0x27836263fd0 <col:6> 'const nid_triple *' <ArrayToPointerDecay>
|   |   | `-DeclRefExpr 0x27836263f88 <col:6> 'const nid_triple []' lvalue Var 0x278362634d8 'sigoid_srt' 'const nid_triple []'
|   |   `-IntegerLiteral 0x27836263fa8 <col:17> 'int' 13
|   |-UnaryOperator 0x278362640a0 <line:95:5, col:19> 'const nid_triple *' prefix '&' cannot overflow
|   | `-ArraySubscriptExpr 0x27836264080 <col:6, col:19> 'const nid_triple':'const nid_triple' lvalue
|   |   |-ImplicitCastExpr 0x27836264068 <col:6> 'const nid_triple *' <ArrayToPointerDecay>
|   |   | `-DeclRefExpr 0x27836264020 <col:6> 'const nid_triple []' lvalue Var 0x278362634d8 'sigoid_srt' 'const nid_triple []'
|   |   `-IntegerLiteral 0x27836264040 <col:17> 'int' 24
|   |-UnaryOperator 0x2783626b1d0 <line:96:5, col:19> 'const nid_triple *' prefix '&' cannot overflow
|   | `-ArraySubscriptExpr 0x2783626b1b0 <col:6, col:19> 'const nid_triple':'const nid_triple' lvalue
|   |   |-ImplicitCastExpr 0x2783626b198 <col:6> 'const nid_triple *' <ArrayToPointerDecay>
|   |   | `-DeclRefExpr 0x278362640b8 <col:6> 'const nid_triple []' lvalue Var 0x278362634d8 'sigoid_srt' 'const nid_triple []'
|   |   `-IntegerLiteral 0x2783626b170 <col:17> 'int' 20
|   |-UnaryOperator 0x2783626b268 <line:97:5, col:19> 'const nid_triple *' prefix '&' cannot overflow
|   | `-ArraySubscriptExpr 0x2783626b248 <col:6, col:19> 'const nid_triple':'const nid_triple' lvalue
|   |   |-ImplicitCastExpr 0x2783626b230 <col:6> 'const nid_triple *' <ArrayToPointerDecay>
|   |   | `-DeclRefExpr 0x2783626b1e8 <col:6> 'const nid_triple []' lvalue Var 0x278362634d8 'sigoid_srt' 'const nid_triple []'
|   |   `-IntegerLiteral 0x2783626b208 <col:17> 'int' 32
|   |-UnaryOperator 0x2783626b300 <line:98:5, col:19> 'const nid_triple *' prefix '&' cannot overflow
|   | `-ArraySubscriptExpr 0x2783626b2e0 <col:6, col:19> 'const nid_triple':'const nid_triple' lvalue
|   |   |-ImplicitCastExpr 0x2783626b2c8 <col:6> 'const nid_triple *' <ArrayToPointerDecay>
|   |   | `-DeclRefExpr 0x2783626b280 <col:6> 'const nid_triple []' lvalue Var 0x278362634d8 'sigoid_srt' 'const nid_triple []'
|   |   `-IntegerLiteral 0x2783626b2a0 <col:17> 'int' 37
|   |-UnaryOperator 0x2783626b398 <line:99:5, col:19> 'const nid_triple *' prefix '&' cannot overflow
|   | `-ArraySubscriptExpr 0x2783626b378 <col:6, col:19> 'const nid_triple':'const nid_triple' lvalue
|   |   |-ImplicitCastExpr 0x2783626b360 <col:6> 'const nid_triple *' <ArrayToPointerDecay>
|   |   | `-DeclRefExpr 0x2783626b318 <col:6> 'const nid_triple []' lvalue Var 0x278362634d8 'sigoid_srt' 'const nid_triple []'
|   |   `-IntegerLiteral 0x2783626b338 <col:17> 'int' 14
|   |-UnaryOperator 0x2783626b430 <line:100:5, col:19> 'const nid_triple *' prefix '&' cannot overflow
|   | `-ArraySubscriptExpr 0x2783626b410 <col:6, col:19> 'const nid_triple':'const nid_triple' lvalue
|   |   |-ImplicitCastExpr 0x2783626b3f8 <col:6> 'const nid_triple *' <ArrayToPointerDecay>
|   |   | `-DeclRefExpr 0x2783626b3b0 <col:6> 'const nid_triple []' lvalue Var 0x278362634d8 'sigoid_srt' 'const nid_triple []'
|   |   `-IntegerLiteral 0x2783626b3d0 <col:17> 'int' 21
|   |-UnaryOperator 0x2783626b4c8 <line:101:5, col:19> 'const nid_triple *' prefix '&' cannot overflow
|   | `-ArraySubscriptExpr 0x2783626b4a8 <col:6, col:19> 'const nid_triple':'const nid_triple' lvalue
|   |   |-ImplicitCastExpr 0x2783626b490 <col:6> 'const nid_triple *' <ArrayToPointerDecay>
|   |   | `-DeclRefExpr 0x2783626b448 <col:6> 'const nid_triple []' lvalue Var 0x278362634d8 'sigoid_srt' 'const nid_triple []'
|   |   `-IntegerLiteral 0x2783626b468 <col:17> 'int' 33
|   |-UnaryOperator 0x2783626b560 <line:102:5, col:19> 'const nid_triple *' prefix '&' cannot overflow
|   | `-ArraySubscriptExpr 0x2783626b540 <col:6, col:19> 'const nid_triple':'const nid_triple' lvalue
|   |   |-ImplicitCastExpr 0x2783626b528 <col:6> 'const nid_triple *' <ArrayToPointerDecay>
|   |   | `-DeclRefExpr 0x2783626b4e0 <col:6> 'const nid_triple []' lvalue Var 0x278362634d8 'sigoid_srt' 'const nid_triple []'
|   |   `-IntegerLiteral 0x2783626b500 <col:17> 'int' 38
|   |-UnaryOperator 0x2783626b5f8 <line:103:5, col:19> 'const nid_triple *' prefix '&' cannot overflow
|   | `-ArraySubscriptExpr 0x2783626b5d8 <col:6, col:19> 'const nid_triple':'const nid_triple' lvalue
|   |   |-ImplicitCastExpr 0x2783626b5c0 <col:6> 'const nid_triple *' <ArrayToPointerDecay>
|   |   | `-DeclRefExpr 0x2783626b578 <col:6> 'const nid_triple []' lvalue Var 0x278362634d8 'sigoid_srt' 'const nid_triple []'
|   |   `-IntegerLiteral 0x2783626b598 <col:17> 'int' 15
|   |-UnaryOperator 0x2783626b690 <line:104:5, col:19> 'const nid_triple *' prefix '&' cannot overflow
|   | `-ArraySubscriptExpr 0x2783626b670 <col:6, col:19> 'const nid_triple':'const nid_triple' lvalue
|   |   |-ImplicitCastExpr 0x2783626b658 <col:6> 'const nid_triple *' <ArrayToPointerDecay>
|   |   | `-DeclRefExpr 0x2783626b610 <col:6> 'const nid_triple []' lvalue Var 0x278362634d8 'sigoid_srt' 'const nid_triple []'
|   |   `-IntegerLiteral 0x2783626b630 <col:17> 'int' 22
|   |-UnaryOperator 0x2783626b728 <line:105:5, col:19> 'const nid_triple *' prefix '&' cannot overflow
|   | `-ArraySubscriptExpr 0x2783626b708 <col:6, col:19> 'const nid_triple':'const nid_triple' lvalue
|   |   |-ImplicitCastExpr 0x2783626b6f0 <col:6> 'const nid_triple *' <ArrayToPointerDecay>
|   |   | `-DeclRefExpr 0x2783626b6a8 <col:6> 'const nid_triple []' lvalue Var 0x278362634d8 'sigoid_srt' 'const nid_triple []'
|   |   `-IntegerLiteral 0x2783626b6c8 <col:17> 'int' 34
|   |-UnaryOperator 0x2783626b7c0 <line:106:5, col:19> 'const nid_triple *' prefix '&' cannot overflow
|   | `-ArraySubscriptExpr 0x2783626b7a0 <col:6, col:19> 'const nid_triple':'const nid_triple' lvalue
|   |   |-ImplicitCastExpr 0x2783626b788 <col:6> 'const nid_triple *' <ArrayToPointerDecay>
|   |   | `-DeclRefExpr 0x2783626b740 <col:6> 'const nid_triple []' lvalue Var 0x278362634d8 'sigoid_srt' 'const nid_triple []'
|   |   `-IntegerLiteral 0x2783626b760 <col:17> 'int' 39
|   |-UnaryOperator 0x2783626b858 <line:107:5, col:19> 'const nid_triple *' prefix '&' cannot overflow
|   | `-ArraySubscriptExpr 0x2783626b838 <col:6, col:19> 'const nid_triple':'const nid_triple' lvalue
|   |   |-ImplicitCastExpr 0x2783626b820 <col:6> 'const nid_triple *' <ArrayToPointerDecay>
|   |   | `-DeclRefExpr 0x2783626b7d8 <col:6> 'const nid_triple []' lvalue Var 0x278362634d8 'sigoid_srt' 'const nid_triple []'
|   |   `-IntegerLiteral 0x2783626b7f8 <col:17> 'int' 16
|   |-UnaryOperator 0x2783626b8f0 <line:108:5, col:19> 'const nid_triple *' prefix '&' cannot overflow
|   | `-ArraySubscriptExpr 0x2783626b8d0 <col:6, col:19> 'const nid_triple':'const nid_triple' lvalue
|   |   |-ImplicitCastExpr 0x2783626b8b8 <col:6> 'const nid_triple *' <ArrayToPointerDecay>
|   |   | `-DeclRefExpr 0x2783626b870 <col:6> 'const nid_triple []' lvalue Var 0x278362634d8 'sigoid_srt' 'const nid_triple []'
|   |   `-IntegerLiteral 0x2783626b890 <col:17> 'int' 23
|   |-UnaryOperator 0x2783626b988 <line:109:5, col:19> 'const nid_triple *' prefix '&' cannot overflow
|   | `-ArraySubscriptExpr 0x2783626b968 <col:6, col:19> 'const nid_triple':'const nid_triple' lvalue
|   |   |-ImplicitCastExpr 0x2783626b950 <col:6> 'const nid_triple *' <ArrayToPointerDecay>
|   |   | `-DeclRefExpr 0x2783626b908 <col:6> 'const nid_triple []' lvalue Var 0x278362634d8 'sigoid_srt' 'const nid_triple []'
|   |   `-IntegerLiteral 0x2783626b928 <col:17> 'int' 19
|   |-UnaryOperator 0x2783626ba20 <line:110:5, col:19> 'const nid_triple *' prefix '&' cannot overflow
|   | `-ArraySubscriptExpr 0x2783626ba00 <col:6, col:19> 'const nid_triple':'const nid_triple' lvalue
|   |   |-ImplicitCastExpr 0x2783626b9e8 <col:6> 'const nid_triple *' <ArrayToPointerDecay>
|   |   | `-DeclRefExpr 0x2783626b9a0 <col:6> 'const nid_triple []' lvalue Var 0x278362634d8 'sigoid_srt' 'const nid_triple []'
|   |   `-IntegerLiteral 0x2783626b9c0 <col:17> 'int' 31
|   |-UnaryOperator 0x2783626bab8 <line:111:5, col:19> 'const nid_triple *' prefix '&' cannot overflow
|   | `-ArraySubscriptExpr 0x2783626ba98 <col:6, col:19> 'const nid_triple':'const nid_triple' lvalue
|   |   |-ImplicitCastExpr 0x2783626ba80 <col:6> 'const nid_triple *' <ArrayToPointerDecay>
|   |   | `-DeclRefExpr 0x2783626ba38 <col:6> 'const nid_triple []' lvalue Var 0x278362634d8 'sigoid_srt' 'const nid_triple []'
|   |   `-IntegerLiteral 0x2783626ba58 <col:17> 'int' 36
|   |-UnaryOperator 0x2783626bb50 <line:112:5, col:19> 'const nid_triple *' prefix '&' cannot overflow
|   | `-ArraySubscriptExpr 0x2783626bb30 <col:6, col:19> 'const nid_triple':'const nid_triple' lvalue
|   |   |-ImplicitCastExpr 0x2783626bb18 <col:6> 'const nid_triple *' <ArrayToPointerDecay>
|   |   | `-DeclRefExpr 0x2783626bad0 <col:6> 'const nid_triple []' lvalue Var 0x278362634d8 'sigoid_srt' 'const nid_triple []'
|   |   `-IntegerLiteral 0x2783626baf0 <col:17> 'int' 25
|   |-UnaryOperator 0x2783626bbe8 <line:113:5, col:19> 'const nid_triple *' prefix '&' cannot overflow
|   | `-ArraySubscriptExpr 0x2783626bbc8 <col:6, col:19> 'const nid_triple':'const nid_triple' lvalue
|   |   |-ImplicitCastExpr 0x2783626bbb0 <col:6> 'const nid_triple *' <ArrayToPointerDecay>
|   |   | `-DeclRefExpr 0x2783626bb68 <col:6> 'const nid_triple []' lvalue Var 0x278362634d8 'sigoid_srt' 'const nid_triple []'
|   |   `-IntegerLiteral 0x2783626bb88 <col:17> 'int' 26
|   |-UnaryOperator 0x2783626bc80 <line:114:5, col:19> 'const nid_triple *' prefix '&' cannot overflow
|   | `-ArraySubscriptExpr 0x2783626bc60 <col:6, col:19> 'const nid_triple':'const nid_triple' lvalue
|   |   |-ImplicitCastExpr 0x2783626bc48 <col:6> 'const nid_triple *' <ArrayToPointerDecay>
|   |   | `-DeclRefExpr 0x2783626bc00 <col:6> 'const nid_triple []' lvalue Var 0x278362634d8 'sigoid_srt' 'const nid_triple []'
|   |   `-IntegerLiteral 0x2783626bc20 <col:17> 'int' 27
|   |-UnaryOperator 0x2783626bd18 <line:115:5, col:19> 'const nid_triple *' prefix '&' cannot overflow
|   | `-ArraySubscriptExpr 0x2783626bcf8 <col:6, col:19> 'const nid_triple':'const nid_triple' lvalue
|   |   |-ImplicitCastExpr 0x2783626bce0 <col:6> 'const nid_triple *' <ArrayToPointerDecay>
|   |   | `-DeclRefExpr 0x2783626bc98 <col:6> 'const nid_triple []' lvalue Var 0x278362634d8 'sigoid_srt' 'const nid_triple []'
|   |   `-IntegerLiteral 0x2783626bcb8 <col:17> 'int' 28
|   |-UnaryOperator 0x2783626bdb0 <line:116:5, col:19> 'const nid_triple *' prefix '&' cannot overflow
|   | `-ArraySubscriptExpr 0x2783626bd90 <col:6, col:19> 'const nid_triple':'const nid_triple' lvalue
|   |   |-ImplicitCastExpr 0x2783626bd78 <col:6> 'const nid_triple *' <ArrayToPointerDecay>
|   |   | `-DeclRefExpr 0x2783626bd30 <col:6> 'const nid_triple []' lvalue Var 0x278362634d8 'sigoid_srt' 'const nid_triple []'
|   |   `-IntegerLiteral 0x2783626bd50 <col:17> 'int' 40
|   `-UnaryOperator 0x2783626be48 <line:117:5, col:19> 'const nid_triple *' prefix '&' cannot overflow
|     `-ArraySubscriptExpr 0x2783626be28 <col:6, col:19> 'const nid_triple':'const nid_triple' lvalue
|       |-ImplicitCastExpr 0x2783626be10 <col:6> 'const nid_triple *' <ArrayToPointerDecay>
|       | `-DeclRefExpr 0x2783626bdc8 <col:6> 'const nid_triple []' lvalue Var 0x278362634d8 'sigoid_srt' 'const nid_triple []'
|       `-IntegerLiteral 0x2783626bde8 <col:17> 'int' 41
|-FunctionDecl 0x2783626c7a0 <.//openssl//file_jk/before\crypto\objects\obj_xref.c:16:1, line:19:1> line:16:12 sig_cmp 'int (const nid_triple *, const nid_triple *)' static
| |-ParmVarDecl 0x2783626c5e0 <col:20, col:38> col:38 used a 'const nid_triple *'
| |-ParmVarDecl 0x2783626c658 <col:41, col:59> col:59 used b 'const nid_triple *'
| `-CompoundStmt 0x2783626c998 <line:17:1, line:19:1>
|   `-ReturnStmt 0x2783626c988 <line:18:5, col:28>
|     `-BinaryOperator 0x2783626c968 <col:12, col:28> 'int' '-'
|       |-ImplicitCastExpr 0x2783626c938 <col:12, col:15> 'int' <LValueToRValue>
|       | `-MemberExpr 0x2783626c8a0 <col:12, col:15> 'const int' lvalue ->sign_id 0x2783487e318
|       |   `-ImplicitCastExpr 0x2783626c888 <col:12> 'const nid_triple *' <LValueToRValue>
|       |     `-DeclRefExpr 0x2783626c868 <col:12> 'const nid_triple *' lvalue ParmVar 0x2783626c5e0 'a' 'const nid_triple *'
|       `-ImplicitCastExpr 0x2783626c950 <col:25, col:28> 'int' <LValueToRValue>
|         `-MemberExpr 0x2783626c908 <col:25, col:28> 'const int' lvalue ->sign_id 0x2783487e318
|           `-ImplicitCastExpr 0x2783626c8f0 <col:25> 'const nid_triple *' <LValueToRValue>
|             `-DeclRefExpr 0x2783626c8d0 <col:25> 'const nid_triple *' lvalue ParmVar 0x2783626c658 'b' 'const nid_triple *'
|-FunctionDecl 0x2783626cc00 <line:21:1, col:55> col:1 DECLARE_OBJ_BSEARCH_CMP_FN 'int (nid_triple, nid_triple, int)'
| |-ParmVarDecl 0x2783626c9c0 <col:28> col:38 'nid_triple':'nid_triple'
| |-ParmVarDecl 0x2783626ca38 <col:40> col:50 'nid_triple':'nid_triple'
| `-ParmVarDecl 0x2783626cab8 <col:52> col:52 sig 'int'
|-FunctionDecl 0x2783626ce98 <line:22:1, col:57> col:1 IMPLEMENT_OBJ_BSEARCH_CMP_FN 'int (nid_triple, nid_triple, int)'
| |-ParmVarDecl 0x2783626cce0 <col:30> col:40 'nid_triple':'nid_triple'
| |-ParmVarDecl 0x2783626cd58 <col:42> col:52 'nid_triple':'nid_triple'
| `-ParmVarDecl 0x2783626cdd8 <col:54> col:54 sig 'int'
|-FunctionDecl 0x27836267168 <line:24:1, line:27:1> line:24:12 used sig_sk_cmp 'int (const nid_triple *const *, const nid_triple *const *)' static
| |-ParmVarDecl 0x2783626cfe0 <col:23, col:48> col:48 used a 'const nid_triple *const *'
| |-ParmVarDecl 0x2783626d060 <col:51, col:76> col:76 used b 'const nid_triple *const *'
| `-CompoundStmt 0x27836267428 <line:25:1, line:27:1>
|   `-ReturnStmt 0x27836267418 <line:26:5, col:34>
|     `-BinaryOperator 0x278362673f8 <col:12, col:34> 'int' '-'
|       |-ImplicitCastExpr 0x278362673c8 <col:12, col:18> 'int' <LValueToRValue>
|       | `-MemberExpr 0x278362672e0 <col:12, col:18> 'const int' lvalue ->sign_id 0x2783487e318
|       |   `-ImplicitCastExpr 0x278362672c8 <col:12, col:15> 'const nid_triple *' <LValueToRValue>
|       |     `-ParenExpr 0x278362672a8 <col:12, col:15> 'const nid_triple *const' lvalue
|       |       `-UnaryOperator 0x27836267290 <col:13, col:14> 'const nid_triple *const' lvalue prefix '*' cannot overflow
|       |         `-ImplicitCastExpr 0x27836267278 <col:14> 'const nid_triple *const *' <LValueToRValue>
|       |           `-DeclRefExpr 0x27836267258 <col:14> 'const nid_triple *const *' lvalue ParmVar 0x2783626cfe0 'a' 'const nid_triple *const *'
|       `-ImplicitCastExpr 0x278362673e0 <col:28, col:34> 'int' <LValueToRValue>
|         `-MemberExpr 0x27836267398 <col:28, col:34> 'const int' lvalue ->sign_id 0x2783487e318
|           `-ImplicitCastExpr 0x27836267380 <col:28, col:31> 'const nid_triple *' <LValueToRValue>
|             `-ParenExpr 0x27836267360 <col:28, col:31> 'const nid_triple *const' lvalue
|               `-UnaryOperator 0x27836267348 <col:29, col:30> 'const nid_triple *const' lvalue prefix '*' cannot overflow
|                 `-ImplicitCastExpr 0x27836267330 <col:30> 'const nid_triple *const *' <LValueToRValue>
|                   `-DeclRefExpr 0x27836267310 <col:30> 'const nid_triple *const *' lvalue ParmVar 0x2783626d060 'b' 'const nid_triple *const *'
|-FunctionDecl 0x27836267690 <line:29:1, col:72> col:1 invalid DECLARE_OBJ_BSEARCH_CMP_FN 'int (const nid_triple *, const nid_triple *, int)'
| |-ParmVarDecl 0x27836267450 <col:28, col:45> col:46 'const nid_triple *'
| |-ParmVarDecl 0x278362674c8 <col:48, col:65> col:66 'const nid_triple *'
| `-ParmVarDecl 0x27836267548 <col:68> col:68 sigx 'int'
|-FunctionDecl 0x278362678b0 <line:31:1, line:38:1> line:31:12 used sigx_cmp 'int (const nid_triple *const *, const nid_triple *const *)' static
| |-ParmVarDecl 0x27836267760 <col:21, col:46> col:46 used a 'const nid_triple *const *'
| |-ParmVarDecl 0x278362677e0 <col:49, col:74> col:74 used b 'const nid_triple *const *'
| `-CompoundStmt 0x27836267e90 <line:32:1, line:38:1>
|   |-DeclStmt 0x278362679f8 <line:33:5, col:12>
|   | `-VarDecl 0x27836267990 <col:5, col:9> col:9 used ret 'int'
|   |-BinaryOperator 0x27836267c08 <line:34:5, col:33> 'int' '='
|   | |-DeclRefExpr 0x27836267a10 <col:5> 'int' lvalue Var 0x27836267990 'ret' 'int'
|   | `-BinaryOperator 0x27836267be8 <col:11, col:33> 'int' '-'
|   |   |-ImplicitCastExpr 0x27836267bb8 <col:11, col:17> 'int' <LValueToRValue>
|   |   | `-MemberExpr 0x27836267ad0 <col:11, col:17> 'const int' lvalue ->hash_id 0x2783487e388
|   |   |   `-ImplicitCastExpr 0x27836267ab8 <col:11, col:14> 'const nid_triple *' <LValueToRValue>
|   |   |     `-ParenExpr 0x27836267a98 <col:11, col:14> 'const nid_triple *const' lvalue
|   |   |       `-UnaryOperator 0x27836267a80 <col:12, col:13> 'const nid_triple *const' lvalue prefix '*' cannot overflow
|   |   |         `-ImplicitCastExpr 0x27836267a68 <col:13> 'const nid_triple *const *' <LValueToRValue>
|   |   |           `-DeclRefExpr 0x27836267a48 <col:13> 'const nid_triple *const *' lvalue ParmVar 0x27836267760 'a' 'const nid_triple *const *'
|   |   `-ImplicitCastExpr 0x27836267bd0 <col:27, col:33> 'int' <LValueToRValue>
|   |     `-MemberExpr 0x27836267b88 <col:27, col:33> 'const int' lvalue ->hash_id 0x2783487e388
|   |       `-ImplicitCastExpr 0x27836267b70 <col:27, col:30> 'const nid_triple *' <LValueToRValue>
|   |         `-ParenExpr 0x27836267b50 <col:27, col:30> 'const nid_triple *const' lvalue
|   |           `-UnaryOperator 0x27836267b38 <col:28, col:29> 'const nid_triple *const' lvalue prefix '*' cannot overflow
|   |             `-ImplicitCastExpr 0x27836267b20 <col:29> 'const nid_triple *const *' <LValueToRValue>
|   |               `-DeclRefExpr 0x27836267b00 <col:29> 'const nid_triple *const *' lvalue ParmVar 0x278362677e0 'b' 'const nid_triple *const *'
|   |-IfStmt 0x27836267ca8 <line:35:5, line:36:16>
|   | |-ImplicitCastExpr 0x27836267c48 <line:35:9> 'int' <LValueToRValue>
|   | | `-DeclRefExpr 0x27836267c28 <col:9> 'int' lvalue Var 0x27836267990 'ret' 'int'
|   | `-ReturnStmt 0x27836267c98 <line:36:9, col:16>
|   |   `-ImplicitCastExpr 0x27836267c80 <col:16> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x27836267c60 <col:16> 'int' lvalue Var 0x27836267990 'ret' 'int'
|   `-ReturnStmt 0x27836267e80 <line:37:5, col:34>
|     `-BinaryOperator 0x27836267e60 <col:12, col:34> 'int' '-'
|       |-ImplicitCastExpr 0x27836267e30 <col:12, col:18> 'int' <LValueToRValue>
|       | `-MemberExpr 0x27836267d48 <col:12, col:18> 'const int' lvalue ->pkey_id 0x278362630f0
|       |   `-ImplicitCastExpr 0x27836267d30 <col:12, col:15> 'const nid_triple *' <LValueToRValue>
|       |     `-ParenExpr 0x27836267d10 <col:12, col:15> 'const nid_triple *const' lvalue
|       |       `-UnaryOperator 0x27836267cf8 <col:13, col:14> 'const nid_triple *const' lvalue prefix '*' cannot overflow
|       |         `-ImplicitCastExpr 0x27836267ce0 <col:14> 'const nid_triple *const *' <LValueToRValue>
|       |           `-DeclRefExpr 0x27836267cc0 <col:14> 'const nid_triple *const *' lvalue ParmVar 0x27836267760 'a' 'const nid_triple *const *'
|       `-ImplicitCastExpr 0x27836267e48 <col:28, col:34> 'int' <LValueToRValue>
|         `-MemberExpr 0x27836267e00 <col:28, col:34> 'const int' lvalue ->pkey_id 0x278362630f0
|           `-ImplicitCastExpr 0x27836267de8 <col:28, col:31> 'const nid_triple *' <LValueToRValue>
|             `-ParenExpr 0x27836267dc8 <col:28, col:31> 'const nid_triple *const' lvalue
|               `-UnaryOperator 0x27836267db0 <col:29, col:30> 'const nid_triple *const' lvalue prefix '*' cannot overflow
|                 `-ImplicitCastExpr 0x27836267d98 <col:30> 'const nid_triple *const *' <LValueToRValue>
|                   `-DeclRefExpr 0x27836267d78 <col:30> 'const nid_triple *const *' lvalue ParmVar 0x278362677e0 'b' 'const nid_triple *const *'
|-FunctionDecl 0x27836268088 <line:40:1, col:74> col:1 invalid IMPLEMENT_OBJ_BSEARCH_CMP_FN 'int (const nid_triple *, const nid_triple *, int)'
| |-ParmVarDecl 0x27836267ed0 <col:30, col:47> col:48 'const nid_triple *'
| |-ParmVarDecl 0x27836267f48 <col:50, col:67> col:68 'const nid_triple *'
| `-ParmVarDecl 0x27836267fc8 <col:70> col:70 sigx 'int'
|-FunctionDecl 0x2783626d3f0 <line:42:1, line:65:1> line:42:5 OBJ_find_sigid_algs 'int (int, int *, int *)'
| |-ParmVarDecl 0x2783626d1c0 <col:25, col:29> col:29 used signid 'int'
| |-ParmVarDecl 0x2783626d240 <col:37, col:42> col:42 used pdig_nid 'int *'
| |-ParmVarDecl 0x2783626d2c0 <col:52, col:57> col:57 used ppkey_nid 'int *'
| `-CompoundStmt 0x2783626f308 <line:43:1, line:65:1>
|   |-DeclStmt 0x2783626d538 <line:44:5, col:19>
|   | `-VarDecl 0x2783626d4d0 <col:5, col:16> col:16 used tmp 'nid_triple':'nid_triple'
|   |-DeclStmt 0x2783626d5c8 <line:45:5, col:32>
|   | `-VarDecl 0x2783626d560 <col:5, col:23> col:23 used rv 'const nid_triple *'
|   |-BinaryOperator 0x2783626d680 <line:46:5, col:19> 'int' '='
|   | |-MemberExpr 0x2783626d618 <col:5, col:9> 'int' lvalue .sign_id 0x2783487e318
|   | | `-DeclRefExpr 0x2783626d5e0 <col:5> 'nid_triple':'nid_triple' lvalue Var 0x2783626d4d0 'tmp' 'nid_triple':'nid_triple'
|   | `-ImplicitCastExpr 0x2783626d668 <col:19> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x2783626d648 <col:19> 'int' lvalue ParmVar 0x2783626d1c0 'signid' 'int'
|   |-IfStmt 0x2783626db38 <line:48:5, line:52:5>
|   | |-OpaqueValueExpr 0x2783626db20 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x2783626db08 <line:48:18, line:52:5>
|   |   `-DeclStmt 0x2783626d8f0 <line:49:9, col:52>
|   |     `-VarDecl 0x2783626d6b8 <col:9, col:13> col:13 used idx 'int'
|   |-IfStmt 0x2783626df80 <line:54:5, line:56:5>
|   | |-OpaqueValueExpr 0x2783626df68 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x2783626df50 <line:54:21, line:56:5>
|   |   `-BinaryOperator 0x2783626df30 <line:55:9, col:70> 'const nid_triple *' '='
|   |     |-DeclRefExpr 0x2783626db70 <col:9> 'const nid_triple *' lvalue Var 0x2783626d560 'rv' 'const nid_triple *'
|   |     `-ImplicitCastExpr 0x2783626df18 <col:14, col:70> 'const nid_triple *' <IntegralToPointer>
|   |       `-CallExpr 0x2783626dec8 <col:14, col:70> 'int'
|   |         |-ImplicitCastExpr 0x2783626deb0 <col:14> 'int (*)()' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x2783626dc80 <col:14> 'int ()' Function 0x2783626dbb8 'OBJ_bsearch_sig' 'int ()'
|   |         |-UnaryOperator 0x2783626dcc0 <col:30, col:31> 'nid_triple *' prefix '&' cannot overflow
|   |         | `-DeclRefExpr 0x2783626dca0 <col:31> 'nid_triple':'nid_triple' lvalue Var 0x2783626d4d0 'tmp' 'nid_triple':'nid_triple'
|   |         |-ImplicitCastExpr 0x2783626df00 <col:36> 'const nid_triple *' <ArrayToPointerDecay>
|   |         | `-DeclRefExpr 0x2783626dcd8 <col:36> 'const nid_triple []' lvalue Var 0x278362634d8 'sigoid_srt' 'const nid_triple []'
|   |         `-CallExpr 0x2783626de70 <col:48, col:69> 'int'
|   |           |-ImplicitCastExpr 0x2783626de58 <col:48> 'int (*)()' <FunctionToPointerDecay>
|   |           | `-DeclRefExpr 0x2783626dde8 <col:48> 'int ()' Function 0x2783626dd20 'OSSL_NELEM' 'int ()'
|   |           `-ImplicitCastExpr 0x2783626de98 <col:59> 'const nid_triple *' <ArrayToPointerDecay>
|   |             `-DeclRefExpr 0x2783626de08 <col:59> 'const nid_triple []' lvalue Var 0x278362634d8 'sigoid_srt' 'const nid_triple []'
|   |-IfStmt 0x2783626e008 <line:58:5, line:59:16>
|   | |-OpaqueValueExpr 0x2783626dff0 <<invalid sloc>> '_Bool'
|   | `-ReturnStmt 0x2783626dfe0 <col:9, col:16>
|   |   `-IntegerLiteral 0x2783626dfb8 <col:16> 'int' 0
|   |-IfStmt 0x2783626e148 <line:60:5, line:61:25>
|   | |-ImplicitCastExpr 0x2783626e040 <line:60:9> 'int *' <LValueToRValue>
|   | | `-DeclRefExpr 0x2783626e020 <col:9> 'int *' lvalue ParmVar 0x2783626d240 'pdig_nid' 'int *'
|   | `-BinaryOperator 0x2783626e128 <line:61:9, col:25> 'int' '='
|   |   |-UnaryOperator 0x2783626e090 <col:9, col:10> 'int' lvalue prefix '*' cannot overflow
|   |   | `-ImplicitCastExpr 0x2783626e078 <col:10> 'int *' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x2783626e058 <col:10> 'int *' lvalue ParmVar 0x2783626d240 'pdig_nid' 'int *'
|   |   `-ImplicitCastExpr 0x2783626e110 <col:21, col:25> 'int' <LValueToRValue>
|   |     `-MemberExpr 0x2783626e0e0 <col:21, col:25> 'const int' lvalue ->hash_id 0x2783487e388
|   |       `-ImplicitCastExpr 0x2783626e0c8 <col:21> 'const nid_triple *' <LValueToRValue>
|   |         `-DeclRefExpr 0x2783626e0a8 <col:21> 'const nid_triple *' lvalue Var 0x2783626d560 'rv' 'const nid_triple *'
|   |-IfStmt 0x2783626f2b8 <line:62:5, line:63:26>
|   | |-ImplicitCastExpr 0x2783626f1b0 <line:62:9> 'int *' <LValueToRValue>
|   | | `-DeclRefExpr 0x2783626e160 <col:9> 'int *' lvalue ParmVar 0x2783626d2c0 'ppkey_nid' 'int *'
|   | `-BinaryOperator 0x2783626f298 <line:63:9, col:26> 'int' '='
|   |   |-UnaryOperator 0x2783626f200 <col:9, col:10> 'int' lvalue prefix '*' cannot overflow
|   |   | `-ImplicitCastExpr 0x2783626f1e8 <col:10> 'int *' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x2783626f1c8 <col:10> 'int *' lvalue ParmVar 0x2783626d2c0 'ppkey_nid' 'int *'
|   |   `-ImplicitCastExpr 0x2783626f280 <col:22, col:26> 'int' <LValueToRValue>
|   |     `-MemberExpr 0x2783626f250 <col:22, col:26> 'const int' lvalue ->pkey_id 0x278362630f0
|   |       `-ImplicitCastExpr 0x2783626f238 <col:22> 'const nid_triple *' <LValueToRValue>
|   |         `-DeclRefExpr 0x2783626f218 <col:22> 'const nid_triple *' lvalue Var 0x2783626d560 'rv' 'const nid_triple *'
|   `-ReturnStmt 0x2783626f2f8 <line:64:5, col:12>
|     `-IntegerLiteral 0x2783626f2d0 <col:12> 'int' 1
|-FunctionDecl 0x2783626f5b0 <line:67:1, line:93:1> line:67:5 OBJ_find_sigid_by_algs 'int (int *, int, int)'
| |-ParmVarDecl 0x2783626f378 <col:28, col:33> col:33 used psignid 'int *'
| |-ParmVarDecl 0x2783626f3f8 <col:42, col:46> col:46 used dig_nid 'int'
| |-ParmVarDecl 0x2783626f478 <col:55, col:59> col:59 used pkey_nid 'int'
| `-CompoundStmt 0x2783627b720 <line:68:1, line:93:1>
|   |-DeclStmt 0x2783626f6f8 <line:69:5, col:19>
|   | `-VarDecl 0x2783626f690 <col:5, col:16> col:16 used tmp 'nid_triple':'nid_triple'
|   |-DeclStmt 0x2783626f7f0 <line:70:5, col:31>
|   | `-VarDecl 0x2783626f720 <col:5, col:28> col:23 used t 'const nid_triple *' cinit
|   |   `-ImplicitCastExpr 0x2783626f7d8 <col:27, col:28> 'const nid_triple *' <NoOp>
|   |     `-UnaryOperator 0x2783626f7c0 <col:27, col:28> 'nid_triple *' prefix '&' cannot overflow
|   |       `-DeclRefExpr 0x2783626f788 <col:28> 'nid_triple':'nid_triple' lvalue Var 0x2783626f690 'tmp' 'nid_triple':'nid_triple'
|   |-DeclStmt 0x2783626f8e8 <line:71:5, col:33>
|   | `-VarDecl 0x2783626f880 <col:5, col:24> col:24 used rv 'const nid_triple **'
|   |-BinaryOperator 0x2783626f988 <line:73:5, col:19> 'int' '='
|   | |-MemberExpr 0x2783626f920 <col:5, col:9> 'int' lvalue .hash_id 0x2783487e388
|   | | `-DeclRefExpr 0x2783626f900 <col:5> 'nid_triple':'nid_triple' lvalue Var 0x2783626f690 'tmp' 'nid_triple':'nid_triple'
|   | `-ImplicitCastExpr 0x2783626f970 <col:19> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x2783626f950 <col:19> 'int' lvalue ParmVar 0x2783626f3f8 'dig_nid' 'int'
|   |-BinaryOperator 0x2783626fa30 <line:74:5, col:19> 'int' '='
|   | |-MemberExpr 0x2783626f9c8 <col:5, col:9> 'int' lvalue .pkey_id 0x278362630f0
|   | | `-DeclRefExpr 0x2783626f9a8 <col:5> 'nid_triple':'nid_triple' lvalue Var 0x2783626f690 'tmp' 'nid_triple':'nid_triple'
|   | `-ImplicitCastExpr 0x2783626fa18 <col:19> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x2783626f9f8 <col:19> 'int' lvalue ParmVar 0x2783626f478 'pkey_nid' 'int'
|   |-IfStmt 0x2783626fd48 <line:76:5, line:82:5>
|   | |-OpaqueValueExpr 0x2783626fd30 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x2783626fd10 <line:76:19, line:82:5>
|   |   |-DeclStmt 0x2783626fb28 <line:77:9, col:53>
|   |   | `-VarDecl 0x2783626fa68 <col:9, col:13> col:13 used idx 'int'
|   |   `-IfStmt 0x2783626fcf8 <line:78:9, line:81:9>
|   |     |-BinaryOperator 0x2783626fbb8 <line:78:13, col:20> 'int' '>='
|   |     | |-ImplicitCastExpr 0x2783626fba0 <col:13> 'int' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x2783626fb40 <col:13> 'int' lvalue Var 0x2783626fa68 'idx' 'int'
|   |     | `-IntegerLiteral 0x2783626fb78 <col:20> 'int' 0
|   |     `-CompoundStmt 0x2783626fce0 <col:23, line:81:9>
|   |       `-BinaryOperator 0x2783626fcc0 <line:80:13, col:19> 'const nid_triple **' '='
|   |         |-DeclRefExpr 0x2783626fc50 <col:13> 'const nid_triple **' lvalue Var 0x2783626f880 'rv' 'const nid_triple **'
|   |         `-UnaryOperator 0x2783626fca8 <col:18, col:19> 'const nid_triple **' prefix '&' cannot overflow
|   |           `-DeclRefExpr 0x2783626fc88 <col:19> 'const nid_triple *' lvalue Var 0x2783626f720 't' 'const nid_triple *'
|   |-IfStmt 0x27836270070 <line:84:5, line:86:5>
|   | |-OpaqueValueExpr 0x27836270058 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x27836270040 <line:84:21, line:86:5>
|   |   `-BinaryOperator 0x27836270020 <line:85:9, col:79> 'const nid_triple **' '='
|   |     |-DeclRefExpr 0x2783626fd80 <col:9> 'const nid_triple **' lvalue Var 0x2783626f880 'rv' 'const nid_triple **'
|   |     `-ImplicitCastExpr 0x27836270008 <col:14, col:79> 'const nid_triple **' <IntegralToPointer>
|   |       `-CallExpr 0x2783626ffb8 <col:14, col:79> 'int'
|   |         |-ImplicitCastExpr 0x2783626ffa0 <col:14> 'int (*)()' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x2783626fe90 <col:14> 'int ()' Function 0x2783626fdc8 'OBJ_bsearch_sigx' 'int ()'
|   |         |-UnaryOperator 0x2783626fed0 <col:31, col:32> 'const nid_triple **' prefix '&' cannot overflow
|   |         | `-DeclRefExpr 0x2783626feb0 <col:32> 'const nid_triple *' lvalue Var 0x2783626f720 't' 'const nid_triple *'
|   |         |-ImplicitCastExpr 0x2783626fff0 <col:35> 'const nid_triple *const *' <ArrayToPointerDecay>
|   |         | `-DeclRefExpr 0x2783626fee8 <col:35> 'const nid_triple *const [39]' lvalue Var 0x27836263638 'sigoid_srt_xref' 'const nid_triple *const [39]'
|   |         `-CallExpr 0x2783626ff60 <col:52, col:78> 'int'
|   |           |-ImplicitCastExpr 0x2783626ff48 <col:52> 'int (*)()' <FunctionToPointerDecay>
|   |           | `-DeclRefExpr 0x2783626ff08 <col:52> 'int ()' Function 0x2783626dd20 'OSSL_NELEM' 'int ()'
|   |           `-ImplicitCastExpr 0x2783626ff88 <col:63> 'const nid_triple *const *' <ArrayToPointerDecay>
|   |             `-DeclRefExpr 0x2783626ff28 <col:63> 'const nid_triple *const [39]' lvalue Var 0x27836263638 'sigoid_srt_xref' 'const nid_triple *const [39]'
|   |-IfStmt 0x278362700f8 <line:88:5, line:89:16>
|   | |-OpaqueValueExpr 0x278362700e0 <<invalid sloc>> '_Bool'
|   | `-ReturnStmt 0x278362700d0 <col:9, col:16>
|   |   `-IntegerLiteral 0x278362700a8 <col:16> 'int' 0
|   |-IfStmt 0x2783627b6d0 <line:90:5, line:91:27>
|   | |-ImplicitCastExpr 0x27836270130 <line:90:9> 'int *' <LValueToRValue>
|   | | `-DeclRefExpr 0x27836270110 <col:9> 'int *' lvalue ParmVar 0x2783626f378 'psignid' 'int *'
|   | `-BinaryOperator 0x2783627b6b0 <line:91:9, col:27> 'int' '='
|   |   |-UnaryOperator 0x27836270180 <col:9, col:10> 'int' lvalue prefix '*' cannot overflow
|   |   | `-ImplicitCastExpr 0x27836270168 <col:10> 'int *' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x27836270148 <col:10> 'int *' lvalue ParmVar 0x2783626f378 'psignid' 'int *'
|   |   `-ImplicitCastExpr 0x2783627b698 <col:20, col:27> 'int' <LValueToRValue>
|   |     `-MemberExpr 0x2783627b668 <col:20, col:27> 'const int' lvalue ->sign_id 0x2783487e318
|   |       `-ImplicitCastExpr 0x2783627b650 <col:20, col:24> 'const nid_triple *' <LValueToRValue>
|   |         `-ParenExpr 0x2783627b630 <col:20, col:24> 'const nid_triple *' lvalue
|   |           `-UnaryOperator 0x2783627b618 <col:21, col:22> 'const nid_triple *' lvalue prefix '*' cannot overflow
|   |             `-ImplicitCastExpr 0x2783627b600 <col:22> 'const nid_triple **' <LValueToRValue>
|   |               `-DeclRefExpr 0x2783627b5e0 <col:22> 'const nid_triple **' lvalue Var 0x2783626f880 'rv' 'const nid_triple **'
|   `-ReturnStmt 0x2783627b710 <line:92:5, col:12>
|     `-IntegerLiteral 0x2783627b6e8 <col:12> 'int' 1
|-FunctionDecl 0x2783627b9d0 <line:95:1, line:125:1> line:95:5 OBJ_add_sigid 'int (int, int, int)'
| |-ParmVarDecl 0x2783627b798 <col:19, col:23> col:23 used signid 'int'
| |-ParmVarDecl 0x2783627b818 <col:31, col:35> col:35 used dig_id 'int'
| |-ParmVarDecl 0x2783627b898 <col:43, col:47> col:47 used pkey_id 'int'
| `-CompoundStmt 0x2783627f930 <line:96:1, line:125:1>
|   |-DeclStmt 0x2783627bb18 <line:97:5, col:20>
|   | `-VarDecl 0x2783627bab0 <col:5, col:17> col:17 used ntr 'nid_triple *'
|   |-IfStmt 0x2783627bd60 <line:100:5, line:101:16>
|   | |-OpaqueValueExpr 0x2783627bd48 <<invalid sloc>> '_Bool'
|   | `-ReturnStmt 0x2783627bd38 <col:9, col:16>
|   |   `-IntegerLiteral 0x2783627bd10 <col:16> 'int' 0
|   |-IfStmt 0x2783627be60 <line:104:5, line:105:16>
|   | |-OpaqueValueExpr 0x2783627be48 <<invalid sloc>> '_Bool'
|   | `-ReturnStmt 0x2783627be38 <col:9, col:16>
|   |   `-IntegerLiteral 0x2783627be10 <col:16> 'int' 0
|   |-BinaryOperator 0x2783627c0a8 <line:106:5, col:38> 'nid_triple *' '='
|   | |-DeclRefExpr 0x2783627be78 <col:5> 'nid_triple *' lvalue Var 0x2783627bab0 'ntr' 'nid_triple *'
|   | `-ImplicitCastExpr 0x2783627c090 <col:11, col:38> 'nid_triple *' <IntegralToPointer>
|   |   `-CallExpr 0x2783627c068 <col:11, col:38> 'int'
|   |     |-ImplicitCastExpr 0x2783627c050 <col:11> 'int (*)()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x2783627bfa0 <col:11> 'int ()' Function 0x2783627bed8 'OPENSSL_malloc' 'int ()'
|   |     `-UnaryExprOrTypeTraitExpr 0x2783627c030 <col:26, col:37> 'unsigned long long' sizeof
|   |       `-ParenExpr 0x2783627c010 <col:32, col:37> 'nid_triple':'nid_triple' lvalue
|   |         `-UnaryOperator 0x2783627bff8 <col:33, col:34> 'nid_triple':'nid_triple' lvalue prefix '*' cannot overflow
|   |           `-ImplicitCastExpr 0x2783627bfe0 <col:34> 'nid_triple *' <LValueToRValue>
|   |             `-DeclRefExpr 0x2783627bfc0 <col:34> 'nid_triple *' lvalue Var 0x2783627bab0 'ntr' 'nid_triple *' non_odr_use_unevaluated
|   |-IfStmt 0x2783627c138 <line:107:5, line:108:16>
|   | |-OpaqueValueExpr 0x2783627c120 <<invalid sloc>> '_Bool'
|   | `-ReturnStmt 0x2783627c110 <col:9, col:16>
|   |   `-IntegerLiteral 0x2783627c0e8 <col:16> 'int' 0
|   |-BinaryOperator 0x2783627c1f0 <line:109:5, col:20> 'int' '='
|   | |-MemberExpr 0x2783627c188 <col:5, col:10> 'int' lvalue ->sign_id 0x2783487e318
|   | | `-ImplicitCastExpr 0x2783627c170 <col:5> 'nid_triple *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x2783627c150 <col:5> 'nid_triple *' lvalue Var 0x2783627bab0 'ntr' 'nid_triple *'
|   | `-ImplicitCastExpr 0x2783627c1d8 <col:20> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x2783627c1b8 <col:20> 'int' lvalue ParmVar 0x2783627b798 'signid' 'int'
|   |-BinaryOperator 0x2783627c2b0 <line:110:5, col:20> 'int' '='
|   | |-MemberExpr 0x2783627c248 <col:5, col:10> 'int' lvalue ->hash_id 0x2783487e388
|   | | `-ImplicitCastExpr 0x2783627c230 <col:5> 'nid_triple *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x2783627c210 <col:5> 'nid_triple *' lvalue Var 0x2783627bab0 'ntr' 'nid_triple *'
|   | `-ImplicitCastExpr 0x2783627c298 <col:20> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x2783627c278 <col:20> 'int' lvalue ParmVar 0x2783627b818 'dig_id' 'int'
|   |-BinaryOperator 0x2783627c370 <line:111:5, col:20> 'int' '='
|   | |-MemberExpr 0x2783627c308 <col:5, col:10> 'int' lvalue ->pkey_id 0x278362630f0
|   | | `-ImplicitCastExpr 0x2783627c2f0 <col:5> 'nid_triple *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x2783627c2d0 <col:5> 'nid_triple *' lvalue Var 0x2783627bab0 'ntr' 'nid_triple *'
|   | `-ImplicitCastExpr 0x2783627c358 <col:20> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x2783627c338 <col:20> 'int' lvalue ParmVar 0x2783627b898 'pkey_id' 'int'
|   |-IfStmt 0x2783627f708 <line:113:5, line:116:5>
|   | |-OpaqueValueExpr 0x2783627f6f0 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x2783627f6d0 <line:113:44, line:116:5>
|   |   |-CallExpr 0x2783627f658 <line:114:9, col:25> 'int'
|   |   | |-ImplicitCastExpr 0x2783627f640 <col:9> 'int (*)()' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x2783627c5b0 <col:9> 'int ()' Function 0x2783627c4e8 'OPENSSL_free' 'int ()'
|   |   | `-ImplicitCastExpr 0x2783627f680 <col:22> 'nid_triple *' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x2783627f620 <col:22> 'nid_triple *' lvalue Var 0x2783627bab0 'ntr' 'nid_triple *'
|   |   `-ReturnStmt 0x2783627f6c0 <line:115:9, col:16>
|   |     `-IntegerLiteral 0x2783627f698 <col:16> 'int' 0
|   |-IfStmt 0x2783627f7b0 <line:118:5, line:119:16>
|   | |-OpaqueValueExpr 0x2783627f798 <<invalid sloc>> '_Bool'
|   | `-ReturnStmt 0x2783627f788 <col:9, col:16>
|   |   `-IntegerLiteral 0x2783627f760 <col:16> 'int' 0
|   `-ReturnStmt 0x2783627f920 <line:124:5, col:12>
|     `-IntegerLiteral 0x2783627f8f8 <col:12> 'int' 1
|-FunctionDecl 0x2783627fab8 <line:127:1, line:130:1> line:127:13 used sid_free 'void (nid_triple *)' static
| |-ParmVarDecl 0x2783627f9a8 <col:22, col:34> col:34 used tt 'nid_triple *'
| `-CompoundStmt 0x2783627fc10 <line:128:1, line:130:1>
|   `-CallExpr 0x2783627fbd0 <line:129:5, col:20> 'int'
|     |-ImplicitCastExpr 0x2783627fbb8 <col:5> 'int (*)()' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x2783627fb78 <col:5> 'int ()' Function 0x2783627c4e8 'OPENSSL_free' 'int ()'
|     `-ImplicitCastExpr 0x2783627fbf8 <col:18> 'nid_triple *' <LValueToRValue>
|       `-DeclRefExpr 0x2783627fb98 <col:18> 'nid_triple *' lvalue ParmVar 0x2783627f9a8 'tt' 'nid_triple *'
`-FunctionDecl 0x2783627fce8 <line:132:1, line:138:1> line:132:6 OBJ_sigid_free 'void (void)'
  `-CompoundStmt 0x2783627ffe0 <line:133:1, line:138:1>
