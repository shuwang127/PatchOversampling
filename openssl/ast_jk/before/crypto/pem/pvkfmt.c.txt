TranslationUnitDecl 0x1f5e0dc0c28 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1f5e0dc14c0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x1f5e0dc11c0 '__int128'
|-TypedefDecl 0x1f5e0dc1530 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x1f5e0dc11e0 'unsigned __int128'
|-TypedefDecl 0x1f5e0dc1868 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x1f5e0dc1620 'struct __NSConstantString_tag'
|   `-Record 0x1f5e0dc1588 '__NSConstantString_tag'
|-TypedefDecl 0x1f5e0dc18d8 <<invalid sloc>> <invalid sloc> implicit size_t 'unsigned long long'
| `-BuiltinType 0x1f5e0dc0e00 'unsigned long long'
|-TypedefDecl 0x1f5e0dc1970 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x1f5e0dc1930 'char *'
|   `-BuiltinType 0x1f5e0dc0cc0 'char'
|-TypedefDecl 0x1f5e0dc19e0 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x1f5e0dc1930 'char *'
|   `-BuiltinType 0x1f5e0dc0cc0 'char'
|-FunctionDecl 0x1f5e25e8b70 <.//openssl//file_jk/before\crypto\pem\pvkfmt.c:28:1, line:38:1> line:28:21 used read_ledword 'unsigned int (const unsigned char **)' static
| |-ParmVarDecl 0x1f5e0dc1ab8 <col:34, col:56> col:56 used in 'const unsigned char **'
| `-CompoundStmt 0x1f5e25e9410 <line:29:1, line:38:1>
|   |-DeclStmt 0x1f5e25e8d60 <line:30:5, col:33>
|   | `-VarDecl 0x1f5e25e8c90 <col:5, col:31> col:26 used p 'const unsigned char *' cinit
|   |   `-ImplicitCastExpr 0x1f5e25e8d48 <col:30, col:31> 'const unsigned char *' <LValueToRValue>
|   |     `-UnaryOperator 0x1f5e25e8d30 <col:30, col:31> 'const unsigned char *' lvalue prefix '*' cannot overflow
|   |       `-ImplicitCastExpr 0x1f5e25e8d18 <col:31> 'const unsigned char **' <LValueToRValue>
|   |         `-DeclRefExpr 0x1f5e25e8cf8 <col:31> 'const unsigned char **' lvalue ParmVar 0x1f5e0dc1ab8 'in' 'const unsigned char **'
|   |-DeclStmt 0x1f5e25e8df8 <line:31:5, col:21>
|   | `-VarDecl 0x1f5e25e8d90 <col:5, col:18> col:18 used ret 'unsigned int'
|   |-BinaryOperator 0x1f5e25e8f10 <line:32:5, col:13> 'unsigned int' '='
|   | |-DeclRefExpr 0x1f5e25e8e10 <col:5> 'unsigned int' lvalue Var 0x1f5e25e8d90 'ret' 'unsigned int'
|   | `-ImplicitCastExpr 0x1f5e25e8ef8 <col:11, col:13> 'unsigned int' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1f5e25e8ee0 <col:11, col:13> 'unsigned char' <LValueToRValue>
|   |     `-UnaryOperator 0x1f5e25e8ec8 <col:11, col:13> 'const unsigned char' lvalue prefix '*' cannot overflow
|   |       `-UnaryOperator 0x1f5e25e8eb0 <col:12, col:13> 'const unsigned char *' postfix '++'
|   |         `-DeclRefExpr 0x1f5e25e8e78 <col:12> 'const unsigned char *' lvalue Var 0x1f5e25e8c90 'p' 'const unsigned char *'
|   |-CompoundAssignOperator 0x1f5e25e9050 <line:33:5, col:22> 'unsigned int' '|=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
|   | |-DeclRefExpr 0x1f5e25e8f30 <col:5> 'unsigned int' lvalue Var 0x1f5e25e8d90 'ret' 'unsigned int'
|   | `-ImplicitCastExpr 0x1f5e25e9038 <col:12, col:22> 'unsigned int' <IntegralCast>
|   |   `-ParenExpr 0x1f5e25e9018 <col:12, col:22> 'int'
|   |     `-BinaryOperator 0x1f5e25e8ff8 <col:13, col:21> 'int' '<<'
|   |       |-ImplicitCastExpr 0x1f5e25e8fe0 <col:13, col:15> 'int' <IntegralCast>
|   |       | `-ImplicitCastExpr 0x1f5e25e8fc8 <col:13, col:15> 'unsigned char' <LValueToRValue>
|   |       |   `-UnaryOperator 0x1f5e25e8f88 <col:13, col:15> 'const unsigned char' lvalue prefix '*' cannot overflow
|   |       |     `-UnaryOperator 0x1f5e25e8f70 <col:14, col:15> 'const unsigned char *' postfix '++'
|   |       |       `-DeclRefExpr 0x1f5e25e8f50 <col:14> 'const unsigned char *' lvalue Var 0x1f5e25e8c90 'p' 'const unsigned char *'
|   |       `-IntegerLiteral 0x1f5e25e8fa0 <col:21> 'int' 8
|   |-CompoundAssignOperator 0x1f5e25e91a0 <line:34:5, col:23> 'unsigned int' '|=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
|   | |-DeclRefExpr 0x1f5e25e9080 <col:5> 'unsigned int' lvalue Var 0x1f5e25e8d90 'ret' 'unsigned int'
|   | `-ImplicitCastExpr 0x1f5e25e9188 <col:12, col:23> 'unsigned int' <IntegralCast>
|   |   `-ParenExpr 0x1f5e25e9168 <col:12, col:23> 'int'
|   |     `-BinaryOperator 0x1f5e25e9148 <col:13, col:21> 'int' '<<'
|   |       |-ImplicitCastExpr 0x1f5e25e9130 <col:13, col:15> 'int' <IntegralCast>
|   |       | `-ImplicitCastExpr 0x1f5e25e9118 <col:13, col:15> 'unsigned char' <LValueToRValue>
|   |       |   `-UnaryOperator 0x1f5e25e90d8 <col:13, col:15> 'const unsigned char' lvalue prefix '*' cannot overflow
|   |       |     `-UnaryOperator 0x1f5e25e90c0 <col:14, col:15> 'const unsigned char *' postfix '++'
|   |       |       `-DeclRefExpr 0x1f5e25e90a0 <col:14> 'const unsigned char *' lvalue Var 0x1f5e25e8c90 'p' 'const unsigned char *'
|   |       `-IntegerLiteral 0x1f5e25e90f0 <col:21> 'int' 16
|   |-CompoundAssignOperator 0x1f5e25e92f0 <line:35:5, col:23> 'unsigned int' '|=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
|   | |-DeclRefExpr 0x1f5e25e91d0 <col:5> 'unsigned int' lvalue Var 0x1f5e25e8d90 'ret' 'unsigned int'
|   | `-ImplicitCastExpr 0x1f5e25e92d8 <col:12, col:23> 'unsigned int' <IntegralCast>
|   |   `-ParenExpr 0x1f5e25e92b8 <col:12, col:23> 'int'
|   |     `-BinaryOperator 0x1f5e25e9298 <col:13, col:21> 'int' '<<'
|   |       |-ImplicitCastExpr 0x1f5e25e9280 <col:13, col:15> 'int' <IntegralCast>
|   |       | `-ImplicitCastExpr 0x1f5e25e9268 <col:13, col:15> 'unsigned char' <LValueToRValue>
|   |       |   `-UnaryOperator 0x1f5e25e9228 <col:13, col:15> 'const unsigned char' lvalue prefix '*' cannot overflow
|   |       |     `-UnaryOperator 0x1f5e25e9210 <col:14, col:15> 'const unsigned char *' postfix '++'
|   |       |       `-DeclRefExpr 0x1f5e25e91f0 <col:14> 'const unsigned char *' lvalue Var 0x1f5e25e8c90 'p' 'const unsigned char *'
|   |       `-IntegerLiteral 0x1f5e25e9240 <col:21> 'int' 24
|   |-BinaryOperator 0x1f5e25e93a8 <line:36:5, col:11> 'const unsigned char *' '='
|   | |-UnaryOperator 0x1f5e25e9358 <col:5, col:6> 'const unsigned char *' lvalue prefix '*' cannot overflow
|   | | `-ImplicitCastExpr 0x1f5e25e9340 <col:6> 'const unsigned char **' <LValueToRValue>
|   | |   `-DeclRefExpr 0x1f5e25e9320 <col:6> 'const unsigned char **' lvalue ParmVar 0x1f5e0dc1ab8 'in' 'const unsigned char **'
|   | `-ImplicitCastExpr 0x1f5e25e9390 <col:11> 'const unsigned char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x1f5e25e9370 <col:11> 'const unsigned char *' lvalue Var 0x1f5e25e8c90 'p' 'const unsigned char *'
|   `-ReturnStmt 0x1f5e25e9400 <line:37:5, col:12>
|     `-ImplicitCastExpr 0x1f5e25e93e8 <col:12> 'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x1f5e25e93c8 <col:12> 'unsigned int' lvalue Var 0x1f5e25e8d90 'ret' 'unsigned int'
|-FunctionDecl 0x1f5e25e96d0 <line:45:1, line:52:1> line:45:12 invalid read_lebn 'int (const unsigned char **, unsigned int, int **)' static
| |-ParmVarDecl 0x1f5e25e9480 <col:22, col:44> col:44 used in 'const unsigned char **'
| |-ParmVarDecl 0x1f5e25e9500 <col:48, col:61> col:61 used nbyte 'unsigned int'
| |-ParmVarDecl 0x1f5e25e95e8 <col:68, col:77> col:77 invalid r 'int **'
| `-CompoundStmt 0x1f5e25e9ad0 <line:46:1, line:52:1>
|   |-IfStmt 0x1f5e25e99c8 <line:48:5, line:49:16>
|   | |-OpaqueValueExpr 0x1f5e25e99b0 <<invalid sloc>> '_Bool'
|   | `-ReturnStmt 0x1f5e25e99a0 <col:9, col:16>
|   |   `-IntegerLiteral 0x1f5e25e9978 <col:16> 'int' 0
|   |-CompoundAssignOperator 0x1f5e25e9a68 <line:50:5, col:12> 'const unsigned char *' '+=' ComputeLHSTy='const unsigned char *' ComputeResultTy='const unsigned char *'
|   | |-UnaryOperator 0x1f5e25e9a18 <col:5, col:6> 'const unsigned char *' lvalue prefix '*' cannot overflow
|   | | `-ImplicitCastExpr 0x1f5e25e9a00 <col:6> 'const unsigned char **' <LValueToRValue>
|   | |   `-DeclRefExpr 0x1f5e25e99e0 <col:6> 'const unsigned char **' lvalue ParmVar 0x1f5e25e9480 'in' 'const unsigned char **'
|   | `-ImplicitCastExpr 0x1f5e25e9a50 <col:12> 'unsigned int' <LValueToRValue>
|   |   `-DeclRefExpr 0x1f5e25e9a30 <col:12> 'unsigned int' lvalue ParmVar 0x1f5e25e9500 'nbyte' 'unsigned int'
|   `-ReturnStmt 0x1f5e25e9ac0 <line:51:5, col:12>
|     `-IntegerLiteral 0x1f5e25e9a98 <col:12> 'int' 1
|-FunctionDecl 0x1f5e25e9db0 <line:81:1, line:82:56> line:81:18 invalid b2i_rsa 'int *(const unsigned char **, unsigned int, int)' static
| |-ParmVarDecl 0x1f5e25e9b80 <col:26, col:48> col:48 in 'const unsigned char **'
| |-ParmVarDecl 0x1f5e25e9c00 <line:82:26, col:39> col:39 bitlen 'unsigned int'
| `-ParmVarDecl 0x1f5e25e9c80 <col:47, col:51> col:51 ispub 'int'
|-FunctionDecl 0x1f5e25ea078 <line:83:1, line:84:56> line:83:18 invalid b2i_dss 'int *(const unsigned char **, unsigned int, int)' static
| |-ParmVarDecl 0x1f5e25e9e88 <col:26, col:48> col:48 in 'const unsigned char **'
| |-ParmVarDecl 0x1f5e25e9f08 <line:84:26, col:39> col:39 bitlen 'unsigned int'
| `-ParmVarDecl 0x1f5e25e9f88 <col:47, col:51> col:51 ispub 'int'
|-FunctionDecl 0x1f5e25ea580 <line:86:1, line:147:1> line:86:12 used do_blob_header 'int (const unsigned char **, unsigned int, unsigned int *, unsigned int *, int *, int *)' static
| |-ParmVarDecl 0x1f5e25ea150 <col:27, col:49> col:49 used in 'const unsigned char **'
| |-ParmVarDecl 0x1f5e25ea1d0 <col:53, col:66> col:66 used length 'unsigned int'
| |-ParmVarDecl 0x1f5e25ea250 <line:87:27, col:41> col:41 used pmagic 'unsigned int *'
| |-ParmVarDecl 0x1f5e25ea2d0 <col:49, col:63> col:63 used pbitlen 'unsigned int *'
| |-ParmVarDecl 0x1f5e25ea350 <line:88:27, col:32> col:32 used pisdss 'int *'
| |-ParmVarDecl 0x1f5e25ea3d0 <col:40, col:45> col:45 used pispub 'int *'
| `-CompoundStmt 0x1f5e25ebc48 <line:89:1, line:147:1>
|   |-DeclStmt 0x1f5e25ea750 <line:90:5, col:33>
|   | `-VarDecl 0x1f5e25ea680 <col:5, col:31> col:26 used p 'const unsigned char *' cinit
|   |   `-ImplicitCastExpr 0x1f5e25ea738 <col:30, col:31> 'const unsigned char *' <LValueToRValue>
|   |     `-UnaryOperator 0x1f5e25ea720 <col:30, col:31> 'const unsigned char *' lvalue prefix '*' cannot overflow
|   |       `-ImplicitCastExpr 0x1f5e25ea708 <col:31> 'const unsigned char **' <LValueToRValue>
|   |         `-DeclRefExpr 0x1f5e25ea6e8 <col:31> 'const unsigned char **' lvalue ParmVar 0x1f5e25ea150 'in' 'const unsigned char **'
|   |-IfStmt 0x1f5e25ea838 <line:91:5, line:92:16>
|   | |-BinaryOperator 0x1f5e25ea7e0 <line:91:9, col:18> 'int' '<'
|   | | |-ImplicitCastExpr 0x1f5e25ea7b0 <col:9> 'unsigned int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1f5e25ea768 <col:9> 'unsigned int' lvalue ParmVar 0x1f5e25ea1d0 'length' 'unsigned int'
|   | | `-ImplicitCastExpr 0x1f5e25ea7c8 <col:18> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x1f5e25ea788 <col:18> 'int' 16
|   | `-ReturnStmt 0x1f5e25ea828 <line:92:9, col:16>
|   |   `-IntegerLiteral 0x1f5e25ea800 <col:16> 'int' 0
|   |-IfStmt 0x1f5e25e3ed0 <line:94:5, line:107:16> has_else
|   | |-BinaryOperator 0x1f5e25ea910 <line:94:9, line:56:34> 'int' '=='
|   | | |-ImplicitCastExpr 0x1f5e25ea8f8 <line:94:9, col:10> 'int' <IntegralCast>
|   | | | `-ImplicitCastExpr 0x1f5e25ea8e0 <col:9, col:10> 'unsigned char' <LValueToRValue>
|   | | |   `-UnaryOperator 0x1f5e25ea8a0 <col:9, col:10> 'const unsigned char' lvalue prefix '*' cannot overflow
|   | | |     `-ImplicitCastExpr 0x1f5e25ea888 <col:10> 'const unsigned char *' <LValueToRValue>
|   | | |       `-DeclRefExpr 0x1f5e25ea850 <col:10> 'const unsigned char *' lvalue Var 0x1f5e25ea680 'p' 'const unsigned char *'
|   | | `-IntegerLiteral 0x1f5e25ea8b8 <line:56:34> 'int' 6
|   | |-CompoundStmt 0x1f5e25e3b98 <line:94:33, line:100:5>
|   | | |-IfStmt 0x1f5e25eab40 <line:95:9, line:98:9>
|   | | | |-BinaryOperator 0x1f5e25ea9c0 <line:95:13, col:24> 'int' '=='
|   | | | | |-ImplicitCastExpr 0x1f5e25ea9a8 <col:13, col:14> 'int' <LValueToRValue>
|   | | | | | `-UnaryOperator 0x1f5e25ea968 <col:13, col:14> 'int' lvalue prefix '*' cannot overflow
|   | | | | |   `-ImplicitCastExpr 0x1f5e25ea950 <col:14> 'int *' <LValueToRValue>
|   | | | | |     `-DeclRefExpr 0x1f5e25ea930 <col:14> 'int *' lvalue ParmVar 0x1f5e25ea3d0 'pispub' 'int *'
|   | | | | `-IntegerLiteral 0x1f5e25ea980 <col:24> 'int' 0
|   | | | `-CompoundStmt 0x1f5e25eab28 <col:27, line:98:9>
|   | | |   `-ReturnStmt 0x1f5e25eab18 <line:97:13, col:20>
|   | | |     `-IntegerLiteral 0x1f5e25eaaf0 <col:20> 'int' 0
|   | | `-BinaryOperator 0x1f5e25e3b78 <line:99:9, col:19> 'int' '='
|   | |   |-UnaryOperator 0x1f5e25e3b38 <col:9, col:10> 'int' lvalue prefix '*' cannot overflow
|   | |   | `-ImplicitCastExpr 0x1f5e25e3b20 <col:10> 'int *' <LValueToRValue>
|   | |   |   `-DeclRefExpr 0x1f5e25eab58 <col:10> 'int *' lvalue ParmVar 0x1f5e25ea3d0 'pispub' 'int *'
|   | |   `-IntegerLiteral 0x1f5e25e3b50 <col:19> 'int' 1
|   | `-IfStmt 0x1f5e25e3ea8 <line:100:12, line:107:16> has_else
|   |   |-BinaryOperator 0x1f5e25e3c60 <line:100:16, line:57:34> 'int' '=='
|   |   | |-ImplicitCastExpr 0x1f5e25e3c48 <line:100:16, col:17> 'int' <IntegralCast>
|   |   | | `-ImplicitCastExpr 0x1f5e25e3c30 <col:16, col:17> 'unsigned char' <LValueToRValue>
|   |   | |   `-UnaryOperator 0x1f5e25e3bf0 <col:16, col:17> 'const unsigned char' lvalue prefix '*' cannot overflow
|   |   | |     `-ImplicitCastExpr 0x1f5e25e3bd8 <col:17> 'const unsigned char *' <LValueToRValue>
|   |   | |       `-DeclRefExpr 0x1f5e25e3bb8 <col:17> 'const unsigned char *' lvalue Var 0x1f5e25ea680 'p' 'const unsigned char *'
|   |   | `-IntegerLiteral 0x1f5e25e3c08 <line:57:34> 'int' 7
|   |   |-CompoundStmt 0x1f5e25e3e50 <line:100:41, line:106:5>
|   |   | |-IfStmt 0x1f5e25e3da0 <line:101:9, line:104:9>
|   |   | | |-BinaryOperator 0x1f5e25e3d10 <line:101:13, col:24> 'int' '=='
|   |   | | | |-ImplicitCastExpr 0x1f5e25e3cf8 <col:13, col:14> 'int' <LValueToRValue>
|   |   | | | | `-UnaryOperator 0x1f5e25e3cb8 <col:13, col:14> 'int' lvalue prefix '*' cannot overflow
|   |   | | | |   `-ImplicitCastExpr 0x1f5e25e3ca0 <col:14> 'int *' <LValueToRValue>
|   |   | | | |     `-DeclRefExpr 0x1f5e25e3c80 <col:14> 'int *' lvalue ParmVar 0x1f5e25ea3d0 'pispub' 'int *'
|   |   | | | `-IntegerLiteral 0x1f5e25e3cd0 <col:24> 'int' 1
|   |   | | `-CompoundStmt 0x1f5e25e3d88 <col:27, line:104:9>
|   |   | |   `-ReturnStmt 0x1f5e25e3d78 <line:103:13, col:20>
|   |   | |     `-IntegerLiteral 0x1f5e25e3d50 <col:20> 'int' 0
|   |   | `-BinaryOperator 0x1f5e25e3e30 <line:105:9, col:19> 'int' '='
|   |   |   |-UnaryOperator 0x1f5e25e3df0 <col:9, col:10> 'int' lvalue prefix '*' cannot overflow
|   |   |   | `-ImplicitCastExpr 0x1f5e25e3dd8 <col:10> 'int *' <LValueToRValue>
|   |   |   |   `-DeclRefExpr 0x1f5e25e3db8 <col:10> 'int *' lvalue ParmVar 0x1f5e25ea3d0 'pispub' 'int *'
|   |   |   `-IntegerLiteral 0x1f5e25e3e08 <col:19> 'int' 0
|   |   `-ReturnStmt 0x1f5e25e3e98 <line:107:9, col:16>
|   |     `-IntegerLiteral 0x1f5e25e3e70 <col:16> 'int' 0
|   |-UnaryOperator 0x1f5e25e3f18 <line:108:5, col:6> 'const unsigned char *' postfix '++'
|   | `-DeclRefExpr 0x1f5e25e3ef8 <col:5> 'const unsigned char *' lvalue Var 0x1f5e25ea680 'p' 'const unsigned char *'
|   |-IfStmt 0x1f5e25e4068 <line:110:5, line:113:5>
|   | |-BinaryOperator 0x1f5e25e3fd8 <line:110:9, col:17> 'int' '!='
|   | | |-ImplicitCastExpr 0x1f5e25e3fc0 <col:9, col:11> 'int' <IntegralCast>
|   | | | `-ImplicitCastExpr 0x1f5e25e3fa8 <col:9, col:11> 'unsigned char' <LValueToRValue>
|   | | |   `-UnaryOperator 0x1f5e25e3f68 <col:9, col:11> 'const unsigned char' lvalue prefix '*' cannot overflow
|   | | |     `-UnaryOperator 0x1f5e25e3f50 <col:10, col:11> 'const unsigned char *' postfix '++'
|   | | |       `-DeclRefExpr 0x1f5e25e3f30 <col:10> 'const unsigned char *' lvalue Var 0x1f5e25ea680 'p' 'const unsigned char *'
|   | | `-IntegerLiteral 0x1f5e25e3f80 <col:17> 'int' 2
|   | `-CompoundStmt 0x1f5e25e4050 <col:22, line:113:5>
|   |   `-ReturnStmt 0x1f5e25e4040 <line:112:9, col:16>
|   |     `-IntegerLiteral 0x1f5e25e4018 <col:16> 'int' 0
|   |-CompoundAssignOperator 0x1f5e25e40c8 <line:115:5, col:10> 'const unsigned char *' '+=' ComputeLHSTy='const unsigned char *' ComputeResultTy='const unsigned char *'
|   | |-DeclRefExpr 0x1f5e25e4080 <col:5> 'const unsigned char *' lvalue Var 0x1f5e25ea680 'p' 'const unsigned char *'
|   | `-IntegerLiteral 0x1f5e25e40a0 <col:10> 'int' 6
|   |-BinaryOperator 0x1f5e25e4208 <line:116:5, col:30> 'unsigned int' '='
|   | |-UnaryOperator 0x1f5e25e4130 <col:5, col:6> 'unsigned int' lvalue prefix '*' cannot overflow
|   | | `-ImplicitCastExpr 0x1f5e25e4118 <col:6> 'unsigned int *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x1f5e25e40f8 <col:6> 'unsigned int *' lvalue ParmVar 0x1f5e25ea250 'pmagic' 'unsigned int *'
|   | `-CallExpr 0x1f5e25e41e0 <col:15, col:30> 'unsigned int'
|   |   |-ImplicitCastExpr 0x1f5e25e41c8 <col:15> 'unsigned int (*)(const unsigned char **)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x1f5e25e4148 <col:15> 'unsigned int (const unsigned char **)' Function 0x1f5e25e8b70 'read_ledword' 'unsigned int (const unsigned char **)'
|   |   `-UnaryOperator 0x1f5e25e4188 <col:28, col:29> 'const unsigned char **' prefix '&' cannot overflow
|   |     `-DeclRefExpr 0x1f5e25e4168 <col:29> 'const unsigned char *' lvalue Var 0x1f5e25ea680 'p' 'const unsigned char *'
|   |-BinaryOperator 0x1f5e25e4310 <line:117:5, col:31> 'unsigned int' '='
|   | |-UnaryOperator 0x1f5e25e4260 <col:5, col:6> 'unsigned int' lvalue prefix '*' cannot overflow
|   | | `-ImplicitCastExpr 0x1f5e25e4248 <col:6> 'unsigned int *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x1f5e25e4228 <col:6> 'unsigned int *' lvalue ParmVar 0x1f5e25ea2d0 'pbitlen' 'unsigned int *'
|   | `-CallExpr 0x1f5e25e42e8 <col:16, col:31> 'unsigned int'
|   |   |-ImplicitCastExpr 0x1f5e25e42d0 <col:16> 'unsigned int (*)(const unsigned char **)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x1f5e25e4278 <col:16> 'unsigned int (const unsigned char **)' Function 0x1f5e25e8b70 'read_ledword' 'unsigned int (const unsigned char **)'
|   |   `-UnaryOperator 0x1f5e25e42b8 <col:29, col:30> 'const unsigned char **' prefix '&' cannot overflow
|   |     `-DeclRefExpr 0x1f5e25e4298 <col:30> 'const unsigned char *' lvalue Var 0x1f5e25ea680 'p' 'const unsigned char *'
|   |-BinaryOperator 0x1f5e25e43a8 <line:118:5, col:15> 'int' '='
|   | |-UnaryOperator 0x1f5e25e4368 <col:5, col:6> 'int' lvalue prefix '*' cannot overflow
|   | | `-ImplicitCastExpr 0x1f5e25e4350 <col:6> 'int *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x1f5e25e4330 <col:6> 'int *' lvalue ParmVar 0x1f5e25ea350 'pisdss' 'int *'
|   | `-IntegerLiteral 0x1f5e25e4380 <col:15> 'int' 0
|   |-SwitchStmt 0x1f5e25e4430 <line:119:5, line:144:5>
|   | |-ImplicitCastExpr 0x1f5e25e4418 <line:119:13, col:14> 'unsigned int' <LValueToRValue>
|   | | `-UnaryOperator 0x1f5e25e4400 <col:13, col:14> 'unsigned int' lvalue prefix '*' cannot overflow
|   | |   `-ImplicitCastExpr 0x1f5e25e43e8 <col:14> 'unsigned int *' <LValueToRValue>
|   | |     `-DeclRefExpr 0x1f5e25e43c8 <col:14> 'unsigned int *' lvalue ParmVar 0x1f5e25ea250 'pmagic' 'unsigned int *'
|   | `-CompoundStmt 0x1f5e25e4a98 <col:22, line:144:5>
|   |   |-CaseStmt 0x1f5e25e44a8 <line:121:5, line:122:19>
|   |   | |-ImplicitCastExpr 0x1f5e25e4490 <line:60:34> 'unsigned int' <IntegralCast>
|   |   | | `-ConstantExpr 0x1f5e25e4478 <col:34> 'long'
|   |   | |   `-IntegerLiteral 0x1f5e25e4450 <col:34> 'long' 827544388
|   |   | `-BinaryOperator 0x1f5e25e4548 <line:122:9, col:19> 'int' '='
|   |   |   |-UnaryOperator 0x1f5e25e4508 <col:9, col:10> 'int' lvalue prefix '*' cannot overflow
|   |   |   | `-ImplicitCastExpr 0x1f5e25e44f0 <col:10> 'int *' <LValueToRValue>
|   |   |   |   `-DeclRefExpr 0x1f5e25e44d0 <col:10> 'int *' lvalue ParmVar 0x1f5e25ea350 'pisdss' 'int *'
|   |   |   `-IntegerLiteral 0x1f5e25e4520 <col:19> 'int' 1
|   |   |-CaseStmt 0x1f5e25e45c0 <line:124:5, line:128:9>
|   |   | |-ImplicitCastExpr 0x1f5e25e45a8 <line:58:34> 'unsigned int' <IntegralCast>
|   |   | | `-ConstantExpr 0x1f5e25e4590 <col:34> 'long'
|   |   | |   `-IntegerLiteral 0x1f5e25e4568 <col:34> 'long' 826364754
|   |   | `-IfStmt 0x1f5e25e4708 <line:125:9, line:128:9>
|   |   |   |-BinaryOperator 0x1f5e25e4678 <line:125:13, col:24> 'int' '=='
|   |   |   | |-ImplicitCastExpr 0x1f5e25e4660 <col:13, col:14> 'int' <LValueToRValue>
|   |   |   | | `-UnaryOperator 0x1f5e25e4620 <col:13, col:14> 'int' lvalue prefix '*' cannot overflow
|   |   |   | |   `-ImplicitCastExpr 0x1f5e25e4608 <col:14> 'int *' <LValueToRValue>
|   |   |   | |     `-DeclRefExpr 0x1f5e25e45e8 <col:14> 'int *' lvalue ParmVar 0x1f5e25ea3d0 'pispub' 'int *'
|   |   |   | `-IntegerLiteral 0x1f5e25e4638 <col:24> 'int' 0
|   |   |   `-CompoundStmt 0x1f5e25e46f0 <col:27, line:128:9>
|   |   |     `-ReturnStmt 0x1f5e25e46e0 <line:127:13, col:20>
|   |   |       `-IntegerLiteral 0x1f5e25e46b8 <col:20> 'int' 0
|   |   |-BreakStmt 0x1f5e25e4720 <line:129:9>
|   |   |-CaseStmt 0x1f5e25e4780 <line:131:5, line:132:19>
|   |   | |-ImplicitCastExpr 0x1f5e25e4768 <line:61:34> 'unsigned int' <IntegralCast>
|   |   | | `-ConstantExpr 0x1f5e25e4750 <col:34> 'long'
|   |   | |   `-IntegerLiteral 0x1f5e25e4728 <col:34> 'long' 844321604
|   |   | `-BinaryOperator 0x1f5e25e4820 <line:132:9, col:19> 'int' '='
|   |   |   |-UnaryOperator 0x1f5e25e47e0 <col:9, col:10> 'int' lvalue prefix '*' cannot overflow
|   |   |   | `-ImplicitCastExpr 0x1f5e25e47c8 <col:10> 'int *' <LValueToRValue>
|   |   |   |   `-DeclRefExpr 0x1f5e25e47a8 <col:10> 'int *' lvalue ParmVar 0x1f5e25ea350 'pisdss' 'int *'
|   |   |   `-IntegerLiteral 0x1f5e25e47f8 <col:19> 'int' 1
|   |   |-CaseStmt 0x1f5e25e4898 <line:134:5, line:138:9>
|   |   | |-ImplicitCastExpr 0x1f5e25e4880 <line:59:34> 'unsigned int' <IntegralCast>
|   |   | | `-ConstantExpr 0x1f5e25e4868 <col:34> 'long'
|   |   | |   `-IntegerLiteral 0x1f5e25e4840 <col:34> 'long' 843141970
|   |   | `-IfStmt 0x1f5e25e49e0 <line:135:9, line:138:9>
|   |   |   |-BinaryOperator 0x1f5e25e4950 <line:135:13, col:24> 'int' '=='
|   |   |   | |-ImplicitCastExpr 0x1f5e25e4938 <col:13, col:14> 'int' <LValueToRValue>
|   |   |   | | `-UnaryOperator 0x1f5e25e48f8 <col:13, col:14> 'int' lvalue prefix '*' cannot overflow
|   |   |   | |   `-ImplicitCastExpr 0x1f5e25e48e0 <col:14> 'int *' <LValueToRValue>
|   |   |   | |     `-DeclRefExpr 0x1f5e25e48c0 <col:14> 'int *' lvalue ParmVar 0x1f5e25ea3d0 'pispub' 'int *'
|   |   |   | `-IntegerLiteral 0x1f5e25e4910 <col:24> 'int' 1
|   |   |   `-CompoundStmt 0x1f5e25e49c8 <col:27, line:138:9>
|   |   |     `-ReturnStmt 0x1f5e25e49b8 <line:137:13, col:20>
|   |   |       `-IntegerLiteral 0x1f5e25e4990 <col:20> 'int' 0
|   |   |-BreakStmt 0x1f5e25e49f8 <line:139:9>
|   |   |-DefaultStmt 0x1f5e25e4a28 <line:141:5, col:12>
|   |   | `-NullStmt 0x1f5e25e4a20 <col:12>
|   |   `-ReturnStmt 0x1f5e25e4a88 <line:143:9, col:17>
|   |     `-UnaryOperator 0x1f5e25e4a70 <col:16, col:17> 'int' prefix '-'
|   |       `-IntegerLiteral 0x1f5e25e4a48 <col:17> 'int' 1
|   |-BinaryOperator 0x1f5e25ebbf0 <line:145:5, col:11> 'const unsigned char *' '='
|   | |-UnaryOperator 0x1f5e25ebba0 <col:5, col:6> 'const unsigned char *' lvalue prefix '*' cannot overflow
|   | | `-ImplicitCastExpr 0x1f5e25e4b08 <col:6> 'const unsigned char **' <LValueToRValue>
|   | |   `-DeclRefExpr 0x1f5e25e4ae8 <col:6> 'const unsigned char **' lvalue ParmVar 0x1f5e25ea150 'in' 'const unsigned char **'
|   | `-ImplicitCastExpr 0x1f5e25ebbd8 <col:11> 'const unsigned char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x1f5e25ebbb8 <col:11> 'const unsigned char *' lvalue Var 0x1f5e25ea680 'p' 'const unsigned char *'
|   `-ReturnStmt 0x1f5e25ebc38 <line:146:5, col:12>
|     `-IntegerLiteral 0x1f5e25ebc10 <col:12> 'int' 1
|-FunctionDecl 0x1f5e25ebf00 <line:149:1, line:180:1> line:149:21 used blob_length 'unsigned int (unsigned int, int, int)' static
| |-ParmVarDecl 0x1f5e25ebcd0 <col:33, col:42> col:42 used bitlen 'unsigned int'
| |-ParmVarDecl 0x1f5e25ebd50 <col:50, col:54> col:54 used isdss 'int'
| |-ParmVarDecl 0x1f5e25ebdd0 <col:61, col:65> col:65 used ispub 'int'
| `-CompoundStmt 0x1f5e25ec978 <line:150:1, line:180:1>
|   |-DeclStmt 0x1f5e25ec0e8 <line:151:5, col:31>
|   | |-VarDecl 0x1f5e25ebfe8 <col:5, col:18> col:18 used nbyte 'unsigned int'
|   | `-VarDecl 0x1f5e25ec068 <col:5, col:25> col:25 used hnbyte 'unsigned int'
|   |-BinaryOperator 0x1f5e25ec238 <line:152:5, col:29> 'unsigned int' '='
|   | |-DeclRefExpr 0x1f5e25ec100 <col:5> 'unsigned int' lvalue Var 0x1f5e25ebfe8 'nbyte' 'unsigned int'
|   | `-BinaryOperator 0x1f5e25ec218 <col:13, col:29> 'unsigned int' '>>'
|   |   |-ParenExpr 0x1f5e25ec1d0 <col:13, col:24> 'unsigned int'
|   |   | `-BinaryOperator 0x1f5e25ec1b0 <col:14, col:23> 'unsigned int' '+'
|   |   |   |-ImplicitCastExpr 0x1f5e25ec180 <col:14> 'unsigned int' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x1f5e25ec138 <col:14> 'unsigned int' lvalue ParmVar 0x1f5e25ebcd0 'bitlen' 'unsigned int'
|   |   |   `-ImplicitCastExpr 0x1f5e25ec198 <col:23> 'unsigned int' <IntegralCast>
|   |   |     `-IntegerLiteral 0x1f5e25ec158 <col:23> 'int' 7
|   |   `-IntegerLiteral 0x1f5e25ec1f0 <col:29> 'int' 3
|   |-BinaryOperator 0x1f5e25ec390 <line:153:5, col:31> 'unsigned int' '='
|   | |-DeclRefExpr 0x1f5e25ec258 <col:5> 'unsigned int' lvalue Var 0x1f5e25ec068 'hnbyte' 'unsigned int'
|   | `-BinaryOperator 0x1f5e25ec370 <col:14, col:31> 'unsigned int' '>>'
|   |   |-ParenExpr 0x1f5e25ec328 <col:14, col:26> 'unsigned int'
|   |   | `-BinaryOperator 0x1f5e25ec308 <col:15, col:24> 'unsigned int' '+'
|   |   |   |-ImplicitCastExpr 0x1f5e25ec2d8 <col:15> 'unsigned int' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x1f5e25ec290 <col:15> 'unsigned int' lvalue ParmVar 0x1f5e25ebcd0 'bitlen' 'unsigned int'
|   |   |   `-ImplicitCastExpr 0x1f5e25ec2f0 <col:24> 'unsigned int' <IntegralCast>
|   |   |     `-IntegerLiteral 0x1f5e25ec2b0 <col:24> 'int' 15
|   |   `-IntegerLiteral 0x1f5e25ec348 <col:31> 'int' 4
|   `-IfStmt 0x1f5e25ec950 <line:154:5, line:178:5> has_else
|     |-ImplicitCastExpr 0x1f5e25ec3d0 <line:154:9> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x1f5e25ec3b0 <col:9> 'int' lvalue ParmVar 0x1f5e25ebd50 'isdss' 'int'
|     |-CompoundStmt 0x1f5e25ec658 <col:16, line:168:5>
|     | `-IfStmt 0x1f5e25ec630 <line:160:9, line:167:29> has_else
|     |   |-ImplicitCastExpr 0x1f5e25ec408 <line:160:13> 'int' <LValueToRValue>
|     |   | `-DeclRefExpr 0x1f5e25ec3e8 <col:13> 'int' lvalue ParmVar 0x1f5e25ebdd0 'ispub' 'int'
|     |   |-ReturnStmt 0x1f5e25ec518 <line:161:13, col:29>
|     |   | `-BinaryOperator 0x1f5e25ec4f8 <col:20, col:29> 'unsigned int' '+'
|     |   |   |-ImplicitCastExpr 0x1f5e25ec4e0 <col:20> 'unsigned int' <IntegralCast>
|     |   |   | `-IntegerLiteral 0x1f5e25ec420 <col:20> 'int' 44
|     |   |   `-BinaryOperator 0x1f5e25ec4c0 <col:25, col:29> 'unsigned int' '*'
|     |   |     |-ImplicitCastExpr 0x1f5e25ec4a8 <col:25> 'unsigned int' <IntegralCast>
|     |   |     | `-IntegerLiteral 0x1f5e25ec448 <col:25> 'int' 3
|     |   |     `-ImplicitCastExpr 0x1f5e25ec490 <col:29> 'unsigned int' <LValueToRValue>
|     |   |       `-DeclRefExpr 0x1f5e25ec470 <col:29> 'unsigned int' lvalue Var 0x1f5e25ebfe8 'nbyte' 'unsigned int'
|     |   `-ReturnStmt 0x1f5e25ec620 <line:167:13, col:29>
|     |     `-BinaryOperator 0x1f5e25ec600 <col:20, col:29> 'unsigned int' '+'
|     |       |-ImplicitCastExpr 0x1f5e25ec5e8 <col:20> 'unsigned int' <IntegralCast>
|     |       | `-IntegerLiteral 0x1f5e25ec528 <col:20> 'int' 64
|     |       `-BinaryOperator 0x1f5e25ec5c8 <col:25, col:29> 'unsigned int' '*'
|     |         |-ImplicitCastExpr 0x1f5e25ec5b0 <col:25> 'unsigned int' <IntegralCast>
|     |         | `-IntegerLiteral 0x1f5e25ec550 <col:25> 'int' 2
|     |         `-ImplicitCastExpr 0x1f5e25ec598 <col:29> 'unsigned int' <LValueToRValue>
|     |           `-DeclRefExpr 0x1f5e25ec578 <col:29> 'unsigned int' lvalue Var 0x1f5e25ebfe8 'nbyte' 'unsigned int'
|     `-CompoundStmt 0x1f5e25ec938 <line:168:12, line:178:5>
|       `-IfStmt 0x1f5e25ec910 <line:170:9, line:177:40> has_else
|         |-ImplicitCastExpr 0x1f5e25ec690 <line:170:13> 'int' <LValueToRValue>
|         | `-DeclRefExpr 0x1f5e25ec670 <col:13> 'int' lvalue ParmVar 0x1f5e25ebdd0 'ispub' 'int'
|         |-ReturnStmt 0x1f5e25ec740 <line:171:13, col:24>
|         | `-BinaryOperator 0x1f5e25ec720 <col:20, col:24> 'unsigned int' '+'
|         |   |-ImplicitCastExpr 0x1f5e25ec708 <col:20> 'unsigned int' <IntegralCast>
|         |   | `-IntegerLiteral 0x1f5e25ec6a8 <col:20> 'int' 4
|         |   `-ImplicitCastExpr 0x1f5e25ec6f0 <col:24> 'unsigned int' <LValueToRValue>
|         |     `-DeclRefExpr 0x1f5e25ec6d0 <col:24> 'unsigned int' lvalue Var 0x1f5e25ebfe8 'nbyte' 'unsigned int'
|         `-ReturnStmt 0x1f5e25ec900 <line:177:13, col:40>
|           `-BinaryOperator 0x1f5e25ec8e0 <col:20, col:40> 'unsigned int' '+'
|             |-BinaryOperator 0x1f5e25ec828 <col:20, col:28> 'unsigned int' '+'
|             | |-ImplicitCastExpr 0x1f5e25ec810 <col:20> 'unsigned int' <IntegralCast>
|             | | `-IntegerLiteral 0x1f5e25ec750 <col:20> 'int' 4
|             | `-BinaryOperator 0x1f5e25ec7f0 <col:24, col:28> 'unsigned int' '*'
|             |   |-ImplicitCastExpr 0x1f5e25ec7d8 <col:24> 'unsigned int' <IntegralCast>
|             |   | `-IntegerLiteral 0x1f5e25ec778 <col:24> 'int' 2
|             |   `-ImplicitCastExpr 0x1f5e25ec7c0 <col:28> 'unsigned int' <LValueToRValue>
|             |     `-DeclRefExpr 0x1f5e25ec7a0 <col:28> 'unsigned int' lvalue Var 0x1f5e25ebfe8 'nbyte' 'unsigned int'
|             `-BinaryOperator 0x1f5e25ec8c0 <col:36, col:40> 'unsigned int' '*'
|               |-ImplicitCastExpr 0x1f5e25ec8a8 <col:36> 'unsigned int' <IntegralCast>
|               | `-IntegerLiteral 0x1f5e25ec848 <col:36> 'int' 5
|               `-ImplicitCastExpr 0x1f5e25ec890 <col:40> 'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x1f5e25ec870 <col:40> 'unsigned int' lvalue Var 0x1f5e25ec068 'hnbyte' 'unsigned int'
|-FunctionDecl 0x1f5e25f0440 <line:182:1, line:201:1> line:182:18 invalid do_b2i 'int *(const unsigned char **, unsigned int, int)' static
| |-ParmVarDecl 0x1f5e25ec9c8 <col:25, col:47> col:47 used in 'const unsigned char **'
| |-ParmVarDecl 0x1f5e25eca48 <col:51, col:64> col:64 used length 'unsigned int'
| |-ParmVarDecl 0x1f5e25ecac8 <line:183:25, col:29> col:29 used ispub 'int'
| `-CompoundStmt 0x1f5e25f0e68 <line:184:1, line:201:1>
|   |-DeclStmt 0x1f5e25f05f8 <line:185:5, col:33>
|   | `-VarDecl 0x1f5e25f0528 <col:5, col:31> col:26 used p 'const unsigned char *' cinit
|   |   `-ImplicitCastExpr 0x1f5e25f05e0 <col:30, col:31> 'const unsigned char *' <LValueToRValue>
|   |     `-UnaryOperator 0x1f5e25f05c8 <col:30, col:31> 'const unsigned char *' lvalue prefix '*' cannot overflow
|   |       `-ImplicitCastExpr 0x1f5e25f05b0 <col:31> 'const unsigned char **' <LValueToRValue>
|   |         `-DeclRefExpr 0x1f5e25f0590 <col:31> 'const unsigned char **' lvalue ParmVar 0x1f5e25ec9c8 'in' 'const unsigned char **'
|   |-DeclStmt 0x1f5e25f0728 <line:186:5, col:31>
|   | |-VarDecl 0x1f5e25f0628 <col:5, col:18> col:18 used bitlen 'unsigned int'
|   | `-VarDecl 0x1f5e25f06a8 <col:5, col:26> col:26 used magic 'unsigned int'
|   |-DeclStmt 0x1f5e25f07c0 <line:187:5, col:14>
|   | `-VarDecl 0x1f5e25f0758 <col:5, col:9> col:9 used isdss 'int'
|   |-IfStmt 0x1f5e25f0ab0 <line:188:5, line:191:5>
|   | |-BinaryOperator 0x1f5e25f0a60 <line:188:9, col:72> 'int' '<='
|   | | |-CallExpr 0x1f5e25f09d0 <col:9, col:67> 'int'
|   | | | |-ImplicitCastExpr 0x1f5e25f09b8 <col:9> 'int (*)(const unsigned char **, unsigned int, unsigned int *, unsigned int *, int *, int *)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x1f5e25f07d8 <col:9> 'int (const unsigned char **, unsigned int, unsigned int *, unsigned int *, int *, int *)' Function 0x1f5e25ea580 'do_blob_header' 'int (const unsigned char **, unsigned int, unsigned int *, unsigned int *, int *, int *)'
|   | | | |-UnaryOperator 0x1f5e25f0830 <col:24, col:25> 'const unsigned char **' prefix '&' cannot overflow
|   | | | | `-DeclRefExpr 0x1f5e25f07f8 <col:25> 'const unsigned char *' lvalue Var 0x1f5e25f0528 'p' 'const unsigned char *'
|   | | | |-ImplicitCastExpr 0x1f5e25f0a20 <col:28> 'unsigned int' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x1f5e25f0848 <col:28> 'unsigned int' lvalue ParmVar 0x1f5e25eca48 'length' 'unsigned int'
|   | | | |-UnaryOperator 0x1f5e25f08a0 <col:36, col:37> 'unsigned int *' prefix '&' cannot overflow
|   | | | | `-DeclRefExpr 0x1f5e25f0868 <col:37> 'unsigned int' lvalue Var 0x1f5e25f06a8 'magic' 'unsigned int'
|   | | | |-UnaryOperator 0x1f5e25f08f0 <col:44, col:45> 'unsigned int *' prefix '&' cannot overflow
|   | | | | `-DeclRefExpr 0x1f5e25f08b8 <col:45> 'unsigned int' lvalue Var 0x1f5e25f0628 'bitlen' 'unsigned int'
|   | | | |-UnaryOperator 0x1f5e25f0940 <col:53, col:54> 'int *' prefix '&' cannot overflow
|   | | | | `-DeclRefExpr 0x1f5e25f0908 <col:54> 'int' lvalue Var 0x1f5e25f0758 'isdss' 'int'
|   | | | `-UnaryOperator 0x1f5e25f0978 <col:61, col:62> 'int *' prefix '&' cannot overflow
|   | | |   `-DeclRefExpr 0x1f5e25f0958 <col:62> 'int' lvalue ParmVar 0x1f5e25ecac8 'ispub' 'int'
|   | | `-IntegerLiteral 0x1f5e25f0a38 <col:72> 'int' 0
|   | `-CompoundStmt 0x1f5e25f0aa0 <col:75, line:191:5>
|   |-CompoundAssignOperator 0x1f5e25f0b28 <line:192:5, col:15> 'unsigned int' '-=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
|   | |-DeclRefExpr 0x1f5e25f0ac8 <col:5> 'unsigned int' lvalue ParmVar 0x1f5e25eca48 'length' 'unsigned int'
|   | `-ImplicitCastExpr 0x1f5e25f0b10 <col:15> 'unsigned int' <IntegralCast>
|   |   `-IntegerLiteral 0x1f5e25f0ae8 <col:15> 'int' 16
|   `-IfStmt 0x1f5e25f0d28 <line:193:5, line:196:5>
|     |-BinaryOperator 0x1f5e25f0cd8 <line:193:9, col:50> 'int' '<'
|     | |-ImplicitCastExpr 0x1f5e25f0cc0 <col:9> 'unsigned int' <LValueToRValue>
|     | | `-DeclRefExpr 0x1f5e25f0b58 <col:9> 'unsigned int' lvalue ParmVar 0x1f5e25eca48 'length' 'unsigned int'
|     | `-CallExpr 0x1f5e25f0c40 <col:18, col:50> 'unsigned int'
|     |   |-ImplicitCastExpr 0x1f5e25f0c28 <col:18> 'unsigned int (*)(unsigned int, int, int)' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x1f5e25f0b78 <col:18> 'unsigned int (unsigned int, int, int)' Function 0x1f5e25ebf00 'blob_length' 'unsigned int (unsigned int, int, int)'
|     |   |-ImplicitCastExpr 0x1f5e25f0c78 <col:30> 'unsigned int' <LValueToRValue>
|     |   | `-DeclRefExpr 0x1f5e25f0b98 <col:30> 'unsigned int' lvalue Var 0x1f5e25f0628 'bitlen' 'unsigned int'
|     |   |-ImplicitCastExpr 0x1f5e25f0c90 <col:38> 'int' <LValueToRValue>
|     |   | `-DeclRefExpr 0x1f5e25f0bb8 <col:38> 'int' lvalue Var 0x1f5e25f0758 'isdss' 'int'
|     |   `-ImplicitCastExpr 0x1f5e25f0ca8 <col:45> 'int' <LValueToRValue>
|     |     `-DeclRefExpr 0x1f5e25f0bd8 <col:45> 'int' lvalue ParmVar 0x1f5e25ecac8 'ispub' 'int'
|     `-CompoundStmt 0x1f5e25f0d18 <col:53, line:196:5>
|-FunctionDecl 0x1f5e25f1020 <line:203:1, line:242:1> line:203:18 invalid do_b2i_bio 'int *(int *, int)' static
| |-ParmVarDecl 0x1f5e25f0ec0 <col:29, col:34> col:34 invalid in 'int *'
| |-ParmVarDecl 0x1f5e25f0f40 <col:38, col:42> col:42 used ispub 'int'
| `-CompoundStmt 0x1f5e25f35a8 <line:204:1, line:242:1>
|   |-DeclStmt 0x1f5e25f1168 <line:205:5, col:27>
|   | `-VarDecl 0x1f5e25f1100 <col:5, col:26> col:26 used p 'const unsigned char *'
|   |-DeclStmt 0x1f5e25f1350 <line:206:5, col:43>
|   | |-VarDecl 0x1f5e25f1220 <col:5, col:29> col:19 used hdr_buf 'unsigned char [16]'
|   | `-VarDecl 0x1f5e25f12d0 <col:5, col:33> col:33 used buf 'unsigned char *'
|   |-DeclStmt 0x1f5e25f1518 <line:207:5, col:39>
|   | |-VarDecl 0x1f5e25f1380 <col:5, col:18> col:18 used bitlen 'unsigned int'
|   | |-VarDecl 0x1f5e25f1410 <col:5, col:26> col:26 used magic 'unsigned int'
|   | `-VarDecl 0x1f5e25f1490 <col:5, col:33> col:33 used length 'unsigned int'
|   |-DeclStmt 0x1f5e25f15b0 <line:208:5, col:14>
|   | `-VarDecl 0x1f5e25f1548 <col:5, col:9> col:9 used isdss 'int'
|   |-IfStmt 0x1f5e25f17a8 <line:210:5, line:213:5>
|   | |-OpaqueValueExpr 0x1f5e25f1790 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x1f5e25f1780 <line:210:42, line:213:5>
|   |-BinaryOperator 0x1f5e25f1848 <line:214:5, col:9> 'const unsigned char *' '='
|   | |-DeclRefExpr 0x1f5e25f17c0 <col:5> 'const unsigned char *' lvalue Var 0x1f5e25f1100 'p' 'const unsigned char *'
|   | `-ImplicitCastExpr 0x1f5e25f1830 <col:9> 'const unsigned char *' <NoOp>
|   |   `-ImplicitCastExpr 0x1f5e25f1818 <col:9> 'unsigned char *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1f5e25f17f8 <col:9> 'unsigned char [16]' lvalue Var 0x1f5e25f1220 'hdr_buf' 'unsigned char [16]'
|   |-BinaryOperator 0x1f5e25f1c40 <line:218:5, col:46> 'unsigned int' '='
|   | |-DeclRefExpr 0x1f5e25f1af0 <col:5> 'unsigned int' lvalue Var 0x1f5e25f1490 'length' 'unsigned int'
|   | `-CallExpr 0x1f5e25f1bc0 <col:14, col:46> 'unsigned int'
|   |   |-ImplicitCastExpr 0x1f5e25f1ba8 <col:14> 'unsigned int (*)(unsigned int, int, int)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x1f5e25f1b28 <col:14> 'unsigned int (unsigned int, int, int)' Function 0x1f5e25ebf00 'blob_length' 'unsigned int (unsigned int, int, int)'
|   |   |-ImplicitCastExpr 0x1f5e25f1bf8 <col:26> 'unsigned int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1f5e25f1b48 <col:26> 'unsigned int' lvalue Var 0x1f5e25f1380 'bitlen' 'unsigned int'
|   |   |-ImplicitCastExpr 0x1f5e25f1c10 <col:34> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1f5e25f1b68 <col:34> 'int' lvalue Var 0x1f5e25f1548 'isdss' 'int'
|   |   `-ImplicitCastExpr 0x1f5e25f1c28 <col:41> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x1f5e25f1b88 <col:41> 'int' lvalue ParmVar 0x1f5e25f0f40 'ispub' 'int'
|   |-IfStmt 0x1f5e25f1d28 <line:219:5, line:222:5>
|   | |-BinaryOperator 0x1f5e25f1cd8 <line:219:9, line:70:35> 'int' '>'
|   | | |-ImplicitCastExpr 0x1f5e25f1ca8 <line:219:9> 'unsigned int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1f5e25f1c60 <col:9> 'unsigned int' lvalue Var 0x1f5e25f1490 'length' 'unsigned int'
|   | | `-ImplicitCastExpr 0x1f5e25f1cc0 <line:70:35> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x1f5e25f1c80 <col:35> 'int' 102400
|   | `-CompoundStmt 0x1f5e25f1d18 <line:219:35, line:222:5>
|   |-BinaryOperator 0x1f5e25f1f48 <line:223:5, col:32> 'unsigned char *' '='
|   | |-DeclRefExpr 0x1f5e25f1d40 <col:5> 'unsigned char *' lvalue Var 0x1f5e25f12d0 'buf' 'unsigned char *'
|   | `-ImplicitCastExpr 0x1f5e25f1f30 <col:11, col:32> 'unsigned char *' <IntegralToPointer>
|   |   `-CallExpr 0x1f5e25f1ef0 <col:11, col:32> 'int'
|   |     |-ImplicitCastExpr 0x1f5e25f1ed8 <col:11> 'int (*)()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x1f5e25f1e68 <col:11> 'int ()' Function 0x1f5e25f1da0 'OPENSSL_malloc' 'int ()'
|   |     `-ImplicitCastExpr 0x1f5e25f1f18 <col:26> 'unsigned int' <LValueToRValue>
|   |       `-DeclRefExpr 0x1f5e25f1e88 <col:26> 'unsigned int' lvalue Var 0x1f5e25f1490 'length' 'unsigned int'
|   |-IfStmt 0x1f5e25f2040 <line:224:5, line:227:5>
|   | |-OpaqueValueExpr 0x1f5e25f2028 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x1f5e25f2010 <line:224:22, line:227:5>
|   |   `-GotoStmt 0x1f5e25f1ff8 <line:226:9, col:14> 'err' 0x1f5e25f1fa8
|   |-BinaryOperator 0x1f5e25f20c8 <line:228:5, col:9> 'const unsigned char *' '='
|   | |-DeclRefExpr 0x1f5e25f2058 <col:5> 'const unsigned char *' lvalue Var 0x1f5e25f1100 'p' 'const unsigned char *'
|   | `-ImplicitCastExpr 0x1f5e25f20b0 <col:9> 'const unsigned char *' <NoOp>
|   |   `-ImplicitCastExpr 0x1f5e25f2098 <col:9> 'unsigned char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x1f5e25f2078 <col:9> 'unsigned char *' lvalue Var 0x1f5e25f12d0 'buf' 'unsigned char *'
|   |-IfStmt 0x1f5e25f2228 <line:229:5, line:232:5>
|   | |-OpaqueValueExpr 0x1f5e25f2210 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x1f5e25f21f8 <line:229:51, line:232:5>
|   |   `-GotoStmt 0x1f5e25f21e0 <line:231:9, col:14> 'err' 0x1f5e25f1fa8
|   `-LabelStmt 0x1f5e25f3590 <line:239:2, line:240:21> 'err'
|     `-CallExpr 0x1f5e25f3550 <col:5, col:21> 'int'
|       |-ImplicitCastExpr 0x1f5e25f3538 <col:5> 'int (*)()' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x1f5e25f34f8 <col:5> 'int ()' Function 0x1f5e25f3430 'OPENSSL_free' 'int ()'
|       `-ImplicitCastExpr 0x1f5e25f3578 <col:18> 'unsigned char *' <LValueToRValue>
|         `-DeclRefExpr 0x1f5e25f3518 <col:18> 'unsigned char *' lvalue Var 0x1f5e25f12d0 'buf' 'unsigned char *'
|-FunctionDecl 0x1f5e25f3830 <line:244:1, line:314:1> line:244:18 invalid b2i_dss 'int *(const unsigned char **, unsigned int, int)' static
| |-ParmVarDecl 0x1f5e25f3640 <col:26, col:48> col:48 used in 'const unsigned char **'
| |-ParmVarDecl 0x1f5e25f36c0 <line:245:26, col:39> col:39 used bitlen 'unsigned int'
| |-ParmVarDecl 0x1f5e25f3740 <col:47, col:51> col:51 used ispub 'int'
| `-CompoundStmt 0x1f5e25fb1e8 <line:246:1, line:314:1>
|   |-DeclStmt 0x1f5e25f39e8 <line:247:5, col:33>
|   | `-VarDecl 0x1f5e25f3918 <col:5, col:31> col:26 used p 'const unsigned char *' cinit
|   |   `-ImplicitCastExpr 0x1f5e25f39d0 <col:30, col:31> 'const unsigned char *' <LValueToRValue>
|   |     `-UnaryOperator 0x1f5e25f39b8 <col:30, col:31> 'const unsigned char *' lvalue prefix '*' cannot overflow
|   |       `-ImplicitCastExpr 0x1f5e25f39a0 <col:31> 'const unsigned char **' <LValueToRValue>
|   |         `-DeclRefExpr 0x1f5e25f3980 <col:31> 'const unsigned char **' lvalue ParmVar 0x1f5e25f3640 'in' 'const unsigned char **'
|   |-DeclStmt 0x1f5e25f3a80 <line:251:5, col:23>
|   | `-VarDecl 0x1f5e25f3a18 <col:5, col:18> col:18 used nbyte 'unsigned int'
|   |-BinaryOperator 0x1f5e25f3bd0 <line:255:5, col:29> 'unsigned int' '='
|   | |-DeclRefExpr 0x1f5e25f3a98 <col:5> 'unsigned int' lvalue Var 0x1f5e25f3a18 'nbyte' 'unsigned int'
|   | `-BinaryOperator 0x1f5e25f3bb0 <col:13, col:29> 'unsigned int' '>>'
|   |   |-ParenExpr 0x1f5e25f3b68 <col:13, col:24> 'unsigned int'
|   |   | `-BinaryOperator 0x1f5e25f3b48 <col:14, col:23> 'unsigned int' '+'
|   |   |   |-ImplicitCastExpr 0x1f5e25f3b18 <col:14> 'unsigned int' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x1f5e25f3ad0 <col:14> 'unsigned int' lvalue ParmVar 0x1f5e25f36c0 'bitlen' 'unsigned int'
|   |   |   `-ImplicitCastExpr 0x1f5e25f3b30 <col:23> 'unsigned int' <IntegralCast>
|   |   |     `-IntegerLiteral 0x1f5e25f3af0 <col:23> 'int' 7
|   |   `-IntegerLiteral 0x1f5e25f3b88 <col:29> 'int' 3
|   |-IfStmt 0x1f5e25f3f00 <line:259:5, line:260:14>
|   | |-OpaqueValueExpr 0x1f5e25f3ee8 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x1f5e25f3ed0 <col:9, col:14> 'memerr' 0x1f5e25f3e80
|   |-IfStmt 0x1f5e25f3fb8 <line:261:5, line:262:14>
|   | |-OpaqueValueExpr 0x1f5e25f3fa0 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x1f5e25f3f88 <col:9, col:14> 'memerr' 0x1f5e25f3e80
|   |-IfStmt 0x1f5e25f4060 <line:264:5, line:265:14>
|   | |-OpaqueValueExpr 0x1f5e25f4048 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x1f5e25f4030 <col:9, col:14> 'memerr' 0x1f5e25f3e80
|   |-IfStmt 0x1f5e25f4100 <line:267:5, line:268:14>
|   | |-OpaqueValueExpr 0x1f5e25f40e8 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x1f5e25f40d0 <col:9, col:14> 'memerr' 0x1f5e25f3e80
|   |-IfStmt 0x1f5e25fa8e0 <line:270:5, line:289:5> has_else
|   | |-ImplicitCastExpr 0x1f5e25f4138 <line:270:9> 'int' <LValueToRValue>
|   | | `-DeclRefExpr 0x1f5e25f4118 <col:9> 'int' lvalue ParmVar 0x1f5e25f3740 'ispub' 'int'
|   | |-CompoundStmt 0x1f5e25f41f0 <col:16, line:273:5>
|   | | `-IfStmt 0x1f5e25f41d8 <line:271:9, line:272:18>
|   | |   |-OpaqueValueExpr 0x1f5e25f41c0 <<invalid sloc>> '_Bool'
|   | |   `-GotoStmt 0x1f5e25f41a8 <col:13, col:18> 'memerr' 0x1f5e25f3e80
|   | `-CompoundStmt 0x1f5e25fa8b0 <line:273:12, line:289:5>
|   |   |-IfStmt 0x1f5e25f4298 <line:274:9, line:275:18>
|   |   | |-OpaqueValueExpr 0x1f5e25f4280 <<invalid sloc>> '_Bool'
|   |   | `-GotoStmt 0x1f5e25f4268 <col:13, col:18> 'memerr' 0x1f5e25f3e80
|   |   |-IfStmt 0x1f5e25fa4a0 <line:279:9, line:280:18>
|   |   | |-OpaqueValueExpr 0x1f5e25f4410 <<invalid sloc>> '_Bool'
|   |   | `-GotoStmt 0x1f5e25f43f8 <col:13, col:18> 'memerr' 0x1f5e25f3e80
|   |   |-IfStmt 0x1f5e25fa630 <line:281:9, line:282:18>
|   |   | |-OpaqueValueExpr 0x1f5e25fa618 <<invalid sloc>> '_Bool'
|   |   | `-GotoStmt 0x1f5e25fa600 <col:13, col:18> 'memerr' 0x1f5e25f3e80
|   |   `-IfStmt 0x1f5e25fa788 <line:284:9, line:285:18>
|   |     |-OpaqueValueExpr 0x1f5e25fa770 <<invalid sloc>> '_Bool'
|   |     `-GotoStmt 0x1f5e25fa758 <col:13, col:18> 'memerr' 0x1f5e25f3e80
|   |-IfStmt 0x1f5e25faa48 <line:290:5, line:291:14>
|   | |-OpaqueValueExpr 0x1f5e25faa30 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x1f5e25faa18 <col:9, col:14> 'memerr' 0x1f5e25f3e80
|   |-IfStmt 0x1f5e25faba0 <line:293:5, line:294:14>
|   | |-OpaqueValueExpr 0x1f5e25fab88 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x1f5e25fab70 <col:9, col:14> 'memerr' 0x1f5e25f3e80
|   |-IfStmt 0x1f5e25facf8 <line:297:5, line:298:14>
|   | |-OpaqueValueExpr 0x1f5e25face0 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x1f5e25facc8 <col:9, col:14> 'memerr' 0x1f5e25f3e80
|   |-BinaryOperator 0x1f5e25faea8 <line:300:5, col:11> 'const unsigned char *' '='
|   | |-UnaryOperator 0x1f5e25fae58 <col:5, col:6> 'const unsigned char *' lvalue prefix '*' cannot overflow
|   | | `-ImplicitCastExpr 0x1f5e25fae40 <col:6> 'const unsigned char **' <LValueToRValue>
|   | |   `-DeclRefExpr 0x1f5e25fae20 <col:6> 'const unsigned char **' lvalue ParmVar 0x1f5e25f3640 'in' 'const unsigned char **'
|   | `-ImplicitCastExpr 0x1f5e25fae90 <col:11> 'const unsigned char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x1f5e25fae70 <col:11> 'const unsigned char *' lvalue Var 0x1f5e25f3918 'p' 'const unsigned char *'
|   `-LabelStmt 0x1f5e25faef0 <line:303:2, col:8> 'memerr'
|     `-NullStmt 0x1f5e25faee8 <col:8>
|-FunctionDecl 0x1f5e25fc4c0 <line:316:1, line:380:1> line:316:18 invalid b2i_rsa 'int *(const unsigned char **, unsigned int, int)' static
| |-ParmVarDecl 0x1f5e25fb280 <col:26, col:48> col:48 used in 'const unsigned char **'
| |-ParmVarDecl 0x1f5e25fb300 <line:317:26, col:39> col:39 used bitlen 'unsigned int'
| |-ParmVarDecl 0x1f5e25fb380 <col:47, col:51> col:51 used ispub 'int'
| `-CompoundStmt 0x1f5e25f5d28 <line:318:1, line:380:1>
|   |-DeclStmt 0x1f5e25fc678 <line:319:5, col:35>
|   | `-VarDecl 0x1f5e25fc5a8 <col:5, col:33> col:26 used pin 'const unsigned char *' cinit
|   |   `-ImplicitCastExpr 0x1f5e25fc660 <col:32, col:33> 'const unsigned char *' <LValueToRValue>
|   |     `-UnaryOperator 0x1f5e25fc648 <col:32, col:33> 'const unsigned char *' lvalue prefix '*' cannot overflow
|   |       `-ImplicitCastExpr 0x1f5e25fc630 <col:33> 'const unsigned char **' <LValueToRValue>
|   |         `-DeclRefExpr 0x1f5e25fc610 <col:33> 'const unsigned char **' lvalue ParmVar 0x1f5e25fb280 'in' 'const unsigned char **'
|   |-DeclStmt 0x1f5e25fc7a8 <line:324:5, col:31>
|   | |-VarDecl 0x1f5e25fc6a8 <col:5, col:18> col:18 used nbyte 'unsigned int'
|   | `-VarDecl 0x1f5e25fc728 <col:5, col:25> col:25 used hnbyte 'unsigned int'
|   |-BinaryOperator 0x1f5e25fc8f8 <line:325:5, col:29> 'unsigned int' '='
|   | |-DeclRefExpr 0x1f5e25fc7c0 <col:5> 'unsigned int' lvalue Var 0x1f5e25fc6a8 'nbyte' 'unsigned int'
|   | `-BinaryOperator 0x1f5e25fc8d8 <col:13, col:29> 'unsigned int' '>>'
|   |   |-ParenExpr 0x1f5e25fc890 <col:13, col:24> 'unsigned int'
|   |   | `-BinaryOperator 0x1f5e25fc870 <col:14, col:23> 'unsigned int' '+'
|   |   |   |-ImplicitCastExpr 0x1f5e25fc840 <col:14> 'unsigned int' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x1f5e25fc7f8 <col:14> 'unsigned int' lvalue ParmVar 0x1f5e25fb300 'bitlen' 'unsigned int'
|   |   |   `-ImplicitCastExpr 0x1f5e25fc858 <col:23> 'unsigned int' <IntegralCast>
|   |   |     `-IntegerLiteral 0x1f5e25fc818 <col:23> 'int' 7
|   |   `-IntegerLiteral 0x1f5e25fc8b0 <col:29> 'int' 3
|   |-BinaryOperator 0x1f5e25fca50 <line:326:5, col:31> 'unsigned int' '='
|   | |-DeclRefExpr 0x1f5e25fc918 <col:5> 'unsigned int' lvalue Var 0x1f5e25fc728 'hnbyte' 'unsigned int'
|   | `-BinaryOperator 0x1f5e25fca30 <col:14, col:31> 'unsigned int' '>>'
|   |   |-ParenExpr 0x1f5e25fc9e8 <col:14, col:26> 'unsigned int'
|   |   | `-BinaryOperator 0x1f5e25fc9c8 <col:15, col:24> 'unsigned int' '+'
|   |   |   |-ImplicitCastExpr 0x1f5e25fc998 <col:15> 'unsigned int' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x1f5e25fc950 <col:15> 'unsigned int' lvalue ParmVar 0x1f5e25fb300 'bitlen' 'unsigned int'
|   |   |   `-ImplicitCastExpr 0x1f5e25fc9b0 <col:24> 'unsigned int' <IntegralCast>
|   |   |     `-IntegerLiteral 0x1f5e25fc970 <col:24> 'int' 15
|   |   `-IntegerLiteral 0x1f5e25fca08 <col:31> 'int' 4
|   |-IfStmt 0x1f5e25fcc90 <line:329:5, line:330:14>
|   | |-OpaqueValueExpr 0x1f5e25fcc78 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x1f5e25fcc60 <col:9, col:14> 'memerr' 0x1f5e25fcc10
|   |-IfStmt 0x1f5e25fcd30 <line:332:5, line:333:14>
|   | |-OpaqueValueExpr 0x1f5e25fcd18 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x1f5e25fcd00 <col:9, col:14> 'memerr' 0x1f5e25fcc10
|   |-IfStmt 0x1f5e25fcf38 <line:334:5, line:335:14>
|   | |-OpaqueValueExpr 0x1f5e25fcf20 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x1f5e25fcf08 <col:9, col:14> 'memerr' 0x1f5e25fcc10
|   |-IfStmt 0x1f5e25fcfd8 <line:336:5, line:337:14>
|   | |-OpaqueValueExpr 0x1f5e25fcfc0 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x1f5e25fcfa8 <col:9, col:14> 'memerr' 0x1f5e25fcc10
|   |-IfStmt 0x1f5e25f5728 <line:338:5, line:357:5>
|   | |-UnaryOperator 0x1f5e25fd028 <line:338:9, col:10> 'int' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x1f5e25fd010 <col:10> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x1f5e25fcff0 <col:10> 'int' lvalue ParmVar 0x1f5e25fb380 'ispub' 'int'
|   | `-CompoundStmt 0x1f5e25f56d8 <col:17, line:357:5>
|   |   |-IfStmt 0x1f5e25fd0c8 <line:339:9, line:340:18>
|   |   | |-OpaqueValueExpr 0x1f5e25fd0b0 <<invalid sloc>> '_Bool'
|   |   | `-GotoStmt 0x1f5e25fd098 <col:13, col:18> 'memerr' 0x1f5e25fcc10
|   |   |-IfStmt 0x1f5e25fd168 <line:341:9, line:342:18>
|   |   | |-OpaqueValueExpr 0x1f5e25fd150 <<invalid sloc>> '_Bool'
|   |   | `-GotoStmt 0x1f5e25fd138 <col:13, col:18> 'memerr' 0x1f5e25fcc10
|   |   |-IfStmt 0x1f5e25fd208 <line:343:9, line:344:18>
|   |   | |-OpaqueValueExpr 0x1f5e25fd1f0 <<invalid sloc>> '_Bool'
|   |   | `-GotoStmt 0x1f5e25fd1d8 <col:13, col:18> 'memerr' 0x1f5e25fcc10
|   |   |-IfStmt 0x1f5e25fd2a8 <line:345:9, line:346:18>
|   |   | |-OpaqueValueExpr 0x1f5e25fd290 <<invalid sloc>> '_Bool'
|   |   | `-GotoStmt 0x1f5e25fd278 <col:13, col:18> 'memerr' 0x1f5e25fcc10
|   |   |-IfStmt 0x1f5e25fd348 <line:347:9, line:348:18>
|   |   | |-OpaqueValueExpr 0x1f5e25fd330 <<invalid sloc>> '_Bool'
|   |   | `-GotoStmt 0x1f5e25fd318 <col:13, col:18> 'memerr' 0x1f5e25fcc10
|   |   |-IfStmt 0x1f5e25fd3e8 <line:349:9, line:350:18>
|   |   | |-OpaqueValueExpr 0x1f5e25fd3d0 <<invalid sloc>> '_Bool'
|   |   | `-GotoStmt 0x1f5e25fd3b8 <col:13, col:18> 'memerr' 0x1f5e25fcc10
|   |   |-IfStmt 0x1f5e25f5568 <line:351:9, line:352:18>
|   |   | |-OpaqueValueExpr 0x1f5e25f5550 <<invalid sloc>> '_Bool'
|   |   | `-GotoStmt 0x1f5e25f5538 <col:13, col:18> 'memerr' 0x1f5e25fcc10
|   |   `-IfStmt 0x1f5e25f56c0 <line:354:9, line:355:18>
|   |     |-OpaqueValueExpr 0x1f5e25f56a8 <<invalid sloc>> '_Bool'
|   |     `-GotoStmt 0x1f5e25f5690 <col:13, col:18> 'memerr' 0x1f5e25fcc10
|   |-IfStmt 0x1f5e25f5880 <line:358:5, line:359:14>
|   | |-OpaqueValueExpr 0x1f5e25f5868 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x1f5e25f5850 <col:9, col:14> 'memerr' 0x1f5e25fcc10
|   |-IfStmt 0x1f5e25f59d8 <line:362:5, line:363:14>
|   | |-OpaqueValueExpr 0x1f5e25f59c0 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x1f5e25f59a8 <col:9, col:14> 'memerr' 0x1f5e25fcc10
|   |-BinaryOperator 0x1f5e25f5b88 <line:365:5, col:11> 'const unsigned char *' '='
|   | |-UnaryOperator 0x1f5e25f5b38 <col:5, col:6> 'const unsigned char *' lvalue prefix '*' cannot overflow
|   | | `-ImplicitCastExpr 0x1f5e25f5b20 <col:6> 'const unsigned char **' <LValueToRValue>
|   | |   `-DeclRefExpr 0x1f5e25f5b00 <col:6> 'const unsigned char **' lvalue ParmVar 0x1f5e25fb280 'in' 'const unsigned char **'
|   | `-ImplicitCastExpr 0x1f5e25f5b70 <col:11> 'const unsigned char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x1f5e25f5b50 <col:11> 'const unsigned char *' lvalue Var 0x1f5e25fc5a8 'pin' 'const unsigned char *'
|   `-LabelStmt 0x1f5e25f5bd0 <line:367:2, col:8> 'memerr'
|     `-NullStmt 0x1f5e25f5bc8 <col:8>
|-FunctionDecl 0x1f5e25f5f50 <line:382:1, line:385:1> line:382:11 invalid b2i_PrivateKey 'int *(const unsigned char **, long)'
| |-ParmVarDecl 0x1f5e25f5dc0 <col:26, col:48> col:48 used in 'const unsigned char **'
| |-ParmVarDecl 0x1f5e25f5e40 <col:52, col:57> col:57 used length 'long'
| `-CompoundStmt 0x1f5e25f6080 <line:383:1, line:385:1>
|-FunctionDecl 0x1f5e25f6200 <line:387:1, line:390:1> line:387:11 invalid b2i_PublicKey 'int *(const unsigned char **, long)'
| |-ParmVarDecl 0x1f5e25f60b0 <col:25, col:47> col:47 used in 'const unsigned char **'
| |-ParmVarDecl 0x1f5e25f6130 <col:51, col:56> col:56 used length 'long'
| `-CompoundStmt 0x1f5e25f6330 <line:388:1, line:390:1>
|-FunctionDecl 0x1f5e25fd4d0 <line:392:1, line:395:1> line:392:11 invalid b2i_PrivateKey_bio 'int *(int *)'
| |-ParmVarDecl 0x1f5e25f6358 <col:30, col:35> col:35 invalid in 'int *'
| `-CompoundStmt 0x1f5e25fd5b8 <line:393:1, line:395:1>
|-FunctionDecl 0x1f5e25fd678 <line:397:1, line:400:1> line:397:11 invalid b2i_PublicKey_bio 'int *(int *)'
| |-ParmVarDecl 0x1f5e25fd5e0 <col:29, col:34> col:34 invalid in 'int *'
| `-CompoundStmt 0x1f5e25fd760 <line:398:1, line:400:1>
|-FunctionDecl 0x1f5e25fd938 <line:402:1, line:410:1> line:402:13 used write_ledword 'void (unsigned char **, unsigned int)' static
| |-ParmVarDecl 0x1f5e25fd7b8 <col:27, col:43> col:43 used out 'unsigned char **'
| |-ParmVarDecl 0x1f5e25fd838 <col:48, col:61> col:61 used dw 'unsigned int'
| `-CompoundStmt 0x1f5e25fe178 <line:403:1, line:410:1>
|   |-DeclStmt 0x1f5e25fdae8 <line:404:5, col:28>
|   | `-VarDecl 0x1f5e25fda18 <col:5, col:25> col:20 used p 'unsigned char *' cinit
|   |   `-ImplicitCastExpr 0x1f5e25fdad0 <col:24, col:25> 'unsigned char *' <LValueToRValue>
|   |     `-UnaryOperator 0x1f5e25fdab8 <col:24, col:25> 'unsigned char *' lvalue prefix '*' cannot overflow
|   |       `-ImplicitCastExpr 0x1f5e25fdaa0 <col:25> 'unsigned char **' <LValueToRValue>
|   |         `-DeclRefExpr 0x1f5e25fda80 <col:25> 'unsigned char **' lvalue ParmVar 0x1f5e25fd7b8 'out' 'unsigned char **'
|   |-BinaryOperator 0x1f5e25fdc18 <line:405:5, col:17> 'unsigned char' '='
|   | |-UnaryOperator 0x1f5e25fdb50 <col:5, col:7> 'unsigned char' lvalue prefix '*' cannot overflow
|   | | `-UnaryOperator 0x1f5e25fdb38 <col:6, col:7> 'unsigned char *' postfix '++'
|   | |   `-DeclRefExpr 0x1f5e25fdb00 <col:6> 'unsigned char *' lvalue Var 0x1f5e25fda18 'p' 'unsigned char *'
|   | `-ImplicitCastExpr 0x1f5e25fdc00 <col:12, col:17> 'unsigned char' <IntegralCast>
|   |   `-BinaryOperator 0x1f5e25fdbe0 <col:12, col:17> 'unsigned int' '&'
|   |     |-ImplicitCastExpr 0x1f5e25fdbb0 <col:12> 'unsigned int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1f5e25fdb68 <col:12> 'unsigned int' lvalue ParmVar 0x1f5e25fd838 'dw' 'unsigned int'
|   |     `-ImplicitCastExpr 0x1f5e25fdbc8 <col:17> 'unsigned int' <IntegralCast>
|   |       `-IntegerLiteral 0x1f5e25fdb88 <col:17> 'int' 255
|   |-BinaryOperator 0x1f5e25fdda0 <line:406:5, col:24> 'unsigned char' '='
|   | |-UnaryOperator 0x1f5e25fdc70 <col:5, col:7> 'unsigned char' lvalue prefix '*' cannot overflow
|   | | `-UnaryOperator 0x1f5e25fdc58 <col:6, col:7> 'unsigned char *' postfix '++'
|   | |   `-DeclRefExpr 0x1f5e25fdc38 <col:6> 'unsigned char *' lvalue Var 0x1f5e25fda18 'p' 'unsigned char *'
|   | `-ImplicitCastExpr 0x1f5e25fdd88 <col:12, col:24> 'unsigned char' <IntegralCast>
|   |   `-BinaryOperator 0x1f5e25fdd68 <col:12, col:24> 'unsigned int' '&'
|   |     |-ParenExpr 0x1f5e25fdd08 <col:12, col:20> 'unsigned int'
|   |     | `-BinaryOperator 0x1f5e25fdce8 <col:13, col:19> 'unsigned int' '>>'
|   |     |   |-ImplicitCastExpr 0x1f5e25fdcd0 <col:13> 'unsigned int' <LValueToRValue>
|   |     |   | `-DeclRefExpr 0x1f5e25fdc88 <col:13> 'unsigned int' lvalue ParmVar 0x1f5e25fd838 'dw' 'unsigned int'
|   |     |   `-IntegerLiteral 0x1f5e25fdca8 <col:19> 'int' 8
|   |     `-ImplicitCastExpr 0x1f5e25fdd50 <col:24> 'unsigned int' <IntegralCast>
|   |       `-IntegerLiteral 0x1f5e25fdd28 <col:24> 'int' 255
|   |-BinaryOperator 0x1f5e25fdf28 <line:407:5, col:25> 'unsigned char' '='
|   | |-UnaryOperator 0x1f5e25fddf8 <col:5, col:7> 'unsigned char' lvalue prefix '*' cannot overflow
|   | | `-UnaryOperator 0x1f5e25fdde0 <col:6, col:7> 'unsigned char *' postfix '++'
|   | |   `-DeclRefExpr 0x1f5e25fddc0 <col:6> 'unsigned char *' lvalue Var 0x1f5e25fda18 'p' 'unsigned char *'
|   | `-ImplicitCastExpr 0x1f5e25fdf10 <col:12, col:25> 'unsigned char' <IntegralCast>
|   |   `-BinaryOperator 0x1f5e25fdef0 <col:12, col:25> 'unsigned int' '&'
|   |     |-ParenExpr 0x1f5e25fde90 <col:12, col:21> 'unsigned int'
|   |     | `-BinaryOperator 0x1f5e25fde70 <col:13, col:19> 'unsigned int' '>>'
|   |     |   |-ImplicitCastExpr 0x1f5e25fde58 <col:13> 'unsigned int' <LValueToRValue>
|   |     |   | `-DeclRefExpr 0x1f5e25fde10 <col:13> 'unsigned int' lvalue ParmVar 0x1f5e25fd838 'dw' 'unsigned int'
|   |     |   `-IntegerLiteral 0x1f5e25fde30 <col:19> 'int' 16
|   |     `-ImplicitCastExpr 0x1f5e25fded8 <col:25> 'unsigned int' <IntegralCast>
|   |       `-IntegerLiteral 0x1f5e25fdeb0 <col:25> 'int' 255
|   |-BinaryOperator 0x1f5e25fe0b0 <line:408:5, col:25> 'unsigned char' '='
|   | |-UnaryOperator 0x1f5e25fdf80 <col:5, col:7> 'unsigned char' lvalue prefix '*' cannot overflow
|   | | `-UnaryOperator 0x1f5e25fdf68 <col:6, col:7> 'unsigned char *' postfix '++'
|   | |   `-DeclRefExpr 0x1f5e25fdf48 <col:6> 'unsigned char *' lvalue Var 0x1f5e25fda18 'p' 'unsigned char *'
|   | `-ImplicitCastExpr 0x1f5e25fe098 <col:12, col:25> 'unsigned char' <IntegralCast>
|   |   `-BinaryOperator 0x1f5e25fe078 <col:12, col:25> 'unsigned int' '&'
|   |     |-ParenExpr 0x1f5e25fe018 <col:12, col:21> 'unsigned int'
|   |     | `-BinaryOperator 0x1f5e25fdff8 <col:13, col:19> 'unsigned int' '>>'
|   |     |   |-ImplicitCastExpr 0x1f5e25fdfe0 <col:13> 'unsigned int' <LValueToRValue>
|   |     |   | `-DeclRefExpr 0x1f5e25fdf98 <col:13> 'unsigned int' lvalue ParmVar 0x1f5e25fd838 'dw' 'unsigned int'
|   |     |   `-IntegerLiteral 0x1f5e25fdfb8 <col:19> 'int' 24
|   |     `-ImplicitCastExpr 0x1f5e25fe060 <col:25> 'unsigned int' <IntegralCast>
|   |       `-IntegerLiteral 0x1f5e25fe038 <col:25> 'int' 255
|   `-BinaryOperator 0x1f5e25fe158 <line:409:5, col:12> 'unsigned char *' '='
|     |-UnaryOperator 0x1f5e25fe108 <col:5, col:6> 'unsigned char *' lvalue prefix '*' cannot overflow
|     | `-ImplicitCastExpr 0x1f5e25fe0f0 <col:6> 'unsigned char **' <LValueToRValue>
|     |   `-DeclRefExpr 0x1f5e25fe0d0 <col:6> 'unsigned char **' lvalue ParmVar 0x1f5e25fd7b8 'out' 'unsigned char **'
|     `-ImplicitCastExpr 0x1f5e25fe140 <col:12> 'unsigned char *' <LValueToRValue>
|       `-DeclRefExpr 0x1f5e25fe120 <col:12> 'unsigned char *' lvalue Var 0x1f5e25fda18 'p' 'unsigned char *'
|-FunctionDecl 0x1f5e25fe3b8 <line:412:1, line:416:1> line:412:13 invalid write_lebn 'void (unsigned char **, const int *, int)' static
| |-ParmVarDecl 0x1f5e25fe1d8 <col:24, col:40> col:40 used out 'unsigned char **'
| |-ParmVarDecl 0x1f5e25fe258 <col:45, col:59> col:59 invalid bn 'const int *'
| |-ParmVarDecl 0x1f5e25fe2d8 <col:63, col:67> col:67 used len 'int'
| `-CompoundStmt 0x1f5e25fb6f0 <line:413:1, line:416:1>
|   `-CompoundAssignOperator 0x1f5e25fb6c0 <line:415:5, col:13> 'unsigned char *' '+=' ComputeLHSTy='unsigned char *' ComputeResultTy='unsigned char *'
|     |-UnaryOperator 0x1f5e25fb670 <col:5, col:6> 'unsigned char *' lvalue prefix '*' cannot overflow
|     | `-ImplicitCastExpr 0x1f5e25fb658 <col:6> 'unsigned char **' <LValueToRValue>
|     |   `-DeclRefExpr 0x1f5e25fb638 <col:6> 'unsigned char **' lvalue ParmVar 0x1f5e25fe1d8 'out' 'unsigned char **'
|     `-ImplicitCastExpr 0x1f5e25fb6a8 <col:13> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x1f5e25fb688 <col:13> 'int' lvalue ParmVar 0x1f5e25fe2d8 'len' 'int'
|-FunctionDecl 0x1f5e25fb910 <line:418:1, col:69> col:12 invalid check_bitlen_rsa 'int (int *, int, unsigned int *)' static
| |-ParmVarDecl 0x1f5e25fb720 <col:29, col:34> col:34 invalid rsa 'int *'
| |-ParmVarDecl 0x1f5e25fb7a0 <col:39, col:43> col:43 ispub 'int'
| `-ParmVarDecl 0x1f5e25fb820 <col:50, col:64> col:64 magic 'unsigned int *'
|-FunctionDecl 0x1f5e25fbb88 <line:419:1, col:69> col:12 invalid check_bitlen_dsa 'int (int *, int, unsigned int *)' static
| |-ParmVarDecl 0x1f5e25fb9e0 <col:29, col:34> col:34 invalid dsa 'int *'
| |-ParmVarDecl 0x1f5e25fba60 <col:39, col:43> col:43 ispub 'int'
| `-ParmVarDecl 0x1f5e25fbae0 <col:50, col:64> col:64 magic 'unsigned int *'
|-FunctionDecl 0x1f5e25fbe48 <line:421:1, col:63> col:13 invalid write_rsa 'void (unsigned char **, int *, int)' static
| |-ParmVarDecl 0x1f5e25fbc60 <col:23, col:39> col:39 out 'unsigned char **'
| |-ParmVarDecl 0x1f5e25fbce0 <col:44, col:49> col:49 invalid rsa 'int *'
| `-ParmVarDecl 0x1f5e25fbd60 <col:54, col:58> col:58 ispub 'int'
|-FunctionDecl 0x1f5e25fc0c0 <line:422:1, col:63> col:13 invalid write_dsa 'void (unsigned char **, int *, int)' static
| |-ParmVarDecl 0x1f5e25fbf20 <col:23, col:39> col:39 out 'unsigned char **'
| |-ParmVarDecl 0x1f5e25fbfa0 <col:44, col:49> col:49 invalid dsa 'int *'
| `-ParmVarDecl 0x1f5e25fc020 <col:54, col:58> col:58 ispub 'int'
|-FunctionDecl 0x1f5e25fc380 <line:424:1, line:470:1> line:424:12 invalid do_i2b 'int (unsigned char **, int *, int)' static
| |-ParmVarDecl 0x1f5e25fc198 <col:19, col:35> col:35 used out 'unsigned char **'
| |-ParmVarDecl 0x1f5e25fc218 <col:40, col:50> col:50 invalid pk 'int *'
| |-ParmVarDecl 0x1f5e25fc298 <col:54, col:58> col:58 used ispub 'int'
| `-CompoundStmt 0x1f5e25ff258 <line:425:1, line:470:1>
|   |-DeclStmt 0x1f5e25f64c8 <line:426:5, col:21>
|   | `-VarDecl 0x1f5e25f6460 <col:5, col:20> col:20 used p 'unsigned char *'
|   |-DeclStmt 0x1f5e25f66c0 <line:427:5, col:43>
|   | |-VarDecl 0x1f5e25f64f8 <col:5, col:18> col:18 used bitlen 'unsigned int'
|   | |-VarDecl 0x1f5e25f6578 <col:5, col:34> col:26 used magic 'unsigned int' cinit
|   | | `-ImplicitCastExpr 0x1f5e25f6608 <col:34> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x1f5e25f65e0 <col:34> 'int' 0
|   | `-VarDecl 0x1f5e25f6638 <col:5, col:37> col:37 used keyalg 'unsigned int'
|   |-DeclStmt 0x1f5e25f6818 <line:428:5, col:26>
|   | |-VarDecl 0x1f5e25f66f0 <col:5, col:9> col:9 used outlen 'int'
|   | `-VarDecl 0x1f5e25f6770 <col:5, col:25> col:17 used noinc 'int' cinit
|   |   `-IntegerLiteral 0x1f5e25f67d8 <col:25> 'int' 0
|   |-DeclStmt 0x1f5e25f69c0 <line:429:5, col:33>
|   | `-VarDecl 0x1f5e25f6848 <col:5, col:9> col:9 used pktype 'int'
|   |-IfStmt 0x1f5e25f6f78 <line:430:5, line:437:17> has_else
|   | |-OpaqueValueExpr 0x1f5e25f6f60 <<invalid sloc>> '_Bool'
|   | |-CompoundStmt 0x1f5e25f6c78 <line:430:33, line:433:5>
|   | | `-BinaryOperator 0x1f5e25f6c58 <line:432:9, line:64:34> 'unsigned int' '='
|   | |   |-DeclRefExpr 0x1f5e25f6be0 <line:432:9> 'unsigned int' lvalue Var 0x1f5e25f6638 'keyalg' 'unsigned int'
|   | |   `-ImplicitCastExpr 0x1f5e25f6c40 <line:64:34> 'unsigned int' <IntegralCast>
|   | |     `-IntegerLiteral 0x1f5e25f6c18 <col:34> 'int' 8704
|   | `-IfStmt 0x1f5e25f6f38 <line:433:12, line:437:17> has_else
|   |   |-OpaqueValueExpr 0x1f5e25f6f20 <<invalid sloc>> '_Bool'
|   |   |-CompoundStmt 0x1f5e25f6eb8 <line:433:40, line:436:5>
|   |   | `-BinaryOperator 0x1f5e25f6e98 <line:435:9, line:63:34> 'unsigned int' '='
|   |   |   |-DeclRefExpr 0x1f5e25f6e38 <line:435:9> 'unsigned int' lvalue Var 0x1f5e25f6638 'keyalg' 'unsigned int'
|   |   |   `-ImplicitCastExpr 0x1f5e25f6e80 <line:63:34> 'unsigned int' <IntegralCast>
|   |   |     `-IntegerLiteral 0x1f5e25f6e58 <col:34> 'int' 41984
|   |   `-ReturnStmt 0x1f5e25f6f10 <line:437:9, col:17>
|   |     `-UnaryOperator 0x1f5e25f6ef8 <col:16, col:17> 'int' prefix '-'
|   |       `-IntegerLiteral 0x1f5e25f6ed0 <col:17> 'int' 1
|   |-IfStmt 0x1f5e25f7088 <line:438:5, line:439:17>
|   | |-BinaryOperator 0x1f5e25f7018 <line:438:9, col:19> 'int' '=='
|   | | |-ImplicitCastExpr 0x1f5e25f6fe8 <col:9> 'unsigned int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1f5e25f6fa0 <col:9> 'unsigned int' lvalue Var 0x1f5e25f64f8 'bitlen' 'unsigned int'
|   | | `-ImplicitCastExpr 0x1f5e25f7000 <col:19> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x1f5e25f6fc0 <col:19> 'int' 0
|   | `-ReturnStmt 0x1f5e25f7078 <line:439:9, col:17>
|   |   `-UnaryOperator 0x1f5e25f7060 <col:16, col:17> 'int' prefix '-'
|   |     `-IntegerLiteral 0x1f5e25f7038 <col:17> 'int' 1
|   |-BinaryOperator 0x1f5e25f7348 <line:440:5, line:441:74> 'int' '='
|   | |-DeclRefExpr 0x1f5e25f70a0 <line:440:5> 'int' lvalue Var 0x1f5e25f66f0 'outlen' 'int'
|   | `-ImplicitCastExpr 0x1f5e25f7330 <col:14, line:441:74> 'int' <IntegralCast>
|   |   `-BinaryOperator 0x1f5e25f7310 <line:440:14, line:441:74> 'unsigned int' '+'
|   |     |-ImplicitCastExpr 0x1f5e25f72f8 <line:440:14> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x1f5e25f70d8 <col:14> 'int' 16
|   |     `-CallExpr 0x1f5e25f7290 <col:19, line:441:74> 'unsigned int'
|   |       |-ImplicitCastExpr 0x1f5e25f7278 <line:440:19> 'unsigned int (*)(unsigned int, int, int)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x1f5e25f7100 <col:19> 'unsigned int (unsigned int, int, int)' Function 0x1f5e25ebf00 'blob_length' 'unsigned int (unsigned int, int, int)'
|   |       |-ImplicitCastExpr 0x1f5e25f72c8 <col:31> 'unsigned int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x1f5e25f7120 <col:31> 'unsigned int' lvalue Var 0x1f5e25f64f8 'bitlen' 'unsigned int'
|   |       |-ConditionalOperator 0x1f5e25f7228 <line:441:31, col:66> 'int'
|   |       | |-BinaryOperator 0x1f5e25f71b8 <col:31, line:64:34> 'int' '=='
|   |       | | |-ImplicitCastExpr 0x1f5e25f7188 <line:441:31> 'unsigned int' <LValueToRValue>
|   |       | | | `-DeclRefExpr 0x1f5e25f7140 <col:31> 'unsigned int' lvalue Var 0x1f5e25f6638 'keyalg' 'unsigned int'
|   |       | | `-ImplicitCastExpr 0x1f5e25f71a0 <line:64:34> 'unsigned int' <IntegralCast>
|   |       | |   `-IntegerLiteral 0x1f5e25f7160 <col:34> 'int' 8704
|   |       | |-IntegerLiteral 0x1f5e25f71d8 <line:441:62> 'int' 1
|   |       | `-IntegerLiteral 0x1f5e25f7200 <col:66> 'int' 0
|   |       `-ImplicitCastExpr 0x1f5e25f72e0 <col:69> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x1f5e25f7258 <col:69> 'int' lvalue ParmVar 0x1f5e25fc298 'ispub' 'int'
|   |-IfStmt 0x1f5e25f7400 <line:442:5, line:443:16>
|   | |-OpaqueValueExpr 0x1f5e25f73e8 <<invalid sloc>> '_Bool'
|   | `-ReturnStmt 0x1f5e25f73d8 <col:9, col:16>
|   |   `-ImplicitCastExpr 0x1f5e25f73c0 <col:16> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x1f5e25f73a0 <col:16> 'int' lvalue Var 0x1f5e25f66f0 'outlen' 'int'
|   |-IfStmt 0x1f5e25fe8b8 <line:444:5, line:452:5> has_else
|   | |-ImplicitCastExpr 0x1f5e25fe4f8 <line:444:9, col:10> 'unsigned char *' <LValueToRValue>
|   | | `-UnaryOperator 0x1f5e25fe4e0 <col:9, col:10> 'unsigned char *' lvalue prefix '*' cannot overflow
|   | |   `-ImplicitCastExpr 0x1f5e25f7438 <col:10> 'unsigned char **' <LValueToRValue>
|   | |     `-DeclRefExpr 0x1f5e25f7418 <col:10> 'unsigned char **' lvalue ParmVar 0x1f5e25fc198 'out' 'unsigned char **'
|   | |-BinaryOperator 0x1f5e25fe5b0 <line:445:9, col:14> 'unsigned char *' '='
|   | | |-DeclRefExpr 0x1f5e25fe510 <col:9> 'unsigned char *' lvalue Var 0x1f5e25f6460 'p' 'unsigned char *'
|   | | `-ImplicitCastExpr 0x1f5e25fe598 <col:13, col:14> 'unsigned char *' <LValueToRValue>
|   | |   `-UnaryOperator 0x1f5e25fe580 <col:13, col:14> 'unsigned char *' lvalue prefix '*' cannot overflow
|   | |     `-ImplicitCastExpr 0x1f5e25fe568 <col:14> 'unsigned char **' <LValueToRValue>
|   | |       `-DeclRefExpr 0x1f5e25fe548 <col:14> 'unsigned char **' lvalue ParmVar 0x1f5e25fc198 'out' 'unsigned char **'
|   | `-CompoundStmt 0x1f5e25fe888 <line:446:10, line:452:5>
|   |   |-BinaryOperator 0x1f5e25fe6a0 <line:447:9, col:34> 'unsigned char *' '='
|   |   | |-DeclRefExpr 0x1f5e25fe5d0 <col:9> 'unsigned char *' lvalue Var 0x1f5e25f6460 'p' 'unsigned char *'
|   |   | `-ImplicitCastExpr 0x1f5e25fe688 <col:13, col:34> 'unsigned char *' <IntegralToPointer>
|   |   |   `-CallExpr 0x1f5e25fe648 <col:13, col:34> 'int'
|   |   |     |-ImplicitCastExpr 0x1f5e25fe630 <col:13> 'int (*)()' <FunctionToPointerDecay>
|   |   |     | `-DeclRefExpr 0x1f5e25fe5f0 <col:13> 'int ()' Function 0x1f5e25f1da0 'OPENSSL_malloc' 'int ()'
|   |   |     `-ImplicitCastExpr 0x1f5e25fe670 <col:28> 'int' <LValueToRValue>
|   |   |       `-DeclRefExpr 0x1f5e25fe610 <col:28> 'int' lvalue Var 0x1f5e25f66f0 'outlen' 'int'
|   |   |-IfStmt 0x1f5e25fe748 <line:448:9, line:449:21>
|   |   | |-OpaqueValueExpr 0x1f5e25fe730 <<invalid sloc>> '_Bool'
|   |   | `-ReturnStmt 0x1f5e25fe720 <col:13, col:21>
|   |   |   `-UnaryOperator 0x1f5e25fe708 <col:20, col:21> 'int' prefix '-'
|   |   |     `-IntegerLiteral 0x1f5e25fe6e0 <col:21> 'int' 1
|   |   |-BinaryOperator 0x1f5e25fe7e8 <line:450:9, col:16> 'unsigned char *' '='
|   |   | |-UnaryOperator 0x1f5e25fe798 <col:9, col:10> 'unsigned char *' lvalue prefix '*' cannot overflow
|   |   | | `-ImplicitCastExpr 0x1f5e25fe780 <col:10> 'unsigned char **' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x1f5e25fe760 <col:10> 'unsigned char **' lvalue ParmVar 0x1f5e25fc198 'out' 'unsigned char **'
|   |   | `-ImplicitCastExpr 0x1f5e25fe7d0 <col:16> 'unsigned char *' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x1f5e25fe7b0 <col:16> 'unsigned char *' lvalue Var 0x1f5e25f6460 'p' 'unsigned char *'
|   |   `-BinaryOperator 0x1f5e25fe868 <line:451:9, col:17> 'int' '='
|   |     |-DeclRefExpr 0x1f5e25fe808 <col:9> 'int' lvalue Var 0x1f5e25f6770 'noinc' 'int'
|   |     `-IntegerLiteral 0x1f5e25fe840 <col:17> 'int' 1
|   |-IfStmt 0x1f5e25fea78 <line:453:5, line:57:34> has_else
|   | |-ImplicitCastExpr 0x1f5e25fe900 <line:453:9> 'int' <LValueToRValue>
|   | | `-DeclRefExpr 0x1f5e25fe8e0 <col:9> 'int' lvalue ParmVar 0x1f5e25fc298 'ispub' 'int'
|   | |-BinaryOperator 0x1f5e25fe9a8 <line:454:9, line:56:34> 'unsigned char' '='
|   | | |-UnaryOperator 0x1f5e25fe950 <line:454:9, col:11> 'unsigned char' lvalue prefix '*' cannot overflow
|   | | | `-UnaryOperator 0x1f5e25fe938 <col:10, col:11> 'unsigned char *' postfix '++'
|   | | |   `-DeclRefExpr 0x1f5e25fe918 <col:10> 'unsigned char *' lvalue Var 0x1f5e25f6460 'p' 'unsigned char *'
|   | | `-ImplicitCastExpr 0x1f5e25fe990 <line:56:34> 'unsigned char' <IntegralCast>
|   | |   `-IntegerLiteral 0x1f5e25fe968 <col:34> 'int' 6
|   | `-BinaryOperator 0x1f5e25fea58 <line:456:9, line:57:34> 'unsigned char' '='
|   |   |-UnaryOperator 0x1f5e25fea00 <line:456:9, col:11> 'unsigned char' lvalue prefix '*' cannot overflow
|   |   | `-UnaryOperator 0x1f5e25fe9e8 <col:10, col:11> 'unsigned char *' postfix '++'
|   |   |   `-DeclRefExpr 0x1f5e25fe9c8 <col:10> 'unsigned char *' lvalue Var 0x1f5e25f6460 'p' 'unsigned char *'
|   |   `-ImplicitCastExpr 0x1f5e25fea40 <line:57:34> 'unsigned char' <IntegralCast>
|   |     `-IntegerLiteral 0x1f5e25fea18 <col:34> 'int' 7
|   |-BinaryOperator 0x1f5e25feb30 <line:457:5, col:12> 'unsigned char' '='
|   | |-UnaryOperator 0x1f5e25fead8 <col:5, col:7> 'unsigned char' lvalue prefix '*' cannot overflow
|   | | `-UnaryOperator 0x1f5e25feac0 <col:6, col:7> 'unsigned char *' postfix '++'
|   | |   `-DeclRefExpr 0x1f5e25feaa0 <col:6> 'unsigned char *' lvalue Var 0x1f5e25f6460 'p' 'unsigned char *'
|   | `-ImplicitCastExpr 0x1f5e25feb18 <col:12> 'unsigned char' <IntegralCast>
|   |   `-IntegerLiteral 0x1f5e25feaf0 <col:12> 'int' 2
|   |-BinaryOperator 0x1f5e25febe0 <line:458:5, col:12> 'unsigned char' '='
|   | |-UnaryOperator 0x1f5e25feb88 <col:5, col:7> 'unsigned char' lvalue prefix '*' cannot overflow
|   | | `-UnaryOperator 0x1f5e25feb70 <col:6, col:7> 'unsigned char *' postfix '++'
|   | |   `-DeclRefExpr 0x1f5e25feb50 <col:6> 'unsigned char *' lvalue Var 0x1f5e25f6460 'p' 'unsigned char *'
|   | `-ImplicitCastExpr 0x1f5e25febc8 <col:12> 'unsigned char' <IntegralCast>
|   |   `-IntegerLiteral 0x1f5e25feba0 <col:12> 'int' 0
|   |-BinaryOperator 0x1f5e25fec90 <line:459:5, col:12> 'unsigned char' '='
|   | |-UnaryOperator 0x1f5e25fec38 <col:5, col:7> 'unsigned char' lvalue prefix '*' cannot overflow
|   | | `-UnaryOperator 0x1f5e25fec20 <col:6, col:7> 'unsigned char *' postfix '++'
|   | |   `-DeclRefExpr 0x1f5e25fec00 <col:6> 'unsigned char *' lvalue Var 0x1f5e25f6460 'p' 'unsigned char *'
|   | `-ImplicitCastExpr 0x1f5e25fec78 <col:12> 'unsigned char' <IntegralCast>
|   |   `-IntegerLiteral 0x1f5e25fec50 <col:12> 'int' 0
|   |-CallExpr 0x1f5e25fed70 <line:460:5, col:29> 'void'
|   | |-ImplicitCastExpr 0x1f5e25fed58 <col:5> 'void (*)(unsigned char **, unsigned int)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1f5e25fecb0 <col:5> 'void (unsigned char **, unsigned int)' Function 0x1f5e25fd938 'write_ledword' 'void (unsigned char **, unsigned int)'
|   | |-UnaryOperator 0x1f5e25fecf0 <col:19, col:20> 'unsigned char **' prefix '&' cannot overflow
|   | | `-DeclRefExpr 0x1f5e25fecd0 <col:20> 'unsigned char *' lvalue Var 0x1f5e25f6460 'p' 'unsigned char *'
|   | `-ImplicitCastExpr 0x1f5e25feda0 <col:23> 'unsigned int' <LValueToRValue>
|   |   `-DeclRefExpr 0x1f5e25fed08 <col:23> 'unsigned int' lvalue Var 0x1f5e25f6638 'keyalg' 'unsigned int'
|   |-CallExpr 0x1f5e25fee48 <line:461:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x1f5e25fee30 <col:5> 'void (*)(unsigned char **, unsigned int)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1f5e25fedb8 <col:5> 'void (unsigned char **, unsigned int)' Function 0x1f5e25fd938 'write_ledword' 'void (unsigned char **, unsigned int)'
|   | |-UnaryOperator 0x1f5e25fedf8 <col:19, col:20> 'unsigned char **' prefix '&' cannot overflow
|   | | `-DeclRefExpr 0x1f5e25fedd8 <col:20> 'unsigned char *' lvalue Var 0x1f5e25f6460 'p' 'unsigned char *'
|   | `-ImplicitCastExpr 0x1f5e25fee78 <col:23> 'unsigned int' <LValueToRValue>
|   |   `-DeclRefExpr 0x1f5e25fee10 <col:23> 'unsigned int' lvalue Var 0x1f5e25f6578 'magic' 'unsigned int'
|   |-CallExpr 0x1f5e25fef20 <line:462:5, col:29> 'void'
|   | |-ImplicitCastExpr 0x1f5e25fef08 <col:5> 'void (*)(unsigned char **, unsigned int)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1f5e25fee90 <col:5> 'void (unsigned char **, unsigned int)' Function 0x1f5e25fd938 'write_ledword' 'void (unsigned char **, unsigned int)'
|   | |-UnaryOperator 0x1f5e25feed0 <col:19, col:20> 'unsigned char **' prefix '&' cannot overflow
|   | | `-DeclRefExpr 0x1f5e25feeb0 <col:20> 'unsigned char *' lvalue Var 0x1f5e25f6460 'p' 'unsigned char *'
|   | `-ImplicitCastExpr 0x1f5e25fef50 <col:23> 'unsigned int' <LValueToRValue>
|   |   `-DeclRefExpr 0x1f5e25feee8 <col:23> 'unsigned int' lvalue Var 0x1f5e25f64f8 'bitlen' 'unsigned int'
|   |-IfStmt 0x1f5e25ff1f8 <line:467:5, line:468:17>
|   | |-UnaryOperator 0x1f5e25ff128 <line:467:9, col:10> 'int' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x1f5e25ff110 <col:10> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x1f5e25ff0f0 <col:10> 'int' lvalue Var 0x1f5e25f6770 'noinc' 'int'
|   | `-CompoundAssignOperator 0x1f5e25ff1c8 <line:468:9, col:17> 'unsigned char *' '+=' ComputeLHSTy='unsigned char *' ComputeResultTy='unsigned char *'
|   |   |-UnaryOperator 0x1f5e25ff178 <col:9, col:10> 'unsigned char *' lvalue prefix '*' cannot overflow
|   |   | `-ImplicitCastExpr 0x1f5e25ff160 <col:10> 'unsigned char **' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x1f5e25ff140 <col:10> 'unsigned char **' lvalue ParmVar 0x1f5e25fc198 'out' 'unsigned char **'
|   |   `-ImplicitCastExpr 0x1f5e25ff1b0 <col:17> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x1f5e25ff190 <col:17> 'int' lvalue Var 0x1f5e25f66f0 'outlen' 'int'
|   `-ReturnStmt 0x1f5e25ff248 <line:469:5, col:12>
|     `-ImplicitCastExpr 0x1f5e25ff230 <col:12> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x1f5e25ff210 <col:12> 'int' lvalue Var 0x1f5e25f66f0 'outlen' 'int'
|-FunctionDecl 0x1f5e25f74b0 <line:472:1, line:484:1> line:472:12 invalid do_i2b_bio 'int (int *, int *, int)' static
| |-ParmVarDecl 0x1f5e25ff310 <col:23, col:28> col:28 invalid out 'int *'
| |-ParmVarDecl 0x1f5e25ff390 <col:33, col:43> col:43 invalid pk 'int *'
| |-ParmVarDecl 0x1f5e25ff410 <col:47, col:51> col:51 used ispub 'int'
| `-CompoundStmt 0x1f5e25f7c50 <line:473:1, line:484:1>
|   |-DeclStmt 0x1f5e25f7600 <line:474:5, col:30>
|   | `-VarDecl 0x1f5e25f7598 <col:5, col:20> col:20 used tmp 'unsigned char *'
|   |-DeclStmt 0x1f5e25f7730 <line:475:5, col:22>
|   | |-VarDecl 0x1f5e25f7630 <col:5, col:9> col:9 used outlen 'int'
|   | `-VarDecl 0x1f5e25f76b0 <col:5, col:17> col:17 used wrlen 'int'
|   |-IfStmt 0x1f5e25f78d8 <line:477:5, line:478:17>
|   | |-BinaryOperator 0x1f5e25f7868 <line:477:9, col:18> 'int' '<'
|   | | |-ImplicitCastExpr 0x1f5e25f7850 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1f5e25f7808 <col:9> 'int' lvalue Var 0x1f5e25f7630 'outlen' 'int'
|   | | `-IntegerLiteral 0x1f5e25f7828 <col:18> 'int' 0
|   | `-ReturnStmt 0x1f5e25f78c8 <line:478:9, col:17>
|   |   `-UnaryOperator 0x1f5e25f78b0 <col:16, col:17> 'int' prefix '-'
|   |     `-IntegerLiteral 0x1f5e25f7888 <col:17> 'int' 1
|   |-CallExpr 0x1f5e25f7ad0 <line:480:5, col:21> 'int'
|   | |-ImplicitCastExpr 0x1f5e25f7ab8 <col:5> 'int (*)()' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1f5e25f7a78 <col:5> 'int ()' Function 0x1f5e25f3430 'OPENSSL_free' 'int ()'
|   | `-ImplicitCastExpr 0x1f5e25f7af8 <col:18> 'unsigned char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x1f5e25f7a98 <col:18> 'unsigned char *' lvalue Var 0x1f5e25f7598 'tmp' 'unsigned char *'
|   |-IfStmt 0x1f5e25f7be8 <line:481:5, line:482:16>
|   | |-BinaryOperator 0x1f5e25f7b80 <line:481:9, col:18> 'int' '=='
|   | | |-ImplicitCastExpr 0x1f5e25f7b50 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1f5e25f7b10 <col:9> 'int' lvalue Var 0x1f5e25f76b0 'wrlen' 'int'
|   | | `-ImplicitCastExpr 0x1f5e25f7b68 <col:18> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x1f5e25f7b30 <col:18> 'int' lvalue Var 0x1f5e25f7630 'outlen' 'int'
|   | `-ReturnStmt 0x1f5e25f7bd8 <line:482:9, col:16>
|   |   `-ImplicitCastExpr 0x1f5e25f7bc0 <col:16> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x1f5e25f7ba0 <col:16> 'int' lvalue Var 0x1f5e25f7630 'outlen' 'int'
|   `-ReturnStmt 0x1f5e25f7c40 <line:483:5, col:13>
|     `-UnaryOperator 0x1f5e25f7c28 <col:12, col:13> 'int' prefix '-'
|       `-IntegerLiteral 0x1f5e25f7c00 <col:13> 'int' 1
|-FunctionDecl 0x1f5e25f7e50 <line:486:1, line:512:1> line:486:12 invalid check_bitlen_dsa 'int (int *, int, unsigned int *)' static
| |-ParmVarDecl 0x1f5e25f7ca8 <col:29, col:34> col:34 invalid dsa 'int *'
| |-ParmVarDecl 0x1f5e25f7d28 <col:39, col:43> col:43 used ispub 'int'
| |-ParmVarDecl 0x1f5e25f7da8 <col:50, col:64> col:64 used pmagic 'unsigned int *'
| `-CompoundStmt 0x1f5e25ffa98 <line:487:1, line:512:1>
|   |-DeclStmt 0x1f5e25f7fa0 <line:488:5, col:15>
|   | `-VarDecl 0x1f5e25f7f38 <col:5, col:9> col:9 used bitlen 'int'
|   |-DeclStmt 0x1f5e25f8038 <line:489:5, col:32>
|   | `-VarDecl 0x1f5e25f7fd0 <col:5, col:19> col:19 invalid p 'const int *'
|   |-DeclStmt 0x1f5e25f80d0 <line:490:5, col:45>
|   | `-VarDecl 0x1f5e25f8068 <col:5, col:19> col:19 invalid pub_key 'const int *'
|   |-IfStmt 0x1f5e25ff678 <line:495:5, line:497:14>
|   | |-OpaqueValueExpr 0x1f5e25ff660 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x1f5e25ff648 <col:9, col:14> 'badkey' 0x1f5e25ff5f8
|   |-IfStmt 0x1f5e25ff9b0 <line:498:5, line:506:5> has_else
|   | |-ImplicitCastExpr 0x1f5e25ff6c8 <line:498:9> 'int' <LValueToRValue>
|   | | `-DeclRefExpr 0x1f5e25ff690 <col:9> 'int' lvalue ParmVar 0x1f5e25f7d28 'ispub' 'int'
|   | |-CompoundStmt 0x1f5e25ff830 <col:16, line:502:5>
|   | | |-IfStmt 0x1f5e25ff750 <line:499:9, line:500:18>
|   | | | |-OpaqueValueExpr 0x1f5e25ff738 <<invalid sloc>> '_Bool'
|   | | | `-GotoStmt 0x1f5e25ff720 <col:13, col:18> 'badkey' 0x1f5e25ff5f8
|   | | `-BinaryOperator 0x1f5e25ff810 <line:501:9, line:60:34> 'unsigned int' '='
|   | |   |-UnaryOperator 0x1f5e25ff7b8 <line:501:9, col:10> 'unsigned int' lvalue prefix '*' cannot overflow
|   | |   | `-ImplicitCastExpr 0x1f5e25ff7a0 <col:10> 'unsigned int *' <LValueToRValue>
|   | |   |   `-DeclRefExpr 0x1f5e25ff768 <col:10> 'unsigned int *' lvalue ParmVar 0x1f5e25f7da8 'pmagic' 'unsigned int *'
|   | |   `-ImplicitCastExpr 0x1f5e25ff7f8 <line:60:34> 'unsigned int' <IntegralCast>
|   | |     `-IntegerLiteral 0x1f5e25ff7d0 <col:34> 'long' 827544388
|   | `-CompoundStmt 0x1f5e25ff990 <line:502:12, line:506:5>
|   |   |-IfStmt 0x1f5e25ff8c8 <line:503:9, line:504:18>
|   |   | |-OpaqueValueExpr 0x1f5e25ff8b0 <<invalid sloc>> '_Bool'
|   |   | `-GotoStmt 0x1f5e25ff898 <col:13, col:18> 'badkey' 0x1f5e25ff5f8
|   |   `-BinaryOperator 0x1f5e25ff970 <line:505:9, line:61:34> 'unsigned int' '='
|   |     |-UnaryOperator 0x1f5e25ff918 <line:505:9, col:10> 'unsigned int' lvalue prefix '*' cannot overflow
|   |     | `-ImplicitCastExpr 0x1f5e25ff900 <col:10> 'unsigned int *' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x1f5e25ff8e0 <col:10> 'unsigned int *' lvalue ParmVar 0x1f5e25f7da8 'pmagic' 'unsigned int *'
|   |     `-ImplicitCastExpr 0x1f5e25ff958 <line:61:34> 'unsigned int' <IntegralCast>
|   |       `-IntegerLiteral 0x1f5e25ff930 <col:34> 'long' 844321604
|   |-ReturnStmt 0x1f5e25ffa10 <line:508:5, col:12>
|   | `-ImplicitCastExpr 0x1f5e25ff9f8 <col:12> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x1f5e25ff9d8 <col:12> 'int' lvalue Var 0x1f5e25f7f38 'bitlen' 'int'
|   |-LabelStmt 0x1f5e25ffa48 <line:509:2, col:8> 'badkey'
|   | `-NullStmt 0x1f5e25ffa40 <col:8>
|   `-ReturnStmt 0x1f5e25ffa88 <line:511:5, col:12>
|     `-IntegerLiteral 0x1f5e25ffa60 <col:12> 'int' 0
|-FunctionDecl 0x1f5e25ffca8 <line:514:1, line:552:1> line:514:12 invalid check_bitlen_rsa 'int (int *, int, unsigned int *)' static
| |-ParmVarDecl 0x1f5e25ffb00 <col:29, col:34> col:34 invalid rsa 'int *'
| |-ParmVarDecl 0x1f5e25ffb80 <col:39, col:43> col:43 used ispub 'int'
| |-ParmVarDecl 0x1f5e25ffc00 <col:50, col:64> col:64 used pmagic 'unsigned int *'
| `-CompoundStmt 0x1f5e25f8e48 <line:515:1, line:552:1>
|   |-DeclStmt 0x1f5e25fff18 <line:516:5, col:30>
|   | |-VarDecl 0x1f5e25ffd90 <col:5, col:9> col:9 used nbyte 'int'
|   | |-VarDecl 0x1f5e25ffe10 <col:5, col:16> col:16 used hnbyte 'int'
|   | `-VarDecl 0x1f5e25ffe90 <col:5, col:24> col:24 used bitlen 'int'
|   |-DeclStmt 0x1f5e25fffb0 <line:517:5, col:20>
|   | `-VarDecl 0x1f5e25fff48 <col:5, col:19> col:19 invalid e 'const int *'
|   |-IfStmt 0x1f5e26001a0 <line:520:5, line:521:14>
|   | |-OpaqueValueExpr 0x1f5e2600188 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x1f5e2600170 <col:9, col:14> 'badkey' 0x1f5e2600120
|   |-BinaryOperator 0x1f5e25f8508 <line:524:5, col:31> 'int' '='
|   | |-DeclRefExpr 0x1f5e2600448 <col:5> 'int' lvalue Var 0x1f5e25ffe10 'hnbyte' 'int'
|   | `-BinaryOperator 0x1f5e25f84e8 <col:14, col:31> 'int' '>>'
|   |   |-ParenExpr 0x1f5e25f84a0 <col:14, col:26> 'int'
|   |   | `-BinaryOperator 0x1f5e25f8480 <col:15, col:24> 'int' '+'
|   |   |   |-ImplicitCastExpr 0x1f5e26004c8 <col:15> 'int' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x1f5e2600480 <col:15> 'int' lvalue Var 0x1f5e25ffe90 'bitlen' 'int'
|   |   |   `-IntegerLiteral 0x1f5e26004a0 <col:24> 'int' 15
|   |   `-IntegerLiteral 0x1f5e25f84c0 <col:31> 'int' 4
|   |-IfStmt 0x1f5e25f8d60 <line:525:5, line:547:5> has_else
|   | |-ImplicitCastExpr 0x1f5e25f8560 <line:525:9> 'int' <LValueToRValue>
|   | | `-DeclRefExpr 0x1f5e25f8528 <col:9> 'int' lvalue ParmVar 0x1f5e25ffb80 'ispub' 'int'
|   | |-CompoundStmt 0x1f5e25f8688 <col:16, line:528:5>
|   | | |-BinaryOperator 0x1f5e25f8620 <line:526:9, line:58:34> 'unsigned int' '='
|   | | | |-UnaryOperator 0x1f5e25f85c8 <line:526:9, col:10> 'unsigned int' lvalue prefix '*' cannot overflow
|   | | | | `-ImplicitCastExpr 0x1f5e25f85b0 <col:10> 'unsigned int *' <LValueToRValue>
|   | | | |   `-DeclRefExpr 0x1f5e25f8578 <col:10> 'unsigned int *' lvalue ParmVar 0x1f5e25ffc00 'pmagic' 'unsigned int *'
|   | | | `-ImplicitCastExpr 0x1f5e25f8608 <line:58:34> 'unsigned int' <IntegralCast>
|   | | |   `-IntegerLiteral 0x1f5e25f85e0 <col:34> 'long' 826364754
|   | | `-ReturnStmt 0x1f5e25f8678 <line:527:9, col:16>
|   | |   `-ImplicitCastExpr 0x1f5e25f8660 <col:16> 'int' <LValueToRValue>
|   | |     `-DeclRefExpr 0x1f5e25f8640 <col:16> 'int' lvalue Var 0x1f5e25ffe90 'bitlen' 'int'
|   | `-CompoundStmt 0x1f5e25f8d30 <line:528:12, line:547:5>
|   |   |-DeclStmt 0x1f5e25f8728 <line:529:9, col:53>
|   |   | `-VarDecl 0x1f5e25f86c0 <col:9, col:23> col:23 invalid d 'const int *'
|   |   |-BinaryOperator 0x1f5e25f87d0 <line:531:9, line:59:34> 'unsigned int' '='
|   |   | |-UnaryOperator 0x1f5e25f8778 <line:531:9, col:10> 'unsigned int' lvalue prefix '*' cannot overflow
|   |   | | `-ImplicitCastExpr 0x1f5e25f8760 <col:10> 'unsigned int *' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x1f5e25f8740 <col:10> 'unsigned int *' lvalue ParmVar 0x1f5e25ffc00 'pmagic' 'unsigned int *'
|   |   | `-ImplicitCastExpr 0x1f5e25f87b8 <line:59:34> 'unsigned int' <IntegralCast>
|   |   |   `-IntegerLiteral 0x1f5e25f8790 <col:34> 'long' 843141970
|   |   |-IfStmt 0x1f5e25f8970 <line:537:9, line:538:18>
|   |   | |-OpaqueValueExpr 0x1f5e25f8958 <<invalid sloc>> '_Bool'
|   |   | `-GotoStmt 0x1f5e25f8940 <col:13, col:18> 'badkey' 0x1f5e2600120
|   |   `-IfStmt 0x1f5e25f8d18 <line:541:9, line:546:18>
|   |     |-OpaqueValueExpr 0x1f5e25f8d00 <<invalid sloc>> '_Bool'
|   |     `-GotoStmt 0x1f5e25f8ce8 <col:13, col:18> 'badkey' 0x1f5e2600120
|   |-ReturnStmt 0x1f5e25f8dc0 <line:548:5, col:12>
|   | `-ImplicitCastExpr 0x1f5e25f8da8 <col:12> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x1f5e25f8d88 <col:12> 'int' lvalue Var 0x1f5e25ffe90 'bitlen' 'int'
|   |-LabelStmt 0x1f5e25f8df8 <line:549:2, col:8> 'badkey'
|   | `-NullStmt 0x1f5e25f8df0 <col:8>
|   `-ReturnStmt 0x1f5e25f8e38 <line:551:5, col:12>
|     `-IntegerLiteral 0x1f5e25f8e10 <col:12> 'int' 0
|-FunctionDecl 0x1f5e25f9058 <line:554:1, line:574:1> line:554:13 invalid write_rsa 'void (unsigned char **, int *, int)' static
| |-ParmVarDecl 0x1f5e25f8eb8 <col:23, col:39> col:39 used out 'unsigned char **'
| |-ParmVarDecl 0x1f5e25f8f38 <col:44, col:49> col:49 invalid rsa 'int *'
| |-ParmVarDecl 0x1f5e25f8fb8 <col:54, col:58> col:58 used ispub 'int'
| `-CompoundStmt 0x1f5e2600778 <line:555:1, line:574:1>
|   |-DeclStmt 0x1f5e25f9240 <line:556:5, col:22>
|   | |-VarDecl 0x1f5e25f9140 <col:5, col:9> col:9 used nbyte 'int'
|   | `-VarDecl 0x1f5e25f91c0 <col:5, col:16> col:16 used hnbyte 'int'
|   |-DeclStmt 0x1f5e25f92d8 <line:557:5, col:57>
|   | `-VarDecl 0x1f5e25f9270 <col:5, col:19> col:19 invalid n 'const int *'
|   `-IfStmt 0x1f5e26005a0 <line:564:5, line:565:9>
|     |-ImplicitCastExpr 0x1f5e2600578 <line:564:9> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x1f5e2600540 <col:9> 'int' lvalue ParmVar 0x1f5e25f8fb8 'ispub' 'int'
|     `-ReturnStmt 0x1f5e2600590 <line:565:9>
|-FunctionDecl 0x1f5e2600960 <line:576:1, line:596:1> line:576:13 invalid write_dsa 'void (unsigned char **, int *, int)' static
| |-ParmVarDecl 0x1f5e26007c0 <col:23, col:39> col:39 used out 'unsigned char **'
| |-ParmVarDecl 0x1f5e2600840 <col:44, col:49> col:49 invalid dsa 'int *'
| |-ParmVarDecl 0x1f5e26008c0 <col:54, col:58> col:58 used ispub 'int'
| `-CompoundStmt 0x1f5e26012e8 <line:577:1, line:596:1>
|   |-DeclStmt 0x1f5e2600ab0 <line:578:5, col:14>
|   | `-VarDecl 0x1f5e2600a48 <col:5, col:9> col:9 used nbyte 'int'
|   |-DeclStmt 0x1f5e2600b48 <line:579:5, col:32>
|   | `-VarDecl 0x1f5e2600ae0 <col:5, col:19> col:19 invalid p 'const int *'
|   |-DeclStmt 0x1f5e2600be0 <line:580:5, col:45>
|   | `-VarDecl 0x1f5e2600b78 <col:5, col:19> col:19 invalid pub_key 'const int *'
|   |-CallExpr 0x1f5e26011b0 <line:593:5, col:26> 'void *'
|   | |-ImplicitCastExpr 0x1f5e2601198 <col:5> 'void *(*)(void *, int, unsigned long long)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1f5e2601080 <col:5> 'void *(void *, int, unsigned long long)' Function 0x1f5e2600e90 'memset' 'void *(void *, int, unsigned long long)'
|   | |-ImplicitCastExpr 0x1f5e2601200 <col:12, col:13> 'void *' <BitCast>
|   | | `-ImplicitCastExpr 0x1f5e26011e8 <col:12, col:13> 'unsigned char *' <LValueToRValue>
|   | |   `-UnaryOperator 0x1f5e26010f0 <col:12, col:13> 'unsigned char *' lvalue prefix '*' cannot overflow
|   | |     `-ImplicitCastExpr 0x1f5e26010d8 <col:13> 'unsigned char **' <LValueToRValue>
|   | |       `-DeclRefExpr 0x1f5e26010b8 <col:13> 'unsigned char **' lvalue ParmVar 0x1f5e26007c0 'out' 'unsigned char **'
|   | |-IntegerLiteral 0x1f5e2601108 <col:18> 'int' 255
|   | `-ImplicitCastExpr 0x1f5e2601218 <col:24> 'unsigned long long' <IntegralCast>
|   |   `-IntegerLiteral 0x1f5e2601130 <col:24> 'int' 24
|   |-CompoundAssignOperator 0x1f5e26012a8 <line:594:5, col:13> 'unsigned char *' '+=' ComputeLHSTy='unsigned char *' ComputeResultTy='unsigned char *'
|   | |-UnaryOperator 0x1f5e2601268 <col:5, col:6> 'unsigned char *' lvalue prefix '*' cannot overflow
|   | | `-ImplicitCastExpr 0x1f5e2601250 <col:6> 'unsigned char **' <LValueToRValue>
|   | |   `-DeclRefExpr 0x1f5e2601230 <col:6> 'unsigned char **' lvalue ParmVar 0x1f5e26007c0 'out' 'unsigned char **'
|   | `-IntegerLiteral 0x1f5e2601280 <col:13> 'int' 24
|   `-ReturnStmt 0x1f5e26012d8 <line:595:5>
|-FunctionDecl 0x1f5e2600e90 <line:593:5> col:5 implicit used memset 'void *(void *, int, unsigned long long)' extern
| |-ParmVarDecl 0x1f5e2600f30 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x1f5e2600f98 <<invalid sloc>> <invalid sloc> 'int'
| `-ParmVarDecl 0x1f5e2601000 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x1f5e2608580 <line:598:1, line:601:1> line:598:5 invalid i2b_PrivateKey_bio 'int (int *, int *)'
| |-ParmVarDecl 0x1f5e2601340 <col:24, col:29> col:29 invalid out 'int *'
| |-ParmVarDecl 0x1f5e26013c0 <col:34, col:44> col:44 invalid pk 'int *'
| `-CompoundStmt 0x1f5e2608670 <line:599:1, line:601:1>
|-FunctionDecl 0x1f5e26087b8 <line:603:1, line:606:1> line:603:5 invalid i2b_PublicKey_bio 'int (int *, int *)'
| |-ParmVarDecl 0x1f5e2608698 <col:23, col:28> col:28 invalid out 'int *'
| |-ParmVarDecl 0x1f5e2608718 <col:33, col:43> col:43 invalid pk 'int *'
| `-CompoundStmt 0x1f5e26088a8 <line:604:1, line:606:1>
|-FunctionDecl 0x1f5e2608c60 <line:610:1, line:651:1> line:610:12 used do_PVK_header 'int (const unsigned char **, unsigned int, int, unsigned int *, unsigned int *)' static
| |-ParmVarDecl 0x1f5e26088d8 <col:26, col:48> col:48 used in 'const unsigned char **'
| |-ParmVarDecl 0x1f5e2608958 <col:52, col:65> col:65 used length 'unsigned int'
| |-ParmVarDecl 0x1f5e26089d8 <line:611:26, col:30> col:30 used skip_magic 'int'
| |-ParmVarDecl 0x1f5e2608a58 <line:612:26, col:40> col:40 used psaltlen 'unsigned int *'
| |-ParmVarDecl 0x1f5e2608ad8 <col:50, col:64> col:64 used pkeylen 'unsigned int *'
| `-CompoundStmt 0x1f5e2601ca0 <line:613:1, line:651:1>
|   |-DeclStmt 0x1f5e2608e28 <line:614:5, col:33>
|   | `-VarDecl 0x1f5e2608d58 <col:5, col:31> col:26 used p 'const unsigned char *' cinit
|   |   `-ImplicitCastExpr 0x1f5e2608e10 <col:30, col:31> 'const unsigned char *' <LValueToRValue>
|   |     `-UnaryOperator 0x1f5e2608df8 <col:30, col:31> 'const unsigned char *' lvalue prefix '*' cannot overflow
|   |       `-ImplicitCastExpr 0x1f5e2608de0 <col:31> 'const unsigned char **' <LValueToRValue>
|   |         `-DeclRefExpr 0x1f5e2608dc0 <col:31> 'const unsigned char **' lvalue ParmVar 0x1f5e26088d8 'in' 'const unsigned char **'
|   |-DeclStmt 0x1f5e2608f58 <line:615:5, col:41>
|   | |-VarDecl 0x1f5e2608e58 <col:5, col:18> col:18 used pvk_magic 'unsigned int'
|   | `-VarDecl 0x1f5e2608ed8 <col:5, col:29> col:29 used is_encrypted 'unsigned int'
|   |-IfStmt 0x1f5e2609450 <line:616:5, line:631:5> has_else
|   | |-ImplicitCastExpr 0x1f5e2608f90 <line:616:9> 'int' <LValueToRValue>
|   | | `-DeclRefExpr 0x1f5e2608f70 <col:9> 'int' lvalue ParmVar 0x1f5e26089d8 'skip_magic' 'int'
|   | |-CompoundStmt 0x1f5e26090c8 <col:21, line:621:5>
|   | | `-IfStmt 0x1f5e26090b0 <line:617:9, line:620:9>
|   | |   |-BinaryOperator 0x1f5e2609020 <line:617:13, col:22> 'int' '<'
|   | |   | |-ImplicitCastExpr 0x1f5e2608ff0 <col:13> 'unsigned int' <LValueToRValue>
|   | |   | | `-DeclRefExpr 0x1f5e2608fa8 <col:13> 'unsigned int' lvalue ParmVar 0x1f5e2608958 'length' 'unsigned int'
|   | |   | `-ImplicitCastExpr 0x1f5e2609008 <col:22> 'unsigned int' <IntegralCast>
|   | |   |   `-IntegerLiteral 0x1f5e2608fc8 <col:22> 'int' 20
|   | |   `-CompoundStmt 0x1f5e2609098 <col:26, line:620:9>
|   | |     `-ReturnStmt 0x1f5e2609088 <line:619:13, col:20>
|   | |       `-IntegerLiteral 0x1f5e2609060 <col:20> 'int' 0
|   | `-CompoundStmt 0x1f5e2609428 <line:621:12, line:631:5>
|   |   |-IfStmt 0x1f5e26091e8 <line:622:9, line:625:9>
|   |   | |-BinaryOperator 0x1f5e2609158 <line:622:13, col:22> 'int' '<'
|   |   | | |-ImplicitCastExpr 0x1f5e2609128 <col:13> 'unsigned int' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x1f5e26090e0 <col:13> 'unsigned int' lvalue ParmVar 0x1f5e2608958 'length' 'unsigned int'
|   |   | | `-ImplicitCastExpr 0x1f5e2609140 <col:22> 'unsigned int' <IntegralCast>
|   |   | |   `-IntegerLiteral 0x1f5e2609100 <col:22> 'int' 24
|   |   | `-CompoundStmt 0x1f5e26091d0 <col:26, line:625:9>
|   |   |   `-ReturnStmt 0x1f5e26091c0 <line:624:13, col:20>
|   |   |     `-IntegerLiteral 0x1f5e2609198 <col:20> 'int' 0
|   |   |-BinaryOperator 0x1f5e26092e8 <line:626:9, col:36> 'unsigned int' '='
|   |   | |-DeclRefExpr 0x1f5e2609200 <col:9> 'unsigned int' lvalue Var 0x1f5e2608e58 'pvk_magic' 'unsigned int'
|   |   | `-CallExpr 0x1f5e26092c0 <col:21, col:36> 'unsigned int'
|   |   |   |-ImplicitCastExpr 0x1f5e26092a8 <col:21> 'unsigned int (*)(const unsigned char **)' <FunctionToPointerDecay>
|   |   |   | `-DeclRefExpr 0x1f5e2609238 <col:21> 'unsigned int (const unsigned char **)' Function 0x1f5e25e8b70 'read_ledword' 'unsigned int (const unsigned char **)'
|   |   |   `-UnaryOperator 0x1f5e2609290 <col:34, col:35> 'const unsigned char **' prefix '&' cannot overflow
|   |   |     `-DeclRefExpr 0x1f5e2609258 <col:35> 'const unsigned char *' lvalue Var 0x1f5e2608d58 'p' 'const unsigned char *'
|   |   `-IfStmt 0x1f5e2609410 <line:627:9, line:630:9>
|   |     |-BinaryOperator 0x1f5e2609380 <line:627:13, line:73:34> 'int' '!='
|   |     | |-ImplicitCastExpr 0x1f5e2609368 <line:627:13> 'unsigned long' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x1f5e2609350 <col:13> 'unsigned int' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x1f5e2609308 <col:13> 'unsigned int' lvalue Var 0x1f5e2608e58 'pvk_magic' 'unsigned int'
|   |     | `-IntegerLiteral 0x1f5e2609328 <line:73:34> 'unsigned long' 2964713758
|   |     `-CompoundStmt 0x1f5e26093f8 <line:627:39, line:630:9>
|   |       `-ReturnStmt 0x1f5e26093e8 <line:629:13, col:20>
|   |         `-IntegerLiteral 0x1f5e26093c0 <col:20> 'int' 0
|   |-CompoundAssignOperator 0x1f5e26094c0 <line:633:5, col:10> 'const unsigned char *' '+=' ComputeLHSTy='const unsigned char *' ComputeResultTy='const unsigned char *'
|   | |-DeclRefExpr 0x1f5e2609478 <col:5> 'const unsigned char *' lvalue Var 0x1f5e2608d58 'p' 'const unsigned char *'
|   | `-IntegerLiteral 0x1f5e2609498 <col:10> 'int' 4
|   |-CallExpr 0x1f5e2601510 <line:636:9, col:24> 'unsigned int'
|   | |-ImplicitCastExpr 0x1f5e2609548 <col:9> 'unsigned int (*)(const unsigned char **)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1f5e26094f0 <col:9> 'unsigned int (const unsigned char **)' Function 0x1f5e25e8b70 'read_ledword' 'unsigned int (const unsigned char **)'
|   | `-UnaryOperator 0x1f5e2609530 <col:22, col:23> 'const unsigned char **' prefix '&' cannot overflow
|   |   `-DeclRefExpr 0x1f5e2609510 <col:23> 'const unsigned char *' lvalue Var 0x1f5e2608d58 'p' 'const unsigned char *'
|   |-BinaryOperator 0x1f5e2601608 <line:637:5, col:35> 'unsigned int' '='
|   | |-DeclRefExpr 0x1f5e2601538 <col:5> 'unsigned int' lvalue Var 0x1f5e2608ed8 'is_encrypted' 'unsigned int'
|   | `-CallExpr 0x1f5e26015e0 <col:20, col:35> 'unsigned int'
|   |   |-ImplicitCastExpr 0x1f5e26015c8 <col:20> 'unsigned int (*)(const unsigned char **)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x1f5e2601570 <col:20> 'unsigned int (const unsigned char **)' Function 0x1f5e25e8b70 'read_ledword' 'unsigned int (const unsigned char **)'
|   |   `-UnaryOperator 0x1f5e26015b0 <col:33, col:34> 'const unsigned char **' prefix '&' cannot overflow
|   |     `-DeclRefExpr 0x1f5e2601590 <col:34> 'const unsigned char *' lvalue Var 0x1f5e2608d58 'p' 'const unsigned char *'
|   |-BinaryOperator 0x1f5e2601710 <line:638:5, col:32> 'unsigned int' '='
|   | |-UnaryOperator 0x1f5e2601660 <col:5, col:6> 'unsigned int' lvalue prefix '*' cannot overflow
|   | | `-ImplicitCastExpr 0x1f5e2601648 <col:6> 'unsigned int *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x1f5e2601628 <col:6> 'unsigned int *' lvalue ParmVar 0x1f5e2608a58 'psaltlen' 'unsigned int *'
|   | `-CallExpr 0x1f5e26016e8 <col:17, col:32> 'unsigned int'
|   |   |-ImplicitCastExpr 0x1f5e26016d0 <col:17> 'unsigned int (*)(const unsigned char **)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x1f5e2601678 <col:17> 'unsigned int (const unsigned char **)' Function 0x1f5e25e8b70 'read_ledword' 'unsigned int (const unsigned char **)'
|   |   `-UnaryOperator 0x1f5e26016b8 <col:30, col:31> 'const unsigned char **' prefix '&' cannot overflow
|   |     `-DeclRefExpr 0x1f5e2601698 <col:31> 'const unsigned char *' lvalue Var 0x1f5e2608d58 'p' 'const unsigned char *'
|   |-BinaryOperator 0x1f5e2601818 <line:639:5, col:31> 'unsigned int' '='
|   | |-UnaryOperator 0x1f5e2601768 <col:5, col:6> 'unsigned int' lvalue prefix '*' cannot overflow
|   | | `-ImplicitCastExpr 0x1f5e2601750 <col:6> 'unsigned int *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x1f5e2601730 <col:6> 'unsigned int *' lvalue ParmVar 0x1f5e2608ad8 'pkeylen' 'unsigned int *'
|   | `-CallExpr 0x1f5e26017f0 <col:16, col:31> 'unsigned int'
|   |   |-ImplicitCastExpr 0x1f5e26017d8 <col:16> 'unsigned int (*)(const unsigned char **)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x1f5e2601780 <col:16> 'unsigned int (const unsigned char **)' Function 0x1f5e25e8b70 'read_ledword' 'unsigned int (const unsigned char **)'
|   |   `-UnaryOperator 0x1f5e26017c0 <col:29, col:30> 'const unsigned char **' prefix '&' cannot overflow
|   |     `-DeclRefExpr 0x1f5e26017a0 <col:30> 'const unsigned char *' lvalue Var 0x1f5e2608d58 'p' 'const unsigned char *'
|   |-IfStmt 0x1f5e2601a48 <line:641:5, line:642:16>
|   | |-BinaryOperator 0x1f5e26019f0 <line:641:9, line:79:34> 'int' '||'
|   | | |-BinaryOperator 0x1f5e26018e0 <line:641:9, line:77:34> 'int' '>'
|   | | | |-ImplicitCastExpr 0x1f5e26018b0 <line:641:9, col:10> 'unsigned int' <LValueToRValue>
|   | | | | `-UnaryOperator 0x1f5e2601870 <col:9, col:10> 'unsigned int' lvalue prefix '*' cannot overflow
|   | | | |   `-ImplicitCastExpr 0x1f5e2601858 <col:10> 'unsigned int *' <LValueToRValue>
|   | | | |     `-DeclRefExpr 0x1f5e2601838 <col:10> 'unsigned int *' lvalue ParmVar 0x1f5e2608ad8 'pkeylen' 'unsigned int *'
|   | | | `-ImplicitCastExpr 0x1f5e26018c8 <line:77:34> 'unsigned int' <IntegralCast>
|   | | |   `-IntegerLiteral 0x1f5e2601888 <col:34> 'int' 102400
|   | | `-BinaryOperator 0x1f5e26019d0 <line:641:38, line:79:34> 'int' '>'
|   | |   |-ImplicitCastExpr 0x1f5e26019a0 <line:641:38, col:39> 'unsigned int' <LValueToRValue>
|   | |   | `-UnaryOperator 0x1f5e2601960 <col:38, col:39> 'unsigned int' lvalue prefix '*' cannot overflow
|   | |   |   `-ImplicitCastExpr 0x1f5e2601948 <col:39> 'unsigned int *' <LValueToRValue>
|   | |   |     `-DeclRefExpr 0x1f5e2601928 <col:39> 'unsigned int *' lvalue ParmVar 0x1f5e2608a58 'psaltlen' 'unsigned int *'
|   | |   `-ImplicitCastExpr 0x1f5e26019b8 <line:79:34> 'unsigned int' <IntegralCast>
|   | |     `-IntegerLiteral 0x1f5e2601978 <col:34> 'int' 10240
|   | `-ReturnStmt 0x1f5e2601a38 <line:642:9, col:16>
|   |   `-IntegerLiteral 0x1f5e2601a10 <col:16> 'int' 0
|   |-IfStmt 0x1f5e2601ba8 <line:644:5, line:647:5>
|   | |-BinaryOperator 0x1f5e2601b18 <line:644:9, col:27> 'int' '&&'
|   | | |-ImplicitCastExpr 0x1f5e2601b00 <col:9> 'unsigned int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1f5e2601a60 <col:9> 'unsigned int' lvalue Var 0x1f5e2608ed8 'is_encrypted' 'unsigned int'
|   | | `-UnaryOperator 0x1f5e2601ae8 <col:25, col:27> 'int' prefix '!' cannot overflow
|   | |   `-ImplicitCastExpr 0x1f5e2601ad0 <col:26, col:27> 'unsigned int' <LValueToRValue>
|   | |     `-UnaryOperator 0x1f5e2601ab8 <col:26, col:27> 'unsigned int' lvalue prefix '*' cannot overflow
|   | |       `-ImplicitCastExpr 0x1f5e2601aa0 <col:27> 'unsigned int *' <LValueToRValue>
|   | |         `-DeclRefExpr 0x1f5e2601a80 <col:27> 'unsigned int *' lvalue ParmVar 0x1f5e2608a58 'psaltlen' 'unsigned int *'
|   | `-CompoundStmt 0x1f5e2601b90 <col:37, line:647:5>
|   |   `-ReturnStmt 0x1f5e2601b80 <line:646:9, col:16>
|   |     `-IntegerLiteral 0x1f5e2601b58 <col:16> 'int' 0
|   |-BinaryOperator 0x1f5e2601c48 <line:649:5, col:11> 'const unsigned char *' '='
|   | |-UnaryOperator 0x1f5e2601bf8 <col:5, col:6> 'const unsigned char *' lvalue prefix '*' cannot overflow
|   | | `-ImplicitCastExpr 0x1f5e2601be0 <col:6> 'const unsigned char **' <LValueToRValue>
|   | |   `-DeclRefExpr 0x1f5e2601bc0 <col:6> 'const unsigned char **' lvalue ParmVar 0x1f5e26088d8 'in' 'const unsigned char **'
|   | `-ImplicitCastExpr 0x1f5e2601c30 <col:11> 'const unsigned char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x1f5e2601c10 <col:11> 'const unsigned char *' lvalue Var 0x1f5e2608d58 'p' 'const unsigned char *'
|   `-ReturnStmt 0x1f5e2601c90 <line:650:5, col:12>
|     `-IntegerLiteral 0x1f5e2601c68 <col:12> 'int' 1
|-FunctionDecl 0x1f5e26020b0 <line:653:1, line:668:1> line:653:12 used derive_pvk_key 'int (unsigned char *, const unsigned char *, unsigned int, const unsigned char *, int)' static
| |-ParmVarDecl 0x1f5e2601d28 <col:27, col:42> col:42 used key 'unsigned char *'
| |-ParmVarDecl 0x1f5e2601da8 <line:654:27, col:48> col:48 used salt 'const unsigned char *'
| |-ParmVarDecl 0x1f5e2601e28 <col:54, col:67> col:67 used saltlen 'unsigned int'
| |-ParmVarDecl 0x1f5e2601ea8 <line:655:27, col:48> col:48 used pass 'const unsigned char *'
| |-ParmVarDecl 0x1f5e2601f28 <col:54, col:58> col:58 used passlen 'int'
| `-CompoundStmt 0x1f5e2605b58 <line:656:1, line:668:1>
|   |-DeclStmt 0x1f5e2602380 <line:658:5, col:15>
|   | `-VarDecl 0x1f5e26022f0 <col:5, col:14> col:9 used rv 'int' cinit
|   |   `-IntegerLiteral 0x1f5e2602358 <col:14> 'int' 1
|   |-IfStmt 0x1f5e26059e8 <line:659:5, line:664:14>
|   | |-OpaqueValueExpr 0x1f5e26059d0 <<invalid sloc>> '_Bool'
|   | `-BinaryOperator 0x1f5e26059b0 <col:9, col:14> 'int' '='
|   |   |-DeclRefExpr 0x1f5e2605950 <col:9> 'int' lvalue Var 0x1f5e26022f0 'rv' 'int'
|   |   `-IntegerLiteral 0x1f5e2605988 <col:14> 'int' 0
|   `-ReturnStmt 0x1f5e2605b48 <line:667:5, col:12>
|     `-ImplicitCastExpr 0x1f5e2605b30 <col:12> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x1f5e2605b10 <col:12> 'int' lvalue Var 0x1f5e26022f0 'rv' 'int'
|-FunctionDecl 0x1f5e2605eb0 <line:670:1, line:743:1> line:670:18 invalid do_PVK_body 'int *(const unsigned char **, unsigned int, unsigned int, int *, void *)' static
| |-ParmVarDecl 0x1f5e2605ba0 <col:30, col:52> col:52 used in 'const unsigned char **'
| |-ParmVarDecl 0x1f5e2605c20 <line:671:30, col:43> col:43 used saltlen 'unsigned int'
| |-ParmVarDecl 0x1f5e2605ca0 <col:52, col:65> col:65 used keylen 'unsigned int'
| |-ParmVarDecl 0x1f5e2605d20 <line:672:30, col:47> col:47 invalid cb 'int *'
| |-ParmVarDecl 0x1f5e2605da0 <col:51, col:57> col:57 used u 'void *'
| `-CompoundStmt 0x1f5e2609dc0 <line:673:1, line:743:1>
|   |-DeclStmt 0x1f5e2606090 <line:675:5, col:33>
|   | `-VarDecl 0x1f5e2605fa8 <col:5, col:31> col:26 used p 'const unsigned char *' cinit
|   |   `-ImplicitCastExpr 0x1f5e2606078 <col:30, col:31> 'const unsigned char *' <LValueToRValue>
|   |     `-UnaryOperator 0x1f5e2606060 <col:30, col:31> 'const unsigned char *' lvalue prefix '*' cannot overflow
|   |       `-ImplicitCastExpr 0x1f5e2606048 <col:31> 'const unsigned char **' <LValueToRValue>
|   |         `-DeclRefExpr 0x1f5e2606010 <col:31> 'const unsigned char **' lvalue ParmVar 0x1f5e2605ba0 'in' 'const unsigned char **'
|   |-DeclStmt 0x1f5e2606128 <line:676:5, col:23>
|   | `-VarDecl 0x1f5e26060c0 <col:5, col:18> col:18 used magic 'unsigned int'
|   |-DeclStmt 0x1f5e2606258 <line:677:5, col:37>
|   | |-VarDecl 0x1f5e2606158 <col:5, col:20> col:20 used enctmp 'unsigned char *'
|   | `-VarDecl 0x1f5e26061d8 <col:5, col:36> col:36 used q 'unsigned char *'
|   |-DeclStmt 0x1f5e2606378 <line:678:5, col:29>
|   | `-VarDecl 0x1f5e2606310 <col:5, col:28> col:19 used keybuf 'unsigned char [20]'
|   |-IfStmt 0x1f5e2609928 <line:681:5, line:733:5>
|   | |-ImplicitCastExpr 0x1f5e2606510 <line:681:9> 'unsigned int' <LValueToRValue>
|   | | `-DeclRefExpr 0x1f5e26064d8 <col:9> 'unsigned int' lvalue ParmVar 0x1f5e2605c20 'saltlen' 'unsigned int'
|   | `-CompoundStmt 0x1f5e2609888 <col:18, line:733:5>
|   |   |-DeclStmt 0x1f5e2603598 <line:682:9, col:32>
|   |   | `-VarDecl 0x1f5e2603530 <col:9, col:14> col:14 invalid psbuf 'char'
|   |   |-DeclStmt 0x1f5e26036c8 <line:683:9, col:29>
|   |   | |-VarDecl 0x1f5e26035c8 <col:9, col:13> col:13 used enctmplen 'int'
|   |   | `-VarDecl 0x1f5e2603648 <col:9, col:24> col:24 used inlen 'int'
|   |   |-IfStmt 0x1f5e2603a10 <line:688:9, line:691:9>
|   |   | |-BinaryOperator 0x1f5e2603950 <line:688:13, col:21> 'int' '<'
|   |   | | |-ImplicitCastExpr 0x1f5e2603938 <col:13> 'int' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x1f5e26038f0 <col:13> 'int' lvalue Var 0x1f5e2603648 'inlen' 'int'
|   |   | | `-IntegerLiteral 0x1f5e2603910 <col:21> 'int' 0
|   |   | `-CompoundStmt 0x1f5e26039f8 <col:24, line:691:9>
|   |   |   `-GotoStmt 0x1f5e26039e0 <line:690:13, col:18> 'err' 0x1f5e2603990
|   |   |-BinaryOperator 0x1f5e2603b88 <line:692:9, col:43> 'unsigned char *' '='
|   |   | |-DeclRefExpr 0x1f5e2603a28 <col:9> 'unsigned char *' lvalue Var 0x1f5e2606158 'enctmp' 'unsigned char *'
|   |   | `-ImplicitCastExpr 0x1f5e2603b70 <col:18, col:43> 'unsigned char *' <IntegralToPointer>
|   |   |   `-CallExpr 0x1f5e2603b48 <col:18, col:43> 'int'
|   |   |     |-ImplicitCastExpr 0x1f5e2603b30 <col:18> 'int (*)()' <FunctionToPointerDecay>
|   |   |     | `-DeclRefExpr 0x1f5e2603a60 <col:18> 'int ()' Function 0x1f5e25f1da0 'OPENSSL_malloc' 'int ()'
|   |   |     `-BinaryOperator 0x1f5e2603b10 <col:33, col:42> 'unsigned int' '+'
|   |   |       |-ImplicitCastExpr 0x1f5e2603ae0 <col:33> 'unsigned int' <LValueToRValue>
|   |   |       | `-DeclRefExpr 0x1f5e2603a80 <col:33> 'unsigned int' lvalue ParmVar 0x1f5e2605ca0 'keylen' 'unsigned int'
|   |   |       `-ImplicitCastExpr 0x1f5e2603af8 <col:42> 'unsigned int' <IntegralCast>
|   |   |         `-IntegerLiteral 0x1f5e2603ab8 <col:42> 'int' 8
|   |   |-IfStmt 0x1f5e2603c30 <line:693:9, line:696:9>
|   |   | |-OpaqueValueExpr 0x1f5e2603c18 <<invalid sloc>> '_Bool'
|   |   | `-CompoundStmt 0x1f5e2603c00 <line:693:29, line:696:9>
|   |   |   `-GotoStmt 0x1f5e2603be8 <line:695:13, col:18> 'err' 0x1f5e2603990
|   |   |-IfStmt 0x1f5e2603d48 <line:697:9, line:699:18>
|   |   | |-OpaqueValueExpr 0x1f5e2603d30 <<invalid sloc>> '_Bool'
|   |   | `-GotoStmt 0x1f5e2603d18 <col:13, col:18> 'err' 0x1f5e2603990
|   |   |-CompoundAssignOperator 0x1f5e2603db8 <line:700:9, col:14> 'const unsigned char *' '+=' ComputeLHSTy='const unsigned char *' ComputeResultTy='const unsigned char *'
|   |   | |-DeclRefExpr 0x1f5e2603d60 <col:9> 'const unsigned char *' lvalue Var 0x1f5e2605fa8 'p' 'const unsigned char *'
|   |   | `-ImplicitCastExpr 0x1f5e2603da0 <col:14> 'unsigned int' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x1f5e2603d80 <col:14> 'unsigned int' lvalue ParmVar 0x1f5e2605c20 'saltlen' 'unsigned int'
|   |   |-CallExpr 0x1f5e2604160 <line:702:9, col:28> 'void *'
|   |   | |-ImplicitCastExpr 0x1f5e2604148 <col:9> 'void *(*)(void *, const void *, unsigned long long)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x1f5e2604050 <col:9> 'void *(void *, const void *, unsigned long long)' Function 0x1f5e2603e60 'memcpy' 'void *(void *, const void *, unsigned long long)'
|   |   | |-ImplicitCastExpr 0x1f5e26041b0 <col:16> 'void *' <BitCast>
|   |   | | `-ImplicitCastExpr 0x1f5e2604198 <col:16> 'unsigned char *' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x1f5e2604088 <col:16> 'unsigned char *' lvalue Var 0x1f5e2606158 'enctmp' 'unsigned char *'
|   |   | |-ImplicitCastExpr 0x1f5e26041e0 <col:24> 'const void *' <BitCast>
|   |   | | `-ImplicitCastExpr 0x1f5e26041c8 <col:24> 'const unsigned char *' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x1f5e26040a8 <col:24> 'const unsigned char *' lvalue Var 0x1f5e2605fa8 'p' 'const unsigned char *'
|   |   | `-ImplicitCastExpr 0x1f5e26041f8 <col:27> 'unsigned long long' <IntegralCast>
|   |   |   `-IntegerLiteral 0x1f5e26040c8 <col:27> 'int' 8
|   |   |-CompoundAssignOperator 0x1f5e2604258 <line:703:9, col:14> 'const unsigned char *' '+=' ComputeLHSTy='const unsigned char *' ComputeResultTy='const unsigned char *'
|   |   | |-DeclRefExpr 0x1f5e2604210 <col:9> 'const unsigned char *' lvalue Var 0x1f5e2605fa8 'p' 'const unsigned char *'
|   |   | `-IntegerLiteral 0x1f5e2604230 <col:14> 'int' 8
|   |   |-IfStmt 0x1f5e2604370 <line:704:9, line:707:9>
|   |   | |-BinaryOperator 0x1f5e2604300 <line:704:13, col:22> 'int' '<'
|   |   | | |-ImplicitCastExpr 0x1f5e26042d0 <col:13> 'unsigned int' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x1f5e2604288 <col:13> 'unsigned int' lvalue ParmVar 0x1f5e2605ca0 'keylen' 'unsigned int'
|   |   | | `-ImplicitCastExpr 0x1f5e26042e8 <col:22> 'unsigned int' <IntegralCast>
|   |   | |   `-IntegerLiteral 0x1f5e26042a8 <col:22> 'int' 8
|   |   | `-CompoundStmt 0x1f5e2604358 <col:25, line:707:9>
|   |   |   `-GotoStmt 0x1f5e2604340 <line:706:13, col:18> 'err' 0x1f5e2603990
|   |   |-BinaryOperator 0x1f5e2604458 <line:708:9, col:26> 'int' '='
|   |   | |-DeclRefExpr 0x1f5e2604388 <col:9> 'int' lvalue Var 0x1f5e2603648 'inlen' 'int'
|   |   | `-ImplicitCastExpr 0x1f5e2604440 <col:17, col:26> 'int' <IntegralCast>
|   |   |   `-BinaryOperator 0x1f5e2604420 <col:17, col:26> 'unsigned int' '-'
|   |   |     |-ImplicitCastExpr 0x1f5e26043f0 <col:17> 'unsigned int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x1f5e26043a8 <col:17> 'unsigned int' lvalue ParmVar 0x1f5e2605ca0 'keylen' 'unsigned int'
|   |   |     `-ImplicitCastExpr 0x1f5e2604408 <col:26> 'unsigned int' <IntegralCast>
|   |   |       `-IntegerLiteral 0x1f5e26043c8 <col:26> 'int' 8
|   |   |-BinaryOperator 0x1f5e2604540 <line:709:9, col:22> 'unsigned char *' '='
|   |   | |-DeclRefExpr 0x1f5e2604478 <col:9> 'unsigned char *' lvalue Var 0x1f5e26061d8 'q' 'unsigned char *'
|   |   | `-BinaryOperator 0x1f5e2604510 <col:13, col:22> 'unsigned char *' '+'
|   |   |   |-ImplicitCastExpr 0x1f5e26044f8 <col:13> 'unsigned char *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x1f5e26044b0 <col:13> 'unsigned char *' lvalue Var 0x1f5e2606158 'enctmp' 'unsigned char *'
|   |   |   `-IntegerLiteral 0x1f5e26044d0 <col:22> 'int' 8
|   |   |-IfStmt 0x1f5e2604808 <line:710:9, line:711:18>
|   |   | |-OpaqueValueExpr 0x1f5e26047f0 <<invalid sloc>> '_Bool'
|   |   | `-GotoStmt 0x1f5e26047d8 <col:13, col:18> 'err' 0x1f5e2603990
|   |   |-IfStmt 0x1f5e2604a10 <line:712:9, line:713:18>
|   |   | |-OpaqueValueExpr 0x1f5e26049f8 <<invalid sloc>> '_Bool'
|   |   | `-GotoStmt 0x1f5e26049e0 <col:13, col:18> 'err' 0x1f5e2603990
|   |   |-IfStmt 0x1f5e2604c30 <line:714:9, line:715:18>
|   |   | |-OpaqueValueExpr 0x1f5e2604c18 <<invalid sloc>> '_Bool'
|   |   | `-GotoStmt 0x1f5e2604c00 <col:13, col:18> 'err' 0x1f5e2603990
|   |   |-BinaryOperator 0x1f5e2604d60 <line:716:9, col:56> 'unsigned int' '='
|   |   | |-DeclRefExpr 0x1f5e2604c48 <col:9> 'unsigned int' lvalue Var 0x1f5e26060c0 'magic' 'unsigned int'
|   |   | `-CallExpr 0x1f5e2604d38 <col:17, col:56> 'unsigned int'
|   |   |   |-ImplicitCastExpr 0x1f5e2604d20 <col:17> 'unsigned int (*)(const unsigned char **)' <FunctionToPointerDecay>
|   |   |   | `-DeclRefExpr 0x1f5e2604c80 <col:17> 'unsigned int (const unsigned char **)' Function 0x1f5e25e8b70 'read_ledword' 'unsigned int (const unsigned char **)'
|   |   |   `-CStyleCastExpr 0x1f5e2604cf8 <col:30, col:55> 'const unsigned char **' <NoOp>
|   |   |     `-UnaryOperator 0x1f5e2604cc0 <col:54, col:55> 'unsigned char **' prefix '&' cannot overflow
|   |   |       `-DeclRefExpr 0x1f5e2604ca0 <col:55> 'unsigned char *' lvalue Var 0x1f5e26061d8 'q' 'unsigned char *'
|   |   |-IfStmt 0x1f5e26097e0 <line:717:9, line:731:9>
|   |   | |-BinaryOperator 0x1f5e2604ee0 <line:717:13, line:61:34> 'int' '&&'
|   |   | | |-BinaryOperator 0x1f5e2604e10 <line:717:13, line:59:34> 'int' '!='
|   |   | | | |-ImplicitCastExpr 0x1f5e2604df8 <line:717:13> 'unsigned long' <IntegralCast>
|   |   | | | | `-ImplicitCastExpr 0x1f5e2604dc8 <col:13> 'unsigned int' <LValueToRValue>
|   |   | | | |   `-DeclRefExpr 0x1f5e2604d80 <col:13> 'unsigned int' lvalue Var 0x1f5e26060c0 'magic' 'unsigned int'
|   |   | | | `-ImplicitCastExpr 0x1f5e2604de0 <line:59:34> 'unsigned long' <IntegralCast>
|   |   | | |   `-IntegerLiteral 0x1f5e2604da0 <col:34> 'long' 843141970
|   |   | | `-BinaryOperator 0x1f5e2604ec0 <line:717:38, line:61:34> 'int' '!='
|   |   | |   |-ImplicitCastExpr 0x1f5e2604ea8 <line:717:38> 'unsigned long' <IntegralCast>
|   |   | |   | `-ImplicitCastExpr 0x1f5e2604e78 <col:38> 'unsigned int' <LValueToRValue>
|   |   | |   |   `-DeclRefExpr 0x1f5e2604e30 <col:38> 'unsigned int' lvalue Var 0x1f5e26060c0 'magic' 'unsigned int'
|   |   | |   `-ImplicitCastExpr 0x1f5e2604e90 <line:61:34> 'unsigned long' <IntegralCast>
|   |   | |     `-IntegerLiteral 0x1f5e2604e50 <col:34> 'long' 844321604
|   |   | `-CompoundStmt 0x1f5e2609798 <line:717:61, line:731:9>
|   |   |   |-BinaryOperator 0x1f5e2604fa0 <line:718:13, col:26> 'unsigned char *' '='
|   |   |   | |-DeclRefExpr 0x1f5e2604f00 <col:13> 'unsigned char *' lvalue Var 0x1f5e26061d8 'q' 'unsigned char *'
|   |   |   | `-BinaryOperator 0x1f5e2604f80 <col:17, col:26> 'unsigned char *' '+'
|   |   |   |   |-ImplicitCastExpr 0x1f5e2604f68 <col:17> 'unsigned char *' <LValueToRValue>
|   |   |   |   | `-DeclRefExpr 0x1f5e2604f20 <col:17> 'unsigned char *' lvalue Var 0x1f5e2606158 'enctmp' 'unsigned char *'
|   |   |   |   `-IntegerLiteral 0x1f5e2604f40 <col:26> 'int' 8
|   |   |   |-CallExpr 0x1f5e26050c8 <line:719:13, col:37> 'void *'
|   |   |   | |-ImplicitCastExpr 0x1f5e26050b0 <col:13> 'void *(*)(void *, int, unsigned long long)' <FunctionToPointerDecay>
|   |   |   | | `-DeclRefExpr 0x1f5e2604fc0 <col:13> 'void *(void *, int, unsigned long long)' Function 0x1f5e2600e90 'memset' 'void *(void *, int, unsigned long long)'
|   |   |   | |-ImplicitCastExpr 0x1f5e2605100 <col:20, col:29> 'void *' <BitCast>
|   |   |   | | `-BinaryOperator 0x1f5e2605040 <col:20, col:29> 'unsigned char *' '+'
|   |   |   | |   |-ImplicitCastExpr 0x1f5e2605028 <col:20> 'unsigned char *' <ArrayToPointerDecay>
|   |   |   | |   | `-DeclRefExpr 0x1f5e2604fe0 <col:20> 'unsigned char [20]' lvalue Var 0x1f5e2606310 'keybuf' 'unsigned char [20]'
|   |   |   | |   `-IntegerLiteral 0x1f5e2605000 <col:29> 'int' 5
|   |   |   | |-IntegerLiteral 0x1f5e2605060 <col:32> 'int' 0
|   |   |   | `-ImplicitCastExpr 0x1f5e2605118 <col:35> 'unsigned long long' <IntegralCast>
|   |   |   |   `-IntegerLiteral 0x1f5e2605088 <col:35> 'int' 11
|   |   |   |-IfStmt 0x1f5e26051f8 <line:720:13, line:721:22>
|   |   |   | |-OpaqueValueExpr 0x1f5e26051e0 <<invalid sloc>> '_Bool'
|   |   |   | `-GotoStmt 0x1f5e26051c8 <col:17, col:22> 'err' 0x1f5e2603990
|   |   |   |-IfStmt 0x1f5e26052f8 <line:722:13, line:723:22>
|   |   |   | |-OpaqueValueExpr 0x1f5e26052e0 <<invalid sloc>> '_Bool'
|   |   |   | `-GotoStmt 0x1f5e26052c8 <col:17, col:22> 'err' 0x1f5e2603990
|   |   |   |-IfStmt 0x1f5e2605428 <line:724:13, line:725:22>
|   |   |   | |-OpaqueValueExpr 0x1f5e2605410 <<invalid sloc>> '_Bool'
|   |   |   | `-GotoStmt 0x1f5e26053f8 <col:17, col:22> 'err' 0x1f5e2603990
|   |   |   |-BinaryOperator 0x1f5e2609590 <line:726:13, col:60> 'unsigned int' '='
|   |   |   | |-DeclRefExpr 0x1f5e2605440 <col:13> 'unsigned int' lvalue Var 0x1f5e26060c0 'magic' 'unsigned int'
|   |   |   | `-CallExpr 0x1f5e2605518 <col:21, col:60> 'unsigned int'
|   |   |   |   |-ImplicitCastExpr 0x1f5e2605500 <col:21> 'unsigned int (*)(const unsigned char **)' <FunctionToPointerDecay>
|   |   |   |   | `-DeclRefExpr 0x1f5e2605460 <col:21> 'unsigned int (const unsigned char **)' Function 0x1f5e25e8b70 'read_ledword' 'unsigned int (const unsigned char **)'
|   |   |   |   `-CStyleCastExpr 0x1f5e26054d8 <col:34, col:59> 'const unsigned char **' <NoOp>
|   |   |   |     `-UnaryOperator 0x1f5e26054a0 <col:58, col:59> 'unsigned char **' prefix '&' cannot overflow
|   |   |   |       `-DeclRefExpr 0x1f5e2605480 <col:59> 'unsigned char *' lvalue Var 0x1f5e26061d8 'q' 'unsigned char *'
|   |   |   `-IfStmt 0x1f5e2609780 <line:727:13, line:730:13>
|   |   |     |-BinaryOperator 0x1f5e2609710 <line:727:17, line:61:34> 'int' '&&'
|   |   |     | |-BinaryOperator 0x1f5e2609640 <line:727:17, line:59:34> 'int' '!='
|   |   |     | | |-ImplicitCastExpr 0x1f5e2609628 <line:727:17> 'unsigned long' <IntegralCast>
|   |   |     | | | `-ImplicitCastExpr 0x1f5e26095f8 <col:17> 'unsigned int' <LValueToRValue>
|   |   |     | | |   `-DeclRefExpr 0x1f5e26095b0 <col:17> 'unsigned int' lvalue Var 0x1f5e26060c0 'magic' 'unsigned int'
|   |   |     | | `-ImplicitCastExpr 0x1f5e2609610 <line:59:34> 'unsigned long' <IntegralCast>
|   |   |     | |   `-IntegerLiteral 0x1f5e26095d0 <col:34> 'long' 843141970
|   |   |     | `-BinaryOperator 0x1f5e26096f0 <line:727:42, line:61:34> 'int' '!='
|   |   |     |   |-ImplicitCastExpr 0x1f5e26096d8 <line:727:42> 'unsigned long' <IntegralCast>
|   |   |     |   | `-ImplicitCastExpr 0x1f5e26096a8 <col:42> 'unsigned int' <LValueToRValue>
|   |   |     |   |   `-DeclRefExpr 0x1f5e2609660 <col:42> 'unsigned int' lvalue Var 0x1f5e26060c0 'magic' 'unsigned int'
|   |   |     |   `-ImplicitCastExpr 0x1f5e26096c0 <line:61:34> 'unsigned long' <IntegralCast>
|   |   |     |     `-IntegerLiteral 0x1f5e2609680 <col:34> 'long' 844321604
|   |   |     `-CompoundStmt 0x1f5e2609768 <line:727:65, line:730:13>
|   |   |       `-GotoStmt 0x1f5e2609750 <line:729:17, col:22> 'err' 0x1f5e2603990
|   |   `-BinaryOperator 0x1f5e2609868 <line:732:9, col:13> 'const unsigned char *' '='
|   |     |-DeclRefExpr 0x1f5e26097f8 <col:9> 'const unsigned char *' lvalue Var 0x1f5e2605fa8 'p' 'const unsigned char *'
|   |     `-ImplicitCastExpr 0x1f5e2609850 <col:13> 'const unsigned char *' <NoOp>
|   |       `-ImplicitCastExpr 0x1f5e2609838 <col:13> 'unsigned char *' <LValueToRValue>
|   |         `-DeclRefExpr 0x1f5e2609818 <col:13> 'unsigned char *' lvalue Var 0x1f5e2606158 'enctmp' 'unsigned char *'
|   |-LabelStmt 0x1f5e2609ab0 <line:736:2, col:5> 'err'
|   | `-NullStmt 0x1f5e2609aa8 <col:5>
|   `-IfStmt 0x1f5e2609da8 <line:738:5, line:741:5>
|     |-OpaqueValueExpr 0x1f5e2609d90 <<invalid sloc>> '_Bool'
|     `-CompoundStmt 0x1f5e2609d70 <line:738:25, line:741:5>
|       |-CallExpr 0x1f5e2609c90 <line:739:9, col:47> 'int'
|       | |-ImplicitCastExpr 0x1f5e2609c78 <col:9> 'int (*)()' <FunctionToPointerDecay>
|       | | `-DeclRefExpr 0x1f5e2609bd8 <col:9> 'int ()' Function 0x1f5e2609b10 'OPENSSL_cleanse' 'int ()'
|       | |-ImplicitCastExpr 0x1f5e2609cc0 <col:25> 'unsigned char *' <ArrayToPointerDecay>
|       | | `-DeclRefExpr 0x1f5e2609bf8 <col:25> 'unsigned char [20]' lvalue Var 0x1f5e2606310 'keybuf' 'unsigned char [20]'
|       | `-UnaryExprOrTypeTraitExpr 0x1f5e2609c58 <col:33, col:46> 'unsigned long long' sizeof
|       |   `-ParenExpr 0x1f5e2609c38 <col:39, col:46> 'unsigned char [20]' lvalue
|       |     `-DeclRefExpr 0x1f5e2609c18 <col:40> 'unsigned char [20]' lvalue Var 0x1f5e2606310 'keybuf' 'unsigned char [20]' non_odr_use_unevaluated
|       `-CallExpr 0x1f5e2609d30 <line:740:9, col:28> 'int'
|         |-ImplicitCastExpr 0x1f5e2609d18 <col:9> 'int (*)()' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x1f5e2609cd8 <col:9> 'int ()' Function 0x1f5e25f3430 'OPENSSL_free' 'int ()'
|         `-ImplicitCastExpr 0x1f5e2609d58 <col:22> 'unsigned char *' <LValueToRValue>
|           `-DeclRefExpr 0x1f5e2609cf8 <col:22> 'unsigned char *' lvalue Var 0x1f5e2606158 'enctmp' 'unsigned char *'
|-FunctionDecl 0x1f5e2603e60 <line:702:9> col:9 implicit used memcpy 'void *(void *, const void *, unsigned long long)' extern
| |-ParmVarDecl 0x1f5e2603f00 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x1f5e2603f68 <<invalid sloc>> <invalid sloc> 'const void *'
| `-ParmVarDecl 0x1f5e2603fd0 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x1f5e260a010 <line:745:1, line:776:1> line:745:11 invalid b2i_PVK_bio 'int *(int *, int *, void *)'
| |-ParmVarDecl 0x1f5e2609e20 <col:23, col:28> col:28 invalid in 'int *'
| |-ParmVarDecl 0x1f5e2609ea0 <col:32, col:49> col:49 invalid cb 'int *'
| |-ParmVarDecl 0x1f5e2609f20 <col:53, col:59> col:59 used u 'void *'
| `-CompoundStmt 0x1f5e26070a8 <line:746:1, line:776:1>
|   |-DeclStmt 0x1f5e260a280 <line:747:5, col:43>
|   | |-VarDecl 0x1f5e260a180 <col:5, col:29> col:19 used pvk_hdr 'unsigned char [24]'
|   | `-VarDecl 0x1f5e260a200 <col:5, col:33> col:33 used buf 'unsigned char *'
|   |-DeclStmt 0x1f5e260a318 <line:748:5, col:27>
|   | `-VarDecl 0x1f5e260a2b0 <col:5, col:26> col:26 used p 'const unsigned char *'
|   |-DeclStmt 0x1f5e260a3b0 <line:749:5, col:15>
|   | `-VarDecl 0x1f5e260a348 <col:5, col:9> col:9 used buflen 'int'
|   |-DeclStmt 0x1f5e260a4e0 <line:751:5, col:33>
|   | |-VarDecl 0x1f5e260a3e0 <col:5, col:18> col:18 used saltlen 'unsigned int'
|   | `-VarDecl 0x1f5e260a460 <col:5, col:27> col:27 used keylen 'unsigned int'
|   |-IfStmt 0x1f5e26065d0 <line:752:5, line:755:5>
|   | |-OpaqueValueExpr 0x1f5e26065b8 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x1f5e26065a8 <line:752:42, line:755:5>
|   |-BinaryOperator 0x1f5e2606670 <line:756:5, col:9> 'const unsigned char *' '='
|   | |-DeclRefExpr 0x1f5e26065e8 <col:5> 'const unsigned char *' lvalue Var 0x1f5e260a2b0 'p' 'const unsigned char *'
|   | `-ImplicitCastExpr 0x1f5e2606658 <col:9> 'const unsigned char *' <NoOp>
|   |   `-ImplicitCastExpr 0x1f5e2606640 <col:9> 'unsigned char *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x1f5e2606620 <col:9> 'unsigned char [24]' lvalue Var 0x1f5e260a180 'pvk_hdr' 'unsigned char [24]'
|   |-IfStmt 0x1f5e26068e8 <line:758:5, line:759:16>
|   | |-UnaryOperator 0x1f5e2606880 <line:758:9, col:52> 'int' prefix '!' cannot overflow
|   | | `-CallExpr 0x1f5e2606820 <col:10, col:52> 'int'
|   | |   |-ImplicitCastExpr 0x1f5e2606808 <col:10> 'int (*)(const unsigned char **, unsigned int, int, unsigned int *, unsigned int *)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x1f5e2606690 <col:10> 'int (const unsigned char **, unsigned int, int, unsigned int *, unsigned int *)' Function 0x1f5e2608c60 'do_PVK_header' 'int (const unsigned char **, unsigned int, int, unsigned int *, unsigned int *)'
|   | |   |-UnaryOperator 0x1f5e26066d0 <col:24, col:25> 'const unsigned char **' prefix '&' cannot overflow
|   | |   | `-DeclRefExpr 0x1f5e26066b0 <col:25> 'const unsigned char *' lvalue Var 0x1f5e260a2b0 'p' 'const unsigned char *'
|   | |   |-ImplicitCastExpr 0x1f5e2606868 <col:28> 'unsigned int' <IntegralCast>
|   | |   | `-IntegerLiteral 0x1f5e26066e8 <col:28> 'int' 24
|   | |   |-IntegerLiteral 0x1f5e2606710 <col:32> 'int' 0
|   | |   |-UnaryOperator 0x1f5e2606770 <col:35, col:36> 'unsigned int *' prefix '&' cannot overflow
|   | |   | `-DeclRefExpr 0x1f5e2606738 <col:36> 'unsigned int' lvalue Var 0x1f5e260a3e0 'saltlen' 'unsigned int'
|   | |   `-UnaryOperator 0x1f5e26067c0 <col:45, col:46> 'unsigned int *' prefix '&' cannot overflow
|   | |     `-DeclRefExpr 0x1f5e2606788 <col:46> 'unsigned int' lvalue Var 0x1f5e260a460 'keylen' 'unsigned int'
|   | `-ReturnStmt 0x1f5e26068d8 <line:759:9, col:16>
|   |   `-ImplicitCastExpr 0x1f5e26068c0 <col:16> 'int *' <NullToPointer>
|   |     `-IntegerLiteral 0x1f5e2606898 <col:16> 'int' 0
|   |-BinaryOperator 0x1f5e2606a38 <line:760:5, col:28> 'int' '='
|   | |-DeclRefExpr 0x1f5e2606900 <col:5> 'int' lvalue Var 0x1f5e260a348 'buflen' 'int'
|   | `-ImplicitCastExpr 0x1f5e2606a20 <col:14, col:28> 'int' <IntegralCast>
|   |   `-BinaryOperator 0x1f5e2606a00 <col:14, col:28> 'unsigned int' '+'
|   |     |-ImplicitCastExpr 0x1f5e26069e8 <col:14, col:19> 'unsigned int' <IntegralCast>
|   |     | `-CStyleCastExpr 0x1f5e2606988 <col:14, col:19> 'int' <IntegralCast>
|   |     |   `-ImplicitCastExpr 0x1f5e2606970 <col:19> 'unsigned int' <LValueToRValue> part_of_explicit_cast
|   |     |     `-DeclRefExpr 0x1f5e2606938 <col:19> 'unsigned int' lvalue Var 0x1f5e260a460 'keylen' 'unsigned int'
|   |     `-ImplicitCastExpr 0x1f5e26069d0 <col:28> 'unsigned int' <LValueToRValue>
|   |       `-DeclRefExpr 0x1f5e26069b0 <col:28> 'unsigned int' lvalue Var 0x1f5e260a3e0 'saltlen' 'unsigned int'
|   |-BinaryOperator 0x1f5e2606b40 <line:761:5, col:32> 'unsigned char *' '='
|   | |-DeclRefExpr 0x1f5e2606a58 <col:5> 'unsigned char *' lvalue Var 0x1f5e260a200 'buf' 'unsigned char *'
|   | `-ImplicitCastExpr 0x1f5e2606b28 <col:11, col:32> 'unsigned char *' <IntegralToPointer>
|   |   `-CallExpr 0x1f5e2606ae8 <col:11, col:32> 'int'
|   |     |-ImplicitCastExpr 0x1f5e2606ad0 <col:11> 'int (*)()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x1f5e2606a90 <col:11> 'int ()' Function 0x1f5e25f1da0 'OPENSSL_malloc' 'int ()'
|   |     `-ImplicitCastExpr 0x1f5e2606b10 <col:26> 'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x1f5e2606ab0 <col:26> 'int' lvalue Var 0x1f5e260a348 'buflen' 'int'
|   |-IfStmt 0x1f5e2606c20 <line:762:5, line:765:5>
|   | |-OpaqueValueExpr 0x1f5e2606c08 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x1f5e2606bf0 <line:762:22, line:765:5>
|   |   `-ReturnStmt 0x1f5e2606be0 <line:764:9, col:16>
|   |     `-ImplicitCastExpr 0x1f5e2606bc8 <col:16> 'int *' <NullToPointer>
|   |       `-IntegerLiteral 0x1f5e2606ba0 <col:16> 'int' 0
|   |-BinaryOperator 0x1f5e2606ca8 <line:766:5, col:9> 'const unsigned char *' '='
|   | |-DeclRefExpr 0x1f5e2606c38 <col:5> 'const unsigned char *' lvalue Var 0x1f5e260a2b0 'p' 'const unsigned char *'
|   | `-ImplicitCastExpr 0x1f5e2606c90 <col:9> 'const unsigned char *' <NoOp>
|   |   `-ImplicitCastExpr 0x1f5e2606c78 <col:9> 'unsigned char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x1f5e2606c58 <col:9> 'unsigned char *' lvalue Var 0x1f5e260a200 'buf' 'unsigned char *'
|   |-IfStmt 0x1f5e2606e00 <line:767:5, line:770:5>
|   | |-OpaqueValueExpr 0x1f5e2606de8 <<invalid sloc>> '_Bool'
|   | `-CompoundStmt 0x1f5e2606dd0 <line:767:46, line:770:5>
|   |   `-GotoStmt 0x1f5e2606db8 <line:769:9, col:14> 'err' 0x1f5e2606d68
|   `-LabelStmt 0x1f5e2607090 <line:773:2, line:774:35> 'err'
|     `-CallExpr 0x1f5e2607030 <col:5, col:35> 'int'
|       |-ImplicitCastExpr 0x1f5e2607018 <col:5> 'int (*)()' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x1f5e2606fb8 <col:5> 'int ()' Function 0x1f5e2606ef0 'OPENSSL_clear_free' 'int ()'
|       |-ImplicitCastExpr 0x1f5e2607060 <col:24> 'unsigned char *' <LValueToRValue>
|       | `-DeclRefExpr 0x1f5e2606fd8 <col:24> 'unsigned char *' lvalue Var 0x1f5e260a200 'buf' 'unsigned char *'
|       `-ImplicitCastExpr 0x1f5e2607078 <col:29> 'int' <LValueToRValue>
|         `-DeclRefExpr 0x1f5e2606ff8 <col:29> 'int' lvalue Var 0x1f5e260a348 'buflen' 'int'
|-FunctionDecl 0x1f5e2607450 <line:778:1, line:861:1> line:778:12 invalid i2b_PVK 'int (unsigned char **, int *, int, int *, void *)' static
| |-ParmVarDecl 0x1f5e2607140 <col:20, col:36> col:36 used out 'unsigned char **'
| |-ParmVarDecl 0x1f5e26071c0 <col:41, col:51> col:51 invalid pk 'int *'
| |-ParmVarDecl 0x1f5e2607240 <col:55, col:59> col:59 used enclevel 'int'
| |-ParmVarDecl 0x1f5e26072c0 <line:779:20, col:37> col:37 invalid cb 'int *'
| |-ParmVarDecl 0x1f5e2607340 <col:41, col:47> col:47 used u 'void *'
| `-CompoundStmt 0x1f5e260aeb8 <line:780:1, line:861:1>
|   |-DeclStmt 0x1f5e2607698 <line:781:5, col:27>
|   | |-VarDecl 0x1f5e2607570 <col:5, col:18> col:9 used outlen 'int' cinit
|   | | `-IntegerLiteral 0x1f5e26075d8 <col:18> 'int' 24
|   | `-VarDecl 0x1f5e2607618 <col:5, col:22> col:22 used pklen 'int'
|   |-DeclStmt 0x1f5e2607850 <line:782:5, col:57>
|   | |-VarDecl 0x1f5e26076c8 <col:5, col:20> col:20 used p 'unsigned char *'
|   | |-VarDecl 0x1f5e2607748 <col:5, col:31> col:31 used start 'unsigned char *'
|   | `-VarDecl 0x1f5e26077c8 <col:5, col:46> col:46 used salt 'unsigned char *'
|   |-IfStmt 0x1f5e2607948 <line:784:5, line:75:34>
|   | |-ImplicitCastExpr 0x1f5e26078a0 <line:784:9> 'int' <LValueToRValue>
|   | | `-DeclRefExpr 0x1f5e2607868 <col:9> 'int' lvalue ParmVar 0x1f5e2607240 'enclevel' 'int'
|   | `-CompoundAssignOperator 0x1f5e2607918 <line:785:9, line:75:34> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   |   |-DeclRefExpr 0x1f5e26078b8 <line:785:9> 'int' lvalue Var 0x1f5e2607570 'outlen' 'int'
|   |   `-IntegerLiteral 0x1f5e26078f0 <line:75:34> 'int' 16
|   |-IfStmt 0x1f5e2607a90 <line:787:5, line:788:17>
|   | |-BinaryOperator 0x1f5e2607a20 <line:787:9, col:17> 'int' '<'
|   | | |-ImplicitCastExpr 0x1f5e2607a08 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1f5e26079c0 <col:9> 'int' lvalue Var 0x1f5e2607618 'pklen' 'int'
|   | | `-IntegerLiteral 0x1f5e26079e0 <col:17> 'int' 0
|   | `-ReturnStmt 0x1f5e2607a80 <line:788:9, col:17>
|   |   `-UnaryOperator 0x1f5e2607a68 <col:16, col:17> 'int' prefix '-'
|   |     `-IntegerLiteral 0x1f5e2607a40 <col:17> 'int' 1
|   |-CompoundAssignOperator 0x1f5e2607b00 <line:789:5, col:15> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x1f5e2607aa8 <col:5> 'int' lvalue Var 0x1f5e2607570 'outlen' 'int'
|   | `-ImplicitCastExpr 0x1f5e2607ae8 <col:15> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x1f5e2607ac8 <col:15> 'int' lvalue Var 0x1f5e2607618 'pklen' 'int'
|   |-IfStmt 0x1f5e2607bc8 <line:790:5, line:791:16>
|   | |-OpaqueValueExpr 0x1f5e2607bb0 <<invalid sloc>> '_Bool'
|   | `-ReturnStmt 0x1f5e2607ba0 <col:9, col:16>
|   |   `-ImplicitCastExpr 0x1f5e2607b88 <col:16> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x1f5e2607b68 <col:16> 'int' lvalue Var 0x1f5e2607570 'outlen' 'int'
|   |-IfStmt 0x1f5e2607f60 <line:792:5, line:800:5> has_else
|   | |-OpaqueValueExpr 0x1f5e2607f48 <<invalid sloc>> '_Bool'
|   | |-CompoundStmt 0x1f5e2607cf0 <line:792:23, line:794:5>
|   | | `-BinaryOperator 0x1f5e2607cd0 <line:793:9, col:14> 'unsigned char *' '='
|   | |   |-DeclRefExpr 0x1f5e2607c30 <col:9> 'unsigned char *' lvalue Var 0x1f5e26076c8 'p' 'unsigned char *'
|   | |   `-ImplicitCastExpr 0x1f5e2607cb8 <col:13, col:14> 'unsigned char *' <LValueToRValue>
|   | |     `-UnaryOperator 0x1f5e2607ca0 <col:13, col:14> 'unsigned char *' lvalue prefix '*' cannot overflow
|   | |       `-ImplicitCastExpr 0x1f5e2607c88 <col:14> 'unsigned char **' <LValueToRValue>
|   | |         `-DeclRefExpr 0x1f5e2607c68 <col:14> 'unsigned char **' lvalue ParmVar 0x1f5e2607140 'out' 'unsigned char **'
|   | `-CompoundStmt 0x1f5e2607f28 <line:794:12, line:800:5>
|   |   |-BinaryOperator 0x1f5e2607e30 <line:795:9, col:42> 'unsigned char *' '='
|   |   | |-DeclRefExpr 0x1f5e2607d08 <col:9> 'unsigned char *' lvalue Var 0x1f5e2607748 'start' 'unsigned char *'
|   |   | `-BinaryOperator 0x1f5e2607e10 <col:17, col:42> 'unsigned char *' '='
|   |   |   |-DeclRefExpr 0x1f5e2607d40 <col:17> 'unsigned char *' lvalue Var 0x1f5e26076c8 'p' 'unsigned char *'
|   |   |   `-ImplicitCastExpr 0x1f5e2607df8 <col:21, col:42> 'unsigned char *' <IntegralToPointer>
|   |   |     `-CallExpr 0x1f5e2607db8 <col:21, col:42> 'int'
|   |   |       |-ImplicitCastExpr 0x1f5e2607da0 <col:21> 'int (*)()' <FunctionToPointerDecay>
|   |   |       | `-DeclRefExpr 0x1f5e2607d60 <col:21> 'int ()' Function 0x1f5e25f1da0 'OPENSSL_malloc' 'int ()'
|   |   |       `-ImplicitCastExpr 0x1f5e2607de0 <col:36> 'int' <LValueToRValue>
|   |   |         `-DeclRefExpr 0x1f5e2607d80 <col:36> 'int' lvalue Var 0x1f5e2607570 'outlen' 'int'
|   |   `-IfStmt 0x1f5e2607f10 <line:796:9, line:799:9>
|   |     |-OpaqueValueExpr 0x1f5e2607ef8 <<invalid sloc>> '_Bool'
|   |     `-CompoundStmt 0x1f5e2607ee0 <line:796:24, line:799:9>
|   |       `-ReturnStmt 0x1f5e2607ed0 <line:798:13, col:21>
|   |         `-UnaryOperator 0x1f5e2607eb8 <col:20, col:21> 'int' prefix '-'
|   |           `-IntegerLiteral 0x1f5e2607e90 <col:21> 'int' 1
|   |-IfStmt 0x1f5e2608060 <line:803:5, line:804:14>
|   | |-OpaqueValueExpr 0x1f5e2608048 <<invalid sloc>> '_Bool'
|   | `-GotoStmt 0x1f5e2608030 <col:9, col:14> 'error' 0x1f5e2607fe0
|   |-CallExpr 0x1f5e2608110 <line:806:5, col:34> 'void'
|   | |-ImplicitCastExpr 0x1f5e26080f8 <col:5> 'void (*)(unsigned char **, unsigned int)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1f5e2608078 <col:5> 'void (unsigned char **, unsigned int)' Function 0x1f5e25fd938 'write_ledword' 'void (unsigned char **, unsigned int)'
|   | |-UnaryOperator 0x1f5e26080b8 <col:19, col:20> 'unsigned char **' prefix '&' cannot overflow
|   | | `-DeclRefExpr 0x1f5e2608098 <col:20> 'unsigned char *' lvalue Var 0x1f5e26076c8 'p' 'unsigned char *'
|   | `-ImplicitCastExpr 0x1f5e2608140 <line:73:34> 'unsigned int' <IntegralCast>
|   |   `-IntegerLiteral 0x1f5e26080d0 <col:34> 'unsigned long' 2964713758
|   |-CallExpr 0x1f5e26081f0 <line:807:5, col:24> 'void'
|   | |-ImplicitCastExpr 0x1f5e26081d8 <col:5> 'void (*)(unsigned char **, unsigned int)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1f5e2608158 <col:5> 'void (unsigned char **, unsigned int)' Function 0x1f5e25fd938 'write_ledword' 'void (unsigned char **, unsigned int)'
|   | |-UnaryOperator 0x1f5e2608198 <col:19, col:20> 'unsigned char **' prefix '&' cannot overflow
|   | | `-DeclRefExpr 0x1f5e2608178 <col:20> 'unsigned char *' lvalue Var 0x1f5e26076c8 'p' 'unsigned char *'
|   | `-ImplicitCastExpr 0x1f5e2608220 <col:23> 'unsigned int' <IntegralCast>
|   |   `-IntegerLiteral 0x1f5e26081b0 <col:23> 'int' 0
|   |-IfStmt 0x1f5e2608430 <line:808:5, line:811:42> has_else
|   | |-OpaqueValueExpr 0x1f5e2608418 <<invalid sloc>> '_Bool'
|   | |-CallExpr 0x1f5e26082f0 <line:809:9, col:42> 'void'
|   | | |-ImplicitCastExpr 0x1f5e26082d8 <col:9> 'void (*)(unsigned char **, unsigned int)' <FunctionToPointerDecay>
|   | | | `-DeclRefExpr 0x1f5e2608258 <col:9> 'void (unsigned char **, unsigned int)' Function 0x1f5e25fd938 'write_ledword' 'void (unsigned char **, unsigned int)'
|   | | |-UnaryOperator 0x1f5e2608298 <col:23, col:24> 'unsigned char **' prefix '&' cannot overflow
|   | | | `-DeclRefExpr 0x1f5e2608278 <col:24> 'unsigned char *' lvalue Var 0x1f5e26076c8 'p' 'unsigned char *'
|   | | `-ImplicitCastExpr 0x1f5e2608320 <line:67:34> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x1f5e26082b0 <col:34> 'int' 2
|   | `-CallExpr 0x1f5e26083d0 <line:811:9, col:42> 'void'
|   |   |-ImplicitCastExpr 0x1f5e26083b8 <col:9> 'void (*)(unsigned char **, unsigned int)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x1f5e2608338 <col:9> 'void (unsigned char **, unsigned int)' Function 0x1f5e25fd938 'write_ledword' 'void (unsigned char **, unsigned int)'
|   |   |-UnaryOperator 0x1f5e2608378 <col:23, col:24> 'unsigned char **' prefix '&' cannot overflow
|   |   | `-DeclRefExpr 0x1f5e2608358 <col:24> 'unsigned char *' lvalue Var 0x1f5e26076c8 'p' 'unsigned char *'
|   |   `-ImplicitCastExpr 0x1f5e2608400 <line:66:34> 'unsigned int' <IntegralCast>
|   |     `-IntegerLiteral 0x1f5e2608390 <col:34> 'int' 1
|   |-CallExpr 0x1f5e2602538 <line:812:5, col:39> 'void'
|   | |-ImplicitCastExpr 0x1f5e2602520 <col:5> 'void (*)(unsigned char **, unsigned int)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1f5e2608458 <col:5> 'void (unsigned char **, unsigned int)' Function 0x1f5e25fd938 'write_ledword' 'void (unsigned char **, unsigned int)'
|   | |-UnaryOperator 0x1f5e2608498 <col:19, col:20> 'unsigned char **' prefix '&' cannot overflow
|   | | `-DeclRefExpr 0x1f5e2608478 <col:20> 'unsigned char *' lvalue Var 0x1f5e26076c8 'p' 'unsigned char *'
|   | `-ImplicitCastExpr 0x1f5e2602568 <col:23, col:38> 'unsigned int' <IntegralCast>
|   |   `-ConditionalOperator 0x1f5e2608538 <col:23, col:38> 'int'
|   |     |-ImplicitCastExpr 0x1f5e2608520 <col:23> 'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1f5e26084b0 <col:23> 'int' lvalue ParmVar 0x1f5e2607240 'enclevel' 'int'
|   |     |-IntegerLiteral 0x1f5e26084d0 <col:34> 'int' 1
|   |     `-IntegerLiteral 0x1f5e26084f8 <col:38> 'int' 0
|   |-CallExpr 0x1f5e26026a8 <line:813:5, col:49> 'void'
|   | |-ImplicitCastExpr 0x1f5e2602690 <col:5> 'void (*)(unsigned char **, unsigned int)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1f5e2602580 <col:5> 'void (unsigned char **, unsigned int)' Function 0x1f5e25fd938 'write_ledword' 'void (unsigned char **, unsigned int)'
|   | |-UnaryOperator 0x1f5e26025c0 <col:19, col:20> 'unsigned char **' prefix '&' cannot overflow
|   | | `-DeclRefExpr 0x1f5e26025a0 <col:20> 'unsigned char *' lvalue Var 0x1f5e26076c8 'p' 'unsigned char *'
|   | `-ImplicitCastExpr 0x1f5e26026d8 <col:23, col:48> 'unsigned int' <IntegralCast>
|   |   `-ConditionalOperator 0x1f5e2602660 <col:23, col:48> 'int'
|   |     |-ImplicitCastExpr 0x1f5e2602648 <col:23> 'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1f5e26025d8 <col:23> 'int' lvalue ParmVar 0x1f5e2607240 'enclevel' 'int'
|   |     |-IntegerLiteral 0x1f5e26025f8 <line:75:34> 'int' 16
|   |     `-IntegerLiteral 0x1f5e2602620 <line:813:48> 'int' 0
|   |-CallExpr 0x1f5e2602780 <line:814:5, col:28> 'void'
|   | |-ImplicitCastExpr 0x1f5e2602768 <col:5> 'void (*)(unsigned char **, unsigned int)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x1f5e26026f0 <col:5> 'void (unsigned char **, unsigned int)' Function 0x1f5e25fd938 'write_ledword' 'void (unsigned char **, unsigned int)'
|   | |-UnaryOperator 0x1f5e2602730 <col:19, col:20> 'unsigned char **' prefix '&' cannot overflow
|   | | `-DeclRefExpr 0x1f5e2602710 <col:20> 'unsigned char *' lvalue Var 0x1f5e26076c8 'p' 'unsigned char *'
|   | `-ImplicitCastExpr 0x1f5e26027c8 <col:23> 'unsigned int' <IntegralCast>
|   |   `-ImplicitCastExpr 0x1f5e26027b0 <col:23> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x1f5e2602748 <col:23> 'int' lvalue Var 0x1f5e2607618 'pklen' 'int'
|   |-IfStmt 0x1f5e2602b78 <line:815:5, line:820:5>
|   | |-ImplicitCastExpr 0x1f5e2602800 <line:815:9> 'int' <LValueToRValue>
|   | | `-DeclRefExpr 0x1f5e26027e0 <col:9> 'int' lvalue ParmVar 0x1f5e2607240 'enclevel' 'int'
|   | `-CompoundStmt 0x1f5e2602b50 <col:19, line:820:5>
|   |   |-IfStmt 0x1f5e2602a30 <line:816:9, line:817:18>
|   |   | |-BinaryOperator 0x1f5e26029f8 <line:816:13, col:43> 'int' '<='
|   |   | | |-CallExpr 0x1f5e2602988 <col:13, col:38> 'int'
|   |   | | | |-ImplicitCastExpr 0x1f5e2602970 <col:13> 'int (*)()' <FunctionToPointerDecay>
|   |   | | | | `-DeclRefExpr 0x1f5e2602908 <col:13> 'int ()' Function 0x1f5e2602840 'RAND_bytes' 'int ()'
|   |   | | | |-ImplicitCastExpr 0x1f5e26029b8 <col:24> 'unsigned char *' <LValueToRValue>
|   |   | | | | `-DeclRefExpr 0x1f5e2602928 <col:24> 'unsigned char *' lvalue Var 0x1f5e26076c8 'p' 'unsigned char *'
|   |   | | | `-IntegerLiteral 0x1f5e2602948 <line:75:34> 'int' 16
|   |   | | `-IntegerLiteral 0x1f5e26029d0 <line:816:43> 'int' 0
|   |   | `-GotoStmt 0x1f5e2602a18 <line:817:13, col:18> 'error' 0x1f5e2607fe0
|   |   |-BinaryOperator 0x1f5e2602ab8 <line:818:9, col:16> 'unsigned char *' '='
|   |   | |-DeclRefExpr 0x1f5e2602a48 <col:9> 'unsigned char *' lvalue Var 0x1f5e26077c8 'salt' 'unsigned char *'
|   |   | `-ImplicitCastExpr 0x1f5e2602aa0 <col:16> 'unsigned char *' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x1f5e2602a80 <col:16> 'unsigned char *' lvalue Var 0x1f5e26076c8 'p' 'unsigned char *'
|   |   `-CompoundAssignOperator 0x1f5e2602b20 <line:819:9, line:75:34> 'unsigned char *' '+=' ComputeLHSTy='unsigned char *' ComputeResultTy='unsigned char *'
|   |     |-DeclRefExpr 0x1f5e2602ad8 <line:819:9> 'unsigned char *' lvalue Var 0x1f5e26076c8 'p' 'unsigned char *'
|   |     `-IntegerLiteral 0x1f5e2602af8 <line:75:34> 'int' 16
|   |-IfStmt 0x1f5e260ab68 <line:822:5, line:847:5>
|   | |-BinaryOperator 0x1f5e2602c50 <line:822:9, col:21> 'int' '!='
|   | | |-ImplicitCastExpr 0x1f5e2602c38 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1f5e2602bf0 <col:9> 'int' lvalue ParmVar 0x1f5e2607240 'enclevel' 'int'
|   | | `-IntegerLiteral 0x1f5e2602c10 <col:21> 'int' 0
|   | `-CompoundStmt 0x1f5e260ab00 <col:24, line:847:5>
|   |   |-DeclStmt 0x1f5e2602ce8 <line:823:9, col:32>
|   |   | `-VarDecl 0x1f5e2602c80 <col:9, col:14> col:14 invalid psbuf 'char'
|   |   |-DeclStmt 0x1f5e2602dd0 <line:824:9, col:33>
|   |   | `-VarDecl 0x1f5e2602d68 <col:9, col:32> col:23 used keybuf 'unsigned char [20]'
|   |   |-DeclStmt 0x1f5e2602f00 <line:825:9, col:29>
|   |   | |-VarDecl 0x1f5e2602e00 <col:9, col:13> col:13 used enctmplen 'int'
|   |   | `-VarDecl 0x1f5e2602e80 <col:9, col:24> col:24 used inlen 'int'
|   |   |-IfStmt 0x1f5e2603108 <line:830:9, line:833:9>
|   |   | |-BinaryOperator 0x1f5e2603098 <line:830:13, col:22> 'int' '<='
|   |   | | |-ImplicitCastExpr 0x1f5e2603080 <col:13> 'int' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x1f5e2603038 <col:13> 'int' lvalue Var 0x1f5e2602e80 'inlen' 'int'
|   |   | | `-IntegerLiteral 0x1f5e2603058 <col:22> 'int' 0
|   |   | `-CompoundStmt 0x1f5e26030f0 <col:25, line:833:9>
|   |   |   `-GotoStmt 0x1f5e26030d8 <line:832:13, col:18> 'error' 0x1f5e2607fe0
|   |   |-IfStmt 0x1f5e2603210 <line:834:9, line:836:18>
|   |   | |-OpaqueValueExpr 0x1f5e26031f8 <<invalid sloc>> '_Bool'
|   |   | `-GotoStmt 0x1f5e26031e0 <col:13, col:18> 'error' 0x1f5e2607fe0
|   |   |-IfStmt 0x1f5e2603418 <line:837:9, line:838:37>
|   |   | |-BinaryOperator 0x1f5e2603288 <line:837:13, col:25> 'int' '=='
|   |   | | |-ImplicitCastExpr 0x1f5e2603270 <col:13> 'int' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x1f5e2603228 <col:13> 'int' lvalue ParmVar 0x1f5e2607240 'enclevel' 'int'
|   |   | | `-IntegerLiteral 0x1f5e2603248 <col:25> 'int' 1
|   |   | `-CallExpr 0x1f5e26033b0 <line:838:13, col:37> 'void *'
|   |   |   |-ImplicitCastExpr 0x1f5e2603398 <col:13> 'void *(*)(void *, int, unsigned long long)' <FunctionToPointerDecay>
|   |   |   | `-DeclRefExpr 0x1f5e26032a8 <col:13> 'void *(void *, int, unsigned long long)' Function 0x1f5e2600e90 'memset' 'void *(void *, int, unsigned long long)'
|   |   |   |-ImplicitCastExpr 0x1f5e26033e8 <col:20, col:29> 'void *' <BitCast>
|   |   |   | `-BinaryOperator 0x1f5e2603328 <col:20, col:29> 'unsigned char *' '+'
|   |   |   |   |-ImplicitCastExpr 0x1f5e2603310 <col:20> 'unsigned char *' <ArrayToPointerDecay>
|   |   |   |   | `-DeclRefExpr 0x1f5e26032c8 <col:20> 'unsigned char [20]' lvalue Var 0x1f5e2602d68 'keybuf' 'unsigned char [20]'
|   |   |   |   `-IntegerLiteral 0x1f5e26032e8 <col:29> 'int' 5
|   |   |   |-IntegerLiteral 0x1f5e2603348 <col:32> 'int' 0
|   |   |   `-ImplicitCastExpr 0x1f5e2603400 <col:35> 'unsigned long long' <IntegralCast>
|   |   |     `-IntegerLiteral 0x1f5e2603370 <col:35> 'int' 11
|   |   |-BinaryOperator 0x1f5e260a5a0 <line:839:9, col:34> 'unsigned char *' '='
|   |   | |-DeclRefExpr 0x1f5e2603430 <col:9> 'unsigned char *' lvalue Var 0x1f5e26076c8 'p' 'unsigned char *'
|   |   | `-BinaryOperator 0x1f5e26034f8 <col:13, col:34> 'unsigned char *' '+'
|   |   |   |-BinaryOperator 0x1f5e26034b0 <col:13, line:75:34> 'unsigned char *' '+'
|   |   |   | |-ImplicitCastExpr 0x1f5e2603498 <line:839:13> 'unsigned char *' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x1f5e2603450 <col:13> 'unsigned char *' lvalue Var 0x1f5e26077c8 'salt' 'unsigned char *'
|   |   |   | `-IntegerLiteral 0x1f5e2603470 <line:75:34> 'int' 16
|   |   |   `-IntegerLiteral 0x1f5e26034d0 <line:839:34> 'int' 8
|   |   |-IfStmt 0x1f5e260a778 <line:840:9, line:841:18>
|   |   | |-OpaqueValueExpr 0x1f5e260a760 <<invalid sloc>> '_Bool'
|   |   | `-GotoStmt 0x1f5e260a748 <col:13, col:18> 'error' 0x1f5e2607fe0
|   |   |-CallExpr 0x1f5e260a810 <line:842:9, col:35> 'int'
|   |   | |-ImplicitCastExpr 0x1f5e260a7f8 <col:9> 'int (*)()' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x1f5e260a790 <col:9> 'int ()' Function 0x1f5e2609b10 'OPENSSL_cleanse' 'int ()'
|   |   | |-ImplicitCastExpr 0x1f5e260a840 <col:25> 'unsigned char *' <ArrayToPointerDecay>
|   |   | | `-DeclRefExpr 0x1f5e260a7b0 <col:25> 'unsigned char [20]' lvalue Var 0x1f5e2602d68 'keybuf' 'unsigned char [20]'
|   |   | `-IntegerLiteral 0x1f5e260a7d0 <col:33> 'int' 20
|   |   |-IfStmt 0x1f5e260a9b8 <line:843:9, line:844:18>
|   |   | |-OpaqueValueExpr 0x1f5e260a9a0 <<invalid sloc>> '_Bool'
|   |   | `-GotoStmt 0x1f5e260a988 <col:13, col:18> 'error' 0x1f5e2607fe0
|   |   `-IfStmt 0x1f5e260aae8 <line:845:9, line:846:18>
|   |     |-OpaqueValueExpr 0x1f5e260aad0 <<invalid sloc>> '_Bool'
|   |     `-GotoStmt 0x1f5e260aab8 <col:13, col:18> 'error' 0x1f5e2607fe0
|   |-IfStmt 0x1f5e260acb0 <line:851:5, line:852:16>
|   | |-OpaqueValueExpr 0x1f5e260ac98 <<invalid sloc>> '_Bool'
|   | `-BinaryOperator 0x1f5e260ac78 <col:9, col:16> 'unsigned char *' '='
|   |   |-UnaryOperator 0x1f5e260ac28 <col:9, col:10> 'unsigned char *' lvalue prefix '*' cannot overflow
|   |   | `-ImplicitCastExpr 0x1f5e260ac10 <col:10> 'unsigned char **' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x1f5e260abf0 <col:10> 'unsigned char **' lvalue ParmVar 0x1f5e2607140 'out' 'unsigned char **'
|   |   `-ImplicitCastExpr 0x1f5e260ac60 <col:16> 'unsigned char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x1f5e260ac40 <col:16> 'unsigned char *' lvalue Var 0x1f5e2607748 'start' 'unsigned char *'
|   |-ReturnStmt 0x1f5e260ad00 <line:854:5, col:12>
|   | `-ImplicitCastExpr 0x1f5e260ace8 <col:12> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x1f5e260acc8 <col:12> 'int' lvalue Var 0x1f5e2607570 'outlen' 'int'
|   |-LabelStmt 0x1f5e260ad38 <line:856:2, col:7> 'error'
|   | `-NullStmt 0x1f5e260ad30 <col:7>
|   |-IfStmt 0x1f5e260ae50 <line:858:5, line:859:27>
|   | |-OpaqueValueExpr 0x1f5e260ae38 <<invalid sloc>> '_Bool'
|   | `-CallExpr 0x1f5e260adf8 <col:9, col:27> 'int'
|   |   |-ImplicitCastExpr 0x1f5e260ade0 <col:9> 'int (*)()' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x1f5e260ada0 <col:9> 'int ()' Function 0x1f5e25f3430 'OPENSSL_free' 'int ()'
|   |   `-ImplicitCastExpr 0x1f5e260ae20 <col:22> 'unsigned char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x1f5e260adc0 <col:22> 'unsigned char *' lvalue Var 0x1f5e2607748 'start' 'unsigned char *'
|   `-ReturnStmt 0x1f5e260aea8 <line:860:5, col:13>
|     `-UnaryOperator 0x1f5e260ae90 <col:12, col:13> 'int' prefix '-'
|       `-IntegerLiteral 0x1f5e260ae68 <col:13> 'int' 1
`-FunctionDecl 0x1f5e260b290 <line:863:1, line:878:1> line:863:5 invalid i2b_PVK_bio 'int (int *, int *, int, int *, void *)'
  |-ParmVarDecl 0x1f5e260af88 <col:17, col:22> col:22 invalid out 'int *'
  |-ParmVarDecl 0x1f5e260b008 <col:27, col:37> col:37 invalid pk 'int *'
  |-ParmVarDecl 0x1f5e260b088 <col:41, col:45> col:45 used enclevel 'int'
  |-ParmVarDecl 0x1f5e260b108 <line:864:17, col:34> col:34 invalid cb 'int *'
  |-ParmVarDecl 0x1f5e260b188 <col:38, col:44> col:44 used u 'void *'
  `-CompoundStmt 0x1f5e260b9e0 <line:865:1, line:878:1>
    |-DeclStmt 0x1f5e260b3f0 <line:866:5, col:30>
    | `-VarDecl 0x1f5e260b388 <col:5, col:20> col:20 used tmp 'unsigned char *'
    |-DeclStmt 0x1f5e260b520 <line:867:5, col:22>
    | |-VarDecl 0x1f5e260b420 <col:5, col:9> col:9 used outlen 'int'
    | `-VarDecl 0x1f5e260b4a0 <col:5, col:17> col:17 used wrlen 'int'
    |-IfStmt 0x1f5e260b720 <line:869:5, line:870:17>
    | |-BinaryOperator 0x1f5e260b6b0 <line:869:9, col:18> 'int' '<'
    | | |-ImplicitCastExpr 0x1f5e260b698 <col:9> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x1f5e260b650 <col:9> 'int' lvalue Var 0x1f5e260b420 'outlen' 'int'
    | | `-IntegerLiteral 0x1f5e260b670 <col:18> 'int' 0
    | `-ReturnStmt 0x1f5e260b710 <line:870:9, col:17>
    |   `-UnaryOperator 0x1f5e260b6f8 <col:16, col:17> 'int' prefix '-'
    |     `-IntegerLiteral 0x1f5e260b6d0 <col:17> 'int' 1
    |-CallExpr 0x1f5e260b828 <line:872:5, col:21> 'int'
    | |-ImplicitCastExpr 0x1f5e260b810 <col:5> 'int (*)()' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x1f5e260b7d0 <col:5> 'int ()' Function 0x1f5e25f3430 'OPENSSL_free' 'int ()'
    | `-ImplicitCastExpr 0x1f5e260b850 <col:18> 'unsigned char *' <LValueToRValue>
    |   `-DeclRefExpr 0x1f5e260b7f0 <col:18> 'unsigned char *' lvalue Var 0x1f5e260b388 'tmp' 'unsigned char *'
    |-IfStmt 0x1f5e260b978 <line:873:5, line:876:5>
    | |-BinaryOperator 0x1f5e260b8d8 <line:873:9, col:18> 'int' '=='
    | | |-ImplicitCastExpr 0x1f5e260b8a8 <col:9> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x1f5e260b868 <col:9> 'int' lvalue Var 0x1f5e260b4a0 'wrlen' 'int'
    | | `-ImplicitCastExpr 0x1f5e260b8c0 <col:18> 'int' <LValueToRValue>
    | |   `-DeclRefExpr 0x1f5e260b888 <col:18> 'int' lvalue Var 0x1f5e260b420 'outlen' 'int'
    | `-CompoundStmt 0x1f5e260b960 <col:26, line:876:5>
    |   `-ReturnStmt 0x1f5e260b950 <line:875:9, col:16>
    |     `-ImplicitCastExpr 0x1f5e260b938 <col:16> 'int' <LValueToRValue>
    |       `-DeclRefExpr 0x1f5e260b918 <col:16> 'int' lvalue Var 0x1f5e260b420 'outlen' 'int'
    `-ReturnStmt 0x1f5e260b9d0 <line:877:5, col:13>
      `-UnaryOperator 0x1f5e260b9b8 <col:12, col:13> 'int' prefix '-'
        `-IntegerLiteral 0x1f5e260b990 <col:13> 'int' 1
