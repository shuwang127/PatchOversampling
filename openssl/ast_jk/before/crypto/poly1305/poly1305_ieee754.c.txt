TranslationUnitDecl 0x1f909b13ce8 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1f909b14580 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x1f909b14280 '__int128'
|-TypedefDecl 0x1f909b145f0 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x1f909b142a0 'unsigned __int128'
|-TypedefDecl 0x1f909b14928 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x1f909b146e0 'struct __NSConstantString_tag'
|   `-Record 0x1f909b14648 '__NSConstantString_tag'
|-TypedefDecl 0x1f909b14998 <<invalid sloc>> <invalid sloc> implicit size_t 'unsigned long long'
| `-BuiltinType 0x1f909b13ec0 'unsigned long long'
|-TypedefDecl 0x1f909b14a30 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x1f909b149f0 'char *'
|   `-BuiltinType 0x1f909b13d80 'char'
|-TypedefDecl 0x1f909b14aa0 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x1f909b149f0 'char *'
|   `-BuiltinType 0x1f909b13d80 'char'
|-TypedefDecl 0x1f909b14b60 <D:\Microsoft Visual Studio 12.0\VC\include\vadefs.h:48:1, col:29> col:29 referenced uintptr_t 'unsigned long long'
| `-BuiltinType 0x1f909b13ec0 'unsigned long long'
|-TypedefDecl 0x1f909b14bd0 <line:59:1, col:17> col:17 referenced va_list 'char *'
| `-PointerType 0x1f909b149f0 'char *'
|   `-BuiltinType 0x1f909b13d80 'char'
|-FunctionDecl 0x1f90b584440 <line:119:21> col:21 implicit __va_start 'void (char **, ...)' extern
| |-ParmVarDecl 0x1f90b5844e0 <<invalid sloc>> <invalid sloc> 'char **'
| `-NoThrowAttr 0x1f90b584550 <col:21> Implicit
|-FunctionDecl 0x1f90b5845a8 prev 0x1f90b584440 <col:1, col:46> col:21 __va_start 'void (char **, ...)' extern
| |-ParmVarDecl 0x1f90b5842d0 <col:32, col:40> col:41 'va_list *'
| `-NoThrowAttr 0x1f90b584698 <col:21> Inherited Implicit
|-TypedefDecl 0x1f90b5846d8 prev 0x1f909b14998 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:494:1, col:29> col:29 referenced size_t 'unsigned long long'
| `-BuiltinType 0x1f909b13ec0 'unsigned long long'
|-TypedefDecl 0x1f90b584780 <line:503:1, col:16> col:16 referenced rsize_t 'size_t':'unsigned long long'
| `-TypedefType 0x1f90b584750 'size_t' sugar
|   |-Typedef 0x1f90b5846d8 'size_t'
|   `-BuiltinType 0x1f909b13ec0 'unsigned long long'
|-TypedefDecl 0x1f90b5847f0 <line:510:1, col:29> col:29 intptr_t 'long long'
| `-BuiltinType 0x1f909b13e20 'long long'
|-TypedefDecl 0x1f90b584860 <line:528:1, col:29> col:29 ptrdiff_t 'long long'
| `-BuiltinType 0x1f909b13e20 'long long'
|-TypedefDecl 0x1f90b5848d0 <line:536:1, col:24> col:24 referenced wchar_t 'unsigned short'
| `-BuiltinType 0x1f909b13e60 'unsigned short'
|-TypedefDecl 0x1f90b584940 <line:541:1, col:24> col:24 wint_t 'unsigned short'
| `-BuiltinType 0x1f909b13e60 'unsigned short'
|-TypedefDecl 0x1f90b5849b0 <line:542:1, col:24> col:24 wctype_t 'unsigned short'
| `-BuiltinType 0x1f909b13e60 'unsigned short'
|-TypedefDecl 0x1f90b584a20 <line:563:1, col:13> col:13 referenced errno_t 'int'
| `-BuiltinType 0x1f909b13de0 'int'
|-TypedefDecl 0x1f90b584a90 <line:567:1, col:19> col:19 __time32_t 'long'
| `-BuiltinType 0x1f909b13e00 'long'
|-TypedefDecl 0x1f90b584b00 <line:572:1, col:17> col:17 referenced __time64_t 'long long'
| `-BuiltinType 0x1f909b13e20 'long long'
|-TypedefDecl 0x1f90b584b90 <line:580:1, col:20> col:20 time_t '__time64_t':'long long'
| `-TypedefType 0x1f90b584b60 '__time64_t' sugar
|   |-Typedef 0x1f90b584b00 '__time64_t'
|   `-BuiltinType 0x1f909b13e20 'long long'
|-FunctionDecl 0x1f90b584d08 <line:637:10, col:53> col:23 _invalid_parameter_noinfo 'void (void) __attribute__((cdecl))':'void (void)'
|-FunctionDecl 0x1f90b584f28 <line:638:10, col:83> col:44 _invalid_parameter_noinfo_noreturn 'void (void) __attribute__((noreturn)) __attribute__((cdecl))':'void (void) __attribute__((noreturn))'
|-FunctionDecl 0x1f90b5bd080 <line:641:9, line:642:136> col:14 _invoke_watson 'void (const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t) __attribute__((noreturn)) __attribute__((cdecl))':'void (const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t) __attribute__((noreturn))'
| |-ParmVarDecl 0x1f90b585068 <col:40, col:54> col:55 'const wchar_t *'
| |-ParmVarDecl 0x1f90b5850e0 <col:68, col:82> col:83 'const wchar_t *'
| |-ParmVarDecl 0x1f90b585158 <col:96, col:110> col:111 'const wchar_t *'
| |-ParmVarDecl 0x1f90b5851d8 <col:113, col:122> col:125 'unsigned int'
| `-ParmVarDecl 0x1f90b5bce20 <col:127> col:136 'uintptr_t':'unsigned long long'
|-RecordDecl 0x1f90b5bd160 <line:2072:1, col:8> col:8 struct threadlocaleinfostruct
|-RecordDecl 0x1f90b5bd220 <line:2073:1, col:8> col:8 struct threadmbcinfostruct
|-TypedefDecl 0x1f90b5bd390 <line:2074:1, col:41> col:41 referenced pthreadlocinfo 'struct threadlocaleinfostruct *'
| `-PointerType 0x1f90b5bd340 'struct threadlocaleinfostruct *'
|   `-ElaboratedType 0x1f90b5bd2e0 'struct threadlocaleinfostruct' sugar
|     `-RecordType 0x1f90b5bd200 'struct threadlocaleinfostruct'
|       `-Record 0x1f90b5c5eb0 'threadlocaleinfostruct'
|-TypedefDecl 0x1f90b5bd4a0 <line:2075:1, col:38> col:38 referenced pthreadmbcinfo 'struct threadmbcinfostruct *'
| `-PointerType 0x1f90b5bd450 'struct threadmbcinfostruct *'
|   `-ElaboratedType 0x1f90b5bd3f0 'struct threadmbcinfostruct' sugar
|     `-RecordType 0x1f90b5bd2c0 'struct threadmbcinfostruct'
|       `-Record 0x1f90b5bd220 'threadmbcinfostruct'
|-RecordDecl 0x1f90b5bd4f8 <line:2076:1, col:8> col:8 struct __lc_time_data
|-RecordDecl 0x1f90b5bd5b0 <line:2078:9, line:2082:1> line:2078:16 struct localeinfo_struct definition
| |-MaxFieldAlignmentAttr 0x1f90b5bd670 <<invalid sloc>> Implicit 64
| |-FieldDecl 0x1f90b5bd700 <line:2080:5, col:20> col:20 locinfo 'pthreadlocinfo':'struct threadlocaleinfostruct *'
| `-FieldDecl 0x1f90b5bd790 <line:2081:5, col:20> col:20 mbcinfo 'pthreadmbcinfo':'struct threadmbcinfostruct *'
|-TypedefDecl 0x1f90b5bd848 <line:2078:1, line:2082:3> col:3 _locale_tstruct 'struct localeinfo_struct':'struct localeinfo_struct'
| `-ElaboratedType 0x1f90b5bd7f0 'struct localeinfo_struct' sugar
|   `-RecordType 0x1f90b5bd650 'struct localeinfo_struct'
|     `-Record 0x1f90b5bd5b0 'localeinfo_struct'
|-TypedefDecl 0x1f90b5bd920 <line:2078:1, line:2082:21> col:21 referenced _locale_t 'struct localeinfo_struct *'
| `-PointerType 0x1f90b5bd8d0 'struct localeinfo_struct *'
|   `-ElaboratedType 0x1f90b5bd7f0 'struct localeinfo_struct' sugar
|     `-RecordType 0x1f90b5bd650 'struct localeinfo_struct'
|       `-Record 0x1f90b5bd5b0 'localeinfo_struct'
|-RecordDecl 0x1f90b5bd998 <line:2085:9, line:2090:1> line:2085:16 struct localerefcount definition
| |-MaxFieldAlignmentAttr 0x1f90b5bda50 <<invalid sloc>> Implicit 64
| |-FieldDecl 0x1f90b5bdac8 <line:2086:9, col:15> col:15 locale 'char *'
| |-FieldDecl 0x1f90b5bdb88 <line:2087:9, col:18> col:18 wlocale 'wchar_t *'
| |-FieldDecl 0x1f90b5bdc20 <line:2088:9, col:14> col:14 refcount 'int *'
| `-FieldDecl 0x1f90b5bdc90 <line:2089:9, col:14> col:14 wrefcount 'int *'
|-TypedefDecl 0x1f90b5bdd48 <line:2085:1, line:2090:3> col:3 referenced locrefcount 'struct localerefcount':'struct localerefcount'
| `-ElaboratedType 0x1f90b5bdcf0 'struct localerefcount' sugar
|   `-RecordType 0x1f90b5bda30 'struct localerefcount'
|     `-Record 0x1f90b5bd998 'localerefcount'
|-RecordDecl 0x1f90b5c5eb0 prev 0x1f90b5bd160 <line:2092:9, line:2111:1> line:2092:16 struct threadlocaleinfostruct definition
| |-MaxFieldAlignmentAttr 0x1f90b5c5f30 <<invalid sloc>> Implicit 64
| |-FieldDecl 0x1f90b5c5fa8 <line:2093:9, col:13> col:13 refcount 'int'
| |-FieldDecl 0x1f90b5c6018 <line:2094:9, col:22> col:22 lc_codepage 'unsigned int'
| |-FieldDecl 0x1f90b5c6088 <line:2095:9, col:22> col:22 lc_collate_cp 'unsigned int'
| |-FieldDecl 0x1f90b5c60f8 <line:2096:9, col:22> col:22 lc_time_cp 'unsigned int'
| |-FieldDecl 0x1f90b5c62b8 <line:2097:9, col:34> col:21 lc_category 'locrefcount [6]'
| |-FieldDecl 0x1f90b5c6328 <line:2098:9, col:13> col:13 lc_clike 'int'
| |-FieldDecl 0x1f90b5c6398 <line:2099:9, col:13> col:13 mb_cur_max 'int'
| |-FieldDecl 0x1f90b5c6408 <line:2100:9, col:15> col:15 lconv_intl_refcount 'int *'
| |-FieldDecl 0x1f90b5c6478 <line:2101:9, col:15> col:15 lconv_num_refcount 'int *'
| |-FieldDecl 0x1f90b5c64e8 <line:2102:9, col:15> col:15 lconv_mon_refcount 'int *'
| |-RecordDecl 0x1f90b5c6540 parent 0x1f909b13ce8 <line:2103:9, col:16> col:16 struct lconv
| |-FieldDecl 0x1f90b5c66d0 <col:9, col:24> col:24 lconv 'struct lconv *'
| |-FieldDecl 0x1f90b5c6740 <line:2104:9, col:15> col:15 ctype1_refcount 'int *'
| |-FieldDecl 0x1f90b5c67b0 <line:2105:9, col:26> col:26 ctype1 'unsigned short *'
| |-FieldDecl 0x1f90b5c6820 <line:2106:9, col:32> col:32 pctype 'const unsigned short *'
| |-FieldDecl 0x1f90b5c68c0 <line:2107:9, col:31> col:31 pclmap 'const unsigned char *'
| |-FieldDecl 0x1f90b5c6930 <line:2108:9, col:31> col:31 pcumap 'const unsigned char *'
| |-FieldDecl 0x1f90b5c6a40 <line:2109:9, col:33> col:33 lc_time_curr 'struct __lc_time_data *'
| `-FieldDecl 0x1f90b5c6b78 <line:2110:9, col:32> col:19 locale_name 'wchar_t *[6]'
|-TypedefDecl 0x1f90b5c6c28 <line:2092:1, line:2111:3> col:3 threadlocinfo 'struct threadlocaleinfostruct':'struct threadlocaleinfostruct'
| `-ElaboratedType 0x1f90b5c6bd0 'struct threadlocaleinfostruct' sugar
|   `-RecordType 0x1f90b5bd200 'struct threadlocaleinfostruct'
|     `-Record 0x1f90b5c5eb0 'threadlocaleinfostruct'
|-TypedefDecl 0x1f90b5caf00 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:52:1, col:24> col:24 referenced _onexit_t 'int (*)(void) __attribute__((cdecl))'
| `-PointerType 0x1f90b5c6e20 'int (*)(void) __attribute__((cdecl))'
|   `-AttributedType 0x1f90b5c6dc0 'int (void) __attribute__((cdecl))' sugar
|     |-ParenType 0x1f90b5c6d70 'int (void)' sugar
|     | `-FunctionProtoType 0x1f90b5c6d40 'int (void)' cdecl
|     |   `-BuiltinType 0x1f909b13de0 'int'
|     `-ParenType 0x1f90b5c6d70 'int (void)' sugar
|       `-FunctionProtoType 0x1f90b5c6d40 'int (void)' cdecl
|         `-BuiltinType 0x1f909b13de0 'int'
|-RecordDecl 0x1f90b5caf58 <line:75:9, line:78:1> line:75:16 struct _div_t definition
| |-MaxFieldAlignmentAttr 0x1f90b5cb010 <<invalid sloc>> Implicit 64
| |-FieldDecl 0x1f90b5cb088 <line:76:9, col:13> col:13 quot 'int'
| `-FieldDecl 0x1f90b5cb0f8 <line:77:9, col:13> col:13 rem 'int'
|-TypedefDecl 0x1f90b5cb1a8 <line:75:1, line:78:3> col:3 referenced div_t 'struct _div_t':'struct _div_t'
| `-ElaboratedType 0x1f90b5cb150 'struct _div_t' sugar
|   `-RecordType 0x1f90b5caff0 'struct _div_t'
|     `-Record 0x1f90b5caf58 '_div_t'
|-RecordDecl 0x1f90b5cb218 <line:80:9, line:83:1> line:80:16 struct _ldiv_t definition
| |-MaxFieldAlignmentAttr 0x1f90b5cb2d0 <<invalid sloc>> Implicit 64
| |-FieldDecl 0x1f90b5cb348 <line:81:9, col:14> col:14 quot 'long'
| `-FieldDecl 0x1f90b5cb3b8 <line:82:9, col:14> col:14 rem 'long'
|-TypedefDecl 0x1f90b5cb468 <line:80:1, line:83:3> col:3 referenced ldiv_t 'struct _ldiv_t':'struct _ldiv_t'
| `-ElaboratedType 0x1f90b5cb410 'struct _ldiv_t' sugar
|   `-RecordType 0x1f90b5cb2b0 'struct _ldiv_t'
|     `-Record 0x1f90b5cb218 '_ldiv_t'
|-RecordDecl 0x1f90b5cb4d8 <line:85:9, line:88:1> line:85:16 struct _lldiv_t definition
| |-MaxFieldAlignmentAttr 0x1f90b5cb590 <<invalid sloc>> Implicit 64
| |-FieldDecl 0x1f90b5cb608 <line:86:9, col:19> col:19 quot 'long long'
| `-FieldDecl 0x1f90b5cb678 <line:87:9, col:19> col:19 rem 'long long'
|-TypedefDecl 0x1f90b5cb728 <line:85:1, line:88:3> col:3 referenced lldiv_t 'struct _lldiv_t':'struct _lldiv_t'
| `-ElaboratedType 0x1f90b5cb6d0 'struct _lldiv_t' sugar
|   `-RecordType 0x1f90b5cb570 'struct _lldiv_t'
|     `-Record 0x1f90b5cb4d8 '_lldiv_t'
|-RecordDecl 0x1f90b5cb7c0 <line:103:9, line:105:1> line:103:9 struct definition
| |-MaxFieldAlignmentAttr 0x1f90b5cb880 <<invalid sloc>> Implicit 32
| `-FieldDecl 0x1f90b5cb980 <line:104:5, col:24> col:19 ld 'unsigned char [10]'
|-TypedefDecl 0x1f90b5cba38 <line:103:1, line:105:3> col:3 referenced _LDOUBLE 'struct _LDOUBLE':'_LDOUBLE'
| `-ElaboratedType 0x1f90b5cb9e0 'struct _LDOUBLE' sugar
|   `-RecordType 0x1f90b5cb860 '_LDOUBLE'
|     `-Record 0x1f90b5cb7c0 ''
|-RecordDecl 0x1f90b5cbaa8 <line:122:9, line:124:1> line:122:9 struct definition
| `-FieldDecl 0x1f90b5cbb78 <line:123:9, col:16> col:16 x 'double'
|-TypedefDecl 0x1f90b5cbc28 <line:122:1, line:124:3> col:3 referenced _CRT_DOUBLE 'struct _CRT_DOUBLE':'_CRT_DOUBLE'
| `-ElaboratedType 0x1f90b5cbbd0 'struct _CRT_DOUBLE' sugar
|   `-RecordType 0x1f90b5cbb40 '_CRT_DOUBLE'
|     `-Record 0x1f90b5cbaa8 ''
|-RecordDecl 0x1f90b5cbc98 <line:126:9, line:128:1> line:126:9 struct definition
| `-FieldDecl 0x1f90b5cbd68 <line:127:5, col:11> col:11 f 'float'
|-TypedefDecl 0x1f90b5cbe18 <line:126:1, line:128:3> col:3 referenced _CRT_FLOAT 'struct _CRT_FLOAT':'_CRT_FLOAT'
| `-ElaboratedType 0x1f90b5cbdc0 'struct _CRT_FLOAT' sugar
|   `-RecordType 0x1f90b5cbd30 '_CRT_FLOAT'
|     `-Record 0x1f90b5cbc98 ''
|-RecordDecl 0x1f90b5cef40 <line:134:9, line:139:1> line:134:9 struct definition
| `-FieldDecl 0x1f90b5cf018 <line:138:9, col:21> col:21 x 'long double'
|-TypedefDecl 0x1f90b5cf0c8 <line:134:1, line:139:3> col:3 _LONGDOUBLE 'struct _LONGDOUBLE':'_LONGDOUBLE'
| `-ElaboratedType 0x1f90b5cf070 'struct _LONGDOUBLE' sugar
|   `-RecordType 0x1f90b5cefe0 '_LONGDOUBLE'
|     `-Record 0x1f90b5cef40 ''
|-RecordDecl 0x1f90b5cf160 <line:144:9, line:146:1> line:144:9 struct definition
| |-MaxFieldAlignmentAttr 0x1f90b5cf220 <<invalid sloc>> Implicit 32
| `-FieldDecl 0x1f90b5cf320 <line:145:5, col:26> col:19 ld12 'unsigned char [12]'
|-TypedefDecl 0x1f90b5cf3d8 <line:144:1, line:146:3> col:3 _LDBL12 'struct _LDBL12':'_LDBL12'
| `-ElaboratedType 0x1f90b5cf380 'struct _LDBL12' sugar
|   `-RecordType 0x1f90b5cf200 '_LDBL12'
|     `-Record 0x1f90b5cf160 ''
|-VarDecl 0x1f90b5cf460 <line:170:9, col:20> col:20 __mb_cur_max 'int' extern
|-FunctionDecl 0x1f90b5cf5e0 <line:175:9, col:44> col:21 ___mb_cur_max_func 'int (void) __attribute__((cdecl))':'int (void)'
|-FunctionDecl 0x1f90b5cf838 <line:176:9, col:51> col:21 ___mb_cur_max_l_func 'int (_locale_t) __attribute__((cdecl))':'int (_locale_t)'
| `-ParmVarDecl 0x1f90b5cf6d0 <col:42> col:51 '_locale_t':'struct localeinfo_struct *'
|-TypedefDecl 0x1f90b5cfa80 <line:215:1, col:24> col:24 referenced _purecall_handler 'void (*)(void) __attribute__((cdecl))'
| `-PointerType 0x1f90b5cfa20 'void (*)(void) __attribute__((cdecl))'
|   `-AttributedType 0x1f90b5cf9c0 'void (void) __attribute__((cdecl))' sugar
|     |-ParenType 0x1f90b5cf970 'void (void)' sugar
|     | `-FunctionProtoType 0x1f90b584c60 'void (void)' cdecl
|     |   `-BuiltinType 0x1f909b13d40 'void'
|     `-ParenType 0x1f90b5cf970 'void (void)' sugar
|       `-FunctionProtoType 0x1f90b584c60 'void (void)' cdecl
|         `-BuiltinType 0x1f909b13d40 'void'
|-FunctionDecl 0x1f90b5cfc80 <line:218:9, col:92> col:35 _set_purecall_handler '_purecall_handler (_purecall_handler) __attribute__((cdecl))':'_purecall_handler (_purecall_handler)'
| `-ParmVarDecl 0x1f90b5cfb10 <col:66, col:84> col:84 _Handler '_purecall_handler':'void (*)(void) __attribute__((cdecl))'
|-FunctionDecl 0x1f90b5cfe98 <line:219:9, col:61> col:35 _get_purecall_handler '_purecall_handler (void) __attribute__((cdecl))':'_purecall_handler (void)'
|-TypedefDecl 0x1f90b5d0308 <line:235:1, col:24> col:24 referenced _invalid_parameter_handler 'void (*)(const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t) __attribute__((cdecl))'
| `-PointerType 0x1f90b5d0280 'void (*)(const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t) __attribute__((cdecl))'
|   `-AttributedType 0x1f90b5d0220 'void (const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t) __attribute__((cdecl))' sugar
|     |-ParenType 0x1f90b5d01d0 'void (const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t)' sugar
|     | `-FunctionProtoType 0x1f90b5bcee0 'void (const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t)' cdecl
|     |   |-BuiltinType 0x1f909b13d40 'void'
|     |   |-PointerType 0x1f90b585030 'const wchar_t *'
|     |   | `-QualType 0x1f90b584fe1 'const wchar_t' const
|     |   |   `-TypedefType 0x1f90b584fe0 'wchar_t' sugar
|     |   |     |-Typedef 0x1f90b5848d0 'wchar_t'
|     |   |     `-BuiltinType 0x1f909b13e60 'unsigned short'
|     |   |-PointerType 0x1f90b585030 'const wchar_t *'
|     |   | `-QualType 0x1f90b584fe1 'const wchar_t' const
|     |   |   `-TypedefType 0x1f90b584fe0 'wchar_t' sugar
|     |   |     |-Typedef 0x1f90b5848d0 'wchar_t'
|     |   |     `-BuiltinType 0x1f909b13e60 'unsigned short'
|     |   |-PointerType 0x1f90b585030 'const wchar_t *'
|     |   | `-QualType 0x1f90b584fe1 'const wchar_t' const
|     |   |   `-TypedefType 0x1f90b584fe0 'wchar_t' sugar
|     |   |     |-Typedef 0x1f90b5848d0 'wchar_t'
|     |   |     `-BuiltinType 0x1f909b13e60 'unsigned short'
|     |   |-BuiltinType 0x1f909b13e80 'unsigned int'
|     |   `-TypedefType 0x1f90b585240 'uintptr_t' sugar
|     |     |-Typedef 0x1f909b14b60 'uintptr_t'
|     |     `-BuiltinType 0x1f909b13ec0 'unsigned long long'
|     `-ParenType 0x1f90b5d01d0 'void (const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t)' sugar
|       `-FunctionProtoType 0x1f90b5bcee0 'void (const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t)' cdecl
|         |-BuiltinType 0x1f909b13d40 'void'
|         |-PointerType 0x1f90b585030 'const wchar_t *'
|         | `-QualType 0x1f90b584fe1 'const wchar_t' const
|         |   `-TypedefType 0x1f90b584fe0 'wchar_t' sugar
|         |     |-Typedef 0x1f90b5848d0 'wchar_t'
|         |     `-BuiltinType 0x1f909b13e60 'unsigned short'
|         |-PointerType 0x1f90b585030 'const wchar_t *'
|         | `-QualType 0x1f90b584fe1 'const wchar_t' const
|         |   `-TypedefType 0x1f90b584fe0 'wchar_t' sugar
|         |     |-Typedef 0x1f90b5848d0 'wchar_t'
|         |     `-BuiltinType 0x1f909b13e60 'unsigned short'
|         |-PointerType 0x1f90b585030 'const wchar_t *'
|         | `-QualType 0x1f90b584fe1 'const wchar_t' const
|         |   `-TypedefType 0x1f90b584fe0 'wchar_t' sugar
|         |     |-Typedef 0x1f90b5848d0 'wchar_t'
|         |     `-BuiltinType 0x1f909b13e60 'unsigned short'
|         |-BuiltinType 0x1f909b13e80 'unsigned int'
|         `-TypedefType 0x1f90b585240 'uintptr_t' sugar
|           |-Typedef 0x1f909b14b60 'uintptr_t'
|           `-BuiltinType 0x1f909b13ec0 'unsigned long long'
|-FunctionDecl 0x1f90b5d0500 <line:238:9, col:119> col:44 _set_invalid_parameter_handler '_invalid_parameter_handler (_invalid_parameter_handler) __attribute__((cdecl))':'_invalid_parameter_handler (_invalid_parameter_handler)'
| `-ParmVarDecl 0x1f90b5d0390 <col:84, col:111> col:111 _Handler '_invalid_parameter_handler':'void (*)(const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t) __attribute__((cdecl))'
|-FunctionDecl 0x1f90b5d0718 <line:239:9, col:79> col:44 _get_invalid_parameter_handler '_invalid_parameter_handler (void) __attribute__((cdecl))':'_invalid_parameter_handler (void)'
|-FunctionDecl 0x1f90b5d0900 <line:245:9, col:41> col:30 _errno 'int *(void) __attribute__((cdecl))':'int *(void)' extern
|-FunctionDecl 0x1f90b5d0b70 <line:248:1, col:43> col:17 _set_errno 'errno_t (int) __attribute__((cdecl))':'errno_t (int)'
| `-ParmVarDecl 0x1f90b5d09f8 <col:33, col:37> col:37 _Value 'int'
|-FunctionDecl 0x1f90b5d0dc0 <line:249:1, col:46> col:17 _get_errno 'errno_t (int *) __attribute__((cdecl))':'errno_t (int *)'
| `-ParmVarDecl 0x1f90b5d0c48 <col:34, col:40> col:40 _Value 'int *'
|-FunctionDecl 0x1f90b5d1010 <line:252:9, col:48> col:33 __doserrno 'unsigned long *(void) __attribute__((cdecl))':'unsigned long *(void)'
|-FunctionDecl 0x1f90b5d1250 <line:255:1, col:56> col:17 _set_doserrno 'errno_t (unsigned long) __attribute__((cdecl))':'errno_t (unsigned long)'
| `-ParmVarDecl 0x1f90b5d10e0 <col:36, col:50> col:50 _Value 'unsigned long'
|-FunctionDecl 0x1f90b5d14a0 <line:256:1, col:59> col:17 _get_doserrno 'errno_t (unsigned long *) __attribute__((cdecl))':'errno_t (unsigned long *)'
| `-ParmVarDecl 0x1f90b5d1328 <col:37, col:53> col:53 _Value 'unsigned long *'
|-FunctionDecl 0x1f90b5d1780 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:259:77> col:59 __sys_errlist 'char **(void) __attribute__((cdecl))':'char **(void)'
| `-DeprecatedAttr 0x1f90b5d1820 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using strerror instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f90b5d1ae0 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:262:72> col:57 __sys_nerr 'int *(void) __attribute__((cdecl))':'int *(void)'
| `-DeprecatedAttr 0x1f90b5d1b80 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using strerror instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-VarDecl 0x1f90b5d1cc8 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:288:9, col:20> col:20 __argc 'int' extern
|-VarDecl 0x1f90b5d1d60 <line:289:9, col:24> col:24 __argv 'char **' extern
|-VarDecl 0x1f90b5d1e50 <line:290:9, col:27> col:27 __wargv 'wchar_t **' extern
|-VarDecl 0x1f90b5d1ee8 <line:306:9, col:24> col:24 _environ 'char **' extern
|-VarDecl 0x1f90b5d2fb0 <line:307:9, col:27> col:27 _wenviron 'wchar_t **' extern
|-VarDecl 0x1f90b5d3140 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:311:68> col:68 _pgmptr 'char *' extern
| `-DeprecatedAttr 0x1f90b5d31a8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _get_pgmptr instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-VarDecl 0x1f90b5d33e8 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:312:72> col:72 _wpgmptr 'wchar_t *' extern
| `-DeprecatedAttr 0x1f90b5d3450 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _get_wpgmptr instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f90b5d3710 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:339:1, col:61> col:17 _get_pgmptr 'errno_t (char **) __attribute__((cdecl))':'errno_t (char **)'
| `-ParmVarDecl 0x1f90b5d3598 <col:47, col:55> col:55 _Value 'char **'
|-FunctionDecl 0x1f90b5d3960 <line:340:1, col:65> col:17 _get_wpgmptr 'errno_t (wchar_t **) __attribute__((cdecl))':'errno_t (wchar_t **)'
| `-ParmVarDecl 0x1f90b5d37e8 <col:48, col:59> col:59 _Value 'wchar_t **'
|-VarDecl 0x1f90b5d3b30 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:346:64> col:64 _fmode 'int' extern
| `-DeprecatedAttr 0x1f90b5d3b98 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _get_fmode instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f90b5d3db8 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:353:9, col:50> col:25 _set_fmode 'errno_t (int) __attribute__((cdecl))':'errno_t (int)'
| `-ParmVarDecl 0x1f90b5d3ce0 <col:41, col:45> col:45 _Mode 'int'
|-FunctionDecl 0x1f90b5d3f90 <line:354:9, col:54> col:25 _get_fmode 'errno_t (int *) __attribute__((cdecl))':'errno_t (int *)'
| `-ParmVarDecl 0x1f90b5d3e90 <col:42, col:48> col:48 _PMode 'int *'
|-FunctionDecl 0x1f90b5d41e0 <line:376:43> col:43 implicit exit 'void (int) __attribute__((noreturn))' extern
| `-ParmVarDecl 0x1f90b5d4280 <<invalid sloc>> <invalid sloc> 'int'
|-FunctionDecl 0x1f90b5d42f0 prev 0x1f90b5d41e0 <col:9, col:62> col:43 exit 'void (int) __attribute__((noreturn))'
| `-ParmVarDecl 0x1f90b5d4068 <col:53, col:57> col:57 _Code 'int'
|-FunctionDecl 0x1f90b5d44a0 <line:378:43> col:43 implicit _exit 'void (int) __attribute__((noreturn))' extern
| `-ParmVarDecl 0x1f90b5d4540 <<invalid sloc>> <invalid sloc> 'int'
|-FunctionDecl 0x1f90b5d45b0 prev 0x1f90b5d44a0 <col:9, col:63> col:43 _exit 'void (int) __attribute__((noreturn))'
| `-ParmVarDecl 0x1f90b5d43c8 <col:54, col:58> col:58 _Code 'int'
|-FunctionDecl 0x1f90b5d4738 <line:379:43> col:43 implicit abort 'void (void) __attribute__((noreturn))' extern
|-FunctionDecl 0x1f90b5d47d8 prev 0x1f90b5d4738 <col:9, col:53> col:43 abort 'void (void) __attribute__((noreturn))'
|-FunctionDecl 0x1f90b5d4a90 <line:382:9, col:99> col:30 _set_abort_behavior 'unsigned int (unsigned int, unsigned int) __attribute__((cdecl))':'unsigned int (unsigned int, unsigned int)'
| |-ParmVarDecl 0x1f90b5d48a8 <col:55, col:68> col:68 _Flags 'unsigned int'
| `-ParmVarDecl 0x1f90b5d4928 <col:81, col:94> col:94 _Mask 'unsigned int'
|-FunctionDecl 0x1f90b5d4c88 <line:384:19> col:19 implicit abs 'int (int)' extern
| |-ParmVarDecl 0x1f90b5d4d28 <<invalid sloc>> <invalid sloc> 'int'
| |-NoThrowAttr 0x1f90b5d4d98 <col:19> Implicit
| `-ConstAttr 0x1f90b5d4df0 <col:19> Implicit
|-FunctionDecl 0x1f90b5d4e18 prev 0x1f90b5d4c88 <col:1, col:34> col:19 abs 'int (int)'
| |-ParmVarDecl 0x1f90b5d4b70 <col:28, col:32> col:32 _X 'int'
| |-NoThrowAttr 0x1f90b5d4f08 <col:19> Inherited Implicit
| `-ConstAttr 0x1f90b5d4f30 <col:19> Inherited Implicit
|-FunctionDecl 0x1f90b5d50e8 <line:385:19> col:19 implicit labs 'long (long)' extern
| |-ParmVarDecl 0x1f90b5d5188 <<invalid sloc>> <invalid sloc> 'long'
| |-NoThrowAttr 0x1f90b5d51f8 <col:19> Implicit
| `-ConstAttr 0x1f90b5d5250 <col:19> Implicit
|-FunctionDecl 0x1f90b5d5278 prev 0x1f90b5d50e8 <col:1, col:36> col:19 labs 'long (long)'
| |-ParmVarDecl 0x1f90b5d4fa0 <col:29, col:34> col:34 _X 'long'
| |-NoThrowAttr 0x1f90b5d5368 <col:19> Inherited Implicit
| `-ConstAttr 0x1f90b5d5390 <col:19> Inherited Implicit
|-FunctionDecl 0x1f90b5d5518 <line:386:19> col:19 implicit llabs 'long long (long long)' extern
| |-ParmVarDecl 0x1f90b5d55b8 <<invalid sloc>> <invalid sloc> 'long long'
| |-NoThrowAttr 0x1f90b5d5628 <col:19> Implicit
| `-ConstAttr 0x1f90b5d5680 <col:19> Implicit
|-FunctionDecl 0x1f90b5d56a8 prev 0x1f90b5d5518 <col:1, col:42> col:19 llabs 'long long (long long)'
| |-ParmVarDecl 0x1f90b5d53d0 <col:30, col:40> col:40 _X 'long long'
| |-NoThrowAttr 0x1f90b5d5798 <col:19> Inherited Implicit
| `-ConstAttr 0x1f90b5d57c0 <col:19> Inherited Implicit
|-FunctionDecl 0x1f90b5d58c8 <line:388:9, col:42> col:28 _abs64 'long long (long long) __attribute__((cdecl))':'long long (long long)'
| `-ParmVarDecl 0x1f90b5d5800 <col:35> col:42 'long long'
|-FunctionDecl 0x1f90b5d5bc8 <line:426:9, col:53> col:24 atexit 'int (void (*)(void) __attribute__((cdecl))) __attribute__((cdecl))':'int (void (*)(void) __attribute__((cdecl)))'
| `-ParmVarDecl 0x1f90b5d5a60 <col:31, col:45> col:46 'void (*)(void) __attribute__((cdecl))'
|-FunctionDecl 0x1f90b5d5de8 <line:428:24, col:71> col:40 atof 'double (const char *) __attribute__((cdecl))':'double (const char *)'
| `-ParmVarDecl 0x1f90b5d5ca0 <col:52, col:64> col:64 _String 'const char *'
|-FunctionDecl 0x1f90b5d20b0 <line:429:24, col:102> col:40 _atof_l 'double (const char *, _locale_t) __attribute__((cdecl))':'double (const char *, _locale_t)'
| |-ParmVarDecl 0x1f90b5d5ec0 <col:55, col:67> col:67 _String 'const char *'
| `-ParmVarDecl 0x1f90b5d5f38 <col:85, col:95> col:95 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f90b5d22d8 <line:430:43, col:86> col:58 atoi 'int (const char *) __attribute__((cdecl))':'int (const char *)'
| `-ParmVarDecl 0x1f90b5d2190 <col:70, col:82> col:82 _Str 'const char *'
|-FunctionDecl 0x1f90b5d25d0 <line:431:24, col:98> col:39 _atoi_l 'int (const char *, _locale_t) __attribute__((cdecl))':'int (const char *, _locale_t)'
| |-ParmVarDecl 0x1f90b5d23b0 <col:54, col:66> col:66 _Str 'const char *'
| `-ParmVarDecl 0x1f90b5d2428 <col:81, col:91> col:91 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f90b5d27f8 <line:432:24, col:67> col:39 atol 'long (const char *) __attribute__((cdecl))':'long (const char *)'
| `-ParmVarDecl 0x1f90b5d26b0 <col:51, col:63> col:63 _Str 'const char *'
|-FunctionDecl 0x1f90b5d2af0 <line:433:24, col:98> col:39 _atol_l 'long (const char *, _locale_t) __attribute__((cdecl))':'long (const char *, _locale_t)'
| |-ParmVarDecl 0x1f90b5d28d0 <col:54, col:66> col:66 _Str 'const char *'
| `-ParmVarDecl 0x1f90b5d2948 <col:81, col:91> col:91 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f90b5d2d18 <line:434:24, col:71> col:42 atoll 'long long (const char *) __attribute__((cdecl))':'long long (const char *)'
| `-ParmVarDecl 0x1f90b5d2bd0 <col:55, col:67> col:67 _Str 'const char *'
|-FunctionDecl 0x1f90b608440 <line:435:24, col:102> col:42 _atoll_l 'long long (const char *, _locale_t) __attribute__((cdecl))':'long long (const char *, _locale_t)'
| |-ParmVarDecl 0x1f90b5d2df0 <col:58, col:70> col:70 _Str 'const char *'
| `-ParmVarDecl 0x1f90b5d2e68 <col:85, col:95> col:95 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f90b608d30 <line:439:24, line:441:97> line:439:39 bsearch_s 'void *(const void *, const void *, rsize_t, rsize_t, int (*)(void *, const void *, const void *) __attribute__((cdecl)), void *) __attribute__((cdecl))':'void *(const void *, const void *, rsize_t, rsize_t, int (*)(void *, const void *, const void *) __attribute__((cdecl)), void *)'
| |-ParmVarDecl 0x1f90b608550 <col:54, col:67> col:67 _Key 'const void *'
| |-ParmVarDecl 0x1f90b6085d0 <col:124, col:137> col:137 _Base 'const void *'
| |-ParmVarDecl 0x1f90b608670 <line:440:14, col:22> col:22 _NumOfElements 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x1f90b6086e8 <col:43, col:51> col:51 _SizeOfElements 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x1f90b608a40 <line:441:14, col:29> col:29 _PtFuncCompare 'int (*)(void *, const void *, const void *) __attribute__((cdecl))'
| `-ParmVarDecl 0x1f90b608ac0 <col:82, col:89> col:89 _Context 'void *'
|-FunctionDecl 0x1f90b60b4f8 <line:443:24, line:445:72> line:443:39 bsearch 'void *(const void *, const void *, size_t, size_t, int (*)(const void *, const void *) __attribute__((cdecl))) __attribute__((cdecl))':'void *(const void *, const void *, size_t, size_t, int (*)(const void *, const void *) __attribute__((cdecl)))'
| |-ParmVarDecl 0x1f90b608e30 <col:52, col:65> col:65 _Key 'const void *'
| |-ParmVarDecl 0x1f90b608eb0 <col:122, col:135> col:135 _Base 'const void *'
| |-ParmVarDecl 0x1f90b608f28 <line:444:14, col:21> col:21 _NumOfElements 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f90b608fa0 <col:42, col:49> col:49 _SizeOfElements 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1f90b609278 <line:445:14, col:29> col:29 _PtFuncCompare 'int (*)(const void *, const void *) __attribute__((cdecl))'
|-FunctionDecl 0x1f90b60bc00 <line:448:9, line:450:96> line:448:22 qsort_s 'void (void *, rsize_t, rsize_t, int (*)(void *, const void *, const void *) __attribute__((cdecl)), void *) __attribute__((cdecl))':'void (void *, rsize_t, rsize_t, int (*)(void *, const void *, const void *) __attribute__((cdecl)), void *)'
| |-ParmVarDecl 0x1f90b60b5f0 <col:85, col:92> col:92 _Base 'void *'
| |-ParmVarDecl 0x1f90b60b668 <line:449:14, col:22> col:22 _NumOfElements 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x1f90b60b6e0 <col:43, col:51> col:51 _SizeOfElements 'rsize_t':'unsigned long long'
| |-ParmVarDecl 0x1f90b60b948 <line:450:14, col:29> col:29 _PtFuncCompare 'int (*)(void *, const void *, const void *) __attribute__((cdecl))'
| `-ParmVarDecl 0x1f90b60b9c8 <col:82, col:88> col:88 _Context 'void *'
|-FunctionDecl 0x1f90b60c1c8 <line:452:9, line:454:72> line:452:22 qsort 'void (void *, size_t, size_t, int (*)(const void *, const void *) __attribute__((cdecl))) __attribute__((cdecl))':'void (void *, size_t, size_t, int (*)(const void *, const void *) __attribute__((cdecl)))'
| |-ParmVarDecl 0x1f90b60bcf8 <col:84, col:91> col:91 _Base 'void *'
| |-ParmVarDecl 0x1f90b60bd70 <line:453:14, col:21> col:21 _NumOfElements 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f90b60bde8 <col:42, col:49> col:49 _SizeOfElements 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1f90b60bfc8 <line:454:14, col:29> col:29 _PtFuncCompare 'int (*)(const void *, const void *) __attribute__((cdecl))'
|-FunctionDecl 0x1f90b6093e8 <line:456:47> col:47 implicit _byteswap_ushort 'unsigned short (unsigned short)' extern
| |-ParmVarDecl 0x1f90b609488 <<invalid sloc>> <invalid sloc> 'unsigned short'
| |-NoThrowAttr 0x1f90b6094f8 <col:47> Implicit
| `-ConstAttr 0x1f90b609550 <col:47> Implicit
|-FunctionDecl 0x1f90b609578 prev 0x1f90b6093e8 <col:24, col:90> col:47 _byteswap_ushort 'unsigned short (unsigned short)'
| |-ParmVarDecl 0x1f90b60c2b8 <col:69, col:84> col:84 _Short 'unsigned short'
| |-NoThrowAttr 0x1f90b609668 <col:47> Inherited Implicit
| `-ConstAttr 0x1f90b609690 <col:47> Inherited Implicit
|-FunctionDecl 0x1f90b609818 <line:457:47> col:47 implicit _byteswap_ulong 'unsigned long (unsigned long)' extern
| |-ParmVarDecl 0x1f90b6098b8 <<invalid sloc>> <invalid sloc> 'unsigned long'
| |-NoThrowAttr 0x1f90b609928 <col:47> Implicit
| `-ConstAttr 0x1f90b609980 <col:47> Implicit
|-FunctionDecl 0x1f90b6099a8 prev 0x1f90b609818 <col:24, col:88> col:47 _byteswap_ulong 'unsigned long (unsigned long)'
| |-ParmVarDecl 0x1f90b6096d0 <col:69, col:83> col:83 _Long 'unsigned long'
| |-NoThrowAttr 0x1f90b609a98 <col:47> Inherited Implicit
| `-ConstAttr 0x1f90b609ac0 <col:47> Inherited Implicit
|-FunctionDecl 0x1f90b609c48 <line:458:49> col:49 implicit _byteswap_uint64 'unsigned long long (unsigned long long)' extern
| |-ParmVarDecl 0x1f90b609ce8 <<invalid sloc>> <invalid sloc> 'unsigned long long'
| |-NoThrowAttr 0x1f90b609d58 <col:49> Implicit
| `-ConstAttr 0x1f90b609db0 <col:49> Implicit
|-FunctionDecl 0x1f90b609dd8 prev 0x1f90b609c48 <col:24, col:94> col:49 _byteswap_uint64 'unsigned long long (unsigned long long)'
| |-ParmVarDecl 0x1f90b609b00 <col:71, col:88> col:88 _Int64 'unsigned long long'
| |-NoThrowAttr 0x1f90b609ec8 <col:49> Inherited Implicit
| `-ConstAttr 0x1f90b609ef0 <col:49> Inherited Implicit
|-FunctionDecl 0x1f90b60a178 <line:459:24, col:85> col:39 div 'div_t (int, int) __attribute__((cdecl))':'div_t (int, int)'
| |-ParmVarDecl 0x1f90b609f58 <col:48, col:52> col:52 _Numerator 'int'
| `-ParmVarDecl 0x1f90b609fd8 <col:69, col:73> col:73 _Denominator 'int'
|-FunctionDecl 0x1f90b6074a8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:462:109> col:74 getenv 'char *(const char *) __attribute__((cdecl))':'char *(const char *)'
| |-ParmVarDecl 0x1f90b607360 <col:88, col:101> col:101 _VarName 'const char *'
| `-DeprecatedAttr 0x1f90b607550 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _dupenv_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f90b607a68 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:464:28, col:177> col:44 getenv_s 'errno_t (size_t *, char *, rsize_t, const char *) __attribute__((cdecl))':'errno_t (size_t *, char *, rsize_t, const char *)'
| |-ParmVarDecl 0x1f90b6076e8 <col:59, col:68> col:68 _ReturnSize 'size_t *'
| |-ParmVarDecl 0x1f90b607768 <col:110, col:117> col:117 _DstBuf 'char *'
| |-ParmVarDecl 0x1f90b6077e0 <col:131, col:139> col:139 _DstSize 'rsize_t':'unsigned long long'
| `-ParmVarDecl 0x1f90b607860 <col:156, col:169> col:169 _VarName 'const char *'
|-FunctionDecl 0x1f90b607e20 <line:472:28, col:212> col:44 _dupenv_s 'errno_t (char **, size_t *, const char *) __attribute__((cdecl))':'errno_t (char **, size_t *, const char *)'
| |-ParmVarDecl 0x1f90b607b58 <col:127, col:134> col:134 _PBuffer 'char **'
| |-ParmVarDecl 0x1f90b607bd0 <col:154, col:163> col:163 _PBufferSizeInBytes 'size_t *'
| `-ParmVarDecl 0x1f90b607c50 <col:191, col:204> col:204 _VarName 'const char *'
|-FunctionDecl 0x1f90b608288 <line:479:28, col:141> col:44 _itoa_s 'errno_t (int, char *, size_t, int) __attribute__((cdecl))':'errno_t (int, char *, size_t, int)'
| |-ParmVarDecl 0x1f90b607f08 <col:57, col:61> col:61 _Value 'int'
| |-ParmVarDecl 0x1f90b607f88 <col:91, col:98> col:98 _DstBuf 'char *'
| |-ParmVarDecl 0x1f90b608000 <col:112, col:119> col:119 _Size 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1f90b608080 <col:131, col:135> col:135 _Radix 'int'
|-FunctionDecl 0x1f90b6046d8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1951:149> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:481:79 _itoa 'char *(int, char *, int) __attribute__((cdecl))':'char *(int, char *, int)'
| |-ParmVarDecl 0x1f90b604440 <col:91, col:96> col:96 _Value 'int'
| |-ParmVarDecl 0x1f90b6044c0 <col:128, col:134> col:134 _Dest 'char *'
| |-ParmVarDecl 0x1f90b604540 <col:146, col:151> col:151 _Radix 'int'
| `-DeprecatedAttr 0x1f90b604790 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _itoa_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f90b604c58 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:482:28, col:145> col:44 _i64toa_s 'errno_t (long long, char *, size_t, int) __attribute__((cdecl))':'errno_t (long long, char *, size_t, int)'
| |-ParmVarDecl 0x1f90b6048d8 <col:59, col:67> col:67 _Val 'long long'
| |-ParmVarDecl 0x1f90b604958 <col:95, col:102> col:102 _DstBuf 'char *'
| |-ParmVarDecl 0x1f90b6049d0 <col:116, col:123> col:123 _Size 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1f90b604a50 <col:135, col:139> col:139 _Radix 'int'
|-FunctionDecl 0x1f90b6050a8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:483:140> col:59 _i64toa 'char *(long long, char *, int) __attribute__((cdecl))':'char *(long long, char *, int)'
| |-ParmVarDecl 0x1f90b604e08 <col:72, col:80> col:80 _Val 'long long'
| |-ParmVarDecl 0x1f90b604e88 <col:109, col:116> col:116 _DstBuf 'char *'
| |-ParmVarDecl 0x1f90b604f08 <col:130, col:134> col:134 _Radix 'int'
| `-DeprecatedAttr 0x1f90b605160 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _i64toa_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f90b60c6a8 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:484:28, col:155> col:44 _ui64toa_s 'errno_t (unsigned long long, char *, size_t, int) __attribute__((cdecl))':'errno_t (unsigned long long, char *, size_t, int)'
| |-ParmVarDecl 0x1f90b6052a8 <col:60, col:77> col:77 _Val 'unsigned long long'
| |-ParmVarDecl 0x1f90b60c3b0 <col:105, col:112> col:112 _DstBuf 'char *'
| |-ParmVarDecl 0x1f90b60c428 <col:126, col:133> col:133 _Size 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1f90b60c4a8 <col:145, col:149> col:149 _Radix 'int'
|-FunctionDecl 0x1f90b60caf8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:485:151> col:60 _ui64toa 'char *(unsigned long long, char *, int) __attribute__((cdecl))':'char *(unsigned long long, char *, int)'
| |-ParmVarDecl 0x1f90b60c858 <col:74, col:91> col:91 _Val 'unsigned long long'
| |-ParmVarDecl 0x1f90b60c8d8 <col:120, col:127> col:127 _DstBuf 'char *'
| |-ParmVarDecl 0x1f90b60c958 <col:141, col:145> col:145 _Radix 'int'
| `-DeprecatedAttr 0x1f90b60cbb0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _ui64toa_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f90b60cdd8 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:486:24, col:75> col:40 _atoi64 'long long (const char *) __attribute__((cdecl))':'long long (const char *)'
| `-ParmVarDecl 0x1f90b60ccf8 <col:55, col:68> col:68 _String 'const char *'
|-FunctionDecl 0x1f90b60d028 <line:487:24, col:105> col:40 _atoi64_l 'long long (const char *, _locale_t) __attribute__((cdecl))':'long long (const char *, _locale_t)'
| |-ParmVarDecl 0x1f90b60ceb0 <col:57, col:70> col:70 _String 'const char *'
| `-ParmVarDecl 0x1f90b60cf28 <col:88, col:98> col:98 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f90b606350 <line:488:24, col:136> col:40 _strtoi64 'long long (const char *, char **, int) __attribute__((cdecl))':'long long (const char *, char **, int)'
| |-ParmVarDecl 0x1f90b60d108 <col:57, col:70> col:70 _String 'const char *'
| |-ParmVarDecl 0x1f90b60d188 <col:104, col:112> col:112 _EndPtr 'char **'
| `-ParmVarDecl 0x1f90b60d208 <col:126, col:130> col:130 _Radix 'int'
|-FunctionDecl 0x1f90b6067c0 <line:489:24, col:166> col:40 _strtoi64_l 'long long (const char *, char **, int, _locale_t) __attribute__((cdecl))':'long long (const char *, char **, int, _locale_t)'
| |-ParmVarDecl 0x1f90b606438 <col:59, col:72> col:72 _String 'const char *'
| |-ParmVarDecl 0x1f90b6064b8 <col:106, col:114> col:114 _EndPtr 'char **'
| |-ParmVarDecl 0x1f90b606538 <col:128, col:132> col:132 _Radix 'int'
| `-ParmVarDecl 0x1f90b6065b0 <col:149, col:159> col:159 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f90b606b48 <line:490:24, col:146> col:49 _strtoui64 'unsigned long long (const char *, char **, int) __attribute__((cdecl))':'unsigned long long (const char *, char **, int)'
| |-ParmVarDecl 0x1f90b6068b0 <col:67, col:80> col:80 _String 'const char *'
| |-ParmVarDecl 0x1f90b606930 <col:114, col:122> col:122 _EndPtr 'char **'
| `-ParmVarDecl 0x1f90b6069b0 <col:136, col:140> col:140 _Radix 'int'
|-FunctionDecl 0x1f90b606fb0 <line:491:24, col:177> col:49 _strtoui64_l 'unsigned long long (const char *, char **, int, _locale_t) __attribute__((cdecl))':'unsigned long long (const char *, char **, int, _locale_t)'
| |-ParmVarDecl 0x1f90b606c30 <col:69, col:82> col:82 _String 'const char *'
| |-ParmVarDecl 0x1f90b606cb0 <col:116, col:124> col:124 _EndPtr 'char **'
| |-ParmVarDecl 0x1f90b606d30 <col:138, col:143> col:143 _Radix 'int'
| `-ParmVarDecl 0x1f90b606da8 <col:160, col:170> col:170 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f90b605340 <line:492:24, col:88> col:39 ldiv 'ldiv_t (long, long) __attribute__((cdecl))':'ldiv_t (long, long)'
| |-ParmVarDecl 0x1f90b6070c8 <col:49, col:54> col:54 _Numerator 'long'
| `-ParmVarDecl 0x1f90b607148 <col:71, col:76> col:76 _Denominator 'long'
|-FunctionDecl 0x1f90b605668 <line:493:24, col:100> col:40 lldiv 'lldiv_t (long long, long long) __attribute__((cdecl))':'lldiv_t (long long, long long)'
| |-ParmVarDecl 0x1f90b605448 <col:51, col:61> col:61 _Numerator 'long long'
| `-ParmVarDecl 0x1f90b6054c8 <col:78, col:88> col:88 _Denominator 'long long'
|-FunctionDecl 0x1f90b605ac8 <line:515:28, col:140> col:44 _ltoa_s 'errno_t (long, char *, size_t, int) __attribute__((cdecl))':'errno_t (long, char *, size_t, int)'
| |-ParmVarDecl 0x1f90b605748 <col:57, col:62> col:62 _Val 'long'
| |-ParmVarDecl 0x1f90b6057c8 <col:90, col:97> col:97 _DstBuf 'char *'
| |-ParmVarDecl 0x1f90b605840 <col:111, col:118> col:118 _Size 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1f90b6058c0 <col:130, col:134> col:134 _Radix 'int'
|-FunctionDecl 0x1f90b605f18 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1951:149> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:517:79 _ltoa 'char *(long, char *, int) __attribute__((cdecl))':'char *(long, char *, int)'
| |-ParmVarDecl 0x1f90b605c78 <col:91, col:97> col:97 _Value 'long'
| |-ParmVarDecl 0x1f90b605cf8 <col:129, col:135> col:135 _Dest 'char *'
| |-ParmVarDecl 0x1f90b605d78 <col:147, col:152> col:152 _Radix 'int'
| `-DeprecatedAttr 0x1f90b605fd0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _ltoa_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f90b611400 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:518:24, col:128> col:39 mblen 'int (const char *, size_t) __attribute__((cdecl))':'int (const char *, size_t)'
| |-ParmVarDecl 0x1f90b606118 <col:89, col:102> col:102 _Ch 'const char *'
| `-ParmVarDecl 0x1f90b606190 <col:112, col:119> col:119 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1f90b6117a8 <line:519:24, col:159> col:39 _mblen_l 'int (const char *, size_t, _locale_t) __attribute__((cdecl))':'int (const char *, size_t, _locale_t)'
| |-ParmVarDecl 0x1f90b6114e0 <col:92, col:105> col:105 _Ch 'const char *'
| |-ParmVarDecl 0x1f90b611558 <col:115, col:122> col:122 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1f90b6115d0 <col:142, col:152> col:152 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f90b611a00 <line:520:24, col:73> col:39 _mbstrlen 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)'
| `-ParmVarDecl 0x1f90b611890 <col:56, col:69> col:69 _Str 'const char *'
|-FunctionDecl 0x1f90b611cf8 <line:521:24, col:102> col:39 _mbstrlen_l 'size_t (const char *, _locale_t) __attribute__((cdecl))':'size_t (const char *, _locale_t)'
| |-ParmVarDecl 0x1f90b611ad8 <col:58, col:70> col:70 _Str 'const char *'
| `-ParmVarDecl 0x1f90b611b50 <col:85, col:95> col:95 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f90b611ff8 <line:522:24, col:96> col:39 _mbstrnlen 'size_t (const char *, size_t) __attribute__((cdecl))':'size_t (const char *, size_t)'
| |-ParmVarDecl 0x1f90b611dd8 <col:57, col:69> col:69 _Str 'const char *'
| `-ParmVarDecl 0x1f90b611e50 <col:80, col:87> col:87 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1f90b612410 <line:523:24, col:126> col:39 _mbstrnlen_l 'size_t (const char *, size_t, _locale_t) __attribute__((cdecl))':'size_t (const char *, size_t, _locale_t)'
| |-ParmVarDecl 0x1f90b6120d8 <col:59, col:71> col:71 _Str 'const char *'
| |-ParmVarDecl 0x1f90b612150 <col:82, col:89> col:89 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1f90b6121c8 <col:109, col:119> col:119 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f90b6127c8 <line:524:9, col:170> col:24 mbtowc 'int (wchar_t *, const char *, size_t) __attribute__((cdecl))':'int (wchar_t *, const char *, size_t)'
| |-ParmVarDecl 0x1f90b6124f0 <col:54, col:64> col:64 _DstCh 'wchar_t *'
| |-ParmVarDecl 0x1f90b612570 <col:122, col:135> col:135 _SrcCh 'const char *'
| `-ParmVarDecl 0x1f90b6125e8 <col:148, col:155> col:155 _SrcSizeInBytes 'size_t':'unsigned long long'
|-FunctionDecl 0x1f90b612c20 <line:525:9, col:201> col:24 _mbtowc_l 'int (wchar_t *, const char *, size_t, _locale_t) __attribute__((cdecl))':'int (wchar_t *, const char *, size_t, _locale_t)'
| |-ParmVarDecl 0x1f90b6128a8 <col:57, col:67> col:67 _DstCh 'wchar_t *'
| |-ParmVarDecl 0x1f90b612928 <col:125, col:138> col:138 _SrcCh 'const char *'
| |-ParmVarDecl 0x1f90b6129a0 <col:151, col:158> col:158 _SrcSizeInBytes 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1f90b612a18 <col:184, col:194> col:194 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f90b613120 <line:526:28, col:271> col:44 mbstowcs_s 'errno_t (size_t *, wchar_t *, size_t, const char *, size_t) __attribute__((cdecl))':'errno_t (size_t *, wchar_t *, size_t, const char *, size_t)'
| |-ParmVarDecl 0x1f90b612d08 <col:65, col:74> col:74 _PtNumOfCharConverted 'size_t *'
| |-ParmVarDecl 0x1f90b612d80 <col:155, col:165> col:165 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1f90b612df8 <col:179, col:186> col:186 _SizeInWords 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f90b612e78 <col:227, col:240> col:240 _SrcBuf 'const char *'
| `-ParmVarDecl 0x1f90b612ef0 <col:254, col:261> col:261 _MaxCount 'size_t':'unsigned long long'
|-FunctionDecl 0x1f90b60f5b0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:2007:144> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:528:56 mbstowcs 'size_t (wchar_t *, const char *, size_t) __attribute__((cdecl))':'size_t (wchar_t *, const char *, size_t)'
| |-ParmVarDecl 0x1f90b6132d0 <col:97, col:106> col:106 _Dest 'wchar_t *'
| |-ParmVarDecl 0x1f90b613350 <col:120, col:134> col:134 _Source 'const char *'
| |-ParmVarDecl 0x1f90b60f3e0 <col:148, col:156> col:156 _MaxCount 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x1f90b60f668 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using mbstowcs_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f90b60fc68 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:530:28, col:301> col:44 _mbstowcs_s_l 'errno_t (size_t *, wchar_t *, size_t, const char *, size_t, _locale_t) __attribute__((cdecl))':'errno_t (size_t *, wchar_t *, size_t, const char *, size_t, _locale_t)'
| |-ParmVarDecl 0x1f90b60f7a8 <col:68, col:77> col:77 _PtNumOfCharConverted 'size_t *'
| |-ParmVarDecl 0x1f90b60f820 <col:158, col:168> col:168 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1f90b60f898 <col:182, col:189> col:189 _SizeInWords 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f90b60f918 <col:230, col:243> col:243 _SrcBuf 'const char *'
| |-ParmVarDecl 0x1f90b60f990 <col:257, col:264> col:264 _MaxCount 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1f90b60fa08 <col:284, col:294> col:294 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f90b6101c8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:2010:160> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:532:59 _mbstowcs_l 'size_t (wchar_t *, const char *, size_t, _locale_t) __attribute__((cdecl))':'size_t (wchar_t *, const char *, size_t, _locale_t)'
| |-ParmVarDecl 0x1f90b60fe58 <col:149, col:158> col:158 _Dest 'wchar_t *'
| |-ParmVarDecl 0x1f90b60fed8 <col:172, col:186> col:186 _Source 'const char *'
| |-ParmVarDecl 0x1f90b60ff50 <col:200, col:208> col:208 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f90b60ffc8 <col:228, col:239> col:239 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x1f90b610288 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _mbstowcs_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f90b6134e0 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:534:24, col:48> col:39 rand 'int (void) __attribute__((cdecl))':'int (void)'
|-FunctionDecl 0x1f90b613690 <line:539:28, col:73> col:43 _set_error_mode 'int (int) __attribute__((cdecl))':'int (int)'
| `-ParmVarDecl 0x1f90b6135b0 <col:64, col:68> col:68 _Mode 'int'
|-FunctionDecl 0x1f90b6138b0 <line:541:9, col:53> col:24 srand 'void (unsigned int) __attribute__((cdecl))':'void (unsigned int)'
| `-ParmVarDecl 0x1f90b613768 <col:35, col:48> col:48 _Seed 'unsigned int'
|-FunctionDecl 0x1f90b613b70 <line:542:39> col:39 implicit strtod 'double (const char *, char **)' extern
| |-ParmVarDecl 0x1f90b613c10 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x1f90b613c78 <<invalid sloc>> <invalid sloc> 'char **'
|-FunctionDecl 0x1f90b613cf0 prev 0x1f90b613b70 <col:24, col:112> col:39 strtod 'double (const char *, char **)'
| |-ParmVarDecl 0x1f90b613988 <col:53, col:66> col:66 _Str 'const char *'
| `-ParmVarDecl 0x1f90b613a08 <col:97, col:105> col:105 _EndPtr 'char **'
|-FunctionDecl 0x1f90b6140a8 <line:543:24, col:143> col:39 _strtod_l 'double (const char *, char **, _locale_t) __attribute__((cdecl))':'double (const char *, char **, _locale_t)'
| |-ParmVarDecl 0x1f90b613dd0 <col:56, col:69> col:69 _Str 'const char *'
| |-ParmVarDecl 0x1f90b613e50 <col:100, col:108> col:108 _EndPtr 'char **'
| `-ParmVarDecl 0x1f90b613ec8 <col:126, col:136> col:136 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f90b614478 <line:544:39> col:39 implicit strtol 'long (const char *, char **, int)' extern
| |-ParmVarDecl 0x1f90b614518 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x1f90b614580 <<invalid sloc>> <invalid sloc> 'char **'
| `-ParmVarDecl 0x1f90b6145e8 <<invalid sloc>> <invalid sloc> 'int'
|-FunctionDecl 0x1f90b614668 prev 0x1f90b614478 <col:24, col:130> col:39 strtol 'long (const char *, char **, int)'
| |-ParmVarDecl 0x1f90b614190 <col:53, col:66> col:66 _Str 'const char *'
| |-ParmVarDecl 0x1f90b614210 <col:97, col:105> col:105 _EndPtr 'char **'
| `-ParmVarDecl 0x1f90b614290 <col:119, col:123> col:123 _Radix 'int'
|-FunctionDecl 0x1f90b614ad0 <line:545:24, col:158> col:39 _strtol_l 'long (const char *, char **, int, _locale_t) __attribute__((cdecl))':'long (const char *, char **, int, _locale_t)'
| |-ParmVarDecl 0x1f90b614750 <col:56, col:68> col:68 _Str 'const char *'
| |-ParmVarDecl 0x1f90b6147d0 <col:99, col:106> col:106 _EndPtr 'char **'
| |-ParmVarDecl 0x1f90b614850 <col:120, col:124> col:124 _Radix 'int'
| `-ParmVarDecl 0x1f90b6148c8 <col:141, col:151> col:151 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f90b614de0 <line:546:43> col:43 implicit strtoll 'long long (const char *, char **, int)' extern
| |-ParmVarDecl 0x1f90b614e80 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x1f90b614ee8 <<invalid sloc>> <invalid sloc> 'char **'
| `-ParmVarDecl 0x1f90b614f50 <<invalid sloc>> <invalid sloc> 'int'
|-FunctionDecl 0x1f90b614fd0 prev 0x1f90b614de0 <col:24, col:135> col:43 strtoll 'long long (const char *, char **, int)'
| |-ParmVarDecl 0x1f90b614bc0 <col:58, col:71> col:71 _Str 'const char *'
| |-ParmVarDecl 0x1f90b614c40 <col:102, col:110> col:110 _EndPtr 'char **'
| `-ParmVarDecl 0x1f90b614cc0 <col:124, col:128> col:128 _Radix 'int'
|-FunctionDecl 0x1f90b615370 <line:547:24, col:166> col:43 _strtoll_l 'long long (const char *, char **, int, _locale_t) __attribute__((cdecl))':'long long (const char *, char **, int, _locale_t)'
| |-ParmVarDecl 0x1f90b6150b8 <col:61, col:74> col:74 _Str 'const char *'
| |-ParmVarDecl 0x1f90b615138 <col:105, col:113> col:113 _EndPtr 'char **'
| |-ParmVarDecl 0x1f90b6151b8 <col:127, col:131> col:131 _Radix 'int'
| `-ParmVarDecl 0x1f90b615230 <col:148, col:158> col:158 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f90b6106b8 <line:548:46> col:46 implicit strtoul 'unsigned long (const char *, char **, int)' extern
| |-ParmVarDecl 0x1f90b610758 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x1f90b6107c0 <<invalid sloc>> <invalid sloc> 'char **'
| `-ParmVarDecl 0x1f90b610828 <<invalid sloc>> <invalid sloc> 'int'
|-FunctionDecl 0x1f90b6108a8 prev 0x1f90b6106b8 <col:24, col:137> col:46 strtoul 'unsigned long (const char *, char **, int)'
| |-ParmVarDecl 0x1f90b610420 <col:61, col:74> col:74 _Str 'const char *'
| |-ParmVarDecl 0x1f90b6104a0 <col:105, col:113> col:113 _EndPtr 'char **'
| `-ParmVarDecl 0x1f90b610520 <col:127, col:131> col:131 _Radix 'int'
|-FunctionDecl 0x1f90b610d10 <line:549:24, col:160> col:46 _strtoul_l 'unsigned long (const char *, char **, int, _locale_t) __attribute__((cdecl))':'unsigned long (const char *, char **, int, _locale_t)'
| |-ParmVarDecl 0x1f90b610990 <col:57, col:70> col:70 _Str 'const char *'
| |-ParmVarDecl 0x1f90b610a10 <col:101, col:108> col:108 _EndPtr 'char **'
| |-ParmVarDecl 0x1f90b610a90 <col:122, col:126> col:126 _Radix 'int'
| `-ParmVarDecl 0x1f90b610b08 <col:143, col:153> col:153 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f90b611020 <line:550:51> col:51 implicit strtoull 'unsigned long long (const char *, char **, int)' extern
| |-ParmVarDecl 0x1f90b6110c0 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x1f90b611128 <<invalid sloc>> <invalid sloc> 'char **'
| `-ParmVarDecl 0x1f90b611190 <<invalid sloc>> <invalid sloc> 'int'
|-FunctionDecl 0x1f90b611210 prev 0x1f90b611020 <col:24, col:143> col:51 strtoull 'unsigned long long (const char *, char **, int)'
| |-ParmVarDecl 0x1f90b610e00 <col:67, col:80> col:80 _Str 'const char *'
| |-ParmVarDecl 0x1f90b610e80 <col:111, col:119> col:119 _EndPtr 'char **'
| `-ParmVarDecl 0x1f90b610f00 <col:133, col:137> col:137 _Radix 'int'
|-FunctionDecl 0x1f90b60e5a0 <line:551:24, col:174> col:51 _strtoull_l 'unsigned long long (const char *, char **, int, _locale_t) __attribute__((cdecl))':'unsigned long long (const char *, char **, int, _locale_t)'
| |-ParmVarDecl 0x1f90b6112f8 <col:70, col:83> col:83 _Str 'const char *'
| |-ParmVarDecl 0x1f90b611378 <col:114, col:122> col:122 _EndPtr 'char **'
| |-ParmVarDecl 0x1f90b60e3e8 <col:136, col:140> col:140 _Radix 'int'
| `-ParmVarDecl 0x1f90b60e460 <col:157, col:167> col:167 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f90b60e880 <line:552:44> col:44 implicit strtold 'long double (const char *, char **)' extern
| |-ParmVarDecl 0x1f90b60e920 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x1f90b60e988 <<invalid sloc>> <invalid sloc> 'char **'
|-FunctionDecl 0x1f90b60ea00 prev 0x1f90b60e880 <col:24, col:118> col:44 strtold 'long double (const char *, char **)'
| |-ParmVarDecl 0x1f90b60e690 <col:59, col:72> col:72 _Str 'const char *'
| `-ParmVarDecl 0x1f90b60e710 <col:103, col:111> col:111 _EndPtr 'char **'
|-FunctionDecl 0x1f90b60edb8 <line:553:24, col:149> col:44 _strtold_l 'long double (const char *, char **, _locale_t) __attribute__((cdecl))':'long double (const char *, char **, _locale_t)'
| |-ParmVarDecl 0x1f90b60eae0 <col:62, col:75> col:75 _Str 'const char *'
| |-ParmVarDecl 0x1f90b60eb60 <col:106, col:114> col:114 _EndPtr 'char **'
| `-ParmVarDecl 0x1f90b60ebd8 <col:132, col:142> col:142 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f90b60f090 <line:554:38> col:38 implicit strtof 'float (const char *, char **)' extern
| |-ParmVarDecl 0x1f90b60f130 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x1f90b60f198 <<invalid sloc>> <invalid sloc> 'char **'
|-FunctionDecl 0x1f90b60f210 prev 0x1f90b60f090 <col:24, col:111> col:38 strtof 'float (const char *, char **)'
| |-ParmVarDecl 0x1f90b60eea0 <col:52, col:65> col:65 _Str 'const char *'
| `-ParmVarDecl 0x1f90b60ef20 <col:96, col:104> col:104 _EndPtr 'char **'
|-FunctionDecl 0x1f90b60d618 <line:555:24, col:142> col:38 _strtof_l 'float (const char *, char **, _locale_t) __attribute__((cdecl))':'float (const char *, char **, _locale_t)'
| |-ParmVarDecl 0x1f90b60f2f0 <col:55, col:68> col:68 _Str 'const char *'
| |-ParmVarDecl 0x1f90b60d3c0 <col:99, col:107> col:107 _EndPtr 'char **'
| `-ParmVarDecl 0x1f90b60d438 <col:125, col:135> col:135 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f90b60d7e0 <line:560:9, col:60> col:21 system 'int (const char *) __attribute__((cdecl))':'int (const char *)'
| `-ParmVarDecl 0x1f90b60d700 <col:39, col:52> col:52 _Command 'const char *'
|-FunctionDecl 0x1f90b60dc38 <line:564:28, col:150> col:44 _ultoa_s 'errno_t (unsigned long, char *, size_t, int) __attribute__((cdecl))':'errno_t (unsigned long, char *, size_t, int)'
| |-ParmVarDecl 0x1f90b60d8b8 <col:58, col:72> col:72 _Val 'unsigned long'
| |-ParmVarDecl 0x1f90b60d938 <col:100, col:107> col:107 _DstBuf 'char *'
| |-ParmVarDecl 0x1f90b60d9b0 <col:121, col:128> col:128 _Size 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1f90b60da30 <col:140, col:144> col:144 _Radix 'int'
|-FunctionDecl 0x1f90b60e088 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1951:149> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:566:79 _ultoa 'char *(unsigned long, char *, int) __attribute__((cdecl))':'char *(unsigned long, char *, int)'
| |-ParmVarDecl 0x1f90b60dde8 <col:92, col:107> col:107 _Value 'unsigned long'
| |-ParmVarDecl 0x1f90b60de68 <col:139, col:145> col:145 _Dest 'char *'
| |-ParmVarDecl 0x1f90b60dee8 <col:157, col:162> col:162 _Radix 'int'
| `-DeprecatedAttr 0x1f90b60e140 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _ultoa_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f90b616600 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:567:127> col:58 wctomb 'int (char *, wchar_t) __attribute__((cdecl))':'int (char *, wchar_t)'
| |-ParmVarDecl 0x1f90b60e348 <col:96, col:103> col:103 _MbCh 'char *'
| |-ParmVarDecl 0x1f90b616450 <col:115, col:123> col:123 _WCh 'wchar_t':'unsigned short'
| `-DeprecatedAttr 0x1f90b6166b0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using wctomb_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f90b616b88 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:568:155> col:61 _wctomb_l 'int (char *, wchar_t, _locale_t) __attribute__((cdecl))':'int (char *, wchar_t, _locale_t)'
| |-ParmVarDecl 0x1f90b6168b8 <col:96, col:103> col:103 _MbCh 'char *'
| |-ParmVarDecl 0x1f90b616930 <col:115, col:123> col:123 _WCh 'wchar_t':'unsigned short'
| |-ParmVarDecl 0x1f90b6169a8 <col:138, col:148> col:148 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x1f90b616c40 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wctomb_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f90b6170f8 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:570:28, col:200> col:44 wctomb_s 'errno_t (int *, char *, rsize_t, wchar_t) __attribute__((cdecl))':'errno_t (int *, char *, rsize_t, wchar_t)'
| |-ParmVarDecl 0x1f90b616d88 <col:63, col:69> col:69 _SizeConverted 'int *'
| |-ParmVarDecl 0x1f90b616e08 <col:142, col:149> col:149 _MbCh 'char *'
| |-ParmVarDecl 0x1f90b616e80 <col:161, col:169> col:169 _SizeInBytes 'rsize_t':'unsigned long long'
| `-ParmVarDecl 0x1f90b616ef8 <col:188, col:196> col:196 _WCh 'wchar_t':'unsigned short'
|-FunctionDecl 0x1f90b617610 <line:572:28, col:206> col:44 _wctomb_s_l 'errno_t (int *, char *, size_t, wchar_t, _locale_t) __attribute__((cdecl))':'errno_t (int *, char *, size_t, wchar_t, _locale_t)'
| |-ParmVarDecl 0x1f90b6171e8 <col:66, col:72> col:72 _SizeConverted 'int *'
| |-ParmVarDecl 0x1f90b617268 <col:121, col:128> col:128 _MbCh 'char *'
| |-ParmVarDecl 0x1f90b6172e0 <col:140, col:147> col:147 _SizeInBytes 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f90b617358 <col:166, col:174> col:174 _WCh 'wchar_t':'unsigned short'
| `-ParmVarDecl 0x1f90b6173d0 <col:189, col:199> col:199 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f90b617b20 <line:573:28, col:263> col:44 wcstombs_s 'errno_t (size_t *, char *, size_t, const wchar_t *, size_t) __attribute__((cdecl))':'errno_t (size_t *, char *, size_t, const wchar_t *, size_t)'
| |-ParmVarDecl 0x1f90b617700 <col:65, col:74> col:74 _PtNumOfCharConverted 'size_t *'
| |-ParmVarDecl 0x1f90b617780 <col:164, col:171> col:171 _Dst 'char *'
| |-ParmVarDecl 0x1f90b6177f8 <col:182, col:189> col:189 _DstSizeInBytes 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f90b617870 <col:213, col:229> col:229 _Src 'const wchar_t *'
| `-ParmVarDecl 0x1f90b6178e8 <col:240, col:247> col:247 _MaxCountInBytes 'size_t':'unsigned long long'
|-FunctionDecl 0x1f90b617fa0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:2007:144> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:575:56 wcstombs 'size_t (char *, const wchar_t *, size_t) __attribute__((cdecl))':'size_t (char *, const wchar_t *, size_t)'
| |-ParmVarDecl 0x1f90b617cd8 <col:97, col:103> col:103 _Dest 'char *'
| |-ParmVarDecl 0x1f90b617d50 <col:117, col:134> col:134 _Source 'const wchar_t *'
| |-ParmVarDecl 0x1f90b617dc8 <col:148, col:156> col:156 _MaxCount 'size_t':'unsigned long long'
| `-DeprecatedAttr 0x1f90b618058 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using wcstombs_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f90b615638 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:576:28, col:294> col:44 _wcstombs_s_l 'errno_t (size_t *, char *, size_t, const wchar_t *, size_t, _locale_t) __attribute__((cdecl))':'errno_t (size_t *, char *, size_t, const wchar_t *, size_t, _locale_t)'
| |-ParmVarDecl 0x1f90b618198 <col:68, col:77> col:77 _PtNumOfCharConverted 'size_t *'
| |-ParmVarDecl 0x1f90b618218 <col:167, col:174> col:174 _Dst 'char *'
| |-ParmVarDecl 0x1f90b618290 <col:185, col:192> col:192 _DstSizeInBytes 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f90b618308 <col:216, col:232> col:232 _Src 'const wchar_t *'
| |-ParmVarDecl 0x1f90b618380 <col:243, col:250> col:250 _MaxCountInBytes 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1f90b6183f8 <col:277, col:287> col:287 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f90b615b68 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:2010:160> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:578:59 _wcstombs_l 'size_t (char *, const wchar_t *, size_t, _locale_t) __attribute__((cdecl))':'size_t (char *, const wchar_t *, size_t, _locale_t)'
| |-ParmVarDecl 0x1f90b6157f8 <col:146, col:152> col:152 _Dest 'char *'
| |-ParmVarDecl 0x1f90b615870 <col:166, col:183> col:183 _Source 'const wchar_t *'
| |-ParmVarDecl 0x1f90b6158e8 <col:197, col:205> col:205 _MaxCount 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f90b615960 <col:225, col:236> col:236 _Locale '_locale_t':'struct localeinfo_struct *'
| `-DeprecatedAttr 0x1f90b615c28 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wcstombs_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f90b615f90 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:640:142> col:142 implicit calloc 'void *(unsigned long long, unsigned long long)' extern
| |-ParmVarDecl 0x1f90b616030 <<invalid sloc>> <invalid sloc> 'unsigned long long'
| `-ParmVarDecl 0x1f90b616098 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x1f90b616110 prev 0x1f90b615f90 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:21, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:640:224> col:142 calloc 'void *(unsigned long long, unsigned long long)'
| |-ParmVarDecl 0x1f90b615d68 <col:173, col:180> col:180 _Count 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f90b615de0 <col:212, col:219> col:219 _Size 'size_t':'unsigned long long'
| |-NoAliasAttr 0x1f90b6161c0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:32>
| `-RestrictAttr 0x1f90b616218 <line:615:33> restrict
|-FunctionDecl 0x1f90b619480 <line:611:21, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:641:182> col:132 free 'void (void *) __attribute__((cdecl))':'void (void *)'
| |-ParmVarDecl 0x1f90b616270 <col:168, col:175> col:175 _Memory 'void *'
| `-NoAliasAttr 0x1f90b619528 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:32>
|-FunctionDecl 0x1f90b619728 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:642:161> col:161 implicit malloc 'void *(unsigned long long)' extern
| `-ParmVarDecl 0x1f90b6197c8 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x1f90b619838 prev 0x1f90b619728 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:21, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:642:204> col:161 malloc 'void *(unsigned long long)'
| |-ParmVarDecl 0x1f90b6195a8 <col:192, col:199> col:199 _Size 'size_t':'unsigned long long'
| |-NoAliasAttr 0x1f90b6198e0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:32>
| `-RestrictAttr 0x1f90b619938 <line:615:33> restrict
|-FunctionDecl 0x1f90b619bb0 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:644:142> col:142 implicit realloc 'void *(void *, unsigned long long)' extern
| |-ParmVarDecl 0x1f90b619c50 <<invalid sloc>> <invalid sloc> 'void *'
| `-ParmVarDecl 0x1f90b619cb8 <<invalid sloc>> <invalid sloc> 'unsigned long long'
|-FunctionDecl 0x1f90b619d30 prev 0x1f90b619bb0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:21, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:644:236> col:142 realloc 'void *(void *, unsigned long long)'
| |-ParmVarDecl 0x1f90b619990 <col:181, col:188> col:188 _Memory 'void *'
| |-ParmVarDecl 0x1f90b619a08 <col:221, col:228> col:228 _NewSize 'size_t':'unsigned long long'
| |-NoAliasAttr 0x1f90b619de0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:32>
| `-RestrictAttr 0x1f90b619e38 <line:615:33> restrict
|-FunctionDecl 0x1f90b61a158 <line:611:21, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:646:274> col:142 _recalloc 'void *(void *, size_t, size_t) __attribute__((cdecl))':'void *(void *, size_t, size_t)'
| |-ParmVarDecl 0x1f90b619e90 <col:183, col:190> col:190 _Memory 'void *'
| |-ParmVarDecl 0x1f90b619f08 <col:223, col:230> col:230 _Count 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f90b619f80 <col:262, col:269> col:269 _Size 'size_t':'unsigned long long'
| |-NoAliasAttr 0x1f90b61a210 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:32>
| `-RestrictAttr 0x1f90b61a268 <line:615:33> restrict
|-FunctionDecl 0x1f90b61a398 <line:611:21, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:647:191> col:132 _aligned_free 'void (void *) __attribute__((cdecl))':'void (void *)'
| |-ParmVarDecl 0x1f90b61a2c0 <col:177, col:184> col:184 _Memory 'void *'
| `-NoAliasAttr 0x1f90b61a440 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:32>
|-FunctionDecl 0x1f90b61a660 <col:21, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:648:218> col:142 _aligned_malloc 'void *(size_t, size_t) __attribute__((cdecl))':'void *(size_t, size_t)'
| |-ParmVarDecl 0x1f90b61a4e8 <col:182, col:189> col:189 _Size 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f90b61a560 <col:201, col:208> col:208 _Alignment 'size_t':'unsigned long long'
| |-NoAliasAttr 0x1f90b61a710 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:32>
| `-RestrictAttr 0x1f90b61a768 <line:615:33> restrict
|-FunctionDecl 0x1f90b61aa88 <line:611:21, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:649:246> col:142 _aligned_offset_malloc 'void *(size_t, size_t, size_t) __attribute__((cdecl))':'void *(size_t, size_t, size_t)'
| |-ParmVarDecl 0x1f90b61a7b8 <col:189, col:196> col:196 _Size 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f90b61a830 <col:208, col:215> col:215 _Alignment 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f90b61a8a8 <col:232, col:239> col:239 _Offset 'size_t':'unsigned long long'
| |-NoAliasAttr 0x1f90b61ab40 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:32>
| `-RestrictAttr 0x1f90b61ab98 <line:615:33> restrict
|-FunctionDecl 0x1f90b61ae00 <line:611:21, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:651:272> col:145 _aligned_realloc 'void *(void *, size_t, size_t) __attribute__((cdecl))':'void *(void *, size_t, size_t)'
| |-ParmVarDecl 0x1f90b61abf0 <col:193, col:200> col:200 _Memory 'void *'
| |-ParmVarDecl 0x1f90b61ac68 <col:233, col:240> col:240 _NewSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f90b61ace0 <col:255, col:262> col:262 _Alignment 'size_t':'unsigned long long'
| |-NoAliasAttr 0x1f90b61aeb8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:32>
| `-RestrictAttr 0x1f90b61af10 <line:615:33> restrict
|-FunctionDecl 0x1f90b61b2e0 <line:611:21, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:653:306> col:142 _aligned_recalloc 'void *(void *, size_t, size_t, size_t) __attribute__((cdecl))':'void *(void *, size_t, size_t, size_t)'
| |-ParmVarDecl 0x1f90b61af68 <col:191, col:198> col:198 _Memory 'void *'
| |-ParmVarDecl 0x1f90b61afe0 <col:231, col:238> col:238 _Count 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f90b61b058 <col:270, col:277> col:277 _Size 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f90b61b0d0 <col:289, col:296> col:296 _Alignment 'size_t':'unsigned long long'
| |-NoAliasAttr 0x1f90b61b3a0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:32>
| `-RestrictAttr 0x1f90b61b3f8 <line:615:33> restrict
|-FunctionDecl 0x1f90b61d768 <line:611:21, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:655:300> col:145 _aligned_offset_realloc 'void *(void *, size_t, size_t, size_t) __attribute__((cdecl))':'void *(void *, size_t, size_t, size_t)'
| |-ParmVarDecl 0x1f90b61d4c0 <col:200, col:207> col:207 _Memory 'void *'
| |-ParmVarDecl 0x1f90b61d538 <col:240, col:247> col:247 _NewSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f90b61d5b0 <col:262, col:269> col:269 _Alignment 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f90b61d628 <col:286, col:293> col:293 _Offset 'size_t':'unsigned long long'
| |-NoAliasAttr 0x1f90b61d828 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:32>
| `-RestrictAttr 0x1f90b61d880 <line:615:33> restrict
|-FunctionDecl 0x1f90b61dcf8 <line:611:21, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:657:334> col:142 _aligned_offset_recalloc 'void *(void *, size_t, size_t, size_t, size_t) __attribute__((cdecl))':'void *(void *, size_t, size_t, size_t, size_t)'
| |-ParmVarDecl 0x1f90b61d8d8 <col:198, col:205> col:205 _Memory 'void *'
| |-ParmVarDecl 0x1f90b61d950 <col:238, col:245> col:245 _Count 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f90b61d9c8 <col:277, col:284> col:284 _Size 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f90b61da40 <col:296, col:303> col:303 _Alignment 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f90b61dab8 <col:320, col:327> col:327 _Offset 'size_t':'unsigned long long'
| |-NoAliasAttr 0x1f90b61ddc0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:611:32>
| `-RestrictAttr 0x1f90b61de18 <line:615:33> restrict
|-FunctionDecl 0x1f90b61e130 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:658:73, col:176> col:88 _aligned_msize 'size_t (void *, size_t, size_t) __attribute__((cdecl))':'size_t (void *, size_t, size_t)'
| |-ParmVarDecl 0x1f90b61de70 <col:117, col:124> col:124 _Memory 'void *'
| |-ParmVarDecl 0x1f90b61dee8 <col:138, col:145> col:145 _Alignment 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1f90b61df60 <col:162, col:169> col:169 _Offset 'size_t':'unsigned long long'
|-FunctionDecl 0x1f90b6225f8 <line:685:28, col:157> col:44 _itow_s 'errno_t (int, wchar_t *, size_t, int) __attribute__((cdecl))':'errno_t (int, wchar_t *, size_t, int)'
| |-ParmVarDecl 0x1f90b61e218 <col:58, col:62> col:62 _Val 'int'
| |-ParmVarDecl 0x1f90b61e290 <col:97, col:107> col:107 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1f90b61e308 <col:121, col:128> col:128 _SizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1f90b61e388 <col:147, col:151> col:151 _Radix 'int'
|-FunctionDecl 0x1f90b622a70 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1951:149> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:687:82 _itow 'wchar_t *(int, wchar_t *, int) __attribute__((cdecl))':'wchar_t *(int, wchar_t *, int)'
| |-ParmVarDecl 0x1f90b6227a8 <col:94, col:99> col:99 _Value 'int'
| |-ParmVarDecl 0x1f90b622820 <col:131, col:140> col:140 _Dest 'wchar_t *'
| |-ParmVarDecl 0x1f90b6228a0 <col:152, col:157> col:157 _Radix 'int'
| `-DeprecatedAttr 0x1f90b622b28 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _itow_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f90b622fe8 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:688:28, col:158> col:44 _ltow_s 'errno_t (long, wchar_t *, size_t, int) __attribute__((cdecl))':'errno_t (long, wchar_t *, size_t, int)'
| |-ParmVarDecl 0x1f90b622c70 <col:58, col:63> col:63 _Val 'long'
| |-ParmVarDecl 0x1f90b622ce8 <col:98, col:108> col:108 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1f90b622d60 <col:122, col:129> col:129 _SizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1f90b622de0 <col:148, col:152> col:152 _Radix 'int'
|-FunctionDecl 0x1f90b623460 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1951:149> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:690:82 _ltow 'wchar_t *(long, wchar_t *, int) __attribute__((cdecl))':'wchar_t *(long, wchar_t *, int)'
| |-ParmVarDecl 0x1f90b623198 <col:94, col:100> col:100 _Value 'long'
| |-ParmVarDecl 0x1f90b623210 <col:132, col:141> col:141 _Dest 'wchar_t *'
| |-ParmVarDecl 0x1f90b623290 <col:153, col:158> col:158 _Radix 'int'
| `-DeprecatedAttr 0x1f90b620508 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _ltow_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f90b6209c8 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:691:28, col:168> col:44 _ultow_s 'errno_t (unsigned long, wchar_t *, size_t, int) __attribute__((cdecl))':'errno_t (unsigned long, wchar_t *, size_t, int)'
| |-ParmVarDecl 0x1f90b620650 <col:59, col:73> col:73 _Val 'unsigned long'
| |-ParmVarDecl 0x1f90b6206c8 <col:108, col:118> col:118 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1f90b620740 <col:132, col:139> col:139 _SizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1f90b6207c0 <col:158, col:162> col:162 _Radix 'int'
|-FunctionDecl 0x1f90b620e40 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1951:149> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:693:82 _ultow 'wchar_t *(unsigned long, wchar_t *, int) __attribute__((cdecl))':'wchar_t *(unsigned long, wchar_t *, int)'
| |-ParmVarDecl 0x1f90b620b78 <col:95, col:110> col:110 _Value 'unsigned long'
| |-ParmVarDecl 0x1f90b620bf0 <col:142, col:151> col:151 _Dest 'wchar_t *'
| |-ParmVarDecl 0x1f90b620c70 <col:163, col:168> col:168 _Radix 'int'
| `-DeprecatedAttr 0x1f90b620ef8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _ultow_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f90b621260 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:694:24, col:118> col:39 wcstod 'double (const wchar_t *, wchar_t **) __attribute__((cdecl))':'double (const wchar_t *, wchar_t **)'
| |-ParmVarDecl 0x1f90b621038 <col:53, col:69> col:69 _Str 'const wchar_t *'
| `-ParmVarDecl 0x1f90b6210b8 <col:100, col:111> col:111 _EndPtr 'wchar_t **'
|-FunctionDecl 0x1f90b61b5c8 <line:695:24, col:148> col:39 _wcstod_l 'double (const wchar_t *, wchar_t **, _locale_t) __attribute__((cdecl))':'double (const wchar_t *, wchar_t **, _locale_t)'
| |-ParmVarDecl 0x1f90b621338 <col:56, col:71> col:71 _Str 'const wchar_t *'
| |-ParmVarDecl 0x1f90b6213b8 <col:102, col:113> col:113 _EndPtr 'wchar_t **'
| `-ParmVarDecl 0x1f90b621430 <col:131, col:141> col:141 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f90b61b988 <line:696:24, col:129> col:39 wcstol 'long (const wchar_t *, wchar_t **, int) __attribute__((cdecl))':'long (const wchar_t *, wchar_t **, int)'
| |-ParmVarDecl 0x1f90b61b6a8 <col:53, col:68> col:68 _Str 'const wchar_t *'
| |-ParmVarDecl 0x1f90b61b728 <col:99, col:110> col:110 _EndPtr 'wchar_t **'
| `-ParmVarDecl 0x1f90b61b7a8 <col:119, col:123> col:123 _Radix 'int'
|-FunctionDecl 0x1f90b61bdf0 <line:697:24, col:159> col:39 _wcstol_l 'long (const wchar_t *, wchar_t **, int, _locale_t) __attribute__((cdecl))':'long (const wchar_t *, wchar_t **, int, _locale_t)'
| |-ParmVarDecl 0x1f90b61ba68 <col:56, col:71> col:71 _Str 'const wchar_t *'
| |-ParmVarDecl 0x1f90b61bae8 <col:102, col:112> col:112 _EndPtr 'wchar_t **'
| |-ParmVarDecl 0x1f90b61bb68 <col:121, col:125> col:125 _Radix 'int'
| `-ParmVarDecl 0x1f90b61bbe0 <col:142, col:152> col:152 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f90b61c1b8 <line:698:24, col:133> col:43 wcstoll 'long long (const wchar_t *, wchar_t **, int) __attribute__((cdecl))':'long long (const wchar_t *, wchar_t **, int)'
| |-ParmVarDecl 0x1f90b61bed8 <col:58, col:73> col:73 _Str 'const wchar_t *'
| |-ParmVarDecl 0x1f90b61bf58 <col:104, col:114> col:114 _EndPtr 'wchar_t **'
| `-ParmVarDecl 0x1f90b61bfd8 <col:123, col:127> col:127 _Radix 'int'
|-FunctionDecl 0x1f90b621690 <line:699:24, col:164> col:43 _wcstoll_l 'long long (const wchar_t *, wchar_t **, int, _locale_t) __attribute__((cdecl))':'long long (const wchar_t *, wchar_t **, int, _locale_t)'
| |-ParmVarDecl 0x1f90b61c298 <col:61, col:76> col:76 _Str 'const wchar_t *'
| |-ParmVarDecl 0x1f90b61c318 <col:107, col:117> col:117 _EndPtr 'wchar_t **'
| |-ParmVarDecl 0x1f90b61c398 <col:126, col:130> col:130 _Radix 'int'
| `-ParmVarDecl 0x1f90b61c410 <col:147, col:157> col:157 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f90b621a58 <line:700:24, col:137> col:46 wcstoul 'unsigned long (const wchar_t *, wchar_t **, int) __attribute__((cdecl))':'unsigned long (const wchar_t *, wchar_t **, int)'
| |-ParmVarDecl 0x1f90b621778 <col:61, col:76> col:76 _Str 'const wchar_t *'
| |-ParmVarDecl 0x1f90b6217f8 <col:107, col:118> col:118 _EndPtr 'wchar_t **'
| `-ParmVarDecl 0x1f90b621878 <col:127, col:131> col:131 _Radix 'int'
|-FunctionDecl 0x1f90b621ec0 <line:701:24, col:167> col:46 _wcstoul_l 'unsigned long (const wchar_t *, wchar_t **, int, _locale_t) __attribute__((cdecl))':'unsigned long (const wchar_t *, wchar_t **, int, _locale_t)'
| |-ParmVarDecl 0x1f90b621b38 <col:64, col:79> col:79 _Str 'const wchar_t *'
| |-ParmVarDecl 0x1f90b621bb8 <col:110, col:120> col:120 _EndPtr 'wchar_t **'
| |-ParmVarDecl 0x1f90b621c38 <col:129, col:133> col:133 _Radix 'int'
| `-ParmVarDecl 0x1f90b621cb0 <col:150, col:160> col:160 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f90b622288 <line:702:24, col:143> col:51 wcstoull 'unsigned long long (const wchar_t *, wchar_t **, int) __attribute__((cdecl))':'unsigned long long (const wchar_t *, wchar_t **, int)'
| |-ParmVarDecl 0x1f90b621fa8 <col:67, col:82> col:82 _Str 'const wchar_t *'
| |-ParmVarDecl 0x1f90b622028 <col:113, col:124> col:124 _EndPtr 'wchar_t **'
| `-ParmVarDecl 0x1f90b6220a8 <col:133, col:137> col:137 _Radix 'int'
|-FunctionDecl 0x1f90b61c6c0 <line:703:24, col:174> col:51 _wcstoull_l 'unsigned long long (const wchar_t *, wchar_t **, int, _locale_t) __attribute__((cdecl))':'unsigned long long (const wchar_t *, wchar_t **, int, _locale_t)'
| |-ParmVarDecl 0x1f90b622368 <col:70, col:85> col:85 _Str 'const wchar_t *'
| |-ParmVarDecl 0x1f90b6223e8 <col:116, col:127> col:127 _EndPtr 'wchar_t **'
| |-ParmVarDecl 0x1f90b622468 <col:136, col:140> col:140 _Radix 'int'
| `-ParmVarDecl 0x1f90b61c4b0 <col:157, col:167> col:167 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f90b61c9d0 <line:704:24, col:124> col:44 wcstold 'long double (const wchar_t *, wchar_t **) __attribute__((cdecl))':'long double (const wchar_t *, wchar_t **)'
| |-ParmVarDecl 0x1f90b61c7a8 <col:59, col:75> col:75 _Str 'const wchar_t *'
| `-ParmVarDecl 0x1f90b61c828 <col:106, col:117> col:117 _EndPtr 'wchar_t **'
|-FunctionDecl 0x1f90b61cd78 <line:705:24, col:155> col:44 _wcstold_l 'long double (const wchar_t *, wchar_t **, _locale_t) __attribute__((cdecl))':'long double (const wchar_t *, wchar_t **, _locale_t)'
| |-ParmVarDecl 0x1f90b61caa8 <col:62, col:78> col:78 _Str 'const wchar_t *'
| |-ParmVarDecl 0x1f90b61cb28 <col:109, col:120> col:120 _EndPtr 'wchar_t **'
| `-ParmVarDecl 0x1f90b61cba0 <col:138, col:148> col:148 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f90b61d080 <line:706:24, col:117> col:38 wcstof 'float (const wchar_t *, wchar_t **) __attribute__((cdecl))':'float (const wchar_t *, wchar_t **)'
| |-ParmVarDecl 0x1f90b61ce58 <col:52, col:68> col:68 _Str 'const wchar_t *'
| `-ParmVarDecl 0x1f90b61ced8 <col:99, col:110> col:110 _EndPtr 'wchar_t **'
|-FunctionDecl 0x1f90b61e4d0 <line:707:24, col:148> col:38 _wcstof_l 'float (const wchar_t *, wchar_t **, _locale_t) __attribute__((cdecl))':'float (const wchar_t *, wchar_t **, _locale_t)'
| |-ParmVarDecl 0x1f90b61d158 <col:55, col:71> col:71 _Str 'const wchar_t *'
| |-ParmVarDecl 0x1f90b61d1d8 <col:102, col:113> col:113 _EndPtr 'wchar_t **'
| `-ParmVarDecl 0x1f90b61d250 <col:131, col:141> col:141 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f90b61e7e0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:711:118> col:78 _wgetenv 'wchar_t *(const wchar_t *) __attribute__((cdecl))':'wchar_t *(const wchar_t *)'
| |-ParmVarDecl 0x1f90b61e670 <col:94, col:110> col:110 _VarName 'const wchar_t *'
| `-DeprecatedAttr 0x1f90b61e888 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wdupenv_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f90b61ed38 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:712:28, col:198> col:44 _wgetenv_s 'errno_t (size_t *, wchar_t *, size_t, const wchar_t *) __attribute__((cdecl))':'errno_t (size_t *, wchar_t *, size_t, const wchar_t *)'
| |-ParmVarDecl 0x1f90b61e9c8 <col:61, col:70> col:70 _ReturnSize 'size_t *'
| |-ParmVarDecl 0x1f90b61ea40 <col:119, col:129> col:129 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1f90b61eab8 <col:143, col:150> col:150 _DstSizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1f90b61eb30 <col:174, col:190> col:190 _VarName 'const wchar_t *'
|-FunctionDecl 0x1f90b61f0f0 <line:720:28, col:214> col:44 _wdupenv_s 'errno_t (wchar_t **, size_t *, const wchar_t *) __attribute__((cdecl))':'errno_t (wchar_t **, size_t *, const wchar_t *)'
| |-ParmVarDecl 0x1f90b61ee28 <col:127, col:137> col:137 _Buffer 'wchar_t **'
| |-ParmVarDecl 0x1f90b61eea0 <col:156, col:164> col:164 _BufferSizeInWords 'size_t *'
| `-ParmVarDecl 0x1f90b61ef18 <col:191, col:206> col:206 _VarName 'const wchar_t *'
|-FunctionDecl 0x1f90b61f348 <line:728:9, col:65> col:21 _wsystem 'int (const wchar_t *) __attribute__((cdecl))':'int (const wchar_t *)'
| `-ParmVarDecl 0x1f90b61f1d0 <col:41, col:57> col:57 _Command 'const wchar_t *'
|-FunctionDecl 0x1f90b6443e8 <line:733:24, col:71> col:39 _wtof 'double (const wchar_t *) __attribute__((cdecl))':'double (const wchar_t *)'
| `-ParmVarDecl 0x1f90b61f418 <col:52, col:67> col:67 _Str 'const wchar_t *'
|-FunctionDecl 0x1f90b6446e0 <line:734:24, col:101> col:39 _wtof_l 'double (const wchar_t *, _locale_t) __attribute__((cdecl))':'double (const wchar_t *, _locale_t)'
| |-ParmVarDecl 0x1f90b6444b8 <col:54, col:69> col:69 _Str 'const wchar_t *'
| `-ParmVarDecl 0x1f90b644530 <col:84, col:94> col:94 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f90b644898 <line:735:24, col:68> col:36 _wtoi 'int (const wchar_t *) __attribute__((cdecl))':'int (const wchar_t *)'
| `-ParmVarDecl 0x1f90b6447b8 <col:49, col:64> col:64 _Str 'const wchar_t *'
|-FunctionDecl 0x1f90b644b90 <line:736:24, col:98> col:36 _wtoi_l 'int (const wchar_t *, _locale_t) __attribute__((cdecl))':'int (const wchar_t *, _locale_t)'
| |-ParmVarDecl 0x1f90b644968 <col:51, col:66> col:66 _Str 'const wchar_t *'
| `-ParmVarDecl 0x1f90b6449e0 <col:81, col:91> col:91 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f90b644de8 <line:737:24, col:69> col:37 _wtol 'long (const wchar_t *) __attribute__((cdecl))':'long (const wchar_t *)'
| `-ParmVarDecl 0x1f90b644c68 <col:50, col:65> col:65 _Str 'const wchar_t *'
|-FunctionDecl 0x1f90b6450e0 <line:738:24, col:99> col:37 _wtol_l 'long (const wchar_t *, _locale_t) __attribute__((cdecl))':'long (const wchar_t *, _locale_t)'
| |-ParmVarDecl 0x1f90b644eb8 <col:52, col:67> col:67 _Str 'const wchar_t *'
| `-ParmVarDecl 0x1f90b644f30 <col:82, col:92> col:92 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f90b645368 <line:739:24, col:75> col:42 _wtoll 'long long (const wchar_t *) __attribute__((cdecl))':'long long (const wchar_t *)'
| `-ParmVarDecl 0x1f90b6451b8 <col:56, col:71> col:71 _Str 'const wchar_t *'
|-FunctionDecl 0x1f90b645660 <line:740:24, col:105> col:42 _wtoll_l 'long long (const wchar_t *, _locale_t) __attribute__((cdecl))':'long long (const wchar_t *, _locale_t)'
| |-ParmVarDecl 0x1f90b645438 <col:58, col:73> col:73 _Str 'const wchar_t *'
| `-ParmVarDecl 0x1f90b6454b0 <col:88, col:98> col:98 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f90b645ab8 <line:742:28, col:162> col:44 _i64tow_s 'errno_t (long long, wchar_t *, size_t, int) __attribute__((cdecl))':'errno_t (long long, wchar_t *, size_t, int)'
| |-ParmVarDecl 0x1f90b645740 <col:59, col:67> col:67 _Val 'long long'
| |-ParmVarDecl 0x1f90b6457b8 <col:102, col:112> col:112 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1f90b645830 <col:126, col:133> col:133 _SizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1f90b6458b0 <col:152, col:156> col:156 _Radix 'int'
|-FunctionDecl 0x1f90b645f30 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:743:146> col:62 _i64tow 'wchar_t *(long long, wchar_t *, int) __attribute__((cdecl))':'wchar_t *(long long, wchar_t *, int)'
| |-ParmVarDecl 0x1f90b645c68 <col:75, col:83> col:83 _Val 'long long'
| |-ParmVarDecl 0x1f90b645ce0 <col:112, col:122> col:122 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1f90b645d60 <col:136, col:140> col:140 _Radix 'int'
| `-DeprecatedAttr 0x1f90b645fe8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _i64tow_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f90b6484e8 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:744:28, col:172> col:44 _ui64tow_s 'errno_t (unsigned long long, wchar_t *, size_t, int) __attribute__((cdecl))':'errno_t (unsigned long long, wchar_t *, size_t, int)'
| |-ParmVarDecl 0x1f90b646130 <col:60, col:77> col:77 _Val 'unsigned long long'
| |-ParmVarDecl 0x1f90b6461a8 <col:112, col:122> col:122 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1f90b646220 <col:136, col:143> col:143 _SizeInWords 'size_t':'unsigned long long'
| `-ParmVarDecl 0x1f90b6462a0 <col:162, col:166> col:166 _Radix 'int'
|-FunctionDecl 0x1f90b648960 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:745:157> col:63 _ui64tow 'wchar_t *(unsigned long long, wchar_t *, int) __attribute__((cdecl))':'wchar_t *(unsigned long long, wchar_t *, int)'
| |-ParmVarDecl 0x1f90b648698 <col:77, col:94> col:94 _Val 'unsigned long long'
| |-ParmVarDecl 0x1f90b648710 <col:123, col:133> col:133 _DstBuf 'wchar_t *'
| |-ParmVarDecl 0x1f90b648790 <col:147, col:151> col:151 _Radix 'int'
| `-DeprecatedAttr 0x1f90b648a18 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _ui64tow_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f90b648c38 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:746:24, col:76> col:42 _wtoi64 'long long (const wchar_t *) __attribute__((cdecl))':'long long (const wchar_t *)'
| `-ParmVarDecl 0x1f90b648b58 <col:57, col:72> col:72 _Str 'const wchar_t *'
|-FunctionDecl 0x1f90b648e80 <line:747:24, col:106> col:42 _wtoi64_l 'long long (const wchar_t *, _locale_t) __attribute__((cdecl))':'long long (const wchar_t *, _locale_t)'
| |-ParmVarDecl 0x1f90b648d08 <col:59, col:74> col:74 _Str 'const wchar_t *'
| `-ParmVarDecl 0x1f90b648d80 <col:89, col:99> col:99 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f90b649178 <line:748:24, col:141> col:42 _wcstoi64 'long long (const wchar_t *, wchar_t **, int) __attribute__((cdecl))':'long long (const wchar_t *, wchar_t **, int)'
| |-ParmVarDecl 0x1f90b648f58 <col:59, col:75> col:75 _Str 'const wchar_t *'
| |-ParmVarDecl 0x1f90b648fd8 <col:106, col:117> col:117 _EndPtr 'wchar_t **'
| `-ParmVarDecl 0x1f90b649058 <col:131, col:135> col:135 _Radix 'int'
|-FunctionDecl 0x1f90b6464f8 <line:749:24, col:171> col:42 _wcstoi64_l 'long long (const wchar_t *, wchar_t **, int, _locale_t) __attribute__((cdecl))':'long long (const wchar_t *, wchar_t **, int, _locale_t)'
| |-ParmVarDecl 0x1f90b649258 <col:61, col:77> col:77 _Str 'const wchar_t *'
| |-ParmVarDecl 0x1f90b6492d8 <col:108, col:119> col:119 _EndPtr 'wchar_t **'
| |-ParmVarDecl 0x1f90b646340 <col:133, col:137> col:137 _Radix 'int'
| `-ParmVarDecl 0x1f90b6463b8 <col:154, col:164> col:164 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f90b646800 <line:750:24, col:150> col:50 _wcstoui64 'unsigned long long (const wchar_t *, wchar_t **, int) __attribute__((cdecl))':'unsigned long long (const wchar_t *, wchar_t **, int)'
| |-ParmVarDecl 0x1f90b6465e0 <col:68, col:84> col:84 _Str 'const wchar_t *'
| |-ParmVarDecl 0x1f90b646660 <col:115, col:126> col:126 _EndPtr 'wchar_t **'
| `-ParmVarDecl 0x1f90b6466e0 <col:140, col:144> col:144 _Radix 'int'
|-FunctionDecl 0x1f90b646b98 <line:751:24, col:180> col:50 _wcstoui64_l 'unsigned long long (const wchar_t *, wchar_t **, int, _locale_t) __attribute__((cdecl))':'unsigned long long (const wchar_t *, wchar_t **, int, _locale_t)'
| |-ParmVarDecl 0x1f90b6468e0 <col:70, col:85> col:85 _Str 'const wchar_t *'
| |-ParmVarDecl 0x1f90b646960 <col:117, col:128> col:128 _EndPtr 'wchar_t **'
| |-ParmVarDecl 0x1f90b6469e0 <col:142, col:146> col:146 _Radix 'int'
| `-ParmVarDecl 0x1f90b646a58 <col:163, col:173> col:173 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f90b646f58 <line:770:24, col:151> col:39 _fullpath 'char *(char *, const char *, size_t) __attribute__((cdecl))':'char *(char *, const char *, size_t)'
| |-ParmVarDecl 0x1f90b646c88 <col:82, col:89> col:89 _FullPath 'char *'
| |-ParmVarDecl 0x1f90b646d08 <col:107, col:120> col:120 _Path 'const char *'
| `-ParmVarDecl 0x1f90b646d80 <col:132, col:139> col:139 _SizeInBytes 'size_t':'unsigned long long'
|-FunctionDecl 0x1f90b64a568 <line:778:28, col:189> col:44 _ecvt_s 'errno_t (char *, size_t, double, int, int *, int *) __attribute__((cdecl))':'errno_t (char *, size_t, double, int, int *, int *)'
| |-ParmVarDecl 0x1f90b647040 <col:74, col:81> col:81 _DstBuf 'char *'
| |-ParmVarDecl 0x1f90b6470b8 <col:95, col:102> col:102 _Size 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f90b647138 <col:114, col:121> col:121 _Val 'double'
| |-ParmVarDecl 0x1f90b6471b8 <col:132, col:136> col:136 _NumOfDights 'int'
| |-ParmVarDecl 0x1f90b647238 <col:156, col:162> col:162 _PtDec 'int *'
| `-ParmVarDecl 0x1f90b6472b8 <col:176, col:182> col:182 _PtSign 'int *'
|-FunctionDecl 0x1f90b64aa60 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:780:158> col:72 _ecvt 'char *(double, int, int *, int *) __attribute__((cdecl))':'char *(double, int, int *, int *)'
| |-ParmVarDecl 0x1f90b64a728 <col:83, col:90> col:90 _Val 'double'
| |-ParmVarDecl 0x1f90b64a7a8 <col:101, col:105> col:105 _NumOfDigits 'int'
| |-ParmVarDecl 0x1f90b64a828 <col:125, col:131> col:131 _PtDec 'int *'
| |-ParmVarDecl 0x1f90b64a8a8 <col:145, col:151> col:151 _PtSign 'int *'
| `-DeprecatedAttr 0x1f90b64ab20 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _ecvt_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f90b64b058 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:781:28, col:186> col:44 _fcvt_s 'errno_t (char *, size_t, double, int, int *, int *) __attribute__((cdecl))':'errno_t (char *, size_t, double, int, int *, int *)'
| |-ParmVarDecl 0x1f90b64ac68 <col:74, col:81> col:81 _DstBuf 'char *'
| |-ParmVarDecl 0x1f90b64ace0 <col:95, col:102> col:102 _Size 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f90b64ad60 <col:114, col:121> col:121 _Val 'double'
| |-ParmVarDecl 0x1f90b64ade0 <col:132, col:136> col:136 _NumOfDec 'int'
| |-ParmVarDecl 0x1f90b64ae60 <col:153, col:159> col:159 _PtDec 'int *'
| `-ParmVarDecl 0x1f90b64aee0 <col:173, col:179> col:179 _PtSign 'int *'
|-FunctionDecl 0x1f90b6494c8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:783:155> col:72 _fcvt 'char *(double, int, int *, int *) __attribute__((cdecl))':'char *(double, int, int *, int *)'
| |-ParmVarDecl 0x1f90b64b218 <col:83, col:90> col:90 _Val 'double'
| |-ParmVarDecl 0x1f90b64b298 <col:101, col:105> col:105 _NumOfDec 'int'
| |-ParmVarDecl 0x1f90b64b318 <col:122, col:128> col:128 _PtDec 'int *'
| |-ParmVarDecl 0x1f90b649388 <col:142, col:148> col:148 _PtSign 'int *'
| `-DeprecatedAttr 0x1f90b649588 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _fcvt_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f90b649a48 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:784:9, col:129> col:25 _gcvt_s 'errno_t (char *, size_t, double, int) __attribute__((cdecl))':'errno_t (char *, size_t, double, int)'
| |-ParmVarDecl 0x1f90b6496d0 <col:55, col:62> col:62 _DstBuf 'char *'
| |-ParmVarDecl 0x1f90b649748 <col:76, col:83> col:83 _Size 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f90b6497c8 <col:95, col:102> col:102 _Val 'double'
| `-ParmVarDecl 0x1f90b649848 <col:113, col:117> col:117 _NumOfDigits 'int'
|-FunctionDecl 0x1f90b649e98 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:786:141> col:57 _gcvt 'char *(double, int, char *) __attribute__((cdecl))':'char *(double, int, char *)'
| |-ParmVarDecl 0x1f90b649bf8 <col:68, col:75> col:75 _Val 'double'
| |-ParmVarDecl 0x1f90b649c78 <col:86, col:90> col:90 _NumOfDigits 'int'
| |-ParmVarDecl 0x1f90b649cf8 <col:127, col:134> col:134 _DstBuf 'char *'
| `-DeprecatedAttr 0x1f90b649f50 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _gcvt_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f90b643310 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:788:24, col:91> col:36 _atodbl 'int (_CRT_DOUBLE *, char *) __attribute__((cdecl))':'int (_CRT_DOUBLE *, char *)'
| |-ParmVarDecl 0x1f90b64a108 <col:50, col:64> col:64 _Result '_CRT_DOUBLE *'
| `-ParmVarDecl 0x1f90b64a188 <col:80, col:87> col:87 _Str 'char *'
|-FunctionDecl 0x1f90b643690 <line:789:24, col:89> col:36 _atoldbl 'int (_LDOUBLE *, char *) __attribute__((cdecl))':'int (_LDOUBLE *, char *)'
| |-ParmVarDecl 0x1f90b643468 <col:51, col:62> col:62 _Result '_LDOUBLE *'
| `-ParmVarDecl 0x1f90b6434e8 <col:78, col:85> col:85 _Str 'char *'
|-FunctionDecl 0x1f90b643a10 <line:790:24, col:96> col:36 _atoflt 'int (_CRT_FLOAT *, const char *) __attribute__((cdecl))':'int (_CRT_FLOAT *, const char *)'
| |-ParmVarDecl 0x1f90b6437e8 <col:50, col:63> col:63 _Result '_CRT_FLOAT *'
| `-ParmVarDecl 0x1f90b643868 <col:79, col:92> col:92 _Str 'const char *'
|-FunctionDecl 0x1f90b643db8 <line:791:24, col:121> col:36 _atodbl_l 'int (_CRT_DOUBLE *, char *, _locale_t) __attribute__((cdecl))':'int (_CRT_DOUBLE *, char *, _locale_t)'
| |-ParmVarDecl 0x1f90b643ae8 <col:52, col:66> col:66 _Result '_CRT_DOUBLE *'
| |-ParmVarDecl 0x1f90b643b68 <col:82, col:89> col:89 _Str 'char *'
| `-ParmVarDecl 0x1f90b643be0 <col:104, col:114> col:114 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f90b644168 <line:792:24, col:119> col:36 _atoldbl_l 'int (_LDOUBLE *, char *, _locale_t) __attribute__((cdecl))':'int (_LDOUBLE *, char *, _locale_t)'
| |-ParmVarDecl 0x1f90b643e98 <col:53, col:64> col:64 _Result '_LDOUBLE *'
| |-ParmVarDecl 0x1f90b643f18 <col:80, col:87> col:87 _Str 'char *'
| `-ParmVarDecl 0x1f90b643f90 <col:102, col:112> col:112 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f90b64c5f8 <line:793:24, col:126> col:36 _atoflt_l 'int (_CRT_FLOAT *, const char *, _locale_t) __attribute__((cdecl))':'int (_CRT_FLOAT *, const char *, _locale_t)'
| |-ParmVarDecl 0x1f90b644248 <col:52, col:65> col:65 _Result '_CRT_FLOAT *'
| |-ParmVarDecl 0x1f90b64c3a0 <col:81, col:94> col:94 _Str 'const char *'
| `-ParmVarDecl 0x1f90b64c418 <col:109, col:119> col:119 _Locale '_locale_t':'struct localeinfo_struct *'
|-FunctionDecl 0x1f90b64c8d0 <line:794:46> col:46 implicit _lrotl 'unsigned long (unsigned long, int)' extern
| |-ParmVarDecl 0x1f90b64c970 <<invalid sloc>> <invalid sloc> 'unsigned long'
| |-ParmVarDecl 0x1f90b64c9d8 <<invalid sloc>> <invalid sloc> 'int'
| `-NoThrowAttr 0x1f90b64ca50 <col:46> Implicit
|-FunctionDecl 0x1f90b64caa8 prev 0x1f90b64c8d0 <col:24, col:93> col:46 _lrotl 'unsigned long (unsigned long, int)'
| |-ParmVarDecl 0x1f90b64c6e0 <col:58, col:72> col:72 _Val 'unsigned long'
| |-ParmVarDecl 0x1f90b64c760 <col:83, col:87> col:87 _Shift 'int'
| `-NoThrowAttr 0x1f90b64cba0 <col:46> Inherited Implicit
|-FunctionDecl 0x1f90b64cd60 <line:795:46> col:46 implicit _lrotr 'unsigned long (unsigned long, int)' extern
| |-ParmVarDecl 0x1f90b64ce00 <<invalid sloc>> <invalid sloc> 'unsigned long'
| |-ParmVarDecl 0x1f90b64ce68 <<invalid sloc>> <invalid sloc> 'int'
| `-NoThrowAttr 0x1f90b64cee0 <col:46> Implicit
|-FunctionDecl 0x1f90b64cf38 prev 0x1f90b64cd60 <col:24, col:93> col:46 _lrotr 'unsigned long (unsigned long, int)'
| |-ParmVarDecl 0x1f90b64cbe0 <col:58, col:72> col:72 _Val 'unsigned long'
| |-ParmVarDecl 0x1f90b64cc60 <col:83, col:87> col:87 _Shift 'int'
| `-NoThrowAttr 0x1f90b64d030 <col:46> Inherited Implicit
|-FunctionDecl 0x1f90b64d568 <line:796:40, line:797:37> line:796:58 _makepath_s 'errno_t (char *, size_t, const char *, const char *, const char *, const char *) __attribute__((cdecl))':'errno_t (char *, size_t, const char *, const char *, const char *, const char *)'
| |-ParmVarDecl 0x1f90b64d070 <col:99, col:106> col:106 _PathResult 'char *'
| |-ParmVarDecl 0x1f90b64d0e8 <col:124, col:131> col:131 _SizeInWords 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f90b64d168 <col:156, col:169> col:169 _Drive 'const char *'
| |-ParmVarDecl 0x1f90b64d1e8 <col:188, col:201> col:201 _Dir 'const char *'
| |-ParmVarDecl 0x1f90b64d268 <col:218, col:231> col:231 _Filename 'const char *'
| `-ParmVarDecl 0x1f90b64d2e8 <line:797:20, col:33> col:33 _Ext 'const char *'
|-FunctionDecl 0x1f90b64db10 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1948:181> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:799:78 _makepath 'void (char *, const char *, const char *, const char *, const char *) __attribute__((cdecl))':'void (char *, const char *, const char *, const char *, const char *)'
| |-ParmVarDecl 0x1f90b64d728 <col:113, col:119> col:119 _Path 'char *'
| |-ParmVarDecl 0x1f90b64d7a8 <col:137, col:151> col:151 _Drive 'const char *'
| |-ParmVarDecl 0x1f90b64d828 <col:170, col:184> col:184 _Dir 'const char *'
| |-ParmVarDecl 0x1f90b64d8a8 <col:201, col:215> col:215 _Filename 'const char *'
| |-ParmVarDecl 0x1f90b64d928 <col:237, col:251> col:251 _Ext 'const char *'
| `-DeprecatedAttr 0x1f90b64dbd8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _makepath_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f90b64deb0 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:826:9, col:59> col:27 _onexit '_onexit_t (_onexit_t) __attribute__((cdecl))':'_onexit_t (_onexit_t)'
| `-ParmVarDecl 0x1f90b64dd40 <col:44, col:54> col:54 _Func '_onexit_t':'int (*)(void) __attribute__((cdecl))'
|-FunctionDecl 0x1f90b64e0d0 <line:831:9, col:60> col:22 perror 'void (const char *) __attribute__((cdecl))':'void (const char *)'
| `-ParmVarDecl 0x1f90b64df88 <col:40, col:53> col:53 _ErrMsg 'const char *'
|-FunctionDecl 0x1f90b64e288 <line:838:24, col:77> col:39 _putenv 'int (const char *) __attribute__((cdecl))':'int (const char *)'
| `-ParmVarDecl 0x1f90b64e1a8 <col:54, col:67> col:67 _EnvString 'const char *'
|-FunctionDecl 0x1f90b64b5b8 <line:839:28, col:107> col:44 _putenv_s 'errno_t (const char *, const char *) __attribute__((cdecl))':'errno_t (const char *, const char *)'
| |-ParmVarDecl 0x1f90b64b390 <col:61, col:74> col:74 _Name 'const char *'
| `-ParmVarDecl 0x1f90b64b410 <col:88, col:101> col:101 _Value 'const char *'
|-FunctionDecl 0x1f90b64b880 <line:842:30> col:30 implicit _rotl 'unsigned int (unsigned int, int)' extern
| |-ParmVarDecl 0x1f90b64b920 <<invalid sloc>> <invalid sloc> 'unsigned int'
| |-ParmVarDecl 0x1f90b64b988 <<invalid sloc>> <invalid sloc> 'int'
| `-NoThrowAttr 0x1f90b64ba00 <col:30> Implicit
|-FunctionDecl 0x1f90b64ba58 prev 0x1f90b64b880 <col:9, col:75> col:30 _rotl 'unsigned int (unsigned int, int)'
| |-ParmVarDecl 0x1f90b64b698 <col:41, col:54> col:54 _Val 'unsigned int'
| |-ParmVarDecl 0x1f90b64b718 <col:65, col:69> col:69 _Shift 'int'
| `-NoThrowAttr 0x1f90b64bb50 <col:30> Inherited Implicit
|-FunctionDecl 0x1f90b64bd80 <line:843:34> col:34 implicit _rotl64 'unsigned long long (unsigned long long, int)' extern
| |-ParmVarDecl 0x1f90b64be20 <<invalid sloc>> <invalid sloc> 'unsigned long long'
| |-ParmVarDecl 0x1f90b64be88 <<invalid sloc>> <invalid sloc> 'int'
| `-NoThrowAttr 0x1f90b64bf00 <col:34> Implicit
|-FunctionDecl 0x1f90b64bf58 prev 0x1f90b64bd80 <col:9, col:85> col:34 _rotl64 'unsigned long long (unsigned long long, int)'
| |-ParmVarDecl 0x1f90b64bb90 <col:47, col:64> col:64 _Val 'unsigned long long'
| |-ParmVarDecl 0x1f90b64bc10 <col:75, col:79> col:79 _Shift 'int'
| `-NoThrowAttr 0x1f90b64c050 <col:34> Inherited Implicit
|-FunctionDecl 0x1f90b64c210 <line:844:30> col:30 implicit _rotr 'unsigned int (unsigned int, int)' extern
| |-ParmVarDecl 0x1f90b64c2b0 <<invalid sloc>> <invalid sloc> 'unsigned int'
| |-ParmVarDecl 0x1f90b64c318 <<invalid sloc>> <invalid sloc> 'int'
| `-NoThrowAttr 0x1f90b655430 <col:30> Implicit
|-FunctionDecl 0x1f90b655488 prev 0x1f90b64c210 <col:9, col:75> col:30 _rotr 'unsigned int (unsigned int, int)'
| |-ParmVarDecl 0x1f90b64c090 <col:41, col:54> col:54 _Val 'unsigned int'
| |-ParmVarDecl 0x1f90b64c110 <col:65, col:69> col:69 _Shift 'int'
| `-NoThrowAttr 0x1f90b655580 <col:30> Inherited Implicit
|-FunctionDecl 0x1f90b655740 <line:845:34> col:34 implicit _rotr64 'unsigned long long (unsigned long long, int)' extern
| |-ParmVarDecl 0x1f90b6557e0 <<invalid sloc>> <invalid sloc> 'unsigned long long'
| |-ParmVarDecl 0x1f90b655848 <<invalid sloc>> <invalid sloc> 'int'
| `-NoThrowAttr 0x1f90b6558c0 <col:34> Implicit
|-FunctionDecl 0x1f90b655918 prev 0x1f90b655740 <col:9, col:85> col:34 _rotr64 'unsigned long long (unsigned long long, int)'
| |-ParmVarDecl 0x1f90b6555c0 <col:47, col:64> col:64 _Val 'unsigned long long'
| |-ParmVarDecl 0x1f90b655640 <col:75, col:79> col:79 _Shift 'int'
| `-NoThrowAttr 0x1f90b655a10 <col:34> Inherited Implicit
|-FunctionDecl 0x1f90b655dc8 <line:849:9, col:171> col:25 _searchenv_s 'errno_t (const char *, const char *, char *, size_t) __attribute__((cdecl))':'errno_t (const char *, const char *, char *, size_t)'
| |-ParmVarDecl 0x1f90b655a50 <col:45, col:58> col:58 _Filename 'const char *'
| |-ParmVarDecl 0x1f90b655ad0 <col:76, col:89> col:89 _EnvVar 'const char *'
| |-ParmVarDecl 0x1f90b655b50 <col:127, col:134> col:134 _ResultPath 'char *'
| `-ParmVarDecl 0x1f90b655bc8 <col:152, col:159> col:159 _SizeInBytes 'size_t':'unsigned long long'
|-FunctionDecl 0x1f90b656210 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1954:149> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:851:78 _searchenv 'void (const char *, const char *, char *) __attribute__((cdecl))':'void (const char *, const char *, char *)'
| |-ParmVarDecl 0x1f90b655f78 <col:97, col:111> col:111 _Filename 'const char *'
| |-ParmVarDecl 0x1f90b655ff8 <col:129, col:143> col:143 _EnvVar 'const char *'
| |-ParmVarDecl 0x1f90b656078 <col:176, col:182> col:182 _ResultPath 'char *'
| `-DeprecatedAttr 0x1f90b6562c8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _searchenv_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f90b6518b0 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:854:261> col:62 _splitpath 'void (const char *, char *, char *, char *, char *) __attribute__((cdecl))':'void (const char *, char *, char *, char *, char *)'
| |-ParmVarDecl 0x1f90b6514c8 <col:80, col:93> col:93 _FullPath 'const char *'
| |-ParmVarDecl 0x1f90b651548 <col:129, col:136> col:136 _Drive 'char *'
| |-ParmVarDecl 0x1f90b6515c8 <col:169, col:176> col:176 _Dir 'char *'
| |-ParmVarDecl 0x1f90b651648 <col:207, col:214> col:214 _Filename 'char *'
| |-ParmVarDecl 0x1f90b6516c8 <col:250, col:257> col:257 _Ext 'char *'
| `-DeprecatedAttr 0x1f90b651978 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _splitpath_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f90b652190 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:855:40, line:859:79> line:855:57 _splitpath_s 'errno_t (const char *, char *, size_t, char *, size_t, char *, size_t, char *, size_t) __attribute__((cdecl))':'errno_t (const char *, char *, size_t, char *, size_t, char *, size_t, char *, size_t)'
| |-ParmVarDecl 0x1f90b651ac0 <col:77, col:90> col:90 _FullPath 'const char *'
| |-ParmVarDecl 0x1f90b651b40 <line:856:48, col:55> col:55 _Drive 'char *'
| |-ParmVarDecl 0x1f90b651bb8 <col:68, col:75> col:75 _DriveSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f90b651c38 <line:857:46, col:53> col:53 _Dir 'char *'
| |-ParmVarDecl 0x1f90b651cb0 <col:64, col:71> col:71 _DirSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f90b651d30 <line:858:51, col:58> col:58 _Filename 'char *'
| |-ParmVarDecl 0x1f90b651da8 <col:74, col:81> col:81 _FilenameSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f90b651e28 <line:859:46, col:53> col:53 _Ext 'char *'
| `-ParmVarDecl 0x1f90b651ea0 <col:64, col:71> col:71 _ExtSize 'size_t':'unsigned long long'
|-FunctionDecl 0x1f90b6565d0 <line:862:9, col:204> col:24 _swab 'void (char *, char *, int) __attribute__((cdecl))':'void (char *, char *, int)'
| |-ParmVarDecl 0x1f90b6522a8 <col:95, col:102> col:102 _Buf1 'char *'
| |-ParmVarDecl 0x1f90b652328 <col:174, col:181> col:181 _Buf2 'char *'
| `-ParmVarDecl 0x1f90b656440 <col:188, col:192> col:192 _SizeInBytes 'int'
|-FunctionDecl 0x1f90b656970 <line:873:24, col:161> col:42 _wfullpath 'wchar_t *(wchar_t *, const wchar_t *, size_t) __attribute__((cdecl))':'wchar_t *(wchar_t *, const wchar_t *, size_t)'
| |-ParmVarDecl 0x1f90b6566b0 <col:86, col:96> col:96 _FullPath 'wchar_t *'
| |-ParmVarDecl 0x1f90b656728 <col:114, col:130> col:130 _Path 'const wchar_t *'
| `-ParmVarDecl 0x1f90b6567a0 <col:142, col:149> col:149 _SizeInWords 'size_t':'unsigned long long'
|-FunctionDecl 0x1f90b656f08 <line:879:40, line:880:40> line:879:56 _wmakepath_s 'errno_t (wchar_t *, size_t, const wchar_t *, const wchar_t *, const wchar_t *, const wchar_t *) __attribute__((cdecl))':'errno_t (wchar_t *, size_t, const wchar_t *, const wchar_t *, const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x1f90b656a50 <col:91, col:101> col:101 _PathResult 'wchar_t *'
| |-ParmVarDecl 0x1f90b656ac8 <col:119, col:126> col:126 _SIZE 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f90b656b40 <col:144, col:160> col:160 _Drive 'const wchar_t *'
| |-ParmVarDecl 0x1f90b656bb8 <col:179, col:195> col:195 _Dir 'const wchar_t *'
| |-ParmVarDecl 0x1f90b656c30 <col:212, col:228> col:228 _Filename 'const wchar_t *'
| `-ParmVarDecl 0x1f90b656ca8 <line:880:20, col:36> col:36 _Ext 'const wchar_t *'
|-FunctionDecl 0x1f90b6534c0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1948:181> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:882:78 _wmakepath 'void (wchar_t *, const wchar_t *, const wchar_t *, const wchar_t *, const wchar_t *) __attribute__((cdecl))':'void (wchar_t *, const wchar_t *, const wchar_t *, const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x1f90b6570c0 <col:114, col:123> col:123 _ResultPath 'wchar_t *'
| |-ParmVarDecl 0x1f90b657138 <col:147, col:164> col:164 _Drive 'const wchar_t *'
| |-ParmVarDecl 0x1f90b6571b0 <col:183, col:200> col:200 _Dir 'const wchar_t *'
| |-ParmVarDecl 0x1f90b657228 <col:217, col:234> col:234 _Filename 'const wchar_t *'
| |-ParmVarDecl 0x1f90b6572a0 <col:256, col:273> col:273 _Ext 'const wchar_t *'
| `-DeprecatedAttr 0x1f90b653588 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wmakepath_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f90b653840 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:885:9, col:65> col:22 _wperror 'void (const wchar_t *) __attribute__((cdecl))':'void (const wchar_t *)'
| `-ParmVarDecl 0x1f90b6536c8 <col:42, col:58> col:58 _ErrMsg 'const wchar_t *'
|-FunctionDecl 0x1f90b6539f0 <line:889:24, col:81> col:39 _wputenv 'int (const wchar_t *) __attribute__((cdecl))':'int (const wchar_t *)'
| `-ParmVarDecl 0x1f90b653910 <col:55, col:71> col:71 _EnvString 'const wchar_t *'
|-FunctionDecl 0x1f90b653cd8 <line:890:28, col:114> col:44 _wputenv_s 'errno_t (const wchar_t *, const wchar_t *) __attribute__((cdecl))':'errno_t (const wchar_t *, const wchar_t *)'
| |-ParmVarDecl 0x1f90b653ac0 <col:62, col:78> col:78 _Name 'const wchar_t *'
| `-ParmVarDecl 0x1f90b653b38 <col:92, col:108> col:108 _Value 'const wchar_t *'
|-FunctionDecl 0x1f90b654118 <line:891:9, col:181> col:25 _wsearchenv_s 'errno_t (const wchar_t *, const wchar_t *, wchar_t *, size_t) __attribute__((cdecl))':'errno_t (const wchar_t *, const wchar_t *, wchar_t *, size_t)'
| |-ParmVarDecl 0x1f90b653db0 <col:46, col:62> col:62 _Filename 'const wchar_t *'
| |-ParmVarDecl 0x1f90b653e28 <col:80, col:96> col:96 _EnvVar 'const wchar_t *'
| |-ParmVarDecl 0x1f90b653ea0 <col:134, col:144> col:144 _ResultPath 'wchar_t *'
| `-ParmVarDecl 0x1f90b653f18 <col:162, col:169> col:169 _SizeInWords 'size_t':'unsigned long long'
|-FunctionDecl 0x1f90b64f5a0 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, line:1954:149> D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:893:78 _wsearchenv 'void (const wchar_t *, const wchar_t *, wchar_t *) __attribute__((cdecl))':'void (const wchar_t *, const wchar_t *, wchar_t *)'
| |-ParmVarDecl 0x1f90b6542c0 <col:98, col:115> col:115 _Filename 'const wchar_t *'
| |-ParmVarDecl 0x1f90b654338 <col:133, col:150> col:150 _EnvVar 'const wchar_t *'
| |-ParmVarDecl 0x1f90b64f3d0 <col:183, col:192> col:192 _ResultPath 'wchar_t *'
| `-DeprecatedAttr 0x1f90b64f658 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wsearchenv_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f90b64fc70 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:896:278> col:63 _wsplitpath 'void (const wchar_t *, wchar_t *, wchar_t *, wchar_t *, wchar_t *) __attribute__((cdecl))':'void (const wchar_t *, wchar_t *, wchar_t *, wchar_t *, wchar_t *)'
| |-ParmVarDecl 0x1f90b64f858 <col:82, col:98> col:98 _FullPath 'const wchar_t *'
| |-ParmVarDecl 0x1f90b64f8d0 <col:134, col:144> col:144 _Drive 'wchar_t *'
| |-ParmVarDecl 0x1f90b64f948 <col:177, col:187> col:187 _Dir 'wchar_t *'
| |-ParmVarDecl 0x1f90b64f9c0 <col:218, col:228> col:228 _Filename 'wchar_t *'
| |-ParmVarDecl 0x1f90b64fa38 <col:264, col:274> col:274 _Ext 'wchar_t *'
| `-DeprecatedAttr 0x1f90b64fd38 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable may be unsafe. Consider using _wsplitpath_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f90b657600 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:897:21, line:901:82> line:897:37 _wsplitpath_s 'errno_t (const wchar_t *, wchar_t *, size_t, wchar_t *, size_t, wchar_t *, size_t, wchar_t *, size_t) __attribute__((cdecl))':'errno_t (const wchar_t *, wchar_t *, size_t, wchar_t *, size_t, wchar_t *, size_t, wchar_t *, size_t)'
| |-ParmVarDecl 0x1f90b64fe78 <col:58, col:74> col:74 _FullPath 'const wchar_t *'
| |-ParmVarDecl 0x1f90b64fef0 <line:898:48, col:58> col:58 _Drive 'wchar_t *'
| |-ParmVarDecl 0x1f90b64ff68 <col:71, col:78> col:78 _DriveSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f90b64ffe0 <line:899:46, col:56> col:56 _Dir 'wchar_t *'
| |-ParmVarDecl 0x1f90b650058 <col:67, col:74> col:74 _DirSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f90b6500d0 <line:900:51, col:61> col:61 _Filename 'wchar_t *'
| |-ParmVarDecl 0x1f90b650148 <col:77, col:84> col:84 _FilenameSize 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f90b6501c0 <line:901:46, col:56> col:56 _Ext 'wchar_t *'
| `-ParmVarDecl 0x1f90b650238 <col:67, col:74> col:74 _ExtSize 'size_t':'unsigned long long'
|-FunctionDecl 0x1f90b657920 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:909:78> col:50 _seterrormode 'void (int) __attribute__((cdecl))':'void (int)'
| |-ParmVarDecl 0x1f90b657818 <col:69, col:73> col:73 _Mode 'int'
| `-DeprecatedAttr 0x1f90b6579c8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable has been superceded by newer library or operating system functionality. Consider using SetErrorMode instead. See online help for details." ""
|-FunctionDecl 0x1f90b657db8 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:910:97> col:42 _beep 'void (unsigned int, unsigned int) __attribute__((cdecl))':'void (unsigned int, unsigned int)'
| |-ParmVarDecl 0x1f90b657bd8 <col:53, col:62> col:62 _Frequency 'unsigned int'
| |-ParmVarDecl 0x1f90b657c58 <col:79, col:88> col:88 _Duration 'unsigned int'
| `-DeprecatedAttr 0x1f90b657e68 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable has been superceded by newer library or operating system functionality. Consider using Beep instead. See online help for details." ""
|-FunctionDecl 0x1f90b6581b0 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:911:78> col:43 _sleep 'void (unsigned long) __attribute__((cdecl))':'void (unsigned long)'
| |-ParmVarDecl 0x1f90b658070 <col:55, col:69> col:69 _Duration 'unsigned long'
| `-DeprecatedAttr 0x1f90b658258 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "This function or variable has been superceded by newer library or operating system functionality. Consider using Sleep instead. See online help for details." ""
|-FunctionDecl 0x1f90b652838 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:934:187> col:102 ecvt 'char *(double, int, int *, int *) __attribute__((cdecl))':'char *(double, int, int *, int *)'
| |-ParmVarDecl 0x1f90b652578 <col:112, col:119> col:119 _Val 'double'
| |-ParmVarDecl 0x1f90b6525f8 <col:130, col:134> col:134 _NumOfDigits 'int'
| |-ParmVarDecl 0x1f90b652678 <col:154, col:160> col:160 _PtDec 'int *'
| |-ParmVarDecl 0x1f90b6526f8 <col:174, col:180> col:180 _PtSign 'int *'
| |-DeprecatedAttr 0x1f90b6528f8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _ecvt. See online help for details." ""
| `-DeprecatedAttr 0x1f90b6529f0 <col:47, col:63> "This function or variable may be unsafe. Consider using _ecvt_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f90b652f28 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:935:184> col:102 fcvt 'char *(double, int, int *, int *) __attribute__((cdecl))':'char *(double, int, int *, int *)'
| |-ParmVarDecl 0x1f90b652c68 <col:112, col:119> col:119 _Val 'double'
| |-ParmVarDecl 0x1f90b652ce8 <col:130, col:134> col:134 _NumOfDec 'int'
| |-ParmVarDecl 0x1f90b652d68 <col:151, col:157> col:157 _PtDec 'int *'
| |-ParmVarDecl 0x1f90b652de8 <col:171, col:177> col:177 _PtSign 'int *'
| |-DeprecatedAttr 0x1f90b652fe8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _fcvt. See online help for details." ""
| `-DeprecatedAttr 0x1f90b6530e0 <col:47, col:63> "This function or variable may be unsafe. Consider using _fcvt_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f90b650580 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:936:179> col:96 gcvt 'char *(double, int, char *) __attribute__((cdecl))':'char *(double, int, char *)'
| |-ParmVarDecl 0x1f90b653358 <col:106, col:113> col:113 _Val 'double'
| |-ParmVarDecl 0x1f90b6503e0 <col:124, col:128> col:128 _NumOfDigits 'int'
| |-ParmVarDecl 0x1f90b650460 <col:165, col:172> col:172 _DstBuf 'char *'
| |-DeprecatedAttr 0x1f90b650638 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _gcvt. See online help for details." ""
| `-DeprecatedAttr 0x1f90b650730 <col:47, col:63> "This function or variable may be unsafe. Consider using _fcvt_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f90b650bc8 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:937:170> col:96 itoa 'char *(int, char *, int) __attribute__((cdecl))':'char *(int, char *, int)'
| |-ParmVarDecl 0x1f90b6509a8 <col:106, col:110> col:110 _Val 'int'
| |-ParmVarDecl 0x1f90b650a28 <col:139, col:146> col:146 _DstBuf 'char *'
| |-ParmVarDecl 0x1f90b650aa8 <col:160, col:164> col:164 _Radix 'int'
| |-DeprecatedAttr 0x1f90b650c80 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _itoa. See online help for details." ""
| `-DeprecatedAttr 0x1f90b650d78 <col:47, col:63> "This function or variable may be unsafe. Consider using _itoa_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f90b651210 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:938:171> col:96 ltoa 'char *(long, char *, int) __attribute__((cdecl))':'char *(long, char *, int)'
| |-ParmVarDecl 0x1f90b650ff0 <col:106, col:111> col:111 _Val 'long'
| |-ParmVarDecl 0x1f90b651070 <col:140, col:147> col:147 _DstBuf 'char *'
| |-ParmVarDecl 0x1f90b6510f0 <col:161, col:165> col:165 _Radix 'int'
| |-DeprecatedAttr 0x1f90b6512c8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _ltoa. See online help for details." ""
| `-DeprecatedAttr 0x1f90b658460 <col:47, col:63> "This function or variable may be unsafe. Consider using _ltoa_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f90b658730 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:941:108> col:71 putenv 'int (const char *) __attribute__((cdecl))':'int (const char *)'
| |-ParmVarDecl 0x1f90b658650 <col:85, col:98> col:98 _EnvString 'const char *'
| `-DeprecatedAttr 0x1f90b6587d8 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _putenv. See online help for details." ""
|-FunctionDecl 0x1f90b658bb8 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:944:245> col:128 swab 'void (char *, char *, int) __attribute__((cdecl))':'void (char *, char *, int)'
| |-ParmVarDecl 0x1f90b6589a0 <col:165, col:172> col:172 _Buf1 'char *'
| |-ParmVarDecl 0x1f90b658a20 <col:210, col:217> col:217 _Buf2 'char *'
| |-ParmVarDecl 0x1f90b658aa0 <col:229, col:233> col:233 _SizeInBytes 'int'
| `-DeprecatedAttr 0x1f90b658c70 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _swab. See online help for details." ""
|-FunctionDecl 0x1f90b659150 <col:36, D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:945:181> col:96 ultoa 'char *(unsigned long, char *, int) __attribute__((cdecl))':'char *(unsigned long, char *, int)'
| |-ParmVarDecl 0x1f90b658f30 <col:107, col:121> col:121 _Val 'unsigned long'
| |-ParmVarDecl 0x1f90b658fb0 <col:150, col:157> col:157 _Dstbuf 'char *'
| |-ParmVarDecl 0x1f90b659030 <col:171, col:175> col:175 _Radix 'int'
| |-DeprecatedAttr 0x1f90b659208 <D:\Microsoft Visual Studio 12.0\VC\include\crtdefs.h:275:47, col:63> "The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _ultoa. See online help for details." ""
| `-DeprecatedAttr 0x1f90b659300 <col:47, col:63> "This function or variable may be unsafe. Consider using _ultoa_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details." ""
|-FunctionDecl 0x1f90b659548 <D:\Microsoft Visual Studio 12.0\VC\include\stdlib.h:64:18, line:947:48> col:18 onexit '_onexit_t (_onexit_t) __attribute__((cdecl))':'_onexit_t (_onexit_t)'
| `-ParmVarDecl 0x1f90b659470 <line:64:18, line:947:43> col:43 _Func '_onexit_t':'int (*)(void) __attribute__((cdecl))'
|-TypedefDecl 0x1f90b659620 <.//openssl//file_jk/before\crypto\poly1305\poly1305_ieee754.c:55:1, col:23> col:23 u8 'unsigned char'
| `-BuiltinType 0x1f909b13e40 'unsigned char'
|-TypedefDecl 0x1f90b659690 <line:56:1, col:22> col:22 referenced u32 'unsigned int'
| `-BuiltinType 0x1f909b13e80 'unsigned int'
|-TypedefDecl 0x1f90b659700 <line:57:1, col:28> col:28 referenced u64 'unsigned long long'
| `-BuiltinType 0x1f909b13ec0 'unsigned long long'
|-RecordDecl 0x1f90b659758 <line:58:9, col:34> col:9 union definition
| |-FieldDecl 0x1f90b659828 <col:17, col:24> col:24 referenced d 'double'
| `-FieldDecl 0x1f90b6598b0 <col:27, col:31> col:31 referenced u 'u64':'unsigned long long'
|-TypedefDecl 0x1f90b659968 <col:1, col:36> col:36 referenced elem64 'union elem64':'elem64'
| `-ElaboratedType 0x1f90b659910 'union elem64' sugar
|   `-RecordType 0x1f90b6597f0 'elem64'
|     `-Record 0x1f90b659758 ''
|-RecordDecl 0x1f90b6599d8 <line:89:9, line:93:1> line:89:9 struct definition
| |-FieldDecl 0x1f90b659be8 <line:90:5, col:15> col:12 referenced h 'elem64 [4]'
| |-FieldDecl 0x1f90b659ce0 <line:91:5, col:15> col:12 referenced r 'double [8]'
| `-FieldDecl 0x1f90b659de0 <line:92:5, col:15> col:12 referenced s 'double [6]'
|-TypedefDecl 0x1f90b659e98 <line:89:1, line:93:3> col:3 referenced poly1305_internal 'struct poly1305_internal':'poly1305_internal'
| `-ElaboratedType 0x1f90b659e40 'struct poly1305_internal' sugar
|   `-RecordType 0x1f90b659a70 'poly1305_internal'
|     `-Record 0x1f90b6599d8 ''
|-VarDecl 0x1f90b659f40 <line:97:1, col:26> col:18 used mxcsr 'const u32':'const unsigned int' static cinit
| `-ImplicitCastExpr 0x1f90b659fe8 <col:26> 'u32':'unsigned int' <IntegralCast>
|   `-IntegerLiteral 0x1f90b659fa8 <col:26> 'int' 32640
|-FunctionDecl 0x1f90b65a2e0 <line:108:1, line:213:1> line:108:5 poly1305_init 'int (void *, const unsigned char *)'
| |-ParmVarDecl 0x1f90b65a018 <col:19, col:25> col:25 used ctx 'void *'
| |-ParmVarDecl 0x1f90b65a190 <col:30, col:56> col:50 used key 'const unsigned char *':'const unsigned char *'
| `-CompoundStmt 0x1f90b6c45c0 <line:109:1, line:213:1>
|   |-DeclStmt 0x1f90b65e598 <line:110:5, col:54>
|   | `-VarDecl 0x1f90b65e4c0 <col:5, col:51> col:24 used st 'poly1305_internal *' cinit
|   |   `-CStyleCastExpr 0x1f90b65e570 <col:29, col:51> 'poly1305_internal *' <BitCast>
|   |     `-ImplicitCastExpr 0x1f90b65e558 <col:51> 'void *' <LValueToRValue> part_of_explicit_cast
|   |       `-DeclRefExpr 0x1f90b65e528 <col:51> 'void *' lvalue ParmVar 0x1f90b65a018 'ctx' 'void *'
|   |-DeclStmt 0x1f90b65e7b8 <line:111:5, col:26>
|   | |-VarDecl 0x1f90b65e5c0 <col:5, col:12> col:12 used r0 'elem64':'elem64'
|   | |-VarDecl 0x1f90b65e638 <col:5, col:16> col:16 used r1 'elem64':'elem64'
|   | |-VarDecl 0x1f90b65e6b0 <col:5, col:20> col:20 used r2 'elem64':'elem64'
|   | `-VarDecl 0x1f90b65e728 <col:5, col:24> col:24 used r3 'elem64':'elem64'
|   |-BinaryOperator 0x1f90b65eab8 <line:120:5, line:67:35> 'u64':'unsigned long long' '='
|   | |-MemberExpr 0x1f90b65e910 <line:120:5, col:14> 'u64':'unsigned long long' lvalue .u 0x1f90b6598b0
|   | | `-ArraySubscriptExpr 0x1f90b65e8f0 <col:5, col:12> 'elem64':'elem64' lvalue
|   | |   |-ImplicitCastExpr 0x1f90b65e8d8 <col:5, col:9> 'elem64 *' <ArrayToPointerDecay>
|   | |   | `-MemberExpr 0x1f90b65e820 <col:5, col:9> 'elem64 [4]' lvalue ->h 0x1f90b659be8
|   | |   |   `-ImplicitCastExpr 0x1f90b65e808 <col:5> 'poly1305_internal *' <LValueToRValue>
|   | |   |     `-DeclRefExpr 0x1f90b65e7d0 <col:5> 'poly1305_internal *' lvalue Var 0x1f90b65e4c0 'st' 'poly1305_internal *'
|   | |   `-IntegerLiteral 0x1f90b65e850 <col:11> 'int' 0
|   | `-ParenExpr 0x1f90b65ea98 <line:67:17, col:35> 'unsigned long long'
|   |   `-BinaryOperator 0x1f90b65ea78 <col:18, col:33> 'unsigned long long' '<<'
|   |     |-ParenExpr 0x1f90b65ea30 <col:18, col:30> 'unsigned long long'
|   |     | `-BinaryOperator 0x1f90b65ea10 <col:19, col:29> 'unsigned long long' '+'
|   |     |   |-IntegerLiteral 0x1f90b65e940 <col:19> 'unsigned long long' 1023
|   |     |   `-ImplicitCastExpr 0x1f90b65e9f8 <col:27, col:29> 'unsigned long long' <IntegralCast>
|   |     |     `-ParenExpr 0x1f90b65e9d8 <col:27, col:29> 'int'
|   |     |       `-BinaryOperator 0x1f90b65e9b8 <line:120:22, col:25> 'int' '+'
|   |     |         |-IntegerLiteral 0x1f90b65e968 <col:22> 'int' 52
|   |     |         `-IntegerLiteral 0x1f90b65e990 <col:25> 'int' 0
|   |     `-IntegerLiteral 0x1f90b65ea50 <line:67:33> 'int' 52
|   |-BinaryOperator 0x1f90b65ed48 <line:121:5, line:67:35> 'u64':'unsigned long long' '='
|   | |-MemberExpr 0x1f90b65eba0 <line:121:5, col:14> 'u64':'unsigned long long' lvalue .u 0x1f90b6598b0
|   | | `-ArraySubscriptExpr 0x1f90b65eb80 <col:5, col:12> 'elem64':'elem64' lvalue
|   | |   |-ImplicitCastExpr 0x1f90b65eb68 <col:5, col:9> 'elem64 *' <ArrayToPointerDecay>
|   | |   | `-MemberExpr 0x1f90b65eb10 <col:5, col:9> 'elem64 [4]' lvalue ->h 0x1f90b659be8
|   | |   |   `-ImplicitCastExpr 0x1f90b65eaf8 <col:5> 'poly1305_internal *' <LValueToRValue>
|   | |   |     `-DeclRefExpr 0x1f90b65ead8 <col:5> 'poly1305_internal *' lvalue Var 0x1f90b65e4c0 'st' 'poly1305_internal *'
|   | |   `-IntegerLiteral 0x1f90b65eb40 <col:11> 'int' 1
|   | `-ParenExpr 0x1f90b65ed28 <line:67:17, col:35> 'unsigned long long'
|   |   `-BinaryOperator 0x1f90b65ed08 <col:18, col:33> 'unsigned long long' '<<'
|   |     |-ParenExpr 0x1f90b65ecc0 <col:18, col:30> 'unsigned long long'
|   |     | `-BinaryOperator 0x1f90b65eca0 <col:19, col:29> 'unsigned long long' '+'
|   |     |   |-IntegerLiteral 0x1f90b65ebd0 <col:19> 'unsigned long long' 1023
|   |     |   `-ImplicitCastExpr 0x1f90b65ec88 <col:27, col:29> 'unsigned long long' <IntegralCast>
|   |     |     `-ParenExpr 0x1f90b65ec68 <col:27, col:29> 'int'
|   |     |       `-BinaryOperator 0x1f90b65ec48 <line:121:22, col:25> 'int' '+'
|   |     |         |-IntegerLiteral 0x1f90b65ebf8 <col:22> 'int' 52
|   |     |         `-IntegerLiteral 0x1f90b65ec20 <col:25> 'int' 32
|   |     `-IntegerLiteral 0x1f90b65ece0 <line:67:33> 'int' 52
|   |-BinaryOperator 0x1f90b65efd8 <line:122:5, line:67:35> 'u64':'unsigned long long' '='
|   | |-MemberExpr 0x1f90b65ee30 <line:122:5, col:14> 'u64':'unsigned long long' lvalue .u 0x1f90b6598b0
|   | | `-ArraySubscriptExpr 0x1f90b65ee10 <col:5, col:12> 'elem64':'elem64' lvalue
|   | |   |-ImplicitCastExpr 0x1f90b65edf8 <col:5, col:9> 'elem64 *' <ArrayToPointerDecay>
|   | |   | `-MemberExpr 0x1f90b65eda0 <col:5, col:9> 'elem64 [4]' lvalue ->h 0x1f90b659be8
|   | |   |   `-ImplicitCastExpr 0x1f90b65ed88 <col:5> 'poly1305_internal *' <LValueToRValue>
|   | |   |     `-DeclRefExpr 0x1f90b65ed68 <col:5> 'poly1305_internal *' lvalue Var 0x1f90b65e4c0 'st' 'poly1305_internal *'
|   | |   `-IntegerLiteral 0x1f90b65edd0 <col:11> 'int' 2
|   | `-ParenExpr 0x1f90b65efb8 <line:67:17, col:35> 'unsigned long long'
|   |   `-BinaryOperator 0x1f90b65ef98 <col:18, col:33> 'unsigned long long' '<<'
|   |     |-ParenExpr 0x1f90b65ef50 <col:18, col:30> 'unsigned long long'
|   |     | `-BinaryOperator 0x1f90b65ef30 <col:19, col:29> 'unsigned long long' '+'
|   |     |   |-IntegerLiteral 0x1f90b65ee60 <col:19> 'unsigned long long' 1023
|   |     |   `-ImplicitCastExpr 0x1f90b65ef18 <col:27, col:29> 'unsigned long long' <IntegralCast>
|   |     |     `-ParenExpr 0x1f90b65eef8 <col:27, col:29> 'int'
|   |     |       `-BinaryOperator 0x1f90b65eed8 <line:122:22, col:25> 'int' '+'
|   |     |         |-IntegerLiteral 0x1f90b65ee88 <col:22> 'int' 52
|   |     |         `-IntegerLiteral 0x1f90b65eeb0 <col:25> 'int' 64
|   |     `-IntegerLiteral 0x1f90b65ef70 <line:67:33> 'int' 52
|   |-BinaryOperator 0x1f90b65f268 <line:123:5, line:67:35> 'u64':'unsigned long long' '='
|   | |-MemberExpr 0x1f90b65f0c0 <line:123:5, col:14> 'u64':'unsigned long long' lvalue .u 0x1f90b6598b0
|   | | `-ArraySubscriptExpr 0x1f90b65f0a0 <col:5, col:12> 'elem64':'elem64' lvalue
|   | |   |-ImplicitCastExpr 0x1f90b65f088 <col:5, col:9> 'elem64 *' <ArrayToPointerDecay>
|   | |   | `-MemberExpr 0x1f90b65f030 <col:5, col:9> 'elem64 [4]' lvalue ->h 0x1f90b659be8
|   | |   |   `-ImplicitCastExpr 0x1f90b65f018 <col:5> 'poly1305_internal *' <LValueToRValue>
|   | |   |     `-DeclRefExpr 0x1f90b65eff8 <col:5> 'poly1305_internal *' lvalue Var 0x1f90b65e4c0 'st' 'poly1305_internal *'
|   | |   `-IntegerLiteral 0x1f90b65f060 <col:11> 'int' 3
|   | `-ParenExpr 0x1f90b65f248 <line:67:17, col:35> 'unsigned long long'
|   |   `-BinaryOperator 0x1f90b65f228 <col:18, col:33> 'unsigned long long' '<<'
|   |     |-ParenExpr 0x1f90b65f1e0 <col:18, col:30> 'unsigned long long'
|   |     | `-BinaryOperator 0x1f90b65f1c0 <col:19, col:29> 'unsigned long long' '+'
|   |     |   |-IntegerLiteral 0x1f90b65f0f0 <col:19> 'unsigned long long' 1023
|   |     |   `-ImplicitCastExpr 0x1f90b65f1a8 <col:27, col:29> 'unsigned long long' <IntegralCast>
|   |     |     `-ParenExpr 0x1f90b65f188 <col:27, col:29> 'int'
|   |     |       `-BinaryOperator 0x1f90b65f168 <line:123:22, col:25> 'int' '+'
|   |     |         |-IntegerLiteral 0x1f90b65f118 <col:22> 'int' 52
|   |     |         `-IntegerLiteral 0x1f90b65f140 <col:25> 'int' 96
|   |     `-IntegerLiteral 0x1f90b65f200 <line:67:33> 'int' 52
|   |-IfStmt 0x1f90b6c4570 <line:126:5, line:210:5>
|   | |-ImplicitCastExpr 0x1f90b65f2a8 <line:126:9> 'const unsigned char *':'const unsigned char *' <LValueToRValue>
|   | | `-DeclRefExpr 0x1f90b65f288 <col:9> 'const unsigned char *':'const unsigned char *' lvalue ParmVar 0x1f90b65a190 'key' 'const unsigned char *':'const unsigned char *'
|   | `-CompoundStmt 0x1f90b6c4478 <col:14, line:210:5>
|   |   |-DeclStmt 0x1f90b65f338 <line:131:9, col:23>
|   |   | `-VarDecl 0x1f90b65f2d0 <col:9, col:13> col:13 used mxcsr_orig 'u32':'unsigned int'
|   |   |-GCCAsmStmt 0x1f90b65f440 <line:133:9, col:52>
|   |   | `-DeclRefExpr 0x1f90b65f408 <col:41> 'u32':'unsigned int' lvalue Var 0x1f90b65f2d0 'mxcsr_orig' 'u32':'unsigned int'
|   |   |-GCCAsmStmt 0x1f90b660588 <line:134:9, col:47>
|   |   | `-DeclRefExpr 0x1f90b660568 <col:41> 'const u32':'const unsigned int' lvalue Var 0x1f90b659f40 'mxcsr' 'const u32':'const unsigned int'
|   |   |-BinaryOperator 0x1f90b660a48 <line:153:9, col:60> 'u64':'unsigned long long' '='
|   |   | |-MemberExpr 0x1f90b660630 <col:9, col:12> 'u64':'unsigned long long' lvalue .u 0x1f90b6598b0
|   |   | | `-DeclRefExpr 0x1f90b6605f8 <col:9> 'elem64':'elem64' lvalue Var 0x1f90b65e5c0 'r0' 'elem64':'elem64'
|   |   | `-BinaryOperator 0x1f90b660a28 <line:67:17, line:153:60> 'unsigned long long' '|'
|   |   |   |-ParenExpr 0x1f90b6607b8 <line:67:17, col:35> 'unsigned long long'
|   |   |   | `-BinaryOperator 0x1f90b660798 <col:18, col:33> 'unsigned long long' '<<'
|   |   |   |   |-ParenExpr 0x1f90b660750 <col:18, col:30> 'unsigned long long'
|   |   |   |   | `-BinaryOperator 0x1f90b660730 <col:19, col:29> 'unsigned long long' '+'
|   |   |   |   |   |-IntegerLiteral 0x1f90b660660 <col:19> 'unsigned long long' 1023
|   |   |   |   |   `-ImplicitCastExpr 0x1f90b660718 <col:27, col:29> 'unsigned long long' <IntegralCast>
|   |   |   |   |     `-ParenExpr 0x1f90b6606f8 <col:27, col:29> 'int'
|   |   |   |   |       `-BinaryOperator 0x1f90b6606d8 <line:153:20, col:23> 'int' '+'
|   |   |   |   |         |-IntegerLiteral 0x1f90b660688 <col:20> 'int' 52
|   |   |   |   |         `-IntegerLiteral 0x1f90b6606b0 <col:23> 'int' 0
|   |   |   |   `-IntegerLiteral 0x1f90b660770 <line:67:33> 'int' 52
|   |   |   `-ImplicitCastExpr 0x1f90b660a10 <line:153:29, col:60> 'unsigned long long' <IntegralCast>
|   |   |     `-ParenExpr 0x1f90b6609f0 <col:29, col:60> 'unsigned int'
|   |   |       `-BinaryOperator 0x1f90b6609d0 <line:70:21, line:153:50> 'unsigned int' '&'
|   |   |         |-ImplicitCastExpr 0x1f90b6609a0 <line:70:21, col:39> 'u32':'unsigned int' <LValueToRValue>
|   |   |         | `-ParenExpr 0x1f90b660958 <col:21, col:39> 'const u32':'const unsigned int' lvalue
|   |   |         |   `-UnaryOperator 0x1f90b660940 <col:22, col:38> 'const u32':'const unsigned int' lvalue prefix '*' cannot overflow
|   |   |         |     `-CStyleCastExpr 0x1f90b660918 <col:23, col:38> 'const u32 *' <BitCast>
|   |   |         |       `-ParenExpr 0x1f90b6608f8 <col:36, col:38> 'const unsigned char *'
|   |   |         |         `-UnaryOperator 0x1f90b660858 <line:153:38, col:44> 'const unsigned char *' prefix '&' cannot overflow
|   |   |         |           `-ArraySubscriptExpr 0x1f90b660838 <col:39, col:44> 'const unsigned char' lvalue
|   |   |         |             |-ImplicitCastExpr 0x1f90b660820 <col:39> 'const unsigned char *':'const unsigned char *' <LValueToRValue>
|   |   |         |             | `-DeclRefExpr 0x1f90b6607d8 <col:39> 'const unsigned char *':'const unsigned char *' lvalue ParmVar 0x1f90b65a190 'key' 'const unsigned char *':'const unsigned char *'
|   |   |         |             `-IntegerLiteral 0x1f90b6607f8 <col:43> 'int' 0
|   |   |         `-ImplicitCastExpr 0x1f90b6609b8 <col:50> 'unsigned int' <IntegralCast>
|   |   |           `-IntegerLiteral 0x1f90b660978 <col:50> 'int' 268435455
|   |   |-BinaryOperator 0x1f90b660e60 <line:154:9, col:60> 'u64':'unsigned long long' '='
|   |   | |-MemberExpr 0x1f90b660aa0 <col:9, col:12> 'u64':'unsigned long long' lvalue .u 0x1f90b6598b0
|   |   | | `-DeclRefExpr 0x1f90b660a68 <col:9> 'elem64':'elem64' lvalue Var 0x1f90b65e638 'r1' 'elem64':'elem64'
|   |   | `-BinaryOperator 0x1f90b660e40 <line:67:17, line:154:60> 'unsigned long long' '|'
|   |   |   |-ParenExpr 0x1f90b660c28 <line:67:17, col:35> 'unsigned long long'
|   |   |   | `-BinaryOperator 0x1f90b660c08 <col:18, col:33> 'unsigned long long' '<<'
|   |   |   |   |-ParenExpr 0x1f90b660bc0 <col:18, col:30> 'unsigned long long'
|   |   |   |   | `-BinaryOperator 0x1f90b660ba0 <col:19, col:29> 'unsigned long long' '+'
|   |   |   |   |   |-IntegerLiteral 0x1f90b660ad0 <col:19> 'unsigned long long' 1023
|   |   |   |   |   `-ImplicitCastExpr 0x1f90b660b88 <col:27, col:29> 'unsigned long long' <IntegralCast>
|   |   |   |   |     `-ParenExpr 0x1f90b660b68 <col:27, col:29> 'int'
|   |   |   |   |       `-BinaryOperator 0x1f90b660b48 <line:154:20, col:23> 'int' '+'
|   |   |   |   |         |-IntegerLiteral 0x1f90b660af8 <col:20> 'int' 52
|   |   |   |   |         `-IntegerLiteral 0x1f90b660b20 <col:23> 'int' 32
|   |   |   |   `-IntegerLiteral 0x1f90b660be0 <line:67:33> 'int' 52
|   |   |   `-ImplicitCastExpr 0x1f90b660e28 <line:154:29, col:60> 'unsigned long long' <IntegralCast>
|   |   |     `-ParenExpr 0x1f90b660e08 <col:29, col:60> 'unsigned int'
|   |   |       `-BinaryOperator 0x1f90b660de8 <line:70:21, line:154:50> 'unsigned int' '&'
|   |   |         |-ImplicitCastExpr 0x1f90b660db8 <line:70:21, col:39> 'u32':'unsigned int' <LValueToRValue>
|   |   |         | `-ParenExpr 0x1f90b660d70 <col:21, col:39> 'const u32':'const unsigned int' lvalue
|   |   |         |   `-UnaryOperator 0x1f90b660d58 <col:22, col:38> 'const u32':'const unsigned int' lvalue prefix '*' cannot overflow
|   |   |         |     `-CStyleCastExpr 0x1f90b660d30 <col:23, col:38> 'const u32 *' <BitCast>
|   |   |         |       `-ParenExpr 0x1f90b660d10 <col:36, col:38> 'const unsigned char *'
|   |   |         |         `-UnaryOperator 0x1f90b660cc8 <line:154:38, col:44> 'const unsigned char *' prefix '&' cannot overflow
|   |   |         |           `-ArraySubscriptExpr 0x1f90b660ca8 <col:39, col:44> 'const unsigned char' lvalue
|   |   |         |             |-ImplicitCastExpr 0x1f90b660c90 <col:39> 'const unsigned char *':'const unsigned char *' <LValueToRValue>
|   |   |         |             | `-DeclRefExpr 0x1f90b660c48 <col:39> 'const unsigned char *':'const unsigned char *' lvalue ParmVar 0x1f90b65a190 'key' 'const unsigned char *':'const unsigned char *'
|   |   |         |             `-IntegerLiteral 0x1f90b660c68 <col:43> 'int' 4
|   |   |         `-ImplicitCastExpr 0x1f90b660dd0 <col:50> 'unsigned int' <IntegralCast>
|   |   |           `-IntegerLiteral 0x1f90b660d90 <col:50> 'int' 268435452
|   |   |-BinaryOperator 0x1f90b661278 <line:155:9, col:60> 'u64':'unsigned long long' '='
|   |   | |-MemberExpr 0x1f90b660eb8 <col:9, col:12> 'u64':'unsigned long long' lvalue .u 0x1f90b6598b0
|   |   | | `-DeclRefExpr 0x1f90b660e80 <col:9> 'elem64':'elem64' lvalue Var 0x1f90b65e6b0 'r2' 'elem64':'elem64'
|   |   | `-BinaryOperator 0x1f90b661258 <line:67:17, line:155:60> 'unsigned long long' '|'
|   |   |   |-ParenExpr 0x1f90b661040 <line:67:17, col:35> 'unsigned long long'
|   |   |   | `-BinaryOperator 0x1f90b661020 <col:18, col:33> 'unsigned long long' '<<'
|   |   |   |   |-ParenExpr 0x1f90b660fd8 <col:18, col:30> 'unsigned long long'
|   |   |   |   | `-BinaryOperator 0x1f90b660fb8 <col:19, col:29> 'unsigned long long' '+'
|   |   |   |   |   |-IntegerLiteral 0x1f90b660ee8 <col:19> 'unsigned long long' 1023
|   |   |   |   |   `-ImplicitCastExpr 0x1f90b660fa0 <col:27, col:29> 'unsigned long long' <IntegralCast>
|   |   |   |   |     `-ParenExpr 0x1f90b660f80 <col:27, col:29> 'int'
|   |   |   |   |       `-BinaryOperator 0x1f90b660f60 <line:155:20, col:23> 'int' '+'
|   |   |   |   |         |-IntegerLiteral 0x1f90b660f10 <col:20> 'int' 52
|   |   |   |   |         `-IntegerLiteral 0x1f90b660f38 <col:23> 'int' 64
|   |   |   |   `-IntegerLiteral 0x1f90b660ff8 <line:67:33> 'int' 52
|   |   |   `-ImplicitCastExpr 0x1f90b661240 <line:155:29, col:60> 'unsigned long long' <IntegralCast>
|   |   |     `-ParenExpr 0x1f90b661220 <col:29, col:60> 'unsigned int'
|   |   |       `-BinaryOperator 0x1f90b661200 <line:70:21, line:155:50> 'unsigned int' '&'
|   |   |         |-ImplicitCastExpr 0x1f90b6611d0 <line:70:21, col:39> 'u32':'unsigned int' <LValueToRValue>
|   |   |         | `-ParenExpr 0x1f90b661188 <col:21, col:39> 'const u32':'const unsigned int' lvalue
|   |   |         |   `-UnaryOperator 0x1f90b661170 <col:22, col:38> 'const u32':'const unsigned int' lvalue prefix '*' cannot overflow
|   |   |         |     `-CStyleCastExpr 0x1f90b661148 <col:23, col:38> 'const u32 *' <BitCast>
|   |   |         |       `-ParenExpr 0x1f90b661128 <col:36, col:38> 'const unsigned char *'
|   |   |         |         `-UnaryOperator 0x1f90b6610e0 <line:155:38, col:44> 'const unsigned char *' prefix '&' cannot overflow
|   |   |         |           `-ArraySubscriptExpr 0x1f90b6610c0 <col:39, col:44> 'const unsigned char' lvalue
|   |   |         |             |-ImplicitCastExpr 0x1f90b6610a8 <col:39> 'const unsigned char *':'const unsigned char *' <LValueToRValue>
|   |   |         |             | `-DeclRefExpr 0x1f90b661060 <col:39> 'const unsigned char *':'const unsigned char *' lvalue ParmVar 0x1f90b65a190 'key' 'const unsigned char *':'const unsigned char *'
|   |   |         |             `-IntegerLiteral 0x1f90b661080 <col:43> 'int' 8
|   |   |         `-ImplicitCastExpr 0x1f90b6611e8 <col:50> 'unsigned int' <IntegralCast>
|   |   |           `-IntegerLiteral 0x1f90b6611a8 <col:50> 'int' 268435452
|   |   |-BinaryOperator 0x1f90b6616a8 <line:156:9, col:60> 'u64':'unsigned long long' '='
|   |   | |-MemberExpr 0x1f90b6612d0 <col:9, col:12> 'u64':'unsigned long long' lvalue .u 0x1f90b6598b0
|   |   | | `-DeclRefExpr 0x1f90b661298 <col:9> 'elem64':'elem64' lvalue Var 0x1f90b65e728 'r3' 'elem64':'elem64'
|   |   | `-BinaryOperator 0x1f90b661688 <line:67:17, line:156:60> 'unsigned long long' '|'
|   |   |   |-ParenExpr 0x1f90b661458 <line:67:17, col:35> 'unsigned long long'
|   |   |   | `-BinaryOperator 0x1f90b661438 <col:18, col:33> 'unsigned long long' '<<'
|   |   |   |   |-ParenExpr 0x1f90b6613f0 <col:18, col:30> 'unsigned long long'
|   |   |   |   | `-BinaryOperator 0x1f90b6613d0 <col:19, col:29> 'unsigned long long' '+'
|   |   |   |   |   |-IntegerLiteral 0x1f90b661300 <col:19> 'unsigned long long' 1023
|   |   |   |   |   `-ImplicitCastExpr 0x1f90b6613b8 <col:27, col:29> 'unsigned long long' <IntegralCast>
|   |   |   |   |     `-ParenExpr 0x1f90b661398 <col:27, col:29> 'int'
|   |   |   |   |       `-BinaryOperator 0x1f90b661378 <line:156:20, col:23> 'int' '+'
|   |   |   |   |         |-IntegerLiteral 0x1f90b661328 <col:20> 'int' 52
|   |   |   |   |         `-IntegerLiteral 0x1f90b661350 <col:23> 'int' 96
|   |   |   |   `-IntegerLiteral 0x1f90b661410 <line:67:33> 'int' 52
|   |   |   `-ImplicitCastExpr 0x1f90b661670 <line:156:29, col:60> 'unsigned long long' <IntegralCast>
|   |   |     `-ParenExpr 0x1f90b661650 <col:29, col:60> 'unsigned int'
|   |   |       `-BinaryOperator 0x1f90b661630 <line:70:21, line:156:50> 'unsigned int' '&'
|   |   |         |-ImplicitCastExpr 0x1f90b661600 <line:70:21, col:39> 'u32':'unsigned int' <LValueToRValue>
|   |   |         | `-ParenExpr 0x1f90b6615b8 <col:21, col:39> 'const u32':'const unsigned int' lvalue
|   |   |         |   `-UnaryOperator 0x1f90b6615a0 <col:22, col:38> 'const u32':'const unsigned int' lvalue prefix '*' cannot overflow
|   |   |         |     `-CStyleCastExpr 0x1f90b661578 <col:23, col:38> 'const u32 *' <BitCast>
|   |   |         |       `-ParenExpr 0x1f90b661558 <col:36, col:38> 'const unsigned char *'
|   |   |         |         `-UnaryOperator 0x1f90b661510 <line:156:38, col:45> 'const unsigned char *' prefix '&' cannot overflow
|   |   |         |           `-ArraySubscriptExpr 0x1f90b6614f0 <col:39, col:45> 'const unsigned char' lvalue
|   |   |         |             |-ImplicitCastExpr 0x1f90b6614c0 <col:39> 'const unsigned char *':'const unsigned char *' <LValueToRValue>
|   |   |         |             | `-DeclRefExpr 0x1f90b661478 <col:39> 'const unsigned char *':'const unsigned char *' lvalue ParmVar 0x1f90b65a190 'key' 'const unsigned char *':'const unsigned char *'
|   |   |         |             `-IntegerLiteral 0x1f90b661498 <col:43> 'int' 12
|   |   |         `-ImplicitCastExpr 0x1f90b661618 <col:50> 'unsigned int' <IntegralCast>
|   |   |           `-IntegerLiteral 0x1f90b6615d8 <col:50> 'int' 268435452
|   |   |-BinaryOperator 0x1f90b661ac8 <line:158:9, line:60:37> 'double' '='
|   |   | |-ArraySubscriptExpr 0x1f90b6617a0 <line:158:9, col:16> 'double' lvalue
|   |   | | |-ImplicitCastExpr 0x1f90b661788 <col:9, col:13> 'double *' <ArrayToPointerDecay>
|   |   | | | `-MemberExpr 0x1f90b661700 <col:9, col:13> 'double [8]' lvalue ->r 0x1f90b659ce0
|   |   | | |   `-ImplicitCastExpr 0x1f90b6616e8 <col:9> 'poly1305_internal *' <LValueToRValue>
|   |   | | |     `-DeclRefExpr 0x1f90b6616c8 <col:9> 'poly1305_internal *' lvalue Var 0x1f90b65e4c0 'st' 'poly1305_internal *'
|   |   | | `-IntegerLiteral 0x1f90b661730 <col:15> 'int' 0
|   |   | `-BinaryOperator 0x1f90b661aa8 <col:20, line:60:37> 'double' '-'
|   |   |   |-ImplicitCastExpr 0x1f90b661a90 <line:158:20, col:23> 'double' <LValueToRValue>
|   |   |   | `-MemberExpr 0x1f90b6617e0 <col:20, col:23> 'double' lvalue .d 0x1f90b659828
|   |   |   |   `-DeclRefExpr 0x1f90b6617c0 <col:20> 'elem64':'elem64' lvalue Var 0x1f90b65e5c0 'r0' 'elem64':'elem64'
|   |   |   `-BinaryOperator 0x1f90b661a70 <line:60:17, col:37> 'double' '*'
|   |   |     |-ParenExpr 0x1f90b661920 <col:17, col:37> 'double'
|   |   |     | `-CStyleCastExpr 0x1f90b6618f8 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |     |   `-ParenExpr 0x1f90b6618d8 <col:26, col:36> 'unsigned long long'
|   |   |     |     `-BinaryOperator 0x1f90b661880 <col:27, col:35> 'unsigned long long' '<<'
|   |   |     |       |-IntegerLiteral 0x1f90b661810 <col:27> 'unsigned long long' 1
|   |   |     |       `-ParenExpr 0x1f90b661860 <col:33, col:35> 'int'
|   |   |     |         `-IntegerLiteral 0x1f90b661838 <line:158:31> 'int' 52
|   |   |     `-ParenExpr 0x1f90b661a50 <line:60:17, col:37> 'double'
|   |   |       `-CStyleCastExpr 0x1f90b661a28 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |         `-ParenExpr 0x1f90b661a08 <col:26, col:36> 'unsigned long long'
|   |   |           `-BinaryOperator 0x1f90b6619b0 <col:27, col:35> 'unsigned long long' '<<'
|   |   |             |-IntegerLiteral 0x1f90b661940 <col:27> 'unsigned long long' 1
|   |   |             `-ParenExpr 0x1f90b661990 <col:33, col:35> 'int'
|   |   |               `-IntegerLiteral 0x1f90b661968 <line:61:19> 'int' 0
|   |   |-BinaryOperator 0x1f90b661eb8 <line:159:9, line:60:37> 'double' '='
|   |   | |-ArraySubscriptExpr 0x1f90b661b90 <line:159:9, col:16> 'double' lvalue
|   |   | | |-ImplicitCastExpr 0x1f90b661b78 <col:9, col:13> 'double *' <ArrayToPointerDecay>
|   |   | | | `-MemberExpr 0x1f90b661b20 <col:9, col:13> 'double [8]' lvalue ->r 0x1f90b659ce0
|   |   | | |   `-ImplicitCastExpr 0x1f90b661b08 <col:9> 'poly1305_internal *' <LValueToRValue>
|   |   | | |     `-DeclRefExpr 0x1f90b661ae8 <col:9> 'poly1305_internal *' lvalue Var 0x1f90b65e4c0 'st' 'poly1305_internal *'
|   |   | | `-IntegerLiteral 0x1f90b661b50 <col:15> 'int' 2
|   |   | `-BinaryOperator 0x1f90b661e98 <col:20, line:60:37> 'double' '-'
|   |   |   |-ImplicitCastExpr 0x1f90b661e80 <line:159:20, col:23> 'double' <LValueToRValue>
|   |   |   | `-MemberExpr 0x1f90b661bd0 <col:20, col:23> 'double' lvalue .d 0x1f90b659828
|   |   |   |   `-DeclRefExpr 0x1f90b661bb0 <col:20> 'elem64':'elem64' lvalue Var 0x1f90b65e638 'r1' 'elem64':'elem64'
|   |   |   `-BinaryOperator 0x1f90b661e60 <line:60:17, col:37> 'double' '*'
|   |   |     |-ParenExpr 0x1f90b661d10 <col:17, col:37> 'double'
|   |   |     | `-CStyleCastExpr 0x1f90b661ce8 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |     |   `-ParenExpr 0x1f90b661cc8 <col:26, col:36> 'unsigned long long'
|   |   |     |     `-BinaryOperator 0x1f90b661c70 <col:27, col:35> 'unsigned long long' '<<'
|   |   |     |       |-IntegerLiteral 0x1f90b661c00 <col:27> 'unsigned long long' 1
|   |   |     |       `-ParenExpr 0x1f90b661c50 <col:33, col:35> 'int'
|   |   |     |         `-IntegerLiteral 0x1f90b661c28 <line:159:31> 'int' 52
|   |   |     `-ParenExpr 0x1f90b661e40 <line:60:17, col:37> 'double'
|   |   |       `-CStyleCastExpr 0x1f90b661e18 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |         `-ParenExpr 0x1f90b661df8 <col:26, col:36> 'unsigned long long'
|   |   |           `-BinaryOperator 0x1f90b661da0 <col:27, col:35> 'unsigned long long' '<<'
|   |   |             |-IntegerLiteral 0x1f90b661d30 <col:27> 'unsigned long long' 1
|   |   |             `-ParenExpr 0x1f90b661d80 <col:33, col:35> 'int'
|   |   |               `-IntegerLiteral 0x1f90b661d58 <line:62:20> 'int' 32
|   |   |-BinaryOperator 0x1f90b662418 <line:160:9, line:63:30> 'double' '='
|   |   | |-ArraySubscriptExpr 0x1f90b661f80 <line:160:9, col:16> 'double' lvalue
|   |   | | |-ImplicitCastExpr 0x1f90b661f68 <col:9, col:13> 'double *' <ArrayToPointerDecay>
|   |   | | | `-MemberExpr 0x1f90b661f10 <col:9, col:13> 'double [8]' lvalue ->r 0x1f90b659ce0
|   |   | | |   `-ImplicitCastExpr 0x1f90b661ef8 <col:9> 'poly1305_internal *' <LValueToRValue>
|   |   | | |     `-DeclRefExpr 0x1f90b661ed8 <col:9> 'poly1305_internal *' lvalue Var 0x1f90b65e4c0 'st' 'poly1305_internal *'
|   |   | | `-IntegerLiteral 0x1f90b661f40 <col:15> 'int' 4
|   |   | `-BinaryOperator 0x1f90b6623f8 <col:20, line:63:30> 'double' '-'
|   |   |   |-ImplicitCastExpr 0x1f90b6623e0 <line:160:20, col:23> 'double' <LValueToRValue>
|   |   |   | `-MemberExpr 0x1f90b661fc0 <col:20, col:23> 'double' lvalue .d 0x1f90b659828
|   |   |   |   `-DeclRefExpr 0x1f90b661fa0 <col:20> 'elem64':'elem64' lvalue Var 0x1f90b65e6b0 'r2' 'elem64':'elem64'
|   |   |   `-BinaryOperator 0x1f90b6623c0 <line:60:17, line:63:30> 'double' '*'
|   |   |     |-ParenExpr 0x1f90b662100 <line:60:17, col:37> 'double'
|   |   |     | `-CStyleCastExpr 0x1f90b6620d8 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |     |   `-ParenExpr 0x1f90b6620b8 <col:26, col:36> 'unsigned long long'
|   |   |     |     `-BinaryOperator 0x1f90b662060 <col:27, col:35> 'unsigned long long' '<<'
|   |   |     |       |-IntegerLiteral 0x1f90b661ff0 <col:27> 'unsigned long long' 1
|   |   |     |       `-ParenExpr 0x1f90b662040 <col:33, col:35> 'int'
|   |   |     |         `-IntegerLiteral 0x1f90b662018 <line:160:31> 'int' 52
|   |   |     `-ParenExpr 0x1f90b6623a0 <line:63:16, col:30> 'double'
|   |   |       `-BinaryOperator 0x1f90b662380 <line:60:17, col:37> 'double' '*'
|   |   |         |-ParenExpr 0x1f90b662230 <col:17, col:37> 'double'
|   |   |         | `-CStyleCastExpr 0x1f90b662208 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |         |   `-ParenExpr 0x1f90b6621e8 <col:26, col:36> 'unsigned long long'
|   |   |         |     `-BinaryOperator 0x1f90b662190 <col:27, col:35> 'unsigned long long' '<<'
|   |   |         |       |-IntegerLiteral 0x1f90b662120 <col:27> 'unsigned long long' 1
|   |   |         |       `-ParenExpr 0x1f90b662170 <col:33, col:35> 'int'
|   |   |         |         `-IntegerLiteral 0x1f90b662148 <line:62:20> 'int' 32
|   |   |         `-ParenExpr 0x1f90b662360 <line:60:17, col:37> 'double'
|   |   |           `-CStyleCastExpr 0x1f90b662338 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |             `-ParenExpr 0x1f90b662318 <col:26, col:36> 'unsigned long long'
|   |   |               `-BinaryOperator 0x1f90b6622c0 <col:27, col:35> 'unsigned long long' '<<'
|   |   |                 |-IntegerLiteral 0x1f90b662250 <col:27> 'unsigned long long' 1
|   |   |                 `-ParenExpr 0x1f90b6622a0 <col:33, col:35> 'int'
|   |   |                   `-IntegerLiteral 0x1f90b662278 <line:63:27> 'int' 32
|   |   |-BinaryOperator 0x1f90b65ba98 <line:161:9, line:64:30> 'double' '='
|   |   | |-ArraySubscriptExpr 0x1f90b65b490 <line:161:9, col:16> 'double' lvalue
|   |   | | |-ImplicitCastExpr 0x1f90b6624c8 <col:9, col:13> 'double *' <ArrayToPointerDecay>
|   |   | | | `-MemberExpr 0x1f90b662470 <col:9, col:13> 'double [8]' lvalue ->r 0x1f90b659ce0
|   |   | | |   `-ImplicitCastExpr 0x1f90b662458 <col:9> 'poly1305_internal *' <LValueToRValue>
|   |   | | |     `-DeclRefExpr 0x1f90b662438 <col:9> 'poly1305_internal *' lvalue Var 0x1f90b65e4c0 'st' 'poly1305_internal *'
|   |   | | `-IntegerLiteral 0x1f90b6624a0 <col:15> 'int' 6
|   |   | `-BinaryOperator 0x1f90b65ba78 <col:20, line:64:30> 'double' '-'
|   |   |   |-ImplicitCastExpr 0x1f90b65ba60 <line:161:20, col:23> 'double' <LValueToRValue>
|   |   |   | `-MemberExpr 0x1f90b65b4d0 <col:20, col:23> 'double' lvalue .d 0x1f90b659828
|   |   |   |   `-DeclRefExpr 0x1f90b65b4b0 <col:20> 'elem64':'elem64' lvalue Var 0x1f90b65e728 'r3' 'elem64':'elem64'
|   |   |   `-BinaryOperator 0x1f90b65ba40 <line:60:17, line:64:30> 'double' '*'
|   |   |     |-ParenExpr 0x1f90b65b610 <line:60:17, col:37> 'double'
|   |   |     | `-CStyleCastExpr 0x1f90b65b5e8 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |     |   `-ParenExpr 0x1f90b65b5c8 <col:26, col:36> 'unsigned long long'
|   |   |     |     `-BinaryOperator 0x1f90b65b570 <col:27, col:35> 'unsigned long long' '<<'
|   |   |     |       |-IntegerLiteral 0x1f90b65b500 <col:27> 'unsigned long long' 1
|   |   |     |       `-ParenExpr 0x1f90b65b550 <col:33, col:35> 'int'
|   |   |     |         `-IntegerLiteral 0x1f90b65b528 <line:161:31> 'int' 52
|   |   |     `-ParenExpr 0x1f90b65ba20 <line:64:16, col:30> 'double'
|   |   |       `-BinaryOperator 0x1f90b65ba00 <line:63:16, line:60:37> 'double' '*'
|   |   |         |-ParenExpr 0x1f90b65b8b0 <line:63:16, col:30> 'double'
|   |   |         | `-BinaryOperator 0x1f90b65b890 <line:60:17, col:37> 'double' '*'
|   |   |         |   |-ParenExpr 0x1f90b65b740 <col:17, col:37> 'double'
|   |   |         |   | `-CStyleCastExpr 0x1f90b65b718 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |         |   |   `-ParenExpr 0x1f90b65b6f8 <col:26, col:36> 'unsigned long long'
|   |   |         |   |     `-BinaryOperator 0x1f90b65b6a0 <col:27, col:35> 'unsigned long long' '<<'
|   |   |         |   |       |-IntegerLiteral 0x1f90b65b630 <col:27> 'unsigned long long' 1
|   |   |         |   |       `-ParenExpr 0x1f90b65b680 <col:33, col:35> 'int'
|   |   |         |   |         `-IntegerLiteral 0x1f90b65b658 <line:62:20> 'int' 32
|   |   |         |   `-ParenExpr 0x1f90b65b870 <line:60:17, col:37> 'double'
|   |   |         |     `-CStyleCastExpr 0x1f90b65b848 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |         |       `-ParenExpr 0x1f90b65b828 <col:26, col:36> 'unsigned long long'
|   |   |         |         `-BinaryOperator 0x1f90b65b7d0 <col:27, col:35> 'unsigned long long' '<<'
|   |   |         |           |-IntegerLiteral 0x1f90b65b760 <col:27> 'unsigned long long' 1
|   |   |         |           `-ParenExpr 0x1f90b65b7b0 <col:33, col:35> 'int'
|   |   |         |             `-IntegerLiteral 0x1f90b65b788 <line:63:27> 'int' 32
|   |   |         `-ParenExpr 0x1f90b65b9e0 <line:60:17, col:37> 'double'
|   |   |           `-CStyleCastExpr 0x1f90b65b9b8 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |             `-ParenExpr 0x1f90b65b998 <col:26, col:36> 'unsigned long long'
|   |   |               `-BinaryOperator 0x1f90b65b940 <col:27, col:35> 'unsigned long long' '<<'
|   |   |                 |-IntegerLiteral 0x1f90b65b8d0 <col:27> 'unsigned long long' 1
|   |   |                 `-ParenExpr 0x1f90b65b920 <col:33, col:35> 'int'
|   |   |                   `-IntegerLiteral 0x1f90b65b8f8 <line:64:27> 'int' 32
|   |   |-BinaryOperator 0x1f90b65c268 <line:163:9, col:42> 'double' '='
|   |   | |-ArraySubscriptExpr 0x1f90b65bb60 <col:9, col:16> 'double' lvalue
|   |   | | |-ImplicitCastExpr 0x1f90b65bb48 <col:9, col:13> 'double *' <ArrayToPointerDecay>
|   |   | | | `-MemberExpr 0x1f90b65baf0 <col:9, col:13> 'double [6]' lvalue ->s 0x1f90b659de0
|   |   | | |   `-ImplicitCastExpr 0x1f90b65bad8 <col:9> 'poly1305_internal *' <LValueToRValue>
|   |   | | |     `-DeclRefExpr 0x1f90b65bab8 <col:9> 'poly1305_internal *' lvalue Var 0x1f90b65e4c0 'st' 'poly1305_internal *'
|   |   | | `-IntegerLiteral 0x1f90b65bb20 <col:15> 'int' 0
|   |   | `-BinaryOperator 0x1f90b65c248 <col:20, col:42> 'double' '*'
|   |   |   |-ImplicitCastExpr 0x1f90b65c230 <col:20, col:27> 'double' <LValueToRValue>
|   |   |   | `-ArraySubscriptExpr 0x1f90b65bc28 <col:20, col:27> 'double' lvalue
|   |   |   |   |-ImplicitCastExpr 0x1f90b65bc10 <col:20, col:24> 'double *' <ArrayToPointerDecay>
|   |   |   |   | `-MemberExpr 0x1f90b65bbb8 <col:20, col:24> 'double [8]' lvalue ->r 0x1f90b659ce0
|   |   |   |   |   `-ImplicitCastExpr 0x1f90b65bba0 <col:20> 'poly1305_internal *' <LValueToRValue>
|   |   |   |   |     `-DeclRefExpr 0x1f90b65bb80 <col:20> 'poly1305_internal *' lvalue Var 0x1f90b65e4c0 'st' 'poly1305_internal *'
|   |   |   |   `-IntegerLiteral 0x1f90b65bbe8 <col:26> 'int' 2
|   |   |   `-ParenExpr 0x1f90b65c210 <col:31, col:42> 'double'
|   |   |     `-BinaryOperator 0x1f90b65c1f0 <col:32, line:65:31> 'double' '/'
|   |   |       |-FloatingLiteral 0x1f90b65bc48 <line:163:32> 'double' 5.000000e+00
|   |   |       `-ParenExpr 0x1f90b65c1d0 <line:65:17, col:31> 'double'
|   |   |         `-BinaryOperator 0x1f90b65c1b0 <line:64:16, line:60:37> 'double' '*'
|   |   |           |-ParenExpr 0x1f90b65c060 <line:64:16, col:30> 'double'
|   |   |           | `-BinaryOperator 0x1f90b65c040 <line:63:16, line:60:37> 'double' '*'
|   |   |           |   |-ParenExpr 0x1f90b65bef0 <line:63:16, col:30> 'double'
|   |   |           |   | `-BinaryOperator 0x1f90b65bed0 <line:60:17, col:37> 'double' '*'
|   |   |           |   |   |-ParenExpr 0x1f90b65bd80 <col:17, col:37> 'double'
|   |   |           |   |   | `-CStyleCastExpr 0x1f90b65bd58 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |           |   |   |   `-ParenExpr 0x1f90b65bd38 <col:26, col:36> 'unsigned long long'
|   |   |           |   |   |     `-BinaryOperator 0x1f90b65bce0 <col:27, col:35> 'unsigned long long' '<<'
|   |   |           |   |   |       |-IntegerLiteral 0x1f90b65bc70 <col:27> 'unsigned long long' 1
|   |   |           |   |   |       `-ParenExpr 0x1f90b65bcc0 <col:33, col:35> 'int'
|   |   |           |   |   |         `-IntegerLiteral 0x1f90b65bc98 <line:62:20> 'int' 32
|   |   |           |   |   `-ParenExpr 0x1f90b65beb0 <line:60:17, col:37> 'double'
|   |   |           |   |     `-CStyleCastExpr 0x1f90b65be88 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |           |   |       `-ParenExpr 0x1f90b65be68 <col:26, col:36> 'unsigned long long'
|   |   |           |   |         `-BinaryOperator 0x1f90b65be10 <col:27, col:35> 'unsigned long long' '<<'
|   |   |           |   |           |-IntegerLiteral 0x1f90b65bda0 <col:27> 'unsigned long long' 1
|   |   |           |   |           `-ParenExpr 0x1f90b65bdf0 <col:33, col:35> 'int'
|   |   |           |   |             `-IntegerLiteral 0x1f90b65bdc8 <line:63:27> 'int' 32
|   |   |           |   `-ParenExpr 0x1f90b65c020 <line:60:17, col:37> 'double'
|   |   |           |     `-CStyleCastExpr 0x1f90b65bff8 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |           |       `-ParenExpr 0x1f90b65bfd8 <col:26, col:36> 'unsigned long long'
|   |   |           |         `-BinaryOperator 0x1f90b65bf80 <col:27, col:35> 'unsigned long long' '<<'
|   |   |           |           |-IntegerLiteral 0x1f90b65bf10 <col:27> 'unsigned long long' 1
|   |   |           |           `-ParenExpr 0x1f90b65bf60 <col:33, col:35> 'int'
|   |   |           |             `-IntegerLiteral 0x1f90b65bf38 <line:64:27> 'int' 32
|   |   |           `-ParenExpr 0x1f90b65c190 <line:60:17, col:37> 'double'
|   |   |             `-CStyleCastExpr 0x1f90b65c168 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |               `-ParenExpr 0x1f90b65c148 <col:26, col:36> 'unsigned long long'
|   |   |                 `-BinaryOperator 0x1f90b65c0f0 <col:27, col:35> 'unsigned long long' '<<'
|   |   |                   |-IntegerLiteral 0x1f90b65c080 <col:27> 'unsigned long long' 1
|   |   |                   `-ParenExpr 0x1f90b65c0d0 <col:33, col:35> 'int'
|   |   |                     `-IntegerLiteral 0x1f90b65c0a8 <line:65:28> 'int' 34
|   |   |-BinaryOperator 0x1f90b65da58 <line:164:9, col:42> 'double' '='
|   |   | |-ArraySubscriptExpr 0x1f90b65c330 <col:9, col:16> 'double' lvalue
|   |   | | |-ImplicitCastExpr 0x1f90b65c318 <col:9, col:13> 'double *' <ArrayToPointerDecay>
|   |   | | | `-MemberExpr 0x1f90b65c2c0 <col:9, col:13> 'double [6]' lvalue ->s 0x1f90b659de0
|   |   | | |   `-ImplicitCastExpr 0x1f90b65c2a8 <col:9> 'poly1305_internal *' <LValueToRValue>
|   |   | | |     `-DeclRefExpr 0x1f90b65c288 <col:9> 'poly1305_internal *' lvalue Var 0x1f90b65e4c0 'st' 'poly1305_internal *'
|   |   | | `-IntegerLiteral 0x1f90b65c2f0 <col:15> 'int' 2
|   |   | `-BinaryOperator 0x1f90b65da38 <col:20, col:42> 'double' '*'
|   |   |   |-ImplicitCastExpr 0x1f90b65da20 <col:20, col:27> 'double' <LValueToRValue>
|   |   |   | `-ArraySubscriptExpr 0x1f90b65c3f8 <col:20, col:27> 'double' lvalue
|   |   |   |   |-ImplicitCastExpr 0x1f90b65c3e0 <col:20, col:24> 'double *' <ArrayToPointerDecay>
|   |   |   |   | `-MemberExpr 0x1f90b65c388 <col:20, col:24> 'double [8]' lvalue ->r 0x1f90b659ce0
|   |   |   |   |   `-ImplicitCastExpr 0x1f90b65c370 <col:20> 'poly1305_internal *' <LValueToRValue>
|   |   |   |   |     `-DeclRefExpr 0x1f90b65c350 <col:20> 'poly1305_internal *' lvalue Var 0x1f90b65e4c0 'st' 'poly1305_internal *'
|   |   |   |   `-IntegerLiteral 0x1f90b65c3b8 <col:26> 'int' 4
|   |   |   `-ParenExpr 0x1f90b65da00 <col:31, col:42> 'double'
|   |   |     `-BinaryOperator 0x1f90b65d9e0 <col:32, line:65:31> 'double' '/'
|   |   |       |-FloatingLiteral 0x1f90b65c418 <line:164:32> 'double' 5.000000e+00
|   |   |       `-ParenExpr 0x1f90b65d9c0 <line:65:17, col:31> 'double'
|   |   |         `-BinaryOperator 0x1f90b65d9a0 <line:64:16, line:60:37> 'double' '*'
|   |   |           |-ParenExpr 0x1f90b65d850 <line:64:16, col:30> 'double'
|   |   |           | `-BinaryOperator 0x1f90b65d830 <line:63:16, line:60:37> 'double' '*'
|   |   |           |   |-ParenExpr 0x1f90b65d6e0 <line:63:16, col:30> 'double'
|   |   |           |   | `-BinaryOperator 0x1f90b65d6c0 <line:60:17, col:37> 'double' '*'
|   |   |           |   |   |-ParenExpr 0x1f90b65d570 <col:17, col:37> 'double'
|   |   |           |   |   | `-CStyleCastExpr 0x1f90b65d548 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |           |   |   |   `-ParenExpr 0x1f90b65d528 <col:26, col:36> 'unsigned long long'
|   |   |           |   |   |     `-BinaryOperator 0x1f90b65d4d0 <col:27, col:35> 'unsigned long long' '<<'
|   |   |           |   |   |       |-IntegerLiteral 0x1f90b65c440 <col:27> 'unsigned long long' 1
|   |   |           |   |   |       `-ParenExpr 0x1f90b65d4b0 <col:33, col:35> 'int'
|   |   |           |   |   |         `-IntegerLiteral 0x1f90b65c468 <line:62:20> 'int' 32
|   |   |           |   |   `-ParenExpr 0x1f90b65d6a0 <line:60:17, col:37> 'double'
|   |   |           |   |     `-CStyleCastExpr 0x1f90b65d678 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |           |   |       `-ParenExpr 0x1f90b65d658 <col:26, col:36> 'unsigned long long'
|   |   |           |   |         `-BinaryOperator 0x1f90b65d600 <col:27, col:35> 'unsigned long long' '<<'
|   |   |           |   |           |-IntegerLiteral 0x1f90b65d590 <col:27> 'unsigned long long' 1
|   |   |           |   |           `-ParenExpr 0x1f90b65d5e0 <col:33, col:35> 'int'
|   |   |           |   |             `-IntegerLiteral 0x1f90b65d5b8 <line:63:27> 'int' 32
|   |   |           |   `-ParenExpr 0x1f90b65d810 <line:60:17, col:37> 'double'
|   |   |           |     `-CStyleCastExpr 0x1f90b65d7e8 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |           |       `-ParenExpr 0x1f90b65d7c8 <col:26, col:36> 'unsigned long long'
|   |   |           |         `-BinaryOperator 0x1f90b65d770 <col:27, col:35> 'unsigned long long' '<<'
|   |   |           |           |-IntegerLiteral 0x1f90b65d700 <col:27> 'unsigned long long' 1
|   |   |           |           `-ParenExpr 0x1f90b65d750 <col:33, col:35> 'int'
|   |   |           |             `-IntegerLiteral 0x1f90b65d728 <line:64:27> 'int' 32
|   |   |           `-ParenExpr 0x1f90b65d980 <line:60:17, col:37> 'double'
|   |   |             `-CStyleCastExpr 0x1f90b65d958 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |               `-ParenExpr 0x1f90b65d938 <col:26, col:36> 'unsigned long long'
|   |   |                 `-BinaryOperator 0x1f90b65d8e0 <col:27, col:35> 'unsigned long long' '<<'
|   |   |                   |-IntegerLiteral 0x1f90b65d870 <col:27> 'unsigned long long' 1
|   |   |                   `-ParenExpr 0x1f90b65d8c0 <col:33, col:35> 'int'
|   |   |                     `-IntegerLiteral 0x1f90b65d898 <line:65:28> 'int' 34
|   |   |-BinaryOperator 0x1f90b65e228 <line:165:9, col:42> 'double' '='
|   |   | |-ArraySubscriptExpr 0x1f90b65db20 <col:9, col:16> 'double' lvalue
|   |   | | |-ImplicitCastExpr 0x1f90b65db08 <col:9, col:13> 'double *' <ArrayToPointerDecay>
|   |   | | | `-MemberExpr 0x1f90b65dab0 <col:9, col:13> 'double [6]' lvalue ->s 0x1f90b659de0
|   |   | | |   `-ImplicitCastExpr 0x1f90b65da98 <col:9> 'poly1305_internal *' <LValueToRValue>
|   |   | | |     `-DeclRefExpr 0x1f90b65da78 <col:9> 'poly1305_internal *' lvalue Var 0x1f90b65e4c0 'st' 'poly1305_internal *'
|   |   | | `-IntegerLiteral 0x1f90b65dae0 <col:15> 'int' 4
|   |   | `-BinaryOperator 0x1f90b65e208 <col:20, col:42> 'double' '*'
|   |   |   |-ImplicitCastExpr 0x1f90b65e1f0 <col:20, col:27> 'double' <LValueToRValue>
|   |   |   | `-ArraySubscriptExpr 0x1f90b65dbe8 <col:20, col:27> 'double' lvalue
|   |   |   |   |-ImplicitCastExpr 0x1f90b65dbd0 <col:20, col:24> 'double *' <ArrayToPointerDecay>
|   |   |   |   | `-MemberExpr 0x1f90b65db78 <col:20, col:24> 'double [8]' lvalue ->r 0x1f90b659ce0
|   |   |   |   |   `-ImplicitCastExpr 0x1f90b65db60 <col:20> 'poly1305_internal *' <LValueToRValue>
|   |   |   |   |     `-DeclRefExpr 0x1f90b65db40 <col:20> 'poly1305_internal *' lvalue Var 0x1f90b65e4c0 'st' 'poly1305_internal *'
|   |   |   |   `-IntegerLiteral 0x1f90b65dba8 <col:26> 'int' 6
|   |   |   `-ParenExpr 0x1f90b65e1d0 <col:31, col:42> 'double'
|   |   |     `-BinaryOperator 0x1f90b65e1b0 <col:32, line:65:31> 'double' '/'
|   |   |       |-FloatingLiteral 0x1f90b65dc08 <line:165:32> 'double' 5.000000e+00
|   |   |       `-ParenExpr 0x1f90b65e190 <line:65:17, col:31> 'double'
|   |   |         `-BinaryOperator 0x1f90b65e170 <line:64:16, line:60:37> 'double' '*'
|   |   |           |-ParenExpr 0x1f90b65e020 <line:64:16, col:30> 'double'
|   |   |           | `-BinaryOperator 0x1f90b65e000 <line:63:16, line:60:37> 'double' '*'
|   |   |           |   |-ParenExpr 0x1f90b65deb0 <line:63:16, col:30> 'double'
|   |   |           |   | `-BinaryOperator 0x1f90b65de90 <line:60:17, col:37> 'double' '*'
|   |   |           |   |   |-ParenExpr 0x1f90b65dd40 <col:17, col:37> 'double'
|   |   |           |   |   | `-CStyleCastExpr 0x1f90b65dd18 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |           |   |   |   `-ParenExpr 0x1f90b65dcf8 <col:26, col:36> 'unsigned long long'
|   |   |           |   |   |     `-BinaryOperator 0x1f90b65dca0 <col:27, col:35> 'unsigned long long' '<<'
|   |   |           |   |   |       |-IntegerLiteral 0x1f90b65dc30 <col:27> 'unsigned long long' 1
|   |   |           |   |   |       `-ParenExpr 0x1f90b65dc80 <col:33, col:35> 'int'
|   |   |           |   |   |         `-IntegerLiteral 0x1f90b65dc58 <line:62:20> 'int' 32
|   |   |           |   |   `-ParenExpr 0x1f90b65de70 <line:60:17, col:37> 'double'
|   |   |           |   |     `-CStyleCastExpr 0x1f90b65de48 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |           |   |       `-ParenExpr 0x1f90b65de28 <col:26, col:36> 'unsigned long long'
|   |   |           |   |         `-BinaryOperator 0x1f90b65ddd0 <col:27, col:35> 'unsigned long long' '<<'
|   |   |           |   |           |-IntegerLiteral 0x1f90b65dd60 <col:27> 'unsigned long long' 1
|   |   |           |   |           `-ParenExpr 0x1f90b65ddb0 <col:33, col:35> 'int'
|   |   |           |   |             `-IntegerLiteral 0x1f90b65dd88 <line:63:27> 'int' 32
|   |   |           |   `-ParenExpr 0x1f90b65dfe0 <line:60:17, col:37> 'double'
|   |   |           |     `-CStyleCastExpr 0x1f90b65dfb8 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |           |       `-ParenExpr 0x1f90b65df98 <col:26, col:36> 'unsigned long long'
|   |   |           |         `-BinaryOperator 0x1f90b65df40 <col:27, col:35> 'unsigned long long' '<<'
|   |   |           |           |-IntegerLiteral 0x1f90b65ded0 <col:27> 'unsigned long long' 1
|   |   |           |           `-ParenExpr 0x1f90b65df20 <col:33, col:35> 'int'
|   |   |           |             `-IntegerLiteral 0x1f90b65def8 <line:64:27> 'int' 32
|   |   |           `-ParenExpr 0x1f90b65e150 <line:60:17, col:37> 'double'
|   |   |             `-CStyleCastExpr 0x1f90b65e128 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |               `-ParenExpr 0x1f90b65e108 <col:26, col:36> 'unsigned long long'
|   |   |                 `-BinaryOperator 0x1f90b65e0b0 <col:27, col:35> 'unsigned long long' '<<'
|   |   |                   |-IntegerLiteral 0x1f90b65e040 <col:27> 'unsigned long long' 1
|   |   |                   `-ParenExpr 0x1f90b65e090 <col:33, col:35> 'int'
|   |   |                     `-IntegerLiteral 0x1f90b65e068 <line:65:28> 'int' 34
|   |   |-BinaryOperator 0x1f90b65cbf0 <line:170:9, line:60:37> 'double' '='
|   |   | |-ArraySubscriptExpr 0x1f90b65e2f0 <line:170:9, col:16> 'double' lvalue
|   |   | | |-ImplicitCastExpr 0x1f90b65e2d8 <col:9, col:13> 'double *' <ArrayToPointerDecay>
|   |   | | | `-MemberExpr 0x1f90b65e280 <col:9, col:13> 'double [8]' lvalue ->r 0x1f90b659ce0
|   |   | | |   `-ImplicitCastExpr 0x1f90b65e268 <col:9> 'poly1305_internal *' <LValueToRValue>
|   |   | | |     `-DeclRefExpr 0x1f90b65e248 <col:9> 'poly1305_internal *' lvalue Var 0x1f90b65e4c0 'st' 'poly1305_internal *'
|   |   | | `-IntegerLiteral 0x1f90b65e2b0 <col:15> 'int' 1
|   |   | `-BinaryOperator 0x1f90b65cbd0 <col:20, line:60:37> 'double' '-'
|   |   |   |-ParenExpr 0x1f90b65c7e0 <line:170:20, col:52> 'double'
|   |   |   | `-BinaryOperator 0x1f90b65c7c0 <col:21, line:60:37> 'double' '+'
|   |   |   |   |-ImplicitCastExpr 0x1f90b65c7a8 <line:170:21, col:28> 'double' <LValueToRValue>
|   |   |   |   | `-ArraySubscriptExpr 0x1f90b65e3b8 <col:21, col:28> 'double' lvalue
|   |   |   |   |   |-ImplicitCastExpr 0x1f90b65e3a0 <col:21, col:25> 'double *' <ArrayToPointerDecay>
|   |   |   |   |   | `-MemberExpr 0x1f90b65e348 <col:21, col:25> 'double [8]' lvalue ->r 0x1f90b659ce0
|   |   |   |   |   |   `-ImplicitCastExpr 0x1f90b65e330 <col:21> 'poly1305_internal *' <LValueToRValue>
|   |   |   |   |   |     `-DeclRefExpr 0x1f90b65e310 <col:21> 'poly1305_internal *' lvalue Var 0x1f90b65e4c0 'st' 'poly1305_internal *'
|   |   |   |   |   `-IntegerLiteral 0x1f90b65e378 <col:27> 'int' 0
|   |   |   |   `-BinaryOperator 0x1f90b65c788 <line:60:17, col:37> 'double' '*'
|   |   |   |     |-BinaryOperator 0x1f90b65c638 <col:17, col:37> 'double' '*'
|   |   |   |     | |-ParenExpr 0x1f90b65c4e8 <col:17, col:37> 'double'
|   |   |   |     | | `-CStyleCastExpr 0x1f90b65c4c0 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |   |     | |   `-ParenExpr 0x1f90b65c4a0 <col:26, col:36> 'unsigned long long'
|   |   |   |     | |     `-BinaryOperator 0x1f90b65e448 <col:27, col:35> 'unsigned long long' '<<'
|   |   |   |     | |       |-IntegerLiteral 0x1f90b65e3d8 <col:27> 'unsigned long long' 1
|   |   |   |     | |       `-ParenExpr 0x1f90b65e428 <col:33, col:35> 'int'
|   |   |   |     | |         `-IntegerLiteral 0x1f90b65e400 <line:170:36> 'int' 52
|   |   |   |     | `-ParenExpr 0x1f90b65c618 <line:60:17, col:37> 'double'
|   |   |   |     |   `-CStyleCastExpr 0x1f90b65c5f0 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |   |     |     `-ParenExpr 0x1f90b65c5d0 <col:26, col:36> 'unsigned long long'
|   |   |   |     |       `-BinaryOperator 0x1f90b65c578 <col:27, col:35> 'unsigned long long' '<<'
|   |   |   |     |         |-IntegerLiteral 0x1f90b65c508 <col:27> 'unsigned long long' 1
|   |   |   |     |         `-ParenExpr 0x1f90b65c558 <col:33, col:35> 'int'
|   |   |   |     |           `-IntegerLiteral 0x1f90b65c530 <line:170:44> 'int' 16
|   |   |   |     `-ParenExpr 0x1f90b65c768 <line:60:17, col:37> 'double'
|   |   |   |       `-CStyleCastExpr 0x1f90b65c740 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |   |         `-ParenExpr 0x1f90b65c720 <col:26, col:36> 'unsigned long long'
|   |   |   |           `-BinaryOperator 0x1f90b65c6c8 <col:27, col:35> 'unsigned long long' '<<'
|   |   |   |             |-IntegerLiteral 0x1f90b65c658 <col:27> 'unsigned long long' 1
|   |   |   |             `-ParenExpr 0x1f90b65c6a8 <col:33, col:35> 'int'
|   |   |   |               `-IntegerLiteral 0x1f90b65c680 <line:61:19> 'int' 0
|   |   |   `-BinaryOperator 0x1f90b65cbb0 <line:60:17, col:37> 'double' '*'
|   |   |     |-BinaryOperator 0x1f90b65ca60 <col:17, col:37> 'double' '*'
|   |   |     | |-ParenExpr 0x1f90b65c910 <col:17, col:37> 'double'
|   |   |     | | `-CStyleCastExpr 0x1f90b65c8e8 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |     | |   `-ParenExpr 0x1f90b65c8c8 <col:26, col:36> 'unsigned long long'
|   |   |     | |     `-BinaryOperator 0x1f90b65c870 <col:27, col:35> 'unsigned long long' '<<'
|   |   |     | |       |-IntegerLiteral 0x1f90b65c800 <col:27> 'unsigned long long' 1
|   |   |     | |       `-ParenExpr 0x1f90b65c850 <col:33, col:35> 'int'
|   |   |     | |         `-IntegerLiteral 0x1f90b65c828 <line:171:36> 'int' 52
|   |   |     | `-ParenExpr 0x1f90b65ca40 <line:60:17, col:37> 'double'
|   |   |     |   `-CStyleCastExpr 0x1f90b65ca18 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |     |     `-ParenExpr 0x1f90b65c9f8 <col:26, col:36> 'unsigned long long'
|   |   |     |       `-BinaryOperator 0x1f90b65c9a0 <col:27, col:35> 'unsigned long long' '<<'
|   |   |     |         |-IntegerLiteral 0x1f90b65c930 <col:27> 'unsigned long long' 1
|   |   |     |         `-ParenExpr 0x1f90b65c980 <col:33, col:35> 'int'
|   |   |     |           `-IntegerLiteral 0x1f90b65c958 <line:171:44> 'int' 16
|   |   |     `-ParenExpr 0x1f90b65cb90 <line:60:17, col:37> 'double'
|   |   |       `-CStyleCastExpr 0x1f90b65cb68 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |         `-ParenExpr 0x1f90b65cb48 <col:26, col:36> 'unsigned long long'
|   |   |           `-BinaryOperator 0x1f90b65caf0 <col:27, col:35> 'unsigned long long' '<<'
|   |   |             |-IntegerLiteral 0x1f90b65ca80 <col:27> 'unsigned long long' 1
|   |   |             `-ParenExpr 0x1f90b65cad0 <col:33, col:35> 'int'
|   |   |               `-IntegerLiteral 0x1f90b65caa8 <line:61:19> 'int' 0
|   |   |-CompoundAssignOperator 0x1f90b65cdb8 <line:172:9, col:28> 'double' '-=' ComputeLHSTy='double' ComputeResultTy='double'
|   |   | |-ArraySubscriptExpr 0x1f90b65ccb8 <col:9, col:16> 'double' lvalue
|   |   | | |-ImplicitCastExpr 0x1f90b65cca0 <col:9, col:13> 'double *' <ArrayToPointerDecay>
|   |   | | | `-MemberExpr 0x1f90b65cc48 <col:9, col:13> 'double [8]' lvalue ->r 0x1f90b659ce0
|   |   | | |   `-ImplicitCastExpr 0x1f90b65cc30 <col:9> 'poly1305_internal *' <LValueToRValue>
|   |   | | |     `-DeclRefExpr 0x1f90b65cc10 <col:9> 'poly1305_internal *' lvalue Var 0x1f90b65e4c0 'st' 'poly1305_internal *'
|   |   | | `-IntegerLiteral 0x1f90b65cc78 <col:15> 'int' 0
|   |   | `-ImplicitCastExpr 0x1f90b65cda0 <col:21, col:28> 'double' <LValueToRValue>
|   |   |   `-ArraySubscriptExpr 0x1f90b65cd80 <col:21, col:28> 'double' lvalue
|   |   |     |-ImplicitCastExpr 0x1f90b65cd68 <col:21, col:25> 'double *' <ArrayToPointerDecay>
|   |   |     | `-MemberExpr 0x1f90b65cd10 <col:21, col:25> 'double [8]' lvalue ->r 0x1f90b659ce0
|   |   |     |   `-ImplicitCastExpr 0x1f90b65ccf8 <col:21> 'poly1305_internal *' <LValueToRValue>
|   |   |     |     `-DeclRefExpr 0x1f90b65ccd8 <col:21> 'poly1305_internal *' lvalue Var 0x1f90b65e4c0 'st' 'poly1305_internal *'
|   |   |     `-IntegerLiteral 0x1f90b65cd40 <col:27> 'int' 1
|   |   |-BinaryOperator 0x1f90b6c3268 <line:174:9, line:60:37> 'double' '='
|   |   | |-ArraySubscriptExpr 0x1f90b65ce90 <line:174:9, col:16> 'double' lvalue
|   |   | | |-ImplicitCastExpr 0x1f90b65ce78 <col:9, col:13> 'double *' <ArrayToPointerDecay>
|   |   | | | `-MemberExpr 0x1f90b65ce20 <col:9, col:13> 'double [8]' lvalue ->r 0x1f90b659ce0
|   |   | | |   `-ImplicitCastExpr 0x1f90b65ce08 <col:9> 'poly1305_internal *' <LValueToRValue>
|   |   | | |     `-DeclRefExpr 0x1f90b65cde8 <col:9> 'poly1305_internal *' lvalue Var 0x1f90b65e4c0 'st' 'poly1305_internal *'
|   |   | | `-IntegerLiteral 0x1f90b65ce50 <col:15> 'int' 3
|   |   | `-BinaryOperator 0x1f90b6c3248 <col:20, line:60:37> 'double' '-'
|   |   |   |-ParenExpr 0x1f90b65d380 <line:174:20, col:53> 'double'
|   |   |   | `-BinaryOperator 0x1f90b65d360 <col:21, line:60:37> 'double' '+'
|   |   |   |   |-ImplicitCastExpr 0x1f90b65d348 <line:174:21, col:28> 'double' <LValueToRValue>
|   |   |   |   | `-ArraySubscriptExpr 0x1f90b65cf58 <col:21, col:28> 'double' lvalue
|   |   |   |   |   |-ImplicitCastExpr 0x1f90b65cf40 <col:21, col:25> 'double *' <ArrayToPointerDecay>
|   |   |   |   |   | `-MemberExpr 0x1f90b65cee8 <col:21, col:25> 'double [8]' lvalue ->r 0x1f90b659ce0
|   |   |   |   |   |   `-ImplicitCastExpr 0x1f90b65ced0 <col:21> 'poly1305_internal *' <LValueToRValue>
|   |   |   |   |   |     `-DeclRefExpr 0x1f90b65ceb0 <col:21> 'poly1305_internal *' lvalue Var 0x1f90b65e4c0 'st' 'poly1305_internal *'
|   |   |   |   |   `-IntegerLiteral 0x1f90b65cf18 <col:27> 'int' 2
|   |   |   |   `-BinaryOperator 0x1f90b65d328 <line:60:17, col:37> 'double' '*'
|   |   |   |     |-BinaryOperator 0x1f90b65d1d8 <col:17, col:37> 'double' '*'
|   |   |   |     | |-ParenExpr 0x1f90b65d088 <col:17, col:37> 'double'
|   |   |   |     | | `-CStyleCastExpr 0x1f90b65d060 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |   |     | |   `-ParenExpr 0x1f90b65d040 <col:26, col:36> 'unsigned long long'
|   |   |   |     | |     `-BinaryOperator 0x1f90b65cfe8 <col:27, col:35> 'unsigned long long' '<<'
|   |   |   |     | |       |-IntegerLiteral 0x1f90b65cf78 <col:27> 'unsigned long long' 1
|   |   |   |     | |       `-ParenExpr 0x1f90b65cfc8 <col:33, col:35> 'int'
|   |   |   |     | |         `-IntegerLiteral 0x1f90b65cfa0 <line:174:36> 'int' 52
|   |   |   |     | `-ParenExpr 0x1f90b65d1b8 <line:60:17, col:37> 'double'
|   |   |   |     |   `-CStyleCastExpr 0x1f90b65d190 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |   |     |     `-ParenExpr 0x1f90b65d170 <col:26, col:36> 'unsigned long long'
|   |   |   |     |       `-BinaryOperator 0x1f90b65d118 <col:27, col:35> 'unsigned long long' '<<'
|   |   |   |     |         |-IntegerLiteral 0x1f90b65d0a8 <col:27> 'unsigned long long' 1
|   |   |   |     |         `-ParenExpr 0x1f90b65d0f8 <col:33, col:35> 'int'
|   |   |   |     |           `-IntegerLiteral 0x1f90b65d0d0 <line:174:44> 'int' 16
|   |   |   |     `-ParenExpr 0x1f90b65d308 <line:60:17, col:37> 'double'
|   |   |   |       `-CStyleCastExpr 0x1f90b65d2e0 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |   |         `-ParenExpr 0x1f90b65d2c0 <col:26, col:36> 'unsigned long long'
|   |   |   |           `-BinaryOperator 0x1f90b65d268 <col:27, col:35> 'unsigned long long' '<<'
|   |   |   |             |-IntegerLiteral 0x1f90b65d1f8 <col:27> 'unsigned long long' 1
|   |   |   |             `-ParenExpr 0x1f90b65d248 <col:33, col:35> 'int'
|   |   |   |               `-IntegerLiteral 0x1f90b65d220 <line:62:20> 'int' 32
|   |   |   `-BinaryOperator 0x1f90b6c3228 <line:60:17, col:37> 'double' '*'
|   |   |     |-BinaryOperator 0x1f90b6c30d8 <col:17, col:37> 'double' '*'
|   |   |     | |-ParenExpr 0x1f90b6c2f88 <col:17, col:37> 'double'
|   |   |     | | `-CStyleCastExpr 0x1f90b6c2f60 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |     | |   `-ParenExpr 0x1f90b65d468 <col:26, col:36> 'unsigned long long'
|   |   |     | |     `-BinaryOperator 0x1f90b65d410 <col:27, col:35> 'unsigned long long' '<<'
|   |   |     | |       |-IntegerLiteral 0x1f90b65d3a0 <col:27> 'unsigned long long' 1
|   |   |     | |       `-ParenExpr 0x1f90b65d3f0 <col:33, col:35> 'int'
|   |   |     | |         `-IntegerLiteral 0x1f90b65d3c8 <line:175:36> 'int' 52
|   |   |     | `-ParenExpr 0x1f90b6c30b8 <line:60:17, col:37> 'double'
|   |   |     |   `-CStyleCastExpr 0x1f90b6c3090 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |     |     `-ParenExpr 0x1f90b6c3070 <col:26, col:36> 'unsigned long long'
|   |   |     |       `-BinaryOperator 0x1f90b6c3018 <col:27, col:35> 'unsigned long long' '<<'
|   |   |     |         |-IntegerLiteral 0x1f90b6c2fa8 <col:27> 'unsigned long long' 1
|   |   |     |         `-ParenExpr 0x1f90b6c2ff8 <col:33, col:35> 'int'
|   |   |     |           `-IntegerLiteral 0x1f90b6c2fd0 <line:175:44> 'int' 16
|   |   |     `-ParenExpr 0x1f90b6c3208 <line:60:17, col:37> 'double'
|   |   |       `-CStyleCastExpr 0x1f90b6c31e0 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |         `-ParenExpr 0x1f90b6c31c0 <col:26, col:36> 'unsigned long long'
|   |   |           `-BinaryOperator 0x1f90b6c3168 <col:27, col:35> 'unsigned long long' '<<'
|   |   |             |-IntegerLiteral 0x1f90b6c30f8 <col:27> 'unsigned long long' 1
|   |   |             `-ParenExpr 0x1f90b6c3148 <col:33, col:35> 'int'
|   |   |               `-IntegerLiteral 0x1f90b6c3120 <line:62:20> 'int' 32
|   |   |-CompoundAssignOperator 0x1f90b6c3430 <line:176:9, col:28> 'double' '-=' ComputeLHSTy='double' ComputeResultTy='double'
|   |   | |-ArraySubscriptExpr 0x1f90b6c3330 <col:9, col:16> 'double' lvalue
|   |   | | |-ImplicitCastExpr 0x1f90b6c3318 <col:9, col:13> 'double *' <ArrayToPointerDecay>
|   |   | | | `-MemberExpr 0x1f90b6c32c0 <col:9, col:13> 'double [8]' lvalue ->r 0x1f90b659ce0
|   |   | | |   `-ImplicitCastExpr 0x1f90b6c32a8 <col:9> 'poly1305_internal *' <LValueToRValue>
|   |   | | |     `-DeclRefExpr 0x1f90b6c3288 <col:9> 'poly1305_internal *' lvalue Var 0x1f90b65e4c0 'st' 'poly1305_internal *'
|   |   | | `-IntegerLiteral 0x1f90b6c32f0 <col:15> 'int' 2
|   |   | `-ImplicitCastExpr 0x1f90b6c3418 <col:21, col:28> 'double' <LValueToRValue>
|   |   |   `-ArraySubscriptExpr 0x1f90b6c33f8 <col:21, col:28> 'double' lvalue
|   |   |     |-ImplicitCastExpr 0x1f90b6c33e0 <col:21, col:25> 'double *' <ArrayToPointerDecay>
|   |   |     | `-MemberExpr 0x1f90b6c3388 <col:21, col:25> 'double [8]' lvalue ->r 0x1f90b659ce0
|   |   |     |   `-ImplicitCastExpr 0x1f90b6c3370 <col:21> 'poly1305_internal *' <LValueToRValue>
|   |   |     |     `-DeclRefExpr 0x1f90b6c3350 <col:21> 'poly1305_internal *' lvalue Var 0x1f90b65e4c0 'st' 'poly1305_internal *'
|   |   |     `-IntegerLiteral 0x1f90b6c33b8 <col:27> 'int' 3
|   |   |-BinaryOperator 0x1f90b6c20d8 <line:178:9, line:63:30> 'double' '='
|   |   | |-ArraySubscriptExpr 0x1f90b6c3508 <line:178:9, col:16> 'double' lvalue
|   |   | | |-ImplicitCastExpr 0x1f90b6c34f0 <col:9, col:13> 'double *' <ArrayToPointerDecay>
|   |   | | | `-MemberExpr 0x1f90b6c3498 <col:9, col:13> 'double [8]' lvalue ->r 0x1f90b659ce0
|   |   | | |   `-ImplicitCastExpr 0x1f90b6c3480 <col:9> 'poly1305_internal *' <LValueToRValue>
|   |   | | |     `-DeclRefExpr 0x1f90b6c3460 <col:9> 'poly1305_internal *' lvalue Var 0x1f90b65e4c0 'st' 'poly1305_internal *'
|   |   | | `-IntegerLiteral 0x1f90b6c34c8 <col:15> 'int' 5
|   |   | `-BinaryOperator 0x1f90b6c20b8 <col:20, line:63:30> 'double' '-'
|   |   |   |-ParenExpr 0x1f90b6c3b68 <line:178:20, col:53> 'double'
|   |   |   | `-BinaryOperator 0x1f90b6c3b48 <col:21, line:63:30> 'double' '+'
|   |   |   |   |-ImplicitCastExpr 0x1f90b6c3b30 <line:178:21, col:28> 'double' <LValueToRValue>
|   |   |   |   | `-ArraySubscriptExpr 0x1f90b6c35d0 <col:21, col:28> 'double' lvalue
|   |   |   |   |   |-ImplicitCastExpr 0x1f90b6c35b8 <col:21, col:25> 'double *' <ArrayToPointerDecay>
|   |   |   |   |   | `-MemberExpr 0x1f90b6c3560 <col:21, col:25> 'double [8]' lvalue ->r 0x1f90b659ce0
|   |   |   |   |   |   `-ImplicitCastExpr 0x1f90b6c3548 <col:21> 'poly1305_internal *' <LValueToRValue>
|   |   |   |   |   |     `-DeclRefExpr 0x1f90b6c3528 <col:21> 'poly1305_internal *' lvalue Var 0x1f90b65e4c0 'st' 'poly1305_internal *'
|   |   |   |   |   `-IntegerLiteral 0x1f90b6c3590 <col:27> 'int' 4
|   |   |   |   `-BinaryOperator 0x1f90b6c3b10 <line:60:17, line:63:30> 'double' '*'
|   |   |   |     |-BinaryOperator 0x1f90b6c3850 <line:60:17, col:37> 'double' '*'
|   |   |   |     | |-ParenExpr 0x1f90b6c3700 <col:17, col:37> 'double'
|   |   |   |     | | `-CStyleCastExpr 0x1f90b6c36d8 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |   |     | |   `-ParenExpr 0x1f90b6c36b8 <col:26, col:36> 'unsigned long long'
|   |   |   |     | |     `-BinaryOperator 0x1f90b6c3660 <col:27, col:35> 'unsigned long long' '<<'
|   |   |   |     | |       |-IntegerLiteral 0x1f90b6c35f0 <col:27> 'unsigned long long' 1
|   |   |   |     | |       `-ParenExpr 0x1f90b6c3640 <col:33, col:35> 'int'
|   |   |   |     | |         `-IntegerLiteral 0x1f90b6c3618 <line:178:36> 'int' 52
|   |   |   |     | `-ParenExpr 0x1f90b6c3830 <line:60:17, col:37> 'double'
|   |   |   |     |   `-CStyleCastExpr 0x1f90b6c3808 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |   |     |     `-ParenExpr 0x1f90b6c37e8 <col:26, col:36> 'unsigned long long'
|   |   |   |     |       `-BinaryOperator 0x1f90b6c3790 <col:27, col:35> 'unsigned long long' '<<'
|   |   |   |     |         |-IntegerLiteral 0x1f90b6c3720 <col:27> 'unsigned long long' 1
|   |   |   |     |         `-ParenExpr 0x1f90b6c3770 <col:33, col:35> 'int'
|   |   |   |     |           `-IntegerLiteral 0x1f90b6c3748 <line:178:44> 'int' 16
|   |   |   |     `-ParenExpr 0x1f90b6c3af0 <line:63:16, col:30> 'double'
|   |   |   |       `-BinaryOperator 0x1f90b6c3ad0 <line:60:17, col:37> 'double' '*'
|   |   |   |         |-ParenExpr 0x1f90b6c3980 <col:17, col:37> 'double'
|   |   |   |         | `-CStyleCastExpr 0x1f90b6c3958 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |   |         |   `-ParenExpr 0x1f90b6c3938 <col:26, col:36> 'unsigned long long'
|   |   |   |         |     `-BinaryOperator 0x1f90b6c38e0 <col:27, col:35> 'unsigned long long' '<<'
|   |   |   |         |       |-IntegerLiteral 0x1f90b6c3870 <col:27> 'unsigned long long' 1
|   |   |   |         |       `-ParenExpr 0x1f90b6c38c0 <col:33, col:35> 'int'
|   |   |   |         |         `-IntegerLiteral 0x1f90b6c3898 <line:62:20> 'int' 32
|   |   |   |         `-ParenExpr 0x1f90b6c3ab0 <line:60:17, col:37> 'double'
|   |   |   |           `-CStyleCastExpr 0x1f90b6c3a88 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |   |             `-ParenExpr 0x1f90b6c3a68 <col:26, col:36> 'unsigned long long'
|   |   |   |               `-BinaryOperator 0x1f90b6c3a10 <col:27, col:35> 'unsigned long long' '<<'
|   |   |   |                 |-IntegerLiteral 0x1f90b6c39a0 <col:27> 'unsigned long long' 1
|   |   |   |                 `-ParenExpr 0x1f90b6c39f0 <col:33, col:35> 'int'
|   |   |   |                   `-IntegerLiteral 0x1f90b6c39c8 <line:63:27> 'int' 32
|   |   |   `-BinaryOperator 0x1f90b6c2098 <line:60:17, line:63:30> 'double' '*'
|   |   |     |-BinaryOperator 0x1f90b6c3de8 <line:60:17, col:37> 'double' '*'
|   |   |     | |-ParenExpr 0x1f90b6c3c98 <col:17, col:37> 'double'
|   |   |     | | `-CStyleCastExpr 0x1f90b6c3c70 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |     | |   `-ParenExpr 0x1f90b6c3c50 <col:26, col:36> 'unsigned long long'
|   |   |     | |     `-BinaryOperator 0x1f90b6c3bf8 <col:27, col:35> 'unsigned long long' '<<'
|   |   |     | |       |-IntegerLiteral 0x1f90b6c3b88 <col:27> 'unsigned long long' 1
|   |   |     | |       `-ParenExpr 0x1f90b6c3bd8 <col:33, col:35> 'int'
|   |   |     | |         `-IntegerLiteral 0x1f90b6c3bb0 <line:179:36> 'int' 52
|   |   |     | `-ParenExpr 0x1f90b6c3dc8 <line:60:17, col:37> 'double'
|   |   |     |   `-CStyleCastExpr 0x1f90b6c3da0 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |     |     `-ParenExpr 0x1f90b6c3d80 <col:26, col:36> 'unsigned long long'
|   |   |     |       `-BinaryOperator 0x1f90b6c3d28 <col:27, col:35> 'unsigned long long' '<<'
|   |   |     |         |-IntegerLiteral 0x1f90b6c3cb8 <col:27> 'unsigned long long' 1
|   |   |     |         `-ParenExpr 0x1f90b6c3d08 <col:33, col:35> 'int'
|   |   |     |           `-IntegerLiteral 0x1f90b6c3ce0 <line:179:44> 'int' 16
|   |   |     `-ParenExpr 0x1f90b6c2078 <line:63:16, col:30> 'double'
|   |   |       `-BinaryOperator 0x1f90b6c2058 <line:60:17, col:37> 'double' '*'
|   |   |         |-ParenExpr 0x1f90b6c3f18 <col:17, col:37> 'double'
|   |   |         | `-CStyleCastExpr 0x1f90b6c3ef0 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |         |   `-ParenExpr 0x1f90b6c3ed0 <col:26, col:36> 'unsigned long long'
|   |   |         |     `-BinaryOperator 0x1f90b6c3e78 <col:27, col:35> 'unsigned long long' '<<'
|   |   |         |       |-IntegerLiteral 0x1f90b6c3e08 <col:27> 'unsigned long long' 1
|   |   |         |       `-ParenExpr 0x1f90b6c3e58 <col:33, col:35> 'int'
|   |   |         |         `-IntegerLiteral 0x1f90b6c3e30 <line:62:20> 'int' 32
|   |   |         `-ParenExpr 0x1f90b6c2038 <line:60:17, col:37> 'double'
|   |   |           `-CStyleCastExpr 0x1f90b6c2010 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |             `-ParenExpr 0x1f90b6c1ff0 <col:26, col:36> 'unsigned long long'
|   |   |               `-BinaryOperator 0x1f90b6c1f98 <col:27, col:35> 'unsigned long long' '<<'
|   |   |                 |-IntegerLiteral 0x1f90b6c3f38 <col:27> 'unsigned long long' 1
|   |   |                 `-ParenExpr 0x1f90b6c1f78 <col:33, col:35> 'int'
|   |   |                   `-IntegerLiteral 0x1f90b6c1f50 <line:63:27> 'int' 32
|   |   |-CompoundAssignOperator 0x1f90b6c22a0 <line:180:9, col:28> 'double' '-=' ComputeLHSTy='double' ComputeResultTy='double'
|   |   | |-ArraySubscriptExpr 0x1f90b6c21a0 <col:9, col:16> 'double' lvalue
|   |   | | |-ImplicitCastExpr 0x1f90b6c2188 <col:9, col:13> 'double *' <ArrayToPointerDecay>
|   |   | | | `-MemberExpr 0x1f90b6c2130 <col:9, col:13> 'double [8]' lvalue ->r 0x1f90b659ce0
|   |   | | |   `-ImplicitCastExpr 0x1f90b6c2118 <col:9> 'poly1305_internal *' <LValueToRValue>
|   |   | | |     `-DeclRefExpr 0x1f90b6c20f8 <col:9> 'poly1305_internal *' lvalue Var 0x1f90b65e4c0 'st' 'poly1305_internal *'
|   |   | | `-IntegerLiteral 0x1f90b6c2160 <col:15> 'int' 4
|   |   | `-ImplicitCastExpr 0x1f90b6c2288 <col:21, col:28> 'double' <LValueToRValue>
|   |   |   `-ArraySubscriptExpr 0x1f90b6c2268 <col:21, col:28> 'double' lvalue
|   |   |     |-ImplicitCastExpr 0x1f90b6c2250 <col:21, col:25> 'double *' <ArrayToPointerDecay>
|   |   |     | `-MemberExpr 0x1f90b6c21f8 <col:21, col:25> 'double [8]' lvalue ->r 0x1f90b659ce0
|   |   |     |   `-ImplicitCastExpr 0x1f90b6c21e0 <col:21> 'poly1305_internal *' <LValueToRValue>
|   |   |     |     `-DeclRefExpr 0x1f90b6c21c0 <col:21> 'poly1305_internal *' lvalue Var 0x1f90b65e4c0 'st' 'poly1305_internal *'
|   |   |     `-IntegerLiteral 0x1f90b6c2228 <col:27> 'int' 5
|   |   |-BinaryOperator 0x1f90b6c0228 <line:182:9, line:64:30> 'double' '='
|   |   | |-ArraySubscriptExpr 0x1f90b6c2378 <line:182:9, col:16> 'double' lvalue
|   |   | | |-ImplicitCastExpr 0x1f90b6c2360 <col:9, col:13> 'double *' <ArrayToPointerDecay>
|   |   | | | `-MemberExpr 0x1f90b6c2308 <col:9, col:13> 'double [8]' lvalue ->r 0x1f90b659ce0
|   |   | | |   `-ImplicitCastExpr 0x1f90b6c22f0 <col:9> 'poly1305_internal *' <LValueToRValue>
|   |   | | |     `-DeclRefExpr 0x1f90b6c22d0 <col:9> 'poly1305_internal *' lvalue Var 0x1f90b65e4c0 'st' 'poly1305_internal *'
|   |   | | `-IntegerLiteral 0x1f90b6c2338 <col:15> 'int' 7
|   |   | `-BinaryOperator 0x1f90b6c0208 <col:20, line:64:30> 'double' '-'
|   |   |   |-ParenExpr 0x1f90b6c2b48 <line:182:20, col:53> 'double'
|   |   |   | `-BinaryOperator 0x1f90b6c2b28 <col:21, line:64:30> 'double' '+'
|   |   |   |   |-ImplicitCastExpr 0x1f90b6c2b10 <line:182:21, col:28> 'double' <LValueToRValue>
|   |   |   |   | `-ArraySubscriptExpr 0x1f90b6c2440 <col:21, col:28> 'double' lvalue
|   |   |   |   |   |-ImplicitCastExpr 0x1f90b6c2428 <col:21, col:25> 'double *' <ArrayToPointerDecay>
|   |   |   |   |   | `-MemberExpr 0x1f90b6c23d0 <col:21, col:25> 'double [8]' lvalue ->r 0x1f90b659ce0
|   |   |   |   |   |   `-ImplicitCastExpr 0x1f90b6c23b8 <col:21> 'poly1305_internal *' <LValueToRValue>
|   |   |   |   |   |     `-DeclRefExpr 0x1f90b6c2398 <col:21> 'poly1305_internal *' lvalue Var 0x1f90b65e4c0 'st' 'poly1305_internal *'
|   |   |   |   |   `-IntegerLiteral 0x1f90b6c2400 <col:27> 'int' 6
|   |   |   |   `-BinaryOperator 0x1f90b6c2af0 <line:60:17, line:64:30> 'double' '*'
|   |   |   |     |-BinaryOperator 0x1f90b6c26c0 <line:60:17, col:37> 'double' '*'
|   |   |   |     | |-ParenExpr 0x1f90b6c2570 <col:17, col:37> 'double'
|   |   |   |     | | `-CStyleCastExpr 0x1f90b6c2548 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |   |     | |   `-ParenExpr 0x1f90b6c2528 <col:26, col:36> 'unsigned long long'
|   |   |   |     | |     `-BinaryOperator 0x1f90b6c24d0 <col:27, col:35> 'unsigned long long' '<<'
|   |   |   |     | |       |-IntegerLiteral 0x1f90b6c2460 <col:27> 'unsigned long long' 1
|   |   |   |     | |       `-ParenExpr 0x1f90b6c24b0 <col:33, col:35> 'int'
|   |   |   |     | |         `-IntegerLiteral 0x1f90b6c2488 <line:182:36> 'int' 52
|   |   |   |     | `-ParenExpr 0x1f90b6c26a0 <line:60:17, col:37> 'double'
|   |   |   |     |   `-CStyleCastExpr 0x1f90b6c2678 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |   |     |     `-ParenExpr 0x1f90b6c2658 <col:26, col:36> 'unsigned long long'
|   |   |   |     |       `-BinaryOperator 0x1f90b6c2600 <col:27, col:35> 'unsigned long long' '<<'
|   |   |   |     |         |-IntegerLiteral 0x1f90b6c2590 <col:27> 'unsigned long long' 1
|   |   |   |     |         `-ParenExpr 0x1f90b6c25e0 <col:33, col:35> 'int'
|   |   |   |     |           `-IntegerLiteral 0x1f90b6c25b8 <line:182:44> 'int' 16
|   |   |   |     `-ParenExpr 0x1f90b6c2ad0 <line:64:16, col:30> 'double'
|   |   |   |       `-BinaryOperator 0x1f90b6c2ab0 <line:63:16, line:60:37> 'double' '*'
|   |   |   |         |-ParenExpr 0x1f90b6c2960 <line:63:16, col:30> 'double'
|   |   |   |         | `-BinaryOperator 0x1f90b6c2940 <line:60:17, col:37> 'double' '*'
|   |   |   |         |   |-ParenExpr 0x1f90b6c27f0 <col:17, col:37> 'double'
|   |   |   |         |   | `-CStyleCastExpr 0x1f90b6c27c8 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |   |         |   |   `-ParenExpr 0x1f90b6c27a8 <col:26, col:36> 'unsigned long long'
|   |   |   |         |   |     `-BinaryOperator 0x1f90b6c2750 <col:27, col:35> 'unsigned long long' '<<'
|   |   |   |         |   |       |-IntegerLiteral 0x1f90b6c26e0 <col:27> 'unsigned long long' 1
|   |   |   |         |   |       `-ParenExpr 0x1f90b6c2730 <col:33, col:35> 'int'
|   |   |   |         |   |         `-IntegerLiteral 0x1f90b6c2708 <line:62:20> 'int' 32
|   |   |   |         |   `-ParenExpr 0x1f90b6c2920 <line:60:17, col:37> 'double'
|   |   |   |         |     `-CStyleCastExpr 0x1f90b6c28f8 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |   |         |       `-ParenExpr 0x1f90b6c28d8 <col:26, col:36> 'unsigned long long'
|   |   |   |         |         `-BinaryOperator 0x1f90b6c2880 <col:27, col:35> 'unsigned long long' '<<'
|   |   |   |         |           |-IntegerLiteral 0x1f90b6c2810 <col:27> 'unsigned long long' 1
|   |   |   |         |           `-ParenExpr 0x1f90b6c2860 <col:33, col:35> 'int'
|   |   |   |         |             `-IntegerLiteral 0x1f90b6c2838 <line:63:27> 'int' 32
|   |   |   |         `-ParenExpr 0x1f90b6c2a90 <line:60:17, col:37> 'double'
|   |   |   |           `-CStyleCastExpr 0x1f90b6c2a68 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |   |             `-ParenExpr 0x1f90b6c2a48 <col:26, col:36> 'unsigned long long'
|   |   |   |               `-BinaryOperator 0x1f90b6c29f0 <col:27, col:35> 'unsigned long long' '<<'
|   |   |   |                 |-IntegerLiteral 0x1f90b6c2980 <col:27> 'unsigned long long' 1
|   |   |   |                 `-ParenExpr 0x1f90b6c29d0 <col:33, col:35> 'int'
|   |   |   |                   `-IntegerLiteral 0x1f90b6c29a8 <line:64:27> 'int' 32
|   |   |   `-BinaryOperator 0x1f90b6c01e8 <line:60:17, line:64:30> 'double' '*'
|   |   |     |-BinaryOperator 0x1f90b6c2dc8 <line:60:17, col:37> 'double' '*'
|   |   |     | |-ParenExpr 0x1f90b6c2c78 <col:17, col:37> 'double'
|   |   |     | | `-CStyleCastExpr 0x1f90b6c2c50 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |     | |   `-ParenExpr 0x1f90b6c2c30 <col:26, col:36> 'unsigned long long'
|   |   |     | |     `-BinaryOperator 0x1f90b6c2bd8 <col:27, col:35> 'unsigned long long' '<<'
|   |   |     | |       |-IntegerLiteral 0x1f90b6c2b68 <col:27> 'unsigned long long' 1
|   |   |     | |       `-ParenExpr 0x1f90b6c2bb8 <col:33, col:35> 'int'
|   |   |     | |         `-IntegerLiteral 0x1f90b6c2b90 <line:183:36> 'int' 52
|   |   |     | `-ParenExpr 0x1f90b6c2da8 <line:60:17, col:37> 'double'
|   |   |     |   `-CStyleCastExpr 0x1f90b6c2d80 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |     |     `-ParenExpr 0x1f90b6c2d60 <col:26, col:36> 'unsigned long long'
|   |   |     |       `-BinaryOperator 0x1f90b6c2d08 <col:27, col:35> 'unsigned long long' '<<'
|   |   |     |         |-IntegerLiteral 0x1f90b6c2c98 <col:27> 'unsigned long long' 1
|   |   |     |         `-ParenExpr 0x1f90b6c2ce8 <col:33, col:35> 'int'
|   |   |     |           `-IntegerLiteral 0x1f90b6c2cc0 <line:183:44> 'int' 16
|   |   |     `-ParenExpr 0x1f90b6c01c8 <line:64:16, col:30> 'double'
|   |   |       `-BinaryOperator 0x1f90b6c01a8 <line:63:16, line:60:37> 'double' '*'
|   |   |         |-ParenExpr 0x1f90b6c0058 <line:63:16, col:30> 'double'
|   |   |         | `-BinaryOperator 0x1f90b6c0038 <line:60:17, col:37> 'double' '*'
|   |   |         |   |-ParenExpr 0x1f90b6c2ef8 <col:17, col:37> 'double'
|   |   |         |   | `-CStyleCastExpr 0x1f90b6c2ed0 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |         |   |   `-ParenExpr 0x1f90b6c2eb0 <col:26, col:36> 'unsigned long long'
|   |   |         |   |     `-BinaryOperator 0x1f90b6c2e58 <col:27, col:35> 'unsigned long long' '<<'
|   |   |         |   |       |-IntegerLiteral 0x1f90b6c2de8 <col:27> 'unsigned long long' 1
|   |   |         |   |       `-ParenExpr 0x1f90b6c2e38 <col:33, col:35> 'int'
|   |   |         |   |         `-IntegerLiteral 0x1f90b6c2e10 <line:62:20> 'int' 32
|   |   |         |   `-ParenExpr 0x1f90b6c0018 <line:60:17, col:37> 'double'
|   |   |         |     `-CStyleCastExpr 0x1f90b6bfff0 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |         |       `-ParenExpr 0x1f90b6bffd0 <col:26, col:36> 'unsigned long long'
|   |   |         |         `-BinaryOperator 0x1f90b6bff78 <col:27, col:35> 'unsigned long long' '<<'
|   |   |         |           |-IntegerLiteral 0x1f90b6c2f18 <col:27> 'unsigned long long' 1
|   |   |         |           `-ParenExpr 0x1f90b6bff58 <col:33, col:35> 'int'
|   |   |         |             `-IntegerLiteral 0x1f90b6bff30 <line:63:27> 'int' 32
|   |   |         `-ParenExpr 0x1f90b6c0188 <line:60:17, col:37> 'double'
|   |   |           `-CStyleCastExpr 0x1f90b6c0160 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |             `-ParenExpr 0x1f90b6c0140 <col:26, col:36> 'unsigned long long'
|   |   |               `-BinaryOperator 0x1f90b6c00e8 <col:27, col:35> 'unsigned long long' '<<'
|   |   |                 |-IntegerLiteral 0x1f90b6c0078 <col:27> 'unsigned long long' 1
|   |   |                 `-ParenExpr 0x1f90b6c00c8 <col:33, col:35> 'int'
|   |   |                   `-IntegerLiteral 0x1f90b6c00a0 <line:64:27> 'int' 32
|   |   |-CompoundAssignOperator 0x1f90b6c03f0 <line:184:9, col:28> 'double' '-=' ComputeLHSTy='double' ComputeResultTy='double'
|   |   | |-ArraySubscriptExpr 0x1f90b6c02f0 <col:9, col:16> 'double' lvalue
|   |   | | |-ImplicitCastExpr 0x1f90b6c02d8 <col:9, col:13> 'double *' <ArrayToPointerDecay>
|   |   | | | `-MemberExpr 0x1f90b6c0280 <col:9, col:13> 'double [8]' lvalue ->r 0x1f90b659ce0
|   |   | | |   `-ImplicitCastExpr 0x1f90b6c0268 <col:9> 'poly1305_internal *' <LValueToRValue>
|   |   | | |     `-DeclRefExpr 0x1f90b6c0248 <col:9> 'poly1305_internal *' lvalue Var 0x1f90b65e4c0 'st' 'poly1305_internal *'
|   |   | | `-IntegerLiteral 0x1f90b6c02b0 <col:15> 'int' 6
|   |   | `-ImplicitCastExpr 0x1f90b6c03d8 <col:21, col:28> 'double' <LValueToRValue>
|   |   |   `-ArraySubscriptExpr 0x1f90b6c03b8 <col:21, col:28> 'double' lvalue
|   |   |     |-ImplicitCastExpr 0x1f90b6c03a0 <col:21, col:25> 'double *' <ArrayToPointerDecay>
|   |   |     | `-MemberExpr 0x1f90b6c0348 <col:21, col:25> 'double [8]' lvalue ->r 0x1f90b659ce0
|   |   |     |   `-ImplicitCastExpr 0x1f90b6c0330 <col:21> 'poly1305_internal *' <LValueToRValue>
|   |   |     |     `-DeclRefExpr 0x1f90b6c0310 <col:21> 'poly1305_internal *' lvalue Var 0x1f90b65e4c0 'st' 'poly1305_internal *'
|   |   |     `-IntegerLiteral 0x1f90b6c0378 <col:27> 'int' 7
|   |   |-BinaryOperator 0x1f90b6bd610 <line:186:9, line:64:30> 'double' '='
|   |   | |-ArraySubscriptExpr 0x1f90b6c04c8 <line:186:9, col:16> 'double' lvalue
|   |   | | |-ImplicitCastExpr 0x1f90b6c04b0 <col:9, col:13> 'double *' <ArrayToPointerDecay>
|   |   | | | `-MemberExpr 0x1f90b6c0458 <col:9, col:13> 'double [6]' lvalue ->s 0x1f90b659de0
|   |   | | |   `-ImplicitCastExpr 0x1f90b6c0440 <col:9> 'poly1305_internal *' <LValueToRValue>
|   |   | | |     `-DeclRefExpr 0x1f90b6c0420 <col:9> 'poly1305_internal *' lvalue Var 0x1f90b65e4c0 'st' 'poly1305_internal *'
|   |   | | `-IntegerLiteral 0x1f90b6c0488 <col:15> 'int' 1
|   |   | `-BinaryOperator 0x1f90b6bd5f0 <col:20, line:64:30> 'double' '-'
|   |   |   |-ParenExpr 0x1f90b6c0de8 <line:186:20, col:58> 'double'
|   |   |   | `-BinaryOperator 0x1f90b6c0dc8 <col:21, line:64:30> 'double' '+'
|   |   |   |   |-ImplicitCastExpr 0x1f90b6c0db0 <line:186:21, col:28> 'double' <LValueToRValue>
|   |   |   |   | `-ArraySubscriptExpr 0x1f90b6c0590 <col:21, col:28> 'double' lvalue
|   |   |   |   |   |-ImplicitCastExpr 0x1f90b6c0578 <col:21, col:25> 'double *' <ArrayToPointerDecay>
|   |   |   |   |   | `-MemberExpr 0x1f90b6c0520 <col:21, col:25> 'double [6]' lvalue ->s 0x1f90b659de0
|   |   |   |   |   |   `-ImplicitCastExpr 0x1f90b6c0508 <col:21> 'poly1305_internal *' <LValueToRValue>
|   |   |   |   |   |     `-DeclRefExpr 0x1f90b6c04e8 <col:21> 'poly1305_internal *' lvalue Var 0x1f90b65e4c0 'st' 'poly1305_internal *'
|   |   |   |   |   `-IntegerLiteral 0x1f90b6c0550 <col:27> 'int' 0
|   |   |   |   `-BinaryOperator 0x1f90b6c0d90 <line:60:17, line:64:30> 'double' '/'
|   |   |   |     |-BinaryOperator 0x1f90b6c0960 <line:60:17, col:37> 'double' '*'
|   |   |   |     | |-BinaryOperator 0x1f90b6c0810 <col:17, col:37> 'double' '*'
|   |   |   |     | | |-ParenExpr 0x1f90b6c06c0 <col:17, col:37> 'double'
|   |   |   |     | | | `-CStyleCastExpr 0x1f90b6c0698 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |   |     | | |   `-ParenExpr 0x1f90b6c0678 <col:26, col:36> 'unsigned long long'
|   |   |   |     | | |     `-BinaryOperator 0x1f90b6c0620 <col:27, col:35> 'unsigned long long' '<<'
|   |   |   |     | | |       |-IntegerLiteral 0x1f90b6c05b0 <col:27> 'unsigned long long' 1
|   |   |   |     | | |       `-ParenExpr 0x1f90b6c0600 <col:33, col:35> 'int'
|   |   |   |     | | |         `-IntegerLiteral 0x1f90b6c05d8 <line:186:36> 'int' 52
|   |   |   |     | | `-ParenExpr 0x1f90b6c07f0 <line:60:17, col:37> 'double'
|   |   |   |     | |   `-CStyleCastExpr 0x1f90b6c07c8 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |   |     | |     `-ParenExpr 0x1f90b6c07a8 <col:26, col:36> 'unsigned long long'
|   |   |   |     | |       `-BinaryOperator 0x1f90b6c0750 <col:27, col:35> 'unsigned long long' '<<'
|   |   |   |     | |         |-IntegerLiteral 0x1f90b6c06e0 <col:27> 'unsigned long long' 1
|   |   |   |     | |         `-ParenExpr 0x1f90b6c0730 <col:33, col:35> 'int'
|   |   |   |     | |           `-IntegerLiteral 0x1f90b6c0708 <line:186:44> 'int' 16
|   |   |   |     | `-ParenExpr 0x1f90b6c0940 <line:60:17, col:37> 'double'
|   |   |   |     |   `-CStyleCastExpr 0x1f90b6c0918 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |   |     |     `-ParenExpr 0x1f90b6c08f8 <col:26, col:36> 'unsigned long long'
|   |   |   |     |       `-BinaryOperator 0x1f90b6c08a0 <col:27, col:35> 'unsigned long long' '<<'
|   |   |   |     |         |-IntegerLiteral 0x1f90b6c0830 <col:27> 'unsigned long long' 1
|   |   |   |     |         `-ParenExpr 0x1f90b6c0880 <col:33, col:35> 'int'
|   |   |   |     |           `-IntegerLiteral 0x1f90b6c0858 <line:61:19> 'int' 0
|   |   |   |     `-ParenExpr 0x1f90b6c0d70 <line:64:16, col:30> 'double'
|   |   |   |       `-BinaryOperator 0x1f90b6c0d50 <line:63:16, line:60:37> 'double' '*'
|   |   |   |         |-ParenExpr 0x1f90b6c0c00 <line:63:16, col:30> 'double'
|   |   |   |         | `-BinaryOperator 0x1f90b6c0be0 <line:60:17, col:37> 'double' '*'
|   |   |   |         |   |-ParenExpr 0x1f90b6c0a90 <col:17, col:37> 'double'
|   |   |   |         |   | `-CStyleCastExpr 0x1f90b6c0a68 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |   |         |   |   `-ParenExpr 0x1f90b6c0a48 <col:26, col:36> 'unsigned long long'
|   |   |   |         |   |     `-BinaryOperator 0x1f90b6c09f0 <col:27, col:35> 'unsigned long long' '<<'
|   |   |   |         |   |       |-IntegerLiteral 0x1f90b6c0980 <col:27> 'unsigned long long' 1
|   |   |   |         |   |       `-ParenExpr 0x1f90b6c09d0 <col:33, col:35> 'int'
|   |   |   |         |   |         `-IntegerLiteral 0x1f90b6c09a8 <line:62:20> 'int' 32
|   |   |   |         |   `-ParenExpr 0x1f90b6c0bc0 <line:60:17, col:37> 'double'
|   |   |   |         |     `-CStyleCastExpr 0x1f90b6c0b98 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |   |         |       `-ParenExpr 0x1f90b6c0b78 <col:26, col:36> 'unsigned long long'
|   |   |   |         |         `-BinaryOperator 0x1f90b6c0b20 <col:27, col:35> 'unsigned long long' '<<'
|   |   |   |         |           |-IntegerLiteral 0x1f90b6c0ab0 <col:27> 'unsigned long long' 1
|   |   |   |         |           `-ParenExpr 0x1f90b6c0b00 <col:33, col:35> 'int'
|   |   |   |         |             `-IntegerLiteral 0x1f90b6c0ad8 <line:63:27> 'int' 32
|   |   |   |         `-ParenExpr 0x1f90b6c0d30 <line:60:17, col:37> 'double'
|   |   |   |           `-CStyleCastExpr 0x1f90b6c0d08 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |   |             `-ParenExpr 0x1f90b6c0ce8 <col:26, col:36> 'unsigned long long'
|   |   |   |               `-BinaryOperator 0x1f90b6c0c90 <col:27, col:35> 'unsigned long long' '<<'
|   |   |   |                 |-IntegerLiteral 0x1f90b6c0c20 <col:27> 'unsigned long long' 1
|   |   |   |                 `-ParenExpr 0x1f90b6c0c70 <col:33, col:35> 'int'
|   |   |   |                   `-IntegerLiteral 0x1f90b6c0c48 <line:64:27> 'int' 32
|   |   |   `-BinaryOperator 0x1f90b6bd5d0 <line:60:17, line:64:30> 'double' '/'
|   |   |     |-BinaryOperator 0x1f90b6bd1a0 <line:60:17, col:37> 'double' '*'
|   |   |     | |-BinaryOperator 0x1f90b6bd050 <col:17, col:37> 'double' '*'
|   |   |     | | |-ParenExpr 0x1f90b6bcf00 <col:17, col:37> 'double'
|   |   |     | | | `-CStyleCastExpr 0x1f90b6c0ef0 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |     | | |   `-ParenExpr 0x1f90b6c0ed0 <col:26, col:36> 'unsigned long long'
|   |   |     | | |     `-BinaryOperator 0x1f90b6c0e78 <col:27, col:35> 'unsigned long long' '<<'
|   |   |     | | |       |-IntegerLiteral 0x1f90b6c0e08 <col:27> 'unsigned long long' 1
|   |   |     | | |       `-ParenExpr 0x1f90b6c0e58 <col:33, col:35> 'int'
|   |   |     | | |         `-IntegerLiteral 0x1f90b6c0e30 <line:187:36> 'int' 52
|   |   |     | | `-ParenExpr 0x1f90b6bd030 <line:60:17, col:37> 'double'
|   |   |     | |   `-CStyleCastExpr 0x1f90b6bd008 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |     | |     `-ParenExpr 0x1f90b6bcfe8 <col:26, col:36> 'unsigned long long'
|   |   |     | |       `-BinaryOperator 0x1f90b6bcf90 <col:27, col:35> 'unsigned long long' '<<'
|   |   |     | |         |-IntegerLiteral 0x1f90b6bcf20 <col:27> 'unsigned long long' 1
|   |   |     | |         `-ParenExpr 0x1f90b6bcf70 <col:33, col:35> 'int'
|   |   |     | |           `-IntegerLiteral 0x1f90b6bcf48 <line:187:44> 'int' 16
|   |   |     | `-ParenExpr 0x1f90b6bd180 <line:60:17, col:37> 'double'
|   |   |     |   `-CStyleCastExpr 0x1f90b6bd158 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |     |     `-ParenExpr 0x1f90b6bd138 <col:26, col:36> 'unsigned long long'
|   |   |     |       `-BinaryOperator 0x1f90b6bd0e0 <col:27, col:35> 'unsigned long long' '<<'
|   |   |     |         |-IntegerLiteral 0x1f90b6bd070 <col:27> 'unsigned long long' 1
|   |   |     |         `-ParenExpr 0x1f90b6bd0c0 <col:33, col:35> 'int'
|   |   |     |           `-IntegerLiteral 0x1f90b6bd098 <line:61:19> 'int' 0
|   |   |     `-ParenExpr 0x1f90b6bd5b0 <line:64:16, col:30> 'double'
|   |   |       `-BinaryOperator 0x1f90b6bd590 <line:63:16, line:60:37> 'double' '*'
|   |   |         |-ParenExpr 0x1f90b6bd440 <line:63:16, col:30> 'double'
|   |   |         | `-BinaryOperator 0x1f90b6bd420 <line:60:17, col:37> 'double' '*'
|   |   |         |   |-ParenExpr 0x1f90b6bd2d0 <col:17, col:37> 'double'
|   |   |         |   | `-CStyleCastExpr 0x1f90b6bd2a8 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |         |   |   `-ParenExpr 0x1f90b6bd288 <col:26, col:36> 'unsigned long long'
|   |   |         |   |     `-BinaryOperator 0x1f90b6bd230 <col:27, col:35> 'unsigned long long' '<<'
|   |   |         |   |       |-IntegerLiteral 0x1f90b6bd1c0 <col:27> 'unsigned long long' 1
|   |   |         |   |       `-ParenExpr 0x1f90b6bd210 <col:33, col:35> 'int'
|   |   |         |   |         `-IntegerLiteral 0x1f90b6bd1e8 <line:62:20> 'int' 32
|   |   |         |   `-ParenExpr 0x1f90b6bd400 <line:60:17, col:37> 'double'
|   |   |         |     `-CStyleCastExpr 0x1f90b6bd3d8 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |         |       `-ParenExpr 0x1f90b6bd3b8 <col:26, col:36> 'unsigned long long'
|   |   |         |         `-BinaryOperator 0x1f90b6bd360 <col:27, col:35> 'unsigned long long' '<<'
|   |   |         |           |-IntegerLiteral 0x1f90b6bd2f0 <col:27> 'unsigned long long' 1
|   |   |         |           `-ParenExpr 0x1f90b6bd340 <col:33, col:35> 'int'
|   |   |         |             `-IntegerLiteral 0x1f90b6bd318 <line:63:27> 'int' 32
|   |   |         `-ParenExpr 0x1f90b6bd570 <line:60:17, col:37> 'double'
|   |   |           `-CStyleCastExpr 0x1f90b6bd548 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |             `-ParenExpr 0x1f90b6bd528 <col:26, col:36> 'unsigned long long'
|   |   |               `-BinaryOperator 0x1f90b6bd4d0 <col:27, col:35> 'unsigned long long' '<<'
|   |   |                 |-IntegerLiteral 0x1f90b6bd460 <col:27> 'unsigned long long' 1
|   |   |                 `-ParenExpr 0x1f90b6bd4b0 <col:33, col:35> 'int'
|   |   |                   `-IntegerLiteral 0x1f90b6bd488 <line:64:27> 'int' 32
|   |   |-CompoundAssignOperator 0x1f90b6bd7d8 <line:188:9, col:28> 'double' '-=' ComputeLHSTy='double' ComputeResultTy='double'
|   |   | |-ArraySubscriptExpr 0x1f90b6bd6d8 <col:9, col:16> 'double' lvalue
|   |   | | |-ImplicitCastExpr 0x1f90b6bd6c0 <col:9, col:13> 'double *' <ArrayToPointerDecay>
|   |   | | | `-MemberExpr 0x1f90b6bd668 <col:9, col:13> 'double [6]' lvalue ->s 0x1f90b659de0
|   |   | | |   `-ImplicitCastExpr 0x1f90b6bd650 <col:9> 'poly1305_internal *' <LValueToRValue>
|   |   | | |     `-DeclRefExpr 0x1f90b6bd630 <col:9> 'poly1305_internal *' lvalue Var 0x1f90b65e4c0 'st' 'poly1305_internal *'
|   |   | | `-IntegerLiteral 0x1f90b6bd698 <col:15> 'int' 0
|   |   | `-ImplicitCastExpr 0x1f90b6bd7c0 <col:21, col:28> 'double' <LValueToRValue>
|   |   |   `-ArraySubscriptExpr 0x1f90b6bd7a0 <col:21, col:28> 'double' lvalue
|   |   |     |-ImplicitCastExpr 0x1f90b6bd788 <col:21, col:25> 'double *' <ArrayToPointerDecay>
|   |   |     | `-MemberExpr 0x1f90b6bd730 <col:21, col:25> 'double [6]' lvalue ->s 0x1f90b659de0
|   |   |     |   `-ImplicitCastExpr 0x1f90b6bd718 <col:21> 'poly1305_internal *' <LValueToRValue>
|   |   |     |     `-DeclRefExpr 0x1f90b6bd6f8 <col:21> 'poly1305_internal *' lvalue Var 0x1f90b65e4c0 'st' 'poly1305_internal *'
|   |   |     `-IntegerLiteral 0x1f90b6bd760 <col:27> 'int' 1
|   |   |-BinaryOperator 0x1f90b6bca18 <line:190:9, line:64:30> 'double' '='
|   |   | |-ArraySubscriptExpr 0x1f90b6bd8b0 <line:190:9, col:16> 'double' lvalue
|   |   | | |-ImplicitCastExpr 0x1f90b6bd898 <col:9, col:13> 'double *' <ArrayToPointerDecay>
|   |   | | | `-MemberExpr 0x1f90b6bd840 <col:9, col:13> 'double [6]' lvalue ->s 0x1f90b659de0
|   |   | | |   `-ImplicitCastExpr 0x1f90b6bd828 <col:9> 'poly1305_internal *' <LValueToRValue>
|   |   | | |     `-DeclRefExpr 0x1f90b6bd808 <col:9> 'poly1305_internal *' lvalue Var 0x1f90b65e4c0 'st' 'poly1305_internal *'
|   |   | | `-IntegerLiteral 0x1f90b6bd870 <col:15> 'int' 3
|   |   | `-BinaryOperator 0x1f90b6bc9f8 <col:20, line:64:30> 'double' '-'
|   |   |   |-ParenExpr 0x1f90b6bc1d8 <line:190:20, col:59> 'double'
|   |   |   | `-BinaryOperator 0x1f90b6bc1b8 <col:21, line:64:30> 'double' '+'
|   |   |   |   |-ImplicitCastExpr 0x1f90b6bc1a0 <line:190:21, col:28> 'double' <LValueToRValue>
|   |   |   |   | `-ArraySubscriptExpr 0x1f90b6bd978 <col:21, col:28> 'double' lvalue
|   |   |   |   |   |-ImplicitCastExpr 0x1f90b6bd960 <col:21, col:25> 'double *' <ArrayToPointerDecay>
|   |   |   |   |   | `-MemberExpr 0x1f90b6bd908 <col:21, col:25> 'double [6]' lvalue ->s 0x1f90b659de0
|   |   |   |   |   |   `-ImplicitCastExpr 0x1f90b6bd8f0 <col:21> 'poly1305_internal *' <LValueToRValue>
|   |   |   |   |   |     `-DeclRefExpr 0x1f90b6bd8d0 <col:21> 'poly1305_internal *' lvalue Var 0x1f90b65e4c0 'st' 'poly1305_internal *'
|   |   |   |   |   `-IntegerLiteral 0x1f90b6bd938 <col:27> 'int' 2
|   |   |   |   `-BinaryOperator 0x1f90b6bc180 <line:60:17, line:64:30> 'double' '/'
|   |   |   |     |-BinaryOperator 0x1f90b6bdd48 <line:60:17, col:37> 'double' '*'
|   |   |   |     | |-BinaryOperator 0x1f90b6bdbf8 <col:17, col:37> 'double' '*'
|   |   |   |     | | |-ParenExpr 0x1f90b6bdaa8 <col:17, col:37> 'double'
|   |   |   |     | | | `-CStyleCastExpr 0x1f90b6bda80 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |   |     | | |   `-ParenExpr 0x1f90b6bda60 <col:26, col:36> 'unsigned long long'
|   |   |   |     | | |     `-BinaryOperator 0x1f90b6bda08 <col:27, col:35> 'unsigned long long' '<<'
|   |   |   |     | | |       |-IntegerLiteral 0x1f90b6bd998 <col:27> 'unsigned long long' 1
|   |   |   |     | | |       `-ParenExpr 0x1f90b6bd9e8 <col:33, col:35> 'int'
|   |   |   |     | | |         `-IntegerLiteral 0x1f90b6bd9c0 <line:190:36> 'int' 52
|   |   |   |     | | `-ParenExpr 0x1f90b6bdbd8 <line:60:17, col:37> 'double'
|   |   |   |     | |   `-CStyleCastExpr 0x1f90b6bdbb0 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |   |     | |     `-ParenExpr 0x1f90b6bdb90 <col:26, col:36> 'unsigned long long'
|   |   |   |     | |       `-BinaryOperator 0x1f90b6bdb38 <col:27, col:35> 'unsigned long long' '<<'
|   |   |   |     | |         |-IntegerLiteral 0x1f90b6bdac8 <col:27> 'unsigned long long' 1
|   |   |   |     | |         `-ParenExpr 0x1f90b6bdb18 <col:33, col:35> 'int'
|   |   |   |     | |           `-IntegerLiteral 0x1f90b6bdaf0 <line:190:44> 'int' 16
|   |   |   |     | `-ParenExpr 0x1f90b6bdd28 <line:60:17, col:37> 'double'
|   |   |   |     |   `-CStyleCastExpr 0x1f90b6bdd00 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |   |     |     `-ParenExpr 0x1f90b6bdce0 <col:26, col:36> 'unsigned long long'
|   |   |   |     |       `-BinaryOperator 0x1f90b6bdc88 <col:27, col:35> 'unsigned long long' '<<'
|   |   |   |     |         |-IntegerLiteral 0x1f90b6bdc18 <col:27> 'unsigned long long' 1
|   |   |   |     |         `-ParenExpr 0x1f90b6bdc68 <col:33, col:35> 'int'
|   |   |   |     |           `-IntegerLiteral 0x1f90b6bdc40 <line:62:20> 'int' 32
|   |   |   |     `-ParenExpr 0x1f90b6bc160 <line:64:16, col:30> 'double'
|   |   |   |       `-BinaryOperator 0x1f90b6bc140 <line:63:16, line:60:37> 'double' '*'
|   |   |   |         |-ParenExpr 0x1f90b6bbff0 <line:63:16, col:30> 'double'
|   |   |   |         | `-BinaryOperator 0x1f90b6bbfd0 <line:60:17, col:37> 'double' '*'
|   |   |   |         |   |-ParenExpr 0x1f90b6bde78 <col:17, col:37> 'double'
|   |   |   |         |   | `-CStyleCastExpr 0x1f90b6bde50 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |   |         |   |   `-ParenExpr 0x1f90b6bde30 <col:26, col:36> 'unsigned long long'
|   |   |   |         |   |     `-BinaryOperator 0x1f90b6bddd8 <col:27, col:35> 'unsigned long long' '<<'
|   |   |   |         |   |       |-IntegerLiteral 0x1f90b6bdd68 <col:27> 'unsigned long long' 1
|   |   |   |         |   |       `-ParenExpr 0x1f90b6bddb8 <col:33, col:35> 'int'
|   |   |   |         |   |         `-IntegerLiteral 0x1f90b6bdd90 <line:62:20> 'int' 32
|   |   |   |         |   `-ParenExpr 0x1f90b6bbfb0 <line:60:17, col:37> 'double'
|   |   |   |         |     `-CStyleCastExpr 0x1f90b6bbf88 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |   |         |       `-ParenExpr 0x1f90b6bbf68 <col:26, col:36> 'unsigned long long'
|   |   |   |         |         `-BinaryOperator 0x1f90b6bbf10 <col:27, col:35> 'unsigned long long' '<<'
|   |   |   |         |           |-IntegerLiteral 0x1f90b6bde98 <col:27> 'unsigned long long' 1
|   |   |   |         |           `-ParenExpr 0x1f90b6bbef0 <col:33, col:35> 'int'
|   |   |   |         |             `-IntegerLiteral 0x1f90b6bdec0 <line:63:27> 'int' 32
|   |   |   |         `-ParenExpr 0x1f90b6bc120 <line:60:17, col:37> 'double'
|   |   |   |           `-CStyleCastExpr 0x1f90b6bc0f8 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |   |             `-ParenExpr 0x1f90b6bc0d8 <col:26, col:36> 'unsigned long long'
|   |   |   |               `-BinaryOperator 0x1f90b6bc080 <col:27, col:35> 'unsigned long long' '<<'
|   |   |   |                 |-IntegerLiteral 0x1f90b6bc010 <col:27> 'unsigned long long' 1
|   |   |   |                 `-ParenExpr 0x1f90b6bc060 <col:33, col:35> 'int'
|   |   |   |                   `-IntegerLiteral 0x1f90b6bc038 <line:64:27> 'int' 32
|   |   |   `-BinaryOperator 0x1f90b6bc9d8 <line:60:17, line:64:30> 'double' '/'
|   |   |     |-BinaryOperator 0x1f90b6bc5a8 <line:60:17, col:37> 'double' '*'
|   |   |     | |-BinaryOperator 0x1f90b6bc458 <col:17, col:37> 'double' '*'
|   |   |     | | |-ParenExpr 0x1f90b6bc308 <col:17, col:37> 'double'
|   |   |     | | | `-CStyleCastExpr 0x1f90b6bc2e0 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |     | | |   `-ParenExpr 0x1f90b6bc2c0 <col:26, col:36> 'unsigned long long'
|   |   |     | | |     `-BinaryOperator 0x1f90b6bc268 <col:27, col:35> 'unsigned long long' '<<'
|   |   |     | | |       |-IntegerLiteral 0x1f90b6bc1f8 <col:27> 'unsigned long long' 1
|   |   |     | | |       `-ParenExpr 0x1f90b6bc248 <col:33, col:35> 'int'
|   |   |     | | |         `-IntegerLiteral 0x1f90b6bc220 <line:191:36> 'int' 52
|   |   |     | | `-ParenExpr 0x1f90b6bc438 <line:60:17, col:37> 'double'
|   |   |     | |   `-CStyleCastExpr 0x1f90b6bc410 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |     | |     `-ParenExpr 0x1f90b6bc3f0 <col:26, col:36> 'unsigned long long'
|   |   |     | |       `-BinaryOperator 0x1f90b6bc398 <col:27, col:35> 'unsigned long long' '<<'
|   |   |     | |         |-IntegerLiteral 0x1f90b6bc328 <col:27> 'unsigned long long' 1
|   |   |     | |         `-ParenExpr 0x1f90b6bc378 <col:33, col:35> 'int'
|   |   |     | |           `-IntegerLiteral 0x1f90b6bc350 <line:191:44> 'int' 16
|   |   |     | `-ParenExpr 0x1f90b6bc588 <line:60:17, col:37> 'double'
|   |   |     |   `-CStyleCastExpr 0x1f90b6bc560 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |     |     `-ParenExpr 0x1f90b6bc540 <col:26, col:36> 'unsigned long long'
|   |   |     |       `-BinaryOperator 0x1f90b6bc4e8 <col:27, col:35> 'unsigned long long' '<<'
|   |   |     |         |-IntegerLiteral 0x1f90b6bc478 <col:27> 'unsigned long long' 1
|   |   |     |         `-ParenExpr 0x1f90b6bc4c8 <col:33, col:35> 'int'
|   |   |     |           `-IntegerLiteral 0x1f90b6bc4a0 <line:62:20> 'int' 32
|   |   |     `-ParenExpr 0x1f90b6bc9b8 <line:64:16, col:30> 'double'
|   |   |       `-BinaryOperator 0x1f90b6bc998 <line:63:16, line:60:37> 'double' '*'
|   |   |         |-ParenExpr 0x1f90b6bc848 <line:63:16, col:30> 'double'
|   |   |         | `-BinaryOperator 0x1f90b6bc828 <line:60:17, col:37> 'double' '*'
|   |   |         |   |-ParenExpr 0x1f90b6bc6d8 <col:17, col:37> 'double'
|   |   |         |   | `-CStyleCastExpr 0x1f90b6bc6b0 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |         |   |   `-ParenExpr 0x1f90b6bc690 <col:26, col:36> 'unsigned long long'
|   |   |         |   |     `-BinaryOperator 0x1f90b6bc638 <col:27, col:35> 'unsigned long long' '<<'
|   |   |         |   |       |-IntegerLiteral 0x1f90b6bc5c8 <col:27> 'unsigned long long' 1
|   |   |         |   |       `-ParenExpr 0x1f90b6bc618 <col:33, col:35> 'int'
|   |   |         |   |         `-IntegerLiteral 0x1f90b6bc5f0 <line:62:20> 'int' 32
|   |   |         |   `-ParenExpr 0x1f90b6bc808 <line:60:17, col:37> 'double'
|   |   |         |     `-CStyleCastExpr 0x1f90b6bc7e0 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |         |       `-ParenExpr 0x1f90b6bc7c0 <col:26, col:36> 'unsigned long long'
|   |   |         |         `-BinaryOperator 0x1f90b6bc768 <col:27, col:35> 'unsigned long long' '<<'
|   |   |         |           |-IntegerLiteral 0x1f90b6bc6f8 <col:27> 'unsigned long long' 1
|   |   |         |           `-ParenExpr 0x1f90b6bc748 <col:33, col:35> 'int'
|   |   |         |             `-IntegerLiteral 0x1f90b6bc720 <line:63:27> 'int' 32
|   |   |         `-ParenExpr 0x1f90b6bc978 <line:60:17, col:37> 'double'
|   |   |           `-CStyleCastExpr 0x1f90b6bc950 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |             `-ParenExpr 0x1f90b6bc930 <col:26, col:36> 'unsigned long long'
|   |   |               `-BinaryOperator 0x1f90b6bc8d8 <col:27, col:35> 'unsigned long long' '<<'
|   |   |                 |-IntegerLiteral 0x1f90b6bc868 <col:27> 'unsigned long long' 1
|   |   |                 `-ParenExpr 0x1f90b6bc8b8 <col:33, col:35> 'int'
|   |   |                   `-IntegerLiteral 0x1f90b6bc890 <line:64:27> 'int' 32
|   |   |-CompoundAssignOperator 0x1f90b6bcbe0 <line:192:9, col:28> 'double' '-=' ComputeLHSTy='double' ComputeResultTy='double'
|   |   | |-ArraySubscriptExpr 0x1f90b6bcae0 <col:9, col:16> 'double' lvalue
|   |   | | |-ImplicitCastExpr 0x1f90b6bcac8 <col:9, col:13> 'double *' <ArrayToPointerDecay>
|   |   | | | `-MemberExpr 0x1f90b6bca70 <col:9, col:13> 'double [6]' lvalue ->s 0x1f90b659de0
|   |   | | |   `-ImplicitCastExpr 0x1f90b6bca58 <col:9> 'poly1305_internal *' <LValueToRValue>
|   |   | | |     `-DeclRefExpr 0x1f90b6bca38 <col:9> 'poly1305_internal *' lvalue Var 0x1f90b65e4c0 'st' 'poly1305_internal *'
|   |   | | `-IntegerLiteral 0x1f90b6bcaa0 <col:15> 'int' 2
|   |   | `-ImplicitCastExpr 0x1f90b6bcbc8 <col:21, col:28> 'double' <LValueToRValue>
|   |   |   `-ArraySubscriptExpr 0x1f90b6bcba8 <col:21, col:28> 'double' lvalue
|   |   |     |-ImplicitCastExpr 0x1f90b6bcb90 <col:21, col:25> 'double *' <ArrayToPointerDecay>
|   |   |     | `-MemberExpr 0x1f90b6bcb38 <col:21, col:25> 'double [6]' lvalue ->s 0x1f90b659de0
|   |   |     |   `-ImplicitCastExpr 0x1f90b6bcb20 <col:21> 'poly1305_internal *' <LValueToRValue>
|   |   |     |     `-DeclRefExpr 0x1f90b6bcb00 <col:21> 'poly1305_internal *' lvalue Var 0x1f90b65e4c0 'st' 'poly1305_internal *'
|   |   |     `-IntegerLiteral 0x1f90b6bcb68 <col:27> 'int' 3
|   |   |-BinaryOperator 0x1f90b6c41a8 <line:194:9, line:64:30> 'double' '='
|   |   | |-ArraySubscriptExpr 0x1f90b6bccb8 <line:194:9, col:16> 'double' lvalue
|   |   | | |-ImplicitCastExpr 0x1f90b6bcca0 <col:9, col:13> 'double *' <ArrayToPointerDecay>
|   |   | | | `-MemberExpr 0x1f90b6bcc48 <col:9, col:13> 'double [6]' lvalue ->s 0x1f90b659de0
|   |   | | |   `-ImplicitCastExpr 0x1f90b6bcc30 <col:9> 'poly1305_internal *' <LValueToRValue>
|   |   | | |     `-DeclRefExpr 0x1f90b6bcc10 <col:9> 'poly1305_internal *' lvalue Var 0x1f90b65e4c0 'st' 'poly1305_internal *'
|   |   | | `-IntegerLiteral 0x1f90b6bcc78 <col:15> 'int' 5
|   |   | `-BinaryOperator 0x1f90b6c4188 <col:20, line:64:30> 'double' '-'
|   |   |   |-ParenExpr 0x1f90b6be788 <line:194:20, col:59> 'double'
|   |   |   | `-BinaryOperator 0x1f90b6be768 <col:21, line:64:30> 'double' '+'
|   |   |   |   |-ImplicitCastExpr 0x1f90b6be750 <line:194:21, col:28> 'double' <LValueToRValue>
|   |   |   |   | `-ArraySubscriptExpr 0x1f90b6bcd80 <col:21, col:28> 'double' lvalue
|   |   |   |   |   |-ImplicitCastExpr 0x1f90b6bcd68 <col:21, col:25> 'double *' <ArrayToPointerDecay>
|   |   |   |   |   | `-MemberExpr 0x1f90b6bcd10 <col:21, col:25> 'double [6]' lvalue ->s 0x1f90b659de0
|   |   |   |   |   |   `-ImplicitCastExpr 0x1f90b6bccf8 <col:21> 'poly1305_internal *' <LValueToRValue>
|   |   |   |   |   |     `-DeclRefExpr 0x1f90b6bccd8 <col:21> 'poly1305_internal *' lvalue Var 0x1f90b65e4c0 'st' 'poly1305_internal *'
|   |   |   |   |   `-IntegerLiteral 0x1f90b6bcd40 <col:27> 'int' 4
|   |   |   |   `-BinaryOperator 0x1f90b6be730 <line:60:17, line:64:30> 'double' '/'
|   |   |   |     |-BinaryOperator 0x1f90b6be300 <line:60:17, line:63:30> 'double' '*'
|   |   |   |     | |-BinaryOperator 0x1f90b6be040 <line:60:17, col:37> 'double' '*'
|   |   |   |     | | |-ParenExpr 0x1f90b6bceb0 <col:17, col:37> 'double'
|   |   |   |     | | | `-CStyleCastExpr 0x1f90b6bce88 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |   |     | | |   `-ParenExpr 0x1f90b6bce68 <col:26, col:36> 'unsigned long long'
|   |   |   |     | | |     `-BinaryOperator 0x1f90b6bce10 <col:27, col:35> 'unsigned long long' '<<'
|   |   |   |     | | |       |-IntegerLiteral 0x1f90b6bcda0 <col:27> 'unsigned long long' 1
|   |   |   |     | | |       `-ParenExpr 0x1f90b6bcdf0 <col:33, col:35> 'int'
|   |   |   |     | | |         `-IntegerLiteral 0x1f90b6bcdc8 <line:194:36> 'int' 52
|   |   |   |     | | `-ParenExpr 0x1f90b6be020 <line:60:17, col:37> 'double'
|   |   |   |     | |   `-CStyleCastExpr 0x1f90b6bdff8 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |   |     | |     `-ParenExpr 0x1f90b6bdfd8 <col:26, col:36> 'unsigned long long'
|   |   |   |     | |       `-BinaryOperator 0x1f90b6bdf80 <col:27, col:35> 'unsigned long long' '<<'
|   |   |   |     | |         |-IntegerLiteral 0x1f90b6bdf10 <col:27> 'unsigned long long' 1
|   |   |   |     | |         `-ParenExpr 0x1f90b6bdf60 <col:33, col:35> 'int'
|   |   |   |     | |           `-IntegerLiteral 0x1f90b6bdf38 <line:194:44> 'int' 16
|   |   |   |     | `-ParenExpr 0x1f90b6be2e0 <line:63:16, col:30> 'double'
|   |   |   |     |   `-BinaryOperator 0x1f90b6be2c0 <line:60:17, col:37> 'double' '*'
|   |   |   |     |     |-ParenExpr 0x1f90b6be170 <col:17, col:37> 'double'
|   |   |   |     |     | `-CStyleCastExpr 0x1f90b6be148 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |   |     |     |   `-ParenExpr 0x1f90b6be128 <col:26, col:36> 'unsigned long long'
|   |   |   |     |     |     `-BinaryOperator 0x1f90b6be0d0 <col:27, col:35> 'unsigned long long' '<<'
|   |   |   |     |     |       |-IntegerLiteral 0x1f90b6be060 <col:27> 'unsigned long long' 1
|   |   |   |     |     |       `-ParenExpr 0x1f90b6be0b0 <col:33, col:35> 'int'
|   |   |   |     |     |         `-IntegerLiteral 0x1f90b6be088 <line:62:20> 'int' 32
|   |   |   |     |     `-ParenExpr 0x1f90b6be2a0 <line:60:17, col:37> 'double'
|   |   |   |     |       `-CStyleCastExpr 0x1f90b6be278 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |   |     |         `-ParenExpr 0x1f90b6be258 <col:26, col:36> 'unsigned long long'
|   |   |   |     |           `-BinaryOperator 0x1f90b6be200 <col:27, col:35> 'unsigned long long' '<<'
|   |   |   |     |             |-IntegerLiteral 0x1f90b6be190 <col:27> 'unsigned long long' 1
|   |   |   |     |             `-ParenExpr 0x1f90b6be1e0 <col:33, col:35> 'int'
|   |   |   |     |               `-IntegerLiteral 0x1f90b6be1b8 <line:63:27> 'int' 32
|   |   |   |     `-ParenExpr 0x1f90b6be710 <line:64:16, col:30> 'double'
|   |   |   |       `-BinaryOperator 0x1f90b6be6f0 <line:63:16, line:60:37> 'double' '*'
|   |   |   |         |-ParenExpr 0x1f90b6be5a0 <line:63:16, col:30> 'double'
|   |   |   |         | `-BinaryOperator 0x1f90b6be580 <line:60:17, col:37> 'double' '*'
|   |   |   |         |   |-ParenExpr 0x1f90b6be430 <col:17, col:37> 'double'
|   |   |   |         |   | `-CStyleCastExpr 0x1f90b6be408 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |   |         |   |   `-ParenExpr 0x1f90b6be3e8 <col:26, col:36> 'unsigned long long'
|   |   |   |         |   |     `-BinaryOperator 0x1f90b6be390 <col:27, col:35> 'unsigned long long' '<<'
|   |   |   |         |   |       |-IntegerLiteral 0x1f90b6be320 <col:27> 'unsigned long long' 1
|   |   |   |         |   |       `-ParenExpr 0x1f90b6be370 <col:33, col:35> 'int'
|   |   |   |         |   |         `-IntegerLiteral 0x1f90b6be348 <line:62:20> 'int' 32
|   |   |   |         |   `-ParenExpr 0x1f90b6be560 <line:60:17, col:37> 'double'
|   |   |   |         |     `-CStyleCastExpr 0x1f90b6be538 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |   |         |       `-ParenExpr 0x1f90b6be518 <col:26, col:36> 'unsigned long long'
|   |   |   |         |         `-BinaryOperator 0x1f90b6be4c0 <col:27, col:35> 'unsigned long long' '<<'
|   |   |   |         |           |-IntegerLiteral 0x1f90b6be450 <col:27> 'unsigned long long' 1
|   |   |   |         |           `-ParenExpr 0x1f90b6be4a0 <col:33, col:35> 'int'
|   |   |   |         |             `-IntegerLiteral 0x1f90b6be478 <line:63:27> 'int' 32
|   |   |   |         `-ParenExpr 0x1f90b6be6d0 <line:60:17, col:37> 'double'
|   |   |   |           `-CStyleCastExpr 0x1f90b6be6a8 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |   |             `-ParenExpr 0x1f90b6be688 <col:26, col:36> 'unsigned long long'
|   |   |   |               `-BinaryOperator 0x1f90b6be630 <col:27, col:35> 'unsigned long long' '<<'
|   |   |   |                 |-IntegerLiteral 0x1f90b6be5c0 <col:27> 'unsigned long long' 1
|   |   |   |                 `-ParenExpr 0x1f90b6be610 <col:33, col:35> 'int'
|   |   |   |                   `-IntegerLiteral 0x1f90b6be5e8 <line:64:27> 'int' 32
|   |   |   `-BinaryOperator 0x1f90b6c4168 <line:60:17, line:64:30> 'double' '/'
|   |   |     |-BinaryOperator 0x1f90b6becc8 <line:60:17, line:63:30> 'double' '*'
|   |   |     | |-BinaryOperator 0x1f90b6bea08 <line:60:17, col:37> 'double' '*'
|   |   |     | | |-ParenExpr 0x1f90b6be8b8 <col:17, col:37> 'double'
|   |   |     | | | `-CStyleCastExpr 0x1f90b6be890 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |     | | |   `-ParenExpr 0x1f90b6be870 <col:26, col:36> 'unsigned long long'
|   |   |     | | |     `-BinaryOperator 0x1f90b6be818 <col:27, col:35> 'unsigned long long' '<<'
|   |   |     | | |       |-IntegerLiteral 0x1f90b6be7a8 <col:27> 'unsigned long long' 1
|   |   |     | | |       `-ParenExpr 0x1f90b6be7f8 <col:33, col:35> 'int'
|   |   |     | | |         `-IntegerLiteral 0x1f90b6be7d0 <line:195:36> 'int' 52
|   |   |     | | `-ParenExpr 0x1f90b6be9e8 <line:60:17, col:37> 'double'
|   |   |     | |   `-CStyleCastExpr 0x1f90b6be9c0 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |     | |     `-ParenExpr 0x1f90b6be9a0 <col:26, col:36> 'unsigned long long'
|   |   |     | |       `-BinaryOperator 0x1f90b6be948 <col:27, col:35> 'unsigned long long' '<<'
|   |   |     | |         |-IntegerLiteral 0x1f90b6be8d8 <col:27> 'unsigned long long' 1
|   |   |     | |         `-ParenExpr 0x1f90b6be928 <col:33, col:35> 'int'
|   |   |     | |           `-IntegerLiteral 0x1f90b6be900 <line:195:44> 'int' 16
|   |   |     | `-ParenExpr 0x1f90b6beca8 <line:63:16, col:30> 'double'
|   |   |     |   `-BinaryOperator 0x1f90b6bec88 <line:60:17, col:37> 'double' '*'
|   |   |     |     |-ParenExpr 0x1f90b6beb38 <col:17, col:37> 'double'
|   |   |     |     | `-CStyleCastExpr 0x1f90b6beb10 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |     |     |   `-ParenExpr 0x1f90b6beaf0 <col:26, col:36> 'unsigned long long'
|   |   |     |     |     `-BinaryOperator 0x1f90b6bea98 <col:27, col:35> 'unsigned long long' '<<'
|   |   |     |     |       |-IntegerLiteral 0x1f90b6bea28 <col:27> 'unsigned long long' 1
|   |   |     |     |       `-ParenExpr 0x1f90b6bea78 <col:33, col:35> 'int'
|   |   |     |     |         `-IntegerLiteral 0x1f90b6bea50 <line:62:20> 'int' 32
|   |   |     |     `-ParenExpr 0x1f90b6bec68 <line:60:17, col:37> 'double'
|   |   |     |       `-CStyleCastExpr 0x1f90b6bec40 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |     |         `-ParenExpr 0x1f90b6bec20 <col:26, col:36> 'unsigned long long'
|   |   |     |           `-BinaryOperator 0x1f90b6bebc8 <col:27, col:35> 'unsigned long long' '<<'
|   |   |     |             |-IntegerLiteral 0x1f90b6beb58 <col:27> 'unsigned long long' 1
|   |   |     |             `-ParenExpr 0x1f90b6beba8 <col:33, col:35> 'int'
|   |   |     |               `-IntegerLiteral 0x1f90b6beb80 <line:63:27> 'int' 32
|   |   |     `-ParenExpr 0x1f90b6c4148 <line:64:16, col:30> 'double'
|   |   |       `-BinaryOperator 0x1f90b6c4128 <line:63:16, line:60:37> 'double' '*'
|   |   |         |-ParenExpr 0x1f90b6c3fd8 <line:63:16, col:30> 'double'
|   |   |         | `-BinaryOperator 0x1f90b6c3fb8 <line:60:17, col:37> 'double' '*'
|   |   |         |   |-ParenExpr 0x1f90b6bedf8 <col:17, col:37> 'double'
|   |   |         |   | `-CStyleCastExpr 0x1f90b6bedd0 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |         |   |   `-ParenExpr 0x1f90b6bedb0 <col:26, col:36> 'unsigned long long'
|   |   |         |   |     `-BinaryOperator 0x1f90b6bed58 <col:27, col:35> 'unsigned long long' '<<'
|   |   |         |   |       |-IntegerLiteral 0x1f90b6bece8 <col:27> 'unsigned long long' 1
|   |   |         |   |       `-ParenExpr 0x1f90b6bed38 <col:33, col:35> 'int'
|   |   |         |   |         `-IntegerLiteral 0x1f90b6bed10 <line:62:20> 'int' 32
|   |   |         |   `-ParenExpr 0x1f90b6c3f98 <line:60:17, col:37> 'double'
|   |   |         |     `-CStyleCastExpr 0x1f90b6c3f70 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |         |       `-ParenExpr 0x1f90b6beee0 <col:26, col:36> 'unsigned long long'
|   |   |         |         `-BinaryOperator 0x1f90b6bee88 <col:27, col:35> 'unsigned long long' '<<'
|   |   |         |           |-IntegerLiteral 0x1f90b6bee18 <col:27> 'unsigned long long' 1
|   |   |         |           `-ParenExpr 0x1f90b6bee68 <col:33, col:35> 'int'
|   |   |         |             `-IntegerLiteral 0x1f90b6bee40 <line:63:27> 'int' 32
|   |   |         `-ParenExpr 0x1f90b6c4108 <line:60:17, col:37> 'double'
|   |   |           `-CStyleCastExpr 0x1f90b6c40e0 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |             `-ParenExpr 0x1f90b6c40c0 <col:26, col:36> 'unsigned long long'
|   |   |               `-BinaryOperator 0x1f90b6c4068 <col:27, col:35> 'unsigned long long' '<<'
|   |   |                 |-IntegerLiteral 0x1f90b6c3ff8 <col:27> 'unsigned long long' 1
|   |   |                 `-ParenExpr 0x1f90b6c4048 <col:33, col:35> 'int'
|   |   |                   `-IntegerLiteral 0x1f90b6c4020 <line:64:27> 'int' 32
|   |   |-CompoundAssignOperator 0x1f90b6c4370 <line:196:9, col:28> 'double' '-=' ComputeLHSTy='double' ComputeResultTy='double'
|   |   | |-ArraySubscriptExpr 0x1f90b6c4270 <col:9, col:16> 'double' lvalue
|   |   | | |-ImplicitCastExpr 0x1f90b6c4258 <col:9, col:13> 'double *' <ArrayToPointerDecay>
|   |   | | | `-MemberExpr 0x1f90b6c4200 <col:9, col:13> 'double [6]' lvalue ->s 0x1f90b659de0
|   |   | | |   `-ImplicitCastExpr 0x1f90b6c41e8 <col:9> 'poly1305_internal *' <LValueToRValue>
|   |   | | |     `-DeclRefExpr 0x1f90b6c41c8 <col:9> 'poly1305_internal *' lvalue Var 0x1f90b65e4c0 'st' 'poly1305_internal *'
|   |   | | `-IntegerLiteral 0x1f90b6c4230 <col:15> 'int' 4
|   |   | `-ImplicitCastExpr 0x1f90b6c4358 <col:21, col:28> 'double' <LValueToRValue>
|   |   |   `-ArraySubscriptExpr 0x1f90b6c4338 <col:21, col:28> 'double' lvalue
|   |   |     |-ImplicitCastExpr 0x1f90b6c4320 <col:21, col:25> 'double *' <ArrayToPointerDecay>
|   |   |     | `-MemberExpr 0x1f90b6c42c8 <col:21, col:25> 'double [6]' lvalue ->s 0x1f90b659de0
|   |   |     |   `-ImplicitCastExpr 0x1f90b6c42b0 <col:21> 'poly1305_internal *' <LValueToRValue>
|   |   |     |     `-DeclRefExpr 0x1f90b6c4290 <col:21> 'poly1305_internal *' lvalue Var 0x1f90b65e4c0 'st' 'poly1305_internal *'
|   |   |     `-IntegerLiteral 0x1f90b6c42f8 <col:27> 'int' 5
|   |   `-GCCAsmStmt 0x1f90b6c4408 <line:202:9, col:52>
|   |     `-DeclRefExpr 0x1f90b6c43e8 <col:41> 'u32':'unsigned int' lvalue Var 0x1f90b65f2d0 'mxcsr_orig' 'u32':'unsigned int'
|   `-ReturnStmt 0x1f90b6c45b0 <line:212:5, col:12>
|     `-IntegerLiteral 0x1f90b6c4588 <col:12> 'int' 0
|-FunctionDecl 0x1f90b6c4948 <line:215:1, line:412:1> line:215:6 poly1305_blocks 'void (void *, const unsigned char *, size_t, int)'
| |-ParmVarDecl 0x1f90b6c4628 <col:22, col:28> col:28 used ctx 'void *'
| |-ParmVarDecl 0x1f90b6c46a8 <col:33, col:54> col:54 used inp 'const unsigned char *'
| |-ParmVarDecl 0x1f90b6c4720 <col:59, col:66> col:66 used len 'size_t':'unsigned long long'
| |-ParmVarDecl 0x1f90b6c47a0 <line:216:22, col:26> col:26 used padbit 'int'
| `-CompoundStmt 0x1f90b6dcd88 <line:217:1, line:412:1>
|   |-DeclStmt 0x1f90b6c4b08 <line:218:5, col:53>
|   | `-VarDecl 0x1f90b6c4a30 <col:5, col:50> col:24 used st 'poly1305_internal *' cinit
|   |   `-CStyleCastExpr 0x1f90b6c4ae0 <col:29, col:50> 'poly1305_internal *' <BitCast>
|   |     `-ImplicitCastExpr 0x1f90b6c4ac8 <col:50> 'void *' <LValueToRValue> part_of_explicit_cast
|   |       `-DeclRefExpr 0x1f90b6c4a98 <col:50> 'void *' lvalue ParmVar 0x1f90b6c4628 'ctx' 'void *'
|   |-DeclStmt 0x1f90b6c4d28 <line:219:5, col:30>
|   | |-VarDecl 0x1f90b6c4b30 <col:5, col:12> col:12 used in0 'elem64':'elem64'
|   | |-VarDecl 0x1f90b6c4ba8 <col:5, col:17> col:17 used in1 'elem64':'elem64'
|   | |-VarDecl 0x1f90b6c4c20 <col:5, col:22> col:22 used in2 'elem64':'elem64'
|   | `-VarDecl 0x1f90b6c4c98 <col:5, col:27> col:27 used in3 'elem64':'elem64'
|   |-DeclStmt 0x1f90b6c4e70 <line:220:5, col:30>
|   | `-VarDecl 0x1f90b6c4d50 <col:5, col:28> col:9 used pad 'u64':'unsigned long long' cinit
|   |   `-BinaryOperator 0x1f90b6c4e50 <col:15, col:28> 'u64':'unsigned long long' '<<'
|   |     |-CStyleCastExpr 0x1f90b6c4e00 <col:15, col:20> 'u64':'unsigned long long' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x1f90b6c4de8 <col:20> 'int' <LValueToRValue> part_of_explicit_cast
|   |     |   `-DeclRefExpr 0x1f90b6c4db8 <col:20> 'int' lvalue ParmVar 0x1f90b6c47a0 'padbit' 'int'
|   |     `-IntegerLiteral 0x1f90b6c4e28 <col:28> 'int' 32
|   |-DeclStmt 0x1f90b6c5110 <line:222:5, col:26>
|   | |-VarDecl 0x1f90b6c4ea0 <col:5, col:12> col:12 used x0 'double'
|   | |-VarDecl 0x1f90b6c4f80 <col:5, col:16> col:16 used x1 'double'
|   | |-VarDecl 0x1f90b6c5000 <col:5, col:20> col:20 used x2 'double'
|   | `-VarDecl 0x1f90b6c5080 <col:5, col:24> col:24 used x3 'double'
|   |-DeclStmt 0x1f90b6c5570 <line:223:5, col:58>
|   | |-VarDecl 0x1f90b6c5140 <col:5, col:12> col:12 used h0lo 'double'
|   | |-VarDecl 0x1f90b6c51c0 <col:5, col:18> col:18 used h0hi 'double'
|   | |-VarDecl 0x1f90b6c5240 <col:5, col:24> col:24 used h1lo 'double'
|   | |-VarDecl 0x1f90b6c52c0 <col:5, col:30> col:30 used h1hi 'double'
|   | |-VarDecl 0x1f90b6c5340 <col:5, col:36> col:36 used h2lo 'double'
|   | |-VarDecl 0x1f90b6c53c0 <col:5, col:42> col:42 used h2hi 'double'
|   | |-VarDecl 0x1f90b6c5440 <col:5, col:48> col:48 used h3lo 'double'
|   | `-VarDecl 0x1f90b6c54c0 <col:5, col:54> col:54 used h3hi 'double'
|   |-DeclStmt 0x1f90b6c59d0 <line:224:5, col:58>
|   | |-VarDecl 0x1f90b6c55a0 <col:5, col:12> col:12 used c0lo 'double'
|   | |-VarDecl 0x1f90b6c5620 <col:5, col:18> col:18 used c0hi 'double'
|   | |-VarDecl 0x1f90b6c56a0 <col:5, col:24> col:24 used c1lo 'double'
|   | |-VarDecl 0x1f90b6c5720 <col:5, col:30> col:30 used c1hi 'double'
|   | |-VarDecl 0x1f90b6c57a0 <col:5, col:36> col:36 used c2lo 'double'
|   | |-VarDecl 0x1f90b6c5820 <col:5, col:42> col:42 used c2hi 'double'
|   | |-VarDecl 0x1f90b6c58a0 <col:5, col:48> col:48 used c3lo 'double'
|   | `-VarDecl 0x1f90b6c5920 <col:5, col:54> col:54 used c3hi 'double'
|   |-DeclStmt 0x1f90b6c5b60 <line:226:5, col:33>
|   | `-VarDecl 0x1f90b6c5a00 <col:5, col:32> col:18 used r0lo 'const double' cinit
|   |   `-ImplicitCastExpr 0x1f90b6c5b48 <col:25, col:32> 'double' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x1f90b6c5b28 <col:25, col:32> 'double' lvalue
|   |       |-ImplicitCastExpr 0x1f90b6c5b10 <col:25, col:29> 'double *' <ArrayToPointerDecay>
|   |       | `-MemberExpr 0x1f90b6c5ab8 <col:25, col:29> 'double [8]' lvalue ->r 0x1f90b659ce0
|   |       |   `-ImplicitCastExpr 0x1f90b6c5aa0 <col:25> 'poly1305_internal *' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x1f90b6c5a68 <col:25> 'poly1305_internal *' lvalue Var 0x1f90b6c4a30 'st' 'poly1305_internal *'
|   |       `-IntegerLiteral 0x1f90b6c5ae8 <col:31> 'int' 0
|   |-DeclStmt 0x1f90b6c5cd8 <line:227:5, col:33>
|   | `-VarDecl 0x1f90b6c5b90 <col:5, col:32> col:18 used r0hi 'const double' cinit
|   |   `-ImplicitCastExpr 0x1f90b6c5cc0 <col:25, col:32> 'double' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x1f90b6c5ca0 <col:25, col:32> 'double' lvalue
|   |       |-ImplicitCastExpr 0x1f90b6c5c88 <col:25, col:29> 'double *' <ArrayToPointerDecay>
|   |       | `-MemberExpr 0x1f90b6c5c30 <col:25, col:29> 'double [8]' lvalue ->r 0x1f90b659ce0
|   |       |   `-ImplicitCastExpr 0x1f90b6c5c18 <col:25> 'poly1305_internal *' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x1f90b6c5bf8 <col:25> 'poly1305_internal *' lvalue Var 0x1f90b6c4a30 'st' 'poly1305_internal *'
|   |       `-IntegerLiteral 0x1f90b6c5c60 <col:31> 'int' 1
|   |-DeclStmt 0x1f90b6c5e50 <line:228:5, col:33>
|   | `-VarDecl 0x1f90b6c5d08 <col:5, col:32> col:18 used r1lo 'const double' cinit
|   |   `-ImplicitCastExpr 0x1f90b6c5e38 <col:25, col:32> 'double' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x1f90b6c5e18 <col:25, col:32> 'double' lvalue
|   |       |-ImplicitCastExpr 0x1f90b6c5e00 <col:25, col:29> 'double *' <ArrayToPointerDecay>
|   |       | `-MemberExpr 0x1f90b6c5da8 <col:25, col:29> 'double [8]' lvalue ->r 0x1f90b659ce0
|   |       |   `-ImplicitCastExpr 0x1f90b6c5d90 <col:25> 'poly1305_internal *' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x1f90b6c5d70 <col:25> 'poly1305_internal *' lvalue Var 0x1f90b6c4a30 'st' 'poly1305_internal *'
|   |       `-IntegerLiteral 0x1f90b6c5dd8 <col:31> 'int' 2
|   |-DeclStmt 0x1f90b6c0f90 <line:229:5, col:33>
|   | `-VarDecl 0x1f90b6c5e80 <col:5, col:32> col:18 used r1hi 'const double' cinit
|   |   `-ImplicitCastExpr 0x1f90b6c0f78 <col:25, col:32> 'double' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x1f90b6c0f58 <col:25, col:32> 'double' lvalue
|   |       |-ImplicitCastExpr 0x1f90b6c0f40 <col:25, col:29> 'double *' <ArrayToPointerDecay>
|   |       | `-MemberExpr 0x1f90b6c5f20 <col:25, col:29> 'double [8]' lvalue ->r 0x1f90b659ce0
|   |       |   `-ImplicitCastExpr 0x1f90b6c5f08 <col:25> 'poly1305_internal *' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x1f90b6c5ee8 <col:25> 'poly1305_internal *' lvalue Var 0x1f90b6c4a30 'st' 'poly1305_internal *'
|   |       `-IntegerLiteral 0x1f90b6c5f50 <col:31> 'int' 3
|   |-DeclStmt 0x1f90b6c1108 <line:230:5, col:33>
|   | `-VarDecl 0x1f90b6c0fc0 <col:5, col:32> col:18 used r2lo 'const double' cinit
|   |   `-ImplicitCastExpr 0x1f90b6c10f0 <col:25, col:32> 'double' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x1f90b6c10d0 <col:25, col:32> 'double' lvalue
|   |       |-ImplicitCastExpr 0x1f90b6c10b8 <col:25, col:29> 'double *' <ArrayToPointerDecay>
|   |       | `-MemberExpr 0x1f90b6c1060 <col:25, col:29> 'double [8]' lvalue ->r 0x1f90b659ce0
|   |       |   `-ImplicitCastExpr 0x1f90b6c1048 <col:25> 'poly1305_internal *' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x1f90b6c1028 <col:25> 'poly1305_internal *' lvalue Var 0x1f90b6c4a30 'st' 'poly1305_internal *'
|   |       `-IntegerLiteral 0x1f90b6c1090 <col:31> 'int' 4
|   |-DeclStmt 0x1f90b6c1280 <line:231:5, col:33>
|   | `-VarDecl 0x1f90b6c1138 <col:5, col:32> col:18 used r2hi 'const double' cinit
|   |   `-ImplicitCastExpr 0x1f90b6c1268 <col:25, col:32> 'double' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x1f90b6c1248 <col:25, col:32> 'double' lvalue
|   |       |-ImplicitCastExpr 0x1f90b6c1230 <col:25, col:29> 'double *' <ArrayToPointerDecay>
|   |       | `-MemberExpr 0x1f90b6c11d8 <col:25, col:29> 'double [8]' lvalue ->r 0x1f90b659ce0
|   |       |   `-ImplicitCastExpr 0x1f90b6c11c0 <col:25> 'poly1305_internal *' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x1f90b6c11a0 <col:25> 'poly1305_internal *' lvalue Var 0x1f90b6c4a30 'st' 'poly1305_internal *'
|   |       `-IntegerLiteral 0x1f90b6c1208 <col:31> 'int' 5
|   |-DeclStmt 0x1f90b6c13f8 <line:232:5, col:33>
|   | `-VarDecl 0x1f90b6c12b0 <col:5, col:32> col:18 used r3lo 'const double' cinit
|   |   `-ImplicitCastExpr 0x1f90b6c13e0 <col:25, col:32> 'double' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x1f90b6c13c0 <col:25, col:32> 'double' lvalue
|   |       |-ImplicitCastExpr 0x1f90b6c13a8 <col:25, col:29> 'double *' <ArrayToPointerDecay>
|   |       | `-MemberExpr 0x1f90b6c1350 <col:25, col:29> 'double [8]' lvalue ->r 0x1f90b659ce0
|   |       |   `-ImplicitCastExpr 0x1f90b6c1338 <col:25> 'poly1305_internal *' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x1f90b6c1318 <col:25> 'poly1305_internal *' lvalue Var 0x1f90b6c4a30 'st' 'poly1305_internal *'
|   |       `-IntegerLiteral 0x1f90b6c1380 <col:31> 'int' 6
|   |-DeclStmt 0x1f90b6c1570 <line:233:5, col:33>
|   | `-VarDecl 0x1f90b6c1428 <col:5, col:32> col:18 used r3hi 'const double' cinit
|   |   `-ImplicitCastExpr 0x1f90b6c1558 <col:25, col:32> 'double' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x1f90b6c1538 <col:25, col:32> 'double' lvalue
|   |       |-ImplicitCastExpr 0x1f90b6c1520 <col:25, col:29> 'double *' <ArrayToPointerDecay>
|   |       | `-MemberExpr 0x1f90b6c14c8 <col:25, col:29> 'double [8]' lvalue ->r 0x1f90b659ce0
|   |       |   `-ImplicitCastExpr 0x1f90b6c14b0 <col:25> 'poly1305_internal *' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x1f90b6c1490 <col:25> 'poly1305_internal *' lvalue Var 0x1f90b6c4a30 'st' 'poly1305_internal *'
|   |       `-IntegerLiteral 0x1f90b6c14f8 <col:31> 'int' 7
|   |-DeclStmt 0x1f90b6c16e8 <line:235:5, col:33>
|   | `-VarDecl 0x1f90b6c15a0 <col:5, col:32> col:18 used s1lo 'const double' cinit
|   |   `-ImplicitCastExpr 0x1f90b6c16d0 <col:25, col:32> 'double' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x1f90b6c16b0 <col:25, col:32> 'double' lvalue
|   |       |-ImplicitCastExpr 0x1f90b6c1698 <col:25, col:29> 'double *' <ArrayToPointerDecay>
|   |       | `-MemberExpr 0x1f90b6c1640 <col:25, col:29> 'double [6]' lvalue ->s 0x1f90b659de0
|   |       |   `-ImplicitCastExpr 0x1f90b6c1628 <col:25> 'poly1305_internal *' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x1f90b6c1608 <col:25> 'poly1305_internal *' lvalue Var 0x1f90b6c4a30 'st' 'poly1305_internal *'
|   |       `-IntegerLiteral 0x1f90b6c1670 <col:31> 'int' 0
|   |-DeclStmt 0x1f90b6c1860 <line:236:5, col:33>
|   | `-VarDecl 0x1f90b6c1718 <col:5, col:32> col:18 used s1hi 'const double' cinit
|   |   `-ImplicitCastExpr 0x1f90b6c1848 <col:25, col:32> 'double' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x1f90b6c1828 <col:25, col:32> 'double' lvalue
|   |       |-ImplicitCastExpr 0x1f90b6c1810 <col:25, col:29> 'double *' <ArrayToPointerDecay>
|   |       | `-MemberExpr 0x1f90b6c17b8 <col:25, col:29> 'double [6]' lvalue ->s 0x1f90b659de0
|   |       |   `-ImplicitCastExpr 0x1f90b6c17a0 <col:25> 'poly1305_internal *' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x1f90b6c1780 <col:25> 'poly1305_internal *' lvalue Var 0x1f90b6c4a30 'st' 'poly1305_internal *'
|   |       `-IntegerLiteral 0x1f90b6c17e8 <col:31> 'int' 1
|   |-DeclStmt 0x1f90b6c19d8 <line:237:5, col:33>
|   | `-VarDecl 0x1f90b6c1890 <col:5, col:32> col:18 used s2lo 'const double' cinit
|   |   `-ImplicitCastExpr 0x1f90b6c19c0 <col:25, col:32> 'double' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x1f90b6c19a0 <col:25, col:32> 'double' lvalue
|   |       |-ImplicitCastExpr 0x1f90b6c1988 <col:25, col:29> 'double *' <ArrayToPointerDecay>
|   |       | `-MemberExpr 0x1f90b6c1930 <col:25, col:29> 'double [6]' lvalue ->s 0x1f90b659de0
|   |       |   `-ImplicitCastExpr 0x1f90b6c1918 <col:25> 'poly1305_internal *' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x1f90b6c18f8 <col:25> 'poly1305_internal *' lvalue Var 0x1f90b6c4a30 'st' 'poly1305_internal *'
|   |       `-IntegerLiteral 0x1f90b6c1960 <col:31> 'int' 2
|   |-DeclStmt 0x1f90b6c1b50 <line:238:5, col:33>
|   | `-VarDecl 0x1f90b6c1a08 <col:5, col:32> col:18 used s2hi 'const double' cinit
|   |   `-ImplicitCastExpr 0x1f90b6c1b38 <col:25, col:32> 'double' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x1f90b6c1b18 <col:25, col:32> 'double' lvalue
|   |       |-ImplicitCastExpr 0x1f90b6c1b00 <col:25, col:29> 'double *' <ArrayToPointerDecay>
|   |       | `-MemberExpr 0x1f90b6c1aa8 <col:25, col:29> 'double [6]' lvalue ->s 0x1f90b659de0
|   |       |   `-ImplicitCastExpr 0x1f90b6c1a90 <col:25> 'poly1305_internal *' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x1f90b6c1a70 <col:25> 'poly1305_internal *' lvalue Var 0x1f90b6c4a30 'st' 'poly1305_internal *'
|   |       `-IntegerLiteral 0x1f90b6c1ad8 <col:31> 'int' 3
|   |-DeclStmt 0x1f90b6c1cc8 <line:239:5, col:33>
|   | `-VarDecl 0x1f90b6c1b80 <col:5, col:32> col:18 used s3lo 'const double' cinit
|   |   `-ImplicitCastExpr 0x1f90b6c1cb0 <col:25, col:32> 'double' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x1f90b6c1c90 <col:25, col:32> 'double' lvalue
|   |       |-ImplicitCastExpr 0x1f90b6c1c78 <col:25, col:29> 'double *' <ArrayToPointerDecay>
|   |       | `-MemberExpr 0x1f90b6c1c20 <col:25, col:29> 'double [6]' lvalue ->s 0x1f90b659de0
|   |       |   `-ImplicitCastExpr 0x1f90b6c1c08 <col:25> 'poly1305_internal *' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x1f90b6c1be8 <col:25> 'poly1305_internal *' lvalue Var 0x1f90b6c4a30 'st' 'poly1305_internal *'
|   |       `-IntegerLiteral 0x1f90b6c1c50 <col:31> 'int' 4
|   |-DeclStmt 0x1f90b6c1e40 <line:240:5, col:33>
|   | `-VarDecl 0x1f90b6c1cf8 <col:5, col:32> col:18 used s3hi 'const double' cinit
|   |   `-ImplicitCastExpr 0x1f90b6c1e28 <col:25, col:32> 'double' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x1f90b6c1e08 <col:25, col:32> 'double' lvalue
|   |       |-ImplicitCastExpr 0x1f90b6c1df0 <col:25, col:29> 'double *' <ArrayToPointerDecay>
|   |       | `-MemberExpr 0x1f90b6c1d98 <col:25, col:29> 'double [6]' lvalue ->s 0x1f90b659de0
|   |       |   `-ImplicitCastExpr 0x1f90b6c1d80 <col:25> 'poly1305_internal *' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x1f90b6c1d60 <col:25> 'poly1305_internal *' lvalue Var 0x1f90b6c4a30 'st' 'poly1305_internal *'
|   |       `-IntegerLiteral 0x1f90b6c1dc8 <col:31> 'int' 5
|   |-DeclStmt 0x1f90b6c1ed0 <line:246:5, col:19>
|   | `-VarDecl 0x1f90b6c1e68 <col:5, col:9> col:9 used mxcsr_orig 'u32':'unsigned int'
|   |-GCCAsmStmt 0x1f90b6c5fc8 <line:248:5, col:48>
|   | `-DeclRefExpr 0x1f90b6c5f90 <col:37> 'u32':'unsigned int' lvalue Var 0x1f90b6c1e68 'mxcsr_orig' 'u32':'unsigned int'
|   |-GCCAsmStmt 0x1f90b6c60a0 <line:249:5, col:43>
|   | `-DeclRefExpr 0x1f90b6c6080 <col:37> 'const u32':'const unsigned int' lvalue Var 0x1f90b659f40 'mxcsr' 'const u32':'const unsigned int'
|   |-BinaryOperator 0x1f90b6c64f8 <line:270:5, line:60:37> 'double' '='
|   | |-DeclRefExpr 0x1f90b6c6110 <line:270:5> 'double' lvalue Var 0x1f90b6c5140 'h0lo' 'double'
|   | `-BinaryOperator 0x1f90b6c64d8 <col:12, line:60:37> 'double' '-'
|   |   |-ImplicitCastExpr 0x1f90b6c64c0 <line:270:12, col:21> 'double' <LValueToRValue>
|   |   | `-MemberExpr 0x1f90b6c6210 <col:12, col:21> 'double' lvalue .d 0x1f90b659828
|   |   |   `-ArraySubscriptExpr 0x1f90b6c61f0 <col:12, col:19> 'elem64':'elem64' lvalue
|   |   |     |-ImplicitCastExpr 0x1f90b6c61d8 <col:12, col:16> 'elem64 *' <ArrayToPointerDecay>
|   |   |     | `-MemberExpr 0x1f90b6c6180 <col:12, col:16> 'elem64 [4]' lvalue ->h 0x1f90b659be8
|   |   |     |   `-ImplicitCastExpr 0x1f90b6c6168 <col:12> 'poly1305_internal *' <LValueToRValue>
|   |   |     |     `-DeclRefExpr 0x1f90b6c6148 <col:12> 'poly1305_internal *' lvalue Var 0x1f90b6c4a30 'st' 'poly1305_internal *'
|   |   |     `-IntegerLiteral 0x1f90b6c61b0 <col:18> 'int' 0
|   |   `-BinaryOperator 0x1f90b6c64a0 <line:60:17, col:37> 'double' '*'
|   |     |-ParenExpr 0x1f90b6c6350 <col:17, col:37> 'double'
|   |     | `-CStyleCastExpr 0x1f90b6c6328 <col:18, col:36> 'double' <IntegralToFloating>
|   |     |   `-ParenExpr 0x1f90b6c6308 <col:26, col:36> 'unsigned long long'
|   |     |     `-BinaryOperator 0x1f90b6c62b0 <col:27, col:35> 'unsigned long long' '<<'
|   |     |       |-IntegerLiteral 0x1f90b6c6240 <col:27> 'unsigned long long' 1
|   |     |       `-ParenExpr 0x1f90b6c6290 <col:33, col:35> 'int'
|   |     |         `-IntegerLiteral 0x1f90b6c6268 <line:270:29> 'int' 52
|   |     `-ParenExpr 0x1f90b6c6480 <line:60:17, col:37> 'double'
|   |       `-CStyleCastExpr 0x1f90b6c6458 <col:18, col:36> 'double' <IntegralToFloating>
|   |         `-ParenExpr 0x1f90b6c6438 <col:26, col:36> 'unsigned long long'
|   |           `-BinaryOperator 0x1f90b6c63e0 <col:27, col:35> 'unsigned long long' '<<'
|   |             |-IntegerLiteral 0x1f90b6c6370 <col:27> 'unsigned long long' 1
|   |             `-ParenExpr 0x1f90b6c63c0 <col:33, col:35> 'int'
|   |               `-IntegerLiteral 0x1f90b6c6398 <line:61:19> 'int' 0
|   |-BinaryOperator 0x1f90b6c6900 <line:271:5, line:60:37> 'double' '='
|   | |-DeclRefExpr 0x1f90b6c6518 <line:271:5> 'double' lvalue Var 0x1f90b6c5240 'h1lo' 'double'
|   | `-BinaryOperator 0x1f90b6c68e0 <col:12, line:60:37> 'double' '-'
|   |   |-ImplicitCastExpr 0x1f90b6c68c8 <line:271:12, col:21> 'double' <LValueToRValue>
|   |   | `-MemberExpr 0x1f90b6c6618 <col:12, col:21> 'double' lvalue .d 0x1f90b659828
|   |   |   `-ArraySubscriptExpr 0x1f90b6c65f8 <col:12, col:19> 'elem64':'elem64' lvalue
|   |   |     |-ImplicitCastExpr 0x1f90b6c65e0 <col:12, col:16> 'elem64 *' <ArrayToPointerDecay>
|   |   |     | `-MemberExpr 0x1f90b6c6588 <col:12, col:16> 'elem64 [4]' lvalue ->h 0x1f90b659be8
|   |   |     |   `-ImplicitCastExpr 0x1f90b6c6570 <col:12> 'poly1305_internal *' <LValueToRValue>
|   |   |     |     `-DeclRefExpr 0x1f90b6c6550 <col:12> 'poly1305_internal *' lvalue Var 0x1f90b6c4a30 'st' 'poly1305_internal *'
|   |   |     `-IntegerLiteral 0x1f90b6c65b8 <col:18> 'int' 1
|   |   `-BinaryOperator 0x1f90b6c68a8 <line:60:17, col:37> 'double' '*'
|   |     |-ParenExpr 0x1f90b6c6758 <col:17, col:37> 'double'
|   |     | `-CStyleCastExpr 0x1f90b6c6730 <col:18, col:36> 'double' <IntegralToFloating>
|   |     |   `-ParenExpr 0x1f90b6c6710 <col:26, col:36> 'unsigned long long'
|   |     |     `-BinaryOperator 0x1f90b6c66b8 <col:27, col:35> 'unsigned long long' '<<'
|   |     |       |-IntegerLiteral 0x1f90b6c6648 <col:27> 'unsigned long long' 1
|   |     |       `-ParenExpr 0x1f90b6c6698 <col:33, col:35> 'int'
|   |     |         `-IntegerLiteral 0x1f90b6c6670 <line:271:29> 'int' 52
|   |     `-ParenExpr 0x1f90b6c6888 <line:60:17, col:37> 'double'
|   |       `-CStyleCastExpr 0x1f90b6c6860 <col:18, col:36> 'double' <IntegralToFloating>
|   |         `-ParenExpr 0x1f90b6c6840 <col:26, col:36> 'unsigned long long'
|   |           `-BinaryOperator 0x1f90b6c67e8 <col:27, col:35> 'unsigned long long' '<<'
|   |             |-IntegerLiteral 0x1f90b6c6778 <col:27> 'unsigned long long' 1
|   |             `-ParenExpr 0x1f90b6c67c8 <col:33, col:35> 'int'
|   |               `-IntegerLiteral 0x1f90b6c67a0 <line:62:20> 'int' 32
|   |-BinaryOperator 0x1f90b6c6e78 <line:272:5, line:63:30> 'double' '='
|   | |-DeclRefExpr 0x1f90b6c6920 <line:272:5> 'double' lvalue Var 0x1f90b6c5340 'h2lo' 'double'
|   | `-BinaryOperator 0x1f90b6c6e58 <col:12, line:63:30> 'double' '-'
|   |   |-ImplicitCastExpr 0x1f90b6c6e40 <line:272:12, col:21> 'double' <LValueToRValue>
|   |   | `-MemberExpr 0x1f90b6c6a20 <col:12, col:21> 'double' lvalue .d 0x1f90b659828
|   |   |   `-ArraySubscriptExpr 0x1f90b6c6a00 <col:12, col:19> 'elem64':'elem64' lvalue
|   |   |     |-ImplicitCastExpr 0x1f90b6c69e8 <col:12, col:16> 'elem64 *' <ArrayToPointerDecay>
|   |   |     | `-MemberExpr 0x1f90b6c6990 <col:12, col:16> 'elem64 [4]' lvalue ->h 0x1f90b659be8
|   |   |     |   `-ImplicitCastExpr 0x1f90b6c6978 <col:12> 'poly1305_internal *' <LValueToRValue>
|   |   |     |     `-DeclRefExpr 0x1f90b6c6958 <col:12> 'poly1305_internal *' lvalue Var 0x1f90b6c4a30 'st' 'poly1305_internal *'
|   |   |     `-IntegerLiteral 0x1f90b6c69c0 <col:18> 'int' 2
|   |   `-BinaryOperator 0x1f90b6c6e20 <line:60:17, line:63:30> 'double' '*'
|   |     |-ParenExpr 0x1f90b6c6b60 <line:60:17, col:37> 'double'
|   |     | `-CStyleCastExpr 0x1f90b6c6b38 <col:18, col:36> 'double' <IntegralToFloating>
|   |     |   `-ParenExpr 0x1f90b6c6b18 <col:26, col:36> 'unsigned long long'
|   |     |     `-BinaryOperator 0x1f90b6c6ac0 <col:27, col:35> 'unsigned long long' '<<'
|   |     |       |-IntegerLiteral 0x1f90b6c6a50 <col:27> 'unsigned long long' 1
|   |     |       `-ParenExpr 0x1f90b6c6aa0 <col:33, col:35> 'int'
|   |     |         `-IntegerLiteral 0x1f90b6c6a78 <line:272:29> 'int' 52
|   |     `-ParenExpr 0x1f90b6c6e00 <line:63:16, col:30> 'double'
|   |       `-BinaryOperator 0x1f90b6c6de0 <line:60:17, col:37> 'double' '*'
|   |         |-ParenExpr 0x1f90b6c6c90 <col:17, col:37> 'double'
|   |         | `-CStyleCastExpr 0x1f90b6c6c68 <col:18, col:36> 'double' <IntegralToFloating>
|   |         |   `-ParenExpr 0x1f90b6c6c48 <col:26, col:36> 'unsigned long long'
|   |         |     `-BinaryOperator 0x1f90b6c6bf0 <col:27, col:35> 'unsigned long long' '<<'
|   |         |       |-IntegerLiteral 0x1f90b6c6b80 <col:27> 'unsigned long long' 1
|   |         |       `-ParenExpr 0x1f90b6c6bd0 <col:33, col:35> 'int'
|   |         |         `-IntegerLiteral 0x1f90b6c6ba8 <line:62:20> 'int' 32
|   |         `-ParenExpr 0x1f90b6c6dc0 <line:60:17, col:37> 'double'
|   |           `-CStyleCastExpr 0x1f90b6c6d98 <col:18, col:36> 'double' <IntegralToFloating>
|   |             `-ParenExpr 0x1f90b6c6d78 <col:26, col:36> 'unsigned long long'
|   |               `-BinaryOperator 0x1f90b6c6d20 <col:27, col:35> 'unsigned long long' '<<'
|   |                 |-IntegerLiteral 0x1f90b6c6cb0 <col:27> 'unsigned long long' 1
|   |                 `-ParenExpr 0x1f90b6c6d00 <col:33, col:35> 'int'
|   |                   `-IntegerLiteral 0x1f90b6c6cd8 <line:63:27> 'int' 32
|   |-BinaryOperator 0x1f90b6bf508 <line:273:5, line:64:30> 'double' '='
|   | |-DeclRefExpr 0x1f90b6c6e98 <line:273:5> 'double' lvalue Var 0x1f90b6c5440 'h3lo' 'double'
|   | `-BinaryOperator 0x1f90b6bf4e8 <col:12, line:64:30> 'double' '-'
|   |   |-ImplicitCastExpr 0x1f90b6bf4d0 <line:273:12, col:21> 'double' <LValueToRValue>
|   |   | `-MemberExpr 0x1f90b6bef40 <col:12, col:21> 'double' lvalue .d 0x1f90b659828
|   |   |   `-ArraySubscriptExpr 0x1f90b6bef20 <col:12, col:19> 'elem64':'elem64' lvalue
|   |   |     |-ImplicitCastExpr 0x1f90b6c6f60 <col:12, col:16> 'elem64 *' <ArrayToPointerDecay>
|   |   |     | `-MemberExpr 0x1f90b6c6f08 <col:12, col:16> 'elem64 [4]' lvalue ->h 0x1f90b659be8
|   |   |     |   `-ImplicitCastExpr 0x1f90b6c6ef0 <col:12> 'poly1305_internal *' <LValueToRValue>
|   |   |     |     `-DeclRefExpr 0x1f90b6c6ed0 <col:12> 'poly1305_internal *' lvalue Var 0x1f90b6c4a30 'st' 'poly1305_internal *'
|   |   |     `-IntegerLiteral 0x1f90b6c6f38 <col:18> 'int' 3
|   |   `-BinaryOperator 0x1f90b6bf4b0 <line:60:17, line:64:30> 'double' '*'
|   |     |-ParenExpr 0x1f90b6bf080 <line:60:17, col:37> 'double'
|   |     | `-CStyleCastExpr 0x1f90b6bf058 <col:18, col:36> 'double' <IntegralToFloating>
|   |     |   `-ParenExpr 0x1f90b6bf038 <col:26, col:36> 'unsigned long long'
|   |     |     `-BinaryOperator 0x1f90b6befe0 <col:27, col:35> 'unsigned long long' '<<'
|   |     |       |-IntegerLiteral 0x1f90b6bef70 <col:27> 'unsigned long long' 1
|   |     |       `-ParenExpr 0x1f90b6befc0 <col:33, col:35> 'int'
|   |     |         `-IntegerLiteral 0x1f90b6bef98 <line:273:29> 'int' 52
|   |     `-ParenExpr 0x1f90b6bf490 <line:64:16, col:30> 'double'
|   |       `-BinaryOperator 0x1f90b6bf470 <line:63:16, line:60:37> 'double' '*'
|   |         |-ParenExpr 0x1f90b6bf320 <line:63:16, col:30> 'double'
|   |         | `-BinaryOperator 0x1f90b6bf300 <line:60:17, col:37> 'double' '*'
|   |         |   |-ParenExpr 0x1f90b6bf1b0 <col:17, col:37> 'double'
|   |         |   | `-CStyleCastExpr 0x1f90b6bf188 <col:18, col:36> 'double' <IntegralToFloating>
|   |         |   |   `-ParenExpr 0x1f90b6bf168 <col:26, col:36> 'unsigned long long'
|   |         |   |     `-BinaryOperator 0x1f90b6bf110 <col:27, col:35> 'unsigned long long' '<<'
|   |         |   |       |-IntegerLiteral 0x1f90b6bf0a0 <col:27> 'unsigned long long' 1
|   |         |   |       `-ParenExpr 0x1f90b6bf0f0 <col:33, col:35> 'int'
|   |         |   |         `-IntegerLiteral 0x1f90b6bf0c8 <line:62:20> 'int' 32
|   |         |   `-ParenExpr 0x1f90b6bf2e0 <line:60:17, col:37> 'double'
|   |         |     `-CStyleCastExpr 0x1f90b6bf2b8 <col:18, col:36> 'double' <IntegralToFloating>
|   |         |       `-ParenExpr 0x1f90b6bf298 <col:26, col:36> 'unsigned long long'
|   |         |         `-BinaryOperator 0x1f90b6bf240 <col:27, col:35> 'unsigned long long' '<<'
|   |         |           |-IntegerLiteral 0x1f90b6bf1d0 <col:27> 'unsigned long long' 1
|   |         |           `-ParenExpr 0x1f90b6bf220 <col:33, col:35> 'int'
|   |         |             `-IntegerLiteral 0x1f90b6bf1f8 <line:63:27> 'int' 32
|   |         `-ParenExpr 0x1f90b6bf450 <line:60:17, col:37> 'double'
|   |           `-CStyleCastExpr 0x1f90b6bf428 <col:18, col:36> 'double' <IntegralToFloating>
|   |             `-ParenExpr 0x1f90b6bf408 <col:26, col:36> 'unsigned long long'
|   |               `-BinaryOperator 0x1f90b6bf3b0 <col:27, col:35> 'unsigned long long' '<<'
|   |                 |-IntegerLiteral 0x1f90b6bf340 <col:27> 'unsigned long long' 1
|   |                 `-ParenExpr 0x1f90b6bf390 <col:33, col:35> 'int'
|   |                   `-IntegerLiteral 0x1f90b6bf368 <line:64:27> 'int' 32
|   |-BinaryOperator 0x1f90b6bf5a0 <line:276:5, col:12> 'double' '='
|   | |-DeclRefExpr 0x1f90b6bf528 <col:5> 'double' lvalue Var 0x1f90b6c51c0 'h0hi' 'double'
|   | `-ImplicitCastExpr 0x1f90b6bf588 <col:12> 'double' <IntegralToFloating>
|   |   `-IntegerLiteral 0x1f90b6bf560 <col:12> 'int' 0
|   |-BinaryOperator 0x1f90b6bf638 <line:277:5, col:12> 'double' '='
|   | |-DeclRefExpr 0x1f90b6bf5c0 <col:5> 'double' lvalue Var 0x1f90b6c52c0 'h1hi' 'double'
|   | `-ImplicitCastExpr 0x1f90b6bf620 <col:12> 'double' <IntegralToFloating>
|   |   `-IntegerLiteral 0x1f90b6bf5f8 <col:12> 'int' 0
|   |-BinaryOperator 0x1f90b6bf6d0 <line:278:5, col:12> 'double' '='
|   | |-DeclRefExpr 0x1f90b6bf658 <col:5> 'double' lvalue Var 0x1f90b6c53c0 'h2hi' 'double'
|   | `-ImplicitCastExpr 0x1f90b6bf6b8 <col:12> 'double' <IntegralToFloating>
|   |   `-IntegerLiteral 0x1f90b6bf690 <col:12> 'int' 0
|   |-BinaryOperator 0x1f90b6bf768 <line:279:5, col:12> 'double' '='
|   | |-DeclRefExpr 0x1f90b6bf6f0 <col:5> 'double' lvalue Var 0x1f90b6c54c0 'h3hi' 'double'
|   | `-ImplicitCastExpr 0x1f90b6bf750 <col:12> 'double' <IntegralToFloating>
|   |   `-IntegerLiteral 0x1f90b6bf728 <col:12> 'int' 0
|   |-DoStmt 0x1f90b6d1f68 <line:299:5, line:364:23>
|   | |-CompoundStmt 0x1f90b6d1d90 <line:299:8, line:364:5>
|   | | |-BinaryOperator 0x1f90b6bfb00 <line:300:9, line:70:39> 'u64':'unsigned long long' '='
|   | | | |-MemberExpr 0x1f90b6bf7c0 <line:300:9, col:13> 'u64':'unsigned long long' lvalue .u 0x1f90b6598b0
|   | | | | `-DeclRefExpr 0x1f90b6bf788 <col:9> 'elem64':'elem64' lvalue Var 0x1f90b6c4b30 'in0' 'elem64':'elem64'
|   | | | `-BinaryOperator 0x1f90b6bfae0 <line:67:17, line:70:39> 'unsigned long long' '|'
|   | | |   |-ParenExpr 0x1f90b6bf948 <line:67:17, col:35> 'unsigned long long'
|   | | |   | `-BinaryOperator 0x1f90b6bf928 <col:18, col:33> 'unsigned long long' '<<'
|   | | |   |   |-ParenExpr 0x1f90b6bf8e0 <col:18, col:30> 'unsigned long long'
|   | | |   |   | `-BinaryOperator 0x1f90b6bf8c0 <col:19, col:29> 'unsigned long long' '+'
|   | | |   |   |   |-IntegerLiteral 0x1f90b6bf7f0 <col:19> 'unsigned long long' 1023
|   | | |   |   |   `-ImplicitCastExpr 0x1f90b6bf8a8 <col:27, col:29> 'unsigned long long' <IntegralCast>
|   | | |   |   |     `-ParenExpr 0x1f90b6bf888 <col:27, col:29> 'int'
|   | | |   |   |       `-BinaryOperator 0x1f90b6bf868 <line:300:21, col:24> 'int' '+'
|   | | |   |   |         |-IntegerLiteral 0x1f90b6bf818 <col:21> 'int' 52
|   | | |   |   |         `-IntegerLiteral 0x1f90b6bf840 <col:24> 'int' 0
|   | | |   |   `-IntegerLiteral 0x1f90b6bf900 <line:67:33> 'int' 52
|   | | |   `-ImplicitCastExpr 0x1f90b6bfac8 <line:70:21, col:39> 'unsigned long long' <IntegralCast>
|   | | |     `-ImplicitCastExpr 0x1f90b6bfab0 <col:21, col:39> 'u32':'unsigned int' <LValueToRValue>
|   | | |       `-ParenExpr 0x1f90b6bfa90 <col:21, col:39> 'const u32':'const unsigned int' lvalue
|   | | |         `-UnaryOperator 0x1f90b6bfa78 <col:22, col:38> 'const u32':'const unsigned int' lvalue prefix '*' cannot overflow
|   | | |           `-CStyleCastExpr 0x1f90b6bfa50 <col:23, col:38> 'const u32 *' <BitCast>
|   | | |             `-ParenExpr 0x1f90b6bfa30 <col:36, col:38> 'const unsigned char *'
|   | | |               `-UnaryOperator 0x1f90b6bf9e8 <line:300:38, col:44> 'const unsigned char *' prefix '&' cannot overflow
|   | | |                 `-ArraySubscriptExpr 0x1f90b6bf9c8 <col:39, col:44> 'const unsigned char' lvalue
|   | | |                   |-ImplicitCastExpr 0x1f90b6bf9b0 <col:39> 'const unsigned char *' <LValueToRValue>
|   | | |                   | `-DeclRefExpr 0x1f90b6bf968 <col:39> 'const unsigned char *' lvalue ParmVar 0x1f90b6c46a8 'inp' 'const unsigned char *'
|   | | |                   `-IntegerLiteral 0x1f90b6bf988 <col:43> 'int' 0
|   | | |-BinaryOperator 0x1f90b6bfe98 <line:301:9, line:70:39> 'u64':'unsigned long long' '='
|   | | | |-MemberExpr 0x1f90b6bfb58 <line:301:9, col:13> 'u64':'unsigned long long' lvalue .u 0x1f90b6598b0
|   | | | | `-DeclRefExpr 0x1f90b6bfb20 <col:9> 'elem64':'elem64' lvalue Var 0x1f90b6c4ba8 'in1' 'elem64':'elem64'
|   | | | `-BinaryOperator 0x1f90b6bfe78 <line:67:17, line:70:39> 'unsigned long long' '|'
|   | | |   |-ParenExpr 0x1f90b6bfce0 <line:67:17, col:35> 'unsigned long long'
|   | | |   | `-BinaryOperator 0x1f90b6bfcc0 <col:18, col:33> 'unsigned long long' '<<'
|   | | |   |   |-ParenExpr 0x1f90b6bfc78 <col:18, col:30> 'unsigned long long'
|   | | |   |   | `-BinaryOperator 0x1f90b6bfc58 <col:19, col:29> 'unsigned long long' '+'
|   | | |   |   |   |-IntegerLiteral 0x1f90b6bfb88 <col:19> 'unsigned long long' 1023
|   | | |   |   |   `-ImplicitCastExpr 0x1f90b6bfc40 <col:27, col:29> 'unsigned long long' <IntegralCast>
|   | | |   |   |     `-ParenExpr 0x1f90b6bfc20 <col:27, col:29> 'int'
|   | | |   |   |       `-BinaryOperator 0x1f90b6bfc00 <line:301:21, col:24> 'int' '+'
|   | | |   |   |         |-IntegerLiteral 0x1f90b6bfbb0 <col:21> 'int' 52
|   | | |   |   |         `-IntegerLiteral 0x1f90b6bfbd8 <col:24> 'int' 32
|   | | |   |   `-IntegerLiteral 0x1f90b6bfc98 <line:67:33> 'int' 52
|   | | |   `-ImplicitCastExpr 0x1f90b6bfe60 <line:70:21, col:39> 'unsigned long long' <IntegralCast>
|   | | |     `-ImplicitCastExpr 0x1f90b6bfe48 <col:21, col:39> 'u32':'unsigned int' <LValueToRValue>
|   | | |       `-ParenExpr 0x1f90b6bfe28 <col:21, col:39> 'const u32':'const unsigned int' lvalue
|   | | |         `-UnaryOperator 0x1f90b6bfe10 <col:22, col:38> 'const u32':'const unsigned int' lvalue prefix '*' cannot overflow
|   | | |           `-CStyleCastExpr 0x1f90b6bfde8 <col:23, col:38> 'const u32 *' <BitCast>
|   | | |             `-ParenExpr 0x1f90b6bfdc8 <col:36, col:38> 'const unsigned char *'
|   | | |               `-UnaryOperator 0x1f90b6bfd80 <line:301:38, col:44> 'const unsigned char *' prefix '&' cannot overflow
|   | | |                 `-ArraySubscriptExpr 0x1f90b6bfd60 <col:39, col:44> 'const unsigned char' lvalue
|   | | |                   |-ImplicitCastExpr 0x1f90b6bfd48 <col:39> 'const unsigned char *' <LValueToRValue>
|   | | |                   | `-DeclRefExpr 0x1f90b6bfd00 <col:39> 'const unsigned char *' lvalue ParmVar 0x1f90b6c46a8 'inp' 'const unsigned char *'
|   | | |                   `-IntegerLiteral 0x1f90b6bfd20 <col:43> 'int' 4
|   | | |-BinaryOperator 0x1f90b6ce320 <line:302:9, line:70:39> 'u64':'unsigned long long' '='
|   | | | |-MemberExpr 0x1f90b6bfef0 <line:302:9, col:13> 'u64':'unsigned long long' lvalue .u 0x1f90b6598b0
|   | | | | `-DeclRefExpr 0x1f90b6bfeb8 <col:9> 'elem64':'elem64' lvalue Var 0x1f90b6c4c20 'in2' 'elem64':'elem64'
|   | | | `-BinaryOperator 0x1f90b6ce300 <line:67:17, line:70:39> 'unsigned long long' '|'
|   | | |   |-ParenExpr 0x1f90b6ce168 <line:67:17, col:35> 'unsigned long long'
|   | | |   | `-BinaryOperator 0x1f90b6ce148 <col:18, col:33> 'unsigned long long' '<<'
|   | | |   |   |-ParenExpr 0x1f90b6ce100 <col:18, col:30> 'unsigned long long'
|   | | |   |   | `-BinaryOperator 0x1f90b6ce0e0 <col:19, col:29> 'unsigned long long' '+'
|   | | |   |   |   |-IntegerLiteral 0x1f90b6ce010 <col:19> 'unsigned long long' 1023
|   | | |   |   |   `-ImplicitCastExpr 0x1f90b6ce0c8 <col:27, col:29> 'unsigned long long' <IntegralCast>
|   | | |   |   |     `-ParenExpr 0x1f90b6ce0a8 <col:27, col:29> 'int'
|   | | |   |   |       `-BinaryOperator 0x1f90b6ce088 <line:302:21, col:24> 'int' '+'
|   | | |   |   |         |-IntegerLiteral 0x1f90b6ce038 <col:21> 'int' 52
|   | | |   |   |         `-IntegerLiteral 0x1f90b6ce060 <col:24> 'int' 64
|   | | |   |   `-IntegerLiteral 0x1f90b6ce120 <line:67:33> 'int' 52
|   | | |   `-ImplicitCastExpr 0x1f90b6ce2e8 <line:70:21, col:39> 'unsigned long long' <IntegralCast>
|   | | |     `-ImplicitCastExpr 0x1f90b6ce2d0 <col:21, col:39> 'u32':'unsigned int' <LValueToRValue>
|   | | |       `-ParenExpr 0x1f90b6ce2b0 <col:21, col:39> 'const u32':'const unsigned int' lvalue
|   | | |         `-UnaryOperator 0x1f90b6ce298 <col:22, col:38> 'const u32':'const unsigned int' lvalue prefix '*' cannot overflow
|   | | |           `-CStyleCastExpr 0x1f90b6ce270 <col:23, col:38> 'const u32 *' <BitCast>
|   | | |             `-ParenExpr 0x1f90b6ce250 <col:36, col:38> 'const unsigned char *'
|   | | |               `-UnaryOperator 0x1f90b6ce208 <line:302:38, col:44> 'const unsigned char *' prefix '&' cannot overflow
|   | | |                 `-ArraySubscriptExpr 0x1f90b6ce1e8 <col:39, col:44> 'const unsigned char' lvalue
|   | | |                   |-ImplicitCastExpr 0x1f90b6ce1d0 <col:39> 'const unsigned char *' <LValueToRValue>
|   | | |                   | `-DeclRefExpr 0x1f90b6ce188 <col:39> 'const unsigned char *' lvalue ParmVar 0x1f90b6c46a8 'inp' 'const unsigned char *'
|   | | |                   `-IntegerLiteral 0x1f90b6ce1a8 <col:43> 'int' 8
|   | | |-BinaryOperator 0x1f90b6ce728 <line:303:9, col:50> 'u64':'unsigned long long' '='
|   | | | |-MemberExpr 0x1f90b6ce378 <col:9, col:13> 'u64':'unsigned long long' lvalue .u 0x1f90b6598b0
|   | | | | `-DeclRefExpr 0x1f90b6ce340 <col:9> 'elem64':'elem64' lvalue Var 0x1f90b6c4c98 'in3' 'elem64':'elem64'
|   | | | `-BinaryOperator 0x1f90b6ce708 <line:67:17, line:303:50> 'unsigned long long' '|'
|   | | |   |-BinaryOperator 0x1f90b6ce698 <line:67:17, line:70:39> 'unsigned long long' '|'
|   | | |   | |-ParenExpr 0x1f90b6ce500 <line:67:17, col:35> 'unsigned long long'
|   | | |   | | `-BinaryOperator 0x1f90b6ce4e0 <col:18, col:33> 'unsigned long long' '<<'
|   | | |   | |   |-ParenExpr 0x1f90b6ce498 <col:18, col:30> 'unsigned long long'
|   | | |   | |   | `-BinaryOperator 0x1f90b6ce478 <col:19, col:29> 'unsigned long long' '+'
|   | | |   | |   |   |-IntegerLiteral 0x1f90b6ce3a8 <col:19> 'unsigned long long' 1023
|   | | |   | |   |   `-ImplicitCastExpr 0x1f90b6ce460 <col:27, col:29> 'unsigned long long' <IntegralCast>
|   | | |   | |   |     `-ParenExpr 0x1f90b6ce440 <col:27, col:29> 'int'
|   | | |   | |   |       `-BinaryOperator 0x1f90b6ce420 <line:303:21, col:24> 'int' '+'
|   | | |   | |   |         |-IntegerLiteral 0x1f90b6ce3d0 <col:21> 'int' 52
|   | | |   | |   |         `-IntegerLiteral 0x1f90b6ce3f8 <col:24> 'int' 96
|   | | |   | |   `-IntegerLiteral 0x1f90b6ce4b8 <line:67:33> 'int' 52
|   | | |   | `-ImplicitCastExpr 0x1f90b6ce680 <line:70:21, col:39> 'unsigned long long' <IntegralCast>
|   | | |   |   `-ImplicitCastExpr 0x1f90b6ce668 <col:21, col:39> 'u32':'unsigned int' <LValueToRValue>
|   | | |   |     `-ParenExpr 0x1f90b6ce648 <col:21, col:39> 'const u32':'const unsigned int' lvalue
|   | | |   |       `-UnaryOperator 0x1f90b6ce630 <col:22, col:38> 'const u32':'const unsigned int' lvalue prefix '*' cannot overflow
|   | | |   |         `-CStyleCastExpr 0x1f90b6ce608 <col:23, col:38> 'const u32 *' <BitCast>
|   | | |   |           `-ParenExpr 0x1f90b6ce5e8 <col:36, col:38> 'const unsigned char *'
|   | | |   |             `-UnaryOperator 0x1f90b6ce5a0 <line:303:38, col:45> 'const unsigned char *' prefix '&' cannot overflow
|   | | |   |               `-ArraySubscriptExpr 0x1f90b6ce580 <col:39, col:45> 'const unsigned char' lvalue
|   | | |   |                 |-ImplicitCastExpr 0x1f90b6ce568 <col:39> 'const unsigned char *' <LValueToRValue>
|   | | |   |                 | `-DeclRefExpr 0x1f90b6ce520 <col:39> 'const unsigned char *' lvalue ParmVar 0x1f90b6c46a8 'inp' 'const unsigned char *'
|   | | |   |                 `-IntegerLiteral 0x1f90b6ce540 <col:43> 'int' 12
|   | | |   `-ImplicitCastExpr 0x1f90b6ce6f0 <col:50> 'u64':'unsigned long long' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x1f90b6ce6b8 <col:50> 'u64':'unsigned long long' lvalue Var 0x1f90b6c4d50 'pad' 'u64':'unsigned long long'
|   | | |-BinaryOperator 0x1f90b6cea88 <line:305:9, line:60:37> 'double' '='
|   | | | |-DeclRefExpr 0x1f90b6ce748 <line:305:9> 'double' lvalue Var 0x1f90b6c4ea0 'x0' 'double'
|   | | | `-BinaryOperator 0x1f90b6cea68 <col:14, line:60:37> 'double' '-'
|   | | |   |-ImplicitCastExpr 0x1f90b6cea50 <line:305:14, col:18> 'double' <LValueToRValue>
|   | | |   | `-MemberExpr 0x1f90b6ce7a0 <col:14, col:18> 'double' lvalue .d 0x1f90b659828
|   | | |   |   `-DeclRefExpr 0x1f90b6ce780 <col:14> 'elem64':'elem64' lvalue Var 0x1f90b6c4b30 'in0' 'elem64':'elem64'
|   | | |   `-BinaryOperator 0x1f90b6cea30 <line:60:17, col:37> 'double' '*'
|   | | |     |-ParenExpr 0x1f90b6ce8e0 <col:17, col:37> 'double'
|   | | |     | `-CStyleCastExpr 0x1f90b6ce8b8 <col:18, col:36> 'double' <IntegralToFloating>
|   | | |     |   `-ParenExpr 0x1f90b6ce898 <col:26, col:36> 'unsigned long long'
|   | | |     |     `-BinaryOperator 0x1f90b6ce840 <col:27, col:35> 'unsigned long long' '<<'
|   | | |     |       |-IntegerLiteral 0x1f90b6ce7d0 <col:27> 'unsigned long long' 1
|   | | |     |       `-ParenExpr 0x1f90b6ce820 <col:33, col:35> 'int'
|   | | |     |         `-IntegerLiteral 0x1f90b6ce7f8 <line:305:26> 'int' 52
|   | | |     `-ParenExpr 0x1f90b6cea10 <line:60:17, col:37> 'double'
|   | | |       `-CStyleCastExpr 0x1f90b6ce9e8 <col:18, col:36> 'double' <IntegralToFloating>
|   | | |         `-ParenExpr 0x1f90b6ce9c8 <col:26, col:36> 'unsigned long long'
|   | | |           `-BinaryOperator 0x1f90b6ce970 <col:27, col:35> 'unsigned long long' '<<'
|   | | |             |-IntegerLiteral 0x1f90b6ce900 <col:27> 'unsigned long long' 1
|   | | |             `-ParenExpr 0x1f90b6ce950 <col:33, col:35> 'int'
|   | | |               `-IntegerLiteral 0x1f90b6ce928 <line:61:19> 'int' 0
|   | | |-BinaryOperator 0x1f90b6cede8 <line:306:9, line:60:37> 'double' '='
|   | | | |-DeclRefExpr 0x1f90b6ceaa8 <line:306:9> 'double' lvalue Var 0x1f90b6c4f80 'x1' 'double'
|   | | | `-BinaryOperator 0x1f90b6cedc8 <col:14, line:60:37> 'double' '-'
|   | | |   |-ImplicitCastExpr 0x1f90b6cedb0 <line:306:14, col:18> 'double' <LValueToRValue>
|   | | |   | `-MemberExpr 0x1f90b6ceb00 <col:14, col:18> 'double' lvalue .d 0x1f90b659828
|   | | |   |   `-DeclRefExpr 0x1f90b6ceae0 <col:14> 'elem64':'elem64' lvalue Var 0x1f90b6c4ba8 'in1' 'elem64':'elem64'
|   | | |   `-BinaryOperator 0x1f90b6ced90 <line:60:17, col:37> 'double' '*'
|   | | |     |-ParenExpr 0x1f90b6cec40 <col:17, col:37> 'double'
|   | | |     | `-CStyleCastExpr 0x1f90b6cec18 <col:18, col:36> 'double' <IntegralToFloating>
|   | | |     |   `-ParenExpr 0x1f90b6cebf8 <col:26, col:36> 'unsigned long long'
|   | | |     |     `-BinaryOperator 0x1f90b6ceba0 <col:27, col:35> 'unsigned long long' '<<'
|   | | |     |       |-IntegerLiteral 0x1f90b6ceb30 <col:27> 'unsigned long long' 1
|   | | |     |       `-ParenExpr 0x1f90b6ceb80 <col:33, col:35> 'int'
|   | | |     |         `-IntegerLiteral 0x1f90b6ceb58 <line:306:26> 'int' 52
|   | | |     `-ParenExpr 0x1f90b6ced70 <line:60:17, col:37> 'double'
|   | | |       `-CStyleCastExpr 0x1f90b6ced48 <col:18, col:36> 'double' <IntegralToFloating>
|   | | |         `-ParenExpr 0x1f90b6ced28 <col:26, col:36> 'unsigned long long'
|   | | |           `-BinaryOperator 0x1f90b6cecd0 <col:27, col:35> 'unsigned long long' '<<'
|   | | |             |-IntegerLiteral 0x1f90b6cec60 <col:27> 'unsigned long long' 1
|   | | |             `-ParenExpr 0x1f90b6cecb0 <col:33, col:35> 'int'
|   | | |               `-IntegerLiteral 0x1f90b6cec88 <line:62:20> 'int' 32
|   | | |-BinaryOperator 0x1f90b6c8258 <line:307:9, line:63:30> 'double' '='
|   | | | |-DeclRefExpr 0x1f90b6cee08 <line:307:9> 'double' lvalue Var 0x1f90b6c5000 'x2' 'double'
|   | | | `-BinaryOperator 0x1f90b6c8238 <col:14, line:63:30> 'double' '-'
|   | | |   |-ImplicitCastExpr 0x1f90b6c8220 <line:307:14, col:18> 'double' <LValueToRValue>
|   | | |   | `-MemberExpr 0x1f90b6cee60 <col:14, col:18> 'double' lvalue .d 0x1f90b659828
|   | | |   |   `-DeclRefExpr 0x1f90b6cee40 <col:14> 'elem64':'elem64' lvalue Var 0x1f90b6c4c20 'in2' 'elem64':'elem64'
|   | | |   `-BinaryOperator 0x1f90b6c8200 <line:60:17, line:63:30> 'double' '*'
|   | | |     |-ParenExpr 0x1f90b6cefa0 <line:60:17, col:37> 'double'
|   | | |     | `-CStyleCastExpr 0x1f90b6cef78 <col:18, col:36> 'double' <IntegralToFloating>
|   | | |     |   `-ParenExpr 0x1f90b6cef58 <col:26, col:36> 'unsigned long long'
|   | | |     |     `-BinaryOperator 0x1f90b6cef00 <col:27, col:35> 'unsigned long long' '<<'
|   | | |     |       |-IntegerLiteral 0x1f90b6cee90 <col:27> 'unsigned long long' 1
|   | | |     |       `-ParenExpr 0x1f90b6ceee0 <col:33, col:35> 'int'
|   | | |     |         `-IntegerLiteral 0x1f90b6ceeb8 <line:307:26> 'int' 52
|   | | |     `-ParenExpr 0x1f90b6c81e0 <line:63:16, col:30> 'double'
|   | | |       `-BinaryOperator 0x1f90b6c81c0 <line:60:17, col:37> 'double' '*'
|   | | |         |-ParenExpr 0x1f90b6c8070 <col:17, col:37> 'double'
|   | | |         | `-CStyleCastExpr 0x1f90b6c8048 <col:18, col:36> 'double' <IntegralToFloating>
|   | | |         |   `-ParenExpr 0x1f90b6c8028 <col:26, col:36> 'unsigned long long'
|   | | |         |     `-BinaryOperator 0x1f90b6c7fd0 <col:27, col:35> 'unsigned long long' '<<'
|   | | |         |       |-IntegerLiteral 0x1f90b6cefc0 <col:27> 'unsigned long long' 1
|   | | |         |       `-ParenExpr 0x1f90b6c7fb0 <col:33, col:35> 'int'
|   | | |         |         `-IntegerLiteral 0x1f90b6cefe8 <line:62:20> 'int' 32
|   | | |         `-ParenExpr 0x1f90b6c81a0 <line:60:17, col:37> 'double'
|   | | |           `-CStyleCastExpr 0x1f90b6c8178 <col:18, col:36> 'double' <IntegralToFloating>
|   | | |             `-ParenExpr 0x1f90b6c8158 <col:26, col:36> 'unsigned long long'
|   | | |               `-BinaryOperator 0x1f90b6c8100 <col:27, col:35> 'unsigned long long' '<<'
|   | | |                 |-IntegerLiteral 0x1f90b6c8090 <col:27> 'unsigned long long' 1
|   | | |                 `-ParenExpr 0x1f90b6c80e0 <col:33, col:35> 'int'
|   | | |                   `-IntegerLiteral 0x1f90b6c80b8 <line:63:27> 'int' 32
|   | | |-BinaryOperator 0x1f90b6c8898 <line:308:9, line:64:30> 'double' '='
|   | | | |-DeclRefExpr 0x1f90b6c8278 <line:308:9> 'double' lvalue Var 0x1f90b6c5080 'x3' 'double'
|   | | | `-BinaryOperator 0x1f90b6c8878 <col:14, line:64:30> 'double' '-'
|   | | |   |-ImplicitCastExpr 0x1f90b6c8860 <line:308:14, col:18> 'double' <LValueToRValue>
|   | | |   | `-MemberExpr 0x1f90b6c82d0 <col:14, col:18> 'double' lvalue .d 0x1f90b659828
|   | | |   |   `-DeclRefExpr 0x1f90b6c82b0 <col:14> 'elem64':'elem64' lvalue Var 0x1f90b6c4c98 'in3' 'elem64':'elem64'
|   | | |   `-BinaryOperator 0x1f90b6c8840 <line:60:17, line:64:30> 'double' '*'
|   | | |     |-ParenExpr 0x1f90b6c8410 <line:60:17, col:37> 'double'
|   | | |     | `-CStyleCastExpr 0x1f90b6c83e8 <col:18, col:36> 'double' <IntegralToFloating>
|   | | |     |   `-ParenExpr 0x1f90b6c83c8 <col:26, col:36> 'unsigned long long'
|   | | |     |     `-BinaryOperator 0x1f90b6c8370 <col:27, col:35> 'unsigned long long' '<<'
|   | | |     |       |-IntegerLiteral 0x1f90b6c8300 <col:27> 'unsigned long long' 1
|   | | |     |       `-ParenExpr 0x1f90b6c8350 <col:33, col:35> 'int'
|   | | |     |         `-IntegerLiteral 0x1f90b6c8328 <line:308:26> 'int' 52
|   | | |     `-ParenExpr 0x1f90b6c8820 <line:64:16, col:30> 'double'
|   | | |       `-BinaryOperator 0x1f90b6c8800 <line:63:16, line:60:37> 'double' '*'
|   | | |         |-ParenExpr 0x1f90b6c86b0 <line:63:16, col:30> 'double'
|   | | |         | `-BinaryOperator 0x1f90b6c8690 <line:60:17, col:37> 'double' '*'
|   | | |         |   |-ParenExpr 0x1f90b6c8540 <col:17, col:37> 'double'
|   | | |         |   | `-CStyleCastExpr 0x1f90b6c8518 <col:18, col:36> 'double' <IntegralToFloating>
|   | | |         |   |   `-ParenExpr 0x1f90b6c84f8 <col:26, col:36> 'unsigned long long'
|   | | |         |   |     `-BinaryOperator 0x1f90b6c84a0 <col:27, col:35> 'unsigned long long' '<<'
|   | | |         |   |       |-IntegerLiteral 0x1f90b6c8430 <col:27> 'unsigned long long' 1
|   | | |         |   |       `-ParenExpr 0x1f90b6c8480 <col:33, col:35> 'int'
|   | | |         |   |         `-IntegerLiteral 0x1f90b6c8458 <line:62:20> 'int' 32
|   | | |         |   `-ParenExpr 0x1f90b6c8670 <line:60:17, col:37> 'double'
|   | | |         |     `-CStyleCastExpr 0x1f90b6c8648 <col:18, col:36> 'double' <IntegralToFloating>
|   | | |         |       `-ParenExpr 0x1f90b6c8628 <col:26, col:36> 'unsigned long long'
|   | | |         |         `-BinaryOperator 0x1f90b6c85d0 <col:27, col:35> 'unsigned long long' '<<'
|   | | |         |           |-IntegerLiteral 0x1f90b6c8560 <col:27> 'unsigned long long' 1
|   | | |         |           `-ParenExpr 0x1f90b6c85b0 <col:33, col:35> 'int'
|   | | |         |             `-IntegerLiteral 0x1f90b6c8588 <line:63:27> 'int' 32
|   | | |         `-ParenExpr 0x1f90b6c87e0 <line:60:17, col:37> 'double'
|   | | |           `-CStyleCastExpr 0x1f90b6c87b8 <col:18, col:36> 'double' <IntegralToFloating>
|   | | |             `-ParenExpr 0x1f90b6c8798 <col:26, col:36> 'unsigned long long'
|   | | |               `-BinaryOperator 0x1f90b6c8740 <col:27, col:35> 'unsigned long long' '<<'
|   | | |                 |-IntegerLiteral 0x1f90b6c86d0 <col:27> 'unsigned long long' 1
|   | | |                 `-ParenExpr 0x1f90b6c8720 <col:33, col:35> 'int'
|   | | |                   `-IntegerLiteral 0x1f90b6c86f8 <line:64:27> 'int' 32
|   | | |-CompoundAssignOperator 0x1f90b6c8910 <line:314:9, col:17> 'double' '+=' ComputeLHSTy='double' ComputeResultTy='double'
|   | | | |-DeclRefExpr 0x1f90b6c88b8 <col:9> 'double' lvalue Var 0x1f90b6c5140 'h0lo' 'double'
|   | | | `-ImplicitCastExpr 0x1f90b6c88f8 <col:17> 'double' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x1f90b6c88d8 <col:17> 'double' lvalue Var 0x1f90b6c4ea0 'x0' 'double'
|   | | |-CompoundAssignOperator 0x1f90b6c8998 <line:315:9, col:17> 'double' '+=' ComputeLHSTy='double' ComputeResultTy='double'
|   | | | |-DeclRefExpr 0x1f90b6c8940 <col:9> 'double' lvalue Var 0x1f90b6c51c0 'h0hi' 'double'
|   | | | `-ImplicitCastExpr 0x1f90b6c8980 <col:17> 'double' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x1f90b6c8960 <col:17> 'double' lvalue Var 0x1f90b6c4f80 'x1' 'double'
|   | | |-CompoundAssignOperator 0x1f90b6c8a20 <line:316:9, col:17> 'double' '+=' ComputeLHSTy='double' ComputeResultTy='double'
|   | | | |-DeclRefExpr 0x1f90b6c89c8 <col:9> 'double' lvalue Var 0x1f90b6c5340 'h2lo' 'double'
|   | | | `-ImplicitCastExpr 0x1f90b6c8a08 <col:17> 'double' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x1f90b6c89e8 <col:17> 'double' lvalue Var 0x1f90b6c5000 'x2' 'double'
|   | | |-CompoundAssignOperator 0x1f90b6c8aa8 <line:317:9, col:17> 'double' '+=' ComputeLHSTy='double' ComputeResultTy='double'
|   | | | |-DeclRefExpr 0x1f90b6c8a50 <col:9> 'double' lvalue Var 0x1f90b6c53c0 'h2hi' 'double'
|   | | | `-ImplicitCastExpr 0x1f90b6c8a90 <col:17> 'double' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x1f90b6c8a70 <col:17> 'double' lvalue Var 0x1f90b6c5080 'x3' 'double'
|   | | |-BinaryOperator 0x1f90b6c70a0 <line:322:9, line:60:37> 'double' '='
|   | | | |-DeclRefExpr 0x1f90b6c8ad8 <line:322:9> 'double' lvalue Var 0x1f90b6c55a0 'c0lo' 'double'
|   | | | `-BinaryOperator 0x1f90b6c7080 <col:16, line:60:37> 'double' '-'
|   | | |   |-ParenExpr 0x1f90b6c8de8 <line:322:16, col:37> 'double'
|   | | |   | `-BinaryOperator 0x1f90b6c8dc8 <col:17, line:60:37> 'double' '+'
|   | | |   |   |-ImplicitCastExpr 0x1f90b6c8db0 <line:322:17> 'double' <LValueToRValue>
|   | | |   |   | `-DeclRefExpr 0x1f90b6c8b10 <col:17> 'double' lvalue Var 0x1f90b6c5140 'h0lo' 'double'
|   | | |   |   `-BinaryOperator 0x1f90b6c8d90 <line:60:17, col:37> 'double' '*'
|   | | |   |     |-ParenExpr 0x1f90b6c8c40 <col:17, col:37> 'double'
|   | | |   |     | `-CStyleCastExpr 0x1f90b6c8c18 <col:18, col:36> 'double' <IntegralToFloating>
|   | | |   |     |   `-ParenExpr 0x1f90b6c8bf8 <col:26, col:36> 'unsigned long long'
|   | | |   |     |     `-BinaryOperator 0x1f90b6c8ba0 <col:27, col:35> 'unsigned long long' '<<'
|   | | |   |     |       |-IntegerLiteral 0x1f90b6c8b30 <col:27> 'unsigned long long' 1
|   | | |   |     |       `-ParenExpr 0x1f90b6c8b80 <col:33, col:35> 'int'
|   | | |   |     |         `-IntegerLiteral 0x1f90b6c8b58 <line:322:28> 'int' 52
|   | | |   |     `-ParenExpr 0x1f90b6c8d70 <line:60:17, col:37> 'double'
|   | | |   |       `-CStyleCastExpr 0x1f90b6c8d48 <col:18, col:36> 'double' <IntegralToFloating>
|   | | |   |         `-ParenExpr 0x1f90b6c8d28 <col:26, col:36> 'unsigned long long'
|   | | |   |           `-BinaryOperator 0x1f90b6c8cd0 <col:27, col:35> 'unsigned long long' '<<'
|   | | |   |             |-IntegerLiteral 0x1f90b6c8c60 <col:27> 'unsigned long long' 1
|   | | |   |             `-ParenExpr 0x1f90b6c8cb0 <col:33, col:35> 'int'
|   | | |   |               `-IntegerLiteral 0x1f90b6c8c88 <line:62:20> 'int' 32
|   | | |   `-BinaryOperator 0x1f90b6c7060 <line:60:17, col:37> 'double' '*'
|   | | |     |-ParenExpr 0x1f90b6c8f18 <col:17, col:37> 'double'
|   | | |     | `-CStyleCastExpr 0x1f90b6c8ef0 <col:18, col:36> 'double' <IntegralToFloating>
|   | | |     |   `-ParenExpr 0x1f90b6c8ed0 <col:26, col:36> 'unsigned long long'
|   | | |     |     `-BinaryOperator 0x1f90b6c8e78 <col:27, col:35> 'unsigned long long' '<<'
|   | | |     |       |-IntegerLiteral 0x1f90b6c8e08 <col:27> 'unsigned long long' 1
|   | | |     |       `-ParenExpr 0x1f90b6c8e58 <col:33, col:35> 'int'
|   | | |     |         `-IntegerLiteral 0x1f90b6c8e30 <line:322:46> 'int' 52
|   | | |     `-ParenExpr 0x1f90b6c7040 <line:60:17, col:37> 'double'
|   | | |       `-CStyleCastExpr 0x1f90b6c7018 <col:18, col:36> 'double' <IntegralToFloating>
|   | | |         `-ParenExpr 0x1f90b6c6ff8 <col:26, col:36> 'unsigned long long'
|   | | |           `-BinaryOperator 0x1f90b6c6fa0 <col:27, col:35> 'unsigned long long' '<<'
|   | | |             |-IntegerLiteral 0x1f90b6c8f38 <col:27> 'unsigned long long' 1
|   | | |             `-ParenExpr 0x1f90b6c8f88 <col:33, col:35> 'int'
|   | | |               `-IntegerLiteral 0x1f90b6c8f60 <line:62:20> 'int' 32
|   | | |-BinaryOperator 0x1f90b6c7970 <line:323:9, line:63:30> 'double' '='
|   | | | |-DeclRefExpr 0x1f90b6c70c0 <line:323:9> 'double' lvalue Var 0x1f90b6c56a0 'c1lo' 'double'
|   | | | `-BinaryOperator 0x1f90b6c7950 <col:16, line:63:30> 'double' '-'
|   | | |   |-ParenExpr 0x1f90b6c7540 <line:323:16, col:37> 'double'
|   | | |   | `-BinaryOperator 0x1f90b6c7520 <col:17, line:63:30> 'double' '+'
|   | | |   |   |-ImplicitCastExpr 0x1f90b6c7508 <line:323:17> 'double' <LValueToRValue>
|   | | |   |   | `-DeclRefExpr 0x1f90b6c70f8 <col:17> 'double' lvalue Var 0x1f90b6c5240 'h1lo' 'double'
|   | | |   |   `-BinaryOperator 0x1f90b6c74e8 <line:60:17, line:63:30> 'double' '*'
|   | | |   |     |-ParenExpr 0x1f90b6c7228 <line:60:17, col:37> 'double'
|   | | |   |     | `-CStyleCastExpr 0x1f90b6c7200 <col:18, col:36> 'double' <IntegralToFloating>
|   | | |   |     |   `-ParenExpr 0x1f90b6c71e0 <col:26, col:36> 'unsigned long long'
|   | | |   |     |     `-BinaryOperator 0x1f90b6c7188 <col:27, col:35> 'unsigned long long' '<<'
|   | | |   |     |       |-IntegerLiteral 0x1f90b6c7118 <col:27> 'unsigned long long' 1
|   | | |   |     |       `-ParenExpr 0x1f90b6c7168 <col:33, col:35> 'int'
|   | | |   |     |         `-IntegerLiteral 0x1f90b6c7140 <line:323:28> 'int' 52
|   | | |   |     `-ParenExpr 0x1f90b6c74c8 <line:63:16, col:30> 'double'
|   | | |   |       `-BinaryOperator 0x1f90b6c74a8 <line:60:17, col:37> 'double' '*'
|   | | |   |         |-ParenExpr 0x1f90b6c7358 <col:17, col:37> 'double'
|   | | |   |         | `-CStyleCastExpr 0x1f90b6c7330 <col:18, col:36> 'double' <IntegralToFloating>
|   | | |   |         |   `-ParenExpr 0x1f90b6c7310 <col:26, col:36> 'unsigned long long'
|   | | |   |         |     `-BinaryOperator 0x1f90b6c72b8 <col:27, col:35> 'unsigned long long' '<<'
|   | | |   |         |       |-IntegerLiteral 0x1f90b6c7248 <col:27> 'unsigned long long' 1
|   | | |   |         |       `-ParenExpr 0x1f90b6c7298 <col:33, col:35> 'int'
|   | | |   |         |         `-IntegerLiteral 0x1f90b6c7270 <line:62:20> 'int' 32
|   | | |   |         `-ParenExpr 0x1f90b6c7488 <line:60:17, col:37> 'double'
|   | | |   |           `-CStyleCastExpr 0x1f90b6c7460 <col:18, col:36> 'double' <IntegralToFloating>
|   | | |   |             `-ParenExpr 0x1f90b6c7440 <col:26, col:36> 'unsigned long long'
|   | | |   |               `-BinaryOperator 0x1f90b6c73e8 <col:27, col:35> 'unsigned long long' '<<'
|   | | |   |                 |-IntegerLiteral 0x1f90b6c7378 <col:27> 'unsigned long long' 1
|   | | |   |                 `-ParenExpr 0x1f90b6c73c8 <col:33, col:35> 'int'
|   | | |   |                   `-IntegerLiteral 0x1f90b6c73a0 <line:63:27> 'int' 32
|   | | |   `-BinaryOperator 0x1f90b6c7930 <line:60:17, line:63:30> 'double' '*'
|   | | |     |-ParenExpr 0x1f90b6c7670 <line:60:17, col:37> 'double'
|   | | |     | `-CStyleCastExpr 0x1f90b6c7648 <col:18, col:36> 'double' <IntegralToFloating>
|   | | |     |   `-ParenExpr 0x1f90b6c7628 <col:26, col:36> 'unsigned long long'
|   | | |     |     `-BinaryOperator 0x1f90b6c75d0 <col:27, col:35> 'unsigned long long' '<<'
|   | | |     |       |-IntegerLiteral 0x1f90b6c7560 <col:27> 'unsigned long long' 1
|   | | |     |       `-ParenExpr 0x1f90b6c75b0 <col:33, col:35> 'int'
|   | | |     |         `-IntegerLiteral 0x1f90b6c7588 <line:323:46> 'int' 52
|   | | |     `-ParenExpr 0x1f90b6c7910 <line:63:16, col:30> 'double'
|   | | |       `-BinaryOperator 0x1f90b6c78f0 <line:60:17, col:37> 'double' '*'
|   | | |         |-ParenExpr 0x1f90b6c77a0 <col:17, col:37> 'double'
|   | | |         | `-CStyleCastExpr 0x1f90b6c7778 <col:18, col:36> 'double' <IntegralToFloating>
|   | | |         |   `-ParenExpr 0x1f90b6c7758 <col:26, col:36> 'unsigned long long'
|   | | |         |     `-BinaryOperator 0x1f90b6c7700 <col:27, col:35> 'unsigned long long' '<<'
|   | | |         |       |-IntegerLiteral 0x1f90b6c7690 <col:27> 'unsigned long long' 1
|   | | |         |       `-ParenExpr 0x1f90b6c76e0 <col:33, col:35> 'int'
|   | | |         |         `-IntegerLiteral 0x1f90b6c76b8 <line:62:20> 'int' 32
|   | | |         `-ParenExpr 0x1f90b6c78d0 <line:60:17, col:37> 'double'
|   | | |           `-CStyleCastExpr 0x1f90b6c78a8 <col:18, col:36> 'double' <IntegralToFloating>
|   | | |             `-ParenExpr 0x1f90b6c7888 <col:26, col:36> 'unsigned long long'
|   | | |               `-BinaryOperator 0x1f90b6c7830 <col:27, col:35> 'unsigned long long' '<<'
|   | | |                 |-IntegerLiteral 0x1f90b6c77c0 <col:27> 'unsigned long long' 1
|   | | |                 `-ParenExpr 0x1f90b6c7810 <col:33, col:35> 'int'
|   | | |                   `-IntegerLiteral 0x1f90b6c77e8 <line:63:27> 'int' 32
|   | | |-BinaryOperator 0x1f90b6cb560 <line:324:9, line:64:30> 'double' '='
|   | | | |-DeclRefExpr 0x1f90b6c7990 <line:324:9> 'double' lvalue Var 0x1f90b6c57a0 'c2lo' 'double'
|   | | | `-BinaryOperator 0x1f90b6cb540 <col:16, line:64:30> 'double' '-'
|   | | |   |-ParenExpr 0x1f90b6c7f80 <line:324:16, col:37> 'double'
|   | | |   | `-BinaryOperator 0x1f90b6c7f60 <col:17, line:64:30> 'double' '+'
|   | | |   |   |-ImplicitCastExpr 0x1f90b6c7f48 <line:324:17> 'double' <LValueToRValue>
|   | | |   |   | `-DeclRefExpr 0x1f90b6c79c8 <col:17> 'double' lvalue Var 0x1f90b6c5340 'h2lo' 'double'
|   | | |   |   `-BinaryOperator 0x1f90b6c7f28 <line:60:17, line:64:30> 'double' '*'
|   | | |   |     |-ParenExpr 0x1f90b6c7af8 <line:60:17, col:37> 'double'
|   | | |   |     | `-CStyleCastExpr 0x1f90b6c7ad0 <col:18, col:36> 'double' <IntegralToFloating>
|   | | |   |     |   `-ParenExpr 0x1f90b6c7ab0 <col:26, col:36> 'unsigned long long'
|   | | |   |     |     `-BinaryOperator 0x1f90b6c7a58 <col:27, col:35> 'unsigned long long' '<<'
|   | | |   |     |       |-IntegerLiteral 0x1f90b6c79e8 <col:27> 'unsigned long long' 1
|   | | |   |     |       `-ParenExpr 0x1f90b6c7a38 <col:33, col:35> 'int'
|   | | |   |     |         `-IntegerLiteral 0x1f90b6c7a10 <line:324:28> 'int' 52
|   | | |   |     `-ParenExpr 0x1f90b6c7f08 <line:64:16, col:30> 'double'
|   | | |   |       `-BinaryOperator 0x1f90b6c7ee8 <line:63:16, line:60:37> 'double' '*'
|   | | |   |         |-ParenExpr 0x1f90b6c7d98 <line:63:16, col:30> 'double'
|   | | |   |         | `-BinaryOperator 0x1f90b6c7d78 <line:60:17, col:37> 'double' '*'
|   | | |   |         |   |-ParenExpr 0x1f90b6c7c28 <col:17, col:37> 'double'
|   | | |   |         |   | `-CStyleCastExpr 0x1f90b6c7c00 <col:18, col:36> 'double' <IntegralToFloating>
|   | | |   |         |   |   `-ParenExpr 0x1f90b6c7be0 <col:26, col:36> 'unsigned long long'
|   | | |   |         |   |     `-BinaryOperator 0x1f90b6c7b88 <col:27, col:35> 'unsigned long long' '<<'
|   | | |   |         |   |       |-IntegerLiteral 0x1f90b6c7b18 <col:27> 'unsigned long long' 1
|   | | |   |         |   |       `-ParenExpr 0x1f90b6c7b68 <col:33, col:35> 'int'
|   | | |   |         |   |         `-IntegerLiteral 0x1f90b6c7b40 <line:62:20> 'int' 32
|   | | |   |         |   `-ParenExpr 0x1f90b6c7d58 <line:60:17, col:37> 'double'
|   | | |   |         |     `-CStyleCastExpr 0x1f90b6c7d30 <col:18, col:36> 'double' <IntegralToFloating>
|   | | |   |         |       `-ParenExpr 0x1f90b6c7d10 <col:26, col:36> 'unsigned long long'
|   | | |   |         |         `-BinaryOperator 0x1f90b6c7cb8 <col:27, col:35> 'unsigned long long' '<<'
|   | | |   |         |           |-IntegerLiteral 0x1f90b6c7c48 <col:27> 'unsigned long long' 1
|   | | |   |         |           `-ParenExpr 0x1f90b6c7c98 <col:33, col:35> 'int'
|   | | |   |         |             `-IntegerLiteral 0x1f90b6c7c70 <line:63:27> 'int' 32
|   | | |   |         `-ParenExpr 0x1f90b6c7ec8 <line:60:17, col:37> 'double'
|   | | |   |           `-CStyleCastExpr 0x1f90b6c7ea0 <col:18, col:36> 'double' <IntegralToFloating>
|   | | |   |             `-ParenExpr 0x1f90b6c7e80 <col:26, col:36> 'unsigned long long'
|   | | |   |               `-BinaryOperator 0x1f90b6c7e28 <col:27, col:35> 'unsigned long long' '<<'
|   | | |   |                 |-IntegerLiteral 0x1f90b6c7db8 <col:27> 'unsigned long long' 1
|   | | |   |                 `-ParenExpr 0x1f90b6c7e08 <col:33, col:35> 'int'
|   | | |   |                   `-IntegerLiteral 0x1f90b6c7de0 <line:64:27> 'int' 32
|   | | |   `-BinaryOperator 0x1f90b6cb520 <line:60:17, line:64:30> 'double' '*'
|   | | |     |-ParenExpr 0x1f90b6cb0f0 <line:60:17, col:37> 'double'
|   | | |     | `-CStyleCastExpr 0x1f90b6cb0c8 <col:18, col:36> 'double' <IntegralToFloating>
|   | | |     |   `-ParenExpr 0x1f90b6cb0a8 <col:26, col:36> 'unsigned long long'
|   | | |     |     `-BinaryOperator 0x1f90b6cb050 <col:27, col:35> 'unsigned long long' '<<'
|   | | |     |       |-IntegerLiteral 0x1f90b6cafe0 <col:27> 'unsigned long long' 1
|   | | |     |       `-ParenExpr 0x1f90b6cb030 <col:33, col:35> 'int'
|   | | |     |         `-IntegerLiteral 0x1f90b6cb008 <line:324:46> 'int' 52
|   | | |     `-ParenExpr 0x1f90b6cb500 <line:64:16, col:30> 'double'
|   | | |       `-BinaryOperator 0x1f90b6cb4e0 <line:63:16, line:60:37> 'double' '*'
|   | | |         |-ParenExpr 0x1f90b6cb390 <line:63:16, col:30> 'double'
|   | | |         | `-BinaryOperator 0x1f90b6cb370 <line:60:17, col:37> 'double' '*'
|   | | |         |   |-ParenExpr 0x1f90b6cb220 <col:17, col:37> 'double'
|   | | |         |   | `-CStyleCastExpr 0x1f90b6cb1f8 <col:18, col:36> 'double' <IntegralToFloating>
|   | | |         |   |   `-ParenExpr 0x1f90b6cb1d8 <col:26, col:36> 'unsigned long long'
|   | | |         |   |     `-BinaryOperator 0x1f90b6cb180 <col:27, col:35> 'unsigned long long' '<<'
|   | | |         |   |       |-IntegerLiteral 0x1f90b6cb110 <col:27> 'unsigned long long' 1
|   | | |         |   |       `-ParenExpr 0x1f90b6cb160 <col:33, col:35> 'int'
|   | | |         |   |         `-IntegerLiteral 0x1f90b6cb138 <line:62:20> 'int' 32
|   | | |         |   `-ParenExpr 0x1f90b6cb350 <line:60:17, col:37> 'double'
|   | | |         |     `-CStyleCastExpr 0x1f90b6cb328 <col:18, col:36> 'double' <IntegralToFloating>
|   | | |         |       `-ParenExpr 0x1f90b6cb308 <col:26, col:36> 'unsigned long long'
|   | | |         |         `-BinaryOperator 0x1f90b6cb2b0 <col:27, col:35> 'unsigned long long' '<<'
|   | | |         |           |-IntegerLiteral 0x1f90b6cb240 <col:27> 'unsigned long long' 1
|   | | |         |           `-ParenExpr 0x1f90b6cb290 <col:33, col:35> 'int'
|   | | |         |             `-IntegerLiteral 0x1f90b6cb268 <line:63:27> 'int' 32
|   | | |         `-ParenExpr 0x1f90b6cb4c0 <line:60:17, col:37> 'double'
|   | | |           `-CStyleCastExpr 0x1f90b6cb498 <col:18, col:36> 'double' <IntegralToFloating>
|   | | |             `-ParenExpr 0x1f90b6cb478 <col:26, col:36> 'unsigned long long'
|   | | |               `-BinaryOperator 0x1f90b6cb420 <col:27, col:35> 'unsigned long long' '<<'
|   | | |                 |-IntegerLiteral 0x1f90b6cb3b0 <col:27> 'unsigned long long' 1
|   | | |                 `-ParenExpr 0x1f90b6cb400 <col:33, col:35> 'int'
|   | | |                   `-IntegerLiteral 0x1f90b6cb3d8 <line:64:27> 'int' 32
|   | | |-BinaryOperator 0x1f90b6cf440 <line:325:9, line:65:31> 'double' '='
|   | | | |-DeclRefExpr 0x1f90b6cb580 <line:325:9> 'double' lvalue Var 0x1f90b6c58a0 'c3lo' 'double'
|   | | | `-BinaryOperator 0x1f90b6cf420 <col:16, line:65:31> 'double' '-'
|   | | |   |-ParenExpr 0x1f90b6cbce0 <line:325:16, col:38> 'double'
|   | | |   | `-BinaryOperator 0x1f90b6cbcc0 <col:17, line:65:31> 'double' '+'
|   | | |   |   |-ImplicitCastExpr 0x1f90b6cbca8 <line:325:17> 'double' <LValueToRValue>
|   | | |   |   | `-DeclRefExpr 0x1f90b6cb5b8 <col:17> 'double' lvalue Var 0x1f90b6c5440 'h3lo' 'double'
|   | | |   |   `-BinaryOperator 0x1f90b6cbc88 <line:60:17, line:65:31> 'double' '*'
|   | | |   |     |-ParenExpr 0x1f90b6cb6e8 <line:60:17, col:37> 'double'
|   | | |   |     | `-CStyleCastExpr 0x1f90b6cb6c0 <col:18, col:36> 'double' <IntegralToFloating>
|   | | |   |     |   `-ParenExpr 0x1f90b6cb6a0 <col:26, col:36> 'unsigned long long'
|   | | |   |     |     `-BinaryOperator 0x1f90b6cb648 <col:27, col:35> 'unsigned long long' '<<'
|   | | |   |     |       |-IntegerLiteral 0x1f90b6cb5d8 <col:27> 'unsigned long long' 1
|   | | |   |     |       `-ParenExpr 0x1f90b6cb628 <col:33, col:35> 'int'
|   | | |   |     |         `-IntegerLiteral 0x1f90b6cb600 <line:325:28> 'int' 52
|   | | |   |     `-ParenExpr 0x1f90b6cbc68 <line:65:17, col:31> 'double'
|   | | |   |       `-BinaryOperator 0x1f90b6cbc48 <line:64:16, line:60:37> 'double' '*'
|   | | |   |         |-ParenExpr 0x1f90b6cbaf8 <line:64:16, col:30> 'double'
|   | | |   |         | `-BinaryOperator 0x1f90b6cbad8 <line:63:16, line:60:37> 'double' '*'
|   | | |   |         |   |-ParenExpr 0x1f90b6cb988 <line:63:16, col:30> 'double'
|   | | |   |         |   | `-BinaryOperator 0x1f90b6cb968 <line:60:17, col:37> 'double' '*'
|   | | |   |         |   |   |-ParenExpr 0x1f90b6cb818 <col:17, col:37> 'double'
|   | | |   |         |   |   | `-CStyleCastExpr 0x1f90b6cb7f0 <col:18, col:36> 'double' <IntegralToFloating>
|   | | |   |         |   |   |   `-ParenExpr 0x1f90b6cb7d0 <col:26, col:36> 'unsigned long long'
|   | | |   |         |   |   |     `-BinaryOperator 0x1f90b6cb778 <col:27, col:35> 'unsigned long long' '<<'
|   | | |   |         |   |   |       |-IntegerLiteral 0x1f90b6cb708 <col:27> 'unsigned long long' 1
|   | | |   |         |   |   |       `-ParenExpr 0x1f90b6cb758 <col:33, col:35> 'int'
|   | | |   |         |   |   |         `-IntegerLiteral 0x1f90b6cb730 <line:62:20> 'int' 32
|   | | |   |         |   |   `-ParenExpr 0x1f90b6cb948 <line:60:17, col:37> 'double'
|   | | |   |         |   |     `-CStyleCastExpr 0x1f90b6cb920 <col:18, col:36> 'double' <IntegralToFloating>
|   | | |   |         |   |       `-ParenExpr 0x1f90b6cb900 <col:26, col:36> 'unsigned long long'
|   | | |   |         |   |         `-BinaryOperator 0x1f90b6cb8a8 <col:27, col:35> 'unsigned long long' '<<'
|   | | |   |         |   |           |-IntegerLiteral 0x1f90b6cb838 <col:27> 'unsigned long long' 1
|   | | |   |         |   |           `-ParenExpr 0x1f90b6cb888 <col:33, col:35> 'int'
|   | | |   |         |   |             `-IntegerLiteral 0x1f90b6cb860 <line:63:27> 'int' 32
|   | | |   |         |   `-ParenExpr 0x1f90b6cbab8 <line:60:17, col:37> 'double'
|   | | |   |         |     `-CStyleCastExpr 0x1f90b6cba90 <col:18, col:36> 'double' <IntegralToFloating>
|   | | |   |         |       `-ParenExpr 0x1f90b6cba70 <col:26, col:36> 'unsigned long long'
|   | | |   |         |         `-BinaryOperator 0x1f90b6cba18 <col:27, col:35> 'unsigned long long' '<<'
|   | | |   |         |           |-IntegerLiteral 0x1f90b6cb9a8 <col:27> 'unsigned long long' 1
|   | | |   |         |           `-ParenExpr 0x1f90b6cb9f8 <col:33, col:35> 'int'
|   | | |   |         |             `-IntegerLiteral 0x1f90b6cb9d0 <line:64:27> 'int' 32
|   | | |   |         `-ParenExpr 0x1f90b6cbc28 <line:60:17, col:37> 'double'
|   | | |   |           `-CStyleCastExpr 0x1f90b6cbc00 <col:18, col:36> 'double' <IntegralToFloating>
|   | | |   |             `-ParenExpr 0x1f90b6cbbe0 <col:26, col:36> 'unsigned long long'
|   | | |   |               `-BinaryOperator 0x1f90b6cbb88 <col:27, col:35> 'unsigned long long' '<<'
|   | | |   |                 |-IntegerLiteral 0x1f90b6cbb18 <col:27> 'unsigned long long' 1
|   | | |   |                 `-ParenExpr 0x1f90b6cbb68 <col:33, col:35> 'int'
|   | | |   |                   `-IntegerLiteral 0x1f90b6cbb40 <line:65:28> 'int' 34
|   | | |   `-BinaryOperator 0x1f90b6cf400 <line:60:17, line:65:31> 'double' '*'
|   | | |     |-ParenExpr 0x1f90b6cbe10 <line:60:17, col:37> 'double'
|   | | |     | `-CStyleCastExpr 0x1f90b6cbde8 <col:18, col:36> 'double' <IntegralToFloating>
|   | | |     |   `-ParenExpr 0x1f90b6cbdc8 <col:26, col:36> 'unsigned long long'
|   | | |     |     `-BinaryOperator 0x1f90b6cbd70 <col:27, col:35> 'unsigned long long' '<<'
|   | | |     |       |-IntegerLiteral 0x1f90b6cbd00 <col:27> 'unsigned long long' 1
|   | | |     |       `-ParenExpr 0x1f90b6cbd50 <col:33, col:35> 'int'
|   | | |     |         `-IntegerLiteral 0x1f90b6cbd28 <line:325:46> 'int' 52
|   | | |     `-ParenExpr 0x1f90b6cf3e0 <line:65:17, col:31> 'double'
|   | | |       `-BinaryOperator 0x1f90b6cf3c0 <line:64:16, line:60:37> 'double' '*'
|   | | |         |-ParenExpr 0x1f90b6cf270 <line:64:16, col:30> 'double'
|   | | |         | `-BinaryOperator 0x1f90b6cf250 <line:63:16, line:60:37> 'double' '*'
|   | | |         |   |-ParenExpr 0x1f90b6cf100 <line:63:16, col:30> 'double'
|   | | |         |   | `-BinaryOperator 0x1f90b6cf0e0 <line:60:17, col:37> 'double' '*'
|   | | |         |   |   |-ParenExpr 0x1f90b6cbf40 <col:17, col:37> 'double'
|   | | |         |   |   | `-CStyleCastExpr 0x1f90b6cbf18 <col:18, col:36> 'double' <IntegralToFloating>
|   | | |         |   |   |   `-ParenExpr 0x1f90b6cbef8 <col:26, col:36> 'unsigned long long'
|   | | |         |   |   |     `-BinaryOperator 0x1f90b6cbea0 <col:27, col:35> 'unsigned long long' '<<'
|   | | |         |   |   |       |-IntegerLiteral 0x1f90b6cbe30 <col:27> 'unsigned long long' 1
|   | | |         |   |   |       `-ParenExpr 0x1f90b6cbe80 <col:33, col:35> 'int'
|   | | |         |   |   |         `-IntegerLiteral 0x1f90b6cbe58 <line:62:20> 'int' 32
|   | | |         |   |   `-ParenExpr 0x1f90b6cf0c0 <line:60:17, col:37> 'double'
|   | | |         |   |     `-CStyleCastExpr 0x1f90b6cf098 <col:18, col:36> 'double' <IntegralToFloating>
|   | | |         |   |       `-ParenExpr 0x1f90b6cf078 <col:26, col:36> 'unsigned long long'
|   | | |         |   |         `-BinaryOperator 0x1f90b6cf020 <col:27, col:35> 'unsigned long long' '<<'
|   | | |         |   |           |-IntegerLiteral 0x1f90b6cbf60 <col:27> 'unsigned long long' 1
|   | | |         |   |           `-ParenExpr 0x1f90b6cbfb0 <col:33, col:35> 'int'
|   | | |         |   |             `-IntegerLiteral 0x1f90b6cbf88 <line:63:27> 'int' 32
|   | | |         |   `-ParenExpr 0x1f90b6cf230 <line:60:17, col:37> 'double'
|   | | |         |     `-CStyleCastExpr 0x1f90b6cf208 <col:18, col:36> 'double' <IntegralToFloating>
|   | | |         |       `-ParenExpr 0x1f90b6cf1e8 <col:26, col:36> 'unsigned long long'
|   | | |         |         `-BinaryOperator 0x1f90b6cf190 <col:27, col:35> 'unsigned long long' '<<'
|   | | |         |           |-IntegerLiteral 0x1f90b6cf120 <col:27> 'unsigned long long' 1
|   | | |         |           `-ParenExpr 0x1f90b6cf170 <col:33, col:35> 'int'
|   | | |         |             `-IntegerLiteral 0x1f90b6cf148 <line:64:27> 'int' 32
|   | | |         `-ParenExpr 0x1f90b6cf3a0 <line:60:17, col:37> 'double'
|   | | |           `-CStyleCastExpr 0x1f90b6cf378 <col:18, col:36> 'double' <IntegralToFloating>
|   | | |             `-ParenExpr 0x1f90b6cf358 <col:26, col:36> 'unsigned long long'
|   | | |               `-BinaryOperator 0x1f90b6cf300 <col:27, col:35> 'unsigned long long' '<<'
|   | | |                 |-IntegerLiteral 0x1f90b6cf290 <col:27> 'unsigned long long' 1
|   | | |                 `-ParenExpr 0x1f90b6cf2e0 <col:33, col:35> 'int'
|   | | |                   `-IntegerLiteral 0x1f90b6cf2b8 <line:65:28> 'int' 34
|   | | |-BinaryOperator 0x1f90b6cfa30 <line:327:9, line:60:37> 'double' '='
|   | | | |-DeclRefExpr 0x1f90b6cf460 <line:327:9> 'double' lvalue Var 0x1f90b6c5620 'c0hi' 'double'
|   | | | `-BinaryOperator 0x1f90b6cfa10 <col:16, line:60:37> 'double' '-'
|   | | |   |-ParenExpr 0x1f90b6cf770 <line:327:16, col:37> 'double'
|   | | |   | `-BinaryOperator 0x1f90b6cf750 <col:17, line:60:37> 'double' '+'
|   | | |   |   |-ImplicitCastExpr 0x1f90b6cf738 <line:327:17> 'double' <LValueToRValue>
|   | | |   |   | `-DeclRefExpr 0x1f90b6cf498 <col:17> 'double' lvalue Var 0x1f90b6c51c0 'h0hi' 'double'
|   | | |   |   `-BinaryOperator 0x1f90b6cf718 <line:60:17, col:37> 'double' '*'
|   | | |   |     |-ParenExpr 0x1f90b6cf5c8 <col:17, col:37> 'double'
|   | | |   |     | `-CStyleCastExpr 0x1f90b6cf5a0 <col:18, col:36> 'double' <IntegralToFloating>
|   | | |   |     |   `-ParenExpr 0x1f90b6cf580 <col:26, col:36> 'unsigned long long'
|   | | |   |     |     `-BinaryOperator 0x1f90b6cf528 <col:27, col:35> 'unsigned long long' '<<'
|   | | |   |     |       |-IntegerLiteral 0x1f90b6cf4b8 <col:27> 'unsigned long long' 1
|   | | |   |     |       `-ParenExpr 0x1f90b6cf508 <col:33, col:35> 'int'
|   | | |   |     |         `-IntegerLiteral 0x1f90b6cf4e0 <line:327:28> 'int' 52
|   | | |   |     `-ParenExpr 0x1f90b6cf6f8 <line:60:17, col:37> 'double'
|   | | |   |       `-CStyleCastExpr 0x1f90b6cf6d0 <col:18, col:36> 'double' <IntegralToFloating>
|   | | |   |         `-ParenExpr 0x1f90b6cf6b0 <col:26, col:36> 'unsigned long long'
|   | | |   |           `-BinaryOperator 0x1f90b6cf658 <col:27, col:35> 'unsigned long long' '<<'
|   | | |   |             |-IntegerLiteral 0x1f90b6cf5e8 <col:27> 'unsigned long long' 1
|   | | |   |             `-ParenExpr 0x1f90b6cf638 <col:33, col:35> 'int'
|   | | |   |               `-IntegerLiteral 0x1f90b6cf610 <line:62:20> 'int' 32
|   | | |   `-BinaryOperator 0x1f90b6cf9f0 <line:60:17, col:37> 'double' '*'
|   | | |     |-ParenExpr 0x1f90b6cf8a0 <col:17, col:37> 'double'
|   | | |     | `-CStyleCastExpr 0x1f90b6cf878 <col:18, col:36> 'double' <IntegralToFloating>
|   | | |     |   `-ParenExpr 0x1f90b6cf858 <col:26, col:36> 'unsigned long long'
|   | | |     |     `-BinaryOperator 0x1f90b6cf800 <col:27, col:35> 'unsigned long long' '<<'
|   | | |     |       |-IntegerLiteral 0x1f90b6cf790 <col:27> 'unsigned long long' 1
|   | | |     |       `-ParenExpr 0x1f90b6cf7e0 <col:33, col:35> 'int'
|   | | |     |         `-IntegerLiteral 0x1f90b6cf7b8 <line:327:46> 'int' 52
|   | | |     `-ParenExpr 0x1f90b6cf9d0 <line:60:17, col:37> 'double'
|   | | |       `-CStyleCastExpr 0x1f90b6cf9a8 <col:18, col:36> 'double' <IntegralToFloating>
|   | | |         `-ParenExpr 0x1f90b6cf988 <col:26, col:36> 'unsigned long long'
|   | | |           `-BinaryOperator 0x1f90b6cf930 <col:27, col:35> 'unsigned long long' '<<'
|   | | |             |-IntegerLiteral 0x1f90b6cf8c0 <col:27> 'unsigned long long' 1
|   | | |             `-ParenExpr 0x1f90b6cf910 <col:33, col:35> 'int'
|   | | |               `-IntegerLiteral 0x1f90b6cf8e8 <line:62:20> 'int' 32
|   | | |-BinaryOperator 0x1f90b6c92a0 <line:328:9, line:63:30> 'double' '='
|   | | | |-DeclRefExpr 0x1f90b6cfa50 <line:328:9> 'double' lvalue Var 0x1f90b6c5720 'c1hi' 'double'
|   | | | `-BinaryOperator 0x1f90b6c9280 <col:16, line:63:30> 'double' '-'
|   | | |   |-ParenExpr 0x1f90b6cfed0 <line:328:16, col:37> 'double'
|   | | |   | `-BinaryOperator 0x1f90b6cfeb0 <col:17, line:63:30> 'double' '+'
|   | | |   |   |-ImplicitCastExpr 0x1f90b6cfe98 <line:328:17> 'double' <LValueToRValue>
|   | | |   |   | `-DeclRefExpr 0x1f90b6cfa88 <col:17> 'double' lvalue Var 0x1f90b6c52c0 'h1hi' 'double'
|   | | |   |   `-BinaryOperator 0x1f90b6cfe78 <line:60:17, line:63:30> 'double' '*'
|   | | |   |     |-ParenExpr 0x1f90b6cfbb8 <line:60:17, col:37> 'double'
|   | | |   |     | `-CStyleCastExpr 0x1f90b6cfb90 <col:18, col:36> 'double' <IntegralToFloating>
|   | | |   |     |   `-ParenExpr 0x1f90b6cfb70 <col:26, col:36> 'unsigned long long'
|   | | |   |     |     `-BinaryOperator 0x1f90b6cfb18 <col:27, col:35> 'unsigned long long' '<<'
|   | | |   |     |       |-IntegerLiteral 0x1f90b6cfaa8 <col:27> 'unsigned long long' 1
|   | | |   |     |       `-ParenExpr 0x1f90b6cfaf8 <col:33, col:35> 'int'
|   | | |   |     |         `-IntegerLiteral 0x1f90b6cfad0 <line:328:28> 'int' 52
|   | | |   |     `-ParenExpr 0x1f90b6cfe58 <line:63:16, col:30> 'double'
|   | | |   |       `-BinaryOperator 0x1f90b6cfe38 <line:60:17, col:37> 'double' '*'
|   | | |   |         |-ParenExpr 0x1f90b6cfce8 <col:17, col:37> 'double'
|   | | |   |         | `-CStyleCastExpr 0x1f90b6cfcc0 <col:18, col:36> 'double' <IntegralToFloating>
|   | | |   |         |   `-ParenExpr 0x1f90b6cfca0 <col:26, col:36> 'unsigned long long'
|   | | |   |         |     `-BinaryOperator 0x1f90b6cfc48 <col:27, col:35> 'unsigned long long' '<<'
|   | | |   |         |       |-IntegerLiteral 0x1f90b6cfbd8 <col:27> 'unsigned long long' 1
|   | | |   |         |       `-ParenExpr 0x1f90b6cfc28 <col:33, col:35> 'int'
|   | | |   |         |         `-IntegerLiteral 0x1f90b6cfc00 <line:62:20> 'int' 32
|   | | |   |         `-ParenExpr 0x1f90b6cfe18 <line:60:17, col:37> 'double'
|   | | |   |           `-CStyleCastExpr 0x1f90b6cfdf0 <col:18, col:36> 'double' <IntegralToFloating>
|   | | |   |             `-ParenExpr 0x1f90b6cfdd0 <col:26, col:36> 'unsigned long long'
|   | | |   |               `-BinaryOperator 0x1f90b6cfd78 <col:27, col:35> 'unsigned long long' '<<'
|   | | |   |                 |-IntegerLiteral 0x1f90b6cfd08 <col:27> 'unsigned long long' 1
|   | | |   |                 `-ParenExpr 0x1f90b6cfd58 <col:33, col:35> 'int'
|   | | |   |                   `-IntegerLiteral 0x1f90b6cfd30 <line:63:27> 'int' 32
|   | | |   `-BinaryOperator 0x1f90b6c9260 <line:60:17, line:63:30> 'double' '*'
|   | | |     |-ParenExpr 0x1f90b6d0000 <line:60:17, col:37> 'double'
|   | | |     | `-CStyleCastExpr 0x1f90b6cffd8 <col:18, col:36> 'double' <IntegralToFloating>
|   | | |     |   `-ParenExpr 0x1f90b6cffb8 <col:26, col:36> 'unsigned long long'
|   | | |     |     `-BinaryOperator 0x1f90b6cff60 <col:27, col:35> 'unsigned long long' '<<'
|   | | |     |       |-IntegerLiteral 0x1f90b6cfef0 <col:27> 'unsigned long long' 1
|   | | |     |       `-ParenExpr 0x1f90b6cff40 <col:33, col:35> 'int'
|   | | |     |         `-IntegerLiteral 0x1f90b6cff18 <line:328:46> 'int' 52
|   | | |     `-ParenExpr 0x1f90b6c9240 <line:63:16, col:30> 'double'
|   | | |       `-BinaryOperator 0x1f90b6c9220 <line:60:17, col:37> 'double' '*'
|   | | |         |-ParenExpr 0x1f90b6c90d0 <col:17, col:37> 'double'
|   | | |         | `-CStyleCastExpr 0x1f90b6c90a8 <col:18, col:36> 'double' <IntegralToFloating>
|   | | |         |   `-ParenExpr 0x1f90b6c9088 <col:26, col:36> 'unsigned long long'
|   | | |         |     `-BinaryOperator 0x1f90b6c9030 <col:27, col:35> 'unsigned long long' '<<'
|   | | |         |       |-IntegerLiteral 0x1f90b6c8fc0 <col:27> 'unsigned long long' 1
|   | | |         |       `-ParenExpr 0x1f90b6c9010 <col:33, col:35> 'int'
|   | | |         |         `-IntegerLiteral 0x1f90b6c8fe8 <line:62:20> 'int' 32
|   | | |         `-ParenExpr 0x1f90b6c9200 <line:60:17, col:37> 'double'
|   | | |           `-CStyleCastExpr 0x1f90b6c91d8 <col:18, col:36> 'double' <IntegralToFloating>
|   | | |             `-ParenExpr 0x1f90b6c91b8 <col:26, col:36> 'unsigned long long'
|   | | |               `-BinaryOperator 0x1f90b6c9160 <col:27, col:35> 'unsigned long long' '<<'
|   | | |                 |-IntegerLiteral 0x1f90b6c90f0 <col:27> 'unsigned long long' 1
|   | | |                 `-ParenExpr 0x1f90b6c9140 <col:33, col:35> 'int'
|   | | |                   `-IntegerLiteral 0x1f90b6c9118 <line:63:27> 'int' 32
|   | | |-BinaryOperator 0x1f90b6c9e50 <line:329:9, line:64:30> 'double' '='
|   | | | |-DeclRefExpr 0x1f90b6c92c0 <line:329:9> 'double' lvalue Var 0x1f90b6c5820 'c2hi' 'double'
|   | | | `-BinaryOperator 0x1f90b6c9e30 <col:16, line:64:30> 'double' '-'
|   | | |   |-ParenExpr 0x1f90b6c98b0 <line:329:16, col:37> 'double'
|   | | |   | `-BinaryOperator 0x1f90b6c9890 <col:17, line:64:30> 'double' '+'
|   | | |   |   |-ImplicitCastExpr 0x1f90b6c9878 <line:329:17> 'double' <LValueToRValue>
|   | | |   |   | `-DeclRefExpr 0x1f90b6c92f8 <col:17> 'double' lvalue Var 0x1f90b6c53c0 'h2hi' 'double'
|   | | |   |   `-BinaryOperator 0x1f90b6c9858 <line:60:17, line:64:30> 'double' '*'
|   | | |   |     |-ParenExpr 0x1f90b6c9428 <line:60:17, col:37> 'double'
|   | | |   |     | `-CStyleCastExpr 0x1f90b6c9400 <col:18, col:36> 'double' <IntegralToFloating>
|   | | |   |     |   `-ParenExpr 0x1f90b6c93e0 <col:26, col:36> 'unsigned long long'
|   | | |   |     |     `-BinaryOperator 0x1f90b6c9388 <col:27, col:35> 'unsigned long long' '<<'
|   | | |   |     |       |-IntegerLiteral 0x1f90b6c9318 <col:27> 'unsigned long long' 1
|   | | |   |     |       `-ParenExpr 0x1f90b6c9368 <col:33, col:35> 'int'
|   | | |   |     |         `-IntegerLiteral 0x1f90b6c9340 <line:329:28> 'int' 52
|   | | |   |     `-ParenExpr 0x1f90b6c9838 <line:64:16, col:30> 'double'
|   | | |   |       `-BinaryOperator 0x1f90b6c9818 <line:63:16, line:60:37> 'double' '*'
|   | | |   |         |-ParenExpr 0x1f90b6c96c8 <line:63:16, col:30> 'double'
|   | | |   |         | `-BinaryOperator 0x1f90b6c96a8 <line:60:17, col:37> 'double' '*'
|   | | |   |         |   |-ParenExpr 0x1f90b6c9558 <col:17, col:37> 'double'
|   | | |   |         |   | `-CStyleCastExpr 0x1f90b6c9530 <col:18, col:36> 'double' <IntegralToFloating>
|   | | |   |         |   |   `-ParenExpr 0x1f90b6c9510 <col:26, col:36> 'unsigned long long'
|   | | |   |         |   |     `-BinaryOperator 0x1f90b6c94b8 <col:27, col:35> 'unsigned long long' '<<'
|   | | |   |         |   |       |-IntegerLiteral 0x1f90b6c9448 <col:27> 'unsigned long long' 1
|   | | |   |         |   |       `-ParenExpr 0x1f90b6c9498 <col:33, col:35> 'int'
|   | | |   |         |   |         `-IntegerLiteral 0x1f90b6c9470 <line:62:20> 'int' 32
|   | | |   |         |   `-ParenExpr 0x1f90b6c9688 <line:60:17, col:37> 'double'
|   | | |   |         |     `-CStyleCastExpr 0x1f90b6c9660 <col:18, col:36> 'double' <IntegralToFloating>
|   | | |   |         |       `-ParenExpr 0x1f90b6c9640 <col:26, col:36> 'unsigned long long'
|   | | |   |         |         `-BinaryOperator 0x1f90b6c95e8 <col:27, col:35> 'unsigned long long' '<<'
|   | | |   |         |           |-IntegerLiteral 0x1f90b6c9578 <col:27> 'unsigned long long' 1
|   | | |   |         |           `-ParenExpr 0x1f90b6c95c8 <col:33, col:35> 'int'
|   | | |   |         |             `-IntegerLiteral 0x1f90b6c95a0 <line:63:27> 'int' 32
|   | | |   |         `-ParenExpr 0x1f90b6c97f8 <line:60:17, col:37> 'double'
|   | | |   |           `-CStyleCastExpr 0x1f90b6c97d0 <col:18, col:36> 'double' <IntegralToFloating>
|   | | |   |             `-ParenExpr 0x1f90b6c97b0 <col:26, col:36> 'unsigned long long'
|   | | |   |               `-BinaryOperator 0x1f90b6c9758 <col:27, col:35> 'unsigned long long' '<<'
|   | | |   |                 |-IntegerLiteral 0x1f90b6c96e8 <col:27> 'unsigned long long' 1
|   | | |   |                 `-ParenExpr 0x1f90b6c9738 <col:33, col:35> 'int'
|   | | |   |                   `-IntegerLiteral 0x1f90b6c9710 <line:64:27> 'int' 32
|   | | |   `-BinaryOperator 0x1f90b6c9e10 <line:60:17, line:64:30> 'double' '*'
|   | | |     |-ParenExpr 0x1f90b6c99e0 <line:60:17, col:37> 'double'
|   | | |     | `-CStyleCastExpr 0x1f90b6c99b8 <col:18, col:36> 'double' <IntegralToFloating>
|   | | |     |   `-ParenExpr 0x1f90b6c9998 <col:26, col:36> 'unsigned long long'
|   | | |     |     `-BinaryOperator 0x1f90b6c9940 <col:27, col:35> 'unsigned long long' '<<'
|   | | |     |       |-IntegerLiteral 0x1f90b6c98d0 <col:27> 'unsigned long long' 1
|   | | |     |       `-ParenExpr 0x1f90b6c9920 <col:33, col:35> 'int'
|   | | |     |         `-IntegerLiteral 0x1f90b6c98f8 <line:329:46> 'int' 52
|   | | |     `-ParenExpr 0x1f90b6c9df0 <line:64:16, col:30> 'double'
|   | | |       `-BinaryOperator 0x1f90b6c9dd0 <line:63:16, line:60:37> 'double' '*'
|   | | |         |-ParenExpr 0x1f90b6c9c80 <line:63:16, col:30> 'double'
|   | | |         | `-BinaryOperator 0x1f90b6c9c60 <line:60:17, col:37> 'double' '*'
|   | | |         |   |-ParenExpr 0x1f90b6c9b10 <col:17, col:37> 'double'
|   | | |         |   | `-CStyleCastExpr 0x1f90b6c9ae8 <col:18, col:36> 'double' <IntegralToFloating>
|   | | |         |   |   `-ParenExpr 0x1f90b6c9ac8 <col:26, col:36> 'unsigned long long'
|   | | |         |   |     `-BinaryOperator 0x1f90b6c9a70 <col:27, col:35> 'unsigned long long' '<<'
|   | | |         |   |       |-IntegerLiteral 0x1f90b6c9a00 <col:27> 'unsigned long long' 1
|   | | |         |   |       `-ParenExpr 0x1f90b6c9a50 <col:33, col:35> 'int'
|   | | |         |   |         `-IntegerLiteral 0x1f90b6c9a28 <line:62:20> 'int' 32
|   | | |         |   `-ParenExpr 0x1f90b6c9c40 <line:60:17, col:37> 'double'
|   | | |         |     `-CStyleCastExpr 0x1f90b6c9c18 <col:18, col:36> 'double' <IntegralToFloating>
|   | | |         |       `-ParenExpr 0x1f90b6c9bf8 <col:26, col:36> 'unsigned long long'
|   | | |         |         `-BinaryOperator 0x1f90b6c9ba0 <col:27, col:35> 'unsigned long long' '<<'
|   | | |         |           |-IntegerLiteral 0x1f90b6c9b30 <col:27> 'unsigned long long' 1
|   | | |         |           `-ParenExpr 0x1f90b6c9b80 <col:33, col:35> 'int'
|   | | |         |             `-IntegerLiteral 0x1f90b6c9b58 <line:63:27> 'int' 32
|   | | |         `-ParenExpr 0x1f90b6c9db0 <line:60:17, col:37> 'double'
|   | | |           `-CStyleCastExpr 0x1f90b6c9d88 <col:18, col:36> 'double' <IntegralToFloating>
|   | | |             `-ParenExpr 0x1f90b6c9d68 <col:26, col:36> 'unsigned long long'
|   | | |               `-BinaryOperator 0x1f90b6c9d10 <col:27, col:35> 'unsigned long long' '<<'
|   | | |                 |-IntegerLiteral 0x1f90b6c9ca0 <col:27> 'unsigned long long' 1
|   | | |                 `-ParenExpr 0x1f90b6c9cf0 <col:33, col:35> 'int'
|   | | |                   `-IntegerLiteral 0x1f90b6c9cc8 <line:64:27> 'int' 32
|   | | |-BinaryOperator 0x1f90b6d0d60 <line:330:9, line:65:31> 'double' '='
|   | | | |-DeclRefExpr 0x1f90b6c9e70 <line:330:9> 'double' lvalue Var 0x1f90b6c5920 'c3hi' 'double'
|   | | | `-BinaryOperator 0x1f90b6d0d40 <col:16, line:65:31> 'double' '-'
|   | | |   |-ParenExpr 0x1f90b6d0650 <line:330:16, col:38> 'double'
|   | | |   | `-BinaryOperator 0x1f90b6d0630 <col:17, line:65:31> 'double' '+'
|   | | |   |   |-ImplicitCastExpr 0x1f90b6d0618 <line:330:17> 'double' <LValueToRValue>
|   | | |   |   | `-DeclRefExpr 0x1f90b6c9ea8 <col:17> 'double' lvalue Var 0x1f90b6c54c0 'h3hi' 'double'
|   | | |   |   `-BinaryOperator 0x1f90b6d05f8 <line:60:17, line:65:31> 'double' '*'
|   | | |   |     |-ParenExpr 0x1f90b6d0058 <line:60:17, col:37> 'double'
|   | | |   |     | `-CStyleCastExpr 0x1f90b6d0030 <col:18, col:36> 'double' <IntegralToFloating>
|   | | |   |     |   `-ParenExpr 0x1f90b6c9f90 <col:26, col:36> 'unsigned long long'
|   | | |   |     |     `-BinaryOperator 0x1f90b6c9f38 <col:27, col:35> 'unsigned long long' '<<'
|   | | |   |     |       |-IntegerLiteral 0x1f90b6c9ec8 <col:27> 'unsigned long long' 1
|   | | |   |     |       `-ParenExpr 0x1f90b6c9f18 <col:33, col:35> 'int'
|   | | |   |     |         `-IntegerLiteral 0x1f90b6c9ef0 <line:330:28> 'int' 52
|   | | |   |     `-ParenExpr 0x1f90b6d05d8 <line:65:17, col:31> 'double'
|   | | |   |       `-BinaryOperator 0x1f90b6d05b8 <line:64:16, line:60:37> 'double' '*'
|   | | |   |         |-ParenExpr 0x1f90b6d0468 <line:64:16, col:30> 'double'
|   | | |   |         | `-BinaryOperator 0x1f90b6d0448 <line:63:16, line:60:37> 'double' '*'
|   | | |   |         |   |-ParenExpr 0x1f90b6d02f8 <line:63:16, col:30> 'double'
|   | | |   |         |   | `-BinaryOperator 0x1f90b6d02d8 <line:60:17, col:37> 'double' '*'
|   | | |   |         |   |   |-ParenExpr 0x1f90b6d0188 <col:17, col:37> 'double'
|   | | |   |         |   |   | `-CStyleCastExpr 0x1f90b6d0160 <col:18, col:36> 'double' <IntegralToFloating>
|   | | |   |         |   |   |   `-ParenExpr 0x1f90b6d0140 <col:26, col:36> 'unsigned long long'
|   | | |   |         |   |   |     `-BinaryOperator 0x1f90b6d00e8 <col:27, col:35> 'unsigned long long' '<<'
|   | | |   |         |   |   |       |-IntegerLiteral 0x1f90b6d0078 <col:27> 'unsigned long long' 1
|   | | |   |         |   |   |       `-ParenExpr 0x1f90b6d00c8 <col:33, col:35> 'int'
|   | | |   |         |   |   |         `-IntegerLiteral 0x1f90b6d00a0 <line:62:20> 'int' 32
|   | | |   |         |   |   `-ParenExpr 0x1f90b6d02b8 <line:60:17, col:37> 'double'
|   | | |   |         |   |     `-CStyleCastExpr 0x1f90b6d0290 <col:18, col:36> 'double' <IntegralToFloating>
|   | | |   |         |   |       `-ParenExpr 0x1f90b6d0270 <col:26, col:36> 'unsigned long long'
|   | | |   |         |   |         `-BinaryOperator 0x1f90b6d0218 <col:27, col:35> 'unsigned long long' '<<'
|   | | |   |         |   |           |-IntegerLiteral 0x1f90b6d01a8 <col:27> 'unsigned long long' 1
|   | | |   |         |   |           `-ParenExpr 0x1f90b6d01f8 <col:33, col:35> 'int'
|   | | |   |         |   |             `-IntegerLiteral 0x1f90b6d01d0 <line:63:27> 'int' 32
|   | | |   |         |   `-ParenExpr 0x1f90b6d0428 <line:60:17, col:37> 'double'
|   | | |   |         |     `-CStyleCastExpr 0x1f90b6d0400 <col:18, col:36> 'double' <IntegralToFloating>
|   | | |   |         |       `-ParenExpr 0x1f90b6d03e0 <col:26, col:36> 'unsigned long long'
|   | | |   |         |         `-BinaryOperator 0x1f90b6d0388 <col:27, col:35> 'unsigned long long' '<<'
|   | | |   |         |           |-IntegerLiteral 0x1f90b6d0318 <col:27> 'unsigned long long' 1
|   | | |   |         |           `-ParenExpr 0x1f90b6d0368 <col:33, col:35> 'int'
|   | | |   |         |             `-IntegerLiteral 0x1f90b6d0340 <line:64:27> 'int' 32
|   | | |   |         `-ParenExpr 0x1f90b6d0598 <line:60:17, col:37> 'double'
|   | | |   |           `-CStyleCastExpr 0x1f90b6d0570 <col:18, col:36> 'double' <IntegralToFloating>
|   | | |   |             `-ParenExpr 0x1f90b6d0550 <col:26, col:36> 'unsigned long long'
|   | | |   |               `-BinaryOperator 0x1f90b6d04f8 <col:27, col:35> 'unsigned long long' '<<'
|   | | |   |                 |-IntegerLiteral 0x1f90b6d0488 <col:27> 'unsigned long long' 1
|   | | |   |                 `-ParenExpr 0x1f90b6d04d8 <col:33, col:35> 'int'
|   | | |   |                   `-IntegerLiteral 0x1f90b6d04b0 <line:65:28> 'int' 34
|   | | |   `-BinaryOperator 0x1f90b6d0d20 <line:60:17, line:65:31> 'double' '*'
|   | | |     |-ParenExpr 0x1f90b6d0780 <line:60:17, col:37> 'double'
|   | | |     | `-CStyleCastExpr 0x1f90b6d0758 <col:18, col:36> 'double' <IntegralToFloating>
|   | | |     |   `-ParenExpr 0x1f90b6d0738 <col:26, col:36> 'unsigned long long'
|   | | |     |     `-BinaryOperator 0x1f90b6d06e0 <col:27, col:35> 'unsigned long long' '<<'
|   | | |     |       |-IntegerLiteral 0x1f90b6d0670 <col:27> 'unsigned long long' 1
|   | | |     |       `-ParenExpr 0x1f90b6d06c0 <col:33, col:35> 'int'
|   | | |     |         `-IntegerLiteral 0x1f90b6d0698 <line:330:46> 'int' 52
|   | | |     `-ParenExpr 0x1f90b6d0d00 <line:65:17, col:31> 'double'
|   | | |       `-BinaryOperator 0x1f90b6d0ce0 <line:64:16, line:60:37> 'double' '*'
|   | | |         |-ParenExpr 0x1f90b6d0b90 <line:64:16, col:30> 'double'
|   | | |         | `-BinaryOperator 0x1f90b6d0b70 <line:63:16, line:60:37> 'double' '*'
|   | | |         |   |-ParenExpr 0x1f90b6d0a20 <line:63:16, col:30> 'double'
|   | | |         |   | `-BinaryOperator 0x1f90b6d0a00 <line:60:17, col:37> 'double' '*'
|   | | |         |   |   |-ParenExpr 0x1f90b6d08b0 <col:17, col:37> 'double'
|   | | |         |   |   | `-CStyleCastExpr 0x1f90b6d0888 <col:18, col:36> 'double' <IntegralToFloating>
|   | | |         |   |   |   `-ParenExpr 0x1f90b6d0868 <col:26, col:36> 'unsigned long long'
|   | | |         |   |   |     `-BinaryOperator 0x1f90b6d0810 <col:27, col:35> 'unsigned long long' '<<'
|   | | |         |   |   |       |-IntegerLiteral 0x1f90b6d07a0 <col:27> 'unsigned long long' 1
|   | | |         |   |   |       `-ParenExpr 0x1f90b6d07f0 <col:33, col:35> 'int'
|   | | |         |   |   |         `-IntegerLiteral 0x1f90b6d07c8 <line:62:20> 'int' 32
|   | | |         |   |   `-ParenExpr 0x1f90b6d09e0 <line:60:17, col:37> 'double'
|   | | |         |   |     `-CStyleCastExpr 0x1f90b6d09b8 <col:18, col:36> 'double' <IntegralToFloating>
|   | | |         |   |       `-ParenExpr 0x1f90b6d0998 <col:26, col:36> 'unsigned long long'
|   | | |         |   |         `-BinaryOperator 0x1f90b6d0940 <col:27, col:35> 'unsigned long long' '<<'
|   | | |         |   |           |-IntegerLiteral 0x1f90b6d08d0 <col:27> 'unsigned long long' 1
|   | | |         |   |           `-ParenExpr 0x1f90b6d0920 <col:33, col:35> 'int'
|   | | |         |   |             `-IntegerLiteral 0x1f90b6d08f8 <line:63:27> 'int' 32
|   | | |         |   `-ParenExpr 0x1f90b6d0b50 <line:60:17, col:37> 'double'
|   | | |         |     `-CStyleCastExpr 0x1f90b6d0b28 <col:18, col:36> 'double' <IntegralToFloating>
|   | | |         |       `-ParenExpr 0x1f90b6d0b08 <col:26, col:36> 'unsigned long long'
|   | | |         |         `-BinaryOperator 0x1f90b6d0ab0 <col:27, col:35> 'unsigned long long' '<<'
|   | | |         |           |-IntegerLiteral 0x1f90b6d0a40 <col:27> 'unsigned long long' 1
|   | | |         |           `-ParenExpr 0x1f90b6d0a90 <col:33, col:35> 'int'
|   | | |         |             `-IntegerLiteral 0x1f90b6d0a68 <line:64:27> 'int' 32
|   | | |         `-ParenExpr 0x1f90b6d0cc0 <line:60:17, col:37> 'double'
|   | | |           `-CStyleCastExpr 0x1f90b6d0c98 <col:18, col:36> 'double' <IntegralToFloating>
|   | | |             `-ParenExpr 0x1f90b6d0c78 <col:26, col:36> 'unsigned long long'
|   | | |               `-BinaryOperator 0x1f90b6d0c20 <col:27, col:35> 'unsigned long long' '<<'
|   | | |                 |-IntegerLiteral 0x1f90b6d0bb0 <col:27> 'unsigned long long' 1
|   | | |                 `-ParenExpr 0x1f90b6d0c00 <col:33, col:35> 'int'
|   | | |                   `-IntegerLiteral 0x1f90b6d0bd8 <line:65:28> 'int' 34
|   | | |-BinaryOperator 0x1f90b6d0ea8 <line:335:9, col:31> 'double' '='
|   | | | |-DeclRefExpr 0x1f90b6d0d80 <col:9> 'double' lvalue Var 0x1f90b6c4f80 'x1' 'double'
|   | | | `-BinaryOperator 0x1f90b6d0e88 <col:15, col:31> 'double' '+'
|   | | |   |-ParenExpr 0x1f90b6d0e30 <col:15, col:27> 'double'
|   | | |   | `-BinaryOperator 0x1f90b6d0e10 <col:16, col:23> 'double' '-'
|   | | |   |   |-ImplicitCastExpr 0x1f90b6d0de0 <col:16> 'double' <LValueToRValue>
|   | | |   |   | `-DeclRefExpr 0x1f90b6d0da0 <col:16> 'double' lvalue Var 0x1f90b6c5240 'h1lo' 'double'
|   | | |   |   `-ImplicitCastExpr 0x1f90b6d0df8 <col:23> 'double' <LValueToRValue>
|   | | |   |     `-DeclRefExpr 0x1f90b6d0dc0 <col:23> 'double' lvalue Var 0x1f90b6c56a0 'c1lo' 'double'
|   | | |   `-ImplicitCastExpr 0x1f90b6d0e70 <col:31> 'double' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x1f90b6d0e50 <col:31> 'double' lvalue Var 0x1f90b6c55a0 'c0lo' 'double'
|   | | |-BinaryOperator 0x1f90b6d0ff0 <line:336:9, col:31> 'double' '='
|   | | | |-DeclRefExpr 0x1f90b6d0ec8 <col:9> 'double' lvalue Var 0x1f90b6c5000 'x2' 'double'
|   | | | `-BinaryOperator 0x1f90b6d0fd0 <col:15, col:31> 'double' '+'
|   | | |   |-ParenExpr 0x1f90b6d0f78 <col:15, col:27> 'double'
|   | | |   | `-BinaryOperator 0x1f90b6d0f58 <col:16, col:23> 'double' '-'
|   | | |   |   |-ImplicitCastExpr 0x1f90b6d0f28 <col:16> 'double' <LValueToRValue>
|   | | |   |   | `-DeclRefExpr 0x1f90b6d0ee8 <col:16> 'double' lvalue Var 0x1f90b6c5340 'h2lo' 'double'
|   | | |   |   `-ImplicitCastExpr 0x1f90b6d0f40 <col:23> 'double' <LValueToRValue>
|   | | |   |     `-DeclRefExpr 0x1f90b6d0f08 <col:23> 'double' lvalue Var 0x1f90b6c57a0 'c2lo' 'double'
|   | | |   `-ImplicitCastExpr 0x1f90b6d0fb8 <col:31> 'double' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x1f90b6d0f98 <col:31> 'double' lvalue Var 0x1f90b6c56a0 'c1lo' 'double'
|   | | |-BinaryOperator 0x1f90b6cd108 <line:337:9, col:31> 'double' '='
|   | | | |-DeclRefExpr 0x1f90b6d1010 <col:9> 'double' lvalue Var 0x1f90b6c5080 'x3' 'double'
|   | | | `-BinaryOperator 0x1f90b6cd0e8 <col:15, col:31> 'double' '+'
|   | | |   |-ParenExpr 0x1f90b6cd090 <col:15, col:27> 'double'
|   | | |   | `-BinaryOperator 0x1f90b6cd070 <col:16, col:23> 'double' '-'
|   | | |   |   |-ImplicitCastExpr 0x1f90b6cd040 <col:16> 'double' <LValueToRValue>
|   | | |   |   | `-DeclRefExpr 0x1f90b6cd000 <col:16> 'double' lvalue Var 0x1f90b6c5440 'h3lo' 'double'
|   | | |   |   `-ImplicitCastExpr 0x1f90b6cd058 <col:23> 'double' <LValueToRValue>
|   | | |   |     `-DeclRefExpr 0x1f90b6cd020 <col:23> 'double' lvalue Var 0x1f90b6c58a0 'c3lo' 'double'
|   | | |   `-ImplicitCastExpr 0x1f90b6cd0d0 <col:31> 'double' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x1f90b6cd0b0 <col:31> 'double' lvalue Var 0x1f90b6c57a0 'c2lo' 'double'
|   | | |-BinaryOperator 0x1f90b6cd858 <line:338:9, col:49> 'double' '='
|   | | | |-DeclRefExpr 0x1f90b6cd128 <col:9> 'double' lvalue Var 0x1f90b6c4ea0 'x0' 'double'
|   | | | `-BinaryOperator 0x1f90b6cd838 <col:15, col:49> 'double' '+'
|   | | |   |-ParenExpr 0x1f90b6cd1d8 <col:15, col:27> 'double'
|   | | |   | `-BinaryOperator 0x1f90b6cd1b8 <col:16, col:23> 'double' '-'
|   | | |   |   |-ImplicitCastExpr 0x1f90b6cd188 <col:16> 'double' <LValueToRValue>
|   | | |   |   | `-DeclRefExpr 0x1f90b6cd148 <col:16> 'double' lvalue Var 0x1f90b6c5140 'h0lo' 'double'
|   | | |   |   `-ImplicitCastExpr 0x1f90b6cd1a0 <col:23> 'double' <LValueToRValue>
|   | | |   |     `-DeclRefExpr 0x1f90b6cd168 <col:23> 'double' lvalue Var 0x1f90b6c55a0 'c0lo' 'double'
|   | | |   `-BinaryOperator 0x1f90b6cd818 <col:31, col:49> 'double' '*'
|   | | |     |-ImplicitCastExpr 0x1f90b6cd800 <col:31> 'double' <LValueToRValue>
|   | | |     | `-DeclRefExpr 0x1f90b6cd1f8 <col:31> 'double' lvalue Var 0x1f90b6c58a0 'c3lo' 'double'
|   | | |     `-ParenExpr 0x1f90b6cd7e0 <col:38, col:49> 'double'
|   | | |       `-BinaryOperator 0x1f90b6cd7c0 <col:39, line:65:31> 'double' '/'
|   | | |         |-FloatingLiteral 0x1f90b6cd218 <line:338:39> 'double' 5.000000e+00
|   | | |         `-ParenExpr 0x1f90b6cd7a0 <line:65:17, col:31> 'double'
|   | | |           `-BinaryOperator 0x1f90b6cd780 <line:64:16, line:60:37> 'double' '*'
|   | | |             |-ParenExpr 0x1f90b6cd630 <line:64:16, col:30> 'double'
|   | | |             | `-BinaryOperator 0x1f90b6cd610 <line:63:16, line:60:37> 'double' '*'
|   | | |             |   |-ParenExpr 0x1f90b6cd4c0 <line:63:16, col:30> 'double'
|   | | |             |   | `-BinaryOperator 0x1f90b6cd4a0 <line:60:17, col:37> 'double' '*'
|   | | |             |   |   |-ParenExpr 0x1f90b6cd350 <col:17, col:37> 'double'
|   | | |             |   |   | `-CStyleCastExpr 0x1f90b6cd328 <col:18, col:36> 'double' <IntegralToFloating>
|   | | |             |   |   |   `-ParenExpr 0x1f90b6cd308 <col:26, col:36> 'unsigned long long'
|   | | |             |   |   |     `-BinaryOperator 0x1f90b6cd2b0 <col:27, col:35> 'unsigned long long' '<<'
|   | | |             |   |   |       |-IntegerLiteral 0x1f90b6cd240 <col:27> 'unsigned long long' 1
|   | | |             |   |   |       `-ParenExpr 0x1f90b6cd290 <col:33, col:35> 'int'
|   | | |             |   |   |         `-IntegerLiteral 0x1f90b6cd268 <line:62:20> 'int' 32
|   | | |             |   |   `-ParenExpr 0x1f90b6cd480 <line:60:17, col:37> 'double'
|   | | |             |   |     `-CStyleCastExpr 0x1f90b6cd458 <col:18, col:36> 'double' <IntegralToFloating>
|   | | |             |   |       `-ParenExpr 0x1f90b6cd438 <col:26, col:36> 'unsigned long long'
|   | | |             |   |         `-BinaryOperator 0x1f90b6cd3e0 <col:27, col:35> 'unsigned long long' '<<'
|   | | |             |   |           |-IntegerLiteral 0x1f90b6cd370 <col:27> 'unsigned long long' 1
|   | | |             |   |           `-ParenExpr 0x1f90b6cd3c0 <col:33, col:35> 'int'
|   | | |             |   |             `-IntegerLiteral 0x1f90b6cd398 <line:63:27> 'int' 32
|   | | |             |   `-ParenExpr 0x1f90b6cd5f0 <line:60:17, col:37> 'double'
|   | | |             |     `-CStyleCastExpr 0x1f90b6cd5c8 <col:18, col:36> 'double' <IntegralToFloating>
|   | | |             |       `-ParenExpr 0x1f90b6cd5a8 <col:26, col:36> 'unsigned long long'
|   | | |             |         `-BinaryOperator 0x1f90b6cd550 <col:27, col:35> 'unsigned long long' '<<'
|   | | |             |           |-IntegerLiteral 0x1f90b6cd4e0 <col:27> 'unsigned long long' 1
|   | | |             |           `-ParenExpr 0x1f90b6cd530 <col:33, col:35> 'int'
|   | | |             |             `-IntegerLiteral 0x1f90b6cd508 <line:64:27> 'int' 32
|   | | |             `-ParenExpr 0x1f90b6cd760 <line:60:17, col:37> 'double'
|   | | |               `-CStyleCastExpr 0x1f90b6cd738 <col:18, col:36> 'double' <IntegralToFloating>
|   | | |                 `-ParenExpr 0x1f90b6cd718 <col:26, col:36> 'unsigned long long'
|   | | |                   `-BinaryOperator 0x1f90b6cd6c0 <col:27, col:35> 'unsigned long long' '<<'
|   | | |                     |-IntegerLiteral 0x1f90b6cd650 <col:27> 'unsigned long long' 1
|   | | |                     `-ParenExpr 0x1f90b6cd6a0 <col:33, col:35> 'int'
|   | | |                       `-IntegerLiteral 0x1f90b6cd678 <line:65:28> 'int' 34
|   | | |-CompoundAssignOperator 0x1f90b6cd9a0 <line:340:9, col:31> 'double' '+=' ComputeLHSTy='double' ComputeResultTy='double'
|   | | | |-DeclRefExpr 0x1f90b6cd878 <col:9> 'double' lvalue Var 0x1f90b6c4f80 'x1' 'double'
|   | | | `-BinaryOperator 0x1f90b6cd980 <col:15, col:31> 'double' '+'
|   | | |   |-ParenExpr 0x1f90b6cd928 <col:15, col:27> 'double'
|   | | |   | `-BinaryOperator 0x1f90b6cd908 <col:16, col:23> 'double' '-'
|   | | |   |   |-ImplicitCastExpr 0x1f90b6cd8d8 <col:16> 'double' <LValueToRValue>
|   | | |   |   | `-DeclRefExpr 0x1f90b6cd898 <col:16> 'double' lvalue Var 0x1f90b6c52c0 'h1hi' 'double'
|   | | |   |   `-ImplicitCastExpr 0x1f90b6cd8f0 <col:23> 'double' <LValueToRValue>
|   | | |   |     `-DeclRefExpr 0x1f90b6cd8b8 <col:23> 'double' lvalue Var 0x1f90b6c5720 'c1hi' 'double'
|   | | |   `-ImplicitCastExpr 0x1f90b6cd968 <col:31> 'double' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x1f90b6cd948 <col:31> 'double' lvalue Var 0x1f90b6c5620 'c0hi' 'double'
|   | | |-CompoundAssignOperator 0x1f90b6cdaf8 <line:341:9, col:31> 'double' '+=' ComputeLHSTy='double' ComputeResultTy='double'
|   | | | |-DeclRefExpr 0x1f90b6cd9d0 <col:9> 'double' lvalue Var 0x1f90b6c5000 'x2' 'double'
|   | | | `-BinaryOperator 0x1f90b6cdad8 <col:15, col:31> 'double' '+'
|   | | |   |-ParenExpr 0x1f90b6cda80 <col:15, col:27> 'double'
|   | | |   | `-BinaryOperator 0x1f90b6cda60 <col:16, col:23> 'double' '-'
|   | | |   |   |-ImplicitCastExpr 0x1f90b6cda30 <col:16> 'double' <LValueToRValue>
|   | | |   |   | `-DeclRefExpr 0x1f90b6cd9f0 <col:16> 'double' lvalue Var 0x1f90b6c53c0 'h2hi' 'double'
|   | | |   |   `-ImplicitCastExpr 0x1f90b6cda48 <col:23> 'double' <LValueToRValue>
|   | | |   |     `-DeclRefExpr 0x1f90b6cda10 <col:23> 'double' lvalue Var 0x1f90b6c5820 'c2hi' 'double'
|   | | |   `-ImplicitCastExpr 0x1f90b6cdac0 <col:31> 'double' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x1f90b6cdaa0 <col:31> 'double' lvalue Var 0x1f90b6c5720 'c1hi' 'double'
|   | | |-CompoundAssignOperator 0x1f90b6cdc50 <line:342:9, col:31> 'double' '+=' ComputeLHSTy='double' ComputeResultTy='double'
|   | | | |-DeclRefExpr 0x1f90b6cdb28 <col:9> 'double' lvalue Var 0x1f90b6c5080 'x3' 'double'
|   | | | `-BinaryOperator 0x1f90b6cdc30 <col:15, col:31> 'double' '+'
|   | | |   |-ParenExpr 0x1f90b6cdbd8 <col:15, col:27> 'double'
|   | | |   | `-BinaryOperator 0x1f90b6cdbb8 <col:16, col:23> 'double' '-'
|   | | |   |   |-ImplicitCastExpr 0x1f90b6cdb88 <col:16> 'double' <LValueToRValue>
|   | | |   |   | `-DeclRefExpr 0x1f90b6cdb48 <col:16> 'double' lvalue Var 0x1f90b6c54c0 'h3hi' 'double'
|   | | |   |   `-ImplicitCastExpr 0x1f90b6cdba0 <col:23> 'double' <LValueToRValue>
|   | | |   |     `-DeclRefExpr 0x1f90b6cdb68 <col:23> 'double' lvalue Var 0x1f90b6c5920 'c3hi' 'double'
|   | | |   `-ImplicitCastExpr 0x1f90b6cdc18 <col:31> 'double' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x1f90b6cdbf8 <col:31> 'double' lvalue Var 0x1f90b6c5820 'c2hi' 'double'
|   | | |-CompoundAssignOperator 0x1f90b6d2408 <line:343:9, col:49> 'double' '+=' ComputeLHSTy='double' ComputeResultTy='double'
|   | | | |-DeclRefExpr 0x1f90b6cdc80 <col:9> 'double' lvalue Var 0x1f90b6c4ea0 'x0' 'double'
|   | | | `-BinaryOperator 0x1f90b6d23e8 <col:15, col:49> 'double' '+'
|   | | |   |-ParenExpr 0x1f90b6cdd30 <col:15, col:27> 'double'
|   | | |   | `-BinaryOperator 0x1f90b6cdd10 <col:16, col:23> 'double' '-'
|   | | |   |   |-ImplicitCastExpr 0x1f90b6cdce0 <col:16> 'double' <LValueToRValue>
|   | | |   |   | `-DeclRefExpr 0x1f90b6cdca0 <col:16> 'double' lvalue Var 0x1f90b6c51c0 'h0hi' 'double'
|   | | |   |   `-ImplicitCastExpr 0x1f90b6cdcf8 <col:23> 'double' <LValueToRValue>
|   | | |   |     `-DeclRefExpr 0x1f90b6cdcc0 <col:23> 'double' lvalue Var 0x1f90b6c5620 'c0hi' 'double'
|   | | |   `-BinaryOperator 0x1f90b6d23c8 <col:31, col:49> 'double' '*'
|   | | |     |-ImplicitCastExpr 0x1f90b6d23b0 <col:31> 'double' <LValueToRValue>
|   | | |     | `-DeclRefExpr 0x1f90b6cdd50 <col:31> 'double' lvalue Var 0x1f90b6c5920 'c3hi' 'double'
|   | | |     `-ParenExpr 0x1f90b6d2390 <col:38, col:49> 'double'
|   | | |       `-BinaryOperator 0x1f90b6d2370 <col:39, line:65:31> 'double' '/'
|   | | |         |-FloatingLiteral 0x1f90b6cdd70 <line:343:39> 'double' 5.000000e+00
|   | | |         `-ParenExpr 0x1f90b6d2350 <line:65:17, col:31> 'double'
|   | | |           `-BinaryOperator 0x1f90b6d2330 <line:64:16, line:60:37> 'double' '*'
|   | | |             |-ParenExpr 0x1f90b6d21e0 <line:64:16, col:30> 'double'
|   | | |             | `-BinaryOperator 0x1f90b6d21c0 <line:63:16, line:60:37> 'double' '*'
|   | | |             |   |-ParenExpr 0x1f90b6d2070 <line:63:16, col:30> 'double'
|   | | |             |   | `-BinaryOperator 0x1f90b6d2050 <line:60:17, col:37> 'double' '*'
|   | | |             |   |   |-ParenExpr 0x1f90b6cdea8 <col:17, col:37> 'double'
|   | | |             |   |   | `-CStyleCastExpr 0x1f90b6cde80 <col:18, col:36> 'double' <IntegralToFloating>
|   | | |             |   |   |   `-ParenExpr 0x1f90b6cde60 <col:26, col:36> 'unsigned long long'
|   | | |             |   |   |     `-BinaryOperator 0x1f90b6cde08 <col:27, col:35> 'unsigned long long' '<<'
|   | | |             |   |   |       |-IntegerLiteral 0x1f90b6cdd98 <col:27> 'unsigned long long' 1
|   | | |             |   |   |       `-ParenExpr 0x1f90b6cdde8 <col:33, col:35> 'int'
|   | | |             |   |   |         `-IntegerLiteral 0x1f90b6cddc0 <line:62:20> 'int' 32
|   | | |             |   |   `-ParenExpr 0x1f90b6cdfd8 <line:60:17, col:37> 'double'
|   | | |             |   |     `-CStyleCastExpr 0x1f90b6cdfb0 <col:18, col:36> 'double' <IntegralToFloating>
|   | | |             |   |       `-ParenExpr 0x1f90b6cdf90 <col:26, col:36> 'unsigned long long'
|   | | |             |   |         `-BinaryOperator 0x1f90b6cdf38 <col:27, col:35> 'unsigned long long' '<<'
|   | | |             |   |           |-IntegerLiteral 0x1f90b6cdec8 <col:27> 'unsigned long long' 1
|   | | |             |   |           `-ParenExpr 0x1f90b6cdf18 <col:33, col:35> 'int'
|   | | |             |   |             `-IntegerLiteral 0x1f90b6cdef0 <line:63:27> 'int' 32
|   | | |             |   `-ParenExpr 0x1f90b6d21a0 <line:60:17, col:37> 'double'
|   | | |             |     `-CStyleCastExpr 0x1f90b6d2178 <col:18, col:36> 'double' <IntegralToFloating>
|   | | |             |       `-ParenExpr 0x1f90b6d2158 <col:26, col:36> 'unsigned long long'
|   | | |             |         `-BinaryOperator 0x1f90b6d2100 <col:27, col:35> 'unsigned long long' '<<'
|   | | |             |           |-IntegerLiteral 0x1f90b6d2090 <col:27> 'unsigned long long' 1
|   | | |             |           `-ParenExpr 0x1f90b6d20e0 <col:33, col:35> 'int'
|   | | |             |             `-IntegerLiteral 0x1f90b6d20b8 <line:64:27> 'int' 32
|   | | |             `-ParenExpr 0x1f90b6d2310 <line:60:17, col:37> 'double'
|   | | |               `-CStyleCastExpr 0x1f90b6d22e8 <col:18, col:36> 'double' <IntegralToFloating>
|   | | |                 `-ParenExpr 0x1f90b6d22c8 <col:26, col:36> 'unsigned long long'
|   | | |                   `-BinaryOperator 0x1f90b6d2270 <col:27, col:35> 'unsigned long long' '<<'
|   | | |                     |-IntegerLiteral 0x1f90b6d2200 <col:27> 'unsigned long long' 1
|   | | |                     `-ParenExpr 0x1f90b6d2250 <col:33, col:35> 'int'
|   | | |                       `-IntegerLiteral 0x1f90b6d2228 <line:65:28> 'int' 34
|   | | |-BinaryOperator 0x1f90b6d2758 <line:351:9, col:59> 'double' '='
|   | | | |-DeclRefExpr 0x1f90b6d2438 <col:9> 'double' lvalue Var 0x1f90b6c5140 'h0lo' 'double'
|   | | | `-BinaryOperator 0x1f90b6d2738 <col:16, col:59> 'double' '+'
|   | | |   |-BinaryOperator 0x1f90b6d2670 <col:16, col:47> 'double' '+'
|   | | |   | |-BinaryOperator 0x1f90b6d25a8 <col:16, col:35> 'double' '+'
|   | | |   | | |-BinaryOperator 0x1f90b6d24e0 <col:16, col:23> 'double' '*'
|   | | |   | | | |-ImplicitCastExpr 0x1f90b6d24b0 <col:16> 'double' <LValueToRValue>
|   | | |   | | | | `-DeclRefExpr 0x1f90b6d2458 <col:16> 'const double' lvalue Var 0x1f90b6c1b80 's3lo' 'const double'
|   | | |   | | | `-ImplicitCastExpr 0x1f90b6d24c8 <col:23> 'double' <LValueToRValue>
|   | | |   | | |   `-DeclRefExpr 0x1f90b6d2490 <col:23> 'double' lvalue Var 0x1f90b6c4f80 'x1' 'double'
|   | | |   | | `-BinaryOperator 0x1f90b6d2588 <col:28, col:35> 'double' '*'
|   | | |   | |   |-ImplicitCastExpr 0x1f90b6d2558 <col:28> 'double' <LValueToRValue>
|   | | |   | |   | `-DeclRefExpr 0x1f90b6d2500 <col:28> 'const double' lvalue Var 0x1f90b6c1890 's2lo' 'const double'
|   | | |   | |   `-ImplicitCastExpr 0x1f90b6d2570 <col:35> 'double' <LValueToRValue>
|   | | |   | |     `-DeclRefExpr 0x1f90b6d2538 <col:35> 'double' lvalue Var 0x1f90b6c5000 'x2' 'double'
|   | | |   | `-BinaryOperator 0x1f90b6d2650 <col:40, col:47> 'double' '*'
|   | | |   |   |-ImplicitCastExpr 0x1f90b6d2620 <col:40> 'double' <LValueToRValue>
|   | | |   |   | `-DeclRefExpr 0x1f90b6d25c8 <col:40> 'const double' lvalue Var 0x1f90b6c15a0 's1lo' 'const double'
|   | | |   |   `-ImplicitCastExpr 0x1f90b6d2638 <col:47> 'double' <LValueToRValue>
|   | | |   |     `-DeclRefExpr 0x1f90b6d2600 <col:47> 'double' lvalue Var 0x1f90b6c5080 'x3' 'double'
|   | | |   `-BinaryOperator 0x1f90b6d2718 <col:52, col:59> 'double' '*'
|   | | |     |-ImplicitCastExpr 0x1f90b6d26e8 <col:52> 'double' <LValueToRValue>
|   | | |     | `-DeclRefExpr 0x1f90b6d2690 <col:52> 'const double' lvalue Var 0x1f90b6c5a00 'r0lo' 'const double'
|   | | |     `-ImplicitCastExpr 0x1f90b6d2700 <col:59> 'double' <LValueToRValue>
|   | | |       `-DeclRefExpr 0x1f90b6d26c8 <col:59> 'double' lvalue Var 0x1f90b6c4ea0 'x0' 'double'
|   | | |-BinaryOperator 0x1f90b6d2a50 <line:352:9, col:59> 'double' '='
|   | | | |-DeclRefExpr 0x1f90b6d2778 <col:9> 'double' lvalue Var 0x1f90b6c5240 'h1lo' 'double'
|   | | | `-BinaryOperator 0x1f90b6d2a30 <col:16, col:59> 'double' '+'
|   | | |   |-BinaryOperator 0x1f90b6d2968 <col:16, col:47> 'double' '+'
|   | | |   | |-BinaryOperator 0x1f90b6d28b8 <col:16, col:35> 'double' '+'
|   | | |   | | |-BinaryOperator 0x1f90b6d2808 <col:16, col:23> 'double' '*'
|   | | |   | | | |-ImplicitCastExpr 0x1f90b6d27d8 <col:16> 'double' <LValueToRValue>
|   | | |   | | | | `-DeclRefExpr 0x1f90b6d2798 <col:16> 'const double' lvalue Var 0x1f90b6c5a00 'r0lo' 'const double'
|   | | |   | | | `-ImplicitCastExpr 0x1f90b6d27f0 <col:23> 'double' <LValueToRValue>
|   | | |   | | |   `-DeclRefExpr 0x1f90b6d27b8 <col:23> 'double' lvalue Var 0x1f90b6c4f80 'x1' 'double'
|   | | |   | | `-BinaryOperator 0x1f90b6d2898 <col:28, col:35> 'double' '*'
|   | | |   | |   |-ImplicitCastExpr 0x1f90b6d2868 <col:28> 'double' <LValueToRValue>
|   | | |   | |   | `-DeclRefExpr 0x1f90b6d2828 <col:28> 'const double' lvalue Var 0x1f90b6c1b80 's3lo' 'const double'
|   | | |   | |   `-ImplicitCastExpr 0x1f90b6d2880 <col:35> 'double' <LValueToRValue>
|   | | |   | |     `-DeclRefExpr 0x1f90b6d2848 <col:35> 'double' lvalue Var 0x1f90b6c5000 'x2' 'double'
|   | | |   | `-BinaryOperator 0x1f90b6d2948 <col:40, col:47> 'double' '*'
|   | | |   |   |-ImplicitCastExpr 0x1f90b6d2918 <col:40> 'double' <LValueToRValue>
|   | | |   |   | `-DeclRefExpr 0x1f90b6d28d8 <col:40> 'const double' lvalue Var 0x1f90b6c1890 's2lo' 'const double'
|   | | |   |   `-ImplicitCastExpr 0x1f90b6d2930 <col:47> 'double' <LValueToRValue>
|   | | |   |     `-DeclRefExpr 0x1f90b6d28f8 <col:47> 'double' lvalue Var 0x1f90b6c5080 'x3' 'double'
|   | | |   `-BinaryOperator 0x1f90b6d2a10 <col:52, col:59> 'double' '*'
|   | | |     |-ImplicitCastExpr 0x1f90b6d29e0 <col:52> 'double' <LValueToRValue>
|   | | |     | `-DeclRefExpr 0x1f90b6d2988 <col:52> 'const double' lvalue Var 0x1f90b6c5d08 'r1lo' 'const double'
|   | | |     `-ImplicitCastExpr 0x1f90b6d29f8 <col:59> 'double' <LValueToRValue>
|   | | |       `-DeclRefExpr 0x1f90b6d29c0 <col:59> 'double' lvalue Var 0x1f90b6c4ea0 'x0' 'double'
|   | | |-BinaryOperator 0x1f90b6d2d48 <line:353:9, col:59> 'double' '='
|   | | | |-DeclRefExpr 0x1f90b6d2a70 <col:9> 'double' lvalue Var 0x1f90b6c5340 'h2lo' 'double'
|   | | | `-BinaryOperator 0x1f90b6d2d28 <col:16, col:59> 'double' '+'
|   | | |   |-BinaryOperator 0x1f90b6d2c60 <col:16, col:47> 'double' '+'
|   | | |   | |-BinaryOperator 0x1f90b6d2bb0 <col:16, col:35> 'double' '+'
|   | | |   | | |-BinaryOperator 0x1f90b6d2b00 <col:16, col:23> 'double' '*'
|   | | |   | | | |-ImplicitCastExpr 0x1f90b6d2ad0 <col:16> 'double' <LValueToRValue>
|   | | |   | | | | `-DeclRefExpr 0x1f90b6d2a90 <col:16> 'const double' lvalue Var 0x1f90b6c5d08 'r1lo' 'const double'
|   | | |   | | | `-ImplicitCastExpr 0x1f90b6d2ae8 <col:23> 'double' <LValueToRValue>
|   | | |   | | |   `-DeclRefExpr 0x1f90b6d2ab0 <col:23> 'double' lvalue Var 0x1f90b6c4f80 'x1' 'double'
|   | | |   | | `-BinaryOperator 0x1f90b6d2b90 <col:28, col:35> 'double' '*'
|   | | |   | |   |-ImplicitCastExpr 0x1f90b6d2b60 <col:28> 'double' <LValueToRValue>
|   | | |   | |   | `-DeclRefExpr 0x1f90b6d2b20 <col:28> 'const double' lvalue Var 0x1f90b6c5a00 'r0lo' 'const double'
|   | | |   | |   `-ImplicitCastExpr 0x1f90b6d2b78 <col:35> 'double' <LValueToRValue>
|   | | |   | |     `-DeclRefExpr 0x1f90b6d2b40 <col:35> 'double' lvalue Var 0x1f90b6c5000 'x2' 'double'
|   | | |   | `-BinaryOperator 0x1f90b6d2c40 <col:40, col:47> 'double' '*'
|   | | |   |   |-ImplicitCastExpr 0x1f90b6d2c10 <col:40> 'double' <LValueToRValue>
|   | | |   |   | `-DeclRefExpr 0x1f90b6d2bd0 <col:40> 'const double' lvalue Var 0x1f90b6c1b80 's3lo' 'const double'
|   | | |   |   `-ImplicitCastExpr 0x1f90b6d2c28 <col:47> 'double' <LValueToRValue>
|   | | |   |     `-DeclRefExpr 0x1f90b6d2bf0 <col:47> 'double' lvalue Var 0x1f90b6c5080 'x3' 'double'
|   | | |   `-BinaryOperator 0x1f90b6d2d08 <col:52, col:59> 'double' '*'
|   | | |     |-ImplicitCastExpr 0x1f90b6d2cd8 <col:52> 'double' <LValueToRValue>
|   | | |     | `-DeclRefExpr 0x1f90b6d2c80 <col:52> 'const double' lvalue Var 0x1f90b6c0fc0 'r2lo' 'const double'
|   | | |     `-ImplicitCastExpr 0x1f90b6d2cf0 <col:59> 'double' <LValueToRValue>
|   | | |       `-DeclRefExpr 0x1f90b6d2cb8 <col:59> 'double' lvalue Var 0x1f90b6c4ea0 'x0' 'double'
|   | | |-BinaryOperator 0x1f90b6d1040 <line:354:9, col:59> 'double' '='
|   | | | |-DeclRefExpr 0x1f90b6d2d68 <col:9> 'double' lvalue Var 0x1f90b6c5440 'h3lo' 'double'
|   | | | `-BinaryOperator 0x1f90b6d3020 <col:16, col:59> 'double' '+'
|   | | |   |-BinaryOperator 0x1f90b6d2f58 <col:16, col:47> 'double' '+'
|   | | |   | |-BinaryOperator 0x1f90b6d2ea8 <col:16, col:35> 'double' '+'
|   | | |   | | |-BinaryOperator 0x1f90b6d2df8 <col:16, col:23> 'double' '*'
|   | | |   | | | |-ImplicitCastExpr 0x1f90b6d2dc8 <col:16> 'double' <LValueToRValue>
|   | | |   | | | | `-DeclRefExpr 0x1f90b6d2d88 <col:16> 'const double' lvalue Var 0x1f90b6c0fc0 'r2lo' 'const double'
|   | | |   | | | `-ImplicitCastExpr 0x1f90b6d2de0 <col:23> 'double' <LValueToRValue>
|   | | |   | | |   `-DeclRefExpr 0x1f90b6d2da8 <col:23> 'double' lvalue Var 0x1f90b6c4f80 'x1' 'double'
|   | | |   | | `-BinaryOperator 0x1f90b6d2e88 <col:28, col:35> 'double' '*'
|   | | |   | |   |-ImplicitCastExpr 0x1f90b6d2e58 <col:28> 'double' <LValueToRValue>
|   | | |   | |   | `-DeclRefExpr 0x1f90b6d2e18 <col:28> 'const double' lvalue Var 0x1f90b6c5d08 'r1lo' 'const double'
|   | | |   | |   `-ImplicitCastExpr 0x1f90b6d2e70 <col:35> 'double' <LValueToRValue>
|   | | |   | |     `-DeclRefExpr 0x1f90b6d2e38 <col:35> 'double' lvalue Var 0x1f90b6c5000 'x2' 'double'
|   | | |   | `-BinaryOperator 0x1f90b6d2f38 <col:40, col:47> 'double' '*'
|   | | |   |   |-ImplicitCastExpr 0x1f90b6d2f08 <col:40> 'double' <LValueToRValue>
|   | | |   |   | `-DeclRefExpr 0x1f90b6d2ec8 <col:40> 'const double' lvalue Var 0x1f90b6c5a00 'r0lo' 'const double'
|   | | |   |   `-ImplicitCastExpr 0x1f90b6d2f20 <col:47> 'double' <LValueToRValue>
|   | | |   |     `-DeclRefExpr 0x1f90b6d2ee8 <col:47> 'double' lvalue Var 0x1f90b6c5080 'x3' 'double'
|   | | |   `-BinaryOperator 0x1f90b6d3000 <col:52, col:59> 'double' '*'
|   | | |     |-ImplicitCastExpr 0x1f90b6d2fd0 <col:52> 'double' <LValueToRValue>
|   | | |     | `-DeclRefExpr 0x1f90b6d2f78 <col:52> 'const double' lvalue Var 0x1f90b6c12b0 'r3lo' 'const double'
|   | | |     `-ImplicitCastExpr 0x1f90b6d2fe8 <col:59> 'double' <LValueToRValue>
|   | | |       `-DeclRefExpr 0x1f90b6d2fb0 <col:59> 'double' lvalue Var 0x1f90b6c4ea0 'x0' 'double'
|   | | |-BinaryOperator 0x1f90b6d1380 <line:356:9, col:59> 'double' '='
|   | | | |-DeclRefExpr 0x1f90b6d1060 <col:9> 'double' lvalue Var 0x1f90b6c51c0 'h0hi' 'double'
|   | | | `-BinaryOperator 0x1f90b6d1360 <col:16, col:59> 'double' '+'
|   | | |   |-BinaryOperator 0x1f90b6d1298 <col:16, col:47> 'double' '+'
|   | | |   | |-BinaryOperator 0x1f90b6d11d0 <col:16, col:35> 'double' '+'
|   | | |   | | |-BinaryOperator 0x1f90b6d1108 <col:16, col:23> 'double' '*'
|   | | |   | | | |-ImplicitCastExpr 0x1f90b6d10d8 <col:16> 'double' <LValueToRValue>
|   | | |   | | | | `-DeclRefExpr 0x1f90b6d1080 <col:16> 'const double' lvalue Var 0x1f90b6c1cf8 's3hi' 'const double'
|   | | |   | | | `-ImplicitCastExpr 0x1f90b6d10f0 <col:23> 'double' <LValueToRValue>
|   | | |   | | |   `-DeclRefExpr 0x1f90b6d10b8 <col:23> 'double' lvalue Var 0x1f90b6c4f80 'x1' 'double'
|   | | |   | | `-BinaryOperator 0x1f90b6d11b0 <col:28, col:35> 'double' '*'
|   | | |   | |   |-ImplicitCastExpr 0x1f90b6d1180 <col:28> 'double' <LValueToRValue>
|   | | |   | |   | `-DeclRefExpr 0x1f90b6d1128 <col:28> 'const double' lvalue Var 0x1f90b6c1a08 's2hi' 'const double'
|   | | |   | |   `-ImplicitCastExpr 0x1f90b6d1198 <col:35> 'double' <LValueToRValue>
|   | | |   | |     `-DeclRefExpr 0x1f90b6d1160 <col:35> 'double' lvalue Var 0x1f90b6c5000 'x2' 'double'
|   | | |   | `-BinaryOperator 0x1f90b6d1278 <col:40, col:47> 'double' '*'
|   | | |   |   |-ImplicitCastExpr 0x1f90b6d1248 <col:40> 'double' <LValueToRValue>
|   | | |   |   | `-DeclRefExpr 0x1f90b6d11f0 <col:40> 'const double' lvalue Var 0x1f90b6c1718 's1hi' 'const double'
|   | | |   |   `-ImplicitCastExpr 0x1f90b6d1260 <col:47> 'double' <LValueToRValue>
|   | | |   |     `-DeclRefExpr 0x1f90b6d1228 <col:47> 'double' lvalue Var 0x1f90b6c5080 'x3' 'double'
|   | | |   `-BinaryOperator 0x1f90b6d1340 <col:52, col:59> 'double' '*'
|   | | |     |-ImplicitCastExpr 0x1f90b6d1310 <col:52> 'double' <LValueToRValue>
|   | | |     | `-DeclRefExpr 0x1f90b6d12b8 <col:52> 'const double' lvalue Var 0x1f90b6c5b90 'r0hi' 'const double'
|   | | |     `-ImplicitCastExpr 0x1f90b6d1328 <col:59> 'double' <LValueToRValue>
|   | | |       `-DeclRefExpr 0x1f90b6d12f0 <col:59> 'double' lvalue Var 0x1f90b6c4ea0 'x0' 'double'
|   | | |-BinaryOperator 0x1f90b6d1678 <line:357:9, col:59> 'double' '='
|   | | | |-DeclRefExpr 0x1f90b6d13a0 <col:9> 'double' lvalue Var 0x1f90b6c52c0 'h1hi' 'double'
|   | | | `-BinaryOperator 0x1f90b6d1658 <col:16, col:59> 'double' '+'
|   | | |   |-BinaryOperator 0x1f90b6d1590 <col:16, col:47> 'double' '+'
|   | | |   | |-BinaryOperator 0x1f90b6d14e0 <col:16, col:35> 'double' '+'
|   | | |   | | |-BinaryOperator 0x1f90b6d1430 <col:16, col:23> 'double' '*'
|   | | |   | | | |-ImplicitCastExpr 0x1f90b6d1400 <col:16> 'double' <LValueToRValue>
|   | | |   | | | | `-DeclRefExpr 0x1f90b6d13c0 <col:16> 'const double' lvalue Var 0x1f90b6c5b90 'r0hi' 'const double'
|   | | |   | | | `-ImplicitCastExpr 0x1f90b6d1418 <col:23> 'double' <LValueToRValue>
|   | | |   | | |   `-DeclRefExpr 0x1f90b6d13e0 <col:23> 'double' lvalue Var 0x1f90b6c4f80 'x1' 'double'
|   | | |   | | `-BinaryOperator 0x1f90b6d14c0 <col:28, col:35> 'double' '*'
|   | | |   | |   |-ImplicitCastExpr 0x1f90b6d1490 <col:28> 'double' <LValueToRValue>
|   | | |   | |   | `-DeclRefExpr 0x1f90b6d1450 <col:28> 'const double' lvalue Var 0x1f90b6c1cf8 's3hi' 'const double'
|   | | |   | |   `-ImplicitCastExpr 0x1f90b6d14a8 <col:35> 'double' <LValueToRValue>
|   | | |   | |     `-DeclRefExpr 0x1f90b6d1470 <col:35> 'double' lvalue Var 0x1f90b6c5000 'x2' 'double'
|   | | |   | `-BinaryOperator 0x1f90b6d1570 <col:40, col:47> 'double' '*'
|   | | |   |   |-ImplicitCastExpr 0x1f90b6d1540 <col:40> 'double' <LValueToRValue>
|   | | |   |   | `-DeclRefExpr 0x1f90b6d1500 <col:40> 'const double' lvalue Var 0x1f90b6c1a08 's2hi' 'const double'
|   | | |   |   `-ImplicitCastExpr 0x1f90b6d1558 <col:47> 'double' <LValueToRValue>
|   | | |   |     `-DeclRefExpr 0x1f90b6d1520 <col:47> 'double' lvalue Var 0x1f90b6c5080 'x3' 'double'
|   | | |   `-BinaryOperator 0x1f90b6d1638 <col:52, col:59> 'double' '*'
|   | | |     |-ImplicitCastExpr 0x1f90b6d1608 <col:52> 'double' <LValueToRValue>
|   | | |     | `-DeclRefExpr 0x1f90b6d15b0 <col:52> 'const double' lvalue Var 0x1f90b6c5e80 'r1hi' 'const double'
|   | | |     `-ImplicitCastExpr 0x1f90b6d1620 <col:59> 'double' <LValueToRValue>
|   | | |       `-DeclRefExpr 0x1f90b6d15e8 <col:59> 'double' lvalue Var 0x1f90b6c4ea0 'x0' 'double'
|   | | |-BinaryOperator 0x1f90b6d1970 <line:358:9, col:59> 'double' '='
|   | | | |-DeclRefExpr 0x1f90b6d1698 <col:9> 'double' lvalue Var 0x1f90b6c53c0 'h2hi' 'double'
|   | | | `-BinaryOperator 0x1f90b6d1950 <col:16, col:59> 'double' '+'
|   | | |   |-BinaryOperator 0x1f90b6d1888 <col:16, col:47> 'double' '+'
|   | | |   | |-BinaryOperator 0x1f90b6d17d8 <col:16, col:35> 'double' '+'
|   | | |   | | |-BinaryOperator 0x1f90b6d1728 <col:16, col:23> 'double' '*'
|   | | |   | | | |-ImplicitCastExpr 0x1f90b6d16f8 <col:16> 'double' <LValueToRValue>
|   | | |   | | | | `-DeclRefExpr 0x1f90b6d16b8 <col:16> 'const double' lvalue Var 0x1f90b6c5e80 'r1hi' 'const double'
|   | | |   | | | `-ImplicitCastExpr 0x1f90b6d1710 <col:23> 'double' <LValueToRValue>
|   | | |   | | |   `-DeclRefExpr 0x1f90b6d16d8 <col:23> 'double' lvalue Var 0x1f90b6c4f80 'x1' 'double'
|   | | |   | | `-BinaryOperator 0x1f90b6d17b8 <col:28, col:35> 'double' '*'
|   | | |   | |   |-ImplicitCastExpr 0x1f90b6d1788 <col:28> 'double' <LValueToRValue>
|   | | |   | |   | `-DeclRefExpr 0x1f90b6d1748 <col:28> 'const double' lvalue Var 0x1f90b6c5b90 'r0hi' 'const double'
|   | | |   | |   `-ImplicitCastExpr 0x1f90b6d17a0 <col:35> 'double' <LValueToRValue>
|   | | |   | |     `-DeclRefExpr 0x1f90b6d1768 <col:35> 'double' lvalue Var 0x1f90b6c5000 'x2' 'double'
|   | | |   | `-BinaryOperator 0x1f90b6d1868 <col:40, col:47> 'double' '*'
|   | | |   |   |-ImplicitCastExpr 0x1f90b6d1838 <col:40> 'double' <LValueToRValue>
|   | | |   |   | `-DeclRefExpr 0x1f90b6d17f8 <col:40> 'const double' lvalue Var 0x1f90b6c1cf8 's3hi' 'const double'
|   | | |   |   `-ImplicitCastExpr 0x1f90b6d1850 <col:47> 'double' <LValueToRValue>
|   | | |   |     `-DeclRefExpr 0x1f90b6d1818 <col:47> 'double' lvalue Var 0x1f90b6c5080 'x3' 'double'
|   | | |   `-BinaryOperator 0x1f90b6d1930 <col:52, col:59> 'double' '*'
|   | | |     |-ImplicitCastExpr 0x1f90b6d1900 <col:52> 'double' <LValueToRValue>
|   | | |     | `-DeclRefExpr 0x1f90b6d18a8 <col:52> 'const double' lvalue Var 0x1f90b6c1138 'r2hi' 'const double'
|   | | |     `-ImplicitCastExpr 0x1f90b6d1918 <col:59> 'double' <LValueToRValue>
|   | | |       `-DeclRefExpr 0x1f90b6d18e0 <col:59> 'double' lvalue Var 0x1f90b6c4ea0 'x0' 'double'
|   | | |-BinaryOperator 0x1f90b6d1c68 <line:359:9, col:59> 'double' '='
|   | | | |-DeclRefExpr 0x1f90b6d1990 <col:9> 'double' lvalue Var 0x1f90b6c54c0 'h3hi' 'double'
|   | | | `-BinaryOperator 0x1f90b6d1c48 <col:16, col:59> 'double' '+'
|   | | |   |-BinaryOperator 0x1f90b6d1b80 <col:16, col:47> 'double' '+'
|   | | |   | |-BinaryOperator 0x1f90b6d1ad0 <col:16, col:35> 'double' '+'
|   | | |   | | |-BinaryOperator 0x1f90b6d1a20 <col:16, col:23> 'double' '*'
|   | | |   | | | |-ImplicitCastExpr 0x1f90b6d19f0 <col:16> 'double' <LValueToRValue>
|   | | |   | | | | `-DeclRefExpr 0x1f90b6d19b0 <col:16> 'const double' lvalue Var 0x1f90b6c1138 'r2hi' 'const double'
|   | | |   | | | `-ImplicitCastExpr 0x1f90b6d1a08 <col:23> 'double' <LValueToRValue>
|   | | |   | | |   `-DeclRefExpr 0x1f90b6d19d0 <col:23> 'double' lvalue Var 0x1f90b6c4f80 'x1' 'double'
|   | | |   | | `-BinaryOperator 0x1f90b6d1ab0 <col:28, col:35> 'double' '*'
|   | | |   | |   |-ImplicitCastExpr 0x1f90b6d1a80 <col:28> 'double' <LValueToRValue>
|   | | |   | |   | `-DeclRefExpr 0x1f90b6d1a40 <col:28> 'const double' lvalue Var 0x1f90b6c5e80 'r1hi' 'const double'
|   | | |   | |   `-ImplicitCastExpr 0x1f90b6d1a98 <col:35> 'double' <LValueToRValue>
|   | | |   | |     `-DeclRefExpr 0x1f90b6d1a60 <col:35> 'double' lvalue Var 0x1f90b6c5000 'x2' 'double'
|   | | |   | `-BinaryOperator 0x1f90b6d1b60 <col:40, col:47> 'double' '*'
|   | | |   |   |-ImplicitCastExpr 0x1f90b6d1b30 <col:40> 'double' <LValueToRValue>
|   | | |   |   | `-DeclRefExpr 0x1f90b6d1af0 <col:40> 'const double' lvalue Var 0x1f90b6c5b90 'r0hi' 'const double'
|   | | |   |   `-ImplicitCastExpr 0x1f90b6d1b48 <col:47> 'double' <LValueToRValue>
|   | | |   |     `-DeclRefExpr 0x1f90b6d1b10 <col:47> 'double' lvalue Var 0x1f90b6c5080 'x3' 'double'
|   | | |   `-BinaryOperator 0x1f90b6d1c28 <col:52, col:59> 'double' '*'
|   | | |     |-ImplicitCastExpr 0x1f90b6d1bf8 <col:52> 'double' <LValueToRValue>
|   | | |     | `-DeclRefExpr 0x1f90b6d1ba0 <col:52> 'const double' lvalue Var 0x1f90b6c1428 'r3hi' 'const double'
|   | | |     `-ImplicitCastExpr 0x1f90b6d1c10 <col:59> 'double' <LValueToRValue>
|   | | |       `-DeclRefExpr 0x1f90b6d1bd8 <col:59> 'double' lvalue Var 0x1f90b6c4ea0 'x0' 'double'
|   | | |-CompoundAssignOperator 0x1f90b6d1cd0 <line:361:9, col:16> 'const unsigned char *' '+=' ComputeLHSTy='const unsigned char *' ComputeResultTy='const unsigned char *'
|   | | | |-DeclRefExpr 0x1f90b6d1c88 <col:9> 'const unsigned char *' lvalue ParmVar 0x1f90b6c46a8 'inp' 'const unsigned char *'
|   | | | `-IntegerLiteral 0x1f90b6d1ca8 <col:16> 'int' 16
|   | | `-CompoundAssignOperator 0x1f90b6d1d60 <line:362:9, col:16> 'size_t':'unsigned long long' '-=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
|   | |   |-DeclRefExpr 0x1f90b6d1d00 <col:9> 'size_t':'unsigned long long' lvalue ParmVar 0x1f90b6c4720 'len' 'size_t':'unsigned long long'
|   | |   `-ImplicitCastExpr 0x1f90b6d1d48 <col:16> 'unsigned long long' <IntegralCast>
|   | |     `-IntegerLiteral 0x1f90b6d1d20 <col:16> 'int' 16
|   | `-BinaryOperator 0x1f90b6d1f48 <line:364:14, col:21> 'int' '>='
|   |   |-ImplicitCastExpr 0x1f90b6d1f18 <col:14> 'size_t':'unsigned long long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1f90b6d1ed0 <col:14> 'size_t':'unsigned long long' lvalue ParmVar 0x1f90b6c4720 'len' 'size_t':'unsigned long long'
|   |   `-ImplicitCastExpr 0x1f90b6d1f30 <col:21> 'unsigned long long' <IntegralCast>
|   |     `-IntegerLiteral 0x1f90b6d1ef0 <col:21> 'int' 16
|   |-BinaryOperator 0x1f90b6d3568 <line:369:5, line:60:37> 'double' '='
|   | |-DeclRefExpr 0x1f90b6d1f88 <line:369:5> 'double' lvalue Var 0x1f90b6c55a0 'c0lo' 'double'
|   | `-BinaryOperator 0x1f90b6d3548 <col:12, line:60:37> 'double' '-'
|   |   |-ParenExpr 0x1f90b6d32a8 <line:369:12, col:33> 'double'
|   |   | `-BinaryOperator 0x1f90b6d3288 <col:13, line:60:37> 'double' '+'
|   |   |   |-ImplicitCastExpr 0x1f90b6d3270 <line:369:13> 'double' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x1f90b6d1fa8 <col:13> 'double' lvalue Var 0x1f90b6c5140 'h0lo' 'double'
|   |   |   `-BinaryOperator 0x1f90b6d3250 <line:60:17, col:37> 'double' '*'
|   |   |     |-ParenExpr 0x1f90b6d3100 <col:17, col:37> 'double'
|   |   |     | `-CStyleCastExpr 0x1f90b6d30d8 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |     |   `-ParenExpr 0x1f90b6d30b8 <col:26, col:36> 'unsigned long long'
|   |   |     |     `-BinaryOperator 0x1f90b6d3060 <col:27, col:35> 'unsigned long long' '<<'
|   |   |     |       |-IntegerLiteral 0x1f90b6d1fc8 <col:27> 'unsigned long long' 1
|   |   |     |       `-ParenExpr 0x1f90b6d2018 <col:33, col:35> 'int'
|   |   |     |         `-IntegerLiteral 0x1f90b6d1ff0 <line:369:24> 'int' 52
|   |   |     `-ParenExpr 0x1f90b6d3230 <line:60:17, col:37> 'double'
|   |   |       `-CStyleCastExpr 0x1f90b6d3208 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |         `-ParenExpr 0x1f90b6d31e8 <col:26, col:36> 'unsigned long long'
|   |   |           `-BinaryOperator 0x1f90b6d3190 <col:27, col:35> 'unsigned long long' '<<'
|   |   |             |-IntegerLiteral 0x1f90b6d3120 <col:27> 'unsigned long long' 1
|   |   |             `-ParenExpr 0x1f90b6d3170 <col:33, col:35> 'int'
|   |   |               `-IntegerLiteral 0x1f90b6d3148 <line:62:20> 'int' 32
|   |   `-BinaryOperator 0x1f90b6d3528 <line:60:17, col:37> 'double' '*'
|   |     |-ParenExpr 0x1f90b6d33d8 <col:17, col:37> 'double'
|   |     | `-CStyleCastExpr 0x1f90b6d33b0 <col:18, col:36> 'double' <IntegralToFloating>
|   |     |   `-ParenExpr 0x1f90b6d3390 <col:26, col:36> 'unsigned long long'
|   |     |     `-BinaryOperator 0x1f90b6d3338 <col:27, col:35> 'unsigned long long' '<<'
|   |     |       |-IntegerLiteral 0x1f90b6d32c8 <col:27> 'unsigned long long' 1
|   |     |       `-ParenExpr 0x1f90b6d3318 <col:33, col:35> 'int'
|   |     |         `-IntegerLiteral 0x1f90b6d32f0 <line:369:42> 'int' 52
|   |     `-ParenExpr 0x1f90b6d3508 <line:60:17, col:37> 'double'
|   |       `-CStyleCastExpr 0x1f90b6d34e0 <col:18, col:36> 'double' <IntegralToFloating>
|   |         `-ParenExpr 0x1f90b6d34c0 <col:26, col:36> 'unsigned long long'
|   |           `-BinaryOperator 0x1f90b6d3468 <col:27, col:35> 'unsigned long long' '<<'
|   |             |-IntegerLiteral 0x1f90b6d33f8 <col:27> 'unsigned long long' 1
|   |             `-ParenExpr 0x1f90b6d3448 <col:33, col:35> 'int'
|   |               `-IntegerLiteral 0x1f90b6d3420 <line:62:20> 'int' 32
|   |-BinaryOperator 0x1f90b6d3e20 <line:370:5, line:63:30> 'double' '='
|   | |-DeclRefExpr 0x1f90b6d3588 <line:370:5> 'double' lvalue Var 0x1f90b6c56a0 'c1lo' 'double'
|   | `-BinaryOperator 0x1f90b6d3e00 <col:12, line:63:30> 'double' '-'
|   |   |-ParenExpr 0x1f90b6d39f0 <line:370:12, col:33> 'double'
|   |   | `-BinaryOperator 0x1f90b6d39d0 <col:13, line:63:30> 'double' '+'
|   |   |   |-ImplicitCastExpr 0x1f90b6d39b8 <line:370:13> 'double' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x1f90b6d35a8 <col:13> 'double' lvalue Var 0x1f90b6c5240 'h1lo' 'double'
|   |   |   `-BinaryOperator 0x1f90b6d3998 <line:60:17, line:63:30> 'double' '*'
|   |   |     |-ParenExpr 0x1f90b6d36d8 <line:60:17, col:37> 'double'
|   |   |     | `-CStyleCastExpr 0x1f90b6d36b0 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |     |   `-ParenExpr 0x1f90b6d3690 <col:26, col:36> 'unsigned long long'
|   |   |     |     `-BinaryOperator 0x1f90b6d3638 <col:27, col:35> 'unsigned long long' '<<'
|   |   |     |       |-IntegerLiteral 0x1f90b6d35c8 <col:27> 'unsigned long long' 1
|   |   |     |       `-ParenExpr 0x1f90b6d3618 <col:33, col:35> 'int'
|   |   |     |         `-IntegerLiteral 0x1f90b6d35f0 <line:370:24> 'int' 52
|   |   |     `-ParenExpr 0x1f90b6d3978 <line:63:16, col:30> 'double'
|   |   |       `-BinaryOperator 0x1f90b6d3958 <line:60:17, col:37> 'double' '*'
|   |   |         |-ParenExpr 0x1f90b6d3808 <col:17, col:37> 'double'
|   |   |         | `-CStyleCastExpr 0x1f90b6d37e0 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |         |   `-ParenExpr 0x1f90b6d37c0 <col:26, col:36> 'unsigned long long'
|   |   |         |     `-BinaryOperator 0x1f90b6d3768 <col:27, col:35> 'unsigned long long' '<<'
|   |   |         |       |-IntegerLiteral 0x1f90b6d36f8 <col:27> 'unsigned long long' 1
|   |   |         |       `-ParenExpr 0x1f90b6d3748 <col:33, col:35> 'int'
|   |   |         |         `-IntegerLiteral 0x1f90b6d3720 <line:62:20> 'int' 32
|   |   |         `-ParenExpr 0x1f90b6d3938 <line:60:17, col:37> 'double'
|   |   |           `-CStyleCastExpr 0x1f90b6d3910 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |             `-ParenExpr 0x1f90b6d38f0 <col:26, col:36> 'unsigned long long'
|   |   |               `-BinaryOperator 0x1f90b6d3898 <col:27, col:35> 'unsigned long long' '<<'
|   |   |                 |-IntegerLiteral 0x1f90b6d3828 <col:27> 'unsigned long long' 1
|   |   |                 `-ParenExpr 0x1f90b6d3878 <col:33, col:35> 'int'
|   |   |                   `-IntegerLiteral 0x1f90b6d3850 <line:63:27> 'int' 32
|   |   `-BinaryOperator 0x1f90b6d3de0 <line:60:17, line:63:30> 'double' '*'
|   |     |-ParenExpr 0x1f90b6d3b20 <line:60:17, col:37> 'double'
|   |     | `-CStyleCastExpr 0x1f90b6d3af8 <col:18, col:36> 'double' <IntegralToFloating>
|   |     |   `-ParenExpr 0x1f90b6d3ad8 <col:26, col:36> 'unsigned long long'
|   |     |     `-BinaryOperator 0x1f90b6d3a80 <col:27, col:35> 'unsigned long long' '<<'
|   |     |       |-IntegerLiteral 0x1f90b6d3a10 <col:27> 'unsigned long long' 1
|   |     |       `-ParenExpr 0x1f90b6d3a60 <col:33, col:35> 'int'
|   |     |         `-IntegerLiteral 0x1f90b6d3a38 <line:370:42> 'int' 52
|   |     `-ParenExpr 0x1f90b6d3dc0 <line:63:16, col:30> 'double'
|   |       `-BinaryOperator 0x1f90b6d3da0 <line:60:17, col:37> 'double' '*'
|   |         |-ParenExpr 0x1f90b6d3c50 <col:17, col:37> 'double'
|   |         | `-CStyleCastExpr 0x1f90b6d3c28 <col:18, col:36> 'double' <IntegralToFloating>
|   |         |   `-ParenExpr 0x1f90b6d3c08 <col:26, col:36> 'unsigned long long'
|   |         |     `-BinaryOperator 0x1f90b6d3bb0 <col:27, col:35> 'unsigned long long' '<<'
|   |         |       |-IntegerLiteral 0x1f90b6d3b40 <col:27> 'unsigned long long' 1
|   |         |       `-ParenExpr 0x1f90b6d3b90 <col:33, col:35> 'int'
|   |         |         `-IntegerLiteral 0x1f90b6d3b68 <line:62:20> 'int' 32
|   |         `-ParenExpr 0x1f90b6d3d80 <line:60:17, col:37> 'double'
|   |           `-CStyleCastExpr 0x1f90b6d3d58 <col:18, col:36> 'double' <IntegralToFloating>
|   |             `-ParenExpr 0x1f90b6d3d38 <col:26, col:36> 'unsigned long long'
|   |               `-BinaryOperator 0x1f90b6d3ce0 <col:27, col:35> 'unsigned long long' '<<'
|   |                 |-IntegerLiteral 0x1f90b6d3c70 <col:27> 'unsigned long long' 1
|   |                 `-ParenExpr 0x1f90b6d3cc0 <col:33, col:35> 'int'
|   |                   `-IntegerLiteral 0x1f90b6d3c98 <line:63:27> 'int' 32
|   |-BinaryOperator 0x1f90b6cc948 <line:371:5, line:64:30> 'double' '='
|   | |-DeclRefExpr 0x1f90b6d3e40 <line:371:5> 'double' lvalue Var 0x1f90b6c57a0 'c2lo' 'double'
|   | `-BinaryOperator 0x1f90b6cc928 <col:12, line:64:30> 'double' '-'
|   |   |-ParenExpr 0x1f90b6cc3a8 <line:371:12, col:33> 'double'
|   |   | `-BinaryOperator 0x1f90b6cc388 <col:13, line:64:30> 'double' '+'
|   |   |   |-ImplicitCastExpr 0x1f90b6cc370 <line:371:13> 'double' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x1f90b6d3e60 <col:13> 'double' lvalue Var 0x1f90b6c5340 'h2lo' 'double'
|   |   |   `-BinaryOperator 0x1f90b6cc350 <line:60:17, line:64:30> 'double' '*'
|   |   |     |-ParenExpr 0x1f90b6d3f90 <line:60:17, col:37> 'double'
|   |   |     | `-CStyleCastExpr 0x1f90b6d3f68 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |     |   `-ParenExpr 0x1f90b6d3f48 <col:26, col:36> 'unsigned long long'
|   |   |     |     `-BinaryOperator 0x1f90b6d3ef0 <col:27, col:35> 'unsigned long long' '<<'
|   |   |     |       |-IntegerLiteral 0x1f90b6d3e80 <col:27> 'unsigned long long' 1
|   |   |     |       `-ParenExpr 0x1f90b6d3ed0 <col:33, col:35> 'int'
|   |   |     |         `-IntegerLiteral 0x1f90b6d3ea8 <line:371:24> 'int' 52
|   |   |     `-ParenExpr 0x1f90b6cc330 <line:64:16, col:30> 'double'
|   |   |       `-BinaryOperator 0x1f90b6cc310 <line:63:16, line:60:37> 'double' '*'
|   |   |         |-ParenExpr 0x1f90b6cc1c0 <line:63:16, col:30> 'double'
|   |   |         | `-BinaryOperator 0x1f90b6cc1a0 <line:60:17, col:37> 'double' '*'
|   |   |         |   |-ParenExpr 0x1f90b6cc050 <col:17, col:37> 'double'
|   |   |         |   | `-CStyleCastExpr 0x1f90b6cc028 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |         |   |   `-ParenExpr 0x1f90b6cc008 <col:26, col:36> 'unsigned long long'
|   |   |         |   |     `-BinaryOperator 0x1f90b6d4020 <col:27, col:35> 'unsigned long long' '<<'
|   |   |         |   |       |-IntegerLiteral 0x1f90b6d3fb0 <col:27> 'unsigned long long' 1
|   |   |         |   |       `-ParenExpr 0x1f90b6d4000 <col:33, col:35> 'int'
|   |   |         |   |         `-IntegerLiteral 0x1f90b6d3fd8 <line:62:20> 'int' 32
|   |   |         |   `-ParenExpr 0x1f90b6cc180 <line:60:17, col:37> 'double'
|   |   |         |     `-CStyleCastExpr 0x1f90b6cc158 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |         |       `-ParenExpr 0x1f90b6cc138 <col:26, col:36> 'unsigned long long'
|   |   |         |         `-BinaryOperator 0x1f90b6cc0e0 <col:27, col:35> 'unsigned long long' '<<'
|   |   |         |           |-IntegerLiteral 0x1f90b6cc070 <col:27> 'unsigned long long' 1
|   |   |         |           `-ParenExpr 0x1f90b6cc0c0 <col:33, col:35> 'int'
|   |   |         |             `-IntegerLiteral 0x1f90b6cc098 <line:63:27> 'int' 32
|   |   |         `-ParenExpr 0x1f90b6cc2f0 <line:60:17, col:37> 'double'
|   |   |           `-CStyleCastExpr 0x1f90b6cc2c8 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |             `-ParenExpr 0x1f90b6cc2a8 <col:26, col:36> 'unsigned long long'
|   |   |               `-BinaryOperator 0x1f90b6cc250 <col:27, col:35> 'unsigned long long' '<<'
|   |   |                 |-IntegerLiteral 0x1f90b6cc1e0 <col:27> 'unsigned long long' 1
|   |   |                 `-ParenExpr 0x1f90b6cc230 <col:33, col:35> 'int'
|   |   |                   `-IntegerLiteral 0x1f90b6cc208 <line:64:27> 'int' 32
|   |   `-BinaryOperator 0x1f90b6cc908 <line:60:17, line:64:30> 'double' '*'
|   |     |-ParenExpr 0x1f90b6cc4d8 <line:60:17, col:37> 'double'
|   |     | `-CStyleCastExpr 0x1f90b6cc4b0 <col:18, col:36> 'double' <IntegralToFloating>
|   |     |   `-ParenExpr 0x1f90b6cc490 <col:26, col:36> 'unsigned long long'
|   |     |     `-BinaryOperator 0x1f90b6cc438 <col:27, col:35> 'unsigned long long' '<<'
|   |     |       |-IntegerLiteral 0x1f90b6cc3c8 <col:27> 'unsigned long long' 1
|   |     |       `-ParenExpr 0x1f90b6cc418 <col:33, col:35> 'int'
|   |     |         `-IntegerLiteral 0x1f90b6cc3f0 <line:371:42> 'int' 52
|   |     `-ParenExpr 0x1f90b6cc8e8 <line:64:16, col:30> 'double'
|   |       `-BinaryOperator 0x1f90b6cc8c8 <line:63:16, line:60:37> 'double' '*'
|   |         |-ParenExpr 0x1f90b6cc778 <line:63:16, col:30> 'double'
|   |         | `-BinaryOperator 0x1f90b6cc758 <line:60:17, col:37> 'double' '*'
|   |         |   |-ParenExpr 0x1f90b6cc608 <col:17, col:37> 'double'
|   |         |   | `-CStyleCastExpr 0x1f90b6cc5e0 <col:18, col:36> 'double' <IntegralToFloating>
|   |         |   |   `-ParenExpr 0x1f90b6cc5c0 <col:26, col:36> 'unsigned long long'
|   |         |   |     `-BinaryOperator 0x1f90b6cc568 <col:27, col:35> 'unsigned long long' '<<'
|   |         |   |       |-IntegerLiteral 0x1f90b6cc4f8 <col:27> 'unsigned long long' 1
|   |         |   |       `-ParenExpr 0x1f90b6cc548 <col:33, col:35> 'int'
|   |         |   |         `-IntegerLiteral 0x1f90b6cc520 <line:62:20> 'int' 32
|   |         |   `-ParenExpr 0x1f90b6cc738 <line:60:17, col:37> 'double'
|   |         |     `-CStyleCastExpr 0x1f90b6cc710 <col:18, col:36> 'double' <IntegralToFloating>
|   |         |       `-ParenExpr 0x1f90b6cc6f0 <col:26, col:36> 'unsigned long long'
|   |         |         `-BinaryOperator 0x1f90b6cc698 <col:27, col:35> 'unsigned long long' '<<'
|   |         |           |-IntegerLiteral 0x1f90b6cc628 <col:27> 'unsigned long long' 1
|   |         |           `-ParenExpr 0x1f90b6cc678 <col:33, col:35> 'int'
|   |         |             `-IntegerLiteral 0x1f90b6cc650 <line:63:27> 'int' 32
|   |         `-ParenExpr 0x1f90b6cc8a8 <line:60:17, col:37> 'double'
|   |           `-CStyleCastExpr 0x1f90b6cc880 <col:18, col:36> 'double' <IntegralToFloating>
|   |             `-ParenExpr 0x1f90b6cc860 <col:26, col:36> 'unsigned long long'
|   |               `-BinaryOperator 0x1f90b6cc808 <col:27, col:35> 'unsigned long long' '<<'
|   |                 |-IntegerLiteral 0x1f90b6cc798 <col:27> 'unsigned long long' 1
|   |                 `-ParenExpr 0x1f90b6cc7e8 <col:33, col:35> 'int'
|   |                   `-IntegerLiteral 0x1f90b6cc7c0 <line:64:27> 'int' 32
|   |-BinaryOperator 0x1f90b6d7890 <line:372:5, line:65:31> 'double' '='
|   | |-DeclRefExpr 0x1f90b6cc968 <line:372:5> 'double' lvalue Var 0x1f90b6c58a0 'c3lo' 'double'
|   | `-BinaryOperator 0x1f90b6d7870 <col:12, line:65:31> 'double' '-'
|   |   |-ParenExpr 0x1f90b6d7180 <line:372:12, col:34> 'double'
|   |   | `-BinaryOperator 0x1f90b6d7160 <col:13, line:65:31> 'double' '+'
|   |   |   |-ImplicitCastExpr 0x1f90b6d7148 <line:372:13> 'double' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x1f90b6cc988 <col:13> 'double' lvalue Var 0x1f90b6c5440 'h3lo' 'double'
|   |   |   `-BinaryOperator 0x1f90b6d7128 <line:60:17, line:65:31> 'double' '*'
|   |   |     |-ParenExpr 0x1f90b6ccab8 <line:60:17, col:37> 'double'
|   |   |     | `-CStyleCastExpr 0x1f90b6cca90 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |     |   `-ParenExpr 0x1f90b6cca70 <col:26, col:36> 'unsigned long long'
|   |   |     |     `-BinaryOperator 0x1f90b6cca18 <col:27, col:35> 'unsigned long long' '<<'
|   |   |     |       |-IntegerLiteral 0x1f90b6cc9a8 <col:27> 'unsigned long long' 1
|   |   |     |       `-ParenExpr 0x1f90b6cc9f8 <col:33, col:35> 'int'
|   |   |     |         `-IntegerLiteral 0x1f90b6cc9d0 <line:372:24> 'int' 52
|   |   |     `-ParenExpr 0x1f90b6d7108 <line:65:17, col:31> 'double'
|   |   |       `-BinaryOperator 0x1f90b6d70e8 <line:64:16, line:60:37> 'double' '*'
|   |   |         |-ParenExpr 0x1f90b6ccec8 <line:64:16, col:30> 'double'
|   |   |         | `-BinaryOperator 0x1f90b6ccea8 <line:63:16, line:60:37> 'double' '*'
|   |   |         |   |-ParenExpr 0x1f90b6ccd58 <line:63:16, col:30> 'double'
|   |   |         |   | `-BinaryOperator 0x1f90b6ccd38 <line:60:17, col:37> 'double' '*'
|   |   |         |   |   |-ParenExpr 0x1f90b6ccbe8 <col:17, col:37> 'double'
|   |   |         |   |   | `-CStyleCastExpr 0x1f90b6ccbc0 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |         |   |   |   `-ParenExpr 0x1f90b6ccba0 <col:26, col:36> 'unsigned long long'
|   |   |         |   |   |     `-BinaryOperator 0x1f90b6ccb48 <col:27, col:35> 'unsigned long long' '<<'
|   |   |         |   |   |       |-IntegerLiteral 0x1f90b6ccad8 <col:27> 'unsigned long long' 1
|   |   |         |   |   |       `-ParenExpr 0x1f90b6ccb28 <col:33, col:35> 'int'
|   |   |         |   |   |         `-IntegerLiteral 0x1f90b6ccb00 <line:62:20> 'int' 32
|   |   |         |   |   `-ParenExpr 0x1f90b6ccd18 <line:60:17, col:37> 'double'
|   |   |         |   |     `-CStyleCastExpr 0x1f90b6cccf0 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |         |   |       `-ParenExpr 0x1f90b6cccd0 <col:26, col:36> 'unsigned long long'
|   |   |         |   |         `-BinaryOperator 0x1f90b6ccc78 <col:27, col:35> 'unsigned long long' '<<'
|   |   |         |   |           |-IntegerLiteral 0x1f90b6ccc08 <col:27> 'unsigned long long' 1
|   |   |         |   |           `-ParenExpr 0x1f90b6ccc58 <col:33, col:35> 'int'
|   |   |         |   |             `-IntegerLiteral 0x1f90b6ccc30 <line:63:27> 'int' 32
|   |   |         |   `-ParenExpr 0x1f90b6cce88 <line:60:17, col:37> 'double'
|   |   |         |     `-CStyleCastExpr 0x1f90b6cce60 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |         |       `-ParenExpr 0x1f90b6cce40 <col:26, col:36> 'unsigned long long'
|   |   |         |         `-BinaryOperator 0x1f90b6ccde8 <col:27, col:35> 'unsigned long long' '<<'
|   |   |         |           |-IntegerLiteral 0x1f90b6ccd78 <col:27> 'unsigned long long' 1
|   |   |         |           `-ParenExpr 0x1f90b6ccdc8 <col:33, col:35> 'int'
|   |   |         |             `-IntegerLiteral 0x1f90b6ccda0 <line:64:27> 'int' 32
|   |   |         `-ParenExpr 0x1f90b6d70c8 <line:60:17, col:37> 'double'
|   |   |           `-CStyleCastExpr 0x1f90b6d70a0 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |             `-ParenExpr 0x1f90b6ccfb0 <col:26, col:36> 'unsigned long long'
|   |   |               `-BinaryOperator 0x1f90b6ccf58 <col:27, col:35> 'unsigned long long' '<<'
|   |   |                 |-IntegerLiteral 0x1f90b6ccee8 <col:27> 'unsigned long long' 1
|   |   |                 `-ParenExpr 0x1f90b6ccf38 <col:33, col:35> 'int'
|   |   |                   `-IntegerLiteral 0x1f90b6ccf10 <line:65:28> 'int' 34
|   |   `-BinaryOperator 0x1f90b6d7850 <line:60:17, line:65:31> 'double' '*'
|   |     |-ParenExpr 0x1f90b6d72b0 <line:60:17, col:37> 'double'
|   |     | `-CStyleCastExpr 0x1f90b6d7288 <col:18, col:36> 'double' <IntegralToFloating>
|   |     |   `-ParenExpr 0x1f90b6d7268 <col:26, col:36> 'unsigned long long'
|   |     |     `-BinaryOperator 0x1f90b6d7210 <col:27, col:35> 'unsigned long long' '<<'
|   |     |       |-IntegerLiteral 0x1f90b6d71a0 <col:27> 'unsigned long long' 1
|   |     |       `-ParenExpr 0x1f90b6d71f0 <col:33, col:35> 'int'
|   |     |         `-IntegerLiteral 0x1f90b6d71c8 <line:372:42> 'int' 52
|   |     `-ParenExpr 0x1f90b6d7830 <line:65:17, col:31> 'double'
|   |       `-BinaryOperator 0x1f90b6d7810 <line:64:16, line:60:37> 'double' '*'
|   |         |-ParenExpr 0x1f90b6d76c0 <line:64:16, col:30> 'double'
|   |         | `-BinaryOperator 0x1f90b6d76a0 <line:63:16, line:60:37> 'double' '*'
|   |         |   |-ParenExpr 0x1f90b6d7550 <line:63:16, col:30> 'double'
|   |         |   | `-BinaryOperator 0x1f90b6d7530 <line:60:17, col:37> 'double' '*'
|   |         |   |   |-ParenExpr 0x1f90b6d73e0 <col:17, col:37> 'double'
|   |         |   |   | `-CStyleCastExpr 0x1f90b6d73b8 <col:18, col:36> 'double' <IntegralToFloating>
|   |         |   |   |   `-ParenExpr 0x1f90b6d7398 <col:26, col:36> 'unsigned long long'
|   |         |   |   |     `-BinaryOperator 0x1f90b6d7340 <col:27, col:35> 'unsigned long long' '<<'
|   |         |   |   |       |-IntegerLiteral 0x1f90b6d72d0 <col:27> 'unsigned long long' 1
|   |         |   |   |       `-ParenExpr 0x1f90b6d7320 <col:33, col:35> 'int'
|   |         |   |   |         `-IntegerLiteral 0x1f90b6d72f8 <line:62:20> 'int' 32
|   |         |   |   `-ParenExpr 0x1f90b6d7510 <line:60:17, col:37> 'double'
|   |         |   |     `-CStyleCastExpr 0x1f90b6d74e8 <col:18, col:36> 'double' <IntegralToFloating>
|   |         |   |       `-ParenExpr 0x1f90b6d74c8 <col:26, col:36> 'unsigned long long'
|   |         |   |         `-BinaryOperator 0x1f90b6d7470 <col:27, col:35> 'unsigned long long' '<<'
|   |         |   |           |-IntegerLiteral 0x1f90b6d7400 <col:27> 'unsigned long long' 1
|   |         |   |           `-ParenExpr 0x1f90b6d7450 <col:33, col:35> 'int'
|   |         |   |             `-IntegerLiteral 0x1f90b6d7428 <line:63:27> 'int' 32
|   |         |   `-ParenExpr 0x1f90b6d7680 <line:60:17, col:37> 'double'
|   |         |     `-CStyleCastExpr 0x1f90b6d7658 <col:18, col:36> 'double' <IntegralToFloating>
|   |         |       `-ParenExpr 0x1f90b6d7638 <col:26, col:36> 'unsigned long long'
|   |         |         `-BinaryOperator 0x1f90b6d75e0 <col:27, col:35> 'unsigned long long' '<<'
|   |         |           |-IntegerLiteral 0x1f90b6d7570 <col:27> 'unsigned long long' 1
|   |         |           `-ParenExpr 0x1f90b6d75c0 <col:33, col:35> 'int'
|   |         |             `-IntegerLiteral 0x1f90b6d7598 <line:64:27> 'int' 32
|   |         `-ParenExpr 0x1f90b6d77f0 <line:60:17, col:37> 'double'
|   |           `-CStyleCastExpr 0x1f90b6d77c8 <col:18, col:36> 'double' <IntegralToFloating>
|   |             `-ParenExpr 0x1f90b6d77a8 <col:26, col:36> 'unsigned long long'
|   |               `-BinaryOperator 0x1f90b6d7750 <col:27, col:35> 'unsigned long long' '<<'
|   |                 |-IntegerLiteral 0x1f90b6d76e0 <col:27> 'unsigned long long' 1
|   |                 `-ParenExpr 0x1f90b6d7730 <col:33, col:35> 'int'
|   |                   `-IntegerLiteral 0x1f90b6d7708 <line:65:28> 'int' 34
|   |-BinaryOperator 0x1f90b6d7e68 <line:374:5, line:60:37> 'double' '='
|   | |-DeclRefExpr 0x1f90b6d78b0 <line:374:5> 'double' lvalue Var 0x1f90b6c5620 'c0hi' 'double'
|   | `-BinaryOperator 0x1f90b6d7e48 <col:12, line:60:37> 'double' '-'
|   |   |-ParenExpr 0x1f90b6d7ba8 <line:374:12, col:33> 'double'
|   |   | `-BinaryOperator 0x1f90b6d7b88 <col:13, line:60:37> 'double' '+'
|   |   |   |-ImplicitCastExpr 0x1f90b6d7b70 <line:374:13> 'double' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x1f90b6d78d0 <col:13> 'double' lvalue Var 0x1f90b6c51c0 'h0hi' 'double'
|   |   |   `-BinaryOperator 0x1f90b6d7b50 <line:60:17, col:37> 'double' '*'
|   |   |     |-ParenExpr 0x1f90b6d7a00 <col:17, col:37> 'double'
|   |   |     | `-CStyleCastExpr 0x1f90b6d79d8 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |     |   `-ParenExpr 0x1f90b6d79b8 <col:26, col:36> 'unsigned long long'
|   |   |     |     `-BinaryOperator 0x1f90b6d7960 <col:27, col:35> 'unsigned long long' '<<'
|   |   |     |       |-IntegerLiteral 0x1f90b6d78f0 <col:27> 'unsigned long long' 1
|   |   |     |       `-ParenExpr 0x1f90b6d7940 <col:33, col:35> 'int'
|   |   |     |         `-IntegerLiteral 0x1f90b6d7918 <line:374:24> 'int' 52
|   |   |     `-ParenExpr 0x1f90b6d7b30 <line:60:17, col:37> 'double'
|   |   |       `-CStyleCastExpr 0x1f90b6d7b08 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |         `-ParenExpr 0x1f90b6d7ae8 <col:26, col:36> 'unsigned long long'
|   |   |           `-BinaryOperator 0x1f90b6d7a90 <col:27, col:35> 'unsigned long long' '<<'
|   |   |             |-IntegerLiteral 0x1f90b6d7a20 <col:27> 'unsigned long long' 1
|   |   |             `-ParenExpr 0x1f90b6d7a70 <col:33, col:35> 'int'
|   |   |               `-IntegerLiteral 0x1f90b6d7a48 <line:62:20> 'int' 32
|   |   `-BinaryOperator 0x1f90b6d7e28 <line:60:17, col:37> 'double' '*'
|   |     |-ParenExpr 0x1f90b6d7cd8 <col:17, col:37> 'double'
|   |     | `-CStyleCastExpr 0x1f90b6d7cb0 <col:18, col:36> 'double' <IntegralToFloating>
|   |     |   `-ParenExpr 0x1f90b6d7c90 <col:26, col:36> 'unsigned long long'
|   |     |     `-BinaryOperator 0x1f90b6d7c38 <col:27, col:35> 'unsigned long long' '<<'
|   |     |       |-IntegerLiteral 0x1f90b6d7bc8 <col:27> 'unsigned long long' 1
|   |     |       `-ParenExpr 0x1f90b6d7c18 <col:33, col:35> 'int'
|   |     |         `-IntegerLiteral 0x1f90b6d7bf0 <line:374:42> 'int' 52
|   |     `-ParenExpr 0x1f90b6d7e08 <line:60:17, col:37> 'double'
|   |       `-CStyleCastExpr 0x1f90b6d7de0 <col:18, col:36> 'double' <IntegralToFloating>
|   |         `-ParenExpr 0x1f90b6d7dc0 <col:26, col:36> 'unsigned long long'
|   |           `-BinaryOperator 0x1f90b6d7d68 <col:27, col:35> 'unsigned long long' '<<'
|   |             |-IntegerLiteral 0x1f90b6d7cf8 <col:27> 'unsigned long long' 1
|   |             `-ParenExpr 0x1f90b6d7d48 <col:33, col:35> 'int'
|   |               `-IntegerLiteral 0x1f90b6d7d20 <line:62:20> 'int' 32
|   |-BinaryOperator 0x1f90b6d9758 <line:375:5, line:63:30> 'double' '='
|   | |-DeclRefExpr 0x1f90b6d7e88 <line:375:5> 'double' lvalue Var 0x1f90b6c5720 'c1hi' 'double'
|   | `-BinaryOperator 0x1f90b6d9738 <col:12, line:63:30> 'double' '-'
|   |   |-ParenExpr 0x1f90b6d9328 <line:375:12, col:33> 'double'
|   |   | `-BinaryOperator 0x1f90b6d9308 <col:13, line:63:30> 'double' '+'
|   |   |   |-ImplicitCastExpr 0x1f90b6d92f0 <line:375:13> 'double' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x1f90b6d7ea8 <col:13> 'double' lvalue Var 0x1f90b6c52c0 'h1hi' 'double'
|   |   |   `-BinaryOperator 0x1f90b6d92d0 <line:60:17, line:63:30> 'double' '*'
|   |   |     |-ParenExpr 0x1f90b6d7fd8 <line:60:17, col:37> 'double'
|   |   |     | `-CStyleCastExpr 0x1f90b6d7fb0 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |     |   `-ParenExpr 0x1f90b6d7f90 <col:26, col:36> 'unsigned long long'
|   |   |     |     `-BinaryOperator 0x1f90b6d7f38 <col:27, col:35> 'unsigned long long' '<<'
|   |   |     |       |-IntegerLiteral 0x1f90b6d7ec8 <col:27> 'unsigned long long' 1
|   |   |     |       `-ParenExpr 0x1f90b6d7f18 <col:33, col:35> 'int'
|   |   |     |         `-IntegerLiteral 0x1f90b6d7ef0 <line:375:24> 'int' 52
|   |   |     `-ParenExpr 0x1f90b6d92b0 <line:63:16, col:30> 'double'
|   |   |       `-BinaryOperator 0x1f90b6d9290 <line:60:17, col:37> 'double' '*'
|   |   |         |-ParenExpr 0x1f90b6d9140 <col:17, col:37> 'double'
|   |   |         | `-CStyleCastExpr 0x1f90b6d9118 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |         |   `-ParenExpr 0x1f90b6d90f8 <col:26, col:36> 'unsigned long long'
|   |   |         |     `-BinaryOperator 0x1f90b6d8068 <col:27, col:35> 'unsigned long long' '<<'
|   |   |         |       |-IntegerLiteral 0x1f90b6d7ff8 <col:27> 'unsigned long long' 1
|   |   |         |       `-ParenExpr 0x1f90b6d8048 <col:33, col:35> 'int'
|   |   |         |         `-IntegerLiteral 0x1f90b6d8020 <line:62:20> 'int' 32
|   |   |         `-ParenExpr 0x1f90b6d9270 <line:60:17, col:37> 'double'
|   |   |           `-CStyleCastExpr 0x1f90b6d9248 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |             `-ParenExpr 0x1f90b6d9228 <col:26, col:36> 'unsigned long long'
|   |   |               `-BinaryOperator 0x1f90b6d91d0 <col:27, col:35> 'unsigned long long' '<<'
|   |   |                 |-IntegerLiteral 0x1f90b6d9160 <col:27> 'unsigned long long' 1
|   |   |                 `-ParenExpr 0x1f90b6d91b0 <col:33, col:35> 'int'
|   |   |                   `-IntegerLiteral 0x1f90b6d9188 <line:63:27> 'int' 32
|   |   `-BinaryOperator 0x1f90b6d9718 <line:60:17, line:63:30> 'double' '*'
|   |     |-ParenExpr 0x1f90b6d9458 <line:60:17, col:37> 'double'
|   |     | `-CStyleCastExpr 0x1f90b6d9430 <col:18, col:36> 'double' <IntegralToFloating>
|   |     |   `-ParenExpr 0x1f90b6d9410 <col:26, col:36> 'unsigned long long'
|   |     |     `-BinaryOperator 0x1f90b6d93b8 <col:27, col:35> 'unsigned long long' '<<'
|   |     |       |-IntegerLiteral 0x1f90b6d9348 <col:27> 'unsigned long long' 1
|   |     |       `-ParenExpr 0x1f90b6d9398 <col:33, col:35> 'int'
|   |     |         `-IntegerLiteral 0x1f90b6d9370 <line:375:42> 'int' 52
|   |     `-ParenExpr 0x1f90b6d96f8 <line:63:16, col:30> 'double'
|   |       `-BinaryOperator 0x1f90b6d96d8 <line:60:17, col:37> 'double' '*'
|   |         |-ParenExpr 0x1f90b6d9588 <col:17, col:37> 'double'
|   |         | `-CStyleCastExpr 0x1f90b6d9560 <col:18, col:36> 'double' <IntegralToFloating>
|   |         |   `-ParenExpr 0x1f90b6d9540 <col:26, col:36> 'unsigned long long'
|   |         |     `-BinaryOperator 0x1f90b6d94e8 <col:27, col:35> 'unsigned long long' '<<'
|   |         |       |-IntegerLiteral 0x1f90b6d9478 <col:27> 'unsigned long long' 1
|   |         |       `-ParenExpr 0x1f90b6d94c8 <col:33, col:35> 'int'
|   |         |         `-IntegerLiteral 0x1f90b6d94a0 <line:62:20> 'int' 32
|   |         `-ParenExpr 0x1f90b6d96b8 <line:60:17, col:37> 'double'
|   |           `-CStyleCastExpr 0x1f90b6d9690 <col:18, col:36> 'double' <IntegralToFloating>
|   |             `-ParenExpr 0x1f90b6d9670 <col:26, col:36> 'unsigned long long'
|   |               `-BinaryOperator 0x1f90b6d9618 <col:27, col:35> 'unsigned long long' '<<'
|   |                 |-IntegerLiteral 0x1f90b6d95a8 <col:27> 'unsigned long long' 1
|   |                 `-ParenExpr 0x1f90b6d95f8 <col:33, col:35> 'int'
|   |                   `-IntegerLiteral 0x1f90b6d95d0 <line:63:27> 'int' 32
|   |-BinaryOperator 0x1f90b6d82e8 <line:376:5, line:64:30> 'double' '='
|   | |-DeclRefExpr 0x1f90b6d9778 <line:376:5> 'double' lvalue Var 0x1f90b6c5820 'c2hi' 'double'
|   | `-BinaryOperator 0x1f90b6d82c8 <col:12, line:64:30> 'double' '-'
|   |   |-ParenExpr 0x1f90b6d9d50 <line:376:12, col:33> 'double'
|   |   | `-BinaryOperator 0x1f90b6d9d30 <col:13, line:64:30> 'double' '+'
|   |   |   |-ImplicitCastExpr 0x1f90b6d9d18 <line:376:13> 'double' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x1f90b6d9798 <col:13> 'double' lvalue Var 0x1f90b6c53c0 'h2hi' 'double'
|   |   |   `-BinaryOperator 0x1f90b6d9cf8 <line:60:17, line:64:30> 'double' '*'
|   |   |     |-ParenExpr 0x1f90b6d98c8 <line:60:17, col:37> 'double'
|   |   |     | `-CStyleCastExpr 0x1f90b6d98a0 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |     |   `-ParenExpr 0x1f90b6d9880 <col:26, col:36> 'unsigned long long'
|   |   |     |     `-BinaryOperator 0x1f90b6d9828 <col:27, col:35> 'unsigned long long' '<<'
|   |   |     |       |-IntegerLiteral 0x1f90b6d97b8 <col:27> 'unsigned long long' 1
|   |   |     |       `-ParenExpr 0x1f90b6d9808 <col:33, col:35> 'int'
|   |   |     |         `-IntegerLiteral 0x1f90b6d97e0 <line:376:24> 'int' 52
|   |   |     `-ParenExpr 0x1f90b6d9cd8 <line:64:16, col:30> 'double'
|   |   |       `-BinaryOperator 0x1f90b6d9cb8 <line:63:16, line:60:37> 'double' '*'
|   |   |         |-ParenExpr 0x1f90b6d9b68 <line:63:16, col:30> 'double'
|   |   |         | `-BinaryOperator 0x1f90b6d9b48 <line:60:17, col:37> 'double' '*'
|   |   |         |   |-ParenExpr 0x1f90b6d99f8 <col:17, col:37> 'double'
|   |   |         |   | `-CStyleCastExpr 0x1f90b6d99d0 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |         |   |   `-ParenExpr 0x1f90b6d99b0 <col:26, col:36> 'unsigned long long'
|   |   |         |   |     `-BinaryOperator 0x1f90b6d9958 <col:27, col:35> 'unsigned long long' '<<'
|   |   |         |   |       |-IntegerLiteral 0x1f90b6d98e8 <col:27> 'unsigned long long' 1
|   |   |         |   |       `-ParenExpr 0x1f90b6d9938 <col:33, col:35> 'int'
|   |   |         |   |         `-IntegerLiteral 0x1f90b6d9910 <line:62:20> 'int' 32
|   |   |         |   `-ParenExpr 0x1f90b6d9b28 <line:60:17, col:37> 'double'
|   |   |         |     `-CStyleCastExpr 0x1f90b6d9b00 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |         |       `-ParenExpr 0x1f90b6d9ae0 <col:26, col:36> 'unsigned long long'
|   |   |         |         `-BinaryOperator 0x1f90b6d9a88 <col:27, col:35> 'unsigned long long' '<<'
|   |   |         |           |-IntegerLiteral 0x1f90b6d9a18 <col:27> 'unsigned long long' 1
|   |   |         |           `-ParenExpr 0x1f90b6d9a68 <col:33, col:35> 'int'
|   |   |         |             `-IntegerLiteral 0x1f90b6d9a40 <line:63:27> 'int' 32
|   |   |         `-ParenExpr 0x1f90b6d9c98 <line:60:17, col:37> 'double'
|   |   |           `-CStyleCastExpr 0x1f90b6d9c70 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |             `-ParenExpr 0x1f90b6d9c50 <col:26, col:36> 'unsigned long long'
|   |   |               `-BinaryOperator 0x1f90b6d9bf8 <col:27, col:35> 'unsigned long long' '<<'
|   |   |                 |-IntegerLiteral 0x1f90b6d9b88 <col:27> 'unsigned long long' 1
|   |   |                 `-ParenExpr 0x1f90b6d9bd8 <col:33, col:35> 'int'
|   |   |                   `-IntegerLiteral 0x1f90b6d9bb0 <line:64:27> 'int' 32
|   |   `-BinaryOperator 0x1f90b6d82a8 <line:60:17, line:64:30> 'double' '*'
|   |     |-ParenExpr 0x1f90b6d9e80 <line:60:17, col:37> 'double'
|   |     | `-CStyleCastExpr 0x1f90b6d9e58 <col:18, col:36> 'double' <IntegralToFloating>
|   |     |   `-ParenExpr 0x1f90b6d9e38 <col:26, col:36> 'unsigned long long'
|   |     |     `-BinaryOperator 0x1f90b6d9de0 <col:27, col:35> 'unsigned long long' '<<'
|   |     |       |-IntegerLiteral 0x1f90b6d9d70 <col:27> 'unsigned long long' 1
|   |     |       `-ParenExpr 0x1f90b6d9dc0 <col:33, col:35> 'int'
|   |     |         `-IntegerLiteral 0x1f90b6d9d98 <line:376:42> 'int' 52
|   |     `-ParenExpr 0x1f90b6d8288 <line:64:16, col:30> 'double'
|   |       `-BinaryOperator 0x1f90b6d8268 <line:63:16, line:60:37> 'double' '*'
|   |         |-ParenExpr 0x1f90b6d8118 <line:63:16, col:30> 'double'
|   |         | `-BinaryOperator 0x1f90b6d80f8 <line:60:17, col:37> 'double' '*'
|   |         |   |-ParenExpr 0x1f90b6d9fb0 <col:17, col:37> 'double'
|   |         |   | `-CStyleCastExpr 0x1f90b6d9f88 <col:18, col:36> 'double' <IntegralToFloating>
|   |         |   |   `-ParenExpr 0x1f90b6d9f68 <col:26, col:36> 'unsigned long long'
|   |         |   |     `-BinaryOperator 0x1f90b6d9f10 <col:27, col:35> 'unsigned long long' '<<'
|   |         |   |       |-IntegerLiteral 0x1f90b6d9ea0 <col:27> 'unsigned long long' 1
|   |         |   |       `-ParenExpr 0x1f90b6d9ef0 <col:33, col:35> 'int'
|   |         |   |         `-IntegerLiteral 0x1f90b6d9ec8 <line:62:20> 'int' 32
|   |         |   `-ParenExpr 0x1f90b6d80d8 <line:60:17, col:37> 'double'
|   |         |     `-CStyleCastExpr 0x1f90b6d80b0 <col:18, col:36> 'double' <IntegralToFloating>
|   |         |       `-ParenExpr 0x1f90b6da098 <col:26, col:36> 'unsigned long long'
|   |         |         `-BinaryOperator 0x1f90b6da040 <col:27, col:35> 'unsigned long long' '<<'
|   |         |           |-IntegerLiteral 0x1f90b6d9fd0 <col:27> 'unsigned long long' 1
|   |         |           `-ParenExpr 0x1f90b6da020 <col:33, col:35> 'int'
|   |         |             `-IntegerLiteral 0x1f90b6d9ff8 <line:63:27> 'int' 32
|   |         `-ParenExpr 0x1f90b6d8248 <line:60:17, col:37> 'double'
|   |           `-CStyleCastExpr 0x1f90b6d8220 <col:18, col:36> 'double' <IntegralToFloating>
|   |             `-ParenExpr 0x1f90b6d8200 <col:26, col:36> 'unsigned long long'
|   |               `-BinaryOperator 0x1f90b6d81a8 <col:27, col:35> 'unsigned long long' '<<'
|   |                 |-IntegerLiteral 0x1f90b6d8138 <col:27> 'unsigned long long' 1
|   |                 `-ParenExpr 0x1f90b6d8188 <col:33, col:35> 'int'
|   |                   `-IntegerLiteral 0x1f90b6d8160 <line:64:27> 'int' 32
|   |-BinaryOperator 0x1f90b6da198 <line:377:5, line:65:31> 'double' '='
|   | |-DeclRefExpr 0x1f90b6d8308 <line:377:5> 'double' lvalue Var 0x1f90b6c5920 'c3hi' 'double'
|   | `-BinaryOperator 0x1f90b6da178 <col:12, line:65:31> 'double' '-'
|   |   |-ParenExpr 0x1f90b6d8a50 <line:377:12, col:34> 'double'
|   |   | `-BinaryOperator 0x1f90b6d8a30 <col:13, line:65:31> 'double' '+'
|   |   |   |-ImplicitCastExpr 0x1f90b6d8a18 <line:377:13> 'double' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x1f90b6d8328 <col:13> 'double' lvalue Var 0x1f90b6c54c0 'h3hi' 'double'
|   |   |   `-BinaryOperator 0x1f90b6d89f8 <line:60:17, line:65:31> 'double' '*'
|   |   |     |-ParenExpr 0x1f90b6d8458 <line:60:17, col:37> 'double'
|   |   |     | `-CStyleCastExpr 0x1f90b6d8430 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |     |   `-ParenExpr 0x1f90b6d8410 <col:26, col:36> 'unsigned long long'
|   |   |     |     `-BinaryOperator 0x1f90b6d83b8 <col:27, col:35> 'unsigned long long' '<<'
|   |   |     |       |-IntegerLiteral 0x1f90b6d8348 <col:27> 'unsigned long long' 1
|   |   |     |       `-ParenExpr 0x1f90b6d8398 <col:33, col:35> 'int'
|   |   |     |         `-IntegerLiteral 0x1f90b6d8370 <line:377:24> 'int' 52
|   |   |     `-ParenExpr 0x1f90b6d89d8 <line:65:17, col:31> 'double'
|   |   |       `-BinaryOperator 0x1f90b6d89b8 <line:64:16, line:60:37> 'double' '*'
|   |   |         |-ParenExpr 0x1f90b6d8868 <line:64:16, col:30> 'double'
|   |   |         | `-BinaryOperator 0x1f90b6d8848 <line:63:16, line:60:37> 'double' '*'
|   |   |         |   |-ParenExpr 0x1f90b6d86f8 <line:63:16, col:30> 'double'
|   |   |         |   | `-BinaryOperator 0x1f90b6d86d8 <line:60:17, col:37> 'double' '*'
|   |   |         |   |   |-ParenExpr 0x1f90b6d8588 <col:17, col:37> 'double'
|   |   |         |   |   | `-CStyleCastExpr 0x1f90b6d8560 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |         |   |   |   `-ParenExpr 0x1f90b6d8540 <col:26, col:36> 'unsigned long long'
|   |   |         |   |   |     `-BinaryOperator 0x1f90b6d84e8 <col:27, col:35> 'unsigned long long' '<<'
|   |   |         |   |   |       |-IntegerLiteral 0x1f90b6d8478 <col:27> 'unsigned long long' 1
|   |   |         |   |   |       `-ParenExpr 0x1f90b6d84c8 <col:33, col:35> 'int'
|   |   |         |   |   |         `-IntegerLiteral 0x1f90b6d84a0 <line:62:20> 'int' 32
|   |   |         |   |   `-ParenExpr 0x1f90b6d86b8 <line:60:17, col:37> 'double'
|   |   |         |   |     `-CStyleCastExpr 0x1f90b6d8690 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |         |   |       `-ParenExpr 0x1f90b6d8670 <col:26, col:36> 'unsigned long long'
|   |   |         |   |         `-BinaryOperator 0x1f90b6d8618 <col:27, col:35> 'unsigned long long' '<<'
|   |   |         |   |           |-IntegerLiteral 0x1f90b6d85a8 <col:27> 'unsigned long long' 1
|   |   |         |   |           `-ParenExpr 0x1f90b6d85f8 <col:33, col:35> 'int'
|   |   |         |   |             `-IntegerLiteral 0x1f90b6d85d0 <line:63:27> 'int' 32
|   |   |         |   `-ParenExpr 0x1f90b6d8828 <line:60:17, col:37> 'double'
|   |   |         |     `-CStyleCastExpr 0x1f90b6d8800 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |         |       `-ParenExpr 0x1f90b6d87e0 <col:26, col:36> 'unsigned long long'
|   |   |         |         `-BinaryOperator 0x1f90b6d8788 <col:27, col:35> 'unsigned long long' '<<'
|   |   |         |           |-IntegerLiteral 0x1f90b6d8718 <col:27> 'unsigned long long' 1
|   |   |         |           `-ParenExpr 0x1f90b6d8768 <col:33, col:35> 'int'
|   |   |         |             `-IntegerLiteral 0x1f90b6d8740 <line:64:27> 'int' 32
|   |   |         `-ParenExpr 0x1f90b6d8998 <line:60:17, col:37> 'double'
|   |   |           `-CStyleCastExpr 0x1f90b6d8970 <col:18, col:36> 'double' <IntegralToFloating>
|   |   |             `-ParenExpr 0x1f90b6d8950 <col:26, col:36> 'unsigned long long'
|   |   |               `-BinaryOperator 0x1f90b6d88f8 <col:27, col:35> 'unsigned long long' '<<'
|   |   |                 |-IntegerLiteral 0x1f90b6d8888 <col:27> 'unsigned long long' 1
|   |   |                 `-ParenExpr 0x1f90b6d88d8 <col:33, col:35> 'int'
|   |   |                   `-IntegerLiteral 0x1f90b6d88b0 <line:65:28> 'int' 34
|   |   `-BinaryOperator 0x1f90b6da158 <line:60:17, line:65:31> 'double' '*'
|   |     |-ParenExpr 0x1f90b6d8b80 <line:60:17, col:37> 'double'
|   |     | `-CStyleCastExpr 0x1f90b6d8b58 <col:18, col:36> 'double' <IntegralToFloating>
|   |     |   `-ParenExpr 0x1f90b6d8b38 <col:26, col:36> 'unsigned long long'
|   |     |     `-BinaryOperator 0x1f90b6d8ae0 <col:27, col:35> 'unsigned long long' '<<'
|   |     |       |-IntegerLiteral 0x1f90b6d8a70 <col:27> 'unsigned long long' 1
|   |     |       `-ParenExpr 0x1f90b6d8ac0 <col:33, col:35> 'int'
|   |     |         `-IntegerLiteral 0x1f90b6d8a98 <line:377:42> 'int' 52
|   |     `-ParenExpr 0x1f90b6da138 <line:65:17, col:31> 'double'
|   |       `-BinaryOperator 0x1f90b6da118 <line:64:16, line:60:37> 'double' '*'
|   |         |-ParenExpr 0x1f90b6d8f90 <line:64:16, col:30> 'double'
|   |         | `-BinaryOperator 0x1f90b6d8f70 <line:63:16, line:60:37> 'double' '*'
|   |         |   |-ParenExpr 0x1f90b6d8e20 <line:63:16, col:30> 'double'
|   |         |   | `-BinaryOperator 0x1f90b6d8e00 <line:60:17, col:37> 'double' '*'
|   |         |   |   |-ParenExpr 0x1f90b6d8cb0 <col:17, col:37> 'double'
|   |         |   |   | `-CStyleCastExpr 0x1f90b6d8c88 <col:18, col:36> 'double' <IntegralToFloating>
|   |         |   |   |   `-ParenExpr 0x1f90b6d8c68 <col:26, col:36> 'unsigned long long'
|   |         |   |   |     `-BinaryOperator 0x1f90b6d8c10 <col:27, col:35> 'unsigned long long' '<<'
|   |         |   |   |       |-IntegerLiteral 0x1f90b6d8ba0 <col:27> 'unsigned long long' 1
|   |         |   |   |       `-ParenExpr 0x1f90b6d8bf0 <col:33, col:35> 'int'
|   |         |   |   |         `-IntegerLiteral 0x1f90b6d8bc8 <line:62:20> 'int' 32
|   |         |   |   `-ParenExpr 0x1f90b6d8de0 <line:60:17, col:37> 'double'
|   |         |   |     `-CStyleCastExpr 0x1f90b6d8db8 <col:18, col:36> 'double' <IntegralToFloating>
|   |         |   |       `-ParenExpr 0x1f90b6d8d98 <col:26, col:36> 'unsigned long long'
|   |         |   |         `-BinaryOperator 0x1f90b6d8d40 <col:27, col:35> 'unsigned long long' '<<'
|   |         |   |           |-IntegerLiteral 0x1f90b6d8cd0 <col:27> 'unsigned long long' 1
|   |         |   |           `-ParenExpr 0x1f90b6d8d20 <col:33, col:35> 'int'
|   |         |   |             `-IntegerLiteral 0x1f90b6d8cf8 <line:63:27> 'int' 32
|   |         |   `-ParenExpr 0x1f90b6d8f50 <line:60:17, col:37> 'double'
|   |         |     `-CStyleCastExpr 0x1f90b6d8f28 <col:18, col:36> 'double' <IntegralToFloating>
|   |         |       `-ParenExpr 0x1f90b6d8f08 <col:26, col:36> 'unsigned long long'
|   |         |         `-BinaryOperator 0x1f90b6d8eb0 <col:27, col:35> 'unsigned long long' '<<'
|   |         |           |-IntegerLiteral 0x1f90b6d8e40 <col:27> 'unsigned long long' 1
|   |         |           `-ParenExpr 0x1f90b6d8e90 <col:33, col:35> 'int'
|   |         |             `-IntegerLiteral 0x1f90b6d8e68 <line:64:27> 'int' 32
|   |         `-ParenExpr 0x1f90b6da0f8 <line:60:17, col:37> 'double'
|   |           `-CStyleCastExpr 0x1f90b6da0d0 <col:18, col:36> 'double' <IntegralToFloating>
|   |             `-ParenExpr 0x1f90b6d9078 <col:26, col:36> 'unsigned long long'
|   |               `-BinaryOperator 0x1f90b6d9020 <col:27, col:35> 'unsigned long long' '<<'
|   |                 |-IntegerLiteral 0x1f90b6d8fb0 <col:27> 'unsigned long long' 1
|   |                 `-ParenExpr 0x1f90b6d9000 <col:33, col:35> 'int'
|   |                   `-IntegerLiteral 0x1f90b6d8fd8 <line:65:28> 'int' 34
|   |-BinaryOperator 0x1f90b6da2e0 <line:382:5, col:27> 'double' '='
|   | |-DeclRefExpr 0x1f90b6da1b8 <col:5> 'double' lvalue Var 0x1f90b6c4f80 'x1' 'double'
|   | `-BinaryOperator 0x1f90b6da2c0 <col:11, col:27> 'double' '+'
|   |   |-ParenExpr 0x1f90b6da268 <col:11, col:23> 'double'
|   |   | `-BinaryOperator 0x1f90b6da248 <col:12, col:19> 'double' '-'
|   |   |   |-ImplicitCastExpr 0x1f90b6da218 <col:12> 'double' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x1f90b6da1d8 <col:12> 'double' lvalue Var 0x1f90b6c5240 'h1lo' 'double'
|   |   |   `-ImplicitCastExpr 0x1f90b6da230 <col:19> 'double' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x1f90b6da1f8 <col:19> 'double' lvalue Var 0x1f90b6c56a0 'c1lo' 'double'
|   |   `-ImplicitCastExpr 0x1f90b6da2a8 <col:27> 'double' <LValueToRValue>
|   |     `-DeclRefExpr 0x1f90b6da288 <col:27> 'double' lvalue Var 0x1f90b6c55a0 'c0lo' 'double'
|   |-BinaryOperator 0x1f90b6da428 <line:383:5, col:27> 'double' '='
|   | |-DeclRefExpr 0x1f90b6da300 <col:5> 'double' lvalue Var 0x1f90b6c5000 'x2' 'double'
|   | `-BinaryOperator 0x1f90b6da408 <col:11, col:27> 'double' '+'
|   |   |-ParenExpr 0x1f90b6da3b0 <col:11, col:23> 'double'
|   |   | `-BinaryOperator 0x1f90b6da390 <col:12, col:19> 'double' '-'
|   |   |   |-ImplicitCastExpr 0x1f90b6da360 <col:12> 'double' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x1f90b6da320 <col:12> 'double' lvalue Var 0x1f90b6c5340 'h2lo' 'double'
|   |   |   `-ImplicitCastExpr 0x1f90b6da378 <col:19> 'double' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x1f90b6da340 <col:19> 'double' lvalue Var 0x1f90b6c57a0 'c2lo' 'double'
|   |   `-ImplicitCastExpr 0x1f90b6da3f0 <col:27> 'double' <LValueToRValue>
|   |     `-DeclRefExpr 0x1f90b6da3d0 <col:27> 'double' lvalue Var 0x1f90b6c56a0 'c1lo' 'double'
|   |-BinaryOperator 0x1f90b6da570 <line:384:5, col:27> 'double' '='
|   | |-DeclRefExpr 0x1f90b6da448 <col:5> 'double' lvalue Var 0x1f90b6c5080 'x3' 'double'
|   | `-BinaryOperator 0x1f90b6da550 <col:11, col:27> 'double' '+'
|   |   |-ParenExpr 0x1f90b6da4f8 <col:11, col:23> 'double'
|   |   | `-BinaryOperator 0x1f90b6da4d8 <col:12, col:19> 'double' '-'
|   |   |   |-ImplicitCastExpr 0x1f90b6da4a8 <col:12> 'double' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x1f90b6da468 <col:12> 'double' lvalue Var 0x1f90b6c5440 'h3lo' 'double'
|   |   |   `-ImplicitCastExpr 0x1f90b6da4c0 <col:19> 'double' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x1f90b6da488 <col:19> 'double' lvalue Var 0x1f90b6c58a0 'c3lo' 'double'
|   |   `-ImplicitCastExpr 0x1f90b6da538 <col:27> 'double' <LValueToRValue>
|   |     `-DeclRefExpr 0x1f90b6da518 <col:27> 'double' lvalue Var 0x1f90b6c57a0 'c2lo' 'double'
|   |-BinaryOperator 0x1f90b6dacc0 <line:385:5, col:45> 'double' '='
|   | |-DeclRefExpr 0x1f90b6da590 <col:5> 'double' lvalue Var 0x1f90b6c4ea0 'x0' 'double'
|   | `-BinaryOperator 0x1f90b6daca0 <col:11, col:45> 'double' '+'
|   |   |-ParenExpr 0x1f90b6da640 <col:11, col:23> 'double'
|   |   | `-BinaryOperator 0x1f90b6da620 <col:12, col:19> 'double' '-'
|   |   |   |-ImplicitCastExpr 0x1f90b6da5f0 <col:12> 'double' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x1f90b6da5b0 <col:12> 'double' lvalue Var 0x1f90b6c5140 'h0lo' 'double'
|   |   |   `-ImplicitCastExpr 0x1f90b6da608 <col:19> 'double' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x1f90b6da5d0 <col:19> 'double' lvalue Var 0x1f90b6c55a0 'c0lo' 'double'
|   |   `-BinaryOperator 0x1f90b6dac80 <col:27, col:45> 'double' '*'
|   |     |-ImplicitCastExpr 0x1f90b6dac68 <col:27> 'double' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1f90b6da660 <col:27> 'double' lvalue Var 0x1f90b6c58a0 'c3lo' 'double'
|   |     `-ParenExpr 0x1f90b6dac48 <col:34, col:45> 'double'
|   |       `-BinaryOperator 0x1f90b6dac28 <col:35, line:65:31> 'double' '/'
|   |         |-FloatingLiteral 0x1f90b6da680 <line:385:35> 'double' 5.000000e+00
|   |         `-ParenExpr 0x1f90b6dac08 <line:65:17, col:31> 'double'
|   |           `-BinaryOperator 0x1f90b6dabe8 <line:64:16, line:60:37> 'double' '*'
|   |             |-ParenExpr 0x1f90b6daa98 <line:64:16, col:30> 'double'
|   |             | `-BinaryOperator 0x1f90b6daa78 <line:63:16, line:60:37> 'double' '*'
|   |             |   |-ParenExpr 0x1f90b6da928 <line:63:16, col:30> 'double'
|   |             |   | `-BinaryOperator 0x1f90b6da908 <line:60:17, col:37> 'double' '*'
|   |             |   |   |-ParenExpr 0x1f90b6da7b8 <col:17, col:37> 'double'
|   |             |   |   | `-CStyleCastExpr 0x1f90b6da790 <col:18, col:36> 'double' <IntegralToFloating>
|   |             |   |   |   `-ParenExpr 0x1f90b6da770 <col:26, col:36> 'unsigned long long'
|   |             |   |   |     `-BinaryOperator 0x1f90b6da718 <col:27, col:35> 'unsigned long long' '<<'
|   |             |   |   |       |-IntegerLiteral 0x1f90b6da6a8 <col:27> 'unsigned long long' 1
|   |             |   |   |       `-ParenExpr 0x1f90b6da6f8 <col:33, col:35> 'int'
|   |             |   |   |         `-IntegerLiteral 0x1f90b6da6d0 <line:62:20> 'int' 32
|   |             |   |   `-ParenExpr 0x1f90b6da8e8 <line:60:17, col:37> 'double'
|   |             |   |     `-CStyleCastExpr 0x1f90b6da8c0 <col:18, col:36> 'double' <IntegralToFloating>
|   |             |   |       `-ParenExpr 0x1f90b6da8a0 <col:26, col:36> 'unsigned long long'
|   |             |   |         `-BinaryOperator 0x1f90b6da848 <col:27, col:35> 'unsigned long long' '<<'
|   |             |   |           |-IntegerLiteral 0x1f90b6da7d8 <col:27> 'unsigned long long' 1
|   |             |   |           `-ParenExpr 0x1f90b6da828 <col:33, col:35> 'int'
|   |             |   |             `-IntegerLiteral 0x1f90b6da800 <line:63:27> 'int' 32
|   |             |   `-ParenExpr 0x1f90b6daa58 <line:60:17, col:37> 'double'
|   |             |     `-CStyleCastExpr 0x1f90b6daa30 <col:18, col:36> 'double' <IntegralToFloating>
|   |             |       `-ParenExpr 0x1f90b6daa10 <col:26, col:36> 'unsigned long long'
|   |             |         `-BinaryOperator 0x1f90b6da9b8 <col:27, col:35> 'unsigned long long' '<<'
|   |             |           |-IntegerLiteral 0x1f90b6da948 <col:27> 'unsigned long long' 1
|   |             |           `-ParenExpr 0x1f90b6da998 <col:33, col:35> 'int'
|   |             |             `-IntegerLiteral 0x1f90b6da970 <line:64:27> 'int' 32
|   |             `-ParenExpr 0x1f90b6dabc8 <line:60:17, col:37> 'double'
|   |               `-CStyleCastExpr 0x1f90b6daba0 <col:18, col:36> 'double' <IntegralToFloating>
|   |                 `-ParenExpr 0x1f90b6dab80 <col:26, col:36> 'unsigned long long'
|   |                   `-BinaryOperator 0x1f90b6dab28 <col:27, col:35> 'unsigned long long' '<<'
|   |                     |-IntegerLiteral 0x1f90b6daab8 <col:27> 'unsigned long long' 1
|   |                     `-ParenExpr 0x1f90b6dab08 <col:33, col:35> 'int'
|   |                       `-IntegerLiteral 0x1f90b6daae0 <line:65:28> 'int' 34
|   |-CompoundAssignOperator 0x1f90b6dae08 <line:387:5, col:27> 'double' '+=' ComputeLHSTy='double' ComputeResultTy='double'
|   | |-DeclRefExpr 0x1f90b6dace0 <col:5> 'double' lvalue Var 0x1f90b6c4f80 'x1' 'double'
|   | `-BinaryOperator 0x1f90b6dade8 <col:11, col:27> 'double' '+'
|   |   |-ParenExpr 0x1f90b6dad90 <col:11, col:23> 'double'
|   |   | `-BinaryOperator 0x1f90b6dad70 <col:12, col:19> 'double' '-'
|   |   |   |-ImplicitCastExpr 0x1f90b6dad40 <col:12> 'double' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x1f90b6dad00 <col:12> 'double' lvalue Var 0x1f90b6c52c0 'h1hi' 'double'
|   |   |   `-ImplicitCastExpr 0x1f90b6dad58 <col:19> 'double' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x1f90b6dad20 <col:19> 'double' lvalue Var 0x1f90b6c5720 'c1hi' 'double'
|   |   `-ImplicitCastExpr 0x1f90b6dadd0 <col:27> 'double' <LValueToRValue>
|   |     `-DeclRefExpr 0x1f90b6dadb0 <col:27> 'double' lvalue Var 0x1f90b6c5620 'c0hi' 'double'
|   |-CompoundAssignOperator 0x1f90b6daf60 <line:388:5, col:27> 'double' '+=' ComputeLHSTy='double' ComputeResultTy='double'
|   | |-DeclRefExpr 0x1f90b6dae38 <col:5> 'double' lvalue Var 0x1f90b6c5000 'x2' 'double'
|   | `-BinaryOperator 0x1f90b6daf40 <col:11, col:27> 'double' '+'
|   |   |-ParenExpr 0x1f90b6daee8 <col:11, col:23> 'double'
|   |   | `-BinaryOperator 0x1f90b6daec8 <col:12, col:19> 'double' '-'
|   |   |   |-ImplicitCastExpr 0x1f90b6dae98 <col:12> 'double' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x1f90b6dae58 <col:12> 'double' lvalue Var 0x1f90b6c53c0 'h2hi' 'double'
|   |   |   `-ImplicitCastExpr 0x1f90b6daeb0 <col:19> 'double' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x1f90b6dae78 <col:19> 'double' lvalue Var 0x1f90b6c5820 'c2hi' 'double'
|   |   `-ImplicitCastExpr 0x1f90b6daf28 <col:27> 'double' <LValueToRValue>
|   |     `-DeclRefExpr 0x1f90b6daf08 <col:27> 'double' lvalue Var 0x1f90b6c5720 'c1hi' 'double'
|   |-CompoundAssignOperator 0x1f90b6db0e0 <line:389:5, col:27> 'double' '+=' ComputeLHSTy='double' ComputeResultTy='double'
|   | |-DeclRefExpr 0x1f90b6daf90 <col:5> 'double' lvalue Var 0x1f90b6c5080 'x3' 'double'
|   | `-BinaryOperator 0x1f90b6db098 <col:11, col:27> 'double' '+'
|   |   |-ParenExpr 0x1f90b6db040 <col:11, col:23> 'double'
|   |   | `-BinaryOperator 0x1f90b6db020 <col:12, col:19> 'double' '-'
|   |   |   |-ImplicitCastExpr 0x1f90b6daff0 <col:12> 'double' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x1f90b6dafb0 <col:12> 'double' lvalue Var 0x1f90b6c54c0 'h3hi' 'double'
|   |   |   `-ImplicitCastExpr 0x1f90b6db008 <col:19> 'double' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x1f90b6dafd0 <col:19> 'double' lvalue Var 0x1f90b6c5920 'c3hi' 'double'
|   |   `-ImplicitCastExpr 0x1f90b6db080 <col:27> 'double' <LValueToRValue>
|   |     `-DeclRefExpr 0x1f90b6db060 <col:27> 'double' lvalue Var 0x1f90b6c5820 'c2hi' 'double'
|   |-CompoundAssignOperator 0x1f90b6db840 <line:390:5, col:45> 'double' '+=' ComputeLHSTy='double' ComputeResultTy='double'
|   | |-DeclRefExpr 0x1f90b6db110 <col:5> 'double' lvalue Var 0x1f90b6c4ea0 'x0' 'double'
|   | `-BinaryOperator 0x1f90b6db820 <col:11, col:45> 'double' '+'
|   |   |-ParenExpr 0x1f90b6db1c0 <col:11, col:23> 'double'
|   |   | `-BinaryOperator 0x1f90b6db1a0 <col:12, col:19> 'double' '-'
|   |   |   |-ImplicitCastExpr 0x1f90b6db170 <col:12> 'double' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x1f90b6db130 <col:12> 'double' lvalue Var 0x1f90b6c51c0 'h0hi' 'double'
|   |   |   `-ImplicitCastExpr 0x1f90b6db188 <col:19> 'double' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x1f90b6db150 <col:19> 'double' lvalue Var 0x1f90b6c5620 'c0hi' 'double'
|   |   `-BinaryOperator 0x1f90b6db800 <col:27, col:45> 'double' '*'
|   |     |-ImplicitCastExpr 0x1f90b6db7e8 <col:27> 'double' <LValueToRValue>
|   |     | `-DeclRefExpr 0x1f90b6db1e0 <col:27> 'double' lvalue Var 0x1f90b6c5920 'c3hi' 'double'
|   |     `-ParenExpr 0x1f90b6db7c8 <col:34, col:45> 'double'
|   |       `-BinaryOperator 0x1f90b6db7a8 <col:35, line:65:31> 'double' '/'
|   |         |-FloatingLiteral 0x1f90b6db200 <line:390:35> 'double' 5.000000e+00
|   |         `-ParenExpr 0x1f90b6db788 <line:65:17, col:31> 'double'
|   |           `-BinaryOperator 0x1f90b6db768 <line:64:16, line:60:37> 'double' '*'
|   |             |-ParenExpr 0x1f90b6db618 <line:64:16, col:30> 'double'
|   |             | `-BinaryOperator 0x1f90b6db5f8 <line:63:16, line:60:37> 'double' '*'
|   |             |   |-ParenExpr 0x1f90b6db4a8 <line:63:16, col:30> 'double'
|   |             |   | `-BinaryOperator 0x1f90b6db488 <line:60:17, col:37> 'double' '*'
|   |             |   |   |-ParenExpr 0x1f90b6db338 <col:17, col:37> 'double'
|   |             |   |   | `-CStyleCastExpr 0x1f90b6db310 <col:18, col:36> 'double' <IntegralToFloating>
|   |             |   |   |   `-ParenExpr 0x1f90b6db2f0 <col:26, col:36> 'unsigned long long'
|   |             |   |   |     `-BinaryOperator 0x1f90b6db298 <col:27, col:35> 'unsigned long long' '<<'
|   |             |   |   |       |-IntegerLiteral 0x1f90b6db228 <col:27> 'unsigned long long' 1
|   |             |   |   |       `-ParenExpr 0x1f90b6db278 <col:33, col:35> 'int'
|   |             |   |   |         `-IntegerLiteral 0x1f90b6db250 <line:62:20> 'int' 32
|   |             |   |   `-ParenExpr 0x1f90b6db468 <line:60:17, col:37> 'double'
|   |             |   |     `-CStyleCastExpr 0x1f90b6db440 <col:18, col:36> 'double' <IntegralToFloating>
|   |             |   |       `-ParenExpr 0x1f90b6db420 <col:26, col:36> 'unsigned long long'
|   |             |   |         `-BinaryOperator 0x1f90b6db3c8 <col:27, col:35> 'unsigned long long' '<<'
|   |             |   |           |-IntegerLiteral 0x1f90b6db358 <col:27> 'unsigned long long' 1
|   |             |   |           `-ParenExpr 0x1f90b6db3a8 <col:33, col:35> 'int'
|   |             |   |             `-IntegerLiteral 0x1f90b6db380 <line:63:27> 'int' 32
|   |             |   `-ParenExpr 0x1f90b6db5d8 <line:60:17, col:37> 'double'
|   |             |     `-CStyleCastExpr 0x1f90b6db5b0 <col:18, col:36> 'double' <IntegralToFloating>
|   |             |       `-ParenExpr 0x1f90b6db590 <col:26, col:36> 'unsigned long long'
|   |             |         `-BinaryOperator 0x1f90b6db538 <col:27, col:35> 'unsigned long long' '<<'
|   |             |           |-IntegerLiteral 0x1f90b6db4c8 <col:27> 'unsigned long long' 1
|   |             |           `-ParenExpr 0x1f90b6db518 <col:33, col:35> 'int'
|   |             |             `-IntegerLiteral 0x1f90b6db4f0 <line:64:27> 'int' 32
|   |             `-ParenExpr 0x1f90b6db748 <line:60:17, col:37> 'double'
|   |               `-CStyleCastExpr 0x1f90b6db720 <col:18, col:36> 'double' <IntegralToFloating>
|   |                 `-ParenExpr 0x1f90b6db700 <col:26, col:36> 'unsigned long long'
|   |                   `-BinaryOperator 0x1f90b6db6a8 <col:27, col:35> 'unsigned long long' '<<'
|   |                     |-IntegerLiteral 0x1f90b6db638 <col:27> 'unsigned long long' 1
|   |                     `-ParenExpr 0x1f90b6db688 <col:33, col:35> 'int'
|   |                       `-IntegerLiteral 0x1f90b6db660 <line:65:28> 'int' 34
|   |-BinaryOperator 0x1f90b6dbc40 <line:395:5, line:60:37> 'double' '='
|   | |-MemberExpr 0x1f90b6db938 <line:395:5, col:14> 'double' lvalue .d 0x1f90b659828
|   | | `-ArraySubscriptExpr 0x1f90b6db918 <col:5, col:12> 'elem64':'elem64' lvalue
|   | |   |-ImplicitCastExpr 0x1f90b6db900 <col:5, col:9> 'elem64 *' <ArrayToPointerDecay>
|   | |   | `-MemberExpr 0x1f90b6db8a8 <col:5, col:9> 'elem64 [4]' lvalue ->h 0x1f90b659be8
|   | |   |   `-ImplicitCastExpr 0x1f90b6db890 <col:5> 'poly1305_internal *' <LValueToRValue>
|   | |   |     `-DeclRefExpr 0x1f90b6db870 <col:5> 'poly1305_internal *' lvalue Var 0x1f90b6c4a30 'st' 'poly1305_internal *'
|   | |   `-IntegerLiteral 0x1f90b6db8d8 <col:11> 'int' 1
|   | `-BinaryOperator 0x1f90b6dbc20 <col:18, line:60:37> 'double' '+'
|   |   |-ImplicitCastExpr 0x1f90b6dbc08 <line:395:18> 'double' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1f90b6db968 <col:18> 'double' lvalue Var 0x1f90b6c4f80 'x1' 'double'
|   |   `-BinaryOperator 0x1f90b6dbbe8 <line:60:17, col:37> 'double' '*'
|   |     |-ParenExpr 0x1f90b6dba98 <col:17, col:37> 'double'
|   |     | `-CStyleCastExpr 0x1f90b6dba70 <col:18, col:36> 'double' <IntegralToFloating>
|   |     |   `-ParenExpr 0x1f90b6dba50 <col:26, col:36> 'unsigned long long'
|   |     |     `-BinaryOperator 0x1f90b6db9f8 <col:27, col:35> 'unsigned long long' '<<'
|   |     |       |-IntegerLiteral 0x1f90b6db988 <col:27> 'unsigned long long' 1
|   |     |       `-ParenExpr 0x1f90b6db9d8 <col:33, col:35> 'int'
|   |     |         `-IntegerLiteral 0x1f90b6db9b0 <line:395:27> 'int' 52
|   |     `-ParenExpr 0x1f90b6dbbc8 <line:60:17, col:37> 'double'
|   |       `-CStyleCastExpr 0x1f90b6dbba0 <col:18, col:36> 'double' <IntegralToFloating>
|   |         `-ParenExpr 0x1f90b6dbb80 <col:26, col:36> 'unsigned long long'
|   |           `-BinaryOperator 0x1f90b6dbb28 <col:27, col:35> 'unsigned long long' '<<'
|   |             |-IntegerLiteral 0x1f90b6dbab8 <col:27> 'unsigned long long' 1
|   |             `-ParenExpr 0x1f90b6dbb08 <col:33, col:35> 'int'
|   |               `-IntegerLiteral 0x1f90b6dbae0 <line:62:20> 'int' 32
|   |-BinaryOperator 0x1f90b6dc1d0 <line:396:5, line:63:30> 'double' '='
|   | |-MemberExpr 0x1f90b6dbd28 <line:396:5, col:14> 'double' lvalue .d 0x1f90b659828
|   | | `-ArraySubscriptExpr 0x1f90b6dbd08 <col:5, col:12> 'elem64':'elem64' lvalue
|   | |   |-ImplicitCastExpr 0x1f90b6dbcf0 <col:5, col:9> 'elem64 *' <ArrayToPointerDecay>
|   | |   | `-MemberExpr 0x1f90b6dbc98 <col:5, col:9> 'elem64 [4]' lvalue ->h 0x1f90b659be8
|   | |   |   `-ImplicitCastExpr 0x1f90b6dbc80 <col:5> 'poly1305_internal *' <LValueToRValue>
|   | |   |     `-DeclRefExpr 0x1f90b6dbc60 <col:5> 'poly1305_internal *' lvalue Var 0x1f90b6c4a30 'st' 'poly1305_internal *'
|   | |   `-IntegerLiteral 0x1f90b6dbcc8 <col:11> 'int' 2
|   | `-BinaryOperator 0x1f90b6dc1b0 <col:18, line:63:30> 'double' '+'
|   |   |-ImplicitCastExpr 0x1f90b6dc198 <line:396:18> 'double' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1f90b6dbd58 <col:18> 'double' lvalue Var 0x1f90b6c5000 'x2' 'double'
|   |   `-BinaryOperator 0x1f90b6dc178 <line:60:17, line:63:30> 'double' '*'
|   |     |-ParenExpr 0x1f90b6dbe88 <line:60:17, col:37> 'double'
|   |     | `-CStyleCastExpr 0x1f90b6dbe60 <col:18, col:36> 'double' <IntegralToFloating>
|   |     |   `-ParenExpr 0x1f90b6dbe40 <col:26, col:36> 'unsigned long long'
|   |     |     `-BinaryOperator 0x1f90b6dbde8 <col:27, col:35> 'unsigned long long' '<<'
|   |     |       |-IntegerLiteral 0x1f90b6dbd78 <col:27> 'unsigned long long' 1
|   |     |       `-ParenExpr 0x1f90b6dbdc8 <col:33, col:35> 'int'
|   |     |         `-IntegerLiteral 0x1f90b6dbda0 <line:396:27> 'int' 52
|   |     `-ParenExpr 0x1f90b6dc158 <line:63:16, col:30> 'double'
|   |       `-BinaryOperator 0x1f90b6dc138 <line:60:17, col:37> 'double' '*'
|   |         |-ParenExpr 0x1f90b6dbfb8 <col:17, col:37> 'double'
|   |         | `-CStyleCastExpr 0x1f90b6dbf90 <col:18, col:36> 'double' <IntegralToFloating>
|   |         |   `-ParenExpr 0x1f90b6dbf70 <col:26, col:36> 'unsigned long long'
|   |         |     `-BinaryOperator 0x1f90b6dbf18 <col:27, col:35> 'unsigned long long' '<<'
|   |         |       |-IntegerLiteral 0x1f90b6dbea8 <col:27> 'unsigned long long' 1
|   |         |       `-ParenExpr 0x1f90b6dbef8 <col:33, col:35> 'int'
|   |         |         `-IntegerLiteral 0x1f90b6dbed0 <line:62:20> 'int' 32
|   |         `-ParenExpr 0x1f90b6dc118 <line:60:17, col:37> 'double'
|   |           `-CStyleCastExpr 0x1f90b6dc0f0 <col:18, col:36> 'double' <IntegralToFloating>
|   |             `-ParenExpr 0x1f90b6dc0a0 <col:26, col:36> 'unsigned long long'
|   |               `-BinaryOperator 0x1f90b6dc048 <col:27, col:35> 'unsigned long long' '<<'
|   |                 |-IntegerLiteral 0x1f90b6dbfd8 <col:27> 'unsigned long long' 1
|   |                 `-ParenExpr 0x1f90b6dc028 <col:33, col:35> 'int'
|   |                   `-IntegerLiteral 0x1f90b6dc000 <line:63:27> 'int' 32
|   |-BinaryOperator 0x1f90b6dc8a0 <line:397:5, line:64:30> 'double' '='
|   | |-MemberExpr 0x1f90b6dc2b8 <line:397:5, col:14> 'double' lvalue .d 0x1f90b659828
|   | | `-ArraySubscriptExpr 0x1f90b6dc298 <col:5, col:12> 'elem64':'elem64' lvalue
|   | |   |-ImplicitCastExpr 0x1f90b6dc280 <col:5, col:9> 'elem64 *' <ArrayToPointerDecay>
|   | |   | `-MemberExpr 0x1f90b6dc228 <col:5, col:9> 'elem64 [4]' lvalue ->h 0x1f90b659be8
|   | |   |   `-ImplicitCastExpr 0x1f90b6dc210 <col:5> 'poly1305_internal *' <LValueToRValue>
|   | |   |     `-DeclRefExpr 0x1f90b6dc1f0 <col:5> 'poly1305_internal *' lvalue Var 0x1f90b6c4a30 'st' 'poly1305_internal *'
|   | |   `-IntegerLiteral 0x1f90b6dc258 <col:11> 'int' 3
|   | `-BinaryOperator 0x1f90b6dc880 <col:18, line:64:30> 'double' '+'
|   |   |-ImplicitCastExpr 0x1f90b6dc868 <line:397:18> 'double' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1f90b6dc2e8 <col:18> 'double' lvalue Var 0x1f90b6c5080 'x3' 'double'
|   |   `-BinaryOperator 0x1f90b6dc848 <line:60:17, line:64:30> 'double' '*'
|   |     |-ParenExpr 0x1f90b6dc418 <line:60:17, col:37> 'double'
|   |     | `-CStyleCastExpr 0x1f90b6dc3f0 <col:18, col:36> 'double' <IntegralToFloating>
|   |     |   `-ParenExpr 0x1f90b6dc3d0 <col:26, col:36> 'unsigned long long'
|   |     |     `-BinaryOperator 0x1f90b6dc378 <col:27, col:35> 'unsigned long long' '<<'
|   |     |       |-IntegerLiteral 0x1f90b6dc308 <col:27> 'unsigned long long' 1
|   |     |       `-ParenExpr 0x1f90b6dc358 <col:33, col:35> 'int'
|   |     |         `-IntegerLiteral 0x1f90b6dc330 <line:397:27> 'int' 52
|   |     `-ParenExpr 0x1f90b6dc828 <line:64:16, col:30> 'double'
|   |       `-BinaryOperator 0x1f90b6dc808 <line:63:16, line:60:37> 'double' '*'
|   |         |-ParenExpr 0x1f90b6dc6b8 <line:63:16, col:30> 'double'
|   |         | `-BinaryOperator 0x1f90b6dc698 <line:60:17, col:37> 'double' '*'
|   |         |   |-ParenExpr 0x1f90b6dc548 <col:17, col:37> 'double'
|   |         |   | `-CStyleCastExpr 0x1f90b6dc520 <col:18, col:36> 'double' <IntegralToFloating>
|   |         |   |   `-ParenExpr 0x1f90b6dc500 <col:26, col:36> 'unsigned long long'
|   |         |   |     `-BinaryOperator 0x1f90b6dc4a8 <col:27, col:35> 'unsigned long long' '<<'
|   |         |   |       |-IntegerLiteral 0x1f90b6dc438 <col:27> 'unsigned long long' 1
|   |         |   |       `-ParenExpr 0x1f90b6dc488 <col:33, col:35> 'int'
|   |         |   |         `-IntegerLiteral 0x1f90b6dc460 <line:62:20> 'int' 32
|   |         |   `-ParenExpr 0x1f90b6dc678 <line:60:17, col:37> 'double'
|   |         |     `-CStyleCastExpr 0x1f90b6dc650 <col:18, col:36> 'double' <IntegralToFloating>
|   |         |       `-ParenExpr 0x1f90b6dc630 <col:26, col:36> 'unsigned long long'
|   |         |         `-BinaryOperator 0x1f90b6dc5d8 <col:27, col:35> 'unsigned long long' '<<'
|   |         |           |-IntegerLiteral 0x1f90b6dc568 <col:27> 'unsigned long long' 1
|   |         |           `-ParenExpr 0x1f90b6dc5b8 <col:33, col:35> 'int'
|   |         |             `-IntegerLiteral 0x1f90b6dc590 <line:63:27> 'int' 32
|   |         `-ParenExpr 0x1f90b6dc7e8 <line:60:17, col:37> 'double'
|   |           `-CStyleCastExpr 0x1f90b6dc7c0 <col:18, col:36> 'double' <IntegralToFloating>
|   |             `-ParenExpr 0x1f90b6dc7a0 <col:26, col:36> 'unsigned long long'
|   |               `-BinaryOperator 0x1f90b6dc748 <col:27, col:35> 'unsigned long long' '<<'
|   |                 |-IntegerLiteral 0x1f90b6dc6d8 <col:27> 'unsigned long long' 1
|   |                 `-ParenExpr 0x1f90b6dc728 <col:33, col:35> 'int'
|   |                   `-IntegerLiteral 0x1f90b6dc700 <line:64:27> 'int' 32
|   |-BinaryOperator 0x1f90b6dcc90 <line:398:5, line:60:37> 'double' '='
|   | |-MemberExpr 0x1f90b6dc988 <line:398:5, col:14> 'double' lvalue .d 0x1f90b659828
|   | | `-ArraySubscriptExpr 0x1f90b6dc968 <col:5, col:12> 'elem64':'elem64' lvalue
|   | |   |-ImplicitCastExpr 0x1f90b6dc950 <col:5, col:9> 'elem64 *' <ArrayToPointerDecay>
|   | |   | `-MemberExpr 0x1f90b6dc8f8 <col:5, col:9> 'elem64 [4]' lvalue ->h 0x1f90b659be8
|   | |   |   `-ImplicitCastExpr 0x1f90b6dc8e0 <col:5> 'poly1305_internal *' <LValueToRValue>
|   | |   |     `-DeclRefExpr 0x1f90b6dc8c0 <col:5> 'poly1305_internal *' lvalue Var 0x1f90b6c4a30 'st' 'poly1305_internal *'
|   | |   `-IntegerLiteral 0x1f90b6dc928 <col:11> 'int' 0
|   | `-BinaryOperator 0x1f90b6dcc70 <col:18, line:60:37> 'double' '+'
|   |   |-ImplicitCastExpr 0x1f90b6dcc58 <line:398:18> 'double' <LValueToRValue>
|   |   | `-DeclRefExpr 0x1f90b6dc9b8 <col:18> 'double' lvalue Var 0x1f90b6c4ea0 'x0' 'double'
|   |   `-BinaryOperator 0x1f90b6dcc38 <line:60:17, col:37> 'double' '*'
|   |     |-ParenExpr 0x1f90b6dcae8 <col:17, col:37> 'double'
|   |     | `-CStyleCastExpr 0x1f90b6dcac0 <col:18, col:36> 'double' <IntegralToFloating>
|   |     |   `-ParenExpr 0x1f90b6dcaa0 <col:26, col:36> 'unsigned long long'
|   |     |     `-BinaryOperator 0x1f90b6dca48 <col:27, col:35> 'unsigned long long' '<<'
|   |     |       |-IntegerLiteral 0x1f90b6dc9d8 <col:27> 'unsigned long long' 1
|   |     |       `-ParenExpr 0x1f90b6dca28 <col:33, col:35> 'int'
|   |     |         `-IntegerLiteral 0x1f90b6dca00 <line:398:27> 'int' 52
|   |     `-ParenExpr 0x1f90b6dcc18 <line:60:17, col:37> 'double'
|   |       `-CStyleCastExpr 0x1f90b6dcbf0 <col:18, col:36> 'double' <IntegralToFloating>
|   |         `-ParenExpr 0x1f90b6dcbd0 <col:26, col:36> 'unsigned long long'
|   |           `-BinaryOperator 0x1f90b6dcb78 <col:27, col:35> 'unsigned long long' '<<'
|   |             |-IntegerLiteral 0x1f90b6dcb08 <col:27> 'unsigned long long' 1
|   |             `-ParenExpr 0x1f90b6dcb58 <col:33, col:35> 'int'
|   |               `-IntegerLiteral 0x1f90b6dcb30 <line:61:19> 'int' 0
|   `-GCCAsmStmt 0x1f90b6dcd18 <line:404:5, col:48>
|     `-DeclRefExpr 0x1f90b6dccf8 <col:37> 'u32':'unsigned int' lvalue Var 0x1f90b6c1e68 'mxcsr_orig' 'u32':'unsigned int'
`-FunctionDecl 0x1f90b6d5368 <line:414:1, line:472:1> line:414:6 poly1305_emit 'void (void *, unsigned char *, const u32 *)'
  |-ParmVarDecl 0x1f90b6dcf58 <col:20, col:26> col:26 used ctx 'void *'
  |-ParmVarDecl 0x1f90b6d5080 <col:31, col:51> col:45 used mac 'unsigned char *':'unsigned char *'
  |-ParmVarDecl 0x1f90b6d5200 <col:54, col:71> col:64 used nonce 'const u32 *':'const u32 *'
  `-CompoundStmt 0x1f90b6e3160 <line:415:1, line:472:1>
    |-DeclStmt 0x1f90b6d5520 <line:416:5, col:54>
    | `-VarDecl 0x1f90b6d5448 <col:5, col:51> col:24 used st 'poly1305_internal *' cinit
    |   `-CStyleCastExpr 0x1f90b6d54f8 <col:29, col:51> 'poly1305_internal *' <BitCast>
    |     `-ImplicitCastExpr 0x1f90b6d54e0 <col:51> 'void *' <LValueToRValue> part_of_explicit_cast
    |       `-DeclRefExpr 0x1f90b6d54b0 <col:51> 'void *' lvalue ParmVar 0x1f90b6dcf58 'ctx' 'void *'
    |-DeclStmt 0x1f90b6d57c0 <line:417:5, col:27>
    | |-VarDecl 0x1f90b6d5548 <col:5, col:9> col:9 used h0 'u64':'unsigned long long'
    | |-VarDecl 0x1f90b6d55c0 <col:5, col:13> col:13 used h1 'u64':'unsigned long long'
    | |-VarDecl 0x1f90b6d5638 <col:5, col:17> col:17 used h2 'u64':'unsigned long long'
    | |-VarDecl 0x1f90b6d56b0 <col:5, col:21> col:21 used h3 'u64':'unsigned long long'
    | `-VarDecl 0x1f90b6d5728 <col:5, col:25> col:25 used h4 'u64':'unsigned long long'
    |-DeclStmt 0x1f90b6d5a60 <line:418:5, col:27>
    | |-VarDecl 0x1f90b6d57e8 <col:5, col:9> col:9 used g0 'u32':'unsigned int'
    | |-VarDecl 0x1f90b6d5860 <col:5, col:13> col:13 used g1 'u32':'unsigned int'
    | |-VarDecl 0x1f90b6d58d8 <col:5, col:17> col:17 used g2 'u32':'unsigned int'
    | |-VarDecl 0x1f90b6d5950 <col:5, col:21> col:21 used g3 'u32':'unsigned int'
    | `-VarDecl 0x1f90b6d59c8 <col:5, col:25> col:25 used g4 'u32':'unsigned int'
    |-DeclStmt 0x1f90b6d5af0 <line:419:5, col:10>
    | `-VarDecl 0x1f90b6d5a88 <col:5, col:9> col:9 used t 'u64':'unsigned long long'
    |-DeclStmt 0x1f90b6d5b80 <line:420:5, col:13>
    | `-VarDecl 0x1f90b6d5b18 <col:5, col:9> col:9 used mask 'u32':'unsigned int'
    |-BinaryOperator 0x1f90b6d5d40 <line:425:5, col:23> 'u64':'unsigned long long' '='
    | |-DeclRefExpr 0x1f90b6d5b98 <col:5> 'u64':'unsigned long long' lvalue Var 0x1f90b6d5548 'h0' 'u64':'unsigned long long'
    | `-BinaryOperator 0x1f90b6d5d20 <col:10, col:23> 'unsigned long long' '&'
    |   |-ImplicitCastExpr 0x1f90b6d5d08 <col:10, col:19> 'u64':'unsigned long long' <LValueToRValue>
    |   | `-MemberExpr 0x1f90b6d5cb0 <col:10, col:19> 'u64':'unsigned long long' lvalue .u 0x1f90b6598b0
    |   |   `-ArraySubscriptExpr 0x1f90b6d5c90 <col:10, col:17> 'elem64':'elem64' lvalue
    |   |     |-ImplicitCastExpr 0x1f90b6d5c78 <col:10, col:14> 'elem64 *' <ArrayToPointerDecay>
    |   |     | `-MemberExpr 0x1f90b6d5c20 <col:10, col:14> 'elem64 [4]' lvalue ->h 0x1f90b659be8
    |   |     |   `-ImplicitCastExpr 0x1f90b6d5c08 <col:10> 'poly1305_internal *' <LValueToRValue>
    |   |     |     `-DeclRefExpr 0x1f90b6d5bd0 <col:10> 'poly1305_internal *' lvalue Var 0x1f90b6d5448 'st' 'poly1305_internal *'
    |   |     `-IntegerLiteral 0x1f90b6d5c50 <col:16> 'int' 0
    |   `-IntegerLiteral 0x1f90b6d5ce0 <col:23> 'unsigned long long' 4503599627370495
    |-BinaryOperator 0x1f90b6d5ef0 <line:426:5, col:23> 'u64':'unsigned long long' '='
    | |-DeclRefExpr 0x1f90b6d5d60 <col:5> 'u64':'unsigned long long' lvalue Var 0x1f90b6d55c0 'h1' 'u64':'unsigned long long'
    | `-BinaryOperator 0x1f90b6d5ed0 <col:10, col:23> 'unsigned long long' '&'
    |   |-ImplicitCastExpr 0x1f90b6d5eb8 <col:10, col:19> 'u64':'unsigned long long' <LValueToRValue>
    |   | `-MemberExpr 0x1f90b6d5e60 <col:10, col:19> 'u64':'unsigned long long' lvalue .u 0x1f90b6598b0
    |   |   `-ArraySubscriptExpr 0x1f90b6d5e40 <col:10, col:17> 'elem64':'elem64' lvalue
    |   |     |-ImplicitCastExpr 0x1f90b6d5e28 <col:10, col:14> 'elem64 *' <ArrayToPointerDecay>
    |   |     | `-MemberExpr 0x1f90b6d5dd0 <col:10, col:14> 'elem64 [4]' lvalue ->h 0x1f90b659be8
    |   |     |   `-ImplicitCastExpr 0x1f90b6d5db8 <col:10> 'poly1305_internal *' <LValueToRValue>
    |   |     |     `-DeclRefExpr 0x1f90b6d5d98 <col:10> 'poly1305_internal *' lvalue Var 0x1f90b6d5448 'st' 'poly1305_internal *'
    |   |     `-IntegerLiteral 0x1f90b6d5e00 <col:16> 'int' 1
    |   `-IntegerLiteral 0x1f90b6d5e90 <col:23> 'unsigned long long' 4503599627370495
    |-BinaryOperator 0x1f90b6dd120 <line:427:5, col:23> 'u64':'unsigned long long' '='
    | |-DeclRefExpr 0x1f90b6d5f10 <col:5> 'u64':'unsigned long long' lvalue Var 0x1f90b6d5638 'h2' 'u64':'unsigned long long'
    | `-BinaryOperator 0x1f90b6dd100 <col:10, col:23> 'unsigned long long' '&'
    |   |-ImplicitCastExpr 0x1f90b6d6068 <col:10, col:19> 'u64':'unsigned long long' <LValueToRValue>
    |   | `-MemberExpr 0x1f90b6d6010 <col:10, col:19> 'u64':'unsigned long long' lvalue .u 0x1f90b6598b0
    |   |   `-ArraySubscriptExpr 0x1f90b6d5ff0 <col:10, col:17> 'elem64':'elem64' lvalue
    |   |     |-ImplicitCastExpr 0x1f90b6d5fd8 <col:10, col:14> 'elem64 *' <ArrayToPointerDecay>
    |   |     | `-MemberExpr 0x1f90b6d5f80 <col:10, col:14> 'elem64 [4]' lvalue ->h 0x1f90b659be8
    |   |     |   `-ImplicitCastExpr 0x1f90b6d5f68 <col:10> 'poly1305_internal *' <LValueToRValue>
    |   |     |     `-DeclRefExpr 0x1f90b6d5f48 <col:10> 'poly1305_internal *' lvalue Var 0x1f90b6d5448 'st' 'poly1305_internal *'
    |   |     `-IntegerLiteral 0x1f90b6d5fb0 <col:16> 'int' 2
    |   `-IntegerLiteral 0x1f90b6d6040 <col:23> 'unsigned long long' 4503599627370495
    |-BinaryOperator 0x1f90b6dd2d0 <line:428:5, col:23> 'u64':'unsigned long long' '='
    | |-DeclRefExpr 0x1f90b6dd140 <col:5> 'u64':'unsigned long long' lvalue Var 0x1f90b6d56b0 'h3' 'u64':'unsigned long long'
    | `-BinaryOperator 0x1f90b6dd2b0 <col:10, col:23> 'unsigned long long' '&'
    |   |-ImplicitCastExpr 0x1f90b6dd298 <col:10, col:19> 'u64':'unsigned long long' <LValueToRValue>
    |   | `-MemberExpr 0x1f90b6dd240 <col:10, col:19> 'u64':'unsigned long long' lvalue .u 0x1f90b6598b0
    |   |   `-ArraySubscriptExpr 0x1f90b6dd220 <col:10, col:17> 'elem64':'elem64' lvalue
    |   |     |-ImplicitCastExpr 0x1f90b6dd208 <col:10, col:14> 'elem64 *' <ArrayToPointerDecay>
    |   |     | `-MemberExpr 0x1f90b6dd1b0 <col:10, col:14> 'elem64 [4]' lvalue ->h 0x1f90b659be8
    |   |     |   `-ImplicitCastExpr 0x1f90b6dd198 <col:10> 'poly1305_internal *' <LValueToRValue>
    |   |     |     `-DeclRefExpr 0x1f90b6dd178 <col:10> 'poly1305_internal *' lvalue Var 0x1f90b6d5448 'st' 'poly1305_internal *'
    |   |     `-IntegerLiteral 0x1f90b6dd1e0 <col:16> 'int' 3
    |   `-IntegerLiteral 0x1f90b6dd270 <col:23> 'unsigned long long' 4503599627370495
    |-BinaryOperator 0x1f90b6dd3a8 <line:433:5, col:14> 'u64':'unsigned long long' '='
    | |-DeclRefExpr 0x1f90b6dd2f0 <col:5> 'u64':'unsigned long long' lvalue Var 0x1f90b6d5728 'h4' 'u64':'unsigned long long'
    | `-BinaryOperator 0x1f90b6dd388 <col:10, col:14> 'u64':'unsigned long long' '>>'
    |   |-ImplicitCastExpr 0x1f90b6dd370 <col:10> 'u64':'unsigned long long' <LValueToRValue>
    |   | `-DeclRefExpr 0x1f90b6dd328 <col:10> 'u64':'unsigned long long' lvalue Var 0x1f90b6d56b0 'h3' 'u64':'unsigned long long'
    |   `-IntegerLiteral 0x1f90b6dd348 <col:14> 'int' 32
    |-CompoundAssignOperator 0x1f90b6dd428 <col:18, col:24> 'u64':'unsigned long long' '&=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
    | |-DeclRefExpr 0x1f90b6dd3c8 <col:18> 'u64':'unsigned long long' lvalue Var 0x1f90b6d56b0 'h3' 'u64':'unsigned long long'
    | `-ImplicitCastExpr 0x1f90b6dd410 <col:24> 'unsigned long long' <IntegralCast>
    |   `-IntegerLiteral 0x1f90b6dd3e8 <col:24> 'unsigned int' 4294967295
    |-BinaryOperator 0x1f90b6dd558 <line:434:5, col:14> 'u32':'unsigned int' '='
    | |-DeclRefExpr 0x1f90b6dd458 <col:5> 'u32':'unsigned int' lvalue Var 0x1f90b6d59c8 'g4' 'u32':'unsigned int'
    | `-ImplicitCastExpr 0x1f90b6dd540 <col:10, col:14> 'u32':'unsigned int' <IntegralCast>
    |   `-BinaryOperator 0x1f90b6dd520 <col:10, col:14> 'unsigned long long' '&'
    |     |-ImplicitCastExpr 0x1f90b6dd4f0 <col:10> 'u64':'unsigned long long' <LValueToRValue>
    |     | `-DeclRefExpr 0x1f90b6dd490 <col:10> 'u64':'unsigned long long' lvalue Var 0x1f90b6d5728 'h4' 'u64':'unsigned long long'
    |     `-ImplicitCastExpr 0x1f90b6dd508 <col:13, col:14> 'unsigned long long' <IntegralCast>
    |       `-UnaryOperator 0x1f90b6dd4d8 <col:13, col:14> 'int' prefix '-'
    |         `-IntegerLiteral 0x1f90b6dd4b0 <col:14> 'int' 4
    |-CompoundAssignOperator 0x1f90b6dd5d8 <line:435:5, col:11> 'u64':'unsigned long long' '&=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
    | |-DeclRefExpr 0x1f90b6dd578 <col:5> 'u64':'unsigned long long' lvalue Var 0x1f90b6d5728 'h4' 'u64':'unsigned long long'
    | `-ImplicitCastExpr 0x1f90b6dd5c0 <col:11> 'unsigned long long' <IntegralCast>
    |   `-IntegerLiteral 0x1f90b6dd598 <col:11> 'int' 3
    |-CompoundAssignOperator 0x1f90b6dd6a8 <line:436:5, col:15> 'u32':'unsigned int' '+=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
    | |-DeclRefExpr 0x1f90b6dd608 <col:5> 'u32':'unsigned int' lvalue Var 0x1f90b6d59c8 'g4' 'u32':'unsigned int'
    | `-BinaryOperator 0x1f90b6dd688 <col:11, col:15> 'u32':'unsigned int' '>>'
    |   |-ImplicitCastExpr 0x1f90b6dd670 <col:11> 'u32':'unsigned int' <LValueToRValue>
    |   | `-DeclRefExpr 0x1f90b6dd628 <col:11> 'u32':'unsigned int' lvalue Var 0x1f90b6d59c8 'g4' 'u32':'unsigned int'
    |   `-IntegerLiteral 0x1f90b6dd648 <col:15> 'int' 2
    |-CompoundAssignOperator 0x1f90b6dd748 <line:438:5, col:11> 'u64':'unsigned long long' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
    | |-DeclRefExpr 0x1f90b6dd6d8 <col:5> 'u64':'unsigned long long' lvalue Var 0x1f90b6d5548 'h0' 'u64':'unsigned long long'
    | `-ImplicitCastExpr 0x1f90b6dd730 <col:11> 'unsigned long long' <IntegralCast>
    |   `-ImplicitCastExpr 0x1f90b6dd718 <col:11> 'u32':'unsigned int' <LValueToRValue>
    |     `-DeclRefExpr 0x1f90b6dd6f8 <col:11> 'u32':'unsigned int' lvalue Var 0x1f90b6d59c8 'g4' 'u32':'unsigned int'
    |-CompoundAssignOperator 0x1f90b6dd818 <line:439:5, col:15> 'u64':'unsigned long long' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
    | |-DeclRefExpr 0x1f90b6dd778 <col:5> 'u64':'unsigned long long' lvalue Var 0x1f90b6d55c0 'h1' 'u64':'unsigned long long'
    | `-BinaryOperator 0x1f90b6dd7f8 <col:11, col:15> 'u64':'unsigned long long' '>>'
    |   |-ImplicitCastExpr 0x1f90b6dd7e0 <col:11> 'u64':'unsigned long long' <LValueToRValue>
    |   | `-DeclRefExpr 0x1f90b6dd798 <col:11> 'u64':'unsigned long long' lvalue Var 0x1f90b6d5548 'h0' 'u64':'unsigned long long'
    |   `-IntegerLiteral 0x1f90b6dd7b8 <col:15> 'int' 32
    |-CompoundAssignOperator 0x1f90b6dd8a8 <col:19, col:25> 'u64':'unsigned long long' '&=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
    | |-DeclRefExpr 0x1f90b6dd848 <col:19> 'u64':'unsigned long long' lvalue Var 0x1f90b6d5548 'h0' 'u64':'unsigned long long'
    | `-ImplicitCastExpr 0x1f90b6dd890 <col:25> 'unsigned long long' <IntegralCast>
    |   `-IntegerLiteral 0x1f90b6dd868 <col:25> 'unsigned int' 4294967295
    |-CompoundAssignOperator 0x1f90b6dd978 <line:440:5, col:15> 'u64':'unsigned long long' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
    | |-DeclRefExpr 0x1f90b6dd8d8 <col:5> 'u64':'unsigned long long' lvalue Var 0x1f90b6d5638 'h2' 'u64':'unsigned long long'
    | `-BinaryOperator 0x1f90b6dd958 <col:11, col:15> 'u64':'unsigned long long' '>>'
    |   |-ImplicitCastExpr 0x1f90b6dd940 <col:11> 'u64':'unsigned long long' <LValueToRValue>
    |   | `-DeclRefExpr 0x1f90b6dd8f8 <col:11> 'u64':'unsigned long long' lvalue Var 0x1f90b6d55c0 'h1' 'u64':'unsigned long long'
    |   `-IntegerLiteral 0x1f90b6dd918 <col:15> 'int' 32
    |-CompoundAssignOperator 0x1f90b6dda08 <col:19, col:25> 'u64':'unsigned long long' '&=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
    | |-DeclRefExpr 0x1f90b6dd9a8 <col:19> 'u64':'unsigned long long' lvalue Var 0x1f90b6d55c0 'h1' 'u64':'unsigned long long'
    | `-ImplicitCastExpr 0x1f90b6dd9f0 <col:25> 'unsigned long long' <IntegralCast>
    |   `-IntegerLiteral 0x1f90b6dd9c8 <col:25> 'unsigned int' 4294967295
    |-CompoundAssignOperator 0x1f90b6ddad8 <line:441:5, col:15> 'u64':'unsigned long long' '+=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
    | |-DeclRefExpr 0x1f90b6dda38 <col:5> 'u64':'unsigned long long' lvalue Var 0x1f90b6d56b0 'h3' 'u64':'unsigned long long'
    | `-BinaryOperator 0x1f90b6ddab8 <col:11, col:15> 'u64':'unsigned long long' '>>'
    |   |-ImplicitCastExpr 0x1f90b6ddaa0 <col:11> 'u64':'unsigned long long' <LValueToRValue>
    |   | `-DeclRefExpr 0x1f90b6dda58 <col:11> 'u64':'unsigned long long' lvalue Var 0x1f90b6d5638 'h2' 'u64':'unsigned long long'
    |   `-IntegerLiteral 0x1f90b6dda78 <col:15> 'int' 32
    |-CompoundAssignOperator 0x1f90b6ddb68 <col:19, col:25> 'u64':'unsigned long long' '&=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
    | |-DeclRefExpr 0x1f90b6ddb08 <col:19> 'u64':'unsigned long long' lvalue Var 0x1f90b6d5638 'h2' 'u64':'unsigned long long'
    | `-ImplicitCastExpr 0x1f90b6ddb50 <col:25> 'unsigned long long' <IntegralCast>
    |   `-IntegerLiteral 0x1f90b6ddb28 <col:25> 'unsigned int' 4294967295
    |-BinaryOperator 0x1f90b6ddd38 <line:444:5, col:26> 'u32':'unsigned int' '='
    | |-DeclRefExpr 0x1f90b6ddb98 <col:5> 'u32':'unsigned int' lvalue Var 0x1f90b6d57e8 'g0' 'u32':'unsigned int'
    | `-CStyleCastExpr 0x1f90b6ddd10 <col:10, col:26> 'u32':'unsigned int' <IntegralCast>
    |   `-ParenExpr 0x1f90b6ddcf0 <col:15, col:26> 'u64':'unsigned long long'
    |     `-BinaryOperator 0x1f90b6ddca0 <col:16, col:25> 'u64':'unsigned long long' '='
    |       |-DeclRefExpr 0x1f90b6ddbd0 <col:16> 'u64':'unsigned long long' lvalue Var 0x1f90b6d5a88 't' 'u64':'unsigned long long'
    |       `-BinaryOperator 0x1f90b6ddc80 <col:20, col:25> 'unsigned long long' '+'
    |         |-ImplicitCastExpr 0x1f90b6ddc50 <col:20> 'u64':'unsigned long long' <LValueToRValue>
    |         | `-DeclRefExpr 0x1f90b6ddc08 <col:20> 'u64':'unsigned long long' lvalue Var 0x1f90b6d5548 'h0' 'u64':'unsigned long long'
    |         `-ImplicitCastExpr 0x1f90b6ddc68 <col:25> 'unsigned long long' <IntegralCast>
    |           `-IntegerLiteral 0x1f90b6ddc28 <col:25> 'int' 5
    |-BinaryOperator 0x1f90b6ddf40 <line:445:5, col:34> 'u32':'unsigned int' '='
    | |-DeclRefExpr 0x1f90b6ddd58 <col:5> 'u32':'unsigned int' lvalue Var 0x1f90b6d5860 'g1' 'u32':'unsigned int'
    | `-CStyleCastExpr 0x1f90b6ddf18 <col:10, col:34> 'u32':'unsigned int' <IntegralCast>
    |   `-ParenExpr 0x1f90b6ddef8 <col:15, col:34> 'u64':'unsigned long long'
    |     `-BinaryOperator 0x1f90b6ddea8 <col:16, col:33> 'u64':'unsigned long long' '='
    |       |-DeclRefExpr 0x1f90b6ddd90 <col:16> 'u64':'unsigned long long' lvalue Var 0x1f90b6d5a88 't' 'u64':'unsigned long long'
    |       `-BinaryOperator 0x1f90b6dde88 <col:20, col:33> 'unsigned long long' '+'
    |         |-ImplicitCastExpr 0x1f90b6dde70 <col:20> 'u64':'unsigned long long' <LValueToRValue>
    |         | `-DeclRefExpr 0x1f90b6dddb0 <col:20> 'u64':'unsigned long long' lvalue Var 0x1f90b6d55c0 'h1' 'u64':'unsigned long long'
    |         `-ParenExpr 0x1f90b6dde50 <col:25, col:33> 'u64':'unsigned long long'
    |           `-BinaryOperator 0x1f90b6dde30 <col:26, col:31> 'u64':'unsigned long long' '>>'
    |             |-ImplicitCastExpr 0x1f90b6dde18 <col:26> 'u64':'unsigned long long' <LValueToRValue>
    |             | `-DeclRefExpr 0x1f90b6dddd0 <col:26> 'u64':'unsigned long long' lvalue Var 0x1f90b6d5a88 't' 'u64':'unsigned long long'
    |             `-IntegerLiteral 0x1f90b6dddf0 <col:31> 'int' 32
    |-BinaryOperator 0x1f90b6d60d8 <line:446:5, col:34> 'u32':'unsigned int' '='
    | |-DeclRefExpr 0x1f90b6ddf60 <col:5> 'u32':'unsigned int' lvalue Var 0x1f90b6d58d8 'g2' 'u32':'unsigned int'
    | `-CStyleCastExpr 0x1f90b6d60b0 <col:10, col:34> 'u32':'unsigned int' <IntegralCast>
    |   `-ParenExpr 0x1f90b6d6090 <col:15, col:34> 'u64':'unsigned long long'
    |     `-BinaryOperator 0x1f90b6de0b0 <col:16, col:33> 'u64':'unsigned long long' '='
    |       |-DeclRefExpr 0x1f90b6ddf98 <col:16> 'u64':'unsigned long long' lvalue Var 0x1f90b6d5a88 't' 'u64':'unsigned long long'
    |       `-BinaryOperator 0x1f90b6de090 <col:20, col:33> 'unsigned long long' '+'
    |         |-ImplicitCastExpr 0x1f90b6de078 <col:20> 'u64':'unsigned long long' <LValueToRValue>
    |         | `-DeclRefExpr 0x1f90b6ddfb8 <col:20> 'u64':'unsigned long long' lvalue Var 0x1f90b6d5638 'h2' 'u64':'unsigned long long'
    |         `-ParenExpr 0x1f90b6de058 <col:25, col:33> 'u64':'unsigned long long'
    |           `-BinaryOperator 0x1f90b6de038 <col:26, col:31> 'u64':'unsigned long long' '>>'
    |             |-ImplicitCastExpr 0x1f90b6de020 <col:26> 'u64':'unsigned long long' <LValueToRValue>
    |             | `-DeclRefExpr 0x1f90b6ddfd8 <col:26> 'u64':'unsigned long long' lvalue Var 0x1f90b6d5a88 't' 'u64':'unsigned long long'
    |             `-IntegerLiteral 0x1f90b6ddff8 <col:31> 'int' 32
    |-BinaryOperator 0x1f90b6d62e0 <line:447:5, col:34> 'u32':'unsigned int' '='
    | |-DeclRefExpr 0x1f90b6d60f8 <col:5> 'u32':'unsigned int' lvalue Var 0x1f90b6d5950 'g3' 'u32':'unsigned int'
    | `-CStyleCastExpr 0x1f90b6d62b8 <col:10, col:34> 'u32':'unsigned int' <IntegralCast>
    |   `-ParenExpr 0x1f90b6d6298 <col:15, col:34> 'u64':'unsigned long long'
    |     `-BinaryOperator 0x1f90b6d6248 <col:16, col:33> 'u64':'unsigned long long' '='
    |       |-DeclRefExpr 0x1f90b6d6130 <col:16> 'u64':'unsigned long long' lvalue Var 0x1f90b6d5a88 't' 'u64':'unsigned long long'
    |       `-BinaryOperator 0x1f90b6d6228 <col:20, col:33> 'unsigned long long' '+'
    |         |-ImplicitCastExpr 0x1f90b6d6210 <col:20> 'u64':'unsigned long long' <LValueToRValue>
    |         | `-DeclRefExpr 0x1f90b6d6150 <col:20> 'u64':'unsigned long long' lvalue Var 0x1f90b6d56b0 'h3' 'u64':'unsigned long long'
    |         `-ParenExpr 0x1f90b6d61f0 <col:25, col:33> 'u64':'unsigned long long'
    |           `-BinaryOperator 0x1f90b6d61d0 <col:26, col:31> 'u64':'unsigned long long' '>>'
    |             |-ImplicitCastExpr 0x1f90b6d61b8 <col:26> 'u64':'unsigned long long' <LValueToRValue>
    |             | `-DeclRefExpr 0x1f90b6d6170 <col:26> 'u64':'unsigned long long' lvalue Var 0x1f90b6d5a88 't' 'u64':'unsigned long long'
    |             `-IntegerLiteral 0x1f90b6d6190 <col:31> 'int' 32
    |-BinaryOperator 0x1f90b6d64a0 <line:448:5, col:28> 'u32':'unsigned int' '='
    | |-DeclRefExpr 0x1f90b6d6300 <col:5> 'u32':'unsigned int' lvalue Var 0x1f90b6d59c8 'g4' 'u32':'unsigned int'
    | `-ImplicitCastExpr 0x1f90b6d6488 <col:10, col:28> 'u32':'unsigned int' <IntegralCast>
    |   `-BinaryOperator 0x1f90b6d6468 <col:10, col:28> 'unsigned long long' '+'
    |     |-ImplicitCastExpr 0x1f90b6d6438 <col:10> 'u64':'unsigned long long' <LValueToRValue>
    |     | `-DeclRefExpr 0x1f90b6d6320 <col:10> 'u64':'unsigned long long' lvalue Var 0x1f90b6d5728 'h4' 'u64':'unsigned long long'
    |     `-ImplicitCastExpr 0x1f90b6d6450 <col:15, col:28> 'unsigned long long' <IntegralCast>
    |       `-CStyleCastExpr 0x1f90b6d6410 <col:15, col:28> 'u32':'unsigned int' <IntegralCast>
    |         `-ParenExpr 0x1f90b6d63f0 <col:20, col:28> 'u64':'unsigned long long'
    |           `-BinaryOperator 0x1f90b6d63a0 <col:21, col:26> 'u64':'unsigned long long' '>>'
    |             |-ImplicitCastExpr 0x1f90b6d6388 <col:21> 'u64':'unsigned long long' <LValueToRValue>
    |             | `-DeclRefExpr 0x1f90b6d6340 <col:21> 'u64':'unsigned long long' lvalue Var 0x1f90b6d5a88 't' 'u64':'unsigned long long'
    |             `-IntegerLiteral 0x1f90b6d6360 <col:26> 'int' 32
    |-BinaryOperator 0x1f90b6d65f8 <line:451:5, col:24> 'u32':'unsigned int' '='
    | |-DeclRefExpr 0x1f90b6d64c0 <col:5> 'u32':'unsigned int' lvalue Var 0x1f90b6d5b18 'mask' 'u32':'unsigned int'
    | `-BinaryOperator 0x1f90b6d65d8 <col:12, col:24> 'unsigned int' '-'
    |   |-ImplicitCastExpr 0x1f90b6d65c0 <col:12> 'unsigned int' <IntegralCast>
    |   | `-IntegerLiteral 0x1f90b6d64f8 <col:12> 'int' 0
    |   `-ParenExpr 0x1f90b6d65a0 <col:16, col:24> 'u32':'unsigned int'
    |     `-BinaryOperator 0x1f90b6d6580 <col:17, col:23> 'u32':'unsigned int' '>>'
    |       |-ImplicitCastExpr 0x1f90b6d6568 <col:17> 'u32':'unsigned int' <LValueToRValue>
    |       | `-DeclRefExpr 0x1f90b6d6520 <col:17> 'u32':'unsigned int' lvalue Var 0x1f90b6d59c8 'g4' 'u32':'unsigned int'
    |       `-IntegerLiteral 0x1f90b6d6540 <col:23> 'int' 2
    |-CompoundAssignOperator 0x1f90b6d6670 <line:452:5, col:11> 'u32':'unsigned int' '&=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
    | |-DeclRefExpr 0x1f90b6d6618 <col:5> 'u32':'unsigned int' lvalue Var 0x1f90b6d57e8 'g0' 'u32':'unsigned int'
    | `-ImplicitCastExpr 0x1f90b6d6658 <col:11> 'u32':'unsigned int' <LValueToRValue>
    |   `-DeclRefExpr 0x1f90b6d6638 <col:11> 'u32':'unsigned int' lvalue Var 0x1f90b6d5b18 'mask' 'u32':'unsigned int'
    |-CompoundAssignOperator 0x1f90b6d66f8 <line:453:5, col:11> 'u32':'unsigned int' '&=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
    | |-DeclRefExpr 0x1f90b6d66a0 <col:5> 'u32':'unsigned int' lvalue Var 0x1f90b6d5860 'g1' 'u32':'unsigned int'
    | `-ImplicitCastExpr 0x1f90b6d66e0 <col:11> 'u32':'unsigned int' <LValueToRValue>
    |   `-DeclRefExpr 0x1f90b6d66c0 <col:11> 'u32':'unsigned int' lvalue Var 0x1f90b6d5b18 'mask' 'u32':'unsigned int'
    |-CompoundAssignOperator 0x1f90b6d6780 <line:454:5, col:11> 'u32':'unsigned int' '&=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
    | |-DeclRefExpr 0x1f90b6d6728 <col:5> 'u32':'unsigned int' lvalue Var 0x1f90b6d58d8 'g2' 'u32':'unsigned int'
    | `-ImplicitCastExpr 0x1f90b6d6768 <col:11> 'u32':'unsigned int' <LValueToRValue>
    |   `-DeclRefExpr 0x1f90b6d6748 <col:11> 'u32':'unsigned int' lvalue Var 0x1f90b6d5b18 'mask' 'u32':'unsigned int'
    |-CompoundAssignOperator 0x1f90b6d6808 <line:455:5, col:11> 'u32':'unsigned int' '&=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
    | |-DeclRefExpr 0x1f90b6d67b0 <col:5> 'u32':'unsigned int' lvalue Var 0x1f90b6d5950 'g3' 'u32':'unsigned int'
    | `-ImplicitCastExpr 0x1f90b6d67f0 <col:11> 'u32':'unsigned int' <LValueToRValue>
    |   `-DeclRefExpr 0x1f90b6d67d0 <col:11> 'u32':'unsigned int' lvalue Var 0x1f90b6d5b18 'mask' 'u32':'unsigned int'
    |-BinaryOperator 0x1f90b6d68a8 <line:456:5, col:13> 'u32':'unsigned int' '='
    | |-DeclRefExpr 0x1f90b6d6838 <col:5> 'u32':'unsigned int' lvalue Var 0x1f90b6d5b18 'mask' 'u32':'unsigned int'
    | `-UnaryOperator 0x1f90b6d6890 <col:12, col:13> 'u32':'unsigned int' prefix '~' cannot overflow
    |   `-ImplicitCastExpr 0x1f90b6d6878 <col:13> 'u32':'unsigned int' <LValueToRValue>
    |     `-DeclRefExpr 0x1f90b6d6858 <col:13> 'u32':'unsigned int' lvalue Var 0x1f90b6d5b18 'mask' 'u32':'unsigned int'
    |-CompoundAssignOperator 0x1f90b6d69b0 <line:457:5, col:21> 'u32':'unsigned int' '|=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
    | |-DeclRefExpr 0x1f90b6d68c8 <col:5> 'u32':'unsigned int' lvalue Var 0x1f90b6d57e8 'g0' 'u32':'unsigned int'
    | `-ParenExpr 0x1f90b6d6990 <col:11, col:21> 'unsigned long long'
    |   `-BinaryOperator 0x1f90b6d6970 <col:12, col:17> 'unsigned long long' '&'
    |     |-ImplicitCastExpr 0x1f90b6d6928 <col:12> 'u64':'unsigned long long' <LValueToRValue>
    |     | `-DeclRefExpr 0x1f90b6d68e8 <col:12> 'u64':'unsigned long long' lvalue Var 0x1f90b6d5548 'h0' 'u64':'unsigned long long'
    |     `-ImplicitCastExpr 0x1f90b6d6958 <col:17> 'unsigned long long' <IntegralCast>
    |       `-ImplicitCastExpr 0x1f90b6d6940 <col:17> 'u32':'unsigned int' <LValueToRValue>
    |         `-DeclRefExpr 0x1f90b6d6908 <col:17> 'u32':'unsigned int' lvalue Var 0x1f90b6d5b18 'mask' 'u32':'unsigned int'
    |-CompoundAssignOperator 0x1f90b6d6ac8 <line:458:5, col:21> 'u32':'unsigned int' '|=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
    | |-DeclRefExpr 0x1f90b6d69e0 <col:5> 'u32':'unsigned int' lvalue Var 0x1f90b6d5860 'g1' 'u32':'unsigned int'
    | `-ParenExpr 0x1f90b6d6aa8 <col:11, col:21> 'unsigned long long'
    |   `-BinaryOperator 0x1f90b6d6a88 <col:12, col:17> 'unsigned long long' '&'
    |     |-ImplicitCastExpr 0x1f90b6d6a40 <col:12> 'u64':'unsigned long long' <LValueToRValue>
    |     | `-DeclRefExpr 0x1f90b6d6a00 <col:12> 'u64':'unsigned long long' lvalue Var 0x1f90b6d55c0 'h1' 'u64':'unsigned long long'
    |     `-ImplicitCastExpr 0x1f90b6d6a70 <col:17> 'unsigned long long' <IntegralCast>
    |       `-ImplicitCastExpr 0x1f90b6d6a58 <col:17> 'u32':'unsigned int' <LValueToRValue>
    |         `-DeclRefExpr 0x1f90b6d6a20 <col:17> 'u32':'unsigned int' lvalue Var 0x1f90b6d5b18 'mask' 'u32':'unsigned int'
    |-CompoundAssignOperator 0x1f90b6d6be0 <line:459:5, col:21> 'u32':'unsigned int' '|=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
    | |-DeclRefExpr 0x1f90b6d6af8 <col:5> 'u32':'unsigned int' lvalue Var 0x1f90b6d58d8 'g2' 'u32':'unsigned int'
    | `-ParenExpr 0x1f90b6d6bc0 <col:11, col:21> 'unsigned long long'
    |   `-BinaryOperator 0x1f90b6d6ba0 <col:12, col:17> 'unsigned long long' '&'
    |     |-ImplicitCastExpr 0x1f90b6d6b58 <col:12> 'u64':'unsigned long long' <LValueToRValue>
    |     | `-DeclRefExpr 0x1f90b6d6b18 <col:12> 'u64':'unsigned long long' lvalue Var 0x1f90b6d5638 'h2' 'u64':'unsigned long long'
    |     `-ImplicitCastExpr 0x1f90b6d6b88 <col:17> 'unsigned long long' <IntegralCast>
    |       `-ImplicitCastExpr 0x1f90b6d6b70 <col:17> 'u32':'unsigned int' <LValueToRValue>
    |         `-DeclRefExpr 0x1f90b6d6b38 <col:17> 'u32':'unsigned int' lvalue Var 0x1f90b6d5b18 'mask' 'u32':'unsigned int'
    |-CompoundAssignOperator 0x1f90b6d6cf8 <line:460:5, col:21> 'u32':'unsigned int' '|=' ComputeLHSTy='unsigned long long' ComputeResultTy='unsigned long long'
    | |-DeclRefExpr 0x1f90b6d6c10 <col:5> 'u32':'unsigned int' lvalue Var 0x1f90b6d5950 'g3' 'u32':'unsigned int'
    | `-ParenExpr 0x1f90b6d6cd8 <col:11, col:21> 'unsigned long long'
    |   `-BinaryOperator 0x1f90b6d6cb8 <col:12, col:17> 'unsigned long long' '&'
    |     |-ImplicitCastExpr 0x1f90b6d6c70 <col:12> 'u64':'unsigned long long' <LValueToRValue>
    |     | `-DeclRefExpr 0x1f90b6d6c30 <col:12> 'u64':'unsigned long long' lvalue Var 0x1f90b6d56b0 'h3' 'u64':'unsigned long long'
    |     `-ImplicitCastExpr 0x1f90b6d6ca0 <col:17> 'unsigned long long' <IntegralCast>
    |       `-ImplicitCastExpr 0x1f90b6d6c88 <col:17> 'u32':'unsigned int' <LValueToRValue>
    |         `-DeclRefExpr 0x1f90b6d6c50 <col:17> 'u32':'unsigned int' lvalue Var 0x1f90b6d5b18 'mask' 'u32':'unsigned int'
    |-BinaryOperator 0x1f90b6d6f40 <line:463:5, col:38> 'u32':'unsigned int' '='
    | |-DeclRefExpr 0x1f90b6d6d28 <col:5> 'u32':'unsigned int' lvalue Var 0x1f90b6d57e8 'g0' 'u32':'unsigned int'
    | `-CStyleCastExpr 0x1f90b6d6f18 <col:10, col:38> 'u32':'unsigned int' <IntegralCast>
    |   `-ParenExpr 0x1f90b6d6ef8 <col:15, col:38> 'u64':'unsigned long long'
    |     `-BinaryOperator 0x1f90b6d6ea8 <col:16, col:37> 'u64':'unsigned long long' '='
    |       |-DeclRefExpr 0x1f90b6d6d48 <col:16> 'u64':'unsigned long long' lvalue Var 0x1f90b6d5a88 't' 'u64':'unsigned long long'
    |       `-BinaryOperator 0x1f90b6d6e88 <col:20, col:37> 'unsigned long long' '+'
    |         |-CStyleCastExpr 0x1f90b6d6db0 <col:20, col:25> 'u64':'unsigned long long' <IntegralCast>
    |         | `-ImplicitCastExpr 0x1f90b6d6d98 <col:25> 'u32':'unsigned int' <LValueToRValue> part_of_explicit_cast
    |         |   `-DeclRefExpr 0x1f90b6d6d68 <col:25> 'u32':'unsigned int' lvalue Var 0x1f90b6d57e8 'g0' 'u32':'unsigned int'
    |         `-ImplicitCastExpr 0x1f90b6d6e70 <col:30, col:37> 'unsigned long long' <IntegralCast>
    |           `-ImplicitCastExpr 0x1f90b6d6e58 <col:30, col:37> 'u32':'unsigned int' <LValueToRValue>
    |             `-ArraySubscriptExpr 0x1f90b6d6e38 <col:30, col:37> 'const u32':'const unsigned int' lvalue
    |               |-ImplicitCastExpr 0x1f90b6d6e20 <col:30> 'const u32 *':'const u32 *' <LValueToRValue>
    |               | `-DeclRefExpr 0x1f90b6d6dd8 <col:30> 'const u32 *':'const u32 *' lvalue ParmVar 0x1f90b6d5200 'nonce' 'const u32 *':'const u32 *'
    |               `-IntegerLiteral 0x1f90b6d6df8 <col:36> 'int' 0
    |-BinaryOperator 0x1f90b6e4318 <line:464:5, col:50> 'u32':'unsigned int' '='
    | |-DeclRefExpr 0x1f90b6d6f60 <col:5> 'u32':'unsigned int' lvalue Var 0x1f90b6d5860 'g1' 'u32':'unsigned int'
    | `-CStyleCastExpr 0x1f90b6e42f0 <col:10, col:50> 'u32':'unsigned int' <IntegralCast>
    |   `-ParenExpr 0x1f90b6e42d0 <col:15, col:50> 'u64':'unsigned long long'
    |     `-BinaryOperator 0x1f90b6e4280 <col:16, col:49> 'u64':'unsigned long long' '='
    |       |-DeclRefExpr 0x1f90b6d6f80 <col:16> 'u64':'unsigned long long' lvalue Var 0x1f90b6d5a88 't' 'u64':'unsigned long long'
    |       `-BinaryOperator 0x1f90b6e4260 <col:20, col:49> 'unsigned long long' '+'
    |         |-BinaryOperator 0x1f90b6e4190 <col:20, col:38> 'unsigned long long' '+'
    |         | |-CStyleCastExpr 0x1f90b6d6fe8 <col:20, col:25> 'u64':'unsigned long long' <IntegralCast>
    |         | | `-ImplicitCastExpr 0x1f90b6d6fd0 <col:25> 'u32':'unsigned int' <LValueToRValue> part_of_explicit_cast
    |         | |   `-DeclRefExpr 0x1f90b6d6fa0 <col:25> 'u32':'unsigned int' lvalue Var 0x1f90b6d5860 'g1' 'u32':'unsigned int'
    |         | `-ParenExpr 0x1f90b6e4170 <col:30, col:38> 'u64':'unsigned long long'
    |         |   `-BinaryOperator 0x1f90b6d7070 <col:31, col:36> 'u64':'unsigned long long' '>>'
    |         |     |-ImplicitCastExpr 0x1f90b6d7058 <col:31> 'u64':'unsigned long long' <LValueToRValue>
    |         |     | `-DeclRefExpr 0x1f90b6d7010 <col:31> 'u64':'unsigned long long' lvalue Var 0x1f90b6d5a88 't' 'u64':'unsigned long long'
    |         |     `-IntegerLiteral 0x1f90b6d7030 <col:36> 'int' 32
    |         `-ImplicitCastExpr 0x1f90b6e4248 <col:42, col:49> 'unsigned long long' <IntegralCast>
    |           `-ImplicitCastExpr 0x1f90b6e4230 <col:42, col:49> 'u32':'unsigned int' <LValueToRValue>
    |             `-ArraySubscriptExpr 0x1f90b6e4210 <col:42, col:49> 'const u32':'const unsigned int' lvalue
    |               |-ImplicitCastExpr 0x1f90b6e41f8 <col:42> 'const u32 *':'const u32 *' <LValueToRValue>
    |               | `-DeclRefExpr 0x1f90b6e41b0 <col:42> 'const u32 *':'const u32 *' lvalue ParmVar 0x1f90b6d5200 'nonce' 'const u32 *':'const u32 *'
    |               `-IntegerLiteral 0x1f90b6e41d0 <col:48> 'int' 1
    |-BinaryOperator 0x1f90b6e4610 <line:465:5, col:50> 'u32':'unsigned int' '='
    | |-DeclRefExpr 0x1f90b6e4338 <col:5> 'u32':'unsigned int' lvalue Var 0x1f90b6d58d8 'g2' 'u32':'unsigned int'
    | `-CStyleCastExpr 0x1f90b6e45e8 <col:10, col:50> 'u32':'unsigned int' <IntegralCast>
    |   `-ParenExpr 0x1f90b6e45c8 <col:15, col:50> 'u64':'unsigned long long'
    |     `-BinaryOperator 0x1f90b6e4578 <col:16, col:49> 'u64':'unsigned long long' '='
    |       |-DeclRefExpr 0x1f90b6e4358 <col:16> 'u64':'unsigned long long' lvalue Var 0x1f90b6d5a88 't' 'u64':'unsigned long long'
    |       `-BinaryOperator 0x1f90b6e4558 <col:20, col:49> 'unsigned long long' '+'
    |         |-BinaryOperator 0x1f90b6e4488 <col:20, col:38> 'unsigned long long' '+'
    |         | |-CStyleCastExpr 0x1f90b6e43c0 <col:20, col:25> 'u64':'unsigned long long' <IntegralCast>
    |         | | `-ImplicitCastExpr 0x1f90b6e43a8 <col:25> 'u32':'unsigned int' <LValueToRValue> part_of_explicit_cast
    |         | |   `-DeclRefExpr 0x1f90b6e4378 <col:25> 'u32':'unsigned int' lvalue Var 0x1f90b6d58d8 'g2' 'u32':'unsigned int'
    |         | `-ParenExpr 0x1f90b6e4468 <col:30, col:38> 'u64':'unsigned long long'
    |         |   `-BinaryOperator 0x1f90b6e4448 <col:31, col:36> 'u64':'unsigned long long' '>>'
    |         |     |-ImplicitCastExpr 0x1f90b6e4430 <col:31> 'u64':'unsigned long long' <LValueToRValue>
    |         |     | `-DeclRefExpr 0x1f90b6e43e8 <col:31> 'u64':'unsigned long long' lvalue Var 0x1f90b6d5a88 't' 'u64':'unsigned long long'
    |         |     `-IntegerLiteral 0x1f90b6e4408 <col:36> 'int' 32
    |         `-ImplicitCastExpr 0x1f90b6e4540 <col:42, col:49> 'unsigned long long' <IntegralCast>
    |           `-ImplicitCastExpr 0x1f90b6e4528 <col:42, col:49> 'u32':'unsigned int' <LValueToRValue>
    |             `-ArraySubscriptExpr 0x1f90b6e4508 <col:42, col:49> 'const u32':'const unsigned int' lvalue
    |               |-ImplicitCastExpr 0x1f90b6e44f0 <col:42> 'const u32 *':'const u32 *' <LValueToRValue>
    |               | `-DeclRefExpr 0x1f90b6e44a8 <col:42> 'const u32 *':'const u32 *' lvalue ParmVar 0x1f90b6d5200 'nonce' 'const u32 *':'const u32 *'
    |               `-IntegerLiteral 0x1f90b6e44c8 <col:48> 'int' 2
    |-BinaryOperator 0x1f90b6e4908 <line:466:5, col:50> 'u32':'unsigned int' '='
    | |-DeclRefExpr 0x1f90b6e4630 <col:5> 'u32':'unsigned int' lvalue Var 0x1f90b6d5950 'g3' 'u32':'unsigned int'
    | `-CStyleCastExpr 0x1f90b6e48e0 <col:10, col:50> 'u32':'unsigned int' <IntegralCast>
    |   `-ParenExpr 0x1f90b6e48c0 <col:15, col:50> 'u64':'unsigned long long'
    |     `-BinaryOperator 0x1f90b6e4870 <col:16, col:49> 'u64':'unsigned long long' '='
    |       |-DeclRefExpr 0x1f90b6e4650 <col:16> 'u64':'unsigned long long' lvalue Var 0x1f90b6d5a88 't' 'u64':'unsigned long long'
    |       `-BinaryOperator 0x1f90b6e4850 <col:20, col:49> 'unsigned long long' '+'
    |         |-BinaryOperator 0x1f90b6e4780 <col:20, col:38> 'unsigned long long' '+'
    |         | |-CStyleCastExpr 0x1f90b6e46b8 <col:20, col:25> 'u64':'unsigned long long' <IntegralCast>
    |         | | `-ImplicitCastExpr 0x1f90b6e46a0 <col:25> 'u32':'unsigned int' <LValueToRValue> part_of_explicit_cast
    |         | |   `-DeclRefExpr 0x1f90b6e4670 <col:25> 'u32':'unsigned int' lvalue Var 0x1f90b6d5950 'g3' 'u32':'unsigned int'
    |         | `-ParenExpr 0x1f90b6e4760 <col:30, col:38> 'u64':'unsigned long long'
    |         |   `-BinaryOperator 0x1f90b6e4740 <col:31, col:36> 'u64':'unsigned long long' '>>'
    |         |     |-ImplicitCastExpr 0x1f90b6e4728 <col:31> 'u64':'unsigned long long' <LValueToRValue>
    |         |     | `-DeclRefExpr 0x1f90b6e46e0 <col:31> 'u64':'unsigned long long' lvalue Var 0x1f90b6d5a88 't' 'u64':'unsigned long long'
    |         |     `-IntegerLiteral 0x1f90b6e4700 <col:36> 'int' 32
    |         `-ImplicitCastExpr 0x1f90b6e4838 <col:42, col:49> 'unsigned long long' <IntegralCast>
    |           `-ImplicitCastExpr 0x1f90b6e4820 <col:42, col:49> 'u32':'unsigned int' <LValueToRValue>
    |             `-ArraySubscriptExpr 0x1f90b6e4800 <col:42, col:49> 'const u32':'const unsigned int' lvalue
    |               |-ImplicitCastExpr 0x1f90b6e47e8 <col:42> 'const u32 *':'const u32 *' <LValueToRValue>
    |               | `-DeclRefExpr 0x1f90b6e47a0 <col:42> 'const u32 *':'const u32 *' lvalue ParmVar 0x1f90b6d5200 'nonce' 'const u32 *':'const u32 *'
    |               `-IntegerLiteral 0x1f90b6e47c0 <col:48> 'int' 3
    |-ParenExpr 0x1f90b6e4b10 <line:71:22, col:40> 'u32':'unsigned int'
    | `-BinaryOperator 0x1f90b6e4af0 <col:23, col:39> 'u32':'unsigned int' '='
    |   |-UnaryOperator 0x1f90b6e4a80 <col:23, col:33> 'u32':'unsigned int' lvalue prefix '*' cannot overflow
    |   | `-CStyleCastExpr 0x1f90b6e4a58 <col:24, col:33> 'u32 *' <BitCast>
    |   |   `-ParenExpr 0x1f90b6e4a38 <col:31, col:33> 'unsigned char *':'unsigned char *'
    |   |     `-BinaryOperator 0x1f90b6e4988 <line:468:12, col:18> 'unsigned char *':'unsigned char *' '+'
    |   |       |-ImplicitCastExpr 0x1f90b6e4970 <col:12> 'unsigned char *':'unsigned char *' <LValueToRValue>
    |   |       | `-DeclRefExpr 0x1f90b6e4928 <col:12> 'unsigned char *':'unsigned char *' lvalue ParmVar 0x1f90b6d5080 'mac' 'unsigned char *':'unsigned char *'
    |   |       `-IntegerLiteral 0x1f90b6e4948 <col:18> 'int' 0
    |   `-ImplicitCastExpr 0x1f90b6e4ad8 <line:71:37, col:39> 'u32':'unsigned int' <LValueToRValue>
    |     `-ParenExpr 0x1f90b6e4ab8 <col:37, col:39> 'u32':'unsigned int' lvalue
    |       `-DeclRefExpr 0x1f90b6e4a98 <line:468:21> 'u32':'unsigned int' lvalue Var 0x1f90b6d57e8 'g0' 'u32':'unsigned int'
    |-ParenExpr 0x1f90b6e4cb8 <line:71:22, col:40> 'u32':'unsigned int'
    | `-BinaryOperator 0x1f90b6e4c98 <col:23, col:39> 'u32':'unsigned int' '='
    |   |-UnaryOperator 0x1f90b6e4c28 <col:23, col:33> 'u32':'unsigned int' lvalue prefix '*' cannot overflow
    |   | `-CStyleCastExpr 0x1f90b6e4c00 <col:24, col:33> 'u32 *' <BitCast>
    |   |   `-ParenExpr 0x1f90b6e4be0 <col:31, col:33> 'unsigned char *':'unsigned char *'
    |   |     `-BinaryOperator 0x1f90b6e4b90 <line:469:12, col:18> 'unsigned char *':'unsigned char *' '+'
    |   |       |-ImplicitCastExpr 0x1f90b6e4b78 <col:12> 'unsigned char *':'unsigned char *' <LValueToRValue>
    |   |       | `-DeclRefExpr 0x1f90b6e4b30 <col:12> 'unsigned char *':'unsigned char *' lvalue ParmVar 0x1f90b6d5080 'mac' 'unsigned char *':'unsigned char *'
    |   |       `-IntegerLiteral 0x1f90b6e4b50 <col:18> 'int' 4
    |   `-ImplicitCastExpr 0x1f90b6e4c80 <line:71:37, col:39> 'u32':'unsigned int' <LValueToRValue>
    |     `-ParenExpr 0x1f90b6e4c60 <col:37, col:39> 'u32':'unsigned int' lvalue
    |       `-DeclRefExpr 0x1f90b6e4c40 <line:469:21> 'u32':'unsigned int' lvalue Var 0x1f90b6d5860 'g1' 'u32':'unsigned int'
    |-ParenExpr 0x1f90b6e4e60 <line:71:22, col:40> 'u32':'unsigned int'
    | `-BinaryOperator 0x1f90b6e4e40 <col:23, col:39> 'u32':'unsigned int' '='
    |   |-UnaryOperator 0x1f90b6e4dd0 <col:23, col:33> 'u32':'unsigned int' lvalue prefix '*' cannot overflow
    |   | `-CStyleCastExpr 0x1f90b6e4da8 <col:24, col:33> 'u32 *' <BitCast>
    |   |   `-ParenExpr 0x1f90b6e4d88 <col:31, col:33> 'unsigned char *':'unsigned char *'
    |   |     `-BinaryOperator 0x1f90b6e4d38 <line:470:12, col:18> 'unsigned char *':'unsigned char *' '+'
    |   |       |-ImplicitCastExpr 0x1f90b6e4d20 <col:12> 'unsigned char *':'unsigned char *' <LValueToRValue>
    |   |       | `-DeclRefExpr 0x1f90b6e4cd8 <col:12> 'unsigned char *':'unsigned char *' lvalue ParmVar 0x1f90b6d5080 'mac' 'unsigned char *':'unsigned char *'
    |   |       `-IntegerLiteral 0x1f90b6e4cf8 <col:18> 'int' 8
    |   `-ImplicitCastExpr 0x1f90b6e4e28 <line:71:37, col:39> 'u32':'unsigned int' <LValueToRValue>
    |     `-ParenExpr 0x1f90b6e4e08 <col:37, col:39> 'u32':'unsigned int' lvalue
    |       `-DeclRefExpr 0x1f90b6e4de8 <line:470:21> 'u32':'unsigned int' lvalue Var 0x1f90b6d58d8 'g2' 'u32':'unsigned int'
    `-ParenExpr 0x1f90b6e5008 <line:71:22, col:40> 'u32':'unsigned int'
      `-BinaryOperator 0x1f90b6e4fe8 <col:23, col:39> 'u32':'unsigned int' '='
        |-UnaryOperator 0x1f90b6e4f78 <col:23, col:33> 'u32':'unsigned int' lvalue prefix '*' cannot overflow
        | `-CStyleCastExpr 0x1f90b6e4f50 <col:24, col:33> 'u32 *' <BitCast>
        |   `-ParenExpr 0x1f90b6e4f30 <col:31, col:33> 'unsigned char *':'unsigned char *'
        |     `-BinaryOperator 0x1f90b6e4ee0 <line:471:12, col:18> 'unsigned char *':'unsigned char *' '+'
        |       |-ImplicitCastExpr 0x1f90b6e4ec8 <col:12> 'unsigned char *':'unsigned char *' <LValueToRValue>
        |       | `-DeclRefExpr 0x1f90b6e4e80 <col:12> 'unsigned char *':'unsigned char *' lvalue ParmVar 0x1f90b6d5080 'mac' 'unsigned char *':'unsigned char *'
        |       `-IntegerLiteral 0x1f90b6e4ea0 <col:18> 'int' 12
        `-ImplicitCastExpr 0x1f90b6e4fd0 <line:71:37, col:39> 'u32':'unsigned int' <LValueToRValue>
          `-ParenExpr 0x1f90b6e4fb0 <col:37, col:39> 'u32':'unsigned int' lvalue
            `-DeclRefExpr 0x1f90b6e4f90 <line:471:22> 'u32':'unsigned int' lvalue Var 0x1f90b6d5950 'g3' 'u32':'unsigned int'
