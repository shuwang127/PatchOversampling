TranslationUnitDecl 0x1bffceff208 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1bffceffaa0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x1bffceff7a0 '__int128'
|-TypedefDecl 0x1bffceffb10 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x1bffceff7c0 'unsigned __int128'
|-TypedefDecl 0x1bffceffe48 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x1bffceffc00 'struct __NSConstantString_tag'
|   `-Record 0x1bffceffb68 '__NSConstantString_tag'
|-TypedefDecl 0x1bffceffeb8 <<invalid sloc>> <invalid sloc> implicit size_t 'unsigned long long'
| `-BuiltinType 0x1bffceff3e0 'unsigned long long'
|-TypedefDecl 0x1bffcefff50 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x1bffcefff10 'char *'
|   `-BuiltinType 0x1bffceff2a0 'char'
|-TypedefDecl 0x1bffcefffc0 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x1bffcefff10 'char *'
|   `-BuiltinType 0x1bffceff2a0 'char'
|-FunctionDecl 0x1bffcf000e0 <.//openssl//file_jk/before\crypto\rc4\rc4_skey.c:14:1, line:20:1> line:14:13 RC4_options 'const char *(void)'
| `-CompoundStmt 0x1bffe88ca38 <line:15:1, line:20:1>
|   `-IfStmt 0x1bffe88ca10 <line:16:5, line:19:27> has_else
|     |-OpaqueValueExpr 0x1bffe88c9f8 <<invalid sloc>> '_Bool'
|     |-ReturnStmt 0x1bffe88c930 <line:17:9, col:28>
|     | `-ImplicitCastExpr 0x1bffe88c918 <col:16, col:28> 'const char *' <NoOp>
|     |   `-ImplicitCastExpr 0x1bffe88c900 <col:16, col:28> 'char *' <ArrayToPointerDecay>
|     |     `-ParenExpr 0x1bffe88c8e0 <col:16, col:28> 'char [10]' lvalue
|     |       `-StringLiteral 0x1bffe88c8b8 <col:17> 'char [10]' lvalue "rc4(char)"
|     `-ReturnStmt 0x1bffe88c9e8 <line:19:9, col:27>
|       `-ImplicitCastExpr 0x1bffe88c9d0 <col:16, col:27> 'const char *' <NoOp>
|         `-ImplicitCastExpr 0x1bffe88c9b8 <col:16, col:27> 'char *' <ArrayToPointerDecay>
|           `-ParenExpr 0x1bffe88c998 <col:16, col:27> 'char [9]' lvalue
|             `-StringLiteral 0x1bffe88c978 <col:17> 'char [9]' lvalue "rc4(int)"
`-FunctionDecl 0x1bffe88cca8 <line:31:1, line:58:1> line:31:6 invalid RC4_set_key 'void (int *, int, const unsigned char *)'
  |-ParmVarDecl 0x1bffe88ca90 <col:18, col:27> col:27 invalid key 'int *'
  |-ParmVarDecl 0x1bffe88cb10 <col:32, col:36> col:36 used len 'int'
  |-ParmVarDecl 0x1bffe88cbc0 <col:41, col:62> col:62 used data 'const unsigned char *'
  `-CompoundStmt 0x1bffe88b510 <line:32:1, line:58:1>
    |-DeclStmt 0x1bffe88cdf8 <line:33:5, col:25>
    | `-VarDecl 0x1bffe88cd90 <col:5, col:22> col:22 invalid tmp 'int' register
    |-DeclStmt 0x1bffe88cf28 <line:34:5, col:26>
    | |-VarDecl 0x1bffe88ce28 <col:5, col:18> col:18 used id1 'int' register
    | `-VarDecl 0x1bffe88cea8 <col:5, col:23> col:23 used id2 'int' register
    |-DeclStmt 0x1bffe88cfc0 <line:35:5, col:24>
    | `-VarDecl 0x1bffe88cf58 <col:5, col:23> col:23 invalid d 'int *' register
    |-DeclStmt 0x1bffe88d058 <line:36:5, col:19>
    | `-VarDecl 0x1bffe88cff0 <col:5, col:18> col:18 used i 'unsigned int'
    |-BinaryOperator 0x1bffe88d1a0 <line:41:5, col:17> 'int' '='
    | |-DeclRefExpr 0x1bffe88d0e8 <col:5> 'int' lvalue Var 0x1bffe88ce28 'id1' 'int'
    | `-BinaryOperator 0x1bffe88d180 <col:11, col:17> 'int' '='
    |   |-DeclRefExpr 0x1bffe88d120 <col:11> 'int' lvalue Var 0x1bffe88cea8 'id2' 'int'
    |   `-IntegerLiteral 0x1bffe88d158 <col:17> 'int' 0
    `-ForStmt 0x1bffe88b4d8 <line:52:5, line:57:5>
      |-BinaryOperator 0x1bffe88d3c8 <line:52:10, col:14> 'unsigned int' '='
      | |-DeclRefExpr 0x1bffe88d368 <col:10> 'unsigned int' lvalue Var 0x1bffe88cff0 'i' 'unsigned int'
      | `-ImplicitCastExpr 0x1bffe88d3b0 <col:14> 'unsigned int' <IntegralCast>
      |   `-IntegerLiteral 0x1bffe88d388 <col:14> 'int' 0
      |-<<<NULL>>>
      |-BinaryOperator 0x1bffe88d460 <col:17, col:21> 'int' '<'
      | |-ImplicitCastExpr 0x1bffe88d430 <col:17> 'unsigned int' <LValueToRValue>
      | | `-DeclRefExpr 0x1bffe88d3e8 <col:17> 'unsigned int' lvalue Var 0x1bffe88cff0 'i' 'unsigned int'
      | `-ImplicitCastExpr 0x1bffe88d448 <col:21> 'unsigned int' <IntegralCast>
      |   `-IntegerLiteral 0x1bffe88d408 <col:21> 'int' 256
      |-CompoundAssignOperator 0x1bffe88d4e0 <col:26, col:31> 'unsigned int' '+=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
      | |-DeclRefExpr 0x1bffe88d480 <col:26> 'unsigned int' lvalue Var 0x1bffe88cff0 'i' 'unsigned int'
      | `-ImplicitCastExpr 0x1bffe88d4c8 <col:31> 'unsigned int' <IntegralCast>
      |   `-IntegerLiteral 0x1bffe88d4a0 <col:31> 'int' 4
      `-CompoundStmt 0x1bffe88b488 <col:34, line:57:5>
        |-CompoundStmt 0x1bffe88a8e0 <line:43:22, line:48:29>
        | `-IfStmt 0x1bffe88d7e8 <line:46:17, col:39>
        |   |-BinaryOperator 0x1bffe88d760 <col:21, col:30> 'int' '=='
        |   | |-UnaryOperator 0x1bffe88d6f8 <col:21, col:23> 'int' prefix '++'
        |   | | `-DeclRefExpr 0x1bffe88d6d8 <col:23> 'int' lvalue Var 0x1bffe88ce28 'id1' 'int'
        |   | `-ImplicitCastExpr 0x1bffe88d748 <col:30> 'int' <LValueToRValue>
        |   |   `-DeclRefExpr 0x1bffe88d710 <col:30> 'int' lvalue ParmVar 0x1bffe88cb10 'len' 'int'
        |   `-BinaryOperator 0x1bffe88d7c8 <col:35, col:39> 'int' '='
        |     |-DeclRefExpr 0x1bffe88d780 <col:35> 'int' lvalue Var 0x1bffe88ce28 'id1' 'int'
        |     `-IntegerLiteral 0x1bffe88d7a0 <col:39> 'int' 0
        |-NullStmt 0x1bffe88a8f8 <line:53:26>
        |-CompoundStmt 0x1bffe88acb8 <line:43:22, line:48:29>
        | `-IfStmt 0x1bffe88aba8 <line:46:17, col:39>
        |   |-BinaryOperator 0x1bffe88ab20 <col:21, col:30> 'int' '=='
        |   | |-UnaryOperator 0x1bffe88aad0 <col:21, col:23> 'int' prefix '++'
        |   | | `-DeclRefExpr 0x1bffe88aab0 <col:23> 'int' lvalue Var 0x1bffe88ce28 'id1' 'int'
        |   | `-ImplicitCastExpr 0x1bffe88ab08 <col:30> 'int' <LValueToRValue>
        |   |   `-DeclRefExpr 0x1bffe88aae8 <col:30> 'int' lvalue ParmVar 0x1bffe88cb10 'len' 'int'
        |   `-BinaryOperator 0x1bffe88ab88 <col:35, col:39> 'int' '='
        |     |-DeclRefExpr 0x1bffe88ab40 <col:35> 'int' lvalue Var 0x1bffe88ce28 'id1' 'int'
        |     `-IntegerLiteral 0x1bffe88ab60 <col:39> 'int' 0
        |-NullStmt 0x1bffe88acd0 <line:54:26>
        |-CompoundStmt 0x1bffe88b090 <line:43:22, line:48:29>
        | `-IfStmt 0x1bffe88af80 <line:46:17, col:39>
        |   |-BinaryOperator 0x1bffe88aef8 <col:21, col:30> 'int' '=='
        |   | |-UnaryOperator 0x1bffe88aea8 <col:21, col:23> 'int' prefix '++'
        |   | | `-DeclRefExpr 0x1bffe88ae88 <col:23> 'int' lvalue Var 0x1bffe88ce28 'id1' 'int'
        |   | `-ImplicitCastExpr 0x1bffe88aee0 <col:30> 'int' <LValueToRValue>
        |   |   `-DeclRefExpr 0x1bffe88aec0 <col:30> 'int' lvalue ParmVar 0x1bffe88cb10 'len' 'int'
        |   `-BinaryOperator 0x1bffe88af60 <col:35, col:39> 'int' '='
        |     |-DeclRefExpr 0x1bffe88af18 <col:35> 'int' lvalue Var 0x1bffe88ce28 'id1' 'int'
        |     `-IntegerLiteral 0x1bffe88af38 <col:39> 'int' 0
        |-NullStmt 0x1bffe88b0a8 <line:55:26>
        |-CompoundStmt 0x1bffe88b468 <line:43:22, line:48:29>
        | `-IfStmt 0x1bffe88b358 <line:46:17, col:39>
        |   |-BinaryOperator 0x1bffe88b2d0 <col:21, col:30> 'int' '=='
        |   | |-UnaryOperator 0x1bffe88b280 <col:21, col:23> 'int' prefix '++'
        |   | | `-DeclRefExpr 0x1bffe88b260 <col:23> 'int' lvalue Var 0x1bffe88ce28 'id1' 'int'
        |   | `-ImplicitCastExpr 0x1bffe88b2b8 <col:30> 'int' <LValueToRValue>
        |   |   `-DeclRefExpr 0x1bffe88b298 <col:30> 'int' lvalue ParmVar 0x1bffe88cb10 'len' 'int'
        |   `-BinaryOperator 0x1bffe88b338 <col:35, col:39> 'int' '='
        |     |-DeclRefExpr 0x1bffe88b2f0 <col:35> 'int' lvalue Var 0x1bffe88ce28 'id1' 'int'
        |     `-IntegerLiteral 0x1bffe88b310 <col:39> 'int' 0
        `-NullStmt 0x1bffe88b480 <line:56:26>
