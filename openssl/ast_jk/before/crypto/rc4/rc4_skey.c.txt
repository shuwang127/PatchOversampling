TranslationUnitDecl 0x1781ac18ba8 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1781ac19440 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x1781ac19140 '__int128'
|-TypedefDecl 0x1781ac194b0 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x1781ac19160 'unsigned __int128'
|-TypedefDecl 0x1781ac197e8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x1781ac195a0 'struct __NSConstantString_tag'
|   `-Record 0x1781ac19508 '__NSConstantString_tag'
|-TypedefDecl 0x1781ac19858 <<invalid sloc>> <invalid sloc> implicit size_t 'unsigned long long'
| `-BuiltinType 0x1781ac18d80 'unsigned long long'
|-TypedefDecl 0x1781ac198f0 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x1781ac198b0 'char *'
|   `-BuiltinType 0x1781ac18c40 'char'
|-TypedefDecl 0x1781ac19960 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x1781ac198b0 'char *'
|   `-BuiltinType 0x1781ac18c40 'char'
|-FunctionDecl 0x1781ac19a80 <.//openssl//file_jk/before\crypto\rc4\rc4_skey.c:14:1, line:20:1> line:14:13 RC4_options 'const char *(void)'
| `-CompoundStmt 0x1781c591418 <line:15:1, line:20:1>
|   `-IfStmt 0x1781c5913f0 <line:16:5, line:19:27> has_else
|     |-OpaqueValueExpr 0x1781c5913d8 <<invalid sloc>> '_Bool'
|     |-ReturnStmt 0x1781c591310 <line:17:9, col:28>
|     | `-ImplicitCastExpr 0x1781c5912f8 <col:16, col:28> 'const char *' <NoOp>
|     |   `-ImplicitCastExpr 0x1781c5912e0 <col:16, col:28> 'char *' <ArrayToPointerDecay>
|     |     `-ParenExpr 0x1781c5912c0 <col:16, col:28> 'char [10]' lvalue
|     |       `-StringLiteral 0x1781c591298 <col:17> 'char [10]' lvalue "rc4(char)"
|     `-ReturnStmt 0x1781c5913c8 <line:19:9, col:27>
|       `-ImplicitCastExpr 0x1781c5913b0 <col:16, col:27> 'const char *' <NoOp>
|         `-ImplicitCastExpr 0x1781c591398 <col:16, col:27> 'char *' <ArrayToPointerDecay>
|           `-ParenExpr 0x1781c591378 <col:16, col:27> 'char [9]' lvalue
|             `-StringLiteral 0x1781c591358 <col:17> 'char [9]' lvalue "rc4(int)"
`-FunctionDecl 0x1781c591688 <line:31:1, line:58:1> line:31:6 invalid RC4_set_key 'void (int *, int, const unsigned char *)'
  |-ParmVarDecl 0x1781c591470 <col:18, col:27> col:27 invalid key 'int *'
  |-ParmVarDecl 0x1781c5914f0 <col:32, col:36> col:36 used len 'int'
  |-ParmVarDecl 0x1781c5915a0 <col:41, col:62> col:62 used data 'const unsigned char *'
  `-CompoundStmt 0x1781c593f30 <line:32:1, line:58:1>
    |-DeclStmt 0x1781c5917d8 <line:33:5, col:25>
    | `-VarDecl 0x1781c591770 <col:5, col:22> col:22 invalid tmp 'int' register
    |-DeclStmt 0x1781c591908 <line:34:5, col:26>
    | |-VarDecl 0x1781c591808 <col:5, col:18> col:18 used id1 'int' register
    | `-VarDecl 0x1781c591888 <col:5, col:23> col:23 used id2 'int' register
    |-DeclStmt 0x1781c5919a0 <line:35:5, col:24>
    | `-VarDecl 0x1781c591938 <col:5, col:23> col:23 invalid d 'int *' register
    |-DeclStmt 0x1781c591a38 <line:36:5, col:19>
    | `-VarDecl 0x1781c5919d0 <col:5, col:18> col:18 used i 'unsigned int'
    |-BinaryOperator 0x1781c591b80 <line:41:5, col:17> 'int' '='
    | |-DeclRefExpr 0x1781c591ac8 <col:5> 'int' lvalue Var 0x1781c591808 'id1' 'int'
    | `-BinaryOperator 0x1781c591b60 <col:11, col:17> 'int' '='
    |   |-DeclRefExpr 0x1781c591b00 <col:11> 'int' lvalue Var 0x1781c591888 'id2' 'int'
    |   `-IntegerLiteral 0x1781c591b38 <col:17> 'int' 0
    `-ForStmt 0x1781c593ef8 <line:52:5, line:57:5>
      |-BinaryOperator 0x1781c591da8 <line:52:10, col:14> 'unsigned int' '='
      | |-DeclRefExpr 0x1781c591d48 <col:10> 'unsigned int' lvalue Var 0x1781c5919d0 'i' 'unsigned int'
      | `-ImplicitCastExpr 0x1781c591d90 <col:14> 'unsigned int' <IntegralCast>
      |   `-IntegerLiteral 0x1781c591d68 <col:14> 'int' 0
      |-<<<NULL>>>
      |-BinaryOperator 0x1781c591e40 <col:17, col:21> 'int' '<'
      | |-ImplicitCastExpr 0x1781c591e10 <col:17> 'unsigned int' <LValueToRValue>
      | | `-DeclRefExpr 0x1781c591dc8 <col:17> 'unsigned int' lvalue Var 0x1781c5919d0 'i' 'unsigned int'
      | `-ImplicitCastExpr 0x1781c591e28 <col:21> 'unsigned int' <IntegralCast>
      |   `-IntegerLiteral 0x1781c591de8 <col:21> 'int' 256
      |-CompoundAssignOperator 0x1781c591ec0 <col:26, col:31> 'unsigned int' '+=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
      | |-DeclRefExpr 0x1781c591e60 <col:26> 'unsigned int' lvalue Var 0x1781c5919d0 'i' 'unsigned int'
      | `-ImplicitCastExpr 0x1781c591ea8 <col:31> 'unsigned int' <IntegralCast>
      |   `-IntegerLiteral 0x1781c591e80 <col:31> 'int' 4
      `-CompoundStmt 0x1781c593ea8 <col:34, line:57:5>
        |-CompoundStmt 0x1781c593300 <line:43:22, line:48:29>
        | `-IfStmt 0x1781c5921c8 <line:46:17, col:39>
        |   |-BinaryOperator 0x1781c592140 <col:21, col:30> 'int' '=='
        |   | |-UnaryOperator 0x1781c5920d8 <col:21, col:23> 'int' prefix '++'
        |   | | `-DeclRefExpr 0x1781c5920b8 <col:23> 'int' lvalue Var 0x1781c591808 'id1' 'int'
        |   | `-ImplicitCastExpr 0x1781c592128 <col:30> 'int' <LValueToRValue>
        |   |   `-DeclRefExpr 0x1781c5920f0 <col:30> 'int' lvalue ParmVar 0x1781c5914f0 'len' 'int'
        |   `-BinaryOperator 0x1781c5921a8 <col:35, col:39> 'int' '='
        |     |-DeclRefExpr 0x1781c592160 <col:35> 'int' lvalue Var 0x1781c591808 'id1' 'int'
        |     `-IntegerLiteral 0x1781c592180 <col:39> 'int' 0
        |-NullStmt 0x1781c593318 <line:53:26>
        |-CompoundStmt 0x1781c5936d8 <line:43:22, line:48:29>
        | `-IfStmt 0x1781c5935c8 <line:46:17, col:39>
        |   |-BinaryOperator 0x1781c593540 <col:21, col:30> 'int' '=='
        |   | |-UnaryOperator 0x1781c5934f0 <col:21, col:23> 'int' prefix '++'
        |   | | `-DeclRefExpr 0x1781c5934d0 <col:23> 'int' lvalue Var 0x1781c591808 'id1' 'int'
        |   | `-ImplicitCastExpr 0x1781c593528 <col:30> 'int' <LValueToRValue>
        |   |   `-DeclRefExpr 0x1781c593508 <col:30> 'int' lvalue ParmVar 0x1781c5914f0 'len' 'int'
        |   `-BinaryOperator 0x1781c5935a8 <col:35, col:39> 'int' '='
        |     |-DeclRefExpr 0x1781c593560 <col:35> 'int' lvalue Var 0x1781c591808 'id1' 'int'
        |     `-IntegerLiteral 0x1781c593580 <col:39> 'int' 0
        |-NullStmt 0x1781c5936f0 <line:54:26>
        |-CompoundStmt 0x1781c593ab0 <line:43:22, line:48:29>
        | `-IfStmt 0x1781c5939a0 <line:46:17, col:39>
        |   |-BinaryOperator 0x1781c593918 <col:21, col:30> 'int' '=='
        |   | |-UnaryOperator 0x1781c5938c8 <col:21, col:23> 'int' prefix '++'
        |   | | `-DeclRefExpr 0x1781c5938a8 <col:23> 'int' lvalue Var 0x1781c591808 'id1' 'int'
        |   | `-ImplicitCastExpr 0x1781c593900 <col:30> 'int' <LValueToRValue>
        |   |   `-DeclRefExpr 0x1781c5938e0 <col:30> 'int' lvalue ParmVar 0x1781c5914f0 'len' 'int'
        |   `-BinaryOperator 0x1781c593980 <col:35, col:39> 'int' '='
        |     |-DeclRefExpr 0x1781c593938 <col:35> 'int' lvalue Var 0x1781c591808 'id1' 'int'
        |     `-IntegerLiteral 0x1781c593958 <col:39> 'int' 0
        |-NullStmt 0x1781c593ac8 <line:55:26>
        |-CompoundStmt 0x1781c593e88 <line:43:22, line:48:29>
        | `-IfStmt 0x1781c593d78 <line:46:17, col:39>
        |   |-BinaryOperator 0x1781c593cf0 <col:21, col:30> 'int' '=='
        |   | |-UnaryOperator 0x1781c593ca0 <col:21, col:23> 'int' prefix '++'
        |   | | `-DeclRefExpr 0x1781c593c80 <col:23> 'int' lvalue Var 0x1781c591808 'id1' 'int'
        |   | `-ImplicitCastExpr 0x1781c593cd8 <col:30> 'int' <LValueToRValue>
        |   |   `-DeclRefExpr 0x1781c593cb8 <col:30> 'int' lvalue ParmVar 0x1781c5914f0 'len' 'int'
        |   `-BinaryOperator 0x1781c593d58 <col:35, col:39> 'int' '='
        |     |-DeclRefExpr 0x1781c593d10 <col:35> 'int' lvalue Var 0x1781c591808 'id1' 'int'
        |     `-IntegerLiteral 0x1781c593d30 <col:39> 'int' 0
        `-NullStmt 0x1781c593ea0 <line:56:26>
