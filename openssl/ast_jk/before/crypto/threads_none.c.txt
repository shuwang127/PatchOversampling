TranslationUnitDecl 0x1c0cd134ad8 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1c0cd135370 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x1c0cd135070 '__int128'
|-TypedefDecl 0x1c0cd1353e0 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x1c0cd135090 'unsigned __int128'
|-TypedefDecl 0x1c0cd135718 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x1c0cd1354d0 'struct __NSConstantString_tag'
|   `-Record 0x1c0cd135438 '__NSConstantString_tag'
|-TypedefDecl 0x1c0cd135788 <<invalid sloc>> <invalid sloc> implicit size_t 'unsigned long long'
| `-BuiltinType 0x1c0cd134cb0 'unsigned long long'
|-TypedefDecl 0x1c0cd135820 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x1c0cd1357e0 'char *'
|   `-BuiltinType 0x1c0cd134b70 'char'
|-TypedefDecl 0x1c0cd135890 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x1c0cd1357e0 'char *'
|   `-BuiltinType 0x1c0cd134b70 'char'
|-FunctionDecl 0x1c0cd135a00 <.//openssl//file_jk/before\crypto\threads_none.c:14:1, line:23:1> line:14:16 invalid CRYPTO_THREAD_lock_new 'int *(void)'
| `-CompoundStmt 0x1c0ceb0ed80 <line:15:1, line:23:1>
|-FunctionDecl 0x1c0ceb0ee70 <line:25:1, line:29:1> line:25:5 invalid CRYPTO_THREAD_read_lock 'int (int *)'
| |-ParmVarDecl 0x1c0ceb0eda8 <col:29, col:44> col:44 invalid lock 'int *'
| `-CompoundStmt 0x1c0ceb0f0a0 <line:26:1, line:29:1>
|   `-ReturnStmt 0x1c0ceb0f090 <line:28:5, col:12>
|     `-IntegerLiteral 0x1c0ceb0f068 <col:12> 'int' 1
|-FunctionDecl 0x1c0ceb0f168 <line:31:1, line:35:1> line:31:5 invalid CRYPTO_THREAD_write_lock 'int (int *)'
| |-ParmVarDecl 0x1c0ceb0f0d0 <col:30, col:45> col:45 invalid lock 'int *'
| `-CompoundStmt 0x1c0ceb0f2a8 <line:32:1, line:35:1>
|   `-ReturnStmt 0x1c0ceb0f298 <line:34:5, col:12>
|     `-IntegerLiteral 0x1c0ceb0f270 <col:12> 'int' 1
|-FunctionDecl 0x1c0ceb0f370 <line:37:1, line:41:1> line:37:5 invalid CRYPTO_THREAD_unlock 'int (int *)'
| |-ParmVarDecl 0x1c0ceb0f2d8 <col:26, col:41> col:41 invalid lock 'int *'
| `-CompoundStmt 0x1c0ceb0f4b0 <line:38:1, line:41:1>
|   `-ReturnStmt 0x1c0ceb0f4a0 <line:40:5, col:12>
|     `-IntegerLiteral 0x1c0ceb0f478 <col:12> 'int' 1
|-FunctionDecl 0x1c0ceb0f5a8 <line:43:1, line:51:1> line:43:6 invalid CRYPTO_THREAD_lock_free 'void (int *)'
| |-ParmVarDecl 0x1c0ceb0f4e0 <col:30, col:45> col:45 invalid lock 'int *'
| `-CompoundStmt 0x1c0ceb0f7f0 <col:51, line:51:1>
|   |-IfStmt 0x1c0ceb0f690 <line:44:5, line:45:9>
|   | |-OpaqueValueExpr 0x1c0ceb0f678 <<invalid sloc>> '_Bool'
|   | `-ReturnStmt 0x1c0ceb0f668 <col:9>
|   `-ReturnStmt 0x1c0ceb0f7e0 <line:50:5>
|-FunctionDecl 0x1c0ceb0fb40 <line:53:1, line:62:1> line:53:5 invalid CRYPTO_THREAD_run_once 'int (int *, void (*)(void))'
| |-ParmVarDecl 0x1c0ceb0f828 <col:28, col:41> col:41 invalid once 'int *'
| |-ParmVarDecl 0x1c0ceb0f9f8 <col:47, col:64> col:54 used init 'void (*)(void)'
| `-CompoundStmt 0x1c0ceb0fd68 <line:54:1, line:62:1>
|   |-IfStmt 0x1c0ceb0fc80 <line:55:5, line:56:16>
|   | |-OpaqueValueExpr 0x1c0ceb0fc68 <<invalid sloc>> '_Bool'
|   | `-ReturnStmt 0x1c0ceb0fc58 <col:9, col:16>
|   |   `-IntegerLiteral 0x1c0ceb0fc30 <col:16> 'int' 1
|   |-CallExpr 0x1c0ceb0fce8 <line:58:5, col:10> 'void'
|   | `-ImplicitCastExpr 0x1c0ceb0fcd0 <col:5> 'void (*)(void)' <LValueToRValue>
|   |   `-DeclRefExpr 0x1c0ceb0fc98 <col:5> 'void (*)(void)' lvalue ParmVar 0x1c0ceb0f9f8 'init' 'void (*)(void)'
|   `-ReturnStmt 0x1c0ceb0fd58 <line:61:5, col:12>
|     `-IntegerLiteral 0x1c0ceb0fd30 <col:12> 'int' 1
|-VarDecl 0x1c0ceb0fe30 <line:66:1, col:70> col:14 used thread_local_storage 'void *[256]' static
|-FunctionDecl 0x1c0ceb101c0 <line:68:1, line:80:1> line:68:5 invalid CRYPTO_THREAD_init_local 'int (int *, void (*)(void *))'
| |-ParmVarDecl 0x1c0ceb0fec8 <col:30, col:51> col:51 invalid key 'int *'
| |-ParmVarDecl 0x1c0ceb100a0 <col:56, col:78> col:63 cleanup 'void (*)(void *)'
| `-CompoundStmt 0x1c0ceb104f0 <line:69:1, line:80:1>
|   |-DeclStmt 0x1c0ceb10348 <line:70:5, col:45>
|   | `-VarDecl 0x1c0ceb102a0 <col:5, col:44> col:25 used thread_local_key 'unsigned int' static cinit
|   |   `-ImplicitCastExpr 0x1c0ceb10330 <col:44> 'unsigned int' <IntegralCast>
|   |     `-IntegerLiteral 0x1c0ceb10308 <col:44> 'int' 0
|   |-IfStmt 0x1c0ceb10448 <line:72:5, line:73:16>
|   | |-BinaryOperator 0x1c0ceb103f0 <line:72:9, line:64:45> 'int' '>='
|   | | |-ImplicitCastExpr 0x1c0ceb103c0 <line:72:9> 'unsigned int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1c0ceb10360 <col:9> 'unsigned int' lvalue Var 0x1c0ceb102a0 'thread_local_key' 'unsigned int'
|   | | `-ImplicitCastExpr 0x1c0ceb103d8 <line:64:45> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x1c0ceb10398 <col:45> 'int' 256
|   | `-ReturnStmt 0x1c0ceb10438 <line:73:9, col:16>
|   |   `-IntegerLiteral 0x1c0ceb10410 <col:16> 'int' 0
|   `-ReturnStmt 0x1c0ceb104e0 <line:79:5, col:12>
|     `-IntegerLiteral 0x1c0ceb104b8 <col:12> 'int' 1
|-FunctionDecl 0x1c0ceb10600 <line:82:1, line:88:1> line:82:7 invalid CRYPTO_THREAD_get_local 'void *(int *)'
| |-ParmVarDecl 0x1c0ceb10530 <col:31, col:52> col:52 invalid key 'int *'
| `-CompoundStmt 0x1c0ceb10708 <line:83:1, line:88:1>
|-FunctionDecl 0x1c0ceb10890 <line:90:1, line:98:1> line:90:5 invalid CRYPTO_THREAD_set_local 'int (int *, void *)'
| |-ParmVarDecl 0x1c0ceb10730 <col:29, col:50> col:50 invalid key 'int *'
| |-ParmVarDecl 0x1c0ceb107b0 <col:55, col:61> col:61 used val 'void *'
| `-CompoundStmt 0x1c0ceb10a78 <line:91:1, line:98:1>
|   |-IfStmt 0x1c0ceb109d0 <line:92:5, line:93:16>
|   | |-OpaqueValueExpr 0x1c0ceb109b8 <<invalid sloc>> '_Bool'
|   | `-ReturnStmt 0x1c0ceb109a8 <col:9, col:16>
|   |   `-IntegerLiteral 0x1c0ceb10980 <col:16> 'int' 0
|   `-ReturnStmt 0x1c0ceb10a68 <line:97:5, col:12>
|     `-IntegerLiteral 0x1c0ceb10a40 <col:12> 'int' 1
|-FunctionDecl 0x1c0ceb0cb40 <line:100:1, line:104:1> line:100:5 invalid CRYPTO_THREAD_cleanup_local 'int (int *)'
| |-ParmVarDecl 0x1c0ceb10ab0 <col:33, col:54> col:54 invalid key 'int *'
| `-CompoundStmt 0x1c0ceb0cca8 <line:101:1, line:104:1>
|   `-ReturnStmt 0x1c0ceb0cc98 <line:103:5, col:12>
|     `-IntegerLiteral 0x1c0ceb0cc70 <col:12> 'int' 1
|-FunctionDecl 0x1c0ceb0cd90 <line:106:1, line:109:1> line:106:18 invalid CRYPTO_THREAD_get_current_id 'int (void)'
| `-CompoundStmt 0x1c0ceb0ce80 <line:107:1, line:109:1>
|   `-ReturnStmt 0x1c0ceb0ce70 <line:108:5, col:12>
|     `-IntegerLiteral 0x1c0ceb0ce48 <col:12> 'int' 0
|-FunctionDecl 0x1c0ceb0d010 <line:111:1, line:114:1> line:111:5 invalid CRYPTO_THREAD_compare_id 'int (int, int)'
| |-ParmVarDecl 0x1c0ceb0ceb0 <col:30, col:47> col:47 invalid a 'int'
| |-ParmVarDecl 0x1c0ceb0cf30 <col:50, col:67> col:67 invalid b 'int'
| `-CompoundStmt 0x1c0ceb0d0d8 <line:112:1, line:114:1>
`-FunctionDecl 0x1c0ceb0d380 <line:116:1, line:122:1> line:116:5 invalid CRYPTO_atomic_add 'int (int *, int, int *, int *)'
  |-ParmVarDecl 0x1c0ceb0d100 <col:23, col:28> col:28 used val 'int *'
  |-ParmVarDecl 0x1c0ceb0d180 <col:33, col:37> col:37 used amount 'int'
  |-ParmVarDecl 0x1c0ceb0d200 <col:45, col:50> col:50 used ret 'int *'
  |-ParmVarDecl 0x1c0ceb0d280 <col:55, col:70> col:70 invalid lock 'int *'
  `-CompoundStmt 0x1c0ceb0d668 <line:117:1, line:122:1>
    |-CompoundAssignOperator 0x1c0ceb0d510 <line:118:5, col:13> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
    | |-UnaryOperator 0x1c0ceb0d4a8 <col:5, col:6> 'int' lvalue prefix '*' cannot overflow
    | | `-ImplicitCastExpr 0x1c0ceb0d490 <col:6> 'int *' <LValueToRValue>
    | |   `-DeclRefExpr 0x1c0ceb0d458 <col:6> 'int *' lvalue ParmVar 0x1c0ceb0d100 'val' 'int *'
    | `-ImplicitCastExpr 0x1c0ceb0d4f8 <col:13> 'int' <LValueToRValue>
    |   `-DeclRefExpr 0x1c0ceb0d4c0 <col:13> 'int' lvalue ParmVar 0x1c0ceb0d180 'amount' 'int'
    |-BinaryOperator 0x1c0ceb0d610 <line:119:5, col:14> 'int' '='
    | |-UnaryOperator 0x1c0ceb0d590 <col:5, col:6> 'int' lvalue prefix '*' cannot overflow
    | | `-ImplicitCastExpr 0x1c0ceb0d578 <col:6> 'int *' <LValueToRValue>
    | |   `-DeclRefExpr 0x1c0ceb0d540 <col:6> 'int *' lvalue ParmVar 0x1c0ceb0d200 'ret' 'int *'
    | `-ImplicitCastExpr 0x1c0ceb0d5f8 <col:13, col:14> 'int' <LValueToRValue>
    |   `-UnaryOperator 0x1c0ceb0d5e0 <col:13, col:14> 'int' lvalue prefix '*' cannot overflow
    |     `-ImplicitCastExpr 0x1c0ceb0d5c8 <col:14> 'int *' <LValueToRValue>
    |       `-DeclRefExpr 0x1c0ceb0d5a8 <col:14> 'int *' lvalue ParmVar 0x1c0ceb0d100 'val' 'int *'
    `-ReturnStmt 0x1c0ceb0d658 <line:121:5, col:12>
      `-IntegerLiteral 0x1c0ceb0d630 <col:12> 'int' 1
