TranslationUnitDecl 0x1ea8b19fa88 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1ea8b1a0320 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x1ea8b1a0020 '__int128'
|-TypedefDecl 0x1ea8b1a0390 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x1ea8b1a0040 'unsigned __int128'
|-TypedefDecl 0x1ea8b1a06c8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x1ea8b1a0480 'struct __NSConstantString_tag'
|   `-Record 0x1ea8b1a03e8 '__NSConstantString_tag'
|-TypedefDecl 0x1ea8b1a0738 <<invalid sloc>> <invalid sloc> implicit size_t 'unsigned long long'
| `-BuiltinType 0x1ea8b19fc60 'unsigned long long'
|-TypedefDecl 0x1ea8b1a07d0 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x1ea8b1a0790 'char *'
|   `-BuiltinType 0x1ea8b19fb20 'char'
|-TypedefDecl 0x1ea8b1a0840 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x1ea8b1a0790 'char *'
|   `-BuiltinType 0x1ea8b19fb20 'char'
`-FunctionDecl 0x1ea8b2027a0 <.//openssl//file_jk/before\demos\cms\cms_denc.c:18:1, line:97:1> line:18:5 main 'int (int, char **)'
  |-ParmVarDecl 0x1ea8b1a08b0 <col:10, col:14> col:14 argc 'int'
  |-ParmVarDecl 0x1ea8b1a0960 <col:20, col:27> col:27 argv 'char **'
  `-CompoundStmt 0x1ea8b20b830 <line:19:1, line:97:1>
    |-DeclStmt 0x1ea8b202a90 <line:24:5, col:16>
    | `-VarDecl 0x1ea8b202a00 <col:5, col:15> col:9 used ret 'int' cinit
    |   `-IntegerLiteral 0x1ea8b202a68 <col:15> 'int' 1
    |-DeclStmt 0x1ea8b202b28 <line:26:5, col:42>
    | `-VarDecl 0x1ea8b202ac0 <col:5, col:9> col:9 used flags 'int'
    |-CallExpr 0x1ea8b202c90 <line:28:5, col:32> 'int'
    | `-ImplicitCastExpr 0x1ea8b202c78 <col:5> 'int (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x1ea8b202c30 <col:5> 'int ()' Function 0x1ea8b202b68 'OpenSSL_add_all_algorithms' 'int ()'
    |-CallExpr 0x1ea8b202dd8 <line:29:5, col:29> 'int'
    | `-ImplicitCastExpr 0x1ea8b202dc0 <col:5> 'int (*)()' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x1ea8b202da0 <col:5> 'int ()' Function 0x1ea8b202cd8 'ERR_load_crypto_strings' 'int ()'
    |-IfStmt 0x1ea8b2030c0 <line:34:5, line:35:14>
    | |-OpaqueValueExpr 0x1ea8b2030a8 <<invalid sloc>> '_Bool'
    | `-GotoStmt 0x1ea8b203090 <col:9, col:14> 'err' 0x1ea8b203040
    |-IfStmt 0x1ea8b203240 <line:39:5, line:40:14>
    | |-OpaqueValueExpr 0x1ea8b203228 <<invalid sloc>> '_Bool'
    | `-GotoStmt 0x1ea8b203210 <col:9, col:14> 'err' 0x1ea8b203040
    |-IfStmt 0x1ea8b2034e0 <line:45:5, line:46:14>
    | |-OpaqueValueExpr 0x1ea8b2034c8 <<invalid sloc>> '_Bool'
    | `-GotoStmt 0x1ea8b2034b0 <col:9, col:14> 'err' 0x1ea8b203040
    |-IfStmt 0x1ea8b203760 <line:60:5, line:61:14>
    | |-OpaqueValueExpr 0x1ea8b203748 <<invalid sloc>> '_Bool'
    | `-GotoStmt 0x1ea8b203730 <col:9, col:14> 'err' 0x1ea8b203040
    |-IfStmt 0x1ea8b207a88 <line:66:5, line:67:14>
    | |-OpaqueValueExpr 0x1ea8b207a70 <<invalid sloc>> '_Bool'
    | `-GotoStmt 0x1ea8b207a58 <col:9, col:14> 'err' 0x1ea8b203040
    |-IfStmt 0x1ea8b207bb0 <line:70:5, line:71:14>
    | |-OpaqueValueExpr 0x1ea8b207b98 <<invalid sloc>> '_Bool'
    | `-GotoStmt 0x1ea8b207b80 <col:9, col:14> 'err' 0x1ea8b203040
    |-IfStmt 0x1ea8b207d28 <line:73:5, line:74:14>
    | |-OpaqueValueExpr 0x1ea8b207d10 <<invalid sloc>> '_Bool'
    | `-GotoStmt 0x1ea8b207cf8 <col:9, col:14> 'err' 0x1ea8b203040
    |-IfStmt 0x1ea8b207e80 <line:77:5, line:78:14>
    | |-OpaqueValueExpr 0x1ea8b207e68 <<invalid sloc>> '_Bool'
    | `-GotoStmt 0x1ea8b207e50 <col:9, col:14> 'err' 0x1ea8b203040
    |-BinaryOperator 0x1ea8b207ef8 <line:80:5, col:11> 'int' '='
    | |-DeclRefExpr 0x1ea8b207e98 <col:5> 'int' lvalue Var 0x1ea8b202a00 'ret' 'int'
    | `-IntegerLiteral 0x1ea8b207ed0 <col:11> 'int' 0
    |-LabelStmt 0x1ea8b208270 <line:82:2, line:87:5> 'err'
    | `-IfStmt 0x1ea8b208258 <line:84:5, line:87:5>
    |   |-ImplicitCastExpr 0x1ea8b207f38 <line:84:9> 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x1ea8b207f18 <col:9> 'int' lvalue Var 0x1ea8b202a00 'ret' 'int'
    |   `-CompoundStmt 0x1ea8b208248 <col:14, line:87:5>
    `-ReturnStmt 0x1ea8b208780 <line:96:5, col:12>
      `-ImplicitCastExpr 0x1ea8b208768 <col:12> 'int' <LValueToRValue>
        `-DeclRefExpr 0x1ea8b208748 <col:12> 'int' lvalue Var 0x1ea8b202a00 'ret' 'int'
