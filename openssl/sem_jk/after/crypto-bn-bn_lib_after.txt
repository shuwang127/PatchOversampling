TranslationUnitDecl 0x55edf94726c8 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x55edf9472c40 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x55edf9472960 '__int128'
|-TypedefDecl 0x55edf9472cb0 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x55edf9472980 'unsigned __int128'
|-TypedefDecl 0x55edf9472fa8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x55edf9472db0 'struct __NSConstantString_tag'
|   `-Record 0x55edf9472d08 '__NSConstantString_tag'
|-TypedefDecl 0x55edf9473040 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x55edf9473000 'char *'
|   `-BuiltinType 0x55edf9472760 'char'
|-TypedefDecl 0x55edf9473328 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x55edf94732d0 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x55edf9473140 'struct __va_list_tag'
|     `-Record 0x55edf9473098 '__va_list_tag'
|-FunctionDecl 0x55edf94ea4c0 </usr/include/assert.h:69:1, line:71:43> line:69:13 used __assert_fail 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' extern
| |-ParmVarDecl 0x55edf94ea1b0 <col:28, col:40> col:40 __assertion 'const char *'
| |-ParmVarDecl 0x55edf94ea228 <col:53, col:65> col:65 __file 'const char *'
| |-ParmVarDecl 0x55edf94ea2a0 <line:70:7, col:20> col:20 __line 'unsigned int'
| |-ParmVarDecl 0x55edf94ea318 <col:28, col:40> col:40 __function 'const char *'
| `-NoThrowAttr 0x55edf94ea580 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x55edf94ea940 </usr/include/assert.h:74:1, line:76:43> line:74:13 __assert_perror_fail 'void (int, const char *, unsigned int, const char *) __attribute__((noreturn))' extern
| |-ParmVarDecl 0x55edf94ea638 <col:35, col:39> col:39 __errnum 'int'
| |-ParmVarDecl 0x55edf94ea6b0 <col:49, col:61> col:61 __file 'const char *'
| |-ParmVarDecl 0x55edf94ea728 <line:75:7, col:20> col:20 __line 'unsigned int'
| |-ParmVarDecl 0x55edf94ea7a0 <col:28, col:40> col:40 __function 'const char *'
| `-NoThrowAttr 0x55edf94eaa00 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x55edf94eace0 </usr/include/assert.h:81:1, line:82:43> line:81:13 __assert 'void (const char *, const char *, int) __attribute__((noreturn))' extern
| |-ParmVarDecl 0x55edf94eaa78 <col:23, col:35> col:35 __assertion 'const char *'
| |-ParmVarDecl 0x55edf94eaaf0 <col:48, col:60> col:60 __file 'const char *'
| |-ParmVarDecl 0x55edf94eab68 <col:68, col:72> col:72 __line 'int'
| `-NoThrowAttr 0x55edf94ead98 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-VarDecl 0x55edf94eae10 <crypto-bn-bn_lib_after.c:29:1, col:28> col:12 used bn_limit_bits 'int' static cinit
| `-IntegerLiteral 0x55edf94eae70 <col:28> 'int' 0
|-VarDecl 0x55edf94eaec0 <line:30:1, col:27> col:12 used bn_limit_num 'int' static cinit
| `-IntegerLiteral 0x55edf94eaf20 <col:27> 'int' 8
|-VarDecl 0x55edf94eaf70 <line:31:1, col:32> col:12 used bn_limit_bits_low 'int' static cinit
| `-IntegerLiteral 0x55edf94eafd0 <col:32> 'int' 0
|-VarDecl 0x55edf94eb020 <line:32:1, col:31> col:12 used bn_limit_num_low 'int' static cinit
| `-IntegerLiteral 0x55edf94eb080 <col:31> 'int' 8
|-VarDecl 0x55edf94eb0d0 <line:33:1, col:33> col:12 used bn_limit_bits_high 'int' static cinit
| `-IntegerLiteral 0x55edf94eb130 <col:33> 'int' 0
|-VarDecl 0x55edf951db40 <line:34:1, col:32> col:12 used bn_limit_num_high 'int' static cinit
| `-IntegerLiteral 0x55edf951dba0 <col:32> 'int' 8
|-VarDecl 0x55edf951dbf0 <line:35:1, col:33> col:12 used bn_limit_bits_mont 'int' static cinit
| `-IntegerLiteral 0x55edf951dc50 <col:33> 'int' 0
|-VarDecl 0x55edf951dca0 <line:36:1, col:32> col:12 used bn_limit_num_mont 'int' static cinit
| `-IntegerLiteral 0x55edf951dd00 <col:32> 'int' 8
|-FunctionDecl 0x55edf951e010 <line:38:1, line:64:1> line:38:6 BN_set_params 'void (int, int, int, int)'
| |-ParmVarDecl 0x55edf951dd50 <col:20, col:24> col:24 used mult 'int'
| |-ParmVarDecl 0x55edf951ddc8 <col:30, col:34> col:34 used high 'int'
| |-ParmVarDecl 0x55edf951de40 <col:40, col:44> col:44 used low 'int'
| |-ParmVarDecl 0x55edf951deb8 <col:49, col:53> col:53 used mont 'int'
| `-CompoundStmt 0x55edf9520f78 <line:39:1, line:64:1>
|   |-IfStmt 0x55edf951e670 <line:40:5, line:45:5>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x55edf951e148 <line:40:9, col:17> 'int' '>='
|   | | |-ImplicitCastExpr 0x55edf951e130 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x55edf951e0e8 <col:9> 'int' lvalue ParmVar 0x55edf951dd50 'mult' 'int'
|   | | `-IntegerLiteral 0x55edf951e110 <col:17> 'int' 0
|   | |-CompoundStmt 0x55edf951e648 <col:20, line:45:5>
|   | | |-IfStmt 0x55edf951e4a8 <line:41:9, line:42:38>
|   | | | |-<<<NULL>>>
|   | | | |-<<<NULL>>>
|   | | | |-BinaryOperator 0x55edf951e320 <line:41:13, col:45> 'int' '>'
|   | | | | |-ImplicitCastExpr 0x55edf951e308 <col:13> 'int' <LValueToRValue>
|   | | | | | `-DeclRefExpr 0x55edf951e170 <col:13> 'int' lvalue ParmVar 0x55edf951dd50 'mult' 'int'
|   | | | | `-BinaryOperator 0x55edf951e2e0 <col:20, col:45> 'int' '-'
|   | | | |   |-CStyleCastExpr 0x55edf951e298 <col:20, col:41> 'int' <IntegralCast>
|   | | | |   | `-ParenExpr 0x55edf951e278 <col:25, col:41> 'unsigned long'
|   | | | |   |   `-BinaryOperator 0x55edf951e208 <col:26, col:40> 'unsigned long' '*'
|   | | | |   |     |-UnaryExprOrTypeTraitExpr 0x55edf951e1b0 <col:26, col:36> 'unsigned long' sizeof 'int'
|   | | | |   |     `-ImplicitCastExpr 0x55edf951e1f0 <col:40> 'unsigned long' <IntegralCast>
|   | | | |   |       `-IntegerLiteral 0x55edf951e1d0 <col:40> 'int' 8
|   | | | |   `-IntegerLiteral 0x55edf951e2c0 <col:45> 'int' 1
|   | | | |-BinaryOperator 0x55edf951e480 <line:42:13, col:38> 'int' '='
|   | | | | |-DeclRefExpr 0x55edf951e348 <col:13> 'int' lvalue ParmVar 0x55edf951dd50 'mult' 'int'
|   | | | | `-ImplicitCastExpr 0x55edf951e468 <col:20, col:38> 'int' <IntegralCast>
|   | | | |   `-BinaryOperator 0x55edf951e440 <col:20, col:38> 'unsigned long' '-'
|   | | | |     |-BinaryOperator 0x55edf951e3e0 <col:20, col:34> 'unsigned long' '*'
|   | | | |     | |-UnaryExprOrTypeTraitExpr 0x55edf951e388 <col:20, col:30> 'unsigned long' sizeof 'int'
|   | | | |     | `-ImplicitCastExpr 0x55edf951e3c8 <col:34> 'unsigned long' <IntegralCast>
|   | | | |     |   `-IntegerLiteral 0x55edf951e3a8 <col:34> 'int' 8
|   | | | |     `-ImplicitCastExpr 0x55edf951e428 <col:38> 'unsigned long' <IntegralCast>
|   | | | |       `-IntegerLiteral 0x55edf951e408 <col:38> 'int' 1
|   | | | `-<<<NULL>>>
|   | | |-BinaryOperator 0x55edf951e548 <line:43:9, col:25> 'int' '='
|   | | | |-DeclRefExpr 0x55edf951e4e0 <col:9> 'int' lvalue Var 0x55edf94eae10 'bn_limit_bits' 'int'
|   | | | `-ImplicitCastExpr 0x55edf951e530 <col:25> 'int' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x55edf951e508 <col:25> 'int' lvalue ParmVar 0x55edf951dd50 'mult' 'int'
|   | | `-BinaryOperator 0x55edf951e620 <line:44:9, col:29> 'int' '='
|   | |   |-DeclRefExpr 0x55edf951e570 <col:9> 'int' lvalue Var 0x55edf94eaec0 'bn_limit_num' 'int'
|   | |   `-BinaryOperator 0x55edf951e5f8 <col:24, col:29> 'int' '<<'
|   | |     |-IntegerLiteral 0x55edf951e598 <col:24> 'int' 1
|   | |     `-ImplicitCastExpr 0x55edf951e5e0 <col:29> 'int' <LValueToRValue>
|   | |       `-DeclRefExpr 0x55edf951e5b8 <col:29> 'int' lvalue ParmVar 0x55edf951dd50 'mult' 'int'
|   | `-<<<NULL>>>
|   |-IfStmt 0x55edf95203c0 <line:46:5, line:51:5>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x55edf951e708 <line:46:9, col:17> 'int' '>='
|   | | |-ImplicitCastExpr 0x55edf951e6f0 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x55edf951e6a8 <col:9> 'int' lvalue ParmVar 0x55edf951ddc8 'high' 'int'
|   | | `-IntegerLiteral 0x55edf951e6d0 <col:17> 'int' 0
|   | |-CompoundStmt 0x55edf9520398 <col:20, line:51:5>
|   | | |-IfStmt 0x55edf951ea68 <line:47:9, line:48:38>
|   | | | |-<<<NULL>>>
|   | | | |-<<<NULL>>>
|   | | | |-BinaryOperator 0x55edf951e8e0 <line:47:13, col:45> 'int' '>'
|   | | | | |-ImplicitCastExpr 0x55edf951e8c8 <col:13> 'int' <LValueToRValue>
|   | | | | | `-DeclRefExpr 0x55edf951e730 <col:13> 'int' lvalue ParmVar 0x55edf951ddc8 'high' 'int'
|   | | | | `-BinaryOperator 0x55edf951e8a0 <col:20, col:45> 'int' '-'
|   | | | |   |-CStyleCastExpr 0x55edf951e858 <col:20, col:41> 'int' <IntegralCast>
|   | | | |   | `-ParenExpr 0x55edf951e838 <col:25, col:41> 'unsigned long'
|   | | | |   |   `-BinaryOperator 0x55edf951e7c8 <col:26, col:40> 'unsigned long' '*'
|   | | | |   |     |-UnaryExprOrTypeTraitExpr 0x55edf951e770 <col:26, col:36> 'unsigned long' sizeof 'int'
|   | | | |   |     `-ImplicitCastExpr 0x55edf951e7b0 <col:40> 'unsigned long' <IntegralCast>
|   | | | |   |       `-IntegerLiteral 0x55edf951e790 <col:40> 'int' 8
|   | | | |   `-IntegerLiteral 0x55edf951e880 <col:45> 'int' 1
|   | | | |-BinaryOperator 0x55edf951ea40 <line:48:13, col:38> 'int' '='
|   | | | | |-DeclRefExpr 0x55edf951e908 <col:13> 'int' lvalue ParmVar 0x55edf951ddc8 'high' 'int'
|   | | | | `-ImplicitCastExpr 0x55edf951ea28 <col:20, col:38> 'int' <IntegralCast>
|   | | | |   `-BinaryOperator 0x55edf951ea00 <col:20, col:38> 'unsigned long' '-'
|   | | | |     |-BinaryOperator 0x55edf951e9a0 <col:20, col:34> 'unsigned long' '*'
|   | | | |     | |-UnaryExprOrTypeTraitExpr 0x55edf951e948 <col:20, col:30> 'unsigned long' sizeof 'int'
|   | | | |     | `-ImplicitCastExpr 0x55edf951e988 <col:34> 'unsigned long' <IntegralCast>
|   | | | |     |   `-IntegerLiteral 0x55edf951e968 <col:34> 'int' 8
|   | | | |     `-ImplicitCastExpr 0x55edf951e9e8 <col:38> 'unsigned long' <IntegralCast>
|   | | | |       `-IntegerLiteral 0x55edf951e9c8 <col:38> 'int' 1
|   | | | `-<<<NULL>>>
|   | | |-BinaryOperator 0x55edf951eb08 <line:49:9, col:30> 'int' '='
|   | | | |-DeclRefExpr 0x55edf951eaa0 <col:9> 'int' lvalue Var 0x55edf94eb0d0 'bn_limit_bits_high' 'int'
|   | | | `-ImplicitCastExpr 0x55edf951eaf0 <col:30> 'int' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x55edf951eac8 <col:30> 'int' lvalue ParmVar 0x55edf951ddc8 'high' 'int'
|   | | `-BinaryOperator 0x55edf9520370 <line:50:9, col:34> 'int' '='
|   | |   |-DeclRefExpr 0x55edf95202c0 <col:9> 'int' lvalue Var 0x55edf951db40 'bn_limit_num_high' 'int'
|   | |   `-BinaryOperator 0x55edf9520348 <col:29, col:34> 'int' '<<'
|   | |     |-IntegerLiteral 0x55edf95202e8 <col:29> 'int' 1
|   | |     `-ImplicitCastExpr 0x55edf9520330 <col:34> 'int' <LValueToRValue>
|   | |       `-DeclRefExpr 0x55edf9520308 <col:34> 'int' lvalue ParmVar 0x55edf951ddc8 'high' 'int'
|   | `-<<<NULL>>>
|   |-IfStmt 0x55edf9520980 <line:52:5, line:57:5>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x55edf9520458 <line:52:9, col:16> 'int' '>='
|   | | |-ImplicitCastExpr 0x55edf9520440 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x55edf95203f8 <col:9> 'int' lvalue ParmVar 0x55edf951de40 'low' 'int'
|   | | `-IntegerLiteral 0x55edf9520420 <col:16> 'int' 0
|   | |-CompoundStmt 0x55edf9520958 <col:19, line:57:5>
|   | | |-IfStmt 0x55edf95207b8 <line:53:9, line:54:37>
|   | | | |-<<<NULL>>>
|   | | | |-<<<NULL>>>
|   | | | |-BinaryOperator 0x55edf9520630 <line:53:13, col:44> 'int' '>'
|   | | | | |-ImplicitCastExpr 0x55edf9520618 <col:13> 'int' <LValueToRValue>
|   | | | | | `-DeclRefExpr 0x55edf9520480 <col:13> 'int' lvalue ParmVar 0x55edf951de40 'low' 'int'
|   | | | | `-BinaryOperator 0x55edf95205f0 <col:19, col:44> 'int' '-'
|   | | | |   |-CStyleCastExpr 0x55edf95205a8 <col:19, col:40> 'int' <IntegralCast>
|   | | | |   | `-ParenExpr 0x55edf9520588 <col:24, col:40> 'unsigned long'
|   | | | |   |   `-BinaryOperator 0x55edf9520518 <col:25, col:39> 'unsigned long' '*'
|   | | | |   |     |-UnaryExprOrTypeTraitExpr 0x55edf95204c0 <col:25, col:35> 'unsigned long' sizeof 'int'
|   | | | |   |     `-ImplicitCastExpr 0x55edf9520500 <col:39> 'unsigned long' <IntegralCast>
|   | | | |   |       `-IntegerLiteral 0x55edf95204e0 <col:39> 'int' 8
|   | | | |   `-IntegerLiteral 0x55edf95205d0 <col:44> 'int' 1
|   | | | |-BinaryOperator 0x55edf9520790 <line:54:13, col:37> 'int' '='
|   | | | | |-DeclRefExpr 0x55edf9520658 <col:13> 'int' lvalue ParmVar 0x55edf951de40 'low' 'int'
|   | | | | `-ImplicitCastExpr 0x55edf9520778 <col:19, col:37> 'int' <IntegralCast>
|   | | | |   `-BinaryOperator 0x55edf9520750 <col:19, col:37> 'unsigned long' '-'
|   | | | |     |-BinaryOperator 0x55edf95206f0 <col:19, col:33> 'unsigned long' '*'
|   | | | |     | |-UnaryExprOrTypeTraitExpr 0x55edf9520698 <col:19, col:29> 'unsigned long' sizeof 'int'
|   | | | |     | `-ImplicitCastExpr 0x55edf95206d8 <col:33> 'unsigned long' <IntegralCast>
|   | | | |     |   `-IntegerLiteral 0x55edf95206b8 <col:33> 'int' 8
|   | | | |     `-ImplicitCastExpr 0x55edf9520738 <col:37> 'unsigned long' <IntegralCast>
|   | | | |       `-IntegerLiteral 0x55edf9520718 <col:37> 'int' 1
|   | | | `-<<<NULL>>>
|   | | |-BinaryOperator 0x55edf9520858 <line:55:9, col:29> 'int' '='
|   | | | |-DeclRefExpr 0x55edf95207f0 <col:9> 'int' lvalue Var 0x55edf94eaf70 'bn_limit_bits_low' 'int'
|   | | | `-ImplicitCastExpr 0x55edf9520840 <col:29> 'int' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x55edf9520818 <col:29> 'int' lvalue ParmVar 0x55edf951de40 'low' 'int'
|   | | `-BinaryOperator 0x55edf9520930 <line:56:9, col:33> 'int' '='
|   | |   |-DeclRefExpr 0x55edf9520880 <col:9> 'int' lvalue Var 0x55edf94eb020 'bn_limit_num_low' 'int'
|   | |   `-BinaryOperator 0x55edf9520908 <col:28, col:33> 'int' '<<'
|   | |     |-IntegerLiteral 0x55edf95208a8 <col:28> 'int' 1
|   | |     `-ImplicitCastExpr 0x55edf95208f0 <col:33> 'int' <LValueToRValue>
|   | |       `-DeclRefExpr 0x55edf95208c8 <col:33> 'int' lvalue ParmVar 0x55edf951de40 'low' 'int'
|   | `-<<<NULL>>>
|   `-IfStmt 0x55edf9520f40 <line:58:5, line:63:5>
|     |-<<<NULL>>>
|     |-<<<NULL>>>
|     |-BinaryOperator 0x55edf9520a18 <line:58:9, col:17> 'int' '>='
|     | |-ImplicitCastExpr 0x55edf9520a00 <col:9> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x55edf95209b8 <col:9> 'int' lvalue ParmVar 0x55edf951deb8 'mont' 'int'
|     | `-IntegerLiteral 0x55edf95209e0 <col:17> 'int' 0
|     |-CompoundStmt 0x55edf9520f18 <col:20, line:63:5>
|     | |-IfStmt 0x55edf9520d78 <line:59:9, line:60:38>
|     | | |-<<<NULL>>>
|     | | |-<<<NULL>>>
|     | | |-BinaryOperator 0x55edf9520bf0 <line:59:13, col:45> 'int' '>'
|     | | | |-ImplicitCastExpr 0x55edf9520bd8 <col:13> 'int' <LValueToRValue>
|     | | | | `-DeclRefExpr 0x55edf9520a40 <col:13> 'int' lvalue ParmVar 0x55edf951deb8 'mont' 'int'
|     | | | `-BinaryOperator 0x55edf9520bb0 <col:20, col:45> 'int' '-'
|     | | |   |-CStyleCastExpr 0x55edf9520b68 <col:20, col:41> 'int' <IntegralCast>
|     | | |   | `-ParenExpr 0x55edf9520b48 <col:25, col:41> 'unsigned long'
|     | | |   |   `-BinaryOperator 0x55edf9520ad8 <col:26, col:40> 'unsigned long' '*'
|     | | |   |     |-UnaryExprOrTypeTraitExpr 0x55edf9520a80 <col:26, col:36> 'unsigned long' sizeof 'int'
|     | | |   |     `-ImplicitCastExpr 0x55edf9520ac0 <col:40> 'unsigned long' <IntegralCast>
|     | | |   |       `-IntegerLiteral 0x55edf9520aa0 <col:40> 'int' 8
|     | | |   `-IntegerLiteral 0x55edf9520b90 <col:45> 'int' 1
|     | | |-BinaryOperator 0x55edf9520d50 <line:60:13, col:38> 'int' '='
|     | | | |-DeclRefExpr 0x55edf9520c18 <col:13> 'int' lvalue ParmVar 0x55edf951deb8 'mont' 'int'
|     | | | `-ImplicitCastExpr 0x55edf9520d38 <col:20, col:38> 'int' <IntegralCast>
|     | | |   `-BinaryOperator 0x55edf9520d10 <col:20, col:38> 'unsigned long' '-'
|     | | |     |-BinaryOperator 0x55edf9520cb0 <col:20, col:34> 'unsigned long' '*'
|     | | |     | |-UnaryExprOrTypeTraitExpr 0x55edf9520c58 <col:20, col:30> 'unsigned long' sizeof 'int'
|     | | |     | `-ImplicitCastExpr 0x55edf9520c98 <col:34> 'unsigned long' <IntegralCast>
|     | | |     |   `-IntegerLiteral 0x55edf9520c78 <col:34> 'int' 8
|     | | |     `-ImplicitCastExpr 0x55edf9520cf8 <col:38> 'unsigned long' <IntegralCast>
|     | | |       `-IntegerLiteral 0x55edf9520cd8 <col:38> 'int' 1
|     | | `-<<<NULL>>>
|     | |-BinaryOperator 0x55edf9520e18 <line:61:9, col:30> 'int' '='
|     | | |-DeclRefExpr 0x55edf9520db0 <col:9> 'int' lvalue Var 0x55edf951dbf0 'bn_limit_bits_mont' 'int'
|     | | `-ImplicitCastExpr 0x55edf9520e00 <col:30> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55edf9520dd8 <col:30> 'int' lvalue ParmVar 0x55edf951deb8 'mont' 'int'
|     | `-BinaryOperator 0x55edf9520ef0 <line:62:9, col:34> 'int' '='
|     |   |-DeclRefExpr 0x55edf9520e40 <col:9> 'int' lvalue Var 0x55edf951dca0 'bn_limit_num_mont' 'int'
|     |   `-BinaryOperator 0x55edf9520ec8 <col:29, col:34> 'int' '<<'
|     |     |-IntegerLiteral 0x55edf9520e68 <col:29> 'int' 1
|     |     `-ImplicitCastExpr 0x55edf9520eb0 <col:34> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55edf9520e88 <col:34> 'int' lvalue ParmVar 0x55edf951deb8 'mont' 'int'
|     `-<<<NULL>>>
|-FunctionDecl 0x55edf95210a8 <line:66:1, line:78:1> line:66:5 BN_get_params 'int (int)'
| |-ParmVarDecl 0x55edf9520fc0 <col:19, col:23> col:23 used which 'int'
| `-CompoundStmt 0x55edf95216c0 <line:67:1, line:78:1>
|   `-IfStmt 0x55edf9521688 <line:68:5, line:77:18>
|     |-<<<NULL>>>
|     |-<<<NULL>>>
|     |-BinaryOperator 0x55edf95211c8 <line:68:9, col:18> 'int' '=='
|     | |-ImplicitCastExpr 0x55edf95211b0 <col:9> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x55edf9521168 <col:9> 'int' lvalue ParmVar 0x55edf9520fc0 'which' 'int'
|     | `-IntegerLiteral 0x55edf9521190 <col:18> 'int' 0
|     |-ReturnStmt 0x55edf9521250 <line:69:9, col:30>
|     | `-ImplicitCastExpr 0x55edf9521238 <col:16, col:30> 'int' <LValueToRValue>
|     |   `-ParenExpr 0x55edf9521218 <col:16, col:30> 'int' lvalue
|     |     `-DeclRefExpr 0x55edf95211f0 <col:17> 'int' lvalue Var 0x55edf94eae10 'bn_limit_bits' 'int'
|     `-IfStmt 0x55edf9521650 <line:70:10, line:77:18>
|       |-<<<NULL>>>
|       |-<<<NULL>>>
|       |-BinaryOperator 0x55edf95212e8 <line:70:14, col:23> 'int' '=='
|       | |-ImplicitCastExpr 0x55edf95212d0 <col:14> 'int' <LValueToRValue>
|       | | `-DeclRefExpr 0x55edf9521268 <col:14> 'int' lvalue ParmVar 0x55edf9520fc0 'which' 'int'
|       | `-IntegerLiteral 0x55edf9521290 <col:23> 'int' 1
|       |-ReturnStmt 0x55edf9521370 <line:71:9, col:35>
|       | `-ImplicitCastExpr 0x55edf9521358 <col:16, col:35> 'int' <LValueToRValue>
|       |   `-ParenExpr 0x55edf9521338 <col:16, col:35> 'int' lvalue
|       |     `-DeclRefExpr 0x55edf9521310 <col:17> 'int' lvalue Var 0x55edf94eb0d0 'bn_limit_bits_high' 'int'
|       `-IfStmt 0x55edf9521618 <line:72:10, line:77:18>
|         |-<<<NULL>>>
|         |-<<<NULL>>>
|         |-BinaryOperator 0x55edf95213e8 <line:72:14, col:23> 'int' '=='
|         | |-ImplicitCastExpr 0x55edf95213d0 <col:14> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55edf9521388 <col:14> 'int' lvalue ParmVar 0x55edf9520fc0 'which' 'int'
|         | `-IntegerLiteral 0x55edf95213b0 <col:23> 'int' 2
|         |-ReturnStmt 0x55edf9521470 <line:73:9, col:34>
|         | `-ImplicitCastExpr 0x55edf9521458 <col:16, col:34> 'int' <LValueToRValue>
|         |   `-ParenExpr 0x55edf9521438 <col:16, col:34> 'int' lvalue
|         |     `-DeclRefExpr 0x55edf9521410 <col:17> 'int' lvalue Var 0x55edf94eaf70 'bn_limit_bits_low' 'int'
|         `-IfStmt 0x55edf95215e0 <line:74:10, line:77:18>
|           |-<<<NULL>>>
|           |-<<<NULL>>>
|           |-BinaryOperator 0x55edf95214e8 <line:74:14, col:23> 'int' '=='
|           | |-ImplicitCastExpr 0x55edf95214d0 <col:14> 'int' <LValueToRValue>
|           | | `-DeclRefExpr 0x55edf9521488 <col:14> 'int' lvalue ParmVar 0x55edf9520fc0 'which' 'int'
|           | `-IntegerLiteral 0x55edf95214b0 <col:23> 'int' 3
|           |-ReturnStmt 0x55edf9521570 <line:75:9, col:35>
|           | `-ImplicitCastExpr 0x55edf9521558 <col:16, col:35> 'int' <LValueToRValue>
|           |   `-ParenExpr 0x55edf9521538 <col:16, col:35> 'int' lvalue
|           |     `-DeclRefExpr 0x55edf9521510 <col:17> 'int' lvalue Var 0x55edf951dbf0 'bn_limit_bits_mont' 'int'
|           `-ReturnStmt 0x55edf95215c8 <line:77:9, col:18>
|             `-ParenExpr 0x55edf95215a8 <col:16, col:18> 'int'
|               `-IntegerLiteral 0x55edf9521588 <col:17> 'int' 0
|-FunctionDecl 0x55edf95217a8 <line:81:1, line:88:1> line:81:15 invalid BN_value_one 'const int *(void)'
| `-CompoundStmt 0x55edf9521a00 <line:82:1, line:88:1>
|   |-DeclStmt 0x55edf95218f8 <line:83:5, col:40>
|   | `-VarDecl 0x55edf9521878 <col:5, col:27> col:27 invalid data_one 'const int' static
|   `-DeclStmt 0x55edf95219e8 <line:84:5, line:85:63>
|     `-VarDecl 0x55edf9521928 <line:84:5, col:25> col:25 invalid const_one 'const int' static
|-FunctionDecl 0x55edf9521ac8 <line:90:1, line:133:1> line:90:5 invalid BN_num_bits_word 'int (int)'
| |-ParmVarDecl 0x55edf9521a38 <col:22, col:31> col:31 invalid l 'int'
| `-CompoundStmt 0x55edf9522090 <line:91:1, line:133:1>
|   |-DeclStmt 0x55edf9521c20 <line:93:5, col:24>
|   | `-VarDecl 0x55edf9521ba0 <col:5, col:9> col:9 used bits 'int'
|   `-ReturnStmt 0x55edf9522078 <line:132:5, col:12>
|     `-ImplicitCastExpr 0x55edf9522060 <col:12> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x55edf9522038 <col:12> 'int' lvalue Var 0x55edf9521ba0 'bits' 'int'
|-FunctionDecl 0x55edf9522198 <line:135:1, line:143:1> line:135:5 invalid BN_num_bits 'int (const int *)'
| |-ParmVarDecl 0x55edf95220c8 <col:17, col:31> col:31 invalid a 'const int *'
| `-CompoundStmt 0x55edf9522d70 <line:136:1, line:143:1>
|   |-DeclStmt 0x55edf9522a00 <line:137:5, col:23>
|   | `-VarDecl 0x55edf9522270 <col:5, col:9> col:9 used i 'int'
|   `-IfStmt 0x55edf9522cd0 <line:140:5, line:141:16>
|     |-<<<NULL>>>
|     |-<<<NULL>>>
|     |-OpaqueValueExpr 0x55edf9522cb0 <<invalid sloc>> '_Bool'
|     |-ReturnStmt 0x55edf9522c98 <col:9, col:16>
|     | `-IntegerLiteral 0x55edf9522c78 <col:16> 'int' 0
|     `-<<<NULL>>>
|-FunctionDecl 0x55edf9522e90 <line:145:1, line:151:1> line:145:13 invalid bn_free_d 'void (int *)' static
| |-ParmVarDecl 0x55edf9522dd0 <col:23, col:31> col:31 invalid a 'int *'
| `-CompoundStmt 0x55edf9523298 <line:146:1, line:151:1>
|-FunctionDecl 0x55edf9523348 <line:154:1, line:170:1> line:154:6 invalid BN_clear_free 'void (int *)'
| |-ParmVarDecl 0x55edf95232c0 <col:20, col:28> col:28 invalid a 'int *'
| `-CompoundStmt 0x55edf95237f0 <line:155:1, line:170:1>
|   |-DeclStmt 0x55edf9523480 <line:156:5, col:10>
|   | `-VarDecl 0x55edf9523420 <col:5, col:9> col:9 used i 'int'
|   |-IfStmt 0x55edf95234d0 <line:158:5, line:159:9>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-OpaqueValueExpr 0x55edf95234b0 <<invalid sloc>> '_Bool'
|   | |-ReturnStmt 0x55edf9523498 <col:9>
|   | `-<<<NULL>>>
|   `-IfStmt 0x55edf95236c0 <line:161:5, line:165:5>
|     |-<<<NULL>>>
|     |-<<<NULL>>>
|     |-OpaqueValueExpr 0x55edf95236a0 <<invalid sloc>> '_Bool'
|     |-CompoundStmt 0x55edf9523690 <line:161:23, line:165:5>
|     `-<<<NULL>>>
|-FunctionDecl 0x55edf95238b8 <line:172:1, line:187:1> line:172:6 invalid BN_free 'void (int *)'
| |-ParmVarDecl 0x55edf9523830 <col:14, col:22> col:22 invalid a 'int *'
| `-CompoundStmt 0x55edf9524f38 <line:173:1, line:187:1>
|   |-IfStmt 0x55edf9524e10 <line:174:5, line:175:9>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-OpaqueValueExpr 0x55edf9523990 <<invalid sloc>> '_Bool'
|   | |-ReturnStmt 0x55edf9523978 <col:9>
|   | `-<<<NULL>>>
|   `-IfStmt 0x55edf9524f00 <line:179:5, line:186:5>
|     |-<<<NULL>>>
|     |-<<<NULL>>>
|     |-OpaqueValueExpr 0x55edf9524ee0 <<invalid sloc>> '_Bool'
|     |-NullStmt 0x55edf9524ed0 <line:180:9>
|     `-CompoundStmt 0x55edf9524ec0 <line:181:10, line:186:5>
|-FunctionDecl 0x55edf9524ff8 <line:189:1, line:195:1> line:189:6 invalid bn_init 'void (int *)'
| |-ParmVarDecl 0x55edf9524f70 <col:14, col:22> col:22 invalid a 'int *'
| `-CompoundStmt 0x55edf9525170 <line:190:1, line:195:1>
|   `-DeclStmt 0x55edf9525130 <line:191:5, col:24>
|     `-VarDecl 0x55edf95250d0 <col:5, col:19> col:19 invalid nilbn 'int' static
|-FunctionDecl 0x55edf9525258 <line:197:1, line:208:1> line:197:9 invalid BN_new 'int *(void)'
| `-CompoundStmt 0x55edf95255d0 <line:198:1, line:208:1>
|   `-IfStmt 0x55edf9525570 <line:201:5, line:204:5>
|     |-<<<NULL>>>
|     |-<<<NULL>>>
|     |-OpaqueValueExpr 0x55edf9525550 <<invalid sloc>> '_Bool'
|     |-CompoundStmt 0x55edf9525540 <line:201:55, line:204:5>
|     `-<<<NULL>>>
|-FunctionDecl 0x55edf9525680 <line:210:2, line:216:2> line:210:10 invalid BN_secure_new 'int *(void)'
| `-CompoundStmt 0x55edf9525738 <line:211:2, line:216:2>
|-FunctionDecl 0x55edf95258b8 <line:220:1, line:288:1> line:220:18 invalid bn_expand_internal 'int *(const int *, int)' static
| |-ParmVarDecl 0x55edf9525760 <col:37, col:51> col:51 invalid b 'const int *'
| |-ParmVarDecl 0x55edf95257d8 <col:54, col:58> col:58 used words 'int'
| `-CompoundStmt 0x55edf94e5910 <line:221:1, line:288:1>
|   |-DeclStmt 0x55edf95259f8 <line:223:5, col:22>
|   | `-VarDecl 0x55edf9525998 <col:5, col:21> col:21 invalid B 'const int *'
|   |-DeclStmt 0x55edf9525a88 <line:224:5, col:10>
|   | `-VarDecl 0x55edf9525a28 <col:5, col:9> col:9 used i 'int'
|   |-IfStmt 0x55edf9525b78 <line:226:5, line:229:5>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-OpaqueValueExpr 0x55edf9525b58 <<invalid sloc>> '_Bool'
|   | |-CompoundStmt 0x55edf9525b48 <line:226:45, line:229:5>
|   | `-<<<NULL>>>
|   |-IfStmt 0x55edf9525c30 <line:230:5, line:233:5>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-OpaqueValueExpr 0x55edf9525c10 <<invalid sloc>> '_Bool'
|   | |-CompoundStmt 0x55edf9525c00 <line:230:46, line:233:5>
|   | `-<<<NULL>>>
|   |-IfStmt 0x55edf94e5590 <line:238:5, line:241:5>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-OpaqueValueExpr 0x55edf94e5570 <<invalid sloc>> '_Bool'
|   | |-CompoundStmt 0x55edf94e5560 <line:238:20, line:241:5>
|   | `-<<<NULL>>>
|   `-IfStmt 0x55edf94e58d8 <line:246:5, line:281:5>
|     |-<<<NULL>>>
|     |-<<<NULL>>>
|     |-OpaqueValueExpr 0x55edf94e58b8 <<invalid sloc>> '_Bool'
|     |-CompoundStmt 0x55edf94e58a0 <line:246:20, line:281:5>
|     | `-ForStmt 0x55edf94e5848 <line:247:9, line:266:9>
|     |   |-<<<NULL>>>
|     |   |-<<<NULL>>>
|     |   |-BinaryOperator 0x55edf94e5688 <line:247:31, col:35> 'int' '>'
|     |   | |-ImplicitCastExpr 0x55edf94e5670 <col:31> 'int' <LValueToRValue>
|     |   | | `-DeclRefExpr 0x55edf94e5628 <col:31> 'int' lvalue Var 0x55edf9525a28 'i' 'int'
|     |   | `-IntegerLiteral 0x55edf94e5650 <col:35> 'int' 0
|     |   |-<<<NULL>>>
|     |   `-CompoundStmt 0x55edf94e5838 <col:59, line:266:9>
|     `-<<<NULL>>>
|-FunctionDecl 0x55edf94e5ab8 <line:298:1, line:313:1> line:298:9 invalid bn_expand2 'int *(int *, int)'
| |-ParmVarDecl 0x55edf94e5968 <col:20, col:28> col:28 invalid b 'int *'
| |-ParmVarDecl 0x55edf94e59e0 <col:31, col:35> col:35 used words 'int'
| `-CompoundStmt 0x55edf94e5d30 <line:299:1, line:313:1>
|   `-IfStmt 0x55edf94e5cf8 <line:300:5, line:310:5>
|     |-<<<NULL>>>
|     |-<<<NULL>>>
|     |-OpaqueValueExpr 0x55edf94e5cd8 <<invalid sloc>> '_Bool'
|     |-CompoundStmt 0x55edf94e5cc0 <line:300:26, line:310:5>
|     | `-IfStmt 0x55edf94e5c60 <line:304:9, line:307:9>
|     |   |-<<<NULL>>>
|     |   |-<<<NULL>>>
|     |   |-OpaqueValueExpr 0x55edf94e5c40 <<invalid sloc>> '_Bool'
|     |   |-CompoundStmt 0x55edf94e5c30 <line:304:19, line:307:9>
|     |   `-<<<NULL>>>
|     `-<<<NULL>>>
|-FunctionDecl 0x55edf94e5e28 <line:315:1, line:332:1> line:315:9 invalid BN_dup 'int *(const int *)'
| |-ParmVarDecl 0x55edf94e5d60 <col:16, col:30> col:30 invalid a 'const int *'
| `-CompoundStmt 0x55edf94e60e0 <line:316:1, line:332:1>
|   `-IfStmt 0x55edf94e6080 <line:326:5, line:329:5>
|     |-<<<NULL>>>
|     |-<<<NULL>>>
|     |-OpaqueValueExpr 0x55edf94e6060 <<invalid sloc>> '_Bool'
|     |-CompoundStmt 0x55edf94e6050 <line:326:25, line:329:5>
|     `-<<<NULL>>>
|-FunctionDecl 0x55edf94e6268 <line:334:1, line:383:1> line:334:9 invalid BN_copy 'int *(int *, const int *)'
| |-ParmVarDecl 0x55edf94e6110 <col:17, col:25> col:25 invalid a 'int *'
| |-ParmVarDecl 0x55edf94e6188 <col:28, col:42> col:42 invalid b 'const int *'
| `-CompoundStmt 0x55edf9529200 <line:335:1, line:383:1>
|   |-DeclStmt 0x55edf94e63a8 <line:336:5, col:10>
|   | `-VarDecl 0x55edf94e6348 <col:5, col:9> col:9 used i 'int'
|   |-DeclStmt 0x55edf94e6438 <line:338:5, col:22>
|   | `-VarDecl 0x55edf94e63d8 <col:5, col:21> col:21 invalid B 'const int *'
|   `-ForStmt 0x55edf9529180 <line:350:5, line:360:5>
|     |-<<<NULL>>>
|     |-<<<NULL>>>
|     |-BinaryOperator 0x55edf9528fc0 <line:350:27, col:31> 'int' '>'
|     | |-ImplicitCastExpr 0x55edf9528fa8 <col:27> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x55edf9528f60 <col:27> 'int' lvalue Var 0x55edf94e6348 'i' 'int'
|     | `-IntegerLiteral 0x55edf9528f88 <col:31> 'int' 0
|     |-<<<NULL>>>
|     `-CompoundStmt 0x55edf9529170 <col:55, line:360:5>
|-FunctionDecl 0x55edf9529390 <line:391:1, line:422:1> line:391:6 invalid BN_swap 'void (int *, int *)'
| |-ParmVarDecl 0x55edf9529240 <col:14, col:22> col:22 invalid a 'int *'
| |-ParmVarDecl 0x55edf95292b8 <col:25, col:33> col:33 invalid b 'int *'
| `-CompoundStmt 0x55edf9529a90 <line:392:1, line:422:1>
|   |-DeclStmt 0x55edf9529560 <line:393:5, col:33>
|   | |-VarDecl 0x55edf9529470 <col:5, col:9> col:9 used flags_old_a 'int'
|   | `-VarDecl 0x55edf95294e8 <col:5, col:22> col:22 used flags_old_b 'int'
|   `-DeclStmt 0x55edf9529700 <line:395:5, col:35>
|     |-VarDecl 0x55edf9529590 <col:5, col:9> col:9 used tmp_top 'int'
|     |-VarDecl 0x55edf9529608 <col:5, col:18> col:18 used tmp_dmax 'int'
|     `-VarDecl 0x55edf9529680 <col:5, col:28> col:28 used tmp_neg 'int'
|-FunctionDecl 0x55edf9529b50 <line:424:1, line:432:1> line:424:6 invalid BN_clear 'void (int *)'
| |-ParmVarDecl 0x55edf9529ac8 <col:15, col:23> col:23 invalid a 'int *'
| `-CompoundStmt 0x55edf9529ca0 <line:425:1, line:432:1>
|-FunctionDecl 0x55edf9529d58 <line:434:1, line:442:1> line:434:10 invalid BN_get_word 'int (const int *)'
| |-ParmVarDecl 0x55edf9529cc8 <col:22, col:36> col:36 invalid a 'const int *'
| `-CompoundStmt 0x55edf9529ed0 <line:435:1, line:442:1>
|   `-ReturnStmt 0x55edf9529eb8 <line:441:5, col:12>
|     `-IntegerLiteral 0x55edf9529e98 <col:12> 'int' 0
|-FunctionDecl 0x55edf952a058 <line:444:1, line:455:1> line:444:5 invalid BN_set_word 'int (int *, int)'
| |-ParmVarDecl 0x55edf9529f00 <col:17, col:25> col:25 invalid a 'int *'
| |-ParmVarDecl 0x55edf9529f78 <col:28, col:37> col:37 invalid w 'int'
| `-CompoundStmt 0x55edf952a430 <line:445:1, line:455:1>
|   |-IfStmt 0x55edf952a2f8 <line:447:5, line:448:18>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-OpaqueValueExpr 0x55edf952a2d8 <<invalid sloc>> '_Bool'
|   | |-ReturnStmt 0x55edf952a2c0 <col:9, col:18>
|   | | `-ParenExpr 0x55edf952a2a0 <col:16, col:18> 'int'
|   | |   `-IntegerLiteral 0x55edf952a280 <col:17> 'int' 0
|   | `-<<<NULL>>>
|   `-ReturnStmt 0x55edf952a418 <line:454:5, col:14>
|     `-ParenExpr 0x55edf952a3f8 <col:12, col:14> 'int'
|       `-IntegerLiteral 0x55edf952a3d8 <col:13> 'int' 1
|-FunctionDecl 0x55edf952a668 <line:457:1, line:500:1> line:457:9 invalid BN_bin2bn 'int *(const unsigned char *, int, int *)'
| |-ParmVarDecl 0x55edf952a490 <col:19, col:40> col:40 used s 'const unsigned char *'
| |-ParmVarDecl 0x55edf952a508 <col:43, col:47> col:47 used len 'int'
| |-ParmVarDecl 0x55edf952a580 <col:52, col:60> col:60 invalid ret 'int *'
| `-CompoundStmt 0x55edf952b9c0 <line:458:1, line:500:1>
|   |-DeclStmt 0x55edf952a840 <line:459:5, col:22>
|   | |-VarDecl 0x55edf952a750 <col:5, col:18> col:18 used i 'unsigned int'
|   | `-VarDecl 0x55edf952a7c8 <col:5, col:21> col:21 used m 'unsigned int'
|   |-DeclStmt 0x55edf952a8d0 <line:460:5, col:19>
|   | `-VarDecl 0x55edf952a870 <col:5, col:18> col:18 used n 'unsigned int'
|   |-ForStmt 0x55edf952ab88 <line:470:5, line:471:9>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x55edf952aaa0 <line:470:13, col:30> 'int' '&&'
|   | | |-BinaryOperator 0x55edf952a988 <col:13, col:19> 'int' '>'
|   | | | |-ImplicitCastExpr 0x55edf952a970 <col:13> 'int' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x55edf952a910 <col:13> 'int' lvalue ParmVar 0x55edf952a508 'len' 'int'
|   | | | `-IntegerLiteral 0x55edf952a950 <col:19> 'int' 0
|   | | `-BinaryOperator 0x55edf952aa78 <col:24, col:30> 'int' '=='
|   | |   |-ImplicitCastExpr 0x55edf952aa60 <col:24, col:25> 'int' <IntegralCast>
|   | |   | `-ImplicitCastExpr 0x55edf952aa48 <col:24, col:25> 'unsigned char' <LValueToRValue>
|   | |   |   `-UnaryOperator 0x55edf952aa08 <col:24, col:25> 'const unsigned char' lvalue prefix '*'
|   | |   |     `-ImplicitCastExpr 0x55edf952a9f0 <col:25> 'const unsigned char *' <LValueToRValue>
|   | |   |       `-DeclRefExpr 0x55edf952a9b0 <col:25> 'const unsigned char *' lvalue ParmVar 0x55edf952a490 's' 'const unsigned char *'
|   | |   `-IntegerLiteral 0x55edf952aa28 <col:30> 'int' 0
|   | |-BinaryOperator 0x55edf952ab58 <col:33, col:41> 'int' ','
|   | | |-UnaryOperator 0x55edf952aaf0 <col:33, col:34> 'const unsigned char *' postfix '++'
|   | | | `-DeclRefExpr 0x55edf952aac8 <col:33> 'const unsigned char *' lvalue ParmVar 0x55edf952a490 's' 'const unsigned char *'
|   | | `-UnaryOperator 0x55edf952ab38 <col:38, col:41> 'int' postfix '--'
|   | |   `-DeclRefExpr 0x55edf952ab10 <col:38> 'int' lvalue ParmVar 0x55edf952a508 'len' 'int'
|   | `-ContinueStmt 0x55edf952ab80 <line:471:9>
|   |-BinaryOperator 0x55edf952ac58 <line:472:5, col:9> 'unsigned int' '='
|   | |-DeclRefExpr 0x55edf952abc0 <col:5> 'unsigned int' lvalue Var 0x55edf952a870 'n' 'unsigned int'
|   | `-ImplicitCastExpr 0x55edf952ac40 <col:9> 'unsigned int' <IntegralCast>
|   |   `-ImplicitCastExpr 0x55edf952ac28 <col:9> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x55edf952ac00 <col:9> 'int' lvalue ParmVar 0x55edf952a508 'len' 'int'
|   |-IfStmt 0x55edf952ad50 <line:473:5, line:476:5>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x55edf952acf8 <line:473:9, col:14> 'int' '=='
|   | | |-ImplicitCastExpr 0x55edf952acc8 <col:9> 'unsigned int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x55edf952ac80 <col:9> 'unsigned int' lvalue Var 0x55edf952a870 'n' 'unsigned int'
|   | | `-ImplicitCastExpr 0x55edf952ace0 <col:14> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x55edf952aca8 <col:14> 'int' 0
|   | |-CompoundStmt 0x55edf952ad40 <col:17, line:476:5>
|   | `-<<<NULL>>>
|   |-IfStmt 0x55edf952b540 <line:479:5, line:482:5>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-OpaqueValueExpr 0x55edf952b520 <<invalid sloc>> '_Bool'
|   | |-CompoundStmt 0x55edf952b510 <line:479:42, line:482:5>
|   | `-<<<NULL>>>
|   `-WhileStmt 0x55edf952b888 <line:486:5, line:493:5>
|     |-<<<NULL>>>
|     |-UnaryOperator 0x55edf952b608 <line:486:12, col:13> 'unsigned int' postfix '--'
|     | `-DeclRefExpr 0x55edf952b5e0 <col:12> 'unsigned int' lvalue Var 0x55edf952a870 'n' 'unsigned int'
|     `-CompoundStmt 0x55edf952b870 <col:17, line:493:5>
|       `-IfStmt 0x55edf952b838 <line:488:9, line:492:9>
|         |-<<<NULL>>>
|         |-<<<NULL>>>
|         |-BinaryOperator 0x55edf952b750 <line:488:13, col:20> 'int' '=='
|         | |-UnaryOperator 0x55edf952b6f8 <col:13, col:14> 'unsigned int' postfix '--'
|         | | `-DeclRefExpr 0x55edf952b6d0 <col:13> 'unsigned int' lvalue Var 0x55edf952a7c8 'm' 'unsigned int'
|         | `-ImplicitCastExpr 0x55edf952b738 <col:20> 'unsigned int' <IntegralCast>
|         |   `-IntegerLiteral 0x55edf952b718 <col:20> 'int' 0
|         |-CompoundStmt 0x55edf952b828 <col:23, line:492:9>
|         `-<<<NULL>>>
|-FunctionDecl 0x55edf952bc28 <line:503:1, line:543:1> line:503:12 invalid bn2binpad 'int (const int *, unsigned char *, int)' static
| |-ParmVarDecl 0x55edf952ba20 <col:22, col:36> col:36 invalid a 'const int *'
| |-ParmVarDecl 0x55edf952bac0 <col:39, col:54> col:54 used to 'unsigned char *'
| |-ParmVarDecl 0x55edf952bb38 <col:58, col:62> col:62 used tolen 'int'
| `-CompoundStmt 0x55edf952c808 <line:504:1, line:543:1>
|   |-DeclStmt 0x55edf952bd70 <line:505:5, col:10>
|   | `-VarDecl 0x55edf952bd10 <col:5, col:9> col:9 used n 'int'
|   |-IfStmt 0x55edf952c318 <line:515:5, line:524:5>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x55edf952bf78 <line:515:9, col:19> 'int' '=='
|   | | |-ImplicitCastExpr 0x55edf952bf60 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x55edf952bee0 <col:9> 'int' lvalue ParmVar 0x55edf952bb38 'tolen' 'int'
|   | | `-UnaryOperator 0x55edf952bf40 <col:18, col:19> 'int' prefix '-'
|   | |   `-IntegerLiteral 0x55edf952bf20 <col:19> 'int' 1
|   | |-CompoundStmt 0x55edf952c030 <col:22, line:517:5>
|   | | `-BinaryOperator 0x55edf952c008 <line:516:9, col:17> 'int' '='
|   | |   |-DeclRefExpr 0x55edf952bfa0 <col:9> 'int' lvalue ParmVar 0x55edf952bb38 'tolen' 'int'
|   | |   `-ImplicitCastExpr 0x55edf952bff0 <col:17> 'int' <LValueToRValue>
|   | |     `-DeclRefExpr 0x55edf952bfc8 <col:17> 'int' lvalue Var 0x55edf952bd10 'n' 'int'
|   | `-IfStmt 0x55edf952c2e0 <line:517:12, line:524:5>
|   |   |-<<<NULL>>>
|   |   |-<<<NULL>>>
|   |   |-BinaryOperator 0x55edf952c0c8 <line:517:16, col:24> 'int' '<'
|   |   | |-ImplicitCastExpr 0x55edf952c098 <col:16> 'int' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x55edf952c048 <col:16> 'int' lvalue ParmVar 0x55edf952bb38 'tolen' 'int'
|   |   | `-ImplicitCastExpr 0x55edf952c0b0 <col:24> 'int' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x55edf952c070 <col:24> 'int' lvalue Var 0x55edf952bd10 'n' 'int'
|   |   |-CompoundStmt 0x55edf952c2a0 <col:27, line:524:5>
|   |   | `-IfStmt 0x55edf952c268 <line:522:9, line:523:21>
|   |   |   |-<<<NULL>>>
|   |   |   |-<<<NULL>>>
|   |   |   |-BinaryOperator 0x55edf952c1e8 <line:522:13, col:21> 'int' '<'
|   |   |   | |-ImplicitCastExpr 0x55edf952c1b8 <col:13> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55edf952c168 <col:13> 'int' lvalue ParmVar 0x55edf952bb38 'tolen' 'int'
|   |   |   | `-ImplicitCastExpr 0x55edf952c1d0 <col:21> 'int' <LValueToRValue>
|   |   |   |   `-DeclRefExpr 0x55edf952c190 <col:21> 'int' lvalue Var 0x55edf952bd10 'n' 'int'
|   |   |   |-ReturnStmt 0x55edf952c250 <line:523:13, col:21>
|   |   |   | `-UnaryOperator 0x55edf952c230 <col:20, col:21> 'int' prefix '-'
|   |   |   |   `-IntegerLiteral 0x55edf952c210 <col:21> 'int' 1
|   |   |   `-<<<NULL>>>
|   |   `-<<<NULL>>>
|   |-IfStmt 0x55edf952c540 <line:528:5, line:531:5>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-OpaqueValueExpr 0x55edf952c520 <<invalid sloc>> '_Bool'
|   | |-CompoundStmt 0x55edf952c500 <line:528:20, line:531:5>
|   | | |-CallExpr 0x55edf952c440 <line:529:9, col:34> 'int'
|   | | | |-ImplicitCastExpr 0x55edf952c428 <col:9> 'int (*)()' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x55edf952c370 <col:9> 'int ()' Function 0x55edf9523558 'OPENSSL_cleanse' 'int ()'
|   | | | |-ImplicitCastExpr 0x55edf952c478 <col:25> 'unsigned char *' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x55edf952c398 <col:25> 'unsigned char *' lvalue ParmVar 0x55edf952bac0 'to' 'unsigned char *'
|   | | | `-ImplicitCastExpr 0x55edf952c490 <col:29> 'int' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x55edf952c3d8 <col:29> 'int' lvalue ParmVar 0x55edf952bb38 'tolen' 'int'
|   | | `-ReturnStmt 0x55edf952c4e8 <line:530:9, col:16>
|   | |   `-ImplicitCastExpr 0x55edf952c4d0 <col:16> 'int' <LValueToRValue>
|   | |     `-DeclRefExpr 0x55edf952c4a8 <col:16> 'int' lvalue ParmVar 0x55edf952bb38 'tolen' 'int'
|   | `-<<<NULL>>>
|   `-ReturnStmt 0x55edf952c7f0 <line:542:5, col:12>
|     `-ImplicitCastExpr 0x55edf952c7d8 <col:12> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x55edf952c7b0 <col:12> 'int' lvalue ParmVar 0x55edf952bb38 'tolen' 'int'
|-FunctionDecl 0x55edf952c9e0 <line:545:1, line:550:1> line:545:5 invalid BN_bn2binpad 'int (const int *, unsigned char *, int)'
| |-ParmVarDecl 0x55edf952c850 <col:18, col:32> col:32 invalid a 'const int *'
| |-ParmVarDecl 0x55edf952c8c8 <col:35, col:50> col:50 used to 'unsigned char *'
| |-ParmVarDecl 0x55edf952c940 <col:54, col:58> col:58 used tolen 'int'
| `-CompoundStmt 0x55edf952cc48 <line:546:1, line:550:1>
|   `-IfStmt 0x55edf952cba8 <line:547:5, line:548:17>
|     |-<<<NULL>>>
|     |-<<<NULL>>>
|     |-BinaryOperator 0x55edf952cb28 <line:547:9, col:17> 'int' '<'
|     | |-ImplicitCastExpr 0x55edf952cb10 <col:9> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x55edf952cab0 <col:9> 'int' lvalue ParmVar 0x55edf952c940 'tolen' 'int'
|     | `-IntegerLiteral 0x55edf952caf0 <col:17> 'int' 0
|     |-ReturnStmt 0x55edf952cb90 <line:548:9, col:17>
|     | `-UnaryOperator 0x55edf952cb70 <col:16, col:17> 'int' prefix '-'
|     |   `-IntegerLiteral 0x55edf952cb50 <col:17> 'int' 1
|     `-<<<NULL>>>
|-FunctionDecl 0x55edf952cdc8 <line:552:1, line:555:1> line:552:5 invalid BN_bn2bin 'int (const int *, unsigned char *)'
| |-ParmVarDecl 0x55edf952cc78 <col:15, col:29> col:29 invalid a 'const int *'
| |-ParmVarDecl 0x55edf952ccf0 <col:32, col:47> col:47 used to 'unsigned char *'
| `-CompoundStmt 0x55edf952cf10 <line:553:1, line:555:1>
|-FunctionDecl 0x55edf952d0c8 <line:557:1, line:602:1> line:557:9 invalid BN_lebin2bn 'int *(const unsigned char *, int, int *)'
| |-ParmVarDecl 0x55edf952cf38 <col:21, col:42> col:42 used s 'const unsigned char *'
| |-ParmVarDecl 0x55edf952cfb0 <col:45, col:49> col:49 used len 'int'
| |-ParmVarDecl 0x55edf952d028 <col:54, col:62> col:62 invalid ret 'int *'
| `-CompoundStmt 0x55edf952dfa0 <line:558:1, line:602:1>
|   |-DeclStmt 0x55edf952d2a0 <line:559:5, col:22>
|   | |-VarDecl 0x55edf952d1b0 <col:5, col:18> col:18 used i 'unsigned int'
|   | `-VarDecl 0x55edf952d228 <col:5, col:21> col:21 used m 'unsigned int'
|   |-DeclStmt 0x55edf952d350 <line:560:5, col:19>
|   | `-VarDecl 0x55edf952d2f0 <col:5, col:18> col:18 used n 'unsigned int'
|   |-CompoundAssignOperator 0x55edf952d428 <line:569:5, col:10> 'const unsigned char *' '+=' ComputeLHSTy='const unsigned char *' ComputeResultTy='const unsigned char *'
|   | |-DeclRefExpr 0x55edf952d390 <col:5> 'const unsigned char *' lvalue ParmVar 0x55edf952cf38 's' 'const unsigned char *'
|   | `-ImplicitCastExpr 0x55edf952d410 <col:10> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x55edf952d3d0 <col:10> 'int' lvalue ParmVar 0x55edf952cfb0 'len' 'int'
|   |-ForStmt 0x55edf952d6f0 <line:571:5, line:572:9>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x55edf952d608 <line:571:13, col:33> 'int' '&&'
|   | | |-BinaryOperator 0x55edf952d4c0 <col:13, col:19> 'int' '>'
|   | | | |-ImplicitCastExpr 0x55edf952d4a8 <col:13> 'int' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x55edf952d460 <col:13> 'int' lvalue ParmVar 0x55edf952cfb0 'len' 'int'
|   | | | `-IntegerLiteral 0x55edf952d488 <col:19> 'int' 0
|   | | `-BinaryOperator 0x55edf952d5e0 <col:24, col:33> 'int' '=='
|   | |   |-ImplicitCastExpr 0x55edf952d5c8 <col:24, col:28> 'int' <IntegralCast>
|   | |   | `-ImplicitCastExpr 0x55edf952d5b0 <col:24, col:28> 'unsigned char' <LValueToRValue>
|   | |   |   `-ArraySubscriptExpr 0x55edf952d568 <col:24, col:28> 'const unsigned char' lvalue
|   | |   |     |-ImplicitCastExpr 0x55edf952d550 <col:24> 'const unsigned char *' <LValueToRValue>
|   | |   |     | `-DeclRefExpr 0x55edf952d4e8 <col:24> 'const unsigned char *' lvalue ParmVar 0x55edf952cf38 's' 'const unsigned char *'
|   | |   |     `-UnaryOperator 0x55edf952d530 <col:26, col:27> 'int' prefix '-'
|   | |   |       `-IntegerLiteral 0x55edf952d510 <col:27> 'int' 1
|   | |   `-IntegerLiteral 0x55edf952d590 <col:33> 'int' 0
|   | |-BinaryOperator 0x55edf952d6c0 <col:36, col:44> 'int' ','
|   | | |-UnaryOperator 0x55edf952d658 <col:36, col:37> 'const unsigned char *' postfix '--'
|   | | | `-DeclRefExpr 0x55edf952d630 <col:36> 'const unsigned char *' lvalue ParmVar 0x55edf952cf38 's' 'const unsigned char *'
|   | | `-UnaryOperator 0x55edf952d6a0 <col:41, col:44> 'int' postfix '--'
|   | |   `-DeclRefExpr 0x55edf952d678 <col:41> 'int' lvalue ParmVar 0x55edf952cfb0 'len' 'int'
|   | `-ContinueStmt 0x55edf952d6e8 <line:572:9>
|   |-BinaryOperator 0x55edf952d7c0 <line:573:5, col:9> 'unsigned int' '='
|   | |-DeclRefExpr 0x55edf952d728 <col:5> 'unsigned int' lvalue Var 0x55edf952d2f0 'n' 'unsigned int'
|   | `-ImplicitCastExpr 0x55edf952d7a8 <col:9> 'unsigned int' <IntegralCast>
|   |   `-ImplicitCastExpr 0x55edf952d790 <col:9> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x55edf952d768 <col:9> 'int' lvalue ParmVar 0x55edf952cfb0 'len' 'int'
|   |-IfStmt 0x55edf952d8b8 <line:574:5, line:577:5>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x55edf952d860 <line:574:9, col:14> 'int' '=='
|   | | |-ImplicitCastExpr 0x55edf952d830 <col:9> 'unsigned int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x55edf952d7e8 <col:9> 'unsigned int' lvalue Var 0x55edf952d2f0 'n' 'unsigned int'
|   | | `-ImplicitCastExpr 0x55edf952d848 <col:14> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x55edf952d810 <col:14> 'int' 0
|   | |-CompoundStmt 0x55edf952d8a8 <col:17, line:577:5>
|   | `-<<<NULL>>>
|   |-IfStmt 0x55edf952dbe8 <line:580:5, line:583:5>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-OpaqueValueExpr 0x55edf952dbc8 <<invalid sloc>> '_Bool'
|   | |-CompoundStmt 0x55edf952dbb8 <line:580:42, line:583:5>
|   | `-<<<NULL>>>
|   `-WhileStmt 0x55edf952df58 <line:587:5, line:595:5>
|     |-<<<NULL>>>
|     |-UnaryOperator 0x55edf952dcb0 <line:587:12, col:13> 'unsigned int' postfix '--'
|     | `-DeclRefExpr 0x55edf952dc88 <col:12> 'unsigned int' lvalue Var 0x55edf952d2f0 'n' 'unsigned int'
|     `-CompoundStmt 0x55edf952df38 <col:17, line:595:5>
|       |-UnaryOperator 0x55edf952dcf8 <line:588:9, col:10> 'const unsigned char *' postfix '--'
|       | `-DeclRefExpr 0x55edf952dcd0 <col:9> 'const unsigned char *' lvalue ParmVar 0x55edf952cf38 's' 'const unsigned char *'
|       `-IfStmt 0x55edf952df00 <line:590:9, line:594:9>
|         |-<<<NULL>>>
|         |-<<<NULL>>>
|         |-BinaryOperator 0x55edf952de18 <line:590:13, col:20> 'int' '=='
|         | |-UnaryOperator 0x55edf952ddc0 <col:13, col:14> 'unsigned int' postfix '--'
|         | | `-DeclRefExpr 0x55edf952dd98 <col:13> 'unsigned int' lvalue Var 0x55edf952d228 'm' 'unsigned int'
|         | `-ImplicitCastExpr 0x55edf952de00 <col:20> 'unsigned int' <IntegralCast>
|         |   `-IntegerLiteral 0x55edf952dde0 <col:20> 'int' 0
|         |-CompoundStmt 0x55edf952def0 <col:23, line:594:9>
|         `-<<<NULL>>>
|-FunctionDecl 0x55edf952e198 <line:604:1, line:622:1> line:604:5 invalid BN_bn2lebinpad 'int (const int *, unsigned char *, int)'
| |-ParmVarDecl 0x55edf952e008 <col:20, col:34> col:34 invalid a 'const int *'
| |-ParmVarDecl 0x55edf952e080 <col:37, col:52> col:52 used to 'unsigned char *'
| |-ParmVarDecl 0x55edf952e0f8 <col:56, col:60> col:60 used tolen 'int'
| `-CompoundStmt 0x55edf952ed28 <line:605:1, line:622:1>
|   |-DeclStmt 0x55edf952e300 <line:606:5, col:10>
|   | `-VarDecl 0x55edf952e280 <col:5, col:9> col:9 used i 'int'
|   |-IfStmt 0x55edf952e4c0 <line:610:5, line:611:17>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x55edf952e440 <line:610:9, col:17> 'int' '<'
|   | | |-ImplicitCastExpr 0x55edf952e410 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x55edf952e3a8 <col:9> 'int' lvalue ParmVar 0x55edf952e0f8 'tolen' 'int'
|   | | `-ImplicitCastExpr 0x55edf952e428 <col:17> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x55edf952e3e8 <col:17> 'int' lvalue Var 0x55edf952e280 'i' 'int'
|   | |-ReturnStmt 0x55edf952e4a8 <line:611:9, col:17>
|   | | `-UnaryOperator 0x55edf952e488 <col:16, col:17> 'int' prefix '-'
|   | |   `-IntegerLiteral 0x55edf952e468 <col:17> 'int' 1
|   | `-<<<NULL>>>
|   |-IfStmt 0x55edf952ea40 <line:613:5, line:614:36>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x55edf952e578 <line:613:9, col:17> 'int' '>'
|   | | |-ImplicitCastExpr 0x55edf952e548 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x55edf952e4f8 <col:9> 'int' lvalue ParmVar 0x55edf952e0f8 'tolen' 'int'
|   | | `-ImplicitCastExpr 0x55edf952e560 <col:17> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x55edf952e520 <col:17> 'int' lvalue Var 0x55edf952e280 'i' 'int'
|   | |-CallExpr 0x55edf952e9d0 <line:614:9, col:36> 'void *'
|   | | |-ImplicitCastExpr 0x55edf952e9b8 <col:9> 'void *(*)(void *, int, unsigned long)' <FunctionToPointerDecay>
|   | | | `-DeclRefExpr 0x55edf952e7c0 <col:9> 'void *(void *, int, unsigned long)' Function 0x55edf952e5e8 'memset' 'void *(void *, int, unsigned long)'
|   | | |-ImplicitCastExpr 0x55edf952ea10 <col:16, col:21> 'void *' <BitCast>
|   | | | `-BinaryOperator 0x55edf952e898 <col:16, col:21> 'unsigned char *' '+'
|   | | |   |-ImplicitCastExpr 0x55edf952e868 <col:16> 'unsigned char *' <LValueToRValue>
|   | | |   | `-DeclRefExpr 0x55edf952e800 <col:16> 'unsigned char *' lvalue ParmVar 0x55edf952e080 'to' 'unsigned char *'
|   | | |   `-ImplicitCastExpr 0x55edf952e880 <col:21> 'int' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x55edf952e840 <col:21> 'int' lvalue Var 0x55edf952e280 'i' 'int'
|   | | |-IntegerLiteral 0x55edf952e8c0 <col:24> 'int' 0
|   | | `-ImplicitCastExpr 0x55edf952ea28 <col:27, col:35> 'unsigned long' <IntegralCast>
|   | |   `-BinaryOperator 0x55edf952e960 <col:27, col:35> 'int' '-'
|   | |     |-ImplicitCastExpr 0x55edf952e930 <col:27> 'int' <LValueToRValue>
|   | |     | `-DeclRefExpr 0x55edf952e8e0 <col:27> 'int' lvalue ParmVar 0x55edf952e0f8 'tolen' 'int'
|   | |     `-ImplicitCastExpr 0x55edf952e948 <col:35> 'int' <LValueToRValue>
|   | |       `-DeclRefExpr 0x55edf952e908 <col:35> 'int' lvalue Var 0x55edf952e280 'i' 'int'
|   | `-<<<NULL>>>
|   |-CompoundAssignOperator 0x55edf952eae0 <line:615:5, col:11> 'unsigned char *' '+=' ComputeLHSTy='unsigned char *' ComputeResultTy='unsigned char *'
|   | |-DeclRefExpr 0x55edf952ea78 <col:5> 'unsigned char *' lvalue ParmVar 0x55edf952e080 'to' 'unsigned char *'
|   | `-ImplicitCastExpr 0x55edf952eac8 <col:11> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x55edf952eaa0 <col:11> 'int' lvalue Var 0x55edf952e280 'i' 'int'
|   |-WhileStmt 0x55edf952ecb0 <line:616:5, line:620:5>
|   | |-<<<NULL>>>
|   | |-UnaryOperator 0x55edf952eb40 <line:616:12, col:13> 'int' postfix '--'
|   | | `-DeclRefExpr 0x55edf952eb18 <col:12> 'int' lvalue Var 0x55edf952e280 'i' 'int'
|   | `-CompoundStmt 0x55edf952ec98 <col:17, line:620:5>
|   |   `-UnaryOperator 0x55edf952ebb0 <line:618:9, col:11> 'unsigned char *' postfix '--'
|   |     `-DeclRefExpr 0x55edf952eb88 <col:9> 'unsigned char *' lvalue ParmVar 0x55edf952e080 'to' 'unsigned char *'
|   `-ReturnStmt 0x55edf952ed10 <line:621:5, col:12>
|     `-ImplicitCastExpr 0x55edf952ecf8 <col:12> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x55edf952ecd0 <col:12> 'int' lvalue ParmVar 0x55edf952e0f8 'tolen' 'int'
|-FunctionDecl 0x55edf952e5e8 <line:614:9> col:9 implicit used memset 'void *(void *, int, unsigned long)' extern
| |-ParmVarDecl 0x55edf952e688 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x55edf952e6e8 <<invalid sloc>> <invalid sloc> 'int'
| `-ParmVarDecl 0x55edf952e748 <<invalid sloc>> <invalid sloc> 'unsigned long'
|-FunctionDecl 0x55edf952eed8 <line:624:1, line:644:1> line:624:5 invalid BN_ucmp 'int (const int *, const int *)'
| |-ParmVarDecl 0x55edf952ed80 <col:13, col:27> col:27 invalid a 'const int *'
| |-ParmVarDecl 0x55edf952edf8 <col:30, col:44> col:44 invalid b 'const int *'
| `-CompoundStmt 0x55edf952f480 <line:625:1, line:644:1>
|   |-DeclStmt 0x55edf952f018 <line:626:5, col:10>
|   | `-VarDecl 0x55edf952efb8 <col:5, col:9> col:9 used i 'int'
|   |-IfStmt 0x55edf952f1c0 <line:633:5, line:634:18>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x55edf952f120 <line:633:9, col:14> 'int' '!='
|   | | |-ImplicitCastExpr 0x55edf952f108 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x55edf952f0c0 <col:9> 'int' lvalue Var 0x55edf952efb8 'i' 'int'
|   | | `-IntegerLiteral 0x55edf952f0e8 <col:14> 'int' 0
|   | |-ReturnStmt 0x55edf952f1a8 <line:634:9, col:18>
|   | | `-ImplicitCastExpr 0x55edf952f190 <col:16, col:18> 'int' <LValueToRValue>
|   | |   `-ParenExpr 0x55edf952f170 <col:16, col:18> 'int' lvalue
|   | |     `-DeclRefExpr 0x55edf952f148 <col:17> 'int' lvalue Var 0x55edf952efb8 'i' 'int'
|   | `-<<<NULL>>>
|   |-ForStmt 0x55edf952f3f0 <line:637:5, line:642:5>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x55edf952f2a0 <line:637:26, col:31> 'int' '>='
|   | | |-ImplicitCastExpr 0x55edf952f288 <col:26> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x55edf952f240 <col:26> 'int' lvalue Var 0x55edf952efb8 'i' 'int'
|   | | `-IntegerLiteral 0x55edf952f268 <col:31> 'int' 0
|   | |-UnaryOperator 0x55edf952f310 <col:34, col:35> 'int' postfix '--'
|   | | `-DeclRefExpr 0x55edf952f2c8 <col:34> 'int' lvalue Var 0x55edf952efb8 'i' 'int'
|   | `-CompoundStmt 0x55edf952f3e0 <col:39, line:642:5>
|   `-ReturnStmt 0x55edf952f468 <line:643:5, col:14>
|     `-ParenExpr 0x55edf952f448 <col:12, col:14> 'int'
|       `-IntegerLiteral 0x55edf952f428 <col:13> 'int' 0
|-FunctionDecl 0x55edf952f5d8 <line:646:1, line:691:1> line:646:5 invalid BN_cmp 'int (const int *, const int *)'
| |-ParmVarDecl 0x55edf952f4c8 <col:12, col:26> col:26 invalid a 'const int *'
| |-ParmVarDecl 0x55edf952f540 <col:29, col:43> col:43 invalid b 'const int *'
| `-CompoundStmt 0x55edf95304f8 <line:647:1, line:691:1>
|   |-DeclStmt 0x55edf952f718 <line:648:5, col:10>
|   | `-VarDecl 0x55edf952f6b8 <col:5, col:9> col:9 used i 'int'
|   |-DeclStmt 0x55edf952f838 <line:649:5, col:15>
|   | |-VarDecl 0x55edf952f748 <col:5, col:9> col:9 used gt 'int'
|   | `-VarDecl 0x55edf952f7c0 <col:5, col:13> col:13 used lt 'int'
|   |-IfStmt 0x55edf952fa60 <line:652:5, line:659:5>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-OpaqueValueExpr 0x55edf952fa40 <<invalid sloc>> '_Bool'
|   | |-CompoundStmt 0x55edf952fa28 <line:652:37, line:659:5>
|   | | `-IfStmt 0x55edf952f9f0 <line:653:9, line:658:22>
|   | |   |-<<<NULL>>>
|   | |   |-<<<NULL>>>
|   | |   |-OpaqueValueExpr 0x55edf952f9d0 <<invalid sloc>> '_Bool'
|   | |   |-ReturnStmt 0x55edf952f8b0 <line:654:13, col:23>
|   | |   | `-ParenExpr 0x55edf952f890 <col:20, col:23> 'int'
|   | |   |   `-UnaryOperator 0x55edf952f870 <col:21, col:22> 'int' prefix '-'
|   | |   |     `-IntegerLiteral 0x55edf952f850 <col:22> 'int' 1
|   | |   `-IfStmt 0x55edf952f998 <line:655:14, line:658:22>
|   | |     |-<<<NULL>>>
|   | |     |-<<<NULL>>>
|   | |     |-OpaqueValueExpr 0x55edf952f978 <<invalid sloc>> '_Bool'
|   | |     |-ReturnStmt 0x55edf952f908 <line:656:13, col:22>
|   | |     | `-ParenExpr 0x55edf952f8e8 <col:20, col:22> 'int'
|   | |     |   `-IntegerLiteral 0x55edf952f8c8 <col:21> 'int' 1
|   | |     `-ReturnStmt 0x55edf952f960 <line:658:13, col:22>
|   | |       `-ParenExpr 0x55edf952f940 <col:20, col:22> 'int'
|   | |         `-IntegerLiteral 0x55edf952f920 <col:21> 'int' 0
|   | `-<<<NULL>>>
|   |-IfStmt 0x55edf952fc48 <line:664:5, line:669:5>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-OpaqueValueExpr 0x55edf952fc28 <<invalid sloc>> '_Bool'
|   | |-CompoundStmt 0x55edf952fc10 <line:664:27, line:669:5>
|   | | `-IfStmt 0x55edf952fbd8 <line:665:9, line:668:22>
|   | |   |-<<<NULL>>>
|   | |   |-<<<NULL>>>
|   | |   |-OpaqueValueExpr 0x55edf952fbb8 <<invalid sloc>> '_Bool'
|   | |   |-ReturnStmt 0x55edf952fb48 <line:666:13, col:23>
|   | |   | `-ParenExpr 0x55edf952fb28 <col:20, col:23> 'int'
|   | |   |   `-UnaryOperator 0x55edf952fb08 <col:21, col:22> 'int' prefix '-'
|   | |   |     `-IntegerLiteral 0x55edf952fae8 <col:22> 'int' 1
|   | |   `-ReturnStmt 0x55edf952fba0 <line:668:13, col:22>
|   | |     `-ParenExpr 0x55edf952fb80 <col:20, col:22> 'int'
|   | |       `-IntegerLiteral 0x55edf952fb60 <col:21> 'int' 1
|   | `-<<<NULL>>>
|   |-IfStmt 0x55edf952ff30 <line:670:5, line:676:5>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-OpaqueValueExpr 0x55edf952ff10 <<invalid sloc>> '_Bool'
|   | |-CompoundStmt 0x55edf952fdd0 <line:670:22, line:673:5>
|   | | |-BinaryOperator 0x55edf952fd00 <line:671:9, col:14> 'int' '='
|   | | | |-DeclRefExpr 0x55edf952fca0 <col:9> 'int' lvalue Var 0x55edf952f748 'gt' 'int'
|   | | | `-IntegerLiteral 0x55edf952fce0 <col:14> 'int' 1
|   | | `-BinaryOperator 0x55edf952fda8 <line:672:9, col:15> 'int' '='
|   | |   |-DeclRefExpr 0x55edf952fd28 <col:9> 'int' lvalue Var 0x55edf952f7c0 'lt' 'int'
|   | |   `-UnaryOperator 0x55edf952fd88 <col:14, col:15> 'int' prefix '-'
|   | |     `-IntegerLiteral 0x55edf952fd68 <col:15> 'int' 1
|   | `-CompoundStmt 0x55edf952fef0 <line:673:12, line:676:5>
|   |   |-BinaryOperator 0x55edf952fe58 <line:674:9, col:15> 'int' '='
|   |   | |-DeclRefExpr 0x55edf952fdf0 <col:9> 'int' lvalue Var 0x55edf952f748 'gt' 'int'
|   |   | `-UnaryOperator 0x55edf952fe38 <col:14, col:15> 'int' prefix '-'
|   |   |   `-IntegerLiteral 0x55edf952fe18 <col:15> 'int' 1
|   |   `-BinaryOperator 0x55edf952fec8 <line:675:9, col:14> 'int' '='
|   |     |-DeclRefExpr 0x55edf952fe80 <col:9> 'int' lvalue Var 0x55edf952f7c0 'lt' 'int'
|   |     `-IntegerLiteral 0x55edf952fea8 <col:14> 'int' 1
|   |-IfStmt 0x55edf9530000 <line:678:5, line:679:19>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-OpaqueValueExpr 0x55edf952ffe0 <<invalid sloc>> '_Bool'
|   | |-ReturnStmt 0x55edf952ffc8 <col:9, col:19>
|   | | `-ImplicitCastExpr 0x55edf952ffb0 <col:16, col:19> 'int' <LValueToRValue>
|   | |   `-ParenExpr 0x55edf952ff90 <col:16, col:19> 'int' lvalue
|   | |     `-DeclRefExpr 0x55edf952ff68 <col:17> 'int' lvalue Var 0x55edf952f748 'gt' 'int'
|   | `-<<<NULL>>>
|   |-IfStmt 0x55edf95300d0 <line:680:5, line:681:19>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-OpaqueValueExpr 0x55edf95300b0 <<invalid sloc>> '_Bool'
|   | |-ReturnStmt 0x55edf9530098 <col:9, col:19>
|   | | `-ImplicitCastExpr 0x55edf9530080 <col:16, col:19> 'int' <LValueToRValue>
|   | |   `-ParenExpr 0x55edf9530060 <col:16, col:19> 'int' lvalue
|   | |     `-DeclRefExpr 0x55edf9530038 <col:17> 'int' lvalue Var 0x55edf952f7c0 'lt' 'int'
|   | `-<<<NULL>>>
|   |-ForStmt 0x55edf9530468 <line:682:5, line:689:5>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x55edf95301c8 <line:682:26, col:31> 'int' '>='
|   | | |-ImplicitCastExpr 0x55edf95301b0 <col:26> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x55edf9530168 <col:26> 'int' lvalue Var 0x55edf952f6b8 'i' 'int'
|   | | `-IntegerLiteral 0x55edf9530190 <col:31> 'int' 0
|   | |-UnaryOperator 0x55edf9530218 <col:34, col:35> 'int' postfix '--'
|   | | `-DeclRefExpr 0x55edf95301f0 <col:34> 'int' lvalue Var 0x55edf952f6b8 'i' 'int'
|   | `-CompoundStmt 0x55edf9530448 <col:39, line:689:5>
|   |   |-IfStmt 0x55edf9530340 <line:685:9, line:686:23>
|   |   | |-<<<NULL>>>
|   |   | |-<<<NULL>>>
|   |   | |-OpaqueValueExpr 0x55edf9530320 <<invalid sloc>> '_Bool'
|   |   | |-ReturnStmt 0x55edf95302e8 <col:13, col:23>
|   |   | | `-ImplicitCastExpr 0x55edf95302d0 <col:20, col:23> 'int' <LValueToRValue>
|   |   | |   `-ParenExpr 0x55edf95302b0 <col:20, col:23> 'int' lvalue
|   |   | |     `-DeclRefExpr 0x55edf9530288 <col:21> 'int' lvalue Var 0x55edf952f748 'gt' 'int'
|   |   | `-<<<NULL>>>
|   |   `-IfStmt 0x55edf9530410 <line:687:9, line:688:23>
|   |     |-<<<NULL>>>
|   |     |-<<<NULL>>>
|   |     |-OpaqueValueExpr 0x55edf95303f0 <<invalid sloc>> '_Bool'
|   |     |-ReturnStmt 0x55edf95303d8 <col:13, col:23>
|   |     | `-ImplicitCastExpr 0x55edf95303c0 <col:20, col:23> 'int' <LValueToRValue>
|   |     |   `-ParenExpr 0x55edf95303a0 <col:20, col:23> 'int' lvalue
|   |     |     `-DeclRefExpr 0x55edf9530378 <col:21> 'int' lvalue Var 0x55edf952f7c0 'lt' 'int'
|   |     `-<<<NULL>>>
|   `-ReturnStmt 0x55edf95304e0 <line:690:5, col:14>
|     `-ParenExpr 0x55edf95304c0 <col:12, col:14> 'int'
|       `-IntegerLiteral 0x55edf95304a0 <col:13> 'int' 0
|-FunctionDecl 0x55edf9530678 <line:693:1, line:714:1> line:693:5 invalid BN_set_bit 'int (int *, int)'
| |-ParmVarDecl 0x55edf9530568 <col:16, col:24> col:24 invalid a 'int *'
| |-ParmVarDecl 0x55edf95305e0 <col:27, col:31> col:31 used n 'int'
| `-CompoundStmt 0x55edf9530fd0 <line:694:1, line:714:1>
|   |-DeclStmt 0x55edf95308c8 <line:695:5, col:16>
|   | |-VarDecl 0x55edf9530758 <col:5, col:9> col:9 used i 'int'
|   | |-VarDecl 0x55edf95307d0 <col:5, col:12> col:12 used j 'int'
|   | `-VarDecl 0x55edf9530848 <col:5, col:15> col:15 used k 'int'
|   |-IfStmt 0x55edf95309b8 <line:697:5, line:698:16>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x55edf9530958 <line:697:9, col:13> 'int' '<'
|   | | |-ImplicitCastExpr 0x55edf9530940 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x55edf95308e0 <col:9> 'int' lvalue ParmVar 0x55edf95305e0 'n' 'int'
|   | | `-IntegerLiteral 0x55edf9530920 <col:13> 'int' 0
|   | |-ReturnStmt 0x55edf95309a0 <line:698:9, col:16>
|   | | `-IntegerLiteral 0x55edf9530980 <col:16> 'int' 0
|   | `-<<<NULL>>>
|   |-IfStmt 0x55edf9530ec8 <line:702:5, line:709:5>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-OpaqueValueExpr 0x55edf9530ea8 <<invalid sloc>> '_Bool'
|   | |-CompoundStmt 0x55edf9530e90 <line:702:22, line:709:5>
|   | | `-IfStmt 0x55edf9530c10 <line:703:9, line:704:22>
|   | |   |-<<<NULL>>>
|   | |   |-<<<NULL>>>
|   | |   |-OpaqueValueExpr 0x55edf9530bf0 <<invalid sloc>> '_Bool'
|   | |   |-ReturnStmt 0x55edf9530bd8 <col:13, col:22>
|   | |   | `-ParenExpr 0x55edf9530bb8 <col:20, col:22> 'int'
|   | |   |   `-IntegerLiteral 0x55edf9530b98 <col:21> 'int' 0
|   | |   `-<<<NULL>>>
|   | `-<<<NULL>>>
|   `-ReturnStmt 0x55edf9530fb8 <line:713:5, col:14>
|     `-ParenExpr 0x55edf9530f98 <col:12, col:14> 'int'
|       `-IntegerLiteral 0x55edf9530f78 <col:13> 'int' 1
|-FunctionDecl 0x55edf9531128 <line:716:1, line:732:1> line:716:5 invalid BN_clear_bit 'int (int *, int)'
| |-ParmVarDecl 0x55edf9531018 <col:18, col:26> col:26 invalid a 'int *'
| |-ParmVarDecl 0x55edf9531090 <col:29, col:33> col:33 used n 'int'
| `-CompoundStmt 0x55edf95316e0 <line:717:1, line:732:1>
|   |-DeclStmt 0x55edf95312f8 <line:718:5, col:13>
|   | |-VarDecl 0x55edf9531208 <col:5, col:9> col:9 used i 'int'
|   | `-VarDecl 0x55edf9531280 <col:5, col:12> col:12 used j 'int'
|   |-IfStmt 0x55edf9531430 <line:721:5, line:722:16>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x55edf95313d0 <line:721:9, col:13> 'int' '<'
|   | | |-ImplicitCastExpr 0x55edf95313b8 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x55edf9531358 <col:9> 'int' lvalue ParmVar 0x55edf9531090 'n' 'int'
|   | | `-IntegerLiteral 0x55edf9531398 <col:13> 'int' 0
|   | |-ReturnStmt 0x55edf9531418 <line:722:9, col:16>
|   | | `-IntegerLiteral 0x55edf95313f8 <col:16> 'int' 0
|   | `-<<<NULL>>>
|   |-IfStmt 0x55edf95315d8 <line:726:5, line:727:18>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-OpaqueValueExpr 0x55edf95315b8 <<invalid sloc>> '_Bool'
|   | |-ReturnStmt 0x55edf95315a0 <col:9, col:18>
|   | | `-ParenExpr 0x55edf9531580 <col:16, col:18> 'int'
|   | |   `-IntegerLiteral 0x55edf9531560 <col:17> 'int' 0
|   | `-<<<NULL>>>
|   `-ReturnStmt 0x55edf95316c8 <line:731:5, col:14>
|     `-ParenExpr 0x55edf95316a8 <col:12, col:14> 'int'
|       `-IntegerLiteral 0x55edf9531688 <col:13> 'int' 1
|-FunctionDecl 0x55edf9531878 <line:734:1, line:746:1> line:734:5 invalid BN_is_bit_set 'int (const int *, int)'
| |-ParmVarDecl 0x55edf9531728 <col:19, col:33> col:33 invalid a 'const int *'
| |-ParmVarDecl 0x55edf95317a0 <col:36, col:40> col:40 used n 'int'
| `-CompoundStmt 0x55edf9531d70 <line:735:1, line:746:1>
|   |-DeclStmt 0x55edf9531a48 <line:736:5, col:13>
|   | |-VarDecl 0x55edf9531958 <col:5, col:9> col:9 used i 'int'
|   | `-VarDecl 0x55edf95319d0 <col:5, col:12> col:12 used j 'int'
|   |-IfStmt 0x55edf9531b60 <line:739:5, line:740:16>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x55edf9531b00 <line:739:9, col:13> 'int' '<'
|   | | |-ImplicitCastExpr 0x55edf9531ae8 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x55edf9531a88 <col:9> 'int' lvalue ParmVar 0x55edf95317a0 'n' 'int'
|   | | `-IntegerLiteral 0x55edf9531ac8 <col:13> 'int' 0
|   | |-ReturnStmt 0x55edf9531b48 <line:740:9, col:16>
|   | | `-IntegerLiteral 0x55edf9531b28 <col:16> 'int' 0
|   | `-<<<NULL>>>
|   `-IfStmt 0x55edf9531ce8 <line:743:5, line:744:16>
|     |-<<<NULL>>>
|     |-<<<NULL>>>
|     |-OpaqueValueExpr 0x55edf9531cc8 <<invalid sloc>> '_Bool'
|     |-ReturnStmt 0x55edf9531cb0 <col:9, col:16>
|     | `-IntegerLiteral 0x55edf9531c90 <col:16> 'int' 0
|     `-<<<NULL>>>
|-FunctionDecl 0x55edf9531ec0 <line:748:1, line:768:1> line:748:5 invalid BN_mask_bits 'int (int *, int)'
| |-ParmVarDecl 0x55edf9531db0 <col:18, col:26> col:26 invalid a 'int *'
| |-ParmVarDecl 0x55edf9531e28 <col:29, col:33> col:33 used n 'int'
| `-CompoundStmt 0x55edf95335e8 <line:749:1, line:768:1>
|   |-DeclStmt 0x55edf9532090 <line:750:5, col:13>
|   | |-VarDecl 0x55edf9531fa0 <col:5, col:9> col:9 used b 'int'
|   | `-VarDecl 0x55edf9532018 <col:5, col:12> col:12 used w 'int'
|   |-IfStmt 0x55edf95321a8 <line:753:5, line:754:16>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x55edf9532148 <line:753:9, col:13> 'int' '<'
|   | | |-ImplicitCastExpr 0x55edf9532130 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x55edf95320d0 <col:9> 'int' lvalue ParmVar 0x55edf9531e28 'n' 'int'
|   | | `-IntegerLiteral 0x55edf9532110 <col:13> 'int' 0
|   | |-ReturnStmt 0x55edf9532190 <line:754:9, col:16>
|   | | `-IntegerLiteral 0x55edf9532170 <col:16> 'int' 0
|   | `-<<<NULL>>>
|   |-IfStmt 0x55edf9533350 <line:758:5, line:759:16>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-OpaqueValueExpr 0x55edf9532310 <<invalid sloc>> '_Bool'
|   | |-ReturnStmt 0x55edf95322f8 <col:9, col:16>
|   | | `-IntegerLiteral 0x55edf95322d8 <col:16> 'int' 0
|   | `-<<<NULL>>>
|   |-IfStmt 0x55edf9533530 <line:760:5, line:765:5>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x55edf95333e8 <line:760:9, col:14> 'int' '=='
|   | | |-ImplicitCastExpr 0x55edf95333d0 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x55edf9533388 <col:9> 'int' lvalue Var 0x55edf9531fa0 'b' 'int'
|   | | `-IntegerLiteral 0x55edf95333b0 <col:14> 'int' 0
|   | |-NullStmt 0x55edf9533520 <line:761:9>
|   | `-CompoundStmt 0x55edf9533510 <line:762:10, line:765:5>
|   `-ReturnStmt 0x55edf95335d0 <line:767:5, col:14>
|     `-ParenExpr 0x55edf95335b0 <col:12, col:14> 'int'
|       `-IntegerLiteral 0x55edf9533590 <col:13> 'int' 1
|-FunctionDecl 0x55edf9533780 <line:770:1, line:776:1> line:770:6 invalid BN_set_negative 'void (int *, int)'
| |-ParmVarDecl 0x55edf9533638 <col:22, col:30> col:30 invalid a 'int *'
| |-ParmVarDecl 0x55edf95336b0 <col:33, col:37> col:37 used b 'int'
| `-CompoundStmt 0x55edf95338f0 <line:771:1, line:776:1>
|-FunctionDecl 0x55edf9533af8 <line:778:1, line:797:1> line:778:5 invalid bn_cmp_words 'int (const int *, const int *, int)'
| |-ParmVarDecl 0x55edf9533918 <col:18, col:34> col:34 invalid a 'const int *'
| |-ParmVarDecl 0x55edf9533990 <col:37, col:53> col:53 invalid b 'const int *'
| |-ParmVarDecl 0x55edf9533a08 <col:56, col:60> col:60 used n 'int'
| `-CompoundStmt 0x55edf95341e8 <line:779:1, line:797:1>
|   |-DeclStmt 0x55edf9533c40 <line:780:5, col:10>
|   | `-VarDecl 0x55edf9533be0 <col:5, col:9> col:9 used i 'int'
|   |-IfStmt 0x55edf9533d30 <line:783:5, line:784:16>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x55edf9533cd0 <line:783:9, col:14> 'int' '=='
|   | | |-ImplicitCastExpr 0x55edf9533cb8 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x55edf9533c58 <col:9> 'int' lvalue ParmVar 0x55edf9533a08 'n' 'int'
|   | | `-IntegerLiteral 0x55edf9533c98 <col:14> 'int' 0
|   | |-ReturnStmt 0x55edf9533d18 <line:784:9, col:16>
|   | | `-IntegerLiteral 0x55edf9533cf8 <col:16> 'int' 0
|   | `-<<<NULL>>>
|   |-ForStmt 0x55edf9534158 <line:790:5, line:795:5>
|   | |-BinaryOperator 0x55edf9533fa0 <line:790:10, col:18> 'int' '='
|   | | |-DeclRefExpr 0x55edf9533ed8 <col:10> 'int' lvalue Var 0x55edf9533be0 'i' 'int'
|   | | `-BinaryOperator 0x55edf9533f78 <col:14, col:18> 'int' '-'
|   | |   |-ImplicitCastExpr 0x55edf9533f60 <col:14> 'int' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x55edf9533f18 <col:14> 'int' lvalue ParmVar 0x55edf9533a08 'n' 'int'
|   | |   `-IntegerLiteral 0x55edf9533f40 <col:18> 'int' 2
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x55edf9534028 <col:21, col:26> 'int' '>='
|   | | |-ImplicitCastExpr 0x55edf9534010 <col:21> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x55edf9533fc8 <col:21> 'int' lvalue Var 0x55edf9533be0 'i' 'int'
|   | | `-IntegerLiteral 0x55edf9533ff0 <col:26> 'int' 0
|   | |-UnaryOperator 0x55edf9534078 <col:29, col:30> 'int' postfix '--'
|   | | `-DeclRefExpr 0x55edf9534050 <col:29> 'int' lvalue Var 0x55edf9533be0 'i' 'int'
|   | `-CompoundStmt 0x55edf9534148 <col:34, line:795:5>
|   `-ReturnStmt 0x55edf95341d0 <line:796:5, col:14>
|     `-ParenExpr 0x55edf95341b0 <col:12, col:14> 'int'
|       `-IntegerLiteral 0x55edf9534190 <col:13> 'int' 0
|-FunctionDecl 0x55edf95344d8 <line:808:1, line:826:1> line:808:5 invalid bn_cmp_part_words 'int (const int *, const int *, int, int)'
| |-ParmVarDecl 0x55edf9534230 <col:23, col:39> col:39 invalid a 'const int *'
| |-ParmVarDecl 0x55edf95342a8 <col:42, col:58> col:58 invalid b 'const int *'
| |-ParmVarDecl 0x55edf9534360 <col:61, col:65> col:65 used cl 'int'
| |-ParmVarDecl 0x55edf95343d8 <col:69, col:73> col:73 used dl 'int'
| `-CompoundStmt 0x55edf9535010 <line:809:1, line:826:1>
|   |-DeclStmt 0x55edf95346b8 <line:810:5, col:13>
|   | |-VarDecl 0x55edf95345c8 <col:5, col:9> col:9 used n 'int'
|   | `-VarDecl 0x55edf9534640 <col:5, col:12> col:12 used i 'int'
|   |-BinaryOperator 0x55edf95347b0 <line:811:5, col:14> 'int' '='
|   | |-DeclRefExpr 0x55edf95346d0 <col:5> 'int' lvalue Var 0x55edf95345c8 'n' 'int'
|   | `-BinaryOperator 0x55edf9534788 <col:9, col:14> 'int' '-'
|   |   |-ImplicitCastExpr 0x55edf9534770 <col:9> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x55edf9534710 <col:9> 'int' lvalue ParmVar 0x55edf9534360 'cl' 'int'
|   |   `-IntegerLiteral 0x55edf9534750 <col:14> 'int' 1
|   |-IfStmt 0x55edf9534bd0 <line:813:5, line:818:5>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x55edf9534850 <line:813:9, col:14> 'int' '<'
|   | | |-ImplicitCastExpr 0x55edf9534838 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x55edf95347d8 <col:9> 'int' lvalue ParmVar 0x55edf95343d8 'dl' 'int'
|   | | `-IntegerLiteral 0x55edf9534818 <col:14> 'int' 0
|   | |-CompoundStmt 0x55edf9534bb8 <col:17, line:818:5>
|   | | `-ForStmt 0x55edf9534b80 <line:814:9, line:817:9>
|   | |   |-BinaryOperator 0x55edf95348f8 <line:814:14, col:18> 'int' '='
|   | |   | |-DeclRefExpr 0x55edf9534878 <col:14> 'int' lvalue Var 0x55edf9534640 'i' 'int'
|   | |   | `-ImplicitCastExpr 0x55edf95348e0 <col:18> 'int' <LValueToRValue>
|   | |   |   `-DeclRefExpr 0x55edf95348b8 <col:18> 'int' lvalue ParmVar 0x55edf95343d8 'dl' 'int'
|   | |   |-<<<NULL>>>
|   | |   |-BinaryOperator 0x55edf9534980 <col:22, col:26> 'int' '<'
|   | |   | |-ImplicitCastExpr 0x55edf9534968 <col:22> 'int' <LValueToRValue>
|   | |   | | `-DeclRefExpr 0x55edf9534920 <col:22> 'int' lvalue Var 0x55edf9534640 'i' 'int'
|   | |   | `-IntegerLiteral 0x55edf9534948 <col:26> 'int' 0
|   | |   |-UnaryOperator 0x55edf95349d0 <col:29, col:30> 'int' postfix '++'
|   | |   | `-DeclRefExpr 0x55edf95349a8 <col:29> 'int' lvalue Var 0x55edf9534640 'i' 'int'
|   | |   `-CompoundStmt 0x55edf9534b68 <col:34, line:817:9>
|   | |     `-IfStmt 0x55edf9534b30 <line:815:13, line:816:25>
|   | |       |-<<<NULL>>>
|   | |       |-<<<NULL>>>
|   | |       |-OpaqueValueExpr 0x55edf9534b10 <<invalid sloc>> '_Bool'
|   | |       |-ReturnStmt 0x55edf9534af8 <col:17, col:25>
|   | |       | `-UnaryOperator 0x55edf9534ad8 <col:24, col:25> 'int' prefix '-'
|   | |       |   `-IntegerLiteral 0x55edf9534ab8 <col:25> 'int' 1
|   | |       `-<<<NULL>>>
|   | `-<<<NULL>>>
|   `-IfStmt 0x55edf9534fb0 <line:819:5, line:824:5>
|     |-<<<NULL>>>
|     |-<<<NULL>>>
|     |-BinaryOperator 0x55edf9534c68 <line:819:9, col:14> 'int' '>'
|     | |-ImplicitCastExpr 0x55edf9534c50 <col:9> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x55edf9534c08 <col:9> 'int' lvalue ParmVar 0x55edf95343d8 'dl' 'int'
|     | `-IntegerLiteral 0x55edf9534c30 <col:14> 'int' 0
|     |-CompoundStmt 0x55edf9534f98 <col:17, line:824:5>
|     | `-ForStmt 0x55edf9534f60 <line:820:9, line:823:9>
|     |   |-BinaryOperator 0x55edf9534cf8 <line:820:14, col:18> 'int' '='
|     |   | |-DeclRefExpr 0x55edf9534c90 <col:14> 'int' lvalue Var 0x55edf9534640 'i' 'int'
|     |   | `-ImplicitCastExpr 0x55edf9534ce0 <col:18> 'int' <LValueToRValue>
|     |   |   `-DeclRefExpr 0x55edf9534cb8 <col:18> 'int' lvalue ParmVar 0x55edf95343d8 'dl' 'int'
|     |   |-<<<NULL>>>
|     |   |-BinaryOperator 0x55edf9534d80 <col:22, col:26> 'int' '>'
|     |   | |-ImplicitCastExpr 0x55edf9534d68 <col:22> 'int' <LValueToRValue>
|     |   | | `-DeclRefExpr 0x55edf9534d20 <col:22> 'int' lvalue Var 0x55edf9534640 'i' 'int'
|     |   | `-IntegerLiteral 0x55edf9534d48 <col:26> 'int' 0
|     |   |-UnaryOperator 0x55edf9534dd0 <col:29, col:30> 'int' postfix '--'
|     |   | `-DeclRefExpr 0x55edf9534da8 <col:29> 'int' lvalue Var 0x55edf9534640 'i' 'int'
|     |   `-CompoundStmt 0x55edf9534f48 <col:34, line:823:9>
|     |     `-IfStmt 0x55edf9534f10 <line:821:13, line:822:24>
|     |       |-<<<NULL>>>
|     |       |-<<<NULL>>>
|     |       |-OpaqueValueExpr 0x55edf9534ef0 <<invalid sloc>> '_Bool'
|     |       |-ReturnStmt 0x55edf9534ed8 <col:17, col:24>
|     |       | `-IntegerLiteral 0x55edf9534eb8 <col:24> 'int' 1
|     |       `-<<<NULL>>>
|     `-<<<NULL>>>
|-FunctionDecl 0x55edf95352b0 <line:835:1, line:919:1> line:835:6 invalid BN_consttime_swap 'void (int, int *, int *, int)'
| |-ParmVarDecl 0x55edf9535058 <col:24, col:33> col:33 invalid condition 'int'
| |-ParmVarDecl 0x55edf95350d0 <col:44, col:52> col:52 invalid a 'int *'
| |-ParmVarDecl 0x55edf9535148 <col:55, col:63> col:63 invalid b 'int *'
| |-ParmVarDecl 0x55edf95351c0 <col:66, col:70> col:70 used nwords 'int'
| `-CompoundStmt 0x55edf9538050 <line:836:1, line:919:1>
|   |-DeclStmt 0x55edf9535420 <line:838:5, col:10>
|   | `-VarDecl 0x55edf95353c0 <col:5, col:9> col:9 used i 'int'
|   `-SwitchStmt 0x55edf9536308 <line:892:5, line:917:5>
|     |-<<<NULL>>>
|     |-<<<NULL>>>
|     |-ImplicitCastExpr 0x55edf95362f0 <line:892:13> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x55edf95362c8 <col:13> 'int' lvalue ParmVar 0x55edf95351c0 'nwords' 'int'
|     `-CompoundStmt 0x55edf9537fe8 <col:21, line:917:5>
|       |-DefaultStmt 0x55edf9537438 <line:893:5, line:890:19>
|       | `-ForStmt 0x55edf9537400 <line:894:9, line:890:19>
|       |   |-BinaryOperator 0x55edf95371f8 <line:894:14, col:18> 'int' '='
|       |   | |-DeclRefExpr 0x55edf9536338 <col:14> 'int' lvalue Var 0x55edf95353c0 'i' 'int'
|       |   | `-IntegerLiteral 0x55edf95371d8 <col:18> 'int' 10
|       |   |-<<<NULL>>>
|       |   |-BinaryOperator 0x55edf95372a0 <col:22, col:26> 'int' '<'
|       |   | |-ImplicitCastExpr 0x55edf9537270 <col:22> 'int' <LValueToRValue>
|       |   | | `-DeclRefExpr 0x55edf9537220 <col:22> 'int' lvalue Var 0x55edf95353c0 'i' 'int'
|       |   | `-ImplicitCastExpr 0x55edf9537288 <col:26> 'int' <LValueToRValue>
|       |   |   `-DeclRefExpr 0x55edf9537248 <col:26> 'int' lvalue ParmVar 0x55edf95351c0 'nwords' 'int'
|       |   |-UnaryOperator 0x55edf95372f0 <col:34, col:35> 'int' postfix '++'
|       |   | `-DeclRefExpr 0x55edf95372c8 <col:34> 'int' lvalue Var 0x55edf95353c0 'i' 'int'
|       |   `-DoStmt 0x55edf95373e0 <line:886:9, line:890:19>
|       |     |-CompoundStmt 0x55edf95373b0 <line:886:12, line:890:9>
|       |     `-IntegerLiteral 0x55edf95373c0 <col:18> 'int' 0
|       |-CaseStmt 0x55edf9537478 <line:897:5, line:890:19>
|       | |-IntegerLiteral 0x55edf9537458 <line:897:10> 'int' 10
|       | |-<<<NULL>>>
|       | `-DoStmt 0x55edf9537560 <line:886:9, line:890:19>
|       |   |-CompoundStmt 0x55edf9537530 <line:886:12, line:890:9>
|       |   `-IntegerLiteral 0x55edf9537540 <col:18> 'int' 0
|       |-CaseStmt 0x55edf95375a0 <line:899:5, line:890:19>
|       | |-IntegerLiteral 0x55edf9537580 <line:899:10> 'int' 9
|       | |-<<<NULL>>>
|       | `-DoStmt 0x55edf9537688 <line:886:9, line:890:19>
|       |   |-CompoundStmt 0x55edf9537658 <line:886:12, line:890:9>
|       |   `-IntegerLiteral 0x55edf9537668 <col:18> 'int' 0
|       |-CaseStmt 0x55edf95376c8 <line:901:5, line:890:19>
|       | |-IntegerLiteral 0x55edf95376a8 <line:901:10> 'int' 8
|       | |-<<<NULL>>>
|       | `-DoStmt 0x55edf95377b0 <line:886:9, line:890:19>
|       |   |-CompoundStmt 0x55edf9537780 <line:886:12, line:890:9>
|       |   `-IntegerLiteral 0x55edf9537790 <col:18> 'int' 0
|       |-CaseStmt 0x55edf95377f0 <line:903:5, line:890:19>
|       | |-IntegerLiteral 0x55edf95377d0 <line:903:10> 'int' 7
|       | |-<<<NULL>>>
|       | `-DoStmt 0x55edf95378d8 <line:886:9, line:890:19>
|       |   |-CompoundStmt 0x55edf95378a8 <line:886:12, line:890:9>
|       |   `-IntegerLiteral 0x55edf95378b8 <col:18> 'int' 0
|       |-CaseStmt 0x55edf9537918 <line:905:5, line:890:19>
|       | |-IntegerLiteral 0x55edf95378f8 <line:905:10> 'int' 6
|       | |-<<<NULL>>>
|       | `-DoStmt 0x55edf9537a00 <line:886:9, line:890:19>
|       |   |-CompoundStmt 0x55edf95379d0 <line:886:12, line:890:9>
|       |   `-IntegerLiteral 0x55edf95379e0 <col:18> 'int' 0
|       |-CaseStmt 0x55edf9537a40 <line:907:5, line:890:19>
|       | |-IntegerLiteral 0x55edf9537a20 <line:907:10> 'int' 5
|       | |-<<<NULL>>>
|       | `-DoStmt 0x55edf9537b28 <line:886:9, line:890:19>
|       |   |-CompoundStmt 0x55edf9537af8 <line:886:12, line:890:9>
|       |   `-IntegerLiteral 0x55edf9537b08 <col:18> 'int' 0
|       |-CaseStmt 0x55edf9537b68 <line:909:5, line:890:19>
|       | |-IntegerLiteral 0x55edf9537b48 <line:909:10> 'int' 4
|       | |-<<<NULL>>>
|       | `-DoStmt 0x55edf9537c50 <line:886:9, line:890:19>
|       |   |-CompoundStmt 0x55edf9537c20 <line:886:12, line:890:9>
|       |   `-IntegerLiteral 0x55edf9537c30 <col:18> 'int' 0
|       |-CaseStmt 0x55edf9537c90 <line:911:5, line:890:19>
|       | |-IntegerLiteral 0x55edf9537c70 <line:911:10> 'int' 3
|       | |-<<<NULL>>>
|       | `-DoStmt 0x55edf9537d78 <line:886:9, line:890:19>
|       |   |-CompoundStmt 0x55edf9537d48 <line:886:12, line:890:9>
|       |   `-IntegerLiteral 0x55edf9537d58 <col:18> 'int' 0
|       |-CaseStmt 0x55edf9537db8 <line:913:5, line:890:19>
|       | |-IntegerLiteral 0x55edf9537d98 <line:913:10> 'int' 2
|       | |-<<<NULL>>>
|       | `-DoStmt 0x55edf9537ea0 <line:886:9, line:890:19>
|       |   |-CompoundStmt 0x55edf9537e70 <line:886:12, line:890:9>
|       |   `-IntegerLiteral 0x55edf9537e80 <col:18> 'int' 0
|       `-CaseStmt 0x55edf9537ee0 <line:915:5, line:890:19>
|         |-IntegerLiteral 0x55edf9537ec0 <line:915:10> 'int' 1
|         |-<<<NULL>>>
|         `-DoStmt 0x55edf9537fc8 <line:886:9, line:890:19>
|           |-CompoundStmt 0x55edf9537f98 <line:886:12, line:890:9>
|           `-IntegerLiteral 0x55edf9537fa8 <col:18> 'int' 0
|-FunctionDecl 0x55edf9538348 <line:923:1, line:944:1> line:923:5 BN_security_bits 'int (int, int)'
| |-ParmVarDecl 0x55edf9538088 <col:22, col:26> col:26 used L 'int'
| |-ParmVarDecl 0x55edf9538100 <col:29, col:33> col:33 used N 'int'
| `-CompoundStmt 0x55edf9539000 <line:924:1, line:944:1>
|   |-DeclStmt 0x55edf9538518 <line:925:5, col:22>
|   | |-VarDecl 0x55edf9538428 <col:5, col:9> col:9 used secbits 'int'
|   | `-VarDecl 0x55edf95384a0 <col:5, col:18> col:18 used bits 'int'
|   |-IfStmt 0x55edf9538b38 <line:926:5, line:937:16>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x55edf9538590 <line:926:9, col:14> 'int' '>='
|   | | |-ImplicitCastExpr 0x55edf9538578 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x55edf9538530 <col:9> 'int' lvalue ParmVar 0x55edf9538088 'L' 'int'
|   | | `-IntegerLiteral 0x55edf9538558 <col:14> 'int' 15360
|   | |-BinaryOperator 0x55edf9538618 <line:927:9, col:19> 'int' '='
|   | | |-DeclRefExpr 0x55edf95385b8 <col:9> 'int' lvalue Var 0x55edf9538428 'secbits' 'int'
|   | | `-IntegerLiteral 0x55edf95385f8 <col:19> 'int' 256
|   | `-IfStmt 0x55edf9538b00 <line:928:10, line:937:16>
|   |   |-<<<NULL>>>
|   |   |-<<<NULL>>>
|   |   |-BinaryOperator 0x55edf95386a0 <line:928:14, col:19> 'int' '>='
|   |   | |-ImplicitCastExpr 0x55edf9538688 <col:14> 'int' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x55edf9538640 <col:14> 'int' lvalue ParmVar 0x55edf9538088 'L' 'int'
|   |   | `-IntegerLiteral 0x55edf9538668 <col:19> 'int' 7680
|   |   |-BinaryOperator 0x55edf9538710 <line:929:9, col:19> 'int' '='
|   |   | |-DeclRefExpr 0x55edf95386c8 <col:9> 'int' lvalue Var 0x55edf9538428 'secbits' 'int'
|   |   | `-IntegerLiteral 0x55edf95386f0 <col:19> 'int' 192
|   |   `-IfStmt 0x55edf9538ac8 <line:930:10, line:937:16>
|   |     |-<<<NULL>>>
|   |     |-<<<NULL>>>
|   |     |-BinaryOperator 0x55edf9538798 <line:930:14, col:19> 'int' '>='
|   |     | |-ImplicitCastExpr 0x55edf9538780 <col:14> 'int' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x55edf9538738 <col:14> 'int' lvalue ParmVar 0x55edf9538088 'L' 'int'
|   |     | `-IntegerLiteral 0x55edf9538760 <col:19> 'int' 3072
|   |     |-BinaryOperator 0x55edf9538808 <line:931:9, col:19> 'int' '='
|   |     | |-DeclRefExpr 0x55edf95387c0 <col:9> 'int' lvalue Var 0x55edf9538428 'secbits' 'int'
|   |     | `-IntegerLiteral 0x55edf95387e8 <col:19> 'int' 128
|   |     `-IfStmt 0x55edf9538a90 <line:932:10, line:937:16>
|   |       |-<<<NULL>>>
|   |       |-<<<NULL>>>
|   |       |-BinaryOperator 0x55edf9538890 <line:932:14, col:19> 'int' '>='
|   |       | |-ImplicitCastExpr 0x55edf9538878 <col:14> 'int' <LValueToRValue>
|   |       | | `-DeclRefExpr 0x55edf9538830 <col:14> 'int' lvalue ParmVar 0x55edf9538088 'L' 'int'
|   |       | `-IntegerLiteral 0x55edf9538858 <col:19> 'int' 2048
|   |       |-BinaryOperator 0x55edf9538900 <line:933:9, col:19> 'int' '='
|   |       | |-DeclRefExpr 0x55edf95388b8 <col:9> 'int' lvalue Var 0x55edf9538428 'secbits' 'int'
|   |       | `-IntegerLiteral 0x55edf95388e0 <col:19> 'int' 112
|   |       `-IfStmt 0x55edf9538a58 <line:934:10, line:937:16>
|   |         |-<<<NULL>>>
|   |         |-<<<NULL>>>
|   |         |-BinaryOperator 0x55edf9538988 <line:934:14, col:19> 'int' '>='
|   |         | |-ImplicitCastExpr 0x55edf9538970 <col:14> 'int' <LValueToRValue>
|   |         | | `-DeclRefExpr 0x55edf9538928 <col:14> 'int' lvalue ParmVar 0x55edf9538088 'L' 'int'
|   |         | `-IntegerLiteral 0x55edf9538950 <col:19> 'int' 1024
|   |         |-BinaryOperator 0x55edf95389f8 <line:935:9, col:19> 'int' '='
|   |         | |-DeclRefExpr 0x55edf95389b0 <col:9> 'int' lvalue Var 0x55edf9538428 'secbits' 'int'
|   |         | `-IntegerLiteral 0x55edf95389d8 <col:19> 'int' 80
|   |         `-ReturnStmt 0x55edf9538a40 <line:937:9, col:16>
|   |           `-IntegerLiteral 0x55edf9538a20 <col:16> 'int' 0
|   |-IfStmt 0x55edf9538c70 <line:938:5, line:939:16>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x55edf9538bf0 <line:938:9, col:15> 'int' '=='
|   | | |-ImplicitCastExpr 0x55edf9538bd8 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x55edf9538b70 <col:9> 'int' lvalue ParmVar 0x55edf9538100 'N' 'int'
|   | | `-UnaryOperator 0x55edf9538bb8 <col:14, col:15> 'int' prefix '-'
|   | |   `-IntegerLiteral 0x55edf9538b98 <col:15> 'int' 1
|   | |-ReturnStmt 0x55edf9538c58 <line:939:9, col:16>
|   | | `-ImplicitCastExpr 0x55edf9538c40 <col:16> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x55edf9538c18 <col:16> 'int' lvalue Var 0x55edf9538428 'secbits' 'int'
|   | `-<<<NULL>>>
|   |-BinaryOperator 0x55edf9538d70 <line:940:5, col:16> 'int' '='
|   | |-DeclRefExpr 0x55edf9538ca8 <col:5> 'int' lvalue Var 0x55edf95384a0 'bits' 'int'
|   | `-BinaryOperator 0x55edf9538d48 <col:12, col:16> 'int' '/'
|   |   |-ImplicitCastExpr 0x55edf9538d30 <col:12> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x55edf9538ce8 <col:12> 'int' lvalue ParmVar 0x55edf9538100 'N' 'int'
|   |   `-IntegerLiteral 0x55edf9538d10 <col:16> 'int' 2
|   |-IfStmt 0x55edf9538e58 <line:941:5, line:942:16>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x55edf9538df8 <line:941:9, col:16> 'int' '<'
|   | | |-ImplicitCastExpr 0x55edf9538de0 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x55edf9538d98 <col:9> 'int' lvalue Var 0x55edf95384a0 'bits' 'int'
|   | | `-IntegerLiteral 0x55edf9538dc0 <col:16> 'int' 80
|   | |-ReturnStmt 0x55edf9538e40 <line:942:9, col:16>
|   | | `-IntegerLiteral 0x55edf9538e20 <col:16> 'int' 0
|   | `-<<<NULL>>>
|   `-ReturnStmt 0x55edf9538fe8 <line:943:5, col:40>
|     `-ConditionalOperator 0x55edf9538fb8 <col:12, col:40> 'int'
|       |-BinaryOperator 0x55edf9538f10 <col:12, col:20> 'int' '>='
|       | |-ImplicitCastExpr 0x55edf9538ee0 <col:12> 'int' <LValueToRValue>
|       | | `-DeclRefExpr 0x55edf9538e90 <col:12> 'int' lvalue Var 0x55edf95384a0 'bits' 'int'
|       | `-ImplicitCastExpr 0x55edf9538ef8 <col:20> 'int' <LValueToRValue>
|       |   `-DeclRefExpr 0x55edf9538eb8 <col:20> 'int' lvalue Var 0x55edf9538428 'secbits' 'int'
|       |-ImplicitCastExpr 0x55edf9538f88 <col:30> 'int' <LValueToRValue>
|       | `-DeclRefExpr 0x55edf9538f38 <col:30> 'int' lvalue Var 0x55edf9538428 'secbits' 'int'
|       `-ImplicitCastExpr 0x55edf9538fa0 <col:40> 'int' <LValueToRValue>
|         `-DeclRefExpr 0x55edf9538f60 <col:40> 'int' lvalue Var 0x55edf95384a0 'bits' 'int'
|-FunctionDecl 0x55edf95390e0 <line:946:1, line:951:1> line:946:6 invalid BN_zero_ex 'void (int *)'
| |-ParmVarDecl 0x55edf9539058 <col:17, col:25> col:25 invalid a 'int *'
| `-CompoundStmt 0x55edf95391e0 <line:947:1, line:951:1>
|-FunctionDecl 0x55edf9539738 <line:953:1, line:956:1> line:953:5 invalid BN_abs_is_word 'int (const int *, const int)'
| |-ParmVarDecl 0x55edf9539208 <col:20, col:34> col:34 invalid a 'const int *'
| |-ParmVarDecl 0x55edf9539660 <col:37, col:52> col:52 invalid w 'const int'
| `-CompoundStmt 0x55edf9539880 <line:954:1, line:956:1>
|-FunctionDecl 0x55edf9539938 <line:958:1, line:961:1> line:958:5 invalid BN_is_zero 'int (const int *)'
| |-ParmVarDecl 0x55edf95398a8 <col:16, col:30> col:30 invalid a 'const int *'
| `-CompoundStmt 0x55edf9539a18 <line:959:1, line:961:1>
|-FunctionDecl 0x55edf9539ad0 <line:963:1, line:966:1> line:963:5 invalid BN_is_one 'int (const int *)'
| |-ParmVarDecl 0x55edf9539a40 <col:15, col:29> col:29 invalid a 'const int *'
| `-CompoundStmt 0x55edf9539bb0 <line:964:1, line:966:1>
|-FunctionDecl 0x55edf9539ce8 <line:968:1, line:971:1> line:968:5 invalid BN_is_word 'int (const int *, const int)'
| |-ParmVarDecl 0x55edf9539bd8 <col:16, col:30> col:30 invalid a 'const int *'
| |-ParmVarDecl 0x55edf9539c50 <col:33, col:48> col:48 invalid w 'const int'
| `-CompoundStmt 0x55edf9539db0 <line:969:1, line:971:1>
|-FunctionDecl 0x55edf9539e68 <line:973:1, line:976:1> line:973:5 invalid BN_is_odd 'int (const int *)'
| |-ParmVarDecl 0x55edf9539dd8 <col:15, col:29> col:29 invalid a 'const int *'
| `-CompoundStmt 0x55edf9539f88 <line:974:1, line:976:1>
|-FunctionDecl 0x55edf953a040 <line:978:1, line:981:1> line:978:5 invalid BN_is_negative 'int (const int *)'
| |-ParmVarDecl 0x55edf9539fb0 <col:20, col:34> col:34 invalid a 'const int *'
| `-CompoundStmt 0x55edf953a120 <line:979:1, line:981:1>
|-FunctionDecl 0x55edf953a3a8 <line:983:1, line:987:1> line:983:5 invalid BN_to_montgomery 'int (int *, const int *, int *, int *)'
| |-ParmVarDecl 0x55edf953a148 <col:22, col:30> col:30 invalid r 'int *'
| |-ParmVarDecl 0x55edf953a1c0 <col:33, col:47> col:47 invalid a 'const int *'
| |-ParmVarDecl 0x55edf953a238 <col:50, col:63> col:63 invalid mont 'int *'
| |-ParmVarDecl 0x55edf953a2b0 <line:984:22, col:30> col:30 invalid ctx 'int *'
| `-CompoundStmt 0x55edf953a598 <line:985:1, line:987:1>
|-FunctionDecl 0x55edf953a7d0 <line:989:1, line:998:1> line:989:6 invalid BN_with_flags 'void (int *, const int *, int)'
| |-ParmVarDecl 0x55edf953a5c0 <col:20, col:28> col:28 invalid dest 'int *'
| |-ParmVarDecl 0x55edf953a670 <col:34, col:48> col:48 invalid b 'const int *'
| |-ParmVarDecl 0x55edf953a6e8 <col:51, col:55> col:55 used flags 'int'
| `-CompoundStmt 0x55edf953a8e0 <line:990:1, line:998:1>
|-FunctionDecl 0x55edf953a988 <line:1000:1, line:1010:1> line:1000:11 invalid BN_GENCB_new 'int *(void)'
| `-CompoundStmt 0x55edf953abe8 <line:1001:1, line:1010:1>
|   `-IfStmt 0x55edf953abb0 <line:1004:5, line:1007:5>
|     |-<<<NULL>>>
|     |-<<<NULL>>>
|     |-OpaqueValueExpr 0x55edf953ab90 <<invalid sloc>> '_Bool'
|     |-CompoundStmt 0x55edf953ab80 <line:1004:55, line:1007:5>
|     `-<<<NULL>>>
|-FunctionDecl 0x55edf953aca0 <line:1012:1, line:1017:1> line:1012:6 invalid BN_GENCB_free 'void (int *)'
| |-ParmVarDecl 0x55edf953ac18 <col:20, col:30> col:30 invalid cb 'int *'
| `-CompoundStmt 0x55edf953adf8 <line:1013:1, line:1017:1>
|   `-IfStmt 0x55edf953ad98 <line:1014:5, line:1015:9>
|     |-<<<NULL>>>
|     |-<<<NULL>>>
|     |-OpaqueValueExpr 0x55edf953ad78 <<invalid sloc>> '_Bool'
|     |-ReturnStmt 0x55edf953ad60 <col:9>
|     `-<<<NULL>>>
|-FunctionDecl 0x55edf953af30 <line:1019:1, line:1022:1> line:1019:6 invalid BN_set_flags 'void (int *, int)'
| |-ParmVarDecl 0x55edf953ae28 <col:19, col:27> col:27 invalid b 'int *'
| |-ParmVarDecl 0x55edf953aea0 <col:30, col:34> col:34 used n 'int'
| `-CompoundStmt 0x55edf953b038 <line:1020:1, line:1022:1>
|-FunctionDecl 0x55edf953b170 <line:1024:1, line:1027:1> line:1024:5 invalid BN_get_flags 'int (const int *, int)'
| |-ParmVarDecl 0x55edf953b060 <col:18, col:32> col:32 invalid b 'const int *'
| |-ParmVarDecl 0x55edf953b0d8 <col:35, col:39> col:39 used n 'int'
| `-CompoundStmt 0x55edf953b278 <line:1025:1, line:1027:1>
|-FunctionDecl 0x55edf953b750 <line:1030:1, line:1037:1> line:1030:6 invalid BN_GENCB_set_old 'void (int *, void (*)(int, int, void *), void *)'
| |-ParmVarDecl 0x55edf953b2a0 <col:23, col:33> col:33 invalid gencb 'int *'
| |-ParmVarDecl 0x55edf953b590 <col:40, col:74> col:47 used callback 'void (*)(int, int, void *)'
| |-ParmVarDecl 0x55edf953b608 <line:1031:23, col:29> col:29 used cb_arg 'void *'
| `-CompoundStmt 0x55edf953b8c0 <line:1032:1, line:1037:1>
|-FunctionDecl 0x55edf953bd80 <line:1040:1, line:1047:1> line:1040:6 invalid BN_GENCB_set 'void (int *, int (*)(int, int, int *), void *)'
| |-ParmVarDecl 0x55edf953b8e8 <col:19, col:29> col:29 invalid gencb 'int *'
| |-ParmVarDecl 0x55edf953bbd8 <col:36, col:73> col:42 used callback 'int (*)(int, int, int *)'
| |-ParmVarDecl 0x55edf953bc50 <line:1041:19, col:25> col:25 used cb_arg 'void *'
| `-CompoundStmt 0x55edf953bef0 <line:1042:1, line:1047:1>
|-FunctionDecl 0x55edf953bfe8 <line:1049:1, line:1052:1> line:1049:7 invalid BN_GENCB_get_arg 'void *(int *)'
| |-ParmVarDecl 0x55edf953bf18 <col:24, col:34> col:34 invalid cb 'int *'
| `-CompoundStmt 0x55edf953c0a8 <line:1050:1, line:1052:1>
|-FunctionDecl 0x55edf953c1e0 <line:1054:1, line:1057:1> line:1054:9 invalid bn_wexpand 'int *(int *, int)'
| |-ParmVarDecl 0x55edf953c0d0 <col:20, col:28> col:28 invalid a 'int *'
| |-ParmVarDecl 0x55edf953c148 <col:31, col:35> col:35 used words 'int'
| `-CompoundStmt 0x55edf953c310 <line:1055:1, line:1057:1>
`-FunctionDecl 0x55edf953c3c0 <line:1059:1, line:1076:1> line:1059:6 invalid bn_correct_top 'void (int *)'
  |-ParmVarDecl 0x55edf953c338 <col:21, col:29> col:29 invalid a 'int *'
  `-CompoundStmt 0x55edf953c978 <line:1060:1, line:1076:1>
    |-DeclStmt 0x55edf953c4f8 <line:1062:5, col:25>
    | `-VarDecl 0x55edf953c498 <col:5, col:9> col:9 used tmp_top 'int'
    `-IfStmt 0x55edf953c7e8 <line:1064:5, line:1071:5>
      |-<<<NULL>>>
      |-<<<NULL>>>
      |-BinaryOperator 0x55edf953c588 <line:1064:9, col:19> 'int' '>'
      | |-ImplicitCastExpr 0x55edf953c570 <col:9> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x55edf953c510 <col:9> 'int' lvalue Var 0x55edf953c498 'tmp_top' 'int'
      | `-IntegerLiteral 0x55edf953c550 <col:19> 'int' 0
      |-CompoundStmt 0x55edf953c7d0 <col:22, line:1071:5>
      | `-ForStmt 0x55edf953c770 <line:1065:9, line:1069:9>
      |   |-<<<NULL>>>
      |   |-<<<NULL>>>
      |   |-BinaryOperator 0x55edf953c638 <line:1065:38, col:48> 'int' '>'
      |   | |-ImplicitCastExpr 0x55edf953c620 <col:38> 'int' <LValueToRValue>
      |   | | `-DeclRefExpr 0x55edf953c5d8 <col:38> 'int' lvalue Var 0x55edf953c498 'tmp_top' 'int'
      |   | `-IntegerLiteral 0x55edf953c600 <col:48> 'int' 0
      |   |-UnaryOperator 0x55edf953c6b8 <col:51, col:58> 'int' postfix '--'
      |   | `-DeclRefExpr 0x55edf953c690 <col:51> 'int' lvalue Var 0x55edf953c498 'tmp_top' 'int'
      |   `-CompoundStmt 0x55edf953c758 <col:62, line:1069:9>
      |     `-IfStmt 0x55edf953c720 <line:1067:13, line:1068:17>
      |       |-<<<NULL>>>
      |       |-<<<NULL>>>
      |       |-OpaqueValueExpr 0x55edf953c700 <<invalid sloc>> '_Bool'
      |       |-BreakStmt 0x55edf953c6f8 <col:17>
      |       `-<<<NULL>>>
      `-<<<NULL>>>

